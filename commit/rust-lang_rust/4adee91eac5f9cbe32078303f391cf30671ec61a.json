{"sha": "4adee91eac5f9cbe32078303f391cf30671ec61a", "node_id": "C_kwDOAAsO6NoAKDRhZGVlOTFlYWM1ZjljYmUzMjA3ODMwM2YzOTFjZjMwNjcxZWM2MWE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-09T21:22:18Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-10T16:08:14Z"}, "message": "tests", "tree": {"sha": "d63b1cec2e0413ffc8ab5281d0424afbfe17f92a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63b1cec2e0413ffc8ab5281d0424afbfe17f92a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4adee91eac5f9cbe32078303f391cf30671ec61a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4adee91eac5f9cbe32078303f391cf30671ec61a", "html_url": "https://github.com/rust-lang/rust/commit/4adee91eac5f9cbe32078303f391cf30671ec61a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4adee91eac5f9cbe32078303f391cf30671ec61a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "html_url": "https://github.com/rust-lang/rust/commit/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157"}], "stats": {"total": 1238, "additions": 1117, "deletions": 121}, "files": [{"sha": "999302224eebf071313310d4dc73c71556a9255d", "filename": "tests/ui/transmutability/primitives/bool.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n-  --> $DIR/bool.rs:22:35\n+  --> $DIR/bool.rs:24:35\n    |\n LL |     assert::is_transmutable::<u8, bool>();\n    |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `bool`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/bool.rs:12:14\n+  --> $DIR/bool.rs:14:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function", "previous_filename": "tests/ui/transmutability/primitives/bool.stderr"}, {"sha": "999302224eebf071313310d4dc73c71556a9255d", "filename": "tests/ui/transmutability/primitives/bool.next.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+  --> $DIR/bool.rs:24:35\n+   |\n+LL |     assert::is_transmutable::<u8, bool>();\n+   |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `bool`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/bool.rs:14:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "de77cfc78aa8976af9cfa1a9f0336cbd11cefa2f", "filename": "tests/ui/transmutability/primitives/bool.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -1,8 +1,10 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n #![crate_type = \"lib\"]\n #![feature(transmutability)]\n #![allow(dead_code)]\n #![allow(incomplete_features)]\n-\n mod assert {\n     use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;"}, {"sha": "bbf1f1669995e40f2674b421729b2d2e749335fc", "filename": "tests/ui/transmutability/primitives/numbers.current.stderr", "status": "renamed", "additions": 114, "deletions": 114, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:62:40\n+  --> $DIR/numbers.rs:65:40\n    |\n LL |     assert::is_transmutable::<   i8,   i16>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -15,14 +15,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:63:40\n+  --> $DIR/numbers.rs:66:40\n    |\n LL |     assert::is_transmutable::<   i8,   u16>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -31,14 +31,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:64:40\n+  --> $DIR/numbers.rs:67:40\n    |\n LL |     assert::is_transmutable::<   i8,   i32>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -47,14 +47,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:65:40\n+  --> $DIR/numbers.rs:68:40\n    |\n LL |     assert::is_transmutable::<   i8,   f32>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -63,14 +63,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:66:40\n+  --> $DIR/numbers.rs:69:40\n    |\n LL |     assert::is_transmutable::<   i8,   u32>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -79,14 +79,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:67:40\n+  --> $DIR/numbers.rs:70:40\n    |\n LL |     assert::is_transmutable::<   i8,   u64>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -95,14 +95,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:68:40\n+  --> $DIR/numbers.rs:71:40\n    |\n LL |     assert::is_transmutable::<   i8,   i64>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -111,14 +111,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:69:40\n+  --> $DIR/numbers.rs:72:40\n    |\n LL |     assert::is_transmutable::<   i8,   f64>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -127,14 +127,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:70:39\n+  --> $DIR/numbers.rs:73:39\n    |\n LL |     assert::is_transmutable::<   i8,  u128>();\n    |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -143,14 +143,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:71:39\n+  --> $DIR/numbers.rs:74:39\n    |\n LL |     assert::is_transmutable::<   i8,  i128>();\n    |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -159,14 +159,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:73:40\n+  --> $DIR/numbers.rs:76:40\n    |\n LL |     assert::is_transmutable::<   u8,   i16>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -175,14 +175,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:74:40\n+  --> $DIR/numbers.rs:77:40\n    |\n LL |     assert::is_transmutable::<   u8,   u16>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -191,14 +191,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:75:40\n+  --> $DIR/numbers.rs:78:40\n    |\n LL |     assert::is_transmutable::<   u8,   i32>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -207,14 +207,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:76:40\n+  --> $DIR/numbers.rs:79:40\n    |\n LL |     assert::is_transmutable::<   u8,   f32>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -223,14 +223,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:77:40\n+  --> $DIR/numbers.rs:80:40\n    |\n LL |     assert::is_transmutable::<   u8,   u32>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -239,14 +239,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:78:40\n+  --> $DIR/numbers.rs:81:40\n    |\n LL |     assert::is_transmutable::<   u8,   u64>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -255,14 +255,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:79:40\n+  --> $DIR/numbers.rs:82:40\n    |\n LL |     assert::is_transmutable::<   u8,   i64>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -271,14 +271,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:80:40\n+  --> $DIR/numbers.rs:83:40\n    |\n LL |     assert::is_transmutable::<   u8,   f64>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -287,14 +287,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:81:39\n+  --> $DIR/numbers.rs:84:39\n    |\n LL |     assert::is_transmutable::<   u8,  u128>();\n    |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -303,14 +303,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:82:39\n+  --> $DIR/numbers.rs:85:39\n    |\n LL |     assert::is_transmutable::<   u8,  i128>();\n    |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -319,14 +319,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:84:40\n+  --> $DIR/numbers.rs:87:40\n    |\n LL |     assert::is_transmutable::<  i16,   i32>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -335,14 +335,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:85:40\n+  --> $DIR/numbers.rs:88:40\n    |\n LL |     assert::is_transmutable::<  i16,   f32>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -351,14 +351,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:86:40\n+  --> $DIR/numbers.rs:89:40\n    |\n LL |     assert::is_transmutable::<  i16,   u32>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -367,14 +367,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:87:40\n+  --> $DIR/numbers.rs:90:40\n    |\n LL |     assert::is_transmutable::<  i16,   u64>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -383,14 +383,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:88:40\n+  --> $DIR/numbers.rs:91:40\n    |\n LL |     assert::is_transmutable::<  i16,   i64>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -399,14 +399,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:89:40\n+  --> $DIR/numbers.rs:92:40\n    |\n LL |     assert::is_transmutable::<  i16,   f64>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -415,14 +415,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:90:39\n+  --> $DIR/numbers.rs:93:39\n    |\n LL |     assert::is_transmutable::<  i16,  u128>();\n    |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -431,14 +431,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:91:39\n+  --> $DIR/numbers.rs:94:39\n    |\n LL |     assert::is_transmutable::<  i16,  i128>();\n    |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -447,14 +447,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:93:40\n+  --> $DIR/numbers.rs:96:40\n    |\n LL |     assert::is_transmutable::<  u16,   i32>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -463,14 +463,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:94:40\n+  --> $DIR/numbers.rs:97:40\n    |\n LL |     assert::is_transmutable::<  u16,   f32>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -479,14 +479,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:95:40\n+  --> $DIR/numbers.rs:98:40\n    |\n LL |     assert::is_transmutable::<  u16,   u32>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -495,14 +495,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:96:40\n+  --> $DIR/numbers.rs:99:40\n    |\n LL |     assert::is_transmutable::<  u16,   u64>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -511,14 +511,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:97:40\n+  --> $DIR/numbers.rs:100:40\n    |\n LL |     assert::is_transmutable::<  u16,   i64>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -527,14 +527,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:98:40\n+  --> $DIR/numbers.rs:101:40\n    |\n LL |     assert::is_transmutable::<  u16,   f64>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -543,14 +543,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:99:39\n+  --> $DIR/numbers.rs:102:39\n    |\n LL |     assert::is_transmutable::<  u16,  u128>();\n    |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -559,14 +559,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:100:39\n+  --> $DIR/numbers.rs:103:39\n    |\n LL |     assert::is_transmutable::<  u16,  i128>();\n    |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -575,14 +575,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:102:40\n+  --> $DIR/numbers.rs:105:40\n    |\n LL |     assert::is_transmutable::<  i32,   u64>();\n    |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -591,14 +591,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:103:40\n+  --> $DIR/numbers.rs:106:40\n    |\n LL |     assert::is_transmutable::<  i32,   i64>();\n    |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -607,14 +607,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:104:40\n+  --> $DIR/numbers.rs:107:40\n    |\n LL |     assert::is_transmutable::<  i32,   f64>();\n    |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -623,14 +623,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:105:39\n+  --> $DIR/numbers.rs:108:39\n    |\n LL |     assert::is_transmutable::<  i32,  u128>();\n    |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -639,14 +639,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:106:39\n+  --> $DIR/numbers.rs:109:39\n    |\n LL |     assert::is_transmutable::<  i32,  i128>();\n    |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -655,14 +655,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:108:40\n+  --> $DIR/numbers.rs:111:40\n    |\n LL |     assert::is_transmutable::<  f32,   u64>();\n    |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -671,14 +671,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:109:40\n+  --> $DIR/numbers.rs:112:40\n    |\n LL |     assert::is_transmutable::<  f32,   i64>();\n    |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -687,14 +687,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:110:40\n+  --> $DIR/numbers.rs:113:40\n    |\n LL |     assert::is_transmutable::<  f32,   f64>();\n    |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -703,14 +703,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:111:39\n+  --> $DIR/numbers.rs:114:39\n    |\n LL |     assert::is_transmutable::<  f32,  u128>();\n    |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -719,14 +719,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:112:39\n+  --> $DIR/numbers.rs:115:39\n    |\n LL |     assert::is_transmutable::<  f32,  i128>();\n    |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -735,14 +735,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:114:40\n+  --> $DIR/numbers.rs:117:40\n    |\n LL |     assert::is_transmutable::<  u32,   u64>();\n    |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -751,14 +751,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:115:40\n+  --> $DIR/numbers.rs:118:40\n    |\n LL |     assert::is_transmutable::<  u32,   i64>();\n    |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -767,14 +767,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:116:40\n+  --> $DIR/numbers.rs:119:40\n    |\n LL |     assert::is_transmutable::<  u32,   f64>();\n    |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -783,14 +783,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:117:39\n+  --> $DIR/numbers.rs:120:39\n    |\n LL |     assert::is_transmutable::<  u32,  u128>();\n    |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -799,14 +799,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:118:39\n+  --> $DIR/numbers.rs:121:39\n    |\n LL |     assert::is_transmutable::<  u32,  i128>();\n    |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -815,14 +815,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:120:39\n+  --> $DIR/numbers.rs:123:39\n    |\n LL |     assert::is_transmutable::<  u64,  u128>();\n    |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -831,14 +831,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:121:39\n+  --> $DIR/numbers.rs:124:39\n    |\n LL |     assert::is_transmutable::<  u64,  i128>();\n    |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -847,14 +847,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:123:39\n+  --> $DIR/numbers.rs:126:39\n    |\n LL |     assert::is_transmutable::<  i64,  u128>();\n    |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -863,14 +863,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:124:39\n+  --> $DIR/numbers.rs:127:39\n    |\n LL |     assert::is_transmutable::<  i64,  i128>();\n    |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -879,14 +879,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:126:39\n+  --> $DIR/numbers.rs:129:39\n    |\n LL |     assert::is_transmutable::<  f64,  u128>();\n    |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function\n@@ -895,14 +895,14 @@ LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n-  --> $DIR/numbers.rs:127:39\n+  --> $DIR/numbers.rs:130:39\n    |\n LL |     assert::is_transmutable::<  f64,  i128>();\n    |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/numbers.rs:12:14\n+  --> $DIR/numbers.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function", "previous_filename": "tests/ui/transmutability/primitives/numbers.stderr"}, {"sha": "bbf1f1669995e40f2674b421729b2d2e749335fc", "filename": "tests/ui/transmutability/primitives/numbers.next.stderr", "status": "added", "additions": 915, "deletions": 0, "changes": 915, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -0,0 +1,915 @@\n+error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:65:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   i16>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:66:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   u16>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:67:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   i32>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:68:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   f32>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:69:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   u32>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:70:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   u64>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:71:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   i64>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:72:40\n+   |\n+LL |     assert::is_transmutable::<   i8,   f64>();\n+   |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:73:39\n+   |\n+LL |     assert::is_transmutable::<   i8,  u128>();\n+   |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:74:39\n+   |\n+LL |     assert::is_transmutable::<   i8,  i128>();\n+   |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:76:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   i16>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:77:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   u16>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:78:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   i32>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:79:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   f32>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:80:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   u32>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:81:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   u64>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:82:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   i64>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:83:40\n+   |\n+LL |     assert::is_transmutable::<   u8,   f64>();\n+   |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:84:39\n+   |\n+LL |     assert::is_transmutable::<   u8,  u128>();\n+   |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:85:39\n+   |\n+LL |     assert::is_transmutable::<   u8,  i128>();\n+   |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:87:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   i32>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:88:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   f32>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:89:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   u32>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:90:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   u64>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:91:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   i64>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:92:40\n+   |\n+LL |     assert::is_transmutable::<  i16,   f64>();\n+   |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:93:39\n+   |\n+LL |     assert::is_transmutable::<  i16,  u128>();\n+   |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:94:39\n+   |\n+LL |     assert::is_transmutable::<  i16,  i128>();\n+   |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:96:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   i32>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:97:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   f32>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:98:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   u32>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:99:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   u64>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:100:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   i64>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:101:40\n+   |\n+LL |     assert::is_transmutable::<  u16,   f64>();\n+   |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:102:39\n+   |\n+LL |     assert::is_transmutable::<  u16,  u128>();\n+   |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:103:39\n+   |\n+LL |     assert::is_transmutable::<  u16,  i128>();\n+   |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:105:40\n+   |\n+LL |     assert::is_transmutable::<  i32,   u64>();\n+   |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:106:40\n+   |\n+LL |     assert::is_transmutable::<  i32,   i64>();\n+   |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:107:40\n+   |\n+LL |     assert::is_transmutable::<  i32,   f64>();\n+   |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:108:39\n+   |\n+LL |     assert::is_transmutable::<  i32,  u128>();\n+   |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:109:39\n+   |\n+LL |     assert::is_transmutable::<  i32,  i128>();\n+   |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:111:40\n+   |\n+LL |     assert::is_transmutable::<  f32,   u64>();\n+   |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:112:40\n+   |\n+LL |     assert::is_transmutable::<  f32,   i64>();\n+   |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:113:40\n+   |\n+LL |     assert::is_transmutable::<  f32,   f64>();\n+   |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:114:39\n+   |\n+LL |     assert::is_transmutable::<  f32,  u128>();\n+   |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:115:39\n+   |\n+LL |     assert::is_transmutable::<  f32,  i128>();\n+   |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:117:40\n+   |\n+LL |     assert::is_transmutable::<  u32,   u64>();\n+   |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:118:40\n+   |\n+LL |     assert::is_transmutable::<  u32,   i64>();\n+   |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:119:40\n+   |\n+LL |     assert::is_transmutable::<  u32,   f64>();\n+   |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:120:39\n+   |\n+LL |     assert::is_transmutable::<  u32,  u128>();\n+   |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:121:39\n+   |\n+LL |     assert::is_transmutable::<  u32,  i128>();\n+   |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:123:39\n+   |\n+LL |     assert::is_transmutable::<  u64,  u128>();\n+   |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:124:39\n+   |\n+LL |     assert::is_transmutable::<  u64,  i128>();\n+   |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:126:39\n+   |\n+LL |     assert::is_transmutable::<  i64,  u128>();\n+   |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:127:39\n+   |\n+LL |     assert::is_transmutable::<  i64,  i128>();\n+   |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:129:39\n+   |\n+LL |     assert::is_transmutable::<  f64,  u128>();\n+   |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+  --> $DIR/numbers.rs:130:39\n+   |\n+LL |     assert::is_transmutable::<  f64,  i128>();\n+   |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/numbers.rs:15:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error: aborting due to 57 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e980e91ed06a61b7e43979dcf6217a58da3a22f7", "filename": "tests/ui/transmutability/primitives/numbers.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n #![crate_type = \"lib\"]\n #![feature(transmutability)]\n #![allow(dead_code)]"}, {"sha": "c20355e16f5f4c8db6589115949a452771df3e36", "filename": "tests/ui/transmutability/primitives/unit.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n-  --> $DIR/unit.rs:28:35\n+  --> $DIR/unit.rs:31:35\n    |\n LL |     assert::is_transmutable::<(), u8, Context>();\n    |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u8`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/unit.rs:12:14\n+  --> $DIR/unit.rs:15:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n    |              --------------- required by a bound in this function", "previous_filename": "tests/ui/transmutability/primitives/unit.stderr"}, {"sha": "c20355e16f5f4c8db6589115949a452771df3e36", "filename": "tests/ui/transmutability/primitives/unit.next.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+  --> $DIR/unit.rs:31:35\n+   |\n+LL |     assert::is_transmutable::<(), u8, Context>();\n+   |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u8`\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/unit.rs:15:14\n+   |\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this function\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "12eac175106e66e18c6414865ea0e0d88762637c", "filename": "tests/ui/transmutability/primitives/unit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n //! The unit type, `()`, should be one byte.\n \n #![crate_type = \"lib\"]"}, {"sha": "39d42cc4fa6c82bf9372a63b60f7164df13dcca6", "filename": "tests/ui/transmutability/references.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.current.stderr?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n-  --> $DIR/references.rs:26:52\n+  --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n    |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`\n-  --> $DIR/references.rs:13:14\n+  --> $DIR/references.rs:16:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n    |              --------------------- required by a bound in this function", "previous_filename": "tests/ui/transmutability/references.stderr"}, {"sha": "39d42cc4fa6c82bf9372a63b60f7164df13dcca6", "filename": "tests/ui/transmutability/references.next.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.next.stderr?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -0,0 +1,26 @@\n+error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+  --> $DIR/references.rs:29:52\n+   |\n+LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n+   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+   |\n+   = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `&'static Unit`\n+note: required by a bound in `is_maybe_transmutable`\n+  --> $DIR/references.rs:16:14\n+   |\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this function\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8c2b25ebba1e3ab5c12edd7305a2694cdcd8c791", "filename": "tests/ui/transmutability/references.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adee91eac5f9cbe32078303f391cf30671ec61a/tests%2Fui%2Ftransmutability%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.rs?ref=4adee91eac5f9cbe32078303f391cf30671ec61a", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n //! Transmutations involving references are not yet supported.\n \n #![crate_type = \"lib\"]"}]}