{"sha": "97003e56991d3e475f2d4bb18a88c768018041e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDAzZTU2OTkxZDNlNDc1ZjJkNGJiMThhODhjNzY4MDE4MDQxZTk=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-10T04:13:34Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-10T04:13:34Z"}, "message": "Switch around Examples and Alternatives", "tree": {"sha": "98b0be17805bbd6be8e22a1217e01cd0bba2dd08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98b0be17805bbd6be8e22a1217e01cd0bba2dd08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97003e56991d3e475f2d4bb18a88c768018041e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97003e56991d3e475f2d4bb18a88c768018041e9", "html_url": "https://github.com/rust-lang/rust/commit/97003e56991d3e475f2d4bb18a88c768018041e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97003e56991d3e475f2d4bb18a88c768018041e9/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eabff5b5ade1cdef3e4b4d3479c45798425ff6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eabff5b5ade1cdef3e4b4d3479c45798425ff6a", "html_url": "https://github.com/rust-lang/rust/commit/7eabff5b5ade1cdef3e4b4d3479c45798425ff6a"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "ab7545d37dc9ed33963c59ad2888793e5342b88f", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 48, "deletions": 45, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/97003e56991d3e475f2d4bb18a88c768018041e9/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97003e56991d3e475f2d4bb18a88c768018041e9/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=97003e56991d3e475f2d4bb18a88c768018041e9", "patch": "@@ -294,11 +294,56 @@ extern \"rust-intrinsic\" {\n     /// The [nomicon](../../nomicon/transmutes.html) has additional\n     /// documentation.\n     ///\n+    /// # Examples\n+    ///\n+    /// There are a few things that `transmute` is really useful for.\n+    ///\n+    /// Getting the bitpattern of a floating point type (or, more generally,\n+    /// type punning, when T and U aren't pointers):\n+    ///\n+    /// ```\n+    /// let bitpattern = unsafe {\n+    ///     std::mem::transmute::<f32, u32>(1.0)\n+    /// };\n+    /// assert_eq!(bitpattern, 0x3F800000);\n+    /// ```\n+    ///\n+    /// Turning a pointer into a function pointer:\n+    ///\n+    /// ```\n+    /// fn foo() -> i32 {\n+    ///     0\n+    /// }\n+    /// let pointer = foo as *const ();\n+    /// let function = unsafe {\n+    ///     std::mem::transmute::<*const (), fn() -> i32>(pointer)\n+    /// };\n+    /// assert_eq!(function(), 0);\n+    /// ```\n+    ///\n+    /// Extending a lifetime, or shortening an invariant lifetime; this is\n+    /// advanced, very unsafe rust:\n+    ///\n+    /// ```\n+    /// struct R<'a>(&'a i32);\n+    /// unsafe fn extend_lifetime<'b>(r: R<'b>) -> R<'static> {\n+    ///     std::mem::transmute::<R<'b>, R<'static>>(r)\n+    /// }\n+    ///\n+    /// unsafe fn shorten_invariant_lifetime<'b, 'c>(r: &'b mut R<'static>)\n+    ///                                              -> &'b mut R<'c> {\n+    ///     std::mem::transmute::<&'b mut R<'static>, &'b mut R<'c>>(r)\n+    /// }\n+    /// ```\n+    ///\n     /// # Alternatives\n     ///\n-    /// There are very few good cases for `transmute`. Most can be achieved\n-    /// through other means. Some more or less common uses, and a better way,\n-    /// are as follows:\n+    /// However, many uses of `transmute` can be achieved through other means.\n+    /// This is unfortunate because either `transmute` isn't guaranteed to work\n+    /// in that case, and only does because of rustc's current implemenation;\n+    /// or, more commonly, `transmute` is just too powerful. It can transform\n+    /// any type into any other, with just the caveat that they're the same\n+    /// size. Some more or less common uses, and a better way, are as follows:\n     ///\n     /// Turning a pointer into a `usize`:\n     ///\n@@ -428,48 +473,6 @@ extern \"rust-intrinsic\" {\n     ///     }\n     /// }\n     /// ```\n-    ///\n-    /// # Examples\n-    ///\n-    /// There are valid uses of transmute, though they are few and far between.\n-    ///\n-    /// Getting the bitpattern of a floating point type:\n-    ///\n-    /// ```\n-    /// let bitpattern = unsafe {\n-    ///     std::mem::transmute::<f32, u32>(1.0)\n-    /// };\n-    /// assert_eq!(bitpattern, 0x3F800000);\n-    /// ```\n-    ///\n-    /// Turning a pointer into a function pointer (this is not guaranteed to\n-    /// work in Rust, although, for example, Linux does make this guarantee):\n-    ///\n-    /// ```\n-    /// fn foo() -> i32 {\n-    ///     0\n-    /// }\n-    /// let pointer = foo as *const ();\n-    /// let function = unsafe {\n-    ///     std::mem::transmute::<*const (), fn() -> i32>(pointer)\n-    /// };\n-    /// assert_eq!(function(), 0);\n-    /// ```\n-    ///\n-    /// Extending a lifetime, or shortening an invariant lifetime; this is\n-    /// advanced, very unsafe rust:\n-    ///\n-    /// ```\n-    /// struct R<'a>(&'a i32);\n-    /// unsafe fn extend_lifetime<'b>(r: R<'b>) -> R<'static> {\n-    ///     std::mem::transmute::<R<'b>, R<'static>>(r)\n-    /// }\n-    ///\n-    /// unsafe fn shorten_invariant_lifetime<'b, 'c>(r: &'b mut R<'static>)\n-    ///                                              -> &'b mut R<'c> {\n-    ///     std::mem::transmute::<&'b mut R<'static>, &'b mut R<'c>>(r)\n-    /// }\n-    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn transmute<T, U>(e: T) -> U;\n "}]}