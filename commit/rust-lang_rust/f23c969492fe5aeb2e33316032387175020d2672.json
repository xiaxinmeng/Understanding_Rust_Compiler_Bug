{"sha": "f23c969492fe5aeb2e33316032387175020d2672", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyM2M5Njk0OTJmZTVhZWIyZTMzMzE2MDMyMzg3MTc1MDIwZDI2NzI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-04T23:44:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-25T06:54:06Z"}, "message": "Introduce `in_snapshot` and `assert_open_snapshot` methods.\n\nThis makes the two snapshot implementations more consistent with each\nother and with crate `ena`.", "tree": {"sha": "cdd58613eec51d95ba7bdacedfe31521c99cc173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdd58613eec51d95ba7bdacedfe31521c99cc173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f23c969492fe5aeb2e33316032387175020d2672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f23c969492fe5aeb2e33316032387175020d2672", "html_url": "https://github.com/rust-lang/rust/commit/f23c969492fe5aeb2e33316032387175020d2672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f23c969492fe5aeb2e33316032387175020d2672/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5624e41e819bb85408eba7b3abd550f61a2857a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5624e41e819bb85408eba7b3abd550f61a2857a", "html_url": "https://github.com/rust-lang/rust/commit/f5624e41e819bb85408eba7b3abd550f61a2857a"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "231eff9ff9fd70b61701379cb3566f13788d7465", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f23c969492fe5aeb2e33316032387175020d2672/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23c969492fe5aeb2e33316032387175020d2672/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=f23c969492fe5aeb2e33316032387175020d2672", "patch": "@@ -429,10 +429,14 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n     }\n \n-    pub fn commit(&mut self, snapshot: RegionSnapshot) {\n-        debug!(\"RegionConstraintCollector: commit({})\", snapshot.length);\n+    fn assert_open_snapshot(&self, snapshot: &RegionSnapshot) {\n         assert!(self.undo_log.len() > snapshot.length);\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n+    }\n+\n+    pub fn commit(&mut self, snapshot: RegionSnapshot) {\n+        debug!(\"RegionConstraintCollector: commit({})\", snapshot.length);\n+        self.assert_open_snapshot(&snapshot);\n \n         if snapshot.length == 0 {\n             self.undo_log.clear();\n@@ -444,8 +448,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n     pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {\n         debug!(\"RegionConstraintCollector: rollback_to({:?})\", snapshot);\n-        assert!(self.undo_log.len() > snapshot.length);\n-        assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n+        self.assert_open_snapshot(&snapshot);\n         while self.undo_log.len() > snapshot.length + 1 {\n             let undo_entry = self.undo_log.pop().unwrap();\n             self.rollback_undo_entry(undo_entry);"}, {"sha": "a480499a30c3c03e7bc83fbf7ce9307f81d04b46", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f23c969492fe5aeb2e33316032387175020d2672/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23c969492fe5aeb2e33316032387175020d2672/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=f23c969492fe5aeb2e33316032387175020d2672", "patch": "@@ -55,16 +55,20 @@ impl<K, V> SnapshotMap<K, V>\n         self.undo_log.clear();\n     }\n \n+    fn in_snapshot(&self) -> bool {\n+        !self.undo_log.is_empty()\n+    }\n+\n     pub fn insert(&mut self, key: K, value: V) -> bool {\n         match self.map.insert(key.clone(), value) {\n             None => {\n-                if !self.undo_log.is_empty() {\n+                if self.in_snapshot() {\n                     self.undo_log.push(UndoLog::Inserted(key));\n                 }\n                 true\n             }\n             Some(old_value) => {\n-                if !self.undo_log.is_empty() {\n+                if self.in_snapshot() {\n                     self.undo_log.push(UndoLog::Overwrite(key, old_value));\n                 }\n                 false\n@@ -75,7 +79,7 @@ impl<K, V> SnapshotMap<K, V>\n     pub fn remove(&mut self, key: K) -> bool {\n         match self.map.remove(&key) {\n             Some(old_value) => {\n-                if !self.undo_log.is_empty() {\n+                if self.in_snapshot() {\n                     self.undo_log.push(UndoLog::Overwrite(key, old_value));\n                 }\n                 true"}]}