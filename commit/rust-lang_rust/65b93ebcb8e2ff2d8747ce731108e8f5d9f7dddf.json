{"sha": "65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YjkzZWJjYjhlMmZmMmQ4NzQ3Y2U3MzExMDhlOGY1ZDlmN2RkZGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-28T12:01:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-03T01:37:13Z"}, "message": "introduce `LintTable`", "tree": {"sha": "bb2f6a331874b9639beea607b4f18dc21dd2cbb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2f6a331874b9639beea607b4f18dc21dd2cbb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "html_url": "https://github.com/rust-lang/rust/commit/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93e0bc6520b8d1e1ae0e886cdf7b083073e40be8", "url": "https://api.github.com/repos/rust-lang/rust/commits/93e0bc6520b8d1e1ae0e886cdf7b083073e40be8", "html_url": "https://github.com/rust-lang/rust/commit/93e0bc6520b8d1e1ae0e886cdf7b083073e40be8"}], "stats": {"total": 100, "additions": 75, "deletions": 25}, "files": [{"sha": "edf5666a3a5f7f438862967ef6d7244218fb83b0", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "patch": "@@ -773,11 +773,10 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n \n     // Output any lints that were previously added to the session.\n     fn visit_id(&mut self, id: ast::NodeId) {\n-        if let Some(lints) = self.sess().lints.borrow_mut().remove(&id) {\n-            debug!(\"LateContext::visit_id: id={:?} lints={:?}\", id, lints);\n-            for early_lint in lints {\n-                self.early_lint(early_lint);\n-            }\n+        let lints = self.sess().lints.borrow_mut().take(id);\n+        for early_lint in lints {\n+            debug!(\"LateContext::visit_id: id={:?} early_lint={:?}\", id, early_lint);\n+            self.early_lint(early_lint);\n         }\n     }\n \n@@ -1232,7 +1231,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // If we missed any lints added to the session, then there's a bug somewhere\n     // in the iteration code.\n-    for (id, v) in tcx.sess.lints.borrow().iter() {\n+    if let Some((id, v)) = tcx.sess.lints.borrow().get_any() {\n         for early_lint in v {\n             span_bug!(early_lint.diagnostic.span.clone(),\n                       \"unprocessed lint {:?} at {}\",\n@@ -1250,10 +1249,9 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // Visit the whole crate.\n     cx.with_lint_attrs(&krate.attrs, |cx| {\n         // Lints may be assigned to the whole crate.\n-        if let Some(lints) = cx.sess.lints.borrow_mut().remove(&ast::CRATE_NODE_ID) {\n-            for early_lint in lints {\n-                cx.early_lint(early_lint);\n-            }\n+        let lints = cx.sess.lints.borrow_mut().take(ast::CRATE_NODE_ID);\n+        for early_lint in lints {\n+            cx.early_lint(early_lint);\n         }\n \n         // since the root module isn't visited as an item (because it isn't an\n@@ -1270,7 +1268,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n \n     // If we missed any lints added to the session, then there's a bug somewhere\n     // in the iteration code.\n-    for (_, v) in sess.lints.borrow().iter() {\n+    for (_, v) in sess.lints.borrow().get_any() {\n         for early_lint in v {\n             span_bug!(early_lint.diagnostic.span.clone(), \"unprocessed lint {:?}\", early_lint);\n         }"}, {"sha": "704e32e2d0c1a782ea9ec406b0ea8b4642db4e7a", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "patch": "@@ -43,6 +43,8 @@ pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,\n                         raw_struct_lint, FutureIncompatibleInfo, EarlyLint, IntoEarlyLint};\n \n+pub use lint::table::LintTable;\n+\n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]\n pub struct Lint {\n@@ -346,3 +348,4 @@ pub type LevelSource = (Level, LintSource);\n \n pub mod builtin;\n mod context;\n+mod table;"}, {"sha": "3b6d268b08fb08219717d44420cc6b3d50b7fda7", "filename": "src/librustc/lint/table.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf/src%2Flibrustc%2Flint%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf/src%2Flibrustc%2Flint%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Ftable.rs?ref=65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "patch": "@@ -0,0 +1,56 @@\n+use syntax::ast;\n+use syntax_pos::MultiSpan;\n+use util::nodemap::NodeMap;\n+\n+use super::{Lint, LintId, EarlyLint, IntoEarlyLint};\n+\n+pub struct LintTable {\n+    map: NodeMap<Vec<EarlyLint>>\n+}\n+\n+impl LintTable {\n+    pub fn new() -> Self {\n+        LintTable { map: NodeMap() }\n+    }\n+\n+    pub fn add_lint<S: Into<MultiSpan>>(&mut self,\n+                                        lint: &'static Lint,\n+                                        id: ast::NodeId,\n+                                        sp: S,\n+                                        msg: String)\n+    {\n+        self.add_lint_diagnostic(lint, id, (sp, &msg[..]))\n+    }\n+\n+    pub fn add_lint_diagnostic<M>(&mut self,\n+                                  lint: &'static Lint,\n+                                  id: ast::NodeId,\n+                                  msg: M)\n+        where M: IntoEarlyLint,\n+    {\n+        let lint_id = LintId::of(lint);\n+        let early_lint = msg.into_early_lint(lint_id);\n+        let arr = self.map.entry(id).or_insert(vec![]);\n+        if !arr.contains(&early_lint) {\n+            arr.push(early_lint);\n+        }\n+    }\n+\n+    pub fn get(&self, id: ast::NodeId) -> &[EarlyLint] {\n+        self.map.get(&id).map(|v| &v[..]).unwrap_or(&[])\n+    }\n+\n+    pub fn take(&mut self, id: ast::NodeId) -> Vec<EarlyLint> {\n+        self.map.remove(&id).unwrap_or(vec![])\n+    }\n+\n+    /// Returns the first (id, lint) pair that is non-empty. Used to\n+    /// implement a sanity check in lints that all node-ids are\n+    /// visited.\n+    pub fn get_any(&self) -> Option<(&ast::NodeId, &Vec<EarlyLint>)> {\n+        self.map.iter()\n+                .filter(|&(_, v)| !v.is_empty())\n+                .next()\n+    }\n+}\n+"}, {"sha": "f10ea3544f2cae7566189ae262e5ab43bce6ca63", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=65b93ebcb8e2ff2d8747ce731108e8f5d9f7dddf", "patch": "@@ -20,7 +20,7 @@ use middle::dependency_format;\n use session::search_paths::PathKind;\n use session::config::DebugInfoLevel;\n use ty::tls;\n-use util::nodemap::{NodeMap, FxHashMap, FxHashSet};\n+use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::duration_to_secs_str;\n use mir::transform as mir_pass;\n \n@@ -78,7 +78,7 @@ pub struct Session {\n     pub local_crate_source_file: Option<PathBuf>,\n     pub working_dir: PathBuf,\n     pub lint_store: RefCell<lint::LintStore>,\n-    pub lints: RefCell<NodeMap<Vec<lint::EarlyLint>>>,\n+    pub lints: RefCell<lint::LintTable>,\n     /// Set of (LintId, span, message) tuples tracking lint (sub)diagnostics\n     /// that have been set once, but should not be set again, in order to avoid\n     /// redundantly verbose output (Issue #24690).\n@@ -270,13 +270,14 @@ impl Session {\n     pub fn unimpl(&self, msg: &str) -> ! {\n         self.diagnostic().unimpl(msg)\n     }\n+\n     pub fn add_lint<S: Into<MultiSpan>>(&self,\n                                         lint: &'static lint::Lint,\n                                         id: ast::NodeId,\n                                         sp: S,\n                                         msg: String)\n     {\n-        self.add_lint_diagnostic(lint, id, (sp, &msg[..]))\n+        self.lints.borrow_mut().add_lint(lint, id, sp, msg);\n     }\n \n     pub fn add_lint_diagnostic<M>(&self,\n@@ -285,17 +286,9 @@ impl Session {\n                                   msg: M)\n         where M: lint::IntoEarlyLint,\n     {\n-        let lint_id = lint::LintId::of(lint);\n-        let mut lints = self.lints.borrow_mut();\n-        let early_lint = msg.into_early_lint(lint_id);\n-        if let Some(arr) = lints.get_mut(&id) {\n-            if !arr.contains(&early_lint) {\n-                arr.push(early_lint);\n-            }\n-            return;\n-        }\n-        lints.insert(id, vec![early_lint]);\n+        self.lints.borrow_mut().add_lint_diagnostic(lint, id, msg);\n     }\n+\n     pub fn reserve_node_ids(&self, count: usize) -> ast::NodeId {\n         let id = self.next_node_id.get();\n \n@@ -617,7 +610,7 @@ pub fn build_session_(sopts: config::Options,\n         local_crate_source_file: local_crate_source_file,\n         working_dir: env::current_dir().unwrap(),\n         lint_store: RefCell::new(lint::LintStore::new()),\n-        lints: RefCell::new(NodeMap()),\n+        lints: RefCell::new(lint::LintTable::new()),\n         one_time_diagnostics: RefCell::new(FxHashSet()),\n         plugin_llvm_passes: RefCell::new(Vec::new()),\n         mir_passes: RefCell::new(mir_pass::Passes::new()),"}]}