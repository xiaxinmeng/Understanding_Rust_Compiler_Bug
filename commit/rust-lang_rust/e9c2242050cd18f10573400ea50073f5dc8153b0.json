{"sha": "e9c2242050cd18f10573400ea50073f5dc8153b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YzIyNDIwNTBjZDE4ZjEwNTczNDAwZWE1MDA3M2Y1ZGM4MTUzYjA=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T22:41:26Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T22:41:26Z"}, "message": "Remove step.rs comments", "tree": {"sha": "86f499dbfbc8cbc3580529be4de0a23280fd38df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f499dbfbc8cbc3580529be4de0a23280fd38df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9c2242050cd18f10573400ea50073f5dc8153b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c2242050cd18f10573400ea50073f5dc8153b0", "html_url": "https://github.com/rust-lang/rust/commit/e9c2242050cd18f10573400ea50073f5dc8153b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9c2242050cd18f10573400ea50073f5dc8153b0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8563280bec619bca0833074657ec033e1aa0b50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8563280bec619bca0833074657ec033e1aa0b50a", "html_url": "https://github.com/rust-lang/rust/commit/8563280bec619bca0833074657ec033e1aa0b50a"}], "stats": {"total": 750, "additions": 1, "deletions": 749}, "files": [{"sha": "16f14638b51c5bf21ae6268d5e456b572487c17b", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 0, "deletions": 231, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=e9c2242050cd18f10573400ea50073f5dc8153b0", "patch": "@@ -87,13 +87,6 @@ fn try_run_quiet(build: &Build, cmd: &mut Command) {\n     }\n }\n \n-// rules.test(\"check-linkchecker\", \"src/tools/linkchecker\")\n-//      .dep(|s| s.name(\"tool-linkchecker\").stage(0))\n-//      .dep(|s| s.name(\"default:doc\"))\n-//      .default(build.config.docs)\n-//      .host(true)\n-//      .run(move |s| check::linkcheck(build, s.target));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Linkcheck {\n     host: Interned<String>,\n@@ -141,12 +134,6 @@ impl Step for Linkcheck {\n     }\n }\n \n-// rules.test(\"check-cargotest\", \"src/tools/cargotest\")\n-//      .dep(|s| s.name(\"tool-cargotest\").stage(0))\n-//      .dep(|s| s.name(\"librustc\"))\n-//      .host(true)\n-//      .run(move |s| check::cargotest(build, s.stage, s.target));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Cargotest {\n     stage: u32,\n@@ -197,11 +184,6 @@ impl Step for Cargotest {\n     }\n }\n \n-//rules.test(\"check-cargo\", \"cargo\")\n-//     .dep(|s| s.name(\"tool-cargo\"))\n-//     .host(true)\n-//     .run(move |s| check::cargo(build, s.stage, s.target));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Cargo {\n     stage: u32,\n@@ -257,10 +239,6 @@ pub struct Rls {\n     host: Interned<String>,\n }\n \n-//    rules.test(\"check-rls\", \"src/tools/rls\")\n-//         .dep(|s| s.name(\"tool-rls\"))\n-//         .host(true)\n-//         .run(move |s| check::rls(build, s.stage, s.target));\n impl Step for Rls {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n@@ -310,13 +288,6 @@ fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n     env::join_paths(iter::once(path).chain(env::split_paths(&old_path))).expect(\"\")\n }\n \n-//rules.test(\"check-tidy\", \"src/tools/tidy\")\n-//     .dep(|s| s.name(\"tool-tidy\").stage(0))\n-//     .default(true)\n-//     .host(true)\n-//     .only_build(true)\n-//     .run(move |s| check::tidy(build, s.target));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Tidy {\n     host: Interned<String>,\n@@ -370,104 +341,6 @@ fn testdir(build: &Build, host: Interned<String>) -> PathBuf {\n     build.out.join(host).join(\"test\")\n }\n \n-//    // ========================================================================\n-//    // Test targets\n-//    //\n-//    // Various unit tests and tests suites we can run\n-//    {\n-//        let mut suite = |name, path, mode, dir| {\n-//            rules.test(name, path)\n-//                 .dep(|s| s.name(\"libtest\"))\n-//                 .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n-//                 .dep(|s| s.name(\"test-helpers\"))\n-//                 .dep(|s| s.name(\"remote-copy-libs\"))\n-//                 .default(mode != \"pretty\") // pretty tests don't run everywhere\n-//                 .run(move |s| {\n-//                     check::compiletest(build, &s.compiler(), s.target, mode, dir)\n-//                 });\n-//        };\n-//\n-//        suite(\"check-ui\", \"src/test/ui\", \"ui\", \"ui\");\n-//        suite(\"check-rpass\", \"src/test/run-pass\", \"run-pass\", \"run-pass\");\n-//        suite(\"check-cfail\", \"src/test/compile-fail\", \"compile-fail\", \"compile-fail\");\n-//        suite(\"check-pfail\", \"src/test/parse-fail\", \"parse-fail\", \"parse-fail\");\n-//        suite(\"check-rfail\", \"src/test/run-fail\", \"run-fail\", \"run-fail\");\n-//        suite(\"check-rpass-valgrind\", \"src/test/run-pass-valgrind\",\n-//              \"run-pass-valgrind\", \"run-pass-valgrind\");\n-//        suite(\"check-mir-opt\", \"src/test/mir-opt\", \"mir-opt\", \"mir-opt\");\n-//        if build.config.codegen_tests {\n-//            suite(\"check-codegen\", \"src/test/codegen\", \"codegen\", \"codegen\");\n-//        }\n-//        suite(\"check-codegen-units\", \"src/test/codegen-units\", \"codegen-units\",\n-//              \"codegen-units\");\n-//        suite(\"check-incremental\", \"src/test/incremental\", \"incremental\",\n-//              \"incremental\");\n-//    }\n-//\n-//    if build.build.contains(\"msvc\") {\n-//        // nothing to do for debuginfo tests\n-//    } else {\n-//        rules.test(\"check-debuginfo-lldb\", \"src/test/debuginfo-lldb\")\n-//             .dep(|s| s.name(\"libtest\"))\n-//             .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n-//             .dep(|s| s.name(\"test-helpers\"))\n-//             .dep(|s| s.name(\"debugger-scripts\"))\n-//             .run(move |s| check::compiletest(build, &s.compiler(), s.target,\n-//                                         \"debuginfo-lldb\", \"debuginfo\"));\n-//        rules.test(\"check-debuginfo-gdb\", \"src/test/debuginfo-gdb\")\n-//             .dep(|s| s.name(\"libtest\"))\n-//             .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n-//             .dep(|s| s.name(\"test-helpers\"))\n-//             .dep(|s| s.name(\"debugger-scripts\"))\n-//             .dep(|s| s.name(\"remote-copy-libs\"))\n-//             .run(move |s| check::compiletest(build, &s.compiler(), s.target,\n-//                                         \"debuginfo-gdb\", \"debuginfo\"));\n-//        let mut rule = rules.test(\"check-debuginfo\", \"src/test/debuginfo\");\n-//        rule.default(true);\n-//        if build.build.contains(\"apple\") {\n-//            rule.dep(|s| s.name(\"check-debuginfo-lldb\"));\n-//        } else {\n-//            rule.dep(|s| s.name(\"check-debuginfo-gdb\"));\n-//        }\n-//    }\n-//\n-//\n-//\n-//    {\n-//        let mut suite = |name, path, mode, dir| {\n-//            rules.test(name, path)\n-//                 .dep(|s| s.name(\"librustc\"))\n-//                 .dep(|s| s.name(\"test-helpers\"))\n-//                 .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n-//                 .default(mode != \"pretty\")\n-//                 .host(true)\n-//                 .run(move |s| {\n-//                     check::compiletest(build, &s.compiler(), s.target, mode, dir)\n-//                 });\n-//        };\n-//\n-//        suite(\"check-ui-full\", \"src/test/ui-fulldeps\", \"ui\", \"ui-fulldeps\");\n-//        suite(\"check-rpass-full\", \"src/test/run-pass-fulldeps\",\n-//              \"run-pass\", \"run-pass-fulldeps\");\n-//        suite(\"check-rfail-full\", \"src/test/run-fail-fulldeps\",\n-//              \"run-fail\", \"run-fail-fulldeps\");\n-//        suite(\"check-cfail-full\", \"src/test/compile-fail-fulldeps\",\n-//              \"compile-fail\", \"compile-fail-fulldeps\");\n-//        suite(\"check-rmake\", \"src/test/run-make\", \"run-make\", \"run-make\");\n-//        suite(\"check-rustdoc\", \"src/test/rustdoc\", \"rustdoc\", \"rustdoc\");\n-//        suite(\"check-pretty\", \"src/test/pretty\", \"pretty\", \"pretty\");\n-//        suite(\"check-pretty-rpass\", \"src/test/run-pass/pretty\", \"pretty\",\n-//              \"run-pass\");\n-//        suite(\"check-pretty-rfail\", \"src/test/run-fail/pretty\", \"pretty\",\n-//              \"run-fail\");\n-//        suite(\"check-pretty-valgrind\", \"src/test/run-pass-valgrind/pretty\", \"pretty\",\n-//              \"run-pass-valgrind\");\n-//        suite(\"check-pretty-rpass-full\", \"src/test/run-pass-fulldeps/pretty\",\n-//              \"pretty\", \"run-pass-fulldeps\");\n-//        suite(\"check-pretty-rfail-full\", \"src/test/run-fail-fulldeps/pretty\",\n-//              \"pretty\", \"run-fail-fulldeps\");\n-//    }\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct Test {\n     path: &'static str,\n@@ -862,11 +735,6 @@ pub struct Docs {\n     compiler: Compiler,\n }\n \n-// rules.test(\"check-docs\", \"src/doc\")\n-//     .dep(|s| s.name(\"libtest\"))\n-//     .default(true)\n-//     .host(true)\n-//     .run(move |s| check::docs(build, &s.compiler()));\n impl Step for Docs {\n     type Output = ();\n     const DEFAULT: bool = true;\n@@ -925,13 +793,6 @@ impl Step for Docs {\n     }\n }\n \n-//rules.test(\"check-error-index\", \"src/tools/error_index_generator\")\n-//     .dep(|s| s.name(\"libstd\"))\n-//     .dep(|s| s.name(\"tool-error-index\").host(s.host).stage(0))\n-//     .default(true)\n-//     .host(true)\n-//     .run(move |s| check::error_index(build, &s.compiler()));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ErrorIndex {\n     compiler: Compiler,\n@@ -1013,22 +874,6 @@ fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) {\n     }\n }\n \n-//    for (krate, path, _default) in krates(\"rustc-main\") {\n-//        rules.test(&krate.test_step, path)\n-//             .dep(|s| s.name(\"librustc\"))\n-//             .dep(|s| s.name(\"remote-copy-libs\"))\n-//             .host(true)\n-//             .run(move |s| check::krate(build, &s.compiler(), s.target,\n-//                                        Mode::Librustc, TestKind::Test,\n-//                                        Some(&krate.name)));\n-//    }\n-//    rules.test(\"check-rustc-all\", \"path/to/nowhere\")\n-//         .dep(|s| s.name(\"librustc\"))\n-//         .dep(|s| s.name(\"remote-copy-libs\"))\n-//         .default(true)\n-//         .host(true)\n-//         .run(move |s| check::krate(build, &s.compiler(), s.target,\n-//                                    Mode::Librustc, TestKind::Test, None));\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CrateLibrustc {\n     compiler: Compiler,\n@@ -1095,52 +940,6 @@ impl Step for CrateLibrustc {\n }\n \n \n-//    for (krate, path, _default) in krates(\"std\") {\n-//        rules.test(&krate.test_step, path)\n-//             .dep(|s| s.name(\"libtest\"))\n-//             .dep(|s| s.name(\"remote-copy-libs\"))\n-//             .run(move |s| check::krate(build, &s.compiler(), s.target,\n-//                                        Mode::Libstd, TestKind::Test,\n-//                                        Some(&krate.name)));\n-//    }\n-//    rules.test(\"check-std-all\", \"path/to/nowhere\")\n-//         .dep(|s| s.name(\"libtest\"))\n-//         .dep(|s| s.name(\"remote-copy-libs\"))\n-//         .default(true)\n-//         .run(move |s| check::krate(build, &s.compiler(), s.target,\n-//                                    Mode::Libstd, TestKind::Test, None));\n-//\n-//    // std benchmarks\n-//    for (krate, path, _default) in krates(\"std\") {\n-//        rules.bench(&krate.bench_step, path)\n-//             .dep(|s| s.name(\"libtest\"))\n-//             .dep(|s| s.name(\"remote-copy-libs\"))\n-//             .run(move |s| check::krate(build, &s.compiler(), s.target,\n-//                                        Mode::Libstd, TestKind::Bench,\n-//                                        Some(&krate.name)));\n-//    }\n-//    rules.bench(\"bench-std-all\", \"path/to/nowhere\")\n-//         .dep(|s| s.name(\"libtest\"))\n-//         .dep(|s| s.name(\"remote-copy-libs\"))\n-//         .default(true)\n-//         .run(move |s| check::krate(build, &s.compiler(), s.target,\n-//                                    Mode::Libstd, TestKind::Bench, None));\n-//\n-//    for (krate, path, _default) in krates(\"test\") {\n-//        rules.test(&krate.test_step, path)\n-//             .dep(|s| s.name(\"libtest\"))\n-//             .dep(|s| s.name(\"remote-copy-libs\"))\n-//             .run(move |s| check::krate(build, &s.compiler(), s.target,\n-//                                        Mode::Libtest, TestKind::Test,\n-//                                        Some(&krate.name)));\n-//    }\n-//    rules.test(\"check-test-all\", \"path/to/nowhere\")\n-//         .dep(|s| s.name(\"libtest\"))\n-//         .dep(|s| s.name(\"remote-copy-libs\"))\n-//         .default(true)\n-//         .run(move |s| check::krate(build, &s.compiler(), s.target,\n-//                                    Mode::Libtest, TestKind::Test, None));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Crate {\n     compiler: Compiler,\n@@ -1383,25 +1182,6 @@ fn find_tests(dir: &Path, target: Interned<String>) -> Vec<PathBuf> {\n     dst\n }\n \n-//    rules.test(\"remote-copy-libs\", \"path/to/nowhere\")\n-//         .dep(|s| s.name(\"libtest\"))\n-//         .dep(move |s| {\n-//             if build.remote_tested(s.target) {\n-//                s.name(\"tool-remote-test-client\").target(s.host).stage(0)\n-//             } else {\n-//                 Step::noop()\n-//             }\n-//         })\n-//         .dep(move |s| {\n-//             if build.remote_tested(s.target) {\n-//                s.name(\"tool-remote-test-server\")\n-//             } else {\n-//                 Step::noop()\n-//             }\n-//         })\n-//         .run(move |s| check::remote_copy_libs(build, &s.compiler(), s.target));\n-//\n-\n /// Some test suites are run inside emulators or on remote devices, and most\n /// of our test binaries are linked dynamically which means we need to ship\n /// the standard library and such to the emulator ahead of time. This step\n@@ -1464,11 +1244,6 @@ impl Step for RemoteCopyLibs {\n     }\n }\n \n-//rules.test(\"check-distcheck\", \"distcheck\")\n-//     .dep(|s| s.name(\"dist-plain-source-tarball\"))\n-//     .dep(|s| s.name(\"dist-src\"))\n-//     .run(move |_| check::distcheck(build));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Distcheck;\n \n@@ -1534,12 +1309,6 @@ impl Step for Distcheck {\n     }\n }\n \n-//rules.test(\"check-bootstrap\", \"src/bootstrap\")\n-//     .default(true)\n-//     .host(true)\n-//     .only_build(true)\n-//     .run(move |_| check::bootstrap(build));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Bootstrap;\n "}, {"sha": "4453f1627ef3ad2cd021353b448c97b8c2328102", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 162, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e9c2242050cd18f10573400ea50073f5dc8153b0", "patch": "@@ -36,112 +36,6 @@ use native;\n use cache::{INTERNER, Interned};\n use builder::{Step, ShouldRun, Builder};\n \n-//\n-//    // Crates which have build scripts need to rely on this rule to ensure that\n-//    // the necessary prerequisites for a build script are linked and located in\n-//    // place.\n-//    rules.build(\"may-run-build-script\", \"path/to/nowhere\")\n-//         .dep(move |s| {\n-//             s.name(\"libstd-link\")\n-//              .host(&build.build)\n-//              .target(&build.build)\n-//         });\n-\n-//    // ========================================================================\n-//    // Crate compilations\n-//    //\n-//    // Tools used during the build system but not shipped\n-//    // These rules are \"pseudo rules\" that don't actually do any work\n-//    // themselves, but represent a complete sysroot with the relevant compiler\n-//    // linked into place.\n-//    //\n-//    // That is, depending on \"libstd\" means that when the rule is completed then\n-//    // the `stage` sysroot for the compiler `host` will be available with a\n-//    // standard library built for `target` linked in place. Not all rules need\n-//    // the compiler itself to be available, just the standard library, so\n-//    // there's a distinction between the two.\n-//    rules.build(\"libstd\", \"src/libstd\")\n-//         .dep(|s| s.name(\"rustc\").target(s.host))\n-//         .dep(|s| s.name(\"libstd-link\"));\n-//    rules.build(\"libtest\", \"src/libtest\")\n-//         .dep(|s| s.name(\"libstd\"))\n-//         .dep(|s| s.name(\"libtest-link\"))\n-//         .default(true);\n-//    rules.build(\"librustc\", \"src/librustc\")\n-//         .dep(|s| s.name(\"libtest\"))\n-//         .dep(|s| s.name(\"librustc-link\"))\n-//         .host(true)\n-//         .default(true);\n-\n-// Helper method to define the rules to link a crate into its place in the\n-// sysroot.\n-//\n-// The logic here is a little subtle as there's a few cases to consider.\n-// Not all combinations of (stage, host, target) actually require something\n-// to be compiled, but rather libraries could get propagated from a\n-// different location. For example:\n-//\n-// * Any crate with a `host` that's not the build triple will not actually\n-//   compile something. A different `host` means that the build triple will\n-//   actually compile the libraries, and then we'll copy them over from the\n-//   build triple to the `host` directory.\n-//\n-// * Some crates aren't even compiled by the build triple, but may be copied\n-//   from previous stages. For example if we're not doing a full bootstrap\n-//   then we may just depend on the stage1 versions of libraries to be\n-//   available to get linked forward.\n-//\n-// * Finally, there are some cases, however, which do indeed comiple crates\n-//   and link them into place afterwards.\n-//\n-// The rule definition below mirrors these three cases. The `dep` method\n-// calculates the correct dependency which either comes from stage1, a\n-// different compiler, or from actually building the crate itself (the `dep`\n-// rule). The `run` rule then mirrors these three cases and links the cases\n-// forward into the compiler sysroot specified from the correct location.\n-// fn crate_rule<'a, 'b>(build: &'a Build,\n-//                         rules: &'b mut Rules<'a>,\n-//                         krate: &'a str,\n-//                         dep: &'a str,\n-//                         link: fn(&Build, compiler, compiler, &str))\n-//                         -> RuleBuilder<'a, 'b> {\n-//     let mut rule = rules.build(&krate, \"path/to/nowhere\");\n-//     rule.dep(move |s| {\n-//             if build.force_use_stage1(&s.compiler(), s.target) {\n-//                 s.host(&build.build).stage(1)\n-//             } else if s.host == build.build {\n-//                 s.name(dep)\n-//             } else {\n-//                 s.host(&build.build)\n-//             }\n-//         })\n-//         .run(move |s| {\n-//             if build.force_use_stage1(&s.compiler(), s.target) {\n-//                 link(build,\n-//                         &s.stage(1).host(&build.build).compiler(),\n-//                         &s.compiler(),\n-//                         s.target)\n-//             } else if s.host == build.build {\n-//                 link(build, &s.compiler(), &s.compiler(), s.target)\n-//             } else {\n-//                 link(build,\n-//                         &s.host(&build.build).compiler(),\n-//                         &s.compiler(),\n-//                         s.target)\n-//             }\n-//         });\n-//         rule\n-// }\n-\n-//        rules.build(\"libstd\", \"src/libstd\")\n-//             .dep(|s| s.name(\"rustc\").target(s.host))\n-//             .dep(|s| s.name(\"libstd-link\"));\n-//    for (krate, path, _default) in krates(\"std\") {\n-//        rules.build(&krate.build_step, path)\n-//             .dep(|s| s.name(\"startup-objects\"))\n-//             .dep(move |s| s.name(\"rustc\").host(&build.build).target(s.host))\n-//             .run(move |s| compile::std(build, s.target, &s.compiler()));\n-//    }\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n     pub target: Interned<String>,\n@@ -256,14 +150,6 @@ impl Step for Std {\n }\n \n \n-// crate_rule(build,\n-//            &mut rules,\n-//            \"libstd-link\",\n-//            \"build-crate-std\",\n-//            compile::std_link)\n-//     .dep(|s| s.name(\"startup-objects\"))\n-//     .dep(|s| s.name(\"create-sysroot\").target(s.host));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct StdLink {\n     pub compiler: Compiler,\n@@ -334,10 +220,6 @@ fn copy_apple_sanitizer_dylibs(native_dir: &Path, platform: &str, into: &Path) {\n     }\n }\n \n-// rules.build(\"startup-objects\", \"src/rtstartup\")\n-//      .dep(|s| s.name(\"create-sysroot\").target(s.host))\n-//      .run(move |s| compile::build_startup_objects(build, &s.compiler(), s.target));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct StartupObjects {\n     pub compiler: Compiler,\n@@ -404,11 +286,6 @@ impl Step for StartupObjects {\n     }\n }\n \n-//    for (krate, path, _default) in krates(\"test\") {\n-//        rules.build(&krate.build_step, path)\n-//             .dep(|s| s.name(\"libstd-link\"))\n-//             .run(move |s| compile::test(build, s.target, &s.compiler()));\n-//    }\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Test {\n     pub compiler: Compiler,\n@@ -484,14 +361,6 @@ impl Step for Test {\n     }\n }\n \n-\n-// crate_rule(build,\n-//            &mut rules,\n-//            \"libtest-link\",\n-//            \"build-crate-test\",\n-//            compile::test_link)\n-//     .dep(|s| s.name(\"libstd-link\"));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct TestLink {\n     pub compiler: Compiler,\n@@ -523,14 +392,6 @@ impl Step for TestLink {\n     }\n }\n \n-//    for (krate, path, _default) in krates(\"rustc-main\") {\n-//        rules.build(&krate.build_step, path)\n-//             .dep(|s| s.name(\"libtest-link\"))\n-//             .dep(move |s| s.name(\"llvm\").host(&build.build).stage(0))\n-//             .dep(|s| s.name(\"may-run-build-script\"))\n-//             .run(move |s| compile::rustc(build, s.target, &s.compiler()));\n-//    }\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Rustc {\n     pub compiler: Compiler,\n@@ -675,12 +536,6 @@ impl Step for Rustc {\n     }\n }\n \n-// crate_rule(build,\n-//            &mut rules,\n-//            \"librustc-link\",\n-//            \"build-crate-rustc-main\",\n-//            compile::rustc_link)\n-//     .dep(|s| s.name(\"libtest-link\"));\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct RustcLink {\n     pub compiler: Compiler,\n@@ -736,9 +591,6 @@ fn compiler_file(compiler: &Path, file: &str) -> PathBuf {\n     PathBuf::from(out.trim())\n }\n \n-// rules.build(\"create-sysroot\", \"path/to/nowhere\")\n-//      .run(move |s| compile::create_sysroot(build, &s.compiler()));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Sysroot {\n     pub compiler: Compiler,\n@@ -771,20 +623,6 @@ impl Step for Sysroot {\n     }\n }\n \n-// the compiler with no target libraries ready to go\n-// rules.build(\"rustc\", \"src/rustc\")\n-//      .dep(|s| s.name(\"create-sysroot\").target(s.host))\n-//      .dep(move |s| {\n-//          if s.stage == 0 {\n-//              Step::noop()\n-//          } else {\n-//              s.name(\"librustc\")\n-//               .host(&build.build)\n-//               .stage(s.stage - 1)\n-//          }\n-//      })\n-//      .run(move |s| compile::assemble_rustc(build, s.stage, s.target));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Assemble {\n     /// The compiler which we will produce in this step. Assemble itself will"}, {"sha": "bceae8dad9794c557b081b3b8f76bb89947aeb88", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e9c2242050cd18f10573400ea50073f5dc8153b0", "patch": "@@ -18,14 +18,6 @@\n //! out to `rust-installer` still. This may one day be replaced with bits and\n //! pieces of `rustup.rs`!\n \n-// /// Helper to depend on a stage0 build-only rust-installer tool.\n-// fn tool_rust_installer<'a>(build: &'a Build, step: &Step<'a>) -> Step<'a> {\n-//     step.name(\"tool-rust-installer\")\n-//         .host(&build.build)\n-//         .target(&build.build)\n-//         .stage(0)\n-// }\n-\n use std::env;\n use std::fs::{self, File};\n use std::io::{Read, Write};\n@@ -65,13 +57,6 @@ fn rust_installer(builder: &Builder) -> Command {\n     builder.tool_cmd(Tool::RustInstaller)\n }\n \n-// rules.dist(\"dist-docs\", \"src/doc\")\n-//      .default(true)\n-//      .only_host_build(true)\n-//      .dep(|s| s.name(\"default:doc\"))\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |s| dist::docs(build, s.stage, s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Docs {\n     pub stage: u32,\n@@ -276,16 +261,6 @@ fn make_win_dist(\n     }\n }\n \n-// rules.dist(\"dist-mingw\", \"path/to/nowhere\")\n-//      .default(true)\n-//      .only_host_build(true)\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |s| {\n-//          if s.target.contains(\"pc-windows-gnu\") {\n-//              dist::mingw(build, s.target)\n-//          }\n-//      });\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Mingw {\n     target: Interned<String>,\n@@ -347,14 +322,6 @@ impl Step for Mingw {\n     }\n }\n \n-// rules.dist(\"dist-rustc\", \"src/librustc\")\n-//      .dep(move |s| s.name(\"rustc\").host(&build.build))\n-//      .host(true)\n-//      .only_host_build(true)\n-//      .default(true)\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |s| dist::rustc(build, s.stage, s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustc {\n     pub stage: u32,\n@@ -495,10 +462,6 @@ impl Step for Rustc {\n     }\n }\n \n-//rules.test(\"debugger-scripts\", \"src/etc/lldb_batchmode.py\")\n-//     .run(move |s| dist::debugger_scripts(build, &builder.sysroot(&s.compiler()),\n-//                                     s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct DebuggerScripts {\n     pub sysroot: Interned<PathBuf>,\n@@ -557,22 +520,6 @@ impl Step for DebuggerScripts {\n     }\n }\n \n-// rules.dist(\"dist-std\", \"src/libstd\")\n-//      .dep(move |s| {\n-//          // We want to package up as many target libraries as possible\n-//          // for the `rust-std` package, so if this is a host target we\n-//          // depend on librustc and otherwise we just depend on libtest.\n-//          if build.config.host.iter().any(|t| t == s.target) {\n-//              s.name(\"librustc-link\")\n-//          } else {\n-//              s.name(\"libtest-link\")\n-//          }\n-//      })\n-//      .default(true)\n-//      .only_host_build(true)\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |s| dist::std(build, &s.compiler(), s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     pub compiler: Compiler,\n@@ -648,13 +595,6 @@ impl Step for Std {\n     }\n }\n \n-// rules.dist(\"dist-analysis\", \"analysis\")\n-//      .default(build.config.extended)\n-//      .dep(|s| s.name(\"dist-std\"))\n-//      .only_host_build(true)\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Analysis {\n     pub compiler: Compiler,\n@@ -775,14 +715,6 @@ fn copy_src_dirs(build: &Build, src_dirs: &[&str], exclude_dirs: &[&str], dst_di\n     }\n }\n \n-// rules.dist(\"dist-src\", \"src\")\n-//      .default(true)\n-//      .host(true)\n-//      .only_build(true)\n-//      .only_host_build(true)\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |_| dist::rust_src(build));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Src;\n \n@@ -874,14 +806,6 @@ impl Step for Src {\n \n const CARGO_VENDOR_VERSION: &str = \"0.1.4\";\n \n-// rules.dist(\"dist-plain-source-tarball\", \"src\")\n-//      .default(build.config.rust_dist_src)\n-//      .host(true)\n-//      .only_build(true)\n-//      .only_host_build(true)\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |_| dist::plain_source_tarball(build));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct PlainSourceTarball;\n \n@@ -1028,13 +952,6 @@ fn write_file(path: &Path, data: &[u8]) {\n     t!(vf.write_all(data));\n }\n \n-// rules.dist(\"dist-cargo\", \"cargo\")\n-//      .host(true)\n-//      .only_host_build(true)\n-//      .dep(|s| s.name(\"tool-cargo\"))\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |s| dist::cargo(build, s.stage, s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Cargo {\n     pub stage: u32,\n@@ -1127,12 +1044,6 @@ impl Step for Cargo {\n     }\n }\n \n-// rules.dist(\"dist-rls\", \"rls\")\n-//      .host(true)\n-//      .only_host_build(true)\n-//      .dep(|s| s.name(\"tool-rls\"))\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |s| dist::rls(build, s.stage, s.target));\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rls {\n     pub stage: u32,\n@@ -1214,20 +1125,6 @@ impl Step for Rls {\n     }\n }\n \n-// rules.dist(\"dist-extended\", \"extended\")\n-//      .default(build.config.extended)\n-//      .host(true)\n-//      .only_host_build(true)\n-//      .dep(|d| d.name(\"dist-std\"))\n-//      .dep(|d| d.name(\"dist-rustc\"))\n-//      .dep(|d| d.name(\"dist-mingw\"))\n-//      .dep(|d| d.name(\"dist-docs\"))\n-//      .dep(|d| d.name(\"dist-cargo\"))\n-//      .dep(|d| d.name(\"dist-rls\"))\n-//      .dep(|d| d.name(\"dist-analysis\"))\n-//      .dep(move |s| tool_rust_installer(build, s))\n-//      .run(move |s| dist::extended(build, s.stage, s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Extended {\n     stage: u32,\n@@ -1632,13 +1529,6 @@ fn add_env(build: &Build, cmd: &mut Command, target: Interned<String>) {\n     }\n }\n \n-// rules.dist(\"dist-sign\", \"hash-and-sign\")\n-//      .host(true)\n-//      .only_build(true)\n-//      .only_host_build(true)\n-//      .dep(move |s| s.name(\"tool-build-manifest\").target(&build.build).stage(0))\n-//      .run(move |_| dist::hash_and_sign(build));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct HashSign;\n "}, {"sha": "3d8d9e50b20ea66bd840bcc3031dc271455c3859", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e9c2242050cd18f10573400ea50073f5dc8153b0", "patch": "@@ -76,25 +76,7 @@ macro_rules! book {\n }\n \n book!(\n-    // rules.doc(\"doc-nomicon\", \"src/doc/nomicon\")\n-    //      .dep(move |s| {\n-    //          s.name(\"tool-rustbook\")\n-    //           .host(&build.build)\n-    //           .target(&build.build)\n-    //           .stage(0)\n-    //      })\n-    //      .default(build.config.docs)\n-    //      .run(move |s| doc::rustbook(build, s.target, \"nomicon\"));\n     Nomicon, \"src/doc/book\", \"nomicon\";\n-    // rules.doc(\"doc-reference\", \"src/doc/reference\")\n-    //      .dep(move |s| {\n-    //          s.name(\"tool-rustbook\")\n-    //           .host(&build.build)\n-    //           .target(&build.build)\n-    //           .stage(0)\n-    //      })\n-    //      .default(build.config.docs)\n-    //      .run(move |s| doc::rustbook(build, s.target, \"reference\"));\n     Reference, \"src/doc/reference\", \"reference\";\n );\n \n@@ -127,19 +109,6 @@ impl Step for Rustbook {\n     }\n }\n \n-//rules.doc(\"doc-unstable-book\", \"src/doc/unstable-book\")\n-//     .dep(move |s| {\n-//         s.name(\"tool-rustbook\")\n-//          .host(&build.build)\n-//          .target(&build.build)\n-//          .stage(0)\n-//     })\n-//     .dep(move |s| s.name(\"doc-unstable-book-gen\"))\n-//     .default(build.config.docs)\n-//     .run(move |s| doc::rustbook_src(build,\n-//                                     s.target,\n-//                                     \"unstable-book\",\n-//                                     &build.md_doc_out(s.target)));\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBook {\n     target: Interned<String>,\n@@ -221,16 +190,6 @@ impl Step for RustbookSrc {\n     }\n }\n \n-// rules.doc(\"doc-book\", \"src/doc/book\")\n-//      .dep(move |s| {\n-//          s.name(\"tool-rustbook\")\n-//           .host(&build.build)\n-//           .target(&build.build)\n-//           .stage(0)\n-//      })\n-//      .default(build.config.docs)\n-//      .run(move |s| doc::book(build, s.target, \"book\"));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct TheBook {\n     target: Interned<String>,\n@@ -346,16 +305,6 @@ fn invoke_rustdoc(builder: &Builder, target: Interned<String>, markdown: &str) {\n     build.run(&mut cmd);\n }\n \n-// rules.doc(\"doc-standalone\", \"src/doc\")\n-//      .dep(move |s| {\n-//          s.name(\"rustc\")\n-//           .host(&build.build)\n-//           .target(&build.build)\n-//           .stage(0)\n-//      })\n-//      .default(build.config.docs)\n-//      .run(move |s| doc::standalone(build, s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Standalone {\n     target: Interned<String>,\n@@ -457,13 +406,6 @@ impl Step for Standalone {\n     }\n }\n \n-// for (krate, path, default) in krates(\"std\") {\n-//     rules.doc(&krate.doc_step, path)\n-//          .dep(|s| s.name(\"libstd-link\"))\n-//          .default(default && build.config.docs)\n-//          .run(move |s| doc::std(build, s.stage, s.target));\n-// }\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     stage: u32,\n@@ -567,15 +509,6 @@ impl Step for Std {\n     }\n }\n \n-// for (krate, path, default) in krates(\"test\") {\n-//     rules.doc(&krate.doc_step, path)\n-//          .dep(|s| s.name(\"libtest-link\"))\n-//          // Needed so rustdoc generates relative links to std.\n-//          .dep(|s| s.name(\"doc-crate-std\"))\n-//          .default(default && build.config.compiler_docs)\n-//          .run(move |s| doc::test(build, s.stage, s.target));\n-// }\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Test {\n     stage: u32,\n@@ -652,17 +585,6 @@ impl Step for Test {\n     }\n }\n \n-// for (krate, path, default) in krates(\"rustc-main\") {\n-//     rules.doc(&krate.doc_step, path)\n-//          .dep(|s| s.name(\"librustc-link\"))\n-//          // Needed so rustdoc generates relative links to std.\n-//          .dep(|s| s.name(\"doc-crate-std\"))\n-//          .host(true)\n-//          .default(default && build.config.docs)\n-//          .run(move |s| doc::rustc(build, s.stage, s.target));\n-// }\n-//\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustc {\n     stage: u32,\n@@ -757,13 +679,6 @@ impl Step for Rustc {\n     }\n }\n \n-// rules.doc(\"doc-error-index\", \"src/tools/error_index_generator\")\n-//      .dep(move |s| s.name(\"tool-error-index\").target(&build.build).stage(0))\n-//      .dep(move |s| s.name(\"librustc-link\"))\n-//      .default(build.config.docs)\n-//      .host(true)\n-//      .run(move |s| doc::error_index(build, s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {\n     target: Interned<String>,\n@@ -816,18 +731,6 @@ impl Step for ErrorIndex {\n     }\n }\n \n-// rules.doc(\"doc-unstable-book-gen\", \"src/tools/unstable-book-gen\")\n-//      .dep(move |s| {\n-//          s.name(\"tool-unstable-book-gen\")\n-//           .host(&build.build)\n-//           .target(&build.build)\n-//           .stage(0)\n-//      })\n-//      .dep(move |s| s.name(\"libstd-link\"))\n-//      .default(build.config.docs)\n-//      .host(true)\n-//      .run(move |s| doc::unstable_book_gen(build, s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBookGen {\n     target: Interned<String>,"}, {"sha": "7b2d644c7696d44f56ff254e00c9aab98703fbdb", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=e9c2242050cd18f10573400ea50073f5dc8153b0", "patch": "@@ -177,76 +177,36 @@ macro_rules! install {\n }\n \n install!((self, builder),\n-    // rules.install(\"install-docs\", \"src/doc\")\n-    //      .default(build.config.docs)\n-    //      .only_host_build(true)\n-    //      .dep(|s| s.name(\"dist-docs\"))\n-    //      .run(move |s| install::Installer::new(build).install_docs(s.stage, s.target));\n     Docs, \"src/doc\", builder.build.config.docs, only_hosts: false, {\n         builder.ensure(dist::Docs { stage: self.stage, target: self.target });\n         install_docs(builder, self.stage, self.target);\n     };\n-    // rules.install(\"install-std\", \"src/libstd\")\n-    //      .default(true)\n-    //      .only_host_build(true)\n-    //      .dep(|s| s.name(\"dist-std\"))\n-    //      .run(move |s| install::Installer::new(build).install_std(s.stage));\n     Std, \"src/libstd\", true, only_hosts: true, {\n         builder.ensure(dist::Std {\n             compiler: builder.compiler(self.stage, self.host),\n             target: self.target\n         });\n         install_std(builder, self.stage);\n     };\n-    // rules.install(\"install-cargo\", \"cargo\")\n-    //      .default(build.config.extended)\n-    //      .host(true)\n-    //      .only_host_build(true)\n-    //      .dep(|s| s.name(\"dist-cargo\"))\n-    //      .run(move |s| install::Installer::new(build).install_cargo(s.stage, s.target));\n     Cargo, \"cargo\", builder.build.config.extended, only_hosts: true, {\n         builder.ensure(dist::Cargo { stage: self.stage, target: self.target });\n         install_cargo(builder, self.stage, self.target);\n     };\n-    // rules.install(\"install-rls\", \"rls\")\n-    //      .default(build.config.extended)\n-    //      .host(true)\n-    //      .only_host_build(true)\n-    //      .dep(|s| s.name(\"dist-rls\"))\n-    //      .run(move |s| install::Installer::new(build).install_rls(s.stage, s.target));\n     Rls, \"rls\", builder.build.config.extended, only_hosts: true, {\n         builder.ensure(dist::Rls { stage: self.stage, target: self.target });\n         install_rls(builder, self.stage, self.target);\n     };\n-    // rules.install(\"install-analysis\", \"analysis\")\n-    //      .default(build.config.extended)\n-    //      .only_host_build(true)\n-    //      .dep(|s| s.name(\"dist-analysis\"))\n-    //      .run(move |s| install::Installer::new(build).install_analysis(s.stage, s.target));\n     Analysis, \"analysis\", builder.build.config.extended, only_hosts: false, {\n         builder.ensure(dist::Analysis {\n             compiler: builder.compiler(self.stage, self.host),\n             target: self.target\n         });\n         install_analysis(builder, self.stage, self.target);\n     };\n-    // rules.install(\"install-src\", \"src\")\n-    //      .default(build.config.extended)\n-    //      .host(true)\n-    //      .only_build(true)\n-    //      .only_host_build(true)\n-    //      .dep(|s| s.name(\"dist-src\"))\n-    //      .run(move |s| install::Installer::new(build).install_src(s.stage));\n     Src, \"src\", builder.build.config.extended, only_hosts: true, {\n         builder.ensure(dist::Src);\n         install_src(builder, self.stage);\n     }, ONLY_BUILD;\n-    // rules.install(\"install-rustc\", \"src/librustc\")\n-    //      .default(true)\n-    //      .host(true)\n-    //      .only_host_build(true)\n-    //      .dep(|s| s.name(\"dist-rustc\"))\n-    //      .run(move |s| install::Installer::new(build).install_rustc(s.stage, s.target));\n     Rustc, \"src/librustc\", builder.build.config.extended, only_hosts: true, {\n         builder.ensure(dist::Rustc { stage: self.stage, target: self.target });\n         install_rustc(builder, self.stage, self.target);"}, {"sha": "dc78a43d5264756e92ccac22f0a340c153055633", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e9c2242050cd18f10573400ea50073f5dc8153b0", "patch": "@@ -35,17 +35,6 @@ use build_helper::up_to_date;\n use builder::{Builder, ShouldRun, Step};\n use cache::Interned;\n \n-// rules.build(\"llvm\", \"src/llvm\")\n-//      .host(true)\n-//      .dep(move |s| {\n-//          if s.target == build.build {\n-//              Step::noop()\n-//          } else {\n-//              s.target(&build.build)\n-//          }\n-//      })\n-//      .run(move |s| native::llvm(build, s.target));\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n     pub target: Interned<String>,\n@@ -246,9 +235,6 @@ fn check_llvm_version(build: &Build, llvm_config: &Path) {\n     panic!(\"\\n\\nbad LLVM version: {}, need >=3.5\\n\\n\", version)\n }\n \n-//rules.build(\"test-helpers\", \"src/rt/rust_test_helpers.c\")\n-//     .run(move |s| native::test_helpers(build, s.target));\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct TestHelpers {\n     pub target: Interned<String>,\n@@ -311,10 +297,7 @@ const OPENSSL_VERS: &'static str = \"1.0.2k\";\n const OPENSSL_SHA256: &'static str =\n     \"6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\";\n \n-//rules.build(\"openssl\", \"path/to/nowhere\")\n-//     .run(move |s| native::openssl(build, s.target));\n-\n-    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Openssl {\n     pub target: Interned<String>,\n }"}, {"sha": "9db6493ba3172335e0a2b32efac750e332500800", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c2242050cd18f10573400ea50073f5dc8153b0/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=e9c2242050cd18f10573400ea50073f5dc8153b0", "patch": "@@ -21,30 +21,6 @@ use native;\n use channel::GitInfo;\n use cache::Interned;\n \n-//// ========================================================================\n-//// Build tools\n-////\n-//// Tools used during the build system but not shipped\n-//// \"pseudo rule\" which represents completely cleaning out the tools dir in\n-//// one stage. This needs to happen whenever a dependency changes (e.g.\n-//// libstd, libtest, librustc) and all of the tool compilations above will\n-//// be sequenced after this rule.\n-//rules.build(\"maybe-clean-tools\", \"path/to/nowhere\")\n-//     .after(\"librustc-tool\")\n-//     .after(\"libtest-tool\")\n-//     .after(\"libstd-tool\");\n-//\n-//rules.build(\"librustc-tool\", \"path/to/nowhere\")\n-//     .dep(|s| s.name(\"librustc\"))\n-//     .run(move |s| compile::maybe_clean_tools(build, s.stage, s.target, Mode::Librustc));\n-//rules.build(\"libtest-tool\", \"path/to/nowhere\")\n-//     .dep(|s| s.name(\"libtest\"))\n-//     .run(move |s| compile::maybe_clean_tools(build, s.stage, s.target, Mode::Libtest));\n-//rules.build(\"libstd-tool\", \"path/to/nowhere\")\n-//     .dep(|s| s.name(\"libstd\"))\n-//     .run(move |s| compile::maybe_clean_tools(build, s.stage, s.target, Mode::Libstd));\n-//\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct CleanTools {\n     pub stage: u32,\n@@ -213,55 +189,15 @@ macro_rules! tool {\n }\n \n tool!(\n-    // rules.build(\"tool-rustbook\", \"src/tools/rustbook\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"librustc-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"rustbook\"));\n     Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::Librustc;\n-    // rules.build(\"tool-error-index\", \"src/tools/error_index_generator\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"librustc-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"error_index_generator\"));\n     ErrorIndex, \"src/tools/error_index_generator\", \"error_index_generator\", Mode::Librustc;\n-    // rules.build(\"tool-unstable-book-gen\", \"src/tools/unstable-book-gen\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"libstd-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"unstable-book-gen\"));\n     UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::Libstd;\n-    // rules.build(\"tool-tidy\", \"src/tools/tidy\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"libstd-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"tidy\"));\n     Tidy, \"src/tools/tidy\", \"tidy\", Mode::Libstd;\n-    // rules.build(\"tool-linkchecker\", \"src/tools/linkchecker\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"libstd-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"linkchecker\"));\n     Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::Libstd;\n-    // rules.build(\"tool-cargotest\", \"src/tools/cargotest\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"libstd-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"cargotest\"));\n     CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::Libstd;\n-    // rules.build(\"tool-compiletest\", \"src/tools/compiletest\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"libtest-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"compiletest\"));\n     Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::Libtest;\n-    // rules.build(\"tool-build-manifest\", \"src/tools/build-manifest\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"libstd-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"build-manifest\"));\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::Librustc;\n-    // rules.build(\"tool-remote-test-client\", \"src/tools/remote-test-client\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"libstd-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"remote-test-client\"));\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::Libstd;\n-    // rules.build(\"tool-rust-installer\", \"src/tools/rust-installer\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"libstd-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"rust-installer\"));\n     RustInstaller, \"src/tools/rust-installer\", \"rust-installer\", Mode::Libstd;\n );\n \n@@ -300,20 +236,6 @@ impl Step for RemoteTestServer {\n     }\n }\n \n-// rules.build(\"tool-cargo\", \"src/tools/cargo\")\n-//      .host(true)\n-//      .default(build.config.extended)\n-//      .dep(|s| s.name(\"maybe-clean-tools\"))\n-//      .dep(|s| s.name(\"libstd-tool\"))\n-//      .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n-//      .dep(move |s| {\n-//          // Cargo depends on procedural macros, which requires a full host\n-//          // compiler to be available, so we need to depend on that.\n-//          s.name(\"librustc-link\")\n-//           .target(&build.build)\n-//           .host(&build.build)\n-//      })\n-//      .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Cargo {\n     pub stage: u32,\n@@ -360,19 +282,6 @@ impl Step for Cargo {\n     }\n }\n \n-// rules.build(\"tool-rls\", \"src/tools/rls\")\n-//      .host(true)\n-//      .default(build.config.extended)\n-//      .dep(|s| s.name(\"librustc-tool\"))\n-//      .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n-//      .dep(move |s| {\n-//          // rls, like cargo, uses procedural macros\n-//          s.name(\"librustc-link\")\n-//           .target(&build.build)\n-//           .host(&build.build)\n-//      })\n-//      .run(move |s| compile::tool(build, s.stage, s.target, \"rls\"));\n-//\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rls {\n     pub stage: u32,"}]}