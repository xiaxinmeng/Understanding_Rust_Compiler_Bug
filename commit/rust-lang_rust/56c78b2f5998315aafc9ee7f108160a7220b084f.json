{"sha": "56c78b2f5998315aafc9ee7f108160a7220b084f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2Yzc4YjJmNTk5ODMxNWFhZmM5ZWU3ZjEwODE2MGE3MjIwYjA4NGY=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-15T17:22:31Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-27T10:05:22Z"}, "message": "Fix the test copy-intrinsic", "tree": {"sha": "ccd89d2cbb7eadb8186b3301f8475efc2e62b747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccd89d2cbb7eadb8186b3301f8475efc2e62b747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56c78b2f5998315aafc9ee7f108160a7220b084f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEeQ9lb2ZjsXFBDRuFH1AezRu9cKcFAmDYTWIACgkQH1AezRu9\ncKd6pQ/+Ov8JZhujPnPa6txGLIM72c+PqjwnONG2wRIRcd9jSmq2CooAXB43lAB2\nWBAPqzZiPCiSQScZyBJEGNCgbLeaWOojyQMSwxiKgFsMaHC57bDWap1Fmhu/UTSB\nQBfboeh4FTpPKtGtx+gXdc3BTlgSVNlrD2xA0b2exjSyqy0C9D9yfr+WCqxFTepj\nwkNVCjztoxrdYbEnXxmyIxXm1sWre/z3g4tTf2G0icipfMkE9WUuLySXRjzl1vaI\nYX4cVaVx19sBX1Ypv/NuwQFI1szVn9/z32k4apTvqYwQU400hX18+z4Gcwcn05ze\nezfZ4NGmsQYK7MqYu10HeX6zv1x8X5thln8oKbvtJJs9HTT7gGWkRxfov4UeSa6w\n5wHJ6BsrrqKW052og696Qz2GvGZumVrwCld8eSMLT77+cj7jVLNcgZ6KYQ+IjpQP\n3rsyD8sSbjjx0BNAa0I/uyNGVvHrCY3G0lcoKElJVeZioBFrhSLb4TH3SvjZai5X\n04IAvt1572gE7TDd0Dg7VK7rrRqppeF084dWHtvFdWYExoE9jMG7KdZdzmFgRfUM\nLB74QBi9Pq+427GBTrmyExRHegaoLMj/xjrVeEwDTTXpSGmwAqIG45bmZSeyyRS5\nXcTdq9gsc89NxYYJk6k2xRisKjo0G+G2uJPJt6MzmI+2YvWZW6c=\n=gAST\n-----END PGP SIGNATURE-----", "payload": "tree ccd89d2cbb7eadb8186b3301f8475efc2e62b747\nparent 3a894e38fb4e3f2fb129043bd6d0b88e25f5857d\nauthor Albin Hedman <albin9604@gmail.com> 1623777751 +0200\ncommitter Albin Hedman <albin9604@gmail.com> 1624788322 +0200\n\nFix the test copy-intrinsic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56c78b2f5998315aafc9ee7f108160a7220b084f", "html_url": "https://github.com/rust-lang/rust/commit/56c78b2f5998315aafc9ee7f108160a7220b084f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56c78b2f5998315aafc9ee7f108160a7220b084f/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a894e38fb4e3f2fb129043bd6d0b88e25f5857d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d", "html_url": "https://github.com/rust-lang/rust/commit/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d"}], "stats": {"total": 81, "additions": 31, "deletions": 50}, "files": [{"sha": "770c9c69226a935c1fe4f1c7eeeb1f8b2302349e", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56c78b2f5998315aafc9ee7f108160a7220b084f/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c78b2f5998315aafc9ee7f108160a7220b084f/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=56c78b2f5998315aafc9ee7f108160a7220b084f", "patch": "@@ -1,42 +1,53 @@\n+#![stable(feature = \"dummy\", since = \"1.0.0\")]\n+\n // ignore-tidy-linelength\n+#![feature(intrinsics, staged_api)]\n #![feature(const_mut_refs, const_intrinsic_copy, const_ptr_offset)]\n-use std::{ptr, mem};\n+use std::mem;\n+\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+}\n \n const COPY_ZERO: () = unsafe {\n     // Since we are not copying anything, this should be allowed.\n     let src = ();\n     let mut dst = ();\n-    ptr::copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n+    copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n };\n \n const COPY_OOB_1: () = unsafe {\n     let mut x = 0i32;\n     let dangle = (&mut x as *mut i32).wrapping_add(10);\n     // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n-    ptr::copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ ERROR any use of this value will cause an error\n+    copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ ERROR any use of this value will cause an error\n     //~| memory access failed: pointer must be in-bounds\n     //~| previously accepted\n };\n const COPY_OOB_2: () = unsafe {\n     let x = 0i32;\n     let dangle = (&x as *const i32).wrapping_add(10);\n     // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n-    ptr::copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ ERROR any use of this value will cause an error\n+    copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ ERROR any use of this value will cause an error\n     //~| memory access failed: pointer must be in-bounds\n     //~| previously accepted\n };\n \n const COPY_SIZE_OVERFLOW: () = unsafe {\n     let x = 0;\n     let mut y = 0;\n-    ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n+    copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n     //~| overflow computing total size of `copy`\n     //~| previously accepted\n };\n const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n     let x = 0;\n     let mut y = 0;\n-    ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n+    copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n     //~| overflow computing total size of `copy_nonoverlapping`\n     //~| previously accepted\n };"}, {"sha": "4bb8f500063631ea428dd64a05b08639f8aacf88", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "modified", "additions": 14, "deletions": 44, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/56c78b2f5998315aafc9ee7f108160a7220b084f/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56c78b2f5998315aafc9ee7f108160a7220b084f/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=56c78b2f5998315aafc9ee7f108160a7220b084f", "patch": "@@ -1,20 +1,13 @@\n error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |       unsafe { copy_nonoverlapping(src, dst, count) }\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc4 which has size 4\n-   |                inside `copy_nonoverlapping::<i32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |                inside `COPY_OOB_1` at $DIR/copy-intrinsic.rs:16:5\n-   | \n-  ::: $DIR/copy-intrinsic.rs:12:1\n+  --> $DIR/copy-intrinsic.rs:27:5\n    |\n LL | / const COPY_OOB_1: () = unsafe {\n LL | |     let mut x = 0i32;\n LL | |     let dangle = (&mut x as *mut i32).wrapping_add(10);\n LL | |     // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n-...  |\n+LL | |     copy_nonoverlapping(0x100 as *const i32, dangle, 0);\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc4 which has size 4\n+LL | |\n LL | |\n LL | | };\n    | |__-\n@@ -24,22 +17,15 @@ LL | | };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |       unsafe { copy_nonoverlapping(src, dst, count) }\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc6 which has size 4\n-   |                inside `copy_nonoverlapping::<i32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |                inside `COPY_OOB_2` at $DIR/copy-intrinsic.rs:24:5\n-   | \n-  ::: $DIR/copy-intrinsic.rs:20:1\n+  --> $DIR/copy-intrinsic.rs:35:5\n    |\n LL | / const COPY_OOB_2: () = unsafe {\n LL | |     let x = 0i32;\n LL | |     let dangle = (&x as *const i32).wrapping_add(10);\n LL | |     // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n-...  |\n+LL | |     copy_nonoverlapping(dangle, 0x100 as *mut i32, 0);\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc6 which has size 4\n+LL | |\n LL | |\n LL | | };\n    | |__-\n@@ -48,21 +34,13 @@ LL | | };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |       unsafe { copy(src, dst, count) }\n-   |                ^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                overflow computing total size of `copy`\n-   |                inside `std::intrinsics::copy::<i32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |                inside `COPY_SIZE_OVERFLOW` at $DIR/copy-intrinsic.rs:32:5\n-   | \n-  ::: $DIR/copy-intrinsic.rs:29:1\n+  --> $DIR/copy-intrinsic.rs:43:5\n    |\n LL | / const COPY_SIZE_OVERFLOW: () = unsafe {\n LL | |     let x = 0;\n LL | |     let mut y = 0;\n-LL | |     ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+LL | |     copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n LL | |\n LL | |\n LL | | };\n@@ -72,21 +50,13 @@ LL | | };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |       unsafe { copy_nonoverlapping(src, dst, count) }\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                overflow computing total size of `copy_nonoverlapping`\n-   |                inside `copy_nonoverlapping::<i32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |                inside `COPY_NONOVERLAPPING_SIZE_OVERFLOW` at $DIR/copy-intrinsic.rs:39:5\n-   | \n-  ::: $DIR/copy-intrinsic.rs:36:1\n+  --> $DIR/copy-intrinsic.rs:50:5\n    |\n LL | / const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n LL | |     let x = 0;\n LL | |     let mut y = 0;\n-LL | |     ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+LL | |     copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy_nonoverlapping`\n LL | |\n LL | |\n LL | | };"}]}