{"sha": "cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "node_id": "C_kwDOAAsO6NoAKGNmMDMxYTMzNTVmNjc3ZWQxYTQ0ZTMxY2JjMmIyZDg0ZjNjYjEzYjY", "commit": {"author": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2022-12-04T11:32:15Z"}, "committer": {"name": "Arpad Borsos", "email": "arpad.borsos@sentry.io", "date": "2022-12-06T09:16:23Z"}, "message": "Replace usage of `ResumeTy` in async lowering with `Context`\n\nReplaces using `ResumeTy` / `get_context` in favor of using `&'static mut Context<'_>`.\n\nUsage of the `'static` lifetime here is technically \"cheating\", and replaces\nthe raw pointer in `ResumeTy` and the `get_context` fn that pulls the\ncorrect lifetimes out of thin air.", "tree": {"sha": "bae64831db290db4a403eff02b1ce5249e397ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bae64831db290db4a403eff02b1ce5249e397ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGpY8kJL+amSMRbJCVw8gFjFZy1UFAmOPCGoACgkQVw8gFjFZ\ny1VHXw/+PFg5jpoaK6Z1ZSIi+3eYTr5gBySDOMJCXqZ6+6X9Z/BLFAqqT+rtCrwV\n/BwAoTCXMTcOcb4LHGYdfv3koeM523XDLkvtYILENYJ92H1toWH+4MW8IIprnRGw\nDg27qML5nia/pwLyJPwROSvz6sQ63X6/oAWMx3uLf66htYzVBi7t+DcZAgAnjzCW\nfcWRmAEyhu+oBDI+t5me9pYpH5gs1JyNr9aG94DLximrSzTRT1u6xQtLajCp/mTo\npcntIk8lMHOek90XZOY0YmRmVMyN5ST7Cb/8zSylyF5aDyOz8gAIXfg3Kmxc0C76\nzJly0FYKdcscq0BXIz+m5XNbJ5uv69rAGyf2AmQk6X3+p42vO9XbgME0LBa2qOm/\nrz5fLRWSJ5Jqo6Xfo9+zUoAx/jAONZWg0k/sen4q7XLmDcayf8gzQW7n+QxvpMJa\nFpl+jr7P/ma6fZDzuT7theCruHIIx7sKPNMh2xaaHvGxjsi6zYTzjayRC5fqep2y\n5rJNWGGAcuBTr50kW+QI+2+aRNUEFAChBkh0J79znnuVMuZheQiJmqyGr4aKiM0X\nOS8PsNahip4pQ+TC+PV9UJxrd/dCfJtAE9yQ4k/Lv3YpyZHBF9qkYxpd/vBl6kB0\nvg08Vh01pi/aLp7XEUywEobCWF9qnXVymUBmPaGCrkb2TEqs874=\n=TA3I\n-----END PGP SIGNATURE-----", "payload": "tree bae64831db290db4a403eff02b1ce5249e397ce1\nparent ed61c139c2bc778ebb91f5dd6a5393aa20467f78\nauthor Arpad Borsos <swatinem@swatinem.de> 1670153535 +0100\ncommitter Arpad Borsos <arpad.borsos@sentry.io> 1670318183 +0100\n\nReplace usage of `ResumeTy` in async lowering with `Context`\n\nReplaces using `ResumeTy` / `get_context` in favor of using `&'static mut Context<'_>`.\n\nUsage of the `'static` lifetime here is technically \"cheating\", and replaces\nthe raw pointer in `ResumeTy` and the `get_context` fn that pulls the\ncorrect lifetimes out of thin air.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "html_url": "https://github.com/rust-lang/rust/commit/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "html_url": "https://github.com/rust-lang/rust/commit/ed61c139c2bc778ebb91f5dd6a5393aa20467f78"}], "stats": {"total": 113, "additions": 70, "deletions": 43}, "files": [{"sha": "9974ebff311fb8c536f140880172ab7f95c4b07f", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -16,7 +16,7 @@ use rustc_hir::def::Res;\n use rustc_hir::definitions::DefPathData;\n use rustc_session::errors::report_lit_error;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::DUMMY_SP;\n use thin_vec::thin_vec;\n \n@@ -594,14 +594,38 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> hir::ExprKind<'hir> {\n         let output = ret_ty.unwrap_or_else(|| hir::FnRetTy::DefaultReturn(self.lower_span(span)));\n \n-        // Resume argument type: `ResumeTy`\n-        let unstable_span =\n-            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n-        let resume_ty = hir::QPath::LangItem(hir::LangItem::ResumeTy, unstable_span, None);\n+        // Resume argument type, which should be `&mut Context<'_>`.\n+        // NOTE: Using the `'static` lifetime here is technically cheating.\n+        // The `Future::poll` argument really is `&'a mut Context<'b>`, but we cannot\n+        // express the fact that we are not storing it across yield-points yet,\n+        // and we would thus run into lifetime errors.\n+        // See <https://github.com/rust-lang/rust/issues/68923>.\n+        // Our lowering makes sure we are not mis-using the `_task_context` input type\n+        // in the sense that we are indeed not using it across yield points. We\n+        // get a fresh `&mut Context` for each resume / call of `Future::poll`.\n+        // This \"cheating\" was previously done with a `ResumeTy` that contained a raw\n+        // pointer, and a `get_context` accessor that pulled the `Context` lifetimes\n+        // out of thin air.\n+        let context_lifetime_ident = Ident::with_dummy_span(kw::StaticLifetime);\n+        let context_lifetime = self.arena.alloc(hir::Lifetime {\n+            hir_id: self.next_id(),\n+            ident: context_lifetime_ident,\n+            res: hir::LifetimeName::Static,\n+        });\n+        let context_path =\n+            hir::QPath::LangItem(hir::LangItem::Context, self.lower_span(span), None);\n+        let context_ty = hir::MutTy {\n+            ty: self.arena.alloc(hir::Ty {\n+                hir_id: self.next_id(),\n+                kind: hir::TyKind::Path(context_path),\n+                span: self.lower_span(span),\n+            }),\n+            mutbl: hir::Mutability::Mut,\n+        };\n         let input_ty = hir::Ty {\n             hir_id: self.next_id(),\n-            kind: hir::TyKind::Path(resume_ty),\n-            span: unstable_span,\n+            kind: hir::TyKind::Rptr(context_lifetime, context_ty),\n+            span: self.lower_span(span),\n         };\n \n         // The closure/generator `FnDecl` takes a single (resume) argument of type `input_ty`.\n@@ -659,12 +683,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n \n         let hir_id = self.lower_node_id(closure_node_id);\n+        let unstable_span =\n+            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n         if track_caller {\n-            let unstable_span = self.mark_span_with_reason(\n-                DesugaringKind::Async,\n-                span,\n-                self.allow_gen_future.clone(),\n-            );\n             self.lower_attrs(\n                 hir_id,\n                 &[Attribute {\n@@ -711,7 +732,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ///     mut __awaitee => loop {\n     ///         match unsafe { ::std::future::Future::poll(\n     ///             <::std::pin::Pin>::new_unchecked(&mut __awaitee),\n-    ///             ::std::future::get_context(task_context),\n+    ///             task_context,\n     ///         ) } {\n     ///             ::std::task::Poll::Ready(result) => break result,\n     ///             ::std::task::Poll::Pending => {}\n@@ -752,7 +773,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // unsafe {\n         //     ::std::future::Future::poll(\n         //         ::std::pin::Pin::new_unchecked(&mut __awaitee),\n-        //         ::std::future::get_context(task_context),\n+        //         task_context,\n         //     )\n         // }\n         let poll_expr = {\n@@ -770,16 +791,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 arena_vec![self; ref_mut_awaitee],\n                 Some(expr_hir_id),\n             );\n-            let get_context = self.expr_call_lang_item_fn_mut(\n-                gen_future_span,\n-                hir::LangItem::GetContext,\n-                arena_vec![self; task_context],\n-                Some(expr_hir_id),\n-            );\n             let call = self.expr_call_lang_item_fn(\n                 span,\n                 hir::LangItem::FuturePoll,\n-                arena_vec![self; new_unchecked, get_context],\n+                arena_vec![self; new_unchecked, task_context],\n                 Some(expr_hir_id),\n             );\n             self.arena.alloc(self.expr_unsafe(call))"}, {"sha": "b51257df713ea37a273bc14fc579d3ac38eb7e9f", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -286,10 +286,9 @@ language_item_table! {\n \n     // FIXME(swatinem): the following lang items are used for async lowering and\n     // should become obsolete eventually.\n-    ResumeTy,                sym::ResumeTy,            resume_ty,                  Target::Struct,         GenericRequirement::None;\n     IdentityFuture,          sym::identity_future,     identity_future_fn,         Target::Fn,             GenericRequirement::None;\n-    GetContext,              sym::get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n \n+    Context,                 sym::Context,             context,                    Target::Struct,         GenericRequirement::None;\n     FuturePoll,              sym::poll,                future_poll_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n \n     FromFrom,                sym::from,                from_fn,                    Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;"}, {"sha": "61253845497238c664ac8116ae14f4b29be7f12f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -165,6 +165,7 @@ symbols! {\n         Capture,\n         Center,\n         Clone,\n+        Context,\n         Continue,\n         Copy,\n         Count,\n@@ -264,7 +265,6 @@ symbols! {\n         Relaxed,\n         Release,\n         Result,\n-        ResumeTy,\n         Return,\n         Right,\n         Rust,\n@@ -754,7 +754,6 @@ symbols! {\n         generic_associated_types_extended,\n         generic_const_exprs,\n         generic_param_attrs,\n-        get_context,\n         global_allocator,\n         global_asm,\n         globs,"}, {"sha": "2a8e12fd4cf60fcc2bbc8aa749c500a6229f009c", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -44,7 +44,7 @@ pub use poll_fn::{poll_fn, PollFn};\n ///    non-Send/Sync as well, and we don't want that.\n ///\n /// It also simplifies the HIR lowering of `.await`.\n-#[cfg_attr(not(bootstrap), lang = \"ResumeTy\")]\n+// FIXME(swatinem): This type can be removed when bumping the bootstrap compiler\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[derive(Debug, Copy, Clone)]\n@@ -61,6 +61,7 @@ unsafe impl Sync for ResumeTy {}\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n // This is `const` to avoid extra errors after we recover from `const async fn`\n+// FIXME(swatinem): This fn can be removed when bumping the bootstrap compiler\n #[cfg_attr(bootstrap, lang = \"from_generator\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n@@ -102,7 +103,8 @@ where\n     GenFuture(gen)\n }\n \n-#[lang = \"get_context\"]\n+// FIXME(swatinem): This fn can be removed when bumping the bootstrap compiler\n+#[cfg_attr(bootstrap, lang = \"get_context\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[must_use]\n@@ -113,6 +115,10 @@ pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     unsafe { &mut *cx.0.as_ptr().cast() }\n }\n \n+// FIXME(swatinem): This fn is currently needed to work around shortcomings\n+// in type and lifetime inference.\n+// See the comment at the bottom of `LoweringContext::make_async_expr` and\n+// <https://github.com/rust-lang/rust/issues/104826>.\n #[cfg_attr(not(bootstrap), lang = \"identity_future\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]"}, {"sha": "9ab9b0ba1c79739548fc891ba34d5d0f33bb82dc", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -174,6 +174,7 @@ impl RawWakerVTable {\n /// Currently, `Context` only serves to provide access to a [`&Waker`](Waker)\n /// which can be used to wake the current task.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+#[cfg_attr(not(bootstrap), lang = \"Context\")]\n pub struct Context<'a> {\n     waker: &'a Waker,\n     // Ensure we future-proof against variance changes by forcing"}, {"sha": "616623ee07759eeabd7c7fb4dc211d435aedd462", "filename": "src/test/ui/async-await/async-await-let-else.drop-tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -40,7 +40,7 @@ LL |   async fn bar2<T>(_: T) -> ! {\n LL | |     panic!()\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `ResumeTy`, `Option<bool>`, `impl Future<Output = !>`, `()`\n+   = note: required because it captures the following types: `&mut Context<'_>`, `Option<bool>`, `impl Future<Output = !>`, `()`\n note: required because it's used within this `async fn` body\n   --> $DIR/async-await-let-else.rs:21:32\n    |"}, {"sha": "1c90bedae790c66259bc6c47e956ebb90907e003", "filename": "src/test/ui/async-await/issue-68112.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -57,7 +57,7 @@ note: required because it appears within the type `impl Future<Output = Arc<RefC\n    |\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `Ready<i32>`\n+   = note: required because it captures the following types: `&mut Context<'_>`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `Ready<i32>`\n note: required because it's used within this `async` block\n   --> $DIR/issue-68112.rs:60:20\n    |"}, {"sha": "e09ae7fedd8055f1f636f711bbe1fdd619048213", "filename": "src/test/ui/async-await/issue-68112.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -57,7 +57,7 @@ note: required because it appears within the type `impl Future<Output = Arc<RefC\n    |\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n+   = note: required because it captures the following types: `&mut Context<'_>`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n note: required because it's used within this `async` block\n   --> $DIR/issue-68112.rs:60:20\n    |"}, {"sha": "e6ad2f0d444bb7e8faa44cd6cc6f4a787fc87b80", "filename": "src/test/ui/async-await/issue-69446-fnmut-capture.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fissue-69446-fnmut-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fissue-69446-fnmut-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-69446-fnmut-capture.stderr?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -14,6 +14,9 @@ LL | |     });\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n+   = note: requirement occurs because of a mutable reference to `Context<'_>`\n+   = note: mutable references are invariant over their type parameter\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "a8fd97cde8f7a8bd7b9f64c71b96179ed7658dce", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -18,7 +18,7 @@ LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n    |  ___________________________________________________________________^\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `&mut Context<'_>`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n   --> $DIR/issue-70935-complex-spans.rs:16:5\n    |"}, {"sha": "25876d5084015f6720a31293c78bce0bb7c67a77", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -11,7 +11,7 @@ LL | async fn foo() {\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n    = note: required because it appears within the type `(NotSend,)`\n-   = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `()`, `impl Future<Output = ()>`\n+   = note: required because it captures the following types: `&mut Context<'_>`, `(NotSend,)`, `()`, `impl Future<Output = ()>`\n note: required because it's used within this `async fn` body\n   --> $DIR/partial-drop-partial-reinit.rs:31:16\n    |"}, {"sha": "dba2a620779f0f446f537663fc8995a40037baaf", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -11,7 +11,7 @@ LL | async fn foo() {\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n    = note: required because it appears within the type `(NotSend,)`\n-   = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `&mut Context<'_>`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async fn` body\n   --> $DIR/partial-drop-partial-reinit.rs:31:16\n    |"}, {"sha": "88b1c1396516d497870ab47a559636999fccca90", "filename": "src/test/ui/regions/closure-in-projection-issue-97405.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.rs?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -22,11 +22,11 @@ fn good_generic_fn<T>() {\n // This should fail because `T` ends up in the upvars of the closure.\n fn bad_generic_fn<T: Copy>(t: T) {\n     assert_static(opaque(async move { t; }).next());\n-    //~^ ERROR the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n+    //~^ ERROR the parameter type `T` may not live long enough\n     assert_static(opaque(move || { t; }).next());\n     //~^ ERROR the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n     assert_static(opaque(opaque(async move { t; }).next()).next());\n-    //~^ ERROR the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n+    //~^ ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "907964aaf379e5c27b9ecfdf665558f77dfd2380", "filename": "src/test/ui/regions/closure-in-projection-issue-97405.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.stderr?ref=cf031a3355f677ed1a44e31cbc2b2d84f3cb13b6", "patch": "@@ -1,11 +1,13 @@\n-error[E0310]: the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n+error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/closure-in-projection-issue-97405.rs:24:5\n    |\n LL |     assert_static(opaque(async move { t; }).next());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n-   = help: consider adding an explicit lifetime bound `<impl Iterator as Iterator>::Item: 'static`...\n-   = note: ...so that the type `<impl Iterator as Iterator>::Item` will meet its required lifetime bounds\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bad_generic_fn<T: Copy + 'static>(t: T) {\n+   |                           +++++++++\n \n error[E0310]: the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n   --> $DIR/closure-in-projection-issue-97405.rs:26:5\n@@ -16,14 +18,16 @@ LL |     assert_static(opaque(move || { t; }).next());\n    = help: consider adding an explicit lifetime bound `<impl Iterator as Iterator>::Item: 'static`...\n    = note: ...so that the type `<impl Iterator as Iterator>::Item` will meet its required lifetime bounds\n \n-error[E0310]: the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n+error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/closure-in-projection-issue-97405.rs:28:5\n    |\n LL |     assert_static(opaque(opaque(async move { t; }).next()).next());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n-   = help: consider adding an explicit lifetime bound `<impl Iterator as Iterator>::Item: 'static`...\n-   = note: ...so that the type `<impl Iterator as Iterator>::Item` will meet its required lifetime bounds\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bad_generic_fn<T: Copy + 'static>(t: T) {\n+   |                           +++++++++\n \n error: aborting due to 3 previous errors\n "}]}