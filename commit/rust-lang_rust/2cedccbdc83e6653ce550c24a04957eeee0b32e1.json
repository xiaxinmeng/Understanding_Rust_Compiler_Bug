{"sha": "2cedccbdc83e6653ce550c24a04957eeee0b32e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZWRjY2JkYzgzZTY2NTNjZTU1MGMyNGEwNDk1N2VlZWUwYjMyZTE=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-12T09:36:38Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-12T11:54:38Z"}, "message": "Fix diagnostics spans for missing lifetimes in edge cases", "tree": {"sha": "49cfe94234582a1d20e65f39620692fa10b9af76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49cfe94234582a1d20e65f39620692fa10b9af76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cedccbdc83e6653ce550c24a04957eeee0b32e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cedccbdc83e6653ce550c24a04957eeee0b32e1", "html_url": "https://github.com/rust-lang/rust/commit/2cedccbdc83e6653ce550c24a04957eeee0b32e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cedccbdc83e6653ce550c24a04957eeee0b32e1/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338dc1f18c04efc9e194ee42b454773bed1d7621", "url": "https://api.github.com/repos/rust-lang/rust/commits/338dc1f18c04efc9e194ee42b454773bed1d7621", "html_url": "https://github.com/rust-lang/rust/commit/338dc1f18c04efc9e194ee42b454773bed1d7621"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "13e457507cf32cf87e6a04e45b76a8909d798686", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2cedccbdc83e6653ce550c24a04957eeee0b32e1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cedccbdc83e6653ce550c24a04957eeee0b32e1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=2cedccbdc83e6653ce550c24a04957eeee0b32e1", "patch": "@@ -1821,7 +1821,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n     crate fn add_missing_lifetime_specifiers_label(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        spans_with_counts: Vec<(Span, usize)>,\n+        mut spans_with_counts: Vec<(Span, usize)>,\n         lifetime_names: &FxHashSet<Symbol>,\n         lifetime_spans: Vec<Span>,\n         params: &[ElisionFailureInfo],\n@@ -1831,13 +1831,21 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             .map(|(span, _)| self.tcx.sess.source_map().span_to_snippet(*span).ok())\n             .collect();\n \n-        for (span, count) in &spans_with_counts {\n+        // Empty generics are marked with a span of \"<\", but since from now on\n+        // that information is in the snippets it can be removed from the spans.\n+        for ((span, _), snippet) in spans_with_counts.iter_mut().zip(&snippets) {\n+            if snippet.as_deref() == Some(\"<\") {\n+                *span = span.shrink_to_hi();\n+            }\n+        }\n+\n+        for &(span, count) in &spans_with_counts {\n             err.span_label(\n-                *span,\n+                span,\n                 format!(\n                     \"expected {} lifetime parameter{}\",\n-                    if *count == 1 { \"named\".to_string() } else { count.to_string() },\n-                    pluralize!(*count),\n+                    if count == 1 { \"named\".to_string() } else { count.to_string() },\n+                    pluralize!(count),\n                 ),\n             );\n         }\n@@ -1982,6 +1990,14 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                                                 .collect::<Vec<_>>()\n                                                 .join(\", \"),\n                                         )\n+                                    } else if snippet == \"<\" || snippet == \"(\" {\n+                                        (\n+                                            span.shrink_to_hi(),\n+                                            std::iter::repeat(\"'static\")\n+                                                .take(count)\n+                                                .collect::<Vec<_>>()\n+                                                .join(\", \"),\n+                                        )\n                                     } else {\n                                         (\n                                             span.shrink_to_hi(),\n@@ -1990,7 +2006,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                                                 std::iter::repeat(\"'static\")\n                                                     .take(count)\n                                                     .collect::<Vec<_>>()\n-                                                    .join(\", \")\n+                                                    .join(\", \"),\n                                             ),\n                                         )\n                                     }\n@@ -2045,6 +2061,9 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         Some(\"&\") => Some(Box::new(|name| format!(\"&{} \", name))),\n                         Some(\"'_\") => Some(Box::new(|n| n.to_string())),\n                         Some(\"\") => Some(Box::new(move |n| format!(\"{}, \", n).repeat(count))),\n+                        Some(\"<\") => Some(Box::new(move |n| {\n+                            std::iter::repeat(n).take(count).collect::<Vec<_>>().join(\", \")\n+                        })),\n                         Some(snippet) if !snippet.ends_with('>') => Some(Box::new(move |name| {\n                             format!(\n                                 \"{}<{}>\",\n@@ -2071,6 +2090,9 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         Some(\"\") => {\n                             Some(std::iter::repeat(\"'a, \").take(count).collect::<Vec<_>>().join(\"\"))\n                         }\n+                        Some(\"<\") => {\n+                            Some(std::iter::repeat(\"'a\").take(count).collect::<Vec<_>>().join(\", \"))\n+                        }\n                         Some(snippet) => Some(format!(\n                             \"{}<{}>\",\n                             snippet,"}]}