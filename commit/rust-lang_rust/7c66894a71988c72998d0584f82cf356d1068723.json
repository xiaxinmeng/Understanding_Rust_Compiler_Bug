{"sha": "7c66894a71988c72998d0584f82cf356d1068723", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNjY4OTRhNzE5ODhjNzI5OThkMDU4NGY4MmNmMzU2ZDEwNjg3MjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-08T18:29:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-08T18:29:29Z"}, "message": "rustc: Do dynamic size calculations properly when concatenating interior vectors. Closes #640.", "tree": {"sha": "0a3ad9a9bc58312ce09059fd08e27476f7560955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a3ad9a9bc58312ce09059fd08e27476f7560955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c66894a71988c72998d0584f82cf356d1068723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c66894a71988c72998d0584f82cf356d1068723", "html_url": "https://github.com/rust-lang/rust/commit/7c66894a71988c72998d0584f82cf356d1068723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c66894a71988c72998d0584f82cf356d1068723/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a432f4bb3ca2468f4d2d52f19625e4e13898e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a432f4bb3ca2468f4d2d52f19625e4e13898e9", "html_url": "https://github.com/rust-lang/rust/commit/d0a432f4bb3ca2468f4d2d52f19625e4e13898e9"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "3992138188657d633243f8c78ed29dc2deeeb860", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 40, "deletions": 23, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7c66894a71988c72998d0584f82cf356d1068723/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66894a71988c72998d0584f82cf356d1068723/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7c66894a71988c72998d0584f82cf356d1068723", "patch": "@@ -4001,12 +4001,20 @@ mod ivec {\n             copy_cx.build.Phi(T_ptr(llunitty),\n                               ~[dest_ptr_stack, dest_ptr_heap],\n                               ~[stack_cx.llbb, heap_cx.llbb]);\n-        auto lhs_len_unscaled = copy_cx.build.UDiv(lhs_len, unit_sz);\n-        auto lhs_end_ptr =\n-            copy_cx.build.InBoundsGEP(lhs_data, ~[lhs_len_unscaled]);\n-        auto rhs_len_unscaled = copy_cx.build.UDiv(rhs_len, unit_sz);\n-        auto rhs_end_ptr =\n-            copy_cx.build.InBoundsGEP(rhs_data, ~[rhs_len_unscaled]);\n+\n+        auto lhs_end_ptr; auto rhs_end_ptr;\n+        if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, unit_ty)) {\n+            lhs_end_ptr = copy_cx.build.InBoundsGEP(lhs_data, ~[lhs_len]);\n+            rhs_end_ptr = copy_cx.build.InBoundsGEP(rhs_data, ~[rhs_len]);\n+        } else {\n+            auto lhs_len_unscaled = copy_cx.build.UDiv(lhs_len, unit_sz);\n+            lhs_end_ptr = copy_cx.build.InBoundsGEP(lhs_data,\n+                                                    ~[lhs_len_unscaled]);\n+            auto rhs_len_unscaled = copy_cx.build.UDiv(rhs_len, unit_sz);\n+            rhs_end_ptr = copy_cx.build.InBoundsGEP(rhs_data,\n+                                                    ~[rhs_len_unscaled]);\n+        }\n+\n         auto dest_ptr_ptr = alloca(copy_cx, T_ptr(llunitty));\n         copy_cx.build.Store(first_dest_ptr, dest_ptr_ptr);\n         auto lhs_ptr_ptr = alloca(copy_cx, T_ptr(llunitty));\n@@ -4027,18 +4035,22 @@ mod ivec {\n                                  rhs_copy_cx.llbb);\n         auto dest_ptr_lhs_copy = lhs_do_copy_cx.build.Load(dest_ptr_ptr);\n         auto lhs_val = load_if_immediate(lhs_do_copy_cx, lhs_ptr, unit_ty);\n-        rs =\n-            copy_val(lhs_do_copy_cx, INIT, dest_ptr_lhs_copy, lhs_val,\n-                     unit_ty);\n+        rs = copy_val(lhs_do_copy_cx, INIT, dest_ptr_lhs_copy, lhs_val,\n+                      unit_ty);\n         lhs_do_copy_cx = rs.bcx;\n-        {\n-            auto d = lhs_do_copy_cx.build.InBoundsGEP(dest_ptr_lhs_copy,\n-                                                      ~[C_int(1)]);\n-            auto lhs = lhs_do_copy_cx.build.InBoundsGEP(lhs_ptr,\n-                                                        ~[C_int(1)]);\n-            lhs_do_copy_cx.build.Store(d, dest_ptr_ptr);\n-            lhs_do_copy_cx.build.Store(lhs, lhs_ptr_ptr);\n+\n+        // Increment both pointers.\n+        if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, unit_ty)) {\n+            // We have to increment by the dynamically-computed size.\n+            incr_ptr(lhs_do_copy_cx, dest_ptr_lhs_copy, unit_sz,\n+                     dest_ptr_ptr);\n+            incr_ptr(lhs_do_copy_cx, lhs_ptr, unit_sz, lhs_ptr_ptr);\n+        } else {\n+            incr_ptr(lhs_do_copy_cx, dest_ptr_lhs_copy, C_int(1),\n+                     dest_ptr_ptr);\n+            incr_ptr(lhs_do_copy_cx, lhs_ptr, C_int(1), lhs_ptr_ptr);\n         }\n+\n         lhs_do_copy_cx.build.Br(lhs_copy_cx.llbb);\n         // Copy in elements from the RHS.\n \n@@ -4055,14 +4067,19 @@ mod ivec {\n             copy_val(rhs_do_copy_cx, INIT, dest_ptr_rhs_copy, rhs_val,\n                      unit_ty);\n         rhs_do_copy_cx = rs.bcx;\n-        {\n-            auto d = rhs_do_copy_cx.build.InBoundsGEP(dest_ptr_rhs_copy,\n-                                                      ~[C_int(1)]);\n-            auto rhs = rhs_do_copy_cx.build.InBoundsGEP(rhs_ptr,\n-                                                        ~[C_int(1)]);\n-            rhs_do_copy_cx.build.Store(d, dest_ptr_ptr);\n-            rhs_do_copy_cx.build.Store(rhs, rhs_ptr_ptr);\n+\n+        // Increment both pointers.\n+        if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, unit_ty)) {\n+            // We have to increment by the dynamically-computed size.\n+            incr_ptr(rhs_do_copy_cx, dest_ptr_rhs_copy, unit_sz,\n+                     dest_ptr_ptr);\n+            incr_ptr(rhs_do_copy_cx, rhs_ptr, unit_sz, rhs_ptr_ptr);\n+        } else {\n+            incr_ptr(rhs_do_copy_cx, dest_ptr_rhs_copy, C_int(1),\n+                     dest_ptr_ptr);\n+            incr_ptr(rhs_do_copy_cx, rhs_ptr, C_int(1), rhs_ptr_ptr);\n         }\n+\n         rhs_do_copy_cx.build.Br(rhs_copy_cx.llbb);\n         // Finally done!\n "}, {"sha": "ad22c6cab908d6bd719d40f2afe7fa1aa8ead391", "filename": "src/test/run-pass/ivec-add.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c66894a71988c72998d0584f82cf356d1068723/src%2Ftest%2Frun-pass%2Fivec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66894a71988c72998d0584f82cf356d1068723/src%2Ftest%2Frun-pass%2Fivec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-add.rs?ref=7c66894a71988c72998d0584f82cf356d1068723", "patch": "@@ -0,0 +1,16 @@\n+// xfail-stage0\n+\n+fn double[T](&T a) -> T[] { ret ~[a] + ~[a]; }\n+\n+fn double_int(int a) -> int[] { ret ~[a] + ~[a]; }\n+\n+fn main() {\n+    auto d = double(1);\n+    assert (d.(0) == 1);\n+    assert (d.(1) == 1);\n+\n+    d = double_int(1);\n+    assert (d.(0) == 1);\n+    assert (d.(1) == 1);\n+}\n+"}]}