{"sha": "4763c2240202cd460c4a9cb8fcbd242a610e550a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NjNjMjI0MDIwMmNkNDYwYzRhOWNiOGZjYmQyNDJhNjEwZTU1MGE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-19T03:03:35Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-19T08:47:55Z"}, "message": "Rollup merge of #55178 - sdroege:stabilize-chunks-exact, r=alexcrichton\n\nStabilize slice::chunks_exact(), chunks_exact_mut(), rchunks(), rchunks_mut(), rchunks_exact(), rchunks_exact_mut()\n\nFixes #47115, #55177", "tree": {"sha": "02af6b39b77be989dd30b72acbc86bd3a5e1e344", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02af6b39b77be989dd30b72acbc86bd3a5e1e344"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4763c2240202cd460c4a9cb8fcbd242a610e550a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvJmjsACgkQ/vbIBR0O\nATzVog//a3ulNDpPN7s4b4t1P5mM7Gh7Q9VbbSmv3aIVq/uspJwwtrNebtykCOBw\n4aCxm05pyTzUuwW4+v//Q3pmU+uWi6QQEGkKbAfclHLgHvqCPdgjIOxx5cobdLLt\nQDJ9JjY1gF3RxBcYrpq99zD0xffhJvUEr6GhGTUC8xlQhh5TlbfZ8MGxP208xox2\nIMxQCp1aLcNiBcO+xLO2dWgE/WDwxi/L9c9Iz6DaQy1xyXM59LlVxE8Vc8FkKwUf\nirbrHUKNamHrbBPKGWcH/pdMKo0YN137NlHf/bbYBOooVG7mRQmkCyf+NEUJa4ph\nsZEx95WeAHUbs8qhnbimIfb9F5yCaN+XmPzLMzSt6zZewyU5za6aLQDd/w0B5RUO\nh+bTjOGq+rPS06i83kKvWAR87b3utxLV4I5IJGtYbTCK+aupLJJf28IUIp9gXLzv\nED7Hf/GtIg4GTtxa+GzEeHl6y5jTl0ehxzt0hwbXVGpXWFWWej7fLDhdd5A6SumP\nN127nMtXun7W+o0QoCNqe7WjYni58Mgc+1ZNeG7PsiwmmnnSrUtVifn1hj/oWIUr\nKnds/gCDNYBOxKe+okk8VyPZ6owHH26l/WvcKaqyxsql32oeDDvrFU8xjDvwjLZU\nChbb17oNvELNgONEqVP3BMLH08E0XjhwHfCmtf8zN5mRIBYoBws=\n=Ck/B\n-----END PGP SIGNATURE-----", "payload": "tree 02af6b39b77be989dd30b72acbc86bd3a5e1e344\nparent 399314d802366023fc3d2b7ac7b7decfcc3397ea\nparent 52cc6fde4b73a3013ce2185052f9492ae3728367\nauthor kennytm <kennytm@gmail.com> 1539918215 +0800\ncommitter kennytm <kennytm@gmail.com> 1539938875 +0800\n\nRollup merge of #55178 - sdroege:stabilize-chunks-exact, r=alexcrichton\n\nStabilize slice::chunks_exact(), chunks_exact_mut(), rchunks(), rchunks_mut(), rchunks_exact(), rchunks_exact_mut()\n\nFixes #47115, #55177\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4763c2240202cd460c4a9cb8fcbd242a610e550a", "html_url": "https://github.com/rust-lang/rust/commit/4763c2240202cd460c4a9cb8fcbd242a610e550a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4763c2240202cd460c4a9cb8fcbd242a610e550a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "399314d802366023fc3d2b7ac7b7decfcc3397ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/399314d802366023fc3d2b7ac7b7decfcc3397ea", "html_url": "https://github.com/rust-lang/rust/commit/399314d802366023fc3d2b7ac7b7decfcc3397ea"}, {"sha": "52cc6fde4b73a3013ce2185052f9492ae3728367", "url": "https://api.github.com/repos/rust-lang/rust/commits/52cc6fde4b73a3013ce2185052f9492ae3728367", "html_url": "https://github.com/rust-lang/rust/commit/52cc6fde4b73a3013ce2185052f9492ae3728367"}], "stats": {"total": 120, "additions": 51, "deletions": 69}, "files": [{"sha": "84ca7c4fec9e5d4f154b4fe98a6aaea545887844", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=4763c2240202cd460c4a9cb8fcbd242a610e550a", "patch": "@@ -115,12 +115,10 @@\n #![feature(unsize)]\n #![feature(allocator_internals)]\n #![feature(on_unimplemented)]\n-#![feature(chunks_exact)]\n #![feature(rustc_const_unstable)]\n #![feature(const_vec_new)]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit)]\n-#![feature(rchunks)]\n \n // Allow testing this library\n "}, {"sha": "1eaff7410ea6b2e5fda3e6871b144bfd34704479", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=4763c2240202cd460c4a9cb8fcbd242a610e550a", "patch": "@@ -123,9 +123,9 @@ pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n pub use core::slice::{from_ref, from_mut};\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use core::slice::SliceIndex;\n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n pub use core::slice::{ChunksExact, ChunksExactMut};\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub use core::slice::{RChunks, RChunksMut, RChunksExact, RChunksExactMut};\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "6d1cfb10859d4bc4ee433c9247c66dbcbad1c088", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=4763c2240202cd460c4a9cb8fcbd242a610e550a", "patch": "@@ -19,8 +19,6 @@\n #![feature(str_escape)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n-#![feature(chunks_exact)]\n-#![feature(rchunks)]\n #![feature(repeat_generic_slice)]\n \n extern crate alloc_system;"}, {"sha": "8a6b212020b4e4a0d74f661d675a604bafce40b1", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 49, "deletions": 61, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=4763c2240202cd460c4a9cb8fcbd242a610e550a", "patch": "@@ -713,8 +713,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(chunks_exact)]\n-    ///\n     /// let slice = ['l', 'o', 'r', 'e', 'm'];\n     /// let mut iter = slice.chunks_exact(2);\n     /// assert_eq!(iter.next().unwrap(), &['l', 'o']);\n@@ -725,7 +723,7 @@ impl<T> [T] {\n     ///\n     /// [`chunks`]: #method.chunks\n     /// [`rchunks_exact`]: #method.rchunks_exact\n-    #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+    #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n     pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<T> {\n         assert!(chunk_size != 0);\n@@ -756,8 +754,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(chunks_exact)]\n-    ///\n     /// let v = &mut [0, 0, 0, 0, 0];\n     /// let mut count = 1;\n     ///\n@@ -772,7 +768,7 @@ impl<T> [T] {\n     ///\n     /// [`chunks_mut`]: #method.chunks_mut\n     /// [`rchunks_exact_mut`]: #method.rchunks_exact_mut\n-    #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+    #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n     pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<T> {\n         assert!(chunk_size != 0);\n@@ -799,8 +795,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rchunks)]\n-    ///\n     /// let slice = ['l', 'o', 'r', 'e', 'm'];\n     /// let mut iter = slice.rchunks(2);\n     /// assert_eq!(iter.next().unwrap(), &['e', 'm']);\n@@ -811,7 +805,7 @@ impl<T> [T] {\n     ///\n     /// [`rchunks_exact`]: #method.rchunks_exact\n     /// [`chunks`]: #method.chunks\n-    #[unstable(feature = \"rchunks\", issue = \"55177\")]\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks(&self, chunk_size: usize) -> RChunks<T> {\n         assert!(chunk_size != 0);\n@@ -835,8 +829,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rchunks)]\n-    ///\n     /// let v = &mut [0, 0, 0, 0, 0];\n     /// let mut count = 1;\n     ///\n@@ -851,7 +843,7 @@ impl<T> [T] {\n     ///\n     /// [`rchunks_exact_mut`]: #method.rchunks_exact_mut\n     /// [`chunks_mut`]: #method.chunks_mut\n-    #[unstable(feature = \"rchunks\", issue = \"55177\")]\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<T> {\n         assert!(chunk_size != 0);\n@@ -879,8 +871,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rchunks)]\n-    ///\n     /// let slice = ['l', 'o', 'r', 'e', 'm'];\n     /// let mut iter = slice.rchunks_exact(2);\n     /// assert_eq!(iter.next().unwrap(), &['e', 'm']);\n@@ -891,7 +881,7 @@ impl<T> [T] {\n     ///\n     /// [`rchunks`]: #method.rchunks\n     /// [`chunks_exact`]: #method.chunks_exact\n-    #[unstable(feature = \"rchunks\", issue = \"55177\")]\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<T> {\n         assert!(chunk_size != 0);\n@@ -921,8 +911,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rchunks)]\n-    ///\n     /// let v = &mut [0, 0, 0, 0, 0];\n     /// let mut count = 1;\n     ///\n@@ -937,7 +925,7 @@ impl<T> [T] {\n     ///\n     /// [`rchunks_mut`]: #method.rchunks_mut\n     /// [`chunks_exact_mut`]: #method.chunks_exact_mut\n-    #[unstable(feature = \"rchunks\", issue = \"55177\")]\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<T> {\n         assert!(chunk_size != 0);\n@@ -4022,25 +4010,25 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n /// [`remainder`]: ../../std/slice/struct.ChunksExact.html#method.remainder\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n pub struct ChunksExact<'a, T:'a> {\n     v: &'a [T],\n     rem: &'a [T],\n     chunk_size: usize\n }\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n impl<'a, T> ChunksExact<'a, T> {\n     /// Return the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem\n     }\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n impl<T> Clone for ChunksExact<'_, T> {\n     fn clone(&self) -> Self {\n         ChunksExact {\n@@ -4051,7 +4039,7 @@ impl<T> Clone for ChunksExact<'_, T> {\n     }\n }\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n impl<'a, T> Iterator for ChunksExact<'a, T> {\n     type Item = &'a [T];\n \n@@ -4096,7 +4084,7 @@ impl<'a, T> Iterator for ChunksExact<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for ChunksExact<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n@@ -4110,7 +4098,7 @@ impl<'a, T> DoubleEndedIterator for ChunksExact<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n impl<T> ExactSizeIterator for ChunksExact<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n@@ -4120,11 +4108,11 @@ impl<T> ExactSizeIterator for ChunksExact<'_, T> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T> TrustedLen for ChunksExact<'_, T> {}\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n impl<T> FusedIterator for ChunksExact<'_, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T] {\n         let start = i * self.chunk_size;\n@@ -4146,24 +4134,24 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n /// [`into_remainder`]: ../../std/slice/struct.ChunksExactMut.html#method.into_remainder\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n pub struct ChunksExactMut<'a, T:'a> {\n     v: &'a mut [T],\n     rem: &'a mut [T],\n     chunk_size: usize\n }\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n impl<'a, T> ChunksExactMut<'a, T> {\n     /// Return the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     pub fn into_remainder(self) -> &'a mut [T] {\n         self.rem\n     }\n }\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n impl<'a, T> Iterator for ChunksExactMut<'a, T> {\n     type Item = &'a mut [T];\n \n@@ -4210,7 +4198,7 @@ impl<'a, T> Iterator for ChunksExactMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for ChunksExactMut<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut [T]> {\n@@ -4226,7 +4214,7 @@ impl<'a, T> DoubleEndedIterator for ChunksExactMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n impl<T> ExactSizeIterator for ChunksExactMut<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n@@ -4236,11 +4224,11 @@ impl<T> ExactSizeIterator for ChunksExactMut<'_, T> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T> TrustedLen for ChunksExactMut<'_, T> {}\n \n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n impl<T> FusedIterator for ChunksExactMut<'_, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n+#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T] {\n         let start = i * self.chunk_size;\n@@ -4260,14 +4248,14 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n /// [`rchunks`]: ../../std/primitive.slice.html#method.rchunks\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunks<'a, T:'a> {\n     v: &'a [T],\n     chunk_size: usize\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Clone for RChunks<'a, T> {\n     fn clone(&self) -> RChunks<'a, T> {\n         RChunks {\n@@ -4277,7 +4265,7 @@ impl<'a, T> Clone for RChunks<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Iterator for RChunks<'a, T> {\n     type Item = &'a [T];\n \n@@ -4341,7 +4329,7 @@ impl<'a, T> Iterator for RChunks<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for RChunks<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n@@ -4357,17 +4345,17 @@ impl<'a, T> DoubleEndedIterator for RChunks<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> ExactSizeIterator for RChunks<'a, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, T> TrustedLen for RChunks<'a, T> {}\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> FusedIterator for RChunks<'a, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T] {\n         let end = self.v.len() - i * self.chunk_size;\n@@ -4391,13 +4379,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n /// [`rchunks_mut`]: ../../std/primitive.slice.html#method.rchunks_mut\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksMut<'a, T:'a> {\n     v: &'a mut [T],\n     chunk_size: usize\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Iterator for RChunksMut<'a, T> {\n     type Item = &'a mut [T];\n \n@@ -4465,7 +4453,7 @@ impl<'a, T> Iterator for RChunksMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for RChunksMut<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut [T]> {\n@@ -4482,17 +4470,17 @@ impl<'a, T> DoubleEndedIterator for RChunksMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> ExactSizeIterator for RChunksMut<'a, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, T> TrustedLen for RChunksMut<'a, T> {}\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> FusedIterator for RChunksMut<'a, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T] {\n         let end = self.v.len() - i * self.chunk_size;\n@@ -4518,25 +4506,25 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n /// [`remainder`]: ../../std/slice/struct.ChunksExact.html#method.remainder\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksExact<'a, T:'a> {\n     v: &'a [T],\n     rem: &'a [T],\n     chunk_size: usize\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n impl<'a, T> RChunksExact<'a, T> {\n     /// Return the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem\n     }\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Clone for RChunksExact<'a, T> {\n     fn clone(&self) -> RChunksExact<'a, T> {\n         RChunksExact {\n@@ -4547,7 +4535,7 @@ impl<'a, T> Clone for RChunksExact<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Iterator for RChunksExact<'a, T> {\n     type Item = &'a [T];\n \n@@ -4592,7 +4580,7 @@ impl<'a, T> Iterator for RChunksExact<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for RChunksExact<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n@@ -4606,7 +4594,7 @@ impl<'a, T> DoubleEndedIterator for RChunksExact<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> ExactSizeIterator for RChunksExact<'a, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n@@ -4616,11 +4604,11 @@ impl<'a, T> ExactSizeIterator for RChunksExact<'a, T> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, T> TrustedLen for RChunksExact<'a, T> {}\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> FusedIterator for RChunksExact<'a, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T] {\n         let end = self.v.len() - i * self.chunk_size;\n@@ -4643,24 +4631,24 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n /// [`into_remainder`]: ../../std/slice/struct.ChunksExactMut.html#method.into_remainder\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksExactMut<'a, T:'a> {\n     v: &'a mut [T],\n     rem: &'a mut [T],\n     chunk_size: usize\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n impl<'a, T> RChunksExactMut<'a, T> {\n     /// Return the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     pub fn into_remainder(self) -> &'a mut [T] {\n         self.rem\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Iterator for RChunksExactMut<'a, T> {\n     type Item = &'a mut [T];\n \n@@ -4709,7 +4697,7 @@ impl<'a, T> Iterator for RChunksExactMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for RChunksExactMut<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut [T]> {\n@@ -4724,7 +4712,7 @@ impl<'a, T> DoubleEndedIterator for RChunksExactMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> ExactSizeIterator for RChunksExactMut<'a, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n@@ -4734,11 +4722,11 @@ impl<'a, T> ExactSizeIterator for RChunksExactMut<'a, T> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, T> TrustedLen for RChunksExactMut<'a, T> {}\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> FusedIterator for RChunksExactMut<'a, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T] {\n         let end = self.v.len() - i * self.chunk_size;"}, {"sha": "965bd545eed591665b90be854ec0fab7c0fe9c1b", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4763c2240202cd460c4a9cb8fcbd242a610e550a/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=4763c2240202cd460c4a9cb8fcbd242a610e550a", "patch": "@@ -34,8 +34,6 @@\n #![feature(trusted_len)]\n #![feature(try_from)]\n #![feature(try_trait)]\n-#![feature(chunks_exact)]\n-#![feature(rchunks)]\n #![feature(align_offset)]\n #![feature(reverse_bits)]\n #![feature(inner_deref)]"}]}