{"sha": "a752853350639a915178ea900a51f3c45443795e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NTI4NTMzNTA2MzlhOTE1MTc4ZWE5MDBhNTFmM2M0NTQ0Mzc5NWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-17T19:24:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T18:28:27Z"}, "message": "Add snippetTextEdit protocol extension", "tree": {"sha": "53fe8ac7cc20109436fb54dfde9ed1c4baba1ad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53fe8ac7cc20109436fb54dfde9ed1c4baba1ad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a752853350639a915178ea900a51f3c45443795e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a752853350639a915178ea900a51f3c45443795e", "html_url": "https://github.com/rust-lang/rust/commit/a752853350639a915178ea900a51f3c45443795e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a752853350639a915178ea900a51f3c45443795e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc", "html_url": "https://github.com/rust-lang/rust/commit/fa2e5299c3332b99fcd09fd54e8d812a6c34b0cc"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "d75c48597bce46abb4494d53304d87957c2c95cf", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a752853350639a915178ea900a51f3c45443795e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a752853350639a915178ea900a51f3c45443795e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=a752853350639a915178ea900a51f3c45443795e", "patch": "@@ -275,6 +275,7 @@ impl Config {\n             {\n                 self.client_caps.code_action_literals = value;\n             }\n+\n             self.completion.allow_snippets(false);\n             if let Some(completion) = &doc_caps.completion {\n                 if let Some(completion_item) = &completion.completion_item {\n@@ -283,13 +284,19 @@ impl Config {\n                     }\n                 }\n             }\n-            self.assist.allow_snippets(false);\n         }\n \n         if let Some(window_caps) = caps.window.as_ref() {\n             if let Some(value) = window_caps.work_done_progress {\n                 self.client_caps.work_done_progress = value;\n             }\n         }\n+\n+        self.assist.allow_snippets(false);\n+        if let Some(experimental) = &caps.experimental {\n+            let enable =\n+                experimental.get(\"snippetTextEdit\").and_then(|it| it.as_bool()) == Some(true);\n+            self.assist.allow_snippets(enable);\n+        }\n     }\n }"}, {"sha": "d2ec6c0215b39457e2471e4715c1a5f05c1cb880", "filename": "docs/dev/lsp-extensions.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a752853350639a915178ea900a51f3c45443795e/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/a752853350639a915178ea900a51f3c45443795e/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=a752853350639a915178ea900a51f3c45443795e", "patch": "@@ -0,0 +1,34 @@\n+# LSP Extensions\n+\n+This document describes LSP extensions used by rust-analyzer.\n+It's a best effort document, when in doubt, consult the source (and send a PR with clarification ;-) ).\n+We aim to upstream all non Rust-specific extensions to the protocol, but this is not a top priority.\n+All capabilities are enabled via `experimental` field of `ClientCapabilities`.\n+\n+## `SnippetTextEdit`\n+\n+**Capability**\n+\n+```typescript\n+{\n+    \"snippetTextEdit\": boolean\n+}\n+```\n+\n+If this capability is set, `WorkspaceEdit`s returned from `codeAction` requests might contain `SnippetTextEdit`s instead of usual `TextEdit`s:\n+\n+```typescript\n+interface SnippetTextEdit extends TextEdit {\n+    insertTextFormat?: InsertTextFormat;\n+}\n+```\n+\n+```typescript\n+export interface TextDocumentEdit {\n+\ttextDocument: VersionedTextDocumentIdentifier;\n+\tedits: (TextEdit | SnippetTextEdit)[];\n+}\n+```\n+\n+When applying such code action, the editor should insert snippet, with tab stops and placeholder.\n+At the moment, rust-analyzer guarantees that only a single edit will have `InsertTextFormat.Snippet`."}, {"sha": "2067738ea6c6deb6d264894de3c1b940bda5ef3f", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a752853350639a915178ea900a51f3c45443795e/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a752853350639a915178ea900a51f3c45443795e/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=a752853350639a915178ea900a51f3c45443795e", "patch": "@@ -35,7 +35,7 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n         } as any\n     };\n \n-    const res = new lc.LanguageClient(\n+    const client = new lc.LanguageClient(\n         'rust-analyzer',\n         'Rust Analyzer Language Server',\n         serverOptions,\n@@ -47,8 +47,19 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n     // since they are available on stable.\n     // Note that while these features are stable in vscode their LSP protocol\n     // implementations are still in the \"proposed\" category for 3.16.\n-    res.registerFeature(new CallHierarchyFeature(res));\n-    res.registerFeature(new SemanticTokensFeature(res));\n+    client.registerFeature(new CallHierarchyFeature(client));\n+    client.registerFeature(new SemanticTokensFeature(client));\n+    client.registerFeature(new SnippetTextEditFeature());\n \n-    return res;\n+    return client;\n+}\n+\n+class SnippetTextEditFeature implements lc.StaticFeature {\n+    fillClientCapabilities(capabilities: lc.ClientCapabilities): void {\n+        const caps: any = capabilities.experimental ?? {};\n+        caps.snippetTextEdit = true;\n+        capabilities.experimental = caps\n+    }\n+    initialize(_capabilities: lc.ServerCapabilities<any>, _documentSelector: lc.DocumentSelector | undefined): void {\n+    }\n }"}]}