{"sha": "a70ae2ffb9a5dd08d916b9938eeca820486ba7a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MGFlMmZmYjlhNWRkMDhkOTE2Yjk5MzhlZWNhODIwNDg2YmE3YTA=", "commit": {"author": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-12-29T18:41:43Z"}, "committer": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2016-02-23T06:37:53Z"}, "message": "CStr::from_bytes", "tree": {"sha": "2926c77d9f53f2758df00ad1c9a361cfe172ced4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2926c77d9f53f2758df00ad1c9a361cfe172ced4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a70ae2ffb9a5dd08d916b9938eeca820486ba7a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a70ae2ffb9a5dd08d916b9938eeca820486ba7a0", "html_url": "https://github.com/rust-lang/rust/commit/a70ae2ffb9a5dd08d916b9938eeca820486ba7a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a70ae2ffb9a5dd08d916b9938eeca820486ba7a0/comments", "author": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c6f2881c634fe72dc98b846037dc1237270659", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c6f2881c634fe72dc98b846037dc1237270659", "html_url": "https://github.com/rust-lang/rust/commit/37c6f2881c634fe72dc98b846037dc1237270659"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "f50e906f14c484b266d0b65b0d7fae697311beb6", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a70ae2ffb9a5dd08d916b9938eeca820486ba7a0/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70ae2ffb9a5dd08d916b9938eeca820486ba7a0/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=a70ae2ffb9a5dd08d916b9938eeca820486ba7a0", "patch": "@@ -436,6 +436,57 @@ impl CStr {\n         mem::transmute(slice::from_raw_parts(ptr, len as usize + 1))\n     }\n \n+    /// Creates a C string wrapper from a byte slice.\n+    ///\n+    /// This function will cast the provided `bytes` to a `CStr` wrapper after\n+    /// ensuring that it is null terminated but does not contain any interior\n+    /// nul bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(cstr_from_bytes)]\n+    /// use std::ffi::CStr;\n+    ///\n+    /// # fn main() {\n+    /// let cstr = CStr::from_bytes(b\"hello\\0\");\n+    /// assert!(cstr.is_some());\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"0\")]\n+    pub fn from_bytes<'a>(bytes: &'a [u8]) -> Option<&'a CStr> {\n+        if bytes.is_empty() || memchr::memchr(0, &bytes) != Some(bytes.len() - 1) {\n+            None\n+        } else {\n+            Some(unsafe { Self::from_bytes_unchecked(bytes) })\n+        }\n+    }\n+\n+    /// Unsafely creates a C string wrapper from a byte slice.\n+    ///\n+    /// This function will cast the provided `bytes` to a `CStr` wrapper without\n+    /// performing any sanity checks. The provided slice must be null terminated\n+    /// and not contain any interior nul bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(cstr_from_bytes)]\n+    /// use std::ffi::{CStr, CString};\n+    ///\n+    /// # fn main() {\n+    /// unsafe {\n+    ///     let cstring = CString::new(\"hello\").unwrap();\n+    ///     let cstr = CStr::from_bytes_unchecked(cstring.to_bytes_with_nul());\n+    ///     assert_eq!(cstr, &*cstring);\n+    /// }\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"0\")]\n+    pub unsafe fn from_bytes_unchecked<'a>(bytes: &'a [u8]) -> &'a CStr {\n+        mem::transmute(bytes)\n+    }\n+\n     /// Returns the inner pointer to this C string.\n     ///\n     /// The returned pointer will be valid for as long as `self` is and points"}]}