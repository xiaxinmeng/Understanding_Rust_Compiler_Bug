{"sha": "bee84733ade5e100a57478b8d551ce1840dc3009", "node_id": "C_kwDOAAsO6NoAKGJlZTg0NzMzYWRlNWUxMDBhNTc0NzhiOGQ1NTFjZTE4NDBkYzMwMDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T18:59:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T18:59:18Z"}, "message": "Rollup merge of #108834 - compiler-errors:fn-ptr-fn-obl, r=spastorino\n\nDo not ICE when we have fn pointer `Fn` obligations with bound vars in the self type\n\nWe never supported solving `for<'a> fn(&'a ()): Fn(&'a ())` -- I tried to add that support in #104929, but iirc `@lcnr` wanted to support this more generally by eagerly instantiating trait predicate binders with placeholders. That never happened due to blockers in the old solver, but we probably shouldn't ICE in any case.\n\nOn the bright side, this passes on the new solver :^)", "tree": {"sha": "af75c2d7872fcbd142b371cb680c341128091d28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af75c2d7872fcbd142b371cb680c341128091d28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bee84733ade5e100a57478b8d551ce1840dc3009", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkC34GCRBK7hj4Ov3rIwAA+7MIADt2F4i3NpaaIGmF1MX28Kh+\neVj88Pte9TSsrJCk5cnVirs27E66hLaFAyaeVr/HtavSbPrRVjj6pjD+tz9XkZUn\np+8PhuIZNDGvFsM8w+nitEp3S1h8fUiA6xRqeodeZGl3MGowYMREtmCVG3bNDJc8\noNPkuV6Pimby4TjG8zOUizu517AascP9++lRk8ZEFyXyJbvjYeKp+FYHGJrqHKY7\nDzrV58AV5weBiy7djocPpOWMFyZ12p7a728P/xOEYK//nG2YQ3Rjd4EJ4CYCk0xC\nc52OE98d+ffc6haPnSeCSlAOo7Fm7Bx9qQ+HWKtrL8x4sKkJcNqTN1YHzLXD5vA=\n=q2tr\n-----END PGP SIGNATURE-----\n", "payload": "tree af75c2d7872fcbd142b371cb680c341128091d28\nparent 233ed35e8491c2c08e7320fba3f3bd5519daf58d\nparent 4fe232b27770f3e568fa4fa676f8bbd1ff595a6c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678474758 +0100\ncommitter GitHub <noreply@github.com> 1678474758 +0100\n\nRollup merge of #108834 - compiler-errors:fn-ptr-fn-obl, r=spastorino\n\nDo not ICE when we have fn pointer `Fn` obligations with bound vars in the self type\n\nWe never supported solving `for<'a> fn(&'a ()): Fn(&'a ())` -- I tried to add that support in #104929, but iirc `@lcnr` wanted to support this more generally by eagerly instantiating trait predicate binders with placeholders. That never happened due to blockers in the old solver, but we probably shouldn't ICE in any case.\n\nOn the bright side, this passes on the new solver :^)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bee84733ade5e100a57478b8d551ce1840dc3009", "html_url": "https://github.com/rust-lang/rust/commit/bee84733ade5e100a57478b8d551ce1840dc3009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bee84733ade5e100a57478b8d551ce1840dc3009/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "233ed35e8491c2c08e7320fba3f3bd5519daf58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/233ed35e8491c2c08e7320fba3f3bd5519daf58d", "html_url": "https://github.com/rust-lang/rust/commit/233ed35e8491c2c08e7320fba3f3bd5519daf58d"}, {"sha": "4fe232b27770f3e568fa4fa676f8bbd1ff595a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe232b27770f3e568fa4fa676f8bbd1ff595a6c", "html_url": "https://github.com/rust-lang/rust/commit/4fe232b27770f3e568fa4fa676f8bbd1ff595a6c"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "ee41d840bae926e17bf4860c91352508870fbabe", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bee84733ade5e100a57478b8d551ce1840dc3009/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee84733ade5e100a57478b8d551ce1840dc3009/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=bee84733ade5e100a57478b8d551ce1840dc3009", "patch": "@@ -601,10 +601,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(?obligation, \"confirm_fn_pointer_candidate\");\n \n         let tcx = self.tcx();\n-        let self_ty = self\n+\n+        let Some(self_ty) = self\n             .infcx\n-            .shallow_resolve(obligation.self_ty().no_bound_vars())\n-            .expect(\"fn pointer should not capture bound vars from predicate\");\n+            .shallow_resolve(obligation.self_ty().no_bound_vars()) else\n+        {\n+            // FIXME: Ideally we'd support `for<'a> fn(&'a ()): Fn(&'a ())`,\n+            // but we do not currently. Luckily, such a bound is not\n+            // particularly useful, so we don't expect users to write\n+            // them often.\n+            return Err(SelectionError::Unimplemented);\n+        };\n+\n         let sig = self_ty.fn_sig(tcx);\n         let trait_ref = closure_trait_ref_and_return_type(\n             tcx,"}, {"sha": "9af6bc45c7a060c14ff3f875983ce0bdaf2ef3a8", "filename": "tests/ui/higher-rank-trait-bounds/fn-ptr.classic.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bee84733ade5e100a57478b8d551ce1840dc3009/tests%2Fui%2Fhigher-rank-trait-bounds%2Ffn-ptr.classic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bee84733ade5e100a57478b8d551ce1840dc3009/tests%2Fui%2Fhigher-rank-trait-bounds%2Ffn-ptr.classic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Ffn-ptr.classic.stderr?ref=bee84733ade5e100a57478b8d551ce1840dc3009", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: expected a `Fn<(&'w (),)>` closure, found `fn(&'w ())`\n+  --> $DIR/fn-ptr.rs:12:5\n+   |\n+LL |     ice();\n+   |     ^^^ expected an `Fn<(&'w (),)>` closure, found `fn(&'w ())`\n+   |\n+   = help: the trait `for<'w> Fn<(&'w (),)>` is not implemented for `fn(&'w ())`\n+note: required by a bound in `ice`\n+  --> $DIR/fn-ptr.rs:7:25\n+   |\n+LL | fn ice()\n+   |    --- required by a bound in this function\n+LL | where\n+LL |     for<'w> fn(&'w ()): Fn(&'w ()),\n+   |                         ^^^^^^^^^^ required by this bound in `ice`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "853160f961245ce3388972fd4c4e68f27fb0c767", "filename": "tests/ui/higher-rank-trait-bounds/fn-ptr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bee84733ade5e100a57478b8d551ce1840dc3009/tests%2Fui%2Fhigher-rank-trait-bounds%2Ffn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee84733ade5e100a57478b8d551ce1840dc3009/tests%2Fui%2Fhigher-rank-trait-bounds%2Ffn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Ffn-ptr.rs?ref=bee84733ade5e100a57478b8d551ce1840dc3009", "patch": "@@ -0,0 +1,14 @@\n+// revisions: classic next\n+//[next] compile-flags: -Ztrait-solver=next\n+//[next] check-pass\n+\n+fn ice()\n+where\n+    for<'w> fn(&'w ()): Fn(&'w ()),\n+{\n+}\n+\n+fn main() {\n+    ice();\n+    //[classic]~^ ERROR expected a `Fn<(&'w (),)>` closure, found `fn(&'w ())`\n+}"}]}