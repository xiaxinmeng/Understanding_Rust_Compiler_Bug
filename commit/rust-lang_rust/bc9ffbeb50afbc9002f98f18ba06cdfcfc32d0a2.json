{"sha": "bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2", "node_id": "C_kwDOAAsO6NoAKGJjOWZmYmViNTBhZmJjOTAwMmY5OGYxOGJhMDZjZGZjZmMzMmQwYTI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-03T15:38:36Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-06T17:49:48Z"}, "message": "Implement param_env for RPITITs assoc type", "tree": {"sha": "6d17d55cca72437dccb9edac67b6949261d6c871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d17d55cca72437dccb9edac67b6949261d6c871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQGJ7wACgkQgTGiTgx5\n76+EyBAAgHeLwZcyXMsb+0POq0WV+BT76Af2wg9bnk53zJng4Gg97J5gUxr7tZLG\nN6TJTN3TfCQFhjCwdawTWYVC+d1K2hpoeIwIdwjXmzTyv81XhCi7fbvLtuRosqzu\nOVJeKOSnedP7c8+nmQ0qr4Kz3Iku0hv3EGwk5+0am8UpQtwErnLttkqUrus+1iJQ\nnKU8DIDQSrq7lb2fU5ZFWOHY4N5zGqe757ujmHnTuh1Db/ZhdqTMFCKbQv+OuO76\nQbZ66OoAcGVuUY7klHlp9jHKatCb8IxgIXA/1cepbz8Su36P7b4FSRB73rpW/zQz\n5DQ456qhUzmSwpbsDFwNkYDSkUOeR3XV34uC5nKOMhjozriPS5rxDkmVt/Shv7kI\nyRGJBzBqtQTtVvhR5YK1SHaSuDvq+kNBEQnlaICHdf7ASqiybB4djMgO+m2WJWpy\nwCeeousV8Q4lLEj1vP13OSXekJ7A5MyzsVk5u/bdsdYmTgdwJT9iYswobLlSx9D/\negBnH0BeXyjWUx1Gm+wHEoqAr13Dvkda+dpygMNSc7i+KK4vALGBqQKrjCaVMua9\nBV2zjUhVmTg+eKTLnu2oE/WuNWCR88HNKDqpA/+ykeBGcmEzVvk8P0XLqpLmcxiU\nKxp1gNV9+ziEdNQCj4ivMXzDSXlCxLJ3LB6bGylJIMf6CmoZFzU=\n=zzBM\n-----END PGP SIGNATURE-----", "payload": "tree 6d17d55cca72437dccb9edac67b6949261d6c871\nparent 290c638b5f8f03704744351fa3aa02fb04b00ffc\nauthor Santiago Pastorino <spastorino@gmail.com> 1677857916 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678124988 -0300\n\nImplement param_env for RPITITs assoc type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2", "html_url": "https://github.com/rust-lang/rust/commit/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "290c638b5f8f03704744351fa3aa02fb04b00ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/290c638b5f8f03704744351fa3aa02fb04b00ffc", "html_url": "https://github.com/rust-lang/rust/commit/290c638b5f8f03704744351fa3aa02fb04b00ffc"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "70ca1f17d62f051eed56f0de32530edfadabadba", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2", "patch": "@@ -1324,6 +1324,7 @@ rustc_queries! {\n     /// might want to use `reveal_all()` method to change modes.\n     query param_env(def_id: DefId) -> ty::ParamEnv<'tcx> {\n         desc { |tcx| \"computing normalized predicates of `{}`\", tcx.def_path_str(def_id) }\n+        feedable\n     }\n \n     /// Like `param_env`, but returns the `ParamEnv` in `Reveal::All` mode."}, {"sha": "80ed72bfaa1f9f1c2f7376270e46cc064f0163cd", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2", "patch": "@@ -342,6 +342,10 @@ fn impl_associated_item_for_impl_trait_in_trait(\n         fn_has_self_parameter: false,\n     });\n \n+    // Copy param_env of the containing function. The synthesized associated type doesn't have\n+    // extra predicates to assume.\n+    impl_assoc_ty.param_env(tcx.param_env(impl_fn_def_id));\n+\n     // Copy impl_defaultness of the containing function.\n     impl_assoc_ty.impl_defaultness(tcx.impl_defaultness(impl_fn_def_id));\n "}, {"sha": "5caad0965bd753e190fb373b64f4caa2076af06b", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=bc9ffbeb50afbc9002f98f18ba06cdfcfc32d0a2", "patch": "@@ -3,8 +3,8 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::ty::{\n-    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n-    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, Binder, EarlyBinder, ImplTraitInTraitData, Predicate, PredicateKind, ToPredicate, Ty,\n+    TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n@@ -117,6 +117,15 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n \n /// See `ParamEnv` struct definition for details.\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n+    // When computing the param_env of an RPITIT, copy param_env of the containing function. The\n+    // synthesized associated type doesn't have extra predicates to assume.\n+    let def_id =\n+        if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+            fn_def_id\n+        } else {\n+            def_id\n+        };\n+\n     // Compute the bounds on Self and the type parameters.\n     let ty::InstantiatedPredicates { mut predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);"}]}