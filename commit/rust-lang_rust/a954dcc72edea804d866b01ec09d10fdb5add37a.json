{"sha": "a954dcc72edea804d866b01ec09d10fdb5add37a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NTRkY2M3MmVkZWE4MDRkODY2YjAxZWMwOWQxMGZkYjVhZGQzN2E=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2017-10-31T10:50:04Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2017-11-02T06:43:36Z"}, "message": "fix opt-mir test and remove false edge if no guard", "tree": {"sha": "b0a8e6c6c5d52af37f5fbf7e7bd2861cc3342e69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a8e6c6c5d52af37f5fbf7e7bd2861cc3342e69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a954dcc72edea804d866b01ec09d10fdb5add37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a954dcc72edea804d866b01ec09d10fdb5add37a", "html_url": "https://github.com/rust-lang/rust/commit/a954dcc72edea804d866b01ec09d10fdb5add37a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a954dcc72edea804d866b01ec09d10fdb5add37a/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6", "html_url": "https://github.com/rust-lang/rust/commit/2d71c5f10c9c2ae02184e6d1fc2ec0c34dce00d6"}], "stats": {"total": 149, "additions": 75, "deletions": 74}, "files": [{"sha": "d831d8ba2c42cfe4b25ba0fcfe660603ac4020b8", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a954dcc72edea804d866b01ec09d10fdb5add37a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a954dcc72edea804d866b01ec09d10fdb5add37a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=a954dcc72edea804d866b01ec09d10fdb5add37a", "patch": "@@ -752,10 +752,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             Some(otherwise)\n         } else {\n             self.cfg.terminate(block, candidate_source_info,\n-                               TerminatorKind::FalseEdges {\n-                                   real_target: arm_block,\n-                                   imaginary_targets:\n-                                       vec![candidate.next_candidate_binding_start_block]});\n+                               TerminatorKind::Goto { target: arm_block });\n             None\n         }\n     }"}, {"sha": "38e76b001da8d734a5a59b46b55c57479f48b74d", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 74, "deletions": 70, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/a954dcc72edea804d866b01ec09d10fdb5add37a/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a954dcc72edea804d866b01ec09d10fdb5add37a/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=a954dcc72edea804d866b01ec09d10fdb5add37a", "patch": "@@ -21,8 +21,8 @@ fn guard2(_:i32) -> bool {\n fn full_tested_match()\n {\n     let _ = match Some(42) {\n-        Some(_) if guard() => 1,\n-        Some(_) => 2,\n+        Some(x) if guard() => 1 + x,\n+        Some(y) => 2 + y,\n         None => 3\n     };\n }\n@@ -42,125 +42,129 @@ fn main() {\n //  bb0: {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n-//      _3 = discriminant(_2);\n-//      switchInt(_3) -> [0isize: bb8, otherwise: bb9];\n+//      _5 = discriminant(_2);\n+//      switchInt(_5) -> [0isize: bb6, otherwise: bb7];\n //  }\n //  bb1: { // arm1\n-//      _1 = const 1i32;\n-//      goto -> bb13;\n+//      StorageLive(_7);\n+//      _7 = _3;\n+//      _1 = Add(const 1i32, _7);\n+//      ...\n+//      goto -> bb11;\n //  }\n-//  bb2: { // arm2\n-//      _1 = const 2i32;\n-//      goto -> bb13;\n+//  bb2: { // binding1 guard\n+//      StorageLive(_3);\n+//      _3 = ((_2 as Some).0: i32);\n+//      StorageLive(_6);\n+//      _6 = const guard() -> bb8;\n //  }\n-//  bb3: { // arm3\n-//      _1 = const 3i32;\n-//      goto -> bb13;\n+//  bb3: { // binding2 & arm2\n+//      StorageLive(_4);\n+//      _4 = ((_2 as Some).0: i32);\n+//      StorageLive(_8);\n+//      _8 = _4;\n+//      _1 = Add(const 2i32, _8);\n+//      StorageDead(_8);\n+//      goto -> bb11;\n //  }\n-//  bb4: { // binding1\n-//      ...\n-//      _4 = const guard() -> bb10;\n+//  bb4: { // binding3(empty) arm3\n+//      _1 = const 3i32;\n+//      goto -> bb11;\n //  }\n-//  bb5: { // binding2\n-//      falseEdges -> [real: bb2, imaginary: bb6];\n+//  bb5: {\n+//      unreachable;\n //  }\n-//  bb6: { // binding3\n-//      falseEdges -> [real: bb3, imaginary: bb7];\n+//  bb6: {\n+//      falseEdges -> [real: bb4, imaginary: bb5]; // from before_binding3 to unreachable\n //  }\n //  bb7: {\n-//      unreachable;\n+//      falseEdges -> [real: bb2, imaginary: bb3]; // from before_binding1 to binding2\n //  }\n //  bb8: {\n-//      falseEdges -> [real: bb6, imaginary: bb7]; // from before_binding3 to unreachable\n+//      switchInt(_6) -> [0u8: bb9, otherwise: bb1]; // end of guard\n //  }\n //  bb9: {\n-//      falseEdges -> [real: bb4, imaginary: bb5]; // from before_binding1 to binding2\n+//      falseEdges -> [real: bb10, imaginary: bb3]; // after_guard to binding2\n //  }\n //  bb10: {\n-//      switchInt(_4) -> [0u8: bb11, otherwise: bb1]; // end of guard\n+//      falseEdges -> [real: bb3, imaginary: bb4]; // from before_binding2 to binding3\n //  }\n //  bb11: {\n-//      falseEdges -> [real: bb12, imaginary: bb5]; // after_guard to binding2\n-//  }\n-//  bb12: {\n-//      falseEdges -> [real: bb5, imaginary: bb6]; // from before_binding2 to binding3\n-//  }\n-//  bb13: {\n //      ...\n //      return;\n //  }\n //\n //\n // END rustc.node17.NLL.before.mir\n //\n-// START rustc.node36.NLL.before.mir\n+// START rustc.node40.NLL.before.mir\n // bb0: {\n //     ...\n //     _2 = std::option::Option<i32>::Some(const 1i32,);\n //     _7 = discriminant(_2);\n-//     switchInt(_7) -> [1isize: bb10, otherwise: bb13];\n+//     switchInt(_7) -> [1isize: bb8, otherwise: bb11];\n // }\n // bb1: { // arm1\n //      _1 = const 1i32;\n-//      goto -> bb17;\n-// }\n-// bb2: { // arm2\n-//     _1 = const 2i32;\n-//     goto -> bb17;\n+//      goto -> bb15;\n // }\n-// bb3: { // arm3\n+// bb2: { // arm3\n //     _1 = const 3i32;\n-//      goto -> bb17;\n+//      goto -> bb15;\n // }\n-// bb4: { // arm4\n-//     _1 = const 4i32;\n-//      goto -> bb17;\n-// }\n-// bb5: { // binding1: Some(w) if guard() =>\n-//     ...\n-//     _8 = const guard() -> bb11;\n+// bb3: { // binding1: Some(w) if guard() =>\n+//     StorageLive(_3);\n+//     _3 = ((_2 as Some).0: i32);\n+//     StorageLive(_8);\n+//     _8 = const guard() -> bb9;\n // }\n-// bb6: { // binding2: x =>\n-//     ...\n+// bb4: { // binding2 & arm2\n+//     StorageLive(_4);\n //     _4 = _2;\n-//     falseEdges -> [real: bb2, imaginary: bb7]; // after binding2 to binding3\n-//    }\n-// bb7: { // binding3: Some(y) if guard2(y) =>\n-//     ...\n-//     _10 = const guard2(_11) -> bb14;\n-// }\n-// bb8: { // binding4: z_ =>\n-//     ...\n+//     _1 = const 2i32;\n+//     goto -> bb15;\n+// }\n+// bb5: { // binding3: Some(y) if guard2(y) =>\n+//     StorageLive(_5);\n+//     _5 = ((_2 as Some).0: i32);\n+//     StorageLive(_10);\n+//     StorageLive(_11);\n+//     _11 = _5;\n+//    _10 = const guard2(_11) -> bb12;\n+// }\n+// bb6: { // binding4 & arm4\n+//     StorageLive(_6);\n //     _6 = _2;\n-//     falseEdges -> [real: bb4, imaginary: bb9]; // after binding3 to unreachable\n+//     _1 = const 4i32;\n+//     goto -> bb15;\n // }\n-// bb9: {\n+// bb7: {\n //     unreachable;\n // }\n+// bb8: {\n+//     falseEdges -> [real: bb3, imaginary: bb4]; // from before_binding1 to binding2\n+// }\n+// bb9: {\n+//     switchInt(_8) -> [0u8: bb10, otherwise: bb1]; // end of gurard\n+// }\n // bb10: {\n-//     falseEdges -> [real: bb5, imaginary: bb6]; // from before_binding1 to binding2\n+//     falseEdges -> [real: bb11, imaginary: bb4]; // after guard to binding2\n // }\n // bb11: {\n-//     switchInt(_8) -> [0u8: bb12, otherwise: bb1]; // end of gurard\n+//     falseEdges -> [real: bb4, imaginary: bb5]; // from before_binding2 to binding3\n // }\n // bb12: {\n-//     falseEdges -> [real: bb13, imaginary: bb6]; // after guard to binding2\n+//      StorageDead(_11);\n+//      switchInt(_10) -> [0u8: bb13, otherwise: bb2]; // end of guard2\n // }\n // bb13: {\n-//     falseEdges -> [real: bb6, imaginary: bb7]; // from before_binding2 to binding3\n+//     falseEdges -> [real: bb14, imaginary: bb6]; // after guard2 to binding4\n // }\n // bb14: {\n-//      ...\n-//      switchInt(_10) -> [0u8: bb15, otherwise: bb3]; // end of guard2\n+//     falseEdges -> [real: bb6, imaginary: bb7]; // from befor binding4 to unreachable\n // }\n // bb15: {\n-//     falseEdges -> [real: bb16, imaginary: bb8]; // after guard2 to binding4\n-// }\n-// bb16: {\n-//     falseEdges -> [real: bb8, imaginary: bb9]; // from befor binding3 to binding4\n-// }\n-// bb17: {\n //     ...\n //     return;\n // }\n-// END rustc.node36.NLL.before.mir\n+// END rustc.node40.NLL.before.mir"}]}