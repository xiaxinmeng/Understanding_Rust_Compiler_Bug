{"sha": "f966778770ed0ebba524b3c6efb8dd92fc4b3908", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NjY3Nzg3NzBlZDBlYmJhNTI0YjNjNmVmYjhkZDkyZmM0YjM5MDg=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-05-11T19:55:38Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-05-11T19:55:38Z"}, "message": "Merge pull request #914 from oli-obk/non_expressive_names\n\nsimilar_names fixes", "tree": {"sha": "35a50d2f42c865eba56d616af268238f32dc55eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a50d2f42c865eba56d616af268238f32dc55eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f966778770ed0ebba524b3c6efb8dd92fc4b3908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f966778770ed0ebba524b3c6efb8dd92fc4b3908", "html_url": "https://github.com/rust-lang/rust/commit/f966778770ed0ebba524b3c6efb8dd92fc4b3908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f966778770ed0ebba524b3c6efb8dd92fc4b3908/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da122a394bb015ea5ef580580dec3bbd2893d07b", "url": "https://api.github.com/repos/rust-lang/rust/commits/da122a394bb015ea5ef580580dec3bbd2893d07b", "html_url": "https://github.com/rust-lang/rust/commit/da122a394bb015ea5ef580580dec3bbd2893d07b"}, {"sha": "0bef7b5f744b24136dc77a6478aee26e0abce33a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bef7b5f744b24136dc77a6478aee26e0abce33a", "html_url": "https://github.com/rust-lang/rust/commit/0bef7b5f744b24136dc77a6478aee26e0abce33a"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "cbb083a3e161ab4ef2b4c79df6d1800937705ebb", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f966778770ed0ebba524b3c6efb8dd92fc4b3908/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f966778770ed0ebba524b3c6efb8dd92fc4b3908/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=f966778770ed0ebba524b3c6efb8dd92fc4b3908", "patch": "@@ -3,7 +3,7 @@ use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n use syntax::ast::*;\n use syntax::attr;\n-use syntax::visit;\n+use syntax::visit::{Visitor, walk_block, walk_pat, walk_expr};\n use utils::{span_lint_and_then, in_macro, span_lint};\n \n /// **What it does:** This lint warns about names that are very similar and thus confusing\n@@ -68,12 +68,17 @@ const WHITELIST: &'static [&'static [&'static str]] = &[\n \n struct SimilarNamesNameVisitor<'a, 'b: 'a, 'c: 'b>(&'a mut SimilarNamesLocalVisitor<'b, 'c>);\n \n-impl<'v, 'a, 'b, 'c> visit::Visitor<'v> for SimilarNamesNameVisitor<'a, 'b, 'c> {\n+impl<'v, 'a, 'b, 'c> Visitor<'v> for SimilarNamesNameVisitor<'a, 'b, 'c> {\n     fn visit_pat(&mut self, pat: &'v Pat) {\n-        if let PatKind::Ident(_, id, _) = pat.node {\n-            self.check_name(id.span, id.node.name);\n+        match pat.node {\n+            PatKind::Ident(_, id, _) => self.check_name(id.span, id.node.name),\n+            PatKind::Struct(_, ref fields, _) => for field in fields {\n+                if !field.node.is_shorthand {\n+                    self.visit_pat(&field.node.pat);\n+                }\n+            },\n+            _ => walk_pat(self, pat),\n         }\n-        visit::walk_pat(self, pat);\n     }\n }\n \n@@ -219,22 +224,22 @@ impl<'a, 'b> SimilarNamesLocalVisitor<'a, 'b> {\n     }\n }\n \n-impl<'v, 'a, 'b> visit::Visitor<'v> for SimilarNamesLocalVisitor<'a, 'b> {\n+impl<'v, 'a, 'b> Visitor<'v> for SimilarNamesLocalVisitor<'a, 'b> {\n     fn visit_local(&mut self, local: &'v Local) {\n         if let Some(ref init) = local.init {\n-            self.apply(|this| visit::walk_expr(this, &**init));\n+            self.apply(|this| walk_expr(this, &**init));\n         }\n         // add the pattern after the expression because the bindings aren't available yet in the init expression\n         SimilarNamesNameVisitor(self).visit_pat(&*local.pat);\n     }\n     fn visit_block(&mut self, blk: &'v Block) {\n-        self.apply(|this| visit::walk_block(this, blk));\n+        self.apply(|this| walk_block(this, blk));\n     }\n     fn visit_arm(&mut self, arm: &'v Arm) {\n         self.apply(|this| {\n             // just go through the first pattern, as either all patterns bind the same bindings or rustc would have errored much earlier\n             SimilarNamesNameVisitor(this).visit_pat(&arm.pats[0]);\n-            this.apply(|this| visit::walk_expr(this, &arm.body));\n+            this.apply(|this| walk_expr(this, &arm.body));\n         });\n     }\n     fn visit_item(&mut self, _: &'v Item) {\n@@ -254,10 +259,10 @@ impl EarlyLintPass for NonExpressiveNames {\n                 };\n                 // initialize with function arguments\n                 for arg in &decl.inputs {\n-                    visit::walk_pat(&mut SimilarNamesNameVisitor(&mut visitor), &arg.pat);\n+                    SimilarNamesNameVisitor(&mut visitor).visit_pat(&arg.pat);\n                 }\n                 // walk all other bindings\n-                visit::walk_block(&mut visitor, blk);\n+                walk_block(&mut visitor, blk);\n             }\n         }\n     }"}, {"sha": "4639a9439651e89bd48a6be85441b21aca058ed1", "filename": "src/shadow.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f966778770ed0ebba524b3c6efb8dd92fc4b3908/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f966778770ed0ebba524b3c6efb8dd92fc4b3908/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=f966778770ed0ebba524b3c6efb8dd92fc4b3908", "patch": "@@ -195,7 +195,7 @@ fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span, bind\n     }\n }\n \n-fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, lspan: Span, init: &Option<T>, prev_span: Span)\n+fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, pattern_span: Span, init: &Option<T>, prev_span: Span)\n     where T: Deref<Target = Expr>\n {\n     fn note_orig(cx: &LateContext, mut db: DiagnosticWrapper, lint: &'static Lint, span: Span) {\n@@ -209,25 +209,25 @@ fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, lspan: Span, init: &\n                                SHADOW_SAME,\n                                span,\n                                &format!(\"{} is shadowed by itself in {}\",\n-                                        snippet(cx, lspan, \"_\"),\n+                                        snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")));\n             note_orig(cx, db, SHADOW_SAME, prev_span);\n         } else if contains_self(name, expr) {\n             let db = span_note_and_lint(cx,\n                                         SHADOW_REUSE,\n-                                        lspan,\n+                                        pattern_span,\n                                         &format!(\"{} is shadowed by {} which reuses the original value\",\n-                                                 snippet(cx, lspan, \"_\"),\n+                                                 snippet(cx, pattern_span, \"_\"),\n                                                  snippet(cx, expr.span, \"..\")),\n                                         expr.span,\n                                         \"initialization happens here\");\n             note_orig(cx, db, SHADOW_REUSE, prev_span);\n         } else {\n             let db = span_note_and_lint(cx,\n                                         SHADOW_UNRELATED,\n-                                        lspan,\n+                                        pattern_span,\n                                         &format!(\"{} is shadowed by {}\",\n-                                                 snippet(cx, lspan, \"_\"),\n+                                                 snippet(cx, pattern_span, \"_\"),\n                                                  snippet(cx, expr.span, \"..\")),\n                                         expr.span,\n                                         \"initialization happens here\");\n@@ -238,7 +238,7 @@ fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, lspan: Span, init: &\n         let db = span_lint(cx,\n                            SHADOW_UNRELATED,\n                            span,\n-                           &format!(\"{} shadows a previous declaration\", snippet(cx, lspan, \"_\")));\n+                           &format!(\"{} shadows a previous declaration\", snippet(cx, pattern_span, \"_\")));\n         note_orig(cx, db, SHADOW_UNRELATED, prev_span);\n     }\n }"}, {"sha": "d959507bcb2b002584e05cc7831e44bf49c22a26", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f966778770ed0ebba524b3c6efb8dd92fc4b3908/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f966778770ed0ebba524b3c6efb8dd92fc4b3908/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=f966778770ed0ebba524b3c6efb8dd92fc4b3908", "patch": "@@ -11,8 +11,15 @@\n //~| NOTE: lint level defined here\n //~| NOTE: lint level defined here\n //~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n #![allow(unused)]\n \n+\n+struct Foo {\n+    apple: i32,\n+    bpple: i32,\n+}\n+\n fn main() {\n     let specter: i32;\n     let spectre: i32;\n@@ -90,6 +97,13 @@ fn main() {\n     let rx_cake: i32;\n }\n \n+fn foo() {\n+    let Foo { apple, bpple } = unimplemented!();\n+    let Foo { apple: spring, //~NOTE existing binding defined here\n+        bpple: sprang } = unimplemented!(); //~ ERROR: name is too similar\n+    //~^HELP for further information\n+}\n+\n #[derive(Clone, Debug)]\n enum MaybeInst {\n     Split,"}]}