{"sha": "58e83fb4266999926482d248d79358aea2670ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZTgzZmI0MjY2OTk5OTI2NDgyZDI0OGQ3OTM1OGFlYTI2NzBiYTA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-27T09:45:26Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-27T09:45:26Z"}, "message": "Implement PartialEq, Eq and Hash trait for Target\n\nand move Target::from_json() to TargetKind::from_str()", "tree": {"sha": "937c92a5a37c7715ec74aa4597cf25727f6036b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/937c92a5a37c7715ec74aa4597cf25727f6036b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e83fb4266999926482d248d79358aea2670ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e83fb4266999926482d248d79358aea2670ba0", "html_url": "https://github.com/rust-lang/rust/commit/58e83fb4266999926482d248d79358aea2670ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e83fb4266999926482d248d79358aea2670ba0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b1122654f0c4f436961e57778c8219b4f286660", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1122654f0c4f436961e57778c8219b4f286660", "html_url": "https://github.com/rust-lang/rust/commit/1b1122654f0c4f436961e57778c8219b4f286660"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "6e18588da81a1c14a0ece83442130f272bed2c94", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/58e83fb4266999926482d248d79358aea2670ba0/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e83fb4266999926482d248d79358aea2670ba0/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=58e83fb4266999926482d248d79358aea2670ba0", "patch": "@@ -18,6 +18,7 @@ extern crate getopts;\n extern crate serde_json as json;\n \n use std::env;\n+use std::hash::{Hash, Hasher};\n use std::io::{self, Write};\n use std::path::PathBuf;\n use std::process::{Command, ExitStatus};\n@@ -175,20 +176,9 @@ impl TargetKind {\n             _ => false,\n         }\n     }\n-}\n-\n-#[derive(Debug)]\n-pub struct Target {\n-    path: PathBuf,\n-    kind: TargetKind,\n-}\n \n-impl Target {\n-    pub fn from_json(json_val: &Value) -> Option<Self> {\n-        let jtarget = json_val.as_object()?;\n-        let path = PathBuf::from(jtarget.get(\"src_path\")?.as_str()?);\n-        let kinds = jtarget.get(\"kind\")?.as_array()?;\n-        let kind = match kinds[0].as_str()? {\n+    fn from_str(s: &str) -> Self {\n+        match s {\n             \"bin\" => TargetKind::Bin,\n             \"lib\" | \"dylib\" | \"staticlib\" | \"cdylib\" | \"rlib\" => TargetKind::Lib,\n             \"test\" => TargetKind::Test,\n@@ -197,12 +187,42 @@ impl Target {\n             \"custom-build\" => TargetKind::CustomBuild,\n             \"proc-macro\" => TargetKind::ProcMacro,\n             _ => TargetKind::Other,\n-        };\n+        }\n+    }\n+}\n \n-        Some(Target {\n-            path: path,\n-            kind: kind,\n-        })\n+/// Target uses a `path` field for equality and hashing.\n+#[derive(Debug)]\n+pub struct Target {\n+    /// A path to the main source file of the target.\n+    path: PathBuf,\n+    /// A kind of target (e.g. lib, bin, example, ...).\n+    kind: TargetKind,\n+}\n+\n+impl Target {\n+    pub fn from_target(target: &cargo_metadata::Target) -> Self {\n+        let path = PathBuf::from(&target.src_path);\n+        let canonicalized = fs::canonicalize(&path).unwrap_or(path);\n+\n+        Target {\n+            path: canonicalized,\n+            kind: TargetKind::from_str(&target.kind[0]),\n+        }\n+    }\n+}\n+\n+impl PartialEq for Target {\n+    fn eq(&self, other: &Target) -> bool {\n+        self.path == other.path\n+    }\n+}\n+\n+impl Eq for Target {}\n+\n+impl Hash for Target {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.path.hash(state);\n     }\n }\n "}]}