{"sha": "1b323b9f355c0b3cdf0729f57880240ade00d56f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMzIzYjlmMzU1YzBiM2NkZjA3MjlmNTc4ODAyNDBhZGUwMGQ1NmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-07T14:32:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-07T14:32:52Z"}, "message": "Don't lint mixed slice indexing and usize indexing in `needless_range_loop`", "tree": {"sha": "80c820820ddba99d4a4c008f9110a24ab5231bb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80c820820ddba99d4a4c008f9110a24ab5231bb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b323b9f355c0b3cdf0729f57880240ade00d56f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloBxBQACgkQpp+NIls6\n19mUVQ//cduyUhHn+IMuPCLxO7F9aBwd8YBQpgPsOXkNgGPel6r7sBIB/7p3HfEz\nZ26lwpoOqq3TRtuOvZPZUBzO0BxUCKtWQBymF5vYl6OPvQz5Oee1FnafO9clgFFw\n1HoPB8zMHp88rT3WKhPIcxj/EXXnudJ9iO7dOcgMQDEbLaQsN0KJmXvwIblS+TGb\nhF+js229otOZSjIyOQlk321X5pBo3wgQ5xY78JbK/0aKEZ/w6tqZKj28jdC31JXr\nTZxoxqoYwuOi/Cmw0W+oFTMCa+dZ7Z9n6AlGEy8iJnsWGuiZihzAGdIjjaV5LrB1\ndenlWyN3mAcPAcHNBOXhfrg3PiPkke55BTmvc/qVrsiqMf33xOSXhigwP7zc11wc\n6+wL58gKq0GcbBZXmlkoj45yqPsrdj8oOTMdlJ+4T43q86p46Ws9PDxJTxEsSs+U\nfCB/vAmodkDytiwLyg25zAjvWy2eDA8PgcB0M6NahS7exdkx+jr/Q1b+GQt0YOf5\n1y+d3ditAbn1YY6U0so9N3haUk5XhZ7dSTCwMcGtgGU6Rl6LsOUMj9oKZcsuPkxB\nr6vQI8OuKSfuAvffuI2VUOb7mBY8KIX6R98mFK1X3W8nsRj/hLQS12Z8bYGyt5sB\ngbl8Ou0STQwZIOoS8bz6v9uMfYLkzXHFIjSlG8jzSpkQ01x+v0U=\n=vS+m\n-----END PGP SIGNATURE-----", "payload": "tree 80c820820ddba99d4a4c008f9110a24ab5231bb4\nparent 652df0fb79666dc976bed3a08d0db7f454014951\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510065172 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510065172 +0100\n\nDon't lint mixed slice indexing and usize indexing in `needless_range_loop`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b323b9f355c0b3cdf0729f57880240ade00d56f", "html_url": "https://github.com/rust-lang/rust/commit/1b323b9f355c0b3cdf0729f57880240ade00d56f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b323b9f355c0b3cdf0729f57880240ade00d56f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "652df0fb79666dc976bed3a08d0db7f454014951", "url": "https://api.github.com/repos/rust-lang/rust/commits/652df0fb79666dc976bed3a08d0db7f454014951", "html_url": "https://github.com/rust-lang/rust/commit/652df0fb79666dc976bed3a08d0db7f454014951"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "babf3d3cc16fc9c372c115c1eca2d729ecf9d892", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1b323b9f355c0b3cdf0729f57880240ade00d56f/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b323b9f355c0b3cdf0729f57880240ade00d56f/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1b323b9f355c0b3cdf0729f57880240ade00d56f", "patch": "@@ -953,7 +953,7 @@ fn check_for_loop_range<'a, 'tcx>(\n                 cx: cx,\n                 var: canonical_id,\n                 indexed_mut: HashSet::new(),\n-                indexed: HashMap::new(),\n+                indexed_indirectly: HashMap::new(),\n                 indexed_directly: HashMap::new(),\n                 referenced: HashSet::new(),\n                 nonindex: false,\n@@ -962,8 +962,7 @@ fn check_for_loop_range<'a, 'tcx>(\n             walk_expr(&mut visitor, body);\n \n             // linting condition: we only indexed one variable, and indexed it directly\n-            // (`indexed_directly` is subset of `indexed`)\n-            if visitor.indexed.len() == 1 && visitor.indexed_directly.len() == 1 {\n+            if visitor.indexed_indirectly.is_empty() && visitor.indexed_directly.len() == 1 {\n                 let (indexed, indexed_extent) = visitor\n                     .indexed_directly\n                     .into_iter()\n@@ -1547,8 +1546,8 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     var: ast::NodeId,\n     /// indexed variables that are used mutably\n     indexed_mut: HashSet<Name>,\n-    /// indexed variables, the extend is `None` for global\n-    indexed: HashMap<Name, Option<region::Scope>>,\n+    /// indirectly indexed variables (`v[(i + 4) % N]`), the extend is `None` for global\n+    indexed_indirectly: HashMap<Name, Option<region::Scope>>,\n     /// subset of `indexed` of vars that are indexed directly: `v[i]`\n     /// this will not contain cases like `v[calc_index(i)]` or `v[(i + 4) % N]`\n     indexed_directly: HashMap<Name, Option<region::Scope>>,\n@@ -1563,18 +1562,16 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     prefer_mutable: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n-    fn visit_expr(&mut self, expr: &'tcx Expr) {\n+impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n+    fn check(&mut self, idx: &'tcx Expr, seqexpr: &'tcx Expr, expr: &'tcx Expr) -> bool {\n         if_chain! {\n-            // an index op\n-            if let ExprIndex(ref seqexpr, ref idx) = expr.node;\n             // the indexed container is referenced by a name\n             if let ExprPath(ref seqpath) = seqexpr.node;\n             if let QPath::Resolved(None, ref seqvar) = *seqpath;\n             if seqvar.segments.len() == 1;\n             then {\n                 let index_used_directly = same_var(self.cx, idx, self.var);\n-                let index_used = index_used_directly || {\n+                let indexed_indirectly = {\n                     let mut used_visitor = LocalUsedVisitor {\n                         cx: self.cx,\n                         local: self.var,\n@@ -1584,7 +1581,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     used_visitor.used\n                 };\n \n-                if index_used {\n+                if indexed_indirectly || index_used_directly {\n                     if self.prefer_mutable {\n                         self.indexed_mut.insert(seqvar.segments[0].name);\n                     }\n@@ -1596,24 +1593,48 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                             let parent_id = self.cx.tcx.hir.get_parent(expr.id);\n                             let parent_def_id = self.cx.tcx.hir.local_def_id(parent_id);\n                             let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n-                            self.indexed.insert(seqvar.segments[0].name, Some(extent));\n+                            if indexed_indirectly {\n+                                self.indexed_indirectly.insert(seqvar.segments[0].name, Some(extent));\n+                            }\n                             if index_used_directly {\n                                 self.indexed_directly.insert(seqvar.segments[0].name, Some(extent));\n                             }\n-                            return;  // no need to walk further *on the variable*\n+                            return false;  // no need to walk further *on the variable*\n                         }\n                         Def::Static(..) | Def::Const(..) => {\n-                            self.indexed.insert(seqvar.segments[0].name, None);\n+                            if indexed_indirectly {\n+                                self.indexed_indirectly.insert(seqvar.segments[0].name, None);\n+                            }\n                             if index_used_directly {\n                                 self.indexed_directly.insert(seqvar.segments[0].name, None);\n                             }\n-                            return;  // no need to walk further *on the variable*\n+                            return false;  // no need to walk further *on the variable*\n                         }\n                         _ => (),\n                     }\n                 }\n             }\n         }\n+        true\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx Expr) {\n+        if_chain! {\n+            // a range index op\n+            if let ExprMethodCall(ref meth, _, ref args) = expr.node;\n+            if meth.name == \"index\" || meth.name == \"index_mut\";\n+            if !self.check(&args[1], &args[0], expr);\n+            then { return }\n+        }\n+\n+        if_chain! {\n+            // an index op\n+            if let ExprIndex(ref seqexpr, ref idx) = expr.node;\n+            if !self.check(idx, seqexpr, expr);\n+            then { return }\n+        }\n \n         if_chain! {\n             // directly using a variable"}, {"sha": "30613f98f2bce3be8a6b8d8668d235cd74019801", "filename": "tests/ui/needless_range_loop.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b323b9f355c0b3cdf0729f57880240ade00d56f/tests%2Fui%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b323b9f355c0b3cdf0729f57880240ade00d56f/tests%2Fui%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.rs?ref=1b323b9f355c0b3cdf0729f57880240ade00d56f", "patch": "@@ -37,4 +37,19 @@ fn main() {\n         *x *= 2;\n     }\n     assert_eq!(ms, vec![2, 4, 6, 8, 10, 12]);\n+\n+    let g = vec![1, 2, 3, 4, 5, 6];\n+    let glen = g.len();\n+    for i in 0..glen {\n+        let x: u32 = g[i+1..].iter().sum();\n+        println!(\"{}\", g[i] + x);\n+    }\n+    assert_eq!(g, vec![20, 18, 15, 11, 6, 0]);\n+\n+    let mut g = vec![1, 2, 3, 4, 5, 6];\n+    let glen = g.len();\n+    for i in 0..glen {\n+        g[i] = g[i+1..].iter().sum();\n+    }\n+    assert_eq!(g, vec![20, 18, 15, 11, 6, 0]);\n }"}]}