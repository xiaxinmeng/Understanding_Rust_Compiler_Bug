{"sha": "76cb35ee8938c4815b8c77bcd97c68af0c67c5a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2Y2IzNWVlODkzOGM0ODE1YjhjNzdiY2Q5N2M2OGFmMGM2N2M1YTU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-12T13:24:05Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-12T13:24:05Z"}, "message": "infer: remove Box from a returned Iterator", "tree": {"sha": "7f359cb37a9c9f088a47ad346b08117e38273ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f359cb37a9c9f088a47ad346b08117e38273ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76cb35ee8938c4815b8c77bcd97c68af0c67c5a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76cb35ee8938c4815b8c77bcd97c68af0c67c5a5", "html_url": "https://github.com/rust-lang/rust/commit/76cb35ee8938c4815b8c77bcd97c68af0c67c5a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76cb35ee8938c4815b8c77bcd97c68af0c67c5a5/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64cdec1b48b0d042e5f0e38634a7c438c104b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64cdec1b48b0d042e5f0e38634a7c438c104b85", "html_url": "https://github.com/rust-lang/rust/commit/a64cdec1b48b0d042e5f0e38634a7c438c104b85"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "43bc9d88895d7e74af0c63c4f4432bd5d40a9972", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/76cb35ee8938c4815b8c77bcd97c68af0c67c5a5/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76cb35ee8938c4815b8c77bcd97c68af0c67c5a5/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=76cb35ee8938c4815b8c77bcd97c68af0c67c5a5", "patch": "@@ -36,6 +36,7 @@ use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::fold::TypeFoldable;\n use ty::subst::{Kind, UnpackedKind};\n use ty::{self, BoundVar, Lift, Ty, TyCtxt};\n+use util::captures::Captures;\n \n impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n     /// The \"main method\" for a canonicalized trait query. Given the\n@@ -527,32 +528,30 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         unsubstituted_region_constraints: &'a [QueryRegionConstraint<'tcx>],\n         result_subst: &'a CanonicalVarValues<'tcx>,\n-    ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a {\n-        Box::new(\n-            unsubstituted_region_constraints\n-                .iter()\n-                .map(move |constraint| {\n-                    let constraint = substitute_value(self.tcx, result_subst, constraint);\n-                    let &ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n-\n-                    Obligation::new(\n-                        cause.clone(),\n-                        param_env,\n-                        match k1.unpack() {\n-                            UnpackedKind::Lifetime(r1) => ty::Predicate::RegionOutlives(\n-                                ty::Binder::bind(\n-                                    ty::OutlivesPredicate(r1, r2)\n-                                )\n-                            ),\n-                            UnpackedKind::Type(t1) => ty::Predicate::TypeOutlives(\n-                                ty::Binder::bind(\n-                                    ty::OutlivesPredicate(t1, r2)\n-                                )\n-                            ),\n-                        }\n-                    )\n-                })\n-        ) as Box<dyn Iterator<Item = _>>\n+    ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'gcx> {\n+        unsubstituted_region_constraints\n+            .iter()\n+            .map(move |constraint| {\n+                let constraint = substitute_value(self.tcx, result_subst, constraint);\n+                let &ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n+\n+                Obligation::new(\n+                    cause.clone(),\n+                    param_env,\n+                    match k1.unpack() {\n+                        UnpackedKind::Lifetime(r1) => ty::Predicate::RegionOutlives(\n+                            ty::Binder::bind(\n+                                ty::OutlivesPredicate(r1, r2)\n+                            )\n+                        ),\n+                        UnpackedKind::Type(t1) => ty::Predicate::TypeOutlives(\n+                            ty::Binder::bind(\n+                                ty::OutlivesPredicate(t1, r2)\n+                            )\n+                        ),\n+                    }\n+                )\n+            })\n     }\n \n     /// Given two sets of values for the same set of canonical variables, unify them."}]}