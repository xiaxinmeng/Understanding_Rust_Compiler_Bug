{"sha": "ad218f9bb92cbeb9bf21c319d7a04eb47cfdb56e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjE4ZjliYjkyY2JlYjliZjIxYzMxOWQ3YTA0ZWI0N2NmZGI1NmU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-20T19:46:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-20T19:46:40Z"}, "message": "Rollup merge of #78144 - bugadani:elements-nodrop, r=oli-obk\n\nDon't update `entries` in `TypedArena` if T does not need drop\n\nAs far as I can tell, `entries` is only used when dropping `TypedArenaChunk`s and their contents. It is already ignored there, if T is not `mem::needs_drop`, this PR just skips updating it's value.\n\nYou can see `TypedArenaChunk` ignoring the entry count in L71. The reasoning is similar to what you can find in `DroplessArena`.\n\nr? @oli-obk", "tree": {"sha": "4b6316897ba0a9f989ad4207ff2117087dad70be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b6316897ba0a9f989ad4207ff2117087dad70be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad218f9bb92cbeb9bf21c319d7a04eb47cfdb56e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjz6gCRBK7hj4Ov3rIwAAdHIIADbR6N3UH6wpoZVdqQOrXzHN\noYcW1qVLM520c0qTW5LvoadLaz/Q7UGwWp8s2zn2VZZFR4PRgTCS3fivdKaw7Dzo\nZ+9yDbIJvtgZMTM0oEoib9HSBLrW5qctwOGidYM9PsSqk49Cp3SehKfZAUgiVHD0\ngpiSKXRxOlXRaktASxZ1YU8gyHShta1dlJPfYF5KYxEn40IBjfD8skxIx6upUHkN\nYJq6MkgQsIBwjfgpmXRju/o4TEs3lblcne4DRfevjDts6VBR8srhoQqlwWUrmkEQ\nXqb982Pzgsta10cHKoOVKXQT1VDDU7RvhhXGBLZrsA3/r4NWB0i8IEEqvXz2Sgc=\n=tqTp\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b6316897ba0a9f989ad4207ff2117087dad70be\nparent a8a424f4aad4444a89f1d40d97ef9da824f7d015\nparent 2705caed8afbf41e1d0ae5e88a70a92687a1a5da\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1603223200 +0200\ncommitter GitHub <noreply@github.com> 1603223200 +0200\n\nRollup merge of #78144 - bugadani:elements-nodrop, r=oli-obk\n\nDon't update `entries` in `TypedArena` if T does not need drop\n\nAs far as I can tell, `entries` is only used when dropping `TypedArenaChunk`s and their contents. It is already ignored there, if T is not `mem::needs_drop`, this PR just skips updating it's value.\n\nYou can see `TypedArenaChunk` ignoring the entry count in L71. The reasoning is similar to what you can find in `DroplessArena`.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad218f9bb92cbeb9bf21c319d7a04eb47cfdb56e", "html_url": "https://github.com/rust-lang/rust/commit/ad218f9bb92cbeb9bf21c319d7a04eb47cfdb56e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad218f9bb92cbeb9bf21c319d7a04eb47cfdb56e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a424f4aad4444a89f1d40d97ef9da824f7d015", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a424f4aad4444a89f1d40d97ef9da824f7d015", "html_url": "https://github.com/rust-lang/rust/commit/a8a424f4aad4444a89f1d40d97ef9da824f7d015"}, {"sha": "2705caed8afbf41e1d0ae5e88a70a92687a1a5da", "url": "https://api.github.com/repos/rust-lang/rust/commits/2705caed8afbf41e1d0ae5e88a70a92687a1a5da", "html_url": "https://github.com/rust-lang/rust/commit/2705caed8afbf41e1d0ae5e88a70a92687a1a5da"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "1a85a46ed74f0a8c607f8a09ae5bec561a01d6cc", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad218f9bb92cbeb9bf21c319d7a04eb47cfdb56e/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad218f9bb92cbeb9bf21c319d7a04eb47cfdb56e/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=ad218f9bb92cbeb9bf21c319d7a04eb47cfdb56e", "patch": "@@ -217,8 +217,12 @@ impl<T> TypedArena<T> {\n             let mut chunks = self.chunks.borrow_mut();\n             let mut new_cap;\n             if let Some(last_chunk) = chunks.last_mut() {\n-                let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n-                last_chunk.entries = used_bytes / mem::size_of::<T>();\n+                // If a type is `!needs_drop`, we don't need to keep track of how many elements\n+                // the chunk stores - the field will be ignored anyway.\n+                if mem::needs_drop::<T>() {\n+                    let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n+                    last_chunk.entries = used_bytes / mem::size_of::<T>();\n+                }\n \n                 // If the previous chunk's len is less than HUGE_PAGE\n                 // bytes, then this chunk will be least double the previous"}]}