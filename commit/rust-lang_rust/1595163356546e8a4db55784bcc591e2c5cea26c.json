{"sha": "1595163356546e8a4db55784bcc591e2c5cea26c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTUxNjMzNTY1NDZlOGE0ZGI1NTc4NGJjYzU5MWUyYzVjZWEyNmM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-29T12:34:40Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-31T11:01:28Z"}, "message": "Add suggestion for duplicated import.\n\nThis commit adds a suggestion when a import is duplicated (ie. the same name\nis used twice trying to import the same thing) to remove the second\nimport.", "tree": {"sha": "29590b60d7f33441479541a23f1fc04fa7a56b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29590b60d7f33441479541a23f1fc04fa7a56b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1595163356546e8a4db55784bcc591e2c5cea26c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlxS1YgACgkQAXYLT59T\n8VTDjg//csXc3Ag8UxKb5w0hssiYobU6pA8om3pRmuAYDaxhHicwEupdj+3NEcaC\ntRjtxWDCSWsXMrcp8GgQ07jSJeEIPzTDbnlACqeWGL/uQAXVpbVhdHdS0cDRoQ1P\nMa6mucQAMr5h6+MtO49m3KmjJkPiRLOS1qMJNadDnpOyxcfTFxqOM3QE7mkaPJ9z\nIlDSlGIal5Y7dPxNgE7WHumf+oTBiep1VVGBtpbszdhMbMG7g9HsgTcXhtXkvVM/\neDmw9OfTFHKVuF1epe1jfB4lBtfQ+1wmdU/VU3oZHAanuMJl+43Hjusz25ZLZByS\nIxJeRdV4/Mm3DmGaXYDLuLM0b7t024B4eXxj5+KMjuyXULLMz99aiTxfsdMFpSxz\nuGIABCauqTpIu+pw7yq+l+vwq2trKk3ovw4ddMpvBAvKpSvbMoEVAjWxoqnBf5K7\nwYm2FT92kfD8uTjv84W3dO3oDxJPhOjC7JiW77eFpSV0e1EmdIihCtBpL3WNneQs\n9PG8VHlGo5Lj9yV75RnKnpTViFyCUXj/5Zm2HypnrFX03fMpU/4Ijuc7wMoKTQcm\nIzJz1lLzc3i59ASu7JI2KsPElBQbFAb2Xs+nfmbFa4sUJMrvPX28tDWjzKBFjPTB\namFVNZVCIXq2LuP0mpzdjMFH+0oQyi3MVCYKwK1/x788kkktkFA=\n=60xq\n-----END PGP SIGNATURE-----", "payload": "tree 29590b60d7f33441479541a23f1fc04fa7a56b20\nparent a21bd756889942cfed06dfd4ccd08838fc27ffdf\nauthor David Wood <david@davidtw.co> 1548765280 +0100\ncommitter David Wood <david@davidtw.co> 1548932488 +0100\n\nAdd suggestion for duplicated import.\n\nThis commit adds a suggestion when a import is duplicated (ie. the same name\nis used twice trying to import the same thing) to remove the second\nimport.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1595163356546e8a4db55784bcc591e2c5cea26c", "html_url": "https://github.com/rust-lang/rust/commit/1595163356546e8a4db55784bcc591e2c5cea26c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1595163356546e8a4db55784bcc591e2c5cea26c/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a21bd756889942cfed06dfd4ccd08838fc27ffdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a21bd756889942cfed06dfd4ccd08838fc27ffdf", "html_url": "https://github.com/rust-lang/rust/commit/a21bd756889942cfed06dfd4ccd08838fc27ffdf"}], "stats": {"total": 681, "additions": 570, "deletions": 111}, "files": [{"sha": "c5401ac3f5560b7616cd2cd6dc305ed0fb4551ba", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -238,12 +238,14 @@ impl<'a> Resolver<'a> {\n                         macro_ns: Cell::new(None),\n                     },\n                     type_ns_only,\n+                    nested,\n                 };\n                 self.add_import_directive(\n                     module_path,\n                     subclass,\n                     use_tree.span,\n                     id,\n+                    item,\n                     root_span,\n                     item.id,\n                     vis,\n@@ -260,6 +262,7 @@ impl<'a> Resolver<'a> {\n                     subclass,\n                     use_tree.span,\n                     id,\n+                    item,\n                     root_span,\n                     item.id,\n                     vis,\n@@ -379,6 +382,9 @@ impl<'a> Resolver<'a> {\n                         source: orig_name,\n                         target: ident,\n                     },\n+                    has_attributes: !item.attrs.is_empty(),\n+                    use_span_with_attributes: item.span_with_attributes(),\n+                    use_span: item.span,\n                     root_span: item.span,\n                     span: item.span,\n                     module_path: Vec::new(),\n@@ -824,6 +830,9 @@ impl<'a> Resolver<'a> {\n             parent_scope: parent_scope.clone(),\n             imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),\n             subclass: ImportDirectiveSubclass::MacroUse,\n+            use_span_with_attributes: item.span_with_attributes(),\n+            has_attributes: !item.attrs.is_empty(),\n+            use_span: item.span,\n             root_span: span,\n             span,\n             module_path: Vec::new(),"}, {"sha": "3973bc2ad62de476eaa43c7c2d7b652a91cc2dcd", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 228, "deletions": 47, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -63,7 +63,7 @@ use syntax::ast::{Label, Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n use syntax::ptr::P;\n \n-use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n+use syntax_pos::{BytePos, Span, DUMMY_SP, MultiSpan};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n \n use std::cell::{Cell, RefCell};\n@@ -1228,6 +1228,16 @@ enum NameBindingKind<'a> {\n     },\n }\n \n+impl<'a> NameBindingKind<'a> {\n+    /// Is this a name binding of a import?\n+    fn is_import(&self) -> bool {\n+        match *self {\n+            NameBindingKind::Import { .. } => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n struct PrivacyError<'a>(Span, Ident, &'a NameBinding<'a>);\n \n struct UseError<'a> {\n@@ -5134,64 +5144,235 @@ impl<'a> Resolver<'a> {\n         );\n \n         // See https://github.com/rust-lang/rust/issues/32354\n+        use NameBindingKind::Import;\n         let directive = match (&new_binding.kind, &old_binding.kind) {\n-            (NameBindingKind::Import { directive, .. }, _) if !new_binding.span.is_dummy() =>\n-                Some((directive, new_binding.span)),\n-            (_, NameBindingKind::Import { directive, .. }) if !old_binding.span.is_dummy() =>\n-                Some((directive, old_binding.span)),\n+            // If there are two imports where one or both have attributes then prefer removing the\n+            // import without attributes.\n+            (Import { directive: new, .. }, Import { directive: old, .. }) if {\n+                !new_binding.span.is_dummy() && !old_binding.span.is_dummy() &&\n+                    (new.has_attributes || old.has_attributes)\n+            } => {\n+                if old.has_attributes {\n+                    Some((new, new_binding.span, true))\n+                } else {\n+                    Some((old, old_binding.span, true))\n+                }\n+            },\n+            // Otherwise prioritize the new binding.\n+            (Import { directive, .. }, other) if !new_binding.span.is_dummy() =>\n+                Some((directive, new_binding.span, other.is_import())),\n+            (other, Import { directive, .. }) if !old_binding.span.is_dummy() =>\n+                Some((directive, old_binding.span, other.is_import())),\n             _ => None,\n         };\n-        if let Some((directive, binding_span)) = directive {\n-            let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n-                format!(\"Other{}\", name)\n-            } else {\n-                format!(\"other_{}\", name)\n-            };\n \n-            let mut suggestion = None;\n-            match directive.subclass {\n-                ImportDirectiveSubclass::SingleImport { type_ns_only: true, .. } =>\n-                    suggestion = Some(format!(\"self as {}\", suggested_name)),\n-                ImportDirectiveSubclass::SingleImport { source, .. } => {\n-                    if let Some(pos) = source.span.hi().0.checked_sub(binding_span.lo().0)\n-                                                         .map(|pos| pos as usize) {\n-                        if let Ok(snippet) = self.session.source_map()\n-                                                         .span_to_snippet(binding_span) {\n-                            if pos <= snippet.len() {\n-                                suggestion = Some(format!(\n-                                    \"{} as {}{}\",\n-                                    &snippet[..pos],\n-                                    suggested_name,\n-                                    if snippet.ends_with(\";\") { \";\" } else { \"\" }\n-                                ))\n-                            }\n+        // Check if the target of the use for both bindings is the same.\n+        let duplicate = new_binding.def().opt_def_id() == old_binding.def().opt_def_id();\n+        let has_dummy_span = new_binding.span.is_dummy() || old_binding.span.is_dummy();\n+        let from_item = self.extern_prelude.get(&ident)\n+            .map(|entry| entry.introduced_by_item)\n+            .unwrap_or(true);\n+        // Only suggest removing an import if both bindings are to the same def, if both spans\n+        // aren't dummy spans. Further, if both bindings are imports, then the ident must have\n+        // been introduced by a item.\n+        let should_remove_import = duplicate && !has_dummy_span &&\n+            ((new_binding.is_extern_crate() || old_binding.is_extern_crate()) || from_item);\n+\n+        match directive {\n+            Some((directive, span, true)) if should_remove_import && directive.is_nested() =>\n+                self.add_suggestion_for_duplicate_nested_use(&mut err, directive, span),\n+            Some((directive, _, true)) if should_remove_import && !directive.is_glob() => {\n+                // Simple case - remove the entire import. Due to the above match arm, this can\n+                // only be a single use so just remove it entirely.\n+                err.span_suggestion(\n+                    directive.use_span_with_attributes,\n+                    \"remove unnecessary import\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            },\n+            Some((directive, span, _)) =>\n+                self.add_suggestion_for_rename_of_use(&mut err, name, directive, span),\n+            _ => {},\n+        }\n+\n+        err.emit();\n+        self.name_already_seen.insert(name, span);\n+    }\n+\n+    /// This function adds a suggestion to change the binding name of a new import that conflicts\n+    /// with an existing import.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// help: you can use `as` to change the binding name of the import\n+    ///    |\n+    /// LL | use foo::bar as other_bar;\n+    ///    |     ^^^^^^^^^^^^^^^^^^^^^\n+    /// ```\n+    fn add_suggestion_for_rename_of_use(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        name: Symbol,\n+        directive: &ImportDirective<'_>,\n+        binding_span: Span,\n+    ) {\n+        let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n+            format!(\"Other{}\", name)\n+        } else {\n+            format!(\"other_{}\", name)\n+        };\n+\n+        let mut suggestion = None;\n+        match directive.subclass {\n+            ImportDirectiveSubclass::SingleImport { type_ns_only: true, .. } =>\n+                suggestion = Some(format!(\"self as {}\", suggested_name)),\n+            ImportDirectiveSubclass::SingleImport { source, .. } => {\n+                if let Some(pos) = source.span.hi().0.checked_sub(binding_span.lo().0)\n+                                                     .map(|pos| pos as usize) {\n+                    if let Ok(snippet) = self.session.source_map()\n+                                                     .span_to_snippet(binding_span) {\n+                        if pos <= snippet.len() {\n+                            suggestion = Some(format!(\n+                                \"{} as {}{}\",\n+                                &snippet[..pos],\n+                                suggested_name,\n+                                if snippet.ends_with(\";\") { \";\" } else { \"\" }\n+                            ))\n                         }\n                     }\n                 }\n-                ImportDirectiveSubclass::ExternCrate { source, target, .. } =>\n-                    suggestion = Some(format!(\n-                        \"extern crate {} as {};\",\n-                        source.unwrap_or(target.name),\n-                        suggested_name,\n-                    )),\n-                _ => unreachable!(),\n             }\n+            ImportDirectiveSubclass::ExternCrate { source, target, .. } =>\n+                suggestion = Some(format!(\n+                    \"extern crate {} as {};\",\n+                    source.unwrap_or(target.name),\n+                    suggested_name,\n+                )),\n+            _ => unreachable!(),\n+        }\n+\n+        let rename_msg = \"you can use `as` to change the binding name of the import\";\n+        if let Some(suggestion) = suggestion {\n+            err.span_suggestion(\n+                binding_span,\n+                rename_msg,\n+                suggestion,\n+                Applicability::MaybeIncorrect,\n+            );\n+        } else {\n+            err.span_label(binding_span, rename_msg);\n+        }\n+    }\n \n-            let rename_msg = \"you can use `as` to change the binding name of the import\";\n-            if let Some(suggestion) = suggestion {\n-                err.span_suggestion(\n-                    binding_span,\n-                    rename_msg,\n-                    suggestion,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else {\n-                err.span_label(binding_span, rename_msg);\n+    /// This function adds a suggestion to remove a unnecessary binding from an import that is\n+    /// nested. In the following example, this function will be invoked to remove the `a` binding\n+    /// in the second use statement:\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// use issue_52891::a;\n+    /// use issue_52891::{d, a, e};\n+    /// ```\n+    ///\n+    /// The following suggestion will be added:\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// use issue_52891::{d, a, e};\n+    ///                      ^-- help: remove unnecessary import\n+    /// ```\n+    ///\n+    /// If the nested use contains only one import then the suggestion will remove the entire\n+    /// line.\n+    ///\n+    /// It is expected that the directive provided is a nested import - this isn't checked by the\n+    /// function. If this invariant is not upheld, this function's behaviour will be unexpected\n+    /// as characters expected by span manipulations won't be present.\n+    fn add_suggestion_for_duplicate_nested_use(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        directive: &ImportDirective<'_>,\n+        binding_span: Span,\n+    ) {\n+        assert!(directive.is_nested());\n+        let message = \"remove unnecessary import\";\n+        let source_map = self.session.source_map();\n+\n+        // Two examples will be used to illustrate the span manipulations we're doing:\n+        //\n+        // - Given `use issue_52891::{d, a, e};` where `a` is a duplicate then `binding_span` is\n+        //   `a` and `directive.use_span` is `issue_52891::{d, a, e};`.\n+        // - Given `use issue_52891::{d, e, a};` where `a` is a duplicate then `binding_span` is\n+        //   `a` and `directive.use_span` is `issue_52891::{d, e, a};`.\n+\n+        // Find the span of everything after the binding.\n+        //   ie. `a, e};` or `a};`\n+        let binding_until_end = binding_span.with_hi(directive.use_span.hi());\n+\n+        // Find everything after the binding but not including the binding.\n+        //   ie. `, e};` or `};`\n+        let after_binding_until_end = binding_until_end.with_lo(binding_span.hi());\n+\n+        // Keep characters in the span until we encounter something that isn't a comma or\n+        // whitespace.\n+        //   ie. `, ` or ``.\n+        //\n+        // Also note whether a closing brace character was encountered. If there\n+        // was, then later go backwards to remove any trailing commas that are left.\n+        let mut found_closing_brace = false;\n+        let after_binding_until_next_binding = source_map.span_take_while(\n+            after_binding_until_end,\n+            |&ch| {\n+                if ch == '}' { found_closing_brace = true; }\n+                ch == ' ' || ch == ','\n+            }\n+        );\n+\n+        // Combine the two spans.\n+        //   ie. `a, ` or `a`.\n+        //\n+        // Removing these would leave `issue_52891::{d, e};` or `issue_52891::{d, e, };`\n+        let span = binding_span.with_hi(after_binding_until_next_binding.hi());\n+\n+        // If there was a closing brace then identify the span to remove any trailing commas from\n+        // previous imports.\n+        if found_closing_brace {\n+            if let Ok(prev_source) = source_map.span_to_prev_source(span) {\n+                // `prev_source` will contain all of the source that came before the span.\n+                // Then split based on a command and take the first (ie. closest to our span)\n+                // snippet. In the example, this is a space.\n+                let prev_comma = prev_source.rsplit(',').collect::<Vec<_>>();\n+                let prev_starting_brace = prev_source.rsplit('{').collect::<Vec<_>>();\n+                if prev_comma.len() > 1 && prev_starting_brace.len() > 1 {\n+                    let prev_comma = prev_comma.first().unwrap();\n+                    let prev_starting_brace = prev_starting_brace.first().unwrap();\n+\n+                    // If the amount of source code before the comma is greater than\n+                    // the amount of source code before the starting brace then we've only\n+                    // got one item in the nested item (eg. `issue_52891::{self}`).\n+                    if prev_comma.len() > prev_starting_brace.len() {\n+                        // So just remove the entire line...\n+                        err.span_suggestion(\n+                            directive.use_span_with_attributes,\n+                            message,\n+                            String::new(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        return;\n+                    }\n+\n+                    let span = span.with_lo(BytePos(\n+                        // Take away the number of bytes for the characters we've found and an\n+                        // extra for the comma.\n+                        span.lo().0 - (prev_comma.as_bytes().len() as u32) - 1\n+                    ));\n+                    err.span_suggestion(\n+                        span, message, String::new(), Applicability::MaybeIncorrect,\n+                    );\n+                    return;\n+                }\n             }\n         }\n \n-        err.emit();\n-        self.name_already_seen.insert(name, span);\n+        err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);\n     }\n \n     fn extern_prelude_get(&mut self, ident: Ident, speculative: bool)"}, {"sha": "5105c80fcbc870bd8b5d77da504142d4599df09a", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -18,7 +18,7 @@ use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::FxHashSet;\n \n-use syntax::ast::{Ident, Name, NodeId, CRATE_NODE_ID};\n+use syntax::ast::{self, Ident, Name, NodeId, CRATE_NODE_ID};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::keywords;\n@@ -42,6 +42,8 @@ pub enum ImportDirectiveSubclass<'a> {\n         target_bindings: PerNS<Cell<Option<&'a NameBinding<'a>>>>,\n         /// `true` for `...::{self [as target]}` imports, `false` otherwise.\n         type_ns_only: bool,\n+        /// Did this import result from a nested import? ie. `use foo::{bar, baz};`\n+        nested: bool,\n     },\n     GlobImport {\n         is_prelude: bool,\n@@ -78,6 +80,15 @@ crate struct ImportDirective<'a> {\n     /// `UseTree` node.\n     pub root_id: NodeId,\n \n+    /// Span of the entire use statement.\n+    pub use_span: Span,\n+\n+    /// Span of the entire use statement with attributes.\n+    pub use_span_with_attributes: Span,\n+\n+    /// Did the use statement have any attributes?\n+    pub has_attributes: bool,\n+\n     /// Span of this use tree.\n     pub span: Span,\n \n@@ -98,6 +109,13 @@ impl<'a> ImportDirective<'a> {\n         match self.subclass { ImportDirectiveSubclass::GlobImport { .. } => true, _ => false }\n     }\n \n+    pub fn is_nested(&self) -> bool {\n+        match self.subclass {\n+            ImportDirectiveSubclass::SingleImport { nested, .. } => nested,\n+            _ => false\n+        }\n+    }\n+\n     crate fn crate_lint(&self) -> CrateLint {\n         CrateLint::UsePath { root_id: self.root_id, root_span: self.root_span }\n     }\n@@ -390,6 +408,7 @@ impl<'a> Resolver<'a> {\n                                 subclass: ImportDirectiveSubclass<'a>,\n                                 span: Span,\n                                 id: NodeId,\n+                                item: &ast::Item,\n                                 root_span: Span,\n                                 root_id: NodeId,\n                                 vis: ty::Visibility,\n@@ -402,6 +421,9 @@ impl<'a> Resolver<'a> {\n             subclass,\n             span,\n             id,\n+            use_span: item.span,\n+            use_span_with_attributes: item.span_with_attributes(),\n+            has_attributes: !item.attrs.is_empty(),\n             root_span,\n             root_id,\n             vis: Cell::new(vis),\n@@ -787,7 +809,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         let (source, target, source_bindings, target_bindings, type_ns_only) =\n                 match directive.subclass {\n             SingleImport { source, target, ref source_bindings,\n-                           ref target_bindings, type_ns_only } =>\n+                           ref target_bindings, type_ns_only, .. } =>\n                 (source, target, source_bindings, target_bindings, type_ns_only),\n             GlobImport { .. } => {\n                 self.resolve_glob_import(directive);\n@@ -908,7 +930,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         let (ident, target, source_bindings, target_bindings, type_ns_only) =\n                 match directive.subclass {\n             SingleImport { source, target, ref source_bindings,\n-                           ref target_bindings, type_ns_only } =>\n+                           ref target_bindings, type_ns_only, .. } =>\n                 (source, target, source_bindings, target_bindings, type_ns_only),\n             GlobImport { is_prelude, ref max_vis } => {\n                 if directive.module_path.len() <= 1 {"}, {"sha": "4f3f5631cc39c30f022081e8a223b0b3294b9233", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -2164,6 +2164,13 @@ pub struct Item {\n     pub tokens: Option<TokenStream>,\n }\n \n+impl Item {\n+    /// Return the span that encompasses the attributes.\n+    pub fn span_with_attributes(&self) -> Span {\n+        self.attrs.iter().fold(self.span, |acc, attr| acc.to(attr.span()))\n+    }\n+}\n+\n /// A function header.\n ///\n /// All the information between the visibility and the name of the function is"}, {"sha": "c7288af13c278552f54d7c15c96dd95a16a9221b", "filename": "src/test/ui/double-type-import.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fdouble-type-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fdouble-type-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-type-import.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -4,13 +4,12 @@ error[E0252]: the name `X` is defined multiple times\n LL |     pub use self::bar::X;\n    |             ------------ previous import of the type `X` here\n LL |     use self::bar::X;\n-   |         ^^^^^^^^^^^^ `X` reimported here\n+   |     ----^^^^^^^^^^^^-\n+   |     |   |\n+   |     |   `X` reimported here\n+   |     help: remove unnecessary import\n    |\n    = note: `X` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL |     use self::bar::X as OtherX;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "78e4e43ac2f3d4d452371d8e6a0a9a19118cceb4", "filename": "src/test/ui/error-codes/E0430.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Ferror-codes%2FE0430.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Ferror-codes%2FE0430.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0430.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -10,15 +10,13 @@ error[E0252]: the name `fmt` is defined multiple times\n   --> $DIR/E0430.rs:1:22\n    |\n LL | use std::fmt::{self, self}; //~ ERROR E0430\n-   |                ----  ^^^^ `fmt` reimported here\n-   |                |\n+   |                ------^^^^\n+   |                |   | |\n+   |                |   | `fmt` reimported here\n+   |                |   help: remove unnecessary import\n    |                previous import of the module `fmt` here\n    |\n    = note: `fmt` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL | use std::fmt::{self, self as other_fmt}; //~ ERROR E0430\n-   |                      ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "29660d908e485d69c2ed827c3b8b934bc622848f", "filename": "src/test/ui/imports/duplicate.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -4,13 +4,12 @@ error[E0252]: the name `foo` is defined multiple times\n LL |     use a::foo;\n    |         ------ previous import of the value `foo` here\n LL |     use a::foo; //~ ERROR the name `foo` is defined multiple times\n-   |         ^^^^^^ `foo` reimported here\n+   |     ----^^^^^^-\n+   |     |   |\n+   |     |   `foo` reimported here\n+   |     help: remove unnecessary import\n    |\n    = note: `foo` must be defined only once in the value namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL |     use a::foo as other_foo; //~ ERROR the name `foo` is defined multiple times\n-   |         ^^^^^^^^^^^^^^^^^^^\n \n error[E0659]: `foo` is ambiguous (glob import vs glob import in the same module)\n   --> $DIR/duplicate.rs:46:15"}, {"sha": "0759811832242108276bb150c912f3f7198e06d9", "filename": "src/test/ui/issues/auxiliary/issue-52891.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-52891.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-52891.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-52891.rs?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -0,0 +1,33 @@\n+pub mod a {\n+    pub mod inner {\n+    }\n+}\n+\n+pub mod b {\n+    pub mod inner {\n+    }\n+}\n+\n+pub mod c {}\n+\n+pub mod d {}\n+\n+pub mod e {}\n+\n+pub mod f {}\n+\n+pub mod g {}\n+\n+pub mod h {}\n+\n+pub mod i {}\n+\n+pub mod j {}\n+\n+pub mod k {}\n+\n+pub mod l {}\n+\n+pub mod m {}\n+\n+pub mod n {}"}, {"sha": "70dacb353fe0775ea8606b300cad69326d08e118", "filename": "src/test/ui/issues/issue-26886.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-26886.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-26886.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26886.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -4,13 +4,12 @@ error[E0252]: the name `Arc` is defined multiple times\n LL | use std::sync::{self, Arc};\n    |                       --- previous import of the type `Arc` here\n LL | use std::sync::Arc; //~ ERROR the name `Arc` is defined multiple times\n-   |     ^^^^^^^^^^^^^^ `Arc` reimported here\n+   | ----^^^^^^^^^^^^^^-\n+   | |   |\n+   | |   `Arc` reimported here\n+   | help: remove unnecessary import\n    |\n    = note: `Arc` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL | use std::sync::Arc as OtherArc; //~ ERROR the name `Arc` is defined multiple times\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0252]: the name `sync` is defined multiple times\n   --> $DIR/issue-26886.rs:4:5\n@@ -19,13 +18,12 @@ LL | use std::sync::{self, Arc};\n    |                 ---- previous import of the module `sync` here\n ...\n LL | use std::sync; //~ ERROR the name `sync` is defined multiple times\n-   |     ^^^^^^^^^ `sync` reimported here\n+   | ----^^^^^^^^^-\n+   | |   |\n+   | |   `sync` reimported here\n+   | help: remove unnecessary import\n    |\n    = note: `sync` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL | use std::sync as other_sync; //~ ERROR the name `sync` is defined multiple times\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2a1ac57651138e8368035a61af5fae4cff1fb425", "filename": "src/test/ui/issues/issue-45829/import-twice.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -2,15 +2,13 @@ error[E0252]: the name `A` is defined multiple times\n   --> $DIR/import-twice.rs:6:14\n    |\n LL | use foo::{A, A};\n-   |           -  ^ `A` reimported here\n-   |           |\n+   |           ---^\n+   |           || |\n+   |           || `A` reimported here\n+   |           |help: remove unnecessary import\n    |           previous import of the type `A` here\n    |\n    = note: `A` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL | use foo::{A, A as OtherA};\n-   |              ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e694b5c9b154f8f93fb096b8a78abd49720aab85", "filename": "src/test/ui/issues/issue-52891.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-52891.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-52891.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52891.fixed?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -0,0 +1,37 @@\n+// aux-build:issue-52891.rs\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+extern crate issue_52891;\n+\n+// Check that we don't suggest renaming duplicate imports but instead\n+// suggest removing one.\n+\n+use issue_52891::a;\n+ //~ ERROR `a` is defined multiple times\n+\n+use issue_52891::{b, c}; //~ ERROR `a` is defined multiple times\n+use issue_52891::{d, e}; //~ ERROR `a` is defined multiple times\n+use issue_52891::{f, g}; //~ ERROR `a` is defined multiple times\n+\n+use issue_52891::{//~ ERROR `a` is defined multiple times\n+    h,\n+    i};\n+use issue_52891::{j,\n+    //~ ERROR `a` is defined multiple times\n+    k};\n+use issue_52891::{l,\n+    m}; //~ ERROR `a` is defined multiple times\n+\n+use issue_52891::a::inner;\n+use issue_52891::b::inner as other_inner; //~ ERROR `inner` is defined multiple times\n+\n+\n+//~^ ERROR `issue_52891` is defined multiple times\n+\n+\n+#[macro_use]\n+use issue_52891::n; //~ ERROR `n` is defined multiple times\n+\n+fn main() {}"}, {"sha": "cd4b40629ab7f14686451f2547bd5fb73a8b2bce", "filename": "src/test/ui/issues/issue-52891.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-52891.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-52891.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52891.rs?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -0,0 +1,38 @@\n+// aux-build:issue-52891.rs\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+extern crate issue_52891;\n+\n+// Check that we don't suggest renaming duplicate imports but instead\n+// suggest removing one.\n+\n+use issue_52891::a;\n+use issue_52891::a; //~ ERROR `a` is defined multiple times\n+\n+use issue_52891::{a, b, c}; //~ ERROR `a` is defined multiple times\n+use issue_52891::{d, a, e}; //~ ERROR `a` is defined multiple times\n+use issue_52891::{f, g, a}; //~ ERROR `a` is defined multiple times\n+\n+use issue_52891::{a, //~ ERROR `a` is defined multiple times\n+    h,\n+    i};\n+use issue_52891::{j,\n+    a, //~ ERROR `a` is defined multiple times\n+    k};\n+use issue_52891::{l,\n+    m,\n+    a}; //~ ERROR `a` is defined multiple times\n+\n+use issue_52891::a::inner;\n+use issue_52891::b::inner; //~ ERROR `inner` is defined multiple times\n+\n+use issue_52891::{self};\n+//~^ ERROR `issue_52891` is defined multiple times\n+\n+use issue_52891::n;\n+#[macro_use]\n+use issue_52891::n; //~ ERROR `n` is defined multiple times\n+\n+fn main() {}"}, {"sha": "55d611070d9dcbd5a1fc3af237dee743f1ecaa15", "filename": "src/test/ui/issues/issue-52891.stderr", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-52891.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fissues%2Fissue-52891.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52891.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -0,0 +1,145 @@\n+error[E0252]: the name `a` is defined multiple times\n+  --> $DIR/issue-52891.rs:12:5\n+   |\n+LL | use issue_52891::a;\n+   |     -------------- previous import of the module `a` here\n+LL | use issue_52891::a; //~ ERROR `a` is defined multiple times\n+   | ----^^^^^^^^^^^^^^-\n+   | |   |\n+   | |   `a` reimported here\n+   | help: remove unnecessary import\n+   |\n+   = note: `a` must be defined only once in the type namespace of this module\n+\n+error[E0252]: the name `a` is defined multiple times\n+  --> $DIR/issue-52891.rs:14:19\n+   |\n+LL | use issue_52891::a;\n+   |     -------------- previous import of the module `a` here\n+...\n+LL | use issue_52891::{a, b, c}; //~ ERROR `a` is defined multiple times\n+   |                   ^--\n+   |                   |\n+   |                   `a` reimported here\n+   |                   help: remove unnecessary import\n+   |\n+   = note: `a` must be defined only once in the type namespace of this module\n+\n+error[E0252]: the name `a` is defined multiple times\n+  --> $DIR/issue-52891.rs:15:22\n+   |\n+LL | use issue_52891::a;\n+   |     -------------- previous import of the module `a` here\n+...\n+LL | use issue_52891::{d, a, e}; //~ ERROR `a` is defined multiple times\n+   |                      ^--\n+   |                      |\n+   |                      `a` reimported here\n+   |                      help: remove unnecessary import\n+   |\n+   = note: `a` must be defined only once in the type namespace of this module\n+\n+error[E0252]: the name `a` is defined multiple times\n+  --> $DIR/issue-52891.rs:16:25\n+   |\n+LL | use issue_52891::a;\n+   |     -------------- previous import of the module `a` here\n+...\n+LL | use issue_52891::{f, g, a}; //~ ERROR `a` is defined multiple times\n+   |                       --^\n+   |                       | |\n+   |                       | `a` reimported here\n+   |                       help: remove unnecessary import\n+   |\n+   = note: `a` must be defined only once in the type namespace of this module\n+\n+error[E0252]: the name `a` is defined multiple times\n+  --> $DIR/issue-52891.rs:18:19\n+   |\n+LL | use issue_52891::a;\n+   |     -------------- previous import of the module `a` here\n+...\n+LL | use issue_52891::{a, //~ ERROR `a` is defined multiple times\n+   |                   ^--\n+   |                   |\n+   |                   `a` reimported here\n+   |                   help: remove unnecessary import\n+   |\n+   = note: `a` must be defined only once in the type namespace of this module\n+\n+error[E0252]: the name `a` is defined multiple times\n+  --> $DIR/issue-52891.rs:22:5\n+   |\n+LL | use issue_52891::a;\n+   |     -------------- previous import of the module `a` here\n+...\n+LL |     a, //~ ERROR `a` is defined multiple times\n+   |     ^--\n+   |     |\n+   |     `a` reimported here\n+   |     help: remove unnecessary import\n+   |\n+   = note: `a` must be defined only once in the type namespace of this module\n+\n+error[E0252]: the name `a` is defined multiple times\n+  --> $DIR/issue-52891.rs:26:5\n+   |\n+LL |   use issue_52891::a;\n+   |       -------------- previous import of the module `a` here\n+...\n+LL |       m,\n+   |  ______-\n+LL | |     a}; //~ ERROR `a` is defined multiple times\n+   | |     -\n+   | |     |\n+   | |_____`a` reimported here\n+   |       help: remove unnecessary import\n+   |\n+   = note: `a` must be defined only once in the type namespace of this module\n+\n+error[E0252]: the name `inner` is defined multiple times\n+  --> $DIR/issue-52891.rs:29:5\n+   |\n+LL | use issue_52891::a::inner;\n+   |     --------------------- previous import of the module `inner` here\n+LL | use issue_52891::b::inner; //~ ERROR `inner` is defined multiple times\n+   |     ^^^^^^^^^^^^^^^^^^^^^ `inner` reimported here\n+   |\n+   = note: `inner` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | use issue_52891::b::inner as other_inner; //~ ERROR `inner` is defined multiple times\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0254]: the name `issue_52891` is defined multiple times\n+  --> $DIR/issue-52891.rs:31:19\n+   |\n+LL | extern crate issue_52891;\n+   | ------------------------- previous import of the extern crate `issue_52891` here\n+...\n+LL | use issue_52891::{self};\n+   | ------------------^^^^--\n+   | |                 |\n+   | |                 `issue_52891` reimported here\n+   | help: remove unnecessary import\n+   |\n+   = note: `issue_52891` must be defined only once in the type namespace of this module\n+\n+error[E0252]: the name `n` is defined multiple times\n+  --> $DIR/issue-52891.rs:36:5\n+   |\n+LL | use issue_52891::n;\n+   | -------------------\n+   | |   |\n+   | |   previous import of the module `n` here\n+   | help: remove unnecessary import\n+LL | #[macro_use]\n+LL | use issue_52891::n; //~ ERROR `n` is defined multiple times\n+   |     ^^^^^^^^^^^^^^ `n` reimported here\n+   |\n+   = note: `n` must be defined only once in the type namespace of this module\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors occurred: E0252, E0254.\n+For more information about an error, try `rustc --explain E0252`."}, {"sha": "2dfe2a94c88e1817a32b64244553880a36521bd1", "filename": "src/test/ui/proc-macro/shadow.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -1,17 +1,16 @@\n error[E0259]: the name `derive_a` is defined multiple times\n   --> $DIR/shadow.rs:6:1\n    |\n-LL | extern crate derive_a;\n-   | ---------------------- previous import of the extern crate `derive_a` here\n-LL | #[macro_use]\n-LL | extern crate derive_a; //~ ERROR the name `derive_a` is defined multiple times\n-   | ^^^^^^^^^^^^^^^^^^^^^^ `derive_a` reimported here\n+LL |   extern crate derive_a;\n+   |   ---------------------- previous import of the extern crate `derive_a` here\n+LL | / #[macro_use]\n+LL | | extern crate derive_a; //~ ERROR the name `derive_a` is defined multiple times\n+   | | ^^^^^^^^^^^^^^^^^^^^^-\n+   | |_|____________________|\n+   |   |                    help: remove unnecessary import\n+   |   `derive_a` reimported here\n    |\n    = note: `derive_a` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL | extern crate derive_a as other_derive_a; //~ ERROR the name `derive_a` is defined multiple times\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1b4b058b783ad4b255870f6560c5ae419cf8b875", "filename": "src/test/ui/resolve/resolve-conflict-import-vs-import.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -4,13 +4,12 @@ error[E0252]: the name `transmute` is defined multiple times\n LL | use std::mem::transmute;\n    |     ------------------- previous import of the value `transmute` here\n LL | use std::mem::transmute;\n-   |     ^^^^^^^^^^^^^^^^^^^ `transmute` reimported here\n+   | ----^^^^^^^^^^^^^^^^^^^-\n+   | |   |\n+   | |   `transmute` reimported here\n+   | help: remove unnecessary import\n    |\n    = note: `transmute` must be defined only once in the value namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL | use std::mem::transmute as other_transmute;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e8679a3726d305d093bc1c616a5644497b3f2c3a", "filename": "src/test/ui/unresolved/unresolved-extern-mod-suggestion.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Funresolved%2Funresolved-extern-mod-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Funresolved%2Funresolved-extern-mod-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-extern-mod-suggestion.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -4,13 +4,12 @@ error[E0254]: the name `core` is defined multiple times\n LL | extern crate core;\n    | ------------------ previous import of the extern crate `core` here\n LL | use core;\n-   |     ^^^^ `core` reimported here\n+   | ----^^^^-\n+   | |   |\n+   | |   `core` reimported here\n+   | help: remove unnecessary import\n    |\n    = note: `core` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL | use core as other_core;\n-   |     ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c23ab34eae678e43b9cbbfe767dd3336d66ef810", "filename": "src/test/ui/use/use-mod.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fuse%2Fuse-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fuse%2Fuse-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -20,13 +20,12 @@ LL |     self,\n    |     ---- previous import of the module `bar` here\n ...\n LL |     self\n-   |     ^^^^ `bar` reimported here\n+   |     ^^^^\n+   |     |\n+   |     `bar` reimported here\n+   |     help: remove unnecessary import\n    |\n    = note: `bar` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL |     self as other_bar\n-   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "00f468cdf316bb0afe70f6eeb3c3e8f9c98d1f79", "filename": "src/test/ui/use/use-paths-as-items.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fuse%2Fuse-paths-as-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1595163356546e8a4db55784bcc591e2c5cea26c/src%2Ftest%2Fui%2Fuse%2Fuse-paths-as-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-paths-as-items.stderr?ref=1595163356546e8a4db55784bcc591e2c5cea26c", "patch": "@@ -4,13 +4,12 @@ error[E0252]: the name `mem` is defined multiple times\n LL | use std::{mem, ptr};\n    |           --- previous import of the module `mem` here\n LL | use std::mem; //~ ERROR the name `mem` is defined multiple times\n-   |     ^^^^^^^^ `mem` reimported here\n+   | ----^^^^^^^^-\n+   | |   |\n+   | |   `mem` reimported here\n+   | help: remove unnecessary import\n    |\n    = note: `mem` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL | use std::mem as other_mem; //~ ERROR the name `mem` is defined multiple times\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}