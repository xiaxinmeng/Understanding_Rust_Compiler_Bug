{"sha": "030b1ed7f709539f5ca422758e9fe00d173aee76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMGIxZWQ3ZjcwOTUzOWY1Y2E0MjI3NThlOWZlMDBkMTczYWVlNzY=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-08-27T16:57:51Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-12-06T15:07:15Z"}, "message": "Refactor stderr_prints_nothing into a more modular function", "tree": {"sha": "1253ea1024b9b7c872a32e688c1739772ad98204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1253ea1024b9b7c872a32e688c1739772ad98204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030b1ed7f709539f5ca422758e9fe00d173aee76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030b1ed7f709539f5ca422758e9fe00d173aee76", "html_url": "https://github.com/rust-lang/rust/commit/030b1ed7f709539f5ca422758e9fe00d173aee76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030b1ed7f709539f5ca422758e9fe00d173aee76/comments", "author": null, "committer": null, "parents": [{"sha": "367e783e6f66a4dba32decdc68a262953d2f3f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/367e783e6f66a4dba32decdc68a262953d2f3f1b", "html_url": "https://github.com/rust-lang/rust/commit/367e783e6f66a4dba32decdc68a262953d2f3f1b"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "b70d56f9e593d7fc259eb129873e309e10db3770", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=030b1ed7f709539f5ca422758e9fe00d173aee76", "patch": "@@ -29,7 +29,7 @@ use intrinsics;\n use mem;\n use ptr;\n use raw;\n-use sys::stdio::{Stderr, stderr_prints_nothing};\n+use sys::stdio::panic_output;\n use sys_common::rwlock::RWLock;\n use sys_common::thread_info;\n use sys_common::util;\n@@ -193,7 +193,6 @@ fn default_hook(info: &PanicInfo) {\n             None => \"Box<Any>\",\n         }\n     };\n-    let mut err = Stderr::new().ok();\n     let thread = thread_info::current_thread();\n     let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n \n@@ -215,17 +214,14 @@ fn default_hook(info: &PanicInfo) {\n         }\n     };\n \n-    let prev = LOCAL_STDERR.with(|s| s.borrow_mut().take());\n-    match (prev, err.as_mut()) {\n-       (Some(mut stderr), _) => {\n-           write(&mut *stderr);\n-           let mut s = Some(stderr);\n-           LOCAL_STDERR.with(|slot| {\n-               *slot.borrow_mut() = s.take();\n-           });\n-       }\n-       (None, Some(ref mut err)) => { write(err) }\n-       _ => {}\n+    if let Some(mut local) = LOCAL_STDERR.with(|s| s.borrow_mut().take()) {\n+       write(&mut *local);\n+       let mut s = Some(local);\n+       LOCAL_STDERR.with(|slot| {\n+           *slot.borrow_mut() = s.take();\n+       });\n+    } else if let Some(mut out) = panic_output() {\n+        write(&mut out);\n     }\n }\n \n@@ -485,7 +481,7 @@ fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n             // Some platforms know that printing to stderr won't ever actually\n             // print anything, and if that's the case we can skip the default\n             // hook.\n-            Hook::Default if stderr_prints_nothing() => {}\n+            Hook::Default if panic_output().is_none() => {}\n             Hook::Default => {\n                 info.set_payload(payload.get());\n                 default_hook(&info);\n@@ -494,7 +490,7 @@ fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n                 info.set_payload(payload.get());\n                 (*ptr)(&info);\n             }\n-        }\n+        };\n         HOOK_LOCK.read_unlock();\n     }\n "}, {"sha": "c90dbd8beab869ea1cab1ebea50dc511c3a440a6", "filename": "src/libstd/sys/cloudabi/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs?ref=030b1ed7f709539f5ca422758e9fe00d173aee76", "patch": "@@ -78,6 +78,6 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n \n pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n-pub fn stderr_prints_nothing() -> bool {\n-    false\n+pub fn panic_output() -> Option<impl io::Write> {\n+    Stderr::new().ok()\n }"}, {"sha": "52cd9334ffbbf4ab7b9c0c987ad57327446397d0", "filename": "src/libstd/sys/redox/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs?ref=030b1ed7f709539f5ca422758e9fe00d173aee76", "patch": "@@ -76,6 +76,6 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n \n pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n-pub fn stderr_prints_nothing() -> bool {\n-    false\n+pub fn panic_output() -> Option<impl io::Write> {\n+    Stderr::new().ok()\n }"}, {"sha": "63e341abb2c140e56672d0409e702bc8fd6209c4", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=030b1ed7f709539f5ca422758e9fe00d173aee76", "patch": "@@ -76,6 +76,6 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n \n pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n-pub fn stderr_prints_nothing() -> bool {\n-    false\n+pub fn panic_output() -> Option<impl io::Write> {\n+    Stderr::new().ok()\n }"}, {"sha": "e51aba75333b651bcca5fdb213d631b100c5a88a", "filename": "src/libstd/sys/wasm/stdio.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs?ref=030b1ed7f709539f5ca422758e9fe00d173aee76", "patch": "@@ -70,6 +70,10 @@ pub fn is_ebadf(_err: &io::Error) -> bool {\n     true\n }\n \n-pub fn stderr_prints_nothing() -> bool {\n-    !cfg!(feature = \"wasm_syscall\")\n+pub fn panic_output() -> Option<impl io::Write> {\n+    if cfg!(feature = \"wasm_syscall\") {\n+        Stderr::new().ok()\n+    } else {\n+        None\n+    }\n }"}, {"sha": "61e0db87ebe118ef0ea3d50bc0e63acaa8412b8d", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=030b1ed7f709539f5ca422758e9fe00d173aee76", "patch": "@@ -228,6 +228,6 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n // been seen to be acceptable.\n pub const STDIN_BUF_SIZE: usize = 8 * 1024;\n \n-pub fn stderr_prints_nothing() -> bool {\n-    false\n+pub fn panic_output() -> Option<impl io::Write> {\n+    Stderr::new().ok()\n }"}, {"sha": "fc86a59d17f2e93659bbe6f92fbc9548861b8de7", "filename": "src/libstd/sys_common/util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys_common%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030b1ed7f709539f5ca422758e9fe00d173aee76/src%2Flibstd%2Fsys_common%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Futil.rs?ref=030b1ed7f709539f5ca422758e9fe00d173aee76", "patch": "@@ -10,14 +10,13 @@\n \n use fmt;\n use io::prelude::*;\n-use sys::stdio::{Stderr, stderr_prints_nothing};\n+use sys::stdio::panic_output;\n use thread;\n \n pub fn dumb_print(args: fmt::Arguments) {\n-    if stderr_prints_nothing() {\n-        return\n+    if let Some(mut out) = panic_output() {\n+        let _ = out.write_fmt(args);\n     }\n-    let _ = Stderr::new().map(|mut stderr| stderr.write_fmt(args));\n }\n \n // Other platforms should use the appropriate platform-specific mechanism for"}]}