{"sha": "a234aef084d2f591e8472029b2d03a0f51b5adb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMzRhZWYwODRkMmY1OTFlODQ3MjAyOWIyZDAzYTBmNTFiNWFkYjI=", "commit": {"author": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-01-23T21:27:01Z"}, "committer": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-01-25T17:16:05Z"}, "message": "dont fire possible_missing_comma if intendation is present", "tree": {"sha": "296173a10060ae9e61ee4d091252316d8e0f14ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/296173a10060ae9e61ee4d091252316d8e0f14ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a234aef084d2f591e8472029b2d03a0f51b5adb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a234aef084d2f591e8472029b2d03a0f51b5adb2", "html_url": "https://github.com/rust-lang/rust/commit/a234aef084d2f591e8472029b2d03a0f51b5adb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a234aef084d2f591e8472029b2d03a0f51b5adb2/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3237b7a69f950bc6db7fba602d3dd831bd1b5b29", "url": "https://api.github.com/repos/rust-lang/rust/commits/3237b7a69f950bc6db7fba602d3dd831bd1b5b29", "html_url": "https://github.com/rust-lang/rust/commit/3237b7a69f950bc6db7fba602d3dd831bd1b5b29"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "fed87f26be058541f14bd243f941934638b113d9", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a234aef084d2f591e8472029b2d03a0f51b5adb2/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a234aef084d2f591e8472029b2d03a0f51b5adb2/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=a234aef084d2f591e8472029b2d03a0f51b5adb2", "patch": "@@ -3,6 +3,7 @@ use if_chain::if_chain;\n use rustc::lint::in_external_macro;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Span;\n use syntax::ast::*;\n \n declare_clippy_lint! {\n@@ -242,26 +243,31 @@ fn has_unary_equivalent(bin_op: BinOpKind) -> bool {\n     bin_op == BinOpKind::And || bin_op == BinOpKind::Mul || bin_op == BinOpKind::Sub\n }\n \n+fn indentation(cx: &EarlyContext<'_>, span: Span) -> usize {\n+    cx.sess.source_map().lookup_char_pos(span.lo()).col.0\n+}\n+\n /// Implementation of the `POSSIBLE_MISSING_COMMA` lint for array\n fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n     if let ExprKind::Array(ref array) = expr.kind {\n         for element in array {\n-            if let ExprKind::Binary(ref op, ref lhs, _) = element.kind {\n-                if has_unary_equivalent(op.node) && !differing_macro_contexts(lhs.span, op.span) {\n-                    let space_span = lhs.span.between(op.span);\n-                    if let Some(space_snippet) = snippet_opt(cx, space_span) {\n-                        let lint_span = lhs.span.with_lo(lhs.span.hi());\n-                        if space_snippet.contains('\\n') {\n-                            span_note_and_lint(\n-                                cx,\n-                                POSSIBLE_MISSING_COMMA,\n-                                lint_span,\n-                                \"possibly missing a comma here\",\n-                                lint_span,\n-                                \"to remove this lint, add a comma or write the expr in a single line\",\n-                            );\n-                        }\n-                    }\n+            if_chain! {\n+                if let ExprKind::Binary(ref op, ref lhs, _) = element.kind;\n+                if has_unary_equivalent(op.node) && !differing_macro_contexts(lhs.span, op.span);\n+                let space_span = lhs.span.between(op.span);\n+                if let Some(space_snippet) = snippet_opt(cx, space_span);\n+                let lint_span = lhs.span.with_lo(lhs.span.hi());\n+                if space_snippet.contains('\\n');\n+                if indentation(cx, op.span) <= indentation(cx, lhs.span);\n+                then {\n+                    span_note_and_lint(\n+                        cx,\n+                        POSSIBLE_MISSING_COMMA,\n+                        lint_span,\n+                        \"possibly missing a comma here\",\n+                        lint_span,\n+                        \"to remove this lint, add a comma or write the expr in a single line\",\n+                    );\n                 }\n             }\n         }"}, {"sha": "078811b8d882b8ba378b8f3b86409f82a8b8fbb5", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a234aef084d2f591e8472029b2d03a0f51b5adb2/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a234aef084d2f591e8472029b2d03a0f51b5adb2/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=a234aef084d2f591e8472029b2d03a0f51b5adb2", "patch": "@@ -143,4 +143,15 @@ fn main() {\n         true\n         | false,\n     ];\n+\n+    // don't lint if the indentation suggests not to\n+    let _ = &[\n+        1 + 2, 3 \n+                - 4, 5\n+    ];\n+    // lint if it doesnt\n+    let _ = &[\n+        -1\n+        -4,\n+    ];\n }"}, {"sha": "e2095cc125bb7652db8fe7c147cf8f5362009b72", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a234aef084d2f591e8472029b2d03a0f51b5adb2/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a234aef084d2f591e8472029b2d03a0f51b5adb2/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=a234aef084d2f591e8472029b2d03a0f51b5adb2", "patch": "@@ -115,5 +115,13 @@ LL |         -1, -2, -3 // <= no comma here\n    |\n    = note: to remove this lint, add a comma or write the expr in a single line\n \n-error: aborting due to 13 previous errors\n+error: possibly missing a comma here\n+  --> $DIR/formatting.rs:154:11\n+   |\n+LL |         -1\n+   |           ^\n+   |\n+   = note: to remove this lint, add a comma or write the expr in a single line\n+\n+error: aborting due to 14 previous errors\n "}]}