{"sha": "2c4d039b762f5fc9e1d3340196dc2ca05d9bf104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNGQwMzliNzYyZjVmYzllMWQzMzQwMTk2ZGMyY2EwNWQ5YmYxMDQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T15:05:49Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T15:05:49Z"}, "message": "Rollup merge of #32478 - xevix:docs/strings-str-unsized-types, r=steveklabnik\n\nAdd note on `str` being an unsized type in strings section of book\n\nThe book section on Rust strings mentions `&str` and `String` but does not address why `str` is not used directly. This adds a short blurb and a link to the unsized types chapter. The second draft of the book will go more in-depth on this, but this should help a bit for now. Thanks #rust for clarifying this point, and let me know if it needs rewording or different placement :smile:.\n\nCC @steveklabnik @Kimundi", "tree": {"sha": "1b6ba2e6cb33a2c349c9fc92c5749cd57dbc1e2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b6ba2e6cb33a2c349c9fc92c5749cd57dbc1e2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c4d039b762f5fc9e1d3340196dc2ca05d9bf104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4d039b762f5fc9e1d3340196dc2ca05d9bf104", "html_url": "https://github.com/rust-lang/rust/commit/2c4d039b762f5fc9e1d3340196dc2ca05d9bf104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c4d039b762f5fc9e1d3340196dc2ca05d9bf104/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcfcbaa009799e6c74dbbe0f116105ea71cf22d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcfcbaa009799e6c74dbbe0f116105ea71cf22d5", "html_url": "https://github.com/rust-lang/rust/commit/dcfcbaa009799e6c74dbbe0f116105ea71cf22d5"}, {"sha": "6ce63fb3f1bf37004868f79beacb180283c0750e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce63fb3f1bf37004868f79beacb180283c0750e", "html_url": "https://github.com/rust-lang/rust/commit/6ce63fb3f1bf37004868f79beacb180283c0750e"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "f5ebceedd363a9c77fb071788638253fee0a2f84", "filename": "src/doc/book/strings.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c4d039b762f5fc9e1d3340196dc2ca05d9bf104/src%2Fdoc%2Fbook%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c4d039b762f5fc9e1d3340196dc2ca05d9bf104/src%2Fdoc%2Fbook%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstrings.md?ref=2c4d039b762f5fc9e1d3340196dc2ca05d9bf104", "patch": "@@ -44,6 +44,11 @@ let s = \"foo\\\n assert_eq!(\"foobar\", s);\n ```\n \n+Note that you normally cannot access a `str` directly, but only through a `&str`\n+reference. This is because `str` is an unsized type which requires additional\n+runtime information to be usable. For more information see the chapter on\n+[unsized types][ut].\n+\n Rust has more than only `&str`s though. A `String` is a heap-allocated string.\n This string is growable, and is also guaranteed to be UTF-8. `String`s are\n commonly created by converting from a string slice using the `to_string`\n@@ -185,5 +190,6 @@ let hello_world = hello + &world;\n This is because `&String` can automatically coerce to a `&str`. This is a\n feature called \u2018[`Deref` coercions][dc]\u2019.\n \n+[ut]: unsized-types.html\n [dc]: deref-coercions.html\n [connect]: ../std/net/struct.TcpStream.html#method.connect"}]}