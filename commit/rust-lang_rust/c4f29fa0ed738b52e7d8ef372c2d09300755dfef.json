{"sha": "c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "node_id": "C_kwDOAAsO6NoAKGM0ZjI5ZmEwZWQ3MzhiNTJlN2Q4ZWYzNzJjMmQwOTMwMDc1NWRmZWY", "commit": {"author": {"name": "Axel Cohen", "email": "axel.cohen@eshard.com", "date": "2021-11-24T10:43:40Z"}, "committer": {"name": "Axel Cohen", "email": "axel.cohen@eshard.com", "date": "2021-12-13T09:41:43Z"}, "message": "Use the existing llvm-plugins option for both legacy and new pm registration", "tree": {"sha": "70209b622c152b56c44064255abe29d85a46c2cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70209b622c152b56c44064255abe29d85a46c2cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "html_url": "https://github.com/rust-lang/rust/commit/c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/comments", "author": {"login": "eskarn", "id": 94465698, "node_id": "U_kgDOBaFuog", "avatar_url": "https://avatars.githubusercontent.com/u/94465698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eskarn", "html_url": "https://github.com/eskarn", "followers_url": "https://api.github.com/users/eskarn/followers", "following_url": "https://api.github.com/users/eskarn/following{/other_user}", "gists_url": "https://api.github.com/users/eskarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eskarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eskarn/subscriptions", "organizations_url": "https://api.github.com/users/eskarn/orgs", "repos_url": "https://api.github.com/users/eskarn/repos", "events_url": "https://api.github.com/users/eskarn/events{/privacy}", "received_events_url": "https://api.github.com/users/eskarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eskarn", "id": 94465698, "node_id": "U_kgDOBaFuog", "avatar_url": "https://avatars.githubusercontent.com/u/94465698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eskarn", "html_url": "https://github.com/eskarn", "followers_url": "https://api.github.com/users/eskarn/followers", "following_url": "https://api.github.com/users/eskarn/following{/other_user}", "gists_url": "https://api.github.com/users/eskarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eskarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eskarn/subscriptions", "organizations_url": "https://api.github.com/users/eskarn/orgs", "repos_url": "https://api.github.com/users/eskarn/repos", "events_url": "https://api.github.com/users/eskarn/events{/privacy}", "received_events_url": "https://api.github.com/users/eskarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "url": "https://api.github.com/repos/rust-lang/rust/commits/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "html_url": "https://github.com/rust-lang/rust/commit/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "146c0996b8c95ba504d2b5e07ff26b8e51430380", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "patch": "@@ -470,7 +470,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n \n     let extra_passes = config.passes.join(\",\");\n \n-    let pass_plugins = config.pass_plugins.join(\" \");\n+    let llvm_plugins = config.llvm_plugins.join(\",\");\n \n     // FIXME: NewPM doesn't provide a facility to pass custom InlineParams.\n     // We would have to add upstream support for this first, before we can support\n@@ -501,8 +501,8 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         selfprofile_after_pass_callback,\n         extra_passes.as_ptr().cast(),\n         extra_passes.len(),\n-        pass_plugins.as_ptr().cast(),\n-        pass_plugins.len(),\n+        llvm_plugins.as_ptr().cast(),\n+        llvm_plugins.len(),\n     );\n     result.into_result().map_err(|()| llvm_err(diag_handler, \"failed to run LLVM passes\"))\n }"}, {"sha": "c0cc8f9b750c52853be77cdb551dc3520a5d78b0", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "patch": "@@ -2304,8 +2304,8 @@ extern \"C\" {\n         end_callback: SelfProfileAfterPassCallback,\n         ExtraPasses: *const c_char,\n         ExtraPassesLen: size_t,\n-        PassPlugins: *const c_char,\n-        PassPluginsLen: size_t,\n+        LLVMPlugins: *const c_char,\n+        LLVMPluginsLen: size_t,\n     ) -> LLVMRustResult;\n     pub fn LLVMRustPrintModule(\n         M: &'a Module,"}, {"sha": "af53b35d815e74e5e8056b7da3f97c62350e11a7", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "patch": "@@ -119,14 +119,20 @@ unsafe fn configure_llvm(sess: &Session) {\n \n     llvm::LLVMInitializePasses();\n \n-    // Register LLVM plugins by loading them into the compiler process.\n-    for plugin in &sess.opts.debugging_opts.llvm_plugins {\n-        let lib = Library::new(plugin).unwrap_or_else(|e| bug!(\"couldn't load plugin: {}\", e));\n-        debug!(\"LLVM plugin loaded successfully {:?} ({})\", lib, plugin);\n-\n-        // Intentionally leak the dynamic library. We can't ever unload it\n-        // since the library can make things that will live arbitrarily long.\n-        mem::forget(lib);\n+    let use_new_llvm_pm_plugin_register =\n+        sess.opts.debugging_opts.new_llvm_pass_manager.unwrap_or(false);\n+\n+    // Use the legacy pm registration if the new_llvm_pass_manager option isn't explicitly enabled\n+    if use_new_llvm_pm_plugin_register {\n+        // Register LLVM plugins by loading them into the compiler process.\n+        for plugin in &sess.opts.debugging_opts.llvm_plugins {\n+            let lib = Library::new(plugin).unwrap_or_else(|e| bug!(\"couldn't load plugin: {}\", e));\n+            debug!(\"LLVM plugin loaded successfully {:?} ({})\", lib, plugin);\n+\n+            // Intentionally leak the dynamic library. We can't ever unload it\n+            // since the library can make things that will live arbitrarily long.\n+            mem::forget(lib);\n+        }\n     }\n \n     rustc_llvm::initialize_available_targets();"}, {"sha": "0281fd929c5fe9234666a205dd49ca4ac58739db", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "patch": "@@ -74,8 +74,6 @@ pub enum BitcodeSection {\n pub struct ModuleConfig {\n     /// Names of additional optimization passes to run.\n     pub passes: Vec<String>,\n-    /// Paths of LLVM pass plugins to load.\n-    pub pass_plugins: Vec<String>,\n     /// Some(level) to optimize at a certain level, or None to run\n     /// absolutely no optimizations (used for the metadata module).\n     pub opt_level: Option<config::OptLevel>,\n@@ -115,6 +113,7 @@ pub struct ModuleConfig {\n     pub inline_threshold: Option<u32>,\n     pub new_llvm_pass_manager: Option<bool>,\n     pub emit_lifetime_markers: bool,\n+    pub llvm_plugins: Vec<String>,\n }\n \n impl ModuleConfig {\n@@ -172,8 +171,6 @@ impl ModuleConfig {\n         ModuleConfig {\n             passes: if_regular!(sess.opts.cg.passes.clone(), vec![]),\n \n-            pass_plugins: if_regular!(sess.opts.cg.pass_plugins.clone(), vec![]),\n-\n             opt_level: opt_level_and_size,\n             opt_size: opt_level_and_size,\n \n@@ -264,6 +261,7 @@ impl ModuleConfig {\n             inline_threshold: sess.opts.cg.inline_threshold,\n             new_llvm_pass_manager: sess.opts.debugging_opts.new_llvm_pass_manager,\n             emit_lifetime_markers: sess.emit_lifetime_markers(),\n+            llvm_plugins: if_regular!(sess.opts.debugging_opts.llvm_plugins.clone(), vec![]),\n         }\n     }\n "}, {"sha": "c651feaaa66f62cf5b0d1718ce6eb193bc5833d0", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "patch": "@@ -587,7 +587,6 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(overflow_checks, Some(true));\n     tracked!(panic, Some(PanicStrategy::Abort));\n     tracked!(passes, vec![String::from(\"1\"), String::from(\"2\")]);\n-    tracked!(pass_plugins, vec![String::from(\"1\"), String::from(\"2\")]);\n     tracked!(prefer_dynamic, true);\n     tracked!(profile_generate, SwitchWithOptPath::Enabled(None));\n     tracked!(profile_use, Some(PathBuf::from(\"abc\")));"}, {"sha": "f06fc3edf58595ea5a518089acc474f9f0a7993e", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "patch": "@@ -755,7 +755,7 @@ LLVMRustOptimizeWithNewPassManager(\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback,\n     const char *ExtraPasses, size_t ExtraPassesLen,\n-    const char *PassPlugins, size_t PassPluginsLen) {\n+    const char *LLVMPlugins, size_t LLVMPluginsLen) {\n   Module *TheModule = unwrap(ModuleRef);\n   TargetMachine *TM = unwrap(TMRef);\n   OptimizationLevel OptLevel = fromRust(OptLevelRust);\n@@ -926,10 +926,10 @@ LLVMRustOptimizeWithNewPassManager(\n     }\n   }\n \n-  if (PassPluginsLen) {\n-    auto PluginsStr = StringRef(PassPlugins, PassPluginsLen);\n+  if (LLVMPluginsLen) {\n+    auto PluginsStr = StringRef(LLVMPlugins, LLVMPluginsLen);\n     SmallVector<StringRef> Plugins;\n-    PluginsStr.split(Plugins, ' ', -1, false);\n+    PluginsStr.split(Plugins, ',', -1, false);\n     for (auto PluginPath: Plugins) {\n       auto Plugin = PassPlugin::Load(PluginPath.str());\n       if (!Plugin) {"}, {"sha": "bd7b1639613eb7963a776fcb38b2e779cf95cb74", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f29fa0ed738b52e7d8ef372c2d09300755dfef/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=c4f29fa0ed738b52e7d8ef372c2d09300755dfef", "patch": "@@ -1033,8 +1033,6 @@ options! {\n         \"panic strategy to compile crate with\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of extra LLVM passes to run (space separated)\"),\n-    pass_plugins: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n-        \"a list of LLVM pass plugins to load (space separated)\"),\n     prefer_dynamic: bool = (false, parse_bool, [TRACKED],\n         \"prefer dynamic linking to static linking (default: no)\"),\n     profile_generate: SwitchWithOptPath = (SwitchWithOptPath::Disabled,"}]}