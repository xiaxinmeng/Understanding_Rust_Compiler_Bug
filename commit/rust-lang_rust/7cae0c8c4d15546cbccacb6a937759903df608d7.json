{"sha": "7cae0c8c4d15546cbccacb6a937759903df608d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYWUwYzhjNGQxNTU0NmNiY2NhY2I2YTkzNzc1OTkwM2RmNjA4ZDc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T00:14:30Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T00:50:32Z"}, "message": "Implement the gross rustboot hack for contextual parser access to the compilation environment.", "tree": {"sha": "65f635d8c22b880475e0ee6bbe7b2324d0449aba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65f635d8c22b880475e0ee6bbe7b2324d0449aba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cae0c8c4d15546cbccacb6a937759903df608d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cae0c8c4d15546cbccacb6a937759903df608d7", "html_url": "https://github.com/rust-lang/rust/commit/7cae0c8c4d15546cbccacb6a937759903df608d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cae0c8c4d15546cbccacb6a937759903df608d7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d59d33515d889f6e65f50226ba83d91a36bba0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d59d33515d889f6e65f50226ba83d91a36bba0e", "html_url": "https://github.com/rust-lang/rust/commit/9d59d33515d889f6e65f50226ba83d91a36bba0e"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "696140b1d39d12f688e3acf03a288064cf3aa072", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7cae0c8c4d15546cbccacb6a937759903df608d7/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cae0c8c4d15546cbccacb6a937759903df608d7/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=7cae0c8c4d15546cbccacb6a937759903df608d7", "patch": "@@ -147,9 +147,23 @@ impure fn parse_ident(parser p) -> ast.ident {\n }\n \n \n-impure fn parse_str_lit(parser p) -> ast.ident {\n+/* FIXME: gross hack copied from rustboot to make certain configuration-based\n+ * decisions work at build-time.  We should probably change it to use a\n+ * lexical sytnax-extension or something similar. For now we just imitate\n+ * rustboot.\n+ */\n+impure fn parse_str_lit_or_env_ident(parser p) -> ast.ident {\n     alt (p.peek()) {\n         case (token.LIT_STR(?s)) { p.bump(); ret s; }\n+        case (token.IDENT(?i)) {\n+            auto v = eval.lookup(p.get_session(), p.get_env(),\n+                                 p.get_span(), i);\n+            if (!eval.val_is_str(v)) {\n+                p.err(\"expecting string-valued variable\");\n+            }\n+            p.bump();\n+            ret eval.val_as_str(v);\n+        }\n         case (_) {\n             p.err(\"expecting string literal\");\n             fail;\n@@ -1824,7 +1838,7 @@ impure fn parse_item_native_mod(parser p) -> @ast.item {\n     expect(p, token.NATIVE);\n     auto abi = ast.native_abi_cdecl;\n     if (p.peek() != token.MOD) {\n-        auto t = parse_str_lit(p);\n+        auto t = parse_str_lit_or_env_ident(p);\n         if (_str.eq(t, \"cdecl\")) {\n         } else if (_str.eq(t, \"rust\")) {\n             abi = ast.native_abi_rust;\n@@ -1838,7 +1852,7 @@ impure fn parse_item_native_mod(parser p) -> @ast.item {\n     auto native_name;\n     if (p.peek() == token.EQ) {\n         expect(p, token.EQ);\n-        native_name = parse_str_lit(p);\n+        native_name = parse_str_lit_or_env_ident(p);\n     } else {\n         native_name = default_native_name(p.get_session(), id);\n     }\n@@ -2202,7 +2216,7 @@ impure fn parse_crate_directive(parser p) -> ast.crate_directive\n                 case (token.EQ) {\n                     p.bump();\n                     // FIXME: turn this into parse+eval expr\n-                    file_opt = some[filename](parse_str_lit(p));\n+                    file_opt = some[filename](parse_str_lit_or_env_ident(p));\n                 }\n                 case (_) {}\n             }"}]}