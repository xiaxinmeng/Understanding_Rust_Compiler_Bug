{"sha": "3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYTI4Y2IyMDY2MDRmZGRmNjdhMjllN2NiZDNhOGIyMmRhMWVkYzI=", "commit": {"author": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-02-02T21:35:31Z"}, "committer": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-02-04T21:25:56Z"}, "message": "Add a new ui test and update existing ones", "tree": {"sha": "92ac5b08f840db5d4d09fd77cefeecdd9e3ae290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ac5b08f840db5d4d09fd77cefeecdd9e3ae290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "html_url": "https://github.com/rust-lang/rust/commit/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/comments", "author": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aff6add92c5f8deea29af2a5aa7335d4e5843a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aff6add92c5f8deea29af2a5aa7335d4e5843a9", "html_url": "https://github.com/rust-lang/rust/commit/7aff6add92c5f8deea29af2a5aa7335d4e5843a9"}], "stats": {"total": 128, "additions": 70, "deletions": 58}, "files": [{"sha": "346fae11070e15b91e8ef1c8317bda7cf3287292", "filename": "src/test/compile-fail/issue-12187-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -14,7 +14,6 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR unable to fully infer type(s) [E0282]\n-    //~| NOTE cannot infer type\n-    //~| NOTE type annotations or generic parameter binding\n+    //~^ ERROR type annotations needed [E0282]\n+    //~| NOTE cannot infer type for `_`\n }"}, {"sha": "848174d6fe1e057e1670c5e4d6e4e3161416e038", "filename": "src/test/compile-fail/issue-12187-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -14,7 +14,6 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR unable to fully infer type(s) [E0282]\n-    //~| NOTE cannot infer type\n-    //~| NOTE type annotations or generic parameter binding\n+    //~^ ERROR type annotations needed [E0282]\n+    //~| NOTE cannot infer type for `_`\n }"}, {"sha": "ecf81c8af17f61018f4028cf2c0306ffa1a56876", "filename": "src/test/compile-fail/issue-16966.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:type annotations or generic parameter binding required\n+// error-pattern:type annotations needed\n fn main() {\n     panic!(\n         std::default::Default::default()"}, {"sha": "b55863f0dda7af14a55354c721e5c97046a42531", "filename": "src/test/compile-fail/issue-17551.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -13,6 +13,6 @@ use std::marker;\n struct B<T>(marker::PhantomData<T>);\n \n fn main() {\n-    let foo = B(marker::PhantomData); //~ ERROR unable to fully infer type(s)\n+    let foo = B(marker::PhantomData); //~ ERROR type annotations needed\n     let closure = || foo;\n }"}, {"sha": "8991eded3d6b87d9be86a1b3c4d6d1bacdc46329", "filename": "src/test/compile-fail/issue-18159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x; //~ ERROR unable to fully infer type(s)\n+    let x; //~ ERROR type annotations needed\n }"}, {"sha": "4dfad4ee3c385d25b164a94393d4100806a18122", "filename": "src/test/compile-fail/issue-23041.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -14,6 +14,5 @@ fn main()\n     fn bar(x:i32) ->i32 { 3*x };\n     let b:Box<Any> = Box::new(bar as fn(_)->_);\n     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n-                                  //~| NOTE cannot infer type\n-                                  //~| NOTE type annotations or generic parameter binding required\n+                                  //~| NOTE cannot infer type for `_`\n }"}, {"sha": "28109747b755747db465d323382a6aec6fda0822", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -25,6 +25,6 @@ pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n \n fn main() {\n     let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR unable to fully infer type(s)\n+        let_(add(x,x), |y| { //~ ERROR type annotations needed\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "a7232781f6fbcfc710796b5b2de900f64157ccb4", "filename": "src/test/compile-fail/issue-24013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     let a = 1;\n     let b = 2;\n     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n-    //~^ ERROR unable to fully infer type(s)\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "ebfa4975d4d75c7ba77b1b444f20d243ac79e5f3", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { format!(\"{:?}\", None); }\n-    //~^ ERROR unable to fully infer type(s) [E0282]\n+    //~^ ERROR type annotations needed [E0282]"}, {"sha": "87cf2b3f740c1c7528a5b47b6c0a3bc311b7d345", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     // Unconstrained type:\n     format!(\"{:?}\", None);\n-    //~^ ERROR unable to fully infer type(s) [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n }"}, {"sha": "1503da2baa73d24af5146d0f41337c97c30eaef7", "filename": "src/test/compile-fail/issue-6458-3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -12,7 +12,6 @@ use std::mem;\n \n fn main() {\n     mem::transmute(0);\n-    //~^ ERROR unable to fully infer type(s) [E0282]\n-    //~| NOTE cannot infer type\n-    //~| NOTE type annotations or generic parameter binding\n+    //~^ ERROR type annotations needed [E0282]\n+    //~| NOTE cannot infer type for `U`\n }"}, {"sha": "db4d4e76c11c9ae26a91b738678d6cb99786788d", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -17,9 +17,8 @@ pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n    foo(TypeWithState(marker::PhantomData));\n-   //~^ ERROR unable to fully infer type(s) [E0282]\n-   //~| NOTE cannot infer type\n-   //~| NOTE type annotations or generic parameter binding\n+   //~^ ERROR type annotations needed [E0282]\n+   //~| NOTE cannot infer type for `State`\n }\n \n fn main() {"}, {"sha": "fdd89058fd3973498140ded97fe2f7b3d1c2d43c", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -10,8 +10,7 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR unable to fully infer type(s) [E0282]\n-                       //~| NOTE cannot infer type\n-                       //~| NOTE annotating the type for the variable `it` would help\n-                       //~| NOTE type annotations or generic parameter binding\n+    let it = v.iter(); //~ ERROR type annotations needed [E0282]\n+                       //~| NOTE cannot infer type for `T`\n+                       //~| NOTE consider giving `it` a type\n }"}, {"sha": "9acf5a52166e07d5f5368516d6bc12eda7739a40", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -32,7 +32,7 @@ impl foo for Vec<isize> {\n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n     let mut x = Vec::new();\n-    //~^ ERROR unable to fully infer type(s) [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     x.foo();\n }\n "}, {"sha": "2e115431c92c45698946c96b3ca2ec4610c3f897", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -34,9 +34,8 @@ where T : Convert<U>\n \n fn a() {\n     test(22, std::default::Default::default());\n-    //~^ ERROR unable to fully infer type(s) [E0282]\n-    //~| NOTE cannot infer type\n-    //~| NOTE type annotations or generic parameter binding\n+    //~^ ERROR type annotations needed [E0282]\n+    //~| NOTE cannot infer type for `U`\n }\n \n fn main() {}"}, {"sha": "52ca91e62f8df56337f2c4f46c18af4fe60fc30d", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -11,7 +11,6 @@\n // Issue #5062\n \n fn main() {\n-    None; //~ ERROR unable to fully infer type(s) [E0282]\n-          //~| NOTE cannot infer type\n-          //~| NOTE type annotations or generic parameter binding\n+    None; //~ ERROR type annotations needed [E0282]\n+          //~| NOTE cannot infer type for `T`\n }"}, {"sha": "6aaed789716a36d7847a4daf2a845c316b643625", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -13,7 +13,6 @@ struct S<'a, T:'a> {\n }\n \n fn main() {\n-    S { o: &None }; //~ ERROR unable to fully infer type(s) [E0282]\n-                    //~| NOTE cannot infer type\n-                    //~| NOTE type annotations or generic parameter binding\n+    S { o: &None }; //~ ERROR type annotations needed [E0282]\n+                    //~| NOTE cannot infer type for `T`\n }"}, {"sha": "de229ded463f68570f5ed0a71866e9dbec44548a", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -11,8 +11,7 @@\n \n fn main() {\n     let _foo = Vec::new();\n-    //~^ ERROR unable to fully infer type(s) [E0282]\n-    //~| NOTE cannot infer type\n-    //~| NOTE annotating the type for the variable `_foo` would help\n-    //~| NOTE type annotations or generic parameter binding\n+    //~^ ERROR type annotations needed [E0282]\n+    //~| NOTE cannot infer type for `T`\n+    //~| NOTE consider giving `_foo` a type\n }"}, {"sha": "c476657d207966cdf2d9242e86bda46643a5fba2", "filename": "src/test/ui/codemap_tests/issue-38812-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let (x,) = (vec![],);\n+}"}, {"sha": "156a6bdee99799a4b4af722c6f3bc95e0a5e7360", "filename": "src/test/ui/codemap_tests/issue-38812-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.stderr?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -0,0 +1,12 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-38812-2.rs:12:17\n+   |\n+12 |     let (x,) = (vec![],);\n+   |         ----    ^^^^^^ cannot infer type for `T`\n+   |         |\n+   |         consider giving a type to pattern\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to previous error\n+"}, {"sha": "a9943f753366da8d794a144eed344cb7b1597d06", "filename": "src/test/ui/codemap_tests/issue-38812.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //", "previous_filename": "src/test/ui/codemap_tests/repair_span_std_macros.rs"}, {"sha": "6365e761453f90167fb088a5f7cb52c233b3459b", "filename": "src/test/ui/codemap_tests/issue-38812.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.stderr?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -0,0 +1,12 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-38812.rs:12:13\n+   |\n+12 |     let x = vec![];\n+   |         -   ^^^^^^ cannot infer type for `T`\n+   |         |\n+   |         consider giving `x` a type\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to previous error\n+"}, {"sha": "13e4b246c55957982ad10497f3ea84d6669c2dac", "filename": "src/test/ui/codemap_tests/repair_span_std_macros.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7aff6add92c5f8deea29af2a5aa7335d4e5843a9/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7aff6add92c5f8deea29af2a5aa7335d4e5843a9/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr?ref=7aff6add92c5f8deea29af2a5aa7335d4e5843a9", "patch": "@@ -1,13 +0,0 @@\n-error[E0282]: unable to fully infer type(s)\n-  --> $DIR/repair_span_std_macros.rs:12:13\n-   |\n-12 |     let x = vec![];\n-   |         -   ^^^^^^ cannot infer type\n-   |         |\n-   |         annotating the type for the variable `x` would help\n-   |\n-   = note: type annotations or generic parameter binding required\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: aborting due to previous error\n-"}, {"sha": "79368587062e8b6fcecac948877846d5cb90a541", "filename": "src/test/ui/missing-items/missing-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.rs?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //"}, {"sha": "a16ae5538bf92d2038afae65670a6d6d909c7b1a", "filename": "src/test/ui/missing-items/missing-type-parameter.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fa28cb206604fddf67a29e7cbd3a8b22da1edc2/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr?ref=3fa28cb206604fddf67a29e7cbd3a8b22da1edc2", "patch": "@@ -1,10 +1,8 @@\n-error[E0282]: unable to fully infer type(s)\n+error[E0282]: type annotations needed\n   --> $DIR/missing-type-parameter.rs:14:5\n    |\n 14 |     foo();\n-   |     ^^^ cannot infer type\n-   |\n-   = note: type annotations or generic parameter binding required\n+   |     ^^^ cannot infer type for `X`\n \n error: aborting due to previous error\n "}]}