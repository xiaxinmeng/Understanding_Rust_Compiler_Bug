{"sha": "a299d0e632772718a7e0bae3f0964a7a3aa7c2e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOTlkMGU2MzI3NzI3MThhN2UwYmFlM2YwOTY0YTdhM2FhN2MyZTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-30T17:00:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-01T12:15:23Z"}, "message": "Don't panic on unevaluatable promoted constants", "tree": {"sha": "b276a7c3beca157dee3ef2feb917a58418c7b911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b276a7c3beca157dee3ef2feb917a58418c7b911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0", "html_url": "https://github.com/rust-lang/rust/commit/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e2ac83a0cbf6681750b1f136137116612799684", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2ac83a0cbf6681750b1f136137116612799684", "html_url": "https://github.com/rust-lang/rust/commit/6e2ac83a0cbf6681750b1f136137116612799684"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "08afe18ae5de4a076cbd70b74e0950210e71a13a", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a299d0e632772718a7e0bae3f0964a7a3aa7c2e0", "patch": "@@ -351,7 +351,8 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         ));\n         crate::constant::trans_const_value(\n             self,\n-            ty::Const::from_value(self.tcx, const_loc, self.tcx.caller_location_ty()),\n+            const_loc,\n+            self.tcx.caller_location_ty(),\n         )\n     }\n "}, {"sha": "8a22ddefbb27a721dce3aa9582ce70332ed1ef7e", "filename": "src/constant.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a299d0e632772718a7e0bae3f0964a7a3aa7c2e0", "patch": "@@ -72,7 +72,9 @@ pub(crate) fn trans_constant<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n-    let const_ = match constant.literal.val {\n+    let const_ = fx.monomorphize(&constant.literal);\n+    let const_val = match const_.val {\n+        ConstKind::Value(const_val) => const_val,\n         ConstKind::Unevaluated(def_id, ref substs, promoted) if fx.tcx.is_static(def_id) => {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n@@ -83,17 +85,33 @@ pub(crate) fn trans_constant<'tcx>(\n                 fx.layout_of(fx.monomorphize(&constant.literal.ty)),\n             ).to_cvalue(fx);\n         }\n-        _ => fx.monomorphize(&constant.literal).eval(fx.tcx, ParamEnv::reveal_all()),\n+        ConstKind::Unevaluated(def_id, ref substs, promoted) => {\n+            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def_id, substs, promoted, None) {\n+                Ok(const_val) => const_val,\n+                Err(_) => {\n+                    if promoted.is_none() {\n+                        fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n+                    }\n+                    return crate::trap::trap_unreachable_ret_value(\n+                        fx,\n+                        fx.layout_of(const_.ty),\n+                        \"erroneous constant encountered\",\n+                    );\n+                }\n+            }\n+        }\n+        ConstKind::Param(_) | ConstKind::Infer(_) | ConstKind::Bound(_, _)\n+        | ConstKind::Placeholder(_) | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n     };\n \n-    trans_const_value(fx, const_)\n+    trans_const_value(fx, const_val, const_.ty)\n }\n \n pub(crate) fn trans_const_value<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    const_: &'tcx Const<'tcx>,\n+    const_val: ConstValue<'tcx>,\n+    ty: Ty<'tcx>\n ) -> CValue<'tcx> {\n-    let ty = fx.monomorphize(&const_.ty);\n     let layout = fx.layout_of(ty);\n     assert!(!layout.is_unsized(), \"sized const value\");\n \n@@ -103,10 +121,6 @@ pub(crate) fn trans_const_value<'tcx>(\n             layout,\n         );\n     }\n-    let const_val = match const_.val {\n-        ConstKind::Value(const_val) => const_val,\n-        _ => unreachable!(\"Const {:?} should have been evaluated\", const_),\n-    };\n \n     match const_val {\n         ConstValue::Scalar(x) => {"}, {"sha": "a5aec52a7e442717fdafccfbdb23b55c04baddbf", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a299d0e632772718a7e0bae3f0964a7a3aa7c2e0/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=a299d0e632772718a7e0bae3f0964a7a3aa7c2e0", "patch": "@@ -822,7 +822,8 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n             let val = crate::constant::trans_const_value(\n                 fx,\n-                ty::Const::from_value(fx.tcx, const_val, ret.layout().ty),\n+                const_val,\n+                ret.layout().ty,\n             );\n             ret.write_cvalue(fx, val);\n         };"}]}