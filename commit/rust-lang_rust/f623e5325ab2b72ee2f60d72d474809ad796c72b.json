{"sha": "f623e5325ab2b72ee2f60d72d474809ad796c72b", "node_id": "C_kwDOAAsO6NoAKGY2MjNlNTMyNWFiMmI3MmVlMmY2MGQ3MmQ0NzQ4MDlhZDc5NmM3MmI", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-08-31T01:08:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T01:08:04Z"}, "message": "Merge pull request #214 from sadlerap/minmax\n\nsimd: implement simd_fmin/fmax", "tree": {"sha": "18e45c3e51d6a694357a85555ff4492e044302fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e45c3e51d6a694357a85555ff4492e044302fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f623e5325ab2b72ee2f60d72d474809ad796c72b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDrR0CRBK7hj4Ov3rIwAAHRcIAHJ23uimVYklN8eqoHZfiAmC\nfEHRzcN9hVm8lVrJ9SKwI8SNG6XlWKddnTRkLSgW3CVplTcgQf/IYPQWpVKRTUtL\nrAWS/i07GBdupCltcwWIPXTkQzrdoWc2WVruDQUWkfi64KFm6oNqFMnHuEJE45rx\n53CniNTuuEChj4NTr3q5E4kJ/sxahMmW6xbaEYSWRGi76rfkVYCa7kHrfoBZAo5l\nu3v0Z6bxFZ/Q1WojEshwfUMWG+6lR+wp3iiz8Rv507YpZTYHHMnQrNkfhqW8L3LT\nto2vt/qPJAyJQ+yhO9/bqFXgoFiVUXjMMT9QfmppFlL5dY3Ea9mrsCxklFUBmWw=\n=X1KH\n-----END PGP SIGNATURE-----\n", "payload": "tree 18e45c3e51d6a694357a85555ff4492e044302fc\nparent 2342414f497ea6d76f91d109c28259aad5ec014c\nparent 1d3ca135d055dbda6c255227084296f3552b99a9\nauthor antoyo <antoyo@users.noreply.github.com> 1661908084 -0400\ncommitter GitHub <noreply@github.com> 1661908084 -0400\n\nMerge pull request #214 from sadlerap/minmax\n\nsimd: implement simd_fmin/fmax"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f623e5325ab2b72ee2f60d72d474809ad796c72b", "html_url": "https://github.com/rust-lang/rust/commit/f623e5325ab2b72ee2f60d72d474809ad796c72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f623e5325ab2b72ee2f60d72d474809ad796c72b/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2342414f497ea6d76f91d109c28259aad5ec014c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2342414f497ea6d76f91d109c28259aad5ec014c", "html_url": "https://github.com/rust-lang/rust/commit/2342414f497ea6d76f91d109c28259aad5ec014c"}, {"sha": "1d3ca135d055dbda6c255227084296f3552b99a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3ca135d055dbda6c255227084296f3552b99a9", "html_url": "https://github.com/rust-lang/rust/commit/1d3ca135d055dbda6c255227084296f3552b99a9"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "fc6dcfc7bc7b4540d8b1bdd0d23b61fedb811228", "filename": "failing-ui-tests.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f623e5325ab2b72ee2f60d72d474809ad796c72b/failing-ui-tests.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f623e5325ab2b72ee2f60d72d474809ad796c72b/failing-ui-tests.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests.txt?ref=f623e5325ab2b72ee2f60d72d474809ad796c72b", "patch": "@@ -32,7 +32,6 @@ src/test/ui/sepcomp/sepcomp-fns.rs\n src/test/ui/sepcomp/sepcomp-statics.rs\n src/test/ui/simd/generics.rs\n src/test/ui/simd/intrinsic/float-math-pass.rs\n-src/test/ui/simd/intrinsic/float-minmax-pass.rs\n src/test/ui/simd/intrinsic/generic-arithmetic-pass.rs\n src/test/ui/simd/intrinsic/generic-as.rs\n src/test/ui/simd/intrinsic/generic-bitmask-pass.rs"}, {"sha": "e7952f524124b6e0072843589c7ff21c8e47d1d9", "filename": "failing-ui-tests12.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f623e5325ab2b72ee2f60d72d474809ad796c72b/failing-ui-tests12.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f623e5325ab2b72ee2f60d72d474809ad796c72b/failing-ui-tests12.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests12.txt?ref=f623e5325ab2b72ee2f60d72d474809ad796c72b", "patch": "@@ -8,6 +8,7 @@ src/test/ui/packed/packed-struct-size.rs\n src/test/ui/packed/packed-struct-vec.rs\n src/test/ui/packed/packed-tuple-struct-layout.rs\n src/test/ui/simd/array-type.rs\n+src/test/ui/simd/intrinsic/float-minmax-pass.rs\n src/test/ui/simd/intrinsic/generic-arithmetic-saturating-pass.rs\n src/test/ui/simd/intrinsic/generic-cast-pass.rs\n src/test/ui/simd/intrinsic/generic-cast-pointer-width.rs"}, {"sha": "52a4854aca3aa03f5cb97135b7b130ded7e85194", "filename": "src/builder.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f623e5325ab2b72ee2f60d72d474809ad796c72b/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f623e5325ab2b72ee2f60d72d474809ad796c72b/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=f623e5325ab2b72ee2f60d72d474809ad796c72b", "patch": "@@ -1505,6 +1505,34 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         })\n     }\n \n+    fn vector_extremum(&mut self, a: RValue<'gcc>, b: RValue<'gcc>, direction: ExtremumOperation) -> RValue<'gcc> {\n+        let vector_type = a.get_type();\n+\n+        // mask out the NaNs in b and replace them with the corresponding lane in a, so when a and\n+        // b get compared & spliced together, we get the numeric values instead of NaNs.\n+        let b_nan_mask = self.context.new_comparison(None, ComparisonOp::NotEquals, b, b);\n+        let mask_type = b_nan_mask.get_type();\n+        let b_nan_mask_inverted = self.context.new_unary_op(None, UnaryOp::BitwiseNegate, mask_type, b_nan_mask);\n+        let a_cast = self.context.new_bitcast(None, a, mask_type);\n+        let b_cast = self.context.new_bitcast(None, b, mask_type);\n+        let res = (b_nan_mask & a_cast) | (b_nan_mask_inverted & b_cast);\n+        let b = self.context.new_bitcast(None, res, vector_type);\n+\n+        // now do the actual comparison\n+        let comparison_op = match direction {\n+            ExtremumOperation::Min => ComparisonOp::LessThan,\n+            ExtremumOperation::Max => ComparisonOp::GreaterThan,\n+        };\n+        let cmp = self.context.new_comparison(None, comparison_op, a, b);\n+        let cmp_inverted = self.context.new_unary_op(None, UnaryOp::BitwiseNegate, cmp.get_type(), cmp);\n+        let res = (cmp & a_cast) | (cmp_inverted & res);\n+        self.context.new_bitcast(None, res, vector_type)\n+    }\n+\n+    pub fn vector_fmin(&mut self, a: RValue<'gcc>, b: RValue<'gcc>) -> RValue<'gcc> {\n+        self.vector_extremum(a, b, ExtremumOperation::Min)\n+    }\n+\n     #[cfg(feature=\"master\")]\n     pub fn vector_reduce_fmin(&mut self, src: RValue<'gcc>) -> RValue<'gcc> {\n         let vector_type = src.get_type().unqualified().dyncast_vector().expect(\"vector type\");\n@@ -1525,6 +1553,10 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         unimplemented!();\n     }\n \n+    pub fn vector_fmax(&mut self, a: RValue<'gcc>, b: RValue<'gcc>) -> RValue<'gcc> {\n+        self.vector_extremum(a, b, ExtremumOperation::Max)\n+    }\n+\n     #[cfg(feature=\"master\")]\n     pub fn vector_reduce_fmax(&mut self, src: RValue<'gcc>) -> RValue<'gcc> {\n         let vector_type = src.get_type().unqualified().dyncast_vector().expect(\"vector type\");"}, {"sha": "36b5ab12b172f03dbfb0c88dc610321d0121dcb8", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f623e5325ab2b72ee2f60d72d474809ad796c72b/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f623e5325ab2b72ee2f60d72d474809ad796c72b/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=f623e5325ab2b72ee2f60d72d474809ad796c72b", "patch": "@@ -492,6 +492,8 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         simd_and: Uint, Int => and;\n         simd_or: Uint, Int => or; // FIXME(antoyo): calling `or` might not work on vectors.\n         simd_xor: Uint, Int => xor;\n+        simd_fmin: Float => vector_fmin;\n+        simd_fmax: Float => vector_fmax;\n     }\n \n     macro_rules! arith_unary {"}]}