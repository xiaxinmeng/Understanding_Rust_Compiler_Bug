{"sha": "953302f85f93306bd156dffaedf2642694eb65ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MzMwMmY4NWY5MzMwNmJkMTU2ZGZmYWVkZjI2NDI2OTRlYjY1YmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-06T21:32:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-06T21:53:26Z"}, "message": "rollup merge of #18707 : japaric/moar-dst", "tree": {"sha": "3de6998f7e4ed2852af55566ddee81f9c1b031b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3de6998f7e4ed2852af55566ddee81f9c1b031b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/953302f85f93306bd156dffaedf2642694eb65ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/953302f85f93306bd156dffaedf2642694eb65ba", "html_url": "https://github.com/rust-lang/rust/commit/953302f85f93306bd156dffaedf2642694eb65ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/953302f85f93306bd156dffaedf2642694eb65ba/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a3f0bb657843fad1c65295f5178561692cc7ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3f0bb657843fad1c65295f5178561692cc7ed6", "html_url": "https://github.com/rust-lang/rust/commit/2a3f0bb657843fad1c65295f5178561692cc7ed6"}, {"sha": "5272e6c4c6ed57cd0faafea2925995d9b3023105", "url": "https://api.github.com/repos/rust-lang/rust/commits/5272e6c4c6ed57cd0faafea2925995d9b3023105", "html_url": "https://github.com/rust-lang/rust/commit/5272e6c4c6ed57cd0faafea2925995d9b3023105"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "0a06f7c0005fdd242686dab2b06c970690dd5113", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953302f85f93306bd156dffaedf2642694eb65ba/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953302f85f93306bd156dffaedf2642694eb65ba/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=953302f85f93306bd156dffaedf2642694eb65ba", "patch": "@@ -48,6 +48,10 @@ impl<T: Default> Default for Box<T> {\n     fn default() -> Box<T> { box Default::default() }\n }\n \n+impl<T> Default for Box<[T]> {\n+    fn default() -> Box<[T]> { box [] }\n+}\n+\n #[unstable]\n impl<T: Clone> Clone for Box<T> {\n     /// Returns a copy of the owned box."}, {"sha": "f287fb99750aa6a09b2ac44a054c1ac5eb2be5b9", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/953302f85f93306bd156dffaedf2642694eb65ba/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953302f85f93306bd156dffaedf2642694eb65ba/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=953302f85f93306bd156dffaedf2642694eb65ba", "patch": "@@ -54,13 +54,13 @@ static URLSAFE_CHARS: &'static[u8] = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n                                        0123456789-_\";\n \n /// A trait for converting a value to base64 encoding.\n-pub trait ToBase64 {\n+pub trait ToBase64 for Sized? {\n     /// Converts the value of `self` to a base64 value following the specified\n     /// format configuration, returning the owned string.\n     fn to_base64(&self, config: Config) -> String;\n }\n \n-impl<'a> ToBase64 for &'a [u8] {\n+impl ToBase64 for [u8] {\n     /**\n      * Turn a vector of `u8` bytes into a base64 string.\n      *\n@@ -155,7 +155,7 @@ impl<'a> ToBase64 for &'a [u8] {\n }\n \n /// A trait for converting from base64 encoded values.\n-pub trait FromBase64 {\n+pub trait FromBase64 for Sized? {\n     /// Converts the value of `self`, interpreted as base64 encoded data, into\n     /// an owned vector of bytes, returning the vector.\n     fn from_base64(&self) -> Result<Vec<u8>, FromBase64Error>;\n@@ -192,7 +192,7 @@ impl error::Error for FromBase64Error {\n     }\n }\n \n-impl<'a> FromBase64 for &'a str {\n+impl FromBase64 for str {\n     /**\n      * Convert any base64 encoded string (literal, `@`, `&`, or `~`)\n      * to the byte values it encodes.\n@@ -227,7 +227,7 @@ impl<'a> FromBase64 for &'a str {\n     }\n }\n \n-impl<'a> FromBase64 for &'a [u8] {\n+impl FromBase64 for [u8] {\n     fn from_base64(&self) -> Result<Vec<u8>, FromBase64Error> {\n         let mut r = Vec::new();\n         let mut buf: u32 = 0;"}, {"sha": "e045f94c08e67b87840609ec7d351a662ab381a7", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/953302f85f93306bd156dffaedf2642694eb65ba/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953302f85f93306bd156dffaedf2642694eb65ba/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=953302f85f93306bd156dffaedf2642694eb65ba", "patch": "@@ -16,15 +16,15 @@ use std::string;\n use std::error;\n \n /// A trait for converting a value to hexadecimal encoding\n-pub trait ToHex {\n+pub trait ToHex for Sized? {\n     /// Converts the value of `self` to a hex value, returning the owned\n     /// string.\n     fn to_hex(&self) -> String;\n }\n \n static CHARS: &'static[u8] = b\"0123456789abcdef\";\n \n-impl<'a> ToHex for &'a [u8] {\n+impl ToHex for [u8] {\n     /**\n      * Turn a vector of `u8` bytes into a hexadecimal string.\n      *\n@@ -54,7 +54,7 @@ impl<'a> ToHex for &'a [u8] {\n }\n \n /// A trait for converting hexadecimal encoded values\n-pub trait FromHex {\n+pub trait FromHex for Sized? {\n     /// Converts the value of `self`, interpreted as hexadecimal encoded data,\n     /// into an owned vector of bytes, returning the vector.\n     fn from_hex(&self) -> Result<Vec<u8>, FromHexError>;\n@@ -92,7 +92,7 @@ impl error::Error for FromHexError {\n }\n \n \n-impl<'a> FromHex for &'a str {\n+impl FromHex for str {\n     /**\n      * Convert any hexadecimal encoded string (literal, `@`, `&`, or `~`)\n      * to the byte values it encodes."}, {"sha": "7731351758558c01d2914ddacd6367ac41ae22ea", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953302f85f93306bd156dffaedf2642694eb65ba/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953302f85f93306bd156dffaedf2642694eb65ba/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=953302f85f93306bd156dffaedf2642694eb65ba", "patch": "@@ -2303,7 +2303,7 @@ impl ::Decoder<DecoderError> for Decoder {\n }\n \n /// A trait for converting values to JSON\n-pub trait ToJson {\n+pub trait ToJson for Sized? {\n     /// Converts the value of `self` to an instance of JSON\n     fn to_json(&self) -> Json;\n }\n@@ -2389,7 +2389,7 @@ tuple_impl!{A, B, C, D, E, F, G, H, I, J}\n tuple_impl!{A, B, C, D, E, F, G, H, I, J, K}\n tuple_impl!{A, B, C, D, E, F, G, H, I, J, K, L}\n \n-impl<'a, A: ToJson> ToJson for &'a [A] {\n+impl<A: ToJson> ToJson for [A] {\n     fn to_json(&self) -> Json { List(self.iter().map(|elt| elt.to_json()).collect()) }\n }\n "}, {"sha": "7539a6dc3486b285ea54f31313f8c971c31ef342", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/953302f85f93306bd156dffaedf2642694eb65ba/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953302f85f93306bd156dffaedf2642694eb65ba/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=953302f85f93306bd156dffaedf2642694eb65ba", "patch": "@@ -169,7 +169,7 @@ pub trait Decoder<E> {\n     fn error(&mut self, err: &str) -> E;\n }\n \n-pub trait Encodable<S:Encoder<E>, E> {\n+pub trait Encodable<S:Encoder<E>, E> for Sized? {\n     fn encode(&self, s: &mut S) -> Result<(), E>;\n }\n \n@@ -297,9 +297,9 @@ impl<E, D:Decoder<E>> Decodable<D, E> for i64 {\n     }\n }\n \n-impl<'a, E, S:Encoder<E>> Encodable<S, E> for &'a str {\n+impl<E, S:Encoder<E>> Encodable<S, E> for str {\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n-        s.emit_str(*self)\n+        s.emit_str(self)\n     }\n }\n \n@@ -375,24 +375,31 @@ impl<E, D:Decoder<E>> Decodable<D, E> for () {\n     }\n }\n \n-impl<'a, E, S:Encoder<E>,T:Encodable<S, E>> Encodable<S, E> for &'a T {\n+impl<'a, E, S: Encoder<E>, Sized? T: Encodable<S, E>> Encodable<S, E> for &'a T {\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n         (**self).encode(s)\n     }\n }\n \n-impl<E, S:Encoder<E>,T:Encodable<S, E>> Encodable<S, E> for Box<T> {\n+impl<E, S: Encoder<E>, Sized? T: Encodable<S, E>> Encodable<S, E> for Box<T> {\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n         (**self).encode(s)\n     }\n }\n \n-impl<E, D:Decoder<E>,T:Decodable<D, E>> Decodable<D, E> for Box<T> {\n+impl<E, D:Decoder<E>, T: Decodable<D, E>> Decodable<D, E> for Box<T> {\n     fn decode(d: &mut D) -> Result<Box<T>, E> {\n         Ok(box try!(Decodable::decode(d)))\n     }\n }\n \n+impl<E, D:Decoder<E>, T: Decodable<D, E>> Decodable<D, E> for Box<[T]> {\n+    fn decode(d: &mut D) -> Result<Box<[T]>, E> {\n+        let v: Vec<T> = try!(Decodable::decode(d));\n+        Ok(v.into_boxed_slice())\n+    }\n+}\n+\n impl<E, S:Encoder<E>,T:Encodable<S, E>> Encodable<S, E> for Rc<T> {\n     #[inline]\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n@@ -407,7 +414,7 @@ impl<E, D:Decoder<E>,T:Decodable<D, E>> Decodable<D, E> for Rc<T> {\n     }\n }\n \n-impl<'a, E, S:Encoder<E>,T:Encodable<S, E>> Encodable<S, E> for &'a [T] {\n+impl<E, S:Encoder<E>,T:Encodable<S, E>> Encodable<S, E> for [T] {\n     fn encode(&self, s: &mut S) -> Result<(), E> {\n         s.emit_seq(self.len(), |s| {\n             for (i, e) in self.iter().enumerate() {"}, {"sha": "aeef55fbbacd86f4f8b51bd8eb425e0db517df4f", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/953302f85f93306bd156dffaedf2642694eb65ba/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953302f85f93306bd156dffaedf2642694eb65ba/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=953302f85f93306bd156dffaedf2642694eb65ba", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::default::Default;\n+\n+#[deriving(Default)]\n+struct A {\n+    foo: Box<[bool]>,\n+}\n+\n+pub fn main() {\n+    let a: A = Default::default();\n+    let b: Box<[_]> = box [];\n+    assert_eq!(a.foo, b);\n+}"}, {"sha": "e21f64cd74c80bc1bd04b00b4226098f5585ad64", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/953302f85f93306bd156dffaedf2642694eb65ba/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953302f85f93306bd156dffaedf2642694eb65ba/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=953302f85f93306bd156dffaedf2642694eb65ba", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate serialize;\n+\n+use serialize::{Encodable, Decodable};\n+use serialize::json;\n+\n+#[deriving(Encodable, Decodable)]\n+struct A {\n+    foo: Box<[bool]>,\n+}\n+\n+fn main() {\n+    let obj = A { foo: box [true, false] };\n+    let s = json::encode(&obj);\n+    let obj2: A = json::decode(s.as_slice()).unwrap();\n+    assert!(obj.foo == obj2.foo);\n+}"}]}