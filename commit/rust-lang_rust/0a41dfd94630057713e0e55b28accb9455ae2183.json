{"sha": "0a41dfd94630057713e0e55b28accb9455ae2183", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNDFkZmQ5NDYzMDA1NzcxM2UwZTU1YjI4YWNjYjk0NTVhZTIxODM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-01T05:06:47Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-01T05:06:47Z"}, "message": "Use slice patterns instead of padding", "tree": {"sha": "f615b650e1bc84b37e5b62112adcbeb0dbaf1428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f615b650e1bc84b37e5b62112adcbeb0dbaf1428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a41dfd94630057713e0e55b28accb9455ae2183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a41dfd94630057713e0e55b28accb9455ae2183", "html_url": "https://github.com/rust-lang/rust/commit/0a41dfd94630057713e0e55b28accb9455ae2183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a41dfd94630057713e0e55b28accb9455ae2183/comments", "author": null, "committer": null, "parents": [{"sha": "4e054ad32007142b7e9a501a5f5c29013ea5d1c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e054ad32007142b7e9a501a5f5c29013ea5d1c8", "html_url": "https://github.com/rust-lang/rust/commit/4e054ad32007142b7e9a501a5f5c29013ea5d1c8"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "abf97def50f9dcfd8b7b9ea981b30567a180a81c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a41dfd94630057713e0e55b28accb9455ae2183/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a41dfd94630057713e0e55b28accb9455ae2183/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0a41dfd94630057713e0e55b28accb9455ae2183", "patch": "@@ -786,16 +786,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n         let (method_names, arg_lists) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n-        let mut method_names = method_names.iter().map(|s| s.as_ref()).chain(iter::repeat(\"\"));\n+        let method_names: Vec<&str> = method_names.iter().map(|s| s.as_ref()).collect();\n \n-        match [method_names.next().unwrap(), method_names.next().unwrap()] {\n+        match method_names.as_slice() {\n             [\"unwrap\", \"get\"] => lint_get_unwrap(cx, expr, arg_lists[1], false),\n             [\"unwrap\", \"get_mut\"] => lint_get_unwrap(cx, expr, arg_lists[1], true),\n-            [\"unwrap\", _] => lint_unwrap(cx, expr, arg_lists[0]),\n+            [\"unwrap\", ..] => lint_unwrap(cx, expr, arg_lists[0]),\n             [\"expect\", \"ok\"] => lint_ok_expect(cx, expr, arg_lists[1]),\n             [\"unwrap_or\", \"map\"] => lint_map_unwrap_or(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"unwrap_or_else\", \"map\"] => lint_map_unwrap_or_else(cx, expr, arg_lists[1], arg_lists[0]),\n-            [\"map_or\", _] => lint_map_or_none(cx, expr, arg_lists[0]),\n+            [\"map_or\", ..] => lint_map_or_none(cx, expr, arg_lists[0]),\n             [\"next\", \"filter\"] => lint_filter_next(cx, expr, arg_lists[1]),\n             [\"map\", \"filter\"] => lint_filter_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n@@ -805,16 +805,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             [\"is_some\", \"find\"] => lint_search_is_some(cx, expr, \"find\", arg_lists[1], arg_lists[0]),\n             [\"is_some\", \"position\"] => lint_search_is_some(cx, expr, \"position\", arg_lists[1], arg_lists[0]),\n             [\"is_some\", \"rposition\"] => lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0]),\n-            [\"extend\", _] => lint_extend(cx, expr, arg_lists[0]),\n+            [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n             [\"as_ptr\", \"unwrap\"] => lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0]),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, arg_lists[1], false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, arg_lists[1], true),\n             [\"next\", \"skip\"] => lint_iter_skip_next(cx, expr),\n             [\"collect\", \"cloned\"] => lint_iter_cloned_collect(cx, expr, arg_lists[1]),\n-            [\"as_ref\", _] => lint_asref(cx, expr, \"as_ref\", arg_lists[0]),\n-            [\"as_mut\", _] => lint_asref(cx, expr, \"as_mut\", arg_lists[0]),\n-            [\"fold\", _] => lint_unnecessary_fold(cx, expr, arg_lists[0]),\n-            [\"filter_map\", _] => unnecessary_filter_map::lint(cx, expr, arg_lists[0]),\n+            [\"as_ref\", ..] => lint_asref(cx, expr, \"as_ref\", arg_lists[0]),\n+            [\"as_mut\", ..] => lint_asref(cx, expr, \"as_mut\", arg_lists[0]),\n+            [\"fold\", ..] => lint_unnecessary_fold(cx, expr, arg_lists[0]),\n+            [\"filter_map\", ..] => unnecessary_filter_map::lint(cx, expr, arg_lists[0]),\n             _ => {}\n         }\n "}]}