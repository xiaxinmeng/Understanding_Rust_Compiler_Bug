{"sha": "43e52ac9e2b26ec287b1778823bad10851cfd44e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZTUyYWM5ZTJiMjZlYzI4N2IxNzc4ODIzYmFkMTA4NTFjZmQ0NGU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T12:06:12Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-10T09:56:58Z"}, "message": "Implement BatchDatabase construction", "tree": {"sha": "9e32634c498e0b8ae6d5132b8b0d3e8c17d37788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e32634c498e0b8ae6d5132b8b0d3e8c17d37788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43e52ac9e2b26ec287b1778823bad10851cfd44e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43e52ac9e2b26ec287b1778823bad10851cfd44e", "html_url": "https://github.com/rust-lang/rust/commit/43e52ac9e2b26ec287b1778823bad10851cfd44e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43e52ac9e2b26ec287b1778823bad10851cfd44e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15224dfcd5fc5338844aec5993abf98f7f283e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/15224dfcd5fc5338844aec5993abf98f7f283e1e", "html_url": "https://github.com/rust-lang/rust/commit/15224dfcd5fc5338844aec5993abf98f7f283e1e"}], "stats": {"total": 138, "additions": 116, "deletions": 22}, "files": [{"sha": "74a77ddc92ccc860c78f408a7fc6828f18ffca25", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43e52ac9e2b26ec287b1778823bad10851cfd44e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/43e52ac9e2b26ec287b1778823bad10851cfd44e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=43e52ac9e2b26ec287b1778823bad10851cfd44e", "patch": "@@ -913,20 +913,15 @@ dependencies = [\n name = \"ra_batch\"\n version = \"0.1.0\"\n dependencies = [\n- \"fst 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"insta 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_db 0.1.0\",\n  \"ra_hir 0.1.0\",\n+ \"ra_project_model 0.1.0\",\n  \"ra_syntax 0.1.0\",\n- \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n- \"unicase 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "30a0749c7e62def0958e88a0f09eb2164b3fb34d", "filename": "crates/ra_batch/Cargo.toml", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43e52ac9e2b26ec287b1778823bad10851cfd44e/crates%2Fra_batch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/43e52ac9e2b26ec287b1778823bad10851cfd44e/crates%2Fra_batch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2FCargo.toml?ref=43e52ac9e2b26ec287b1778823bad10851cfd44e", "patch": "@@ -5,20 +5,16 @@ version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n-itertools = \"0.8.0\"\n-join_to_string = \"0.1.3\"\n log = \"0.4.5\"\n-relative-path = \"0.4.0\"\n-rayon = \"1.0.2\"\n-fst = \"0.3.1\"\n rustc-hash = \"1.0\"\n-parking_lot = \"0.7.0\"\n-unicase = \"2.2.0\"\n+\n+failure = \"0.1.4\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_db = { path = \"../ra_db\" }\n ra_hir = { path = \"../ra_hir\" }\n+ra_vfs = { path = \"../ra_vfs\" }\n+ra_project_model = { path = \"../ra_project_model\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n-insta = \"0.6.1\""}, {"sha": "ea91d88b7f7ebc24b7736e8e3b11c5817649d277", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 96, "deletions": 3, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/43e52ac9e2b26ec287b1778823bad10851cfd44e/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e52ac9e2b26ec287b1778823bad10851cfd44e/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=43e52ac9e2b26ec287b1778823bad10851cfd44e", "patch": "@@ -1,20 +1,28 @@\n use std::sync::Arc;\n+use std::path::Path;\n+use std::collections::HashSet;\n+\n+use rustc_hash::FxHashMap;\n \n use ra_db::{\n-    FilePosition, FileId, CrateGraph, SourceRoot, SourceRootId, SourceDatabase, salsa,\n+    CrateGraph, FileId, SourceRoot, SourceRootId, SourceDatabase, salsa,\n };\n use ra_hir::{db, HirInterner};\n+use ra_project_model::ProjectWorkspace;\n+use ra_vfs::{Vfs, VfsChange};\n+\n+type Result<T> = std::result::Result<T, failure::Error>;\n \n #[salsa::database(\n     ra_db::SourceDatabaseStorage,\n     db::HirDatabaseStorage,\n     db::PersistentHirDatabaseStorage\n )]\n #[derive(Debug)]\n-pub(crate) struct BatchDatabase {\n+pub struct BatchDatabase {\n     runtime: salsa::Runtime<BatchDatabase>,\n     interner: Arc<HirInterner>,\n-    file_counter: u32,\n+    // file_counter: u32,\n }\n \n impl salsa::Database for BatchDatabase {\n@@ -28,3 +36,88 @@ impl AsRef<HirInterner> for BatchDatabase {\n         &self.interner\n     }\n }\n+\n+fn vfs_file_to_id(f: ra_vfs::VfsFile) -> FileId {\n+    FileId(f.0.into())\n+}\n+fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n+    SourceRootId(r.0.into())\n+}\n+\n+impl BatchDatabase {\n+    pub fn load(crate_graph: CrateGraph, vfs: &mut Vfs) -> BatchDatabase {\n+        let mut db =\n+            BatchDatabase { runtime: salsa::Runtime::default(), interner: Default::default() };\n+        db.set_crate_graph(Arc::new(crate_graph));\n+\n+        // wait until Vfs has loaded all roots\n+        let receiver = vfs.task_receiver().clone();\n+        let mut roots_loaded = HashSet::new();\n+        for task in receiver {\n+            vfs.handle_task(task);\n+            let mut done = false;\n+            for change in vfs.commit_changes() {\n+                match change {\n+                    VfsChange::AddRoot { root, files } => {\n+                        let source_root_id = vfs_root_to_id(root);\n+                        log::debug!(\"loaded source root {:?} with path {:?}\", source_root_id, vfs.root2path(root));\n+                        let mut file_map = FxHashMap::default();\n+                        for (vfs_file, path, text) in files {\n+                            let file_id = vfs_file_to_id(vfs_file);\n+                            db.set_file_text(file_id, text);\n+                            db.set_file_relative_path(file_id, path.clone());\n+                            db.set_file_source_root(file_id, source_root_id);\n+                            file_map.insert(path, file_id);\n+                        }\n+                        let source_root = SourceRoot { files: file_map };\n+                        db.set_source_root(source_root_id, Arc::new(source_root));\n+                        roots_loaded.insert(source_root_id);\n+                        if roots_loaded.len() == vfs.num_roots() {\n+                            done = true;\n+                        }\n+                    }\n+                    VfsChange::AddFile { .. }\n+                    | VfsChange::RemoveFile { .. }\n+                    | VfsChange::ChangeFile { .. } => {\n+                        // log::warn!(\"VFS changed while loading\");\n+                    }\n+                }\n+            }\n+            if done {\n+                break;\n+            }\n+        }\n+\n+        db\n+    }\n+\n+    pub fn load_cargo(root: impl AsRef<Path>) -> Result<(BatchDatabase, Vec<SourceRootId>)> {\n+        let root = root.as_ref().canonicalize()?;\n+        let ws = ProjectWorkspace::discover(root.as_ref())?;\n+        let mut roots = Vec::new();\n+        roots.push(root.clone());\n+        for pkg in ws.cargo.packages() {\n+            roots.push(pkg.root(&ws.cargo).to_path_buf());\n+        }\n+        for krate in ws.sysroot.crates() {\n+            roots.push(krate.root_dir(&ws.sysroot).to_path_buf())\n+        }\n+        let (mut vfs, roots) = Vfs::new(roots);\n+        let mut load = |path: &Path| {\n+            let vfs_file = vfs.load(path);\n+            log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n+            vfs_file.map(vfs_file_to_id)\n+        };\n+        let crate_graph = ws.to_crate_graph(&mut load);\n+        log::debug!(\"crate graph: {:?}\", crate_graph);\n+\n+        let local_roots = roots.into_iter()\n+            .filter(|r| vfs.root2path(*r).starts_with(&root))\n+            .map(vfs_root_to_id)\n+            .collect();\n+\n+        let db = BatchDatabase::load(crate_graph, &mut vfs);\n+        let _ = vfs.shutdown();\n+        Ok((db, local_roots))\n+    }\n+}"}, {"sha": "4a68c019ff4e6d87cb31e4a2ab1d248395cec152", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43e52ac9e2b26ec287b1778823bad10851cfd44e/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e52ac9e2b26ec287b1778823bad10851cfd44e/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=43e52ac9e2b26ec287b1778823bad10851cfd44e", "patch": "@@ -47,10 +47,8 @@ impl ServerWorldState {\n                 roots.push(krate.root_dir(&ws.sysroot).to_path_buf())\n             }\n         }\n-        roots.sort();\n-        roots.dedup();\n-        let roots_to_scan = roots.len();\n         let (mut vfs, roots) = Vfs::new(roots);\n+        let roots_to_scan = roots.len();\n         for r in roots {\n             let is_local = vfs.root2path(r).starts_with(&root);\n             change.add_root(SourceRootId(r.0.into()), is_local);"}, {"sha": "2d861f832c5eefc34b923a432aad30a49a1caeb9", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43e52ac9e2b26ec287b1778823bad10851cfd44e/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e52ac9e2b26ec287b1778823bad10851cfd44e/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=43e52ac9e2b26ec287b1778823bad10851cfd44e", "patch": "@@ -94,6 +94,7 @@ impl Roots {\n         let mut roots = Arena::default();\n         // A hack to make nesting work.\n         paths.sort_by_key(|it| Reverse(it.as_os_str().len()));\n+        paths.dedup();\n         for (i, path) in paths.iter().enumerate() {\n             let nested_roots = paths[..i]\n                 .iter()\n@@ -161,6 +162,13 @@ impl Vfs {\n         self.roots[root].root.clone()\n     }\n \n+    pub fn path2root(&self, path: &Path) -> Option<VfsRoot> {\n+        match self.find_root(path) {\n+            Some((root, _path, _file)) => Some(root),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn path2file(&self, path: &Path) -> Option<VfsFile> {\n         if let Some((_root, _path, Some(file))) = self.find_root(path) {\n             return Some(file);\n@@ -181,6 +189,10 @@ impl Vfs {\n         None\n     }\n \n+    pub fn num_roots(&self) -> usize {\n+        self.roots.len()\n+    }\n+\n     pub fn load(&mut self, path: &Path) -> Option<VfsFile> {\n         if let Some((root, rel_path, file)) = self.find_root(path) {\n             return if let Some(file) = file {"}]}