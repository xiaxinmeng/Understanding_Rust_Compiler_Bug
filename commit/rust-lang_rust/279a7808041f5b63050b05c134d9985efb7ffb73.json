{"sha": "279a7808041f5b63050b05c134d9985efb7ffb73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OWE3ODA4MDQxZjViNjMwNTBiMDVjMTM0ZDk5ODVlZmI3ZmZiNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-28T20:51:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-28T20:51:33Z"}, "message": "auto merge of #15983 : brson/rust/fail, r=alexcrichton\n\nA few refactorings to decrease text size and increase data size. I'm not sure about this tradeoff. Various stats below. cc @pcwalton\r\n\r\nThis reduces the code needed to pass arguments for `fail!()`, `fail!(\"{}\", ...)`, and to a lesser extent `fail!(\"...\")`. Still more work to be done on compiler-generated failures and the `fail!(\"...\")` case.\r\n\r\ndo_fail_empty:\r\n\r\n```\r\n#[inline(never)]\r\nfn do_fail_empty() {\r\n    fail!()\r\n}\r\n```\r\n\r\ndo_fail_empty before:\r\n\r\n```\r\n\tleaq\t8(%rsp), %rdi\r\n\tmovabsq\t$13, %rsi\r\n\tleaq\t\"str\\\"str\\\"(1494)\"(%rip), %rax\r\n\tmovq\t%rax, 8(%rsp)\r\n\tmovq\t$19, 16(%rsp)\r\n\tcallq\t_ZN6unwind31begin_unwind_no_time_to_explain20h57030457935ab6111SdE@PLT\r\n```\r\n\r\ndo_fail_empty after:\r\n\r\n```\r\n\tleaq\t_ZN13do_fail_empty9file_line20h339df6a0541e837eIaaE(%rip), %rdi\r\n\tcallq\t_ZN6unwind31begin_unwind_no_time_to_explain20h33184cfdcce4dfd8QTdE@PLT\r\n```\r\n\r\ndo_fail_fmt:\r\n\r\n```\r\n#[inline(never)]\r\nfn do_fail_fmt() {\r\n    fail!(\"guh{}\", \"faw\")\r\n}\r\n```\r\n\r\ndo_fail_fmt before:\r\n\r\n```\r\n        ... (snip lots of fmt stuff)\r\n\tcallq\t_ZN3fmt22Arguments$LT$$x27a$GT$3new20he09b3a3f473879c41paE\r\n\tleaq\t144(%rsp), %rsi\r\n\tmovabsq\t$23, %rdx\r\n\tleaq\t\"str\\\"str\\\"(1494)\"(%rip), %rax\r\n\tleaq\t32(%rsp), %rcx\r\n\tmovq\t%rcx, 160(%rsp)\r\n\tmovq\t160(%rsp), %rdi\r\n\tmovq\t%rax, 144(%rsp)\r\n\tmovq\t$19, 152(%rsp)\r\n\tcallq\t_ZN6unwind16begin_unwind_fmt20h3ebeb42f4d189b2buQdE@PLT\r\n```\r\n\r\ndo_fail_fmt after:\r\n\r\n```\r\n        ... (snip lots of fmt stuff)\r\n\tcallq\t_ZN3fmt22Arguments$LT$$x27a$GT$3new20h42e5bb8d1711ee61OqaE\r\n\tleaq\t_ZN11do_fail_fmt7run_fmt9file_line20h339df6a0541e837eFbaE(%rip), %rsi\r\n\tleaq\t32(%rsp), %rax\r\n\tmovq\t%rax, 144(%rsp)\r\n\tmovq\t144(%rsp), %rdi\r\n\tcallq\t_ZN6unwind16begin_unwind_fmt20hfdcadc14d188656biRdE@PLT\r\n```\r\n\r\nFile size increases.\r\n\r\nfile size before:\r\n\r\n```\r\n-rw-rw-r-- 1 brian brian 100501740 Jul 24 23:28 /home/brian/dev/rust2/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc-4e7c5e5c.rlib\r\n-rwxrwxr-x 1 brian brian  21201780 Jul 24 23:27 /home/brian/dev/rust2/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc-4e7c5e5c.so\r\n```\r\n\r\nfile size after:\r\n\r\n```\r\n-rw-rw-r-- 1 brian brian 101542484 Jul 25 00:34 x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc-4e7c5e5c.rlib\r\n-rwxrwxr-x 1 brian brian  21348862 Jul 25 00:34 x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc-4e7c5e5c.so\r\n```\r\n\r\nText size decreases by 52486 while data size increases by 143686.\r\n\r\nsection size before:\r\n\r\n```\r\n   text    data     bss     dec     hex filename\r\n12712262        5924997     368 18637627        11c633b x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc-4e7c5e5c.so\r\n```\r\n\r\nsection size after:\r\n\r\n```\r\n   text    data     bss     dec     hex filename\r\n12659776        6068683     368 18728827        11dc77b /home/brian/dev/rust/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc-4e7c5e5c.so\r\n```\r\n\r\nI don't know if anything can be learned from these benchmarks. Looks like a wash.\r\n\r\nstd bench before:\r\n\r\n```\r\ntest collections::hashmap::bench::find_existing             ... bench:     43452 ns/iter (+/- 2423)\r\ntest collections::hashmap::bench::find_nonexisting          ... bench:     42416 ns/iter (+/- 3996)\r\ntest collections::hashmap::bench::find_pop_insert           ... bench:       214 ns/iter (+/- 11)\r\ntest collections::hashmap::bench::hashmap_as_queue          ... bench:       123 ns/iter (+/- 6)\r\ntest collections::hashmap::bench::insert                    ... bench:       153 ns/iter (+/- 14)\r\ntest collections::hashmap::bench::new_drop                  ... bench:       547 ns/iter (+/- 259)\r\ntest collections::hashmap::bench::new_insert_drop           ... bench:       682 ns/iter (+/- 366)\r\ntest io::buffered::test::bench_buffered_reader              ... bench:      1046 ns/iter (+/- 86)\r\ntest io::buffered::test::bench_buffered_stream              ... bench:      2156 ns/iter (+/- 801)\r\ntest io::buffered::test::bench_buffered_writer              ... bench:      1057 ns/iter (+/- 75)\r\ntest io::extensions::bench::u64_from_be_bytes_4_aligned     ... bench:        80 ns/iter (+/- 5)\r\ntest io::extensions::bench::u64_from_be_bytes_4_unaligned   ... bench:        81 ns/iter (+/- 6)\r\ntest io::extensions::bench::u64_from_be_bytes_7_aligned     ... bench:        80 ns/iter (+/- 4)\r\ntest io::extensions::bench::u64_from_be_bytes_7_unaligned   ... bench:        69 ns/iter (+/- 4)\r\ntest io::extensions::bench::u64_from_be_bytes_8_aligned     ... bench:        69 ns/iter (+/- 3)\r\ntest io::extensions::bench::u64_from_be_bytes_8_unaligned   ... bench:        81 ns/iter (+/- 4)\r\ntest io::mem::test::bench_buf_reader                        ... bench:       628 ns/iter (+/- 18)\r\ntest io::mem::test::bench_buf_writer                        ... bench:       478 ns/iter (+/- 19)\r\ntest io::mem::test::bench_mem_reader                        ... bench:       712 ns/iter (+/- 44)\r\ntest io::mem::test::bench_mem_writer_001_0000               ... bench:        31 ns/iter (+/- 1)\r\ntest io::mem::test::bench_mem_writer_001_0010               ... bench:        51 ns/iter (+/- 3)\r\ntest io::mem::test::bench_mem_writer_001_0100               ... bench:       121 ns/iter (+/- 8)\r\ntest io::mem::test::bench_mem_writer_001_1000               ... bench:       774 ns/iter (+/- 47)\r\ntest io::mem::test::bench_mem_writer_100_0000               ... bench:       756 ns/iter (+/- 50)\r\ntest io::mem::test::bench_mem_writer_100_0010               ... bench:      2726 ns/iter (+/- 198)\r\ntest io::mem::test::bench_mem_writer_100_0100               ... bench:      8961 ns/iter (+/- 712)\r\ntest io::mem::test::bench_mem_writer_100_1000               ... bench:    105673 ns/iter (+/- 24711)\r\ntest num::bench::bench_pow_function                         ... bench:      5849 ns/iter (+/- 371)\r\ntest num::strconv::bench::f64::float_to_string              ... bench:       662 ns/iter (+/- 202)\r\ntest num::strconv::bench::int::to_str_base_36               ... bench:       424 ns/iter (+/- 7)\r\ntest num::strconv::bench::int::to_str_bin                   ... bench:      1227 ns/iter (+/- 80)\r\ntest num::strconv::bench::int::to_str_dec                   ... bench:       466 ns/iter (+/- 13)\r\ntest num::strconv::bench::int::to_str_hex                   ... bench:       498 ns/iter (+/- 22)\r\ntest num::strconv::bench::int::to_str_oct                   ... bench:       502 ns/iter (+/- 229)\r\ntest num::strconv::bench::uint::to_str_base_36              ... bench:       375 ns/iter (+/- 7)\r\ntest num::strconv::bench::uint::to_str_bin                  ... bench:      1011 ns/iter (+/- 590)\r\ntest num::strconv::bench::uint::to_str_dec                  ... bench:       407 ns/iter (+/- 17)\r\ntest num::strconv::bench::uint::to_str_hex                  ... bench:       442 ns/iter (+/- 7)\r\ntest num::strconv::bench::uint::to_str_oct                  ... bench:       433 ns/iter (+/- 46)\r\ntest path::posix::bench::ends_with_path_home_dir            ... bench:       167 ns/iter (+/- 10)\r\ntest path::posix::bench::ends_with_path_missmatch_jome_home ... bench:       148 ns/iter (+/- 6)\r\ntest path::posix::bench::is_ancestor_of_path_with_10_dirs   ... bench:       221 ns/iter (+/- 31)\r\ntest path::posix::bench::join_abs_path_home_dir             ... bench:       144 ns/iter (+/- 23)\r\ntest path::posix::bench::join_home_dir                      ... bench:       196 ns/iter (+/- 9)\r\ntest path::posix::bench::join_many_abs_path_home_dir        ... bench:       143 ns/iter (+/- 6)\r\ntest path::posix::bench::join_many_home_dir                 ... bench:       195 ns/iter (+/- 8)\r\ntest path::posix::bench::path_relative_from_backward        ... bench:       248 ns/iter (+/- 10)\r\ntest path::posix::bench::path_relative_from_forward         ... bench:       241 ns/iter (+/- 13)\r\ntest path::posix::bench::path_relative_from_same_level      ... bench:       296 ns/iter (+/- 11)\r\ntest path::posix::bench::push_abs_path_home_dir             ... bench:       104 ns/iter (+/- 7)\r\ntest path::posix::bench::push_home_dir                      ... bench:     27311 ns/iter (+/- 2727)\r\ntest path::posix::bench::push_many_abs_path_home_dir        ... bench:       109 ns/iter (+/- 5)\r\ntest path::posix::bench::push_many_home_dir                 ... bench:     23263 ns/iter (+/- 1726)\r\ntest rand::bench::rand_isaac                                ... bench:       884 ns/iter (+/- 31) = 904 MB/s\r\ntest rand::bench::rand_isaac64                              ... bench:       440 ns/iter (+/- 126) = 1818 MB/s\r\ntest rand::bench::rand_shuffle_100                          ... bench:      2518 ns/iter (+/- 1371)\r\ntest rand::bench::rand_std                                  ... bench:       429 ns/iter (+/- 17) = 1864 MB/s\r\ntest rand::bench::rand_xorshift                             ... bench:         0 ns/iter (+/- 0) = 800000 MB/s\r\n```\r\n\r\nstd bench after:\r\n\r\n```\r\ntest collections::hashmap::bench::find_existing             ... bench:     43635 ns/iter (+/- 4508)\r\ntest collections::hashmap::bench::find_nonexisting          ... bench:     42323 ns/iter (+/- 1753)\r\ntest collections::hashmap::bench::find_pop_insert           ... bench:       216 ns/iter (+/- 11)\r\ntest collections::hashmap::bench::hashmap_as_queue          ... bench:       125 ns/iter (+/- 8)\r\ntest collections::hashmap::bench::insert                    ... bench:       153 ns/iter (+/- 63)\r\ntest collections::hashmap::bench::new_drop                  ... bench:       517 ns/iter (+/- 282)\r\ntest collections::hashmap::bench::new_insert_drop           ... bench:       734 ns/iter (+/- 264)\r\ntest io::buffered::test::bench_buffered_reader              ... bench:      1063 ns/iter (+/- 206)\r\ntest io::buffered::test::bench_buffered_stream              ... bench:      2321 ns/iter (+/- 2302)\r\ntest io::buffered::test::bench_buffered_writer              ... bench:      1060 ns/iter (+/- 24)\r\ntest io::extensions::bench::u64_from_be_bytes_4_aligned     ... bench:        69 ns/iter (+/- 2)\r\ntest io::extensions::bench::u64_from_be_bytes_4_unaligned   ... bench:        81 ns/iter (+/- 7)\r\ntest io::extensions::bench::u64_from_be_bytes_7_aligned     ... bench:        70 ns/iter (+/- 5)\r\ntest io::extensions::bench::u64_from_be_bytes_7_unaligned   ... bench:        69 ns/iter (+/- 5)\r\ntest io::extensions::bench::u64_from_be_bytes_8_aligned     ... bench:        80 ns/iter (+/- 6)\r\ntest io::extensions::bench::u64_from_be_bytes_8_unaligned   ... bench:        81 ns/iter (+/- 5)\r\ntest io::mem::test::bench_buf_reader                        ... bench:       663 ns/iter (+/- 44)\r\ntest io::mem::test::bench_buf_writer                        ... bench:       489 ns/iter (+/- 17)\r\ntest io::mem::test::bench_mem_reader                        ... bench:       700 ns/iter (+/- 23)\r\ntest io::mem::test::bench_mem_writer_001_0000               ... bench:        31 ns/iter (+/- 3)\r\ntest io::mem::test::bench_mem_writer_001_0010               ... bench:        49 ns/iter (+/- 5)\r\ntest io::mem::test::bench_mem_writer_001_0100               ... bench:       112 ns/iter (+/- 6)\r\ntest io::mem::test::bench_mem_writer_001_1000               ... bench:       765 ns/iter (+/- 59)\r\ntest io::mem::test::bench_mem_writer_100_0000               ... bench:       727 ns/iter (+/- 54)\r\ntest io::mem::test::bench_mem_writer_100_0010               ... bench:      2586 ns/iter (+/- 215)\r\ntest io::mem::test::bench_mem_writer_100_0100               ... bench:      8846 ns/iter (+/- 439)\r\ntest io::mem::test::bench_mem_writer_100_1000               ... bench:    105747 ns/iter (+/- 17443)\r\ntest num::bench::bench_pow_function                         ... bench:      5844 ns/iter (+/- 421)\r\ntest num::strconv::bench::f64::float_to_string              ... bench:       669 ns/iter (+/- 571)\r\ntest num::strconv::bench::int::to_str_base_36               ... bench:       417 ns/iter (+/- 24)\r\ntest num::strconv::bench::int::to_str_bin                   ... bench:      1216 ns/iter (+/- 36)\r\ntest num::strconv::bench::int::to_str_dec                   ... bench:       466 ns/iter (+/- 24)\r\ntest num::strconv::bench::int::to_str_hex                   ... bench:       492 ns/iter (+/- 8)\r\ntest num::strconv::bench::int::to_str_oct                   ... bench:       496 ns/iter (+/- 295)\r\ntest num::strconv::bench::uint::to_str_base_36              ... bench:       366 ns/iter (+/- 8)\r\ntest num::strconv::bench::uint::to_str_bin                  ... bench:      1005 ns/iter (+/- 69)\r\ntest num::strconv::bench::uint::to_str_dec                  ... bench:       396 ns/iter (+/- 20)\r\ntest num::strconv::bench::uint::to_str_hex                  ... bench:       435 ns/iter (+/- 4)\r\ntest num::strconv::bench::uint::to_str_oct                  ... bench:       436 ns/iter (+/- 451)\r\ntest path::posix::bench::ends_with_path_home_dir            ... bench:       171 ns/iter (+/- 6)\r\ntest path::posix::bench::ends_with_path_missmatch_jome_home ... bench:       152 ns/iter (+/- 6)\r\ntest path::posix::bench::is_ancestor_of_path_with_10_dirs   ... bench:       215 ns/iter (+/- 8)\r\ntest path::posix::bench::join_abs_path_home_dir             ... bench:       143 ns/iter (+/- 6)\r\ntest path::posix::bench::join_home_dir                      ... bench:       192 ns/iter (+/- 29)\r\ntest path::posix::bench::join_many_abs_path_home_dir        ... bench:       144 ns/iter (+/- 9)\r\ntest path::posix::bench::join_many_home_dir                 ... bench:       194 ns/iter (+/- 19)\r\ntest path::posix::bench::path_relative_from_backward        ... bench:       254 ns/iter (+/- 15)\r\ntest path::posix::bench::path_relative_from_forward         ... bench:       244 ns/iter (+/- 17)\r\ntest path::posix::bench::path_relative_from_same_level      ... bench:       293 ns/iter (+/- 27)\r\ntest path::posix::bench::push_abs_path_home_dir             ... bench:       108 ns/iter (+/- 5)\r\ntest path::posix::bench::push_home_dir                      ... bench:     32292 ns/iter (+/- 4361)\r\ntest path::posix::bench::push_many_abs_path_home_dir        ... bench:       108 ns/iter (+/- 6)\r\ntest path::posix::bench::push_many_home_dir                 ... bench:     20305 ns/iter (+/- 1331)\r\ntest rand::bench::rand_isaac                                ... bench:       888 ns/iter (+/- 35) = 900 MB/s\r\ntest rand::bench::rand_isaac64                              ... bench:       439 ns/iter (+/- 17) = 1822 MB/s\r\ntest rand::bench::rand_shuffle_100                          ... bench:      2582 ns/iter (+/- 1001)\r\ntest rand::bench::rand_std                                  ... bench:       431 ns/iter (+/- 93) = 1856 MB/s\r\ntest rand::bench::rand_xorshift                             ... bench:         0 ns/iter (+/- 0) = 800000 MB/s\r\n```", "tree": {"sha": "59bea9e7628f98f8fbc84cbe24d8b52419792fe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59bea9e7628f98f8fbc84cbe24d8b52419792fe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/279a7808041f5b63050b05c134d9985efb7ffb73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/279a7808041f5b63050b05c134d9985efb7ffb73", "html_url": "https://github.com/rust-lang/rust/commit/279a7808041f5b63050b05c134d9985efb7ffb73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/279a7808041f5b63050b05c134d9985efb7ffb73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527", "html_url": "https://github.com/rust-lang/rust/commit/8d2e7161ee7f1aa28f8f45a60d71d5559eb0d527"}, {"sha": "f49f1575aa83a20e6cf9cb79b36d0bf02f2b28d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49f1575aa83a20e6cf9cb79b36d0bf02f2b28d5", "html_url": "https://github.com/rust-lang/rust/commit/f49f1575aa83a20e6cf9cb79b36d0bf02f2b28d5"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "5965603770ba7ca671152abb34b476666a5a160b", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=279a7808041f5b63050b05c134d9985efb7ffb73", "patch": "@@ -37,7 +37,7 @@ use intrinsics;\n #[lang=\"fail_\"]\n fn fail_(expr: &'static str, file: &'static str, line: uint) -> ! {\n     format_args!(|args| -> () {\n-        begin_unwind(args, file, line);\n+        begin_unwind(args, &(file, line));\n     }, \"{}\", expr);\n \n     unsafe { intrinsics::abort() }\n@@ -48,18 +48,20 @@ fn fail_(expr: &'static str, file: &'static str, line: uint) -> ! {\n fn fail_bounds_check(file: &'static str, line: uint,\n                      index: uint, len: uint) -> ! {\n     format_args!(|args| -> () {\n-        begin_unwind(args, file, line);\n+        begin_unwind(args, &(file, line));\n     }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n     unsafe { intrinsics::abort() }\n }\n \n #[cold]\n-pub fn begin_unwind(fmt: &fmt::Arguments, file: &'static str, line: uint) -> ! {\n+pub fn begin_unwind(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     #[allow(ctypes)]\n     extern {\n         #[lang = \"begin_unwind\"]\n         fn begin_unwind(fmt: &fmt::Arguments, file: &'static str,\n                         line: uint) -> !;\n     }\n+    let (file, line) = *file_line;\n     unsafe { begin_unwind(fmt, file, line) }\n }\n+"}, {"sha": "5373008612bb34c6672eb2df90e22a29e42ccf02", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=279a7808041f5b63050b05c134d9985efb7ffb73", "patch": "@@ -33,7 +33,8 @@ macro_rules! fail(\n         // up with the number of calls to fail!()\n         #[inline(always)]\n         fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-            ::core::failure::begin_unwind(fmt, file!(), line!())\n+            static FILE_LINE: (&'static str, uint) = (file!(), line!());\n+            ::core::failure::begin_unwind(fmt, &FILE_LINE)\n         }\n         format_args!(run_fmt, $fmt, $($arg)*)\n     });"}, {"sha": "b7b5e09a5562a197c38427bf20ef54897ce35a18", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=279a7808041f5b63050b05c134d9985efb7ffb73", "patch": "@@ -33,7 +33,7 @@ extern crate collections;\n #[cfg(test)] #[phase(plugin, link)] extern crate std;\n \n pub use self::util::{Stdio, Stdout, Stderr};\n-pub use self::unwind::{begin_unwind, begin_unwind_fmt, begin_unwind_no_time_to_explain};\n+pub use self::unwind::{begin_unwind, begin_unwind_fmt};\n \n use core::prelude::*;\n "}, {"sha": "5dfeb15afb84ad013f46c60562479d3e5ed5272b", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=279a7808041f5b63050b05c134d9985efb7ffb73", "patch": "@@ -384,7 +384,7 @@ pub mod eabi {\n #[lang = \"begin_unwind\"]\n pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n                                 file: &'static str, line: uint) -> ! {\n-    begin_unwind_fmt(msg, file, line)\n+    begin_unwind_fmt(msg, &(file, line))\n }\n \n /// The entry point for unwinding with a formatted message.\n@@ -394,8 +394,7 @@ pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n #[inline(never)] #[cold]\n-pub fn begin_unwind_fmt(msg: &fmt::Arguments, file: &'static str,\n-                        line: uint) -> ! {\n+pub fn begin_unwind_fmt(msg: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     use core::fmt::FormatWriter;\n \n     // We do two allocations here, unfortunately. But (a) they're\n@@ -415,9 +414,10 @@ pub fn begin_unwind_fmt(msg: &fmt::Arguments, file: &'static str,\n     let mut v = Vec::new();\n     let _ = write!(&mut VecWriter { v: &mut v }, \"{}\", msg);\n \n-    begin_unwind_inner(box String::from_utf8(v).unwrap(), file, line)\n+    begin_unwind_inner(box String::from_utf8(v).unwrap(), file_line)\n }\n \n+// FIXME: Need to change expr_fail in AstBuilder to change this to &(str, uint)\n /// This is the entry point of unwinding for fail!() and assert!().\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> ! {\n@@ -429,13 +429,7 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> !\n     // failing.\n \n     // see below for why we do the `Any` coercion here.\n-    begin_unwind_inner(box msg, file, line)\n-}\n-\n-/// Unwinding for `fail!()`. Saves passing a string.\n-#[inline(never)] #[cold] #[experimental]\n-pub fn begin_unwind_no_time_to_explain(file: &'static str, line: uint) -> ! {\n-    begin_unwind_inner(box () (\"explicit failure\"), file, line)\n+    begin_unwind_inner(box msg, &(file, line))\n }\n \n /// The core of the unwinding.\n@@ -448,9 +442,7 @@ pub fn begin_unwind_no_time_to_explain(file: &'static str, line: uint) -> ! {\n /// Do this split took the LLVM IR line counts of `fn main() { fail!()\n /// }` from ~1900/3700 (-O/no opts) to 180/590.\n #[inline(never)] #[cold] // this is the slow path, please never inline this\n-fn begin_unwind_inner(msg: Box<Any + Send>,\n-                      file: &'static str,\n-                      line: uint) -> ! {\n+fn begin_unwind_inner(msg: Box<Any + Send>, file_line: &(&'static str, uint)) -> ! {\n     // First, invoke call the user-defined callbacks triggered on task failure.\n     //\n     // By the time that we see a callback has been registered (by reading\n@@ -467,6 +459,7 @@ fn begin_unwind_inner(msg: Box<Any + Send>,\n             0 => {}\n             n => {\n                 let f: Callback = unsafe { mem::transmute(n) };\n+                let (file, line) = *file_line;\n                 f(msg, file, line);\n             }\n         }"}, {"sha": "f0732c7d508e82a6b99d8f4cd4530c126ea2bee7", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=279a7808041f5b63050b05c134d9985efb7ffb73", "patch": "@@ -38,12 +38,15 @@\n /// ```\n #[macro_export]\n macro_rules! fail(\n-    () => (\n-        ::std::rt::begin_unwind_no_time_to_explain(file!(), line!())\n-    );\n-    ($msg:expr) => (\n-        ::std::rt::begin_unwind($msg, file!(), line!())\n-    );\n+    () => ({\n+        fail!(\"explicit failure\")\n+    });\n+    ($msg:expr) => ({\n+        // static requires less code at runtime, more constant data\n+        static FILE_LINE: (&'static str, uint) = (file!(), line!());\n+        let (file, line) = FILE_LINE;\n+        ::std::rt::begin_unwind($msg, file, line)\n+    });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // a closure can't have return type !, so we need a full\n         // function to pass to format_args!, *and* we need the\n@@ -58,7 +61,8 @@ macro_rules! fail(\n         // up with the number of calls to fail!()\n         #[inline(always)]\n         fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-            ::std::rt::begin_unwind_fmt(fmt, file!(), line!())\n+            static FILE_LINE: (&'static str, uint) = (file!(), line!());\n+            ::std::rt::begin_unwind_fmt(fmt, &FILE_LINE)\n         }\n         format_args!(run_fmt, $fmt, $($arg)*)\n     });"}, {"sha": "4490977bde619ef833f725c75af39cb9fa8ef796", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279a7808041f5b63050b05c134d9985efb7ffb73/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=279a7808041f5b63050b05c134d9985efb7ffb73", "patch": "@@ -66,8 +66,7 @@ pub use self::util::{default_sched_threads, min_stack, running_on_valgrind};\n // standard library which work together to create the entire runtime.\n pub use alloc::{heap, libc_heap};\n pub use rustrt::{task, local, mutex, exclusive, stack, args, rtio, thread};\n-pub use rustrt::{Stdio, Stdout, Stderr};\n-pub use rustrt::{begin_unwind, begin_unwind_fmt, begin_unwind_no_time_to_explain};\n+pub use rustrt::{Stdio, Stdout, Stderr, begin_unwind, begin_unwind_fmt};\n pub use rustrt::{bookkeeping, at_exit, unwind, DEFAULT_ERROR_CODE, Runtime};\n \n // Simple backtrace functionality (to print on failure)"}]}