{"sha": "10b8faccd0baeda52c0767e01d12c08440830805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYjhmYWNjZDBiYWVkYTUyYzA3NjdlMDFkMTJjMDg0NDA4MzA4MDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-12T12:03:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T08:51:55Z"}, "message": "handle the active field index in unions", "tree": {"sha": "60363621eca71ca71c35b14f6449804f3a75dd2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60363621eca71ca71c35b14f6449804f3a75dd2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b8faccd0baeda52c0767e01d12c08440830805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b8faccd0baeda52c0767e01d12c08440830805", "html_url": "https://github.com/rust-lang/rust/commit/10b8faccd0baeda52c0767e01d12c08440830805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b8faccd0baeda52c0767e01d12c08440830805/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3a10db03ea1a0e43f58319d2d0d006bd31ded08", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a10db03ea1a0e43f58319d2d0d006bd31ded08", "html_url": "https://github.com/rust-lang/rust/commit/b3a10db03ea1a0e43f58319d2d0d006bd31ded08"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "94e8033ed163ed733b186982540f41c111d7ae2b", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10b8faccd0baeda52c0767e01d12c08440830805/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b8faccd0baeda52c0767e01d12c08440830805/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=10b8faccd0baeda52c0767e01d12c08440830805", "patch": "@@ -1375,10 +1375,14 @@ pub enum AggregateKind<'tcx> {\n     /// The type is of the element\n     Array(Ty<'tcx>),\n     Tuple,\n-    /// The second field is variant number (discriminant), it's equal to 0\n-    /// for struct and union expressions. The fourth field is active field\n-    /// number and is present only for union expressions.\n+\n+    /// The second field is variant number (discriminant), it's equal\n+    /// to 0 for struct and union expressions. The fourth field is\n+    /// active field number and is present only for union expressions\n+    /// -- e.g. for a union expression `SomeUnion { c: .. }`, the\n+    /// active field index would identity the field `c`\n     Adt(&'tcx AdtDef, usize, &'tcx Substs<'tcx>, Option<usize>),\n+\n     Closure(DefId, ClosureSubsts<'tcx>),\n     Generator(DefId, ClosureSubsts<'tcx>, GeneratorInterior<'tcx>),\n }"}, {"sha": "ebf894af180de40820358b1fb2ee4b9e888f03fa", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10b8faccd0baeda52c0767e01d12c08440830805/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b8faccd0baeda52c0767e01d12c08440830805/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=10b8faccd0baeda52c0767e01d12c08440830805", "patch": "@@ -1031,14 +1031,16 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn aggregate_field_ty(\n         &mut self,\n         ak: &Box<AggregateKind<'tcx>>,\n-        field: usize,\n+        field_index: usize,\n         location: Location,\n     ) -> Result<Ty<'tcx>, FieldAccessError> {\n         let tcx = self.tcx();\n \n         match **ak {\n-            AggregateKind::Adt(def, variant, substs, _) => {\n-                if let Some(field) = def.variants[variant].fields.get(field) {\n+            AggregateKind::Adt(def, variant_index, substs, active_field_index) => {\n+                let variant = &def.variants[variant_index];\n+                let adj_field_index = active_field_index.unwrap_or(field_index);\n+                if let Some(field) = variant.fields.get(adj_field_index) {\n                     Ok(self.normalize(&field.ty(tcx, substs), location))\n                 } else {\n                     Err(FieldAccessError::OutOfRange {\n@@ -1047,18 +1049,18 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             }\n             AggregateKind::Closure(def_id, substs) => {\n-                match substs.upvar_tys(def_id, tcx).nth(field) {\n+                match substs.upvar_tys(def_id, tcx).nth(field_index) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n                         field_count: substs.upvar_tys(def_id, tcx).count(),\n                     }),\n                 }\n             }\n             AggregateKind::Generator(def_id, substs, _) => {\n-                if let Some(ty) = substs.upvar_tys(def_id, tcx).nth(field) {\n-                    Ok(ty);\n+                if let Some(ty) = substs.upvar_tys(def_id, tcx).nth(field_index) {\n+                    Ok(ty)\n                 } else {\n-                    match substs.field_tys(def_id, tcx).nth(field) {\n+                    match substs.field_tys(def_id, tcx).nth(field_index) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n                             field_count: substs.field_tys(def_id, tcx).count() + 1,"}]}