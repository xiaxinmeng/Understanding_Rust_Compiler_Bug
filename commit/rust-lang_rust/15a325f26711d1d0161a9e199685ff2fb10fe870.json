{"sha": "15a325f26711d1d0161a9e199685ff2fb10fe870", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTMyNWYyNjcxMWQxZDAxNjFhOWUxOTk2ODVmZjJmYjEwZmU4NzA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-16T11:57:07Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-16T11:58:26Z"}, "message": "Support binding of methods off boxed iface values\n\nCloses #435", "tree": {"sha": "89a0622bafea7b5fb3c7980b5e3a315bc3ff224a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a0622bafea7b5fb3c7980b5e3a315bc3ff224a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a325f26711d1d0161a9e199685ff2fb10fe870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a325f26711d1d0161a9e199685ff2fb10fe870", "html_url": "https://github.com/rust-lang/rust/commit/15a325f26711d1d0161a9e199685ff2fb10fe870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a325f26711d1d0161a9e199685ff2fb10fe870/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f20c9478568b8051232b4461195e87000f8ee1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f20c9478568b8051232b4461195e87000f8ee1a", "html_url": "https://github.com/rust-lang/rust/commit/5f20c9478568b8051232b4461195e87000f8ee1a"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "221a95370451e973a53fedf8e4aa1860ad96c39d", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15a325f26711d1d0161a9e199685ff2fb10fe870/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a325f26711d1d0161a9e199685ff2fb10fe870/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=15a325f26711d1d0161a9e199685ff2fb10fe870", "patch": "@@ -1745,7 +1745,7 @@ type lval_result = {bcx: block, val: ValueRef, kind: lval_kind};\n enum callee_env {\n     null_env,\n     is_closure,\n-    self_env(ValueRef, ty::t),\n+    self_env(ValueRef, ty::t, option<ValueRef>),\n }\n type lval_maybe_callee = {bcx: block,\n                           val: ValueRef,\n@@ -2341,7 +2341,7 @@ fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n }\n \n fn lval_maybe_callee_to_lval(c: lval_maybe_callee, ty: ty::t) -> lval_result {\n-    let must_bind = alt c.env { self_env(_, _) { true } _ { false } };\n+    let must_bind = alt c.env { self_env(_, _, _) { true } _ { false } };\n     if must_bind {\n         let n_args = ty::ty_fn_args(ty).len();\n         let args = vec::from_elem(n_args, none);\n@@ -2618,7 +2618,7 @@ fn trans_call_inner(in_cx: block, fn_expr_ty: ty::t,\n           null_env {\n             llvm::LLVMGetUndef(T_opaque_box_ptr(ccx))\n           }\n-          self_env(e, _) {\n+          self_env(e, _, _) {\n             PointerCast(bcx, e, T_opaque_box_ptr(ccx))\n           }\n           is_closure {"}, {"sha": "e254671773281e3644d529f61ddb0bab9ab3705a", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15a325f26711d1d0161a9e199685ff2fb10fe870/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a325f26711d1d0161a9e199685ff2fb10fe870/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=15a325f26711d1d0161a9e199685ff2fb10fe870", "patch": "@@ -462,8 +462,13 @@ fn trans_bind_1(cx: block, outgoing_fty: ty::t,\n         let src_loc = PointerCast(bcx, f_res.val, llclosurety);\n         ([env_copy(src_loc, pair_ty, owned)], target_closure)\n       }\n-      self_env(slf, slf_t) {\n-        ([env_copy(slf, slf_t, owned)], target_self(f_res.val))\n+      self_env(slf, slf_t, none) {\n+        ([env_copy(slf, slf_t, owned)], target_static_self(f_res.val))\n+      }\n+      self_env(_, slf_t, some(slf)) {\n+        let cast = PointerCast(bcx, f_res.val, T_ptr(T_nil()));\n+        ([env_copy(cast, ty::mk_nil_ptr(ccx.tcx), owned_imm),\n+          env_copy(slf, slf_t, owned_imm)], target_self)\n       }\n     };\n \n@@ -617,7 +622,8 @@ fn make_opaque_cbox_free_glue(\n enum target_info {\n     target_closure,\n     target_static(ValueRef),\n-    target_self(ValueRef),\n+    target_self,\n+    target_static_self(ValueRef),\n }\n \n // pth is cx.path\n@@ -698,7 +704,14 @@ fn trans_bind_thunk(ccx: @crate_ctxt,\n             (bcx, GEPi(bcx, pair, [0, abi::fn_field_code]));\n         (lltargetfn, lltargetenv, 1)\n       }\n-      target_self(fptr) {\n+      target_self {\n+        let fptr = Load(bcx, GEPi(bcx, llcdata,\n+                                  [0, abi::closure_body_bindings, 0]));\n+        let slfbox = GEPi(bcx, llcdata, [0, abi::closure_body_bindings, 1]);\n+        let selfptr = GEPi(bcx, Load(bcx, slfbox), [0, abi::box_field_body]);\n+        (fptr, PointerCast(bcx, selfptr, T_opaque_cbox_ptr(ccx)), 2)\n+      }\n+      target_static_self(fptr) {\n         let slfptr = GEPi(bcx, llcdata, [0, abi::closure_body_bindings, 0]);\n         (fptr, PointerCast(bcx, slfptr, T_opaque_cbox_ptr(ccx)), 1)\n       }"}, {"sha": "f706c0b0471a1be442e30408fd78b331cf80e8ce", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15a325f26711d1d0161a9e199685ff2fb10fe870/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a325f26711d1d0161a9e199685ff2fb10fe870/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=15a325f26711d1d0161a9e199685ff2fb10fe870", "patch": "@@ -49,7 +49,7 @@ fn trans_method_callee(bcx: block, callee_id: ast::node_id,\n     alt origin {\n       typeck::method_static(did) {\n         let {bcx, val} = trans_self_arg(bcx, self);\n-        {env: self_env(val, node_id_type(bcx, self.id))\n+        {env: self_env(val, node_id_type(bcx, self.id), none)\n          with lval_static_fn(bcx, did, callee_id)}\n       }\n       typeck::method_param(iid, off, p, b) {\n@@ -115,7 +115,7 @@ fn trans_monomorphized_callee(bcx: block, callee_id: ast::node_id,\n         let ty_substs = impl_substs +\n             vec::tailn(node_substs, node_substs.len() - n_m_tps);\n         let {bcx, val} = trans_self_arg(bcx, base);\n-        {env: self_env(val, node_id_type(bcx, base.id))\n+        {env: self_env(val, node_id_type(bcx, base.id), none)\n          with lval_static_fn_inner(bcx, mth_id, callee_id, ty_substs,\n                                    some(sub_origins))}\n       }\n@@ -138,8 +138,8 @@ fn trans_iface_callee(bcx: block, base: @ast::expr,\n     let box = Load(bcx, GEPi(bcx, val, [0, 1]));\n     // FIXME[impl] I doubt this is alignment-safe\n     let self = GEPi(bcx, box, [0, abi::box_field_body]);\n-    trans_vtable_callee(bcx, self_env(self, expr_ty(bcx, base)), vtable,\n-                        callee_id, n_method)\n+    let env = self_env(self, ty::mk_opaque_box(bcx.tcx()), some(box));\n+    trans_vtable_callee(bcx, env, vtable, callee_id, n_method)\n }\n \n fn find_vtable_in_fn_ctxt(ps: param_substs, n_param: uint, n_bound: uint)"}, {"sha": "32be4ee5518cf547d29b2bbfab3ee812b513f548", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15a325f26711d1d0161a9e199685ff2fb10fe870/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a325f26711d1d0161a9e199685ff2fb10fe870/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=15a325f26711d1d0161a9e199685ff2fb10fe870", "patch": "@@ -77,7 +77,7 @@ export ty_nil, mk_nil, type_is_nil;\n export ty_iface, mk_iface;\n export ty_res, mk_res;\n export ty_param, mk_param;\n-export ty_ptr, mk_ptr, mk_mut_ptr, type_is_unsafe_ptr;\n+export ty_ptr, mk_ptr, mk_mut_ptr, mk_nil_ptr, type_is_unsafe_ptr;\n export ty_rptr, mk_rptr;\n export ty_rec, mk_rec;\n export ty_enum, mk_enum, type_is_enum;\n@@ -482,6 +482,10 @@ fn mk_rptr(cx: ctxt, r: region, tm: mt) -> t { mk_t(cx, ty_rptr(r, tm)) }\n fn mk_mut_ptr(cx: ctxt, ty: t) -> t { mk_ptr(cx, {ty: ty,\n                                                   mutbl: ast::m_mutbl}) }\n \n+fn mk_nil_ptr(cx: ctxt) -> t {\n+    mk_ptr(cx, {ty: mk_nil(cx), mutbl: ast::m_imm})\n+}\n+\n fn mk_vec(cx: ctxt, tm: mt) -> t { mk_t(cx, ty_vec(tm)) }\n \n fn mk_rec(cx: ctxt, fs: [field]) -> t { mk_t(cx, ty_rec(fs)) }"}]}