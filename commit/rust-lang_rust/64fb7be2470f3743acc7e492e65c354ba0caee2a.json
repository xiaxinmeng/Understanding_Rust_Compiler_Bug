{"sha": "64fb7be2470f3743acc7e492e65c354ba0caee2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZmI3YmUyNDcwZjM3NDNhY2M3ZTQ5MmU2NWMzNTRiYTBjYWVlMmE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-14T18:30:28Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-14T18:30:28Z"}, "message": "Revert attributed items inlay hints", "tree": {"sha": "512203db9ce4c0d29cdd2c69aed3aeeddfdc3944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512203db9ce4c0d29cdd2c69aed3aeeddfdc3944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64fb7be2470f3743acc7e492e65c354ba0caee2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64fb7be2470f3743acc7e492e65c354ba0caee2a", "html_url": "https://github.com/rust-lang/rust/commit/64fb7be2470f3743acc7e492e65c354ba0caee2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64fb7be2470f3743acc7e492e65c354ba0caee2a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747f2d1719be315c4681bfa2e20d0ff266f7b4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/747f2d1719be315c4681bfa2e20d0ff266f7b4f8", "html_url": "https://github.com/rust-lang/rust/commit/747f2d1719be315c4681bfa2e20d0ff266f7b4f8"}], "stats": {"total": 111, "additions": 13, "deletions": 98}, "files": [{"sha": "04201a0df65bdad6af77e02080a88861042b8963", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64fb7be2470f3743acc7e492e65c354ba0caee2a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fb7be2470f3743acc7e492e65c354ba0caee2a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=64fb7be2470f3743acc7e492e65c354ba0caee2a", "patch": "@@ -184,14 +184,6 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.descend_into_macros(token)\n     }\n \n-    pub fn descend_node_at_offset<N: ast::AstNode>(\n-        &self,\n-        node: &SyntaxNode,\n-        offset: TextSize,\n-    ) -> Option<N> {\n-        self.imp.descend_node_at_offset(node, offset).flatten().find_map(N::cast)\n-    }\n-\n     pub fn hir_file_for(&self, syntax_node: &SyntaxNode) -> HirFileId {\n         self.imp.find_file(syntax_node.clone()).file_id\n     }"}, {"sha": "9df56afb92b0ffd230ac746bfac62cac6c50e247", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 13, "deletions": 90, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/64fb7be2470f3743acc7e492e65c354ba0caee2a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fb7be2470f3743acc7e492e65c354ba0caee2a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=64fb7be2470f3743acc7e492e65c354ba0caee2a", "patch": "@@ -62,38 +62,24 @@ pub(crate) fn inlay_hints(\n     let _p = profile::span(\"inlay_hints\");\n     let sema = Semantics::new(db);\n     let file = sema.parse(file_id);\n+    let file = file.syntax();\n \n     let mut res = Vec::new();\n-    let mut queue = vec![file.syntax().preorder()];\n \n-    while let Some(mut preorder) = queue.pop() {\n-        while let Some(event) = preorder.next() {\n-            let node = match event {\n-                syntax::WalkEvent::Enter(node) => node,\n-                syntax::WalkEvent::Leave(_) => continue,\n-            };\n-            if let Some(node) =\n-                ast::Item::cast(node.clone()).and_then(|item| sema.expand_attr_macro(&item))\n-            {\n-                preorder.skip_subtree();\n-                queue.push(node.preorder());\n-                continue;\n-            }\n-\n-            if let Some(expr) = ast::Expr::cast(node.clone()) {\n-                get_chaining_hints(&mut res, &sema, config, &expr);\n-                match expr {\n-                    ast::Expr::CallExpr(it) => {\n-                        get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n-                    }\n-                    ast::Expr::MethodCallExpr(it) => {\n-                        get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n-                    }\n-                    _ => (),\n+    for node in file.descendants() {\n+        if let Some(expr) = ast::Expr::cast(node.clone()) {\n+            get_chaining_hints(&mut res, &sema, config, &expr);\n+            match expr {\n+                ast::Expr::CallExpr(it) => {\n+                    get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n+                }\n+                ast::Expr::MethodCallExpr(it) => {\n+                    get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n                 }\n-            } else if let Some(it) = ast::IdentPat::cast(node.clone()) {\n-                get_bind_pat_hints(&mut res, &sema, config, it);\n+                _ => (),\n             }\n+        } else if let Some(it) = ast::IdentPat::cast(node.clone()) {\n+            get_bind_pat_hints(&mut res, &sema, config, it);\n         }\n     }\n     res\n@@ -1485,67 +1471,4 @@ fn main() {\n             \"#]],\n         );\n     }\n-\n-    #[test]\n-    fn hints_in_attr_call() {\n-        // chaining hints do not currently work as macros lose all whitespace information\n-        check_expect(\n-            TEST_CONFIG,\n-            r#\"\n-//- proc_macros: identity, input_replace\n-struct Struct;\n-impl Struct {\n-    fn chain(self) -> Self {\n-        self\n-    }\n-}\n-\n-#[proc_macros::identity]\n-fn main() {\n-    let strukt = Struct;\n-    strukt\n-        .chain()\n-        .chain()\n-        .chain();\n-    Struct::chain(strukt);\n-}\n-\n-#[proc_macros::input_replace(\n-    fn not_main() {\n-        let strukt = Struct;\n-        strukt\n-            .chain()\n-            .chain()\n-            .chain();\n-        Struct::chain(strukt);\n-    }\n-)]\n-fn main() {}\n-\"#,\n-            expect![[r#\"\n-                [\n-                    InlayHint {\n-                        range: 297..303,\n-                        kind: TypeHint,\n-                        label: \"Struct\",\n-                    },\n-                    InlayHint {\n-                        range: 415..421,\n-                        kind: ParameterHint,\n-                        label: \"self\",\n-                    },\n-                    InlayHint {\n-                        range: 125..131,\n-                        kind: TypeHint,\n-                        label: \"Struct\",\n-                    },\n-                    InlayHint {\n-                        range: 223..229,\n-                        kind: ParameterHint,\n-                        label: \"self\",\n-                    },\n-                ]\n-            \"#]],\n-        );\n-    }\n }"}]}