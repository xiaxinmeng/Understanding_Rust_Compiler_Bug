{"sha": "83344195ee86d249d5bfae6d732082eb6899be54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMzQ0MTk1ZWU4NmQyNDlkNWJmYWU2ZDczMjA4MmViNjg5OWJlNTQ=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-15T04:18:41Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-15T06:24:03Z"}, "message": "Use local links in the alloc docs.", "tree": {"sha": "6dbd02eefd23a2b2e8eb9fbbe54bff39dec04a21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dbd02eefd23a2b2e8eb9fbbe54bff39dec04a21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83344195ee86d249d5bfae6d732082eb6899be54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83344195ee86d249d5bfae6d732082eb6899be54", "html_url": "https://github.com/rust-lang/rust/commit/83344195ee86d249d5bfae6d732082eb6899be54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83344195ee86d249d5bfae6d732082eb6899be54/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23744c84d9c0f8e4e870edb983f1ad6d33449c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/23744c84d9c0f8e4e870edb983f1ad6d33449c34", "html_url": "https://github.com/rust-lang/rust/commit/23744c84d9c0f8e4e870edb983f1ad6d33449c34"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "f6060ac14e75ebafb23b42c3e0114929846e52fb", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83344195ee86d249d5bfae6d732082eb6899be54/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83344195ee86d249d5bfae6d732082eb6899be54/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=83344195ee86d249d5bfae6d732082eb6899be54", "patch": "@@ -773,7 +773,8 @@ impl<'a> Builder<'a> {\n             let my_out = match mode {\n                 // This is the intended out directory for compiler documentation.\n                 Mode::Rustc | Mode::ToolRustc | Mode::Codegen => self.compiler_doc_out(target),\n-                _ => self.crate_doc_out(target),\n+                Mode::Std => out_dir.join(target).join(\"doc\"),\n+                _ => panic!(\"doc mode {:?} not expected\", mode),\n             };\n             let rustdoc = self.rustdoc(compiler);\n             self.clear_if_dirty(&my_out, &rustdoc);"}, {"sha": "3121690285868a21f163e6618948f9afff41aaf4", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/83344195ee86d249d5bfae6d732082eb6899be54/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83344195ee86d249d5bfae6d732082eb6899be54/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=83344195ee86d249d5bfae6d732082eb6899be54", "patch": "@@ -417,34 +417,16 @@ impl Step for Std {\n         builder.ensure(compile::Std { compiler, target });\n         let out_dir = builder.stage_out(compiler, Mode::Std).join(target).join(\"doc\");\n \n-        // Here what we're doing is creating a *symlink* (directory junction on\n-        // Windows) to the final output location. This is not done as an\n-        // optimization but rather for correctness. We've got three trees of\n-        // documentation, one for std, one for test, and one for rustc. It's then\n-        // our job to merge them all together.\n-        //\n-        // Unfortunately rustbuild doesn't know nearly as well how to merge doc\n-        // trees as rustdoc does itself, so instead of actually having three\n-        // separate trees we just have rustdoc output to the same location across\n-        // all of them.\n-        //\n-        // This way rustdoc generates output directly into the output, and rustdoc\n-        // will also directly handle merging.\n-        let my_out = builder.crate_doc_out(target);\n-        t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n         t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n \n         let run_cargo_rustdoc_for = |package: &str| {\n             let mut cargo =\n                 builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n             compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n \n-            cargo.arg(\"-p\").arg(package);\n-            // Create all crate output directories first to make sure rustdoc uses\n-            // relative links.\n-            // FIXME: Cargo should probably do this itself.\n-            t!(fs::create_dir_all(out_dir.join(package)));\n             cargo\n+                .arg(\"-p\")\n+                .arg(package)\n                 .arg(\"--\")\n                 .arg(\"--markdown-css\")\n                 .arg(\"rust.css\")\n@@ -462,11 +444,17 @@ impl Step for Std {\n         // folder structure, that would also build internal crates that we do\n         // not want to show in documentation. These crates will later be visited\n         // by the rustc step, so internal documentation will show them.\n-        let krates = [\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"];\n+        //\n+        // Note that the order here is important! The crates need to be\n+        // processed starting from the leaves, otherwise rustdoc will not\n+        // create correct links between crates because rustdoc depends on the\n+        // existence of the output directories to know if it should be a local\n+        // or remote link.\n+        let krates = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n         for krate in &krates {\n             run_cargo_rustdoc_for(krate);\n         }\n-        builder.cp_r(&my_out, &out);\n+        builder.cp_r(&out_dir, &out);\n \n         // Look for src/libstd, src/libcore etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n@@ -529,8 +517,11 @@ impl Step for Rustc {\n         // Build rustc.\n         builder.ensure(compile::Rustc { compiler, target });\n \n-        // We do not symlink to the same shared folder that already contains std library\n-        // documentation from previous steps as we do not want to include that.\n+        // This uses a shared directory so that librustdoc documentation gets\n+        // correctly built and merged with the rustc documentation. This is\n+        // needed because rustdoc is built in a different directory from\n+        // rustc. rustdoc needs to be able to see everything, for example when\n+        // merging the search index, or generating local (relative) links.\n         let out_dir = builder.stage_out(compiler, Mode::Rustc).join(target).join(\"doc\");\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n "}, {"sha": "9ca9e338d55c5ae373166511e7f8261c7e60a267", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/83344195ee86d249d5bfae6d732082eb6899be54/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83344195ee86d249d5bfae6d732082eb6899be54/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=83344195ee86d249d5bfae6d732082eb6899be54", "patch": "@@ -612,13 +612,6 @@ impl Build {\n         INTERNER.intern_path(self.out.join(&*target).join(\"md-doc\"))\n     }\n \n-    /// Output directory for all crate documentation for a target (temporary)\n-    ///\n-    /// The artifacts here are then copied into `doc_out` above.\n-    fn crate_doc_out(&self, target: Interned<String>) -> PathBuf {\n-        self.out.join(&*target).join(\"crate-docs\")\n-    }\n-\n     /// Returns `true` if no custom `llvm-config` is set for the specified target.\n     ///\n     /// If no custom `llvm-config` was specified then Rust's llvm will be used."}]}