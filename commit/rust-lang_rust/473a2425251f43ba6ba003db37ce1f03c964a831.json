{"sha": "473a2425251f43ba6ba003db37ce1f03c964a831", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3M2EyNDI1MjUxZjQzYmE2YmEwMDNkYjM3Y2UxZjAzYzk2NGE4MzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T19:27:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T19:27:36Z"}, "message": "rustc: Store type parameter definition IDs instead of type parameter counts in the typechecker", "tree": {"sha": "2c0b15970d5d328451ca2bd0d4a2e6b581f72280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c0b15970d5d328451ca2bd0d4a2e6b581f72280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/473a2425251f43ba6ba003db37ce1f03c964a831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/473a2425251f43ba6ba003db37ce1f03c964a831", "html_url": "https://github.com/rust-lang/rust/commit/473a2425251f43ba6ba003db37ce1f03c964a831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/473a2425251f43ba6ba003db37ce1f03c964a831/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0054efc412d8f8a1e08840a5ea2146c799501d91", "url": "https://api.github.com/repos/rust-lang/rust/commits/0054efc412d8f8a1e08840a5ea2146c799501d91", "html_url": "https://github.com/rust-lang/rust/commit/0054efc412d8f8a1e08840a5ea2146c799501d91"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "002a011bade42d410b0dcb2b0db57835610a3392", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/473a2425251f43ba6ba003db37ce1f03c964a831/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473a2425251f43ba6ba003db37ce1f03c964a831/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=473a2425251f43ba6ba003db37ce1f03c964a831", "patch": "@@ -39,12 +39,12 @@ tag any_item {\n }\n \n type ty_item_table = hashmap[ast.def_id,any_item];\n-type ty_param_count_table = hashmap[ast.def_id,uint];\n+type ty_param_table = hashmap[ast.def_id,vec[ast.def_id]];\n \n type crate_ctxt = rec(session.session sess,\n                       @ty_table item_types,\n                       @ty_item_table item_items,\n-                      @ty_param_count_table ty_param_counts,\n+                      @ty_param_table item_ty_params,\n                       vec[ast.obj_field] obj_fields,\n                       mutable int next_var_id);\n \n@@ -358,7 +358,7 @@ fn ty_of_native_fn_decl(@ty_item_table id_to_ty_item,\n }\n \n fn collect_item_types(session.session sess, @ast.crate crate)\n-    -> tup(@ast.crate, @ty_table, @ty_item_table, @ty_param_count_table) {\n+    -> tup(@ast.crate, @ty_table, @ty_item_table, @ty_param_table) {\n \n     fn getter(@ty_item_table id_to_ty_item,\n               @ty_table item_to_ty,\n@@ -602,19 +602,29 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n \n     // Second pass: translate the types of all items.\n     let @ty_table item_to_ty = @common.new_def_hash[@ty.t]();\n-    let @ty_param_count_table ty_param_counts = @common.new_def_hash[uint]();\n+    auto item_ty_params = @common.new_def_hash[vec[ast.def_id]]();\n \n     type env = rec(session.session sess,\n                    @ty_item_table id_to_ty_item,\n                    @ty_table item_to_ty,\n-                   @ty_param_count_table ty_param_counts,\n+                   @ty_param_table item_ty_params,\n                    ast.native_abi abi);\n     let @env e = @rec(sess=sess,\n                       id_to_ty_item=id_to_ty_item,\n                       item_to_ty=item_to_ty,\n-                      ty_param_counts=ty_param_counts,\n+                      item_ty_params=item_ty_params,\n                       abi=ast.native_abi_cdecl);\n \n+    // Inserts the given type parameters into the type parameter table of the\n+    // environment.\n+    fn collect_ty_params(&@env e, &ast.def_id id, vec[ast.ty_param] tps) {\n+        let vec[ast.def_id] result = vec();\n+        for (ast.ty_param tp in tps) {\n+            result += vec(tp.id);\n+        }\n+        e.item_ty_params.insert(id, result);\n+    }\n+\n     fn convert(&@env e, @ast.item i) -> @env {\n         auto abi = e.abi;\n         alt (i.node) {\n@@ -652,7 +662,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     fn fold_item_fn(&@env e, &span sp, ast.ident i,\n                     &ast._fn f, vec[ast.ty_param] ty_params,\n                     ast.def_id id, ast.ann a) -> @ast.item {\n-        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+        collect_ty_params(e, id, ty_params);\n \n         check (e.item_to_ty.contains_key(id));\n         auto ty = e.item_to_ty.get(id);\n@@ -664,7 +674,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     fn fold_native_item_fn(&@env e, &span sp, ast.ident i,\n                            &ast.fn_decl d, vec[ast.ty_param] ty_params,\n                            ast.def_id id, ast.ann a) -> @ast.native_item {\n-        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+        collect_ty_params(e, id, ty_params);\n \n         check (e.item_to_ty.contains_key(id));\n         auto ty = e.item_to_ty.get(id);\n@@ -697,7 +707,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     fn fold_item_obj(&@env e, &span sp, ast.ident i,\n                     &ast._obj ob, vec[ast.ty_param] ty_params,\n                     ast.def_id id, ast.ann a) -> @ast.item {\n-        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+        collect_ty_params(e, id, ty_params);\n \n         check (e.item_to_ty.contains_key(id));\n         auto t = e.item_to_ty.get(id);\n@@ -737,7 +747,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     fn fold_item_ty(&@env e, &span sp, ast.ident i,\n                     @ast.ty t, vec[ast.ty_param] ty_params,\n                     ast.def_id id, ast.ann a) -> @ast.item {\n-        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+        collect_ty_params(e, id, ty_params);\n \n         check (e.item_to_ty.contains_key(id));\n         auto ty = e.item_to_ty.get(id);\n@@ -750,7 +760,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n                      vec[ast.variant] variants,\n                      vec[ast.ty_param] ty_params,\n                      ast.def_id id) -> @ast.item {\n-        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+        collect_ty_params(e, id, ty_params);\n \n         auto variants_t = get_tag_variant_types(e.id_to_ty_item,\n                                                 e.item_to_ty,\n@@ -773,7 +783,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n              fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_)\n              with *fld_2);\n     auto crate_ = fold.fold_crate[@env](e, fld_2, crate);\n-    ret tup(crate_, item_to_ty, id_to_ty_item, ty_param_counts);\n+    ret tup(crate_, item_to_ty, id_to_ty_item, item_ty_params);\n }\n \n fn unify(&@fn_ctxt fcx, @ty.t expected, @ty.t actual) -> ty.unify_result {\n@@ -2270,7 +2280,7 @@ fn check_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n     auto ccx = @rec(sess=sess,\n                     item_types=result._1,\n                     item_items=result._2,\n-                    ty_param_counts=result._3,\n+                    item_ty_params=result._3,\n                     obj_fields=fields,\n                     mutable next_var_id=0);\n "}]}