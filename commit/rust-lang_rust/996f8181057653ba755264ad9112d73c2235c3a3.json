{"sha": "996f8181057653ba755264ad9112d73c2235c3a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NmY4MTgxMDU3NjUzYmE3NTUyNjRhZDkxMTJkNzNjMjIzNWMzYTM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-03-09T22:14:40Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-03-09T22:14:40Z"}, "message": "Merge pull request #32135 from nathankleyn/improve-docs-for-btreemap\n\nAdd missing documentation examples for BTreeMap.", "tree": {"sha": "b145af44756de74f6fa04ce70cef47281084ff13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b145af44756de74f6fa04ce70cef47281084ff13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/996f8181057653ba755264ad9112d73c2235c3a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/996f8181057653ba755264ad9112d73c2235c3a3", "html_url": "https://github.com/rust-lang/rust/commit/996f8181057653ba755264ad9112d73c2235c3a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/996f8181057653ba755264ad9112d73c2235c3a3/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "html_url": "https://github.com/rust-lang/rust/commit/ef3d0516303f82ebfbcc4c250ebfc783aaadad72"}, {"sha": "6799895b6d08e2b3be41a13b74b78368e4f08945", "url": "https://api.github.com/repos/rust-lang/rust/commits/6799895b6d08e2b3be41a13b74b78368e4f08945", "html_url": "https://github.com/rust-lang/rust/commit/6799895b6d08e2b3be41a13b74b78368e4f08945"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "47518d8b33dc1102b169f20529e4ffadfe7950c9", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/996f8181057653ba755264ad9112d73c2235c3a3/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996f8181057653ba755264ad9112d73c2235c3a3/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=996f8181057653ba755264ad9112d73c2235c3a3", "patch": "@@ -58,6 +58,74 @@ use self::Entry::*;\n /// It is a logic error for a key to be modified in such a way that the key's ordering relative to\n /// any other key, as determined by the `Ord` trait, changes while it is in the map. This is\n /// normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::BTreeMap;\n+///\n+/// // type inference lets us omit an explicit type signature (which\n+/// // would be `BTreeMap<&str, &str>` in this example).\n+/// let mut movie_reviews = BTreeMap::new();\n+///\n+/// // review some books.\n+/// movie_reviews.insert(\"Office Space\",       \"Deals with real issues in the workplace.\");\n+/// movie_reviews.insert(\"Pulp Fiction\",       \"Masterpiece.\");\n+/// movie_reviews.insert(\"The Godfather\",      \"Very enjoyable.\");\n+/// movie_reviews.insert(\"The Blues Brothers\", \"Eye lyked it alot.\");\n+///\n+/// // check for a specific one.\n+/// if !movie_reviews.contains_key(\"Les Mis\u00e9rables\") {\n+///     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n+///              movie_reviews.len());\n+/// }\n+///\n+/// // oops, this review has a lot of spelling mistakes, let's delete it.\n+/// movie_reviews.remove(\"The Blues Brothers\");\n+///\n+/// // look up the values associated with some keys.\n+/// let to_find = [\"Up!\", \"Office Space\"];\n+/// for book in &to_find {\n+///     match movie_reviews.get(book) {\n+///        Some(review) => println!(\"{}: {}\", book, review),\n+///        None => println!(\"{} is unreviewed.\", book)\n+///     }\n+/// }\n+///\n+/// // iterate over everything.\n+/// for (movie, review) in &movie_reviews {\n+///     println!(\"{}: \\\"{}\\\"\", movie, review);\n+/// }\n+/// ```\n+///\n+/// `BTreeMap` also implements an [`Entry API`](#method.entry), which allows\n+/// for more complex methods of getting, setting, updating and removing keys and\n+/// their values:\n+///\n+/// ```\n+/// use std::collections::BTreeMap;\n+///\n+/// // type inference lets us omit an explicit type signature (which\n+/// // would be `BTreeMap<&str, u8>` in this example).\n+/// let mut player_stats = BTreeMap::new();\n+///\n+/// fn random_stat_buff() -> u8 {\n+///     // could actually return some random value here - let's just return\n+///     // some fixed value for now\n+///     42\n+/// }\n+///\n+/// // insert a key only if it doesn't already exist\n+/// player_stats.entry(\"health\").or_insert(100);\n+///\n+/// // insert a key using a function that provides a new value only if it\n+/// // doesn't already exist\n+/// player_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n+///\n+/// // update a key, guarding against the key possibly not being set\n+/// let stat = player_stats.entry(\"attack\").or_insert(100);\n+/// *stat += random_stat_buff();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BTreeMap<K, V> {\n     root: node::Root<K, V>,\n@@ -276,6 +344,19 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n \n impl<K: Ord, V> BTreeMap<K, V> {\n     /// Makes a new empty BTreeMap with a reasonable choice for B.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    ///\n+    /// // entries can now be inserted into the empty map\n+    /// a.insert(1, \"a\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> BTreeMap<K, V> {\n         BTreeMap {\n@@ -288,6 +369,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -309,6 +392,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -332,6 +417,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -352,6 +439,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -384,6 +473,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -414,6 +505,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -443,6 +536,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// #![feature(btree_range, collections_bound)]\n     ///\n@@ -516,6 +611,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// #![feature(btree_range, collections_bound)]\n     ///\n@@ -591,6 +688,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -1199,6 +1298,8 @@ impl<K, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -1229,6 +1330,8 @@ impl<K, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -1262,6 +1365,8 @@ impl<K, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -1281,6 +1386,8 @@ impl<K, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -1300,6 +1407,8 @@ impl<K, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n@@ -1317,6 +1426,8 @@ impl<K, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///"}]}