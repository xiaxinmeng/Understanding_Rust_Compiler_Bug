{"sha": "acad03a420186ee8f0c28626e59eee55664dd0b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYWQwM2E0MjAxODZlZThmMGMyODYyNmU1OWVlZTU1NjY0ZGQwYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-30T19:46:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-30T19:46:53Z"}, "message": "auto merge of #19415 : P1start/rust/error-message-fixes, r=alexcrichton\n\nThis is the style followed by most other error messages.", "tree": {"sha": "0a359ba122659439261ddc091e97628bdc1219c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a359ba122659439261ddc091e97628bdc1219c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acad03a420186ee8f0c28626e59eee55664dd0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acad03a420186ee8f0c28626e59eee55664dd0b4", "html_url": "https://github.com/rust-lang/rust/commit/acad03a420186ee8f0c28626e59eee55664dd0b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acad03a420186ee8f0c28626e59eee55664dd0b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee471cab5ed17b14484c636c02d95fa1699e76f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee471cab5ed17b14484c636c02d95fa1699e76f", "html_url": "https://github.com/rust-lang/rust/commit/3ee471cab5ed17b14484c636c02d95fa1699e76f"}, {"sha": "432adc675e2955cbc639cbecf318dc23e053e7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/432adc675e2955cbc639cbecf318dc23e053e7e2", "html_url": "https://github.com/rust-lang/rust/commit/432adc675e2955cbc639cbecf318dc23e053e7e2"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "7cfe66cdc3338a51fdc9713bda7cff77a6bb897a", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -3239,7 +3239,7 @@ impl<'a> Resolver<'a> {\n                                             segment_name),\n                         }\n                     } else {\n-                        format!(\"Could not find `{}` in `{}`.\",\n+                        format!(\"Could not find `{}` in `{}`\",\n                                 segment_name,\n                                 module_name)\n                     };\n@@ -4744,7 +4744,7 @@ impl<'a> Resolver<'a> {\n                         Some(&DefMod(_)) => {\n                             self.resolve_error(path.span, \"inherent implementations are not \\\n                                                            allowed for types not defined in \\\n-                                                           the current module.\");\n+                                                           the current module\");\n                         }\n                         _ => {}\n                     }\n@@ -5843,12 +5843,12 @@ impl<'a> Resolver<'a> {\n                                     };\n \n                                     if msg.len() > 0 {\n-                                        msg = format!(\" Did you mean {}?\", msg)\n+                                        msg = format!(\". Did you mean {}?\", msg)\n                                     }\n \n                                     self.resolve_error(\n                                         expr.span,\n-                                        format!(\"unresolved name `{}`.{}\",\n+                                        format!(\"unresolved name `{}`{}\",\n                                                 wrong_name,\n                                                 msg).as_slice());\n                                 }"}, {"sha": "2bb6f4ad61927d42ba4e89450ad1798611356ec8", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'tcx> AstConv<'tcx> for CrateCtxt<'a, 'tcx> {\n \n     fn ty_infer(&self, span: Span) -> Ty<'tcx> {\n         span_err!(self.tcx.sess, span, E0121,\n-                  \"the type placeholder `_` is not allowed within types on item signatures.\");\n+                  \"the type placeholder `_` is not allowed within types on item signatures\");\n         ty::mk_err()\n     }\n \n@@ -1715,7 +1715,7 @@ fn add_unsized_bound<'tcx,AC>(this: &AC,\n                                                        the given bound is not \\\n                                                        a default. \\\n                                                        Only `Sized?` is \\\n-                                                       supported.\",\n+                                                       supported\",\n                                                       desc).as_slice());\n                     ty::try_add_builtin_trait(this.tcx(),\n                                               kind_id,"}, {"sha": "0607ccdc595a271ee54b0dfcf2e78a2534261af8", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -1648,15 +1648,15 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                 self.tcx.sess.span_note(\n                     span,\n                     format!(\"...so that the type `{}` \\\n-                             will meet the declared lifetime bounds.\",\n+                             will meet the declared lifetime bounds\",\n                             self.ty_to_string(t)).as_slice());\n             }\n             infer::RelateDefaultParamBound(span, t) => {\n                 self.tcx.sess.span_note(\n                     span,\n                     format!(\"...so that type parameter \\\n                              instantiated with `{}`, \\\n-                             will meet its declared lifetime bounds.\",\n+                             will meet its declared lifetime bounds\",\n                             self.ty_to_string(t)).as_slice());\n             }\n             infer::RelateRegionParamBound(span) => {"}, {"sha": "a0999d9eee96e1236d17c13f1360df8230d60483", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -64,7 +64,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         match state {\n             Asm => {\n                 let (s, style) = match expr_to_string(cx, p.parse_expr(),\n-                                                   \"inline assembly must be a string literal.\") {\n+                                                   \"inline assembly must be a string literal\") {\n                     Some((s, st)) => (s, st),\n                     // let compilation continue\n                     None => return DummyResult::expr(sp),"}, {"sha": "db7bc6c323f8970bb354813b012a0997bc2dd656", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -99,7 +99,7 @@ impl<'a> ParserAttr for Parser<'a> {\n \n         if permit_inner && self.eat(&token::Semi) {\n             self.span_warn(span, \"this inner attribute syntax is deprecated. \\\n-                           The new syntax is `#![foo]`, with a bang and no semicolon.\");\n+                           The new syntax is `#![foo]`, with a bang and no semicolon\");\n             style = ast::AttrInner;\n         }\n "}, {"sha": "57983a6dee6bebf5c363755959afed09a65235fd", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -809,7 +809,7 @@ impl<'a> StringReader<'a> {\n                                     self.span_diagnostic.span_help(\n                                         sp,\n                                         \"this is an isolated carriage return; consider checking \\\n-                                         your editor and version control settings.\")\n+                                         your editor and version control settings\")\n                                 }\n                                 false\n                             }"}, {"sha": "3972d01850e6373ea5d5a7afb2cd01a69620657d", "filename": "src/test/compile-fail-fulldeps/phase-syntax-doesnt-resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail-fulldeps%2Fphase-syntax-doesnt-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail-fulldeps%2Fphase-syntax-doesnt-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fphase-syntax-doesnt-resolve.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -20,5 +20,5 @@ extern crate macro_crate_test;\n fn main() {\n     macro_crate_test::foo();\n     //~^ ERROR failed to resolve. Use of undeclared module `macro_crate_test`\n-    //~^^ ERROR unresolved name `macro_crate_test::foo`.\n+    //~^^ ERROR unresolved name `macro_crate_test::foo`\n }"}, {"sha": "c0cd406f062b3fbdaae273a61dd523c80f0ce028", "filename": "src/test/compile-fail/does-nothing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name `this_does_nothing_what_the`.\n+// error-pattern: unresolved name `this_does_nothing_what_the`\n fn main() { println!(\"doing\"); this_does_nothing_what_the; println!(\"boing\"); }"}, {"sha": "6533bd5ddc610cda844a43aa7a708428699b87f0", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use baz::zed::bar;\n-//~^ ERROR unresolved import `baz::zed::bar`. Could not find `zed` in `baz`.\n+//~^ ERROR unresolved import `baz::zed::bar`. Could not find `zed` in `baz`\n \n \n mod baz {}"}, {"sha": "73a0e0c0775eef21db08174248fcd5ca20524260", "filename": "src/test/compile-fail/issue-1476.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    println!(\"{}\", x); //~ ERROR unresolved name `x`.\n+    println!(\"{}\", x); //~ ERROR unresolved name `x`\n }"}, {"sha": "f59252dd3154b7e766baf7bdfcfe422b2339194a", "filename": "src/test/compile-fail/issue-2281-part1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name `foobar`.\n+// error-pattern: unresolved name `foobar`\n \n fn main() { println!(\"{}\", foobar); }"}, {"sha": "850edd05781a21af5f55facdbb2286bd42921a32", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -25,7 +25,7 @@ impl MaybeDog {\n   fn bark() {\n     // If this provides a suggestion, it's a bug as MaybeDog doesn't impl Groom\n     shave();\n-    //~^ ERROR: unresolved name `shave`.\n+    //~^ ERROR: unresolved name `shave`\n   }\n }\n \n@@ -67,7 +67,7 @@ impl cat {\n     grow_older();\n     //~^ ERROR: unresolved name `grow_older`. Did you mean to call `cat::grow_older`\n     shave();\n-    //~^ ERROR: unresolved name `shave`.\n+    //~^ ERROR: unresolved name `shave`\n   }\n \n   fn burn_whiskers(&mut self) {\n@@ -85,6 +85,6 @@ impl cat {\n \n fn main() {\n     self += 1;\n-    //~^ ERROR: unresolved name `self`.\n+    //~^ ERROR: unresolved name `self`\n     // it's a bug if this suggests a missing `self` as we're not in a method\n }"}, {"sha": "5c539cd739cefe51df9d933a85ef28098dcc15e6", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -17,7 +17,7 @@ fn siphash(k0 : u64) {\n     impl siphash {\n         pub fn reset(&mut self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR can't capture dynamic environment\n-           //~^ ERROR unresolved name `k0`.\n+           //~^ ERROR unresolved name `k0`\n         }\n     }\n }"}, {"sha": "594f68e1812af7b2d6133f419fc8bf6335d1d9f2", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -29,9 +29,9 @@ fn siphash(k0 : u64, k1 : u64) -> siphash {\n    impl siphash for SipState {\n         fn reset(&self) {\n             self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR can't capture dynamic environment\n-            //~^ ERROR unresolved name `k0`.\n+            //~^ ERROR unresolved name `k0`\n             self.v1 = k1 ^ 0x646f72616e646f6d; //~ ERROR can't capture dynamic environment\n-            //~^ ERROR unresolved name `k1`.\n+            //~^ ERROR unresolved name `k1`\n         }\n         fn result(&self) -> u64 { return mk_result(self); }\n     }"}, {"sha": "719eef1b63d5d8e191766dffa5e504ca7cc8ed49", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -20,7 +20,7 @@ fn siphash(k0 : u64) -> SipHash {\n     impl SipHash for SipState {\n         fn reset(&self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR can't capture dynamic environment\n-           //~^ ERROR unresolved name `k0`.\n+           //~^ ERROR unresolved name `k0`\n         }\n     }\n     panic!();"}, {"sha": "9bf1bd2e011bb7fe4929f7ef082520225a6c6dc7", "filename": "src/test/compile-fail/issue-7607-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n     x: int\n }\n \n-impl Fo { //~ERROR inherent implementations are not allowed for types not defined in the current module.\n+impl Fo { //~ERROR inherent implementations are not allowed for types not defined in the current module\n     fn foo() {}\n }\n "}, {"sha": "6c5bac5e0cb34bce3fbc4e38c6c300b23adc661c", "filename": "src/test/compile-fail/issue-8767.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-tidy-linelength\n \n-impl B { //~ERROR inherent implementations are not allowed for types not defined in the current module.\n+impl B { //~ERROR inherent implementations are not allowed for types not defined in the current module\n }\n \n fn main() {"}, {"sha": "e78561b9fdb68a71ff35e7749adca2ddadf052a3", "filename": "src/test/compile-fail/match-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -16,6 +16,6 @@ fn my_panic() -> ! { panic!(); }\n fn main() {\n     match true { false => { my_panic(); } true => { } }\n \n-    println!(\"{}\", x); //~ ERROR unresolved name `x`.\n+    println!(\"{}\", x); //~ ERROR unresolved name `x`\n     let x: int;\n }"}, {"sha": "2862268b552579f9c1545247177ff89af29831c9", "filename": "src/test/compile-fail/privacy-ns1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -28,7 +28,7 @@ pub mod foo1 {\n fn test_glob1() {\n     use foo1::*;\n \n-    Bar();  //~ ERROR unresolved name `Bar`.\n+    Bar();  //~ ERROR unresolved name `Bar`\n }\n \n // private type, public value\n@@ -58,7 +58,7 @@ pub mod foo3 {\n fn test_glob3() {\n     use foo3::*;\n \n-    Bar();  //~ ERROR unresolved name `Bar`.\n+    Bar();  //~ ERROR unresolved name `Bar`\n     let _x: Box<Bar>;  //~ ERROR  use of undeclared type name `Bar`\n }\n "}, {"sha": "0709d9095124eb695142b4a0b6426b6ffd3f48bf", "filename": "src/test/compile-fail/test-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -14,5 +14,5 @@\n fn foo() {}\n \n fn main() {\n-    foo(); //~ ERROR unresolved name `foo`.\n+    foo(); //~ ERROR unresolved name `foo`\n }"}, {"sha": "e621d77a65c8d37a11700abea70b0c91b9a600a1", "filename": "src/test/compile-fail/trait-or-new-type-instead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-tidy-linelength\n \n-impl<T> Option<T> { //~ERROR inherent implementations are not allowed for types not defined in the current module.\n+impl<T> Option<T> { //~ERROR inherent implementations are not allowed for types not defined in the current module\n     pub fn foo(&self) { }\n }\n "}, {"sha": "723c5fda3a7d3d3f2007e893099181abadb83e10", "filename": "src/test/compile-fail/typeck_type_placeholder_item.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -12,108 +12,108 @@\n // inference by using the `_` type placeholder.\n \n fn test() -> _ { 5 }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test2() -> (_, _) { (5u, 5u) }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n-//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n static TEST3: _ = \"test\";\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n static TEST4: _ = 145u16;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n static TEST5: (_, _) = (1, 2);\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n-//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test6(_: _) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test7(x: _) { let _x: uint = x; }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test8(_f: fn() -> _) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n struct Test9;\n \n impl Test9 {\n     fn test9(&self) -> _ { () }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn test10(&self, _x : _) { }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n impl Clone for Test9 {\n     fn clone(&self) -> _ { Test9 }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn clone_from(&mut self, other: _) { *self = Test9; }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n struct Test10 {\n     a: _,\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     b: (_, _),\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n-    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n pub fn main() {\n     fn fn_test() -> _ { 5 }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn fn_test2() -> (_, _) { (5u, 5u) }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n-    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     static FN_TEST3: _ = \"test\";\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     static FN_TEST4: _ = 145u16;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     static FN_TEST5: (_, _) = (1, 2);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n-    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn fn_test6(_: _) { }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn fn_test7(x: _) { let _x: uint = x; }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn fn_test8(_f: fn() -> _) { }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     struct FnTest9;\n \n     impl FnTest9 {\n         fn fn_test9(&self) -> _ { () }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n         fn fn_test10(&self, _x : _) { }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     }\n \n     impl Clone for FnTest9 {\n         fn clone(&self) -> _ { FnTest9 }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     }\n \n     struct FnTest10 {\n         a: _,\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n         b: (_, _),\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n-        //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     }\n \n }"}, {"sha": "9bd14305b9a4004f3dbce0211b9df07731014a18", "filename": "src/test/compile-fail/utf8_idents.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03a420186ee8f0c28626e59eee55664dd0b4/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs?ref=acad03a420186ee8f0c28626e59eee55664dd0b4", "patch": "@@ -11,14 +11,14 @@\n // ignore-lexer-test FIXME #15679\n \n fn foo<\n-    '\u03b2, //~ ERROR non-ascii idents are not fully supported.\n-    \u03b3  //~ ERROR non-ascii idents are not fully supported.\n+    '\u03b2, //~ ERROR non-ascii idents are not fully supported\n+    \u03b3  //~ ERROR non-ascii idents are not fully supported\n >() {}\n \n struct X {\n-    \u03b4: uint //~ ERROR non-ascii idents are not fully supported.\n+    \u03b4: uint //~ ERROR non-ascii idents are not fully supported\n }\n \n pub fn main() {\n-    let \u03b1 = 0.00001f64; //~ ERROR non-ascii idents are not fully supported.\n+    let \u03b1 = 0.00001f64; //~ ERROR non-ascii idents are not fully supported\n }"}]}