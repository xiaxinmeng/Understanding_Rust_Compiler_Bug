{"sha": "6e801e251fb6de6dc9563b0203ea3dab14e3d3ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlODAxZTI1MWZiNmRlNmRjOTU2M2IwMjAzZWEzZGFiMTRlM2QzZWM=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-06-16T20:43:48Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-06-29T13:15:45Z"}, "message": "Use type_of for impl self type", "tree": {"sha": "088403c80908fd6d7e4680885ae2cc86ffb05b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/088403c80908fd6d7e4680885ae2cc86ffb05b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e801e251fb6de6dc9563b0203ea3dab14e3d3ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e801e251fb6de6dc9563b0203ea3dab14e3d3ec", "html_url": "https://github.com/rust-lang/rust/commit/6e801e251fb6de6dc9563b0203ea3dab14e3d3ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e801e251fb6de6dc9563b0203ea3dab14e3d3ec/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4913d82175366c1b303afce17071d070d8203874", "url": "https://api.github.com/repos/rust-lang/rust/commits/4913d82175366c1b303afce17071d070d8203874", "html_url": "https://github.com/rust-lang/rust/commit/4913d82175366c1b303afce17071d070d8203874"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "3623e5139f9da3c438f8191c7975ef580fcd6d58", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6e801e251fb6de6dc9563b0203ea3dab14e3d3ec/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e801e251fb6de6dc9563b0203ea3dab14e3d3ec/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=6e801e251fb6de6dc9563b0203ea3dab14e3d3ec", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_ty, NestedVisitorMap, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Node, Path, QPath, TyKind,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -74,8 +74,7 @@ impl UseSelf {\n #[derive(Debug)]\n enum StackItem {\n     Check {\n-        hir_id: HirId,\n-        impl_trait_ref_def_id: Option<LocalDefId>,\n+        impl_id: LocalDefId,\n         types_to_skip: FxHashSet<HirId>,\n         types_to_lint: Vec<HirId>,\n     },\n@@ -87,7 +86,7 @@ impl_lint_pass!(UseSelf => [USE_SELF]);\n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n impl<'tcx> LateLintPass<'tcx> for UseSelf {\n-    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+    fn check_item(&mut self, _cx: &LateContext<'_>, item: &Item<'_>) {\n         if !is_item_interesting(item) {\n             // This does two things:\n             //  1) Reduce needless churn on `self.stack`\n@@ -100,17 +99,15 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         // avoid linting on nested items, we push `StackItem::NoCheck` on the stack to signal, that\n         // we're in an `impl` or nested item, that we don't want to lint\n         let stack_item = if_chain! {\n-            if let ItemKind::Impl(Impl { self_ty, ref of_trait, .. }) = item.kind;\n+            if let ItemKind::Impl(Impl { self_ty, .. }) = item.kind;\n             if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n             if parameters.as_ref().map_or(true, |params| {\n                 !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n             });\n             then {\n-                let impl_trait_ref_def_id = of_trait.as_ref().map(|_| cx.tcx.hir().local_def_id(item.hir_id()));\n                 StackItem::Check {\n-                    hir_id: self_ty.hir_id,\n-                    impl_trait_ref_def_id,\n+                    impl_id: item.def_id,\n                     types_to_lint: Vec::new(),\n                     types_to_skip: std::iter::once(self_ty.hir_id).collect(),\n                 }\n@@ -133,11 +130,11 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         if_chain! {\n             if let ImplItemKind::Fn(FnSig { decl, .. }, ..) = impl_item.kind;\n             if let Some(&mut StackItem::Check {\n-                impl_trait_ref_def_id: Some(def_id),\n+                impl_id,\n                 ref mut types_to_skip,\n                 ..\n             }) = self.stack.last_mut();\n-            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(def_id);\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_id);\n             then {\n                 // `self_ty` is the semantic self type of `impl <trait> for <type>`. This cannot be\n                 // `Self`.\n@@ -195,13 +192,13 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         // could only allow this lint on item scope. And we would have to check if those types are\n         // already dealt with in `check_ty` anyway.\n         if let Some(StackItem::Check {\n-            hir_id,\n+            impl_id,\n             types_to_lint,\n             types_to_skip,\n             ..\n         }) = self.stack.last_mut()\n         {\n-            let self_ty = ty_from_hir_id(cx, *hir_id);\n+            let self_ty = cx.tcx.type_of(*impl_id);\n \n             let mut visitor = LintTyCollector {\n                 cx,\n@@ -220,15 +217,14 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !in_macro(hir_ty.span);\n             if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(StackItem::Check {\n-                hir_id,\n+                impl_id,\n                 types_to_lint,\n                 types_to_skip,\n-                ..\n             }) = self.stack.last();\n             if !types_to_skip.contains(&hir_ty.hir_id);\n             if types_to_lint.contains(&hir_ty.hir_id)\n                 || {\n-                    let self_ty = ty_from_hir_id(cx, *hir_id);\n+                    let self_ty = cx.tcx.type_of(*impl_id);\n                     should_lint_ty(hir_ty, hir_ty_to_ty(cx.tcx, hir_ty), self_ty)\n                 };\n             let hir = cx.tcx.hir();\n@@ -244,8 +240,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         if_chain! {\n             if !in_macro(expr.span);\n             if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n-            if let Some(StackItem::Check { hir_id, .. }) = self.stack.last();\n-            if cx.typeck_results().expr_ty(expr) == ty_from_hir_id(cx, *hir_id);\n+            if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n+            if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);\n             then {} else { return; }\n         }\n         match expr.kind {\n@@ -351,14 +347,6 @@ fn is_item_interesting(item: &Item<'_>) -> bool {\n     )\n }\n \n-fn ty_from_hir_id<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Ty<'tcx> {\n-    if let Some(Node::Ty(hir_ty)) = cx.tcx.hir().find(hir_id) {\n-        hir_ty_to_ty(cx.tcx, hir_ty)\n-    } else {\n-        unreachable!(\"This function should only be called with `HirId`s that are for sure `Node::Ty`\")\n-    }\n-}\n-\n fn should_lint_ty(hir_ty: &hir::Ty<'_>, ty: Ty<'_>, self_ty: Ty<'_>) -> bool {\n     if_chain! {\n         if same_type_and_consts(ty, self_ty);"}]}