{"sha": "05cbece0948f4fc0da3e21a7309e5ed34afdafe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Y2JlY2UwOTQ4ZjRmYzBkYTNlMjFhNzMwOWU1ZWQzNGFmZGFmZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-06T18:52:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-06T18:52:30Z"}, "message": "Auto merge of #43604 - abonander:proc_macro_span_api, r=jseyfried\n\nImprovements to `proc_macro::Span` API\n\nMotivation: https://internals.rust-lang.org/t/better-panic-location-reporting-for-unwrap-and-friends/5042/12?u=logician\n\nTODO:\n- [x] Bikeshedding/complete API\n- [x] Implement tests/verify return values\n\ncc @jseyfried @nrc", "tree": {"sha": "fd976067b6f1a9868300492ddb7aaedc67d267aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd976067b6f1a9868300492ddb7aaedc67d267aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05cbece0948f4fc0da3e21a7309e5ed34afdafe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05cbece0948f4fc0da3e21a7309e5ed34afdafe2", "html_url": "https://github.com/rust-lang/rust/commit/05cbece0948f4fc0da3e21a7309e5ed34afdafe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05cbece0948f4fc0da3e21a7309e5ed34afdafe2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b67f4283b3d04ef8e0504503123001cf642ec325", "url": "https://api.github.com/repos/rust-lang/rust/commits/b67f4283b3d04ef8e0504503123001cf642ec325", "html_url": "https://github.com/rust-lang/rust/commit/b67f4283b3d04ef8e0504503123001cf642ec325"}, {"sha": "7be36d2a6d8855c4ca8ef7ae469f9aac8bf6e63b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be36d2a6d8855c4ca8ef7ae469f9aac8bf6e63b", "html_url": "https://github.com/rust-lang/rust/commit/7be36d2a6d8855c4ca8ef7ae469f9aac8bf6e63b"}], "stats": {"total": 238, "additions": 235, "deletions": 3}, "files": [{"sha": "e6307f10c139f8d1617da5a6c8676aaff171e083", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 128, "deletions": 3, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/05cbece0948f4fc0da3e21a7309e5ed34afdafe2/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cbece0948f4fc0da3e21a7309e5ed34afdafe2/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=05cbece0948f4fc0da3e21a7309e5ed34afdafe2", "patch": "@@ -50,6 +50,7 @@ mod diagnostic;\n pub use diagnostic::{Diagnostic, Level};\n \n use std::{ascii, fmt, iter};\n+use std::rc::Rc;\n use std::str::FromStr;\n \n use syntax::ast;\n@@ -58,7 +59,7 @@ use syntax::parse::{self, token};\n use syntax::symbol::Symbol;\n use syntax::tokenstream;\n use syntax_pos::DUMMY_SP;\n-use syntax_pos::SyntaxContext;\n+use syntax_pos::{FileMap, Pos, SyntaxContext};\n use syntax_pos::hygiene::Mark;\n \n /// The main type provided by this crate, representing an abstract stream of\n@@ -173,7 +174,7 @@ impl TokenStream {\n \n /// A region of source code, along with macro expansion information.\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct Span(syntax_pos::Span);\n \n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n@@ -211,12 +212,132 @@ impl Span {\n         ::__internal::with_sess(|(_, mark)| Span(mark.expn_info().unwrap().call_site))\n     }\n \n+    /// The original source file into which this span points.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn source_file(&self) -> SourceFile {\n+        SourceFile {\n+            filemap: __internal::lookup_char_pos(self.0.lo()).file,\n+        }\n+    }\n+\n+    /// Get the starting line/column in the source file for this span.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn start(&self) -> LineColumn {\n+        let loc = __internal::lookup_char_pos(self.0.lo());\n+        LineColumn {\n+            line: loc.line,\n+            column: loc.col.to_usize()\n+        }\n+    }\n+\n+    /// Get the ending line/column in the source file for this span.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn end(&self) -> LineColumn {\n+        let loc = __internal::lookup_char_pos(self.0.hi());\n+        LineColumn {\n+            line: loc.line,\n+            column: loc.col.to_usize()\n+        }\n+    }\n+\n+    /// Create a new span encompassing `self` and `other`.\n+    ///\n+    /// Returns `None` if `self` and `other` are from different files.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn join(&self, other: Span) -> Option<Span> {\n+        let self_loc = __internal::lookup_char_pos(self.0.lo());\n+        let other_loc = __internal::lookup_char_pos(self.0.lo());\n+\n+        if self_loc.file.name != other_loc.file.name { return None }\n+\n+        Some(Span(self.0.to(other.0)))\n+    }\n+\n     diagnostic_method!(error, Level::Error);\n     diagnostic_method!(warning, Level::Warning);\n     diagnostic_method!(note, Level::Note);\n     diagnostic_method!(help, Level::Help);\n }\n \n+/// A line-column pair representing the start or end of a `Span`.\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub struct LineColumn {\n+    /// The 1-indexed line in the source file on which the span starts or ends (inclusive).\n+    line: usize,\n+    /// The 0-indexed column (in UTF-8 characters) in the source file on which\n+    /// the span starts or ends (inclusive).\n+    column: usize\n+}\n+\n+/// The source file of a given `Span`.\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[derive(Clone)]\n+pub struct SourceFile {\n+    filemap: Rc<FileMap>,\n+}\n+\n+impl SourceFile {\n+    /// Get the path to this source file as a string.\n+    ///\n+    /// ### Note\n+    /// If the code span associated with this `SourceFile` was generated by an external macro, this\n+    /// may not be an actual path on the filesystem. Use [`is_real`] to check.\n+    ///\n+    /// Also note that even if `is_real` returns `true`, if `-Z remap-path-prefix-*` was passed on\n+    /// the command line, the path as given may not actually be valid.\n+    ///\n+    /// [`is_real`]: #method.is_real\n+    # [unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn as_str(&self) -> &str {\n+        &self.filemap.name\n+    }\n+\n+    /// Returns `true` if this source file is a real source file, and not generated by an external\n+    /// macro's expansion.\n+    # [unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn is_real(&self) -> bool {\n+        // This is a hack until intercrate spans are implemented and we can have real source files\n+        // for spans generated in external macros.\n+        // https://github.com/rust-lang/rust/pull/43604#issuecomment-333334368\n+        self.filemap.is_real_file()\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl AsRef<str> for SourceFile {\n+    fn as_ref(&self) -> &str {\n+        self.as_str()\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl fmt::Debug for SourceFile {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"SourceFile\")\n+            .field(\"path\", &self.as_str())\n+            .field(\"is_real\", &self.is_real())\n+            .finish()\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl PartialEq for SourceFile {\n+    fn eq(&self, other: &Self) -> bool {\n+        Rc::ptr_eq(&self.filemap, &other.filemap)\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl Eq for SourceFile {}\n+\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl PartialEq<str> for SourceFile {\n+    fn eq(&self, other: &str) -> bool {\n+        self.as_ref() == other\n+    }\n+}\n+\n /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n #[derive(Clone, Debug)]\n@@ -618,10 +739,14 @@ pub mod __internal {\n     use syntax::parse::{self, ParseSess};\n     use syntax::parse::token::{self, Token};\n     use syntax::tokenstream;\n-    use syntax_pos::DUMMY_SP;\n+    use syntax_pos::{BytePos, Loc, DUMMY_SP};\n \n     use super::{TokenStream, LexError};\n \n+    pub fn lookup_char_pos(pos: BytePos) -> Loc {\n+        with_sess(|(sess, _)| sess.codemap().lookup_char_pos(pos))\n+    }\n+\n     pub fn new_token_stream(item: P<ast::Item>) -> TokenStream {\n         let token = Token::interpolated(token::NtItem(item));\n         TokenStream(tokenstream::TokenTree::Token(DUMMY_SP, token).into())"}, {"sha": "ce6ffcc3cb03d5abac7fe90bcee65dd82c5ce9f0", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/span-api-tests.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/05cbece0948f4fc0da3e21a7309e5ed34afdafe2/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cbece0948f4fc0da3e21a7309e5ed34afdafe2/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs?ref=05cbece0948f4fc0da3e21a7309e5ed34afdafe2", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+// Re-emits the input tokens by parsing them from strings\n+#[proc_macro]\n+pub fn reemit(input: TokenStream) -> TokenStream {\n+    input.to_string().parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn assert_fake_source_file(input: TokenStream) -> TokenStream {\n+    for tk in input {\n+        let source_file = tk.span.source_file();\n+        assert!(!source_file.is_real(), \"Source file is real: {:?}\", source_file);\n+    }\n+\n+    \"\".parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn assert_source_file(input: TokenStream) -> TokenStream {\n+    for tk in input {\n+        let source_file = tk.span.source_file();\n+        assert!(source_file.is_real(), \"Source file is not real: {:?}\", source_file);\n+    }\n+\n+    \"\".parse().unwrap()\n+}"}, {"sha": "b4666e2cb61bdde822f346cbba4516e86427ab09", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/span-test-macros.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05cbece0948f4fc0da3e21a7309e5ed34afdafe2/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-test-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cbece0948f4fc0da3e21a7309e5ed34afdafe2/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-test-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-test-macros.rs?ref=05cbece0948f4fc0da3e21a7309e5ed34afdafe2", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! reemit_legacy {\n+    ($($tok:tt)*) => ($($tok)*)\n+}\n+\n+#[macro_export]\n+macro_rules! say_hello_extern {\n+    ($macname:ident) => ( $macname! { \"Hello, world!\" })\n+}"}, {"sha": "c2df561b43a114a405b431d78b053f7512d5b552", "filename": "src/test/run-pass-fulldeps/proc-macro/span-api-tests.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/05cbece0948f4fc0da3e21a7309e5ed34afdafe2/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cbece0948f4fc0da3e21a7309e5ed34afdafe2/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fspan-api-tests.rs?ref=05cbece0948f4fc0da3e21a7309e5ed34afdafe2", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:span-api-tests.rs\n+// aux-build:span-test-macros.rs\n+\n+// ignore-pretty\n+\n+#![feature(proc_macro)]\n+\n+#[macro_use]\n+extern crate span_test_macros;\n+\n+extern crate span_api_tests;\n+\n+use span_api_tests::{reemit, assert_fake_source_file, assert_source_file};\n+\n+macro_rules! say_hello {\n+    ($macname:ident) => ( $macname! { \"Hello, world!\" })\n+}\n+\n+assert_source_file! { \"Hello, world!\" }\n+\n+say_hello! { assert_source_file }\n+\n+reemit_legacy! {\n+    assert_source_file! { \"Hello, world!\" }\n+}\n+\n+say_hello_extern! { assert_fake_source_file }\n+\n+reemit! {\n+    assert_source_file! { \"Hello, world!\" }\n+}\n+\n+fn main() {}"}]}