{"sha": "9534541dd48ec52bcd9a60094155dffaa8f0a87f", "node_id": "C_kwDOAAsO6NoAKDk1MzQ1NDFkZDQ4ZWM1MmJjZDlhNjAwOTQxNTVkZmZhYThmMGE4N2Y", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-17T17:16:49Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-17T18:00:27Z"}, "message": "Use `Item::expect_*` and `ImplItem::expect_*` more", "tree": {"sha": "c29312654e3f9e9a11201fcf82f5f3a884566c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c29312654e3f9e9a11201fcf82f5f3a884566c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9534541dd48ec52bcd9a60094155dffaa8f0a87f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9534541dd48ec52bcd9a60094155dffaa8f0a87f", "html_url": "https://github.com/rust-lang/rust/commit/9534541dd48ec52bcd9a60094155dffaa8f0a87f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9534541dd48ec52bcd9a60094155dffaa8f0a87f/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "html_url": "https://github.com/rust-lang/rust/commit/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "7b94f6edf7039e48e0a5f6878709417abaa2f938", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=9534541dd48ec52bcd9a60094155dffaa8f0a87f", "patch": "@@ -138,12 +138,10 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             // Evaluate with the lifetimes in `params` in-scope.\n             // This is used to track which lifetimes have already been defined,\n             // and which need to be replicated when lowering an async fn.\n-            match parent_hir.node().expect_item().kind {\n-                hir::ItemKind::Impl(hir::Impl { of_trait, .. }) => {\n-                    lctx.is_in_trait_impl = of_trait.is_some();\n-                }\n-                _ => {}\n-            };\n+\n+            if let hir::ItemKind::Impl(impl_) = parent_hir.node().expect_item().kind {\n+                lctx.is_in_trait_impl = impl_.of_trait.is_some();\n+            }\n \n             match ctxt {\n                 AssocCtxt::Trait => hir::OwnerNode::TraitItem(lctx.lower_trait_item(item)),"}, {"sha": "c2dc2a0f058f33bbc6dcaa028524756ee237accc", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=9534541dd48ec52bcd9a60094155dffaa8f0a87f", "patch": "@@ -74,10 +74,9 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n \n     debug!(\"visit_implementation_of_copy: self_type={:?} (free)\", self_type);\n \n-    let span = match tcx.hir().expect_item(impl_did).kind {\n-        ItemKind::Impl(hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. }) => return,\n-        ItemKind::Impl(impl_) => impl_.self_ty.span,\n-        _ => bug!(\"expected Copy impl item\"),\n+    let span = match tcx.hir().expect_item(impl_did).expect_impl() {\n+        hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. } => return,\n+        hir::Impl { self_ty, .. } => self_ty.span,\n     };\n \n     let cause = traits::ObligationCause::misc(span, impl_did);"}, {"sha": "e410172c8c8d14bddcbb30c12350d3b77ff19d7b", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=9534541dd48ec52bcd9a60094155dffaa8f0a87f", "patch": "@@ -462,10 +462,7 @@ fn foo(&self) -> Self::T { String::new() }\n         if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *proj_ty.self_ty().kind() {\n             let opaque_local_def_id = def_id.as_local();\n             let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n-                match &tcx.hir().expect_item(opaque_local_def_id).kind {\n-                    hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n-                    _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n-                }\n+                tcx.hir().expect_item(opaque_local_def_id).expect_opaque_ty()\n             } else {\n                 return false;\n             };"}, {"sha": "680465bdab6901a3a02d61127ea53b58526a90f8", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=9534541dd48ec52bcd9a60094155dffaa8f0a87f", "patch": "@@ -392,12 +392,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// defining scope.\n     #[instrument(skip(self), level = \"trace\", ret)]\n     fn opaque_type_origin_unchecked(&self, def_id: LocalDefId) -> OpaqueTyOrigin {\n-        match self.tcx.hir().expect_item(def_id).kind {\n-            hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n-            ref itemkind => {\n-                bug!(\"weird opaque type: {:?}, {:#?}\", def_id, itemkind)\n-            }\n-        }\n+        self.tcx.hir().expect_item(def_id).expect_opaque_ty().origin\n     }\n }\n "}, {"sha": "c73d6b5e9316efa9c5bb697f289375ced54566c8", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9534541dd48ec52bcd9a60094155dffaa8f0a87f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9534541dd48ec52bcd9a60094155dffaa8f0a87f", "patch": "@@ -1469,8 +1469,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         match impl_item.kind {\n             ty::AssocKind::Fn => {\n-                let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());\n-                let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n+                let (sig, body) =\n+                    self.tcx.hir().expect_impl_item(def_id.expect_local()).expect_fn();\n                 self.tables.asyncness.set_some(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n                 // Can be inside `impl const Trait`, so using sig.header.constness is not reliable"}]}