{"sha": "4ace3b74348d5bc20b22c9d94959dd828b100fc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhY2UzYjc0MzQ4ZDViYzIwYjIyYzlkOTQ5NTlkZDgyOGIxMDBmYzQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-26T02:26:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-04T17:58:23Z"}, "message": "Fix setting the fixed stack segment attribute on LLVM functions\n\nAt the same time create a more robust wrapper to try to prevent this type of\nissue from cropping up in the future.", "tree": {"sha": "fc856b57d8ba14a2ab71ff0d8b8738bfa6755d29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc856b57d8ba14a2ab71ff0d8b8738bfa6755d29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ace3b74348d5bc20b22c9d94959dd828b100fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ace3b74348d5bc20b22c9d94959dd828b100fc4", "html_url": "https://github.com/rust-lang/rust/commit/4ace3b74348d5bc20b22c9d94959dd828b100fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ace3b74348d5bc20b22c9d94959dd828b100fc4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2936765052f7267a16da5717d403dfe300d180", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2936765052f7267a16da5717d403dfe300d180", "html_url": "https://github.com/rust-lang/rust/commit/8d2936765052f7267a16da5717d403dfe300d180"}], "stats": {"total": 108, "additions": 45, "deletions": 63}, "files": [{"sha": "5ec439ce386c5433e86812a8b3396cd4e23ba6f7", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4ace3b74348d5bc20b22c9d94959dd828b100fc4/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ace3b74348d5bc20b22c9d94959dd828b100fc4/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=4ace3b74348d5bc20b22c9d94959dd828b100fc4", "patch": "@@ -59,35 +59,35 @@ pub enum Linkage {\n \n #[deriving(Clone)]\n pub enum Attribute {\n-    ZExtAttribute = 1,\n-    SExtAttribute = 2,\n-    NoReturnAttribute = 4,\n-    InRegAttribute = 8,\n-    StructRetAttribute = 16,\n-    NoUnwindAttribute = 32,\n-    NoAliasAttribute = 64,\n-    ByValAttribute = 128,\n-    NestAttribute = 256,\n-    ReadNoneAttribute = 512,\n-    ReadOnlyAttribute = 1024,\n-    NoInlineAttribute = 2048,\n-    AlwaysInlineAttribute = 4096,\n-    OptimizeForSizeAttribute = 8192,\n-    StackProtectAttribute = 16384,\n-    StackProtectReqAttribute = 32768,\n-    // 31 << 16\n-    AlignmentAttribute = 2031616,\n-    NoCaptureAttribute = 2097152,\n-    NoRedZoneAttribute = 4194304,\n-    NoImplicitFloatAttribute = 8388608,\n-    NakedAttribute = 16777216,\n-    InlineHintAttribute = 33554432,\n-    // 7 << 26\n-    StackAttribute = 469762048,\n-    ReturnsTwiceAttribute = 536870912,\n-    // 1 << 30\n-    UWTableAttribute = 1073741824,\n-    NonLazyBindAttribute = 2147483648,\n+    ZExtAttribute = 1 << 0,\n+    SExtAttribute = 1 << 1,\n+    NoReturnAttribute = 1 << 2,\n+    InRegAttribute = 1 << 3,\n+    StructRetAttribute = 1 << 4,\n+    NoUnwindAttribute = 1 << 5,\n+    NoAliasAttribute = 1 << 6,\n+    ByValAttribute = 1 << 7,\n+    NestAttribute = 1 << 8,\n+    ReadNoneAttribute = 1 << 9,\n+    ReadOnlyAttribute = 1 << 10,\n+    NoInlineAttribute = 1 << 11,\n+    AlwaysInlineAttribute = 1 << 12,\n+    OptimizeForSizeAttribute = 1 << 13,\n+    StackProtectAttribute = 1 << 14,\n+    StackProtectReqAttribute = 1 << 15,\n+    AlignmentAttribute = 31 << 16,\n+    NoCaptureAttribute = 1 << 21,\n+    NoRedZoneAttribute = 1 << 22,\n+    NoImplicitFloatAttribute = 1 << 23,\n+    NakedAttribute = 1 << 24,\n+    InlineHintAttribute = 1 << 25,\n+    StackAttribute = 7 << 26,\n+    ReturnsTwiceAttribute = 1 << 29,\n+    UWTableAttribute = 1 << 30,\n+    NonLazyBindAttribute = 1 << 31,\n+\n+    // Not added to LLVM yet, so may need to stay updated if LLVM changes.\n+    FixedStackSegment = 1 << 41,\n }\n \n // enum for the LLVM IntPredicate type\n@@ -2107,6 +2107,15 @@ pub fn ConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef {\n         llvm::LLVMConstFCmp(Pred as c_ushort, V1, V2)\n     }\n }\n+\n+pub fn SetFunctionAttribute(Fn: ValueRef, attr: Attribute) {\n+    unsafe {\n+        let attr = attr as u64;\n+        let lower = attr & 0xffffffff;\n+        let upper = (attr >> 32) & 0xffffffff;\n+        llvm::LLVMAddFunctionAttr(Fn, lower as c_uint, upper as c_uint);\n+    }\n+}\n /* Memory-managed object interface to type handles. */\n \n pub struct TypeNames {"}, {"sha": "e727907f88e74453458d4d83a6d86dc27e09a847", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4ace3b74348d5bc20b22c9d94959dd828b100fc4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ace3b74348d5bc20b22c9d94959dd828b100fc4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4ace3b74348d5bc20b22c9d94959dd828b100fc4", "patch": "@@ -419,46 +419,25 @@ pub fn get_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n }\n \n pub fn set_optimize_for_size(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::OptimizeForSizeAttribute\n-                                    as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::OptimizeForSizeAttribute)\n }\n \n pub fn set_no_inline(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::NoInlineAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::NoInlineAttribute)\n }\n \n pub fn set_no_unwind(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::NoUnwindAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::NoUnwindAttribute)\n }\n \n // Tell LLVM to emit the information necessary to unwind the stack for the\n // function f.\n pub fn set_uwtable(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::UWTableAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::UWTableAttribute)\n }\n \n pub fn set_inline_hint(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::InlineHintAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::InlineHintAttribute)\n }\n \n pub fn set_inline_hint_if_appr(attrs: &[ast::Attribute],\n@@ -473,17 +452,11 @@ pub fn set_inline_hint_if_appr(attrs: &[ast::Attribute],\n }\n \n pub fn set_always_inline(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::AlwaysInlineAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::AlwaysInlineAttribute)\n }\n \n pub fn set_fixed_stack_segment(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f, 0, 1 << (39 - 32));\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::FixedStackSegment)\n }\n \n pub fn set_glue_inlining(f: ValueRef, t: ty::t) {"}]}