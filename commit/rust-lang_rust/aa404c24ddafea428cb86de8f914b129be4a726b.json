{"sha": "aa404c24ddafea428cb86de8f914b129be4a726b", "node_id": "C_kwDOAAsO6NoAKGFhNDA0YzI0ZGRhZmVhNDI4Y2I4NmRlOGY5MTRiMTI5YmU0YTcyNmI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-16T20:31:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-20T16:29:18Z"}, "message": "Make hash_result an Option.", "tree": {"sha": "0e3dda9def1c7c8ec7655dce81201f51f0a6e818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e3dda9def1c7c8ec7655dce81201f51f0a6e818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa404c24ddafea428cb86de8f914b129be4a726b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa404c24ddafea428cb86de8f914b129be4a726b", "html_url": "https://github.com/rust-lang/rust/commit/aa404c24ddafea428cb86de8f914b129be4a726b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa404c24ddafea428cb86de8f914b129be4a726b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53404cca68e8220a57339cb3e213fd0d8e99a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53404cca68e8220a57339cb3e213fd0d8e99a5f", "html_url": "https://github.com/rust-lang/rust/commit/e53404cca68e8220a57339cb3e213fd0d8e99a5f"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "0a8d6122aa7a79bf4ec870df31498ec93ba9cd16", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=aa404c24ddafea428cb86de8f914b129be4a726b", "patch": "@@ -224,7 +224,7 @@ pub(crate) fn run_aot(\n                     tcx,\n                     (backend_config.clone(), cgu.name()),\n                     module_codegen,\n-                    rustc_middle::dep_graph::hash_result,\n+                    Some(rustc_middle::dep_graph::hash_result),\n                 );\n \n                 if let Some((id, product)) = work_product {"}, {"sha": "a3b8d328388e0d5154dc88fd667b177b504d1b2c", "filename": "compiler/rustc_codegen_gcc/src/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbase.rs?ref=aa404c24ddafea428cb86de8f914b129be4a726b", "patch": "@@ -59,7 +59,13 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol) -> (Modul\n     let start_time = Instant::now();\n \n     let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);\n-    let (module, _) = tcx.dep_graph.with_task(dep_node, tcx, cgu_name, module_codegen, dep_graph::hash_result);\n+    let (module, _) = tcx.dep_graph.with_task(\n+        dep_node,\n+        tcx,\n+        cgu_name,\n+        module_codegen,\n+        Some(dep_graph::hash_result),\n+    );\n     let time_to_codegen = start_time.elapsed();\n     drop(prof_timer);\n "}, {"sha": "8766caef6e37946dafc18feb684dbb8da749e37e", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=aa404c24ddafea428cb86de8f914b129be4a726b", "patch": "@@ -113,8 +113,13 @@ pub fn compile_codegen_unit(\n     let start_time = Instant::now();\n \n     let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);\n-    let (module, _) =\n-        tcx.dep_graph.with_task(dep_node, tcx, cgu_name, module_codegen, dep_graph::hash_result);\n+    let (module, _) = tcx.dep_graph.with_task(\n+        dep_node,\n+        tcx,\n+        cgu_name,\n+        module_codegen,\n+        Some(dep_graph::hash_result),\n+    );\n     let time_to_codegen = start_time.elapsed();\n \n     // We assume that the cost to run LLVM on a CGU is proportional to"}, {"sha": "10dac9953aa8bc476a725f6bc3eea9aa52b94839", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=aa404c24ddafea428cb86de8f914b129be4a726b", "patch": "@@ -291,14 +291,14 @@ macro_rules! is_eval_always {\n }\n \n macro_rules! hash_result {\n-    ([][$hcx:expr, $result:expr]) => {{\n-        dep_graph::hash_result($hcx, &$result)\n+    ([]) => {{\n+        Some(dep_graph::hash_result)\n     }};\n-    ([(no_hash) $($rest:tt)*][$hcx:expr, $result:expr]) => {{\n+    ([(no_hash) $($rest:tt)*]) => {{\n         None\n     }};\n-    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n-        hash_result!([$($modifiers)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        hash_result!([$($modifiers)*])\n     };\n }\n \n@@ -378,6 +378,7 @@ macro_rules! define_queries {\n             const ANON: bool = is_anon!([$($modifiers)*]);\n             const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n             const DEP_KIND: dep_graph::DepKind = dep_graph::DepKind::$name;\n+            const HASH_RESULT: Option<fn(&mut StableHashingContext<'_>, &Self::Value) -> Fingerprint> = hash_result!([$($modifiers)*]);\n \n             type Cache = query_storage::$name<$tcx>;\n \n@@ -406,13 +407,6 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            fn hash_result(\n-                _hcx: &mut StableHashingContext<'_>,\n-                _result: &Self::Value\n-            ) -> Option<Fingerprint> {\n-                hash_result!([$($modifiers)*][_hcx, _result])\n-            }\n-\n             fn handle_cycle_error(\n                 tcx: QueryCtxt<'tcx>,\n                 mut error: DiagnosticBuilder<'_>,"}, {"sha": "66355f7cec9413631510f56a05897c3414dd53bd", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=aa404c24ddafea428cb86de8f914b129be4a726b", "patch": "@@ -96,14 +96,13 @@ struct DepGraphData<K: DepKind> {\n     dep_node_debug: Lock<FxHashMap<DepNode<K>, String>>,\n }\n \n-pub fn hash_result<R>(hcx: &mut StableHashingContext<'_>, result: &R) -> Option<Fingerprint>\n+pub fn hash_result<R>(hcx: &mut StableHashingContext<'_>, result: &R) -> Fingerprint\n where\n     R: for<'a> HashStable<StableHashingContext<'a>>,\n {\n     let mut stable_hasher = StableHasher::new();\n     result.hash_stable(hcx, &mut stable_hasher);\n-\n-    Some(stable_hasher.finish())\n+    stable_hasher.finish()\n }\n \n impl<K: DepKind> DepGraph<K> {\n@@ -215,7 +214,7 @@ impl<K: DepKind> DepGraph<K> {\n         cx: Ctxt,\n         arg: A,\n         task: fn(Ctxt, A) -> R,\n-        hash_result: fn(&mut StableHashingContext<'_>, &R) -> Option<Fingerprint>,\n+        hash_result: Option<fn(&mut StableHashingContext<'_>, &R) -> Fingerprint>,\n     ) -> (R, DepNodeIndex) {\n         if self.is_fully_enabled() {\n             self.with_task_impl(key, cx, arg, task, hash_result)\n@@ -234,7 +233,7 @@ impl<K: DepKind> DepGraph<K> {\n         cx: Ctxt,\n         arg: A,\n         task: fn(Ctxt, A) -> R,\n-        hash_result: fn(&mut StableHashingContext<'_>, &R) -> Option<Fingerprint>,\n+        hash_result: Option<fn(&mut StableHashingContext<'_>, &R) -> Fingerprint>,\n     ) -> (R, DepNodeIndex) {\n         // This function is only called when the graph is enabled.\n         let data = self.data.as_ref().unwrap();\n@@ -268,9 +267,11 @@ impl<K: DepKind> DepGraph<K> {\n         let edges = task_deps.map_or_else(|| smallvec![], |lock| lock.into_inner().reads);\n \n         let dcx = cx.dep_context();\n-        let mut hcx = dcx.create_stable_hashing_context();\n         let hashing_timer = dcx.profiler().incr_result_hashing();\n-        let current_fingerprint = hash_result(&mut hcx, &result);\n+        let current_fingerprint = hash_result.map(|f| {\n+            let mut hcx = dcx.create_stable_hashing_context();\n+            f(&mut hcx, &result)\n+        });\n \n         let print_status = cfg!(debug_assertions) && dcx.sess().opts.debugging_opts.dep_tasks;\n "}, {"sha": "22b0245236bd9f5150d04a1e621a7b092912bcf2", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=aa404c24ddafea428cb86de8f914b129be4a726b", "patch": "@@ -24,7 +24,7 @@ pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n     pub dep_kind: CTX::DepKind,\n     pub eval_always: bool,\n \n-    pub hash_result: fn(&mut StableHashingContext<'_>, &V) -> Option<Fingerprint>,\n+    pub hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n     pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_>) -> V,\n     pub cache_on_disk: fn(CTX, &K, Option<&V>) -> bool,\n     pub try_load_from_disk: fn(CTX, SerializedDepNodeIndex) -> Option<V>,\n@@ -38,14 +38,6 @@ impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n         DepNode::construct(tcx, self.dep_kind, key)\n     }\n \n-    pub(crate) fn hash_result(\n-        &self,\n-        hcx: &mut StableHashingContext<'_>,\n-        value: &V,\n-    ) -> Option<Fingerprint> {\n-        (self.hash_result)(hcx, value)\n-    }\n-\n     pub(crate) fn cache_on_disk(&self, tcx: CTX, key: &K, value: Option<&V>) -> bool {\n         (self.cache_on_disk)(tcx, key, value)\n     }\n@@ -59,6 +51,9 @@ pub trait QueryAccessors<CTX: QueryContext>: QueryConfig {\n     const ANON: bool;\n     const EVAL_ALWAYS: bool;\n     const DEP_KIND: CTX::DepKind;\n+    const HASH_RESULT: Option<\n+        fn(hcx: &mut StableHashingContext<'_>, result: &Self::Value) -> Fingerprint,\n+    >;\n \n     type Cache: QueryCache<Key = Self::Key, Stored = Self::Stored, Value = Self::Value>;\n \n@@ -75,9 +70,6 @@ pub trait QueryAccessors<CTX: QueryContext>: QueryConfig {\n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn compute_fn(tcx: CTX, key: &Self::Key) -> fn(CTX::DepContext, Self::Key) -> Self::Value;\n \n-    fn hash_result(hcx: &mut StableHashingContext<'_>, result: &Self::Value)\n-    -> Option<Fingerprint>;\n-\n     fn handle_cycle_error(tcx: CTX, diag: DiagnosticBuilder<'_>) -> Self::Value;\n }\n \n@@ -107,7 +99,7 @@ where\n         anon: Q::ANON,\n         dep_kind: Q::DEP_KIND,\n         eval_always: Q::EVAL_ALWAYS,\n-        hash_result: Q::hash_result,\n+        hash_result: Q::HASH_RESULT,\n         handle_cycle_error: Q::handle_cycle_error,\n         cache_on_disk: Q::cache_on_disk,\n         try_load_from_disk: Q::try_load_from_disk,"}, {"sha": "e3bfd81b85135f710e86a9fe328eaf23011437ad", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa404c24ddafea428cb86de8f914b129be4a726b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=aa404c24ddafea428cb86de8f914b129be4a726b", "patch": "@@ -577,12 +577,12 @@ fn incremental_verify_ich<CTX, K, V: Debug>(\n     );\n \n     debug!(\"BEGIN verify_ich({:?})\", dep_node);\n-    let mut hcx = tcx.create_stable_hashing_context();\n-\n-    let new_hash = query.hash_result(&mut hcx, result).unwrap_or(Fingerprint::ZERO);\n-    debug!(\"END verify_ich({:?})\", dep_node);\n-\n+    let new_hash = query.hash_result.map_or(Fingerprint::ZERO, |f| {\n+        let mut hcx = tcx.create_stable_hashing_context();\n+        f(&mut hcx, result)\n+    });\n     let old_hash = tcx.dep_graph().prev_fingerprint_of(dep_node);\n+    debug!(\"END verify_ich({:?})\", dep_node);\n \n     if Some(new_hash) != old_hash {\n         let run_cmd = if let Some(crate_name) = &tcx.sess().opts.crate_name {"}]}