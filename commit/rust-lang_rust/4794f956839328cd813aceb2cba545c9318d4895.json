{"sha": "4794f956839328cd813aceb2cba545c9318d4895", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OTRmOTU2ODM5MzI4Y2Q4MTNhY2ViMmNiYTU0NWM5MzE4ZDQ4OTU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-01-05T03:47:23Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-01-05T14:52:14Z"}, "message": "Expand {Path,OsStr}::{to_str,to_string_lossy} doc examples.", "tree": {"sha": "ea31ffb777d275926e1c12da5eacf20112fbc2c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea31ffb777d275926e1c12da5eacf20112fbc2c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4794f956839328cd813aceb2cba545c9318d4895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4794f956839328cd813aceb2cba545c9318d4895", "html_url": "https://github.com/rust-lang/rust/commit/4794f956839328cd813aceb2cba545c9318d4895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4794f956839328cd813aceb2cba545c9318d4895/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b659cfdbce094a790dbb246da2681a47565782a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b659cfdbce094a790dbb246da2681a47565782a", "html_url": "https://github.com/rust-lang/rust/commit/7b659cfdbce094a790dbb246da2681a47565782a"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "175fe30db661ce149445780742a63725765d757f", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4794f956839328cd813aceb2cba545c9318d4895/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4794f956839328cd813aceb2cba545c9318d4895/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=4794f956839328cd813aceb2cba545c9318d4895", "patch": "@@ -259,6 +259,15 @@ impl OsStr {\n     /// Yields a `&str` slice if the `OsStr` is valid Unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n@@ -267,6 +276,20 @@ impl OsStr {\n     /// Converts an `OsStr` to a `Cow<str>`.\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Calling `to_string_lossy` on an `OsStr` with valid unicode:\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// assert_eq!(os_str.to_string_lossy(), \"foo\");\n+    /// ```\n+    ///\n+    /// Had `os_str` contained invalid unicode, the `to_string_lossy` call might\n+    /// have returned `\"fo\ufffd\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()"}, {"sha": "3f9bf70adde22557cadf3f7fb5e16d6d51479d86", "filename": "src/libstd/path.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4794f956839328cd813aceb2cba545c9318d4895/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4794f956839328cd813aceb2cba545c9318d4895/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=4794f956839328cd813aceb2cba545c9318d4895", "patch": "@@ -1428,8 +1428,8 @@ impl Path {\n     /// ```\n     /// use std::path::Path;\n     ///\n-    /// let path_str = Path::new(\"foo.txt\").to_str();\n-    /// assert_eq!(path_str, Some(\"foo.txt\"));\n+    /// let path = Path::new(\"foo.txt\");\n+    /// assert_eq!(path.to_str(), Some(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_str(&self) -> Option<&str> {\n@@ -1444,12 +1444,17 @@ impl Path {\n     ///\n     /// # Examples\n     ///\n+    /// Calling `to_string_lossy` on a `Path` with valid unicode:\n+    ///\n     /// ```\n     /// use std::path::Path;\n     ///\n-    /// let path_str = Path::new(\"foo.txt\").to_string_lossy();\n-    /// assert_eq!(path_str, \"foo.txt\");\n+    /// let path = Path::new(\"foo.txt\");\n+    /// assert_eq!(path.to_string_lossy(), \"foo.txt\");\n     /// ```\n+    ///\n+    /// Had `os_str` contained invalid unicode, the `to_string_lossy` call might\n+    /// have returned `\"fo\ufffd.txt\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()"}]}