{"sha": "1baba9a2e29b72b0d61b86605f9e63f4ca57799c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYWJhOWEyZTI5YjcyYjBkNjFiODY2MDVmOWU2M2Y0Y2E1Nzc5OWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-29T15:07:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-29T15:07:56Z"}, "message": "Minor", "tree": {"sha": "33539019b2948466a45aa910130e9e05f79b6855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33539019b2948466a45aa910130e9e05f79b6855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1baba9a2e29b72b0d61b86605f9e63f4ca57799c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1baba9a2e29b72b0d61b86605f9e63f4ca57799c", "html_url": "https://github.com/rust-lang/rust/commit/1baba9a2e29b72b0d61b86605f9e63f4ca57799c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1baba9a2e29b72b0d61b86605f9e63f4ca57799c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2c2e62eb6fccddae6bcc2ae22b83f209d05d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2c2e62eb6fccddae6bcc2ae22b83f209d05d0c", "html_url": "https://github.com/rust-lang/rust/commit/2e2c2e62eb6fccddae6bcc2ae22b83f209d05d0c"}], "stats": {"total": 88, "additions": 41, "deletions": 47}, "files": [{"sha": "2872d01e9146c50a40aba54f984c4cf83b148b5b", "filename": "crates/libanalysis/src/api.rs", "status": "modified", "additions": 41, "deletions": 47, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/1baba9a2e29b72b0d61b86605f9e63f4ca57799c/crates%2Flibanalysis%2Fsrc%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1baba9a2e29b72b0d61b86605f9e63f4ca57799c/crates%2Flibanalysis%2Fsrc%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fapi.rs?ref=1baba9a2e29b72b0d61b86605f9e63f4ca57799c", "patch": "@@ -8,6 +8,45 @@ pub use libeditor::{\n     Runnable, RunnableKind, HighlightedRange, CompletionItem\n };\n \n+#[derive(Debug)]\n+pub struct SourceChange {\n+    pub label: String,\n+    pub source_file_edits: Vec<SourceFileEdit>,\n+    pub file_system_edits: Vec<FileSystemEdit>,\n+    pub cursor_position: Option<Position>,\n+}\n+\n+#[derive(Debug)]\n+pub struct Position {\n+    pub file_id: FileId,\n+    pub offset: TextUnit,\n+}\n+\n+#[derive(Debug)]\n+pub struct SourceFileEdit {\n+    pub file_id: FileId,\n+    pub edits: Vec<AtomEdit>,\n+}\n+\n+#[derive(Debug)]\n+pub enum FileSystemEdit {\n+    CreateFile {\n+        anchor: FileId,\n+        path: RelativePathBuf,\n+    },\n+    MoveFile {\n+        file: FileId,\n+        path: RelativePathBuf,\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct Diagnostic {\n+    pub message: String,\n+    pub range: TextRange,\n+    pub fix: Option<SourceChange>,\n+}\n+\n #[derive(Clone, Debug)]\n pub struct Analysis {\n     pub(crate) imp: World\n@@ -34,17 +73,11 @@ impl Analysis {\n     }\n     pub fn join_lines(&self, file_id: FileId, range: TextRange) -> SourceChange {\n         let file = self.file_syntax(file_id);\n-        SourceChange::from_local_edit(\n-            file_id, \"join lines\",\n-            libeditor::join_lines(&file, range),\n-        )\n+        SourceChange::from_local_edit(file_id, \"join lines\", libeditor::join_lines(&file, range))\n     }\n     pub fn on_eq_typed(&self, file_id: FileId, offset: TextUnit) -> Option<SourceChange> {\n         let file = self.file_syntax(file_id);\n-        Some(SourceChange::from_local_edit(\n-            file_id, \"add semicolon\",\n-            libeditor::on_eq_typed(&file, offset)?,\n-        ))\n+        Some(SourceChange::from_local_edit(file_id, \"add semicolon\", libeditor::on_eq_typed(&file, offset)?))\n     }\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n         let file = self.file_syntax(file_id);\n@@ -80,45 +113,6 @@ impl Analysis {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct SourceChange {\n-    pub label: String,\n-    pub source_file_edits: Vec<SourceFileEdit>,\n-    pub file_system_edits: Vec<FileSystemEdit>,\n-    pub cursor_position: Option<Position>,\n-}\n-\n-#[derive(Debug)]\n-pub struct Position {\n-    pub file_id: FileId,\n-    pub offset: TextUnit,\n-}\n-\n-#[derive(Debug)]\n-pub struct SourceFileEdit {\n-    pub file_id: FileId,\n-    pub edits: Vec<AtomEdit>,\n-}\n-\n-#[derive(Debug)]\n-pub enum FileSystemEdit {\n-    CreateFile {\n-        anchor: FileId,\n-        path: RelativePathBuf,\n-    },\n-    MoveFile {\n-        file: FileId,\n-        path: RelativePathBuf,\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct Diagnostic {\n-    pub message: String,\n-    pub range: TextRange,\n-    pub fix: Option<SourceChange>,\n-}\n-\n impl SourceChange {\n     pub(crate) fn from_local_edit(file_id: FileId, label: &str, edit: LocalEdit) -> SourceChange {\n         let file_edit = SourceFileEdit {"}]}