{"sha": "3e7035fa86af022ed047e7a1b1540584e2b61234", "node_id": "C_kwDOAAsO6NoAKDNlNzAzNWZhODZhZjAyMmVkMDQ3ZTdhMWIxNTQwNTg0ZTJiNjEyMzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-07T15:25:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-07T15:25:42Z"}, "message": "Auto merge of #94690 - nnethercote:clarify-Layout-interning, r=fee1-dead\n\nClarify `Layout` interning.\n\n`Layout` is another type that is sometimes interned, sometimes not, and\nwe always use references to refer to it so we can't take any advantage\nof the uniqueness properties for hashing or equality checks.\n\nThis commit renames `Layout` as `LayoutS`, and then introduces a new\n`Layout` that is a newtype around an `Interned<LayoutS>`. It also\ninterns more layouts than before. Previously layouts within layouts\n(via the `variants` field) were never interned, but now they are. Hence\nthe lifetime on the new `Layout` type.\n\nUnlike other interned types, these ones are in `rustc_target` instead of\n`rustc_middle`. This reflects the existing structure of the code, which\ndoes layout-specific stuff in `rustc_target` while `TyAndLayout` is\ngeneric over the `Ty`, allowing the type-specific stuff to occur in\n`rustc_middle`.\n\nThe commit also adds a `HashStable` impl for `Interned`, which was\nneeded. It hashes the contents, unlike the `Hash` impl which hashes the\npointer.\n\nr? `@fee1-dead`", "tree": {"sha": "e563ceaf0c64754f41109fdd6927a56ef9db7cd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e563ceaf0c64754f41109fdd6927a56ef9db7cd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e7035fa86af022ed047e7a1b1540584e2b61234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7035fa86af022ed047e7a1b1540584e2b61234", "html_url": "https://github.com/rust-lang/rust/commit/3e7035fa86af022ed047e7a1b1540584e2b61234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e7035fa86af022ed047e7a1b1540584e2b61234/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e36868bc7a94c5a282ff3598744c72e621276ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e36868bc7a94c5a282ff3598744c72e621276ca", "html_url": "https://github.com/rust-lang/rust/commit/0e36868bc7a94c5a282ff3598744c72e621276ca"}, {"sha": "d35fc85a44b99022d7e7fd506b72e2bbfe5c19bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d35fc85a44b99022d7e7fd506b72e2bbfe5c19bb", "html_url": "https://github.com/rust-lang/rust/commit/d35fc85a44b99022d7e7fd506b72e2bbfe5c19bb"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "ef213f5636907811ad4c0354e1e99153f5dfe287", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e7035fa86af022ed047e7a1b1540584e2b61234/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7035fa86af022ed047e7a1b1540584e2b61234/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=3e7035fa86af022ed047e7a1b1540584e2b61234", "patch": "@@ -272,20 +272,20 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     use rustc_target::abi::Abi::*;\n                     let tp_ty = substs.type_at(0);\n                     let layout = self.layout_of(tp_ty).layout;\n-                    let _use_integer_compare = match layout.abi {\n+                    let _use_integer_compare = match layout.abi() {\n                         Scalar(_) | ScalarPair(_, _) => true,\n                         Uninhabited | Vector { .. } => false,\n                         Aggregate { .. } => {\n                             // For rusty ABIs, small aggregates are actually passed\n                             // as `RegKind::Integer` (see `FnAbi::adjust_for_abi`),\n                             // so we re-use that same threshold here.\n-                            layout.size <= self.data_layout().pointer_size * 2\n+                            layout.size() <= self.data_layout().pointer_size * 2\n                         }\n                     };\n \n                     let a = args[0].immediate();\n                     let b = args[1].immediate();\n-                    if layout.size.bytes() == 0 {\n+                    if layout.size().bytes() == 0 {\n                         self.const_bool(true)\n                     }\n                     /*else if use_integer_compare {\n@@ -301,7 +301,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                         let void_ptr_type = self.context.new_type::<*const ()>();\n                         let a_ptr = self.bitcast(a, void_ptr_type);\n                         let b_ptr = self.bitcast(b, void_ptr_type);\n-                        let n = self.context.new_cast(None, self.const_usize(layout.size.bytes()), self.sizet_type);\n+                        let n = self.context.new_cast(None, self.const_usize(layout.size().bytes()), self.sizet_type);\n                         let builtin = self.context.get_builtin_function(\"memcmp\");\n                         let cmp = self.context.new_call(None, builtin, &[a_ptr, b_ptr, n]);\n                         self.icmp(IntPredicate::IntEQ, cmp, self.const_i32(0))"}]}