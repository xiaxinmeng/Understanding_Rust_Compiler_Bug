{"sha": "ddeaea228723ffa84a17898e08727e0c55a304a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZWFlYTIyODcyM2ZmYTg0YTE3ODk4ZTA4NzI3ZTBjNTVhMzA0YTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-09T00:34:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-09T00:34:36Z"}, "message": "rustc: Change the address-of operator to an explicit production so that we can parse the mutability", "tree": {"sha": "cfdcd22f5f528fa0258be04839a06c7f2cadddf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfdcd22f5f528fa0258be04839a06c7f2cadddf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddeaea228723ffa84a17898e08727e0c55a304a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddeaea228723ffa84a17898e08727e0c55a304a1", "html_url": "https://github.com/rust-lang/rust/commit/ddeaea228723ffa84a17898e08727e0c55a304a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddeaea228723ffa84a17898e08727e0c55a304a1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0722786664eaa6008e8fe6536a8c20cac0a81938", "url": "https://api.github.com/repos/rust-lang/rust/commits/0722786664eaa6008e8fe6536a8c20cac0a81938", "html_url": "https://github.com/rust-lang/rust/commit/0722786664eaa6008e8fe6536a8c20cac0a81938"}], "stats": {"total": 152, "additions": 97, "deletions": 55}, "files": [{"sha": "05f351c3d3c0415ff591f130bfdb7cfb30edef6a", "filename": "src/rustc/metadata/astencode_gen.rs", "status": "modified", "additions": 60, "deletions": 37, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode_gen.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -1393,7 +1393,6 @@ fn serialize_81<S: std::serialization::serializer>(s: S,\n                 /*syntax::ast::mutability*/\n \n \n-\n                 {||\n                     alt v {\n                       syntax::ast::box(v0) {\n@@ -1430,10 +1429,6 @@ fn serialize_81<S: std::serialization::serializer>(s: S,\n                       syntax::ast::neg {\n                         s.emit_enum_variant(\"syntax::ast::neg\", 4u, 0u, {|| })\n                       }\n-                      syntax::ast::addr_of {\n-                        s.emit_enum_variant(\"syntax::ast::addr_of\", 5u, 0u,\n-                                            {|| })\n-                      }\n                     }\n                 });\n }\n@@ -2426,6 +2421,7 @@ fn serialize_73<S: std::serialization::serializer>(s: S,\n                 /*[@syntax::ast::ty]*/\n                 /*@syntax::ast::expr*//*@syntax::ast::expr*/\n                 /*@syntax::ast::path*/\n+                /*syntax::ast::mutability*//*@syntax::ast::expr*/\n                 /*core::option::t<@syntax::ast::expr>*/\n \n \n@@ -2893,8 +2889,26 @@ fn serialize_73<S: std::serialization::serializer>(s: S,\n                                                 }\n                                             })\n                       }\n+                      syntax::ast::expr_addr_of(v0, v1) {\n+                        s.emit_enum_variant(\"syntax::ast::expr_addr_of\", 25u,\n+                                            2u,\n+                                            {||\n+                                                {\n+                                                    s.emit_enum_variant_arg(0u,\n+                                                                            {||\n+                                                                                serialize_33(s,\n+                                                                                             v0)\n+                                                                            });\n+                                                    s.emit_enum_variant_arg(1u,\n+                                                                            {||\n+                                                                                serialize_71(s,\n+                                                                                             v1)\n+                                                                            })\n+                                                }\n+                                            })\n+                      }\n                       syntax::ast::expr_fail(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_fail\", 25u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_fail\", 26u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2906,15 +2920,15 @@ fn serialize_73<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_break {\n-                        s.emit_enum_variant(\"syntax::ast::expr_break\", 26u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_break\", 27u,\n                                             0u, {|| })\n                       }\n                       syntax::ast::expr_cont {\n-                        s.emit_enum_variant(\"syntax::ast::expr_cont\", 27u, 0u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_cont\", 28u, 0u,\n                                             {|| })\n                       }\n                       syntax::ast::expr_ret(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_ret\", 28u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_ret\", 29u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2926,7 +2940,7 @@ fn serialize_73<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_be(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_be\", 29u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_be\", 30u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2938,7 +2952,7 @@ fn serialize_73<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_log(v0, v1, v2) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_log\", 30u, 3u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_log\", 31u, 3u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2960,7 +2974,7 @@ fn serialize_73<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_assert(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_assert\", 31u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_assert\", 32u,\n                                             1u,\n                                             {||\n                                                 {\n@@ -2973,7 +2987,7 @@ fn serialize_73<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_check(v0, v1) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_check\", 32u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_check\", 33u,\n                                             2u,\n                                             {||\n                                                 {\n@@ -2991,7 +3005,7 @@ fn serialize_73<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_if_check(v0, v1, v2) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_if_check\", 33u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_if_check\", 34u,\n                                             3u,\n                                             {||\n                                                 {\n@@ -3014,7 +3028,7 @@ fn serialize_73<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_mac(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_mac\", 34u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_mac\", 35u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -5550,8 +5564,6 @@ fn deserialize_81<S: std::serialization::deserializer>(s: S) ->\n \n \n \n-\n-\n                 {||\n                     s.read_enum_variant({|v_id|\n                                             alt check v_id {\n@@ -5570,7 +5582,6 @@ fn deserialize_81<S: std::serialization::deserializer>(s: S) ->\n                                               2u { syntax::ast::deref }\n                                               3u { syntax::ast::not }\n                                               4u { syntax::ast::neg }\n-                                              5u { syntax::ast::addr_of }\n                                             }\n                                         })\n                 })\n@@ -6580,6 +6591,8 @@ fn deserialize_73<S: std::serialization::deserializer>(s: S) ->\n \n                 /*@syntax::ast::path*/\n \n+                /*syntax::ast::mutability*//*@syntax::ast::expr*/\n+\n                 /*core::option::t<@syntax::ast::expr>*/\n \n \n@@ -6870,26 +6883,36 @@ fn deserialize_73<S: std::serialization::deserializer>(s: S) ->\n                                                                                                }))\n                                               }\n                                               25u {\n+                                                syntax::ast::expr_addr_of(s.read_enum_variant_arg(0u,\n+                                                                                                  {||\n+                                                                                                      deserialize_33(s)\n+                                                                                                  }),\n+                                                                          s.read_enum_variant_arg(1u,\n+                                                                                                  {||\n+                                                                                                      deserialize_71(s)\n+                                                                                                  }))\n+                                              }\n+                                              26u {\n                                                 syntax::ast::expr_fail(s.read_enum_variant_arg(0u,\n                                                                                                {||\n                                                                                                    deserialize_78(s)\n                                                                                                }))\n                                               }\n-                                              26u { syntax::ast::expr_break }\n-                                              27u { syntax::ast::expr_cont }\n-                                              28u {\n+                                              27u { syntax::ast::expr_break }\n+                                              28u { syntax::ast::expr_cont }\n+                                              29u {\n                                                 syntax::ast::expr_ret(s.read_enum_variant_arg(0u,\n                                                                                               {||\n                                                                                                   deserialize_78(s)\n                                                                                               }))\n                                               }\n-                                              29u {\n+                                              30u {\n                                                 syntax::ast::expr_be(s.read_enum_variant_arg(0u,\n                                                                                              {||\n                                                                                                  deserialize_71(s)\n                                                                                              }))\n                                               }\n-                                              30u {\n+                                              31u {\n                                                 syntax::ast::expr_log(s.read_enum_variant_arg(0u,\n                                                                                               {||\n                                                                                                   deserialize_128(s)\n@@ -6903,13 +6926,13 @@ fn deserialize_73<S: std::serialization::deserializer>(s: S) ->\n                                                                                                   deserialize_71(s)\n                                                                                               }))\n                                               }\n-                                              31u {\n+                                              32u {\n                                                 syntax::ast::expr_assert(s.read_enum_variant_arg(0u,\n                                                                                                  {||\n                                                                                                      deserialize_71(s)\n                                                                                                  }))\n                                               }\n-                                              32u {\n+                                              33u {\n                                                 syntax::ast::expr_check(s.read_enum_variant_arg(0u,\n                                                                                                 {||\n                                                                                                     deserialize_129(s)\n@@ -6919,7 +6942,7 @@ fn deserialize_73<S: std::serialization::deserializer>(s: S) ->\n                                                                                                     deserialize_71(s)\n                                                                                                 }))\n                                               }\n-                                              33u {\n+                                              34u {\n                                                 syntax::ast::expr_if_check(s.read_enum_variant_arg(0u,\n                                                                                                    {||\n                                                                                                        deserialize_71(s)\n@@ -6933,7 +6956,7 @@ fn deserialize_73<S: std::serialization::deserializer>(s: S) ->\n                                                                                                        deserialize_78(s)\n                                                                                                    }))\n                                               }\n-                                              34u {\n+                                              35u {\n                                                 syntax::ast::expr_mac(s.read_enum_variant_arg(0u,\n                                                                                               {||\n                                                                                                   deserialize_68(s)\n@@ -8171,7 +8194,7 @@ fn serialize_164<S: std::serialization::serializer>(s: S,\n \n     s.emit_enum(\"syntax::ast::def\",\n                 /*syntax::ast::def_id*//*syntax::ast::purity*/\n-                /*syntax::ast::def_id*/\n+                /*syntax::ast::node_id*/\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*/\n@@ -8534,7 +8557,7 @@ fn deserialize_164<S: std::serialization::deserializer>(s: S) ->\n     s.read_enum(\"syntax::ast::def\",\n                 /*syntax::ast::def_id*//*syntax::ast::purity*/\n \n-                /*syntax::ast::def_id*/\n+                /*syntax::ast::node_id*/\n \n                 /*syntax::ast::def_id*/\n \n@@ -8985,7 +9008,7 @@ fn deserialize_syntax_ast_inlined_item<S: std::serialization::deserializer>(s:\n     deserialize_171(s)\n }\n /*[syntax::ast::node_id]*/\n-fn serialize_172<S: std::serialization::serializer>(s: S,\n+fn serialize_173<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         [syntax::ast::node_id]) {\n     s.emit_vec(vec::len(v), /*syntax::ast::node_id*/\n@@ -8997,7 +9020,7 @@ fn serialize_172<S: std::serialization::serializer>(s: S,\n                });\n }\n /*middle::last_use::is_last_use*/\n-fn serialize_173<S: std::serialization::serializer>(s: S,\n+fn serialize_172<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         middle::last_use::is_last_use) {\n     s.emit_enum(\"middle::last_use::is_last_use\",\n@@ -9021,7 +9044,7 @@ fn serialize_173<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_172(s,\n+                                                                                serialize_173(s,\n                                                                                               v0)\n                                                                             })\n                                                 }\n@@ -9034,10 +9057,10 @@ fn serialize_middle_last_use_is_last_use<S: std::serialization::serializer>(s:\n                                                                                 S,\n                                                                             v:\n                                                                                 middle::last_use::is_last_use) {\n-    serialize_173(s, v);\n+    serialize_172(s, v);\n }\n /*[syntax::ast::node_id]*/\n-fn deserialize_172<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_173<S: std::serialization::deserializer>(s: S) ->\n    [syntax::ast::node_id] {\n     s.read_vec(\n \n@@ -9050,7 +9073,7 @@ fn deserialize_172<S: std::serialization::deserializer>(s: S) ->\n                })\n }\n /*middle::last_use::is_last_use*/\n-fn deserialize_173<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_172<S: std::serialization::deserializer>(s: S) ->\n    middle::last_use::is_last_use {\n     s.read_enum(\"middle::last_use::is_last_use\",\n \n@@ -9070,7 +9093,7 @@ fn deserialize_173<S: std::serialization::deserializer>(s: S) ->\n                                               2u {\n                                                 middle::last_use::closes_over(s.read_enum_variant_arg(0u,\n                                                                                                       {||\n-                                                                                                          deserialize_172(s)\n+                                                                                                          deserialize_173(s)\n                                                                                                       }))\n                                               }\n                                             }\n@@ -9080,5 +9103,5 @@ fn deserialize_173<S: std::serialization::deserializer>(s: S) ->\n fn deserialize_middle_last_use_is_last_use<S: std::serialization::deserializer>(s:\n                                                                                     S)\n    -> middle::last_use::is_last_use {\n-    deserialize_173(s)\n+    deserialize_172(s)\n }"}, {"sha": "e6b1fdb4dd0067076a678524fdd4a25461a5a754", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -1645,18 +1645,19 @@ fn trans_unary(bcx: block, op: ast::unop, e: @ast::expr,\n                                translated using trans_lval(), not \\\n                                trans_unary()\");\n       }\n-      ast::addr_of {\n-        // FIXME: This is wrong.\n-        let {bcx, val, kind} = trans_temp_lval(bcx, e);\n-        if kind != owned {\n-            bcx.sess().span_bug(e.span,\n-                                \"can't take the address of an rvalue\");\n-        }\n-        ret store_in_dest(bcx, val, dest);\n-      }\n     }\n }\n \n+fn trans_addr_of(cx: block, e: @ast::expr, dest: dest) -> block {\n+    // FIXME: This is wrong.\n+    let {bcx, val, kind} = trans_temp_lval(cx, e);\n+    if kind != owned {\n+        bcx.sess().span_bug(e.span,\n+                            \"can't take the address of an rvalue\");\n+    }\n+    ret store_in_dest(bcx, val, dest);\n+}\n+\n fn trans_compare(cx: block, op: ast::binop, lhs: ValueRef,\n                  _lhs_t: ty::t, rhs: ValueRef, rhs_t: ty::t) -> result {\n     if ty::type_is_scalar(rhs_t) {\n@@ -3151,6 +3152,7 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n         assert op != ast::deref; // lvals are handled above\n         ret trans_unary(bcx, op, x, e, dest);\n       }\n+      ast::expr_addr_of(_, x) { ret trans_addr_of(bcx, x, dest); }\n       ast::expr_fn(proto, decl, body, cap_clause) {\n         ret closure::trans_expr_fn(\n             bcx, proto, decl, body, e.span, e.id, *cap_clause, dest);\n@@ -4307,8 +4309,7 @@ fn trans_const_expr(cx: crate_ctxt, e: @ast::expr) -> ValueRef {\n         ret alt u {\n           ast::box(_)  |\n           ast::uniq(_) |\n-          ast::deref   |\n-          ast::addr_of { cx.sess.span_bug(e.span,\n+          ast::deref   { cx.sess.span_bug(e.span,\n                            \"bad unop type in trans_const_expr\"); }\n           ast::not    { llvm::LLVMConstNot(te) }\n           ast::neg    {"}, {"sha": "c5c281ed74e130faf6084dcd6eb4e243a084a338", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -409,6 +409,10 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         find_pre_post_expr(fcx, operand);\n         copy_pre_post(fcx.ccx, e.id, operand);\n       }\n+      expr_addr_of(_, operand) {\n+        find_pre_post_expr(fcx, operand);\n+        copy_pre_post(fcx.ccx, e.id, operand);\n+      }\n       expr_cast(operand, _) {\n         find_pre_post_expr(fcx, operand);\n         copy_pre_post(fcx.ccx, e.id, operand);"}, {"sha": "31f50881f2c2c372922041579b81051912cf31f0", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -587,6 +587,9 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n       expr_unary(_, operand) {\n         ret find_pre_post_state_sub(fcx, pres, operand, e.id, none);\n       }\n+      expr_addr_of(_, operand) {\n+        ret find_pre_post_state_sub(fcx, pres, operand, e.id, none);\n+      }\n       expr_cast(operand, _) {\n         ret find_pre_post_state_sub(fcx, pres, operand, e.id, none);\n       }"}, {"sha": "ccb6a018d92cfb7ba6d06e5e3eb093d982d93a49", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -2198,14 +2198,17 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                 oper_t = check_user_unop(fcx, \"-\", \"unary-\", expr, oper_t);\n             }\n           }\n-          ast::addr_of {\n-            // FIXME: This is incorrect. Infer the proper region.\n-            let tm = { ty: oper_t, mutbl: ast::m_imm };\n-            oper_t = ty::mk_rptr(tcx, ty::re_block(0), tm);\n-          }\n         }\n         write_ty(tcx, id, oper_t);\n       }\n+      ast::expr_addr_of(mutbl, oper) {\n+        bot = check_expr(fcx, oper);\n+        let oper_t = expr_ty(tcx, oper);\n+\n+        // FIXME: This is incorrect. Infer the proper region.\n+        let tm = { ty: oper_t, mutbl: mutbl };\n+        oper_t = ty::mk_rptr(tcx, ty::re_block(0), tm);\n+      }\n       ast::expr_path(pth) {\n         let defn = lookup_def(fcx, pth.span, id);\n "}, {"sha": "d5f198a6a8c4d267df8b3dd1c962f5b0645d31b9", "filename": "src/rustc/syntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -159,7 +159,7 @@ enum binop {\n enum unop {\n     box(mutability),\n     uniq(mutability),\n-    deref, not, neg, addr_of\n+    deref, not, neg\n }\n \n // Generally, after typeck you can get the inferred value\n@@ -245,6 +245,7 @@ enum expr_ {\n     expr_field(@expr, ident, [@ty]),\n     expr_index(@expr, @expr),\n     expr_path(@path),\n+    expr_addr_of(mutability, @expr),\n     expr_fail(option<@expr>),\n     expr_break,\n     expr_cont,"}, {"sha": "6b461fbc7ecfd52b6bea1ea21da4f7b8441f8c77", "filename": "src/rustc/syntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Ffold.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -402,6 +402,7 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_unary(binop, ohs) { expr_unary(binop, fld.fold_expr(ohs)) }\n           expr_lit(_) { e }\n           expr_cast(expr, ty) { expr_cast(fld.fold_expr(expr), ty) }\n+          expr_addr_of(m, ohs) { expr_addr_of(m, fld.fold_expr(ohs)) }\n           expr_if(cond, tr, fl) {\n             expr_if(fld.fold_expr(cond), fld.fold_block(tr),\n                     option::map(fl, fld.fold_expr))"}, {"sha": "d7f0982adde9c6eee5f087345da3eddaba395f46", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -1129,9 +1129,10 @@ fn parse_prefix_expr(p: parser) -> pexpr {\n           }\n           token::AND {\n             p.bump();\n+            let m = parse_mutability(p);\n             let e = to_expr(parse_prefix_expr(p));\n             hi = e.span.hi;\n-            ex = ast::expr_unary(ast::addr_of, e);\n+            ex = ast::expr_addr_of(m, e);\n           }\n           _ { ret parse_dot_or_call_expr(p); }\n         }"}, {"sha": "94fdc20d0eeec8c6861d62222233a2a9b0a50d59", "filename": "src/rustc/syntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -877,6 +877,10 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         word(s.s, ast_util::unop_to_str(op));\n         print_op_maybe_parens(s, expr, parse::parser::unop_prec);\n       }\n+      ast::expr_addr_of(m, expr) {\n+        print_mutability(s, m);\n+        print_expr(s, expr);\n+      }\n       ast::expr_lit(lit) { print_literal(s, lit); }\n       ast::expr_cast(expr, ty) {\n         print_op_maybe_parens(s, expr, parse::parser::as_prec);"}, {"sha": "01aaac48f4aa51b3663f3d19c0e6809ead5b0457", "filename": "src/rustc/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeaea228723ffa84a17898e08727e0c55a304a1/src%2Frustc%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fvisit.rs?ref=ddeaea228723ffa84a17898e08727e0c55a304a1", "patch": "@@ -331,6 +331,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       expr_unary(_, a) { v.visit_expr(a, e, v); }\n       expr_lit(_) { }\n       expr_cast(x, t) { v.visit_expr(x, e, v); v.visit_ty(t, e, v); }\n+      expr_addr_of(_, x) { v.visit_expr(x, e, v); }\n       expr_if(x, b, eo) {\n         v.visit_expr(x, e, v);\n         v.visit_block(b, e, v);"}]}