{"sha": "3d41358a554cb70e23e001f6ac92cf79d805b671", "node_id": "C_kwDOAAsO6NoAKDNkNDEzNThhNTU0Y2I3MGUyM2UwMDFmNmFjOTJjZjc5ZDgwNWI2NzE", "commit": {"author": {"name": "Nick Mathewson", "email": "nickm@torproject.org", "date": "2022-01-01T04:39:40Z"}, "committer": {"name": "Nick Mathewson", "email": "nickm@torproject.org", "date": "2022-01-01T04:39:40Z"}, "message": "wrong_self_convention: Match `SelfKind::No` more restrictively\n\nThe `wrong_self_convention` lint uses a `SelfKind` type to decide\nwhether a method has the right kind of \"self\" for its name, or whether\nthe kind of \"self\" it has makes its name confusable for a method in\na common trait.  One possibility is `SelfKind::No`, which is supposed\nto mean \"No `self`\".\n\nPreviously, SelfKind::No matched everything _except_ Self, including\nreferences to Self.  This patch changes it to match Self, &Self, &mut\nSelf, Box<Self>, and so on.\n\nFor example, this kind of method was allowed before:\n\n```\nimpl S {\n    // Should trigger the lint, because\n    // \"methods called `is_*` usually take `self` by reference or no `self`\"\n    fn is_foo(&mut self) -> bool { todo!() }\n}\n```\n\nBut since SelfKind::No matched \"&mut self\", no lint was triggered\n(see #8142).\n\nWith this patch, the code above now gives a lint as expected.\n\nFixes #8142\n\nchangelog: [`wrong_self_convention`] rejects `self` references in more cases", "tree": {"sha": "d1f9ff6e249419ea76c29190895b493353a1311b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1f9ff6e249419ea76c29190895b493353a1311b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d41358a554cb70e23e001f6ac92cf79d805b671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d41358a554cb70e23e001f6ac92cf79d805b671", "html_url": "https://github.com/rust-lang/rust/commit/3d41358a554cb70e23e001f6ac92cf79d805b671", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d41358a554cb70e23e001f6ac92cf79d805b671/comments", "author": {"login": "nmathewson", "id": 162054, "node_id": "MDQ6VXNlcjE2MjA1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/162054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmathewson", "html_url": "https://github.com/nmathewson", "followers_url": "https://api.github.com/users/nmathewson/followers", "following_url": "https://api.github.com/users/nmathewson/following{/other_user}", "gists_url": "https://api.github.com/users/nmathewson/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmathewson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmathewson/subscriptions", "organizations_url": "https://api.github.com/users/nmathewson/orgs", "repos_url": "https://api.github.com/users/nmathewson/repos", "events_url": "https://api.github.com/users/nmathewson/events{/privacy}", "received_events_url": "https://api.github.com/users/nmathewson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nmathewson", "id": 162054, "node_id": "MDQ6VXNlcjE2MjA1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/162054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmathewson", "html_url": "https://github.com/nmathewson", "followers_url": "https://api.github.com/users/nmathewson/followers", "following_url": "https://api.github.com/users/nmathewson/following{/other_user}", "gists_url": "https://api.github.com/users/nmathewson/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmathewson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmathewson/subscriptions", "organizations_url": "https://api.github.com/users/nmathewson/orgs", "repos_url": "https://api.github.com/users/nmathewson/repos", "events_url": "https://api.github.com/users/nmathewson/events{/privacy}", "received_events_url": "https://api.github.com/users/nmathewson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c736a63123ba7aa2c1d2352a874d8e79a101224f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c736a63123ba7aa2c1d2352a874d8e79a101224f", "html_url": "https://github.com/rust-lang/rust/commit/c736a63123ba7aa2c1d2352a874d8e79a101224f"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "8a2a468c852338e9b2c7b66e84a92e9688d78485", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d41358a554cb70e23e001f6ac92cf79d805b671/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d41358a554cb70e23e001f6ac92cf79d805b671/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3d41358a554cb70e23e001f6ac92cf79d805b671", "patch": "@@ -2535,11 +2535,17 @@ impl SelfKind {\n             implements_trait(cx, ty, trait_def_id, &[parent_ty.into()])\n         }\n \n+        fn matches_none<'a>(cx: &LateContext<'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n+            !matches_value(cx, parent_ty, ty)\n+                && !matches_ref(cx, hir::Mutability::Not, parent_ty, ty)\n+                && !matches_ref(cx, hir::Mutability::Mut, parent_ty, ty)\n+        }\n+\n         match self {\n             Self::Value => matches_value(cx, parent_ty, ty),\n             Self::Ref => matches_ref(cx, hir::Mutability::Not, parent_ty, ty) || ty == parent_ty && is_copy(cx, ty),\n             Self::RefMut => matches_ref(cx, hir::Mutability::Mut, parent_ty, ty),\n-            Self::No => ty != parent_ty,\n+            Self::No => matches_none(cx, parent_ty, ty),\n         }\n     }\n "}, {"sha": "1991a01fb60be44ec352ff402e381772e565c9dd", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d41358a554cb70e23e001f6ac92cf79d805b671/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d41358a554cb70e23e001f6ac92cf79d805b671/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=3d41358a554cb70e23e001f6ac92cf79d805b671", "patch": "@@ -220,7 +220,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                     continue;\n                 } else if let Some(loc) = clone_usage.cloned_consume_or_mutate_loc {\n                     // cloned value is mutated, and the clone is alive.\n-                    if possible_borrower.is_alive_at(ret_local, loc) {\n+                    if possible_borrower.local_is_alive_at(ret_local, loc) {\n                         continue;\n                     }\n                 }\n@@ -767,7 +767,7 @@ impl PossibleBorrowerMap<'_, '_> {\n         self.bitset.0 == self.bitset.1\n     }\n \n-    fn is_alive_at(&mut self, local: mir::Local, at: mir::Location) -> bool {\n+    fn local_is_alive_at(&mut self, local: mir::Local, at: mir::Location) -> bool {\n         self.maybe_live.seek_after_primary_effect(at);\n         self.maybe_live.contains(local)\n     }"}, {"sha": "e5042aaa776b4dbceeaa9297cc91535d4a23cad2", "filename": "tests/ui/issue_4266.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d41358a554cb70e23e001f6ac92cf79d805b671/tests%2Fui%2Fissue_4266.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d41358a554cb70e23e001f6ac92cf79d805b671/tests%2Fui%2Fissue_4266.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.stderr?ref=3d41358a554cb70e23e001f6ac92cf79d805b671", "patch": "@@ -12,5 +12,14 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: methods called `new` usually take no `self`\n+  --> $DIR/issue_4266.rs:27:22\n+   |\n+LL |     pub async fn new(&mut self) -> Self {\n+   |                      ^^^^^^^^^\n+   |\n+   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n+   = help: consider choosing a less ambiguous name\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "f8fee4b3ab2d8fb420c66ada277a88a046a4bc2d", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d41358a554cb70e23e001f6ac92cf79d805b671/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d41358a554cb70e23e001f6ac92cf79d805b671/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=3d41358a554cb70e23e001f6ac92cf79d805b671", "patch": "@@ -188,3 +188,24 @@ mod issue6727 {\n         }\n     }\n }\n+\n+pub mod issue8142 {\n+    struct S;\n+\n+    impl S {\n+        // Should lint: is_ methods should only take &self, or no self at all.\n+        fn is_still_buggy(&mut self) -> bool {\n+            false\n+        }\n+\n+        // Should not lint: \"no self at all\" is allowed.\n+        fn is_forty_two(x: u32) -> bool {\n+            x == 42\n+        }\n+\n+        // Should not lint: &self is allowed.\n+        fn is_test_code(&self) -> bool {\n+            true\n+        }\n+    }\n+}"}, {"sha": "5493a99572e068746d2900921ca208595e99f9ad", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d41358a554cb70e23e001f6ac92cf79d805b671/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d41358a554cb70e23e001f6ac92cf79d805b671/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=3d41358a554cb70e23e001f6ac92cf79d805b671", "patch": "@@ -191,5 +191,13 @@ LL |         fn to_u64(self) -> u64 {\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: aborting due to 24 previous errors\n+error: methods called `is_*` usually take `self` by reference or no `self`\n+  --> $DIR/wrong_self_convention.rs:197:27\n+   |\n+LL |         fn is_still_buggy(&mut self) -> bool {\n+   |                           ^^^^^^^^^\n+   |\n+   = help: consider choosing a less ambiguous name\n+\n+error: aborting due to 25 previous errors\n "}]}