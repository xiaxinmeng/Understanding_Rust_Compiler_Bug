{"sha": "b9d9157883437550f3ec9cd8f01f20b91cfebb77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZDkxNTc4ODM0Mzc1NTBmM2VjOWNkOGYwMWYyMGI5MWNmZWJiNzc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-02T21:23:38Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-03T23:25:08Z"}, "message": "libsyntax: add &self to extensions", "tree": {"sha": "e96aace8abbf70c5137056115c70fc424af58ce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e96aace8abbf70c5137056115c70fc424af58ce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9d9157883437550f3ec9cd8f01f20b91cfebb77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d9157883437550f3ec9cd8f01f20b91cfebb77", "html_url": "https://github.com/rust-lang/rust/commit/b9d9157883437550f3ec9cd8f01f20b91cfebb77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9d9157883437550f3ec9cd8f01f20b91cfebb77/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a73426aa22a9a5771de1719a38670f4b7200e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a73426aa22a9a5771de1719a38670f4b7200e5d", "html_url": "https://github.com/rust-lang/rust/commit/4a73426aa22a9a5771de1719a38670f4b7200e5d"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "b0dcdf2e6645b7a0e61253517854e3aa650ee08c", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b9d9157883437550f3ec9cd8f01f20b91cfebb77/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d9157883437550f3ec9cd8f01f20b91cfebb77/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=b9d9157883437550f3ec9cd8f01f20b91cfebb77", "patch": "@@ -223,6 +223,7 @@ pub fn expand_auto_decode(\n \n priv impl ext_ctxt {\n     fn bind_path(\n+        &self,\n         span: span,\n         ident: ast::ident,\n         path: @ast::path,\n@@ -241,7 +242,7 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn expr(span: span, +node: ast::expr_) -> @ast::expr {\n+    fn expr(&self, span: span, +node: ast::expr_) -> @ast::expr {\n         @ast::expr {\n             id: self.next_id(),\n             callee_id: self.next_id(),\n@@ -250,7 +251,7 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn path(span: span, +strs: ~[ast::ident]) -> @ast::path {\n+    fn path(&self, span: span, +strs: ~[ast::ident]) -> @ast::path {\n         @ast::path {\n             span: span,\n             global: false,\n@@ -260,7 +261,7 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn path_global(span: span, +strs: ~[ast::ident]) -> @ast::path {\n+    fn path_global(&self, span: span, +strs: ~[ast::ident]) -> @ast::path {\n         @ast::path {\n             span: span,\n             global: true,\n@@ -271,6 +272,7 @@ priv impl ext_ctxt {\n     }\n \n     fn path_tps(\n+        &self,\n         span: span,\n         +strs: ~[ast::ident],\n         +tps: ~[@ast::Ty]\n@@ -285,6 +287,7 @@ priv impl ext_ctxt {\n     }\n \n     fn path_tps_global(\n+        &self,\n         span: span,\n         +strs: ~[ast::ident],\n         +tps: ~[@ast::Ty]\n@@ -299,6 +302,7 @@ priv impl ext_ctxt {\n     }\n \n     fn ty_path(\n+        &self,\n         span: span,\n         +strs: ~[ast::ident],\n         +tps: ~[@ast::Ty]\n@@ -312,7 +316,7 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn binder_pat(span: span, nm: ast::ident) -> @ast::pat {\n+    fn binder_pat(&self, span: span, nm: ast::ident) -> @ast::pat {\n         @ast::pat {\n             id: self.next_id(),\n             node: ast::pat_ident(\n@@ -323,12 +327,12 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn stmt(expr: @ast::expr) -> @ast::stmt {\n+    fn stmt(&self, expr: @ast::expr) -> @ast::stmt {\n         @codemap::spanned { node: ast::stmt_semi(expr, self.next_id()),\n                        span: expr.span }\n     }\n \n-    fn lit_str(span: span, s: @~str) -> @ast::expr {\n+    fn lit_str(&self, span: span, s: @~str) -> @ast::expr {\n         self.expr(\n             span,\n             ast::expr_vstore(\n@@ -340,21 +344,21 @@ priv impl ext_ctxt {\n                 ast::expr_vstore_uniq))\n     }\n \n-    fn lit_uint(span: span, i: uint) -> @ast::expr {\n+    fn lit_uint(&self, span: span, i: uint) -> @ast::expr {\n         self.expr(\n             span,\n             ast::expr_lit(\n                 @codemap::spanned { node: ast::lit_uint(i as u64, ast::ty_u),\n                                 span: span}))\n     }\n \n-    fn lambda(+blk: ast::blk) -> @ast::expr {\n-        let ext_cx = self;\n+    fn lambda(&self, +blk: ast::blk) -> @ast::expr {\n+        let ext_cx = *self;\n         let blk_e = self.expr(copy blk.span, ast::expr_block(copy blk));\n         quote_expr!( || $blk_e )\n     }\n \n-    fn blk(span: span, +stmts: ~[@ast::stmt]) -> ast::blk {\n+    fn blk(&self, span: span, +stmts: ~[@ast::stmt]) -> ast::blk {\n         codemap::spanned {\n             node: ast::blk_ {\n                 view_items: ~[],\n@@ -367,7 +371,7 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn expr_blk(expr: @ast::expr) -> ast::blk {\n+    fn expr_blk(&self, expr: @ast::expr) -> ast::blk {\n         codemap::spanned {\n             node: ast::blk_ {\n                 view_items: ~[],\n@@ -380,19 +384,24 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn expr_path(span: span, +strs: ~[ast::ident]) -> @ast::expr {\n+    fn expr_path(&self, span: span, +strs: ~[ast::ident]) -> @ast::expr {\n         self.expr(span, ast::expr_path(self.path(span, strs)))\n     }\n \n-    fn expr_path_global(span: span, +strs: ~[ast::ident]) -> @ast::expr {\n+    fn expr_path_global(\n+        &self,\n+        span: span,\n+        +strs: ~[ast::ident]\n+    ) -> @ast::expr {\n         self.expr(span, ast::expr_path(self.path_global(span, strs)))\n     }\n \n-    fn expr_var(span: span, +var: ~str) -> @ast::expr {\n+    fn expr_var(&self, span: span, +var: ~str) -> @ast::expr {\n         self.expr_path(span, ~[self.ident_of(var)])\n     }\n \n     fn expr_field(\n+        &self,\n         span: span,\n         expr: @ast::expr,\n         ident: ast::ident\n@@ -401,18 +410,19 @@ priv impl ext_ctxt {\n     }\n \n     fn expr_call(\n+        &self,\n         span: span,\n         expr: @ast::expr,\n         +args: ~[@ast::expr]\n     ) -> @ast::expr {\n         self.expr(span, ast::expr_call(expr, args, ast::NoSugar))\n     }\n \n-    fn lambda_expr(expr: @ast::expr) -> @ast::expr {\n+    fn lambda_expr(&self, expr: @ast::expr) -> @ast::expr {\n         self.lambda(self.expr_blk(expr))\n     }\n \n-    fn lambda_stmts(span: span, +stmts: ~[@ast::stmt]) -> @ast::expr {\n+    fn lambda_stmts(&self, span: span, +stmts: ~[@ast::stmt]) -> @ast::expr {\n         self.lambda(self.blk(span, stmts))\n     }\n }"}, {"sha": "7b00a5e5a4bb3e5110b1e9226847afc4d06f41c7", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9d9157883437550f3ec9cd8f01f20b91cfebb77/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d9157883437550f3ec9cd8f01f20b91cfebb77/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=b9d9157883437550f3ec9cd8f01f20b91cfebb77", "patch": "@@ -167,15 +167,15 @@ pub mod rt {\n     }\n \n     pub trait ExtParseUtils {\n-        fn parse_item(s: ~str) -> @ast::item;\n-        fn parse_expr(s: ~str) -> @ast::expr;\n-        fn parse_stmt(s: ~str) -> @ast::stmt;\n-        fn parse_tts(s: ~str) -> ~[ast::token_tree];\n+        fn parse_item(&self, s: ~str) -> @ast::item;\n+        fn parse_expr(&self, s: ~str) -> @ast::expr;\n+        fn parse_stmt(&self, s: ~str) -> @ast::stmt;\n+        fn parse_tts(&self, s: ~str) -> ~[ast::token_tree];\n     }\n \n     impl ExtParseUtils for ext_ctxt {\n \n-        fn parse_item(s: ~str) -> @ast::item {\n+        fn parse_item(&self, s: ~str) -> @ast::item {\n             let res = parse::parse_item_from_source_str(\n                 ~\"<quote expansion>\",\n                 @(copy s),\n@@ -191,7 +191,7 @@ pub mod rt {\n             }\n         }\n \n-        fn parse_stmt(s: ~str) -> @ast::stmt {\n+        fn parse_stmt(&self, s: ~str) -> @ast::stmt {\n             parse::parse_stmt_from_source_str(\n                 ~\"<quote expansion>\",\n                 @(copy s),\n@@ -200,15 +200,15 @@ pub mod rt {\n                 self.parse_sess())\n         }\n \n-        fn parse_expr(s: ~str) -> @ast::expr {\n+        fn parse_expr(&self, s: ~str) -> @ast::expr {\n             parse::parse_expr_from_source_str(\n                 ~\"<quote expansion>\",\n                 @(copy s),\n                 self.cfg(),\n                 self.parse_sess())\n         }\n \n-        fn parse_tts(s: ~str) -> ~[ast::token_tree] {\n+        fn parse_tts(&self, s: ~str) -> ~[ast::token_tree] {\n             parse::parse_tts_from_source_str(\n                 ~\"<quote expansion>\",\n                 @(copy s),"}]}