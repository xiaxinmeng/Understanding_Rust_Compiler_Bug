{"sha": "5ec6b5eaeed5cddcb224cdec7bda148b3c8631f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYzZiNWVhZWVkNWNkZGNiMjI0Y2RlYzdiZGExNDhiM2M4NjMxZjQ=", "commit": {"author": {"name": "Michal Sudwoj", "email": "msudwoj@student.ethz.ch", "date": "2020-05-22T16:17:22Z"}, "committer": {"name": "Michal Sudwoj", "email": "msudwoj@student.ethz.ch", "date": "2020-05-24T06:20:40Z"}, "message": "Fixed tests", "tree": {"sha": "85180597215449b8eeb572ee7215b0b1f41b585c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85180597215449b8eeb572ee7215b0b1f41b585c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ec6b5eaeed5cddcb224cdec7bda148b3c8631f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec6b5eaeed5cddcb224cdec7bda148b3c8631f4", "html_url": "https://github.com/rust-lang/rust/commit/5ec6b5eaeed5cddcb224cdec7bda148b3c8631f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ec6b5eaeed5cddcb224cdec7bda148b3c8631f4/comments", "author": {"login": "westernmagic", "id": 147945, "node_id": "MDQ6VXNlcjE0Nzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/147945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/westernmagic", "html_url": "https://github.com/westernmagic", "followers_url": "https://api.github.com/users/westernmagic/followers", "following_url": "https://api.github.com/users/westernmagic/following{/other_user}", "gists_url": "https://api.github.com/users/westernmagic/gists{/gist_id}", "starred_url": "https://api.github.com/users/westernmagic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/westernmagic/subscriptions", "organizations_url": "https://api.github.com/users/westernmagic/orgs", "repos_url": "https://api.github.com/users/westernmagic/repos", "events_url": "https://api.github.com/users/westernmagic/events{/privacy}", "received_events_url": "https://api.github.com/users/westernmagic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "westernmagic", "id": 147945, "node_id": "MDQ6VXNlcjE0Nzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/147945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/westernmagic", "html_url": "https://github.com/westernmagic", "followers_url": "https://api.github.com/users/westernmagic/followers", "following_url": "https://api.github.com/users/westernmagic/following{/other_user}", "gists_url": "https://api.github.com/users/westernmagic/gists{/gist_id}", "starred_url": "https://api.github.com/users/westernmagic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/westernmagic/subscriptions", "organizations_url": "https://api.github.com/users/westernmagic/orgs", "repos_url": "https://api.github.com/users/westernmagic/repos", "events_url": "https://api.github.com/users/westernmagic/events{/privacy}", "received_events_url": "https://api.github.com/users/westernmagic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d74e096d868385441874346c0eab93bc405ebef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d74e096d868385441874346c0eab93bc405ebef", "html_url": "https://github.com/rust-lang/rust/commit/6d74e096d868385441874346c0eab93bc405ebef"}], "stats": {"total": 130, "additions": 61, "deletions": 69}, "files": [{"sha": "b36efe16c64a11fca4c81774dec4e915787f78d7", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 61, "deletions": 69, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/5ec6b5eaeed5cddcb224cdec7bda148b3c8631f4/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec6b5eaeed5cddcb224cdec7bda148b3c8631f4/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=5ec6b5eaeed5cddcb224cdec7bda148b3c8631f4", "patch": "@@ -1,14 +1,10 @@\n // no-system-llvm\n // assembly-output: emit-asm\n-// compile-flags: --target --nvptx64-nvidia-cuda\n-// compile-flags: -Z merge-functions=disabled\n-// only-nvptx64\n-// ignore-nvptx64\n+// compile-flags: --target nvptx64-nvidia-cuda\n+// compile-flags: --crate-type cdylib\n \n #![feature(no_core, lang_items, rustc_attrs)]\n-#![crate_type = \"rlib\"]\n #![no_core]\n-#![allow(asm_sub_register, non_camel_case_types)]\n \n #[rustc_builtin_macro]\n macro_rules! asm {\n@@ -18,10 +14,6 @@ macro_rules! asm {\n macro_rules! concat {\n     () => {};\n }\n-#[rustc_builtin_macro]\n-macro_rules! stringify {\n-    () => {};\n-}\n \n #[lang = \"sized\"]\n trait Sized {}\n@@ -39,19 +31,19 @@ impl Copy for f64 {}\n impl Copy for ptr {}\n \n #[no_mangle]\n-fn extern_func();\n+fn extern_func() {}\n \n-// CHECK-LABEL: sym_fn\n-// CHECK: #APP\n-// CHECK call extern_func;\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func sym_fn()\n+// CHECK: // begin inline asm\n+// CHECK: call extern_func;\n+// CHECK: // end inline asm\n #[no_mangle]\n pub unsafe fn sym_fn() {\n-    asm!(\"call {}\", sym extern_func);\n+    asm!(\"call {};\", sym extern_func);\n }\n \n macro_rules! check {\n-    ($func:ident $ty:ident, $class:ident $mov:literal) => {\n+    ($func:ident $ty:ident $class:ident $mov:literal) => {\n         #[no_mangle]\n         pub unsafe fn $func(x: $ty) -> $ty {\n             let y;\n@@ -61,80 +53,80 @@ macro_rules! check {\n     };\n }\n \n-// CHECK-LABEL: reg16_i8\n-// CHECK: #APP\n-// CHECK: mov.i16 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg16_i8\n+// CHECK: // begin inline asm\n+// CHECK: mov.i16 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg16_i8 i8 reg16 \"mov.i16\");\n \n-// CHECK-LABEL: reg16_i16\n-// CHECK: #APP\n-// CHECK: mov.i16 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg16_i16\n+// CHECK: // begin inline asm\n+// CHECK: mov.i16 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg16_i16 i16 reg16 \"mov.i16\");\n \n-// CHECK-LABEL: reg32_i8\n-// CHECK: #APP\n-// CHECK: mov.i32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg32_i8\n+// CHECK: // begin inline asm\n+// CHECK: mov.i32 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg32_i8 i8 reg32 \"mov.i32\");\n \n-// CHECK-LABEL: reg32_i16\n-// CHECK: #APP\n-// CHECK: mov.i32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg32_i16\n+// CHECK: // begin inline asm\n+// CHECK: mov.i32 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg32_i16 i16 reg32 \"mov.i32\");\n \n-// CHECK-LABEL: reg32_i32\n-// CHECK: #APP\n-// CHECK: mov.i32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg32_i32\n+// CHECK: // begin inline asm\n+// CHECK: mov.i32 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg32_i32 i32 reg32 \"mov.i32\");\n \n-// CHECK-LABEL: reg32_f32\n-// CHECK: #APP\n-// CHECK: mov.i32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg32_f32\n+// CHECK: // begin inline asm\n+// CHECK: mov.i32 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg32_f32 f32 reg32 \"mov.i32\");\n \n-// CHECK-LABEL: reg64_i8\n-// CHECK: #APP\n-// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg64_i8\n+// CHECK: // begin inline asm\n+// CHECK: mov.i64 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg64_i8 i8 reg64 \"mov.i64\");\n \n-// CHECK-LABEL: reg64_i16\n-// CHECK: #APP\n-// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg64_i16\n+// CHECK: // begin inline asm\n+// CHECK: mov.i64 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg64_i16 i16 reg64 \"mov.i64\");\n \n-// CHECK-LABEL: reg64_i32\n-// CHECK: #APP\n-// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg64_i32\n+// CHECK: // begin inline asm\n+// CHECK: mov.i64 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg64_i32 i32 reg64 \"mov.i64\");\n \n-// CHECK-LABEL: reg64_f32\n-// CHECK: #APP\n-// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b32 func_retval0) reg64_f32\n+// CHECK: // begin inline asm\n+// CHECK: mov.i64 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg64_f32 f32 reg64 \"mov.i64\");\n \n-// CHECK-LABEL: reg64_i64\n-// CHECK: #APP\n-// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b64 func_retval0) reg64_i64\n+// CHECK: // begin inline asm\n+// CHECK: mov.i64 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg64_i64 i64 reg64 \"mov.i64\");\n \n-// CHECK-LABEL: reg64_f64\n-// CHECK: #APP\n-// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b64 func_retval0) reg64_f64\n+// CHECK: // begin inline asm\n+// CHECK: mov.i64 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg64_f64 f64 reg64 \"mov.i64\");\n \n-// CHECK-LABEL: reg64_ptr\n-// CHECK: #APP\n-// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n-// CHECK: #NO_APP\n+// CHECK-LABEL: .visible .func (.param .b64 func_retval0) reg64_ptr\n+// CHECK: // begin inline asm\n+// CHECK: mov.i64 %{{[a-z0-9]+}}, %{{[a-z0-9]+}};\n+// CHECK: // end inline asm\n check!(reg64_ptr ptr reg64 \"mov.i64\");"}]}