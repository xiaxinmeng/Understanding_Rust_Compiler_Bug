{"sha": "eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZmI5ZmU4ZGY3YmQzODdiYWU5ZWFhNmMyMjFhMWE5NmI4NDgxMTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-03-28T21:49:32Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-03-28T21:49:32Z"}, "message": "Update test suite", "tree": {"sha": "3e86fcb28c1db5c09e88ddf2707302c089a78cfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e86fcb28c1db5c09e88ddf2707302c089a78cfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlq8DewsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAT7\nuQ/+PQRMLUHiF5VrvwJUQt2/mxFKMWW69G0saoYRW5h6PBGBSq1sqOOMBaOfV4YM\nLrJIPzckPH2ptajaNhW9QOwTVNBUq0NtLAf51j+JUjPGe+XUy4+rs6J6KRAL6d5E\n/Sg/XiXaFli6QeIUUyMNBXW3BRpPrRB3k4mm8aQXsPi6e818MypJoSpwUHaDKl2W\nZvLhqph952whw+TyS5NfY71lx+ZEACZjEtWoDClezyhig9dUq/zct/01zNQdjsZL\nMb7LENY3SDrehMBiR6aZeVsKU9uSCIWucGSg/QfZ6a3zR9+qPPNhtzmBAgjhYSNM\nywy+ourSs2soNuPEj2hJ3ZnXG3gWwR9TNN+QuPPRxshsvxCuZaKmrYYdQvYenZme\nJKg5cGIpH//n9G0n2lzN11NoNBTUS9gkf7lP+0urU39Ignw1nz71j5JMREa8Rovu\n+Q/R5cI2NgDUQBDhMSYjF0UsTeeKN+641sxU2DorN4agZdb5p6Wj3hubu38NhdPC\ndPjeXFpOhao+Ulvotln2icpBRz8G5LdNBh6KojS9nT/s2au6LPnYV2Dm2XRAQUJQ\n5/+na6rN8GxSMxaG8XjiUxXNWbkY537w2HAju0xY9e1QgL/0d2JDQyidQ/UBVBQf\n7wXurIz7bvvfCwjv1kgyPosCI0OGYRrIJhp+51cxxoncT8Q=\n=bGxm\n-----END PGP SIGNATURE-----", "payload": "tree 3e86fcb28c1db5c09e88ddf2707302c089a78cfb\nparent d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1522273772 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1522273772 +0200\n\nUpdate test suite\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "html_url": "https://github.com/rust-lang/rust/commit/eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4", "html_url": "https://github.com/rust-lang/rust/commit/d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4"}], "stats": {"total": 313, "additions": 253, "deletions": 60}, "files": [{"sha": "c5c327497da53e989003581cfdb0adaf11b888dc", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 208 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 248 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n More to come, please [file an issue](https://github.com/rust-lang-nursery/rust-clippy/issues) if you have ideas!\n "}, {"sha": "75aa4dfb41883525b7acd8f2da4f1c241e62b9af", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 206, "deletions": 1, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -401,15 +401,26 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box redundant_field_names::RedundantFieldNames);\n \n \n-    reg.register_lint_group(\"clippy_restrictions\", vec![\n+    reg.register_lint_group(\"clippy_restriction\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n         array_indexing::INDEXING_SLICING,\n         assign_ops::ASSIGN_OPS,\n         else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n         literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n+        mem_forget::MEM_FORGET,\n         methods::CLONE_ON_REF_PTR,\n+        methods::OPTION_UNWRAP_USED,\n+        methods::RESULT_UNWRAP_USED,\n+        methods::WRONG_PUB_SELF_CONVENTION,\n         misc::FLOAT_CMP_CONST,\n+        missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n+        print::PRINT_STDOUT,\n+        print::USE_DEBUG,\n+        shadow::SHADOW_REUSE,\n+        shadow::SHADOW_SAME,\n+        shadow::SHADOW_UNRELATED,\n+        strings::STRING_ADD,\n     ]);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n@@ -454,6 +465,200 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     ]);\n \n     reg.register_lint_group(\"clippy\", vec![\n+        approx_const::APPROX_CONSTANT,\n+        array_indexing::OUT_OF_BOUNDS_INDEXING,\n+        assign_ops::ASSIGN_OP_PATTERN,\n+        assign_ops::MISREFACTORED_ASSIGN_OP,\n+        attrs::DEPRECATED_SEMVER,\n+        attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n+        attrs::USELESS_ATTRIBUTE,\n+        bit_mask::BAD_BIT_MASK,\n+        bit_mask::INEFFECTIVE_BIT_MASK,\n+        bit_mask::VERBOSE_BIT_MASK,\n+        blacklisted_name::BLACKLISTED_NAME,\n+        block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n+        block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n+        booleans::LOGIC_BUG,\n+        booleans::NONMINIMAL_BOOL,\n+        bytecount::NAIVE_BYTECOUNT,\n+        collapsible_if::COLLAPSIBLE_IF,\n+        const_static_lifetime::CONST_STATIC_LIFETIME,\n+        copies::IF_SAME_THEN_ELSE,\n+        copies::IFS_SAME_COND,\n+        cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n+        derive::DERIVE_HASH_XOR_EQ,\n+        double_comparison::DOUBLE_COMPARISONS,\n+        double_parens::DOUBLE_PARENS,\n+        drop_forget_ref::DROP_COPY,\n+        drop_forget_ref::DROP_REF,\n+        drop_forget_ref::FORGET_COPY,\n+        drop_forget_ref::FORGET_REF,\n+        entry::MAP_ENTRY,\n+        enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n+        enum_variants::ENUM_VARIANT_NAMES,\n+        enum_variants::MODULE_INCEPTION,\n+        eq_op::EQ_OP,\n+        eq_op::OP_REF,\n+        erasing_op::ERASING_OP,\n+        escape::BOXED_LOCAL,\n+        eta_reduction::REDUNDANT_CLOSURE,\n+        eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n+        eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n+        explicit_write::EXPLICIT_WRITE,\n+        format::USELESS_FORMAT,\n+        formatting::POSSIBLE_MISSING_COMMA,\n+        formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n+        formatting::SUSPICIOUS_ELSE_FORMATTING,\n+        functions::NOT_UNSAFE_PTR_ARG_DEREF,\n+        functions::TOO_MANY_ARGUMENTS,\n+        identity_conversion::IDENTITY_CONVERSION,\n+        identity_op::IDENTITY_OP,\n+        if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n+        infinite_iter::INFINITE_ITER,\n+        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n+        int_plus_one::INT_PLUS_ONE,\n+        invalid_ref::INVALID_REF,\n+        large_enum_variant::LARGE_ENUM_VARIANT,\n+        len_zero::LEN_WITHOUT_IS_EMPTY,\n+        len_zero::LEN_ZERO,\n+        let_if_seq::USELESS_LET_IF_SEQ,\n+        lifetimes::NEEDLESS_LIFETIMES,\n+        lifetimes::UNUSED_LIFETIMES,\n+        literal_representation::INCONSISTENT_DIGIT_GROUPING,\n+        literal_representation::LARGE_DIGIT_GROUPS,\n+        literal_representation::UNREADABLE_LITERAL,\n+        loops::EMPTY_LOOP,\n+        loops::EXPLICIT_COUNTER_LOOP,\n+        loops::EXPLICIT_INTO_ITER_LOOP,\n+        loops::EXPLICIT_ITER_LOOP,\n+        loops::FOR_KV_MAP,\n+        loops::FOR_LOOP_OVER_OPTION,\n+        loops::FOR_LOOP_OVER_RESULT,\n+        loops::ITER_NEXT_LOOP,\n+        loops::MANUAL_MEMCPY,\n+        loops::MUT_RANGE_BOUND,\n+        loops::NEEDLESS_RANGE_LOOP,\n+        loops::NEVER_LOOP,\n+        loops::REVERSE_RANGE_LOOP,\n+        loops::UNUSED_COLLECT,\n+        loops::WHILE_IMMUTABLE_CONDITION,\n+        loops::WHILE_LET_LOOP,\n+        loops::WHILE_LET_ON_ITERATOR,\n+        map_clone::MAP_CLONE,\n+        matches::MATCH_AS_REF,\n+        matches::MATCH_BOOL,\n+        matches::MATCH_OVERLAPPING_ARM,\n+        matches::MATCH_REF_PATS,\n+        matches::MATCH_WILD_ERR_ARM,\n+        matches::SINGLE_MATCH,\n+        methods::CHARS_LAST_CMP,\n+        methods::CHARS_NEXT_CMP,\n+        methods::CLONE_DOUBLE_REF,\n+        methods::CLONE_ON_COPY,\n+        methods::FILTER_NEXT,\n+        methods::GET_UNWRAP,\n+        methods::ITER_CLONED_COLLECT,\n+        methods::ITER_NTH,\n+        methods::ITER_SKIP_NEXT,\n+        methods::NEW_RET_NO_SELF,\n+        methods::OK_EXPECT,\n+        methods::OPTION_MAP_OR_NONE,\n+        methods::OR_FUN_CALL,\n+        methods::SEARCH_IS_SOME,\n+        methods::SHOULD_IMPLEMENT_TRAIT,\n+        methods::SINGLE_CHAR_PATTERN,\n+        methods::STRING_EXTEND_CHARS,\n+        methods::TEMPORARY_CSTRING_AS_PTR,\n+        methods::UNNECESSARY_FOLD,\n+        methods::USELESS_ASREF,\n+        methods::WRONG_SELF_CONVENTION,\n+        minmax::MIN_MAX,\n+        misc::CMP_NAN,\n+        misc::CMP_OWNED,\n+        misc::FLOAT_CMP,\n+        misc::MODULO_ONE,\n+        misc::REDUNDANT_PATTERN,\n+        misc::SHORT_CIRCUIT_STATEMENT,\n+        misc::TOPLEVEL_REF_ARG,\n+        misc::ZERO_PTR,\n+        misc_early::BUILTIN_TYPE_SHADOW,\n+        misc_early::DOUBLE_NEG,\n+        misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n+        misc_early::MIXED_CASE_HEX_LITERALS,\n+        misc_early::REDUNDANT_CLOSURE_CALL,\n+        misc_early::UNNEEDED_FIELD_PATTERN,\n+        misc_early::ZERO_PREFIXED_LITERAL,\n+        mut_reference::UNNECESSARY_MUT_PASSED,\n+        mutex_atomic::MUTEX_ATOMIC,\n+        needless_bool::BOOL_COMPARISON,\n+        needless_bool::NEEDLESS_BOOL,\n+        needless_borrow::NEEDLESS_BORROW,\n+        needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n+        needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n+        needless_update::NEEDLESS_UPDATE,\n+        neg_multiply::NEG_MULTIPLY,\n+        new_without_default::NEW_WITHOUT_DEFAULT,\n+        new_without_default::NEW_WITHOUT_DEFAULT_DERIVE,\n+        no_effect::NO_EFFECT,\n+        no_effect::UNNECESSARY_OPERATION,\n+        non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n+        non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n+        ok_if_let::IF_LET_SOME_RESULT,\n+        open_options::NONSENSICAL_OPEN_OPTIONS,\n+        overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n+        panic::PANIC_PARAMS,\n+        partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n+        precedence::PRECEDENCE,\n+        print::PRINT_WITH_NEWLINE,\n+        print::PRINTLN_EMPTY_STRING,\n+        ptr::CMP_NULL,\n+        ptr::MUT_FROM_REF,\n+        ptr::PTR_ARG,\n+        question_mark::QUESTION_MARK,\n+        ranges::ITERATOR_STEP_BY_ZERO,\n+        ranges::RANGE_MINUS_ONE,\n+        ranges::RANGE_ZIP_WITH_LEN,\n+        redundant_field_names::REDUNDANT_FIELD_NAMES,\n+        reference::DEREF_ADDROF,\n+        regex::INVALID_REGEX,\n+        regex::REGEX_MACRO,\n+        regex::TRIVIAL_REGEX,\n+        returns::LET_AND_RETURN,\n+        returns::NEEDLESS_RETURN,\n+        serde_api::SERDE_API_MISUSE,\n+        strings::STRING_LIT_AS_BYTES,\n+        suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n+        suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n+        swap::ALMOST_SWAPPED,\n+        swap::MANUAL_SWAP,\n+        temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        transmute::CROSSPOINTER_TRANSMUTE,\n+        transmute::MISALIGNED_TRANSMUTE,\n+        transmute::TRANSMUTE_BYTES_TO_STR,\n+        transmute::TRANSMUTE_INT_TO_BOOL,\n+        transmute::TRANSMUTE_INT_TO_CHAR,\n+        transmute::TRANSMUTE_INT_TO_FLOAT,\n+        transmute::TRANSMUTE_PTR_TO_REF,\n+        transmute::USELESS_TRANSMUTE,\n+        transmute::WRONG_TRANSMUTE,\n+        types::ABSURD_EXTREME_COMPARISONS,\n+        types::BORROWED_BOX,\n+        types::BOX_VEC,\n+        types::CAST_LOSSLESS,\n+        types::CHAR_LIT_AS_U8,\n+        types::IMPLICIT_HASHER,\n+        types::LET_UNIT_VALUE,\n+        types::OPTION_OPTION,\n+        types::TYPE_COMPLEXITY,\n+        types::UNIT_ARG,\n+        types::UNIT_CMP,\n+        types::UNNECESSARY_CAST,\n+        unicode::ZERO_WIDTH_SPACE,\n+        unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+        unused_io_amount::UNUSED_IO_AMOUNT,\n+        unused_label::UNUSED_LABEL,\n+        vec::USELESS_VEC,\n+        zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n \n     reg.register_lint_group(\"clippy_style\", vec!["}, {"sha": "72b2f7a3942d35c010fb85522b15c43feaf29e15", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -141,7 +141,7 @@ error: <-comparison of unit values detected. This will always be false\n 31 |     () < {};\n    |     ^^^^^^^\n    |\n-   = note: `-D unit-cmp` implied by `-D warnings`\n+   = note: #[deny(unit_cmp)] on by default\n \n error: aborting due to 18 previous errors\n "}, {"sha": "e1a4a42914c3730da92966e89ea33c63663730f4", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -12,7 +12,7 @@ error: this operation will always return zero. This is likely not the intended o\n 12 |     x & 0 == 0;\n    |     ^^^^^\n    |\n-   = note: `-D erasing-op` implied by `-D warnings`\n+   = note: #[deny(erasing_op)] on by default\n \n error: incompatible bit mask: `_ & 2` can never be equal to `1`\n   --> $DIR/bit_masks.rs:15:5"}, {"sha": "0e90f6963574100590f9d7b32c2e803037bcb0cc", "filename": "tests/ui/cstring.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -4,7 +4,7 @@ error: you are getting the inner pointer of a temporary `CString`\n 7 |     CString::new(\"foo\").unwrap().as_ptr();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n-  = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n+  = note: #[deny(temporary_cstring_as_ptr)] on by default\n   = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n  --> $DIR/cstring.rs:7:5"}, {"sha": "f43b8c382a4afdfb8f5214c25dbcc870f81e2d5e", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -1,9 +1,9 @@\n \n \n-\n #![feature(untagged_unions)]\n \n #![allow(dead_code)]\n+#![warn(expl_impl_clone_on_copy)]\n \n use std::hash::{Hash, Hasher};\n "}, {"sha": "cbe3fe1029dc959161017d0f5e3ac3fb97e2ba4d", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -4,7 +4,7 @@ error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n 17 | #[derive(Hash)]\n    |          ^^^^\n    |\n-   = note: `-D derive-hash-xor-eq` implied by `-D warnings`\n+   = note: #[deny(derive_hash_xor_eq)] on by default\n note: `PartialEq` implemented here\n   --> $DIR/derive.rs:20:1\n    |"}, {"sha": "59f0d3fe39b5574ce8f581109951cd56cedf315b", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -2,7 +2,7 @@\n #![feature(associated_type_defaults)]\n \n \n-#![warn(clippy)]\n+#![warn(linkedlist)]\n #![allow(dead_code, needless_pass_by_value)]\n \n extern crate alloc;"}, {"sha": "73dd8d02877675d38f067991f5fe5e04752f49f3", "filename": "tests/ui/double_comparison.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fdouble_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fdouble_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -4,7 +4,7 @@ error: This binary expression can be simplified\n 4 |     if x == y || x < y {\n   |        ^^^^^^^^^^^^^^^ help: try: `x <= y`\n   |\n-  = note: #[deny(double_comparisons)] on by default\n+  = note: `-D double-comparisons` implied by `-D warnings`\n \n error: This binary expression can be simplified\n  --> $DIR/double_comparison.rs:7:8"}, {"sha": "d24fd925e6da44ce03778278668c155c65b2da1c", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -4,7 +4,7 @@ error: Variable in the condition are not mutated in the loop body. This either l\n 14 |     while y < 10 {\n    |           ^^^^^^\n    |\n-   = note: `-D while-immutable-condition` implied by `-D warnings`\n+   = note: #[deny(while_immutable_condition)] on by default\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n   --> $DIR/infinite_loop.rs:19:11"}, {"sha": "f84207385265f56c4afa10574f4f17f851eb473a", "filename": "tests/ui/invalid_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -4,7 +4,7 @@ error: reference to zeroed memory\n 27 |     let ref_zero: &T = std::mem::zeroed();     // warning\n    |                        ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D invalid-ref` implied by `-D warnings`\n+   = note: #[deny(invalid_ref)] on by default\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n error: reference to zeroed memory"}, {"sha": "275be4ea1eb6c7588a66dcb16bdd37a81d874eed", "filename": "tests/ui/lint_pass.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4/tests%2Fui%2Flint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4/tests%2Fui%2Flint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.rs?ref=d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4", "patch": "@@ -1,24 +0,0 @@\n-\n-#![feature(rustc_private)]\n-#![feature(macro_vis_matcher)]\n-\n-#![warn(lint_without_lint_pass)]\n-\n-#[macro_use] extern crate rustc;\n-\n-use rustc::lint::{LintPass, LintArray};\n-\n-declare_clippy_lint! { GOOD_LINT, style, \"good lint\" }\n-declare_clippy_lint! { MISSING_LINT, style, \"missing lint\" }\n-\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![GOOD_LINT]\n-    }\n-}\n-\n-fn main() {\n-    let _ = MISSING_LINT;\n-}"}, {"sha": "2f9a6813b96d097a1ac7a86fe4774e26130ccd3f", "filename": "tests/ui/lint_pass.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4/tests%2Fui%2Flint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4/tests%2Fui%2Flint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.stderr?ref=d6344c47e3bf8e1c1bc4dea52841d0a1f83b4fa4", "patch": "@@ -1,10 +0,0 @@\n-error: the lint `MISSING_LINT` is not added to any `LintPass`\n-  --> $DIR/lint_pass.rs:12:1\n-   |\n-12 | declare_lint! { MISSING_LINT, Warn, \"missing lint\" }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D lint-without-lint-pass` implied by `-D warnings`\n-\n-error: aborting due to previous error\n-"}, {"sha": "8b1ee1fdcd2df0cc5ae4a45344a07c79476e85db", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -4,7 +4,7 @@\n \n #![warn(clippy)]\n #![allow(unused, if_let_redundant_pattern_matching)]\n-#![warn(single_match_else)]\n+#![warn(single_match_else, match_same_arms)]\n \n use std::borrow::Cow;\n "}, {"sha": "ab207eb32deb3480cb3425bc2d3b0f8ba059ba80", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -56,6 +56,14 @@ error: you seem to be trying to use match for destructuring a single pattern. Co\n 78 | |     };\n    | |_____^ help: try this: `if let Cow::Borrowed(..) = c { dummy() }`\n \n+error: this boolean expression can be simplified\n+   --> $DIR/matches.rs:117:11\n+    |\n+117 |     match test && test {\n+    |           ^^^^^^^^^^^^ help: try: `test`\n+    |\n+    = note: `-D nonminimal-bool` implied by `-D warnings`\n+\n error: you seem to be trying to match on a boolean expression\n   --> $DIR/matches.rs:96:5\n    |\n@@ -461,5 +469,5 @@ error: use as_mut() instead\n 329 | |     };\n     | |_____^ help: try this: `mut_owned.as_mut()`\n \n-error: aborting due to 37 previous errors\n+error: aborting due to 38 previous errors\n "}, {"sha": "65cac8ec4ff7351b4ee6d15cf40139b414428f1d", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -1,7 +1,7 @@\n \n #![feature(const_fn)]\n \n-#![warn(clippy, clippy_pedantic)]\n+#![warn(clippy, clippy_pedantic, option_unwrap_used)]\n #![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default,\n     new_without_default_derive, missing_docs_in_private_items, needless_pass_by_value)]\n "}, {"sha": "79c1030d48be8fac16a2899802e9b5d70600882a", "filename": "tests/ui/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -1,7 +1,7 @@\n \n \n \n-#![warn(clippy, clippy_pedantic)]\n+#![warn(clippy, clippy_pedantic, shadow_same, shadow_reuse, shadow_unrelated)]\n #![allow(unused_parens, unused_variables, missing_docs_in_private_items)]\n \n fn id<T>(x: T) -> T { x }"}, {"sha": "8130b1cb31abeb86377001387a4d6e636b44a49b", "filename": "tests/ui/suspicious_arithmetic_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -12,7 +12,7 @@ error: Suspicious use of binary operator in `AddAssign` impl\n 20 |         *self = *self - other;\n    |                       ^\n    |\n-   = note: `-D suspicious-op-assign-impl` implied by `-D warnings`\n+   = note: #[deny(suspicious_op_assign_impl)] on by default\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3c1ce9080229cc5b5c130cad57b25a6000338344", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -62,7 +62,7 @@ error: using `clone` on a double-reference; this will copy the reference instead\n 55 |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n    |\n-   = note: `-D clone-double-ref` implied by `-D warnings`\n+   = note: #[deny(clone_double_ref)] on by default\n help: try dereferencing it\n    |\n 55 |     let z: &Vec<_> = &(*y).clone();"}, {"sha": "f1788fc9ec516cc4659932abb7dfd942fa118998", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -4,7 +4,7 @@ error: equal expressions as operands to `/`\n 7 |     let nan = 0.0 / 0.0;\n   |               ^^^^^^^^^\n   |\n-  = note: `-D eq-op` implied by `-D warnings`\n+  = note: #[deny(eq_op)] on by default\n \n error: constant division of 0.0 with 0.0 will always result in NaN\n  --> $DIR/zero_div_zero.rs:7:15"}, {"sha": "58caa5dac0d2a3d180f09e36693202d868a00eb0", "filename": "util/update_lints.py", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/eafb9fe8df7bd387bae9eaa6c221a1a96b848111/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=eafb9fe8df7bd387bae9eaa6c221a1a96b848111", "patch": "@@ -26,7 +26,7 @@\n docs_link = 'https://rust-lang-nursery.github.io/rust-clippy/master/index.html'\n \n \n-def collect(lints, deprecated_lints, clippy_lints, fn):\n+def collect(deprecated_lints, clippy_lints, fn):\n     \"\"\"Collect all lints from a file.\n \n     Adds entries to the lints list as `(module, name, level, desc)`.\n@@ -88,6 +88,8 @@ def replace_region(fn, region_start, region_end, callback,\n     with open(fn) as fp:\n         lines = list(fp)\n \n+    found = False\n+\n     # replace old region with new region\n     new_lines = []\n     in_old_region = False\n@@ -102,9 +104,13 @@ def replace_region(fn, region_start, region_end, callback,\n                 new_lines.append(line)\n             # old region starts here\n             in_old_region = True\n+            found = True\n         else:\n             new_lines.append(line)\n \n+    if not found:\n+        print \"regex \" + region_start + \" not found\"\n+\n     # write back to file\n     if write_back:\n         with open(fn, 'w') as fp:\n@@ -115,7 +121,6 @@ def replace_region(fn, region_start, region_end, callback,\n \n \n def main(print_only=False, check=False):\n-    lints = []\n     deprecated_lints = []\n     clippy_lints = {\n         \"correctness\": [],\n@@ -135,7 +140,7 @@ def main(print_only=False, check=False):\n     # collect all lints from source files\n     for fn in os.listdir('clippy_lints/src'):\n         if fn.endswith('.rs'):\n-            collect(lints, deprecated_lints, clippy_lints,\n+            collect(deprecated_lints, clippy_lints,\n                     os.path.join('clippy_lints', 'src', fn))\n \n     # determine version\n@@ -148,7 +153,16 @@ def main(print_only=False, check=False):\n             print('Error: version not found in Cargo.toml!')\n             return\n \n-    all_lints = lints\n+    all_lints = []\n+    clippy_lint_groups = [\n+        \"correctness\",\n+        \"style\",\n+        \"complexity\",\n+        \"perf\",\n+    ]\n+    clippy_lint_list = []\n+    for x in clippy_lint_groups:\n+        clippy_lint_list += clippy_lints[x]\n     for _, value in clippy_lints.iteritems():\n         all_lints += value\n \n@@ -159,8 +173,8 @@ def main(print_only=False, check=False):\n     # update the lint counter in README.md\n     changed = replace_region(\n         'README.md',\n-        r'^\\[There are \\d+ lints included in this crate\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)$', \"\",\n-        lambda: ['[There are %d lints included in this crate](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\\n' %\n+        r'^\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)$', \"\",\n+        lambda: ['[There are %d lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\\n' %\n                  (len(all_lints))],\n         write_back=not check)\n \n@@ -193,10 +207,10 @@ def main(print_only=False, check=False):\n         lambda: gen_mods(all_lints),\n         replace_start=False, write_back=not check)\n \n-    # same for \"clippy\" lint collection\n+    # same for \"clippy_*\" lint collections\n     changed |= replace_region(\n         'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy\"', r'\\]\\);',\n-        lambda: gen_group(lints, levels=('warn', 'deny')),\n+        lambda: gen_group(clippy_lint_list),\n         replace_start=False, write_back=not check)\n \n     for key, value in clippy_lints.iteritems():"}]}