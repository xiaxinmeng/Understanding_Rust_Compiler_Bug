{"sha": "1bcc26a6b135fb934bf5f91d03d525f204323829", "node_id": "C_kwDOAAsO6NoAKDFiY2MyNmE2YjEzNWZiOTM0YmY1ZjkxZDAzZDUyNWYyMDQzMjM4Mjk", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-08-28T06:27:31Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-16T03:48:43Z"}, "message": "bless tests", "tree": {"sha": "5f915d9467361ff588a5b7650d960f86ad58fbfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f915d9467361ff588a5b7650d960f86ad58fbfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bcc26a6b135fb934bf5f91d03d525f204323829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc26a6b135fb934bf5f91d03d525f204323829", "html_url": "https://github.com/rust-lang/rust/commit/1bcc26a6b135fb934bf5f91d03d525f204323829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc26a6b135fb934bf5f91d03d525f204323829/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08ac185e9917a5ccb0b3b55a4acee7eab38ce734", "url": "https://api.github.com/repos/rust-lang/rust/commits/08ac185e9917a5ccb0b3b55a4acee7eab38ce734", "html_url": "https://github.com/rust-lang/rust/commit/08ac185e9917a5ccb0b3b55a4acee7eab38ce734"}], "stats": {"total": 391, "additions": 228, "deletions": 163}, "files": [{"sha": "6e04cfaec31fbd0c308b13728a6d4056a7e66d74", "filename": "src/test/ui/const-generics/const_trait_fn-issue-88433.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconst-generics%2Fconst_trait_fn-issue-88433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconst-generics%2Fconst_trait_fn-issue-88433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_trait_fn-issue-88433.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Func<T> {\n     type Output;\n "}, {"sha": "647b0eea86dafc1557874a386a0b128bab418640", "filename": "src/test/ui/const-generics/issues/issue-88119.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -3,6 +3,7 @@\n #![allow(incomplete_features)]\n #![feature(const_trait_impl, generic_const_exprs)]\n \n+#[const_trait]\n trait ConstName {\n     const NAME_BYTES: &'static [u8];\n }"}, {"sha": "1d2d3012a6ee1c535a9a93e83fd251809a1acd33", "filename": "src/test/ui/const-generics/issues/issue-98629.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,5 +1,6 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Trait {\n     const N: usize;\n }"}, {"sha": "4a248be76a9e8f100e13db16f1c95af14a26ff16", "filename": "src/test/ui/const-generics/issues/issue-98629.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,5 +1,5 @@\n error[E0046]: not all trait items implemented, missing: `N`\n-  --> $DIR/issue-98629.rs:7:1\n+  --> $DIR/issue-98629.rs:8:1\n    |\n LL |     const N: usize;\n    |     -------------- `N` from trait"}, {"sha": "c685922c456b35be977d0b034f1976e9df376d92", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -4,13 +4,13 @@ error[E0308]: mismatched types\n LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                      ^^^ expected `i8`, found `u8`\n \n-error[E0277]: cannot add `u8` to `i8`\n+error[E0277]: cannot add `u8` to `i8` in const contexts\n   --> $DIR/const-eval-overflow-3b.rs:16:20\n    |\n LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                    ^ no implementation for `i8 + u8`\n    |\n-   = help: the trait `Add<u8>` is not implemented for `i8`\n+   = help: the trait `~const Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>"}, {"sha": "b396079240a98b2905fdfd6bab946381ede30b89", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -4,13 +4,13 @@ error[E0308]: mismatched types\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                              ^^^ expected `i8`, found `u8`\n \n-error[E0277]: cannot add `u8` to `i8`\n+error[E0277]: cannot add `u8` to `i8` in const contexts\n   --> $DIR/const-eval-overflow-4b.rs:9:28\n    |\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                            ^ no implementation for `i8 + u8`\n    |\n-   = help: the trait `Add<u8>` is not implemented for `i8`\n+   = help: the trait `~const Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>"}, {"sha": "5884a893f8b7d610921ddaf0fbf7ae767c0f00fb", "filename": "src/test/ui/consts/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -3,9 +3,7 @@ const X : usize = 2;\n const fn f(x: usize) -> usize {\n     let mut sum = 0;\n     for i in 0..x {\n-        //~^ ERROR mutable references\n-        //~| ERROR cannot convert\n-        //~| ERROR cannot call non-const fn\n+        //~^ ERROR the trait bound\n         //~| ERROR `for` is not allowed in a `const fn`\n         sum += i;\n     }"}, {"sha": "040de150659e36ab1b3ae0ff5c57d6c949603685", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -4,46 +4,32 @@ error[E0658]: `for` is not allowed in a `const fn`\n LL | /     for i in 0..x {\n LL | |\n LL | |\n-LL | |\n-LL | |\n LL | |         sum += i;\n LL | |     }\n    | |_____^\n    |\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error[E0015]: cannot convert `std::ops::Range<usize>` into an iterator in constant functions\n+error[E0277]: the trait bound `std::ops::Range<usize>: Iterator` is not satisfied\n   --> $DIR/const-fn-error.rs:5:14\n    |\n LL |     for i in 0..x {\n-   |              ^^^^\n+   |              ^^^^ `std::ops::Range<usize>` is not an iterator\n    |\n-note: impl defined here, but it is not `const`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL | impl<I: ~const Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-\n-error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/const-fn-error.rs:5:14\n-   |\n-LL |     for i in 0..x {\n-   |              ^^^^\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error[E0015]: cannot call non-const fn `<std::ops::Range<usize> as Iterator>::next` in constant functions\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<usize>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<usize>`, but that implementation is not `const`\n   --> $DIR/const-fn-error.rs:5:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n+   = note: required for `std::ops::Range<usize>` to implement `~const IntoIterator`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL | const fn f(x: usize) -> usize where std::ops::Range<usize>: ~const Iterator {\n+   |                               +++++++++++++++++++++++++++++++++++++++++++++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0015, E0658.\n-For more information about an error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0277, E0658.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "8afc25fe3e57b238296a3f3d67369271cf1a32b4", "filename": "src/test/ui/consts/const-for-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -3,6 +3,7 @@\n const _: () = {\n     for _ in 0..5 {}\n     //~^ error: `for` is not allowed in a `const`\n+    //~| error: the trait bound\n };\n \n fn main() {}"}, {"sha": "f08879538914d58c2dea5c257d83785ea843924a", "filename": "src/test/ui/consts/const-for-feature-gate.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -7,6 +7,21 @@ LL |     for _ in 0..5 {}\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+  --> $DIR/const-for-feature-gate.rs:4:14\n+   |\n+LL |     for _ in 0..5 {}\n+   |              ^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+  --> $DIR/const-for-feature-gate.rs:4:14\n+   |\n+LL |     for _ in 0..5 {}\n+   |              ^^^^\n+   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0277, E0658.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "c6e958a9a951be7bdaa3b74cd6de36133af655ea", "filename": "src/test/ui/consts/const-for.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -3,8 +3,7 @@\n \n const _: () = {\n     for _ in 0..5 {}\n-    //~^ error: cannot convert\n-    //~| error: cannot call non-const fn\n+    //~^ error: the trait bound\n };\n \n fn main() {}"}, {"sha": "56637536310bcb468b55e9ac3601eb7405e26b59", "filename": "src/test/ui/consts/const-for.stderr", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,24 +1,17 @@\n-error[E0015]: cannot convert `std::ops::Range<i32>` into an iterator in constants\n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n   --> $DIR/const-for.rs:5:14\n    |\n LL |     for _ in 0..5 {}\n-   |              ^^^^\n-   |\n-note: impl defined here, but it is not `const`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |              ^^^^ `std::ops::Range<{integer}>` is not an iterator\n    |\n-LL | impl<I: ~const Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n-\n-error[E0015]: cannot call non-const fn `<std::ops::Range<i32> as Iterator>::next` in constants\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n   --> $DIR/const-for.rs:5:14\n    |\n LL |     for _ in 0..5 {}\n    |              ^^^^\n-   |\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "36daa685c5aaa952ff1769ce4668ce5aca07eb5d", "filename": "src/test/ui/consts/control-flow/loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -51,10 +51,12 @@ const _: i32 = {\n     let mut x = 0;\n \n     for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n+        //~^ ERROR the trait bound\n         x += i;\n     }\n \n     for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n+        //~^ ERROR the trait bound\n         x += i;\n     }\n "}, {"sha": "747729befde2d43912bf6d44cbe61e4137a04159", "filename": "src/test/ui/consts/control-flow/loop.stderr", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,6 +2,7 @@ error[E0658]: `for` is not allowed in a `const`\n   --> $DIR/loop.rs:53:5\n    |\n LL | /     for i in 0..4 {\n+LL | |\n LL | |         x += i;\n LL | |     }\n    | |_____^\n@@ -10,16 +11,46 @@ LL | |     }\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n error[E0658]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:57:5\n+  --> $DIR/loop.rs:58:5\n    |\n LL | /     for i in 0..4 {\n+LL | |\n LL | |         x += i;\n LL | |     }\n    | |_____^\n    |\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+  --> $DIR/loop.rs:53:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+  --> $DIR/loop.rs:53:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^\n+   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n+\n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+  --> $DIR/loop.rs:58:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+  --> $DIR/loop.rs:58:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^\n+   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0277, E0658.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "ce21ebdb9ac990f4843f06e3e4960ad2cad886fd", "filename": "src/test/ui/consts/issue-94675.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -7,9 +7,8 @@ struct Foo<'a> {\n impl<'a> Foo<'a> {\n     const fn spam(&mut self, baz: &mut Vec<u32>) {\n         self.bar[0] = baz.len();\n-        //~^ ERROR cannot call non-const fn `Vec::<u32>::len` in constant functions\n-        //~| ERROR the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n-        //~| ERROR cannot call non-const operator in constant functions\n+        //~^ the trait bound `Vec<usize>: ~const Index<_>` is not satisfied\n+        //~| the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n     }\n }\n "}, {"sha": "7ae293ffbf85d05446a6e8966155ef319e71a62d", "filename": "src/test/ui/consts/issue-94675.stderr", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,10 +1,15 @@\n-error[E0015]: cannot call non-const fn `Vec::<u32>::len` in constant functions\n-  --> $DIR/issue-94675.rs:9:27\n+error[E0277]: the trait bound `Vec<usize>: ~const Index<_>` is not satisfied\n+  --> $DIR/issue-94675.rs:9:9\n    |\n LL |         self.bar[0] = baz.len();\n-   |                           ^^^^^\n+   |         ^^^^^^^^^^^ vector indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `~const Index<_>` is not implemented for `Vec<usize>`\n+note: the trait `Index<_>` is implemented for `Vec<usize>`, but that implementation is not `const`\n+  --> $DIR/issue-94675.rs:9:9\n    |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL |         self.bar[0] = baz.len();\n+   |         ^^^^^^^^^^^\n \n error[E0277]: the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n   --> $DIR/issue-94675.rs:9:9\n@@ -18,21 +23,11 @@ note: the trait `IndexMut<usize>` is implemented for `Vec<usize>`, but that impl\n    |\n LL |         self.bar[0] = baz.len();\n    |         ^^^^^^^^^^^\n-\n-error[E0015]: cannot call non-const operator in constant functions\n-  --> $DIR/issue-94675.rs:9:9\n-   |\n-LL |         self.bar[0] = baz.len();\n-   |         ^^^^^^^^^^^\n-   |\n-note: impl defined here, but it is not `const`\n-  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-LL | impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL | impl<'a> Foo<'a> where Vec<usize>: ~const IndexMut<usize> {\n+   |                  ++++++++++++++++++++++++++++++++++++++++\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "81f3f26943255d802d24473b3109a00ee5470a40", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -15,13 +15,13 @@ help: Unicode character '\u2212' (Minus Sign) looks like '-' (Minus/Hyphen), but it\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e-11; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n    |                                                     ~\n \n-error[E0277]: cannot subtract `{integer}` from `{float}`\n+error[E0277]: cannot subtract `{integer}` from `{float}` in const contexts\n   --> $DIR/issue-49746-unicode-confusable-in-float-literal-expt.rs:1:53\n    |\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n    |                                                     ^ no implementation for `{float} - {integer}`\n    |\n-   = help: the trait `Sub<{integer}>` is not implemented for `{float}`\n+   = help: the trait `~const Sub<{integer}>` is not implemented for `{float}`\n    = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>"}, {"sha": "c8e1313f57348513152eb6155811829373b976a8", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cann\n   --> $DIR/issue-20605.rs:2:17\n    |\n LL |     for item in *things { *item = 0 }\n-   |                 ^^^^^^^ the trait `IntoIterator` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n+   |                 ^^^^^^^ the trait `~const IntoIterator` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n    |\n    = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n    = note: required for `dyn Iterator<Item = &'a mut u8>` to implement `IntoIterator`"}, {"sha": "1f7b341a97efc7d6087c859481cc62b408dd3579", "filename": "src/test/ui/issues/issue-25901.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-25901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-25901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25901.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,7 +2,7 @@ struct A;\n struct B;\n \n static S: &'static B = &A;\n-//~^ ERROR cannot perform deref coercion on `A` in statics\n+//~^ ERROR the trait bound\n \n use std::ops::Deref;\n "}, {"sha": "b9cac32229a1edc8fd6aae578c8d9c6aa387b58b", "filename": "src/test/ui/issues/issue-25901.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,23 +1,15 @@\n-error[E0015]: cannot perform deref coercion on `A` in statics\n+error[E0277]: the trait bound `A: Deref` is not satisfied\n   --> $DIR/issue-25901.rs:4:24\n    |\n LL | static S: &'static B = &A;\n-   |                        ^^\n-   |\n-   = note: attempting to deref into `B`\n-note: deref defined here\n-  --> $DIR/issue-25901.rs:10:5\n+   |                        ^^ the trait `~const Deref` is not implemented for `A`\n    |\n-LL |     type Target = B;\n-   |     ^^^^^^^^^^^\n-note: impl defined here, but it is not `const`\n-  --> $DIR/issue-25901.rs:9:1\n+note: the trait `Deref` is implemented for `A`, but that implementation is not `const`\n+  --> $DIR/issue-25901.rs:4:24\n    |\n-LL | impl Deref for A {\n-   | ^^^^^^^^^^^^^^^^\n-   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n-   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n+LL | static S: &'static B = &A;\n+   |                        ^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "355b110b4654aec1fd304e71aa94a52f504ffba5", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -7,9 +7,7 @@ LL |     Err(5)?;\n    |           ^ the trait `From<{integer}>` is not implemented for `()`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = help: the following other types implement trait `FromResidual<R>`:\n-             <Result<T, F> as FromResidual<Result<Infallible, E>>>\n-             <Result<T, F> as FromResidual<Yeet<E>>>\n+   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n    = note: required for `Result<i32, ()>` to implement `FromResidual<Result<Infallible, {integer}>>`\n \n error: aborting due to previous error"}, {"sha": "9848cf0b0b1b2c1e32a9fbe7b9510ca59bef7802", "filename": "src/test/ui/issues/issue-50582.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,4 +2,5 @@ fn main() {\n     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n     //~^ ERROR cannot add\n     //~| ERROR `for` is not allowed in a `const`\n+    //~| ERROR the trait bound\n }"}, {"sha": "3b1936bb58c584d5fac468d5ab1991f38821cba8", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -7,13 +7,27 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error[E0277]: cannot add `()` to `{integer}`\n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+  --> $DIR/issue-50582.rs:2:29\n+   |\n+LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n+   |                             ^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+  --> $DIR/issue-50582.rs:2:29\n+   |\n+LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n+   |                             ^^^^\n+   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n+\n+error[E0277]: cannot add `()` to `{integer}` in const contexts\n   --> $DIR/issue-50582.rs:2:18\n    |\n LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    |                  ^ no implementation for `{integer} + ()`\n    |\n-   = help: the trait `Add<()>` is not implemented for `{integer}`\n+   = help: the trait `~const Add<()>` is not implemented for `{integer}`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n@@ -25,7 +39,7 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n              <&'a isize as Add<isize>>\n            and 48 others\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0277, E0658.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "3ec56739d4be80981e4df90a4d3479ba4c5c497b", "filename": "src/test/ui/issues/issue-50585.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,4 +2,5 @@ fn main() {\n     |y: Vec<[(); for x in 0..2 {}]>| {};\n     //~^ ERROR mismatched types\n     //~| ERROR `for` is not allowed in a `const`\n+    //~| ERROR the trait bound\n }"}, {"sha": "ecd69f771c31a6d8c467633c00bd06e74dbc7b25", "filename": "src/test/ui/issues/issue-50585.stderr", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -7,13 +7,27 @@ LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+  --> $DIR/issue-50585.rs:2:27\n+   |\n+LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n+   |                           ^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+  --> $DIR/issue-50585.rs:2:27\n+   |\n+LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n+   |                           ^^^^\n+   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n+\n error[E0308]: mismatched types\n   --> $DIR/issue-50585.rs:2:18\n    |\n LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n    |                  ^^^^^^^^^^^^^^^^ expected `usize`, found `()`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0277, E0308, E0658.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "1b87e9168536c396d65f8d0a8d08af109ad05591", "filename": "src/test/ui/never_type/issue-52443.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -8,7 +8,5 @@ fn main() {\n \n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR `for` is not allowed in a `const`\n-    //~| ERROR cannot convert\n-    //~| ERROR mutable references are not allowed in constants\n-    //~| ERROR cannot call non-const fn\n+    //~| ERROR the trait bound\n }"}, {"sha": "4a89d4f6d37ce94af0d369de0cb2593cc35f51c1", "filename": "src/test/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -38,37 +38,25 @@ LL |     [(); loop { break }];\n    |                 expected `usize`, found `()`\n    |                 help: give it a value of the expected type: `break 42`\n \n-error[E0015]: cannot convert `RangeFrom<usize>` into an iterator in constants\n+error[E0277]: the trait bound `RangeFrom<usize>: Iterator` is not satisfied\n   --> $DIR/issue-52443.rs:9:21\n    |\n LL |     [(); { for _ in 0usize.. {}; 0}];\n-   |                     ^^^^^^^^\n-   |\n-note: impl defined here, but it is not `const`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL | impl<I: ~const Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n-\n-error[E0658]: mutable references are not allowed in constants\n-  --> $DIR/issue-52443.rs:9:21\n+   |                     ^^^^^^^^ `RangeFrom<usize>` is not an iterator\n    |\n-LL |     [(); { for _ in 0usize.. {}; 0}];\n-   |                     ^^^^^^^^\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error[E0015]: cannot call non-const fn `<RangeFrom<usize> as Iterator>::next` in constants\n+   = help: the trait `~const Iterator` is not implemented for `RangeFrom<usize>`\n+note: the trait `Iterator` is implemented for `RangeFrom<usize>`, but that implementation is not `const`\n   --> $DIR/issue-52443.rs:9:21\n    |\n LL |     [(); { for _ in 0usize.. {}; 0}];\n    |                     ^^^^^^^^\n+   = note: required for `RangeFrom<usize>` to implement `~const IntoIterator`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+LL | fn main() where RangeFrom<usize>: ~const Iterator {\n+   |           +++++++++++++++++++++++++++++++++++++++\n \n-error: aborting due to 6 previous errors; 1 warning emitted\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n-Some errors have detailed explanations: E0015, E0308, E0658.\n-For more information about an error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0277, E0308, E0658.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "7d9dae52cf10e0b234904f528106809eaef00234", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -10,6 +10,7 @@ impl std::ops::Add for NonConstAdd {\n     }\n }\n \n+#[const_trait]\n trait Foo {\n     type Bar: ~const std::ops::Add;\n }\n@@ -19,6 +20,7 @@ impl const Foo for NonConstAdd {\n     //~^ ERROR: cannot add `NonConstAdd` to `NonConstAdd` in const contexts\n }\n \n+#[const_trait]\n trait Baz {\n     type Qux: std::ops::Add;\n }"}, {"sha": "ce2425010ad28b8eb3df5764ef86faf296e79bbe", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,17 +1,17 @@\n error[E0277]: cannot add `NonConstAdd` to `NonConstAdd` in const contexts\n-  --> $DIR/assoc-type.rs:18:16\n+  --> $DIR/assoc-type.rs:19:16\n    |\n LL |     type Bar = NonConstAdd;\n    |                ^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `~const Add` is not implemented for `NonConstAdd`\n note: the trait `Add` is implemented for `NonConstAdd`, but that implementation is not `const`\n-  --> $DIR/assoc-type.rs:18:16\n+  --> $DIR/assoc-type.rs:19:16\n    |\n LL |     type Bar = NonConstAdd;\n    |                ^^^^^^^^^^^\n note: required by a bound in `Foo::Bar`\n-  --> $DIR/assoc-type.rs:14:15\n+  --> $DIR/assoc-type.rs:15:15\n    |\n LL |     type Bar: ~const std::ops::Add;\n    |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`"}, {"sha": "589e3f02420f73edf962b2e2a4bad159f1fc8a8a", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/staged-api.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -3,6 +3,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait MyTrait {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn func();"}, {"sha": "dd99339742072e225180bd49455f173479e64d8f", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,5 +1,6 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n pub trait Plus {\n     fn plus(self, rhs: Self) -> Self;\n }\n@@ -23,7 +24,6 @@ pub const fn add_i32(a: i32, b: i32) -> i32 {\n pub const fn add_u32(a: u32, b: u32) -> u32 {\n     a.plus(b)\n     //~^ ERROR the trait bound\n-    //~| ERROR cannot call non-const fn\n }\n \n fn main() {}"}, {"sha": "d9ad80431533b3851aa4d9c9c5c28be5448f4e39", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.stderr", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,24 +1,19 @@\n error[E0277]: the trait bound `u32: ~const Plus` is not satisfied\n-  --> $DIR/call-const-trait-method-fail.rs:24:7\n+  --> $DIR/call-const-trait-method-fail.rs:25:7\n    |\n LL |     a.plus(b)\n-   |       ^^^^^^^ the trait `~const Plus` is not implemented for `u32`\n+   |       ^^^^ the trait `~const Plus` is not implemented for `u32`\n    |\n note: the trait `Plus` is implemented for `u32`, but that implementation is not `const`\n-  --> $DIR/call-const-trait-method-fail.rs:24:7\n+  --> $DIR/call-const-trait-method-fail.rs:25:7\n    |\n LL |     a.plus(b)\n-   |       ^^^^^^^\n-\n-error[E0015]: cannot call non-const fn `<u32 as Plus>::plus` in constant functions\n-  --> $DIR/call-const-trait-method-fail.rs:24:7\n-   |\n-LL |     a.plus(b)\n-   |       ^^^^^^^\n+   |       ^^^^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL | pub const fn add_u32(a: u32, b: u32) -> u32 where u32: ~const Plus {\n+   |                                             ++++++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b64161b6aa014adf772513986960a08d4ddaacb5", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -21,6 +21,7 @@ impl const PartialEq for Int {\n     }\n }\n \n+#[const_trait]\n pub trait Plus {\n     fn plus(self, rhs: Self) -> Self;\n }"}, {"sha": "50c46579086c6cad1201a86a18ee610bb8e11cac", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-in-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait MyPartialEq {\n     fn eq(&self, other: &Self) -> bool;\n }"}, {"sha": "52984fb6be4908d50c0eb8c3a1a66223ee6d677c", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-check-fns-in-const-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,6 +1,7 @@\n #![feature(const_trait_impl)]\n \n struct S;\n+#[const_trait]\n trait T {\n     fn foo();\n }"}, {"sha": "c8783de4c3eed0ef775c1abfd26355adb83e0c9f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-check-fns-in-const-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: cannot call non-const fn `non_const` in constant functions\n-  --> $DIR/const-check-fns-in-const-impl.rs:11:16\n+  --> $DIR/const-check-fns-in-const-impl.rs:12:16\n    |\n LL |     fn foo() { non_const() }\n    |                ^^^^^^^^^^^"}, {"sha": "8b4c40658156516e1313743db63f0a10b53291b8", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -48,6 +48,7 @@ mod t {\n     pub struct HasConstDrop(pub ConstDrop);\n     pub struct TrivialFields(pub u8, pub i8, pub usize, pub isize);\n \n+    #[const_trait]\n     pub trait SomeTrait {\n         fn foo();\n     }"}, {"sha": "837124db04e208670258d9c85a98a0775b0a4b34", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-recovery.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,9 +1,11 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Foo {}\n \n const impl Foo for i32 {} //~ ERROR: expected identifier, found keyword\n \n+#[const_trait]\n trait Bar {}\n \n const impl<T: Foo> Bar for T {} //~ ERROR: expected identifier, found keyword"}, {"sha": "7217fc8554356c23f767a502876781cb101a1119", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-recovery.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `impl`\n-  --> $DIR/const-impl-recovery.rs:5:7\n+  --> $DIR/const-impl-recovery.rs:6:7\n    |\n LL | const impl Foo for i32 {}\n    |       ^^^^ expected identifier, found keyword\n@@ -11,7 +11,7 @@ LL + impl const Foo for i32 {}\n    |\n \n error: expected identifier, found keyword `impl`\n-  --> $DIR/const-impl-recovery.rs:9:7\n+  --> $DIR/const-impl-recovery.rs:11:7\n    |\n LL | const impl<T: Foo> Bar for T {}\n    |       ^^^^ expected identifier, found keyword"}, {"sha": "4c630d33c55163b7eca430c391c21e601613f246", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/feature-gate.rs:13:1\n+  --> $DIR/feature-gate.rs:14:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^"}, {"sha": "0b409fbaac9e0999c13ebe24159e4f1dab2bbcfa", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -5,6 +5,7 @@\n #![feature(rustc_attrs)]\n \n struct S;\n+#[const_trait] //[stock]~ ERROR `const_trait` is a temporary placeholder\n trait T {}\n impl const T for S {}\n //[stock]~^ ERROR const trait impls are experimental"}, {"sha": "0e938c1c55d059566e8dc65b8d279dba1dfed51c", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.stock.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,12 +1,21 @@\n error[E0658]: const trait impls are experimental\n-  --> $DIR/feature-gate.rs:9:6\n+  --> $DIR/feature-gate.rs:10:6\n    |\n LL | impl const T for S {}\n    |      ^^^^^\n    |\n    = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: `const_trait` is a temporary placeholder for marking a trait that is suitable for `const` `impls` and all default bodies as `const`, which may be removed or renamed in the future.\n+  --> $DIR/feature-gate.rs:8:1\n+   |\n+LL | #[const_trait]\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "337c733403b243db85a432b90cbaadcb5ef76bd8", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n pub trait MyTrait {\n     fn method(&self) -> Option<()>;\n }"}, {"sha": "6d2be1daa3727625c4e670d9c6751b538e16ed9c", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `?` is not allowed in a `const fn`\n-  --> $DIR/hir-const-check.rs:11:9\n+  --> $DIR/hir-const-check.rs:12:9\n    |\n LL |         Some(())?;\n    |         ^^^^^^^^^"}, {"sha": "f8ac793e4c125c275ce19c2e40b4c0fe8ade2c77", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl-const-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -3,7 +3,9 @@\n \n struct S;\n \n+#[const_trait]\n trait A {}\n+#[const_trait]\n trait B {}\n \n impl const A for S {}"}, {"sha": "9f3f38ad4bc68e51486d68ae6c5326464c5ff867", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-100222.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -16,6 +16,7 @@ pub trait IndexMut where Self: Index {\n \n impl Index for () { type Output = (); }\n \n+#[cfg(not(any(nn, yn)))]\n impl const IndexMut for <() as Index>::Output {\n     const C: <Self as Index>::Output = ();\n     type Assoc = <Self as Index>::Output;\n@@ -24,6 +25,15 @@ impl const IndexMut for <() as Index>::Output {\n     {}\n }\n \n+#[cfg(any(nn, yn))]\n+impl IndexMut for <() as Index>::Output {\n+    const C: <Self as Index>::Output = ();\n+    type Assoc = <Self as Index>::Output;\n+    fn foo(&mut self, x: <Self as Index>::Output) -> <Self as Index>::Output\n+        where <Self as Index>::Output:,\n+    {}\n+}\n+\n const C: <() as Index>::Output = ();\n \n fn main() {}"}, {"sha": "4d34696539485dac7f346b76e37a7f9d04f781c7", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-92230-wf-super-trait-env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -4,7 +4,9 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n pub trait Super {}\n+#[const_trait]\n pub trait Sub: Super {}\n \n impl<A> const Super for &A where A: ~const Super {}"}, {"sha": "1a4509b18695a6138419f0186682003862fd9efc", "filename": "src/test/ui/rfc-2632-const-trait-impl/non-const-op-in-closure-in-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Convert<T> {\n     fn to(self) -> T;\n }"}, {"sha": "3e2b81368a5fe05aab0733a8345597c4b013e7b8", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,8 +1,10 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Foo {\n     fn a(&self);\n }\n+#[const_trait]\n trait Bar: ~const Foo {}\n \n struct S;"}, {"sha": "9787792ab1318be266d126603432387d8057520b", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,16 +1,16 @@\n error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail.rs:13:12\n+  --> $DIR/super-traits-fail.rs:15:12\n    |\n LL | impl const Bar for S {}\n    |            ^^^ the trait `~const Foo` is not implemented for `S`\n    |\n note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail.rs:13:12\n+  --> $DIR/super-traits-fail.rs:15:12\n    |\n LL | impl const Bar for S {}\n    |            ^^^\n note: required by a bound in `Bar`\n-  --> $DIR/super-traits-fail.rs:6:12\n+  --> $DIR/super-traits-fail.rs:8:12\n    |\n LL | trait Bar: ~const Foo {}\n    |            ^^^^^^^^^^ required by this bound in `Bar`"}, {"sha": "df96f6fb4ab40cb5d0df35f42c90b9f1db6fb0c5", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -1,9 +1,12 @@\n // check-pass\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Foo {\n     fn a(&self);\n }\n+\n+#[const_trait]\n trait Bar: ~const Foo {}\n \n struct S;"}, {"sha": "4b8b004069d47379bf539bbe51e748b0c5c83d53", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-run.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Bar {\n     fn bar() -> u8;\n }"}, {"sha": "6eff899bfbf16f5b96b0a368c694ce764cdead0f", "filename": "src/test/ui/stability-attribute/missing-const-stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -19,6 +19,7 @@ impl Foo {\n }\n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait Bar {\n     #[stable(feature = \"stable\", since = \"1.0.0\")]\n     fn fun();"}, {"sha": "4cfbe152891bac36b2e9f01e0a926b11ce87859e", "filename": "src/test/ui/stability-attribute/missing-const-stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -5,7 +5,7 @@ LL | pub const fn foo() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation has missing const stability attribute\n-  --> $DIR/missing-const-stability.rs:27:1\n+  --> $DIR/missing-const-stability.rs:28:1\n    |\n LL | / impl const Bar for Foo {\n LL | |"}, {"sha": "c6eb690ba5a5018b07099cb0757d43cf9a345301", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc26a6b135fb934bf5f91d03d525f204323829/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=1bcc26a6b135fb934bf5f91d03d525f204323829", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^ the trait `IntoIterator` is not implemented for `[i32]`\n+   |            ^^^^^^ the trait `~const IntoIterator` is not implemented for `[i32]`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required for `[i32]` to implement `IntoIterator`\n@@ -17,7 +17,7 @@ error[E0277]: `[i32]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^ the trait `IntoIterator` is not implemented for `[i32]`\n+   |            ^^^^^^ the trait `~const IntoIterator` is not implemented for `[i32]`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required for `[i32]` to implement `IntoIterator`\n@@ -32,7 +32,7 @@ error[E0277]: the size for values of type `[K]` cannot be known at compilation t\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^ the trait `IntoIterator` is not implemented for `[K]`\n+   |             ^^^^^^^ the trait `~const IntoIterator` is not implemented for `[K]`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required for `[K]` to implement `IntoIterator`\n@@ -47,7 +47,7 @@ error[E0277]: `[K]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^ the trait `IntoIterator` is not implemented for `[K]`\n+   |             ^^^^^^^ the trait `~const IntoIterator` is not implemented for `[K]`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required for `[K]` to implement `IntoIterator`"}]}