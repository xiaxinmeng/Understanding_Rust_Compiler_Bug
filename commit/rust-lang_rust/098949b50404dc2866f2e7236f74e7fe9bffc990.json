{"sha": "098949b50404dc2866f2e7236f74e7fe9bffc990", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ODk0OWI1MDQwNGRjMjg2NmYyZTcyMzZmNzRlN2ZlOWJmZmM5OTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-19T06:56:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T06:56:06Z"}, "message": "Rollup merge of #73130 - wesleywiser:remove_const_prop_for_indirects, r=oli-obk\n\nRemove const prop for indirects\n\nThis was only used by one mir-opt test and since it causes buggy behavior under `-Zmir-opt-level=2`, it seems like we should remove it.\n\nThis was split out from #71946.\n\nCloses #72679\nCloses #72372\nCloses #72285", "tree": {"sha": "3b11a3a16d0a1aa57853a15c56798111c0958cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b11a3a16d0a1aa57853a15c56798111c0958cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/098949b50404dc2866f2e7236f74e7fe9bffc990", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7GGGCRBK7hj4Ov3rIwAAdHIIAFaIGyCLTdqo3uVD3qxTYWu5\nhDMaoKAgJlXj1RUulMwCcFQbVn7PF8v6+6UtSAXjco3qMK+96W9jt9YZARHduJok\nObKJ+sMG+2XtlBMssCzAAFwjCKCcfyLMRWZ9VBkwrJNdtjiS6K7XO+9Um0/NQwHI\n80Vv32QkPI66xbLezKQbQjEV1iwyg3oDMXZ6Fb4kByrxQ4cU15OzfFh52fCRC05R\n1XSNnpS3KOxRVEkJL+tWDdAE3DC3pPBhNFW/p3RpfH2Cm2/yYOu1t37MpwboXbd9\n3BsLgaMUWXwiN3suWCx2o5WU+H+ocfhB7CMFqlwhE7zbGzlwJasYa4nCFEOmu5A=\n=iTqC\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b11a3a16d0a1aa57853a15c56798111c0958cdf\nparent ea3c309700020cf78632dc00d949048bf3f75b5f\nparent 1e88f130a347f8b223031eafe75c0772ccfec00c\nauthor Ralf Jung <post@ralfj.de> 1592549766 +0200\ncommitter GitHub <noreply@github.com> 1592549766 +0200\n\nRollup merge of #73130 - wesleywiser:remove_const_prop_for_indirects, r=oli-obk\n\nRemove const prop for indirects\n\nThis was only used by one mir-opt test and since it causes buggy behavior under `-Zmir-opt-level=2`, it seems like we should remove it.\n\nThis was split out from #71946.\n\nCloses #72679\nCloses #72372\nCloses #72285\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/098949b50404dc2866f2e7236f74e7fe9bffc990", "html_url": "https://github.com/rust-lang/rust/commit/098949b50404dc2866f2e7236f74e7fe9bffc990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/098949b50404dc2866f2e7236f74e7fe9bffc990/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3c309700020cf78632dc00d949048bf3f75b5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3c309700020cf78632dc00d949048bf3f75b5f", "html_url": "https://github.com/rust-lang/rust/commit/ea3c309700020cf78632dc00d949048bf3f75b5f"}, {"sha": "1e88f130a347f8b223031eafe75c0772ccfec00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e88f130a347f8b223031eafe75c0772ccfec00c", "html_url": "https://github.com/rust-lang/rust/commit/1e88f130a347f8b223031eafe75c0772ccfec00c"}], "stats": {"total": 178, "additions": 82, "deletions": 96}, "files": [{"sha": "cab13d379a2ccead0845ab7735d5ae4aaedf30e9", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=098949b50404dc2866f2e7236f74e7fe9bffc990", "patch": "@@ -293,7 +293,6 @@ pub enum InternKind {\n     Static(hir::Mutability),\n     Constant,\n     Promoted,\n-    ConstProp,\n }\n \n /// Intern `ret` and everything it references.\n@@ -314,9 +313,7 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n     let base_intern_mode = match intern_kind {\n         InternKind::Static(mutbl) => InternMode::Static(mutbl),\n         // FIXME: what about array lengths, array initializers?\n-        InternKind::Constant | InternKind::ConstProp | InternKind::Promoted => {\n-            InternMode::ConstBase\n-        }\n+        InternKind::Constant | InternKind::Promoted => InternMode::ConstBase,\n     };\n \n     // Type based interning.\n@@ -358,7 +355,10 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             Err(error) => {\n                 ecx.tcx.sess.delay_span_bug(\n                     ecx.tcx.span,\n-                    \"error during interning should later cause validation failure\",\n+                    &format!(\n+                        \"error during interning should later cause validation failure: {}\",\n+                        error\n+                    ),\n                 );\n                 // Some errors shouldn't come up because creating them causes\n                 // an allocation, which we should avoid. When that happens,\n@@ -399,7 +399,7 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n                     // immutability is so important.\n                     alloc.mutability = Mutability::Not;\n                 }\n-                InternKind::Constant | InternKind::ConstProp => {\n+                InternKind::Constant => {\n                     // If it's a constant, we should not have any \"leftovers\" as everything\n                     // is tracked by const-checking.\n                     // FIXME: downgrade this to a warning? It rejects some legitimate consts,"}, {"sha": "17ca918d32c9f6e3438a43bef0c0b545d04aec9b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=098949b50404dc2866f2e7236f74e7fe9bffc990", "patch": "@@ -27,9 +27,9 @@ use rustc_trait_selection::traits;\n \n use crate::const_eval::error_to_const_error;\n use crate::interpret::{\n-    self, compile_time_machine, intern_const_alloc_recursive, AllocId, Allocation, Frame, ImmTy,\n-    Immediate, InternKind, InterpCx, LocalState, LocalValue, Memory, MemoryKind, OpTy,\n-    Operand as InterpOperand, PlaceTy, Pointer, ScalarMaybeUninit, StackPopCleanup,\n+    self, compile_time_machine, AllocId, Allocation, Frame, ImmTy, Immediate, InterpCx, LocalState,\n+    LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer,\n+    ScalarMaybeUninit, StackPopCleanup,\n };\n use crate::transform::{MirPass, MirSource};\n \n@@ -702,11 +702,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 ScalarMaybeUninit::Scalar(l),\n                 ScalarMaybeUninit::Scalar(r),\n             )) => l.is_bits() && r.is_bits(),\n-            interpret::Operand::Indirect(_) if mir_opt_level >= 2 => {\n-                let mplace = op.assert_mem_place(&self.ecx);\n-                intern_const_alloc_recursive(&mut self.ecx, InternKind::ConstProp, mplace, false);\n-                true\n-            }\n             _ => false,\n         }\n     }"}, {"sha": "13e8eb3e44e1aeb03471c8e2506a38b054bd7601", "filename": "src/test/mir-opt/const_prop/discriminant.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs?ref=098949b50404dc2866f2e7236f74e7fe9bffc990", "patch": "@@ -1,5 +1,10 @@\n // compile-flags: -O\n \n+// FIXME(wesleywiser): Ideally, we could const-prop away all of this and just be left with\n+// `let x = 42` but that doesn't work because const-prop doesn't support `Operand::Indirect`\n+// and `InterpCx::eval_place()` always forces an allocation which creates the `Indirect`.\n+// Fixing either of those will allow us to const-prop this away.\n+\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.main.ConstProp.diff\n fn main() {"}, {"sha": "1c873f53f378a1fa4962928eac7be68df58490c8", "filename": "src/test/mir-opt/const_prop/discriminant/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff?ref=098949b50404dc2866f2e7236f74e7fe9bffc990", "patch": "@@ -2,100 +2,93 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:5:11: 5:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:10:11: 10:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:11:9: 11:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:11:9: 11:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n--         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+-         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n++         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n--                                          // + span: $DIR/discriminant.rs:6:39: 6:43\n+-                                          // + span: $DIR/discriminant.rs:11:39: 11:43\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n--         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n--         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n-+                                          // + span: $DIR/discriminant.rs:6:34: 6:44\n+-         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++                                          // + span: $DIR/discriminant.rs:11:34: 11:44\n +                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n-+         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n-          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:6:59: 6:61\n+          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000000a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:59: 6:61\n+                                           // + span: $DIR/discriminant.rs:11:59: 11:61\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb2: {\n--         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:26: 6:30\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n       }\n   \n       bb3: {\n-          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:6:47: 6:49\n+          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:47: 6:49\n+                                           // + span: $DIR/discriminant.rs:11:47: 11:49\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:6:13: 6:68\n+          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:67: 6:68\n+                                           // + span: $DIR/discriminant.rs:11:67: 11:68\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:6:67: 6:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:6:68: 6:69\n-          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n+          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:10:11: 12:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:5:11: 7:2\n+                                           // + span: $DIR/discriminant.rs:10:11: 12:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:7:2: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:12:1: 12:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:12:2: 12:2\n       }\n   }\n   "}, {"sha": "75b4b7e5a62bab836ca891969e06599a1278a3fd", "filename": "src/test/mir-opt/const_prop/discriminant/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/098949b50404dc2866f2e7236f74e7fe9bffc990/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff?ref=098949b50404dc2866f2e7236f74e7fe9bffc990", "patch": "@@ -2,100 +2,93 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:5:11: 5:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:10:11: 10:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:11:9: 11:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:11:9: 11:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:6:9: 6:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n-          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n--         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+-         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n++         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n--                                          // + span: $DIR/discriminant.rs:6:39: 6:43\n+-                                          // + span: $DIR/discriminant.rs:11:39: 11:43\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n--         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n--         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n-+                                          // + span: $DIR/discriminant.rs:6:34: 6:44\n+-         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++                                          // + span: $DIR/discriminant.rs:11:34: 11:44\n +                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         _4 = const 1isize;               // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n-+         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n       }\n   \n       bb1: {\n-          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:6:59: 6:61\n+          _2 = const 10i32;                // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000000a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:59: 6:61\n+                                           // + span: $DIR/discriminant.rs:11:59: 11:61\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb2: {\n--         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:6:26: 6:30\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:6:26: 6:30\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n       }\n   \n       bb3: {\n-          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:6:47: 6:49\n+          _2 = const 42i32;                // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:47: 6:49\n+                                           // + span: $DIR/discriminant.rs:11:47: 11:49\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:6:13: 6:68\n+          _1 = Add(move _2, const 0i32);   // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:6:67: 6:68\n+                                           // + span: $DIR/discriminant.rs:11:67: 11:68\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:6:67: 6:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:6:68: 6:69\n-          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n+          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:10:11: 12:2\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:5:11: 7:2\n+                                           // + span: $DIR/discriminant.rs:10:11: 12:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:7:2: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:12:1: 12:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:12:2: 12:2\n       }\n   }\n   "}]}