{"sha": "cca91024298b92f5bff5fc7353155aff0eef38e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYTkxMDI0Mjk4YjkyZjViZmY1ZmM3MzUzMTU1YWZmMGVlZjM4ZTU=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-07-29T04:55:28Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-07-29T04:55:28Z"}, "message": "Change bitmasks to use less opaque type", "tree": {"sha": "2f66f8339f8c4d5cecab9b34994ec783f77f7640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f66f8339f8c4d5cecab9b34994ec783f77f7640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cca91024298b92f5bff5fc7353155aff0eef38e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cca91024298b92f5bff5fc7353155aff0eef38e5", "html_url": "https://github.com/rust-lang/rust/commit/cca91024298b92f5bff5fc7353155aff0eef38e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cca91024298b92f5bff5fc7353155aff0eef38e5/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab050796f24b3dcd5b56c303bc48024af027eb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab050796f24b3dcd5b56c303bc48024af027eb4", "html_url": "https://github.com/rust-lang/rust/commit/9ab050796f24b3dcd5b56c303bc48024af027eb4"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "b017e7d137e308293c8ecd921674d33794565e27", "filename": "crates/core_simd/src/lane_count.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cca91024298b92f5bff5fc7353155aff0eef38e5/crates%2Fcore_simd%2Fsrc%2Flane_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca91024298b92f5bff5fc7353155aff0eef38e5/crates%2Fcore_simd%2Fsrc%2Flane_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flane_count.rs?ref=cca91024298b92f5bff5fc7353155aff0eef38e5", "patch": "@@ -6,9 +6,14 @@ use sealed::Sealed;\n /// A type representing a vector lane count.\n pub struct LaneCount<const LANES: usize>;\n \n+impl<const LANES: usize> LaneCount<LANES> {\n+    /// The number of bytes in a bitmask with this many lanes.\n+    pub const BITMASK_LEN: usize = (LANES + 7) / 8;\n+}\n+\n /// Helper trait for vector lane counts.\n pub trait SupportedLaneCount: Sealed {\n-    /// The bitmask representation of a mask.\n+    #[doc(hidden)]\n     type BitMask: Copy + Default + AsRef<[u8]> + AsMut<[u8]>;\n \n     #[doc(hidden)]"}, {"sha": "ba7da704f61d4f63d53f26ae672919e05d65f78f", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cca91024298b92f5bff5fc7353155aff0eef38e5/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca91024298b92f5bff5fc7353155aff0eef38e5/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=cca91024298b92f5bff5fc7353155aff0eef38e5", "patch": "@@ -160,12 +160,12 @@ macro_rules! define_opaque_mask {\n             }\n \n             /// Convert this mask to a bitmask, with one bit set per lane.\n-            pub fn to_bitmask(self) -> <crate::LaneCount<LANES> as crate::SupportedLaneCount>::BitMask {\n+            pub fn to_bitmask(self) -> [u8; crate::LaneCount::<LANES>::BITMASK_LEN] {\n                 self.0.to_bitmask()\n             }\n \n             /// Convert a bitmask to a mask.\n-            pub fn from_bitmask(bitmask: <crate::LaneCount<LANES> as crate::SupportedLaneCount>::BitMask) -> Self {\n+            pub fn from_bitmask(bitmask: [u8; crate::LaneCount::<LANES>::BITMASK_LEN]) -> Self {\n                 Self(<$inner_ty>::from_bitmask(bitmask))\n             }\n         }"}, {"sha": "69edd5235872cfee978773ff39ab0e661e74e527", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cca91024298b92f5bff5fc7353155aff0eef38e5/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca91024298b92f5bff5fc7353155aff0eef38e5/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=cca91024298b92f5bff5fc7353155aff0eef38e5", "patch": "@@ -128,13 +128,15 @@ where\n     }\n \n     #[inline]\n-    pub fn to_bitmask(self) -> <LaneCount<LANES> as SupportedLaneCount>::BitMask {\n-        self.0\n+    pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n+        // Safety: these are the same type and we are laundering the generic\n+        unsafe { core::mem::transmute_copy(&self.0) }\n     }\n \n     #[inline]\n-    pub fn from_bitmask(bitmask: <LaneCount<LANES> as SupportedLaneCount>::BitMask) -> Self {\n-        Self(bitmask)\n+    pub fn from_bitmask(bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN]) -> Self {\n+        // Safety: these are the same type and we are laundering the generic\n+        Self(unsafe { core::mem::transmute_copy(&bitmask) })\n     }\n \n     #[inline]"}, {"sha": "2923cf1964a0dae4f724d2164137731870a95952", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cca91024298b92f5bff5fc7353155aff0eef38e5/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca91024298b92f5bff5fc7353155aff0eef38e5/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=cca91024298b92f5bff5fc7353155aff0eef38e5", "patch": "@@ -103,15 +103,15 @@ macro_rules! define_mask {\n             }\n \n             #[inline]\n-            pub fn to_bitmask(self) -> <crate::LaneCount::<LANES> as crate::SupportedLaneCount>::BitMask {\n+            pub fn to_bitmask(self) -> [u8; crate::LaneCount::<LANES>::BITMASK_LEN] {\n                 unsafe {\n                     // TODO remove the transmute when rustc can use arrays of u8 as bitmasks\n                     assert_eq!(\n-                        core::mem::size_of::<<crate::LaneCount::<LANES> as crate::SupportedLaneCount>::BitMask>(),\n                         core::mem::size_of::<<crate::LaneCount::<LANES> as crate::SupportedLaneCount>::IntBitMask>(),\n+                        crate::LaneCount::<LANES>::BITMASK_LEN,\n                     );\n                     let bitmask: <crate::LaneCount::<LANES> as crate::SupportedLaneCount>::IntBitMask = crate::intrinsics::simd_bitmask(self.0);\n-                    let mut bitmask: <crate::LaneCount::<LANES> as crate::SupportedLaneCount>::BitMask = core::mem::transmute_copy(&bitmask);\n+                    let mut bitmask: [u8; crate::LaneCount::<LANES>::BITMASK_LEN] = core::mem::transmute_copy(&bitmask);\n \n                     // There is a bug where LLVM appears to implement this operation with the wrong\n                     // bit order.\n@@ -127,7 +127,7 @@ macro_rules! define_mask {\n             }\n \n             #[inline]\n-            pub fn from_bitmask(mut bitmask: <crate::LaneCount::<LANES> as crate::SupportedLaneCount>::BitMask) -> Self {\n+            pub fn from_bitmask(mut bitmask: [u8; crate::LaneCount::<LANES>::BITMASK_LEN]) -> Self {\n                 unsafe {\n                     // There is a bug where LLVM appears to implement this operation with the wrong\n                     // bit order.\n@@ -140,8 +140,8 @@ macro_rules! define_mask {\n \n                     // TODO remove the transmute when rustc can use arrays of u8 as bitmasks\n                     assert_eq!(\n-                        core::mem::size_of::<<crate::LaneCount::<LANES> as crate::SupportedLaneCount>::BitMask>(),\n                         core::mem::size_of::<<crate::LaneCount::<LANES> as crate::SupportedLaneCount>::IntBitMask>(),\n+                        crate::LaneCount::<LANES>::BITMASK_LEN,\n                     );\n                     let bitmask: <crate::LaneCount::<LANES> as crate::SupportedLaneCount>::IntBitMask = core::mem::transmute_copy(&bitmask);\n "}]}