{"sha": "b764d4cb4f0c893caf5a6395db9b1e10a167a28f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjRkNGNiNGYwYzg5M2NhZjVhNjM5NWRiOWIxZTEwYTE2N2EyOGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-10T00:37:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-15T19:19:15Z"}, "message": "core::rt: Begin implementing Reader extension methods", "tree": {"sha": "a027d29184fa2408f86825aa0f35f5b4513dd0b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a027d29184fa2408f86825aa0f35f5b4513dd0b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b764d4cb4f0c893caf5a6395db9b1e10a167a28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b764d4cb4f0c893caf5a6395db9b1e10a167a28f", "html_url": "https://github.com/rust-lang/rust/commit/b764d4cb4f0c893caf5a6395db9b1e10a167a28f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b764d4cb4f0c893caf5a6395db9b1e10a167a28f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "013b7760b7bbc43ee56179588f8fe1a81d4567e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/013b7760b7bbc43ee56179588f8fe1a81d4567e5", "html_url": "https://github.com/rust-lang/rust/commit/013b7760b7bbc43ee56179588f8fe1a81d4567e5"}], "stats": {"total": 330, "additions": 325, "deletions": 5}, "files": [{"sha": "665b8a578e396c6f6b37ce807ff08419b50b6ffb", "filename": "src/libcore/rt/io/extensions.rs", "status": "modified", "additions": 262, "deletions": 4, "changes": 266, "blob_url": "https://github.com/rust-lang/rust/blob/b764d4cb4f0c893caf5a6395db9b1e10a167a28f/src%2Flibcore%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764d4cb4f0c893caf5a6395db9b1e10a167a28f/src%2Flibcore%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fextensions.rs?ref=b764d4cb4f0c893caf5a6395db9b1e10a167a28f", "patch": "@@ -13,26 +13,103 @@\n // XXX: Not sure how this should be structured\n // XXX: Iteration should probably be considered separately\n \n+use vec;\n+use rt::io::Reader;\n+use option::{Option, Some, None};\n+use unstable::finally::Finally;\n+\n pub trait ReaderUtil {\n \n+    /// Reads a single byte. Returns `None` on EOF.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Raises the same conditions as the `read` method. Returns\n+    /// `None` if the condition is handled.\n+    fn read_byte(&mut self) -> Option<u8>;\n+\n+    /// Reads `len` bytes and appends them to a vector.\n+    ///\n+    /// May push fewer than the requested number of bytes on error\n+    /// or EOF. Returns true on success, false on EOF or error.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Raises the same conditions as `read`. Returns `false` if\n+    /// the condition is handled.\n+    fn push_bytes(&mut self, buf: &mut ~[u8], len: uint) -> bool;\n+\n     /// Reads `len` bytes and gives you back a new vector\n     ///\n     /// # Failure\n     ///\n-    /// Raises the `io_error` condition on error. Returns an empty\n-    /// vector if the condition is handled.\n+    /// Raises the same conditions as the `read` method. May return\n+    /// less than the requested number of bytes on error or EOF.\n     fn read_bytes(&mut self, len: uint) -> ~[u8];\n \n     /// Reads all remaining bytes from the stream.\n     ///\n     /// # Failure\n     ///\n-    /// Raises the `io_error` condition on error. Returns an empty\n-    /// vector if the condition is handled.\n+    /// Raises the same conditions as the `read` method.\n     fn read_to_end(&mut self) -> ~[u8];\n \n }\n \n+impl<T: Reader> ReaderUtil for T {\n+    fn read_byte(&mut self) -> Option<u8> {\n+        let mut buf = [0];\n+        match self.read(buf) {\n+            Some(nread) if nread == 0 => {\n+                debug!(\"read 0 bytes. trying again\");\n+                self.read_byte()\n+            }\n+            Some(nread) => Some(buf[0]),\n+            None => None\n+        }\n+    }\n+\n+    fn push_bytes(&mut self, buf: &mut ~[u8], len: uint) -> bool {\n+        unsafe {\n+            let start_len = buf.len();\n+            let mut total_read = 0;\n+            let mut eof = false;\n+\n+            vec::reserve_at_least(buf, start_len + len);\n+            vec::raw::set_len(buf, start_len + len);\n+\n+            do (|| {\n+                while total_read < len {\n+                    let slice = vec::mut_slice(*buf, start_len + total_read, buf.len());\n+                    match self.read(slice) {\n+                        Some(nread) => {\n+                            total_read += nread;\n+                        }\n+                        None => {\n+                            eof = true;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }).finally {\n+                vec::raw::set_len(buf, start_len + total_read);\n+            }\n+\n+            return !eof;\n+        }\n+    }\n+\n+    fn read_bytes(&mut self, len: uint) -> ~[u8] {\n+        let mut buf = vec::with_capacity(len);\n+        self.push_bytes(&mut buf, len);\n+        return buf;\n+    }\n+\n+    fn read_to_end(&mut self) -> ~[u8] {\n+        fail!()\n+    }\n+}\n+\n pub trait ReaderByteConversions {\n     /// Reads `n` little-endian unsigned integer bytes.\n     ///\n@@ -467,3 +544,184 @@ pub trait WriterByteConversions {\n     /// Raises the `io_error` condition on error.\n     fn write_i8(&mut self, n: i8);\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use option::{Some, None};\n+    use cell::Cell;\n+    use rt::io::mem::MemReader;\n+    use rt::io::mock::*;\n+    use rt::io::{io_error, placeholder_error};\n+\n+    #[test]\n+    fn read_byte() {\n+        let mut reader = MemReader::new(~[10]);\n+        let byte = reader.read_byte();\n+        assert!(byte == Some(10));\n+    }\n+\n+    #[test]\n+    fn read_byte_0_bytes() {\n+        let mut reader = MockReader::new();\n+        let count = Cell(0);\n+        reader.read = |buf| {\n+            do count.with_mut_ref |count| {\n+                if *count == 0 {\n+                    *count = 1;\n+                    Some(0)\n+                } else {\n+                    buf[0] = 10;\n+                    Some(1)\n+                }\n+            }\n+        };\n+        let byte = reader.read_byte();\n+        assert!(byte == Some(10));\n+    }\n+\n+    #[test]\n+    fn read_byte_eof() {\n+        let mut reader = MockReader::new();\n+        reader.read = |_| None;\n+        let byte = reader.read_byte();\n+        assert!(byte == None);\n+    }\n+\n+    #[test]\n+    fn read_byte_error() {\n+        let mut reader = MockReader::new();\n+        reader.read = |_| {\n+            io_error::cond.raise(placeholder_error());\n+            None\n+        };\n+        do io_error::cond.trap(|_| {\n+        }).in {\n+            let byte = reader.read_byte();\n+            assert!(byte == None);\n+        }\n+    }\n+\n+    #[test]\n+    fn read_bytes() {\n+        let mut reader = MemReader::new(~[10, 11, 12, 13]);\n+        let bytes = reader.read_bytes(4);\n+        assert!(bytes == ~[10, 11, 12, 13]);\n+    }\n+\n+    #[test]\n+    fn read_bytes_partial() {\n+        let mut reader = MockReader::new();\n+        let count = Cell(0);\n+        reader.read = |buf| {\n+            do count.with_mut_ref |count| {\n+                if *count == 0 {\n+                    *count = 1;\n+                    buf[0] = 10;\n+                    buf[1] = 11;\n+                    Some(2)\n+                } else {\n+                    buf[0] = 12;\n+                    buf[1] = 13;\n+                    Some(2)\n+                }\n+            }\n+        };\n+        let bytes = reader.read_bytes(4);\n+        assert!(bytes == ~[10, 11, 12, 13]);\n+    }\n+\n+    #[test]\n+    fn push_bytes() {\n+        let mut reader = MemReader::new(~[10, 11, 12, 13]);\n+        let mut buf = ~[8, 9];\n+        assert!(reader.push_bytes(&mut buf, 4));\n+        assert!(buf == ~[8, 9, 10, 11, 12, 13]);\n+    }\n+\n+    #[test]\n+    fn push_bytes_partial() {\n+        let mut reader = MockReader::new();\n+        let count = Cell(0);\n+        reader.read = |buf| {\n+            do count.with_mut_ref |count| {\n+                if *count == 0 {\n+                    *count = 1;\n+                    buf[0] = 10;\n+                    buf[1] = 11;\n+                    Some(2)\n+                } else {\n+                    buf[0] = 12;\n+                    buf[1] = 13;\n+                    Some(2)\n+                }\n+            }\n+        };\n+        let mut buf = ~[8, 9];\n+        assert!(reader.push_bytes(&mut buf, 4));\n+        assert!(buf == ~[8, 9, 10, 11, 12, 13]);\n+    }\n+\n+    #[test]\n+    fn push_bytes_eof() {\n+        let mut reader = MemReader::new(~[10, 11]);\n+        let mut buf = ~[8, 9];\n+        assert!(!reader.push_bytes(&mut buf, 4));\n+        assert!(buf == ~[8, 9, 10, 11]);\n+    }\n+\n+    #[test]\n+    fn push_bytes_error() {\n+        let mut reader = MockReader::new();\n+        let count = Cell(0);\n+        reader.read = |buf| {\n+            do count.with_mut_ref |count| {\n+                if *count == 0 {\n+                    *count = 1;\n+                    buf[0] = 10;\n+                    Some(1)\n+                } else {\n+                    io_error::cond.raise(placeholder_error());\n+                    None\n+                }\n+            }\n+        };\n+        let mut buf = ~[8, 9];\n+        do io_error::cond.trap(|_| { } ).in {\n+            assert!(!reader.push_bytes(&mut buf, 4));\n+        }\n+        assert!(buf == ~[8, 9, 10]);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    #[ignore(cfg(windows))]\n+    fn push_bytes_fail_reset_len() {\n+        use unstable::finally::Finally;\n+\n+        // push_bytes unsafely sets the vector length. This is testing that\n+        // upon failure the length is reset correctly.\n+        let mut reader = MockReader::new();\n+        let count = Cell(0);\n+        reader.read = |buf| {\n+            do count.with_mut_ref |count| {\n+                if *count == 0 {\n+                    *count = 1;\n+                    buf[0] = 10;\n+                    Some(1)\n+                } else {\n+                    io_error::cond.raise(placeholder_error());\n+                    None\n+                }\n+            }\n+        };\n+        let buf = @mut ~[8, 9];\n+        do (|| {\n+            reader.push_bytes(&mut *buf, 4);\n+        }).finally {\n+            // NB: Using rtassert here to trigger abort on failure since this is a should_fail test\n+            rtassert!(*buf == ~[8, 9, 10]);\n+        }\n+    }\n+\n+}"}, {"sha": "b580b752bd985c8242eba880ed6c6d32344a6f7b", "filename": "src/libcore/rt/io/mock.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b764d4cb4f0c893caf5a6395db9b1e10a167a28f/src%2Flibcore%2Frt%2Fio%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764d4cb4f0c893caf5a6395db9b1e10a167a28f/src%2Flibcore%2Frt%2Fio%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmock.rs?ref=b764d4cb4f0c893caf5a6395db9b1e10a167a28f", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use option::{Option, None};\n+use rt::io::{Reader, Writer};\n+\n+pub struct MockReader {\n+    read: ~fn(buf: &mut [u8]) -> Option<uint>,\n+    eof: ~fn() -> bool\n+}\n+\n+impl MockReader {\n+    pub fn new() -> MockReader {\n+        MockReader {\n+            read: |_| None,\n+            eof: || false\n+        }\n+    }\n+}\n+\n+impl Reader for MockReader {\n+    fn read(&mut self, buf: &mut [u8]) -> Option<uint> { (self.read)(buf) }\n+    fn eof(&mut self) -> bool { (self.eof)() }\n+}\n+\n+pub struct MockWriter {\n+    write: ~fn(buf: &[u8]),\n+    flush: ~fn()\n+}\n+\n+impl MockWriter {\n+    pub fn new() -> MockWriter {\n+        MockWriter {\n+            write: |_| (),\n+            flush: || ()\n+        }\n+    }\n+}\n+\n+impl Writer for MockWriter {\n+    fn write(&mut self, buf: &[u8]) { (self.write)(buf) }\n+    fn flush(&mut self) { (self.flush)() }\n+}\n\\ No newline at end of file"}, {"sha": "f3b0cd22c17c7613e2f69eeb665130c40a7fd920", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b764d4cb4f0c893caf5a6395db9b1e10a167a28f/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764d4cb4f0c893caf5a6395db9b1e10a167a28f/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=b764d4cb4f0c893caf5a6395db9b1e10a167a28f", "patch": "@@ -316,6 +316,8 @@ pub mod native {\n     }\n }\n \n+/// Mock implementations for testing\n+mod mock;\n \n /// The type passed to I/O condition handlers to indicate error\n ///\n@@ -350,7 +352,8 @@ condition! {\n \n pub trait Reader {\n     /// Read bytes, up to the length of `buf` and place them in `buf`.\n-    /// Returns the number of bytes read, or `None` on EOF.\n+    /// Returns the number of bytes read, or `None` on EOF. The number\n+    /// of bytes read my be less than the number requested, even 0.\n     ///\n     /// # Failure\n     ///\n@@ -361,6 +364,7 @@ pub trait Reader {\n     /// This doesn't take a `len` argument like the old `read`.\n     /// Will people often need to slice their vectors to call this\n     /// and will that be annoying?\n+    /// Is it actually possible for 0 bytes to be read successfully?\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint>;\n \n     /// Return whether the Reader has reached the end of the stream.\n@@ -467,3 +471,11 @@ pub fn standard_error(kind: IoErrorKind) -> IoError {\n         _ => fail!()\n     }\n }\n+\n+pub fn placeholder_error() -> IoError {\n+    IoError {\n+        kind: OtherIoError,\n+        desc: \"Placeholder error. You shouldn't be seeing this\",\n+        detail: None\n+    }\n+}\n\\ No newline at end of file"}]}