{"sha": "a4c9babedb6f19b9dbf065f59761e1c804642189", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YzliYWJlZGI2ZjE5YjlkYmYwNjVmNTk3NjFlMWM4MDQ2NDIxODk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-01-07T18:17:58Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-01-07T18:18:43Z"}, "message": "Proper emit diagnostic without fix", "tree": {"sha": "7a55aeab1287a3daa715ba27031d341766afcce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a55aeab1287a3daa715ba27031d341766afcce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4c9babedb6f19b9dbf065f59761e1c804642189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c9babedb6f19b9dbf065f59761e1c804642189", "html_url": "https://github.com/rust-lang/rust/commit/a4c9babedb6f19b9dbf065f59761e1c804642189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4c9babedb6f19b9dbf065f59761e1c804642189/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55e6da13adb41d84a53927b9bf02dc03fd2a33a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55e6da13adb41d84a53927b9bf02dc03fd2a33a", "html_url": "https://github.com/rust-lang/rust/commit/e55e6da13adb41d84a53927b9bf02dc03fd2a33a"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "4783685294e22ab9443ec2e9f35039b61a42a240", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a4c9babedb6f19b9dbf065f59761e1c804642189/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c9babedb6f19b9dbf065f59761e1c804642189/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=a4c9babedb6f19b9dbf065f59761e1c804642189", "patch": "@@ -64,30 +64,36 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         })\n     })\n     .on::<hir::diagnostics::MissingFields, _>(|d| {\n-        let mut field_list = d.ast(db);\n-        for f in d.missed_fields.iter() {\n-            // Note that although we could add a diagnostics to\n-            // fill the missing tuple field, e.g :\n-            // `struct A(usize);`\n-            // `let a = A { 0: () }`\n-            // but it is uncommon usage and it should not be encouraged.\n-            if f.as_tuple_index().is_some() {\n-                continue;\n-            }\n-            let field = make::record_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n-            field_list = field_list.append_field(&field);\n-        }\n-\n-        let mut builder = TextEditBuilder::default();\n-        algo::diff(&d.ast(db).syntax(), &field_list.syntax()).into_text_edit(&mut builder);\n+        // Note that although we could add a diagnostics to\n+        // fill the missing tuple field, e.g :\n+        // `struct A(usize);`\n+        // `let a = A { 0: () }`\n+        // but it is uncommon usage and it should not be encouraged.\n+        let fix = if d.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n+            None\n+        } else {\n+            let mut field_list = d.ast(db);\n+            for f in d.missed_fields.iter() {\n+                let field =\n+                    make::record_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n+                field_list = field_list.append_field(&field);\n+            }\n+\n+            let mut builder = TextEditBuilder::default();\n+            algo::diff(&d.ast(db).syntax(), &field_list.syntax()).into_text_edit(&mut builder);\n+\n+            Some(SourceChange::source_file_edit_from(\n+                \"fill struct fields\",\n+                file_id,\n+                builder.finish(),\n+            ))\n+        };\n \n-        let fix =\n-            SourceChange::source_file_edit_from(\"fill struct fields\", file_id, builder.finish());\n         res.borrow_mut().push(Diagnostic {\n             range: d.highlight_range(),\n             message: d.message(),\n             severity: Severity::Error,\n-            fix: Some(fix),\n+            fix,\n         })\n     })\n     .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {"}]}