{"sha": "bb93450ec4af83c20e9ba6c8e575aca55423001a", "node_id": "C_kwDOAAsO6NoAKGJiOTM0NTBlYzRhZjgzYzIwZTliYTZjOGU1NzVhY2E1NTQyMzAwMWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-11T11:03:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-11T11:03:12Z"}, "message": "Auto merge of #102915 - JohnTitor:rollup-5ht99y1, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #102258 (Remove unused variable in float formatting.)\n - #102277 (Consistently write `RwLock`)\n - #102412 (Never panic in `thread::park` and `thread::park_timeout`)\n - #102589 (scoped threads: pass closure through MaybeUninit to avoid invalid dangling references)\n - #102625 (fix backtrace small typo)\n - #102859 (Move lifetime resolution module to rustc_hir_analysis.)\n - #102898 (rustdoc: remove unneeded `<div>` wrapper from sidebar DOM)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1f8ec522088447d95945bf12ac8b5fcadc34f95c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f8ec522088447d95945bf12ac8b5fcadc34f95c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb93450ec4af83c20e9ba6c8e575aca55423001a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb93450ec4af83c20e9ba6c8e575aca55423001a", "html_url": "https://github.com/rust-lang/rust/commit/bb93450ec4af83c20e9ba6c8e575aca55423001a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb93450ec4af83c20e9ba6c8e575aca55423001a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e926f06528ecb2503f026e2fd53cb735d487b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e926f06528ecb2503f026e2fd53cb735d487b10", "html_url": "https://github.com/rust-lang/rust/commit/1e926f06528ecb2503f026e2fd53cb735d487b10"}, {"sha": "3011538b80a52aedb2d7374798ffa35ea742d475", "url": "https://api.github.com/repos/rust-lang/rust/commits/3011538b80a52aedb2d7374798ffa35ea742d475", "html_url": "https://github.com/rust-lang/rust/commit/3011538b80a52aedb2d7374798ffa35ea742d475"}], "stats": {"total": 237, "additions": 128, "deletions": 109}, "files": [{"sha": "98bcdcf652011eaddf4fc45567973efd9fb81b68", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -46,6 +46,7 @@ use std::iter;\n \n mod generics_of;\n mod item_bounds;\n+mod lifetimes;\n mod predicates_of;\n mod type_of;\n \n@@ -57,6 +58,7 @@ fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n }\n \n pub fn provide(providers: &mut Providers) {\n+    lifetimes::provide(providers);\n     *providers = Providers {\n         opt_const_param_of: type_of::opt_const_param_of,\n         type_of: type_of::type_of,"}, {"sha": "c1214698cf7708d5d6494d76b93ea5ae0c47d814", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "renamed", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -32,8 +32,6 @@ trait RegionExt {\n     fn id(&self) -> Option<DefId>;\n \n     fn shifted(self, amount: u32) -> Region;\n-\n-    fn shifted_out_to_binder(self, binder: ty::DebruijnIndex) -> Region;\n }\n \n impl RegionExt for Region {\n@@ -69,15 +67,6 @@ impl RegionExt for Region {\n             _ => self,\n         }\n     }\n-\n-    fn shifted_out_to_binder(self, binder: ty::DebruijnIndex) -> Region {\n-        match self {\n-            Region::LateBound(debruijn, index, id) => {\n-                Region::LateBound(debruijn.shifted_out_to_binder(binder), index, id)\n-            }\n-            _ => self,\n-        }\n-    }\n }\n \n /// Maps the id of each lifetime reference to the lifetime decl\n@@ -101,8 +90,8 @@ struct NamedRegionMap {\n     late_bound_vars: HirIdMap<Vec<ty::BoundVariableKind>>,\n }\n \n-pub(crate) struct LifetimeContext<'a, 'tcx> {\n-    pub(crate) tcx: TyCtxt<'tcx>,\n+struct LifetimeContext<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     map: &'a mut NamedRegionMap,\n     scope: ScopeRef<'a>,\n \n@@ -234,7 +223,7 @@ type ScopeRef<'a> = &'a Scope<'a>;\n \n const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub(crate) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         resolve_lifetimes_trait_definition,\n         resolve_lifetimes,", "previous_filename": "compiler/rustc_resolve/src/late/lifetimes.rs"}, {"sha": "8fd4224ca38fec246ccdb669a98fc7c9a23425db", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -739,7 +739,6 @@ pub static DEFAULT_QUERY_PROVIDERS: LazyLock<Providers> = LazyLock::new(|| {\n     ty::provide(providers);\n     traits::provide(providers);\n     rustc_passes::provide(providers);\n-    rustc_resolve::provide(providers);\n     rustc_traits::provide(providers);\n     rustc_ty_utils::provide(providers);\n     rustc_metadata::provide(providers);"}, {"sha": "c08f4a7204d8912089e21966aaa84cd15581b9df", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -34,7 +34,6 @@ use std::collections::{hash_map::Entry, BTreeSet};\n use std::mem::{replace, take};\n \n mod diagnostics;\n-pub(crate) mod lifetimes;\n \n type Res = def::Res<NodeId>;\n "}, {"sha": "095a57ae24fe358cb3c534524fa7cf08fa0c4d96", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -42,7 +42,6 @@ use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::span_bug;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::{CrateStore, CrateStoreDyn, MetadataLoaderDyn};\n@@ -2082,7 +2081,3 @@ impl Finalize {\n         Finalize { node_id, path_span, root_span, report_private: true }\n     }\n }\n-\n-pub fn provide(providers: &mut Providers) {\n-    late::lifetimes::provide(providers);\n-}"}, {"sha": "ed3e0edaff2a25cb1f5a48c88a183f5b8832d066", "filename": "library/core/src/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -253,7 +253,6 @@ pub fn format_shortest_opt<'a>(\n     let delta1frac = delta1 & ((1 << e) - 1);\n \n     // render integral parts, while checking for the accuracy at each step.\n-    let mut kappa = max_kappa as i16;\n     let mut ten_kappa = max_ten_kappa; // 10^kappa\n     let mut remainder = plus1int; // digits yet to be rendered\n     loop {\n@@ -290,12 +289,10 @@ pub fn format_shortest_opt<'a>(\n         // the exact number of digits is `max_kappa + 1` as `plus1 < 10^(max_kappa+1)`.\n         if i > max_kappa as usize {\n             debug_assert_eq!(ten_kappa, 1);\n-            debug_assert_eq!(kappa, 0);\n             break;\n         }\n \n         // restore invariants\n-        kappa -= 1;\n         ten_kappa /= 10;\n         remainder = r;\n     }\n@@ -338,7 +335,6 @@ pub fn format_shortest_opt<'a>(\n         }\n \n         // restore invariants\n-        kappa -= 1;\n         remainder = r;\n     }\n "}, {"sha": "34b57c37635cb44384ff7145b588150e1344a1d8", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -14,8 +14,8 @@\n //! Backtraces are attempted to be as accurate as possible, but no guarantees\n //! are provided about the exact accuracy of a backtrace. Instruction pointers,\n //! symbol names, filenames, line numbers, etc, may all be incorrect when\n-//! reported. Accuracy is attempted on a best-effort basis, however, and bugs\n-//! are always welcome to indicate areas of improvement!\n+//! reported. Accuracy is attempted on a best-effort basis, however, any bug\n+//! reports are always welcome to indicate areas of improvement!\n //!\n //! For most platforms a backtrace with a filename/line number requires that\n //! programs be compiled with debug information. Without debug information\n@@ -39,7 +39,7 @@\n //! default. Its behavior is governed by two environment variables:\n //!\n //! * `RUST_LIB_BACKTRACE` - if this is set to `0` then `Backtrace::capture`\n-//!   will never capture a backtrace. Any other value this is set to will enable\n+//!   will never capture a backtrace. Any other value set will enable\n //!   `Backtrace::capture`.\n //!\n //! * `RUST_BACKTRACE` - if `RUST_LIB_BACKTRACE` is not set, then this variable"}, {"sha": "8b387760768c5603334616b0b5a77b0d36c5152d", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -167,7 +167,7 @@ impl<T> RwLock<T> {\n }\n \n impl<T: ?Sized> RwLock<T> {\n-    /// Locks this rwlock with shared read access, blocking the current thread\n+    /// Locks this `RwLock` with shared read access, blocking the current thread\n     /// until it can be acquired.\n     ///\n     /// The calling thread will be blocked until there are no more writers which\n@@ -181,9 +181,10 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock.\n-    /// The failure will occur immediately after the lock has been acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. The failure will occur immediately after the lock has been\n+    /// acquired.\n     ///\n     /// # Panics\n     ///\n@@ -215,7 +216,7 @@ impl<T: ?Sized> RwLock<T> {\n         }\n     }\n \n-    /// Attempts to acquire this rwlock with shared read access.\n+    /// Attempts to acquire this `RwLock` with shared read access.\n     ///\n     /// If the access could not be granted at this time, then `Err` is returned.\n     /// Otherwise, an RAII guard is returned which will release the shared access\n@@ -228,13 +229,13 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the [`Poisoned`] error if the RwLock is poisoned.\n-    /// An RwLock is poisoned whenever a writer panics while holding an exclusive\n-    /// lock. `Poisoned` will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return the [`Poisoned`] error if the `RwLock` is\n+    /// poisoned. An `RwLock` is poisoned whenever a writer panics while holding\n+    /// an exclusive lock. `Poisoned` will only be returned if the lock would\n+    /// have otherwise been acquired.\n     ///\n-    /// This function will return the [`WouldBlock`] error if the RwLock could not\n-    /// be acquired because it was already locked exclusively.\n+    /// This function will return the [`WouldBlock`] error if the `RwLock` could\n+    /// not be acquired because it was already locked exclusively.\n     ///\n     /// [`Poisoned`]: TryLockError::Poisoned\n     /// [`WouldBlock`]: TryLockError::WouldBlock\n@@ -263,20 +264,20 @@ impl<T: ?Sized> RwLock<T> {\n         }\n     }\n \n-    /// Locks this rwlock with exclusive write access, blocking the current\n+    /// Locks this `RwLock` with exclusive write access, blocking the current\n     /// thread until it can be acquired.\n     ///\n     /// This function will not return while other writers or other readers\n     /// currently have access to the lock.\n     ///\n-    /// Returns an RAII guard which will drop the write access of this rwlock\n+    /// Returns an RAII guard which will drop the write access of this `RwLock`\n     /// when dropped.\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock.\n-    /// An error will be returned when the lock is acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. An error will be returned when the lock is acquired.\n     ///\n     /// # Panics\n     ///\n@@ -303,7 +304,7 @@ impl<T: ?Sized> RwLock<T> {\n         }\n     }\n \n-    /// Attempts to lock this rwlock with exclusive write access.\n+    /// Attempts to lock this `RwLock` with exclusive write access.\n     ///\n     /// If the lock could not be acquired at this time, then `Err` is returned.\n     /// Otherwise, an RAII guard is returned which will release the lock when\n@@ -316,13 +317,13 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the [`Poisoned`] error if the RwLock is\n-    /// poisoned. An RwLock is poisoned whenever a writer panics while holding\n-    /// an exclusive lock. `Poisoned` will only be returned if the lock would have\n-    /// otherwise been acquired.\n+    /// This function will return the [`Poisoned`] error if the `RwLock` is\n+    /// poisoned. An `RwLock` is poisoned whenever a writer panics while holding\n+    /// an exclusive lock. `Poisoned` will only be returned if the lock would\n+    /// have otherwise been acquired.\n     ///\n-    /// This function will return the [`WouldBlock`] error if the RwLock could not\n-    /// be acquired because it was already locked exclusively.\n+    /// This function will return the [`WouldBlock`] error if the `RwLock` could\n+    /// not be acquired because it was already locked exclusively.\n     ///\n     /// [`Poisoned`]: TryLockError::Poisoned\n     /// [`WouldBlock`]: TryLockError::WouldBlock\n@@ -422,10 +423,10 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. An error will only be returned if the lock would have otherwise\n+    /// been acquired.\n     ///\n     /// # Examples\n     ///\n@@ -455,10 +456,10 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. An error will only be returned if the lock would have otherwise\n+    /// been acquired.\n     ///\n     /// # Examples\n     ///"}, {"sha": "55110c44b6e98da742227bf25a6148f3ee7a2e20", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -160,7 +160,7 @@ use crate::ffi::{CStr, CString};\n use crate::fmt;\n use crate::io;\n use crate::marker::PhantomData;\n-use crate::mem;\n+use crate::mem::{self, forget};\n use crate::num::NonZeroU64;\n use crate::num::NonZeroUsize;\n use crate::panic;\n@@ -499,13 +499,40 @@ impl Builder {\n         let output_capture = crate::io::set_output_capture(None);\n         crate::io::set_output_capture(output_capture.clone());\n \n+        // Pass `f` in `MaybeUninit` because actually that closure might *run longer than the lifetime of `F`*.\n+        // See <https://github.com/rust-lang/rust/issues/101983> for more details.\n+        // To prevent leaks we use a wrapper that drops its contents.\n+        #[repr(transparent)]\n+        struct MaybeDangling<T>(mem::MaybeUninit<T>);\n+        impl<T> MaybeDangling<T> {\n+            fn new(x: T) -> Self {\n+                MaybeDangling(mem::MaybeUninit::new(x))\n+            }\n+            fn into_inner(self) -> T {\n+                // SAFETY: we are always initiailized.\n+                let ret = unsafe { self.0.assume_init_read() };\n+                // Make sure we don't drop.\n+                mem::forget(self);\n+                ret\n+            }\n+        }\n+        impl<T> Drop for MaybeDangling<T> {\n+            fn drop(&mut self) {\n+                // SAFETY: we are always initiailized.\n+                unsafe { self.0.assume_init_drop() };\n+            }\n+        }\n+\n+        let f = MaybeDangling::new(f);\n         let main = move || {\n             if let Some(name) = their_thread.cname() {\n                 imp::Thread::set_name(name);\n             }\n \n             crate::io::set_output_capture(output_capture);\n \n+            // SAFETY: we constructed `f` initialized.\n+            let f = f.into_inner();\n             // SAFETY: the stack guard passed is the one for the current thread.\n             // This means the current thread's stack and the new thread's stack\n             // are properly set and protected from each other.\n@@ -518,6 +545,12 @@ impl Builder {\n             // same `JoinInner` as this closure meaning the mutation will be\n             // safe (not modify it and affect a value far away).\n             unsafe { *their_packet.result.get() = Some(try_result) };\n+            // Here `their_packet` gets dropped, and if this is the last `Arc` for that packet that\n+            // will call `decrement_num_running_threads` and therefore signal that this thread is\n+            // done.\n+            drop(their_packet);\n+            // Here, the lifetime `'a` and even `'scope` can end. `main` keeps running for a bit\n+            // after that before returning itself.\n         };\n \n         if let Some(scope_data) = &my_packet.scope {\n@@ -851,10 +884,22 @@ pub fn sleep(dur: Duration) {\n     imp::Thread::sleep(dur)\n }\n \n+/// Used to ensure that `park` and `park_timeout` do not unwind, as that can\n+/// cause undefined behaviour if not handled correctly (see #102398 for context).\n+struct PanicGuard;\n+\n+impl Drop for PanicGuard {\n+    fn drop(&mut self) {\n+        rtabort!(\"an irrecoverable error occurred while synchronizing threads\")\n+    }\n+}\n+\n /// Blocks unless or until the current thread's token is made available.\n ///\n /// A call to `park` does not guarantee that the thread will remain parked\n-/// forever, and callers should be prepared for this possibility.\n+/// forever, and callers should be prepared for this possibility. However,\n+/// it is guaranteed that this function will not panic (it may abort the\n+/// process if the implementation encounters some rare errors).\n ///\n /// # park and unpark\n ///\n@@ -939,10 +984,13 @@ pub fn sleep(dur: Duration) {\n /// [`thread::park_timeout`]: park_timeout\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn park() {\n+    let guard = PanicGuard;\n     // SAFETY: park_timeout is called on the parker owned by this thread.\n     unsafe {\n         current().inner.as_ref().parker().park();\n     }\n+    // No panic occurred, do not abort.\n+    forget(guard);\n }\n \n /// Use [`park_timeout`].\n@@ -1003,10 +1051,13 @@ pub fn park_timeout_ms(ms: u32) {\n /// ```\n #[stable(feature = \"park_timeout\", since = \"1.4.0\")]\n pub fn park_timeout(dur: Duration) {\n+    let guard = PanicGuard;\n     // SAFETY: park_timeout is called on the parker owned by this thread.\n     unsafe {\n         current().inner.as_ref().parker().park_timeout(dur);\n     }\n+    // No panic occurred, do not abort.\n+    forget(guard);\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "1e162bf314b8701ab08475797834aae2e35ccaf7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -1853,12 +1853,12 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n \n     buffer.write_str(\"<div class=\\\"sidebar-elems\\\">\");\n     if it.is_crate() {\n-        write!(buffer, \"<div class=\\\"block\\\"><ul>\");\n+        write!(buffer, \"<ul class=\\\"block\\\">\");\n         if let Some(ref version) = cx.cache().crate_version {\n             write!(buffer, \"<li class=\\\"version\\\">Version {}</li>\", Escape(version));\n         }\n         write!(buffer, \"<li><a id=\\\"all-types\\\" href=\\\"all.html\\\">All Items</a></li>\");\n-        buffer.write_str(\"</ul></div>\");\n+        buffer.write_str(\"</ul>\");\n     }\n \n     match *it.kind {\n@@ -2258,8 +2258,7 @@ fn extract_for_impl_name(item: &clean::Item, cx: &Context<'_>) -> Option<(String\n     }\n }\n \n-/// Don't call this function directly!!! Use `print_sidebar_title` or `print_sidebar_block` instead!\n-fn print_sidebar_title_inner(buf: &mut Buffer, id: &str, title: &str) {\n+fn print_sidebar_title(buf: &mut Buffer, id: &str, title: &str) {\n     write!(\n         buf,\n         \"<h3 class=\\\"sidebar-title\\\">\\\n@@ -2269,25 +2268,18 @@ fn print_sidebar_title_inner(buf: &mut Buffer, id: &str, title: &str) {\n     );\n }\n \n-fn print_sidebar_title(buf: &mut Buffer, id: &str, title: &str) {\n-    buf.push_str(\"<div class=\\\"block\\\">\");\n-    print_sidebar_title_inner(buf, id, title);\n-    buf.push_str(\"</div>\");\n-}\n-\n fn print_sidebar_block(\n     buf: &mut Buffer,\n     id: &str,\n     title: &str,\n     items: impl Iterator<Item = impl fmt::Display>,\n ) {\n-    buf.push_str(\"<div class=\\\"block\\\">\");\n-    print_sidebar_title_inner(buf, id, title);\n-    buf.push_str(\"<ul>\");\n+    print_sidebar_title(buf, id, title);\n+    buf.push_str(\"<ul class=\\\"block\\\">\");\n     for item in items {\n         write!(buf, \"<li>{}</li>\", item);\n     }\n-    buf.push_str(\"</ul></div>\");\n+    buf.push_str(\"</ul>\");\n }\n \n fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n@@ -2676,9 +2668,7 @@ pub(crate) fn sidebar_module_like(buf: &mut Buffer, item_sections_in_use: FxHash\n         write!(\n             buf,\n             \"<section>\\\n-                 <div class=\\\"block\\\">\\\n-                     <ul>{}</ul>\\\n-                 </div>\\\n+                 <ul class=\\\"block\\\">{}</ul>\\\n              </section>\",\n             sidebar\n         );"}, {"sha": "661aed71298d98ae2ea1bc2f50d9ce2e5a246973", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -501,13 +501,14 @@ img {\n \twidth: 100px;\n }\n \n-.block ul, .block li {\n+ul.block, .block li {\n \tpadding: 0;\n \tmargin: 0;\n \tlist-style: none;\n }\n \n .block a,\n+.sidebar h3 a,\n h2.location a {\n \tdisplay: block;\n \tpadding: 0.25rem;\n@@ -767,7 +768,7 @@ h2.small-section-header > .anchor {\n \ttext-decoration: underline;\n }\n \n-.block a.current.crate { font-weight: 500; }\n+.crate.block a.current { font-weight: 500; }\n \n /*  In most contexts we use `overflow-wrap: anywhere` to ensure that we can wrap\n \tas much as needed on mobile (see"}, {"sha": "0180c0ead8d3924c54c59a3f14e66024a883031f", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -442,12 +442,10 @@ function loadCss(cssFileName) {\n                 return;\n             }\n \n-            const div = document.createElement(\"div\");\n-            div.className = \"block \" + shortty;\n             const h3 = document.createElement(\"h3\");\n             h3.innerHTML = `<a href=\"index.html#${id}\">${longty}</a>`;\n-            div.appendChild(h3);\n             const ul = document.createElement(\"ul\");\n+            ul.className = \"block \" + shortty;\n \n             for (const item of filtered) {\n                 const name = item[0];\n@@ -473,8 +471,8 @@ function loadCss(cssFileName) {\n                 li.appendChild(link);\n                 ul.appendChild(li);\n             }\n-            div.appendChild(ul);\n-            sidebar.appendChild(div);\n+            sidebar.appendChild(h3);\n+            sidebar.appendChild(ul);\n         }\n \n         if (sidebar) {\n@@ -592,27 +590,25 @@ function loadCss(cssFileName) {\n             return;\n         }\n         // Draw a convenient sidebar of known crates if we have a listing\n-        const div = document.createElement(\"div\");\n-        div.className = \"block crate\";\n-        div.innerHTML = \"<h3>Crates</h3>\";\n+        const h3 = document.createElement(\"h3\");\n+        h3.innerHTML = \"Crates\";\n         const ul = document.createElement(\"ul\");\n-        div.appendChild(ul);\n+        ul.className = \"block crate\";\n \n         for (const crate of window.ALL_CRATES) {\n-            let klass = \"crate\";\n-            if (window.rootPath !== \"./\" && crate === window.currentCrate) {\n-                klass += \" current\";\n-            }\n             const link = document.createElement(\"a\");\n             link.href = window.rootPath + crate + \"/index.html\";\n-            link.className = klass;\n+            if (window.rootPath !== \"./\" && crate === window.currentCrate) {\n+                link.className = \"current\";\n+            }\n             link.textContent = crate;\n \n             const li = document.createElement(\"li\");\n             li.appendChild(link);\n             ul.appendChild(li);\n         }\n-        sidebarElems.appendChild(div);\n+        sidebarElems.appendChild(h3);\n+        sidebarElems.appendChild(ul);\n     }\n \n "}, {"sha": "9a77d8bbd15417a4b5b1b70f504f82d8e38742b1", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -106,8 +106,8 @@ assert-css: (\"h6#sub-heading-for-enum-impl-item-doc\", {\"border-bottom-width\": \"0\n assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"font-size\": \"14px\"})\n assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n \n-assert-text: (\".sidebar .mod h3\", \"Modules\")\n-assert-css: (\".sidebar .mod h3\", {\"border-bottom-width\": \"0px\"}, ALL)\n+assert-text: (\"//ul[@class='block mod']/preceding-sibling::h3\", \"Modules\")\n+assert-css: (\"//ul[@class='block mod']/preceding-sibling::h3\", {\"border-bottom-width\": \"0px\"}, ALL)\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/union.HeavilyDocumentedUnion.html\"\n "}, {"sha": "54193234af9dd50abd582876e1346320dff0bac3", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -12,7 +12,7 @@ assert-count: (\".sidebar .location\", 1)\n assert-text: (\"#all-types\", \"All Items\")\n assert-css: (\"#all-types\", {\"color\": \"rgb(53, 109, 164)\"})\n // We check that we have the crates list and that the \"current\" on is \"test_docs\".\n-assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"test_docs\")\n+assert-text: (\".sidebar-elems ul.crate > li > a.current\", \"test_docs\")\n // And we're also supposed to have the list of items in the current module.\n assert-text: (\".sidebar-elems section ul > li:nth-child(1)\", \"Re-exports\")\n assert-text: (\".sidebar-elems section ul > li:nth-child(2)\", \"Modules\")\n@@ -41,21 +41,21 @@ assert-property: (\"html\", {\"scrollTop\": \"0\"})\n // We now go back to the crate page to click on the \"lib2\" crate link.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n-assert-css: (\".sidebar-elems .crate > ul > li:first-child > a\", {\"color\": \"rgb(53, 109, 164)\"})\n-click: \".sidebar-elems .crate > ul > li:first-child > a\"\n+assert-css: (\".sidebar-elems ul.crate > li:first-child > a\", {\"color\": \"rgb(53, 109, 164)\"})\n+click: \".sidebar-elems ul.crate > li:first-child > a\"\n \n // PAGE: lib2/index.html\n goto: \"file://\" + |DOC_PATH| + \"/lib2/index.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n assert-text: (\".sidebar > .location\", \"Crate lib2\")\n // We check that we have the crates list and that the \"current\" on is now \"lib2\".\n-assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"lib2\")\n+assert-text: (\".sidebar-elems ul.crate > li > a.current\", \"lib2\")\n // We now go to the \"foobar\" function page.\n-assert-text: (\".sidebar-elems > section .block ul > li:nth-child(1)\", \"Modules\")\n-assert-text: (\".sidebar-elems > section .block ul > li:nth-child(2)\", \"Structs\")\n-assert-text: (\".sidebar-elems > section .block ul > li:nth-child(3)\", \"Traits\")\n-assert-text: (\".sidebar-elems > section .block ul > li:nth-child(4)\", \"Functions\")\n-assert-text: (\".sidebar-elems > section .block ul > li:nth-child(5)\", \"Type Definitions\")\n+assert-text: (\".sidebar-elems > section ul.block > li:nth-child(1)\", \"Modules\")\n+assert-text: (\".sidebar-elems > section ul.block > li:nth-child(2)\", \"Structs\")\n+assert-text: (\".sidebar-elems > section ul.block > li:nth-child(3)\", \"Traits\")\n+assert-text: (\".sidebar-elems > section ul.block > li:nth-child(4)\", \"Functions\")\n+assert-text: (\".sidebar-elems > section ul.block > li:nth-child(5)\", \"Type Definitions\")\n assert-text: (\"#functions + .item-table .item-left > a\", \"foobar\")\n click: \"#functions + .item-table .item-left > a\"\n \n@@ -90,7 +90,7 @@ assert-property: (\".sidebar-elems section .block li > a\", {\"offsetHeight\": 29})\n // appropriate anchor in index.html.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n-click: \".block.mod h3 a\"\n+click: \"//ul[@class='block mod']/preceding-sibling::h3/a\"\n // PAGE: index.html\n assert-css: (\"#modules\", {\"background-color\": \"rgb(253, 255, 211)\"})\n "}, {"sha": "782198956a0f353aecd7ea267b7a06d6a9b99db9", "filename": "src/test/rustdoc/strip-enum-variant.no-not-shown.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Ftest%2Frustdoc%2Fstrip-enum-variant.no-not-shown.html", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Ftest%2Frustdoc%2Fstrip-enum-variant.no-not-shown.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstrip-enum-variant.no-not-shown.html?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -1 +1 @@\n-<ul><li><a href=\"#variant.Shown\">Shown</a></li></ul>\n\\ No newline at end of file\n+<ul class=\"block\"><li><a href=\"#variant.Shown\">Shown</a></li></ul>\n\\ No newline at end of file"}, {"sha": "8753a7dc613a855b6012028a768ce21524403862", "filename": "src/test/rustdoc/strip-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Ftest%2Frustdoc%2Fstrip-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb93450ec4af83c20e9ba6c8e575aca55423001a/src%2Ftest%2Frustdoc%2Fstrip-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstrip-enum-variant.rs?ref=bb93450ec4af83c20e9ba6c8e575aca55423001a", "patch": "@@ -3,7 +3,7 @@\n // @!has - '//code' 'NotShown'\n // @has - '//code' '// some variants omitted'\n // Also check that `NotShown` isn't displayed in the sidebar.\n-// @snapshot no-not-shown - '//*[@class=\"sidebar-elems\"]/section/*[@class=\"block\"][1]/ul'\n+// @snapshot no-not-shown - '//*[@class=\"sidebar-elems\"]/section/*[@class=\"block\"][1]'\n pub enum MyThing {\n     Shown,\n     #[doc(hidden)]"}]}