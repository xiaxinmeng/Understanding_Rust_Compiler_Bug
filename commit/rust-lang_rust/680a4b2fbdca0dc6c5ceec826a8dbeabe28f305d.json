{"sha": "680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MGE0YjJmYmRjYTBkYzZjNWNlZWM4MjZhOGRiZWFiZTI4ZjMwNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-03T01:00:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-03T01:00:39Z"}, "message": "Auto merge of #72935 - Dylan-DPC:rollup-60g3ab6, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #72704 (Remote testing fixes)\n - #72820 (InstCombine: Don't optimize `&mut *x` into `x`)\n - #72848 (Correct generic parameter ordering in error note for E0747)\n - #72902 (Add a test to ensure Fuse stays covariant)\n - #72921 (Add assert to Vec with_capacity docs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "200cca83afffab0ecf5dc1427de7b8169069ad7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/200cca83afffab0ecf5dc1427de7b8169069ad7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "html_url": "https://github.com/rust-lang/rust/commit/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe10f1a49f5ca46e57261b95f46f519523f418fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe10f1a49f5ca46e57261b95f46f519523f418fe", "html_url": "https://github.com/rust-lang/rust/commit/fe10f1a49f5ca46e57261b95f46f519523f418fe"}, {"sha": "ba3d98250f886279e204f6e650666df6818777e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3d98250f886279e204f6e650666df6818777e2", "html_url": "https://github.com/rust-lang/rust/commit/ba3d98250f886279e204f6e650666df6818777e2"}], "stats": {"total": 114, "additions": 83, "deletions": 31}, "files": [{"sha": "22d43468771b45375c3a39b95df293ba964cae45", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -348,9 +348,11 @@ impl<T> Vec<T> {\n     /// for i in 0..10 {\n     ///     vec.push(i);\n     /// }\n+    /// assert_eq!(vec.capacity(), 10);\n     ///\n     /// // ...but this may make the vector reallocate\n     /// vec.push(11);\n+    /// assert!(vec.capacity() >= 11);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "7967137e01e5424f954cfcfc2e6510724dee5717", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -1,11 +1,12 @@\n //! Performs various peephole optimizations.\n \n use crate::transform::{MirPass, MirSource};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::Mutability;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::{\n-    Body, Constant, Local, Location, Mutability, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n+    Body, Constant, Local, Location, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n };\n use rustc_middle::ty::{self, TyCtxt};\n use std::mem;\n@@ -39,7 +40,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n-        if let Some(mtbl) = self.optimizations.and_stars.remove(&location) {\n+        if self.optimizations.and_stars.remove(&location) {\n             debug!(\"replacing `&*`: {:?}\", rvalue);\n             let new_place = match rvalue {\n                 Rvalue::Ref(_, _, place) => {\n@@ -57,10 +58,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n                 }\n                 _ => bug!(\"Detected `&*` but didn't find `&*`!\"),\n             };\n-            *rvalue = Rvalue::Use(match mtbl {\n-                Mutability::Mut => Operand::Move(new_place),\n-                Mutability::Not => Operand::Copy(new_place),\n-            });\n+            *rvalue = Rvalue::Use(Operand::Copy(new_place))\n         }\n \n         if let Some(constant) = self.optimizations.arrays_lengths.remove(&location) {\n@@ -93,8 +91,8 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n             {\n                 // The dereferenced place must have type `&_`.\n                 let ty = Place::ty_from(local, proj_base, self.body, self.tcx).ty;\n-                if let ty::Ref(_, _, mtbl) = ty.kind {\n-                    self.optimizations.and_stars.insert(location, mtbl);\n+                if let ty::Ref(_, _, Mutability::Not) = ty.kind {\n+                    self.optimizations.and_stars.insert(location);\n                 }\n             }\n         }\n@@ -114,6 +112,6 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n \n #[derive(Default)]\n struct OptimizationList<'tcx> {\n-    and_stars: FxHashMap<Location, Mutability>,\n+    and_stars: FxHashSet<Location>,\n     arrays_lengths: FxHashMap<Location, Constant<'tcx>>,\n }"}, {"sha": "f1dc7e5390629a11f297d36f73ebe94b9bf5faa4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -8,6 +8,7 @@\n use crate::collect::PlaceholderHirTyCollector;\n use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n+use rustc_ast::ast::ParamKindOrd;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n@@ -483,8 +484,25 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             arg.descr(),\n             kind,\n         );\n+\n+        let kind_ord = match kind {\n+            \"lifetime\" => ParamKindOrd::Lifetime,\n+            \"type\" => ParamKindOrd::Type,\n+            \"constant\" => ParamKindOrd::Const,\n+            // It's more concise to match on the string representation, though it means\n+            // the match is non-exhaustive.\n+            _ => bug!(\"invalid generic parameter kind {}\", kind),\n+        };\n+        let arg_ord = match arg {\n+            GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n+            GenericArg::Type(_) => ParamKindOrd::Type,\n+            GenericArg::Const(_) => ParamKindOrd::Const,\n+        };\n+\n         // This note will be true as long as generic parameters are strictly ordered by their kind.\n-        err.note(&format!(\"{} arguments must be provided before {} arguments\", kind, arg.descr()));\n+        let (first, last) =\n+            if kind_ord < arg_ord { (kind, arg.descr()) } else { (arg.descr(), kind) };\n+        err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n         err.emit();\n     }\n "}, {"sha": "44f412c2e267428468cf5846a27ff61a4066de33", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.a.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -8,14 +8,18 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     let mut _4: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n     scope 1 {\n         debug self => _4;                // in scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        let mut _5: &mut [T];            // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n-        _3 = move _4;                    // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        StorageLive(_5);                 // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        _5 = &mut (*_4);                 // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:14: 3:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15"}, {"sha": "48e48f989bd94af11b3685ba655474f9ad7d29af", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.b.Inline.after.mir", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -9,6 +9,7 @@ fn b(_1: &mut std::boxed::Box<T>) -> &mut T {\n     scope 1 {\n         debug self => _4;                // in scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n         let mut _5: &mut T;              // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        let mut _6: &mut T;              // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     }\n \n     bb0: {\n@@ -17,8 +18,11 @@ fn b(_1: &mut std::boxed::Box<T>) -> &mut T {\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _5 = &mut (*(*_4));              // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _3 = move _5;                    // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        StorageLive(_6);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _6 = &mut (*(*_4));              // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _5 = &mut (*_6);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        StorageDead(_6);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n         StorageDead(_5);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:14: 8:15"}, {"sha": "4511470f3a50f69fae79bcf6a81834ca48d1be81", "filename": "src/test/mir-opt/nrvo-simple/rustc.nrvo.RenameReturnPlace.diff", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fmir-opt%2Fnrvo-simple%2Frustc.nrvo.RenameReturnPlace.diff", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fmir-opt%2Fnrvo-simple%2Frustc.nrvo.RenameReturnPlace.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo-simple%2Frustc.nrvo.RenameReturnPlace.diff?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -26,12 +26,17 @@\n                                            // + span: $DIR/nrvo-simple.rs:3:20: 3:21\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           StorageLive(_3);                 // scope 1 at $DIR/nrvo-simple.rs:4:5: 4:19\n+          StorageLive(_5);                 // scope 1 at $DIR/nrvo-simple.rs:4:10: 4:18\n+          StorageLive(_6);                 // scope 1 at $DIR/nrvo-simple.rs:4:10: 4:18\n -         _6 = &mut _2;                    // scope 1 at $DIR/nrvo-simple.rs:4:10: 4:18\n +         _6 = &mut _0;                    // scope 1 at $DIR/nrvo-simple.rs:4:10: 4:18\n-          _3 = move _1(move _6) -> bb1;    // scope 1 at $DIR/nrvo-simple.rs:4:5: 4:19\n+          _5 = &mut (*_6);                 // scope 1 at $DIR/nrvo-simple.rs:4:10: 4:18\n+          _3 = move _1(move _5) -> bb1;    // scope 1 at $DIR/nrvo-simple.rs:4:5: 4:19\n       }\n   \n       bb1: {\n+          StorageDead(_5);                 // scope 1 at $DIR/nrvo-simple.rs:4:18: 4:19\n+          StorageDead(_6);                 // scope 1 at $DIR/nrvo-simple.rs:4:19: 4:20\n           StorageDead(_3);                 // scope 1 at $DIR/nrvo-simple.rs:4:19: 4:20\n -         _0 = _2;                         // scope 1 at $DIR/nrvo-simple.rs:5:5: 5:8\n -         StorageDead(_2);                 // scope 0 at $DIR/nrvo-simple.rs:6:1: 6:2"}, {"sha": "e97dcab6ae560e7c9a3d79120914aecb3e7f2483", "filename": "src/test/ui-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -3,6 +3,7 @@\n \n // ignore-cross-compile\n // ignore-stage1\n+// ignore-remote\n \n #![feature(rustc_private)]\n "}, {"sha": "ff7bbafe7c212176a77b005269ea8124c8ff15b6", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // Testing that a librustc_ast can parse modules with canonicalized base path\n // ignore-cross-compile\n+// ignore-remote\n \n #![feature(rustc_private)]\n "}, {"sha": "96f1656bae4ac321c6b2cbfdb4149e3ed7744635", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -124,15 +124,15 @@ error[E0747]: lifetime provided when a type was expected\n LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n    |                                                        ^^\n    |\n-   = note: type arguments must be provided before lifetime arguments\n+   = note: lifetime arguments must be provided before type arguments\n \n error[E0747]: lifetime provided when a type was expected\n   --> $DIR/suggest-move-types.rs:82:56\n    |\n LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n    |                                                        ^^\n    |\n-   = note: type arguments must be provided before lifetime arguments\n+   = note: lifetime arguments must be provided before type arguments\n \n error: aborting due to 12 previous errors\n "}, {"sha": "a542e44d517a7e5c860f07e740309107dce09e85", "filename": "src/test/ui/variance-iterators-in-libcore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fui%2Fvariance-iterators-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftest%2Fui%2Fvariance-iterators-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance-iterators-in-libcore.rs?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -1,9 +1,10 @@\n // run-pass\n \n-#![allow(warnings)]\n+#![allow(dead_code)]\n \n-use std::iter::Zip;\n+use std::iter::{Fuse, Zip};\n \n+fn fuse_covariant<'a, I>(iter: Fuse<&'static I>) -> Fuse<&'a I> { iter }\n fn zip_covariant<'a, A, B>(iter: Zip<&'static A, &'static B>) -> Zip<&'a A, &'a B> { iter }\n \n fn main() { }"}, {"sha": "9d1940dd4d6c20c0cc5e413ced2df891fa6232e8", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -853,6 +853,7 @@ impl Config {\n             name == util::get_pointer_width(&self.target) ||    // pointer width\n             name == self.stage_id.split('-').next().unwrap() || // stage\n             (self.target != self.host && name == \"cross-compile\") ||\n+            (self.remote_test_client.is_some() && name == \"remote\") ||\n             match self.compare_mode {\n                 Some(CompareMode::Nll) => name == \"compare-mode-nll\",\n                 Some(CompareMode::Polonius) => name == \"compare-mode-polonius\","}, {"sha": "efc29163455be29467a89c111a16cc3fbc5af31b", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -224,7 +224,7 @@ fn run(support_lib_count: usize, exe: String, all_args: Vec<String>) {\n     // by the client.\n     for (k, v) in env::vars() {\n         match &k[..] {\n-            \"PATH\" | \"LD_LIBRARY_PATH\" | \"PWD\" => continue,\n+            \"PATH\" | \"LD_LIBRARY_PATH\" | \"PWD\" | \"RUST_TEST_TMPDIR\" => continue,\n             _ => {}\n         }\n         t!(client.write_all(k.as_bytes()));"}, {"sha": "8c56910e2dfad701e4ec7d040ebf66b8dffcd767", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "patch": "@@ -41,6 +41,7 @@ macro_rules! t {\n \n static TEST: AtomicUsize = AtomicUsize::new(0);\n \n+#[derive(Copy, Clone)]\n struct Config {\n     pub remote: bool,\n     pub verbose: bool,\n@@ -71,6 +72,12 @@ impl Config {\n     }\n }\n \n+fn print_verbose(s: &str, conf: Config) {\n+    if conf.verbose {\n+        println!(\"{}\", s);\n+    }\n+}\n+\n fn main() {\n     println!(\"starting test server\");\n \n@@ -83,16 +90,19 @@ fn main() {\n     };\n \n     let listener = t!(TcpListener::bind(bind_addr));\n-    let work: PathBuf = if cfg!(target_os = \"android\") {\n-        \"/data/tmp/work\".into()\n+    let (work, tmp): (PathBuf, PathBuf) = if cfg!(target_os = \"android\") {\n+        (\"/data/tmp/work\".into(), \"/data/tmp/work/tmp\".into())\n     } else {\n-        let mut temp_dir = env::temp_dir();\n-        temp_dir.push(\"work\");\n-        temp_dir\n+        let mut work_dir = env::temp_dir();\n+        work_dir.push(\"work\");\n+        let mut tmp_dir = work_dir.clone();\n+        tmp_dir.push(\"tmp\");\n+        (work_dir, tmp_dir)\n     };\n-    println!(\"listening!\");\n+    println!(\"listening on {}!\", bind_addr);\n \n     t!(fs::create_dir_all(&work));\n+    t!(fs::create_dir_all(&tmp));\n \n     let lock = Arc::new(Mutex::new(()));\n \n@@ -103,22 +113,25 @@ fn main() {\n             continue;\n         }\n         if &buf[..] == b\"ping\" {\n+            print_verbose(\"Received ping\", config);\n             t!(socket.write_all(b\"pong\"));\n         } else if &buf[..] == b\"push\" {\n-            handle_push(socket, &work);\n+            handle_push(socket, &work, config);\n         } else if &buf[..] == b\"run \" {\n             let lock = lock.clone();\n             let work = work.clone();\n-            thread::spawn(move || handle_run(socket, &work, &lock));\n+            let tmp = tmp.clone();\n+            thread::spawn(move || handle_run(socket, &work, &tmp, &lock, config));\n         } else {\n             panic!(\"unknown command {:?}\", buf);\n         }\n     }\n }\n \n-fn handle_push(socket: TcpStream, work: &Path) {\n+fn handle_push(socket: TcpStream, work: &Path, config: Config) {\n     let mut reader = BufReader::new(socket);\n-    recv(&work, &mut reader);\n+    let dst = recv(&work, &mut reader);\n+    print_verbose(&format!(\"push {:#?}\", dst), config);\n \n     let mut socket = reader.into_inner();\n     t!(socket.write_all(b\"ack \"));\n@@ -134,7 +147,7 @@ impl Drop for RemoveOnDrop<'_> {\n     }\n }\n \n-fn handle_run(socket: TcpStream, work: &Path, lock: &Mutex<()>) {\n+fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>, config: Config) {\n     let mut arg = Vec::new();\n     let mut reader = BufReader::new(socket);\n \n@@ -201,6 +214,7 @@ fn handle_run(socket: TcpStream, work: &Path, lock: &Mutex<()>) {\n     // binary is and then we'll download it all to the exe path we calculated\n     // earlier.\n     let exe = recv(&path, &mut reader);\n+    print_verbose(&format!(\"run {:#?}\", exe), config);\n \n     let mut cmd = Command::new(&exe);\n     cmd.args(args);\n@@ -226,6 +240,9 @@ fn handle_run(socket: TcpStream, work: &Path, lock: &Mutex<()>) {\n         cmd.env(\"LD_LIBRARY_PATH\", format!(\"{}:{}\", work.display(), path.display()));\n     }\n \n+    // Some tests assume RUST_TEST_TMPDIR exists\n+    cmd.env(\"RUST_TEST_TMPDIR\", tmp.to_owned());\n+\n     // Spawn the child and ferry over stdout/stderr to the socket in a framed\n     // fashion (poor man's style)\n     let mut child ="}]}