{"sha": "f6fcfa3915242b23df17c1cc14c35c6e7d041496", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZmNmYTM5MTUyNDJiMjNkZjE3YzFjYzE0YzM1YzZlN2QwNDE0OTY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-17T01:48:39Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:50Z"}, "message": "normalize the results of `tcx.type_of` after substituting\n\nAlso remove `def_ty`, which was a footgun because it did not do the\nabove.", "tree": {"sha": "31036d26924981e48cfca12754c807709781a160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31036d26924981e48cfca12754c807709781a160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6fcfa3915242b23df17c1cc14c35c6e7d041496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fcfa3915242b23df17c1cc14c35c6e7d041496", "html_url": "https://github.com/rust-lang/rust/commit/f6fcfa3915242b23df17c1cc14c35c6e7d041496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6fcfa3915242b23df17c1cc14c35c6e7d041496/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88866b5c85c4f789d5b5aaa42f3f5f0799d54708", "url": "https://api.github.com/repos/rust-lang/rust/commits/88866b5c85c4f789d5b5aaa42f3f5f0799d54708", "html_url": "https://github.com/rust-lang/rust/commit/88866b5c85c4f789d5b5aaa42f3f5f0799d54708"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "c873580e3ad6c61243d69d01ee1b140fc8091552", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=f6fcfa3915242b23df17c1cc14c35c6e7d041496", "patch": "@@ -17,6 +17,7 @@ use dep_graph::{DepKind, DepTrackingMapConfig};\n use infer::TransNormalize;\n use std::marker::PhantomData;\n use syntax_pos::DUMMY_SP;\n+use hir::def_id::DefId;\n use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext, Vtable};\n use ty::{self, Ty, TyCtxt};\n use ty::subst::{Subst, Substs};\n@@ -119,6 +120,12 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         let substituted = self.erase_regions(&substituted);\n         AssociatedTypeNormalizerEnv::new(self, param_env).fold(&substituted)\n     }\n+\n+    pub fn trans_impl_self_ty(&self, def_id: DefId, substs: &'tcx Substs<'tcx>)\n+                              -> Ty<'tcx>\n+    {\n+        self.trans_apply_param_substs(substs, &self.type_of(def_id))\n+    }\n }\n \n struct AssociatedTypeNormalizer<'a, 'gcx: 'a> {\n@@ -214,4 +221,3 @@ impl<'gcx> DepTrackingMapConfig for ProjectionCache<'gcx> {\n         DepKind::TraitSelect\n     }\n }\n-"}, {"sha": "5b87273194c696f133f71da56e4a788451b712f5", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=f6fcfa3915242b23df17c1cc14c35c6e7d041496", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> Instance<'tcx> {\n               tcx: TyCtxt<'a, 'tcx, 'tcx>)\n               -> Ty<'tcx>\n     {\n-        let ty = self.def.def_ty(tcx);\n+        let ty = tcx.type_of(self.def.def_id());\n         tcx.trans_apply_param_substs(self.substs, &ty)\n     }\n }\n@@ -69,11 +69,6 @@ impl<'tcx> InstanceDef<'tcx> {\n         }\n     }\n \n-    #[inline]\n-    pub fn def_ty<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {\n-        tcx.type_of(self.def_id())\n-    }\n-\n     #[inline]\n     pub fn attrs<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())"}, {"sha": "a37cf41baaba305495555c83cb3fc84c300ac00b", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=f6fcfa3915242b23df17c1cc14c35c6e7d041496", "patch": "@@ -57,9 +57,7 @@ pub fn eval_body<'a, 'tcx>(\n     if ecx.tcx.has_attr(instance.def_id(), \"linkage\") {\n         return Err(ConstEvalError::NotConst(\"extern global\".to_string()).into());\n     }\n-    // FIXME(eddyb) use `Instance::ty` when it becomes available.\n-    let instance_ty =\n-        ecx.monomorphize(instance.def.def_ty(tcx), instance.substs);\n+    let instance_ty = instance.ty(tcx);\n     if tcx.interpret_interner.borrow().get_cached(cid).is_none() {\n         let mir = ecx.load_mir(instance.def)?;\n         let layout = ecx.layout_of(instance_ty)?;"}, {"sha": "140da7e1097f5edcc54f87e2ac115b16c03cfffd", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=f6fcfa3915242b23df17c1cc14c35c6e7d041496", "patch": "@@ -172,9 +172,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             M::global_item_with_linkage(self, cid.instance, mutability)?;\n             return Ok(false);\n         }\n-        // FIXME(eddyb) use `Instance::ty` when it becomes available.\n-        let instance_ty =\n-            self.monomorphize(instance.def.def_ty(self.tcx), instance.substs);\n+        let instance_ty = instance.ty(self.tcx);\n         let layout = self.layout_of(instance_ty)?;\n         assert!(!layout.is_unsized());\n         let ptr = self.memory.allocate("}, {"sha": "3eef0578360ce54f656f131340d5d1a4766a9603", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=f6fcfa3915242b23df17c1cc14c35c6e7d041496", "patch": "@@ -72,9 +72,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     ty::TyFnPtr(sig) => {\n                         let fn_ptr = self.value_to_primval(func)?.to_ptr()?;\n                         let instance = self.memory.get_fn(fn_ptr)?;\n-                        // FIXME(eddyb) use `Instance::ty` when it becomes available.\n-                        let instance_ty =\n-                            self.monomorphize(instance.def.def_ty(self.tcx), instance.substs);\n+                        let instance_ty = instance.ty(self.tcx);\n                         match instance_ty.sty {\n                             ty::TyFnDef(..) => {\n                                 let real_sig = instance_ty.fn_sig(self.tcx);"}, {"sha": "e2640d695c6d0dc029fc16504515f6272fcc569e", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=f6fcfa3915242b23df17c1cc14c35c6e7d041496", "patch": "@@ -115,7 +115,6 @@ use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n use rustc::mir::mono::MonoItem;\n use monomorphize::item::{MonoItemExt, InstantiationMode};\n-use rustc::ty::subst::Subst;\n \n pub use rustc::mir::mono::CodegenUnit;\n \n@@ -576,7 +575,7 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n                 // This is a method within an inherent impl, find out what the\n                 // self-type is:\n-                let impl_self_ty = tcx.type_of(impl_def_id).subst(tcx, instance.substs);\n+                let impl_self_ty = tcx.trans_impl_self_ty(impl_def_id, instance.substs);\n                 if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n                     return Some(def_id);\n                 }"}, {"sha": "ae202f3f14291c47551ccc73a3f690219fc0cd2a", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fcfa3915242b23df17c1cc14c35c6e7d041496/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=f6fcfa3915242b23df17c1cc14c35c6e7d041496", "patch": "@@ -24,7 +24,7 @@ use llvm;\n use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray, DIFlags};\n use rustc::hir::def_id::{DefId, CrateNum};\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::Substs;\n \n use abi::Abi;\n use common::CrateContext;\n@@ -427,8 +427,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let self_type = cx.tcx().impl_of_method(instance.def_id()).and_then(|impl_def_id| {\n             // If the method does *not* belong to a trait, proceed\n             if cx.tcx().trait_id_of_impl(impl_def_id).is_none() {\n-                let impl_self_ty =\n-                    cx.tcx().type_of(impl_def_id).subst(cx.tcx(), instance.substs);\n+                let impl_self_ty = cx.tcx().trans_impl_self_ty(impl_def_id, instance.substs);\n \n                 // Only \"class\" methods are generally understood by LLVM,\n                 // so avoid methods on other types (e.g. `<*mut T>::null`)."}]}