{"sha": "dc5e5f610cf057654bce9d8fcf275ae375299f90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNWU1ZjYxMGNmMDU3NjU0YmNlOWQ4ZmNmMjc1YWUzNzUyOTlmOTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-08T20:47:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-08T20:47:52Z"}, "message": "Reduce visibility", "tree": {"sha": "fe9412ec33a12f470ff4840b568d0bf6776bac2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe9412ec33a12f470ff4840b568d0bf6776bac2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc5e5f610cf057654bce9d8fcf275ae375299f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5e5f610cf057654bce9d8fcf275ae375299f90", "html_url": "https://github.com/rust-lang/rust/commit/dc5e5f610cf057654bce9d8fcf275ae375299f90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc5e5f610cf057654bce9d8fcf275ae375299f90/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee798a02b399acf7bfdfa826ecce0dcc67eaa308", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee798a02b399acf7bfdfa826ecce0dcc67eaa308", "html_url": "https://github.com/rust-lang/rust/commit/ee798a02b399acf7bfdfa826ecce0dcc67eaa308"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "bad67d409a79ae07437e24faf4eef4e09177b7da", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dc5e5f610cf057654bce9d8fcf275ae375299f90/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5e5f610cf057654bce9d8fcf275ae375299f90/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=dc5e5f610cf057654bce9d8fcf275ae375299f90", "patch": "@@ -88,7 +88,7 @@ impl RawItems {\n         (Arc::new(collector.raw_items), Arc::new(collector.source_map))\n     }\n \n-    pub fn items(&self) -> &[RawItem] {\n+    pub(super) fn items(&self) -> &[RawItem] {\n         &self.items\n     }\n }\n@@ -127,29 +127,29 @@ type Attrs = Option<Arc<[Attr]>>;\n #[derive(Debug, PartialEq, Eq, Clone)]\n pub struct RawItem {\n     attrs: Attrs,\n-    pub kind: RawItemKind,\n+    pub(super) kind: RawItemKind,\n }\n \n impl RawItem {\n-    pub fn attrs(&self) -> &[Attr] {\n+    pub(super) fn attrs(&self) -> &[Attr] {\n         self.attrs.as_ref().map_or(&[], |it| &*it)\n     }\n }\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub enum RawItemKind {\n+pub(crate) enum RawItemKind {\n     Module(Module),\n     Import(ImportId),\n     Def(Def),\n     Macro(Macro),\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct Module(RawId);\n+pub(crate) struct Module(RawId);\n impl_arena_id!(Module);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub enum ModuleData {\n+pub(crate) enum ModuleData {\n     Declaration { name: Name, ast_id: FileAstId<ast::Module> },\n     Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n }\n@@ -160,26 +160,26 @@ impl_arena_id!(ImportId);\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n-    pub path: Path,\n-    pub alias: Option<Name>,\n-    pub is_glob: bool,\n-    pub is_prelude: bool,\n-    pub is_extern_crate: bool,\n-    pub is_macro_use: bool,\n+    pub(super) path: Path,\n+    pub(super) alias: Option<Name>,\n+    pub(super) is_glob: bool,\n+    pub(super) is_prelude: bool,\n+    pub(super) is_extern_crate: bool,\n+    pub(super) is_macro_use: bool,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct Def(RawId);\n+pub(crate) struct Def(RawId);\n impl_arena_id!(Def);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub struct DefData {\n-    pub name: Name,\n-    pub kind: DefKind,\n+pub(crate) struct DefData {\n+    pub(super) name: Name,\n+    pub(super) kind: DefKind,\n }\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub enum DefKind {\n+pub(crate) enum DefKind {\n     Function(FileAstId<ast::FnDef>),\n     Struct(FileAstId<ast::StructDef>),\n     Union(FileAstId<ast::StructDef>),\n@@ -191,15 +191,15 @@ pub enum DefKind {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct Macro(RawId);\n+pub(crate) struct Macro(RawId);\n impl_arena_id!(Macro);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub struct MacroData {\n-    pub ast_id: FileAstId<ast::MacroCall>,\n-    pub path: Path,\n-    pub name: Option<Name>,\n-    pub export: bool,\n+pub(crate) struct MacroData {\n+    pub(super) ast_id: FileAstId<ast::MacroCall>,\n+    pub(super) path: Path,\n+    pub(super) name: Option<Name>,\n+    pub(super) export: bool,\n }\n \n struct RawItemsCollector {"}]}