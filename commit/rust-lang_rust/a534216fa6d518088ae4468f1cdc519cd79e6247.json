{"sha": "a534216fa6d518088ae4468f1cdc519cd79e6247", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MzQyMTZmYTZkNTE4MDg4YWU0NDY4ZjFjZGM1MTljZDc5ZTYyNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-11T09:19:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-11T09:19:23Z"}, "message": "Auto merge of #54850 - mcr431:fix-54707-trait-function-from-macro, r=nikomatsakis\n\nFix #54707 - parse_trait_item_ now handles interpolated blocks as function body decls\n\nFix #54707 - parse_trait_item_ now handles interpolated blocks as function body decls\n\nPreviously parsing trait items only handled opening brace token and semicolon, I added a branch to the match statement that will also handle interpolated blocks.", "tree": {"sha": "f5aa2d027d7d74fc41cf54153c015d144c167d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5aa2d027d7d74fc41cf54153c015d144c167d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a534216fa6d518088ae4468f1cdc519cd79e6247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a534216fa6d518088ae4468f1cdc519cd79e6247", "html_url": "https://github.com/rust-lang/rust/commit/a534216fa6d518088ae4468f1cdc519cd79e6247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a534216fa6d518088ae4468f1cdc519cd79e6247/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145", "html_url": "https://github.com/rust-lang/rust/commit/cb6eeddd4dcefa4b71bb4b6bb087d05ad8e82145"}, {"sha": "344747330c5f88d204ee99507aa0bd6358d0fbec", "url": "https://api.github.com/repos/rust-lang/rust/commits/344747330c5f88d204ee99507aa0bd6358d0fbec", "html_url": "https://github.com/rust-lang/rust/commit/344747330c5f88d204ee99507aa0bd6358d0fbec"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "6c375799c38ad5cd83cbf1cc33e9bd5f8652318e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a534216fa6d518088ae4468f1cdc519cd79e6247/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a534216fa6d518088ae4468f1cdc519cd79e6247/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a534216fa6d518088ae4468f1cdc519cd79e6247", "patch": "@@ -1430,6 +1430,23 @@ impl<'a> Parser<'a> {\n                     attrs.extend(inner_attrs.iter().cloned());\n                     Some(body)\n                 }\n+                token::Interpolated(ref nt) => {\n+                    match &nt.0 {\n+                        token::NtBlock(..) => {\n+                            *at_end = true;\n+                            let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n+                            attrs.extend(inner_attrs.iter().cloned());\n+                            Some(body)\n+                        }\n+                        _ => {\n+                            let token_str = self.this_token_to_string();\n+                            let mut err = self.fatal(&format!(\"expected `;` or `{{`, found `{}`\",\n+                                                              token_str));\n+                            err.span_label(self.span, \"expected `;` or `{`\");\n+                            return Err(err);\n+                        }\n+                    }\n+                }\n                 _ => {\n                     let token_str = self.this_token_to_string();\n                     let mut err = self.fatal(&format!(\"expected `;` or `{{`, found `{}`\","}, {"sha": "8c3c9fdc66df2c2eef68f0dcfb824a7265e78e5c", "filename": "src/test/run-pass/macros/macro-as-fn-body.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a534216fa6d518088ae4468f1cdc519cd79e6247/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-as-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a534216fa6d518088ae4468f1cdc519cd79e6247/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-as-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-as-fn-body.rs?ref=a534216fa6d518088ae4468f1cdc519cd79e6247", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// run-pass\n+//\n+// Description - ensure Interpolated blocks can act as valid function bodies\n+// Covered cases: free functions, struct methods, and default trait functions\n+\n+macro_rules! def_fn {\n+    ($body:block) => {\n+        fn bar() $body\n+    }\n+}\n+\n+trait Foo {\n+    def_fn!({ println!(\"foo\"); });\n+}\n+\n+struct Baz {}\n+\n+impl Foo for Baz {}\n+\n+struct Qux {}\n+\n+impl Qux {\n+    def_fn!({ println!(\"qux\"); });\n+}\n+\n+def_fn!({ println!(\"quux\"); });\n+\n+pub fn main() {\n+    Baz::bar();\n+    Qux::bar();\n+    bar();\n+}"}]}