{"sha": "d32c320d7eee56706486fef6be778495303afe9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMmMzMjBkN2VlZTU2NzA2NDg2ZmVmNmJlNzc4NDk1MzAzYWZlOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-10T17:49:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-10T17:49:42Z"}, "message": "Auto merge of #79814 - lcnr:deque-f, r=Mark-Simulacrum\n\nfix soundness issue in `make_contiguous`\n\nfixes #79808", "tree": {"sha": "d0f7156b5d5f0c5757b3d7f3e97b9bc86607c69e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f7156b5d5f0c5757b3d7f3e97b9bc86607c69e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d32c320d7eee56706486fef6be778495303afe9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d32c320d7eee56706486fef6be778495303afe9e", "html_url": "https://github.com/rust-lang/rust/commit/d32c320d7eee56706486fef6be778495303afe9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d32c320d7eee56706486fef6be778495303afe9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80cc2ecf1070728a7d006026e0d532d9fc48621c", "url": "https://api.github.com/repos/rust-lang/rust/commits/80cc2ecf1070728a7d006026e0d532d9fc48621c", "html_url": "https://github.com/rust-lang/rust/commit/80cc2ecf1070728a7d006026e0d532d9fc48621c"}, {"sha": "4fb9f1d7846f64beeec749db5933a24c05456ff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb9f1d7846f64beeec749db5933a24c05456ff2", "html_url": "https://github.com/rust-lang/rust/commit/4fb9f1d7846f64beeec749db5933a24c05456ff2"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "57807bc54539031f1044064c9d4570c14e2a484d", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d32c320d7eee56706486fef6be778495303afe9e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c320d7eee56706486fef6be778495303afe9e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=d32c320d7eee56706486fef6be778495303afe9e", "patch": "@@ -1469,6 +1469,8 @@ impl<T> VecDeque<T> {\n \n     #[inline]\n     fn is_contiguous(&self) -> bool {\n+        // FIXME: Should we consider `head == 0` to mean\n+        // that `self` is contiguous?\n         self.tail <= self.head\n     }\n \n@@ -2198,7 +2200,7 @@ impl<T> VecDeque<T> {\n         if self.is_contiguous() {\n             let tail = self.tail;\n             let head = self.head;\n-            return unsafe { &mut self.buffer_as_mut_slice()[tail..head] };\n+            return unsafe { RingSlices::ring_slices(self.buffer_as_mut_slice(), head, tail).0 };\n         }\n \n         let buf = self.buf.ptr();\n@@ -2224,7 +2226,13 @@ impl<T> VecDeque<T> {\n                 self.tail = 0;\n                 self.head = len;\n             }\n-        } else if free >= self.head {\n+        } else if free > self.head {\n+            // FIXME: We currently do not consider ....ABCDEFGH\n+            // to be contiguous because `head` would be `0` in this\n+            // case. While we probably want to change this it\n+            // isn't trivial as a few places expect `is_contiguous`\n+            // to mean that we can just slice using `buf[tail..head]`.\n+\n             // there is enough free space to copy the head in one go,\n             // this means that we first shift the tail forwards, and then\n             // copy the head to the correct position.\n@@ -2238,7 +2246,7 @@ impl<T> VecDeque<T> {\n                 // ...ABCDEFGH.\n \n                 self.tail = self.head;\n-                self.head = self.tail + len;\n+                self.head = self.wrap_add(self.tail, len);\n             }\n         } else {\n             // free is smaller than both head and tail,\n@@ -2278,7 +2286,7 @@ impl<T> VecDeque<T> {\n \n         let tail = self.tail;\n         let head = self.head;\n-        unsafe { &mut self.buffer_as_mut_slice()[tail..head] }\n+        unsafe { RingSlices::ring_slices(self.buffer_as_mut_slice(), head, tail).0 }\n     }\n \n     /// Rotates the double-ended queue `mid` places to the left.\n@@ -2839,7 +2847,7 @@ impl<T> From<VecDeque<T>> for Vec<T> {\n             let len = other.len();\n             let cap = other.cap();\n \n-            if other.head != 0 {\n+            if other.tail != 0 {\n                 ptr::copy(buf.add(other.tail), buf, len);\n             }\n             Vec::from_raw_parts(buf, len, cap)"}, {"sha": "21f52af056b2a2090c3bd90952a51d089085d4b1", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d32c320d7eee56706486fef6be778495303afe9e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c320d7eee56706486fef6be778495303afe9e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=d32c320d7eee56706486fef6be778495303afe9e", "patch": "@@ -210,6 +210,20 @@ fn make_contiguous_small_free() {\n     );\n }\n \n+#[test]\n+fn make_contiguous_head_to_end() {\n+    let mut dq = VecDeque::with_capacity(3);\n+    dq.push_front('B');\n+    dq.push_front('A');\n+    dq.push_back('C');\n+    dq.make_contiguous();\n+    let expected_tail = 0;\n+    let expected_head = 3;\n+    assert_eq!(expected_tail, dq.tail);\n+    assert_eq!(expected_head, dq.head);\n+    assert_eq!((&['A', 'B', 'C'] as &[_], &[] as &[_]), dq.as_slices());\n+}\n+\n #[test]\n fn test_remove() {\n     // This test checks that every single combination of tail position, length, and"}]}