{"sha": "18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YjAxZDVjZmViNWUxZDY0ODllMjM5N2IyMmM1YTlhYTNmZjdjOTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-23T21:58:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-23T22:15:30Z"}, "message": "Create a bunch of test cases for unique boxes by copying box tests\n\nXFAIL the ones that don't work\n\nIssue #409", "tree": {"sha": "50ee1e55fcc08cb15774b973561df8e616daf310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50ee1e55fcc08cb15774b973561df8e616daf310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "html_url": "https://github.com/rust-lang/rust/commit/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2082f67765947d1c84efdf0b374e0b80f535f109", "url": "https://api.github.com/repos/rust-lang/rust/commits/2082f67765947d1c84efdf0b374e0b80f535f109", "html_url": "https://github.com/rust-lang/rust/commit/2082f67765947d1c84efdf0b374e0b80f535f109"}], "stats": {"total": 269, "additions": 269, "deletions": 0}, "files": [{"sha": "19906bda0ae7684b5bdd52306d9686e5bab6d4cd", "filename": "src/test/run-fail/unwind-unique.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern:fail\n+\n+fn failfn() {\n+    fail;\n+}\n+\n+fn main() {\n+    @0;\n+    failfn();\n+}\n\\ No newline at end of file"}, {"sha": "546865caa94dbea0f8943c2b700a0724849c01c4", "filename": "src/test/run-pass/alt-implicit-copy-unique.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,7 @@\n+// xfail-test\n+fn main() {\n+    let x = ~{mutable a: ~10, b: ~20};\n+    alt x {\n+      ~{a, b} { assert *a == 10; (*x).a = ~30; assert *a == 10; }\n+    }\n+}"}, {"sha": "ba606e78d34079eaf0a138dd596af2cae351fd0c", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,18 @@\n+// xfail-test\n+\n+\n+// -*- rust -*-\n+type compare<T> = fn(~T, ~T) -> bool;\n+\n+fn test_generic<T>(expected: ~T, eq: compare<T>) {\n+    let actual: ~T = alt true { true { expected } };\n+    assert (eq(expected, actual));\n+}\n+\n+fn test_box() {\n+    fn compare_box(b1: ~bool, b2: ~bool) -> bool { ret *b1 == *b2; }\n+    let eq = bind compare_box(_, _);\n+    test_generic::<bool>(~true, eq);\n+}\n+\n+fn main() { test_box(); }"}, {"sha": "700cb8a7f6031de2496853258169063506a96157", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,18 @@\n+\n+\n+\n+// -*- rust -*-\n+type compare<T> = fn(T, T) -> bool;\n+\n+fn test_generic<T>(expected: T, eq: compare<T>) {\n+    let actual: T = alt true { true { expected } };\n+    assert (eq(expected, actual));\n+}\n+\n+fn test_vec() {\n+    fn compare_box(v1: ~int, v2: ~int) -> bool { ret v1 == v2; }\n+    let eq = bind compare_box(_, _);\n+    test_generic::<~int>(~1, eq);\n+}\n+\n+fn main() { test_vec(); }"}, {"sha": "f83dae4e9fa7944ab95b9df9a953dcde1c7e2b6f", "filename": "src/test/run-pass/expr-alt-unique.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,9 @@\n+\n+\n+\n+// -*- rust -*-\n+\n+// Tests for alt as expressions resulting in boxed types\n+fn test_box() { let res = alt true { true { ~100 } }; assert (*res == 100); }\n+\n+fn main() { test_box(); }"}, {"sha": "4048f2497009e54919f71fe098fb94fed0d14bb9", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,22 @@\n+// xfail-test\n+\n+\n+// -*- rust -*-\n+type compare<T> = fn(~T, ~T) -> bool;\n+\n+fn test_generic<T>(expected: ~T, eq: compare<T>) {\n+    let actual: ~T = { expected };\n+    assert (eq(expected, actual));\n+}\n+\n+fn test_box() {\n+    fn compare_box(b1: ~bool, b2: ~bool) -> bool {\n+        log *b1;\n+        log *b2;\n+        ret *b1 == *b2;\n+    }\n+    let eq = bind compare_box(_, _);\n+    test_generic::<bool>(~true, eq);\n+}\n+\n+fn main() { test_box(); }"}, {"sha": "5dc1ecf69d4f253883102b41aa9ce4a80cb76f20", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,18 @@\n+\n+\n+\n+// -*- rust -*-\n+type compare<T> = fn(T, T) -> bool;\n+\n+fn test_generic<T>(expected: T, eq: compare<T>) {\n+    let actual: T = { expected };\n+    assert (eq(expected, actual));\n+}\n+\n+fn test_vec() {\n+    fn compare_vec(v1: ~int, v2: ~int) -> bool { ret v1 == v2; }\n+    let eq = bind compare_vec(_, _);\n+    test_generic::<~int>(~1, eq);\n+}\n+\n+fn main() { test_vec(); }"}, {"sha": "0a659cdf558b6f93c135a8c4c2be137eb436707c", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+\n+// -*- rust -*-\n+fn main() { let x = { ~100 }; assert (*x == 100); }"}, {"sha": "61442fed5f5aea65073b260f6ea07d7f6987ffed", "filename": "src/test/run-pass/expr-if-unique.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,12 @@\n+\n+\n+\n+// -*- rust -*-\n+\n+// Tests for if as expressions returning boxed types\n+fn test_box() {\n+    let rs = if true { ~100 } else { ~101 };\n+    assert (*rs == 100);\n+}\n+\n+fn main() { test_box(); }"}, {"sha": "4fc26eb4258d96e0bf8eb1ed44c86e648699631b", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,18 @@\n+fn fix_help<A, ~B>(f: fn(fn(A) -> B, A) -> B, x: A) -> B {\n+    ret f(bind fix_help(f, _), x);\n+}\n+\n+fn fix<A, ~B>(f: fn(fn(A) -> B, A) -> B) -> fn(A) -> B {\n+    ret bind fix_help(f, _);\n+}\n+\n+fn fact_(f: fn(int) -> int, n: int) -> int {\n+    // fun fact 0 = 1\n+    ret if n == 0 { 1 } else { n * f(n - 1) };\n+}\n+\n+fn main() {\n+    let fact = fix(fact_);\n+    assert (fact(5) == 120);\n+    assert (fact(2) == 2);\n+}"}, {"sha": "aab919e3f7980a46f37910dc47c37cfa1b918838", "filename": "src/test/run-pass/foreach-unique-drop.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,9 @@\n+// xfail-test\n+\n+obj ob<K>(k: K) {\n+    iter foo() -> ~{a: K} { put ~{a: k}; }\n+}\n+\n+fn x(o: ob<str>) { for each i: ~{a: str} in o.foo() { } }\n+\n+fn main() { let o = ob::<str>(\"hi\" + \"there\"); x(o); }"}, {"sha": "e62ab1d318b1ec7022e786f4062e81acd8551a63", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,10 @@\n+\n+\n+fn id<~T>(t: T) -> T { ret t; }\n+\n+fn main() {\n+    let expected = ~100;\n+    let actual = id::<~int>(expected);\n+    log *actual;\n+    assert (*expected == *actual);\n+}"}, {"sha": "a7eb0b8bdac3cab9256554e5c2b0247d9df6b860", "filename": "src/test/run-pass/generic-exterior-unique.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,11 @@\n+\n+\n+type recbox<T> = {x: ~T};\n+\n+fn reclift<T>(t: T) -> recbox<T> { ret {x: ~t}; }\n+\n+fn main() {\n+    let foo: int = 17;\n+    let rbfoo: recbox<int> = reclift::<int>(foo);\n+    assert (*rbfoo.x == foo);\n+}"}, {"sha": "f119df5d08565c60c74c872f7f3d775bd3d2feb1", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,5 @@\n+// xfail-test\n+\n+fn f<T>(x: ~T) -> ~T { ret x; }\n+\n+fn main() { let x = f(~3); log *x; }"}, {"sha": "af7dda5bb9701243687045360f87ba8a48164459", "filename": "src/test/run-pass/generic-unique.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,8 @@\n+// xfail-test\n+\n+fn box<T>(x: {x: T, y: T, z: T}) -> ~{x: T, y: T, z: T} { ret ~x; }\n+\n+fn main() {\n+    let x: ~{x: int, y: int, z: int} = box::<int>({x: 1, y: 2, z: 3});\n+    assert (x.y == 2);\n+}"}, {"sha": "a411c748044141fc14d34b4ba94a34675f99ebe6", "filename": "src/test/run-pass/leak-unique-as-tydesc.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+fn leaky<T>(t: T) { }\n+\n+fn main() { let x = ~10; leaky::<~int>(x); }"}, {"sha": "10ea3d3ddd151cf59dc02dd818ce6aca62a2ba87", "filename": "src/test/run-pass/move-1-unique.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,16 @@\n+// xfail-test\n+\n+fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n+    let bar = foo;\n+    let y: ~{x: int, y: int, z: int};\n+    if x { y <- bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n+    ret y.y;\n+}\n+\n+fn main() {\n+    let x = ~{x: 1, y: 2, z: 3};\n+    assert (test(true, x) == 2);\n+    assert (test(true, x) == 2);\n+    assert (test(true, x) == 2);\n+    assert (test(false, x) == 5);\n+}"}, {"sha": "9d414aceb43d58b2802d022eec721e83eaad46e4", "filename": "src/test/run-pass/move-2-unique.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,3 @@\n+\n+\n+fn main() { let x = ~{x: 1, y: 2, z: 3}; let y <- x; assert (y.y == 2); }"}, {"sha": "36637319d131f2f0ec3e3fa5e68d0c42de5732ea", "filename": "src/test/run-pass/move-3-unique.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,18 @@\n+// xfail-test\n+use std;\n+import std::uint;\n+\n+fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n+    let bar = foo;\n+    let y: ~{x: int, y: int, z: int};\n+    if x { y <- bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n+    ret y.y;\n+}\n+\n+fn main() {\n+    let x = ~{x: 1, y: 2, z: 3};\n+    for each i: uint in uint::range(0u, 10000u) {\n+        assert (test(true, x) == 2);\n+    }\n+    assert (test(false, x) == 5);\n+}"}, {"sha": "8eab470242f6c17f89006322a7da07fe913f9a15", "filename": "src/test/run-pass/move-4-unique.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,12 @@\n+// xfail-test\n+use std;\n+import std::uint;\n+\n+fn test(foo: ~{a: int, b: int, c: int}) -> ~{a: int, b: int, c: int} {\n+    let bar <- foo;\n+    let baz <- bar;\n+    let quux <- baz;\n+    ret quux;\n+}\n+\n+fn main() { let x = ~{a: 1, b: 2, c: 3}; let y = test(x); assert (y.c == 3); }"}, {"sha": "dde8e6d4d40d9488122596620625e1cb09683359", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,10 @@\n+fn test(-foo: ~[int]) { assert (foo[0] == 10); }\n+\n+fn main() {\n+    let x = ~[10];\n+    // Test forgetting a local by move-in\n+    test(x);\n+\n+    // Test forgetting a temporary by move-in.\n+    test(~[10]);\n+}"}, {"sha": "87b58a595d2fc0bf258fffb7dd206d6c7b650ebc", "filename": "src/test/run-pass/unique-pat-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-2.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,11 @@\n+// xfail-test\n+\n+type foo = {a: int, b: uint};\n+tag bar { u(~foo); w(int); }\n+\n+fn main() {\n+    assert (alt u(~{a: 10, b: 40u}) {\n+              u(~{a: a, b: b}) { a + (b as int) }\n+              _ { 66 }\n+            } == 50);\n+}"}, {"sha": "d38e3e45aef5665ccf66c2a46a1e11127fa7a122", "filename": "src/test/run-pass/unwind-unique.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=18b01d5cfeb5e1d6489e2397b22c5a9aa3ff7c90", "patch": "@@ -0,0 +1,14 @@\n+// xfail-win32\n+use std;\n+import std::task;\n+\n+fn f() {\n+    task::unsupervise();\n+    let a = ~0;\n+    fail;\n+}\n+\n+fn main() {\n+    let g = f;\n+    task::spawn(g);\n+}\n\\ No newline at end of file"}]}