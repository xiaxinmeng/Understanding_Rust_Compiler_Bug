{"sha": "ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZDJjNDAzYWM2ZDFiOTJjNDk5ODVkMDljNGIxZDBhZjhmNjUxZTE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-16T17:50:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-16T17:50:58Z"}, "message": "Rollup merge of #49606 - varkor:pipe-repair, r=alexcrichton\n\nPrevent broken pipes causing ICEs\n\nAs the private `std::io::print_to` panics if there is an I/O error, which is used by `println!`, the compiler would ICE if one attempted to use a broken pipe (e.g. `rustc --help | false`). This introduces a new (private) macro `try_println!` which allows us to avoid this.\n\nAs a side note, it seems this macro might be useful publicly (and actually there seems to be [a crate specifically for this purpose](https://crates.io/crates/try_print/)), though that can probably be left for a future discussion.\n\nOne slight alternative approach would be to simply early exit without an error (i.e. exit code `0`), which [this comment](https://github.com/rust-lang/rust/issues/34376#issuecomment-377822526) suggests is the usual approach. I've opted not to take that approach initially, because I think it's more helpful to know when there is a broken pipe.\n\nFixes #34376.", "tree": {"sha": "71a311ffb2516522446b559562f932678591696e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71a311ffb2516522446b559562f932678591696e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa1OKCCRBK7hj4Ov3rIwAAdHIIAIghdsarlmbV2UQApMHWoqvj\nFShVK5lBnuPgJTt6WBq+q9rac6iPpaR5Qr0ubPMFZ68uvk0fP6EkrHArsepn0rEF\nYwMGrsfi8hG+4XsskiMfQapA8yxJUFZ7ZbRI69z4WFHrCEHd/7qjcbN5zvMm/Jwz\neROCAjSBI6MskduhyLAQoJsHYFBrEByH9teBSMtDEsvtkoxY8SRDufSWUgDXFVjL\nJcSMbkpIYr1dSNrEpXNDkp/FKLUMmjPWPY6A228AwxO8Yzgdsw+r4iiH/Np4Pp/t\n9KRAE1PKoHPbljmNcXpfIlXcNA1r9FpdxQqVPahfKc0PsXG7Iiayte99BVvD/nE=\n=Ain3\n-----END PGP SIGNATURE-----\n", "payload": "tree 71a311ffb2516522446b559562f932678591696e\nparent bf602952116262f261eec20a2dc085d915de7bc7\nparent 7ab31f6556c2cce433695b113f53d6275edd724d\nauthor kennytm <kennytm@gmail.com> 1523901058 +0800\ncommitter GitHub <noreply@github.com> 1523901058 +0800\n\nRollup merge of #49606 - varkor:pipe-repair, r=alexcrichton\n\nPrevent broken pipes causing ICEs\n\nAs the private `std::io::print_to` panics if there is an I/O error, which is used by `println!`, the compiler would ICE if one attempted to use a broken pipe (e.g. `rustc --help | false`). This introduces a new (private) macro `try_println!` which allows us to avoid this.\n\nAs a side note, it seems this macro might be useful publicly (and actually there seems to be [a crate specifically for this purpose](https://crates.io/crates/try_print/)), though that can probably be left for a future discussion.\n\nOne slight alternative approach would be to simply early exit without an error (i.e. exit code `0`), which [this comment](https://github.com/rust-lang/rust/issues/34376#issuecomment-377822526) suggests is the usual approach. I've opted not to take that approach initially, because I think it's more helpful to know when there is a broken pipe.\n\nFixes #34376.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1", "html_url": "https://github.com/rust-lang/rust/commit/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf602952116262f261eec20a2dc085d915de7bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf602952116262f261eec20a2dc085d915de7bc7", "html_url": "https://github.com/rust-lang/rust/commit/bf602952116262f261eec20a2dc085d915de7bc7"}, {"sha": "7ab31f6556c2cce433695b113f53d6275edd724d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab31f6556c2cce433695b113f53d6275edd724d", "html_url": "https://github.com/rust-lang/rust/commit/7ab31f6556c2cce433695b113f53d6275edd724d"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "cb91ff6a43e9ce08e0fd631a786b2455ba7b7b50", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1", "patch": "@@ -547,6 +547,18 @@ fn run_compiler_impl<'a>(args: &[String],\n     (result, Some(sess))\n }\n \n+#[cfg(unix)]\n+pub fn set_sigpipe_handler() {\n+    unsafe {\n+        // Set the SIGPIPE signal handler, so that an EPIPE\n+        // will cause rustc to terminate, as expected.\n+        assert!(libc::signal(libc::SIGPIPE, libc::SIG_DFL) != libc::SIG_ERR);\n+    }\n+}\n+\n+#[cfg(windows)]\n+pub fn set_sigpipe_handler() {}\n+\n // Extract output directory and file from matches.\n fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>) {\n     let odir = matches.opt_str(\"out-dir\").map(|o| PathBuf::from(&o));"}, {"sha": "148a57c420f8d8e951c66d29e817eaf251a37bce", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1", "patch": "@@ -100,6 +100,7 @@ struct Output {\n \n pub fn main() {\n     const STACK_SIZE: usize = 32_000_000; // 32MB\n+    rustc_driver::set_sigpipe_handler();\n     env_logger::init();\n     let res = std::thread::Builder::new().stack_size(STACK_SIZE).spawn(move || {\n         syntax::with_globals(move || {"}, {"sha": "c1298e5040dbeec35b3a503c17d1aa2e4aa961c8", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1", "patch": "@@ -80,11 +80,11 @@ pub fn init() {\n         reset_sigpipe();\n     }\n \n-    #[cfg(not(any(target_os = \"emscripten\", target_os=\"fuchsia\")))]\n+    #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\")))]\n     unsafe fn reset_sigpipe() {\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n     }\n-    #[cfg(any(target_os = \"emscripten\", target_os=\"fuchsia\"))]\n+    #[cfg(any(target_os = \"emscripten\", target_os = \"fuchsia\"))]\n     unsafe fn reset_sigpipe() {}\n }\n "}, {"sha": "ab5a7c3f747eb3835aae5144032639e31215db30", "filename": "src/rustc/rustc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1/src%2Frustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1/src%2Frustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rs?ref=ccd2c403ac6d1b92c49985d09c4b1d0af8f651e1", "patch": "@@ -23,4 +23,7 @@ extern {}\n \n extern crate rustc_driver;\n \n-fn main() { rustc_driver::main() }\n+fn main() {\n+    rustc_driver::set_sigpipe_handler();\n+    rustc_driver::main()\n+}"}]}