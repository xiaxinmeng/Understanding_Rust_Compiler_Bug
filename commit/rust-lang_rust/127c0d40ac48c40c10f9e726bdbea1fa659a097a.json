{"sha": "127c0d40ac48c40c10f9e726bdbea1fa659a097a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyN2MwZDQwYWM0OGM0MGMxMGY5ZTcyNmJkYmVhMWZhNjU5YTA5N2E=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-14T02:34:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-14T02:53:30Z"}, "message": "Teach path to collapse double-slashes in components. Close #3430.", "tree": {"sha": "3945c91db69d229019781bb6634aa8bf9067458a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3945c91db69d229019781bb6634aa8bf9067458a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127c0d40ac48c40c10f9e726bdbea1fa659a097a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127c0d40ac48c40c10f9e726bdbea1fa659a097a", "html_url": "https://github.com/rust-lang/rust/commit/127c0d40ac48c40c10f9e726bdbea1fa659a097a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127c0d40ac48c40c10f9e726bdbea1fa659a097a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5347b4bf9ebb6064e581ab2fae78867747951eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5347b4bf9ebb6064e581ab2fae78867747951eb", "html_url": "https://github.com/rust-lang/rust/commit/c5347b4bf9ebb6064e581ab2fae78867747951eb"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "ec11638130c209c6ef3038a1527fdaa6ea71c3d2", "filename": "src/libcore/path.rs", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/127c0d40ac48c40c10f9e726bdbea1fa659a097a/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c0d40ac48c40c10f9e726bdbea1fa659a097a/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=127c0d40ac48c40c10f9e726bdbea1fa659a097a", "patch": "@@ -197,14 +197,19 @@ impl PosixPath : GenericPath {\n     }\n \n     pure fn push_many(cs: &[~str]) -> PosixPath {\n-       PosixPath { components: (copy self.components) + copy cs, ..self }\n+        let mut v = copy self.components;\n+        for cs.each |e| {\n+            let mut ss = str::split_nonempty(e, |c| windows::is_sep(c as u8));\n+            unchecked { vec::push_all_move(v, move ss); }\n+        }\n+        PosixPath { components: move v, ..self }\n     }\n \n     pure fn push(s: &str) -> PosixPath {\n-        let mut cs = copy self.components;\n-        unchecked { vec::push(cs, move str::from_slice(s)); }\n-        return PosixPath { components: move cs,\n-                           ..self }\n+        let mut v = copy self.components;\n+        let mut ss = str::split_nonempty(s, |c| windows::is_sep(c as u8));\n+        unchecked { vec::push_all_move(v, move ss); }\n+        PosixPath { components: move v, ..self }\n     }\n \n     pure fn pop() -> PosixPath {\n@@ -385,15 +390,19 @@ impl WindowsPath : GenericPath {\n     }\n \n     pure fn push_many(cs: &[~str]) -> WindowsPath {\n-        return WindowsPath { components: (copy self.components) + (copy cs),\n-                            ..self }\n+        let mut v = copy self.components;\n+        for cs.each |e| {\n+            let mut ss = str::split_nonempty(e, |c| windows::is_sep(c as u8));\n+            unchecked { vec::push_all_move(v, move ss); }\n+        }\n+        return WindowsPath { components: move v, ..self }\n     }\n \n     pure fn push(s: &str) -> WindowsPath {\n-        let mut cs = copy self.components;\n-        unchecked { vec::push(cs, move str::from_slice(s)); }\n-        return WindowsPath { components: move cs,\n-                             ..self }\n+        let mut v = copy self.components;\n+        let mut ss = str::split_nonempty(s, |c| windows::is_sep(c as u8));\n+        unchecked { vec::push_all_move(v, move ss); }\n+        return WindowsPath { components: move v, ..self }\n     }\n \n     pure fn pop() -> WindowsPath {\n@@ -419,6 +428,7 @@ pure fn normalize(components: &[~str]) -> ~[~str] {\n         for components.each |c| {\n             unchecked {\n                 if c == ~\".\" && components.len() > 1 { loop; }\n+                if c == ~\"\" { loop; }\n                 if c == ~\"..\" && cs.len() != 0 {\n                     vec::pop(cs);\n                     loop;\n@@ -430,6 +440,20 @@ pure fn normalize(components: &[~str]) -> ~[~str] {\n     move cs\n }\n \n+#[test]\n+fn test_double_slash_collapsing()\n+{\n+    let path = from_str::<PosixPath>(\"tmp/\");\n+    let path = path.push(\"/hmm\");\n+    let path = path.normalize();\n+    assert ~\"tmp/hmm\" == path.to_str();\n+\n+    let path = from_str::<WindowsPath>(\"tmp/\");\n+    let path = path.push(\"/hmm\");\n+    let path = path.normalize();\n+    assert ~\"tmp\\\\hmm\" == path.to_str();\n+}\n+\n mod posix {\n \n     #[cfg(test)]"}]}