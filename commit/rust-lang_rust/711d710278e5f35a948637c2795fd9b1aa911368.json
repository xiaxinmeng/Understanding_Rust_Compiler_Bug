{"sha": "711d710278e5f35a948637c2795fd9b1aa911368", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMWQ3MTAyNzhlNWYzNWE5NDg2MzdjMjc5NWZkOWIxYWE5MTEzNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-22T00:56:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-22T00:56:00Z"}, "message": "auto merge of #16512 : wickerwaka/rust/getopt-16348, r=brson\n\nI don't know if anything else was relying on the old behavior, this seems more correct.\r\n\r\nFixes #16348\r\n\r\nIf '-F' is allowed to have an optional argument, with the previous version '-FF' would be translated to '-F -F'. In this new version '-FF' translates to '-F' with argument 'F'", "tree": {"sha": "325f894312a6c773bdad8882e2707011ced96b90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/325f894312a6c773bdad8882e2707011ced96b90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/711d710278e5f35a948637c2795fd9b1aa911368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/711d710278e5f35a948637c2795fd9b1aa911368", "html_url": "https://github.com/rust-lang/rust/commit/711d710278e5f35a948637c2795fd9b1aa911368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/711d710278e5f35a948637c2795fd9b1aa911368/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43596b43ed7084aff5954e5c4bdd0b2d52665e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b43596b43ed7084aff5954e5c4bdd0b2d52665e4", "html_url": "https://github.com/rust-lang/rust/commit/b43596b43ed7084aff5954e5c4bdd0b2d52665e4"}, {"sha": "08d7fc76cf6b2fac291cecd7185af818940092e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d7fc76cf6b2fac291cecd7185af818940092e4", "html_url": "https://github.com/rust-lang/rust/commit/08d7fc76cf6b2fac291cecd7185af818940092e4"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "475dd2c6743450c3488d1dede07845a72b2ac03a", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/711d710278e5f35a948637c2795fd9b1aa911368/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711d710278e5f35a948637c2795fd9b1aa911368/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=711d710278e5f35a948637c2795fd9b1aa911368", "patch": "@@ -571,7 +571,6 @@ pub fn getopts(args: &[String], optgrps: &[OptGroup]) -> Result {\n                 }\n             } else {\n                 let mut j = 1;\n-                let mut last_valid_opt_id = None;\n                 names = Vec::new();\n                 while j < curlen {\n                     let range = cur.as_slice().char_range_at(j);\n@@ -584,27 +583,24 @@ pub fn getopts(args: &[String], optgrps: &[OptGroup]) -> Result {\n                        interpreted correctly\n                     */\n \n-                    match find_opt(opts.as_slice(), opt.clone()) {\n-                      Some(id) => last_valid_opt_id = Some(id),\n-                      None => {\n-                        let arg_follows =\n-                            last_valid_opt_id.is_some() &&\n-                            match opts[last_valid_opt_id.unwrap()]\n-                              .hasarg {\n-\n-                              Yes | Maybe => true,\n-                              No => false\n-                            };\n-                        if arg_follows && j < curlen {\n-                            i_arg = Some(cur.as_slice()\n-                                            .slice(j, curlen).to_string());\n-                            break;\n-                        } else {\n-                            last_valid_opt_id = None;\n-                        }\n-                      }\n-                    }\n+                    let opt_id = match find_opt(opts.as_slice(), opt.clone()) {\n+                      Some(id) => id,\n+                      None => return Err(UnrecognizedOption(opt.to_string()))\n+                    };\n+\n                     names.push(opt);\n+\n+                    let arg_follows = match opts[opt_id].hasarg {\n+                        Yes | Maybe => true,\n+                        No => false\n+                    };\n+\n+                    if arg_follows && range.next < curlen {\n+                        i_arg = Some(cur.as_slice()\n+                                        .slice(range.next, curlen).to_string());\n+                        break;\n+                    }\n+\n                     j = range.next;\n                 }\n             }\n@@ -617,7 +613,7 @@ pub fn getopts(args: &[String], optgrps: &[OptGroup]) -> Result {\n                 };\n                 match opts[optid].hasarg {\n                   No => {\n-                    if !i_arg.is_none() {\n+                    if name_pos == names.len() && !i_arg.is_none() {\n                         return Err(UnexpectedArgument(nm.to_string()));\n                     }\n                     vals.get_mut(optid).push(Given);\n@@ -1441,6 +1437,21 @@ mod tests {\n \n     }\n \n+    #[test]\n+    fn test_nospace_conflict() {\n+        let args = vec!(\"-vvLverbose\".to_string(), \"-v\".to_string() );\n+        let opts = vec!(optmulti(\"L\", \"\", \"library directory\", \"LIB\"),\n+                     optflagmulti(\"v\", \"verbose\", \"Verbose\"));\n+        let matches = &match getopts(args.as_slice(), opts.as_slice()) {\n+          result::Ok(m) => m,\n+          result::Err(e) => fail!( \"{}\", e )\n+        };\n+        assert!(matches.opts_present([\"L\".to_string()]));\n+        assert_eq!(matches.opts_str([\"L\".to_string()]).unwrap(), \"verbose\".to_string());\n+        assert!(matches.opts_present([\"v\".to_string()]));\n+        assert_eq!(3, matches.opt_count(\"v\"));\n+    }\n+\n     #[test]\n     fn test_long_to_short() {\n         let mut short = Opt {"}]}