{"sha": "f5992964edb0e6dba7970c344b46bfd75f57e9a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OTkyOTY0ZWRiMGU2ZGJhNzk3MGMzNDRiNDZiZmQ3NWY1N2U5YTA=", "commit": {"author": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-03T03:01:52Z"}, "committer": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-03T03:07:20Z"}, "message": "Add Analysis#teype_of test", "tree": {"sha": "4e97d6c21771a2b470580277796f5c87150cdf61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e97d6c21771a2b470580277796f5c87150cdf61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5992964edb0e6dba7970c344b46bfd75f57e9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5992964edb0e6dba7970c344b46bfd75f57e9a0", "html_url": "https://github.com/rust-lang/rust/commit/f5992964edb0e6dba7970c344b46bfd75f57e9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5992964edb0e6dba7970c344b46bfd75f57e9a0/comments", "author": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "committer": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4c30d750411f09a999b201631000a08e88907fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c30d750411f09a999b201631000a08e88907fd", "html_url": "https://github.com/rust-lang/rust/commit/a4c30d750411f09a999b201631000a08e88907fd"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "b37371499dd5951d2f4d5ea80526e42729a9978b", "filename": "crates/ra_analysis/src/mock_analysis.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f5992964edb0e6dba7970c344b46bfd75f57e9a0/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5992964edb0e6dba7970c344b46bfd75f57e9a0/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs?ref=f5992964edb0e6dba7970c344b46bfd75f57e9a0", "patch": "@@ -55,6 +55,26 @@ impl MockAnalysis {\n         (res, position)\n     }\n \n+    /// Same as `with_files`, but requires that a single file contains two `<|>` marker,\n+    /// whose range is also returned.\n+    pub fn with_files_and_range(fixture: &str) -> (MockAnalysis, FileRange) {\n+        let mut range = None;\n+        let mut res = MockAnalysis::new();\n+        for entry in parse_fixture(fixture) {\n+            if entry.text.contains(CURSOR_MARKER) {\n+                assert!(\n+                    range.is_none(),\n+                    \"only two marker (<|>) per fixture is allowed\"\n+                );\n+                range = Some(res.add_file_with_range(&entry.meta, &entry.text));\n+            } else {\n+                res.add_file(&entry.meta, &entry.text);\n+            }\n+        }\n+        let range = range.expect(\"expected two marker (<|>)\");\n+        (res, range)\n+    }\n+\n     pub fn add_file(&mut self, path: &str, text: &str) -> FileId {\n         let file_id = FileId((self.files.len() + 1) as u32);\n         self.files.push((path.to_string(), text.to_string()));\n@@ -102,12 +122,18 @@ impl MockAnalysis {\n     }\n }\n \n-/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+/// Creates analysis from a multi-file fixture, returns positions marked with a <|>.\n pub fn analysis_and_position(fixture: &str) -> (Analysis, FilePosition) {\n     let (mock, position) = MockAnalysis::with_files_and_position(fixture);\n     (mock.analysis(), position)\n }\n \n+/// Creates analysis from a multi-file fixture, returns ranges marked with two <|>.\n+pub fn analysis_and_range(fixture: &str) -> (Analysis, FileRange) {\n+    let (mock, range) = MockAnalysis::with_files_and_range(fixture);\n+    (mock.analysis(), range)\n+}\n+\n /// Creates analysis for a single file.\n pub fn single_file(code: &str) -> (Analysis, FileId) {\n     let mut mock = MockAnalysis::new();"}, {"sha": "ce6f6f3faea81b2156446d18421aebc34432035d", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5992964edb0e6dba7970c344b46bfd75f57e9a0/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5992964edb0e6dba7970c344b46bfd75f57e9a0/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=f5992964edb0e6dba7970c344b46bfd75f57e9a0", "patch": "@@ -2,14 +2,30 @@ use ra_syntax::TextRange;\n use test_utils::{assert_eq_dbg, assert_eq_text};\n \n use ra_analysis::{\n-    mock_analysis::{analysis_and_position, single_file, single_file_with_position, MockAnalysis},\n+    mock_analysis::{analysis_and_position, analysis_and_range, single_file, single_file_with_position, MockAnalysis},\n     AnalysisChange, CrateGraph, FileId, FnSignatureInfo,\n };\n \n fn get_signature(text: &str) -> (FnSignatureInfo, Option<usize>) {\n     let (analysis, position) = single_file_with_position(text);\n     analysis.resolve_callable(position).unwrap().unwrap()\n }\n+#[test]\n+fn test_type_of() {\n+    let (analysis, range) = analysis_and_range(\n+        \"\n+        //- /lib.rs\n+        pub fn foo() -> u32 {\n+            1\n+        };\n+\n+        let <|>foo_test<|> = foo();\n+    \",\n+    );\n+\n+    let type_name = analysis.type_of(range).unwrap().unwrap();\n+    assert_eq_dbg(\"u32\", &type_name);\n+}\n \n #[test]\n fn approximate_resolve_works_in_items() {"}]}