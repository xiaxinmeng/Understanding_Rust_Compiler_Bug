{"sha": "a14e35f382825549a506eb5c187fa5d58622bb1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNGUzNWYzODI4MjU1NDlhNTA2ZWI1YzE4N2ZhNWQ1ODYyMmJiMWM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-15T00:52:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T00:52:41Z"}, "message": "Rollup merge of #65398 - estebank:capitalization-only, r=varkor\n\nBring attention to suggestions when the only difference is capitalization\n\nCC #65386.", "tree": {"sha": "bd7340907eaa546979c95a0025631519e8cb36a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd7340907eaa546979c95a0025631519e8cb36a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a14e35f382825549a506eb5c187fa5d58622bb1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdpRhZCRBK7hj4Ov3rIwAAdHIIABIiUtUaY1UuojwVV7dI4wMv\nxFGfs0OWIT2jzcXv5Hbl7Osr6lUSowoHC5LfY33ixkDZTSZsKkYglXhwOyxV3/aq\nVo1mbuasZRFPv3yS6aZl5BFWEZlzdlYT7OFN2WYm17BUWMeKmRbf9lNg1HCwSG0o\ntrPFDJAd5STm/anakxIsIXKfnjKW/B+wU9Zv0JnIuohm+cwLxWDHTVvIRJhSUssF\nFArqXImWwhVT8WitaeYz0gbAJdBV2aUl1icEXgQRjgNj4ukrqH4YCylDtpvHvJiJ\nFEBvPmMj+u5aZTLi5t/sr0NRTe8iiXsUVwUdl64QzN47KibtA1QYP+PKJCSdtr4=\n=r1gF\n-----END PGP SIGNATURE-----\n", "payload": "tree bd7340907eaa546979c95a0025631519e8cb36a7\nparent 8d1123d80880c213b27720d2e7d92a093e0e6fe9\nparent 8bf6d353772aacc15c78919e3d2f2db0528484b1\nauthor Tyler Mandry <tmandry@gmail.com> 1571100761 -0700\ncommitter GitHub <noreply@github.com> 1571100761 -0700\n\nRollup merge of #65398 - estebank:capitalization-only, r=varkor\n\nBring attention to suggestions when the only difference is capitalization\n\nCC #65386.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a14e35f382825549a506eb5c187fa5d58622bb1c", "html_url": "https://github.com/rust-lang/rust/commit/a14e35f382825549a506eb5c187fa5d58622bb1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a14e35f382825549a506eb5c187fa5d58622bb1c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1123d80880c213b27720d2e7d92a093e0e6fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1123d80880c213b27720d2e7d92a093e0e6fe9", "html_url": "https://github.com/rust-lang/rust/commit/8d1123d80880c213b27720d2e7d92a093e0e6fe9"}, {"sha": "8bf6d353772aacc15c78919e3d2f2db0528484b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf6d353772aacc15c78919e3d2f2db0528484b1", "html_url": "https://github.com/rust-lang/rust/commit/8bf6d353772aacc15c78919e3d2f2db0528484b1"}], "stats": {"total": 167, "additions": 115, "deletions": 52}, "files": [{"sha": "2517141542d571317e325ac5030fdfde9dd51400", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -23,7 +23,7 @@ use syntax::feature_gate::UnstableFeatures;\n use syntax::source_map::SourceMap;\n \n use errors::emitter::HumanReadableErrorType;\n-use errors::{ColorConfig, FatalError, Handler};\n+use errors::{ColorConfig, FatalError, Handler, SourceMapperDyn};\n \n use getopts;\n \n@@ -1857,6 +1857,7 @@ struct NullEmitter;\n \n impl errors::emitter::Emitter for NullEmitter {\n     fn emit_diagnostic(&mut self, _: &errors::Diagnostic) {}\n+    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> { None }\n }\n \n // Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`."}, {"sha": "ef3b115890f8b77fb649c9b0aa02d868ab29d10f", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -22,7 +22,8 @@ use rustc::util::common::{time_depth, set_time_depth, print_time_passes_entry};\n use rustc::util::profiling::SelfProfilerRef;\n use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n-use rustc_errors::{Handler, Level, FatalError, DiagnosticId};\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Handler, Level, FatalError, DiagnosticId, SourceMapperDyn};\n use rustc_errors::emitter::{Emitter};\n use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n@@ -1681,6 +1682,9 @@ impl Emitter for SharedEmitter {\n         }\n         drop(self.sender.send(SharedEmitterMessage::AbortIfErrors));\n     }\n+    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+        None\n+    }\n }\n \n impl SharedEmitterMain {"}, {"sha": "16a1a28cd3a80c968bdcc20552cfec3620dcad40", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -49,6 +49,10 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n                                    &suggestions);\n     }\n \n+    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+        self.source_map.as_ref()\n+    }\n+\n     fn should_show_explain(&self) -> bool {\n         !self.short_message\n     }"}, {"sha": "84400091100e6047c556977331e3ae3618e0e39b", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -13,7 +13,7 @@ use syntax_pos::{SourceFile, Span, MultiSpan};\n \n use crate::{\n     Level, CodeSuggestion, Diagnostic, SubDiagnostic,\n-    SuggestionStyle, SourceMapperDyn, DiagnosticId,\n+    SuggestionStyle, SourceMapper, SourceMapperDyn, DiagnosticId,\n };\n use crate::Level::Error;\n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n@@ -192,6 +192,8 @@ pub trait Emitter {\n         true\n     }\n \n+    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>>;\n+\n     /// Formats the substitutions of the primary_span\n     ///\n     /// The are a lot of conditions to this method, but in short:\n@@ -204,7 +206,7 @@ pub trait Emitter {\n     ///   we return the original `primary_span` and the original suggestions.\n     fn primary_span_formatted<'a>(\n         &mut self,\n-        db: &'a Diagnostic\n+        db: &'a Diagnostic,\n     ) -> (MultiSpan, &'a [CodeSuggestion]) {\n         let mut primary_span = db.span.clone();\n         if let Some((sugg, rest)) = db.suggestions.split_first() {\n@@ -234,7 +236,20 @@ pub trait Emitter {\n                     format!(\"help: {}\", sugg.msg)\n                 } else {\n                     // Show the default suggestion text with the substitution\n-                    format!(\"help: {}: `{}`\", sugg.msg, substitution)\n+                    format!(\n+                        \"help: {}{}: `{}`\",\n+                        sugg.msg,\n+                        if self.source_map().map(|sm| is_case_difference(\n+                            &**sm,\n+                            substitution,\n+                            sugg.substitutions[0].parts[0].span,\n+                        )).unwrap_or(false) {\n+                            \" (notice the capitalization)\"\n+                        } else {\n+                            \"\"\n+                        },\n+                        substitution,\n+                    )\n                 };\n                 primary_span.push_span_label(sugg.substitutions[0].parts[0].span, msg);\n \n@@ -382,6 +397,10 @@ pub trait Emitter {\n }\n \n impl Emitter for EmitterWriter {\n+    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+        self.sm.as_ref()\n+    }\n+\n     fn emit_diagnostic(&mut self, db: &Diagnostic) {\n         let mut children = db.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n@@ -1461,7 +1480,9 @@ impl EmitterWriter {\n         let suggestions = suggestion.splice_lines(&**sm);\n \n         let mut row_num = 2;\n-        for &(ref complete, ref parts) in suggestions.iter().take(MAX_SUGGESTIONS) {\n+        let mut notice_capitalization = false;\n+        for (complete, parts, only_capitalization) in suggestions.iter().take(MAX_SUGGESTIONS) {\n+            notice_capitalization |= only_capitalization;\n             // Only show underline if the suggestion spans a single line and doesn't cover the\n             // entirety of the code output. If you have multiple replacements in the same line\n             // of code, show the underline.\n@@ -1552,7 +1573,10 @@ impl EmitterWriter {\n         }\n         if suggestions.len() > MAX_SUGGESTIONS {\n             let msg = format!(\"and {} other candidates\", suggestions.len() - MAX_SUGGESTIONS);\n-            buffer.puts(row_num, 0, &msg, Style::NoStyle);\n+            buffer.puts(row_num, max_line_num_len + 3, &msg, Style::NoStyle);\n+        } else if notice_capitalization {\n+            let msg = \"notice the capitalization difference\";\n+            buffer.puts(row_num, max_line_num_len + 3, &msg, Style::NoStyle);\n         }\n         emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n         Ok(())\n@@ -2034,3 +2058,18 @@ impl<'a> Drop for WritableDst<'a> {\n         }\n     }\n }\n+\n+/// Whether the original and suggested code are visually similar enough to warrant extra wording.\n+pub fn is_case_difference(sm: &dyn SourceMapper, suggested: &str, sp: Span) -> bool {\n+    // FIXME: this should probably be extended to also account for `FO0` \u2192 `FOO` and unicode.\n+    let found = sm.span_to_snippet(sp).unwrap();\n+    let ascii_confusables = &['c', 'f', 'i', 'k', 'o', 's', 'u', 'v', 'w', 'x', 'y', 'z'];\n+    // All the chars that differ in capitalization are confusable (above):\n+    let confusable = found.chars().zip(suggested.chars()).filter(|(f, s)| f != s).all(|(f, s)| {\n+        (ascii_confusables.contains(&f) || ascii_confusables.contains(&s))\n+    });\n+    confusable && found.to_lowercase() == suggested.to_lowercase()\n+            // FIXME: We sometimes suggest the same thing we already have, which is a\n+            //        bug, but be defensive against that here.\n+            && found != suggested\n+}"}, {"sha": "63df052a225041095d263a75ae11e51d45dd33f9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -13,7 +13,7 @@ pub use emitter::ColorConfig;\n \n use Level::*;\n \n-use emitter::{Emitter, EmitterWriter};\n+use emitter::{Emitter, EmitterWriter, is_case_difference};\n use registry::Registry;\n \n use rustc_data_structures::sync::{self, Lrc, Lock};\n@@ -37,13 +37,16 @@ pub mod registry;\n mod styled_buffer;\n mod lock;\n \n-use syntax_pos::{BytePos,\n-                 Loc,\n-                 FileLinesResult,\n-                 SourceFile,\n-                 FileName,\n-                 MultiSpan,\n-                 Span};\n+use syntax_pos::{\n+    BytePos,\n+    FileLinesResult,\n+    FileName,\n+    Loc,\n+    MultiSpan,\n+    SourceFile,\n+    Span,\n+    SpanSnippetError,\n+};\n \n /// Indicates the confidence in the correctness of a suggestion.\n ///\n@@ -147,6 +150,7 @@ pub trait SourceMapper {\n     fn lookup_char_pos(&self, pos: BytePos) -> Loc;\n     fn span_to_lines(&self, sp: Span) -> FileLinesResult;\n     fn span_to_string(&self, sp: Span) -> String;\n+    fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError>;\n     fn span_to_filename(&self, sp: Span) -> FileName;\n     fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n     fn call_span_if_macro(&self, sp: Span) -> Span;\n@@ -155,9 +159,12 @@ pub trait SourceMapper {\n }\n \n impl CodeSuggestion {\n-    /// Returns the assembled code suggestions and whether they should be shown with an underline.\n-    pub fn splice_lines(&self, cm: &SourceMapperDyn)\n-                        -> Vec<(String, Vec<SubstitutionPart>)> {\n+    /// Returns the assembled code suggestions, whether they should be shown with an underline\n+    /// and whether the substitution only differs in capitalization.\n+    pub fn splice_lines(\n+        &self,\n+        cm: &SourceMapperDyn,\n+    ) -> Vec<(String, Vec<SubstitutionPart>, bool)> {\n         use syntax_pos::{CharPos, Pos};\n \n         fn push_trailing(buf: &mut String,\n@@ -232,6 +239,7 @@ impl CodeSuggestion {\n                 prev_hi = cm.lookup_char_pos(part.span.hi());\n                 prev_line = fm.get_line(prev_hi.line - 1);\n             }\n+            let only_capitalization = is_case_difference(cm, &buf, bounding_span);\n             // if the replacement already ends with a newline, don't print the next line\n             if !buf.ends_with('\\n') {\n                 push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, None);\n@@ -240,7 +248,7 @@ impl CodeSuggestion {\n             while buf.ends_with('\\n') {\n                 buf.pop();\n             }\n-            (buf, substitution.parts)\n+            (buf, substitution.parts, only_capitalization)\n         }).collect()\n     }\n }"}, {"sha": "4cf987417b8ed49d0e34507be4a0528ea9c2752e", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -12,7 +12,7 @@\n use crate::source_map::{SourceMap, FilePathMapping};\n \n use errors::registry::Registry;\n-use errors::{SubDiagnostic, CodeSuggestion, SourceMapper};\n+use errors::{SubDiagnostic, CodeSuggestion, SourceMapper, SourceMapperDyn};\n use errors::{DiagnosticId, Applicability};\n use errors::emitter::{Emitter, HumanReadableErrorType};\n \n@@ -113,6 +113,10 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n+    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+        Some(&self.sm)\n+    }\n+\n     fn should_show_explain(&self) -> bool {\n         match self.json_rendered {\n             HumanReadableErrorType::Short(_) => false,"}, {"sha": "1501adc597104bb5c0441b6269c9f85921100ebb", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -970,6 +970,9 @@ impl SourceMapper for SourceMap {\n     fn span_to_string(&self, sp: Span) -> String {\n         self.span_to_string(sp)\n     }\n+    fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {\n+        self.span_to_snippet(sp)\n+    }\n     fn span_to_filename(&self, sp: Span) -> FileName {\n         self.span_to_filename(sp)\n     }"}, {"sha": "32cf8d8a01a783bbea196604263e4c24169de95e", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -10,7 +10,7 @@ error: const parameter `x` should have an upper case name\n   --> $DIR/const-parameter-uppercase-lint.rs:6:15\n    |\n LL | fn noop<const x: u32>() {\n-   |               ^ help: convert the identifier to upper case: `X`\n+   |               ^ help: convert the identifier to upper case (notice the capitalization): `X`\n    |\n note: lint level defined here\n   --> $DIR/const-parameter-uppercase-lint.rs:4:9"}, {"sha": "ef68bf52cf3bd4c7862994428a5119dd5fff78c8", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -55,7 +55,7 @@ LL |     let z = ManyVariants::Three();\n    |             ^^^^^^^^^^^^^^^^^^^\n LL |     let z = ManyVariants::Four();\n    |             ^^^^^^^^^^^^^^^^^^\n-and 6 other candidates\n+     and 6 other candidates\n \n error: aborting due to 5 previous errors\n "}, {"sha": "cb350a1faeed2a6af11b41d18e95c0c660ce9d85", "filename": "src/test/ui/did_you_mean/issue-56028-there-is-an-enum-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -13,7 +13,7 @@ LL | fn setup() -> Determine { Set }\n    |               ^^^^^^^^^\n LL | fn setup() -> PutDown { Set }\n    |               ^^^^^^^\n-and 3 other candidates\n+     and 3 other candidates\n \n error[E0425]: cannot find value `Set` in this scope\n   --> $DIR/issue-56028-there-is-an-enum-variant.rs:9:21\n@@ -30,7 +30,7 @@ LL | use Determine::Set;\n    |\n LL | use PutDown::Set;\n    |\n-and 3 other candidates\n+     and 3 other candidates\n \n error: aborting due to 2 previous errors\n "}, {"sha": "754006bc217ee6f8f659680d817e2b3e5c0e9a87", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -34,7 +34,7 @@ LL |     let f = Foo();\n    |             ^^^\n    |             |\n    |             did you mean `Foo { /* fields */ }`?\n-   |             help: a function with a similar name exists: `foo`\n+   |             help: a function with a similar name exists (notice the capitalization): `foo`\n \n error[E0423]: expected value, found struct `T`\n   --> $DIR/E0423.rs:14:8"}, {"sha": "57a9350c089a8e498bc63a3c766c9877cd9df978", "filename": "src/test/ui/expr_attr_paren_order.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fexpr_attr_paren_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fexpr_attr_paren_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr_attr_paren_order.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -2,7 +2,7 @@ error: variable `X` should have a snake case name\n   --> $DIR/expr_attr_paren_order.rs:19:17\n    |\n LL |             let X = 0;\n-   |                 ^ help: convert the identifier to snake case: `x`\n+   |                 ^ help: convert the identifier to snake case (notice the capitalization): `x`\n    |\n note: lint level defined here\n   --> $DIR/expr_attr_paren_order.rs:17:17"}, {"sha": "7acb266f49c0b6f22f85ef74fc13c5e699c6b50e", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -34,7 +34,7 @@ LL | use foo::test2::test::g;\n    |\n LL | use foo::test::g;\n    |\n-and 2 other candidates\n+     and 2 other candidates\n \n error[E0425]: cannot find function `f` in this scope\n   --> $DIR/globs.rs:61:12"}, {"sha": "45a2efebbb8dad8afeef17abdaf941adc6044983", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -2,7 +2,7 @@ error[E0425]: cannot find value `Opaque` in this scope\n   --> $DIR/rustc-macro-transparency.rs:26:5\n    |\n LL |     Opaque;\n-   |     ^^^^^^ help: a local variable with a similar name exists: `opaque`\n+   |     ^^^^^^ help: a local variable with a similar name exists (notice the capitalization): `opaque`\n \n error[E0423]: expected value, found macro `semitransparent`\n   --> $DIR/rustc-macro-transparency.rs:29:5"}, {"sha": "b1057d45869a8ae9394752dbc0d70383401c663b", "filename": "src/test/ui/issues/issue-10200.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fissues%2Fissue-10200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fissues%2Fissue-10200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10200.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -2,7 +2,7 @@ error[E0532]: expected tuple struct/variant, found function `foo`\n   --> $DIR/issue-10200.rs:6:9\n    |\n LL |         foo(x)\n-   |         ^^^ help: a tuple struct with a similar name exists: `Foo`\n+   |         ^^^ help: a tuple struct with a similar name exists (notice the capitalization): `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "1f71e159f182b1224d5fa22e4a5bba584fde8f44", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -27,7 +27,7 @@ LL |     use std::prelude::v1::Result;\n    |\n LL |     use std::result::Result;\n    |\n-and 1 other candidates\n+     and 1 other candidates\n \n error[E0573]: expected type, found variant `Result`\n   --> $DIR/issue-17546.rs:28:13\n@@ -44,7 +44,7 @@ LL | use std::prelude::v1::Result;\n    |\n LL | use std::result::Result;\n    |\n-and 1 other candidates\n+     and 1 other candidates\n \n error[E0573]: expected type, found variant `NoResult`\n   --> $DIR/issue-17546.rs:33:15"}, {"sha": "e320c436f5b68595f9a1c73de780a77fc6296f94", "filename": "src/test/ui/issues/issue-17718-const-naming.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -15,7 +15,7 @@ error: constant `foo` should have an upper case name\n   --> $DIR/issue-17718-const-naming.rs:4:7\n    |\n LL | const foo: isize = 3;\n-   |       ^^^ help: convert the identifier to upper case: `FOO`\n+   |       ^^^ help: convert the identifier to upper case (notice the capitalization): `FOO`\n    |\n note: lint level defined here\n   --> $DIR/issue-17718-const-naming.rs:2:9"}, {"sha": "c7e9d71700e6da595d6c7ed5e1a58e143a432dff", "filename": "src/test/ui/issues/issue-46332.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -2,7 +2,7 @@ error[E0422]: cannot find struct, variant or union type `TyUInt` in this scope\n   --> $DIR/issue-46332.rs:9:5\n    |\n LL |     TyUInt {};\n-   |     ^^^^^^ help: a struct with a similar name exists: `TyUint`\n+   |     ^^^^^^ help: a struct with a similar name exists (notice the capitalization): `TyUint`\n \n error: aborting due to previous error\n "}, {"sha": "177f8c8fe9b63d9fc0d1ebef802e65e6962722c6", "filename": "src/test/ui/lint/lint-non-camel-case-types.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -14,25 +14,25 @@ error: type `foo` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:7:8\n    |\n LL | struct foo {\n-   |        ^^^ help: convert the identifier to upper camel case: `Foo`\n+   |        ^^^ help: convert the identifier to upper camel case (notice the capitalization): `Foo`\n \n error: type `foo2` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:11:6\n    |\n LL | enum foo2 {\n-   |      ^^^^ help: convert the identifier to upper camel case: `Foo2`\n+   |      ^^^^ help: convert the identifier to upper camel case (notice the capitalization): `Foo2`\n \n error: type `foo3` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:15:8\n    |\n LL | struct foo3 {\n-   |        ^^^^ help: convert the identifier to upper camel case: `Foo3`\n+   |        ^^^^ help: convert the identifier to upper camel case (notice the capitalization): `Foo3`\n \n error: type `foo4` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:19:6\n    |\n LL | type foo4 = isize;\n-   |      ^^^^ help: convert the identifier to upper camel case: `Foo4`\n+   |      ^^^^ help: convert the identifier to upper camel case (notice the capitalization): `Foo4`\n \n error: variant `bar` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:22:5\n@@ -44,7 +44,7 @@ error: trait `foo6` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:25:7\n    |\n LL | trait foo6 {\n-   |       ^^^^ help: convert the identifier to upper camel case: `Foo6`\n+   |       ^^^^ help: convert the identifier to upper camel case (notice the capitalization): `Foo6`\n \n error: type parameter `ty` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:29:6"}, {"sha": "c5eca89debb82c3b49ad7f26adbbe7722e81f162", "filename": "src/test/ui/lint/lint-non-snake-case-functions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -38,7 +38,7 @@ error: trait method `a_b_C` should have a snake case name\n   --> $DIR/lint-non-snake-case-functions.rs:25:8\n    |\n LL |     fn a_b_C(&self) {}\n-   |        ^^^^^ help: convert the identifier to snake case: `a_b_c`\n+   |        ^^^^^ help: convert the identifier to snake case (notice the capitalization): `a_b_c`\n \n error: trait method `something__else` should have a snake case name\n   --> $DIR/lint-non-snake-case-functions.rs:28:8\n@@ -50,13 +50,13 @@ error: function `Cookie` should have a snake case name\n   --> $DIR/lint-non-snake-case-functions.rs:38:4\n    |\n LL | fn Cookie() {}\n-   |    ^^^^^^ help: convert the identifier to snake case: `cookie`\n+   |    ^^^^^^ help: convert the identifier to snake case (notice the capitalization): `cookie`\n \n error: function `bi_S_Cuit` should have a snake case name\n   --> $DIR/lint-non-snake-case-functions.rs:41:8\n    |\n LL | pub fn bi_S_Cuit() {}\n-   |        ^^^^^^^^^ help: convert the identifier to snake case: `bi_s_cuit`\n+   |        ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `bi_s_cuit`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "ceb83d08f27779d61a971ec786b74c31516a62c6", "filename": "src/test/ui/lint/lint-non-uppercase-statics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-statics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-statics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-statics.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -2,7 +2,7 @@ error: static variable `foo` should have an upper case name\n   --> $DIR/lint-non-uppercase-statics.rs:4:8\n    |\n LL | static foo: isize = 1;\n-   |        ^^^ help: convert the identifier to upper case: `FOO`\n+   |        ^^^ help: convert the identifier to upper case (notice the capitalization): `FOO`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-uppercase-statics.rs:1:11"}, {"sha": "f614d5d71f88cdc0afcfa02e7082e02cf10873b6", "filename": "src/test/ui/lint/lint-uppercase-variables.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -21,7 +21,7 @@ error: structure field `X` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:10:5\n    |\n LL |     X: usize\n-   |     ^ help: convert the identifier to snake case: `x`\n+   |     ^ help: convert the identifier to snake case (notice the capitalization): `x`\n    |\n note: lint level defined here\n   --> $DIR/lint-uppercase-variables.rs:3:9\n@@ -33,7 +33,7 @@ error: variable `Xx` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:13:9\n    |\n LL | fn test(Xx: usize) {\n-   |         ^^ help: convert the identifier to snake case: `xx`\n+   |         ^^ help: convert the identifier to snake case (notice the capitalization): `xx`\n \n error: variable `Test` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:18:9\n@@ -45,7 +45,7 @@ error: variable `Foo` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:22:9\n    |\n LL |         Foo => {}\n-   |         ^^^ help: convert the identifier to snake case: `foo`\n+   |         ^^^ help: convert the identifier to snake case (notice the capitalization): `foo`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5016d9b97d69e661c04f47bf62ac8da54e148715", "filename": "src/test/ui/lint/not_found.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -16,5 +16,5 @@ warning: unknown lint: `Warnings`\n   --> $DIR/not_found.rs:10:8\n    |\n LL | #[deny(Warnings)]\n-   |        ^^^^^^^^ help: did you mean: `warnings`\n+   |        ^^^^^^^^ help: did you mean (notice the capitalization): `warnings`\n "}, {"sha": "139b3f13fd6b2beccdc4e6328426ee0d828eab44", "filename": "src/test/ui/lint/reasons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -15,7 +15,7 @@ warning: variable `Social_exchange_psychology` should have a snake case name\n   --> $DIR/reasons.rs:30:9\n    |\n LL |     let Social_exchange_psychology = CheaterDetectionMechanism {};\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `social_exchange_psychology`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `social_exchange_psychology`\n    |\n    = note: people shouldn't have to change their usual style habits\n            to contribute to our project"}, {"sha": "1da5acc966163ed004237388b6492da475369cce", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -395,7 +395,7 @@ mod foo {\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n \\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0muse std::collections::hash_map::Iter;\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n-\\u001b[0mand 8 other candidates\\u001b[0m\n+\\u001b[0m     and 8 other candidates\\u001b[0m\n \n \"\n }"}, {"sha": "513e02f74e3b265cf88afc639d6cc7d91c9076ca", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -27,7 +27,7 @@ LL | use mul3::Mul;\n    |\n LL | use mul4::Mul;\n    |\n-and 2 other candidates\n+     and 2 other candidates\n \n error[E0405]: cannot find trait `ThisTraitReallyDoesntExistInAnyModuleReally` in this scope\n   --> $DIR/issue-21221-1.rs:63:6"}, {"sha": "e693a0ef91fc2be9414d376efcfbdaf9e75cd3a6", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -38,13 +38,13 @@ error[E0412]: cannot find type `first` in module `m`\n   --> $DIR/levenshtein.rs:28:15\n    |\n LL |     let b: m::first = m::second; // Misspelled item in module.\n-   |               ^^^^^ help: a struct with a similar name exists: `First`\n+   |               ^^^^^ help: a struct with a similar name exists (notice the capitalization): `First`\n \n error[E0425]: cannot find value `second` in module `m`\n   --> $DIR/levenshtein.rs:28:26\n    |\n LL |     let b: m::first = m::second; // Misspelled item in module.\n-   |                          ^^^^^^ help: a unit struct with a similar name exists: `Second`\n+   |                          ^^^^^^ help: a unit struct with a similar name exists (notice the capitalization): `Second`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "973c486970e6577b8ea0ae132d1fc9e250d7982a", "filename": "src/test/ui/rust-2018/issue-52202-use-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a14e35f382825549a506eb5c187fa5d58622bb1c/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr?ref=a14e35f382825549a506eb5c187fa5d58622bb1c", "patch": "@@ -13,7 +13,7 @@ LL | use std::collections::hash_map::Drain;\n    |\n LL | use std::collections::hash_set::Drain;\n    |\n-and 3 other candidates\n+     and 3 other candidates\n \n error: aborting due to previous error\n "}]}