{"sha": "a661671ae37eece708d894eb25d58ec7dd2fd9a7", "node_id": "C_kwDOAAsO6NoAKGE2NjE2NzFhZTM3ZWVjZTcwOGQ4OTRlYjI1ZDU4ZWM3ZGQyZmQ5YTc", "commit": {"author": {"name": "David Renshaw", "email": "dwrenshaw@gmail.com", "date": "2021-12-31T17:26:10Z"}, "committer": {"name": "David Renshaw", "email": "dwrenshaw@gmail.com", "date": "2021-12-31T17:42:15Z"}, "message": "[rustc_builtin_macros] add indices to format_foreign::printf::Substitution::Escape", "tree": {"sha": "5a0dc436f6afdda26a5604e03dc9322116ff76dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a0dc436f6afdda26a5604e03dc9322116ff76dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a661671ae37eece708d894eb25d58ec7dd2fd9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a661671ae37eece708d894eb25d58ec7dd2fd9a7", "html_url": "https://github.com/rust-lang/rust/commit/a661671ae37eece708d894eb25d58ec7dd2fd9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a661671ae37eece708d894eb25d58ec7dd2fd9a7/comments", "author": {"login": "dwrensha", "id": 495768, "node_id": "MDQ6VXNlcjQ5NTc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/495768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrensha", "html_url": "https://github.com/dwrensha", "followers_url": "https://api.github.com/users/dwrensha/followers", "following_url": "https://api.github.com/users/dwrensha/following{/other_user}", "gists_url": "https://api.github.com/users/dwrensha/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrensha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrensha/subscriptions", "organizations_url": "https://api.github.com/users/dwrensha/orgs", "repos_url": "https://api.github.com/users/dwrensha/repos", "events_url": "https://api.github.com/users/dwrensha/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrensha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dwrensha", "id": 495768, "node_id": "MDQ6VXNlcjQ5NTc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/495768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrensha", "html_url": "https://github.com/dwrensha", "followers_url": "https://api.github.com/users/dwrensha/followers", "following_url": "https://api.github.com/users/dwrensha/following{/other_user}", "gists_url": "https://api.github.com/users/dwrensha/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrensha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrensha/subscriptions", "organizations_url": "https://api.github.com/users/dwrensha/orgs", "repos_url": "https://api.github.com/users/dwrensha/repos", "events_url": "https://api.github.com/users/dwrensha/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrensha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed935e92dfb09ae388344b12284bf5110cf9265", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed935e92dfb09ae388344b12284bf5110cf9265", "html_url": "https://github.com/rust-lang/rust/commit/8ed935e92dfb09ae388344b12284bf5110cf9265"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "ecd16736e7c302e4a518113e20d0c29604b5d718", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a661671ae37eece708d894eb25d58ec7dd2fd9a7/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a661671ae37eece708d894eb25d58ec7dd2fd9a7/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=a661671ae37eece708d894eb25d58ec7dd2fd9a7", "patch": "@@ -7,28 +7,29 @@ pub(crate) mod printf {\n     pub enum Substitution<'a> {\n         /// A formatted output substitution with its internal byte offset.\n         Format(Format<'a>),\n-        /// A literal `%%` escape.\n-        Escape,\n+        /// A literal `%%` escape, with its start and end indices.\n+        Escape((usize, usize)),\n     }\n \n     impl<'a> Substitution<'a> {\n         pub fn as_str(&self) -> &str {\n             match *self {\n                 Substitution::Format(ref fmt) => fmt.span,\n-                Substitution::Escape => \"%%\",\n+                Substitution::Escape(_) => \"%%\",\n             }\n         }\n \n         pub fn position(&self) -> Option<InnerSpan> {\n             match *self {\n                 Substitution::Format(ref fmt) => Some(fmt.position),\n-                _ => None,\n+                Substitution::Escape((start, end)) => Some(InnerSpan::new(start, end)),\n             }\n         }\n \n         pub fn set_position(&mut self, start: usize, end: usize) {\n-            if let Substitution::Format(ref mut fmt) = self {\n-                fmt.position = InnerSpan::new(start, end);\n+            match self {\n+                Substitution::Format(ref mut fmt) => fmt.position = InnerSpan::new(start, end),\n+                Substitution::Escape(ref mut pos) => *pos = (start, end),\n             }\n         }\n \n@@ -39,7 +40,7 @@ pub(crate) mod printf {\n         pub fn translate(&self) -> Result<String, Option<String>> {\n             match *self {\n                 Substitution::Format(ref fmt) => fmt.translate(),\n-                Substitution::Escape => Err(None),\n+                Substitution::Escape(_) => Err(None),\n             }\n         }\n     }\n@@ -304,14 +305,9 @@ pub(crate) mod printf {\n         fn next(&mut self) -> Option<Self::Item> {\n             let (mut sub, tail) = parse_next_substitution(self.s)?;\n             self.s = tail;\n-            match sub {\n-                Substitution::Format(_) => {\n-                    if let Some(inner_span) = sub.position() {\n-                        sub.set_position(inner_span.start + self.pos, inner_span.end + self.pos);\n-                        self.pos += inner_span.end;\n-                    }\n-                }\n-                Substitution::Escape => self.pos += 2,\n+            if let Some(InnerSpan { start, end }) = sub.position() {\n+                sub.set_position(start + self.pos, end + self.pos);\n+                self.pos += end;\n             }\n             Some(sub)\n         }\n@@ -340,7 +336,7 @@ pub(crate) mod printf {\n         let at = {\n             let start = s.find('%')?;\n             if let '%' = s[start + 1..].chars().next()? {\n-                return Some((Substitution::Escape, &s[start + 2..]));\n+                return Some((Substitution::Escape((start, start + 2)), &s[start + 2..]));\n             }\n \n             Cur::new_at(s, start)"}, {"sha": "f1daaeb743e83ec8e93b83e489d2f0da426d3d97", "filename": "src/test/ui/macros/issue-92267.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a661671ae37eece708d894eb25d58ec7dd2fd9a7/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a661671ae37eece708d894eb25d58ec7dd2fd9a7/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.rs?ref=a661671ae37eece708d894eb25d58ec7dd2fd9a7", "patch": "@@ -0,0 +1,3 @@\n+// check-fail\n+\n+pub fn main() { println!(\"\ud83e\udd80%%%\", 0) } //~ ERROR argument never used"}, {"sha": "d2d66c81198ec71d429632c4ebb0d3e690cf7f86", "filename": "src/test/ui/macros/issue-92267.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a661671ae37eece708d894eb25d58ec7dd2fd9a7/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a661671ae37eece708d894eb25d58ec7dd2fd9a7/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-92267.stderr?ref=a661671ae37eece708d894eb25d58ec7dd2fd9a7", "patch": "@@ -0,0 +1,16 @@\n+error: argument never used\n+  --> $DIR/issue-92267.rs:3:34\n+   |\n+LL | pub fn main() { println!(\"\ud83e\udd80%%%\", 0) }\n+   |                                   ^ argument never used\n+   |\n+note: format specifiers use curly braces, and the conversion specifier `\n+      ` is unknown or unsupported\n+  --> $DIR/issue-92267.rs:3:30\n+   |\n+LL | pub fn main() { println!(\"\ud83e\udd80%%%\", 0) }\n+   |                               ^^\n+   = note: printf formatting not supported; see the documentation for `std::fmt`\n+\n+error: aborting due to previous error\n+"}]}