{"sha": "6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "node_id": "C_kwDOAAsO6NoAKDZhOTRlODdhNTRlY2YyZGYzMDdjNjVhZjJkYmMyZWZmYjNhNTI1Yjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-16T15:02:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-16T15:02:22Z"}, "message": "Auto merge of #110688 - GuillaumeGomez:result-search-type, r=notriddle,jsha\n\nrustdoc: Add search result item types after their name\n\nHere what it looks like:\n\n![Screenshot from 2023-04-22 15-16-58](https://user-images.githubusercontent.com/3050060/233789566-b5f3f625-3b78-4c56-a7ee-0a4f2d62e667.png)\n\nThe idea is to improve accessibility by providing this information directly in the text and not only in the text color. Currently we already use it for doc aliases and for primitive types, so I extended it to all types.\n\nr? `@notriddle`", "tree": {"sha": "041edb9c881311512c705a2c27e48b50e10a9eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/041edb9c881311512c705a2c27e48b50e10a9eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "html_url": "https://github.com/rust-lang/rust/commit/6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2304917aad2f18ee9a1c6969e1197c96dee907b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2304917aad2f18ee9a1c6969e1197c96dee907b6", "html_url": "https://github.com/rust-lang/rust/commit/2304917aad2f18ee9a1c6969e1197c96dee907b6"}, {"sha": "de85f7ff363a80ab0eefc6909edc24b5c99880c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/de85f7ff363a80ab0eefc6909edc24b5c99880c4", "html_url": "https://github.com/rust-lang/rust/commit/de85f7ff363a80ab0eefc6909edc24b5c99880c4"}], "stats": {"total": 82, "additions": 42, "deletions": 40}, "files": [{"sha": "b487cfa5c2553813a8d077551de62f3c370a4154", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "patch": "@@ -213,7 +213,7 @@ a.anchor,\n h1 a,\n .search-results a,\n .stab,\n-.result-name .primitive > i, .result-name .keyword > i {\n+.result-name i {\n \tcolor: var(--main-color);\n }\n \n@@ -887,7 +887,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n .search-results .result-name span.alias {\n \tcolor: var(--search-results-alias-color);\n }\n-.search-results .result-name span.grey {\n+.search-results .result-name .grey {\n \tcolor: var(--search-results-grey-color);\n }\n "}, {"sha": "e724bf1601aa0a50444cbc953d63eb8d34eb1679", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "patch": "@@ -35,6 +35,35 @@ const itemTypes = [\n     \"traitalias\",\n ];\n \n+const longItemTypes = [\n+    \"module\",\n+    \"extern crate\",\n+    \"re-export\",\n+    \"struct\",\n+    \"enum\",\n+    \"function\",\n+    \"type alias\",\n+    \"static\",\n+    \"trait\",\n+    \"\",\n+    \"trait method\",\n+    \"method\",\n+    \"struct field\",\n+    \"enum variant\",\n+    \"macro\",\n+    \"primitive type\",\n+    \"associated type\",\n+    \"constant\",\n+    \"associated constant\",\n+    \"union\",\n+    \"foreign type\",\n+    \"keyword\",\n+    \"existential type\",\n+    \"attribute macro\",\n+    \"derive macro\",\n+    \"trait alias\",\n+];\n+\n // used for special search precedence\n const TY_PRIMITIVE = itemTypes.indexOf(\"primitive\");\n const TY_KEYWORD = itemTypes.indexOf(\"keyword\");\n@@ -1966,16 +1995,11 @@ function initSearch(rawSearchIndex) {\n             array.forEach(item => {\n                 const name = item.name;\n                 const type = itemTypes[item.ty];\n+                const longType = longItemTypes[item.ty];\n+                const typeName = longType.length !== 0 ? `${longType}` : \"?\";\n \n                 length += 1;\n \n-                let extra = \"\";\n-                if (type === \"primitive\") {\n-                    extra = \" <i>(primitive type)</i>\";\n-                } else if (type === \"keyword\") {\n-                    extra = \" <i>(keyword)</i>\";\n-                }\n-\n                 const link = document.createElement(\"a\");\n                 link.className = \"result-\" + type;\n                 link.href = item.href;\n@@ -1993,13 +2017,14 @@ function initSearch(rawSearchIndex) {\n \n                     alias.insertAdjacentHTML(\n                         \"beforeend\",\n-                        \"<span class=\\\"grey\\\"><i>&nbsp;- see&nbsp;</i></span>\");\n+                        \"<i class=\\\"grey\\\">&nbsp;- see&nbsp;</i>\");\n \n                     resultName.appendChild(alias);\n                 }\n+\n                 resultName.insertAdjacentHTML(\n                     \"beforeend\",\n-                    item.displayPath + \"<span class=\\\"\" + type + \"\\\">\" + name + extra + \"</span>\");\n+                    `${typeName} ${item.displayPath}<span class=\"${type}\">${name}</span>`);\n                 link.appendChild(resultName);\n \n                 const description = document.createElement(\"div\");"}, {"sha": "6ea6d53e2875edb0da01f0d525a7966c97b5c6e1", "filename": "tests/rustdoc-gui/search-reexport.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/tests%2Frustdoc-gui%2Fsearch-reexport.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/tests%2Frustdoc-gui%2Fsearch-reexport.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-reexport.goml?ref=6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "patch": "@@ -14,7 +14,7 @@ assert-attribute: (\n     \"//a[@class='result-import']\",\n     {\"href\": \"../test_docs/index.html#reexport.TheStdReexport\"},\n )\n-assert-text: (\"//a[@class='result-import']\", \"test_docs::TheStdReexport\")\n+assert-text: (\"a.result-import .result-name\", \"re-export test_docs::TheStdReexport\")\n click: \"//a[@class='result-import']\"\n // We check that it has the background modified thanks to the focus.\n wait-for-css: (\"//*[@id='reexport.TheStdReexport']\", {\"background-color\": \"#494a3d\"})\n@@ -25,8 +25,8 @@ press-key: 'Enter'\n write: (\".search-input\", \"AliasForTheStdReexport\")\n wait-for: \"//a[@class='result-import']\"\n assert-text: (\n-    \"//a[@class='result-import']\",\n-    \"AliasForTheStdReexport - see test_docs::TheStdReexport\",\n+    \"a.result-import .result-name\",\n+    \"AliasForTheStdReexport - see re-export test_docs::TheStdReexport\",\n )\n // Same thing again, we click on it to ensure the background is once again set as expected.\n click: \"//a[@class='result-import']\""}, {"sha": "c75e4141434e4e81b4460b99091623c35ca0382c", "filename": "tests/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/tests%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/tests%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-result-color.goml?ref=6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "patch": "@@ -65,12 +65,6 @@ assert-css: (\n     {\"border-bottom-color\": \"#aaa3\"}\n )\n \n-// Checking the color of \"keyword\" text.\n-assert-css: (\n-    \"//*[@class='result-name']//*[text()='(keyword)']\",\n-    {\"color\": \"#788797\"},\n-)\n-\n store-value: (entry_color, \"#0096cf\") // color of the search entry\n store-value: (hover_entry_color, \"#fff\") // color of the hovered/focused search entry\n store-value: (background_color, \"transparent\") // background color\n@@ -182,12 +176,6 @@ assert-css: (\n     {\"border-bottom-color\": \"#aaa3\"}\n )\n \n-// Checking the color for \"keyword\" text.\n-assert-css: (\n-    \"//*[@class='result-name']//*[text()='(keyword)']\",\n-    {\"color\": \"#ddd\"},\n-)\n-\n store-value: (entry_color, \"#ddd\") // color of the search entry\n store-value: (hover_entry_color, \"#ddd\") // color of the hovered/focused search entry\n store-value: (background_color, \"transparent\") // background color\n@@ -284,12 +272,6 @@ assert-css: (\n     {\"border-bottom-color\": \"#aaa3\"}\n )\n \n-// Checking the color for \"keyword\" text.\n-assert-css: (\n-    \"//*[@class='result-name']//*[text()='(keyword)']\",\n-    {\"color\": \"#000\"},\n-)\n-\n store-value: (entry_color, \"#000\") // color of the search entry\n store-value: (hover_entry_color, \"#000\") // color of the hovered/focused search entry\n store-value: (background_color, \"transparent\") // background color"}, {"sha": "afb3a44be303f3fe2e9a57eb79ff0f38f364852c", "filename": "tests/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/tests%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/tests%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-result-display.goml?ref=6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "patch": "@@ -7,11 +7,11 @@ press-key: 'Enter'\n wait-for: \"#crate-search\"\n // The width is returned by \"getComputedStyle\" which returns the exact number instead of the\n // CSS rule which is \"50%\"...\n-assert-css: (\".search-results div.desc\", {\"width\": \"310px\"})\n+assert-size: (\".search-results div.desc\", {\"width\": 310})\n set-window-size: (600, 100)\n // As counter-intuitive as it may seem, in this width, the width is \"100%\", which is why\n // when computed it's larger.\n-assert-css: (\".search-results div.desc\", {\"width\": \"566px\"})\n+assert-size: (\".search-results div.desc\", {\"width\": 566})\n \n // The result set is all on one line.\n assert-css: (\".search-results .result-name > span\", {\"display\": \"inline\"})"}, {"sha": "1b2be6d4e3e222023334a5436a2b895feb9b99ee", "filename": "tests/rustdoc-gui/search-result-keyword.goml", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/tests%2Frustdoc-gui%2Fsearch-result-keyword.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6a94e87a54ecf2df307c65af2dbc2effb3a525b8/tests%2Frustdoc-gui%2Fsearch-result-keyword.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-result-keyword.goml?ref=6a94e87a54ecf2df307c65af2dbc2effb3a525b8", "patch": "@@ -5,9 +5,4 @@ write: (\".search-input\", \"CookieMonster\")\n press-key: 'Enter'\n // Waiting for the search results to appear...\n wait-for: \"#search-tabs\"\n-// Note: The two next assert commands could be merged as one but readability would be\n-// less good.\n-//\n-// Checking that the CSS is displaying \" (keyword)\" in italic.\n-assert-text: (\".result-name span.keyword > i\", \"(keyword)\")\n-assert-text: (\".result-name span.keyword\", \"CookieMonster (keyword)\")\n+assert-text: (\".result-keyword .result-name\", \"keyword CookieMonster\")"}]}