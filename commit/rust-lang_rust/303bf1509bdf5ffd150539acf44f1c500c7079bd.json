{"sha": "303bf1509bdf5ffd150539acf44f1c500c7079bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwM2JmMTUwOWJkZjVmZmQxNTA1MzlhY2Y0NGYxYzUwMGM3MDc5YmQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-23T02:34:38Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-27T04:05:05Z"}, "message": "Avoid some re-interning in `to_lit_token`.", "tree": {"sha": "3d9b1fe8056e3a5ec944ff786c11ed34d29ba1d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d9b1fe8056e3a5ec944ff786c11ed34d29ba1d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/303bf1509bdf5ffd150539acf44f1c500c7079bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/303bf1509bdf5ffd150539acf44f1c500c7079bd", "html_url": "https://github.com/rust-lang/rust/commit/303bf1509bdf5ffd150539acf44f1c500c7079bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/303bf1509bdf5ffd150539acf44f1c500c7079bd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f28448e0cab81ad5697a9c01ef8dda9f730c27", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f28448e0cab81ad5697a9c01ef8dda9f730c27", "html_url": "https://github.com/rust-lang/rust/commit/21f28448e0cab81ad5697a9c01ef8dda9f730c27"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "18019a89130e7f49219f62bb86a2139c7f574dda", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/303bf1509bdf5ffd150539acf44f1c500c7079bd/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303bf1509bdf5ffd150539acf44f1c500c7079bd/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=303bf1509bdf5ffd150539acf44f1c500c7079bd", "patch": "@@ -171,12 +171,15 @@ impl LitKind {\n     /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).\n     pub fn to_lit_token(&self) -> token::Lit {\n         let (kind, symbol, suffix) = match *self {\n-            LitKind::Str(string, ast::StrStyle::Cooked) => {\n-                let escaped = string.as_str().escape_default().to_string();\n-                (token::Str, Symbol::intern(&escaped), None)\n+            LitKind::Str(symbol, ast::StrStyle::Cooked) => {\n+                // Don't re-intern unless the escaped string is different.\n+                let s = &symbol.as_str();\n+                let escaped = s.escape_default().to_string();\n+                let symbol = if escaped == *s { symbol } else { Symbol::intern(&escaped) };\n+                (token::Str, symbol, None)\n             }\n-            LitKind::Str(string, ast::StrStyle::Raw(n)) => {\n-                (token::StrRaw(n), string, None)\n+            LitKind::Str(symbol, ast::StrStyle::Raw(n)) => {\n+                (token::StrRaw(n), symbol, None)\n             }\n             LitKind::ByteStr(ref bytes) => {\n                 let string = bytes.iter().cloned().flat_map(ascii::escape_default)"}]}