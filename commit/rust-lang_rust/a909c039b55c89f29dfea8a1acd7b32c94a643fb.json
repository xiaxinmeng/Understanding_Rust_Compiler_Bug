{"sha": "a909c039b55c89f29dfea8a1acd7b32c94a643fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MDljMDM5YjU1Yzg5ZjI5ZGZlYThhMWFjZDdiMzJjOTRhNjQzZmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-03T15:14:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-03T15:18:46Z"}, "message": "remove unneeded flags; exlain why we still have const_if_match", "tree": {"sha": "7518a8e91706057c4f2af580c4c354e59cde9ad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7518a8e91706057c4f2af580c4c354e59cde9ad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a909c039b55c89f29dfea8a1acd7b32c94a643fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a909c039b55c89f29dfea8a1acd7b32c94a643fb", "html_url": "https://github.com/rust-lang/rust/commit/a909c039b55c89f29dfea8a1acd7b32c94a643fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a909c039b55c89f29dfea8a1acd7b32c94a643fb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f606d9af12664f3c959c65512d45c57daaaeb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f606d9af12664f3c959c65512d45c57daaaeb2", "html_url": "https://github.com/rust-lang/rust/commit/f7f606d9af12664f3c959c65512d45c57daaaeb2"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "1f0b7f7e78a69dc17766139d0b3dee7df4ccc99d", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=a909c039b55c89f29dfea8a1acd7b32c94a643fb", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n #![feature(box_syntax)]\n #![allow(const_err)]\n "}, {"sha": "c9dc1de515b90d74298821198f356735aadb586c", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=a909c039b55c89f29dfea8a1acd7b32c94a643fb", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n #![allow(const_err)]\n \n use std::sync::atomic::AtomicUsize;"}, {"sha": "b5db685ef2c060d4c903b4ee034cffed0b699d68", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=a909c039b55c89f29dfea8a1acd7b32c94a643fb", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n #![allow(const_err)]\n \n use std::sync::atomic::AtomicUsize;"}, {"sha": "52f6536b5ea67c545be92817aafe36e75fcfbce8", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=a909c039b55c89f29dfea8a1acd7b32c94a643fb", "patch": "@@ -1,7 +1,8 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n // aux-build:static_cross_crate.rs\n #![allow(const_err)]\n \n+// `const_if_match` is a HIR check and thus needed even when unleashed.\n #![feature(exclusive_range_pattern, half_open_range_patterns, const_if_match)]\n \n extern crate static_cross_crate;\n@@ -38,6 +39,7 @@ pub fn test(x: &[u8; 1]) -> bool {\n     match x {\n         SLICE_MUT => true,\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         &[1..] => false,\n     }\n }\n@@ -46,6 +48,7 @@ pub fn test2(x: &u8) -> bool {\n     match x {\n         U8_MUT => true,\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         &(1..) => false,\n     }\n }\n@@ -56,13 +59,15 @@ pub fn test3(x: &u8) -> bool {\n     match x {\n         U8_MUT2 => true,\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         &(1..) => false,\n     }\n }\n pub fn test4(x: &u8) -> bool {\n     match x {\n         U8_MUT3 => true,\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         &(1..) => false,\n     }\n }"}, {"sha": "9d1e88a811f2f4267e0ca9b98ec06406bfe1d740", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 46, "deletions": 22, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=a909c039b55c89f29dfea8a1acd7b32c94a643fb", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:11:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n@@ -11,13 +11,13 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:39:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:18:1\n    |\n LL | / const U8_MUT: &u8 = {\n LL | |\n@@ -29,13 +29,13 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:26:14\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:14\n    |\n LL | / const U8_MUT2: &u8 = {\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n@@ -46,19 +46,19 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:24:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:57:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:51\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n@@ -69,76 +69,100 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:31:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:64:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+   |\n+LL |         U8_MUT3 => true,\n+   |         ^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+   |\n+LL |         SLICE_MUT => true,\n+   |         ^^^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+   |\n+LL |         U8_MUT => true,\n+   |         ^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+   |\n+LL |         U8_MUT2 => true,\n+   |         ^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:15:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:15:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:20:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:20:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:20:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:26:17\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:17\n    |\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:77\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors; 3 warnings emitted\n+error: aborting due to 10 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "f8aa652827381c32d29b9394c1443394c641972b", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909c039b55c89f29dfea8a1acd7b32c94a643fb/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs?ref=a909c039b55c89f29dfea8a1acd7b32c94a643fb", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n // normalize-stderr-test \"alloc[0-9]+\" -> \"allocN\"\n \n #![deny(const_err)] // The `allow` variant is tested by `mutable_const2`."}]}