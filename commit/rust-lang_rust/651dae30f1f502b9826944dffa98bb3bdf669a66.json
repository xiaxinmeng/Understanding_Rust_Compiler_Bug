{"sha": "651dae30f1f502b9826944dffa98bb3bdf669a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MWRhZTMwZjFmNTAyYjk4MjY5NDRkZmZhOThiYjNiZGY2NjlhNjY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-02-16T00:51:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-16T00:51:37Z"}, "message": "Merge pull request #2436 from topecongiro/markdown-spaces\n\nPreserve trailing two whitespace in comments", "tree": {"sha": "e5e9b08a512b278fce28ffaaf225c68df2f841d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e9b08a512b278fce28ffaaf225c68df2f841d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/651dae30f1f502b9826944dffa98bb3bdf669a66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJahisZCRBK7hj4Ov3rIwAAdHIIAKkfjy+Dx8y70r26J4pGnlkh\n+sVqz2O/y95DP4wsdtyZGZbv+QuLXwTWgZKgNbQ7S/N0bBo2WXlx7Xhzpp2RpALV\nBb4uiyyYor5hkRaTGE9oRSa7IdGKVOmzr9HmGKHB4Ow15o9SzxTs0fiCSFxkgqKH\nPrcAi10cOwR8XtzJsD0xdP6bS1zFU7m0gaGDnZrFkNoxGFnvpTp25L4bw3mcE7jp\nOOOVXMzTT3ln5AEXpWPOlTtbYY5WRw2EKOclHOapFe4w7dGLWV3cirzj6PmorUpv\nb3lgnLzVDRHlEbDRbqe0sANb6tLnnKuP2Pb5vS8vOYtBmcceeq5eUHJKMsYKjw4=\n=ipmM\n-----END PGP SIGNATURE-----\n", "payload": "tree e5e9b08a512b278fce28ffaaf225c68df2f841d0\nparent 16e71c42d84b6461fc4963d852d1e8fa643648f1\nparent 6f38a4aeab697dd6d52ca4cdcdec6d7d03c960f2\nauthor Nick Cameron <nrc@ncameron.org> 1518742297 +1300\ncommitter GitHub <noreply@github.com> 1518742297 +1300\n\nMerge pull request #2436 from topecongiro/markdown-spaces\n\nPreserve trailing two whitespace in comments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/651dae30f1f502b9826944dffa98bb3bdf669a66", "html_url": "https://github.com/rust-lang/rust/commit/651dae30f1f502b9826944dffa98bb3bdf669a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/651dae30f1f502b9826944dffa98bb3bdf669a66/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e71c42d84b6461fc4963d852d1e8fa643648f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e71c42d84b6461fc4963d852d1e8fa643648f1", "html_url": "https://github.com/rust-lang/rust/commit/16e71c42d84b6461fc4963d852d1e8fa643648f1"}, {"sha": "6f38a4aeab697dd6d52ca4cdcdec6d7d03c960f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f38a4aeab697dd6d52ca4cdcdec6d7d03c960f2", "html_url": "https://github.com/rust-lang/rust/commit/6f38a4aeab697dd6d52ca4cdcdec6d7d03c960f2"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "dc0c59a617e9dd8be0792b173c9720f9655370ca", "filename": "rustfmt-core/src/comment.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/651dae30f1f502b9826944dffa98bb3bdf669a66/rustfmt-core%2Fsrc%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/651dae30f1f502b9826944dffa98bb3bdf669a66/rustfmt-core%2Fsrc%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fcomment.rs?ref=651dae30f1f502b9826944dffa98bb3bdf669a66", "patch": "@@ -214,11 +214,25 @@ pub fn combine_strs_with_missing_comments(\n     ))\n }\n \n+pub fn rewrite_doc_comment(orig: &str, shape: Shape, config: &Config) -> Option<String> {\n+    _rewrite_comment(orig, false, shape, config, true)\n+}\n+\n pub fn rewrite_comment(\n     orig: &str,\n     block_style: bool,\n     shape: Shape,\n     config: &Config,\n+) -> Option<String> {\n+    _rewrite_comment(orig, block_style, shape, config, false)\n+}\n+\n+fn _rewrite_comment(\n+    orig: &str,\n+    block_style: bool,\n+    shape: Shape,\n+    config: &Config,\n+    is_doc_comment: bool,\n ) -> Option<String> {\n     // If there are lines without a starting sigil, we won't format them correctly\n     // so in that case we won't even re-align (if !config.normalize_comments()) and\n@@ -231,7 +245,7 @@ pub fn rewrite_comment(\n         return Some(orig.to_owned());\n     }\n     if !config.normalize_comments() && !config.wrap_comments() {\n-        return light_rewrite_comment(orig, shape.indent, config);\n+        return light_rewrite_comment(orig, shape.indent, config, is_doc_comment);\n     }\n \n     identify_comment(orig, block_style, shape, config)\n@@ -494,23 +508,39 @@ pub fn recover_missing_comment_in_span(\n     }\n }\n \n+/// Trim trailing whitespaces unless they consist of two or more whitespaces.\n+fn trim_right_unless_two_whitespaces(s: &str, is_doc_comment: bool) -> &str {\n+    if is_doc_comment && s.ends_with(\"  \") {\n+        s\n+    } else {\n+        s.trim_right()\n+    }\n+}\n+\n /// Trims whitespace and aligns to indent, but otherwise does not change comments.\n-fn light_rewrite_comment(orig: &str, offset: Indent, config: &Config) -> Option<String> {\n+fn light_rewrite_comment(\n+    orig: &str,\n+    offset: Indent,\n+    config: &Config,\n+    is_doc_comment: bool,\n+) -> Option<String> {\n     let lines: Vec<&str> = orig.lines()\n         .map(|l| {\n             // This is basically just l.trim(), but in the case that a line starts\n             // with `*` we want to leave one space before it, so it aligns with the\n             // `*` in `/*`.\n             let first_non_whitespace = l.find(|c| !char::is_whitespace(c));\n-            if let Some(fnw) = first_non_whitespace {\n+            let left_trimmed = if let Some(fnw) = first_non_whitespace {\n                 if l.as_bytes()[fnw] == b'*' && fnw > 0 {\n                     &l[fnw - 1..]\n                 } else {\n                     &l[fnw..]\n                 }\n             } else {\n                 \"\"\n-            }.trim_right()\n+            };\n+            // Preserve markdown's double-space line break syntax in doc comment.\n+            trim_right_unless_two_whitespaces(left_trimmed, is_doc_comment)\n         })\n         .collect();\n     Some(lines.join(&format!(\"\\n{}\", offset.to_string(config))))"}, {"sha": "2d10be39d092b21dca45c8a7921ba47099691b88", "filename": "rustfmt-core/src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/651dae30f1f502b9826944dffa98bb3bdf669a66/rustfmt-core%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/651dae30f1f502b9826944dffa98bb3bdf669a66/rustfmt-core%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fvisitor.rs?ref=651dae30f1f502b9826944dffa98bb3bdf669a66", "patch": "@@ -19,7 +19,7 @@ use syntax::parse::ParseSess;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, CodeCharKind,\n               CommentCodeSlices, FindUncommented};\n-use comment::rewrite_comment;\n+use comment::rewrite_doc_comment;\n use config::{BraceStyle, Config};\n use expr::rewrite_literal;\n use items::{format_impl, format_trait, format_trait_alias, rewrite_associated_impl_type,\n@@ -892,7 +892,7 @@ impl Rewrite for ast::Attribute {\n                     .unwrap_or(0),\n                 ..shape\n             };\n-            rewrite_comment(snippet, false, doc_shape, context.config)\n+            rewrite_doc_comment(snippet, doc_shape, context.config)\n         } else {\n             if contains_comment(snippet) {\n                 return Some(snippet.to_owned());\n@@ -957,7 +957,7 @@ fn rewrite_first_group_attrs(\n             .join(\"\\n\");\n         return Some((\n             sugared_docs.len(),\n-            rewrite_comment(&snippet, false, shape, context.config)?,\n+            rewrite_doc_comment(&snippet, shape, context.config)?,\n         ));\n     }\n     // Rewrite `#[derive(..)]`s."}, {"sha": "1ec26562fe2824af64c7c6e24c2c191220ffcf5a", "filename": "rustfmt-core/tests/source/markdown-comment.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/651dae30f1f502b9826944dffa98bb3bdf669a66/rustfmt-core%2Ftests%2Fsource%2Fmarkdown-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/651dae30f1f502b9826944dffa98bb3bdf669a66/rustfmt-core%2Ftests%2Fsource%2Fmarkdown-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmarkdown-comment.rs?ref=651dae30f1f502b9826944dffa98bb3bdf669a66", "patch": "@@ -0,0 +1,15 @@\n+// Preserve two trailing whitespaces in doc comment,\n+// but trim any whitespaces in normal comment.\n+\n+//! hello world  \n+//! hello world \n+\n+/// hello world    \n+/// hello world \n+/// hello world  \n+fn foo() {\n+    // hello world  \n+    // hello world \n+    let x = 3;\n+    println!(\"x = {}\", x);\n+}"}, {"sha": "71a9921d2862897ac2180eadad27706e141ec706", "filename": "rustfmt-core/tests/target/markdown-comment.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/651dae30f1f502b9826944dffa98bb3bdf669a66/rustfmt-core%2Ftests%2Ftarget%2Fmarkdown-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/651dae30f1f502b9826944dffa98bb3bdf669a66/rustfmt-core%2Ftests%2Ftarget%2Fmarkdown-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Ftarget%2Fmarkdown-comment.rs?ref=651dae30f1f502b9826944dffa98bb3bdf669a66", "patch": "@@ -0,0 +1,15 @@\n+// Preserve two trailing whitespaces in doc comment,\n+// but trim any whitespaces in normal comment.\n+\n+//! hello world  \n+//! hello world\n+\n+/// hello world    \n+/// hello world\n+/// hello world  \n+fn foo() {\n+    // hello world\n+    // hello world\n+    let x = 3;\n+    println!(\"x = {}\", x);\n+}"}]}