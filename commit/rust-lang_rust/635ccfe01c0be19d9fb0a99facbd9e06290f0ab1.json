{"sha": "635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNWNjZmUwMWMwYmUxOWQ5ZmIwYTk5ZmFjYmQ5ZTA2MjkwZjBhYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-16T03:10:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-16T03:10:52Z"}, "message": "Auto merge of #77885 - erikdesjardins:probeasm, r=cuviper\n\nUse probe-stack=inline-asm in LLVM 11+\n\nFixes (?) #74405, related to #43241\n\nr? `@cuviper`", "tree": {"sha": "278f5200156f523b626bea00183518235a0b9074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/278f5200156f523b626bea00183518235a0b9074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "html_url": "https://github.com/rust-lang/rust/commit/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c869d34ae2d87d21db9892d4dc088639bcbe041", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c869d34ae2d87d21db9892d4dc088639bcbe041", "html_url": "https://github.com/rust-lang/rust/commit/6c869d34ae2d87d21db9892d4dc088639bcbe041"}, {"sha": "cd2580722375671fa2967661f65b7b33570547ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2580722375671fa2967661f65b7b33570547ec", "html_url": "https://github.com/rust-lang/rust/commit/cd2580722375671fa2967661f65b7b33570547ec"}], "stats": {"total": 72, "additions": 62, "deletions": 10}, "files": [{"sha": "700f32e15b9527edf860c772cbfe2ca1f9769b39", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "patch": "@@ -127,13 +127,18 @@ fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         return;\n     }\n \n-    // Flag our internal `__rust_probestack` function as the stack probe symbol.\n-    // This is defined in the `compiler-builtins` crate for each architecture.\n     llvm::AddFunctionAttrStringValue(\n         llfn,\n         llvm::AttributePlace::Function,\n         const_cstr!(\"probe-stack\"),\n-        const_cstr!(\"__rust_probestack\"),\n+        if llvm_util::get_version() < (11, 0, 1) {\n+            // Flag our internal `__rust_probestack` function as the stack probe symbol.\n+            // This is defined in the `compiler-builtins` crate for each architecture.\n+            const_cstr!(\"__rust_probestack\")\n+        } else {\n+            // On LLVM 11+, emit inline asm for stack probes instead of a function call.\n+            const_cstr!(\"inline-asm\")\n+        },\n     );\n }\n "}, {"sha": "6acd26bd415dcd333cece1525d4dde4744e2cbc2", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "patch": "@@ -114,7 +114,7 @@ pub unsafe fn create_module(\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n     let mut target_data_layout = sess.target.data_layout.clone();\n-    if llvm_util::get_major_version() < 10\n+    if llvm_util::get_version() < (10, 0, 0)\n         && (sess.target.arch == \"x86\" || sess.target.arch == \"x86_64\")\n     {\n         target_data_layout = strip_x86_address_spaces(target_data_layout);"}, {"sha": "d9f42efebab474e9a13d78cda974218e13852ef8", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "patch": "@@ -1811,6 +1811,7 @@ extern \"C\" {\n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n     pub fn LLVMRustVersionMajor() -> u32;\n     pub fn LLVMRustVersionMinor() -> u32;\n+    pub fn LLVMRustVersionPatch() -> u32;\n \n     pub fn LLVMRustAddModuleFlag(M: &Module, name: *const c_char, value: u32);\n "}, {"sha": "6c2a871e520f93e1eee7f0ac14bffa1bb5098c91", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "patch": "@@ -171,16 +171,17 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n }\n \n pub fn print_version() {\n+    let (major, minor, patch) = get_version();\n+    println!(\"LLVM version: {}.{}.{}\", major, minor, patch);\n+}\n+\n+pub fn get_version() -> (u32, u32, u32) {\n     // Can be called without initializing LLVM\n     unsafe {\n-        println!(\"LLVM version: {}.{}\", llvm::LLVMRustVersionMajor(), llvm::LLVMRustVersionMinor());\n+        (llvm::LLVMRustVersionMajor(), llvm::LLVMRustVersionMinor(), llvm::LLVMRustVersionPatch())\n     }\n }\n \n-pub fn get_major_version() -> u32 {\n-    unsafe { llvm::LLVMRustVersionMajor() }\n-}\n-\n pub fn print_passes() {\n     // Can be called without initializing LLVM\n     unsafe {"}, {"sha": "1d89fc80496602c3a11d6eba3433ae5d7a5ac862", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "patch": "@@ -660,6 +660,8 @@ extern \"C\" uint32_t LLVMRustDebugMetadataVersion() {\n   return DEBUG_METADATA_VERSION;\n }\n \n+extern \"C\" uint32_t LLVMRustVersionPatch() { return LLVM_VERSION_PATCH; }\n+\n extern \"C\" uint32_t LLVMRustVersionMinor() { return LLVM_VERSION_MINOR; }\n \n extern \"C\" uint32_t LLVMRustVersionMajor() { return LLVM_VERSION_MAJOR; }"}, {"sha": "9597e242f1b0f6b743a800e932f3975b7c000c18", "filename": "src/test/assembly/stack-probes.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/src%2Ftest%2Fassembly%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/src%2Ftest%2Fassembly%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fstack-probes.rs?ref=635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "patch": "@@ -0,0 +1,42 @@\n+// min-llvm-version: 11.0.1\n+// revisions: x86_64 i686\n+// assembly-output: emit-asm\n+//[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[i686] compile-flags: --target i686-unknown-linux-gnu\n+// compile-flags: -C llvm-args=--x86-asm-syntax=intel\n+\n+#![feature(no_core, lang_items)]\n+#![crate_type = \"lib\"]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+impl Copy for u8 {}\n+\n+// Check that inline-asm stack probes are generated correctly.\n+// To avoid making this test fragile to slight asm changes,\n+// we only check that the stack pointer is decremented by a page at a time,\n+// instead of matching the whole probe sequence.\n+\n+// CHECK-LABEL: small_stack_probe:\n+#[no_mangle]\n+pub fn small_stack_probe(x: u8, f: fn([u8; 8192])) {\n+    // CHECK-NOT: __rust_probestack\n+    // x86_64: sub rsp, 4096\n+    // i686: sub esp, 4096\n+    let a = [x; 8192];\n+    f(a);\n+}\n+\n+// CHECK-LABEL: big_stack_probe:\n+#[no_mangle]\n+pub fn big_stack_probe(x: u8, f: fn([u8; 65536])) {\n+    // CHECK-NOT: __rust_probestack\n+    // x86_64: sub rsp, 4096\n+    // i686: sub esp, 4096\n+    let a = [x; 65536];\n+    f(a);\n+}"}, {"sha": "b05787df8e30be23df28956a628329a2526695f4", "filename": "src/test/codegen/stack-probes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "patch": "@@ -13,11 +13,12 @@\n // ignore-emscripten\n // ignore-windows\n // compile-flags: -C no-prepopulate-passes\n+// min-llvm-version: 11.0.1\n \n #![crate_type = \"lib\"]\n \n #[no_mangle]\n pub fn foo() {\n // CHECK: @foo() unnamed_addr #0\n-// CHECK: attributes #0 = { {{.*}}\"probe-stack\"=\"__rust_probestack\"{{.*}} }\n+// CHECK: attributes #0 = { {{.*}}\"probe-stack\"=\"inline-asm\"{{.*}} }\n }"}]}