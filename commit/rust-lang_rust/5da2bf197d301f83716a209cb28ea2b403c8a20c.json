{"sha": "5da2bf197d301f83716a209cb28ea2b403c8a20c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTJiZjE5N2QzMDFmODM3MTZhMjA5Y2IyOGVhMmI0MDNjOGEyMGM=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-04T08:07:40Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2020-11-30T00:11:20Z"}, "message": "Remove extra call to upvar_tys\n\nFixes #78720", "tree": {"sha": "161dc4649cbc2bf30349f8160ada1222fe7ccc20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/161dc4649cbc2bf30349f8160ada1222fe7ccc20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da2bf197d301f83716a209cb28ea2b403c8a20c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da2bf197d301f83716a209cb28ea2b403c8a20c", "html_url": "https://github.com/rust-lang/rust/commit/5da2bf197d301f83716a209cb28ea2b403c8a20c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da2bf197d301f83716a209cb28ea2b403c8a20c/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "349b3b324dade7ca638091db93ba08bbc443c63d", "url": "https://api.github.com/repos/rust-lang/rust/commits/349b3b324dade7ca638091db93ba08bbc443c63d", "html_url": "https://github.com/rust-lang/rust/commit/349b3b324dade7ca638091db93ba08bbc443c63d"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "f5bc90e6f962102e5b790c8394cdcfc691574793", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5da2bf197d301f83716a209cb28ea2b403c8a20c/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da2bf197d301f83716a209cb28ea2b403c8a20c/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=5da2bf197d301f83716a209cb28ea2b403c8a20c", "patch": "@@ -722,11 +722,6 @@ where\n                 // Skip lifetime parameters of the enclosing item(s)\n \n                 substs.as_closure().tupled_upvars_ty().visit_with(self);\n-\n-                for upvar_ty in substs.as_closure().upvar_tys() {\n-                    upvar_ty.visit_with(self);\n-                }\n-\n                 substs.as_closure().sig_as_fn_ptr_ty().visit_with(self);\n             }\n \n@@ -735,11 +730,6 @@ where\n                 // Also skip the witness type, because that has no free regions.\n \n                 substs.as_generator().tupled_upvars_ty().visit_with(self);\n-\n-                for upvar_ty in substs.as_generator().upvar_tys() {\n-                    upvar_ty.visit_with(self);\n-                }\n-\n                 substs.as_generator().return_ty().visit_with(self);\n                 substs.as_generator().yield_ty().visit_with(self);\n                 substs.as_generator().resume_ty().visit_with(self);"}, {"sha": "57615d1a207fdc516e76d9a498053be0a49b42e3", "filename": "src/test/ui/issues/issue-78720.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5da2bf197d301f83716a209cb28ea2b403c8a20c/src%2Ftest%2Fui%2Fissues%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da2bf197d301f83716a209cb28ea2b403c8a20c/src%2Ftest%2Fui%2Fissues%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78720.rs?ref=5da2bf197d301f83716a209cb28ea2b403c8a20c", "patch": "@@ -0,0 +1,19 @@\n+fn server() -> impl {\n+//~^ ERROR at least one trait must be specified\n+    ().map2(|| \"\")\n+}\n+\n+trait FilterBase2 {\n+    fn map2<F>(self, F) -> Map2<F> {}\n+    //~^ ERROR mismatched types\n+    //~^^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+struct Map2<Segment2> {\n+    _func: F,\n+    //~^ ERROR cannot find type `F` in this scope\n+}\n+\n+impl<F> FilterBase2 for F {}\n+\n+fn main() {}"}, {"sha": "a3a14e34acbc146e220a1cbeac0052ee9bc50613", "filename": "src/test/ui/issues/issue-78720.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5da2bf197d301f83716a209cb28ea2b403c8a20c/src%2Ftest%2Fui%2Fissues%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da2bf197d301f83716a209cb28ea2b403c8a20c/src%2Ftest%2Fui%2Fissues%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78720.stderr?ref=5da2bf197d301f83716a209cb28ea2b403c8a20c", "patch": "@@ -0,0 +1,55 @@\n+error: at least one trait must be specified\n+  --> $DIR/issue-78720.rs:1:16\n+   |\n+LL | fn server() -> impl {\n+   |                ^^^^\n+\n+error[E0412]: cannot find type `F` in this scope\n+  --> $DIR/issue-78720.rs:13:12\n+   |\n+LL |     _func: F,\n+   |            ^\n+   | \n+  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args>: FnMut<Args> {\n+   | ------------------------------- similarly named trait `Fn` defined here\n+   |\n+help: a trait with a similar name exists\n+   |\n+LL |     _func: Fn,\n+   |            ^^\n+help: you might be missing a type parameter\n+   |\n+LL | struct Map2<Segment2, F> {\n+   |                     ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-78720.rs:7:36\n+   |\n+LL |     fn map2<F>(self, F) -> Map2<F> {}\n+   |                                    ^^ expected struct `Map2`, found `()`\n+   |\n+   = note: expected struct `Map2<F>`\n+           found unit type `()`\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/issue-78720.rs:7:16\n+   |\n+LL |     fn map2<F>(self, F) -> Map2<F> {}\n+   |                ^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: unsized fn params are gated as an unstable feature\n+help: consider further restricting `Self`\n+   |\n+LL |     fn map2<F>(self, F) -> Map2<F> where Self: Sized {}\n+   |                                    ^^^^^^^^^^^^^^^^^\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     fn map2<F>(&self, F) -> Map2<F> {}\n+   |                ^\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308, E0412.\n+For more information about an error, try `rustc --explain E0277`."}]}