{"sha": "12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzdiNjZhN2M2OTYzZDQyYWI1ZjMzYTlhYzNmMGIzMGUzNTFiNjk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-09T15:30:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-09T15:30:09Z"}, "message": "Merge #7611\n\n7611: Cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "952bfc7c6274568d90192c847485a22e8c16fb37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/952bfc7c6274568d90192c847485a22e8c16fb37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIqqBCRBK7hj4Ov3rIwAAdHIIABK1s7wyE3w7dCyxq3XcznIi\nZIeDQskCPD0U2lUgKz6PeH7XYLhwE9rTKDZxvDnD5KjTBkAjnUcUhMFkmGTZz9ru\nNTMuiykbLN/blJ53wk4JGqXk1nYRqMzPpWNhvc3wRU3P5IFu+tDp7bp2B7CGg1rj\ndkOOrGKvOYM3UmjYa5xDKFYEi84Iz3Nh4aYmCZ+9kuBfKfK/KfxNyt1L/BSThVdt\n2eaycJEkhuq6z3/jU/waAfOMQFGvA1KOlZmP+CExLjA+jShU8EiD0NAxorbQS6Sm\nzUa7w4F6rBduUSsJvzt4qxhLVIyS/s1HS5CDJp4/dqtWIF32ZMDAZeFKZkYmU9w=\n=hLbp\n-----END PGP SIGNATURE-----\n", "payload": "tree 952bfc7c6274568d90192c847485a22e8c16fb37\nparent 4ae7d39f77995ad455c7a21c7fdfc1deb588e782\nparent 9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612884609 +0000\ncommitter GitHub <noreply@github.com> 1612884609 +0000\n\nMerge #7611\n\n7611: Cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "html_url": "https://github.com/rust-lang/rust/commit/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae7d39f77995ad455c7a21c7fdfc1deb588e782", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae7d39f77995ad455c7a21c7fdfc1deb588e782", "html_url": "https://github.com/rust-lang/rust/commit/4ae7d39f77995ad455c7a21c7fdfc1deb588e782"}, {"sha": "9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c", "html_url": "https://github.com/rust-lang/rust/commit/9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c"}], "stats": {"total": 112, "additions": 63, "deletions": 49}, "files": [{"sha": "1982434663ed84975e79a2591da0d2e6c1099d87", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "patch": "@@ -85,12 +85,16 @@ impl NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {\n             let node = src.as_ref().map(|it| it.syntax());\n-            let frange = node.original_file_range(db);\n+            let full_range = node.original_file_range(db);\n+            let focus_range = src\n+                .value\n+                .name()\n+                .map(|name| src.with_value(name.syntax()).original_file_range(db).range);\n             let mut res = NavigationTarget::from_syntax(\n-                frange.file_id,\n+                full_range.file_id,\n                 name,\n-                None,\n-                frange.range,\n+                focus_range,\n+                full_range.range,\n                 SymbolKind::Module,\n             );\n             res.docs = module.attrs(db).docs();"}, {"sha": "cc6641ba13558a9185497ff26862879e804af4ed", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "patch": "@@ -1,5 +1,6 @@\n //! Utilities for creating `Analysis` instances for tests.\n use ide_db::base_db::fixture::ChangeFixture;\n+use syntax::{TextRange, TextSize};\n use test_utils::{extract_annotations, RangeOrOffset};\n \n use crate::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};\n@@ -68,3 +69,18 @@ pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(Fil\n         .collect();\n     (host.analysis(), FilePosition { file_id, offset }, annotations)\n }\n+\n+pub(crate) fn nav_target_annotation(ra_fixture: &str) -> (Analysis, FilePosition, FileRange) {\n+    let (analysis, position, mut annotations) = annotations(ra_fixture);\n+    let (mut expected, data) = annotations.pop().unwrap();\n+    assert!(annotations.is_empty());\n+    match data.as_str() {\n+        \"\" => (),\n+        \"file\" => {\n+            expected.range =\n+                TextRange::up_to(TextSize::of(&*analysis.file_text(expected.file_id).unwrap()))\n+        }\n+        data => panic!(\"bad data: {}\", data),\n+    }\n+    (analysis, position, expected)\n+}"}, {"sha": "e86ae2a18856e2624acd98901d2f715e0683a7ae", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "patch": "@@ -131,22 +131,11 @@ pub(crate) fn reference_definition(\n #[cfg(test)]\n mod tests {\n     use ide_db::base_db::FileRange;\n-    use syntax::{TextRange, TextSize};\n \n     use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (analysis, position, mut annotations) = fixture::annotations(ra_fixture);\n-        let (mut expected, data) = annotations.pop().unwrap();\n-        match data.as_str() {\n-            \"\" => (),\n-            \"file\" => {\n-                expected.range =\n-                    TextRange::up_to(TextSize::of(&*analysis.file_text(expected.file_id).unwrap()))\n-            }\n-            data => panic!(\"bad data: {}\", data),\n-        }\n-\n+        let (analysis, position, expected) = fixture::nav_target_annotation(ra_fixture);\n         let mut navs =\n             analysis.goto_definition(position).unwrap().expect(\"no definition found\").info;\n         if navs.len() == 0 {"}, {"sha": "ddbaf22b7fc906abc522723955df933324369302", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "patch": "@@ -63,57 +63,62 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n \n #[cfg(test)]\n mod tests {\n+    use ide_db::base_db::FileRange;\n     use test_utils::mark;\n \n-    use crate::fixture::{self};\n+    use crate::fixture;\n+\n+    fn check(ra_fixture: &str) {\n+        let (analysis, position, expected) = fixture::nav_target_annotation(ra_fixture);\n+        let mut navs = analysis.parent_module(position).unwrap();\n+        assert_eq!(navs.len(), 1);\n+        let nav = navs.pop().unwrap();\n+        assert_eq!(expected, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() });\n+    }\n \n     #[test]\n     fn test_resolve_parent_module() {\n-        let (analysis, pos) = fixture::position(\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-            //- /foo.rs\n-            $0// empty\n-            \",\n+        check(\n+            r#\"\n+//- /lib.rs\n+mod foo;\n+  //^^^\n+\n+//- /foo.rs\n+$0// empty\n+\"#,\n         );\n-        let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo Module FileId(0) 0..8\");\n     }\n \n     #[test]\n     fn test_resolve_parent_module_on_module_decl() {\n         mark::check!(test_resolve_parent_module_on_module_decl);\n-        let (analysis, pos) = fixture::position(\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-\n-            //- /foo.rs\n-            mod $0bar;\n+        check(\n+            r#\"\n+//- /lib.rs\n+mod foo;\n+  //^^^\n+//- /foo.rs\n+mod $0bar;\n \n-            //- /foo/bar.rs\n-            // empty\n-            \",\n+//- /foo/bar.rs\n+// empty\n+\"#,\n         );\n-        let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo Module FileId(0) 0..8\");\n     }\n \n     #[test]\n     fn test_resolve_parent_module_for_inline() {\n-        let (analysis, pos) = fixture::position(\n-            \"\n-            //- /lib.rs\n-            mod foo {\n-                mod bar {\n-                    mod baz { $0 }\n-                }\n-            }\n-            \",\n+        check(\n+            r#\"\n+//- /lib.rs\n+mod foo {\n+    mod bar {\n+        mod baz { $0 }\n+    }     //^^^\n+}\n+\"#,\n         );\n-        let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"baz Module FileId(0) 32..44\");\n     }\n \n     #[test]"}]}