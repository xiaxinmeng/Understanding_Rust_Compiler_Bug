{"sha": "75e6c03883c4533b1134c806d166b72200b4837d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZTZjMDM4ODNjNDUzM2IxMTM0YzgwNmQxNjZiNzIyMDBiNDgzN2Q=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-10T20:08:46Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-10T20:08:46Z"}, "message": "Merge #1389\n\n1389: Refactor hover to not depend on nav target r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "331fe1559a1c6fb293f9d68a4d5d5b08565c7afb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/331fe1559a1c6fb293f9d68a4d5d5b08565c7afb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75e6c03883c4533b1134c806d166b72200b4837d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75e6c03883c4533b1134c806d166b72200b4837d", "html_url": "https://github.com/rust-lang/rust/commit/75e6c03883c4533b1134c806d166b72200b4837d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75e6c03883c4533b1134c806d166b72200b4837d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "cbafae6fa8e1292302d1ea0c04871fe24d174954", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbafae6fa8e1292302d1ea0c04871fe24d174954", "html_url": "https://github.com/rust-lang/rust/commit/cbafae6fa8e1292302d1ea0c04871fe24d174954"}, {"sha": "656a0fa9f99298123d7dcee8c65a8a5ed7043bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/656a0fa9f99298123d7dcee8c65a8a5ed7043bc4", "html_url": "https://github.com/rust-lang/rust/commit/656a0fa9f99298123d7dcee8c65a8a5ed7043bc4"}], "stats": {"total": 195, "additions": 165, "deletions": 30}, "files": [{"sha": "8825188382d63a6610190f87caa5f5a79369adcc", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75e6c03883c4533b1134c806d166b72200b4837d/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e6c03883c4533b1134c806d166b72200b4837d/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=75e6c03883c4533b1134c806d166b72200b4837d", "patch": "@@ -13,6 +13,7 @@ pub use structure::{StructureNode, file_structure};\n pub use function_signature::FunctionSignature;\n \n pub(crate) use short_label::ShortLabel;\n+pub(crate) use navigation_target::{docs_from_symbol, description_from_symbol};\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {\n     FunctionSignature::from(node).to_string()\n@@ -72,13 +73,3 @@ where\n         format!(\"```rust\\n{}\\n```\", val.as_ref())\n     }\n }\n-\n-// FIXME: this should not really use navigation target. Rather, approximately\n-// resolved symbol should return a `DefId`.\n-pub(crate) fn doc_text_for(nav: NavigationTarget) -> Option<String> {\n-    match (nav.description(), nav.docs()) {\n-        (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n-        (None, Some(docs)) => Some(docs.to_string()),\n-        _ => None,\n-    }\n-}"}, {"sha": "cfd3f5478707f3a6cc3015bc042bb04762f21768", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75e6c03883c4533b1134c806d166b72200b4837d/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e6c03883c4533b1134c806d166b72200b4837d/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=75e6c03883c4533b1134c806d166b72200b4837d", "patch": "@@ -413,7 +413,7 @@ impl NavigationTarget {\n     }\n }\n \n-fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n+pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let file = db.parse(symbol.file_id).tree;\n     let node = symbol.ptr.to_node(file.syntax()).to_owned();\n \n@@ -439,7 +439,7 @@ fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n /// Get a description of a symbol.\n ///\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n-fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n+pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let file = db.parse(symbol.file_id).tree;\n     let node = symbol.ptr.to_node(file.syntax()).to_owned();\n "}, {"sha": "fbabeb194e4a13d783f66e4f24bd6954f6a1242d", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 162, "deletions": 18, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/75e6c03883c4533b1134c806d166b72200b4837d/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e6c03883c4533b1134c806d166b72200b4837d/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=75e6c03883c4533b1134c806d166b72200b4837d", "patch": "@@ -1,14 +1,15 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, ast,\n-    algo::{find_covering_element, find_node_at_offset, ancestors_at_offset},\n+    AstNode, ast::{self, DocCommentsOwner},\n+    algo::{find_covering_element, find_node_at_offset, ancestors_at_offset, visit::{visitor, Visitor}},\n };\n use hir::HirDisplay;\n \n use crate::{\n     db::RootDatabase,\n     RangeInfo, FilePosition, FileRange,\n-    display::{rust_code_markup, doc_text_for},\n+    display::{rust_code_markup, rust_code_markup_with_doc, ShortLabel, docs_from_symbol, description_from_symbol},\n+    name_ref_kind::{NameRefKind::*, classify_name_ref},\n };\n \n /// Contains the results when hovering over an item\n@@ -77,34 +78,177 @@ impl HoverResult {\n     }\n }\n \n+fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n+    match (desc, docs) {\n+        (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n+        (None, Some(docs)) => Some(docs.to_string()),\n+        _ => None,\n+    }\n+}\n+\n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n     let file = db.parse(position.file_id).tree;\n     let mut res = HoverResult::new();\n \n     let mut range = None;\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n-        use crate::goto_definition::{ReferenceResult::*, reference_definition};\n-        let ref_result = reference_definition(db, position.file_id, name_ref);\n-        match ref_result {\n-            Exact(nav) => res.extend(doc_text_for(nav)),\n-            Approximate(navs) => {\n-                // We are no longer exact\n-                res.exact = false;\n-\n-                for nav in navs {\n-                    res.extend(doc_text_for(nav))\n+        let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n+\n+        match classify_name_ref(db, &analyzer, name_ref) {\n+            Some(Method(it)) => {\n+                let it = it.source(db).1;\n+                res.extend(hover_text(it.doc_comment_text(), it.short_label()));\n+            }\n+            Some(Macro(it)) => {\n+                let it = it.source(db).1;\n+                res.extend(hover_text(it.doc_comment_text(), None));\n+            }\n+            Some(FieldAccess(it)) => {\n+                let it = it.source(db).1;\n+                if let hir::FieldSource::Named(it) = it {\n+                    res.extend(hover_text(it.doc_comment_text(), it.short_label()));\n+                }\n+            }\n+            Some(AssocItem(it)) => match it {\n+                hir::ImplItem::Method(it) => {\n+                    let it = it.source(db).1;\n+                    res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                }\n+                hir::ImplItem::Const(it) => {\n+                    let it = it.source(db).1;\n+                    res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                }\n+                hir::ImplItem::TypeAlias(it) => {\n+                    let it = it.source(db).1;\n+                    res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                }\n+            },\n+            Some(Def(it)) => {\n+                match it {\n+                    hir::ModuleDef::Module(it) => {\n+                        let it = it.definition_source(db).1;\n+                        if let hir::ModuleSource::Module(it) = it {\n+                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        }\n+                    }\n+                    hir::ModuleDef::Function(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Struct(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Union(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Enum(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::EnumVariant(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Const(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Static(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Trait(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::TypeAlias(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::BuiltinType(_) => {\n+                        // FIXME: hover for builtin Type ?\n+                    }\n                 }\n             }\n+            Some(SelfType(ty)) => {\n+                if let Some((adt_def, _)) = ty.as_adt() {\n+                    match adt_def {\n+                        hir::AdtDef::Struct(it) => {\n+                            let it = it.source(db).1;\n+                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        }\n+                        hir::AdtDef::Union(it) => {\n+                            let it = it.source(db).1;\n+                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        }\n+                        hir::AdtDef::Enum(it) => {\n+                            let it = it.source(db).1;\n+                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        }\n+                    }\n+                }\n+            }\n+            Some(Pat(_)) => {\n+                res.extend(None);\n+            }\n+            Some(SelfParam(_)) => {\n+                res.extend(None);\n+            }\n+            Some(GenericParam(_)) => {\n+                // FIXME: Hover for generic param\n+            }\n+            None => {}\n         }\n+\n+        if res.is_empty() {\n+            // Fallback index based approach:\n+            let symbols = crate::symbol_index::index_resolve(db, name_ref);\n+            for sym in symbols {\n+                let docs = docs_from_symbol(db, &sym);\n+                let desc = description_from_symbol(db, &sym);\n+                res.extend(hover_text(docs, desc));\n+            }\n+        }\n+\n         if !res.is_empty() {\n             range = Some(name_ref.syntax().range())\n         }\n     } else if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n-        let navs = crate::goto_definition::name_definition(db, position.file_id, name);\n-\n-        if let Some(navs) = navs {\n-            for nav in navs {\n-                res.extend(doc_text_for(nav))\n+        if let Some(parent) = name.syntax().parent() {\n+            let text = visitor()\n+                .visit(|node: &ast::StructDef| {\n+                    hover_text(node.doc_comment_text(), node.short_label())\n+                })\n+                .visit(|node: &ast::EnumDef| {\n+                    hover_text(node.doc_comment_text(), node.short_label())\n+                })\n+                .visit(|node: &ast::EnumVariant| {\n+                    hover_text(node.doc_comment_text(), node.short_label())\n+                })\n+                .visit(|node: &ast::FnDef| hover_text(node.doc_comment_text(), node.short_label()))\n+                .visit(|node: &ast::TypeAliasDef| {\n+                    hover_text(node.doc_comment_text(), node.short_label())\n+                })\n+                .visit(|node: &ast::ConstDef| {\n+                    hover_text(node.doc_comment_text(), node.short_label())\n+                })\n+                .visit(|node: &ast::StaticDef| {\n+                    hover_text(node.doc_comment_text(), node.short_label())\n+                })\n+                .visit(|node: &ast::TraitDef| {\n+                    hover_text(node.doc_comment_text(), node.short_label())\n+                })\n+                .visit(|node: &ast::NamedFieldDef| {\n+                    hover_text(node.doc_comment_text(), node.short_label())\n+                })\n+                .visit(|node: &ast::Module| hover_text(node.doc_comment_text(), node.short_label()))\n+                .visit(|node: &ast::MacroCall| hover_text(node.doc_comment_text(), None))\n+                .accept(parent);\n+\n+            if let Some(text) = text {\n+                res.extend(text);\n             }\n         }\n "}]}