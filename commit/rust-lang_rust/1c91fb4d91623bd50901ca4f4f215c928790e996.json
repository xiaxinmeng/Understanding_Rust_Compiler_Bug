{"sha": "1c91fb4d91623bd50901ca4f4f215c928790e996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOTFmYjRkOTE2MjNiZDUwOTAxY2E0ZjRmMjE1YzkyODc5MGU5OTY=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-01T09:18:59Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:41:49Z"}, "message": "Don't rely on filename to get a file from the filemap\nas there may be more than one filemap with the same filename (in the\ncase of stdin for instance).  This involved storing a pointer to the\nfilemap rather than the filename in location info such as\ncodemap::pos.", "tree": {"sha": "ff27183078aa882fd12009c4cf7532195ac3a84d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff27183078aa882fd12009c4cf7532195ac3a84d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c91fb4d91623bd50901ca4f4f215c928790e996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c91fb4d91623bd50901ca4f4f215c928790e996", "html_url": "https://github.com/rust-lang/rust/commit/1c91fb4d91623bd50901ca4f4f215c928790e996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c91fb4d91623bd50901ca4f4f215c928790e996/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4616117f171d96faa6027f89f4d8697815e14566", "url": "https://api.github.com/repos/rust-lang/rust/commits/4616117f171d96faa6027f89f4d8697815e14566", "html_url": "https://github.com/rust-lang/rust/commit/4616117f171d96faa6027f89f4d8697815e14566"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "72615addc11e2d33a112a8e54e882f0a4b81f0db", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c91fb4d91623bd50901ca4f4f215c928790e996/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c91fb4d91623bd50901ca4f4f215c928790e996/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=1c91fb4d91623bd50901ca4f4f215c928790e996", "patch": "@@ -189,11 +189,7 @@ fn emit(cmsp: option<(codemap::codemap, span)>,\n fn highlight_lines(cm: codemap::codemap, sp: span,\n                    lines: @codemap::file_lines) {\n \n-    // If we're not looking at a real file then we can't re-open it to\n-    // pull out the lines\n-    if lines.name == \"-\" { ret; }\n-\n-    let fm = codemap::get_filemap(cm, lines.name);\n+    let fm = lines.file;\n \n     // arbitrarily only print up to six lines of the error\n     let max_lines = 6u;"}, {"sha": "e0ad5a948159a28ea16a5183dbfb72670a40069d", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c91fb4d91623bd50901ca4f4f215c928790e996/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c91fb4d91623bd50901ca4f4f215c928790e996/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=1c91fb4d91623bd50901ca4f4f215c928790e996", "patch": "@@ -238,7 +238,7 @@ fn create_block(cx: @block_ctxt) -> @metadata<block_md> {\n \n     let start = codemap::lookup_char_pos(bcx_ccx(cx).sess.codemap,\n                                          sp.lo);\n-    let fname = start.filename;\n+    let fname = start.file.name;\n     let end = codemap::lookup_char_pos(bcx_ccx(cx).sess.codemap,\n                                        sp.hi);\n     let tg = LexicalBlockTag;\n@@ -632,8 +632,8 @@ fn create_ty(cx: @crate_ctxt, t: ty::t, ty: @ast::ty)\n     };\n }\n \n-fn filename_from_span(cx: @crate_ctxt, sp: span) -> str {\n-    codemap::lookup_char_pos(cx.sess.codemap, sp.lo).filename\n+fn filename_from_span(cx: @crate_ctxt, sp: codemap::span) -> str {\n+    codemap::lookup_char_pos(cx.sess.codemap, sp.lo).file.name\n }\n \n fn create_var(type_tag: int, context: ValueRef, name: str, file: ValueRef,\n@@ -670,7 +670,7 @@ fn create_local_var(bcx: @block_ctxt, local: @ast::local)\n                                        local.span.lo);\n     let ty = node_id_type(bcx, local.node.id);\n     let tymd = create_ty(cx, ty, local.node.ty);\n-    let filemd = create_file(cx, loc.filename);\n+    let filemd = create_file(cx, loc.file.name);\n     let context = alt bcx.parent {\n         parent_none { create_function(bcx.fcx).node }\n         parent_some(_) { create_block(bcx).node }\n@@ -719,7 +719,7 @@ fn create_arg(bcx: @block_ctxt, arg: ast::arg, sp: span)\n                                        sp.lo);\n     let ty = node_id_type(bcx, arg.id);\n     let tymd = create_ty(cx, ty, arg.ty);\n-    let filemd = create_file(cx, loc.filename);\n+    let filemd = create_file(cx, loc.file.name);\n     let context = create_function(bcx.fcx);\n     let mdnode = create_var(tg, context.node, arg.ident, filemd.node,\n                             loc.line as int, tymd.node);\n@@ -812,7 +812,7 @@ fn create_function(fcx: @fn_ctxt) -> @metadata<subprogram_md> {\n \n     let loc = codemap::lookup_char_pos(cx.sess.codemap,\n                                        sp.lo);\n-    let file_node = create_file(cx, loc.filename).node;\n+    let file_node = create_file(cx, loc.file.name).node;\n     let key = if cx.item_symbols.contains_key(fcx.id) { fcx.id } else { id };\n     let mangled = cx.item_symbols.get(key);\n     let ty_node = if cx.sess.opts.extra_debuginfo {"}, {"sha": "33ef3230a23685bb3b80b343da7872bb5a4ac2f6", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c91fb4d91623bd50901ca4f4f215c928790e996/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c91fb4d91623bd50901ca4f4f215c928790e996/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=1c91fb4d91623bd50901ca4f4f215c928790e996", "patch": "@@ -3848,7 +3848,7 @@ fn trans_fail_value(bcx: @block_ctxt, sp_opt: option<span>,\n       some(sp) {\n         let sess = bcx_ccx(bcx).sess;\n         let loc = codemap::lookup_char_pos(sess.parse_sess.cm, sp.lo);\n-        V_filename = C_cstr(bcx_ccx(bcx), loc.filename);\n+        V_filename = C_cstr(bcx_ccx(bcx), loc.file.name);\n         V_line = loc.line as int;\n       }\n       none { V_filename = C_cstr(bcx_ccx(bcx), \"<runtime>\"); V_line = 0; }"}, {"sha": "b3fb64096ba56fff1ae147d3a55e6dfff1fedf7e", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c91fb4d91623bd50901ca4f4f215c928790e996/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c91fb4d91623bd50901ca4f4f215c928790e996/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=1c91fb4d91623bd50901ca4f4f215c928790e996", "patch": "@@ -16,9 +16,11 @@ type filemap =\n \n type codemap = @{mutable files: [filemap]};\n \n-type loc = {filename: filename, line: uint, col: uint};\n+type loc = {file: filemap, line: uint, col: uint};\n \n-fn new_codemap() -> codemap { ret @{mutable files: []}; }\n+fn new_codemap() -> codemap {\n+    @{mutable files: [new_filemap(\"-\", @\"\", 0u, 0u)]}\n+}\n \n fn new_filemap(filename: filename, src: @str,\n                start_pos_ch: uint, start_pos_byte: uint)\n@@ -28,6 +30,8 @@ fn new_filemap(filename: filename, src: @str,\n           mutable lines: [{ch: start_pos_ch, byte: start_pos_byte}]};\n }\n \n+fn empty_filemap(cm: codemap) -> filemap {cm.files[0]}\n+\n fn next_line(file: filemap, chpos: uint, byte_pos: uint) {\n     file.lines += [{ch: chpos, byte: byte_pos}];\n }\n@@ -60,10 +64,10 @@ fn lookup_line(map: codemap, pos: uint, lookup: lookup_fn)\n fn lookup_pos(map: codemap, pos: uint, lookup: lookup_fn) -> loc {\n     alt lookup_line(map, pos, lookup) {\n       some({fm: f, line: a}) {\n-        {filename: f.name, line: a + 1u, col: pos - lookup(f.lines[a])}\n+        {file: f, line: a + 1u, col: pos - lookup(f.lines[a])}\n       }\n       none {\n-        { filename: \"-\", line: 0u, col: 0u }\n+        { file: empty_filemap(map), line: 0u, col: 0u }\n       }\n     }\n }\n@@ -89,20 +93,21 @@ type span = {lo: uint, hi: uint, expanded_from: opt_span};\n fn span_to_str(sp: span, cm: codemap) -> str {\n     let cur = sp;\n     let res = \"\";\n+    // FIXME: Should probably be doing pointer comparison on filemap\n     let prev_file = none;\n     while true {\n         let lo = lookup_char_pos(cm, cur.lo);\n         let hi = lookup_char_pos(cm, cur.hi);\n         res +=\n             #fmt[\"%s:%u:%u: %u:%u\",\n-                 if some(lo.filename) == prev_file {\n+                 if some(lo.file.name) == prev_file {\n                      \"-\"\n-                 } else { lo.filename }, lo.line, lo.col, hi.line, hi.col];\n+                 } else { lo.file.name }, lo.line, lo.col, hi.line, hi.col];\n         alt cur.expanded_from {\n           os_none { break; }\n           os_some(new_sp) {\n             cur = *new_sp;\n-            prev_file = some(lo.filename);\n+            prev_file = some(lo.file.name);\n             res += \"<<\";\n           }\n         }\n@@ -111,14 +116,15 @@ fn span_to_str(sp: span, cm: codemap) -> str {\n     ret res;\n }\n \n-type file_lines = {name: str, lines: [uint]};\n+type file_lines = {file: filemap, lines: [uint]};\n \n fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);\n+    // FIXME: Check for filemap?\n     let lines = [];\n     uint::range(lo.line - 1u, hi.line as uint) {|i| lines += [i]; };\n-    ret @{name: lo.filename, lines: lines};\n+    ret @{file: lo.file, lines: lines};\n }\n \n fn get_line(fm: filemap, line: int) -> str unsafe {"}]}