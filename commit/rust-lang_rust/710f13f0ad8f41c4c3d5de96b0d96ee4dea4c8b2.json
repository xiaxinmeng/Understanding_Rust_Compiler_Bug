{"sha": "710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMGYxM2YwYWQ4ZjQxYzRjM2Q1ZGU5NmIwZDk2ZWU0ZGVhNGM4YjI=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-10T21:55:15Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-20T09:16:55Z"}, "message": "Add Unsafe<T> type", "tree": {"sha": "8d621031b1769b61afca403aa6e507fb9c83356e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d621031b1769b61afca403aa6e507fb9c83356e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "html_url": "https://github.com/rust-lang/rust/commit/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85d5f1f9a873e706bd17be843cd54f55dcff211", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85d5f1f9a873e706bd17be843cd54f55dcff211", "html_url": "https://github.com/rust-lang/rust/commit/b85d5f1f9a873e706bd17be843cd54f55dcff211"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "8ef4991be13c05e8408f00e1123ba84769c9c550", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "patch": "@@ -233,6 +233,8 @@ lets_do_this! {\n     ShrTraitLangItem,                \"shr\",                     shr_trait;\n     IndexTraitLangItem,              \"index\",                   index_trait;\n \n+    UnsafeTypeLangItem,              \"unsafe\",                  unsafe_type;\n+\n     DerefTraitLangItem,              \"deref\",                   deref_trait;\n     DerefMutTraitLangItem,           \"deref_mut\",               deref_mut_trait;\n "}, {"sha": "cf974b2f1faedc455896c3eb6ab8ed7c4027e273", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "patch": "@@ -1878,7 +1878,8 @@ def_type_content_sets!(\n \n         // Things that are interior to the value (first nibble):\n         InteriorUnsized                     = 0b0000_0000__0000_0000__0001,\n-        // InteriorAll                         = 0b0000_0000__0000_0000__1111,\n+        InteriorUnsafe                      = 0b0000_0000__0000_0000__0010,\n+        // InteriorAll                         = 0b00000000__00000000__1111,\n \n         // Things that are owned by the value (second and third nibbles):\n         OwnsOwned                           = 0b0000_0000__0000_0001__0000,\n@@ -2297,6 +2298,8 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n             tc | TC::OwnsAffine\n         } else if Some(did) == cx.lang_items.no_share_bound() {\n             tc | TC::ReachesNoShare\n+        } else if Some(did) == cx.lang_items.unsafe_type() {\n+            tc | TC::InteriorUnsafe\n         } else {\n             tc\n         }"}, {"sha": "73be83c254d3f37e281d45d7bb023f1505c99899", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "patch": "@@ -83,6 +83,7 @@\n #[cfg(test)] pub use kinds = realstd::kinds;\n #[cfg(test)] pub use ops = realstd::ops;\n #[cfg(test)] pub use cmp = realstd::cmp;\n+#[cfg(test)] pub use ty = realstd::ty;\n \n pub mod macros;\n \n@@ -138,6 +139,7 @@ pub mod gc;\n #[cfg(not(test))] pub mod kinds;\n #[cfg(not(test))] pub mod ops;\n #[cfg(not(test))] pub mod cmp;\n+#[cfg(not(test))] pub mod ty;\n \n \n /* Common traits */\n@@ -226,5 +228,6 @@ mod std {\n     pub use rt;\n     pub use str;\n     pub use to_str;\n+    pub use ty;\n     pub use unstable;\n }"}, {"sha": "e17e28a84fd739c0a46ac36d01fef9736b3a6ef0", "filename": "src/libstd/ty.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2/src%2Flibstd%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2/src%2Flibstd%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fty.rs?ref=710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Types dealing with unsafe actions.\n+\n+use cast;\n+use kinds::marker;\n+\n+/// Unsafe type that wraps a type T and indicates unsafe interior operations on the\n+/// wrapped type. Types with an `Unsafe<T>` field are considered to have an *unsafe\n+/// interior*. The Unsafe type is the only legal way to obtain aliasable data that is\n+/// considered mutable. In general, transmuting an &T type into an &mut T is considered\n+/// undefined behavior.\n+///\n+/// Although it is possible to put an Unsafe<T> into static item, it is not permitted to\n+/// take the address of the static item if the item is not declared as mutable. This rule\n+/// exists because immutable static items are stored in read-only memory, and thus any\n+/// attempt to mutate their interior can cause segfaults. Immutable static items containing\n+/// Unsafe<T> instances are still useful as read-only initializers, however, so we do not\n+/// forbid them altogether.\n+///\n+/// Types like `Cell` and `RefCell` use this type to wrap their internal data.\n+///\n+/// Unsafe doesn't opt-out from any kind, instead, types with an `Unsafe` interior\n+/// are expected to opt-out from kinds themselves.\n+///\n+/// # Example:\n+///\n+/// ```rust\n+/// use std::ty::Unsafe;\n+/// use std::kinds::marker;\n+///\n+/// struct NotThreadSafe<T> {\n+///     value: Unsafe<T>,\n+///     marker1: marker::NoShare\n+/// }\n+/// ```\n+///\n+/// **NOTE:** Unsafe<T> fields are public to allow static initializers. It is not recommended\n+/// to access its fields directly, `get` should be used instead.\n+#[cfg(not(stage0))]\n+#[lang=\"unsafe\"]\n+pub struct Unsafe<T> {\n+    /// Wrapped value\n+    value: T,\n+\n+    /// Invariance marker\n+    marker1: marker::InvariantType<T>\n+}\n+\n+/// Unsafe type for stage0\n+#[cfg(stage0)]\n+pub struct Unsafe<T> {\n+    /// Wrapped value\n+    value: T,\n+\n+    /// Invariance marker\n+    marker1: marker::InvariantType<T>\n+}\n+\n+\n+impl<T> Unsafe<T> {\n+\n+    /// Static constructor\n+    pub fn new(value: T) -> Unsafe<T> {\n+        Unsafe{value: value, marker1: marker::InvariantType}\n+    }\n+\n+    /// Gets a mutable pointer to the wrapped value\n+    #[inline]\n+    pub unsafe fn get(&self) -> *mut T { cast::transmute(&self.value) }\n+}"}]}