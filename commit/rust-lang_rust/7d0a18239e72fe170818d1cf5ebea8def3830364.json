{"sha": "7d0a18239e72fe170818d1cf5ebea8def3830364", "node_id": "C_kwDOAAsO6NoAKDdkMGExODIzOWU3MmZlMTcwODE4ZDFjZjVlYmVhOGRlZjM4MzAzNjQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-21T08:53:54Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-21T08:53:54Z"}, "message": "orphan check: opaque types are an error", "tree": {"sha": "5b554b77b5d26148341c735a03fc002e9e006bba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b554b77b5d26148341c735a03fc002e9e006bba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d0a18239e72fe170818d1cf5ebea8def3830364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d0a18239e72fe170818d1cf5ebea8def3830364", "html_url": "https://github.com/rust-lang/rust/commit/7d0a18239e72fe170818d1cf5ebea8def3830364", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d0a18239e72fe170818d1cf5ebea8def3830364/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "039a6ad1caa996379f683f2e219ac4f0e34889bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/039a6ad1caa996379f683f2e219ac4f0e34889bf", "html_url": "https://github.com/rust-lang/rust/commit/039a6ad1caa996379f683f2e219ac4f0e34889bf"}], "stats": {"total": 32, "additions": 2, "deletions": 30}, "files": [{"sha": "67ae26b0b3ad1049a80c5c29363e890a9920b535", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7d0a18239e72fe170818d1cf5ebea8def3830364/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0a18239e72fe170818d1cf5ebea8def3830364/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=7d0a18239e72fe170818d1cf5ebea8def3830364", "patch": "@@ -739,34 +739,6 @@ fn ty_is_local_constructor(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bo\n \n         ty::Adt(def, _) => def_id_is_local(def.did(), in_crate),\n         ty::Foreign(did) => def_id_is_local(did, in_crate),\n-        ty::Opaque(..) => {\n-            // This merits some explanation.\n-            // Normally, opaque types are not involved when performing\n-            // coherence checking, since it is illegal to directly\n-            // implement a trait on an opaque type. However, we might\n-            // end up looking at an opaque type during coherence checking\n-            // if an opaque type gets used within another type (e.g. as\n-            // a type parameter). This requires us to decide whether or\n-            // not an opaque type should be considered 'local' or not.\n-            //\n-            // We choose to treat all opaque types as non-local, even\n-            // those that appear within the same crate. This seems\n-            // somewhat surprising at first, but makes sense when\n-            // you consider that opaque types are supposed to hide\n-            // the underlying type *within the same crate*. When an\n-            // opaque type is used from outside the module\n-            // where it is declared, it should be impossible to observe\n-            // anything about it other than the traits that it implements.\n-            //\n-            // The alternative would be to look at the underlying type\n-            // to determine whether or not the opaque type itself should\n-            // be considered local. However, this could make it a breaking change\n-            // to switch the underlying ('defining') type from a local type\n-            // to a remote type. This would violate the rule that opaque\n-            // types should be completely opaque apart from the traits\n-            // that they implement, so we don't use this behavior.\n-            false\n-        }\n \n         ty::Dynamic(ref tt, ..) => {\n             if let Some(principal) = tt.principal() {\n@@ -786,7 +758,7 @@ fn ty_is_local_constructor(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bo\n         //\n         // See `test/ui/coherence/coherence-with-closure.rs` for an example where this\n         // could happens.\n-        ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n+        ty::Opaque(..) | ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n             tcx.sess.delay_span_bug(\n                 DUMMY_SP,\n                 format!(\"ty_is_local invoked on closure or generator: {:?}\", ty),"}, {"sha": "2eea726a19c5aa6622a2365b1271ee2a11a00bb7", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0a18239e72fe170818d1cf5ebea8def3830364/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d0a18239e72fe170818d1cf5ebea8def3830364/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=7d0a18239e72fe170818d1cf5ebea8def3830364", "patch": "@@ -7,7 +7,7 @@ LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n LL | impl AnotherTrait for D<OpaqueType> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n    |\n-   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `OpaqueType` in future versions\n+   = note: downstream crates may implement trait `std::fmt::Debug` for type `OpaqueType`\n \n error: cannot implement trait on type alias impl trait\n   --> $DIR/negative-reasoning.rs:19:25"}]}