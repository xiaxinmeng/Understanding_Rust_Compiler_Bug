{"sha": "000dc07f71baafc31da74e392ad5530fb6de9757", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGRjMDdmNzFiYWFmYzMxZGE3NGUzOTJhZDU1MzBmYjZkZTk3NTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-31T16:03:14Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-24T02:01:21Z"}, "message": "Store a method-from-trait's impl in some cases when it is known.\n\nThis allows one to look at an `ExprMethodCall` `foo.bar()` where `bar`\nis a method in some trait and (sometimes) extract the `impl` that `bar`\nis defined in, e.g.\n\n    trait Foo {\n        fn bar(&self);\n    }\n\n    impl Foo for uint { // <A>\n        fn bar(&self) {}\n    }\n\n    fn main() {\n        1u.bar(); // impl_def_id == Some(<A>)\n    }\n\nThis definitely doesn't handle all cases, but is correct when it is\nknown, meaning it should only be used for certain linting/heuristic\npurposes; no safety analysis.", "tree": {"sha": "5b60f38422c12d75b735335ba9ca88d913878cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b60f38422c12d75b735335ba9ca88d913878cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000dc07f71baafc31da74e392ad5530fb6de9757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000dc07f71baafc31da74e392ad5530fb6de9757", "html_url": "https://github.com/rust-lang/rust/commit/000dc07f71baafc31da74e392ad5530fb6de9757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000dc07f71baafc31da74e392ad5530fb6de9757/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be79d6acde9eed3a9b5281a46f385bcb4ce736c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be79d6acde9eed3a9b5281a46f385bcb4ce736c", "html_url": "https://github.com/rust-lang/rust/commit/4be79d6acde9eed3a9b5281a46f385bcb4ce736c"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "430b63f81c852e82eabbf9d6953902c64466da5e", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=000dc07f71baafc31da74e392ad5530fb6de9757", "patch": "@@ -627,6 +627,7 @@ impl<'tcx> tr for MethodOrigin<'tcx> {\n                         // def-id is already translated when we read it out\n                         trait_ref: mp.trait_ref.clone(),\n                         method_num: mp.method_num,\n+                        impl_def_id: mp.impl_def_id.tr(dcx),\n                     }\n                 )\n             }\n@@ -879,6 +880,16 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                             try!(this.emit_struct_field(\"method_num\", 0, |this| {\n                                 this.emit_uint(p.method_num)\n                             }));\n+                            try!(this.emit_struct_field(\"impl_def_id\", 0, |this| {\n+                                this.emit_option(|this| {\n+                                    match p.impl_def_id {\n+                                        None => this.emit_option_none(),\n+                                        Some(did) => this.emit_option_some(|this| {\n+                                            Ok(this.emit_def_id(did))\n+                                        })\n+                                    }\n+                                })\n+                            }));\n                             Ok(())\n                         })\n                     })\n@@ -1452,6 +1463,17 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                                         this.read_struct_field(\"method_num\", 1, |this| {\n                                             this.read_uint()\n                                         }).unwrap()\n+                                    },\n+                                    impl_def_id: {\n+                                        this.read_struct_field(\"impl_def_id\", 2, |this| {\n+                                            this.read_option(|this, b| {\n+                                                if b {\n+                                                    Ok(Some(this.read_def_id(dcx)))\n+                                                } else {\n+                                                    Ok(None)\n+                                                }\n+                                            })\n+                                        }).unwrap()\n                                     }\n                                 }))\n                         }).unwrap()"}, {"sha": "5b5b53d12468c1622807db12c504597320616895", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=000dc07f71baafc31da74e392ad5530fb6de9757", "patch": "@@ -453,9 +453,14 @@ pub struct MethodParam<'tcx> {\n     // never contains bound regions; those regions should have been\n     // instantiated with fresh variables at this point.\n     pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n-\n     // index of uint in the list of methods for the trait\n     pub method_num: uint,\n+\n+    /// The impl for the trait from which the method comes. This\n+    /// should only be used for certain linting/heuristic purposes\n+    /// since there is no guarantee that this is Some in every\n+    /// situation that it could/should be.\n+    pub impl_def_id: Option<ast::DefId>,\n }\n \n // details for a method invoked with a receiver whose type is an object"}, {"sha": "0b8c77860155a5854eaf8e82656530d64939e530", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=000dc07f71baafc31da74e392ad5530fb6de9757", "patch": "@@ -310,7 +310,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::MethodOrigin<'tcx> {\n             ty::MethodTypeParam(ref param) => {\n                 ty::MethodTypeParam(ty::MethodParam {\n                     trait_ref: param.trait_ref.fold_with(folder),\n-                    method_num: param.method_num\n+                    method_num: param.method_num,\n+                    impl_def_id: param.impl_def_id,\n                 })\n             }\n             ty::MethodTraitObject(ref object) => {"}, {"sha": "9356be1b9b410808718bfc9e983f596b084a88a6", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=000dc07f71baafc31da74e392ad5530fb6de9757", "patch": "@@ -132,7 +132,8 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n         ty::MethodTypeParam(ty::MethodParam {\n             ref trait_ref,\n-            method_num\n+            method_num,\n+            impl_def_id: _\n         }) => {\n             let trait_ref = ty::Binder(bcx.monomorphize(trait_ref));\n             let span = bcx.tcx().map.span(method_call.expr_id);"}, {"sha": "4aa0a211221ef526afd7313d59596ae840966496", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=000dc07f71baafc31da74e392ad5530fb6de9757", "patch": "@@ -256,7 +256,8 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                         &impl_polytype.substs,\n                         &ty::impl_trait_ref(self.tcx(), impl_def_id).unwrap());\n                 let origin = MethodTypeParam(MethodParam { trait_ref: impl_trait_ref.clone(),\n-                                                           method_num: method_num });\n+                                                           method_num: method_num,\n+                                                           impl_def_id: Some(impl_def_id) });\n                 (impl_trait_ref.substs.clone(), origin)\n             }\n \n@@ -275,7 +276,8 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                 let trait_ref =\n                     Rc::new(ty::TraitRef::new(trait_def_id, self.tcx().mk_substs(substs.clone())));\n                 let origin = MethodTypeParam(MethodParam { trait_ref: trait_ref,\n-                                                           method_num: method_num });\n+                                                           method_num: method_num,\n+                                                           impl_def_id: None });\n                 (substs, origin)\n             }\n \n@@ -285,7 +287,8 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                 let trait_ref = self.replace_late_bound_regions_with_fresh_var(&*poly_trait_ref);\n                 let substs = trait_ref.substs.clone();\n                 let origin = MethodTypeParam(MethodParam { trait_ref: trait_ref,\n-                                                           method_num: method_num });\n+                                                           method_num: method_num,\n+                                                           impl_def_id: None });\n                 (substs, origin)\n             }\n         }"}, {"sha": "d92cc1dfc1e95f4af178b5bc176a0e49e76db449", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000dc07f71baafc31da74e392ad5530fb6de9757/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=000dc07f71baafc31da74e392ad5530fb6de9757", "patch": "@@ -287,7 +287,8 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     let callee = MethodCallee {\n         origin: MethodTypeParam(MethodParam{trait_ref: trait_ref.clone(),\n-                                            method_num: method_num}),\n+                                            method_num: method_num,\n+                                            impl_def_id: None}),\n         ty: fty,\n         substs: trait_ref.substs.clone()\n     };"}]}