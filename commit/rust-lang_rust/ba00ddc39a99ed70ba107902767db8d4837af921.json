{"sha": "ba00ddc39a99ed70ba107902767db8d4837af921", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMDBkZGMzOWE5OWVkNzBiYTEwNzkwMjc2N2RiOGQ0ODM3YWY5MjE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-03-14T23:19:16Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-03-14T23:21:03Z"}, "message": "Address review comments", "tree": {"sha": "3fea15f5163a1a09e847ef8f99969d9b8e8e62ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fea15f5163a1a09e847ef8f99969d9b8e8e62ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba00ddc39a99ed70ba107902767db8d4837af921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba00ddc39a99ed70ba107902767db8d4837af921", "html_url": "https://github.com/rust-lang/rust/commit/ba00ddc39a99ed70ba107902767db8d4837af921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba00ddc39a99ed70ba107902767db8d4837af921/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa3694fada38ba1d1b0657a739736b314904ec20", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3694fada38ba1d1b0657a739736b314904ec20", "html_url": "https://github.com/rust-lang/rust/commit/fa3694fada38ba1d1b0657a739736b314904ec20"}], "stats": {"total": 79, "additions": 69, "deletions": 10}, "files": [{"sha": "a09c87b3ec2b23c865ceaed3c60a094f8c8a1333", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba00ddc39a99ed70ba107902767db8d4837af921/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba00ddc39a99ed70ba107902767db8d4837af921/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=ba00ddc39a99ed70ba107902767db8d4837af921", "patch": "@@ -313,7 +313,7 @@ impl InlineAsmReg {\n             Self::RiscV(r) => r.emit(out, arch, modifier),\n             Self::Hexagon(r) => r.emit(out, arch, modifier),\n             Self::Mips(r) => r.emit(out, arch, modifier),\n-            Self::Err => unreachable!(),\n+            Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n     }\n \n@@ -325,7 +325,7 @@ impl InlineAsmReg {\n             Self::RiscV(_) => cb(self),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n             Self::Mips(_) => cb(self),\n-            Self::Err => unreachable!(),\n+            Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n     }\n }\n@@ -386,7 +386,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n             Self::SpirV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::SpirV),\n             Self::Wasm(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Wasm),\n-            Self::Err => unreachable!(),\n+            Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n \n@@ -411,7 +411,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.suggest_modifier(arch, ty),\n             Self::SpirV(r) => r.suggest_modifier(arch, ty),\n             Self::Wasm(r) => r.suggest_modifier(arch, ty),\n-            Self::Err => unreachable!(),\n+            Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n \n@@ -432,7 +432,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.default_modifier(arch),\n             Self::SpirV(r) => r.default_modifier(arch),\n             Self::Wasm(r) => r.default_modifier(arch),\n-            Self::Err => unreachable!(),\n+            Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n \n@@ -452,7 +452,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.supported_types(arch),\n             Self::SpirV(r) => r.supported_types(arch),\n             Self::Wasm(r) => r.supported_types(arch),\n-            Self::Err => unreachable!(),\n+            Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n \n@@ -489,7 +489,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.valid_modifiers(arch),\n             Self::SpirV(r) => r.valid_modifiers(arch),\n             Self::Wasm(r) => r.valid_modifiers(arch),\n-            Self::Err => unreachable!(),\n+            Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n }"}, {"sha": "570ed043dd9e874bd6362965cac8c07bbf032368", "filename": "src/test/rustdoc/asm-foreign.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba00ddc39a99ed70ba107902767db8d4837af921/src%2Ftest%2Frustdoc%2Fasm-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba00ddc39a99ed70ba107902767db8d4837af921/src%2Ftest%2Frustdoc%2Fasm-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasm-foreign.rs?ref=ba00ddc39a99ed70ba107902767db8d4837af921", "patch": "@@ -1,9 +1,9 @@\n-// check-pass\n // Make sure rustdoc accepts asm! for a foreign architecture.\n \n #![feature(asm)]\n \n-pub unsafe fn aarch64(a: f64, b: f64) {\n+// @has asm_foreign/fn.aarch64.html\n+pub unsafe fn aarch64(a: f64, b: f64) -> f64 {\n     let c;\n     asm!(\"add {:d}, {:d}, d0\", out(vreg) c, in(vreg) a, in(\"d0\") {\n         || {};\n@@ -12,7 +12,8 @@ pub unsafe fn aarch64(a: f64, b: f64) {\n     c\n }\n \n-pub unsafe fn x86(a: f64, b: f64) {\n+// @has asm_foreign/fn.x86.html\n+pub unsafe fn x86(a: f64, b: f64) -> f64 {\n     let c;\n     asm!(\"addsd {}, {}, xmm0\", out(xmm_reg) c, in(xmm_reg) a, in(\"xmm0\") b);\n     c", "previous_filename": "src/test/rustdoc-ui/asm-foreign.rs"}, {"sha": "34e313e7eacebec23df46c5fa58837ec9910e695", "filename": "src/test/rustdoc/asm-foreign2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba00ddc39a99ed70ba107902767db8d4837af921/src%2Ftest%2Frustdoc%2Fasm-foreign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba00ddc39a99ed70ba107902767db8d4837af921/src%2Ftest%2Frustdoc%2Fasm-foreign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasm-foreign2.rs?ref=ba00ddc39a99ed70ba107902767db8d4837af921", "patch": "@@ -0,0 +1,11 @@\n+// only-aarch64\n+// Make sure rustdoc accepts options(att_syntax) asm! on non-x86 targets.\n+\n+#![feature(asm)]\n+\n+// @has asm_foreign2/fn.x86.html\n+pub unsafe fn x86(x: i64) -> i64 {\n+    let y;\n+    asm!(\"movq {}, {}\", in(reg) x, out(reg) y, options(att_syntax));\n+    y\n+}"}, {"sha": "a8e688cbe1ff3e6bbcf76ac7d112fa985b1681b2", "filename": "src/test/ui/issues/issue-82869.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ba00ddc39a99ed70ba107902767db8d4837af921/src%2Ftest%2Fui%2Fissues%2Fissue-82869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba00ddc39a99ed70ba107902767db8d4837af921/src%2Ftest%2Fui%2Fissues%2Fissue-82869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-82869.rs?ref=ba00ddc39a99ed70ba107902767db8d4837af921", "patch": "@@ -0,0 +1,23 @@\n+// only-x86_64\n+// Make sure rustc doesn't ICE on asm! for a foreign architecture.\n+\n+#![feature(asm)]\n+#![crate_type = \"rlib\"]\n+\n+pub unsafe fn aarch64(a: f64, b: f64) -> f64 {\n+    let c;\n+    asm!(\"add {:d}, {:d}, d0\", out(vreg) c, in(vreg) a, in(\"d0\") {\n+        || {};\n+        b\n+    });\n+    //~^^^^ invalid register class\n+    //~^^^^^ invalid register class\n+    //~^^^^^^ invalid register\n+    c\n+}\n+\n+pub unsafe fn x86(a: f64, b: f64) -> f64 {\n+    let c;\n+    asm!(\"addsd {}, {}, xmm0\", out(xmm_reg) c, in(xmm_reg) a, in(\"xmm0\") b);\n+    c\n+}"}, {"sha": "d05714ea6f2153428524e6b76f12d2ed0f1e1ae2", "filename": "src/test/ui/issues/issue-82869.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba00ddc39a99ed70ba107902767db8d4837af921/src%2Ftest%2Fui%2Fissues%2Fissue-82869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba00ddc39a99ed70ba107902767db8d4837af921/src%2Ftest%2Fui%2Fissues%2Fissue-82869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-82869.stderr?ref=ba00ddc39a99ed70ba107902767db8d4837af921", "patch": "@@ -0,0 +1,24 @@\n+error: invalid register class `vreg`: unknown register class\n+  --> $DIR/issue-82869.rs:9:32\n+   |\n+LL |     asm!(\"add {:d}, {:d}, d0\", out(vreg) c, in(vreg) a, in(\"d0\") {\n+   |                                ^^^^^^^^^^^\n+\n+error: invalid register class `vreg`: unknown register class\n+  --> $DIR/issue-82869.rs:9:45\n+   |\n+LL |     asm!(\"add {:d}, {:d}, d0\", out(vreg) c, in(vreg) a, in(\"d0\") {\n+   |                                             ^^^^^^^^^^\n+\n+error: invalid register `d0`: unknown register\n+  --> $DIR/issue-82869.rs:9:57\n+   |\n+LL |       asm!(\"add {:d}, {:d}, d0\", out(vreg) c, in(vreg) a, in(\"d0\") {\n+   |  _________________________________________________________^\n+LL | |         || {};\n+LL | |         b\n+LL | |     });\n+   | |_____^\n+\n+error: aborting due to 3 previous errors\n+"}]}