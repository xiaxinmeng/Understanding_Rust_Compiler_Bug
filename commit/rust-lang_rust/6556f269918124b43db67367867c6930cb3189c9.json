{"sha": "6556f269918124b43db67367867c6930cb3189c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NTZmMjY5OTE4MTI0YjQzZGI2NzM2Nzg2N2M2OTMwY2IzMTg5Yzk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-01T14:42:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-01T14:42:42Z"}, "message": "Rollup merge of #73678 - Keno:patch-1, r=LukasKalbertodt\n\nUpdate Box::from_raw example to generalize better\n\nI know very little about rust, so I saw the example here\n```\nuse std::alloc::{alloc, Layout};\n\nunsafe {\n    let ptr = alloc(Layout::new::<i32>()) as *mut i32;\n    *ptr = 5;\n    let x = Box::from_raw(ptr);\n}\n```\nand tried to generalize it by writing,\n```\n    let layout = Layout::new::<T>();\n    let new_obj = unsafe {\n        let ptr = alloc(layout) as *mut T;\n        *ptr = obj;\n        Box::from_raw(ptr)\n    };\n```\nfor some more complicated `T`, which ended up crashing with SIGSEGV,\nbecause it tried to `drop_in_place` the previous object in `ptr` which is\nof course garbage. I think that changing this example to use `.write` instead\nwould be a good idea to suggest the correct generalization. It is also more\nconsistent with other documentation items in this file, which use `.write`.\nI also added a comment to explain it, but I'm not too attached to that,\nand can see it being too verbose in this place.", "tree": {"sha": "8233907da0a14d05eadcfab203ed663548888a6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8233907da0a14d05eadcfab203ed663548888a6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6556f269918124b43db67367867c6930cb3189c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/KDiCRBK7hj4Ov3rIwAAdHIIAKKA8TZQYMXgsgKxZ/m6+99Y\nLAIV3EDiYNjDqDV47Iddmm4E3x3Q1CvvsVUnzeZOeTxdTbCc8S0dz2NErwAfz8Xg\nLB700bbvtJK3zx/BUQfPRKuVJwB4k+4WUz8ePMbT2pohIzSJxm6GIgHRcbu74t6i\nJUxV570gP/3+Jy0gt0VItCnLTkMY03J4wEkxwE1bnxWgMRZ6ZQIGj/8K1+bvCN60\nJu2M3i1r4EYxfFql13J21lK+q/PKvGfqleXnyc+AzYNPW7MdV84SgTtD5ahzKoH8\npJp9DmkySzmd8gp9dwg0QWjepzu50OUtZI7Au9/6z/2GtjilxSdArMH682NMKdo=\n=sObP\n-----END PGP SIGNATURE-----\n", "payload": "tree 8233907da0a14d05eadcfab203ed663548888a6c\nparent 0eb9799695db2920e7cdebf7a8a8a9772365d4d1\nparent 0c88dd663a7095ccc405a2036047a90981137a51\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593614562 -0700\ncommitter GitHub <noreply@github.com> 1593614562 -0700\n\nRollup merge of #73678 - Keno:patch-1, r=LukasKalbertodt\n\nUpdate Box::from_raw example to generalize better\n\nI know very little about rust, so I saw the example here\n```\nuse std::alloc::{alloc, Layout};\n\nunsafe {\n    let ptr = alloc(Layout::new::<i32>()) as *mut i32;\n    *ptr = 5;\n    let x = Box::from_raw(ptr);\n}\n```\nand tried to generalize it by writing,\n```\n    let layout = Layout::new::<T>();\n    let new_obj = unsafe {\n        let ptr = alloc(layout) as *mut T;\n        *ptr = obj;\n        Box::from_raw(ptr)\n    };\n```\nfor some more complicated `T`, which ended up crashing with SIGSEGV,\nbecause it tried to `drop_in_place` the previous object in `ptr` which is\nof course garbage. I think that changing this example to use `.write` instead\nwould be a good idea to suggest the correct generalization. It is also more\nconsistent with other documentation items in this file, which use `.write`.\nI also added a comment to explain it, but I'm not too attached to that,\nand can see it being too verbose in this place.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6556f269918124b43db67367867c6930cb3189c9", "html_url": "https://github.com/rust-lang/rust/commit/6556f269918124b43db67367867c6930cb3189c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6556f269918124b43db67367867c6930cb3189c9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eb9799695db2920e7cdebf7a8a8a9772365d4d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb9799695db2920e7cdebf7a8a8a9772365d4d1", "html_url": "https://github.com/rust-lang/rust/commit/0eb9799695db2920e7cdebf7a8a8a9772365d4d1"}, {"sha": "0c88dd663a7095ccc405a2036047a90981137a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c88dd663a7095ccc405a2036047a90981137a51", "html_url": "https://github.com/rust-lang/rust/commit/0c88dd663a7095ccc405a2036047a90981137a51"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "3320ebdf821d054e31217ba4b02591375d268db0", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6556f269918124b43db67367867c6930cb3189c9/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6556f269918124b43db67367867c6930cb3189c9/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=6556f269918124b43db67367867c6930cb3189c9", "patch": "@@ -384,7 +384,10 @@ impl<T: ?Sized> Box<T> {\n     ///\n     /// unsafe {\n     ///     let ptr = alloc(Layout::new::<i32>()) as *mut i32;\n-    ///     *ptr = 5;\n+    ///     // In general .write is required to avoid attempting to destruct\n+    ///     // the (uninitialized) previous contents of `ptr`, though for this\n+    ///     // simple example `*ptr = 5` would have worked as well.\n+    ///     ptr.write(5);\n     ///     let x = Box::from_raw(ptr);\n     /// }\n     /// ```"}]}