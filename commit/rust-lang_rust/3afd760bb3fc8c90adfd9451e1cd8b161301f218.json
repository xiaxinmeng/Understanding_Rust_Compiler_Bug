{"sha": "3afd760bb3fc8c90adfd9451e1cd8b161301f218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZmQ3NjBiYjNmYzhjOTBhZGZkOTQ1MWUxY2Q4YjE2MTMwMWYyMTg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-19T14:38:55Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-19T14:42:15Z"}, "message": "Fix translation of semi-constant if-statements\n\nThanks @dotdash", "tree": {"sha": "96bfa5b727ac10ab9aabae78e464cf47521dd25a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96bfa5b727ac10ab9aabae78e464cf47521dd25a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3afd760bb3fc8c90adfd9451e1cd8b161301f218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3afd760bb3fc8c90adfd9451e1cd8b161301f218", "html_url": "https://github.com/rust-lang/rust/commit/3afd760bb3fc8c90adfd9451e1cd8b161301f218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3afd760bb3fc8c90adfd9451e1cd8b161301f218/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d2bd13c357bed328735da8605fce1416acc060", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d2bd13c357bed328735da8605fce1416acc060", "html_url": "https://github.com/rust-lang/rust/commit/27d2bd13c357bed328735da8605fce1416acc060"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "0684150112409100826b81636d369fa6ff9ed1fa", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3afd760bb3fc8c90adfd9451e1cd8b161301f218/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afd760bb3fc8c90adfd9451e1cd8b161301f218/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=3afd760bb3fc8c90adfd9451e1cd8b161301f218", "patch": "@@ -869,8 +869,7 @@ pub fn with_cond<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n {\n     let _icx = push_ctxt(\"with_cond\");\n \n-    if bcx.unreachable.get() ||\n-            (common::is_const(val) && common::const_to_uint(val) == 0) {\n+    if bcx.unreachable.get() || common::const_to_opt_uint(val) == Some(0) {\n         return bcx;\n     }\n "}, {"sha": "758702f54c049f7e5283ef3645e496cbed298a23", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3afd760bb3fc8c90adfd9451e1cd8b161301f218/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afd760bb3fc8c90adfd9451e1cd8b161301f218/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=3afd760bb3fc8c90adfd9451e1cd8b161301f218", "patch": "@@ -919,12 +919,6 @@ pub fn const_get_elt(cx: &CrateContext, v: ValueRef, us: &[c_uint])\n     }\n }\n \n-pub fn is_const(v: ValueRef) -> bool {\n-    unsafe {\n-        llvm::LLVMIsConstant(v) == True\n-    }\n-}\n-\n pub fn const_to_int(v: ValueRef) -> i64 {\n     unsafe {\n         llvm::LLVMConstIntGetSExtValue(v)"}, {"sha": "ab8cfa0ce3b7eaa72508ab75824b002b2ceb3530", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3afd760bb3fc8c90adfd9451e1cd8b161301f218/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afd760bb3fc8c90adfd9451e1cd8b161301f218/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=3afd760bb3fc8c90adfd9451e1cd8b161301f218", "patch": "@@ -166,31 +166,24 @@ pub fn trans_if<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let cond_val = unpack_result!(bcx, expr::trans(bcx, cond).to_llbool());\n \n     // Drop branches that are known to be impossible\n-    if is_const(cond_val) && !is_undef(cond_val) {\n-        if const_to_uint(cond_val) == 1 {\n-            match els {\n-                Some(elexpr) => {\n-                    let mut trans = TransItemVisitor { ccx: bcx.fcx.ccx };\n-                    trans.visit_expr(&*elexpr);\n-                }\n-                None => {}\n-            }\n+    if let Some(cv) = const_to_opt_uint(cond_val) {\n+        if cv == 1 {\n             // if true { .. } [else { .. }]\n             bcx = trans_block(bcx, &*thn, dest);\n             trans::debuginfo::clear_source_location(bcx.fcx);\n+\n+            if let Some(elexpr) = els {\n+                let mut trans = TransItemVisitor { ccx: bcx.fcx.ccx };\n+                trans.visit_expr(&*elexpr);\n+            }\n         } else {\n-            let mut trans = TransItemVisitor { ccx: bcx.fcx.ccx } ;\n+            // if false { .. } [else { .. }]\n+            let mut trans = TransItemVisitor { ccx: bcx.fcx.ccx };\n             trans.visit_block(&*thn);\n \n-            match els {\n-                // if false { .. } else { .. }\n-                Some(elexpr) => {\n-                    bcx = expr::trans_into(bcx, &*elexpr, dest);\n-                    trans::debuginfo::clear_source_location(bcx.fcx);\n-                }\n-\n-                // if false { .. }\n-                None => { }\n+            if let Some(elexpr) = els {\n+                bcx = expr::trans_into(bcx, &*elexpr, dest);\n+                trans::debuginfo::clear_source_location(bcx.fcx);\n             }\n         }\n "}]}