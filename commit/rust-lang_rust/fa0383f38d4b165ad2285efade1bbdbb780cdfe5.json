{"sha": "fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDM4M2YzOGQ0YjE2NWFkMjI4NWVmYWRlMWJiZGJiNzgwY2RmZTU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T04:16:06Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:51:00Z"}, "message": "librustc_typeck: use `#[deriving(Copy)]`", "tree": {"sha": "7a467dc2c698afe3906b39a4623f9cc380c18b22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a467dc2c698afe3906b39a4623f9cc380c18b22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "html_url": "https://github.com/rust-lang/rust/commit/fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/comments", "author": null, "committer": null, "parents": [{"sha": "5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "html_url": "https://github.com/rust-lang/rust/commit/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4"}], "stats": {"total": 38, "additions": 11, "deletions": 27}, "files": [{"sha": "3b7eb22e56cc44fa931aeb43dd194f1708d6ea5e", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "patch": "@@ -46,14 +46,12 @@ pub enum MethodError {\n \n // A pared down enum describing just the places from which a method\n // candidate can arise. Used for error reporting only.\n-#[deriving(PartialOrd, Ord, PartialEq, Eq)]\n+#[deriving(Copy, PartialOrd, Ord, PartialEq, Eq)]\n pub enum CandidateSource {\n     ImplSource(ast::DefId),\n     TraitSource(/* trait id */ ast::DefId),\n }\n \n-impl Copy for CandidateSource {}\n-\n type MethodIndex = uint; // just for doc purposes\n \n /// Determines whether the type `self_ty` supports a method name `method_name` or not."}, {"sha": "bbc33826f35519af565553491638aadb448ff99b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "patch": "@@ -166,6 +166,7 @@ pub struct Inherited<'a, 'tcx: 'a> {\n \n /// When type-checking an expression, we propagate downward\n /// whatever type hint we are able in the form of an `Expectation`.\n+#[deriving(Copy)]\n enum Expectation<'tcx> {\n     /// We know nothing about what type this expression should have.\n     NoExpectation,\n@@ -177,8 +178,6 @@ enum Expectation<'tcx> {\n     ExpectCastableToType(Ty<'tcx>),\n }\n \n-impl<'tcx> Copy for Expectation<'tcx> {}\n-\n impl<'tcx> Expectation<'tcx> {\n     // Disregard \"castable to\" expectations because they\n     // can lead us astray. Consider for example `if cond\n@@ -1976,14 +1975,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum LvaluePreference {\n     PreferMutLvalue,\n     NoPreference\n }\n \n-impl Copy for LvaluePreference {}\n-\n /// Executes an autoderef loop for the type `t`. At each step, invokes `should_stop` to decide\n /// whether to terminate the loop. Returns the final type and number of derefs that it performed.\n ///\n@@ -2856,14 +2853,12 @@ pub fn lookup_tup_field_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n // Controls whether the arguments are automatically referenced. This is useful\n // for overloaded binary and unary operators.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum AutorefArgs {\n     Yes,\n     No,\n }\n \n-impl Copy for AutorefArgs {}\n-\n /// Controls whether the arguments are tupled. This is used for the call\n /// operator.\n ///"}, {"sha": "700d12116060c1bd62bd9127cf974566389d24ef", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "patch": "@@ -343,6 +343,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Resolution reason.\n \n+#[deriving(Copy)]\n enum ResolveReason {\n     ResolvingExpr(Span),\n     ResolvingLocal(Span),\n@@ -351,8 +352,6 @@ enum ResolveReason {\n     ResolvingUnboxedClosure(ast::DefId),\n }\n \n-impl Copy for ResolveReason {}\n-\n impl ResolveReason {\n     fn span(&self, tcx: &ty::ctxt) -> Span {\n         match *self {"}, {"sha": "4612acb04b2f021cfaae0e25bd85a75cf1eed8c8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "patch": "@@ -490,6 +490,7 @@ fn convert_associated_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n }\n \n+#[deriving(Copy)]\n enum ConvertMethodContext<'a> {\n     /// Used when converting implementation methods.\n     ImplConvertMethodContext,\n@@ -498,8 +499,6 @@ enum ConvertMethodContext<'a> {\n     TraitConvertMethodContext(ast::DefId, &'a [ast::TraitItem]),\n }\n \n-impl<'a> Copy for ConvertMethodContext<'a> {}\n-\n fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n                                  convert_method_context: ConvertMethodContext,\n                                  container: ImplOrTraitItemContainer,"}, {"sha": "f43e8579022e958cd9c1e4ecd9c6ea9be34aaf2e", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "patch": "@@ -36,10 +36,9 @@ pub trait RegionScope {\n \n // A scope in which all regions must be explicitly named. This is used\n // for types that appear in structs and so on.\n+#[deriving(Copy)]\n pub struct ExplicitRscope;\n \n-impl Copy for ExplicitRscope {}\n-\n impl RegionScope for ExplicitRscope {\n     fn default_region_bound(&self, _span: Span) -> Option<ty::Region> {\n         None"}, {"sha": "ef0d1bc3859fae53b63ab8a86a1fbf3e2f06aa3b", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0383f38d4b165ad2285efade1bbdbb780cdfe5/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=fa0383f38d4b165ad2285efade1bbdbb780cdfe5", "patch": "@@ -229,19 +229,16 @@ pub fn infer_variance(tcx: &ty::ctxt) {\n \n type VarianceTermPtr<'a> = &'a VarianceTerm<'a>;\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n struct InferredIndex(uint);\n \n-impl Copy for InferredIndex {}\n-\n+#[deriving(Copy)]\n enum VarianceTerm<'a> {\n     ConstantTerm(ty::Variance),\n     TransformTerm(VarianceTermPtr<'a>, VarianceTermPtr<'a>),\n     InferredTerm(InferredIndex),\n }\n \n-impl<'a> Copy for VarianceTerm<'a> {}\n-\n impl<'a> fmt::Show for VarianceTerm<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -268,14 +265,12 @@ struct TermsContext<'a, 'tcx: 'a> {\n     inferred_infos: Vec<InferredInfo<'a>> ,\n }\n \n-#[deriving(Show, PartialEq)]\n+#[deriving(Copy, Show, PartialEq)]\n enum ParamKind {\n     TypeParam,\n     RegionParam\n }\n \n-impl Copy for ParamKind {}\n-\n struct InferredInfo<'a> {\n     item_id: ast::NodeId,\n     kind: ParamKind,\n@@ -427,13 +422,12 @@ struct ConstraintContext<'a, 'tcx: 'a> {\n \n /// Declares that the variable `decl_id` appears in a location with\n /// variance `variance`.\n+#[deriving(Copy)]\n struct Constraint<'a> {\n     inferred: InferredIndex,\n     variance: &'a VarianceTerm<'a>,\n }\n \n-impl<'a> Copy for Constraint<'a> {}\n-\n fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n                                         krate: &ast::Crate)\n                                         -> ConstraintContext<'a, 'tcx> {"}]}