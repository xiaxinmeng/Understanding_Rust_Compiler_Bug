{"sha": "d340f63cca38b433b6ccc2a96776e67caeedfda4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDBmNjNjY2EzOGI0MzNiNmNjYzJhOTY3NzZlNjdjYWVlZGZkYTQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-27T03:37:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-27T03:37:24Z"}, "message": "Rollup merge of #83524 - faern:document-socketaddr-mem-layout, r=sfackler\n\nDocument that the SocketAddr memory representation is not stable\n\nIntended to help out with #78802. Work has been put into finding and fixing code that assumes the memory layout of `SocketAddrV4` and `SocketAddrV6`. But it turns out there are cases where new code continues to make the same assumption ([example](https://github.com/spacejam/seaslug/commit/96927dc2b7b918860a79c4eb6336051e52c6137a#diff-917db3d8ca6f862ebf42726b23c72a12b35e584e497ebdb24e474348d7c6ffb6R610-R621)).\n\nThe memory layout of a type in `std` is never part of the public API. Unless explicitly stated I guess. But since that is invalidly relied upon by a considerable amount of code for these particular types, it might make sense to explicitly document this. This can be temporary. Once #78802 lands it does not make sense to rely on the layout any longer, and this documentation can also be removed.", "tree": {"sha": "d755dcc5e8ea3676ca235b9c58202b55a9fcf2e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d755dcc5e8ea3676ca235b9c58202b55a9fcf2e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d340f63cca38b433b6ccc2a96776e67caeedfda4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgXqh1CRBK7hj4Ov3rIwAAdHIIACQT/79DTR7jqOwI2WGlhDvB\nO/E1naCQcIz175qZXb//9qv/6Ku38FQx5wwTQEGJERtT/ErhMUCQ+lQjX3Dcus02\n+3YbV388psMgxYpSbS2oDcbKyr9sBk8txrfvL+MJ1pPWFQmvnr/2NpuHw3v261iv\nXzgwb+K75nJyZ2+ILPgg4jM+pvZg+32tpJg5u1jLGRbM257fcJvymwLWo662Oluz\nyMazJcVUZhIpIzzaxhLDtHtlL35zP2OC3v5No6Za8Qw5jjEJUZe8QJdRo2vv4k2B\nTkxvVNNozhjhV4G9rKcmAiDlb4yFwwqMdTtBSp3EGtltDj1IgDpLs8XYef4WXDk=\n=+emY\n-----END PGP SIGNATURE-----\n", "payload": "tree d755dcc5e8ea3676ca235b9c58202b55a9fcf2e4\nparent e675d25506b560a8665d453b98a9685cf95a7f76\nparent 147316a09449b35737d2d1af8987a1da375efe22\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1616816244 +0900\ncommitter GitHub <noreply@github.com> 1616816244 +0900\n\nRollup merge of #83524 - faern:document-socketaddr-mem-layout, r=sfackler\n\nDocument that the SocketAddr memory representation is not stable\n\nIntended to help out with #78802. Work has been put into finding and fixing code that assumes the memory layout of `SocketAddrV4` and `SocketAddrV6`. But it turns out there are cases where new code continues to make the same assumption ([example](https://github.com/spacejam/seaslug/commit/96927dc2b7b918860a79c4eb6336051e52c6137a#diff-917db3d8ca6f862ebf42726b23c72a12b35e584e497ebdb24e474348d7c6ffb6R610-R621)).\n\nThe memory layout of a type in `std` is never part of the public API. Unless explicitly stated I guess. But since that is invalidly relied upon by a considerable amount of code for these particular types, it might make sense to explicitly document this. This can be temporary. Once #78802 lands it does not make sense to rely on the layout any longer, and this documentation can also be removed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d340f63cca38b433b6ccc2a96776e67caeedfda4", "html_url": "https://github.com/rust-lang/rust/commit/d340f63cca38b433b6ccc2a96776e67caeedfda4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d340f63cca38b433b6ccc2a96776e67caeedfda4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e675d25506b560a8665d453b98a9685cf95a7f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/e675d25506b560a8665d453b98a9685cf95a7f76", "html_url": "https://github.com/rust-lang/rust/commit/e675d25506b560a8665d453b98a9685cf95a7f76"}, {"sha": "147316a09449b35737d2d1af8987a1da375efe22", "url": "https://api.github.com/repos/rust-lang/rust/commits/147316a09449b35737d2d1af8987a1da375efe22", "html_url": "https://github.com/rust-lang/rust/commit/147316a09449b35737d2d1af8987a1da375efe22"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "55546a5b03771a1cbadc851a38f9e92af7ee2065", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d340f63cca38b433b6ccc2a96776e67caeedfda4/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d340f63cca38b433b6ccc2a96776e67caeedfda4/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=d340f63cca38b433b6ccc2a96776e67caeedfda4", "patch": "@@ -57,7 +57,8 @@ pub enum SocketAddr {\n /// See [`SocketAddr`] for a type encompassing both IPv4 and IPv6 socket addresses.\n ///\n /// The size of a `SocketAddrV4` struct may vary depending on the target operating\n-/// system.\n+/// system. Do not assume that this type has the same memory layout as the underlying\n+/// system representation.\n ///\n /// [IETF RFC 793]: https://tools.ietf.org/html/rfc793\n /// [`IPv4` address]: Ipv4Addr\n@@ -76,6 +77,8 @@ pub enum SocketAddr {\n #[derive(Copy)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SocketAddrV4 {\n+    // Do not assume that this struct is implemented as the underlying system representation.\n+    // The memory layout is not part of the stable interface that std exposes.\n     inner: c::sockaddr_in,\n }\n \n@@ -88,7 +91,8 @@ pub struct SocketAddrV4 {\n /// See [`SocketAddr`] for a type encompassing both IPv4 and IPv6 socket addresses.\n ///\n /// The size of a `SocketAddrV6` struct may vary depending on the target operating\n-/// system.\n+/// system. Do not assume that this type has the same memory layout as the underlying\n+/// system representation.\n ///\n /// [IETF RFC 2553, Section 3.3]: https://tools.ietf.org/html/rfc2553#section-3.3\n /// [`IPv6` address]: Ipv6Addr\n@@ -107,6 +111,8 @@ pub struct SocketAddrV4 {\n #[derive(Copy)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SocketAddrV6 {\n+    // Do not assume that this struct is implemented as the underlying system representation.\n+    // The memory layout is not part of the stable interface that std exposes.\n     inner: c::sockaddr_in6,\n }\n "}]}