{"sha": "3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlY2E3MGEwYzU1ZTlmMDgxZWJmZjlhN2FmNmZhMjUzOTBkOTliNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T08:51:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T08:51:39Z"}, "message": "Auto merge of #50072 - oli-obk:discriminants, r=eddyb\n\nAllow variant discriminant initializers to refer to other initializer\u2026\n\n\u2026s of the same enum\n\nr? @eddyb\n\nfixes the 2.4 failure of https://github.com/rust-lang/rust/issues/49765\n\ncc @durka @retep998", "tree": {"sha": "1b85970dba917bda7102960171c5cdd2dc6db92e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b85970dba917bda7102960171c5cdd2dc6db92e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "html_url": "https://github.com/rust-lang/rust/commit/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1515cded744d9d3597564ce3c08f6205f5816821", "url": "https://api.github.com/repos/rust-lang/rust/commits/1515cded744d9d3597564ce3c08f6205f5816821", "html_url": "https://github.com/rust-lang/rust/commit/1515cded744d9d3597564ce3c08f6205f5816821"}, {"sha": "195c9f47e9d92ceb110fdcb31056fe9f6780171c", "url": "https://api.github.com/repos/rust-lang/rust/commits/195c9f47e9d92ceb110fdcb31056fe9f6780171c", "html_url": "https://github.com/rust-lang/rust/commit/195c9f47e9d92ceb110fdcb31056fe9f6780171c"}], "stats": {"total": 195, "additions": 158, "deletions": 37}, "files": [{"sha": "de043668410763ea2dc4fdbde8d75cfe4abd6185", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "patch": "@@ -1982,32 +1982,38 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                     variant_index: usize)\n                                     -> Discr<'tcx> {\n-        let repr_type = self.repr.discr_type();\n-        let mut explicit_value = repr_type.initial_discriminant(tcx.global_tcx());\n+        let (val, offset) = self.discriminant_def_for_variant(variant_index);\n+        let explicit_value = val\n+            .and_then(|expr_did| self.eval_explicit_discr(tcx, expr_did))\n+            .unwrap_or_else(|| self.repr.discr_type().initial_discriminant(tcx.global_tcx()));\n+        explicit_value.checked_add(tcx, offset as u128).0\n+    }\n+\n+    /// Yields a DefId for the discriminant and an offset to add to it\n+    /// Alternatively, if there is no explicit discriminant, returns the\n+    /// inferred discriminant directly\n+    pub fn discriminant_def_for_variant(\n+        &self,\n+        variant_index: usize,\n+    ) -> (Option<DefId>, usize) {\n         let mut explicit_index = variant_index;\n+        let expr_did;\n         loop {\n             match self.variants[explicit_index].discr {\n-                ty::VariantDiscr::Relative(0) => break,\n+                ty::VariantDiscr::Relative(0) => {\n+                    expr_did = None;\n+                    break;\n+                },\n                 ty::VariantDiscr::Relative(distance) => {\n                     explicit_index -= distance;\n                 }\n-                ty::VariantDiscr::Explicit(expr_did) => {\n-                    match self.eval_explicit_discr(tcx, expr_did) {\n-                        Some(discr) => {\n-                            explicit_value = discr;\n-                            break;\n-                        },\n-                        None => {\n-                            if explicit_index == 0 {\n-                                break;\n-                            }\n-                            explicit_index -= 1;\n-                        }\n-                    }\n+                ty::VariantDiscr::Explicit(did) => {\n+                    expr_did = Some(did);\n+                    break;\n                 }\n             }\n         }\n-        explicit_value.checked_add(tcx, (variant_index - explicit_index) as u128).0\n+        (expr_did, variant_index - explicit_index)\n     }\n \n     pub fn destructor(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Destructor> {"}, {"sha": "d0c352319c8c5bee8bf5c9d38143c0c1be7f09ce", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 75, "deletions": 3, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "patch": "@@ -589,12 +589,84 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // Check to see if this cast is a \"coercion cast\", where the cast is actually done\n             // using a coercion (or is a no-op).\n             if let Some(&TyCastKind::CoercionCast) = cx.tables()\n-                                                       .cast_kinds()\n-                                                       .get(source.hir_id) {\n+                                                    .cast_kinds()\n+                                                    .get(source.hir_id) {\n                 // Convert the lexpr to a vexpr.\n                 ExprKind::Use { source: source.to_ref() }\n             } else {\n-                ExprKind::Cast { source: source.to_ref() }\n+                // check whether this is casting an enum variant discriminant\n+                // to prevent cycles, we refer to the discriminant initializer\n+                // which is always an integer and thus doesn't need to know the\n+                // enum's layout (or its tag type) to compute it during const eval\n+                // Example:\n+                // enum Foo {\n+                //     A,\n+                //     B = A as isize + 4,\n+                // }\n+                // The correct solution would be to add symbolic computations to miri,\n+                // so we wouldn't have to compute and store the actual value\n+                let var = if let hir::ExprPath(ref qpath) = source.node {\n+                    let def = cx.tables().qpath_def(qpath, source.hir_id);\n+                    cx\n+                        .tables()\n+                        .node_id_to_type(source.hir_id)\n+                        .ty_adt_def()\n+                        .and_then(|adt_def| {\n+                        match def {\n+                            Def::VariantCtor(variant_id, CtorKind::Const) => {\n+                                let idx = adt_def.variant_index_with_id(variant_id);\n+                                let (d, o) = adt_def.discriminant_def_for_variant(idx);\n+                                use rustc::ty::util::IntTypeExt;\n+                                let ty = adt_def.repr.discr_type().to_ty(cx.tcx());\n+                                Some((d, o, ty))\n+                            }\n+                            _ => None,\n+                        }\n+                    })\n+                } else {\n+                    None\n+                };\n+                let source = if let Some((did, offset, ty)) = var {\n+                    let mk_const = |val| Expr {\n+                        temp_lifetime,\n+                        ty,\n+                        span: expr.span,\n+                        kind: ExprKind::Literal {\n+                            literal: Literal::Value {\n+                                value: cx.tcx().mk_const(ty::Const {\n+                                    val,\n+                                    ty,\n+                                }),\n+                            },\n+                        },\n+                    }.to_ref();\n+                    let offset = mk_const(\n+                        ConstVal::Value(Value::ByVal(PrimVal::Bytes(offset as u128))),\n+                    );\n+                    match did {\n+                        Some(did) => {\n+                            // in case we are offsetting from a computed discriminant\n+                            // and not the beginning of discriminants (which is always `0`)\n+                            let substs = Substs::identity_for_item(cx.tcx(), did);\n+                            let lhs = mk_const(ConstVal::Unevaluated(did, substs));\n+                            let bin = ExprKind::Binary {\n+                                op: BinOp::Add,\n+                                lhs,\n+                                rhs: offset,\n+                            };\n+                            Expr {\n+                                temp_lifetime,\n+                                ty,\n+                                span: expr.span,\n+                                kind: bin,\n+                            }.to_ref()\n+                        },\n+                        None => offset,\n+                    }\n+                } else {\n+                    source.to_ref()\n+                };\n+                ExprKind::Cast { source }\n             }\n         }\n         hir::ExprType(ref source, _) => return source.make_mirror(cx),"}, {"sha": "ba38a42092e006aed83dd5ef9b401a28388f44ba", "filename": "src/test/ui/const-eval/enum_discr.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Ftest%2Fui%2Fconst-eval%2Fenum_discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Ftest%2Fui%2Fconst-eval%2Fenum_discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fenum_discr.rs?ref=3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// run-pass\n+\n+enum Foo {\n+    X = 42,\n+    Y = Foo::X as isize - 3,\n+}\n+\n+enum Bar {\n+    X,\n+    Y = Bar::X as isize + 2,\n+}\n+\n+enum Boo {\n+    X = Boo::Y as isize * 2,\n+    Y = 9,\n+}\n+\n+fn main() {\n+    assert_eq!(Foo::X as isize, 42);\n+    assert_eq!(Foo::Y as isize, 39);\n+    assert_eq!(Bar::X as isize, 0);\n+    assert_eq!(Bar::Y as isize, 2);\n+    assert_eq!(Boo::X as isize, 18);\n+    assert_eq!(Boo::Y as isize, 9);\n+}"}, {"sha": "6ff46a7e21fda484d5b26e8ecd382e8ede4c394b", "filename": "src/test/ui/issue-23302-1.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Ftest%2Fui%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Ftest%2Fui%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-1.stderr?ref=3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "patch": "@@ -1,11 +1,15 @@\n-error[E0391]: cycle detected when const-evaluating `X::A::{{initializer}}`\n+error[E0391]: cycle detected when processing `X::A::{{initializer}}`\n   --> $DIR/issue-23302-1.rs:14:9\n    |\n LL |     A = X::A as isize, //~ ERROR E0391\n-   |         ^^^^\n+   |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires computing layout of `X`...\n-   = note: ...which again requires const-evaluating `X::A::{{initializer}}`, completing the cycle\n+   = note: ...which again requires processing `X::A::{{initializer}}`, completing the cycle\n+note: cycle used when const-evaluating `X::A::{{initializer}}`\n+  --> $DIR/issue-23302-1.rs:14:9\n+   |\n+LL |     A = X::A as isize, //~ ERROR E0391\n+   |         ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6b72a5b544dcefc260750d3009eb253aac443bf6", "filename": "src/test/ui/issue-23302-2.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Ftest%2Fui%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Ftest%2Fui%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-2.stderr?ref=3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "patch": "@@ -1,11 +1,15 @@\n-error[E0391]: cycle detected when const-evaluating `Y::A::{{initializer}}`\n+error[E0391]: cycle detected when processing `Y::A::{{initializer}}`\n   --> $DIR/issue-23302-2.rs:14:9\n    |\n LL |     A = Y::B as isize, //~ ERROR E0391\n-   |         ^^^^\n+   |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires computing layout of `Y`...\n-   = note: ...which again requires const-evaluating `Y::A::{{initializer}}`, completing the cycle\n+   = note: ...which again requires processing `Y::A::{{initializer}}`, completing the cycle\n+note: cycle used when const-evaluating `Y::A::{{initializer}}`\n+  --> $DIR/issue-23302-2.rs:14:9\n+   |\n+LL |     A = Y::B as isize, //~ ERROR E0391\n+   |         ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7199fffd386b4a89a7c9cf7bc7dcc74ae426d43a", "filename": "src/test/ui/issue-36163.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Ftest%2Fui%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c/src%2Ftest%2Fui%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36163.stderr?ref=3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "patch": "@@ -1,21 +1,20 @@\n-error[E0391]: cycle detected when const-evaluating `Foo::B::{{initializer}}`\n+error[E0391]: cycle detected when processing `Foo::B::{{initializer}}`\n   --> $DIR/issue-36163.rs:14:9\n    |\n LL |     B = A, //~ ERROR E0391\n    |         ^\n    |\n-note: ...which requires processing `Foo::B::{{initializer}}`...\n+note: ...which requires processing `A`...\n+  --> $DIR/issue-36163.rs:11:18\n+   |\n+LL | const A: isize = Foo::B as isize;\n+   |                  ^^^^^^^^^^^^^^^\n+   = note: ...which again requires processing `Foo::B::{{initializer}}`, completing the cycle\n+note: cycle used when const-evaluating `Foo::B::{{initializer}}`\n   --> $DIR/issue-36163.rs:14:9\n    |\n LL |     B = A, //~ ERROR E0391\n    |         ^\n-note: ...which requires const-evaluating `A`...\n-  --> $DIR/issue-36163.rs:11:18\n-   |\n-LL | const A: isize = Foo::B as isize;\n-   |                  ^^^^^^\n-note: ...which requires computing layout of `Foo`...\n-   = note: ...which again requires const-evaluating `Foo::B::{{initializer}}`, completing the cycle\n \n error: aborting due to previous error\n "}]}