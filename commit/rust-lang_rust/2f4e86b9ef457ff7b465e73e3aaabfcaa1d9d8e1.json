{"sha": "2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNGU4NmI5ZWY0NTdmZjdiNDY1ZTczZTNhYWFiZmNhYTFkOWQ4ZTE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-30T16:30:12Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-31T01:18:42Z"}, "message": "Enforce diverging let...else", "tree": {"sha": "0a3ddf2ab5a4753d2b99b64742019c5fde1b5c7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a3ddf2ab5a4753d2b99b64742019c5fde1b5c7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1", "html_url": "https://github.com/rust-lang/rust/commit/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4439a3150308490a00773aa4f2a5ef23586a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4439a3150308490a00773aa4f2a5ef23586a42", "html_url": "https://github.com/rust-lang/rust/commit/cb4439a3150308490a00773aa4f2a5ef23586a42"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "d54933841fd4e1142c2a7484402c88d8e0d0833e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1", "patch": "@@ -781,6 +781,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     );\n                 }\n             }\n+            ObligationCauseCode::LetElse => {\n+                err.help(\"try adding a diverging expression, such as `return` or `panic!(..)`\");\n+                err.help(\"...or use `match` instead of `let...else`\");\n+            }\n             _ => (),\n         }\n     }\n@@ -2592,6 +2596,7 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n             }\n             IfExpression { .. } => Error0308(\"`if` and `else` have incompatible types\"),\n             IfExpressionWithNoElse => Error0317(\"`if` may be missing an `else` clause\"),\n+            LetElse => Error0308(\"`else` clause of `let...else` does not diverge\"),\n             MainFunctionType => Error0580(\"`main` function has wrong type\"),\n             StartFunctionType => Error0308(\"`#[start]` function has wrong type\"),\n             IntrinsicType => Error0308(\"intrinsic has wrong type\"),"}, {"sha": "74edb17fe32f1af9e4daccc8c1ab447c412893e8", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1", "patch": "@@ -305,6 +305,9 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Intrinsic has wrong type\n     IntrinsicType,\n \n+    /// A let else block does not diverge\n+    LetElse,\n+\n     /// Method receiver\n     MethodReceiver,\n "}, {"sha": "db3432b01422fabe81afa2654993521cb3672be6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1", "patch": "@@ -1928,7 +1928,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::OpaqueType\n             | ObligationCauseCode::MiscObligation\n             | ObligationCauseCode::WellFormed(..)\n-            | ObligationCauseCode::MatchImpl(..) => {}\n+            | ObligationCauseCode::MatchImpl(..)\n+            | ObligationCauseCode::ReturnType\n+            | ObligationCauseCode::ReturnValue(_)\n+            | ObligationCauseCode::BlockTailExpression(_)\n+            | ObligationCauseCode::LetElse => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");\n             }\n@@ -2338,9 +2342,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     predicate\n                 ));\n             }\n-            ObligationCauseCode::ReturnType\n-            | ObligationCauseCode::ReturnValue(_)\n-            | ObligationCauseCode::BlockTailExpression(_) => (),\n             ObligationCauseCode::TrivialBound => {\n                 err.help(\"see issue #48214\");\n                 if tcx.sess.opts.unstable_features.is_nightly_build() {"}, {"sha": "10f5b000aca1c84e3a30eb23aac00979d711ca98", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=2f4e86b9ef457ff7b465e73e3aaabfcaa1d9d8e1", "patch": "@@ -849,7 +849,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         coerce.coerce(self, &self.misc(sp), then_expr, then_ty);\n \n         if let Some(else_expr) = opt_else_expr {\n-            let else_ty = self.check_expr_with_expectation(else_expr, expected);\n+            let else_ty = if sp.desugaring_kind() == Some(DesugaringKind::LetElse) {\n+                // todo introduce `check_expr_with_expectation(.., Expectation::LetElse)`\n+                //   for errors that point to the offending expression rather than the entire block.\n+                //   We could use `check_expr_eq_type(.., tcx.types.never)`, but then there is no\n+                //   way to detect that the expected type originated from let-else and provide\n+                //   a customized error.\n+                let else_ty = self.check_expr(else_expr);\n+                let cause = self.cause(else_expr.span, ObligationCauseCode::LetElse);\n+\n+                if let Some(mut err) =\n+                    self.demand_eqtype_with_origin(&cause, self.tcx.types.never, else_ty)\n+                {\n+                    err.emit();\n+                    self.tcx.ty_error()\n+                } else {\n+                    else_ty\n+                }\n+            } else {\n+                self.check_expr_with_expectation(else_expr, expected)\n+            };\n             let else_diverges = self.diverges.get();\n \n             let opt_suggest_box_span ="}]}