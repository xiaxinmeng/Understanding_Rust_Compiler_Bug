{"sha": "86e613c632ce156360bdf6e80f6f82ed5ab3b838", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZTYxM2M2MzJjZTE1NjM2MGJkZjZlODBmNmY4MmVkNWFiM2I4Mzg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-29T20:18:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T06:21:19Z"}, "message": "compiletest: Remove usage of fmt!", "tree": {"sha": "60d6a59188a2f80457f279f86d24737fa6db5343", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d6a59188a2f80457f279f86d24737fa6db5343"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86e613c632ce156360bdf6e80f6f82ed5ab3b838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86e613c632ce156360bdf6e80f6f82ed5ab3b838", "html_url": "https://github.com/rust-lang/rust/commit/86e613c632ce156360bdf6e80f6f82ed5ab3b838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86e613c632ce156360bdf6e80f6f82ed5ab3b838/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da24c0d32f8a5ce74268f416bbdab2e61a34976d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da24c0d32f8a5ce74268f416bbdab2e61a34976d", "html_url": "https://github.com/rust-lang/rust/commit/da24c0d32f8a5ce74268f416bbdab2e61a34976d"}], "stats": {"total": 174, "additions": 87, "deletions": 87}, "files": [{"sha": "bf920bcaf75afdea3ea66b922e478890a956c8f2", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=86e613c632ce156360bdf6e80f6f82ed5ab3b838", "patch": "@@ -82,23 +82,23 @@ pub fn parse_config(args: ~[~str]) -> config {\n     let argv0 = args[0].clone();\n     let args_ = args.tail();\n     if args[1] == ~\"-h\" || args[1] == ~\"--help\" {\n-        let message = fmt!(\"Usage: %s [OPTIONS] [TESTNAME...]\", argv0);\n+        let message = format!(\"Usage: {} [OPTIONS] [TESTNAME...]\", argv0);\n         println(getopts::groups::usage(message, groups));\n         println(\"\");\n-        fail!()\n+        fail2!()\n     }\n \n     let matches =\n         &match getopts::groups::getopts(args_, groups) {\n           Ok(m) => m,\n-          Err(f) => fail!(f.to_err_msg())\n+          Err(f) => fail2!(f.to_err_msg())\n         };\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n-        let message = fmt!(\"Usage: %s [OPTIONS]  [TESTNAME...]\", argv0);\n+        let message = format!(\"Usage: {} [OPTIONS]  [TESTNAME...]\", argv0);\n         println(getopts::groups::usage(message, groups));\n         println(\"\");\n-        fail!()\n+        fail2!()\n     }\n \n     fn opt_path(m: &getopts::Matches, nm: &str) -> Path {\n@@ -152,29 +152,29 @@ pub fn parse_config(args: ~[~str]) -> config {\n \n pub fn log_config(config: &config) {\n     let c = config;\n-    logv(c, fmt!(\"configuration:\"));\n-    logv(c, fmt!(\"compile_lib_path: %s\", config.compile_lib_path));\n-    logv(c, fmt!(\"run_lib_path: %s\", config.run_lib_path));\n-    logv(c, fmt!(\"rustc_path: %s\", config.rustc_path.to_str()));\n-    logv(c, fmt!(\"src_base: %s\", config.src_base.to_str()));\n-    logv(c, fmt!(\"build_base: %s\", config.build_base.to_str()));\n-    logv(c, fmt!(\"stage_id: %s\", config.stage_id));\n-    logv(c, fmt!(\"mode: %s\", mode_str(config.mode)));\n-    logv(c, fmt!(\"run_ignored: %b\", config.run_ignored));\n-    logv(c, fmt!(\"filter: %s\", opt_str(&config.filter)));\n-    logv(c, fmt!(\"runtool: %s\", opt_str(&config.runtool)));\n-    logv(c, fmt!(\"rustcflags: %s\", opt_str(&config.rustcflags)));\n-    logv(c, fmt!(\"jit: %b\", config.jit));\n-    logv(c, fmt!(\"target: %s\", config.target));\n-    logv(c, fmt!(\"adb_path: %s\", config.adb_path));\n-    logv(c, fmt!(\"adb_test_dir: %s\", config.adb_test_dir));\n-    logv(c, fmt!(\"adb_device_status: %b\", config.adb_device_status));\n+    logv(c, format!(\"configuration:\"));\n+    logv(c, format!(\"compile_lib_path: {}\", config.compile_lib_path));\n+    logv(c, format!(\"run_lib_path: {}\", config.run_lib_path));\n+    logv(c, format!(\"rustc_path: {}\", config.rustc_path.to_str()));\n+    logv(c, format!(\"src_base: {}\", config.src_base.to_str()));\n+    logv(c, format!(\"build_base: {}\", config.build_base.to_str()));\n+    logv(c, format!(\"stage_id: {}\", config.stage_id));\n+    logv(c, format!(\"mode: {}\", mode_str(config.mode)));\n+    logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n+    logv(c, format!(\"filter: {}\", opt_str(&config.filter)));\n+    logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n+    logv(c, format!(\"rustcflags: {}\", opt_str(&config.rustcflags)));\n+    logv(c, format!(\"jit: {}\", config.jit));\n+    logv(c, format!(\"target: {}\", config.target));\n+    logv(c, format!(\"adb_path: {}\", config.adb_path));\n+    logv(c, format!(\"adb_test_dir: {}\", config.adb_test_dir));\n+    logv(c, format!(\"adb_device_status: {}\", config.adb_device_status));\n     match config.test_shard {\n         None => logv(c, ~\"test_shard: (all)\"),\n-        Some((a,b)) => logv(c, fmt!(\"test_shard: %u.%u\", a, b))\n+        Some((a,b)) => logv(c, format!(\"test_shard: {}.{}\", a, b))\n     }\n-    logv(c, fmt!(\"verbose: %b\", config.verbose));\n-    logv(c, fmt!(\"\\n\"));\n+    logv(c, format!(\"verbose: {}\", config.verbose));\n+    logv(c, format!(\"\\n\"));\n }\n \n pub fn opt_str<'a>(maybestr: &'a Option<~str>) -> &'a str {\n@@ -203,7 +203,7 @@ pub fn str_mode(s: ~str) -> mode {\n       ~\"pretty\" => mode_pretty,\n       ~\"debug-info\" => mode_debug_info,\n       ~\"codegen\" => mode_codegen,\n-      _ => fail!(\"invalid mode\")\n+      _ => fail2!(\"invalid mode\")\n     }\n }\n \n@@ -226,7 +226,7 @@ pub fn run_tests(config: &config) {\n     // For context, see #8904\n     rt::test::prepare_for_lots_of_tests();\n     let res = test::run_tests_console(&opts, tests);\n-    if !res { fail!(\"Some tests failed\"); }\n+    if !res { fail2!(\"Some tests failed\"); }\n }\n \n pub fn test_opts(config: &config) -> test::TestOpts {\n@@ -244,13 +244,13 @@ pub fn test_opts(config: &config) -> test::TestOpts {\n }\n \n pub fn make_tests(config: &config) -> ~[test::TestDescAndFn] {\n-    debug!(\"making tests from %s\",\n+    debug2!(\"making tests from {}\",\n            config.src_base.to_str());\n     let mut tests = ~[];\n     let dirs = os::list_dir_path(&config.src_base);\n     for file in dirs.iter() {\n         let file = file.clone();\n-        debug!(\"inspecting file %s\", file.to_str());\n+        debug2!(\"inspecting file {}\", file.to_str());\n         if is_test(config, &file) {\n             let t = do make_test(config, &file) {\n                 match config.mode {\n@@ -306,12 +306,12 @@ pub fn make_test_name(config: &config, testfile: &Path) -> test::TestName {\n         let filename = path.filename();\n         let p = path.pop();\n         let dir = p.filename();\n-        fmt!(\"%s/%s\", dir.unwrap_or(\"\"), filename.unwrap_or(\"\"))\n+        format!(\"{}/{}\", dir.unwrap_or(\"\"), filename.unwrap_or(\"\"))\n     }\n \n-    test::DynTestName(fmt!(\"[%s] %s\",\n-                           mode_str(config.mode),\n-                           shorten(testfile)))\n+    test::DynTestName(format!(\"[{}] {}\",\n+                              mode_str(config.mode),\n+                              shorten(testfile)))\n }\n \n pub fn make_test_closure(config: &config, testfile: &Path) -> test::TestFn {"}, {"sha": "02195e684e3855d872c3d397cbf4a929e0e8dffa", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=86e613c632ce156360bdf6e80f6f82ed5ab3b838", "patch": "@@ -56,7 +56,7 @@ fn parse_expected(line_num: uint, line: ~str) -> ~[ExpectedError] {\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n     let msg = line.slice(idx, len).to_owned();\n \n-    debug!(\"line=%u kind=%s msg=%s\", line_num - adjust_line, kind, msg);\n+    debug2!(\"line={} kind={} msg={}\", line_num - adjust_line, kind, msg);\n \n     return ~[ExpectedError{line: line_num - adjust_line, kind: kind,\n                            msg: msg}];"}, {"sha": "36780abc7eefd600a7753f49fdb693fcfef3530d", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=86e613c632ce156360bdf6e80f6f82ed5ab3b838", "patch": "@@ -150,7 +150,7 @@ fn parse_exec_env(line: &str) -> Option<(~str, ~str)> {\n               let end = strs.pop();\n               (strs.pop(), end)\n           }\n-          n => fail!(\"Expected 1 or 2 strings, not %u\", n)\n+          n => fail2!(\"Expected 1 or 2 strings, not {}\", n)\n         }\n     }\n }\n@@ -179,7 +179,7 @@ fn parse_name_value_directive(line: &str,\n         Some(colon) => {\n             let value = line.slice(colon + keycolon.len(),\n                                    line.len()).to_owned();\n-            debug!(\"%s: %s\", directive,  value);\n+            debug2!(\"{}: {}\", directive,  value);\n             Some(value)\n         }\n         None => None"}, {"sha": "2d55fa775d7d70fb82aae41760727165d4a4b20f", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=86e613c632ce156360bdf6e80f6f82ed5ab3b838", "patch": "@@ -63,9 +63,9 @@ pub fn run_metrics(config: config, testfile: ~str, mm: &mut MetricMap) {\n         io::stdout().write_str(\"\\n\\n\");\n     }\n     let testfile = Path(testfile);\n-    debug!(\"running %s\", testfile.to_str());\n+    debug2!(\"running {}\", testfile.to_str());\n     let props = load_props(&testfile);\n-    debug!(\"loaded props\");\n+    debug2!(\"loaded props\");\n     match config.mode {\n       mode_compile_fail => run_cfail_test(&config, &props, &testfile),\n       mode_run_fail => run_rfail_test(&config, &props, &testfile),\n@@ -136,8 +136,8 @@ fn check_correct_failure_status(ProcRes: &ProcRes) {\n     static RUST_ERR: int = 101;\n     if ProcRes.status != RUST_ERR {\n         fatal_ProcRes(\n-            fmt!(\"failure produced the wrong error code: %d\",\n-                 ProcRes.status),\n+            format!(\"failure produced the wrong error code: {}\",\n+                    ProcRes.status),\n             ProcRes);\n     }\n }\n@@ -174,11 +174,11 @@ fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n \n     let mut round = 0;\n     while round < rounds {\n-        logv(config, fmt!(\"pretty-printing round %d\", round));\n+        logv(config, format!(\"pretty-printing round {}\", round));\n         let ProcRes = print_source(config, testfile, srcs[round].clone());\n \n         if ProcRes.status != 0 {\n-            fatal_ProcRes(fmt!(\"pretty-printing failed in round %d\", round),\n+            fatal_ProcRes(format!(\"pretty-printing failed in round {}\", round),\n                           &ProcRes);\n         }\n \n@@ -228,19 +228,19 @@ fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n         if expected != actual {\n             error(~\"pretty-printed source does not match expected source\");\n             let msg =\n-                fmt!(\"\\n\\\n+                format!(\"\\n\\\n expected:\\n\\\n ------------------------------------------\\n\\\n-%s\\n\\\n+{}\\n\\\n ------------------------------------------\\n\\\n actual:\\n\\\n ------------------------------------------\\n\\\n-%s\\n\\\n+{}\\n\\\n ------------------------------------------\\n\\\n \\n\",\n                      expected, actual);\n             io::stdout().write_str(msg);\n-            fail!();\n+            fail2!();\n         }\n     }\n \n@@ -285,7 +285,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n     let script_str = [~\"set charset UTF-8\",\n                       cmds,\n                       ~\"quit\\n\"].connect(\"\\n\");\n-    debug!(\"script_str = %s\", script_str);\n+    debug2!(\"script_str = {}\", script_str);\n     dump_output_file(config, testfile, script_str, \"debugger.script\");\n \n     // run debugger script with gdb\n@@ -318,8 +318,8 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n             }\n         }\n         if i != num_check_lines {\n-            fatal_ProcRes(fmt!(\"line not found in debugger output: %s\",\n-                               check_lines[i]), &ProcRes);\n+            fatal_ProcRes(format!(\"line not found in debugger output: {}\",\n+                                  check_lines[i]), &ProcRes);\n         }\n     }\n }\n@@ -340,10 +340,10 @@ fn check_error_patterns(props: &TestProps,\n     let mut done = false;\n     for line in ProcRes.stderr.line_iter() {\n         if line.contains(*next_err_pat) {\n-            debug!(\"found error pattern %s\", *next_err_pat);\n+            debug2!(\"found error pattern {}\", *next_err_pat);\n             next_err_idx += 1u;\n             if next_err_idx == props.error_patterns.len() {\n-                debug!(\"found all error patterns\");\n+                debug2!(\"found all error patterns\");\n                 done = true;\n                 break;\n             }\n@@ -355,11 +355,11 @@ fn check_error_patterns(props: &TestProps,\n     let missing_patterns =\n         props.error_patterns.slice(next_err_idx, props.error_patterns.len());\n     if missing_patterns.len() == 1u {\n-        fatal_ProcRes(fmt!(\"error pattern '%s' not found!\",\n-                           missing_patterns[0]), ProcRes);\n+        fatal_ProcRes(format!(\"error pattern '{}' not found!\",\n+                              missing_patterns[0]), ProcRes);\n     } else {\n         for pattern in missing_patterns.iter() {\n-            error(fmt!(\"error pattern '%s' not found!\", *pattern));\n+            error(format!(\"error pattern '{}' not found!\", *pattern));\n         }\n         fatal_ProcRes(~\"multiple error patterns not found\", ProcRes);\n     }\n@@ -378,7 +378,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n     }\n \n     let prefixes = expected_errors.iter().map(|ee| {\n-        fmt!(\"%s:%u:\", testfile.to_str(), ee.line)\n+        format!(\"{}:{}:\", testfile.to_str(), ee.line)\n     }).collect::<~[~str]>();\n \n     fn to_lower( s : &str ) -> ~str {\n@@ -415,7 +415,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n         let mut was_expected = false;\n         for (i, ee) in expected_errors.iter().enumerate() {\n             if !found_flags[i] {\n-                debug!(\"prefix=%s ee.kind=%s ee.msg=%s line=%s\",\n+                debug2!(\"prefix={} ee.kind={} ee.msg={} line={}\",\n                        prefixes[i], ee.kind, ee.msg, line);\n                 if (prefix_matches(line, prefixes[i]) &&\n                     line.contains(ee.kind) &&\n@@ -433,7 +433,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n         }\n \n         if !was_expected && is_compiler_error_or_warning(line) {\n-            fatal_ProcRes(fmt!(\"unexpected compiler error or warning: '%s'\",\n+            fatal_ProcRes(format!(\"unexpected compiler error or warning: '{}'\",\n                                line),\n                           ProcRes);\n         }\n@@ -442,7 +442,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n     for (i, &flag) in found_flags.iter().enumerate() {\n         if !flag {\n             let ee = &expected_errors[i];\n-            fatal_ProcRes(fmt!(\"expected %s on line %u not found: %s\",\n+            fatal_ProcRes(format!(\"expected {} on line {} not found: {}\",\n                                ee.kind, ee.line, ee.msg), ProcRes);\n         }\n     }\n@@ -591,7 +591,7 @@ fn compose_and_run_compiler(\n                                      config.compile_lib_path, None);\n         if auxres.status != 0 {\n             fatal_ProcRes(\n-                fmt!(\"auxiliary build of %s failed to compile: \",\n+                format!(\"auxiliary build of {} failed to compile: \",\n                      abs_ab.to_str()),\n                 &auxres);\n         }\n@@ -615,7 +615,7 @@ fn compose_and_run_compiler(\n fn ensure_dir(path: &Path) {\n     if os::path_is_dir(path) { return; }\n     if !os::make_dir(path, 0x1c0i32) {\n-        fail!(\"can't make dir %s\", path.to_str());\n+        fail2!(\"can't make dir {}\", path.to_str());\n     }\n }\n \n@@ -678,7 +678,7 @@ fn program_output(config: &config, testfile: &Path, lib_path: &str, prog: ~str,\n     let cmdline =\n         {\n             let cmdline = make_cmdline(lib_path, prog, args);\n-            logv(config, fmt!(\"executing %s\", cmdline));\n+            logv(config, format!(\"executing {}\", cmdline));\n             cmdline\n         };\n     let procsrv::Result{ out, err, status } =\n@@ -695,19 +695,19 @@ fn program_output(config: &config, testfile: &Path, lib_path: &str, prog: ~str,\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n fn make_cmdline(_libpath: &str, prog: &str, args: &[~str]) -> ~str {\n-    fmt!(\"%s %s\", prog, args.connect(\" \"))\n+    format!(\"{} {}\", prog, args.connect(\" \"))\n }\n \n #[cfg(target_os = \"win32\")]\n fn make_cmdline(libpath: &str, prog: &str, args: &[~str]) -> ~str {\n-    fmt!(\"%s %s %s\", lib_path_cmd_prefix(libpath), prog,\n+    format!(\"{} {} {}\", lib_path_cmd_prefix(libpath), prog,\n          args.connect(\" \"))\n }\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n // for diagnostic purposes\n fn lib_path_cmd_prefix(path: &str) -> ~str {\n-    fmt!(\"%s=\\\"%s\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n+    format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n }\n \n fn dump_output(config: &config, testfile: &Path, out: &str, err: &str) {\n@@ -744,8 +744,8 @@ fn output_base_name(config: &config, testfile: &Path) -> Path {\n \n fn maybe_dump_to_stdout(config: &config, out: &str, err: &str) {\n     if config.verbose {\n-        let sep1 = fmt!(\"------%s------------------------------\", \"stdout\");\n-        let sep2 = fmt!(\"------%s------------------------------\", \"stderr\");\n+        let sep1 = format!(\"------{}------------------------------\", \"stdout\");\n+        let sep2 = format!(\"------{}------------------------------\", \"stderr\");\n         let sep3 = ~\"------------------------------------------\";\n         io::stdout().write_line(sep1);\n         io::stdout().write_line(out);\n@@ -755,27 +755,27 @@ fn maybe_dump_to_stdout(config: &config, out: &str, err: &str) {\n     }\n }\n \n-fn error(err: ~str) { io::stdout().write_line(fmt!(\"\\nerror: %s\", err)); }\n+fn error(err: ~str) { io::stdout().write_line(format!(\"\\nerror: {}\", err)); }\n \n-fn fatal(err: ~str) -> ! { error(err); fail!(); }\n+fn fatal(err: ~str) -> ! { error(err); fail2!(); }\n \n fn fatal_ProcRes(err: ~str, ProcRes: &ProcRes) -> ! {\n     let msg =\n-        fmt!(\"\\n\\\n-error: %s\\n\\\n-command: %s\\n\\\n+        format!(\"\\n\\\n+error: {}\\n\\\n+command: {}\\n\\\n stdout:\\n\\\n ------------------------------------------\\n\\\n-%s\\n\\\n+{}\\n\\\n ------------------------------------------\\n\\\n stderr:\\n\\\n ------------------------------------------\\n\\\n-%s\\n\\\n+{}\\n\\\n ------------------------------------------\\n\\\n \\n\",\n              err, ProcRes.cmdline, ProcRes.stdout, ProcRes.stderr);\n     io::stdout().write_str(msg);\n-    fail!();\n+    fail2!();\n }\n \n fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n@@ -794,23 +794,23 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n         ~[(~\"\",~\"\")], Some(~\"\"));\n \n     if config.verbose {\n-        io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n+        io::stdout().write_str(format!(\"push ({}) {} {} {}\",\n             config.target, args.prog,\n             copy_result.out, copy_result.err));\n     }\n \n-    logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n+    logv(config, format!(\"executing ({}) {}\", config.target, cmdline));\n \n     let mut runargs = ~[];\n \n     // run test via adb_run_wrapper\n     runargs.push(~\"shell\");\n     for (key, val) in env.move_iter() {\n-        runargs.push(fmt!(\"%s=%s\", key, val));\n+        runargs.push(format!(\"{}={}\", key, val));\n     }\n-    runargs.push(fmt!(\"%s/adb_run_wrapper.sh\", config.adb_test_dir));\n-    runargs.push(fmt!(\"%s\", config.adb_test_dir));\n-    runargs.push(fmt!(\"%s\", prog_short));\n+    runargs.push(format!(\"{}/adb_run_wrapper.sh\", config.adb_test_dir));\n+    runargs.push(format!(\"{}\", config.adb_test_dir));\n+    runargs.push(format!(\"{}\", prog_short));\n \n     for tv in args.args.iter() {\n         runargs.push(tv.to_owned());\n@@ -822,7 +822,7 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n     runargs = ~[];\n     runargs.push(~\"shell\");\n     runargs.push(~\"cat\");\n-    runargs.push(fmt!(\"%s/%s.exitcode\", config.adb_test_dir, prog_short));\n+    runargs.push(format!(\"{}/{}.exitcode\", config.adb_test_dir, prog_short));\n \n     let procsrv::Result{ out: exitcode_out, err: _, status: _ } =\n         procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")],\n@@ -841,7 +841,7 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n     runargs = ~[];\n     runargs.push(~\"shell\");\n     runargs.push(~\"cat\");\n-    runargs.push(fmt!(\"%s/%s.stdout\", config.adb_test_dir, prog_short));\n+    runargs.push(format!(\"{}/{}.stdout\", config.adb_test_dir, prog_short));\n \n     let procsrv::Result{ out: stdout_out, err: _, status: _ } =\n         procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n@@ -850,7 +850,7 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n     runargs = ~[];\n     runargs.push(~\"shell\");\n     runargs.push(~\"cat\");\n-    runargs.push(fmt!(\"%s/%s.stderr\", config.adb_test_dir, prog_short));\n+    runargs.push(format!(\"{}/{}.stderr\", config.adb_test_dir, prog_short));\n \n     let procsrv::Result{ out: stderr_out, err: _, status: _ } =\n         procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n@@ -887,7 +887,7 @@ fn _arm_push_aux_shared_library(config: &config, testfile: &Path) {\n                 ~[(~\"\",~\"\")], Some(~\"\"));\n \n             if config.verbose {\n-                io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n+                io::stdout().write_str(format!(\"push ({}) {} {} {}\",\n                     config.target, file.to_str(),\n                     copy_result.out, copy_result.err));\n             }"}, {"sha": "59b8ba1c7ff30ef238e31927dd7ee0a3c306b3f7", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e613c632ce156360bdf6e80f6f82ed5ab3b838/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=86e613c632ce156360bdf6e80f6f82ed5ab3b838", "patch": "@@ -29,7 +29,7 @@ pub fn get_os(triple: &str) -> &'static str {\n             return os\n         }\n     }\n-    fail!(\"Cannot determine OS from triple\");\n+    fail2!(\"Cannot determine OS from triple\");\n }\n \n pub fn make_new_path(path: &str) -> ~str {\n@@ -38,7 +38,7 @@ pub fn make_new_path(path: &str) -> ~str {\n     // maintain the current value while adding our own\n     match getenv(lib_path_env_var()) {\n       Some(curr) => {\n-        fmt!(\"%s%s%s\", path, path_div(), curr)\n+        format!(\"{}{}{}\", path, path_div(), curr)\n       }\n       None => path.to_str()\n     }\n@@ -63,6 +63,6 @@ pub fn path_div() -> ~str { ~\":\" }\n pub fn path_div() -> ~str { ~\";\" }\n \n pub fn logv(config: &config, s: ~str) {\n-    debug!(\"%s\", s);\n+    debug2!(\"{}\", s);\n     if config.verbose { io::println(s); }\n }"}]}