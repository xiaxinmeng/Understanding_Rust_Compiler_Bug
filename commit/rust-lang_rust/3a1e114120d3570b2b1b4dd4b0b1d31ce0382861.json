{"sha": "3a1e114120d3570b2b1b4dd4b0b1d31ce0382861", "node_id": "C_kwDOAAsO6NoAKDNhMWUxMTQxMjBkMzU3MGIyYjFiNGRkNGIwYjFkMzFjZTAzODI4NjE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-17T23:23:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-17T23:23:51Z"}, "message": "comments explaining why we have and don't have ManuallyDrop", "tree": {"sha": "e1342270ac80d9dda0c061b91b746c198968050b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1342270ac80d9dda0c061b91b746c198968050b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861", "html_url": "https://github.com/rust-lang/rust/commit/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "901cd3a844ffa1a609bd8afdc5a4416bd1bdd753", "url": "https://api.github.com/repos/rust-lang/rust/commits/901cd3a844ffa1a609bd8afdc5a4416bd1bdd753", "html_url": "https://github.com/rust-lang/rust/commit/901cd3a844ffa1a609bd8afdc5a4416bd1bdd753"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "e1124a68750ae99d96ddcf5515a929ed96043577", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=3a1e114120d3570b2b1b4dd4b0b1d31ce0382861", "patch": "@@ -175,6 +175,7 @@ pub struct BTreeMap<\n > {\n     root: Option<Root<K, V>>,\n     length: usize,\n+    /// `ManuallyDrop` to control drop order (needs to be dropped after all the nodes).\n     pub(super) alloc: ManuallyDrop<A>,\n }\n \n@@ -384,6 +385,7 @@ pub struct IntoIter<\n > {\n     range: LazyLeafRange<marker::Dying, K, V>,\n     length: usize,\n+    /// The BTreeMap will outlive this IntoIter so we don't care about drop order for `alloc`.\n     alloc: A,\n }\n \n@@ -1800,6 +1802,7 @@ pub struct DrainFilter<\n {\n     pred: F,\n     inner: DrainFilterInner<'a, K, V>,\n+    /// The BTreeMap will outlive this IntoIter so we don't care about drop order for `alloc`.\n     alloc: A,\n }\n /// Most of the implementation of DrainFilter are generic over the type"}, {"sha": "b6eecf9b0e95266550fd5e391b1352383aec45f0", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=3a1e114120d3570b2b1b4dd4b0b1d31ce0382861", "patch": "@@ -56,6 +56,7 @@ pub struct VacantEntry<\n     pub(super) handle: Option<Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n     pub(super) dormant_map: DormantMutRef<'a, BTreeMap<K, V, A>>,\n \n+    /// The BTreeMap will outlive this IntoIter so we don't care about drop order for `alloc`.\n     pub(super) alloc: A,\n \n     // Be invariant in `K` and `V`\n@@ -81,6 +82,7 @@ pub struct OccupiedEntry<\n     pub(super) handle: Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV>,\n     pub(super) dormant_map: DormantMutRef<'a, BTreeMap<K, V, A>>,\n \n+    /// The BTreeMap will outlive this IntoIter so we don't care about drop order for `alloc`.\n     pub(super) alloc: A,\n \n     // Be invariant in `K` and `V`"}, {"sha": "bec3b9675254c1b24add6f6e9442aa599944b5a9", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1e114120d3570b2b1b4dd4b0b1d31ce0382861/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=3a1e114120d3570b2b1b4dd4b0b1d31ce0382861", "patch": "@@ -1285,6 +1285,7 @@ pub struct DrainFilter<\n {\n     pred: F,\n     inner: super::map::DrainFilterInner<'a, T, ()>,\n+    /// The BTreeMap will outlive this IntoIter so we don't care about drop order for `alloc`.\n     alloc: A,\n }\n "}]}