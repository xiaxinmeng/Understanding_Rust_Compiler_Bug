{"sha": "735f60c34fc0b13d3aeb3873dcadff03dc141b07", "node_id": "C_kwDOAAsO6NoAKDczNWY2MGMzNGZjMGIxM2QzYWViMzg3M2RjYWRmZjAzZGMxNDFiMDc", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2022-02-28T11:30:23Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2022-03-04T12:47:50Z"}, "message": "Integrate macos x86-64 remove_dir_all() impl. Step 2: readd", "tree": {"sha": "fa962985a3caf3628de6bb2bea8e878cdb948904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa962985a3caf3628de6bb2bea8e878cdb948904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735f60c34fc0b13d3aeb3873dcadff03dc141b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735f60c34fc0b13d3aeb3873dcadff03dc141b07", "html_url": "https://github.com/rust-lang/rust/commit/735f60c34fc0b13d3aeb3873dcadff03dc141b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735f60c34fc0b13d3aeb3873dcadff03dc141b07/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41b4423cdfa4fe3aaee719a103d70368c85f4af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/41b4423cdfa4fe3aaee719a103d70368c85f4af7", "html_url": "https://github.com/rust-lang/rust/commit/41b4423cdfa4fe3aaee719a103d70368c85f4af7"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "0851f512fd01b6644b1e3e98e960c9003a4a8948", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/735f60c34fc0b13d3aeb3873dcadff03dc141b07/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735f60c34fc0b13d3aeb3873dcadff03dc141b07/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=735f60c34fc0b13d3aeb3873dcadff03dc141b07", "patch": "@@ -1483,11 +1483,7 @@ mod remove_dir_impl {\n }\n \n // Modern implementation using openat(), unlinkat() and fdopendir()\n-#[cfg(not(any(\n-    all(target_os = \"macos\", target_arch = \"x86_64\"),\n-    target_os = \"redox\",\n-    target_os = \"espidf\"\n-)))]\n+#[cfg(not(any(target_os = \"redox\", target_os = \"espidf\")))]\n mod remove_dir_impl {\n     use super::{cstr, lstat, Dir, DirEntry, InnerReadDir, ReadDir};\n     use crate::ffi::CStr;\n@@ -1497,7 +1493,49 @@ mod remove_dir_impl {\n     use crate::path::{Path, PathBuf};\n     use crate::sync::Arc;\n     use crate::sys::{cvt, cvt_r};\n+\n+    #[cfg(not(all(target_os = \"macos\", target_arch = \"x86_64\"),))]\n     use libc::{fdopendir, openat, unlinkat};\n+    #[cfg(all(target_os = \"macos\", target_arch = \"x86_64\"))]\n+    use macos_weak::{fdopendir, openat, unlinkat};\n+\n+    #[cfg(all(target_os = \"macos\", target_arch = \"x86_64\"))]\n+    mod macos_weak {\n+        use crate::sys::weak::weak;\n+        use libc::{c_char, c_int, DIR};\n+\n+        fn get_openat_fn() -> Option<unsafe extern \"C\" fn(c_int, *const c_char, c_int) -> c_int> {\n+            weak!(fn openat(c_int, *const c_char, c_int) -> c_int);\n+            openat.get()\n+        }\n+\n+        pub fn has_openat() -> bool {\n+            get_openat_fn().is_some()\n+        }\n+\n+        pub unsafe fn openat(dirfd: c_int, pathname: *const c_char, flags: c_int) -> c_int {\n+            get_openat_fn().map(|openat| openat(dirfd, pathname, flags)).unwrap_or_else(|| {\n+                crate::sys::unix::os::set_errno(libc::ENOSYS);\n+                -1\n+            })\n+        }\n+\n+        pub unsafe fn fdopendir(fd: c_int) -> *mut DIR {\n+            weak!(fn fdopendir(c_int) -> *mut DIR, \"fdopendir$INODE64\");\n+            fdopendir.get().map(|fdopendir| fdopendir(fd)).unwrap_or_else(|| {\n+                crate::sys::unix::os::set_errno(libc::ENOSYS);\n+                crate::ptr::null_mut()\n+            })\n+        }\n+\n+        pub unsafe fn unlinkat(dirfd: c_int, pathname: *const c_char, flags: c_int) -> c_int {\n+            weak!(fn unlinkat(c_int, *const c_char, c_int) -> c_int);\n+            unlinkat.get().map(|unlinkat| unlinkat(dirfd, pathname, flags)).unwrap_or_else(|| {\n+                crate::sys::unix::os::set_errno(libc::ENOSYS);\n+                -1\n+            })\n+        }\n+    }\n \n     pub fn openat_nofollow_dironly(parent_fd: Option<RawFd>, p: &CStr) -> io::Result<OwnedFd> {\n         let fd = cvt_r(|| unsafe {\n@@ -1609,7 +1647,7 @@ mod remove_dir_impl {\n         Ok(())\n     }\n \n-    pub fn remove_dir_all(p: &Path) -> io::Result<()> {\n+    fn remove_dir_all_modern(p: &Path) -> io::Result<()> {\n         // We cannot just call remove_dir_all_recursive() here because that would not delete a passed\n         // symlink. No need to worry about races, because remove_dir_all_recursive() does not recurse\n         // into symlinks.\n@@ -1620,4 +1658,20 @@ mod remove_dir_impl {\n             remove_dir_all_recursive(None, p)\n         }\n     }\n+\n+    #[cfg(not(all(target_os = \"macos\", target_arch = \"x86_64\")))]\n+    pub fn remove_dir_all(p: &Path) -> io::Result<()> {\n+        remove_dir_all_modern(p)\n+    }\n+\n+    #[cfg(all(target_os = \"macos\", target_arch = \"x86_64\"))]\n+    pub fn remove_dir_all(p: &Path) -> io::Result<()> {\n+        if macos_weak::has_openat() {\n+            // openat() is available with macOS 10.10+, just like unlinkat() and fdopendir()\n+            remove_dir_all_modern(p)\n+        } else {\n+            // fall back to classic implementation\n+            crate::sys_common::fs::remove_dir_all(p)\n+        }\n+    }\n }"}]}