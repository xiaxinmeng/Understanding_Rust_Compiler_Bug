{"sha": "ab835a12da26c2146b2dde1f3fe99df687730725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiODM1YTEyZGEyNmMyMTQ2YjJkZGUxZjNmZTk5ZGY2ODc3MzA3MjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-03-13T14:36:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-04-04T23:39:35Z"}, "message": "Add --extend-css option to rustdoc", "tree": {"sha": "a329db02a20c9cfcc8d6eb9109b6b7349ed12642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a329db02a20c9cfcc8d6eb9109b6b7349ed12642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab835a12da26c2146b2dde1f3fe99df687730725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab835a12da26c2146b2dde1f3fe99df687730725", "html_url": "https://github.com/rust-lang/rust/commit/ab835a12da26c2146b2dde1f3fe99df687730725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab835a12da26c2146b2dde1f3fe99df687730725/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e5d43c770201d837298175a2d55818867bdb33", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e5d43c770201d837298175a2d55818867bdb33", "html_url": "https://github.com/rust-lang/rust/commit/57e5d43c770201d837298175a2d55818867bdb33"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "8b2e84974985c96579e268d8a00d9adc5261ccfc", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab835a12da26c2146b2dde1f3fe99df687730725/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab835a12da26c2146b2dde1f3fe99df687730725/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=ab835a12da26c2146b2dde1f3fe99df687730725", "patch": "@@ -28,11 +28,12 @@ pub struct Page<'a> {\n     pub ty: &'a str,\n     pub root_path: &'a str,\n     pub description: &'a str,\n-    pub keywords: &'a str\n+    pub keywords: &'a str,\n }\n \n pub fn render<T: fmt::Display, S: fmt::Display>(\n-    dst: &mut io::Write, layout: &Layout, page: &Page, sidebar: &S, t: &T)\n+    dst: &mut io::Write, layout: &Layout, page: &Page, sidebar: &S, t: &T,\n+    css_file_extension: bool)\n     -> io::Result<()>\n {\n     write!(dst,\n@@ -49,6 +50,7 @@ r##\"<!DOCTYPE html>\n \n     <link rel=\"stylesheet\" type=\"text/css\" href=\"{root_path}rustdoc.css\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"{root_path}main.css\">\n+    {css_extension}\n \n     {favicon}\n     {in_header}\n@@ -141,6 +143,12 @@ r##\"<!DOCTYPE html>\n     <script defer src=\"{root_path}search-index.js\"></script>\n </body>\n </html>\"##,\n+    css_extension = if css_file_extension {\n+        format!(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}theme.css\\\">\",\n+                root_path = page.root_path)\n+    } else {\n+        \"\".to_owned()\n+    },\n     content   = *t,\n     root_path = page.root_path,\n     ty        = page.ty,"}, {"sha": "f5749d647dd92b804c879f800e4a1f668e322656", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab835a12da26c2146b2dde1f3fe99df687730725/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab835a12da26c2146b2dde1f3fe99df687730725/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ab835a12da26c2146b2dde1f3fe99df687730725", "patch": "@@ -119,6 +119,9 @@ pub struct SharedContext {\n     /// The base-URL of the issue tracker for when an item has been tagged with\n     /// an issue number.\n     pub issue_tracker_base_url: Option<String>,\n+    /// The given user css file which allow to customize the generated\n+    /// documentation theme.\n+    pub css_file_extension: Option<PathBuf>,\n }\n \n /// Indicates where an external crate can be found.\n@@ -411,7 +414,8 @@ pub fn derive_id(candidate: String) -> String {\n pub fn run(mut krate: clean::Crate,\n            external_html: &ExternalHtml,\n            dst: PathBuf,\n-           passes: HashSet<String>) -> Result<(), Error> {\n+           passes: HashSet<String>,\n+           css_file_extension: Option<PathBuf>) -> Result<(), Error> {\n     let src_root = match krate.src.parent() {\n         Some(p) => p.to_path_buf(),\n         None => PathBuf::new(),\n@@ -429,6 +433,11 @@ pub fn run(mut krate: clean::Crate,\n             krate: krate.name.clone(),\n             playground_url: \"\".to_string(),\n         },\n+        include_sources: true,\n+        local_sources: HashMap::new(),\n+        render_redirect_pages: false,\n+        issue_tracker_base_url: None,\n+        css_file_extension: css_file_extension,\n     };\n \n     // Crawl the crate attributes looking for attributes which control how we're\n@@ -637,6 +646,7 @@ fn write_shared(cx: &Context,\n \n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n+\n     write(cx.dst.join(\"jquery.js\"),\n           include_bytes!(\"static/jquery-2.1.4.min.js\"))?;\n     write(cx.dst.join(\"main.js\"),\n@@ -647,6 +657,17 @@ fn write_shared(cx: &Context,\n           include_bytes!(\"static/rustdoc.css\"))?;\n     write(cx.dst.join(\"main.css\"),\n           include_bytes!(\"static/styles/main.css\"))?;\n+    if let Some(ref css) = cx.css_file_extension {\n+        let mut content = String::new();\n+        let css = css.as_path();\n+        let mut f = try_err!(File::open(css), css);\n+\n+        try_err!(f.read_to_string(&mut content), css);\n+        let css = cx.dst.join(\"theme.css\");\n+        let css = css.as_path();\n+        let mut f = try_err!(File::create(css), css);\n+        try_err!(write!(f, \"{}\", &content), css);\n+    }\n     write(cx.dst.join(\"normalize.css\"),\n           include_bytes!(\"static/normalize.css\"))?;\n     write(cx.dst.join(\"FiraSans-Regular.woff\"),\n@@ -931,8 +952,9 @@ impl<'a> SourceCollector<'a> {\n             description: &desc,\n             keywords: BASIC_KEYWORDS,\n         };\n-        layout::render(&mut w, &self.scx.layout,\n-                       &page, &(\"\"), &Source(contents))?;\n+        layout::render(&mut w, &self.cx.layout,\n+                       &page, &(\"\"), &Source(contents),\n+                       self.cx.css_file_extension.is_some())?;\n         w.flush()?;\n         self.scx.local_sources.insert(p, href);\n         Ok(())\n@@ -1294,8 +1316,8 @@ impl Context {\n             if !cx.render_redirect_pages {\n                 layout::render(&mut writer, &cx.shared.layout, &page,\n                                &Sidebar{ cx: cx, item: it },\n-                               &Item{ cx: cx, item: it })?;\n-\n+                               &Item{ cx: cx, item: it },\n+                               cx.css_file_extension.is_some())?;\n             } else {\n                 let mut url = repeat(\"../\").take(cx.current.len())\n                                            .collect::<String>();"}, {"sha": "75652cc17aeb7f2af1c77586ad05699de67e2249", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab835a12da26c2146b2dde1f3fe99df687730725/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab835a12da26c2146b2dde1f3fe99df687730725/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ab835a12da26c2146b2dde1f3fe99df687730725", "patch": "@@ -185,7 +185,10 @@ pub fn opts() -> Vec<getopts::OptGroup> {\n                  \"FILES\"),\n         optopt(\"\", \"markdown-playground-url\",\n                \"URL to send code snippets to\", \"URL\"),\n-        optflag(\"\", \"markdown-no-toc\", \"don't include table of contents\")\n+        optflag(\"\", \"markdown-no-toc\", \"don't include table of contents\"),\n+        optopt(\"e\", \"extend-css\",\n+               \"to redefine some css rules with a given file to generate doc with your \\\n+                own theme\", \"PATH\"),\n     )\n }\n \n@@ -254,8 +257,16 @@ pub fn main_args(args: &[String]) -> isize {\n     let markdown_input = input.ends_with(\".md\") || input.ends_with(\".markdown\");\n \n     let output = matches.opt_str(\"o\").map(|s| PathBuf::from(&s));\n+    let css_file_extension = matches.opt_str(\"e\").map(|s| PathBuf::from(&s));\n     let cfgs = matches.opt_strs(\"cfg\");\n \n+    if let Some(ref p) = css_file_extension {\n+        if !p.is_file() {\n+            println!(\"{}\", \"--extend-css option must take a css file as input\");\n+            return 1;\n+        }\n+    }\n+\n     let external_html = match ExternalHtml::load(\n             &matches.opt_strs(\"html-in-header\"),\n             &matches.opt_strs(\"html-before-content\"),\n@@ -291,7 +302,8 @@ pub fn main_args(args: &[String]) -> isize {\n         Some(\"html\") | None => {\n             html::render::run(krate, &external_html,\n                               output.unwrap_or(PathBuf::from(\"doc\")),\n-                              passes.into_iter().collect())\n+                              passes.into_iter().collect(),\n+                              css_file_extension)\n                 .expect(\"failed to generate documentation\")\n         }\n         Some(\"json\") => {"}]}