{"sha": "17b9d35b3123592320fa64ac81e7483a69a6b4d7", "node_id": "C_kwDOAAsO6NoAKDE3YjlkMzViMzEyMzU5MjMyMGZhNjRhYzgxZTc0ODNhNjlhNmI0ZDc", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2023-03-10T13:43:50Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2023-03-10T13:43:50Z"}, "message": "Refactor: Distinguish scrutinee expression from match expression", "tree": {"sha": "1425d10838b16889d1c7852315d13c8c573e2976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1425d10838b16889d1c7852315d13c8c573e2976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b9d35b3123592320fa64ac81e7483a69a6b4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b9d35b3123592320fa64ac81e7483a69a6b4d7", "html_url": "https://github.com/rust-lang/rust/commit/17b9d35b3123592320fa64ac81e7483a69a6b4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b9d35b3123592320fa64ac81e7483a69a6b4d7/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e8c586f3b8c1fc43e293a53317bafe9df0b77fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8c586f3b8c1fc43e293a53317bafe9df0b77fe", "html_url": "https://github.com/rust-lang/rust/commit/5e8c586f3b8c1fc43e293a53317bafe9df0b77fe"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "2e9066788cf627d9b685ec1ba3ebcdd8b4e9fff5", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17b9d35b3123592320fa64ac81e7483a69a6b4d7/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b9d35b3123592320fa64ac81e7483a69a6b4d7/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=17b9d35b3123592320fa64ac81e7483a69a6b4d7", "patch": "@@ -147,15 +147,15 @@ impl ExprValidator {\n \n     fn validate_match(\n         &mut self,\n-        id: ExprId,\n         match_expr: ExprId,\n+        scrutinee_expr: ExprId,\n         arms: &[MatchArm],\n         db: &dyn HirDatabase,\n     ) {\n         let body = db.body(self.owner);\n \n-        let match_expr_ty = &self.infer[match_expr];\n-        if match_expr_ty.is_unknown() {\n+        let scrut_ty = &self.infer[scrutinee_expr];\n+        if scrut_ty.is_unknown() {\n             return;\n         }\n \n@@ -167,17 +167,17 @@ impl ExprValidator {\n         for arm in arms {\n             if let Some(pat_ty) = self.infer.type_of_pat.get(arm.pat) {\n                 // We only include patterns whose type matches the type\n-                // of the match expression. If we had an InvalidMatchArmPattern\n+                // of the scrutinee expression. If we had an InvalidMatchArmPattern\n                 // diagnostic or similar we could raise that in an else\n                 // block here.\n                 //\n                 // When comparing the types, we also have to consider that rustc\n-                // will automatically de-reference the match expression type if\n+                // will automatically de-reference the scrutinee expression type if\n                 // necessary.\n                 //\n                 // FIXME we should use the type checker for this.\n-                if (pat_ty == match_expr_ty\n-                    || match_expr_ty\n+                if (pat_ty == scrut_ty\n+                    || scrut_ty\n                         .as_reference()\n                         .map(|(match_expr_ty, ..)| match_expr_ty == pat_ty)\n                         .unwrap_or(false))\n@@ -205,16 +205,16 @@ impl ExprValidator {\n             return;\n         }\n \n-        let report = compute_match_usefulness(&cx, &m_arms, match_expr_ty);\n+        let report = compute_match_usefulness(&cx, &m_arms, scrut_ty);\n \n         // FIXME Report unreacheble arms\n         // https://github.com/rust-lang/rust/blob/f31622a50/compiler/rustc_mir_build/src/thir/pattern/check_match.rs#L200\n \n         let witnesses = report.non_exhaustiveness_witnesses;\n         if !witnesses.is_empty() {\n             self.diagnostics.push(BodyValidationDiagnostic::MissingMatchArms {\n-                match_expr: id,\n-                uncovered_patterns: missing_match_arms(&cx, match_expr_ty, witnesses, arms),\n+                match_expr,\n+                uncovered_patterns: missing_match_arms(&cx, scrut_ty, witnesses, arms),\n             });\n         }\n     }"}]}