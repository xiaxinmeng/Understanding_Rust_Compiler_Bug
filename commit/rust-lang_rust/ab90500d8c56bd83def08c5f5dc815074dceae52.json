{"sha": "ab90500d8c56bd83def08c5f5dc815074dceae52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOTA1MDBkOGM1NmJkODNkZWYwOGM1ZjVkYzgxNTA3NGRjZWFlNTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-24T22:11:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-30T17:41:38Z"}, "message": "Make println!(\"String\") work\n\nmiri complains about a memory leak when the program terminates.  This may be related to thread-local dtors not running.", "tree": {"sha": "824d57c228109e17c64c2ae808ff8c62a49d5707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/824d57c228109e17c64c2ae808ff8c62a49d5707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab90500d8c56bd83def08c5f5dc815074dceae52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab90500d8c56bd83def08c5f5dc815074dceae52", "html_url": "https://github.com/rust-lang/rust/commit/ab90500d8c56bd83def08c5f5dc815074dceae52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab90500d8c56bd83def08c5f5dc815074dceae52/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53412abe76b5f53a66df68279bd3bb38b07521c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/53412abe76b5f53a66df68279bd3bb38b07521c5", "html_url": "https://github.com/rust-lang/rust/commit/53412abe76b5f53a66df68279bd3bb38b07521c5"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "d098801ae92a9ac2f61842af12de005601a126e8", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ab90500d8c56bd83def08c5f5dc815074dceae52/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab90500d8c56bd83def08c5f5dc815074dceae52/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=ab90500d8c56bd83def08c5f5dc815074dceae52", "patch": "@@ -367,31 +367,43 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         // Only trait methods can have a Self parameter.\n \n+        // Intercept some methods (even if we can find MIR for them)\n+        if let ty::InstanceDef::Item(def_id) = instance.def {\n+            match &self.tcx.item_path_str(def_id)[..] {\n+                \"std::sys::imp::fast_thread_local::register_dtor\" => {\n+                    // Just don't execute this one, we don't handle all this thread-local stuff anyway.\n+                    self.goto_block(destination.unwrap().1);\n+                    return Ok(true)\n+                }\n+                _ => {}\n+            }\n+        }\n+        \n         let mir = match self.load_mir(instance.def) {\n             Ok(mir) => mir,\n             Err(EvalError::NoMirFor(path)) => {\n-                match &path[..] {\n-                    // let's just ignore all output for now\n+                return match &path[..] {\n+                    // Intercept some methods if we cannot find their MIR.\n                     \"std::io::_print\" => {\n+                        trace!(\"Ignoring output.\");\n                         self.goto_block(destination.unwrap().1);\n-                        return Ok(true);\n+                        Ok(true)\n                     },\n-                    \"std::thread::Builder::new\" => return Err(EvalError::Unimplemented(\"miri does not support threading\".to_owned())),\n-                    \"std::env::args\" => return Err(EvalError::Unimplemented(\"miri does not support program arguments\".to_owned())),\n+                    \"std::thread::Builder::new\" => Err(EvalError::Unimplemented(\"miri does not support threading\".to_owned())),\n+                    \"std::env::args\" => Err(EvalError::Unimplemented(\"miri does not support program arguments\".to_owned())),\n                     \"std::panicking::rust_panic_with_hook\" |\n-                    \"std::rt::begin_panic_fmt\" => return Err(EvalError::Panic),\n+                    \"std::rt::begin_panic_fmt\" => Err(EvalError::Panic),\n                     \"std::panicking::panicking\" |\n                     \"std::rt::panicking\" => {\n                         let (lval, block) = destination.expect(\"std::rt::panicking does not diverge\");\n                         // we abort on panic -> `std::rt::panicking` always returns false\n                         let bool = self.tcx.types.bool;\n                         self.write_primval(lval, PrimVal::from_bool(false), bool)?;\n                         self.goto_block(block);\n-                        return Ok(true);\n+                        Ok(true)\n                     }\n-                    _ => {},\n-                }\n-                return Err(EvalError::NoMirFor(path));\n+                    _ => Err(EvalError::NoMirFor(path)),\n+                };\n             },\n             Err(other) => return Err(other),\n         };\n@@ -569,6 +581,24 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n                 self.write_value(Value::ByVal(PrimVal::Bytes(0)), dest, dest_ty)?;\n             }\n+            \n+            \"write\" => {\n+                let fd = self.value_to_primval(args[0], usize)?.to_u64()?;\n+                let buf = args[1].read_ptr(&self.memory)?;\n+                let n = self.value_to_primval(args[2], usize)?.to_u64()?;\n+                trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n+                let result = if fd == 1 { // stdout\n+                    use std::io::{self, Write};\n+                \n+                    let buf_cont = self.memory.read_bytes(buf, n)?;\n+                    let res = io::stdout().write(buf_cont);\n+                    match res { Ok(n) => n as isize, Err(_) => -1 }\n+                } else {\n+                    info!(\"Ignored output to FD {}\", fd);\n+                    n as isize // pretend it all went well\n+                }; // now result is the value we return back to the program\n+                self.write_primval(dest, PrimVal::Bytes(result as u128), dest_ty)?;\n+            }\n \n             // unix panic code inside libstd will read the return value of this function\n             \"pthread_rwlock_rdlock\" => {"}]}