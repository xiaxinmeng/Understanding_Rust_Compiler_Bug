{"sha": "de1ff0a8b559c300fb8145123accdfa8bda1031e", "node_id": "C_kwDOAAsO6NoAKGRlMWZmMGE4YjU1OWMzMDBmYjgxNDUxMjNhY2NkZmE4YmRhMTAzMWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T03:23:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T03:23:12Z"}, "message": "Auto merge of #99339 - yanchith:binary-heap-ta, r=Amanieu\n\nMake BinaryHeap parametric over Allocator\n\nTracking issue: #32838\nRelated: https://github.com/rust-lang/wg-allocators/issues/7\n\nThis parametrizes `BinaryHeap` with `A`, similarly to how other collections are parametrized.\n\nA couple things I left out:\n\n```\nBinaryHeap::append\n\n    Currently requires both structures to have the same allocator type. Could\n    change, but depends on Vec::append, which has the same constraints.\n\nimpl<T: Ord> Default for BinaryHeap<T>\n\n    Not parametrized, because there's nowhere to conjure the allocator from.\n\nimpl<T: Ord> FromIterator<T> for BinaryHeap<T>\n\n    Not parametrized, because there's nowhere to conjure the allocator from.\n\nimpl<T: Ord, const N: usize> From<[T; N]> for BinaryHeap<T>\n\n    Not parametrized, because there's nowhere to conjure the allocator from.\n\nunsafe impl<I> AsVecIntoIter for IntoIter<I>\n\n    AsVecIntoIter is not allocator aware, and I didn't dare change it without guidance. Is this something important?\n```\n\nI've seen very few tests for allocator_api in general, but I'd like to at least test this on some usage code in my projects before moving forward.\n\nEDIT: Updated the list of impls and functions that are not affected by this. `BinaryHeap` no longer has a `SpecExtend` impl, and prior work made implementing `Extend` possible.", "tree": {"sha": "b7b1d05aaf6b1498865821611b7ed73b2f33781f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b1d05aaf6b1498865821611b7ed73b2f33781f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de1ff0a8b559c300fb8145123accdfa8bda1031e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de1ff0a8b559c300fb8145123accdfa8bda1031e", "html_url": "https://github.com/rust-lang/rust/commit/de1ff0a8b559c300fb8145123accdfa8bda1031e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de1ff0a8b559c300fb8145123accdfa8bda1031e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e8c53f1f660236bd88bfe40145646104f265846", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8c53f1f660236bd88bfe40145646104f265846", "html_url": "https://github.com/rust-lang/rust/commit/5e8c53f1f660236bd88bfe40145646104f265846"}, {"sha": "e0e355dd253b46380f975acd33b43302ac470236", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e355dd253b46380f975acd33b43302ac470236", "html_url": "https://github.com/rust-lang/rust/commit/e0e355dd253b46380f975acd33b43302ac470236"}], "stats": {"total": 238, "additions": 175, "deletions": 63}, "files": [{"sha": "66573b90db963ddef1108c0fe087434e32e98631", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 175, "deletions": 63, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/de1ff0a8b559c300fb8145123accdfa8bda1031e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1ff0a8b559c300fb8145123accdfa8bda1031e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=de1ff0a8b559c300fb8145123accdfa8bda1031e", "patch": "@@ -143,13 +143,15 @@\n #![allow(missing_docs)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use core::alloc::Allocator;\n use core::fmt;\n use core::iter::{FusedIterator, InPlaceIterable, SourceIter, TrustedLen};\n use core::mem::{self, swap, ManuallyDrop};\n use core::num::NonZeroUsize;\n use core::ops::{Deref, DerefMut};\n use core::ptr;\n \n+use crate::alloc::Global;\n use crate::collections::TryReserveError;\n use crate::slice;\n use crate::vec::{self, AsVecIntoIter, Vec};\n@@ -271,8 +273,11 @@ mod tests;\n /// [peek\\_mut]: BinaryHeap::peek_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"BinaryHeap\")]\n-pub struct BinaryHeap<T> {\n-    data: Vec<T>,\n+pub struct BinaryHeap<\n+    T,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    data: Vec<T, A>,\n }\n \n /// Structure wrapping a mutable reference to the greatest item on a\n@@ -283,22 +288,26 @@ pub struct BinaryHeap<T> {\n ///\n /// [`peek_mut`]: BinaryHeap::peek_mut\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-pub struct PeekMut<'a, T: 'a + Ord> {\n-    heap: &'a mut BinaryHeap<T>,\n+pub struct PeekMut<\n+    'a,\n+    T: 'a + Ord,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    heap: &'a mut BinaryHeap<T, A>,\n     // If a set_len + sift_down are required, this is Some. If a &mut T has not\n     // yet been exposed to peek_mut()'s caller, it's None.\n     original_len: Option<NonZeroUsize>,\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<T: Ord + fmt::Debug> fmt::Debug for PeekMut<'_, T> {\n+impl<T: Ord + fmt::Debug, A: Allocator> fmt::Debug for PeekMut<'_, T, A> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"PeekMut\").field(&self.heap.data[0]).finish()\n     }\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<T: Ord> Drop for PeekMut<'_, T> {\n+impl<T: Ord, A: Allocator> Drop for PeekMut<'_, T, A> {\n     fn drop(&mut self) {\n         if let Some(original_len) = self.original_len {\n             // SAFETY: That's how many elements were in the Vec at the time of\n@@ -315,7 +324,7 @@ impl<T: Ord> Drop for PeekMut<'_, T> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<T: Ord> Deref for PeekMut<'_, T> {\n+impl<T: Ord, A: Allocator> Deref for PeekMut<'_, T, A> {\n     type Target = T;\n     fn deref(&self) -> &T {\n         debug_assert!(!self.heap.is_empty());\n@@ -325,7 +334,7 @@ impl<T: Ord> Deref for PeekMut<'_, T> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<T: Ord> DerefMut for PeekMut<'_, T> {\n+impl<T: Ord, A: Allocator> DerefMut for PeekMut<'_, T, A> {\n     fn deref_mut(&mut self) -> &mut T {\n         debug_assert!(!self.heap.is_empty());\n \n@@ -353,10 +362,10 @@ impl<T: Ord> DerefMut for PeekMut<'_, T> {\n     }\n }\n \n-impl<'a, T: Ord> PeekMut<'a, T> {\n+impl<'a, T: Ord, A: Allocator> PeekMut<'a, T, A> {\n     /// Removes the peeked value from the heap and returns it.\n     #[stable(feature = \"binary_heap_peek_mut_pop\", since = \"1.18.0\")]\n-    pub fn pop(mut this: PeekMut<'a, T>) -> T {\n+    pub fn pop(mut this: PeekMut<'a, T, A>) -> T {\n         if let Some(original_len) = this.original_len.take() {\n             // SAFETY: This is how many elements were in the Vec at the time of\n             // the BinaryHeap::peek_mut call.\n@@ -371,7 +380,7 @@ impl<'a, T: Ord> PeekMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Clone> Clone for BinaryHeap<T> {\n+impl<T: Clone, A: Allocator + Clone> Clone for BinaryHeap<T, A> {\n     fn clone(&self) -> Self {\n         BinaryHeap { data: self.data.clone() }\n     }\n@@ -391,18 +400,22 @@ impl<T: Ord> Default for BinaryHeap<T> {\n }\n \n #[stable(feature = \"binaryheap_debug\", since = \"1.4.0\")]\n-impl<T: fmt::Debug> fmt::Debug for BinaryHeap<T> {\n+impl<T: fmt::Debug, A: Allocator> fmt::Debug for BinaryHeap<T, A> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.iter()).finish()\n     }\n }\n \n-struct RebuildOnDrop<'a, T: Ord> {\n-    heap: &'a mut BinaryHeap<T>,\n+struct RebuildOnDrop<\n+    'a,\n+    T: Ord,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    heap: &'a mut BinaryHeap<T, A>,\n     rebuild_from: usize,\n }\n \n-impl<'a, T: Ord> Drop for RebuildOnDrop<'a, T> {\n+impl<T: Ord, A: Allocator> Drop for RebuildOnDrop<'_, T, A> {\n     fn drop(&mut self) {\n         self.heap.rebuild_tail(self.rebuild_from);\n     }\n@@ -446,6 +459,52 @@ impl<T: Ord> BinaryHeap<T> {\n     pub fn with_capacity(capacity: usize) -> BinaryHeap<T> {\n         BinaryHeap { data: Vec::with_capacity(capacity) }\n     }\n+}\n+\n+impl<T: Ord, A: Allocator> BinaryHeap<T, A> {\n+    /// Creates an empty `BinaryHeap` as a max-heap, using `A` as allocator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api)]\n+    ///\n+    /// use std::alloc::System;\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap = BinaryHeap::new_in(System);\n+    /// heap.push(4);\n+    /// ```\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n+    pub fn new_in(alloc: A) -> BinaryHeap<T, A> {\n+        BinaryHeap { data: Vec::new_in(alloc) }\n+    }\n+\n+    /// Creates an empty `BinaryHeap` with at least the specified capacity, using `A` as allocator.\n+    ///\n+    /// The binary heap will be able to hold at least `capacity` elements without\n+    /// reallocating. This method is allowed to allocate for more elements than\n+    /// `capacity`. If `capacity` is 0, the binary heap will not allocate.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api)]\n+    ///\n+    /// use std::alloc::System;\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap = BinaryHeap::with_capacity_in(10, System);\n+    /// heap.push(4);\n+    /// ```\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n+    pub fn with_capacity_in(capacity: usize, alloc: A) -> BinaryHeap<T, A> {\n+        BinaryHeap { data: Vec::with_capacity_in(capacity, alloc) }\n+    }\n \n     /// Returns a mutable reference to the greatest item in the binary heap, or\n     /// `None` if it is empty.\n@@ -478,7 +537,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// If the item is modified then the worst case time complexity is *O*(log(*n*)),\n     /// otherwise it's *O*(1).\n     #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-    pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T>> {\n+    pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T, A>> {\n         if self.is_empty() { None } else { Some(PeekMut { heap: self, original_len: None }) }\n     }\n \n@@ -573,7 +632,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n-    pub fn into_sorted_vec(mut self) -> Vec<T> {\n+    pub fn into_sorted_vec(mut self) -> Vec<T, A> {\n         let mut end = self.len();\n         while end > 1 {\n             end -= 1;\n@@ -831,7 +890,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-    pub fn drain_sorted(&mut self) -> DrainSorted<'_, T> {\n+    pub fn drain_sorted(&mut self) -> DrainSorted<'_, T, A> {\n         DrainSorted { inner: self }\n     }\n \n@@ -874,7 +933,7 @@ impl<T: Ord> BinaryHeap<T> {\n     }\n }\n \n-impl<T> BinaryHeap<T> {\n+impl<T, A: Allocator> BinaryHeap<T, A> {\n     /// Returns an iterator visiting all values in the underlying vector, in\n     /// arbitrary order.\n     ///\n@@ -911,7 +970,7 @@ impl<T> BinaryHeap<T> {\n     /// assert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), [5, 4]);\n     /// ```\n     #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n-    pub fn into_iter_sorted(self) -> IntoIterSorted<T> {\n+    pub fn into_iter_sorted(self) -> IntoIterSorted<T, A> {\n         IntoIterSorted { inner: self }\n     }\n \n@@ -1178,10 +1237,17 @@ impl<T> BinaryHeap<T> {\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n-    pub fn into_vec(self) -> Vec<T> {\n+    pub fn into_vec(self) -> Vec<T, A> {\n         self.into()\n     }\n \n+    /// Returns a reference to the underlying allocator.\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[inline]\n+    pub fn allocator(&self) -> &A {\n+        self.data.allocator()\n+    }\n+\n     /// Returns the length of the binary heap.\n     ///\n     /// # Examples\n@@ -1249,7 +1315,7 @@ impl<T> BinaryHeap<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n-    pub fn drain(&mut self) -> Drain<'_, T> {\n+    pub fn drain(&mut self) -> Drain<'_, T, A> {\n         Drain { iter: self.data.drain(..) }\n     }\n \n@@ -1419,19 +1485,30 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// [`into_iter`]: BinaryHeap::into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n-pub struct IntoIter<T> {\n-    iter: vec::IntoIter<T>,\n+pub struct IntoIter<\n+    T,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    iter: vec::IntoIter<T, A>,\n+}\n+\n+impl<T, A: Allocator> IntoIter<T, A> {\n+    /// Returns a reference to the underlying allocator.\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    pub fn allocator(&self) -> &A {\n+        self.iter.allocator()\n+    }\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+impl<T: fmt::Debug, A: Allocator> fmt::Debug for IntoIter<T, A> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"IntoIter\").field(&self.iter.as_slice()).finish()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Iterator for IntoIter<T> {\n+impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1446,22 +1523,22 @@ impl<T> Iterator for IntoIter<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> DoubleEndedIterator for IntoIter<T> {\n+impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ExactSizeIterator for IntoIter<T> {\n+impl<T, A: Allocator> ExactSizeIterator for IntoIter<T, A> {\n     fn is_empty(&self) -> bool {\n         self.iter.is_empty()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<T> FusedIterator for IntoIter<T> {}\n+impl<T, A: Allocator> FusedIterator for IntoIter<T, A> {}\n \n #[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for IntoIter<T> {\n@@ -1481,8 +1558,8 @@ impl<T> Default for IntoIter<T> {\n // also refer to the vec::in_place_collect module documentation to get an overview\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n #[doc(hidden)]\n-unsafe impl<T> SourceIter for IntoIter<T> {\n-    type Source = IntoIter<T>;\n+unsafe impl<T, A: Allocator> SourceIter for IntoIter<T, A> {\n+    type Source = IntoIter<T, A>;\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut Self::Source {\n@@ -1492,7 +1569,7 @@ unsafe impl<T> SourceIter for IntoIter<T> {\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n #[doc(hidden)]\n-unsafe impl<I> InPlaceIterable for IntoIter<I> {}\n+unsafe impl<I, A: Allocator> InPlaceIterable for IntoIter<I, A> {}\n \n unsafe impl<I> AsVecIntoIter for IntoIter<I> {\n     type Item = I;\n@@ -1505,12 +1582,23 @@ unsafe impl<I> AsVecIntoIter for IntoIter<I> {\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n #[derive(Clone, Debug)]\n-pub struct IntoIterSorted<T> {\n-    inner: BinaryHeap<T>,\n+pub struct IntoIterSorted<\n+    T,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    inner: BinaryHeap<T, A>,\n+}\n+\n+impl<T, A: Allocator> IntoIterSorted<T, A> {\n+    /// Returns a reference to the underlying allocator.\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    pub fn allocator(&self) -> &A {\n+        self.inner.allocator()\n+    }\n }\n \n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n-impl<T: Ord> Iterator for IntoIterSorted<T> {\n+impl<T: Ord, A: Allocator> Iterator for IntoIterSorted<T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1526,13 +1614,13 @@ impl<T: Ord> Iterator for IntoIterSorted<T> {\n }\n \n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n-impl<T: Ord> ExactSizeIterator for IntoIterSorted<T> {}\n+impl<T: Ord, A: Allocator> ExactSizeIterator for IntoIterSorted<T, A> {}\n \n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n-impl<T: Ord> FusedIterator for IntoIterSorted<T> {}\n+impl<T: Ord, A: Allocator> FusedIterator for IntoIterSorted<T, A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<T: Ord> TrustedLen for IntoIterSorted<T> {}\n+unsafe impl<T: Ord, A: Allocator> TrustedLen for IntoIterSorted<T, A> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n ///\n@@ -1542,12 +1630,24 @@ unsafe impl<T: Ord> TrustedLen for IntoIterSorted<T> {}\n /// [`drain`]: BinaryHeap::drain\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n #[derive(Debug)]\n-pub struct Drain<'a, T: 'a> {\n-    iter: vec::Drain<'a, T>,\n+pub struct Drain<\n+    'a,\n+    T: 'a,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    iter: vec::Drain<'a, T, A>,\n+}\n+\n+impl<T, A: Allocator> Drain<'_, T, A> {\n+    /// Returns a reference to the underlying allocator.\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    pub fn allocator(&self) -> &A {\n+        self.iter.allocator()\n+    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> Iterator for Drain<'_, T> {\n+impl<T, A: Allocator> Iterator for Drain<'_, T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1562,22 +1662,22 @@ impl<T> Iterator for Drain<'_, T> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> DoubleEndedIterator for Drain<'_, T> {\n+impl<T, A: Allocator> DoubleEndedIterator for Drain<'_, T, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> ExactSizeIterator for Drain<'_, T> {\n+impl<T, A: Allocator> ExactSizeIterator for Drain<'_, T, A> {\n     fn is_empty(&self) -> bool {\n         self.iter.is_empty()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<T> FusedIterator for Drain<'_, T> {}\n+impl<T, A: Allocator> FusedIterator for Drain<'_, T, A> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n ///\n@@ -1587,17 +1687,29 @@ impl<T> FusedIterator for Drain<'_, T> {}\n /// [`drain_sorted`]: BinaryHeap::drain_sorted\n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n #[derive(Debug)]\n-pub struct DrainSorted<'a, T: Ord> {\n-    inner: &'a mut BinaryHeap<T>,\n+pub struct DrainSorted<\n+    'a,\n+    T: Ord,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    inner: &'a mut BinaryHeap<T, A>,\n+}\n+\n+impl<'a, T: Ord, A: Allocator> DrainSorted<'a, T, A> {\n+    /// Returns a reference to the underlying allocator.\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    pub fn allocator(&self) -> &A {\n+        self.inner.allocator()\n+    }\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<'a, T: Ord> Drop for DrainSorted<'a, T> {\n+impl<'a, T: Ord, A: Allocator> Drop for DrainSorted<'a, T, A> {\n     /// Removes heap elements in heap order.\n     fn drop(&mut self) {\n-        struct DropGuard<'r, 'a, T: Ord>(&'r mut DrainSorted<'a, T>);\n+        struct DropGuard<'r, 'a, T: Ord, A: Allocator>(&'r mut DrainSorted<'a, T, A>);\n \n-        impl<'r, 'a, T: Ord> Drop for DropGuard<'r, 'a, T> {\n+        impl<'r, 'a, T: Ord, A: Allocator> Drop for DropGuard<'r, 'a, T, A> {\n             fn drop(&mut self) {\n                 while self.0.inner.pop().is_some() {}\n             }\n@@ -1612,7 +1724,7 @@ impl<'a, T: Ord> Drop for DrainSorted<'a, T> {\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<T: Ord> Iterator for DrainSorted<'_, T> {\n+impl<T: Ord, A: Allocator> Iterator for DrainSorted<'_, T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1628,20 +1740,20 @@ impl<T: Ord> Iterator for DrainSorted<'_, T> {\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<T: Ord> ExactSizeIterator for DrainSorted<'_, T> {}\n+impl<T: Ord, A: Allocator> ExactSizeIterator for DrainSorted<'_, T, A> {}\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<T: Ord> FusedIterator for DrainSorted<'_, T> {}\n+impl<T: Ord, A: Allocator> FusedIterator for DrainSorted<'_, T, A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<T: Ord> TrustedLen for DrainSorted<'_, T> {}\n+unsafe impl<T: Ord, A: Allocator> TrustedLen for DrainSorted<'_, T, A> {}\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n-impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {\n+impl<T: Ord, A: Allocator> From<Vec<T, A>> for BinaryHeap<T, A> {\n     /// Converts a `Vec<T>` into a `BinaryHeap<T>`.\n     ///\n     /// This conversion happens in-place, and has *O*(*n*) time complexity.\n-    fn from(vec: Vec<T>) -> BinaryHeap<T> {\n+    fn from(vec: Vec<T, A>) -> BinaryHeap<T, A> {\n         let mut heap = BinaryHeap { data: vec };\n         heap.rebuild();\n         heap\n@@ -1665,12 +1777,12 @@ impl<T: Ord, const N: usize> From<[T; N]> for BinaryHeap<T> {\n }\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n-impl<T> From<BinaryHeap<T>> for Vec<T> {\n+impl<T, A: Allocator> From<BinaryHeap<T, A>> for Vec<T, A> {\n     /// Converts a `BinaryHeap<T>` into a `Vec<T>`.\n     ///\n     /// This conversion requires no data movement or allocation, and has\n     /// constant time complexity.\n-    fn from(heap: BinaryHeap<T>) -> Vec<T> {\n+    fn from(heap: BinaryHeap<T, A>) -> Vec<T, A> {\n         heap.data\n     }\n }\n@@ -1683,9 +1795,9 @@ impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> IntoIterator for BinaryHeap<T> {\n+impl<T, A: Allocator> IntoIterator for BinaryHeap<T, A> {\n     type Item = T;\n-    type IntoIter = IntoIter<T>;\n+    type IntoIter = IntoIter<T, A>;\n \n     /// Creates a consuming iterator, that is, one that moves each value out of\n     /// the binary heap in arbitrary order. The binary heap cannot be used\n@@ -1705,13 +1817,13 @@ impl<T> IntoIterator for BinaryHeap<T> {\n     ///     println!(\"{x}\");\n     /// }\n     /// ```\n-    fn into_iter(self) -> IntoIter<T> {\n+    fn into_iter(self) -> IntoIter<T, A> {\n         IntoIter { iter: self.data.into_iter() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> IntoIterator for &'a BinaryHeap<T> {\n+impl<'a, T, A: Allocator> IntoIterator for &'a BinaryHeap<T, A> {\n     type Item = &'a T;\n     type IntoIter = Iter<'a, T>;\n \n@@ -1721,7 +1833,7 @@ impl<'a, T> IntoIterator for &'a BinaryHeap<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Ord> Extend<T> for BinaryHeap<T> {\n+impl<T: Ord, A: Allocator> Extend<T> for BinaryHeap<T, A> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n         let guard = RebuildOnDrop { rebuild_from: self.len(), heap: self };\n@@ -1740,7 +1852,7 @@ impl<T: Ord> Extend<T> for BinaryHeap<T> {\n }\n \n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n-impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BinaryHeap<T> {\n+impl<'a, T: 'a + Ord + Copy, A: Allocator> Extend<&'a T> for BinaryHeap<T, A> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());\n     }"}]}