{"sha": "22f853c620d970c6f80c8c206614a3bf766d028f", "node_id": "C_kwDOAAsO6NoAKDIyZjg1M2M2MjBkOTcwYzZmODBjOGMyMDY2MTRhM2JmNzY2ZDAyOGY", "commit": {"author": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2023-02-14T15:11:15Z"}, "committer": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2023-02-14T15:11:15Z"}, "message": "Avoid looping past bounds of args\n\nThere might be more type params than args to a method call, which leads to an\nindex out of bounds panic.", "tree": {"sha": "157f32fb1d66addbc1d0be50c269876dacb19f0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/157f32fb1d66addbc1d0be50c269876dacb19f0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f853c620d970c6f80c8c206614a3bf766d028f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f853c620d970c6f80c8c206614a3bf766d028f", "html_url": "https://github.com/rust-lang/rust/commit/22f853c620d970c6f80c8c206614a3bf766d028f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f853c620d970c6f80c8c206614a3bf766d028f/comments", "author": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "committer": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3c9eede5d50be0231f229bf28a271cd509861a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c9eede5d50be0231f229bf28a271cd509861a3", "html_url": "https://github.com/rust-lang/rust/commit/a3c9eede5d50be0231f229bf28a271cd509861a3"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "16d3115c233b0122af53a4f7b611dd72c71e698e", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22f853c620d970c6f80c8c206614a3bf766d028f/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f853c620d970c6f80c8c206614a3bf766d028f/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=22f853c620d970c6f80c8c206614a3bf766d028f", "patch": "@@ -323,13 +323,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut param_found = FxHashMap::default();\n                 if self.can_eq(self.param_env, ty, found).is_ok() {\n                     // We only point at the first place where the found type was inferred.\n-                    for (i, param_ty) in sig.inputs().skip_binder().iter().skip(1).enumerate() {\n+                    for (param_ty, arg) in sig.inputs().skip_binder().iter().skip(1).zip(args) {\n                         if def_self_ty.contains(*param_ty) && let ty::Param(_) = param_ty.kind() {\n                             // We found an argument that references a type parameter in `Self`,\n                             // so we assume that this is the argument that caused the found\n                             // type, which we know already because of `can_eq` above was first\n                             // inferred in this method call.\n-                            let arg = &args[i];\n                             let arg_ty = self.node_ty(arg.hir_id);\n                             if !arg.span.overlaps(mismatch_span) {\n                                 err.span_label("}]}