{"sha": "0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNzhlNDBlODhkYmQ1MzYxOWNkNWVjMDRiMGY1M2NlYTg3MWMwN2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-01T18:23:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-15T21:49:21Z"}, "message": "convert EXTRA_REQUIREMENT_IN_IMPL into a hard error\n\ncc #37166", "tree": {"sha": "8766ae39a0a5fa0c7823d7392ae7f94a6afaf84d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8766ae39a0a5fa0c7823d7392ae7f94a6afaf84d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "html_url": "https://github.com/rust-lang/rust/commit/0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64206b44b9925a8eb5d9e2614c5e6175a1b5533a", "url": "https://api.github.com/repos/rust-lang/rust/commits/64206b44b9925a8eb5d9e2614c5e6175a1b5533a", "html_url": "https://github.com/rust-lang/rust/commit/64206b44b9925a8eb5d9e2614c5e6175a1b5533a"}], "stats": {"total": 114, "additions": 21, "deletions": 93}, "files": [{"sha": "c262e966576bd29aa4ec22d14ec60102143b4cff", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -880,14 +880,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         if let SubregionOrigin::CompareImplMethodObligation {\n-            span, item_name, impl_item_def_id, trait_item_def_id, lint_id\n+            span, item_name, impl_item_def_id, trait_item_def_id,\n         } = origin {\n             self.report_extra_impl_obligation(span,\n                                               item_name,\n                                               impl_item_def_id,\n                                               trait_item_def_id,\n-                                              &format!(\"`{}: {}`\", bound_kind, sub),\n-                                              lint_id)\n+                                              &format!(\"`{}: {}`\", bound_kind, sub))\n                 .emit();\n             return;\n         }"}, {"sha": "e46613b3e4da0cd0fa804878c50ae8d1c12193fc", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -445,14 +445,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             infer::CompareImplMethodObligation { span,\n                                                  item_name,\n                                                  impl_item_def_id,\n-                                                 trait_item_def_id,\n-                                                 lint_id } => {\n+                                                 trait_item_def_id } => {\n                 self.report_extra_impl_obligation(span,\n                                                   item_name,\n                                                   impl_item_def_id,\n                                                   trait_item_def_id,\n-                                                  &format!(\"`{}: {}`\", sup, sub),\n-                                                  lint_id)\n+                                                  &format!(\"`{}: {}`\", sup, sub))\n             }\n         }\n     }"}, {"sha": "110c49d820abb9171f18842f80b2e1a97460eccd", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -274,10 +274,6 @@ pub enum SubregionOrigin<'tcx> {\n         item_name: ast::Name,\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n-\n-        // this is `Some(_)` if this error arises from the bug fix for\n-        // #18937. This is a temporary measure.\n-        lint_id: Option<ast::NodeId>,\n     },\n }\n \n@@ -1532,14 +1528,12 @@ impl<'tcx> SubregionOrigin<'tcx> {\n \n             traits::ObligationCauseCode::CompareImplMethodObligation { item_name,\n                                                                        impl_item_def_id,\n-                                                                       trait_item_def_id,\n-                                                                       lint_id } =>\n+                                                                       trait_item_def_id, } =>\n                 SubregionOrigin::CompareImplMethodObligation {\n                     span: cause.span,\n                     item_name,\n                     impl_item_def_id,\n                     trait_item_def_id,\n-                    lint_id,\n                 },\n \n             _ => default(),"}, {"sha": "75446586365dda63e200b1d3f50e52adc7b9b4be", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -161,12 +161,6 @@ declare_lint! {\n     \"patterns in functions without body were erroneously allowed\"\n }\n \n-declare_lint! {\n-    pub EXTRA_REQUIREMENT_IN_IMPL,\n-    Deny,\n-    \"detects extra requirements in impls that were erroneously allowed\"\n-}\n-\n declare_lint! {\n     pub LEGACY_DIRECTORY_OWNERSHIP,\n     Deny,\n@@ -254,7 +248,6 @@ impl LintPass for HardwiredLints {\n             RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n             SAFE_EXTERN_STATICS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,\n-            EXTRA_REQUIREMENT_IN_IMPL,\n             LEGACY_DIRECTORY_OWNERSHIP,\n             LEGACY_IMPORTS,\n             LEGACY_CONSTRUCTOR_VISIBILITY,"}, {"sha": "7c38cf75b8d5a4f6bd457b84027c4488d1edd86c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -33,7 +33,6 @@ use hir::def_id::DefId;\n use infer::{self, InferCtxt};\n use infer::type_variable::TypeVariableOrigin;\n use middle::const_val;\n-use rustc::lint::builtin::EXTRA_REQUIREMENT_IN_IMPL;\n use std::fmt;\n use syntax::ast;\n use session::DiagnosticMessageId;\n@@ -481,30 +480,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                         item_name: ast::Name,\n                                         _impl_item_def_id: DefId,\n                                         trait_item_def_id: DefId,\n-                                        requirement: &fmt::Display,\n-                                        lint_id: Option<ast::NodeId>) // (*)\n+                                        requirement: &fmt::Display)\n                                         -> DiagnosticBuilder<'tcx>\n     {\n-        // (*) This parameter is temporary and used only for phasing\n-        // in the bug fix to #18937. If it is `Some`, it has a kind of\n-        // weird effect -- the diagnostic is reported as a lint, and\n-        // the builder which is returned is marked as canceled.\n-\n         let msg = \"impl has stricter requirements than trait\";\n-        let mut err = match lint_id {\n-            Some(node_id) => {\n-                self.tcx.struct_span_lint_node(EXTRA_REQUIREMENT_IN_IMPL,\n-                                               node_id,\n-                                               error_span,\n-                                               msg)\n-            }\n-            None => {\n-                struct_span_err!(self.tcx.sess,\n-                                 error_span,\n-                                 E0276,\n-                                 \"{}\", msg)\n-            }\n-        };\n+        let mut err = struct_span_err!(self.tcx.sess,\n+                                       error_span,\n+                                       E0276,\n+                                       \"{}\", msg);\n \n         if let Some(trait_item_span) = self.tcx.hir.span_if_local(trait_item_def_id) {\n             let span = self.tcx.sess.codemap().def_span(trait_item_span);\n@@ -543,15 +526,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let mut err = match *error {\n             SelectionError::Unimplemented => {\n                 if let ObligationCauseCode::CompareImplMethodObligation {\n-                    item_name, impl_item_def_id, trait_item_def_id, lint_id\n+                    item_name, impl_item_def_id, trait_item_def_id,\n                 } = obligation.cause.code {\n                     self.report_extra_impl_obligation(\n                         span,\n                         item_name,\n                         impl_item_def_id,\n                         trait_item_def_id,\n-                        &format!(\"`{}`\", obligation.predicate),\n-                        lint_id)\n+                        &format!(\"`{}`\", obligation.predicate))\n                         .emit();\n                     return;\n                 }"}, {"sha": "297974f1c9a984d83da87a7d4ba14f5082979127", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -152,7 +152,6 @@ pub enum ObligationCauseCode<'tcx> {\n         item_name: ast::Name,\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n-        lint_id: Option<ast::NodeId>,\n     },\n \n     /// Checking that this expression can be assigned where it needs to be"}, {"sha": "9231995018065fd941c0435976cd9579fa3a95d9", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -214,13 +214,11 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             }\n             super::CompareImplMethodObligation { item_name,\n                                                  impl_item_def_id,\n-                                                 trait_item_def_id,\n-                                                 lint_id } => {\n+                                                 trait_item_def_id } => {\n                 Some(super::CompareImplMethodObligation {\n                     item_name,\n                     impl_item_def_id,\n                     trait_item_def_id,\n-                    lint_id,\n                 })\n             }\n             super::ExprAssignable => Some(super::ExprAssignable),"}, {"sha": "97c34a1c30275e12414b1f6b48b7d25d8dd272f6", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -207,10 +207,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n             reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(EXTRA_REQUIREMENT_IN_IMPL),\n-            reference: \"issue #37166 <https://github.com/rust-lang/rust/issues/37166>\",\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_DIRECTORY_OWNERSHIP),\n             reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n@@ -276,4 +272,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/36891\");\n     store.register_removed(\"lifetime_underscore\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/36892\");\n+    store.register_removed(\"extra_requirement_in_impl\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/37166\");\n }"}, {"sha": "a7db51a540b3e5e5c4f25d3e12c7bc270fb49ac9", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -10,8 +10,6 @@\n \n use rustc::hir::{self, ImplItemKind, TraitItemKind};\n use rustc::infer::{self, InferOk};\n-use rustc::middle::free_region::FreeRegionMap;\n-use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::util::ExplicitSelf;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n@@ -38,8 +36,7 @@ pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      impl_m_span: Span,\n                                      trait_m: &ty::AssociatedItem,\n                                      impl_trait_ref: ty::TraitRef<'tcx>,\n-                                     trait_item_span: Option<Span>,\n-                                     old_broken_mode: bool) {\n+                                     trait_item_span: Option<Span>) {\n     debug!(\"compare_impl_method(impl_trait_ref={:?})\",\n            impl_trait_ref);\n \n@@ -71,8 +68,7 @@ pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                              impl_m,\n                                                              impl_m_span,\n                                                              trait_m,\n-                                                             impl_trait_ref,\n-                                                             old_broken_mode) {\n+                                                             impl_trait_ref) {\n         return;\n     }\n }\n@@ -81,8 +77,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                           impl_m: &ty::AssociatedItem,\n                                           impl_m_span: Span,\n                                           trait_m: &ty::AssociatedItem,\n-                                          impl_trait_ref: ty::TraitRef<'tcx>,\n-                                          old_broken_mode: bool)\n+                                          impl_trait_ref: ty::TraitRef<'tcx>)\n                                           -> Result<(), ErrorReported> {\n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n@@ -98,7 +93,6 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             item_name: impl_m.name,\n             impl_item_def_id: impl_m.def_id,\n             trait_item_def_id: trait_m.def_id,\n-            lint_id: if !old_broken_mode { Some(impl_m_node_id) } else { None },\n         },\n     };\n \n@@ -334,22 +328,8 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n-        if old_broken_mode {\n-            // FIXME(#18937) -- this is how the code used to\n-            // work. This is buggy because the fulfillment cx creates\n-            // region obligations that get overlooked.  The right\n-            // thing to do is the code below. But we keep this old\n-            // pass around temporarily.\n-            let region_scope_tree = region::ScopeTree::default();\n-            let mut free_regions = FreeRegionMap::new();\n-            free_regions.relate_free_regions_from_predicates(&param_env.caller_bounds);\n-            infcx.resolve_regions_and_report_errors(impl_m.def_id,\n-                                                    &region_scope_tree,\n-                                                    &free_regions);\n-        } else {\n-            let fcx = FnCtxt::new(&inh, param_env, impl_m_node_id);\n-            fcx.regionck_item(impl_m_node_id, impl_m_span, &[]);\n-        }\n+        let fcx = FnCtxt::new(&inh, param_env, impl_m_node_id);\n+        fcx.regionck_item(impl_m_node_id, impl_m_span, &[]);\n \n         Ok(())\n     })"}, {"sha": "19ea1b1795004a7fce39871063912154d42fb1e9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -1339,24 +1339,12 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 hir::ImplItemKind::Method(..) => {\n                     let trait_span = tcx.hir.span_if_local(ty_trait_item.def_id);\n                     if ty_trait_item.kind == ty::AssociatedKind::Method {\n-                        let err_count = tcx.sess.err_count();\n                         compare_impl_method(tcx,\n                                             &ty_impl_item,\n                                             impl_item.span,\n                                             &ty_trait_item,\n                                             impl_trait_ref,\n-                                            trait_span,\n-                                            true); // start with old-broken-mode\n-                        if err_count == tcx.sess.err_count() {\n-                            // old broken mode did not report an error. Try with the new mode.\n-                            compare_impl_method(tcx,\n-                                                &ty_impl_item,\n-                                                impl_item.span,\n-                                                &ty_trait_item,\n-                                                impl_trait_ref,\n-                                                trait_span,\n-                                                false); // use the new mode\n-                        }\n+                                            trait_span);\n                     } else {\n                         let mut err = struct_span_err!(tcx.sess, impl_item.span, E0324,\n                                   \"item `{}` is an associated method, \\"}, {"sha": "f7f84e6452ddbc9fee4334c6fadbb726c0635fb5", "filename": "src/test/compile-fail/issue-18937.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d78e40e88dbd53619cd5ec04b0f53cea871c07d/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs?ref=0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "patch": "@@ -27,7 +27,6 @@ trait A<'a> {\n \n impl<'a> A<'a> for B {\n     fn foo<F>(&mut self, f: F) //~ ERROR impl has stricter\n-        //~^ WARNING future release\n         where F: fmt::Debug + 'static,\n     {\n         self.list.push(Box::new(f));"}]}