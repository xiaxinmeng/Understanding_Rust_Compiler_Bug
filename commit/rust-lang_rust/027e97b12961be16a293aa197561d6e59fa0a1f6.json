{"sha": "027e97b12961be16a293aa197561d6e59fa0a1f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyN2U5N2IxMjk2MWJlMTZhMjkzYWExOTc1NjFkNmU1OWZhMGExZjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-03T00:42:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-03T00:49:36Z"}, "message": "bench: Add an unwinding benchmark", "tree": {"sha": "9b991ce2e2f53800f067b19888a0adc008ea4bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b991ce2e2f53800f067b19888a0adc008ea4bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/027e97b12961be16a293aa197561d6e59fa0a1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/027e97b12961be16a293aa197561d6e59fa0a1f6", "html_url": "https://github.com/rust-lang/rust/commit/027e97b12961be16a293aa197561d6e59fa0a1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/027e97b12961be16a293aa197561d6e59fa0a1f6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab738f4afae1dce2b65f969f80cfc597d95b16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab738f4afae1dce2b65f969f80cfc597d95b16e", "html_url": "https://github.com/rust-lang/rust/commit/3ab738f4afae1dce2b65f969f80cfc597d95b16e"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "7d4fd23342b542c7d6f789cd945d7dd4874de628", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/027e97b12961be16a293aa197561d6e59fa0a1f6/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027e97b12961be16a293aa197561d6e59fa0a1f6/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=027e97b12961be16a293aa197561d6e59fa0a1f6", "patch": "@@ -0,0 +1,85 @@\n+// xfail-win32\n+\n+use std;\n+\n+import tuple::{first, second};\n+import std::list::{list, cons, nil};\n+import std::time::precise_time_s;\n+\n+fn main() {\n+    let (repeat, depth) = if os::getenv(\"RUST_BENCH\").is_some() {\n+        (50, 1000)\n+    } else {\n+        (10, 10)\n+    };\n+\n+    run(repeat, depth);\n+}\n+\n+fn run(repeat: int, depth: int) {\n+    iter::repeat(repeat as uint) { ||\n+        #debug(\"starting %.4f\", precise_time_s());\n+        task::try { ||\n+            recurse_or_fail(depth, none)\n+        };\n+        #debug(\"stopping %.4f\", precise_time_s());\n+    }\n+}\n+\n+type nillist = list<()>;\n+\n+// Filled with things that have to be unwound\n+enum st {\n+    st_({\n+        box: @nillist,\n+        unique: ~nillist,\n+        fn_box: fn@() -> @nillist,\n+        fn_unique: fn~() -> ~nillist,\n+        tuple: (@nillist, ~nillist),\n+        vec: [@nillist],\n+        res: r\n+    })\n+}\n+\n+resource r(_l: @nillist) {\n+}\n+\n+fn recurse_or_fail(depth: int, st: option<st>) {\n+    if depth == 0 {\n+        #debug(\"unwinding %.4f\", precise_time_s());\n+        fail;\n+    } else {\n+        let depth = depth - 1;\n+\n+        let st = alt st {\n+          none {\n+            st_({\n+                box: @nil,\n+                unique: ~nil,\n+                fn_box: fn@() -> @nillist { @nil::<()> },\n+                fn_unique: fn~() -> ~nillist { ~nil::<()> },\n+                tuple: (@nil, ~nil),\n+                vec: [@nil],\n+                res: r(@nil)\n+            })\n+          }\n+          some(st) {\n+            let fn_box = st.fn_box;\n+            let fn_unique = st.fn_unique;\n+\n+            st_({\n+                box: @cons((), st.box),\n+                unique: ~cons((), @*st.unique),\n+                fn_box: fn@() -> @nillist { @cons((), fn_box()) },\n+                fn_unique: fn~() -> ~nillist { ~cons((), @*fn_unique()) },\n+                tuple: (@cons((), first(st.tuple)),\n+                        ~cons((), @*second(st.tuple))),\n+                vec: st.vec + [@cons((), st.vec.last())],\n+                res: r(@cons((), *(st.res)))\n+            })\n+          }\n+        };\n+\n+        recurse_or_fail(depth, some(st));\n+    }\n+}"}]}