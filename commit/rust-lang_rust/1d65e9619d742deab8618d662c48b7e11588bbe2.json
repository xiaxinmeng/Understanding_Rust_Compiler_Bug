{"sha": "1d65e9619d742deab8618d662c48b7e11588bbe2", "node_id": "C_kwDOAAsO6NoAKDFkNjVlOTYxOWQ3NDJkZWFiODYxOGQ2NjJjNDhiN2UxMTU4OGJiZTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-07T19:48:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-07T19:48:13Z"}, "message": "Rollup merge of #101435 - JakobDegen:bitwidth-tests, r=wesleywiser\n\nRemove unnecessary `EMIT_MIR_FOR_EACH_BITWIDTH`\n\nThis commit removes the annotation only for those tests where the 32 bit and 64 bit files were exactly identical. I didn't touch anything in the `mir-opt/const` directory, since having this annotation there seems more principled, even if it doesn't make a difference.\n\nThis also removes four additional files related to the `separate_const_switch.rs` test. The associated annotations were removed in #100827 , but I forgot to remove the files as well. (#97564 is the issue tracking an automated check here)\n\nr? ```@wesleywiser```", "tree": {"sha": "dd6e2895c5d6ca29cba883af66384e8f56ac5a3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd6e2895c5d6ca29cba883af66384e8f56ac5a3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d65e9619d742deab8618d662c48b7e11588bbe2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGPV9CRBK7hj4Ov3rIwAAhPUIACNOgCZjBjKd75usvGCMMWkn\nG3N2jUukHREdSRqJ6DGIsUkPcWZ1ZKfeNmrsyigtQOdF2CHC4AyjkhCUIFmh91r9\nVIQNp/8GO/uEqRSkDLFo/vwoZLvV41Zz/viALfKy2ckS+0AGrbMDiQrR03sBBnLK\n7kF6dA9E5lek5AcDgTpy6V8ZrnWyKEz8KYLqgM0zIEpcGMi3UgPGbwzBEDlKhvZN\niSnctsnsLFqQ6NhVOOSXEZbmKrLpHmNPjHZdCX/9W/8uUp2XZ2h/YiHZ+5deibsh\nWo0apZfQRqcFuWnJ5qEydWMe0asaRqThDxhnUQkFWEP1nddAhUwvWOluDTDY5J8=\n=X/py\n-----END PGP SIGNATURE-----\n", "payload": "tree dd6e2895c5d6ca29cba883af66384e8f56ac5a3f\nparent d1ebba41c140e17cab6472ad83c7728c323caab2\nparent 46130a1d182c23dc967b6fc211019ce882f312b4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662580093 +0200\ncommitter GitHub <noreply@github.com> 1662580093 +0200\n\nRollup merge of #101435 - JakobDegen:bitwidth-tests, r=wesleywiser\n\nRemove unnecessary `EMIT_MIR_FOR_EACH_BITWIDTH`\n\nThis commit removes the annotation only for those tests where the 32 bit and 64 bit files were exactly identical. I didn't touch anything in the `mir-opt/const` directory, since having this annotation there seems more principled, even if it doesn't make a difference.\n\nThis also removes four additional files related to the `separate_const_switch.rs` test. The associated annotations were removed in #100827 , but I forgot to remove the files as well. (#97564 is the issue tracking an automated check here)\n\nr? ```@wesleywiser```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d65e9619d742deab8618d662c48b7e11588bbe2", "html_url": "https://github.com/rust-lang/rust/commit/1d65e9619d742deab8618d662c48b7e11588bbe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d65e9619d742deab8618d662c48b7e11588bbe2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ebba41c140e17cab6472ad83c7728c323caab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ebba41c140e17cab6472ad83c7728c323caab2", "html_url": "https://github.com/rust-lang/rust/commit/d1ebba41c140e17cab6472ad83c7728c323caab2"}, {"sha": "46130a1d182c23dc967b6fc211019ce882f312b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/46130a1d182c23dc967b6fc211019ce882f312b4", "html_url": "https://github.com/rust-lang/rust/commit/46130a1d182c23dc967b6fc211019ce882f312b4"}], "stats": {"total": 1164, "additions": 12, "deletions": 1152}, "files": [{"sha": "e7bde81d4ca36204fe9642958546f34714226aa2", "filename": "src/test/mir-opt/array-index-is-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -7,7 +7,7 @@ unsafe fn foo(z: *mut usize) -> u32 {\n     99\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = [42, 43, 44];"}, {"sha": "27f883ed321ae658cd865ccae2c94111cfe9aab1", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,64 +0,0 @@\n-// MIR for `main` after SimplifyCfg-elaborate-drops\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +0:11\n-    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n-    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n-    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n-    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n-    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-    scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n-        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n-        scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n-            let _3: *mut usize;          // in scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n-            scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n-                scope 4 {\n-                }\n-            }\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n-        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:+1:17: +1:29\n-        StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n-        _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:+2:17: +2:18\n-        StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n-        StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-        _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-        _3 = &raw mut (*_4);             // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-        StorageDead(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:31: +3:32\n-        StorageLive(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n-        StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n-        _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n-        _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array-index-is-temporary.rs:+4:21: +4:27\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n-                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n-        StorageDead(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:26: +4:27\n-        StorageLive(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n-        _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n-        _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-    }\n-\n-    bb2: {\n-        _1[_7] = move _5;                // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:29\n-        StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:28: +4:29\n-        StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:29: +4:30\n-        _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +5:2\n-        StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n-        StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n-        StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/array-index-is-temporary.rs:+5:2: +5:2\n-    }\n-}"}, {"sha": "27f883ed321ae658cd865ccae2c94111cfe9aab1", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir"}, {"sha": "232bcc7b27d465dc327ed666410f825ecd34ada2", "filename": "src/test/mir-opt/inline/inline-into-box-place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -1,7 +1,7 @@\n // ignore-endian-big\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -Z mir-opt-level=4\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n #![feature(box_syntax)]\n // EMIT_MIR inline_into_box_place.main.Inline.diff\n fn main() {"}, {"sha": "7017413ad38a6440b1634cc7372ee207fbde8e65", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,82 +0,0 @@\n-- // MIR for `main` before Inline\n-+ // MIR for `main` after Inline\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:+0:11: +0:11\n-      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n-      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-+     let mut _8: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-      scope 1 {\n-          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-      }\n-      scope 2 {\n-      }\n-+     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         let mut _9: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+     }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-                                           // mir::Constant\n-                                           // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n--         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         _8 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         _9 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-                                           // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n--                                          // + user_ty: UserType(1)\n--                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n--     }\n-- \n--     bb2: {\n-+                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }\n-+         Deinit((*_8));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_8).0: alloc::raw_vec::RawVec<u32>) = move _9; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_8).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n-          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:+0:11: +2:2\n--         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-+         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-      }\n-  \n--     bb3: {\n-+     bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:+2:2: +2:2\n-      }\n-  \n--     bb4 (cleanup): {\n-+     bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n--     }\n-- \n--     bb5 (cleanup): {\n--         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n--                                          // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n-      }\n-  }\n-  "}, {"sha": "7017413ad38a6440b1634cc7372ee207fbde8e65", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff"}, {"sha": "cbd8633a345c7fdf16fa3bf449272ccf545db7ee", "filename": "src/test/mir-opt/issue-41697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -13,7 +13,7 @@ trait Foo {\n     fn get(&self) -> [u8; 2];\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.mir\n impl Foo for [u8; 1+1] {\n     fn get(&self) -> [u8; 2] {"}, {"sha": "ebb5f5042fccb7084b85226017187e67d603f417", "filename": "src/test/mir-opt/issue-72181.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue-72181.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-72181.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -11,14 +11,14 @@ union Foo {\n     b: Never\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR issue_72181.foo.mir_map.0.mir\n fn foo(xs: [(Never, u32); 1]) -> u32 { xs[0].1 }\n \n // EMIT_MIR issue_72181.bar.mir_map.0.mir\n fn bar([(_, x)]: [(Never, u32); 1]) -> u32 { x }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR issue_72181.main.mir_map.0.mir\n fn main() {\n     let _ = mem::size_of::<Foo>();"}, {"sha": "be114cab719c0c77fb5abdb715f464b549126fdc", "filename": "src/test/mir-opt/issue-73223.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     assert_eq!(split, 1);\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR issue_73223.main.SimplifyArmIdentity.diff"}, {"sha": "047b24db46643fe1aaed39e2f6cac7d355fc70b6", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.64bit.mir", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,20 +0,0 @@\n-// MIR for `<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}` after SimplifyCfg-promote-consts\n-\n-<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}: usize = {\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-    let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-\n-    bb0: {\n-        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-    }\n-\n-    bb1: {\n-        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-        return;                          // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-    }\n-}"}, {"sha": "047b24db46643fe1aaed39e2f6cac7d355fc70b6", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.32bit.mir"}, {"sha": "972ce1d5078543d60d5d2c4700885c6fb2d42575", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,17 +0,0 @@\n-// MIR for `bar` 0 mir_map\n-\n-fn bar(_1: [(Never, u32); 1]) -> u32 {\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:+0:40: +0:43\n-    let _2: u32;                         // in scope 0 at $DIR/issue-72181.rs:+0:13: +0:14\n-    scope 1 {\n-        debug x => _2;                   // in scope 1 at $DIR/issue-72181.rs:+0:13: +0:14\n-    }\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:13: +0:14\n-        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:+0:13: +0:14\n-        _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:+0:46: +0:47\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:48: +0:49\n-        return;                          // scope 0 at $DIR/issue-72181.rs:+0:49: +0:49\n-    }\n-}"}, {"sha": "972ce1d5078543d60d5d2c4700885c6fb2d42575", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.32bit.mir"}, {"sha": "534f131ea936b44f719c4fc8da5067aacd02fc24", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,27 +0,0 @@\n-// MIR for `foo` 0 mir_map\n-\n-fn foo(_1: [(Never, u32); 1]) -> u32 {\n-    debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:+0:8: +0:10\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:+0:34: +0:37\n-    let _2: usize;                       // in scope 0 at $DIR/issue-72181.rs:+0:43: +0:44\n-    let mut _3: usize;                   // in scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-    let mut _4: bool;                    // in scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:43: +0:44\n-        _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:+0:43: +0:44\n-        _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-    }\n-\n-    bb1: {\n-        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:+0:40: +0:47\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:48: +0:49\n-        return;                          // scope 0 at $DIR/issue-72181.rs:+0:49: +0:49\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:+0:1: +0:49\n-    }\n-}"}, {"sha": "534f131ea936b44f719c4fc8da5067aacd02fc24", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.32bit.mir"}, {"sha": "425906f84fcd6a42b784d21b7afd8b8629b22407", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,62 +0,0 @@\n-// MIR for `main` 0 mir_map\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:+0:11: +0:11\n-    let mut _1: usize;                   // in scope 0 at $DIR/issue-72181.rs:+1:13: +1:34\n-    let mut _3: Foo;                     // in scope 0 at $DIR/issue-72181.rs:+3:14: +3:27\n-    let mut _4: Foo;                     // in scope 0 at $DIR/issue-72181.rs:+3:29: +3:42\n-    let mut _5: u64;                     // in scope 0 at $DIR/issue-72181.rs:+4:13: +4:30\n-    let _6: usize;                       // in scope 0 at $DIR/issue-72181.rs:+4:24: +4:25\n-    let mut _7: usize;                   // in scope 0 at $DIR/issue-72181.rs:+4:22: +4:26\n-    let mut _8: bool;                    // in scope 0 at $DIR/issue-72181.rs:+4:22: +4:26\n-    scope 1 {\n-        let _2: [Foo; 2];                // in scope 1 at $DIR/issue-72181.rs:+3:9: +3:10\n-        scope 2 {\n-            debug f => _2;               // in scope 2 at $DIR/issue-72181.rs:+3:9: +3:10\n-            scope 3 {\n-            }\n-            scope 4 {\n-            }\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:+1:13: +1:34\n-        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-72181.rs:+1:13: +1:34\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:24:13: 24:32\n-                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:+1:34: +1:35\n-        StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:+3:9: +3:10\n-        StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:+3:14: +3:27\n-        _3 = Foo { a: const 42_u64 };    // scope 1 at $DIR/issue-72181.rs:+3:14: +3:27\n-        StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:+3:29: +3:42\n-        _4 = Foo { a: const 10_u64 };    // scope 1 at $DIR/issue-72181.rs:+3:29: +3:42\n-        _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:+3:13: +3:43\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:+3:42: +3:43\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:+3:42: +3:43\n-        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue-72181.rs:+3:9: +3:10\n-        StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:+4:13: +4:30\n-        StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:+4:24: +4:25\n-        _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:+4:24: +4:25\n-        _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:+4:22: +4:26\n-        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:+4:22: +4:26\n-        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb2, unwind: bb3]; // scope 4 at $DIR/issue-72181.rs:+4:22: +4:26\n-    }\n-\n-    bb2: {\n-        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:+4:22: +4:28\n-        StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:+4:30: +4:31\n-        StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:+4:30: +4:31\n-        _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:+0:11: +5:2\n-        StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/issue-72181.rs:+5:2: +5:2\n-    }\n-\n-    bb3 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:+0:1: +5:2\n-    }\n-}"}, {"sha": "425906f84fcd6a42b784d21b7afd8b8629b22407", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir"}, {"sha": "ac7fe31f3b39ce5282b1d97f9b6d72f52708012b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "removed", "additions": 0, "deletions": 161, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,161 +0,0 @@\n-- // MIR for `main` before SimplifyArmIdentity\n-+ // MIR for `main` after SimplifyArmIdentity\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-      let mut _3: isize;                   // in scope 0 at $DIR/issue-73223.rs:+2:9: +2:16\n-      let _4: i32;                         // in scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-      let mut _5: !;                       // in scope 0 at $DIR/issue-73223.rs:+3:17: +3:23\n-      let mut _7: i32;                     // in scope 0 at $DIR/issue-73223.rs:+6:22: +6:27\n-      let _8: ();                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _12: i32;                        // in scope 0 at $DIR/issue-73223.rs:+7:23: +7:24\n-      let mut _15: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _21: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _22: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _23: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _27: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      scope 1 {\n-          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n-          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          scope 3 {\n-              debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:+6:9: +6:14\n-              let _13: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _14: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _28: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              scope 4 {\n-                  debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _20: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  scope 5 {\n-                      debug kind => _20;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  }\n-              }\n-          }\n-      }\n-      scope 2 {\n-          debug v => _4;                   // in scope 2 at $DIR/issue-73223.rs:+2:14: +2:15\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:+1:17: +1:30\n-      }\n-  \n-      bb1: {\n-          nop;                             // scope 0 at $DIR/issue-73223.rs:+3:17: +3:23\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-      }\n-  \n-      bb3: {\n-          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:+6:22: +6:27\n-          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:+6:22: +6:27\n-          Deinit(_6);                      // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:+6:27: +6:28\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_9);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _15) -> [false: bb5, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb4: {\n-          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-          StorageLive(_23);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_24);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _24 = _13;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = _24;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-      }\n-  \n-      bb5: {\n-          nop;                             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          nop;                             // scope 0 at $DIR/issue-73223.rs:+0:11: +8:2\n-          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n-      }\n-  }\n-  "}, {"sha": "ac7fe31f3b39ce5282b1d97f9b6d72f52708012b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff"}, {"sha": "f9eeb1ea5b96095be840b3afd1c193409cdb55ba", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,88 +0,0 @@\n-- // MIR for `bar` before MatchBranchSimplification\n-+ // MIR for `bar` after MatchBranchSimplification\n-  \n-  fn bar(_1: i32) -> (bool, bool, bool, bool) {\n-      debug i => _1;                       // in scope 0 at $DIR/matches_reduce_branches.rs:+0:8: +0:9\n-      let mut _0: (bool, bool, bool, bool); // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:19: +0:43\n-      let _2: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:10\n-      let _6: ();                          // in scope 0 at $DIR/matches_reduce_branches.rs:+6:5: +21:6\n-      let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+23:6: +23:7\n-      let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+23:9: +23:10\n-      let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+23:12: +23:13\n-      let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+23:15: +23:16\n-+     let mut _11: i32;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n-      scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/matches_reduce_branches.rs:+1:9: +1:10\n-          let _3: bool;                    // in scope 1 at $DIR/matches_reduce_branches.rs:+2:9: +2:10\n-          scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/matches_reduce_branches.rs:+2:9: +2:10\n-              let _4: bool;                // in scope 2 at $DIR/matches_reduce_branches.rs:+3:9: +3:10\n-              scope 3 {\n-                  debug c => _4;           // in scope 3 at $DIR/matches_reduce_branches.rs:+3:9: +3:10\n-                  let _5: bool;            // in scope 3 at $DIR/matches_reduce_branches.rs:+4:9: +4:10\n-                  scope 4 {\n-                      debug d => _5;       // in scope 4 at $DIR/matches_reduce_branches.rs:+4:9: +4:10\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 1 at $DIR/matches_reduce_branches.rs:+2:9: +2:10\n-          StorageLive(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:+3:9: +3:10\n-          StorageLive(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:+4:9: +4:10\n-          StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +21:6\n--         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n--     }\n-- \n--     bb1: {\n--         _2 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+15:13: +15:21\n--         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+16:13: +16:22\n--         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+17:13: +17:22\n--         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+18:13: +18:21\n--         Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n--         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n--     }\n-- \n--     bb2: {\n--         _2 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+8:13: +8:22\n--         _3 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+9:13: +9:21\n-+         StorageLive(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n-+         _11 = _1;                        // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n-+         _2 = Ne(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:+8:13: +8:22\n-+         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:+9:13: +9:21\n-          _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+10:13: +10:22\n-          _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+11:13: +11:21\n-          Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n--         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n--     }\n-- \n--     bb3: {\n-+         StorageDead(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:+6:5: +6:12\n-          StorageDead(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:+21:6: +21:7\n-          StorageLive(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:6: +23:7\n-          _7 = _2;                         // scope 4 at $DIR/matches_reduce_branches.rs:+23:6: +23:7\n-          StorageLive(_8);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:9: +23:10\n-          _8 = _3;                         // scope 4 at $DIR/matches_reduce_branches.rs:+23:9: +23:10\n-          StorageLive(_9);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:12: +23:13\n-          _9 = _4;                         // scope 4 at $DIR/matches_reduce_branches.rs:+23:12: +23:13\n-          StorageLive(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:+23:15: +23:16\n-          _10 = _5;                        // scope 4 at $DIR/matches_reduce_branches.rs:+23:15: +23:16\n-          Deinit(_0);                      // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.0: bool) = move _7;          // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.1: bool) = move _8;          // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.2: bool) = move _9;          // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          (_0.3: bool) = move _10;         // scope 4 at $DIR/matches_reduce_branches.rs:+23:5: +23:17\n-          StorageDead(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n-          StorageDead(_9);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n-          StorageDead(_8);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n-          StorageDead(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:+23:16: +23:17\n-          StorageDead(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:+24:1: +24:2\n-          StorageDead(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:+24:1: +24:2\n-          StorageDead(_3);                 // scope 1 at $DIR/matches_reduce_branches.rs:+24:1: +24:2\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+24:1: +24:2\n-          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+24:2: +24:2\n-      }\n-  }\n-  "}, {"sha": "f9eeb1ea5b96095be840b3afd1c193409cdb55ba", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.32bit.diff"}, {"sha": "0b40b3be8bdd41efd5e773ab32228a05b64f394c", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,55 +0,0 @@\n-- // MIR for `foo` before MatchBranchSimplification\n-+ // MIR for `foo` after MatchBranchSimplification\n-  \n-  fn foo(_1: Option<()>) -> () {\n-      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:+0:8: +0:11\n-      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:25\n-      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+1:22: +1:26\n-+     let mut _4: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:+1:17: +1:20\n--         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         StorageLive(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _4 = move _3;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _2 = Eq(_4, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         StorageDead(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb1: {\n--         _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     }\n-- \n--     bb2: {\n--         _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     }\n-- \n--     bb3: {\n--         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     }\n-- \n--     bb4: {\n-          Deinit(_0);                      // scope 0 at $DIR/matches_reduce_branches.rs:+2:9: +2:11\n--         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n-+         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n-      }\n-  \n--     bb5: {\n-+     bb2: {\n-          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:+3:6: +3:6\n--         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n-+         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n-      }\n-  \n--     bb6: {\n-+     bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+3:5: +3:6\n-          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+4:2: +4:2\n-      }\n-  }\n-  "}, {"sha": "0b40b3be8bdd41efd5e773ab32228a05b64f394c", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.32bit.diff"}, {"sha": "b8c7722cd3713c905b31331b98b0cc2623594660", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,113 +0,0 @@\n-- // MIR for `match_nested_if` before MatchBranchSimplification\n-+ // MIR for `match_nested_if` after MatchBranchSimplification\n-  \n-  fn match_nested_if() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:29\n-      let _1: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-      let mut _2: ();                      // in scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n-      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-      let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-      let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+     let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-+     let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-+     let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-      scope 1 {\n-          debug val => _1;                 // in scope 1 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n-          Deinit(_2);                      // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n-          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-          StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-          StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-          _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n--         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n--     }\n-- \n--     bb1: {\n--         _5 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:31: +2:35\n--         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n--     }\n-- \n--     bb2: {\n--         _5 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+2:45: +2:50\n--         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n--     }\n-- \n--     bb3: {\n-+         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+         _7 = move _6;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:45: +2:50\n-+         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-          StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:51: +2:52\n--         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n--     }\n-- \n--     bb4: {\n--         _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:55: +2:59\n--         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n--     }\n-- \n--     bb5: {\n--         _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+2:69: +2:74\n--         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n--     }\n-- \n--     bb6: {\n-+         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-+         _8 = move _5;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-+         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:69: +2:74\n-+         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n-          StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:75: +2:76\n--         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n--     }\n-- \n--     bb7: {\n--         _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+3:13: +3:17\n--         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n--     }\n-- \n--     bb8: {\n--         _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+5:13: +5:18\n--         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n--     }\n-- \n--     bb9: {\n--         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n--     }\n-- \n--     bb10: {\n-+         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-+         _9 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-+         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+5:13: +5:18\n-+         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n-+         StorageLive(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-+         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n-          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n--         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n--     }\n-- \n--     bb11: {\n--         StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n--         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n--         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n--     }\n-- \n--     bb12: {\n-+         _1 = Ne(_10, const false);       // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n-+         StorageDead(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+11:6: +11:7\n-          _0 = _1;                         // scope 1 at $DIR/matches_reduce_branches.rs:+12:5: +12:8\n-          StorageDead(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:+13:1: +13:2\n-          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+13:2: +13:2\n-      }\n-  }\n-  "}, {"sha": "b8c7722cd3713c905b31331b98b0cc2623594660", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.diff?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff"}, {"sha": "a81d5f7b4e8bc7a529a69fb680b449b7f7fe67fa", "filename": "src/test/mir-opt/matches_reduce_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -1,6 +1,6 @@\n // unit-test: MatchBranchSimplification\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR matches_reduce_branches.foo.MatchBranchSimplification.diff\n // EMIT_MIR matches_reduce_branches.bar.MatchBranchSimplification.diff\n // EMIT_MIR matches_reduce_branches.match_nested_if.MatchBranchSimplification.diff"}, {"sha": "1b4dddc1d43a030a725a4793feb833d5ae40cad4", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,32 +0,0 @@\n-- // MIR for `exhaustive_match` before MatchBranchSimplification\n-+ // MIR for `exhaustive_match` after MatchBranchSimplification\n-  \n-  fn exhaustive_match(_1: E) -> u8 {\n-      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:+0:25: +0:26\n-      let mut _0: u8;                      // return place in scope 0 at $DIR/matches_u8.rs:+0:34: +0:36\n-      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:+2:9: +2:13\n-  \n-      bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-      }\n-  \n-      bb4: {\n-          return;                          // scope 0 at $DIR/matches_u8.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "1b4dddc1d43a030a725a4793feb833d5ae40cad4", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff"}, {"sha": "6e734852e1af490fec52362d823beb6ab07e7b2d", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,32 +0,0 @@\n-- // MIR for `exhaustive_match_i8` before MatchBranchSimplification\n-+ // MIR for `exhaustive_match_i8` after MatchBranchSimplification\n-  \n-  fn exhaustive_match_i8(_1: E) -> i8 {\n-      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:+0:28: +0:29\n-      let mut _0: i8;                      // return place in scope 0 at $DIR/matches_u8.rs:+0:37: +0:39\n-      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:+2:9: +2:13\n-  \n-      bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-      }\n-  \n-      bb4: {\n-          return;                          // scope 0 at $DIR/matches_u8.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "6e734852e1af490fec52362d823beb6ab07e7b2d", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff"}, {"sha": "422c3a95e8efa3cd894bb7a2dbc1e5036d806ce5", "filename": "src/test/mir-opt/matches_u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -1,6 +1,6 @@\n // unit-test: MatchBranchSimplification\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR matches_u8.exhaustive_match.MatchBranchSimplification.diff\n // EMIT_MIR matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff\n "}, {"sha": "cb65242609086e0ef04ca11b20eb2b74e0fd7e35", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -1,6 +1,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));"}, {"sha": "f9ed1036f0060ef1680f5da15f96c57132cf4355", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,60 +0,0 @@\n-// MIR for `main` after SimplifyCfg-elaborate-drops\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/packed-struct-drop-aligned.rs:+0:11: +0:11\n-    let mut _1: Packed;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:9: +1:14\n-    let mut _2: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-    let mut _3: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-    let mut _4: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-    let mut _5: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-    let mut _6: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-    scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/packed-struct-drop-aligned.rs:+1:9: +1:14\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:9: +1:14\n-        StorageLive(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-        StorageLive(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-        Deinit(_3);                      // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-        (_3.0: usize) = const 0_usize;   // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-        Deinit(_2);                      // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-        (_2.0: Droppy) = move _3;        // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-        StorageDead(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:41: +1:42\n-        Deinit(_1);                      // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:17: +1:43\n-        (_1.0: Aligned) = move _2;       // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:17: +1:43\n-        StorageDead(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:42: +1:43\n-        StorageLive(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-        StorageLive(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-        Deinit(_5);                      // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-        (_5.0: usize) = const 0_usize;   // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-        Deinit(_4);                      // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-        (_4.0: Droppy) = move _5;        // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-        StorageDead(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:28: +2:29\n-        StorageLive(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        _6 = move (_1.0: Aligned);       // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-    }\n-\n-    bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:2: +3:2\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:+0:1: +3:2\n-    }\n-\n-    bb3 (cleanup): {\n-        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:1: +3:2\n-    }\n-\n-    bb4: {\n-        StorageDead(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:28: +2:29\n-        _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:+0:11: +3:2\n-        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:1: +3:2\n-    }\n-}"}, {"sha": "f9ed1036f0060ef1680f5da15f96c57132cf4355", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir"}, {"sha": "103033c4e2b861072f03d35aed92333f8cdbb274", "filename": "src/test/mir-opt/simple-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fsimple-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fsimple-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -1,6 +1,6 @@\n // Test that we don't generate unnecessarily large MIR for very simple matches\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR simple_match.match_bool.mir_map.0.mir\n fn match_bool(x: bool) -> usize {\n     match x {"}, {"sha": "3bef6aa0579a77a32611f3130eb95f8b46dc15a3", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,29 +0,0 @@\n-// MIR for `match_bool` 0 mir_map\n-\n-fn match_bool(_1: bool) -> usize {\n-    debug x => _1;                       // in scope 0 at $DIR/simple-match.rs:+0:15: +0:16\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:+0:27: +0:32\n-\n-    bb0: {\n-        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:+1:11: +1:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:+1:5: +1:12\n-    }\n-\n-    bb1: {\n-        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:+2:9: +2:13\n-    }\n-\n-    bb2: {\n-        _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:+3:14: +3:16\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:+3:14: +3:16\n-    }\n-\n-    bb3: {\n-        _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:+2:17: +2:19\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:+2:17: +2:19\n-    }\n-\n-    bb4: {\n-        return;                          // scope 0 at $DIR/simple-match.rs:+5:2: +5:2\n-    }\n-}"}, {"sha": "3bef6aa0579a77a32611f3130eb95f8b46dc15a3", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.32bit.mir"}, {"sha": "d09bd92c4e81d176328a1159f1c23aadd8c1e723", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -11,5 +11,4 @@ fn main() {\n     map(None);\n }\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff"}, {"sha": "51d26b08b2a1c69217fbf247a24d4bf5f43efa4d", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,52 +0,0 @@\n-- // MIR for `map` before SimplifyLocals\n-+ // MIR for `map` after SimplifyLocals\n-  \n-  fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:8: +0:9\n-      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:31: +0:46\n-      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:9: +2:13\n-      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-      let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n--     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n--     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n--     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n-      scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-      }\n-  \n-      bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n-          _4 = move _3;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n-          Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          ((_0 as Some).0: std::boxed::Box<()>) = move _4; // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          Deinit(_0);                      // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-      }\n-  \n-      bb4: {\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "51d26b08b2a1c69217fbf247a24d4bf5f43efa4d", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff"}, {"sha": "344c1af2c91347c661ace0a5476d8dd05e5dd894", "filename": "src/test/mir-opt/slice-drop-shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -Zmir-opt-level=0\n \n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir\n fn main() {\n     let _fn = std::ptr::drop_in_place::<[String]> as unsafe fn(_);"}, {"sha": "b4b317e84afb7181280b38a90c3ba0f197c19e40", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.64bit.mir", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,101 +0,0 @@\n-// MIR for `std::ptr::drop_in_place` before AddMovesForPackedDrops\n-\n-fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _2: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _3: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _4: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _5: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _6: bool;                    // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _7: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _9: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _10: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _11: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _13: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _14: bool;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _15: *mut [std::string::String]; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-\n-    bb0: {\n-        goto -> bb15;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb1: {\n-        return;                          // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb3 (cleanup): {\n-        _5 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_5)) -> bb4;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb4 (cleanup): {\n-        _6 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _6) -> [false: bb3, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb5: {\n-        _7 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_7)) -> [return: bb6, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb6: {\n-        _8 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _8) -> [false: bb5, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb7: {\n-        _4 = const 0_usize;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb8: {\n-        goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb9 (cleanup): {\n-        _11 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_11)) -> bb10;            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb10 (cleanup): {\n-        _12 = Eq(_9, _10);               // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _12) -> [false: bb9, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb11: {\n-        _13 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_13)) -> [return: bb12, unwind: bb10]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb12: {\n-        _14 = Eq(_9, _10);               // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _14) -> [false: bb11, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb13: {\n-        _15 = &raw mut (*_1);            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = move _15 as *mut std::string::String (Misc); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _10 = Offset(_9, move _3);       // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        goto -> bb12;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb14: {\n-        goto -> bb13;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb15: {\n-        _2 = SizeOf(std::string::String); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _3 = Len((*_1));                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _2) -> [0_usize: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-}"}, {"sha": "b4b317e84afb7181280b38a90c3ba0f197c19e40", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.32bit.mir"}, {"sha": "9ef3d86472db2158c11d09934758ae4b107ab321", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -1,7 +1,7 @@\n // Test that we don't ICE when trying to dump MIR for unusual item types and\n // that we don't create filenames containing `<` and `>`\n // compile-flags: -Zmir-opt-level=0\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n \n struct A;\n "}, {"sha": "a72e00ecde75fa343b9a88c316592c0ccaa8d502", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,10 +0,0 @@\n-// MIR for `E::V::{constant#0}` 0 mir_map\n-\n-E::V::{constant#0}: isize = {\n-    let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10\n-\n-    bb0: {\n-        _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10\n-    }\n-}"}, {"sha": "a72e00ecde75fa343b9a88c316592c0ccaa8d502", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.32bit.mir"}, {"sha": "0686af46ed58ea5d6b97c8389e1fd8928e3b6a65", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,12 +0,0 @@\n-// MIR for `Test::X` 0 mir_map\n-\n-fn Test::X(_1: usize) -> Test {\n-    let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-\n-    bb0: {\n-        Deinit(_0);                      // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-        ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-        discriminant(_0) = 0;            // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-    }\n-}"}, {"sha": "0686af46ed58ea5d6b97c8389e1fd8928e3b6a65", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.32bit.mir"}, {"sha": "7ffd242e0dc3b49a836dd0eff2f1dd3eca8fddc1", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,39 +0,0 @@\n-// MIR for `std::ptr::drop_in_place` before AddMovesForPackedDrops\n-\n-fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _2: &mut std::vec::Vec<i32>; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-\n-    bb0: {\n-        goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb1: {\n-        return;                          // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb3: {\n-        goto -> bb1;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb4 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb5: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb6: {\n-        _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(<ZST>) }\n-    }\n-}"}, {"sha": "7ffd242e0dc3b49a836dd0eff2f1dd3eca8fddc1", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir"}, {"sha": "e2633f61b5fe435b1f288c3277201be1312cafc3", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,10 +0,0 @@\n-// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` 0 mir_map\n-\n-const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 = {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:+0:32: +0:35\n-\n-    bb0: {\n-        _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:+0:38: +0:39\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:39\n-    }\n-}"}, {"sha": "e2633f61b5fe435b1f288c3277201be1312cafc3", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir"}, {"sha": "eef7011149d3e5341cb26a448cab0e620bf4df92", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.64bit.diff", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,55 +0,0 @@\n-- // MIR for `change_loop_body` before ConstProp\n-+ // MIR for `change_loop_body` after ConstProp\n-  \n-  fn change_loop_body() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:+0:27: +0:27\n-      let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-      let mut _2: ();                      // in scope 0 at $DIR/while_let_loops.rs:+0:1: +6:2\n-      let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:+2:28: +2:32\n-      let mut _4: isize;                   // in scope 0 at $DIR/while_let_loops.rs:+2:15: +2:25\n-      let mut _5: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:33: +5:6\n-      let mut _6: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      let _7: ();                          // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      let mut _8: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      scope 1 {\n-          debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:+1:9: +1:15\n-          scope 2 {\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-          _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:+1:18: +1:19\n-          StorageLive(_3);                 // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          Deinit(_3);                      // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          discriminant(_3) = 0;            // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n--         _4 = discriminant(_3);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-+         _4 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-+         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-      }\n-  \n-      bb1: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-      }\n-  \n-      bb2: {\n-          _1 = const 1_i32;                // scope 2 at $DIR/while_let_loops.rs:+3:9: +3:15\n-          nop;                             // scope 2 at $DIR/while_let_loops.rs:+4:9: +4:14\n-          goto -> bb4;                     // scope 2 at $DIR/while_let_loops.rs:+4:9: +4:14\n-      }\n-  \n-      bb3: {\n-          StorageLive(_7);                 // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n-          nop;                             // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n-          StorageDead(_7);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n-          goto -> bb4;                     // scope 1 at no-location\n-      }\n-  \n-      bb4: {\n-          StorageDead(_3);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n-          StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/while_let_loops.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "eef7011149d3e5341cb26a448cab0e620bf4df92", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.32bit.diff"}, {"sha": "15b0aece8f54b7e4dd873b272f66881e6854f4b7", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebba41c140e17cab6472ad83c7728c323caab2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir?ref=d1ebba41c140e17cab6472ad83c7728c323caab2", "patch": "@@ -1,17 +0,0 @@\n-// MIR for `change_loop_body` after PreCodegen\n-\n-fn change_loop_body() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:+0:27: +0:27\n-    let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-    scope 1 {\n-        debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:+1:9: +1:15\n-        scope 2 {\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-        StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:+6:1: +6:2\n-        return;                          // scope 0 at $DIR/while_let_loops.rs:+6:2: +6:2\n-    }\n-}"}, {"sha": "15b0aece8f54b7e4dd873b272f66881e6854f4b7", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "previous_filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.32bit.mir"}, {"sha": "fc56cd6985d69a901049bb0fa65f0e4faea8a840", "filename": "src/test/mir-opt/while_let_loops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d65e9619d742deab8618d662c48b7e11588bbe2/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.rs?ref=1d65e9619d742deab8618d662c48b7e11588bbe2", "patch": "@@ -1,6 +1,5 @@\n // EMIT_MIR while_let_loops.change_loop_body.ConstProp.diff\n // EMIT_MIR while_let_loops.change_loop_body.PreCodegen.after.mir\n-// EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n pub fn change_loop_body() {\n     let mut _x = 0;"}]}