{"sha": "b94e1eee8341cb2a16b89711d65b382549fd2bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NGUxZWVlODM0MWNiMmExNmI4OTcxMWQ2NWIzODI1NDlmZDJiZGU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-07T09:57:04Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-07T09:57:04Z"}, "message": "Merge #942\n\n942: Hover for associated items in patterns r=matklad a=kjeremy\n\n\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "6d7d8c3e6ccc95a7f9a7c4398516393ff2786623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d7d8c3e6ccc95a7f9a7c4398516393ff2786623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b94e1eee8341cb2a16b89711d65b382549fd2bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b94e1eee8341cb2a16b89711d65b382549fd2bde", "html_url": "https://github.com/rust-lang/rust/commit/b94e1eee8341cb2a16b89711d65b382549fd2bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b94e1eee8341cb2a16b89711d65b382549fd2bde/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b1a1d20e067c25fb80fbab43b2956b6747a8dd3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a1d20e067c25fb80fbab43b2956b6747a8dd3c", "html_url": "https://github.com/rust-lang/rust/commit/b1a1d20e067c25fb80fbab43b2956b6747a8dd3c"}, {"sha": "064707c5a05e360d777b0b3ccbd8e30ad4acbda1", "url": "https://api.github.com/repos/rust-lang/rust/commits/064707c5a05e360d777b0b3ccbd8e30ad4acbda1", "html_url": "https://github.com/rust-lang/rust/commit/064707c5a05e360d777b0b3ccbd8e30ad4acbda1"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "dd5f9f31c9afc77e385ef752145d4e4bff309bd3", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b94e1eee8341cb2a16b89711d65b382549fd2bde/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94e1eee8341cb2a16b89711d65b382549fd2bde/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=b94e1eee8341cb2a16b89711d65b382549fd2bde", "patch": "@@ -100,6 +100,7 @@ pub(crate) fn reference_definition(\n             }\n         }\n     }\n+\n     // Try name resolution\n     let resolver = hir::source_binder::resolver_for_node(db, file_id, name_ref.syntax());\n     if let Some(path) =\n@@ -126,17 +127,35 @@ pub(crate) fn reference_definition(\n             None => {\n                 // If we failed to resolve then check associated items\n                 if let Some(function) = function {\n-                    // Should we do this above and then grab path from the PathExpr?\n+                    // Resolve associated item for path expressions\n                     if let Some(path_expr) =\n                         name_ref.syntax().ancestors().find_map(ast::PathExpr::cast)\n                     {\n                         let infer_result = function.infer(db);\n                         let source_map = function.body_source_map(db);\n-                        let expr = ast::Expr::cast(path_expr.syntax()).unwrap();\n+\n+                        if let Some(expr) = ast::Expr::cast(path_expr.syntax()) {\n+                            if let Some(res) = source_map\n+                                .node_expr(expr)\n+                                .and_then(|it| infer_result.assoc_resolutions_for_expr(it.into()))\n+                            {\n+                                return Exact(NavigationTarget::from_impl_item(db, res));\n+                            }\n+                        }\n+                    }\n+\n+                    // Resolve associated item for path patterns\n+                    if let Some(path_pat) =\n+                        name_ref.syntax().ancestors().find_map(ast::PathPat::cast)\n+                    {\n+                        let infer_result = function.infer(db);\n+                        let source_map = function.body_source_map(db);\n+\n+                        let pat: &ast::Pat = path_pat.into();\n \n                         if let Some(res) = source_map\n-                            .node_expr(expr)\n-                            .and_then(|it| infer_result.assoc_resolutions_for_expr(it.into()))\n+                            .node_pat(pat)\n+                            .and_then(|it| infer_result.assoc_resolutions_for_pat(it.into()))\n                         {\n                             return Exact(NavigationTarget::from_impl_item(db, res));\n                         }"}, {"sha": "638c24e3198434ab1fd38bba3c277a12779abe9f", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b94e1eee8341cb2a16b89711d65b382549fd2bde/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94e1eee8341cb2a16b89711d65b382549fd2bde/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=b94e1eee8341cb2a16b89711d65b382549fd2bde", "patch": "@@ -534,4 +534,27 @@ mod tests {\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"fn new() -> Thing\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_infer_associated_const_in_pattern() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            struct X;\n+            impl X {\n+                const C: u32 = 1;\n+            }\n+\n+            fn main() {\n+                match 1 {\n+                    X::C<|> => {},\n+                    2 => {},\n+                    _ => {}\n+                };\n+            }\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"const C: u32\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+    }\n }"}]}