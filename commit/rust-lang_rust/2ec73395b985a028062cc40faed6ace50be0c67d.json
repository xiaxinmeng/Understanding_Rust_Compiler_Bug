{"sha": "2ec73395b985a028062cc40faed6ace50be0c67d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYzczMzk1Yjk4NWEwMjgwNjJjYzQwZmFlZDZhY2U1MGJlMGM2N2Q=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-17T10:46:51Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-21T03:49:42Z"}, "message": "Improve SimplifyLocals pass so it can remove unused consts\n\nThe `ConstProp` can cause many locals to be initialized to a constant\nvalue and then never read from. `ConstProp` can also evaluate ZSTs into\nconstant values. Previously, many of these would be removed by other\nparts of the MIR optimization pipeline. However, evaluating ZSTs\n(especially `()`) into constant values defeated those parts of the\noptimizer and so in a2e3ed5c054b544df6ceeb9e612d39af819f4aae, I added a\nhack to `ConstProp` that skips evaluating ZSTs to avoid that regression.\n\nThis commit changes `SimplifyLocals` so that it doesn't consider writes\nof const values to a local to be a use of that local. In doing so,\n`SimplifyLocals` is able to remove otherwise unused locals left behind\nby other optimization passes (`ConstProp` in particular).", "tree": {"sha": "d9ac2c63a0ebbf1fe8d7cdd695d95cc5ec2fecb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9ac2c63a0ebbf1fe8d7cdd695d95cc5ec2fecb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec73395b985a028062cc40faed6ace50be0c67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec73395b985a028062cc40faed6ace50be0c67d", "html_url": "https://github.com/rust-lang/rust/commit/2ec73395b985a028062cc40faed6ace50be0c67d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec73395b985a028062cc40faed6ace50be0c67d/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4592a9eb3f240cef2994ee76f6975c4946d4d269", "url": "https://api.github.com/repos/rust-lang/rust/commits/4592a9eb3f240cef2994ee76f6975c4946d4d269", "html_url": "https://github.com/rust-lang/rust/commit/4592a9eb3f240cef2994ee76f6975c4946d4d269"}], "stats": {"total": 192, "additions": 154, "deletions": 38}, "files": [{"sha": "108c6c9786b2a7e4860394811aec1b40b727ca96", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=2ec73395b985a028062cc40faed6ace50be0c67d", "patch": "@@ -540,13 +540,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n             }\n \n-            // Work around: avoid extra unnecessary locals. FIXME(wesleywiser)\n-            // Const eval will turn this into a `const Scalar(<ZST>)` that\n-            // `SimplifyLocals` doesn't know it can remove.\n-            Rvalue::Aggregate(_, operands) if operands.len() == 0 => {\n-                return None;\n-            }\n-\n             _ => { }\n         }\n "}, {"sha": "e41b4678dbd0db649469416e6e5f34d62dd181b1", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=2ec73395b985a028062cc40faed6ace50be0c67d", "patch": "@@ -31,7 +31,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext};\n+use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext, MutatingUseContext};\n use rustc::session::config::DebugInfo;\n use std::borrow::Cow;\n use crate::transform::{MirPass, MirSource};\n@@ -293,23 +293,31 @@ pub fn remove_dead_blocks(body: &mut Body<'_>) {\n pub struct SimplifyLocals;\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        let mut marker = DeclMarker { locals: BitSet::new_empty(body.local_decls.len()) };\n-        marker.visit_body(body);\n-        // Return pointer and arguments are always live\n-        marker.locals.insert(RETURN_PLACE);\n-        for arg in body.args_iter() {\n-            marker.locals.insert(arg);\n-        }\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        trace!(\"running SimplifyLocals on {:?}\", source);\n+        let locals = {\n+            let mut marker = DeclMarker {\n+                locals: BitSet::new_empty(body.local_decls.len()),\n+                body,\n+            };\n+            marker.visit_body(body);\n+            // Return pointer and arguments are always live\n+            marker.locals.insert(RETURN_PLACE);\n+            for arg in body.args_iter() {\n+                marker.locals.insert(arg);\n+            }\n \n-        // We may need to keep dead user variables live for debuginfo.\n-        if tcx.sess.opts.debuginfo == DebugInfo::Full {\n-            for local in body.vars_iter() {\n-                marker.locals.insert(local);\n+            // We may need to keep dead user variables live for debuginfo.\n+            if tcx.sess.opts.debuginfo == DebugInfo::Full {\n+                for local in body.vars_iter() {\n+                    marker.locals.insert(local);\n+                }\n             }\n-        }\n \n-        let map = make_local_map(&mut body.local_decls, marker.locals);\n+            marker.locals\n+        };\n+\n+        let map = make_local_map(&mut body.local_decls, locals);\n         // Update references to all vars and tmps now\n         LocalUpdater { map }.visit_body(body);\n         body.local_decls.shrink_to_fit();\n@@ -334,18 +342,35 @@ fn make_local_map<V>(\n     map\n }\n \n-struct DeclMarker {\n+struct DeclMarker<'a, 'tcx> {\n     pub locals: BitSet<Local>,\n+    pub body: &'a Body<'tcx>,\n }\n \n-impl<'tcx> Visitor<'tcx> for DeclMarker {\n-    fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _: Location) {\n+impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n+    fn visit_local(&mut self, local: &Local, ctx: PlaceContext, location: Location) {\n         // Ignore storage markers altogether, they get removed along with their otherwise unused\n         // decls.\n         // FIXME: Extend this to all non-uses.\n-        if !ctx.is_storage_marker() {\n-            self.locals.insert(*local);\n+        if ctx.is_storage_marker() {\n+            return;\n         }\n+\n+        // Ignore stores of constants because `ConstProp` and `CopyProp` can remove uses of many\n+        // of these locals. However, if the local is still needed, then it will be referenced in\n+        // another place and we'll mark it as being used there.\n+        if ctx == PlaceContext::MutatingUse(MutatingUseContext::Store) {\n+            let stmt =\n+                &self.body.basic_blocks()[location.block].statements[location.statement_index];\n+            if let StatementKind::Assign(box (p, Rvalue::Use(Operand::Constant(c)))) = &stmt.kind {\n+                if p.as_local().is_some() {\n+                    trace!(\"skipping store of const value {:?} to {:?}\", c, local);\n+                    return;\n+                }\n+            }\n+        }\n+\n+        self.locals.insert(*local);\n     }\n }\n \n@@ -357,9 +382,16 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater {\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         // Remove unnecessary StorageLive and StorageDead annotations.\n         data.statements.retain(|stmt| {\n-            match stmt.kind {\n+            match &stmt.kind {\n                 StatementKind::StorageLive(l) | StatementKind::StorageDead(l) => {\n-                    self.map[l].is_some()\n+                    self.map[*l].is_some()\n+                }\n+                StatementKind::Assign(box (place, _)) => {\n+                    if let Some(local) = place.as_local() {\n+                        self.map[local].is_some()\n+                    } else {\n+                        true\n+                    }\n                 }\n                 _ => true\n             }"}, {"sha": "8e134ad14fc144e6f11bda977f768d8fb5c7c8c2", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=2ec73395b985a028062cc40faed6ace50be0c67d", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "4e8ba5a209df8d9e80bd4238264b9ef342826519", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=2ec73395b985a028062cc40faed6ace50be0c67d", "patch": "@@ -22,7 +22,7 @@ pub fn change_name() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"HirBody,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name() {\n     let _y = 2u64;\n@@ -86,7 +86,7 @@ pub fn change_mutability_of_slot() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"HirBody,typeck_tables_of,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_slot() {\n     let _x: u64 = 0;\n@@ -182,7 +182,7 @@ pub fn add_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"HirBody,typeck_tables_of,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n@@ -198,7 +198,7 @@ pub fn change_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"HirBody,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "ca85ee39e36715146df7724d3bff5470ec29bc99", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=2ec73395b985a028062cc40faed6ace50be0c67d", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "1e628d019196b3b619c18ca5ef972424af31bbe5", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=2ec73395b985a028062cc40faed6ace50be0c67d", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "295c2244879f8cc6f448f851047446c629c127e5", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=2ec73395b985a028062cc40faed6ace50be0c67d", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "6f03438ff723487bbf04ee56297133a0391654df", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs?ref=2ec73395b985a028062cc40faed6ace50be0c67d", "patch": "@@ -0,0 +1,89 @@\n+// compile-flags: -C overflow-checks=no\n+\n+fn use_zst(_: ((), ())) { }\n+\n+struct Temp {\n+    x: u8\n+}\n+\n+fn use_u8(_: u8) { }\n+\n+fn main() {\n+    let ((), ()) = ((), ());\n+    use_zst(((), ()));\n+\n+    use_u8((Temp { x : 40 }).x + 2);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.main.SimplifyLocals.before.mir\n+// let mut _0: ();\n+// let mut _1: ((), ());\n+// let mut _2: ();\n+// let mut _3: ();\n+// let _4: ();\n+// let mut _5: ((), ());\n+// let mut _6: ();\n+// let mut _7: ();\n+// let _8: ();\n+// let mut _9: u8;\n+// let mut _10: u8;\n+// let mut _11: Temp;\n+// scope 1 {\n+// }\n+// bb0: {\n+//   StorageLive(_1);\n+//   StorageLive(_2);\n+//   _2 = const Scalar(<ZST>) : ();\n+//   StorageLive(_3);\n+//   _3 = const Scalar(<ZST>) : ();\n+//   _1 = const Scalar(<ZST>) : ((), ());\n+//   StorageDead(_3);\n+//   StorageDead(_2);\n+//   StorageDead(_1);\n+//   StorageLive(_4);\n+//   StorageLive(_6);\n+//   _6 = const Scalar(<ZST>) : ();\n+//   StorageLive(_7);\n+//   _7 = const Scalar(<ZST>) : ();\n+//   StorageDead(_7);\n+//   StorageDead(_6);\n+//   _4 = const use_zst(const Scalar(<ZST>) : ((), ())) -> bb1;\n+// }\n+// bb1: {\n+//   StorageDead(_4);\n+//   StorageLive(_8);\n+//   StorageLive(_10);\n+//   StorageLive(_11);\n+//   _11 = const Scalar(0x28) : Temp;\n+//   _10 = const 40u8;\n+//   StorageDead(_10);\n+//   _8 = const use_u8(const 42u8) -> bb2;\n+// }\n+// bb2: {\n+//   StorageDead(_11);\n+//   StorageDead(_8);\n+//   return;\n+// }\n+// END rustc.main.SimplifyLocals.before.mir\n+// START rustc.main.SimplifyLocals.after.mir\n+// let mut _0: ();\n+// let _1: ();\n+// let _2: ();\n+// scope 1 {\n+// }\n+// bb0: {\n+//   StorageLive(_1);\n+//   _1 = const use_zst(const Scalar(<ZST>) : ((), ())) -> bb1;\n+// }\n+// bb1: {\n+//   StorageDead(_1);\n+//   StorageLive(_2);\n+//   _2 = const use_u8(const 42u8) -> bb2;\n+// }\n+// bb2: {\n+//   StorageDead(_2);\n+//   return;\n+// }\n+// END rustc.main.SimplifyLocals.after.mir"}, {"sha": "f270dec5fe232511e1881b3ce0c17e40f4f77106", "filename": "src/test/mir-opt/slice-drop-shim.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec73395b985a028062cc40faed6ace50be0c67d/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs?ref=2ec73395b985a028062cc40faed6ace50be0c67d", "patch": "@@ -1,5 +1,7 @@\n+// compile-flags: -Zmir-opt-level=0\n+\n fn main() {\n-    std::ptr::drop_in_place::<[String]> as unsafe fn(_);\n+    let _fn = std::ptr::drop_in_place::<[String]> as unsafe fn(_);\n }\n \n // END RUST SOURCE"}]}