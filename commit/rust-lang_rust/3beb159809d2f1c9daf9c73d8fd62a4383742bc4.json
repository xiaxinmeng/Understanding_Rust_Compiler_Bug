{"sha": "3beb159809d2f1c9daf9c73d8fd62a4383742bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZWIxNTk4MDlkMmYxYzlkYWY5YzczZDhmZDYyYTQzODM3NDJiYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-13T17:10:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-13T17:10:25Z"}, "message": "Auto merge of #29759 - nagisa:mir-static, r=nikomatsakis\n\nFixes #29578\n\nr? @nikomatsakis\n\nMy own observations are posted inline as comments.", "tree": {"sha": "5c1f285a9884685823e0e75cc2754214fcf13798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1f285a9884685823e0e75cc2754214fcf13798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3beb159809d2f1c9daf9c73d8fd62a4383742bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3beb159809d2f1c9daf9c73d8fd62a4383742bc4", "html_url": "https://github.com/rust-lang/rust/commit/3beb159809d2f1c9daf9c73d8fd62a4383742bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3beb159809d2f1c9daf9c73d8fd62a4383742bc4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec8ae4b0eb4860f2ed30763d196a3fe0d7af72c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8ae4b0eb4860f2ed30763d196a3fe0d7af72c2", "html_url": "https://github.com/rust-lang/rust/commit/ec8ae4b0eb4860f2ed30763d196a3fe0d7af72c2"}, {"sha": "f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6", "html_url": "https://github.com/rust-lang/rust/commit/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6"}], "stats": {"total": 54, "additions": 17, "deletions": 37}, "files": [{"sha": "ac3e3beeac83c72baec56b911fcb09a3c4a4473b", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3beb159809d2f1c9daf9c73d8fd62a4383742bc4/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb159809d2f1c9daf9c73d8fd62a4383742bc4/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=3beb159809d2f1c9daf9c73d8fd62a4383742bc4", "patch": "@@ -1214,3 +1214,13 @@ pub fn shift_mask_val<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n }\n \n+pub fn get_static_val<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                            did: DefId,\n+                            ty: Ty<'tcx>)\n+                            -> ValueRef {\n+    if let Some(node_id) = ccx.tcx().map.as_local_node_id(did) {\n+        base::get_item_val(ccx, node_id)\n+    } else {\n+        base::get_extern_const(ccx, did, ty)\n+    }\n+}"}, {"sha": "b849888cf7cfbbe7488ef77c0fa58284c78a85aa", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3beb159809d2f1c9daf9c73d8fd62a4383742bc4/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb159809d2f1c9daf9c73d8fd62a4383742bc4/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=3beb159809d2f1c9daf9c73d8fd62a4383742bc4", "patch": "@@ -29,8 +29,8 @@ use middle::const_eval::eval_const_expr_partial;\n use middle::def_id::DefId;\n use trans::{adt, closure, debuginfo, expr, inline, machine};\n use trans::base::{self, push_ctxt};\n+use trans::common::{self, type_is_sized, ExprOrMethodCall, node_id_substs, C_nil, const_get_elt};\n use trans::common::{CrateContext, C_integral, C_floating, C_bool, C_str_slice, C_bytes, val_ty};\n-use trans::common::{type_is_sized, ExprOrMethodCall, node_id_substs, C_nil, const_get_elt};\n use trans::common::{C_struct, C_undef, const_to_opt_int, const_to_opt_uint, VariantInfo, C_uint};\n use trans::common::{type_is_fat_ptr, Field, C_vector, C_array, C_null, ExprId, MethodCallKey};\n use trans::declare;\n@@ -795,7 +795,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             }\n             let opt_def = cx.tcx().def_map.borrow().get(&cur.id).map(|d| d.full_def());\n             if let Some(def::DefStatic(def_id, _)) = opt_def {\n-                get_static_val(cx, def_id, ety)\n+                common::get_static_val(cx, def_id, ety)\n             } else {\n                 // If this isn't the address of a static, then keep going through\n                 // normal constant evaluation.\n@@ -1075,15 +1075,3 @@ pub fn trans_static(ccx: &CrateContext,\n         Ok(g)\n     }\n }\n-\n-\n-fn get_static_val<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                            did: DefId,\n-                            ty: Ty<'tcx>)\n-                            -> ValueRef {\n-    if let Some(node_id) = ccx.tcx().map.as_local_node_id(did) {\n-        base::get_item_val(ccx, node_id)\n-    } else {\n-        base::trans_external_path(ccx, did, ty)\n-    }\n-}"}, {"sha": "f408bb595a2b7a802b5c2c1dc51b7b95d57571e2", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3beb159809d2f1c9daf9c73d8fd62a4383742bc4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb159809d2f1c9daf9c73d8fd62a4383742bc4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=3beb159809d2f1c9daf9c73d8fd62a4383742bc4", "patch": "@@ -941,29 +941,8 @@ fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             DatumBlock::new(bcx, datum.to_expr_datum())\n         }\n         def::DefStatic(did, _) => {\n-            // There are two things that may happen here:\n-            //  1) If the static item is defined in this crate, it will be\n-            //     translated using `get_item_val`, and we return a pointer to\n-            //     the result.\n-            //  2) If the static item is defined in another crate then we add\n-            //     (or reuse) a declaration of an external global, and return a\n-            //     pointer to that.\n             let const_ty = expr_ty(bcx, ref_expr);\n-\n-            // For external constants, we don't inline.\n-            let val = if let Some(node_id) = bcx.tcx().map.as_local_node_id(did) {\n-                // Case 1.\n-\n-                // The LLVM global has the type of its initializer,\n-                // which may not be equal to the enum's type for\n-                // non-C-like enums.\n-                let val = base::get_item_val(bcx.ccx(), node_id);\n-                let pty = type_of::type_of(bcx.ccx(), const_ty).ptr_to();\n-                PointerCast(bcx, val, pty)\n-            } else {\n-                // Case 2.\n-                base::get_extern_const(bcx.ccx(), did, const_ty)\n-            };\n+            let val = get_static_val(bcx.ccx(), did, const_ty);\n             let lval = Lvalue::new(\"expr::trans_def\");\n             DatumBlock::new(bcx, Datum::new(val, const_ty, LvalueExpr(lval)))\n         }"}, {"sha": "98c1566997616e34a36f8f06f7ae50cea352314d", "filename": "src/librustc_trans/trans/mir/lvalue.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3beb159809d2f1c9daf9c73d8fd62a4383742bc4/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb159809d2f1c9daf9c73d8fd62a4383742bc4/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs?ref=3beb159809d2f1c9daf9c73d8fd62a4383742bc4", "patch": "@@ -65,7 +65,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     tcx.sess.bug(&format!(\"using operand temp {:?} as lvalue\", lvalue)),\n             },\n             mir::Lvalue::Arg(index) => self.args[index as usize],\n-            mir::Lvalue::Static(_def_id) => unimplemented!(),\n+            mir::Lvalue::Static(def_id) => {\n+                let const_ty = self.mir.lvalue_ty(tcx, lvalue);\n+                LvalueRef::new(common::get_static_val(ccx, def_id, const_ty.to_ty(tcx)), const_ty)\n+            },\n             mir::Lvalue::ReturnPointer => {\n                 let return_ty = bcx.monomorphize(&self.mir.return_ty);\n                 let llval = fcx.get_ret_slot(bcx, return_ty, \"return\");"}]}