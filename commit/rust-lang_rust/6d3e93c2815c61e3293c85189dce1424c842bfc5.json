{"sha": "6d3e93c2815c61e3293c85189dce1424c842bfc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkM2U5M2MyODE1YzYxZTMyOTNjODUxODlkY2UxNDI0Yzg0MmJmYzU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-09T02:22:41Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-09T02:22:41Z"}, "message": "Refactor random number generation", "tree": {"sha": "b91924d9729d4febe68e19b826ccba90cde18370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b91924d9729d4febe68e19b826ccba90cde18370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3e93c2815c61e3293c85189dce1424c842bfc5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlysAfEACgkQtAh+UQ6Y\nsWSnLA//URZEoBzkkQ9cww/aYpfl7eeWXphehN0azseib4kToGPzE2QhNO6y9hWC\nXvY+jNkwTzR4RFLp/pQTuigjnBew1R1yqoi+KHl5itqDfq/TSGkYsaAZ/3JeaPIJ\nt9+fy5qR6gXqHcGw+gVVs5KyBRxBzUbtKuThPMQuMFzsmC4QiLOSy653pZB0x4tf\nOhQR+WZx/RUhrFM50443EUK20kK1m6s05LEgZQqmggotqb8jU7R8XSJSwHN85wb7\nr/ZAzGXrm5rBjJVoFql7rx3JJl4wyoWkuUsSrGgmXDVhq5ZOJ8sYy4yA1qqdT8km\nazFNTFaAElL58B0v27QoLVBbmZzyY5maf7FhTipqbXOAcd7vEkfWyu1brY69YVJk\ndT+h+OTexoIhiq8EzZIsW9H2UN+4z7hEv8vMrbyp83W1AwxRQ5yPHZUhKbTEU+Xc\negoXckjYvqJWaleDK6NVPpopg/JmEX9TkhcCinEl8m1CeCtkEb3KCul3BBQOYW57\noqVZljwI1bapkRCVouFPO1+E+8ZVAuMItrd88UGm/SirC/OpqwHDR/fe2dEvDA/A\nO2gRabM3XZonsEs/AU0iFy4OpcHfvPN00IndEAh9NAWBYvjZY+/H93+TH4ooRnIM\nXASDPvePZDz6qMlNcgK7ctztSwfRk0NLbaaS0xZ31hpxvDcfRaY=\n=fD93\n-----END PGP SIGNATURE-----", "payload": "tree b91924d9729d4febe68e19b826ccba90cde18370\nparent b120e8bb88271bc7fbe68651f230ead35de098a1\nauthor Aaron Hill <aa1ronham@gmail.com> 1554776561 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1554776561 -0400\n\nRefactor random number generation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3e93c2815c61e3293c85189dce1424c842bfc5", "html_url": "https://github.com/rust-lang/rust/commit/6d3e93c2815c61e3293c85189dce1424c842bfc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3e93c2815c61e3293c85189dce1424c842bfc5/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b120e8bb88271bc7fbe68651f230ead35de098a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b120e8bb88271bc7fbe68651f230ead35de098a1", "html_url": "https://github.com/rust-lang/rust/commit/b120e8bb88271bc7fbe68651f230ead35de098a1"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "0f1814a0c42c17790f6d15714f1e016ca375df04", "filename": "src/fn_call.rs", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6d3e93c2815c61e3293c85189dce1424c842bfc5/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3e93c2815c61e3293c85189dce1424c842bfc5/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=6d3e93c2815c61e3293c85189dce1424c842bfc5", "patch": "@@ -215,36 +215,22 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 // figure out some way to actually process some of them.\n                 //\n                 // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n-                // is called if a `HashMap` is created the regular way.\n+                // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n                 match this.read_scalar(args[0])?.to_usize(this)? as i64 {\n                     // SYS_getrandom on x86_64 and x86 respectively\n                     318 | 355 => {\n-                        match this.machine.rng.as_ref() {\n-                            Some(rng) => {\n-                                let ptr = this.read_scalar(args[1])?.to_ptr()?;\n-                                let len = this.read_scalar(args[2])?.to_usize(this)?;\n+                        let ptr = this.read_scalar(args[1])?.to_ptr()?;\n+                        let len = this.read_scalar(args[2])?.to_usize(this)?;\n \n-                                // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n-                                // neither of which have any effect on our current PRNG\n-                                let _flags = this.read_scalar(args[3])?.to_i32()?;\n+                        // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n+                        // neither of which have any effect on our current PRNG\n+                        let _flags = this.read_scalar(args[3])?.to_i32()?;\n \n-                                let mut data = vec![0; len as usize];\n-                                rng.borrow_mut().fill_bytes(&mut data);\n-\n-                                this.memory_mut().get_mut(ptr.alloc_id)?\n+                        let data = gen_random(this, len as usize)?;\n+                        this.memory_mut().get_mut(ptr.alloc_id)?\n                                     .write_bytes(tcx, ptr, &data)?;\n \n-                                this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n-\n-                            },\n-                            None => {\n-                                return err!(Unimplemented(\n-                                    \"miri does not support random number generators in deterministic mode!\n-                                    Use '-Zmiri-seed=<seed>' to enable random number generation\".to_owned(),\n-                                ))\n-                            }\n-                        }\n-\n+                        this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n                     }\n                     id => {\n                         return err!(Unimplemented(\n@@ -768,6 +754,17 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             \"GetCommandLineW\" => {\n                 this.write_scalar(Scalar::Ptr(this.machine.cmd_line.unwrap()), dest)?;\n             }\n+            // The actual name of 'RtlGenRandom'\n+            \"SystemFunction036\" => {\n+                let ptr = this.read_scalar(args[1])?.to_ptr()?;\n+                let len = this.read_scalar(args[2])?.to_usize(this)?;\n+\n+                let data = gen_random(this, len as usize)?;\n+                this.memory_mut().get_mut(ptr.alloc_id)?\n+                    .write_bytes(tcx, ptr, &data)?;\n+\n+                this.write_scalar(Scalar::from_bool(true), dest)?;\n+            }\n \n             // We can't execute anything else.\n             _ => {\n@@ -786,3 +783,21 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n         self.eval_context_mut().write_scalar(Scalar::from_int(0, dest.layout.size), dest)\n     }\n }\n+\n+fn gen_random<'a, 'mir, 'tcx>(this: &mut MiriEvalContext<'a, 'mir, 'tcx>,\n+                                 len: usize) -> Result<Vec<u8>, EvalError<'tcx>>  {\n+\n+    match this.machine.rng.as_ref() {\n+        Some(rng) => {\n+            let mut data = vec![0; len];\n+            rng.borrow_mut().fill_bytes(&mut data);\n+            Ok(data)\n+        }\n+        None => {\n+            err!(Unimplemented(\n+                \"miri does not support random number generators in deterministic mode!\n+                Use '-Zmiri-seed=<seed>' to enable random number generation\".to_owned(),\n+            ))\n+        }\n+    }\n+}"}, {"sha": "efa7a86fee08cfd60e1b6b658d924e8a96f331dc", "filename": "tests/compile-fail/getrandom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d3e93c2815c61e3293c85189dce1424c842bfc5/tests%2Fcompile-fail%2Fgetrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3e93c2815c61e3293c85189dce1424c842bfc5/tests%2Fcompile-fail%2Fgetrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fgetrandom.rs?ref=6d3e93c2815c61e3293c85189dce1424c842bfc5", "patch": "@@ -4,7 +4,7 @@ extern crate libc;\n fn main() {\n     let mut buf = [0u8; 5];\n     unsafe {\n-        libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr() as *mut libc::c_void, 5, 0);\n+        libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr() as *mut libc::c_void, 5 as libc::size_t, 0 as libc::c_uint);\n         //~^ ERROR constant evaluation error: miri does not support random number generators in deterministic mode!\n     }\n }"}]}