{"sha": "43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYTBhNjVmYTJkODEyYzBlNDhlNmNjNjBhOTg1YTRiZjQ3YmZmNTc=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-07-01T18:05:10Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-07-01T18:05:10Z"}, "message": "call it `hir::VisibilityKind` instead of `hir::Visibility_:*`\n\nIt was pointed out in review that the glob-exported\nunderscore-suffixed convention for `Spanned` HIR nodes is no longer\npreferred: see February 2016's #31487 for AST's migration away from\nthis style towards properly namespaced NodeKind enums.\n\nThis concerns #51968.", "tree": {"sha": "558261b4e498f3884b19a358ccfb49968f9c15ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/558261b4e498f3884b19a358ccfb49968f9c15ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "html_url": "https://github.com/rust-lang/rust/commit/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d44b2286ecf84103e2c66237f578212cd9d8fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d44b2286ecf84103e2c66237f578212cd9d8fe", "html_url": "https://github.com/rust-lang/rust/commit/c2d44b2286ecf84103e2c66237f578212cd9d8fe"}], "stats": {"total": 145, "additions": 74, "deletions": 71}, "files": [{"sha": "60e944e5affc3c7ed32bd822f5a14c7304d72620", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -1104,7 +1104,7 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n }\n \n pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n-    if let VisibilityRestricted { ref path, id } = vis.node {\n+    if let VisibilityKind::Restricted { ref path, id } = vis.node {\n         visitor.visit_id(id);\n         visitor.visit_path(path, id)\n     }"}, {"sha": "7219db278348464ee39df79e6c3b2854784e0923", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -1285,7 +1285,7 @@ impl<'a> LoweringContext<'a> {\n                 name: keywords::Invalid.name(),\n                 attrs: Default::default(),\n                 node: exist_ty_item_kind,\n-                vis: respan(span.shrink_to_lo(), hir::VisibilityInherited),\n+                vis: respan(span.shrink_to_lo(), hir::VisibilityKind::Inherited),\n                 span: exist_ty_span,\n             };\n \n@@ -2771,11 +2771,11 @@ impl<'a> LoweringContext<'a> {\n                         let path = this.lower_path_extra(def, &path, None, ParamMode::Explicit);\n                         let item = hir::ItemUse(P(path), hir::UseKind::Single);\n                         let vis_kind = match vis.node {\n-                            hir::VisibilityPublic => hir::VisibilityPublic,\n-                            hir::VisibilityCrate(sugar) => hir::VisibilityCrate(sugar),\n-                            hir::VisibilityInherited => hir::VisibilityInherited,\n-                            hir::VisibilityRestricted { ref path, id: _ } => {\n-                                hir::VisibilityRestricted {\n+                            hir::VisibilityKind::Public => hir::VisibilityKind::Public,\n+                            hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n+                            hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n+                            hir::VisibilityKind::Restricted { ref path, id: _ } => {\n+                                hir::VisibilityKind::Restricted {\n                                     path: path.clone(),\n                                     // We are allocating a new NodeId here\n                                     id: this.next_id().node_id,\n@@ -2844,11 +2844,11 @@ impl<'a> LoweringContext<'a> {\n \n                     self.with_hir_id_owner(new_id, |this| {\n                         let vis_kind = match vis.node {\n-                            hir::VisibilityPublic => hir::VisibilityPublic,\n-                            hir::VisibilityCrate(sugar) => hir::VisibilityCrate(sugar),\n-                            hir::VisibilityInherited => hir::VisibilityInherited,\n-                            hir::VisibilityRestricted { ref path, id: _ } => {\n-                                hir::VisibilityRestricted {\n+                            hir::VisibilityKind::Public => hir::VisibilityKind::Public,\n+                            hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n+                            hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n+                            hir::VisibilityKind::Restricted { ref path, id: _ } => {\n+                                hir::VisibilityKind::Restricted {\n                                     path: path.clone(),\n                                     // We are allocating a new NodeId here\n                                     id: this.next_id().node_id,\n@@ -2876,7 +2876,7 @@ impl<'a> LoweringContext<'a> {\n                 // the stability of `use a::{};`, to avoid it showing up as\n                 // a re-export by accident when `pub`, e.g. in documentation.\n                 let path = P(self.lower_path(id, &prefix, ParamMode::Explicit));\n-                *vis = respan(prefix.span.shrink_to_lo(), hir::VisibilityInherited);\n+                *vis = respan(prefix.span.shrink_to_lo(), hir::VisibilityKind::Inherited);\n                 hir::ItemUse(path, hir::UseKind::ListStem)\n             }\n         }\n@@ -4277,17 +4277,17 @@ impl<'a> LoweringContext<'a> {\n         explicit_owner: Option<NodeId>,\n     ) -> hir::Visibility {\n         let node = match v.node {\n-            VisibilityKind::Public => hir::VisibilityPublic,\n-            VisibilityKind::Crate(sugar) => hir::VisibilityCrate(sugar),\n-            VisibilityKind::Restricted { ref path, id } => hir::VisibilityRestricted {\n+            VisibilityKind::Public => hir::VisibilityKind::Public,\n+            VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n+            VisibilityKind::Restricted { ref path, id } => hir::VisibilityKind::Restricted {\n                 path: P(self.lower_path(id, path, ParamMode::Explicit)),\n                 id: if let Some(owner) = explicit_owner {\n                     self.lower_node_id_with_owner(id, owner).node_id\n                 } else {\n                     self.lower_node_id(id).node_id\n                 },\n             },\n-            VisibilityKind::Inherited => hir::VisibilityInherited,\n+            VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n         };\n         respan(v.span, node)\n     }"}, {"sha": "3cc25bfd2d4d7c4a4800dfbbde1041c20ddf234d", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -459,10 +459,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_vis(&mut self, visibility: &'hir Visibility) {\n         match visibility.node {\n-            VisibilityPublic |\n-            VisibilityCrate(_) |\n-            VisibilityInherited => {}\n-            VisibilityRestricted { id, .. } => {\n+            VisibilityKind::Public |\n+            VisibilityKind::Crate(_) |\n+            VisibilityKind::Inherited => {}\n+            VisibilityKind::Restricted { id, .. } => {\n                 self.insert(id, NodeVisibility(visibility));\n                 self.with_parent(id, |this| {\n                     intravisit::walk_vis(this, visibility);"}, {"sha": "08a130f049bf734c322d1961ae87e7eaf3563f02", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -1050,7 +1050,7 @@ impl<'hir> Map<'hir> {\n             Some(EntryLifetime(_, _, lifetime)) => lifetime.span,\n             Some(EntryGenericParam(_, _, param)) => param.span,\n             Some(EntryVisibility(_, _, &Spanned {\n-                node: VisibilityRestricted { ref path, .. }, ..\n+                node: VisibilityKind::Restricted { ref path, .. }, ..\n             })) => path.span,\n             Some(EntryVisibility(_, _, v)) => bug!(\"unexpected Visibility {:?}\", v),\n             Some(EntryLocal(_, _, local)) => local.span,"}, {"sha": "b0b81316148ea47c97acd99ca6493df4a9ffcd07", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -24,7 +24,6 @@ pub use self::Stmt_::*;\n pub use self::Ty_::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n-pub use self::Visibility_::*;\n \n use hir::def::Def;\n use hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n@@ -1929,30 +1928,30 @@ pub struct PolyTraitRef {\n     pub span: Span,\n }\n \n-pub type Visibility = Spanned<Visibility_>;\n+pub type Visibility = Spanned<VisibilityKind>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum Visibility_ {\n-    VisibilityPublic,\n-    VisibilityCrate(CrateSugar),\n-    VisibilityRestricted { path: P<Path>, id: NodeId },\n-    VisibilityInherited,\n+pub enum VisibilityKind {\n+    Public,\n+    Crate(CrateSugar),\n+    Restricted { path: P<Path>, id: NodeId },\n+    Inherited,\n }\n \n-impl Visibility_ {\n+impl VisibilityKind {\n     pub fn is_pub(&self) -> bool {\n         match *self {\n-            VisibilityPublic => true,\n+            VisibilityKind::Public => true,\n             _ => false\n         }\n     }\n \n     pub fn is_pub_restricted(&self) -> bool {\n         match *self {\n-            VisibilityPublic |\n-            VisibilityInherited => false,\n-            VisibilityCrate(..) |\n-            VisibilityRestricted { .. } => true,\n+            VisibilityKind::Public |\n+            VisibilityKind::Inherited => false,\n+            VisibilityKind::Crate(..) |\n+            VisibilityKind::Restricted { .. } => true,\n         }\n     }\n }"}, {"sha": "255009c94c6abc6e06454302da7445929891a1b2", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -840,10 +840,10 @@ impl<'a> State<'a> {\n \n     pub fn print_visibility(&mut self, vis: &hir::Visibility) -> io::Result<()> {\n         match vis.node {\n-            hir::VisibilityPublic => self.word_nbsp(\"pub\")?,\n-            hir::VisibilityCrate(ast::CrateSugar::JustCrate) => self.word_nbsp(\"crate\")?,\n-            hir::VisibilityCrate(ast::CrateSugar::PubCrate) => self.word_nbsp(\"pub(crate)\")?,\n-            hir::VisibilityRestricted { ref path, .. } => {\n+            hir::VisibilityKind::Public => self.word_nbsp(\"pub\")?,\n+            hir::VisibilityKind::Crate(ast::CrateSugar::JustCrate) => self.word_nbsp(\"crate\")?,\n+            hir::VisibilityKind::Crate(ast::CrateSugar::PubCrate) => self.word_nbsp(\"pub(crate)\")?,\n+            hir::VisibilityKind::Restricted { ref path, .. } => {\n                 self.s.word(\"pub(\")?;\n                 if path.segments.len() == 1 &&\n                    path.segments[0].ident.name == keywords::Super.name() {\n@@ -856,7 +856,7 @@ impl<'a> State<'a> {\n                 }\n                 self.word_nbsp(\")\")?;\n             }\n-            hir::VisibilityInherited => ()\n+            hir::VisibilityKind::Inherited => ()\n         }\n \n         Ok(())\n@@ -952,16 +952,19 @@ impl<'a> State<'a> {\n         self.print_outer_attributes(&ti.attrs)?;\n         match ti.node {\n             hir::TraitItemKind::Const(ref ty, default) => {\n-                let vis = Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityInherited };\n+                let vis = Spanned { span: syntax_pos::DUMMY_SP,\n+                                    node: hir::VisibilityKind::Inherited };\n                 self.print_associated_const(ti.ident, &ty, default, &vis)?;\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n-                let vis = Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityInherited };\n+                let vis = Spanned { span: syntax_pos::DUMMY_SP,\n+                                    node: hir::VisibilityKind::Inherited };\n                 self.print_method_sig(ti.ident, sig, &ti.generics, &vis, arg_names, None)?;\n                 self.s.word(\";\")?;\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n-                let vis = Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityInherited };\n+                let vis = Spanned { span: syntax_pos::DUMMY_SP,\n+                                    node: hir::VisibilityKind::Inherited };\n                 self.head(\"\")?;\n                 self.print_method_sig(ti.ident, sig, &ti.generics, &vis, &[], Some(body))?;\n                 self.nbsp()?;\n@@ -2267,7 +2270,8 @@ impl<'a> State<'a> {\n                       },\n                       name,\n                       &generics,\n-                      &Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityInherited },\n+                      &Spanned { span: syntax_pos::DUMMY_SP,\n+                                 node: hir::VisibilityKind::Inherited },\n                       arg_names,\n                       None)?;\n         self.end()"}, {"sha": "0c7baea85ad8f63d33ea0589c0eba599e725729a", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -710,20 +710,20 @@ impl_stable_hash_for!(enum ::syntax::ast::CrateSugar {\n     PubCrate,\n });\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::Visibility_ {\n+impl<'a> HashStable<StableHashingContext<'a>> for hir::VisibilityKind {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n-            hir::VisibilityPublic |\n-            hir::VisibilityInherited => {\n+            hir::VisibilityKind::Public |\n+            hir::VisibilityKind::Inherited => {\n                 // No fields to hash.\n             }\n-            hir::VisibilityCrate(sugar) => {\n+            hir::VisibilityKind::Crate(sugar) => {\n                 sugar.hash_stable(hcx, hasher);\n             }\n-            hir::VisibilityRestricted { ref path, id } => {\n+            hir::VisibilityKind::Restricted { ref path, id } => {\n                 hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n                     id.hash_stable(hcx, hasher);\n                 });\n@@ -733,7 +733,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Visibility_ {\n     }\n }\n \n-impl_stable_hash_for_spanned!(hir::Visibility_);\n+impl_stable_hash_for_spanned!(hir::VisibilityKind);\n \n impl<'a> HashStable<StableHashingContext<'a>> for hir::Defaultness {\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "54afd795fc0f13de0e2a7cfcb4168200d560b304", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -269,15 +269,15 @@ impl<'a, 'gcx, 'tcx> DefIdTree for TyCtxt<'a, 'gcx, 'tcx> {\n impl Visibility {\n     pub fn from_hir(visibility: &hir::Visibility, id: NodeId, tcx: TyCtxt) -> Self {\n         match visibility.node {\n-            hir::VisibilityPublic => Visibility::Public,\n-            hir::VisibilityCrate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n-            hir::VisibilityRestricted { ref path, .. } => match path.def {\n+            hir::VisibilityKind::Public => Visibility::Public,\n+            hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n+            hir::VisibilityKind::Restricted { ref path, .. } => match path.def {\n                 // If there is no resolution, `resolve` will have already reported an error, so\n                 // assume that the visibility is public to avoid reporting more privacy errors.\n                 Def::Err => Visibility::Public,\n                 def => Visibility::Restricted(def.def_id()),\n             },\n-            hir::VisibilityInherited => {\n+            hir::VisibilityKind::Inherited => {\n                 Visibility::Restricted(tcx.hir.get_module_parent(id))\n             }\n         }"}, {"sha": "9ac4872622bf598cb5932964d119dae2ab56adc0", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -397,7 +397,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             hir::ItemUnion(..) => \"a union\",\n             hir::ItemTrait(.., ref trait_item_refs) => {\n                 // Issue #11592, traits are always considered exported, even when private.\n-                if it.vis.node == hir::VisibilityInherited {\n+                if it.vis.node == hir::VisibilityKind::Inherited {\n                     self.private_traits.insert(it.id);\n                     for trait_item_ref in trait_item_refs {\n                         self.private_traits.insert(trait_item_ref.id.node_id);\n@@ -414,7 +414,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                 if let Some(node_id) = cx.tcx.hir.as_local_node_id(real_trait) {\n                     match cx.tcx.hir.find(node_id) {\n                         Some(hir_map::NodeItem(item)) => {\n-                            if item.vis.node == hir::VisibilityInherited {\n+                            if item.vis.node == hir::VisibilityKind::Inherited {\n                                 for impl_item_ref in impl_item_refs {\n                                     self.private_traits.insert(impl_item_ref.id.node_id);\n                                 }\n@@ -1179,15 +1179,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         let suggest_export = |vis: &hir::Visibility, err: &mut DiagnosticBuilder| {\n             let suggestion = match vis.node {\n-                hir::VisibilityInherited => {\n+                hir::VisibilityKind::Inherited => {\n                     // inherited visibility is empty span at item start; need an extra space\n                     Some(\"pub \".to_owned())\n                 },\n-                hir::VisibilityRestricted { .. } |\n-                hir::VisibilityCrate(_) => {\n+                hir::VisibilityKind::Restricted { .. } |\n+                hir::VisibilityKind::Crate(_) => {\n                     Some(\"pub\".to_owned())\n                 },\n-                hir::VisibilityPublic => {\n+                hir::VisibilityKind::Public => {\n                     err.help(\"try exporting the item with a `pub use` statement\");\n                     None\n                 }\n@@ -1399,7 +1399,7 @@ impl UnreachablePub {\n                     vis: &hir::Visibility, span: Span, exportable: bool) {\n         let mut applicability = Applicability::MachineApplicable;\n         match vis.node {\n-            hir::VisibilityPublic if !cx.access_levels.is_reachable(id) => {\n+            hir::VisibilityKind::Public if !cx.access_levels.is_reachable(id) => {\n                 if span.ctxt().outer().expn_info().is_some() {\n                     applicability = Applicability::MaybeIncorrect;\n                 }"}, {"sha": "3cfde7a8297f97c957bf73542124fbeb36bc7df5", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -320,7 +320,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_info_for_items(&mut self) -> Index {\n         let krate = self.tcx.hir.krate();\n         let mut index = IndexBuilder::new(self);\n-        let vis = Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityPublic };\n+        let vis = Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Public };\n         index.record(DefId::local(CRATE_DEF_INDEX),\n                      IsolatedEncoder::encode_info_for_mod,\n                      FromId(CRATE_NODE_ID, (&krate.module, &krate.attrs, &vis)));"}, {"sha": "19f9abc60ddccbcb3e3505d039b0d8026e6a1062", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -1469,8 +1469,8 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n                 }\n                 if !vis.is_at_least(self.required_visibility, self.tcx) {\n                     let vis_adj = match hir_vis.node {\n-                        hir::VisibilityCrate(_) => \"crate-visible\",\n-                        hir::VisibilityRestricted { .. } => \"restricted\",\n+                        hir::VisibilityKind::Crate(_) => \"crate-visible\",\n+                        hir::VisibilityKind::Restricted { .. } => \"restricted\",\n                         _ => \"private\"\n                     };\n "}, {"sha": "447b5f1fe47e71b94c080c2da4979a701fd316ea", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -633,7 +633,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 ..\n             }) |\n             Node::NodeVisibility(&Spanned {\n-                node: hir::VisibilityRestricted { ref path, .. }, .. }) => path.def,\n+                node: hir::VisibilityKind::Restricted { ref path, .. }, .. }) => path.def,\n \n             Node::NodeExpr(&hir::Expr {\n                 node: hir::ExprStruct(ref qpath, ..),"}, {"sha": "b8abb98edec4800945d65bd3036d080bc8b1fa8e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -3226,10 +3226,10 @@ pub enum Visibility {\n impl Clean<Option<Visibility>> for hir::Visibility {\n     fn clean(&self, cx: &DocContext) -> Option<Visibility> {\n         Some(match self.node {\n-            hir::VisibilityPublic => Visibility::Public,\n-            hir::VisibilityInherited => Visibility::Inherited,\n-            hir::VisibilityCrate(_) => Visibility::Crate,\n-            hir::VisibilityRestricted { ref path, .. } => {\n+            hir::VisibilityKind::Public => Visibility::Public,\n+            hir::VisibilityKind::Inherited => Visibility::Inherited,\n+            hir::VisibilityKind::Crate(_) => Visibility::Crate,\n+            hir::VisibilityKind::Restricted { ref path, .. } => {\n                 let path = path.clean(cx);\n                 let did = register_def(cx, path.def);\n                 Visibility::Restricted(did, path)"}, {"sha": "6fd9ef234f42317d006a993130b6990d29cf821b", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -54,7 +54,7 @@ impl Module {\n         Module {\n             name       : name,\n             id: ast::CRATE_NODE_ID,\n-            vis: Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityInherited },\n+            vis: Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Inherited },\n             stab: None,\n             depr: None,\n             where_outer: syntax_pos::DUMMY_SP,"}, {"sha": "fdeba93990d1c244352befe719f5a5c4ceeec347", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0a65fa2d812c0e48e6cc60a985a4bf47bff57/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=43a0a65fa2d812c0e48e6cc60a985a4bf47bff57", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         self.module = self.visit_mod_contents(krate.span,\n                                               krate.attrs.clone(),\n                                               Spanned { span: syntax_pos::DUMMY_SP,\n-                                                        node: hir::VisibilityPublic },\n+                                                        node: hir::VisibilityKind::Public },\n                                               ast::CRATE_NODE_ID,\n                                               &krate.module,\n                                               None);"}]}