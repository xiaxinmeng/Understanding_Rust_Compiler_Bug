{"sha": "2c6981a315df920fa83607bc3f858e39af5abfde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNjk4MWEzMTVkZjkyMGZhODM2MDdiYzNmODU4ZTM5YWY1YWJmZGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T20:23:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T20:23:53Z"}, "message": "improve linked list -> drop transition", "tree": {"sha": "1225e1307369f14528e9559d77dd6a3039eaa0e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1225e1307369f14528e9559d77dd6a3039eaa0e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c6981a315df920fa83607bc3f858e39af5abfde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6981a315df920fa83607bc3f858e39af5abfde", "html_url": "https://github.com/rust-lang/rust/commit/2c6981a315df920fa83607bc3f858e39af5abfde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c6981a315df920fa83607bc3f858e39af5abfde/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e48ebb29777fe8e8e23b7a538bb43d40fbdac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e48ebb29777fe8e8e23b7a538bb43d40fbdac3", "html_url": "https://github.com/rust-lang/rust/commit/11e48ebb29777fe8e8e23b7a538bb43d40fbdac3"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "68213ab01537f4bc11807f77e779f1c142aabff4", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c6981a315df920fa83607bc3f858e39af5abfde/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6981a315df920fa83607bc3f858e39af5abfde/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=2c6981a315df920fa83607bc3f858e39af5abfde", "patch": "@@ -124,8 +124,11 @@\n //! list element will patch the pointers of its predecessor and successor to remove itself\n //! from the list.\n //!\n-//! To make this work, it is crucial that we can actually rely on `drop` being called.\n-//! And, in fact, this is a guarantee that `Pin` provides.\n+//! Crucially, we have to be able to rely on `drop` being called. If an element\n+//! could be deallocated or otherwise invalidated without calling `drop`, the pointers into it\n+//! from its neighbouring elements would become invalid, which would break the data structure.\n+//!\n+//! This is why pinning also comes with a `drop`-related guarantee.\n //!\n //! # `Drop` guarantee\n //!\n@@ -139,9 +142,7 @@\n //! off of a vector.\n //!\n //! This is exactly the kind of guarantee that the intrusive linked list from the previous\n-//! section needs to function correctly. Clearly, if an element\n-//! could be deallocated or otherwise invalidated without calling `drop`, the pointers into it\n-//! from its neighbouring elements would become invalid, which would break the data structure.\n+//! section needs to function correctly.\n //!\n //! Notice that this guarantee does *not* mean that memory does not leak! It is still\n //! completely okay not to ever call `drop` on a pinned element (e.g., you can still"}]}