{"sha": "657b679b158894556628f096a28aab364b605446", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1N2I2NzliMTU4ODk0NTU2NjI4ZjA5NmEyOGFhYjM2NGI2MDU0NDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-15T02:30:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:31:47Z"}, "message": "std: Rename sleep, periodic, and oneshot timers to sleep_ms, etc.\n\nRename io::timer::sleep, Timer::sleep, Timer::oneshot,\nTimer::periodic, to sleep_ms, oneshot_ms, periodic_ms. These functions\nall take an integer and interpret it as milliseconds.\n\nReplacement functions will be added that take Duration.\n\n[breaking-change]", "tree": {"sha": "22fde9a2df8b169869838c90661fec4a88089a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22fde9a2df8b169869838c90661fec4a88089a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/657b679b158894556628f096a28aab364b605446", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/657b679b158894556628f096a28aab364b605446", "html_url": "https://github.com/rust-lang/rust/commit/657b679b158894556628f096a28aab364b605446", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/657b679b158894556628f096a28aab364b605446/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5778ed4c926da6069ab899c8d4694527ed89190c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5778ed4c926da6069ab899c8d4694527ed89190c", "html_url": "https://github.com/rust-lang/rust/commit/5778ed4c926da6069ab899c8d4694527ed89190c"}], "stats": {"total": 115, "additions": 58, "deletions": 57}, "files": [{"sha": "41a621f6edf62c3ebe79c83f270cfeb57cf6fb9d", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=657b679b158894556628f096a28aab364b605446", "patch": "@@ -976,7 +976,7 @@ mod tests {\n                 assert!(!p.wait().unwrap().success());\n                 return\n             }\n-            timer::sleep(100);\n+            timer::sleep_ms(100);\n         }\n         fail!(\"never saw the child go away\");\n     })"}, {"sha": "4ea91131f17a742f9d385caf3b6b02aa637e0884", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=657b679b158894556628f096a28aab364b605446", "patch": "@@ -179,7 +179,7 @@ mod test_unix {\n         let mut signal = Listener::new();\n         signal.register(Interrupt).unwrap();\n         sigint();\n-        timer::sleep(10);\n+        timer::sleep_ms(10);\n         match signal.rx.recv() {\n             Interrupt => (),\n             s => fail!(\"Expected Interrupt, got {:?}\", s),\n@@ -193,7 +193,7 @@ mod test_unix {\n         s1.register(Interrupt).unwrap();\n         s2.register(Interrupt).unwrap();\n         sigint();\n-        timer::sleep(10);\n+        timer::sleep_ms(10);\n         match s1.rx.recv() {\n             Interrupt => (),\n             s => fail!(\"Expected Interrupt, got {:?}\", s),\n@@ -212,7 +212,7 @@ mod test_unix {\n         s2.register(Interrupt).unwrap();\n         s2.unregister(Interrupt);\n         sigint();\n-        timer::sleep(10);\n+        timer::sleep_ms(10);\n         assert_eq!(s2.rx.try_recv(), Err(Empty));\n     }\n }"}, {"sha": "906a2800201332abacc62a1b2688e72187b7bb1e", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=657b679b158894556628f096a28aab364b605446", "patch": "@@ -70,11 +70,11 @@ pub struct Timer {\n struct TimerCallback { tx: Sender<()> }\n \n /// Sleep the current task for `msecs` milliseconds.\n-pub fn sleep(msecs: u64) {\n+pub fn sleep_ms(msecs: u64) {\n     let timer = Timer::new();\n     let mut timer = timer.ok().expect(\"timer::sleep: could not create a Timer\");\n \n-    timer.sleep(msecs)\n+    timer.sleep_ms(msecs)\n }\n \n impl Timer {\n@@ -91,7 +91,7 @@ impl Timer {\n     ///\n     /// Note that this function will cause any other receivers for this timer to\n     /// be invalidated (the other end will be closed).\n-    pub fn sleep(&mut self, msecs: u64) {\n+    pub fn sleep_ms(&mut self, msecs: u64) {\n         self.obj.sleep(msecs);\n     }\n \n@@ -129,7 +129,7 @@ impl Timer {\n     /// // The timer object was destroyed, so this will always fail:\n     /// // five_ms.recv()\n     /// ```\n-    pub fn oneshot(&mut self, msecs: u64) -> Receiver<()> {\n+    pub fn oneshot_ms(&mut self, msecs: u64) -> Receiver<()> {\n         let (tx, rx) = channel();\n         self.obj.oneshot(msecs, box TimerCallback { tx: tx });\n         return rx\n@@ -177,7 +177,7 @@ impl Timer {\n     /// // The timer object was destroyed, so this will always fail:\n     /// // five_ms.recv()\n     /// ```\n-    pub fn periodic(&mut self, msecs: u64) -> Receiver<()> {\n+    pub fn periodic_ms(&mut self, msecs: u64) -> Receiver<()> {\n         let (tx, rx) = channel();\n         self.obj.period(msecs, box TimerCallback { tx: tx });\n         return rx\n@@ -192,101 +192,101 @@ impl Callback for TimerCallback {\n \n #[cfg(test)]\n mod test {\n-    iotest!(fn test_io_timer_sleep_simple() {\n+    iotest!(fn test_io_timer_sleep_ms_simple() {\n         let mut timer = Timer::new().unwrap();\n-        timer.sleep(1);\n+        timer.sleep_ms(1);\n     })\n \n-    iotest!(fn test_io_timer_sleep_oneshot() {\n+    iotest!(fn test_io_timer_sleep_oneshot_ms() {\n         let mut timer = Timer::new().unwrap();\n-        timer.oneshot(1).recv();\n+        timer.oneshot_ms(1).recv();\n     })\n \n-    iotest!(fn test_io_timer_sleep_oneshot_forget() {\n+    iotest!(fn test_io_timer_sleep_oneshot_ms_forget() {\n         let mut timer = Timer::new().unwrap();\n-        timer.oneshot(100000000000);\n+        timer.oneshot_ms(100000000000);\n     })\n \n-    iotest!(fn oneshot_twice() {\n+    iotest!(fn oneshot_ms_twice() {\n         let mut timer = Timer::new().unwrap();\n-        let rx1 = timer.oneshot(10000);\n-        let rx = timer.oneshot(1);\n+        let rx1 = timer.oneshot_ms(10000);\n+        let rx = timer.oneshot_ms(1);\n         rx.recv();\n         assert_eq!(rx1.recv_opt(), Err(()));\n     })\n \n-    iotest!(fn test_io_timer_oneshot_then_sleep() {\n+    iotest!(fn test_io_timer_oneshot_ms_then_sleep() {\n         let mut timer = Timer::new().unwrap();\n-        let rx = timer.oneshot(100000000000);\n-        timer.sleep(1); // this should invalidate rx\n+        let rx = timer.oneshot_ms(100000000000);\n+        timer.sleep_ms(1); // this should invalidate rx\n \n         assert_eq!(rx.recv_opt(), Err(()));\n     })\n \n-    iotest!(fn test_io_timer_sleep_periodic() {\n+    iotest!(fn test_io_timer_sleep_periodic_ms() {\n         let mut timer = Timer::new().unwrap();\n-        let rx = timer.periodic(1);\n+        let rx = timer.periodic_ms(1);\n         rx.recv();\n         rx.recv();\n         rx.recv();\n     })\n \n-    iotest!(fn test_io_timer_sleep_periodic_forget() {\n+    iotest!(fn test_io_timer_sleep_periodic_ms_forget() {\n         let mut timer = Timer::new().unwrap();\n-        timer.periodic(100000000000);\n+        timer.periodic_ms(100000000000);\n     })\n \n-    iotest!(fn test_io_timer_sleep_standalone() {\n-        sleep(1)\n+    iotest!(fn test_io_timer_sleep_ms_standalone() {\n+        sleep_ms(1)\n     })\n \n-    iotest!(fn oneshot() {\n+    iotest!(fn oneshot_ms() {\n         let mut timer = Timer::new().unwrap();\n \n-        let rx = timer.oneshot(1);\n+        let rx = timer.oneshot_ms(1);\n         rx.recv();\n         assert!(rx.recv_opt().is_err());\n \n-        let rx = timer.oneshot(1);\n+        let rx = timer.oneshot_ms(1);\n         rx.recv();\n         assert!(rx.recv_opt().is_err());\n     })\n \n     iotest!(fn override() {\n         let mut timer = Timer::new().unwrap();\n-        let orx = timer.oneshot(100);\n-        let prx = timer.periodic(100);\n-        timer.sleep(1);\n+        let orx = timer.oneshot_ms(100);\n+        let prx = timer.periodic_ms(100);\n+        timer.sleep_ms(1);\n         assert_eq!(orx.recv_opt(), Err(()));\n         assert_eq!(prx.recv_opt(), Err(()));\n-        timer.oneshot(1).recv();\n+        timer.oneshot_ms(1).recv();\n     })\n \n-    iotest!(fn period() {\n+    iotest!(fn period_ms() {\n         let mut timer = Timer::new().unwrap();\n-        let rx = timer.periodic(1);\n+        let rx = timer.periodic_ms(1);\n         rx.recv();\n         rx.recv();\n-        let rx2 = timer.periodic(1);\n+        let rx2 = timer.periodic_ms(1);\n         rx2.recv();\n         rx2.recv();\n     })\n \n-    iotest!(fn sleep() {\n+    iotest!(fn sleep_ms() {\n         let mut timer = Timer::new().unwrap();\n-        timer.sleep(1);\n-        timer.sleep(1);\n+        timer.sleep_ms(1);\n+        timer.sleep_ms(1);\n     })\n \n-    iotest!(fn oneshot_fail() {\n+    iotest!(fn oneshot_ms_fail() {\n         let mut timer = Timer::new().unwrap();\n-        let _rx = timer.oneshot(1);\n+        let _rx = timer.oneshot_ms(1);\n         fail!();\n     } #[should_fail])\n \n-    iotest!(fn period_fail() {\n+    iotest!(fn period_ms_fail() {\n         let mut timer = Timer::new().unwrap();\n-        let _rx = timer.periodic(1);\n+        let _rx = timer.periodic_ms(1);\n         fail!();\n     } #[should_fail])\n \n@@ -298,7 +298,7 @@ mod test {\n     iotest!(fn closing_channel_during_drop_doesnt_kill_everything() {\n         // see issue #10375\n         let mut timer = Timer::new().unwrap();\n-        let timer_rx = timer.periodic(1000);\n+        let timer_rx = timer.periodic_ms(1000);\n \n         spawn(proc() {\n             let _ = timer_rx.recv_opt();\n@@ -311,58 +311,58 @@ mod test {\n     iotest!(fn reset_doesnt_switch_tasks() {\n         // similar test to the one above.\n         let mut timer = Timer::new().unwrap();\n-        let timer_rx = timer.periodic(1000);\n+        let timer_rx = timer.periodic_ms(1000);\n \n         spawn(proc() {\n             let _ = timer_rx.recv_opt();\n         });\n \n-        timer.oneshot(1);\n+        timer.oneshot_ms(1);\n     })\n \n     iotest!(fn reset_doesnt_switch_tasks2() {\n         // similar test to the one above.\n         let mut timer = Timer::new().unwrap();\n-        let timer_rx = timer.periodic(1000);\n+        let timer_rx = timer.periodic_ms(1000);\n \n         spawn(proc() {\n             let _ = timer_rx.recv_opt();\n         });\n \n-        timer.sleep(1);\n+        timer.sleep_ms(1);\n     })\n \n     iotest!(fn sender_goes_away_oneshot() {\n         let rx = {\n             let mut timer = Timer::new().unwrap();\n-            timer.oneshot(1000)\n+            timer.oneshot_ms(1000)\n         };\n         assert_eq!(rx.recv_opt(), Err(()));\n     })\n \n     iotest!(fn sender_goes_away_period() {\n         let rx = {\n             let mut timer = Timer::new().unwrap();\n-            timer.periodic(1000)\n+            timer.periodic_ms(1000)\n         };\n         assert_eq!(rx.recv_opt(), Err(()));\n     })\n \n     iotest!(fn receiver_goes_away_oneshot() {\n         let mut timer1 = Timer::new().unwrap();\n-        timer1.oneshot(1);\n+        timer1.oneshot_ms(1);\n         let mut timer2 = Timer::new().unwrap();\n         // while sleeping, the previous timer should fire and not have its\n         // callback do something terrible.\n-        timer2.sleep(2);\n+        timer2.sleep_ms(2);\n     })\n \n     iotest!(fn receiver_goes_away_period() {\n         let mut timer1 = Timer::new().unwrap();\n-        timer1.periodic(1);\n+        timer1.periodic_ms(1);\n         let mut timer2 = Timer::new().unwrap();\n         // while sleeping, the previous timer should fire and not have its\n         // callback do something terrible.\n-        timer2.sleep(2);\n+        timer2.sleep_ms(2);\n     })\n }"}, {"sha": "103cd574e7381d0634b842b30c780cc02d5b2b88", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=657b679b158894556628f096a28aab364b605446", "patch": "@@ -233,7 +233,7 @@ pub mod ascii;\n #[cfg(not(test))]\n pub mod gc;\n \n-pub mod duration;\n+pub mod time;\n \n /* Common traits */\n "}, {"sha": "96036b54e36e1ded928c1856abffb5620043ba15", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=657b679b158894556628f096a28aab364b605446", "patch": "@@ -669,5 +669,5 @@ fn task_abort_no_kill_runtime() {\n     let tb = TaskBuilder::new();\n     let rx = tb.try_future(proc() {});\n     mem::drop(rx);\n-    timer::sleep(1000);\n+    timer::sleep_ms(1000);\n }"}, {"sha": "d9a2f4b3cab38b866fd2914bdee20bbecea6580a", "filename": "src/libstd/time.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657b679b158894556628f096a28aab364b605446/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=657b679b158894556628f096a28aab364b605446", "patch": "@@ -342,6 +342,7 @@ fn div_rem_64(this: i64, other: i64) -> (i64, i64) {\n \n #[cfg(test)]\n mod tests {\n+    use option::Some;\n     use super::{Duration, MIN_DAYS, MAX_DAYS};\n     use i32;\n     use num::{CheckedAdd, CheckedSub, Zero};", "previous_filename": "src/libstd/duration.rs"}]}