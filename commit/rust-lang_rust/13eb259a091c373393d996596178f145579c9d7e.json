{"sha": "13eb259a091c373393d996596178f145579c9d7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZWIyNTlhMDkxYzM3MzM5M2Q5OTY1OTYxNzhmMTQ1NTc5YzlkN2U=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-08-22T04:23:16Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-08-22T23:31:58Z"}, "message": "change FileDescriptor instance methods to use &mut self", "tree": {"sha": "357863791e3bf41d82bd28cfc66cf532290f1265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/357863791e3bf41d82bd28cfc66cf532290f1265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13eb259a091c373393d996596178f145579c9d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13eb259a091c373393d996596178f145579c9d7e", "html_url": "https://github.com/rust-lang/rust/commit/13eb259a091c373393d996596178f145579c9d7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13eb259a091c373393d996596178f145579c9d7e/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece709f172d180471d59a17bb92aa0c3f3ca25d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece709f172d180471d59a17bb92aa0c3f3ca25d7", "html_url": "https://github.com/rust-lang/rust/commit/ece709f172d180471d59a17bb92aa0c3f3ca25d7"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "f88731ca6357906f7175dd74ea6056529cfa9ec0", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/13eb259a091c373393d996596178f145579c9d7e/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13eb259a091c373393d996596178f145579c9d7e/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=13eb259a091c373393d996596178f145579c9d7e", "patch": "@@ -147,7 +147,7 @@ impl FileDescriptor {\n     }\n \n     // as per bnoordhuis in #libuv: offset >= 0 uses prwrite instead of write\n-    fn write_common(&self, loop_: Loop, buf: Buf, offset: i64, cb: Option<FsCallback>)\n+    fn write_common(&mut self, loop_: Loop, buf: Buf, offset: i64, cb: Option<FsCallback>)\n           -> int {\n         let complete_cb_ptr = match cb {\n             Some(_) => compl_cb,\n@@ -166,16 +166,16 @@ impl FileDescriptor {\n         if is_sync { req.cleanup_and_delete(); }\n         result\n     }\n-    pub fn write(&self, loop_: Loop, buf: Buf, offset: i64, cb: FsCallback)\n+    pub fn write(&mut self, loop_: Loop, buf: Buf, offset: i64, cb: FsCallback)\n           -> int {\n         self.write_common(loop_, buf, offset, Some(cb))\n     }\n-    pub fn write_sync(&self, loop_: Loop, buf: Buf, offset: i64)\n+    pub fn write_sync(&mut self, loop_: Loop, buf: Buf, offset: i64)\n           -> int {\n         self.write_common(loop_, buf, offset, None)\n     }\n \n-    fn read_common(&self, loop_: Loop, buf: Buf,\n+    fn read_common(&mut self, loop_: Loop, buf: Buf,\n                    offset: i64, cb: Option<FsCallback>)\n           -> int {\n         let complete_cb_ptr = match cb {\n@@ -194,11 +194,11 @@ impl FileDescriptor {\n         if is_sync { req.cleanup_and_delete(); }\n         result\n     }\n-    pub fn read(&self, loop_: Loop, buf: Buf, offset: i64, cb: FsCallback)\n+    pub fn read(&mut self, loop_: Loop, buf: Buf, offset: i64, cb: FsCallback)\n           -> int {\n         self.read_common(loop_, buf, offset, Some(cb))\n     }\n-    pub fn read_sync(&self, loop_: Loop, buf: Buf, offset: i64)\n+    pub fn read_sync(&mut self, loop_: Loop, buf: Buf, offset: i64)\n           -> int {\n         self.read_common(loop_, buf, offset, None)\n     }\n@@ -294,7 +294,7 @@ mod test {\n             |req, uverr| {\n                 let loop_ = req.get_loop();\n                 assert!(uverr.is_none());\n-                let fd = FileDescriptor::from_open_req(req);\n+                let mut fd = FileDescriptor::from_open_req(req);\n                 let raw_fd = fd.native_handle();\n                 let buf = unsafe { *write_buf_ptr };\n                 do fd.write(loop_, buf, -1) |_, uverr| {\n@@ -306,7 +306,7 @@ mod test {\n                             |req, uverr| {\n                             assert!(uverr.is_none());\n                             let loop_ = req.get_loop();\n-                            let fd = FileDescriptor::from_open_req(req);\n+                            let mut fd = FileDescriptor::from_open_req(req);\n                             let raw_fd = fd.native_handle();\n                             let read_buf = unsafe { *read_buf_ptr };\n                             do fd.read(loop_, read_buf, 0) |req, uverr| {\n@@ -360,7 +360,7 @@ mod test {\n                                                    create_flags as int, mode as int);\n             assert!(status_to_maybe_uv_error_with_loop(\n                 loop_.native_handle(), result as i32).is_none());\n-            let fd = FileDescriptor(result as i32);\n+            let mut fd = FileDescriptor(result as i32);\n             // write\n             let result = fd.write_sync(loop_, write_buf, -1);\n             assert!(status_to_maybe_uv_error_with_loop(\n@@ -375,7 +375,7 @@ mod test {\n             assert!(status_to_maybe_uv_error_with_loop(\n                 loop_.native_handle(), result as i32).is_none());\n             let len = 1028;\n-            let fd = FileDescriptor(result as i32);\n+            let mut fd = FileDescriptor(result as i32);\n             // read\n             let read_mem: ~[u8] = vec::from_elem(len, 0u8);\n             let buf = slice_to_uv_buf(read_mem);\n@@ -413,7 +413,7 @@ mod test {\n     }\n \n     fn naive_print(loop_: Loop, input: &str) {\n-        let stdout = FileDescriptor(STDOUT_FILENO);\n+        let mut stdout = FileDescriptor(STDOUT_FILENO);\n         let write_val = input.as_bytes();\n         let write_buf = slice_to_uv_buf(write_val);\n         stdout.write_sync(loop_, write_buf, -1);"}]}