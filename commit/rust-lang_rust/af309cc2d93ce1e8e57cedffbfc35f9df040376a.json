{"sha": "af309cc2d93ce1e8e57cedffbfc35f9df040376a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMzA5Y2MyZDkzY2UxZThlNTdjZWRmZmJmYzM1ZjlkZjA0MDM3NmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-28T07:57:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-11-20T09:58:31Z"}, "message": "needs -> might need", "tree": {"sha": "9be42fd4bbf10583b60e30f1479296ad9dbb1621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9be42fd4bbf10583b60e30f1479296ad9dbb1621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af309cc2d93ce1e8e57cedffbfc35f9df040376a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af309cc2d93ce1e8e57cedffbfc35f9df040376a", "html_url": "https://github.com/rust-lang/rust/commit/af309cc2d93ce1e8e57cedffbfc35f9df040376a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af309cc2d93ce1e8e57cedffbfc35f9df040376a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63bdb3ac0948683fe7548680d3b78bb5d8b32076", "url": "https://api.github.com/repos/rust-lang/rust/commits/63bdb3ac0948683fe7548680d3b78bb5d8b32076", "html_url": "https://github.com/rust-lang/rust/commit/63bdb3ac0948683fe7548680d3b78bb5d8b32076"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "89a93096f1c22689727a164454c5bc7651996396", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af309cc2d93ce1e8e57cedffbfc35f9df040376a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af309cc2d93ce1e8e57cedffbfc35f9df040376a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=af309cc2d93ce1e8e57cedffbfc35f9df040376a", "patch": "@@ -95,7 +95,7 @@ impl UnsafetyViolationDetails {\n                  and cause data races: all of these are undefined behavior\",\n             ),\n             AssignToDroppingUnionField => (\n-                \"assignment to union field that needs dropping\",\n+                \"assignment to union field that might need dropping\",\n                 \"the previous content of the field will be dropped, which causes undefined \\\n                  behavior if the field was not properly initialized\",\n             ),"}, {"sha": "6adf0ac59b93ce518c60660290803fdcab1aa93e", "filename": "src/test/ui/union/union-unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af309cc2d93ce1e8e57cedffbfc35f9df040376a/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af309cc2d93ce1e8e57cedffbfc35f9df040376a/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs?ref=af309cc2d93ce1e8e57cedffbfc35f9df040376a", "patch": "@@ -32,8 +32,8 @@ fn deref_union_field(mut u: URef) {\n }\n \n fn assign_noncopy_union_field(mut u: URefCell) {\n-    u.a = (RefCell::new(0), 1); //~ ERROR assignment to union field that needs dropping\n-    u.a.0 = RefCell::new(0); //~ ERROR assignment to union field that needs dropping\n+    u.a = (RefCell::new(0), 1); //~ ERROR assignment to union field that might need dropping\n+    u.a.0 = RefCell::new(0); //~ ERROR assignment to union field that might need dropping\n     u.a.1 = 1; // OK\n }\n "}, {"sha": "a25c09144f7420abe9333d3bb53d724cc89c953a", "filename": "src/test/ui/union/union-unsafe.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af309cc2d93ce1e8e57cedffbfc35f9df040376a/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af309cc2d93ce1e8e57cedffbfc35f9df040376a/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr?ref=af309cc2d93ce1e8e57cedffbfc35f9df040376a", "patch": "@@ -6,19 +6,19 @@ LL |     *(u.p) = 13;\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error[E0133]: assignment to union field that needs dropping is unsafe and requires unsafe function or block\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n   --> $DIR/union-unsafe.rs:35:5\n    |\n LL |     u.a = (RefCell::new(0), 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that needs dropping\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n-error[E0133]: assignment to union field that needs dropping is unsafe and requires unsafe function or block\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n   --> $DIR/union-unsafe.rs:36:5\n    |\n LL |     u.a.0 = RefCell::new(0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that needs dropping\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n "}]}