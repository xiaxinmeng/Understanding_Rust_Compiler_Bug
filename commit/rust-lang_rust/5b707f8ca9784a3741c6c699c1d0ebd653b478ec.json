{"sha": "5b707f8ca9784a3741c6c699c1d0ebd653b478ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNzA3ZjhjYTk3ODRhMzc0MWM2YzY5OWMxZDBlYmQ2NTNiNDc4ZWM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-01T18:20:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-01T18:20:26Z"}, "message": "Rollup merge of #66002 - lzutao:stablilize-float_to_from_bytes, r=SimonSapin\n\nStabilize float_to_from_bytes feature\n\nFCP completed in https://github.com/rust-lang/rust/issues/60446#issuecomment-548440175\nCloses #60446", "tree": {"sha": "d8dca38a922721398abbe838eac24a863ae8e8f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8dca38a922721398abbe838eac24a863ae8e8f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b707f8ca9784a3741c6c699c1d0ebd653b478ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdvHdrCRBK7hj4Ov3rIwAAdHIIAAG77dPL0XGejIplX49axJIU\nyFZFcsdXJq2oBBuPgj8JfWs35zgqga+Zm4zZiZLpnJt9vxATmRyicBfo2CVoFkCT\nH2sSiEg3s52y2qgneAZHD97M6K7jfjbFvfZaw0NAbkECsrM+4JWx75eSrOctO0N3\nk7XCSJnG9japvbXYo6ytb/+pNUYwA5DEJz3/ZlWG4//DNSyP52zUzj9GgHu1VTfN\n8lqimeCuaeabwHnRIxVSZRKSU1I3WfHgA9oLbU2b4VZw6ArvJ0xQp/hn37sLIUqd\nTGzc67gKsS9fD3cSu+yvGbXA4EedYk8J6bb4OkwQUamSkk8FUtU2EAh8hH4bHjY=\n=0jeZ\n-----END PGP SIGNATURE-----\n", "payload": "tree d8dca38a922721398abbe838eac24a863ae8e8f0\nparent 665d6479c48daf863625f20f0ddcc98007d67eb8\nparent 7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e\nauthor Tyler Mandry <tmandry@gmail.com> 1572632426 -0700\ncommitter GitHub <noreply@github.com> 1572632426 -0700\n\nRollup merge of #66002 - lzutao:stablilize-float_to_from_bytes, r=SimonSapin\n\nStabilize float_to_from_bytes feature\n\nFCP completed in https://github.com/rust-lang/rust/issues/60446#issuecomment-548440175\nCloses #60446\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b707f8ca9784a3741c6c699c1d0ebd653b478ec", "html_url": "https://github.com/rust-lang/rust/commit/5b707f8ca9784a3741c6c699c1d0ebd653b478ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b707f8ca9784a3741c6c699c1d0ebd653b478ec/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "665d6479c48daf863625f20f0ddcc98007d67eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/665d6479c48daf863625f20f0ddcc98007d67eb8", "html_url": "https://github.com/rust-lang/rust/commit/665d6479c48daf863625f20f0ddcc98007d67eb8"}, {"sha": "7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e", "html_url": "https://github.com/rust-lang/rust/commit/7b72c2831c6a50a9e07a3d94ebef5d9f29bfd51e"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "5730088c4d9a95a9f21f48609074c677138385f6", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b707f8ca9784a3741c6c699c1d0ebd653b478ec/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b707f8ca9784a3741c6c699c1d0ebd653b478ec/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=5b707f8ca9784a3741c6c699c1d0ebd653b478ec", "patch": "@@ -466,11 +466,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f32.to_be_bytes();\n     /// assert_eq!(bytes, [0x41, 0x48, 0x00, 0x00]);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_be_bytes(self) -> [u8; 4] {\n         self.to_bits().to_be_bytes()\n@@ -482,11 +481,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f32.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x48, 0x41]);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_le_bytes(self) -> [u8; 4] {\n         self.to_bits().to_le_bytes()\n@@ -504,7 +502,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f32.to_ne_bytes();\n     /// assert_eq!(\n     ///     bytes,\n@@ -515,7 +512,7 @@ impl f32 {\n     ///     }\n     /// );\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_ne_bytes(self) -> [u8; 4] {\n         self.to_bits().to_ne_bytes()\n@@ -526,11 +523,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f32::from_be_bytes([0x41, 0x48, 0x00, 0x00]);\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_be_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_be_bytes(bytes))\n@@ -541,11 +537,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f32::from_le_bytes([0x00, 0x00, 0x48, 0x41]);\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_le_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_le_bytes(bytes))\n@@ -563,15 +558,14 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f32::from_ne_bytes(if cfg!(target_endian = \"big\") {\n     ///     [0x41, 0x48, 0x00, 0x00]\n     /// } else {\n     ///     [0x00, 0x00, 0x48, 0x41]\n     /// });\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_ne_bytes(bytes))"}, {"sha": "2bdeda340dce01c19d7d60c2aaa08c1c5a6baaea", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b707f8ca9784a3741c6c699c1d0ebd653b478ec/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b707f8ca9784a3741c6c699c1d0ebd653b478ec/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=5b707f8ca9784a3741c6c699c1d0ebd653b478ec", "patch": "@@ -479,11 +479,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f64.to_be_bytes();\n     /// assert_eq!(bytes, [0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_be_bytes(self) -> [u8; 8] {\n         self.to_bits().to_be_bytes()\n@@ -495,11 +494,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f64.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_le_bytes(self) -> [u8; 8] {\n         self.to_bits().to_le_bytes()\n@@ -517,7 +515,6 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let bytes = 12.5f64.to_ne_bytes();\n     /// assert_eq!(\n     ///     bytes,\n@@ -528,7 +525,7 @@ impl f64 {\n     ///     }\n     /// );\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn to_ne_bytes(self) -> [u8; 8] {\n         self.to_bits().to_ne_bytes()\n@@ -539,11 +536,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f64::from_be_bytes([0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_be_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_be_bytes(bytes))\n@@ -554,11 +550,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f64::from_le_bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]);\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_le_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_le_bytes(bytes))\n@@ -576,15 +571,14 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_to_from_bytes)]\n     /// let value = f64::from_ne_bytes(if cfg!(target_endian = \"big\") {\n     ///     [0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\n     /// } else {\n     ///     [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]\n     /// });\n     /// assert_eq!(value, 12.5);\n     /// ```\n-    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[inline]\n     pub fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_ne_bytes(bytes))"}]}