{"sha": "31375d2074aeed0c6f173aa200f0bd3bf6d36756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMzc1ZDIwNzRhZWVkMGM2ZjE3M2FhMjAwZjBiZDNiZjZkMzY3NTY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-07T22:40:07Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-07T22:44:59Z"}, "message": "Get rid of custom pretty-printing in rustdoc\n\nand use rustc_hir_pretty directly instead", "tree": {"sha": "5d88fccfd369188f2e3238ec6facc6099b010d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d88fccfd369188f2e3238ec6facc6099b010d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31375d2074aeed0c6f173aa200f0bd3bf6d36756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31375d2074aeed0c6f173aa200f0bd3bf6d36756", "html_url": "https://github.com/rust-lang/rust/commit/31375d2074aeed0c6f173aa200f0bd3bf6d36756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31375d2074aeed0c6f173aa200f0bd3bf6d36756/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d27b2c94cff9a5f6d8e4d2ea45f6f2e434e5f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d27b2c94cff9a5f6d8e4d2ea45f6f2e434e5f6", "html_url": "https://github.com/rust-lang/rust/commit/18d27b2c94cff9a5f6d8e4d2ea45f6f2e434e5f6"}], "stats": {"total": 80, "additions": 9, "deletions": 71}, "files": [{"sha": "992b6220f0ca74439f88aa2c6d46d5e74129c5b8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31375d2074aeed0c6f173aa200f0bd3bf6d36756/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31375d2074aeed0c6f173aa200f0bd3bf6d36756/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=31375d2074aeed0c6f173aa200f0bd3bf6d36756", "patch": "@@ -962,7 +962,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], hir::BodyId) {\n                 .iter()\n                 .enumerate()\n                 .map(|(i, ty)| Argument {\n-                    name: name_from_pat(&body.params[i].pat),\n+                    name: Symbol::intern(&rustc_hir_pretty::param_to_string(&body.params[i])),\n                     type_: ty.clean(cx),\n                 })\n                 .collect(),"}, {"sha": "ca8cc0a83bd3f3e0d4aba6d3220580e8511ad855", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/31375d2074aeed0c6f173aa200f0bd3bf6d36756/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31375d2074aeed0c6f173aa200f0bd3bf6d36756/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=31375d2074aeed0c6f173aa200f0bd3bf6d36756", "patch": "@@ -314,25 +314,6 @@ crate fn strip_path(path: &Path) -> Path {\n     Path { global: path.global, res: path.res, segments }\n }\n \n-crate fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n-    let segments = match *p {\n-        hir::QPath::Resolved(_, ref path) => &path.segments,\n-        hir::QPath::TypeRelative(_, ref segment) => return segment.ident.to_string(),\n-        hir::QPath::LangItem(lang_item, ..) => return lang_item.name().to_string(),\n-    };\n-\n-    let mut s = String::new();\n-    for (i, seg) in segments.iter().enumerate() {\n-        if i > 0 {\n-            s.push_str(\"::\");\n-        }\n-        if seg.ident.name != kw::PathRoot {\n-            s.push_str(&seg.ident.as_str());\n-        }\n-    }\n-    s\n-}\n-\n crate fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n     let tcx = cx.tcx;\n \n@@ -376,57 +357,6 @@ impl ToSource for rustc_span::Span {\n     }\n }\n \n-crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n-    use rustc_hir::*;\n-    debug!(\"trying to get a name from pattern: {:?}\", p);\n-\n-    Symbol::intern(&match p.kind {\n-        PatKind::Wild => return kw::Underscore,\n-        PatKind::Binding(_, _, ident, _) => return ident.name,\n-        PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n-        PatKind::Struct(ref name, ref fields, etc) => format!(\n-            \"{} {{ {}{} }}\",\n-            qpath_to_string(name),\n-            fields\n-                .iter()\n-                .map(|fp| format!(\"{}: {}\", fp.ident, name_from_pat(&fp.pat)))\n-                .collect::<Vec<String>>()\n-                .join(\", \"),\n-            if etc { \", ..\" } else { \"\" }\n-        ),\n-        PatKind::Or(ref pats) => pats\n-            .iter()\n-            .map(|p| name_from_pat(&**p).to_string())\n-            .collect::<Vec<String>>()\n-            .join(\" | \"),\n-        PatKind::Tuple(ref elts, _) => format!(\n-            \"({})\",\n-            elts.iter()\n-                .map(|p| name_from_pat(&**p).to_string())\n-                .collect::<Vec<String>>()\n-                .join(\", \")\n-        ),\n-        PatKind::Box(ref p) => return name_from_pat(&**p),\n-        PatKind::Ref(ref p, _) => return name_from_pat(&**p),\n-        PatKind::Lit(..) => {\n-            warn!(\n-                \"tried to get argument name from PatKind::Lit, which is silly in function arguments\"\n-            );\n-            return Symbol::intern(\"()\");\n-        }\n-        PatKind::Range(..) => panic!(\n-            \"tried to get argument name from PatKind::Range, \\\n-             which is not allowed in function arguments\"\n-        ),\n-        PatKind::Slice(ref begin, ref mid, ref end) => {\n-            let begin = begin.iter().map(|p| name_from_pat(&**p).to_string());\n-            let mid = mid.as_ref().map(|p| format!(\"..{}\", name_from_pat(&**p))).into_iter();\n-            let end = end.iter().map(|p| name_from_pat(&**p).to_string());\n-            format!(\"[{}]\", begin.chain(mid).chain(end).collect::<Vec<_>>().join(\", \"))\n-        }\n-    })\n-}\n-\n crate fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n         ty::ConstKind::Unevaluated(def, _, promoted) => {"}, {"sha": "fd255d02fcb6a2844c0de85ed090bde5ef75dbe0", "filename": "src/test/rustdoc-ui/range-pattern.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31375d2074aeed0c6f173aa200f0bd3bf6d36756/src%2Ftest%2Frustdoc-ui%2Frange-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31375d2074aeed0c6f173aa200f0bd3bf6d36756/src%2Ftest%2Frustdoc-ui%2Frange-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frange-pattern.rs?ref=31375d2074aeed0c6f173aa200f0bd3bf6d36756", "patch": "@@ -0,0 +1,3 @@\n+// check-pass\n+\n+fn func(0u8..=255: u8) {}"}, {"sha": "f4cc36b1055adff790168f6a8f1470500279be8a", "filename": "src/test/rustdoc/range-arg-pattern.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31375d2074aeed0c6f173aa200f0bd3bf6d36756/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31375d2074aeed0c6f173aa200f0bd3bf6d36756/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs?ref=31375d2074aeed0c6f173aa200f0bd3bf6d36756", "patch": "@@ -0,0 +1,5 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.f.html\n+// @has - '//*[@class=\"rust fn\"]' 'pub fn f(0u8 ...255: u8)'\n+pub fn f(0u8...255: u8) {}"}]}