{"sha": "f6a75f17f6869aa12e6624b24aab02a0230af4e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YTc1ZjE3ZjY4NjlhYTEyZTY2MjRiMjRhYWIwMmEwMjMwYWY0ZTg=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-12-03T16:54:32Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-12-03T17:37:06Z"}, "message": "Rustup to rust-lang/rust#66935", "tree": {"sha": "8f43e09902177f31370eb448efdefaad2bcc4c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f43e09902177f31370eb448efdefaad2bcc4c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6a75f17f6869aa12e6624b24aab02a0230af4e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl3mnUIACgkQaTCGhp1Q\nZjfatRAAjHe8k8n+RZnU+Eq95N+s8HTe2F5zlpREMwS4WXLuNkJal0sAcQlzLpPq\ndXpvCSyTrkkpwVs50LliaVVFxIcf31kTfzDm9cF8Yl4Es40cx/uT0WPVoMMUk/4g\neR2ra33VBdDWHggD1kc12V/nry1Sqb2Xleu/a2UHUmW1IYmxDsg75zfjUc0aKy0l\nE/MIkxDqMYKHx2yPyTqXsRQSfe3oa21yn3hEgdJlBv6bi5NXmQgsPH+XDc97UU5U\nfj4iX2I728b42jbBPLRIvDOeWIF0iQdyBkW0nXQi0wQ/TVIS3KQkYZSWBa3r2FEE\nvkla+/rNsRG2NAdepAAONX2h4DNs/eQ05aTTDqlGbbmS9x/RdwHnp/uip1PHdG6v\ncgI58tTVeL/ldhMhLXLu8XLNFRe8iq9f1xa9lT9Man0BfZlqXuz5WTyfyn7Yqwzc\n4JmJMezyrFOTvEHmyrzSbUZenjNN+eXRVfHqZFhu6rROqlkeGBTnRHnqgM7Jaywa\nYP2cYi3rlPByU9fM5JANm+EO+6uZFQZ+34c7o/meD88QS3r8CMQ8gX/FQgmJlFYq\nTNvfu9YkGKrPaWhED4e16l1pq4zXK/7mbs2Y4G1x1EAX5ebiuaKm7ieEzU8JRfS+\nB/6WYR3axt9ca9XQdD7l72r1n33i+WIsbiopm8KUdvhZp3ywZCY=\n=PLR+\n-----END PGP SIGNATURE-----", "payload": "tree 8f43e09902177f31370eb448efdefaad2bcc4c02\nparent 7a943a9dfcdca98e5988da6d0b7d2f83a364b5ba\nauthor flip1995 <hello@philkrones.com> 1575392072 +0100\ncommitter flip1995 <hello@philkrones.com> 1575394626 +0100\n\nRustup to rust-lang/rust#66935\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a75f17f6869aa12e6624b24aab02a0230af4e8", "html_url": "https://github.com/rust-lang/rust/commit/f6a75f17f6869aa12e6624b24aab02a0230af4e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6a75f17f6869aa12e6624b24aab02a0230af4e8/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a943a9dfcdca98e5988da6d0b7d2f83a364b5ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a943a9dfcdca98e5988da6d0b7d2f83a364b5ba", "html_url": "https://github.com/rust-lang/rust/commit/7a943a9dfcdca98e5988da6d0b7d2f83a364b5ba"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "487ebb454e422cd7b1b641b5e6067de519c68136", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a75f17f6869aa12e6624b24aab02a0230af4e8/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a75f17f6869aa12e6624b24aab02a0230af4e8/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=f6a75f17f6869aa12e6624b24aab02a0230af4e8", "patch": "@@ -424,7 +424,7 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n         };\n \n         if attr.style == AttrStyle::Outer {\n-            if attr_item.tokens.is_empty() || !is_present_in_source(cx, attr.span) {\n+            if attr_item.args.inner_tokens().is_empty() || !is_present_in_source(cx, attr.span) {\n                 return;\n             }\n "}, {"sha": "0b42e02bbd476865e15487ca93591bddf918bed4", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6a75f17f6869aa12e6624b24aab02a0230af4e8/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a75f17f6869aa12e6624b24aab02a0230af4e8/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=f6a75f17f6869aa12e6624b24aab02a0230af4e8", "patch": "@@ -32,11 +32,11 @@ declare_lint_pass!(DbgMacro => [DBG_MACRO]);\n impl EarlyLintPass for DbgMacro {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n         if mac.path == sym!(dbg) {\n-            if let Some(sugg) = tts_span(mac.tts.clone()).and_then(|span| snippet_opt(cx, span)) {\n+            if let Some(sugg) = tts_span(mac.args.inner_tokens()).and_then(|span| snippet_opt(cx, span)) {\n                 span_lint_and_sugg(\n                     cx,\n                     DBG_MACRO,\n-                    mac.span,\n+                    mac.span(),\n                     \"`dbg!` macro is intended as a debugging tool\",\n                     \"ensure to avoid having uses of it in version control\",\n                     sugg,\n@@ -46,7 +46,7 @@ impl EarlyLintPass for DbgMacro {\n                 span_help_and_lint(\n                     cx,\n                     DBG_MACRO,\n-                    mac.span,\n+                    mac.span(),\n                     \"`dbg!` macro is intended as a debugging tool\",\n                     \"ensure to avoid having uses of it in version control\",\n                 );"}, {"sha": "5160f0739ec92b7396792ca86ed00b7e9b3994a3", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6a75f17f6869aa12e6624b24aab02a0230af4e8/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a75f17f6869aa12e6624b24aab02a0230af4e8/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=f6a75f17f6869aa12e6624b24aab02a0230af4e8", "patch": "@@ -189,13 +189,13 @@ declare_lint_pass!(Write => [\n impl EarlyLintPass for Write {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &Mac) {\n         if mac.path == sym!(println) {\n-            span_lint(cx, PRINT_STDOUT, mac.span, \"use of `println!`\");\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n+            span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.args.inner_tokens(), false) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     span_lint_and_sugg(\n                         cx,\n                         PRINTLN_EMPTY_STRING,\n-                        mac.span,\n+                        mac.span(),\n                         \"using `println!(\\\"\\\")`\",\n                         \"replace it with\",\n                         \"println!()\".to_string(),\n@@ -204,13 +204,13 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(print) {\n-            span_lint(cx, PRINT_STDOUT, mac.span, \"use of `print!`\");\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n+            span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.args.inner_tokens(), false) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n                         PRINT_WITH_NEWLINE,\n-                        mac.span,\n+                        mac.span(),\n                         \"using `print!()` with a format string that ends in a single newline\",\n                         |err| {\n                             err.multipart_suggestion(\n@@ -226,12 +226,12 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(write) {\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, true) {\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.args.inner_tokens(), true) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n                         WRITE_WITH_NEWLINE,\n-                        mac.span,\n+                        mac.span(),\n                         \"using `write!()` with a format string that ends in a single newline\",\n                         |err| {\n                             err.multipart_suggestion(\n@@ -247,7 +247,7 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(writeln) {\n-            if let (Some(fmt_str), expr) = check_tts(cx, &mac.tts, true) {\n+            if let (Some(fmt_str), expr) = check_tts(cx, &mac.args.inner_tokens(), true) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     let mut applicability = Applicability::MachineApplicable;\n                     let suggestion = expr.map_or_else(\n@@ -261,7 +261,7 @@ impl EarlyLintPass for Write {\n                     span_lint_and_sugg(\n                         cx,\n                         WRITELN_EMPTY_STRING,\n-                        mac.span,\n+                        mac.span(),\n                         format!(\"using `writeln!({}, \\\"\\\")`\", suggestion).as_str(),\n                         \"replace it with\",\n                         format!(\"writeln!({})\", suggestion),"}]}