{"sha": "f466f52c1bf8f2e4454e31c683a88625ad4b4033", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjZmNTJjMWJmOGYyZTQ0NTRlMzFjNjgzYTg4NjI1YWQ0YjQwMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T09:53:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T09:53:32Z"}, "message": "Auto merge of #65716 - JohnTitor:rollup-fkcr85k, r=JohnTitor\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #64145 (Target-feature documented as unsafe)\n - #65007 (Mention keyword closing policy)\n - #65417 (Add more coherence tests)\n - #65507 (Fix test style in unused parentheses lint test)\n - #65591 (Add long error explanation for E0588)\n - #65617 (Fix WASI sleep impl)\n - #65656 (Add option to disable keyboard shortcuts in docs)\n - #65678 (Add long error explanation for E0728)\n - #65681 (Code cleanups following up on #65576.)\n - #65686 (refactor and move `maybe_append` )\n - #65688 (Add some tests for fixed ICEs)\n - #65689 (bring back some Debug instances for Miri)\n - #65695 (self-profiling: Remove module names from some event-ids in codegen backend.)\n - #65706 (Add missing space in librustdoc)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "debff7c338470da12d3a297e23978abfe0e6ff0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/debff7c338470da12d3a297e23978abfe0e6ff0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f466f52c1bf8f2e4454e31c683a88625ad4b4033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f466f52c1bf8f2e4454e31c683a88625ad4b4033", "html_url": "https://github.com/rust-lang/rust/commit/f466f52c1bf8f2e4454e31c683a88625ad4b4033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f466f52c1bf8f2e4454e31c683a88625ad4b4033/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6e4028a0db6b13d9a603baad109d6c902802c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e4028a0db6b13d9a603baad109d6c902802c03", "html_url": "https://github.com/rust-lang/rust/commit/d6e4028a0db6b13d9a603baad109d6c902802c03"}, {"sha": "1df90814135954ba856cc236801d2ac531cc7dac", "url": "https://api.github.com/repos/rust-lang/rust/commits/1df90814135954ba856cc236801d2ac531cc7dac", "html_url": "https://github.com/rust-lang/rust/commit/1df90814135954ba856cc236801d2ac531cc7dac"}], "stats": {"total": 1547, "additions": 744, "deletions": 803}, "files": [{"sha": "37a217d2a04523fb53a3cc1c1ed6031ca2ff787b", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -128,6 +128,14 @@ the master branch to your feature branch.\n Also, please make sure that fixup commits are squashed into other related\n commits with meaningful commit messages.\n \n+GitHub allows [closing issues using keywords][closing-keywords]. This feature\n+should be used to keep the issue tracker tidy. However, it is generally preferred\n+to put the \"closes #123\" text in the PR description rather than the issue commit;\n+particularly during rebasing, citing the issue number in the commit can \"spam\"\n+the issue in question.\n+\n+[closing-keywords]: https://help.github.com/en/articles/closing-issues-using-keywords\n+\n Please make sure your pull request is in compliance with Rust's style\n guidelines by running\n "}, {"sha": "b603c7b231e68471aacb58fe47a4349f52e80226", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -14,6 +14,7 @@\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)\n+    - [Known Issues](targets/known-issues.md)\n - [Profile-guided Optimization](profile-guided-optimization.md)\n - [Linker-plugin based LTO](linker-plugin-lto.md)\n - [Contributing to `rustc`](contributing.md)"}, {"sha": "f5d5f2089d7e76901c0f5a84912e8d02aaa26c84", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -61,6 +61,8 @@ enabling or disabling a feature.\n To see the valid options and an example of use, run `rustc --print\n target-features`.\n \n+Using this flag is unsafe and might result in [undefined runtime behavior](../targets/known-issues.md).\n+\n ## passes\n \n This flag can be used to add extra LLVM passes to the compilation."}, {"sha": "bdb3c5196585e09df6fc73d44116e4509603bea1", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -145,7 +145,7 @@ of print values are:\n   target CPU may be selected with the `-C target-cpu=val` flag.\n - `target-features` \u2014 List of available target features for the current\n   target. Target features may be enabled with the `-C target-feature=val`\n-  flag.\n+  flag. This flag is unsafe. See [known issues](targets/known-issues.md) for more details.\n - `relocation-models` \u2014 List of relocation models. Relocation models may be\n   selected with the `-C relocation-model=val` flag.\n - `code-models` \u2014 List of code models. Code models may be selected with the"}, {"sha": "5859df83f645bc8ea5e3cc4fd4e6057a29fad440", "filename": "src/doc/rustc/src/targets/index.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -11,3 +11,9 @@ To compile to a particular target, use the `--target` flag:\n ```bash\n $ rustc src/main.rs --target=wasm32-unknown-unknown\n ```\n+## Target Features\n+`x86`,  and `ARMv8` are two popular CPU architectures. Their instruction sets form a common baseline across most CPUs. However, some CPUs extend these with custom instruction sets, e.g. vector (`AVX`), bitwise manipulation (`BMI`) or cryptographic (`AES`).\n+\n+Developers, who know on which CPUs their compiled code is going to run can choose to add (or remove) CPU specific instruction sets via the `-C target-feature=val` flag.\n+\n+Please note, that this flag is generally considered as unsafe. More details can be found in [this section](known-issues.md)."}, {"sha": "89fd8ea6d32e96f1b3869eb9e5d091a16d0c3821", "filename": "src/doc/rustc/src/targets/known-issues.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fknown-issues.md", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fknown-issues.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fknown-issues.md?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,13 @@\n+# Known Issues\n+This section informs you about known \"gotchas\". Keep in mind, that this section is (and always will be) incomplete. For suggestions and amendments, feel free to [contribute](../contributing.md) to this guide.\n+\n+## Target Features\n+Most target-feature problems arise, when mixing code that have the target-feature _enabled_ with code that have it _disabled_. If you want to avoid undefined behavior, it is recommended to build _all code_ (including the standard library and imported crates) with a common set of target-features.\n+\n+By default, compiling your code with the `-C target-feature` flag will not recompile the entire standard library and/or imported crates with matching target features. Therefore, target features are generally considered as unsafe. Using `#[target_feature]` on individual functions makes the function unsafe.\n+\n+Examples:\n+\n+| Target-Feature | Issue | Seen on | Description | Details |\n+| -------------- | ----- | ------- | ----------- | ------- |\n+| `+soft-float` <br> and <br> `-sse` | Segfaults and ABI mismatches | `x86` and `x86-64` | The `x86` and `x86_64` architecture uses SSE registers (aka `xmm`) for floating point operations. Using software emulated floats (\"soft-floats\") disables usage of `xmm` registers, but parts of Rust's core libraries (e.g. `std::f32` or `std::f64`) are compiled without soft-floats and expect parameters to be passed in `xmm` registers. This leads to ABI mismatches. <br><br>  Attempting to compile with disabled SSE causes the same error, too. | [#63466](https://github.com/rust-lang/rust/issues/63466) |"}, {"sha": "122ae4a6cf66f6a65a20ad8ae900eb0ed800c82b", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 80, "deletions": 3, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -2045,8 +2045,8 @@ so that a generator can then be constructed:\n async fn bar<T>() -> () {}\n \n async fn foo() {\n-  bar::<String>().await;\n-  //   ^^^^^^^^ specify type explicitly\n+    bar::<String>().await;\n+    //   ^^^^^^^^ specify type explicitly\n }\n ```\n \"##,\n@@ -2126,6 +2126,84 @@ static X: u32 = 42;\n ```\n \"##,\n \n+E0728: r##\"\n+[`await`] has been used outside [`async`] function or block.\n+\n+Erroneous code examples:\n+\n+```edition2018,compile_fail,E0728\n+# use std::pin::Pin;\n+# use std::future::Future;\n+# use std::task::{Context, Poll};\n+#\n+# struct WakeOnceThenComplete(bool);\n+#\n+# fn wake_and_yield_once() -> WakeOnceThenComplete {\n+#     WakeOnceThenComplete(false)\n+# }\n+#\n+# impl Future for WakeOnceThenComplete {\n+#     type Output = ();\n+#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n+#         if self.0 {\n+#             Poll::Ready(())\n+#         } else {\n+#             cx.waker().wake_by_ref();\n+#             self.0 = true;\n+#             Poll::Pending\n+#         }\n+#     }\n+# }\n+#\n+fn foo() {\n+    wake_and_yield_once().await // `await` is used outside `async` context\n+}\n+```\n+\n+[`await`] is used to suspend the current computation until the given\n+future is ready to produce a value. So it is legal only within\n+an [`async`] context, like an `async fn` or an `async` block.\n+\n+```edition2018\n+# use std::pin::Pin;\n+# use std::future::Future;\n+# use std::task::{Context, Poll};\n+#\n+# struct WakeOnceThenComplete(bool);\n+#\n+# fn wake_and_yield_once() -> WakeOnceThenComplete {\n+#     WakeOnceThenComplete(false)\n+# }\n+#\n+# impl Future for WakeOnceThenComplete {\n+#     type Output = ();\n+#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n+#         if self.0 {\n+#             Poll::Ready(())\n+#         } else {\n+#             cx.waker().wake_by_ref();\n+#             self.0 = true;\n+#             Poll::Pending\n+#         }\n+#     }\n+# }\n+#\n+async fn foo() {\n+    wake_and_yield_once().await // `await` is used within `async` function\n+}\n+\n+fn bar(x: u8) -> impl Future<Output = u8> {\n+    async move {\n+        wake_and_yield_once().await; // `await` is used within `async` block\n+        x\n+    }\n+}\n+```\n+\n+[`async`]: https://doc.rust-lang.org/std/keyword.async.html\n+[`await`]: https://doc.rust-lang.org/std/keyword.await.html\n+\"##,\n+\n E0734: r##\"\n A stability attribute has been used outside of the standard library.\n \n@@ -2218,6 +2296,5 @@ See [RFC 2091] for details on this and other limitations.\n //  E0702, // replaced with a generic attribute input check\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n     E0727, // `async` generators are not yet supported\n-    E0728, // `await` must be in an `async` function or block\n     E0739, // invalid track_caller application/syntax\n }"}, {"sha": "33b9ddaa622303f2c553810f0f686e29699a28ca", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -1149,7 +1149,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (`rustc --print target-cpus` for details)\"),\n     target_feature: String = (String::new(), parse_string, [TRACKED],\n-        \"target specific attributes (`rustc --print target-features` for details)\"),\n+        \"target specific attributes. (`rustc --print target-features` for details). \\\n+        This feature is unsafe.\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of extra LLVM passes to run (space separated)\"),\n     llvm_args: Vec<String> = (Vec::new(), parse_list, [TRACKED],"}, {"sha": "762b50f1659ccd7b00a536aa78ecbe482c227eda", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -259,7 +259,7 @@ fn generate_lto_work<B: ExtraBackendMethods>(\n     needs_thin_lto: Vec<(String, B::ThinBuffer)>,\n     import_only_modules: Vec<(SerializedModule<B::ModuleBuffer>, WorkProduct)>\n ) -> Vec<(WorkItem<B>, u64)> {\n-    let _prof_timer = cgcx.prof.generic_activity(\"codegen_run_lto\");\n+    let _prof_timer = cgcx.prof.generic_activity(\"codegen_generate_lto_work\");\n \n     let (lto_modules, copy_jobs) = if !needs_fat_lto.is_empty() {\n         assert!(needs_thin_lto.is_empty());\n@@ -674,11 +674,11 @@ impl<B: WriteBackendMethods> WorkItem<B> {\n         }\n     }\n \n-    pub fn name(&self) -> String {\n+    fn profiling_event_id(&self) -> &'static str {\n         match *self {\n-            WorkItem::Optimize(ref m) => format!(\"optimize: {}\", m.name),\n-            WorkItem::CopyPostLtoArtifacts(ref m) => format!(\"copy post LTO artifacts: {}\", m.name),\n-            WorkItem::LTO(ref m) => format!(\"lto: {}\", m.name()),\n+            WorkItem::Optimize(_) => \"codegen_module_optimize\",\n+            WorkItem::CopyPostLtoArtifacts(_) => \"codegen_copy_artifacts_from_incr_cache\",\n+            WorkItem::LTO(_) => \"codegen_module_perform_lto\",\n         }\n     }\n }\n@@ -1587,7 +1587,7 @@ fn spawn_work<B: ExtraBackendMethods>(\n         // as a diagnostic was already sent off to the main thread - just\n         // surface that there was an error in this worker.\n         bomb.result = {\n-            let _prof_timer = cgcx.prof.generic_activity(&work.name());\n+            let _prof_timer = cgcx.prof.generic_activity(work.profiling_event_id());\n             execute_work_item(&cgcx, work).ok()\n         };\n     });"}, {"sha": "e8ffe868231a6a87e4d2618b7e5cfd2f556d168a", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -406,6 +406,8 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n     ) {\n+        // The entry function is either `int main(void)` or `int main(int argc, char **argv)`,\n+        // depending on whether the target needs `argc` and `argv` to be passed in.\n         let llfty = if cx.sess().target.target.options.main_needs_argc_argv {\n             cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int())\n         } else {\n@@ -440,19 +442,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n \n         bx.insert_reference_to_gdb_debug_scripts_section_global();\n \n-        let (arg_argc, arg_argv) = if cx.sess().target.target.options.main_needs_argc_argv {\n-            // Params from native main() used as args for rust start function\n-            let param_argc = bx.get_param(0);\n-            let param_argv = bx.get_param(1);\n-            let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n-            let arg_argv = param_argv;\n-            (arg_argc, arg_argv)\n-        } else {\n-            // The Rust start function doesn't need argc and argv, so just pass zeros.\n-            let arg_argc = bx.const_int(cx.type_int(), 0);\n-            let arg_argv = bx.const_null(cx.type_ptr_to(cx.type_i8p()));\n-            (arg_argc, arg_argv)\n-        };\n+        let (arg_argc, arg_argv) = get_argc_argv(cx, &mut bx);\n \n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);\n@@ -477,6 +467,27 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n     }\n }\n \n+/// Obtain the `argc` and `argv` values to pass to the rust start function.\n+fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+    cx: &'a Bx::CodegenCx,\n+    bx: &mut Bx\n+) -> (Bx::Value, Bx::Value)\n+{\n+    if cx.sess().target.target.options.main_needs_argc_argv {\n+        // Params from native `main()` used as args for rust start function\n+        let param_argc = bx.get_param(0);\n+        let param_argv = bx.get_param(1);\n+        let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n+        let arg_argv = param_argv;\n+        (arg_argc, arg_argv)\n+    } else {\n+        // The Rust start function doesn't need `argc` and `argv`, so just pass zeros.\n+        let arg_argc = bx.const_int(cx.type_int(), 0);\n+        let arg_argv = bx.const_null(cx.type_ptr_to(cx.type_i8p()));\n+        (arg_argc, arg_argv)\n+    }\n+}\n+\n pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n \n pub fn codegen_crate<B: ExtraBackendMethods>("}, {"sha": "d929e958f05d0944b3faaa1b2ca164cb827a95f4", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -91,7 +91,7 @@ pub struct Frame<'mir, 'tcx, Tag=(), Extra=()> {\n     pub extra: Extra,\n }\n \n-#[derive(Clone, Eq, PartialEq)]\n+#[derive(Clone, Eq, PartialEq, Debug)] // Miri debug-prints these\n pub enum StackPopCleanup {\n     /// Jump to the next block in the caller, or cause UB if None (that's a function\n     /// that may never return). Also store layout of return place so\n@@ -113,7 +113,7 @@ pub struct LocalState<'tcx, Tag=(), Id=AllocId> {\n }\n \n /// Current value of a local variable\n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, Debug)] // Miri debug-prints these\n pub enum LocalValue<Tag=(), Id=AllocId> {\n     /// This local is not currently alive, and cannot be used at all.\n     Dead,"}, {"sha": "3d41c6e09c6bc092af0b0722644f1148f79c146c", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -194,7 +194,7 @@ a guard.\n ```compile_fail,E0029\n let string = \"salutations !\";\n \n-// The ordering relation for strings can't be evaluated at compile time,\n+// The ordering relation for strings cannot be evaluated at compile time,\n // so this doesn't work:\n match string {\n     \"hello\" ..= \"world\" => {}\n@@ -348,7 +348,7 @@ fn main() {\n \"##,\n \n E0044: r##\"\n-You can't use type or const parameters on foreign items.\n+You cannot use type or const parameters on foreign items.\n Example of erroneous code:\n \n ```compile_fail,E0044\n@@ -788,7 +788,7 @@ fn some_other_func() {}\n fn some_function() {\n     SOME_CONST = 14; // error : a constant value cannot be changed!\n     1 = 3; // error : 1 isn't a valid place!\n-    some_other_func() = 4; // error : we can't assign value to a function!\n+    some_other_func() = 4; // error : we cannot assign value to a function!\n     SomeStruct.x = 12; // error : SomeStruct a structure name but it is used\n                        // like a variable!\n }\n@@ -3891,6 +3891,33 @@ details.\n [issue #33685]: https://github.com/rust-lang/rust/issues/33685\n \"##,\n \n+E0588: r##\"\n+A type with `packed` representation hint has a field with `align`\n+representation hint.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0588\n+#[repr(align(16))]\n+struct Aligned(i32);\n+\n+#[repr(packed)] // error!\n+struct Packed(Aligned);\n+```\n+\n+Just like you cannot have both `align` and `packed` representation hints on a\n+same type, a `packed` type cannot contain another type with the `align`\n+representation hint. However, you can do the opposite:\n+\n+```\n+#[repr(packed)]\n+struct Packed(i32);\n+\n+#[repr(align(16))] // ok!\n+struct Aligned(Packed);\n+```\n+\"##,\n+\n E0592: r##\"\n This error occurs when you defined methods or associated functions with same\n name.\n@@ -4299,7 +4326,7 @@ extern {\n \n unsafe {\n     printf(::std::ptr::null(), 0f32);\n-    // error: can't pass an `f32` to variadic function, cast to `c_double`\n+    // error: cannot pass an `f32` to variadic function, cast to `c_double`\n }\n ```\n \n@@ -5000,7 +5027,7 @@ the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n //  E0174,\n //  E0182, // merged into E0229\n     E0183,\n-//  E0187, // can't infer the kind of the closure\n+//  E0187, // cannot infer the kind of the closure\n //  E0188, // can not cast an immutable reference to a mutable pointer\n //  E0189, // deprecated: can only cast a boxed pointer to a boxed object\n //  E0190, // deprecated: can only cast a &-pointer to an &-object\n@@ -5047,7 +5074,6 @@ the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n //  E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n     E0587, // type has conflicting packed and align representation hints\n-    E0588, // packed type cannot transitively contain a `[repr(align)]` type\n //  E0611, // merged into E0616\n //  E0612, // merged into E0609\n //  E0613, // Removed (merged with E0609)"}, {"sha": "bbc00147ee14eff21943d41dd838c0268c7df1cd", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -59,7 +59,7 @@ impl Module<'hir> {\n             fns        :   Vec::new(),\n             mods       :   Vec::new(),\n             typedefs   :   Vec::new(),\n-            opaque_tys :  Vec::new(),\n+            opaque_tys :   Vec::new(),\n             statics    :   Vec::new(),\n             constants  :   Vec::new(),\n             traits     :   Vec::new(),"}, {"sha": "414c3137376a95f2d45c1dc7c12090aa9508a2f1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -1241,6 +1241,7 @@ fn settings(root_path: &str, suffix: &str) -> String {\n         (\"go-to-only-result\", \"Directly go to item in search if there is only one result\",\n             false),\n         (\"line-numbers\", \"Show line numbers on code examples\", false),\n+        (\"disable-shortcuts\", \"Disable keyboard shortcuts\", false),\n     ];\n     format!(\n \"<h1 class='fqn'>\\"}, {"sha": "f0104c9156ded8b9ba93effd5bf223cf4c72acf8", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -79,6 +79,7 @@ function getSearchElement() {\n                      \"derive\",\n                      \"traitalias\"];\n \n+    var disableShortcuts = getCurrentValue(\"rustdoc-disable-shortcuts\") !== \"true\";\n     var search_input = getSearchInput();\n \n     // On the search screen, so you remain on the last tab you opened.\n@@ -294,7 +295,7 @@ function getSearchElement() {\n \n     function handleShortcut(ev) {\n         // Don't interfere with browser shortcuts\n-        if (ev.ctrlKey || ev.altKey || ev.metaKey) {\n+        if (ev.ctrlKey || ev.altKey || ev.metaKey || disableShortcuts === true) {\n             return;\n         }\n "}, {"sha": "6ce41420284e56c9d5ea8871b66b8f8a9072a018", "filename": "src/libstd/sys/wasi/thread.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -31,18 +31,18 @@ impl Thread {\n         let nanos = dur.as_nanos();\n         assert!(nanos <= u64::max_value() as u128);\n \n-        const CLOCK_ID: wasi::Userdata = 0x0123_45678;\n+        const USERDATA: wasi::Userdata = 0x0123_45678;\n \n         let clock = wasi::raw::__wasi_subscription_u_clock_t {\n-            identifier: CLOCK_ID,\n+            identifier: 0,\n             clock_id: wasi::CLOCK_MONOTONIC,\n             timeout: nanos as u64,\n             precision: 0,\n             flags: 0,\n         };\n \n         let in_ = [wasi::Subscription {\n-            userdata: 0,\n+            userdata: USERDATA,\n             type_: wasi::EVENTTYPE_CLOCK,\n             u: wasi::raw::__wasi_subscription_u { clock: clock },\n         }];\n@@ -53,7 +53,7 @@ impl Thread {\n         };\n         match (res, event) {\n             (Ok(1), wasi::Event {\n-                userdata: CLOCK_ID,\n+                userdata: USERDATA,\n                 error: 0,\n                 type_: wasi::EVENTTYPE_CLOCK,\n                 .."}, {"sha": "2ce0046ca276c1ab4286754afc9385e8b571538b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -86,13 +86,6 @@ macro_rules! maybe_recover_from_interpolated_ty_qpath {\n     }\n }\n \n-fn maybe_append(mut lhs: Vec<Attribute>, mut rhs: Option<Vec<Attribute>>) -> Vec<Attribute> {\n-    if let Some(ref mut rhs) = rhs {\n-        lhs.append(rhs);\n-    }\n-    lhs\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq)]\n enum PrevTokenKind {\n     DocComment,"}, {"sha": "73bd80e2a21f7b9e5a4fccbcd3ac13da53176a07", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -10,7 +10,6 @@ use crate::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem,\n use crate::ast::{Ty, TyKind, Generics, GenericBounds, TraitRef, EnumDef, VariantData, StructField};\n use crate::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, MethodSig, SelfKind, Param};\n use crate::parse::token;\n-use crate::parse::parser::maybe_append;\n use crate::tokenstream::{TokenTree, TokenStream};\n use crate::symbol::{kw, sym};\n use crate::source_map::{self, respan, Span};\n@@ -416,10 +415,17 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, Option<P<Item>>> {\n         let (ident, item, extra_attrs) = info;\n         let span = lo.to(self.prev_span);\n-        let attrs = maybe_append(attrs, extra_attrs);\n+        let attrs = Self::maybe_append(attrs, extra_attrs);\n         Ok(Some(self.mk_item(span, ident, item, vis, attrs)))\n     }\n \n+    fn maybe_append<T>(mut lhs: Vec<T>, mut rhs: Option<Vec<T>>) -> Vec<T> {\n+        if let Some(ref mut rhs) = rhs {\n+            lhs.append(rhs);\n+        }\n+        lhs\n+    }\n+\n     /// This is the fall-through for parsing items.\n     fn parse_macro_use_or_failure(\n         &mut self,"}, {"sha": "d29c31fafc2868232b9ced4cd2d913992e4dba06", "filename": "src/test/ui/asm/issue-51431.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,10 @@\n+// ignore-emscripten no asm! support\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n+        //~^ ERROR: invalid value for constraint in inline assembly\n+    }\n+}"}, {"sha": "132eea126d64250c074ef332cfa66b44e3512d6c", "filename": "src/test/ui/asm/issue-51431.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,8 @@\n+error[E0669]: invalid value for constraint in inline assembly\n+  --> $DIR/issue-51431.rs:7:32\n+   |\n+LL |         asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n+   |                                ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "311c48b5e48c5ef500347d7162574a1c58263e0b", "filename": "src/test/ui/associated-const/issue-63496.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,9 @@\n+trait A {\n+    const C: usize;\n+\n+    fn f() -> ([u8; A::C], [u8; A::C]);\n+    //~^ ERROR: type annotations needed: cannot resolve\n+    //~| ERROR: type annotations needed: cannot resolve\n+}\n+\n+fn main() {}"}, {"sha": "70bb12de1fb723a2487212ce5b6a24aed7d9a27d", "filename": "src/test/ui/associated-const/issue-63496.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,21 @@\n+error[E0283]: type annotations needed: cannot resolve `_: A`\n+  --> $DIR/issue-63496.rs:4:21\n+   |\n+LL |     const C: usize;\n+   |     --------------- required by `A::C`\n+LL | \n+LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n+   |                     ^^^^\n+\n+error[E0283]: type annotations needed: cannot resolve `_: A`\n+  --> $DIR/issue-63496.rs:4:33\n+   |\n+LL |     const C: usize;\n+   |     --------------- required by `A::C`\n+LL | \n+LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n+   |                                 ^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "4b5e2d59e38c999e6c89eed59fddcd429b92e13e", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -244,4 +244,5 @@ LL |     let _ = await bar()?;\n \n error: aborting due to 35 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0728.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "5b9adb253d968450ede33800bd85b3b46da05510", "filename": "src/test/ui/async-await/issues/issue-51719.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -8,3 +8,4 @@ LL |     let _gen = || foo().await;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0728`."}, {"sha": "f120bd119c540296f25ba3ae4fb1878d34567d62", "filename": "src/test/ui/async-await/issues/issue-51751.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -9,3 +9,4 @@ LL |     let finished = result.await;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0728`."}, {"sha": "538430290d299ba4c9681ff5ec7d25bffa4b81e8", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -40,4 +40,5 @@ LL |     F: Future\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0728.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "47b74b5574fea57e240acefd77849261fbf64adf", "filename": "src/test/ui/async-await/issues/issue-62009-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -8,3 +8,4 @@ LL |     (async || 2333)().await;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0728`."}, {"sha": "f826a86f089853d4ea27609aae7a8254efd2ecc0", "filename": "src/test/ui/async-await/issues/non-async-enclosing-span.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -9,3 +9,4 @@ LL |     let y = do_the_thing().await;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0728`."}, {"sha": "5cae0e76d1acbcfa263754ace0d2fc65729b411e", "filename": "src/test/ui/closures/issue-41366.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,13 @@\n+trait T<'x> {\n+    type V;\n+}\n+\n+impl<'g> T<'g> for u32 {\n+    type V = u16;\n+}\n+\n+fn main() {\n+    (&|_|()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n+    //~^ ERROR: type mismatch in closure arguments\n+    //~| ERROR: type mismatch resolving\n+}"}, {"sha": "91d26efbc4f35309af98332c449cfc6d7348bed1", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,22 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/issue-41366.rs:10:5\n+   |\n+LL |     (&|_|()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n+   |     ^^-----^\n+   |     | |\n+   |     | found signature of `fn(_) -> _`\n+   |     expected signature of `for<'x> fn(<u32 as T<'x>>::V) -> _`\n+   |\n+   = note: required for the cast to the object type `dyn for<'x> std::ops::Fn(<u32 as T<'x>>::V)`\n+\n+error[E0271]: type mismatch resolving `for<'x> <[closure@$DIR/issue-41366.rs:10:7: 10:12] as std::ops::FnOnce<(<u32 as T<'x>>::V,)>>::Output == ()`\n+  --> $DIR/issue-41366.rs:10:5\n+   |\n+LL |     (&|_|()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n+   |     ^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+   |\n+   = note: required for the cast to the object type `dyn for<'x> std::ops::Fn(<u32 as T<'x>>::V)`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "6ac5380a5aa23b0dcd7161a40741f9c639b29902", "filename": "src/test/ui/closures/issue-52437.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n+    //~^ ERROR: invalid label name `'static`\n+    //~| ERROR: type annotations needed\n+}"}, {"sha": "e76f942e9ba575d0e865f418a4cbfaedc16985d2", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,15 @@\n+error: invalid label name `'static`\n+  --> $DIR/issue-52437.rs:2:13\n+   |\n+LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n+   |             ^^^^^^^\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-52437.rs:2:30\n+   |\n+LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n+   |                              ^ consider giving this closure parameter a type\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "de0b66a35eb01151a0d6fac92c6b8f7a8d36f296", "filename": "src/test/ui/coherence/impl-foreign-for-foreign.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,17 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+\n+impl Remote for i32 {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+\n+fn main() {}"}, {"sha": "b03a75a77c3460708d2beb5644071ec48ba22632", "filename": "src/test/ui/coherence/impl-foreign-for-foreign.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl-foreign-for-foreign.rs:12:1\n+   |\n+LL | impl Remote for i32 {\n+   | ^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "5146263d9911423d513923d33a1c09d34dd6b4f1", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[foreign].rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,25 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+\n+impl Remote1<Rc<i32>> for i32 {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+impl Remote1<Rc<Local>> for f64 {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+impl<T> Remote1<Rc<T>> for f32 {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+\n+fn main() {}"}, {"sha": "bfaec790b20a66f90e2a37d42348fd3dd94bddca", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[foreign].stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,30 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl-foreign-for-foreign[foreign].rs:12:1\n+   |\n+LL | impl Remote1<Rc<i32>> for i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl-foreign-for-foreign[foreign].rs:16:1\n+   |\n+LL | impl Remote1<Rc<Local>> for f64 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl-foreign-for-foreign[foreign].rs:20:1\n+   |\n+LL | impl<T> Remote1<Rc<T>> for f32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "050769dcf4ce8809d965de97ae0e6526dfcbba82", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[local].rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Blocal%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Blocal%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Blocal%5D.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,16 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+// check-pass\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local<T>(Rc<T>);\n+\n+impl Remote1<Local<i32>> for i32 {}\n+impl<T> Remote1<Local<T>> for f32 {}\n+\n+fn main() {}"}, {"sha": "03b11edf98b416f1678950e2be4e3d9548adaa9c", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[foreign].rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,21 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+\n+impl Remote for Box<i32> {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+impl<T> Remote for Box<Rc<T>> {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+\n+fn main() {}"}, {"sha": "2ce4921cf938f44a18ebb141c94e610574f4273e", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[foreign].stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,21 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl-foreign-for-fundamental[foreign].rs:12:1\n+   |\n+LL | impl Remote for Box<i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl-foreign-for-fundamental[foreign].rs:16:1\n+   |\n+LL | impl<T> Remote for Box<Rc<T>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "ae03ce6a440dc7d380a84f3f0581a8e9cae67fbf", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[local].rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Blocal%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Blocal%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Blocal%5D.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,17 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+// check-pass\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+struct Local1<T>(Rc<T>);\n+\n+impl Remote for Box<Local> {}\n+impl<T> Remote for Box<Local1<T>> {}\n+\n+fn main() {}"}, {"sha": "c9dddeba18dc5a6f7e251b0cb16d14f260f93013", "filename": "src/test/ui/coherence/impl-foreign-for-local.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-local.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,15 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+// check-pass\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+\n+impl Remote for Local {}\n+\n+fn main() {}"}, {"sha": "06efb6c2ad75e4ae4dfaeb4796560865c2f9a815", "filename": "src/test/ui/coherence/impl-foreign[fundemental[foreign]]-for-foreign.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,26 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+struct Local1<T>(Rc<T>);\n+\n+impl Remote1<Box<String>> for i32 {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+impl Remote1<Box<Rc<i32>>> for f64 {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+impl<T> Remote1<Box<Rc<T>>> for f32 {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+\n+fn main() {}"}, {"sha": "bf2361a1718afe94f5a067f9ba09979fd93aea57", "filename": "src/test/ui/coherence/impl-foreign[fundemental[foreign]]-for-foreign.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,30 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:13:1\n+   |\n+LL | impl Remote1<Box<String>> for i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:17:1\n+   |\n+LL | impl Remote1<Box<Rc<i32>>> for f64 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:21:1\n+   |\n+LL | impl<T> Remote1<Box<Rc<T>>> for f32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "d47e0a36a565959f90a92a347e8c11eb4c7bfd2f", "filename": "src/test/ui/coherence/impl-foreign[fundemental[local]]-for-foreign.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,18 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+// check-pass\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+struct Local1<T>(Rc<T>);\n+\n+impl Remote1<Box<Local>> for i32 {}\n+impl Remote1<Box<Local1<i32>>> for f64 {}\n+impl<T> Remote1<Box<Local1<T>>> for f32 {}\n+\n+fn main() {}"}, {"sha": "db7a2ae8076a3aa8e7fea020214e93d89c35d7b6", "filename": "src/test/ui/coherence/impl[t]-foreign-for-foreign[t].rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,23 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+struct Local;\n+\n+impl Remote for Rc<Local> {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+\n+impl<T> Remote for Arc<T> {\n+    //~^ ERROR only traits defined in the current crate\n+    // | can be implemented for arbitrary types [E0117]\n+}\n+\n+fn main() {}"}, {"sha": "d7ffcaf76f9a2a9b56f95cc5b381b8a704ea42ae", "filename": "src/test/ui/coherence/impl[t]-foreign-for-foreign[t].stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,21 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl[t]-foreign-for-foreign[t].rs:13:1\n+   |\n+LL | impl Remote for Rc<Local> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/impl[t]-foreign-for-foreign[t].rs:18:1\n+   |\n+LL | impl<T> Remote for Arc<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "4cc19e1a526cabcb05a22e07104dfa925bd15ab6", "filename": "src/test/ui/coherence/impl[t]-foreign-for-fundamental[t].rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,17 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+\n+impl<T> Remote for Box<T> {\n+    //~^ ERROR type parameter `T` must be used as the type parameter for\n+    // | some local type (e.g., `MyStruct<T>`)\n+}\n+\n+fn main() {}"}, {"sha": "20ce11ef9759e183414d1be0f7a5bd890dc97ebd", "filename": "src/test/ui/coherence/impl[t]-foreign-for-fundamental[t].stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/impl[t]-foreign-for-fundamental[t].rs:12:1\n+   |\n+LL | impl<T> Remote for Box<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "914680f191ac9e10f6b608dab7f628f6b921f964", "filename": "src/test/ui/coherence/impl[t]-foreign[fundemental[local]]-for-foreign[t].rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundemental%5Blocal%5D%5D-for-foreign%5Bt%5D.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,17 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+// check-pass\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+struct Local1<S>(Rc<S>);\n+\n+impl<T> Remote1<Box<Local>> for Rc<T> {}\n+impl<S, T> Remote1<Box<Local1<S>>> for Rc<T> {}\n+\n+fn main() {}"}, {"sha": "1e84ff40c6227e97c3796190c1b398c76289609d", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-foreign[t].rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-foreign%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-foreign%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-foreign%5Bt%5D.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,17 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+// check-pass\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+struct Local1<S>(Rc<S>);\n+\n+impl<T> Remote1<Local> for Rc<T> {}\n+impl<T, S> Remote1<Local1<S>> for Rc<T> {}\n+\n+fn main() {}"}, {"sha": "ea6aa101d209c1e2647c1c069fb7f3b263d89046", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[foreign[t]].rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bforeign%5Bt%5D%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bforeign%5Bt%5D%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bforeign%5Bt%5D%5D.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -0,0 +1,19 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+// check-pass\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+use std::rc::Rc;\n+\n+struct Local;\n+struct Local1<S>(Rc<S>);\n+\n+impl<T> Remote1<Local> for Box<Rc<T>> {}\n+impl<T, S> Remote1<Local1<S>> for Box<Rc<T>> {}\n+impl<T> Remote1<Box<Local>> for Box<Rc<T>> {}\n+impl<T, S> Remote1<Box<Local1<S>>> for Box<Rc<T>> {}\n+\n+fn main() {}"}, {"sha": "15ee19755bffc504ab84086542be1f91912eb7f3", "filename": "src/test/ui/lint/unused_parens_json_suggestion.fixed", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -1,5 +1,4 @@\n-// compile-flags: --error-format pretty-json -Zunstable-options\n-// build-pass (FIXME(62277): could be check-pass?)\n+// compile-flags: --error-format json -Zunstable-options\n // run-rustfix\n \n // The output for humans should just highlight the whole span without showing\n@@ -8,13 +7,13 @@\n // stripping away any starting or ending parenthesis characters\u2014hence this\n // test of the JSON error format.\n \n-#![warn(unused_parens)]\n+#![deny(unused_parens)]\n #![allow(unreachable_code)]\n \n fn main() {\n     // We want to suggest the properly-balanced expression `1 / (2 + 3)`, not\n     // the malformed `1 / (2 + 3`\n-    let _a = 1 / (2 + 3);\n+    let _a = 1 / (2 + 3); //~ERROR unnecessary parentheses\n     f();\n }\n "}, {"sha": "d72df21e09ae264c8a253850b77f15b65401bdba", "filename": "src/test/ui/lint/unused_parens_json_suggestion.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -1,5 +1,4 @@\n-// compile-flags: --error-format pretty-json -Zunstable-options\n-// build-pass (FIXME(62277): could be check-pass?)\n+// compile-flags: --error-format json -Zunstable-options\n // run-rustfix\n \n // The output for humans should just highlight the whole span without showing\n@@ -8,13 +7,13 @@\n // stripping away any starting or ending parenthesis characters\u2014hence this\n // test of the JSON error format.\n \n-#![warn(unused_parens)]\n+#![deny(unused_parens)]\n #![allow(unreachable_code)]\n \n fn main() {\n     // We want to suggest the properly-balanced expression `1 / (2 + 3)`, not\n     // the malformed `1 / (2 + 3`\n-    let _a = (1 / (2 + 3));\n+    let _a = (1 / (2 + 3)); //~ERROR unnecessary parentheses\n     f();\n }\n "}, {"sha": "c503c100808dbee414637cf99e29ecb73d5a8e32", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 8, "deletions": 98, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -1,106 +1,16 @@\n-{\n-  \"message\": \"unnecessary parentheses around assigned value\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-      \"byte_start\": 654,\n-      \"byte_end\": 667,\n-      \"line_start\": 17,\n-      \"line_end\": 17,\n-      \"column_start\": 14,\n-      \"column_end\": 27,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"    let _a = (1 / (2 + 3));\",\n-          \"highlight_start\": 14,\n-          \"highlight_end\": 27\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"lint level defined here\",\n-      \"code\": null,\n-      \"level\": \"note\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-          \"byte_start\": 472,\n-          \"byte_end\": 485,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n-          \"column_start\": 9,\n-          \"column_end\": 22,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"#![warn(unused_parens)]\",\n-              \"highlight_start\": 9,\n-              \"highlight_end\": 22\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": null,\n-          \"suggestion_applicability\": null,\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    },\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-          \"byte_start\": 654,\n-          \"byte_end\": 667,\n-          \"line_start\": 17,\n-          \"line_end\": 17,\n-          \"column_start\": 14,\n-          \"column_end\": 27,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"    let _a = (1 / (2 + 3));\",\n-              \"highlight_start\": 14,\n-              \"highlight_end\": 27\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \"1 / (2 + 3)\",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around assigned value\n-  --> $DIR/unused_parens_json_suggestion.rs:17:14\n+{\"message\":\"unnecessary parentheses around assigned value\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":596,\"byte_end\":609,\"line_start\":16,\"line_end\":16,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\n+  --> $DIR/unused_parens_json_suggestion.rs:16:14\n    |\n LL |     let _a = (1 / (2 + 3));\n    |              ^^^^^^^^^^^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/unused_parens_json_suggestion.rs:11:9\n+  --> $DIR/unused_parens_json_suggestion.rs:10:9\n    |\n-LL | #![warn(unused_parens)]\n+LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n-\"\n-}\n+\"}\n+{\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error\n+\n+\"}"}, {"sha": "1d891d328dd5ab3123026c7a3c5e4154c9c9066d", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.fixed", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -1,5 +1,4 @@\n-// compile-flags: --error-format pretty-json -Zunstable-options\n-// build-pass\n+// compile-flags: --error-format json -Zunstable-options\n // run-rustfix\n \n // The output for humans should just highlight the whole span without showing\n@@ -8,14 +7,14 @@\n // stripping away any starting or ending parenthesis characters\u2014hence this\n // test of the JSON error format.\n \n-#![warn(unused_parens)]\n+#![deny(unused_parens)]\n #![allow(unreachable_code)]\n \n fn main() {\n \n     let _b = false;\n \n-    if _b {\n+    if _b { //~ ERROR unnecessary parentheses\n         println!(\"hello\");\n     }\n \n@@ -26,29 +25,29 @@ fn main() {\n fn f() -> bool {\n     let c = false;\n \n-    if c {\n+    if c { //~ ERROR unnecessary parentheses\n         println!(\"next\");\n     }\n \n-    if c {\n+    if c { //~ ERROR unnecessary parentheses\n         println!(\"prev\");\n     }\n \n     while false && true {\n-        if c {\n+        if c { //~ ERROR unnecessary parentheses\n             println!(\"norm\");\n         }\n \n     }\n \n-    while true && false {\n-        for _ in 0 .. 3 {\n+    while true && false { //~ ERROR unnecessary parentheses\n+        for _ in 0 .. 3 { //~ ERROR unnecessary parentheses\n             println!(\"e~\")\n         }\n     }\n \n-    for _ in 0 .. 3 {\n-        while true && false {\n+    for _ in 0 .. 3 { //~ ERROR unnecessary parentheses\n+        while true && false { //~ ERROR unnecessary parentheses\n             println!(\"e~\")\n         }\n     }"}, {"sha": "494cd1845063012aa507356732dab1e076c23786", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -1,5 +1,4 @@\n-// compile-flags: --error-format pretty-json -Zunstable-options\n-// build-pass\n+// compile-flags: --error-format json -Zunstable-options\n // run-rustfix\n \n // The output for humans should just highlight the whole span without showing\n@@ -8,14 +7,14 @@\n // stripping away any starting or ending parenthesis characters\u2014hence this\n // test of the JSON error format.\n \n-#![warn(unused_parens)]\n+#![deny(unused_parens)]\n #![allow(unreachable_code)]\n \n fn main() {\n \n     let _b = false;\n \n-    if (_b) {\n+    if (_b) { //~ ERROR unnecessary parentheses\n         println!(\"hello\");\n     }\n \n@@ -26,29 +25,29 @@ fn main() {\n fn f() -> bool {\n     let c = false;\n \n-    if(c) {\n+    if(c) { //~ ERROR unnecessary parentheses\n         println!(\"next\");\n     }\n \n-    if (c){\n+    if (c){ //~ ERROR unnecessary parentheses\n         println!(\"prev\");\n     }\n \n     while (false && true){\n-        if (c) {\n+        if (c) { //~ ERROR unnecessary parentheses\n             println!(\"norm\");\n         }\n \n     }\n \n-    while(true && false) {\n-        for _ in (0 .. 3){\n+    while(true && false) { //~ ERROR unnecessary parentheses\n+        for _ in (0 .. 3){ //~ ERROR unnecessary parentheses\n             println!(\"e~\")\n         }\n     }\n \n-    for _ in (0 .. 3) {\n-        while (true && false) {\n+    for _ in (0 .. 3) { //~ ERROR unnecessary parentheses\n+        while (true && false) { //~ ERROR unnecessary parentheses\n             println!(\"e~\")\n         }\n     }"}, {"sha": "873f105435e089ac7566f371def087695aaaab06", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.stderr", "status": "modified", "additions": 32, "deletions": 626, "changes": 658, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -1,666 +1,72 @@\n-{\n-  \"message\": \"unnecessary parentheses around `if` condition\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-      \"byte_start\": 521,\n-      \"byte_end\": 525,\n-      \"line_start\": 18,\n-      \"line_end\": 18,\n-      \"column_start\": 8,\n-      \"column_end\": 12,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"    if (_b) {\",\n-          \"highlight_start\": 8,\n-          \"highlight_end\": 12\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"lint level defined here\",\n-      \"code\": null,\n-      \"level\": \"note\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 435,\n-          \"byte_end\": 448,\n-          \"line_start\": 11,\n-          \"line_end\": 11,\n-          \"column_start\": 9,\n-          \"column_end\": 22,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"#![warn(unused_parens)]\",\n-              \"highlight_start\": 9,\n-              \"highlight_end\": 22\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": null,\n-          \"suggestion_applicability\": null,\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    },\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 521,\n-          \"byte_end\": 525,\n-          \"line_start\": 18,\n-          \"line_end\": 18,\n-          \"column_start\": 8,\n-          \"column_end\": 12,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"    if (_b) {\",\n-              \"highlight_start\": 8,\n-              \"highlight_end\": 12\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \"_b\",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:18:8\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":500,\"byte_end\":504,\"line_start\":17,\"line_end\":17,\"column_start\":8,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    if (_b) {\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:17:8\n    |\n LL |     if (_b) {\n    |        ^^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:11:9\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:10:9\n    |\n-LL | #![warn(unused_parens)]\n+LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n-\"\n-}\n-{\n-  \"message\": \"unnecessary parentheses around `if` condition\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-      \"byte_start\": 618,\n-      \"byte_end\": 621,\n-      \"line_start\": 29,\n-      \"line_end\": 29,\n-      \"column_start\": 7,\n-      \"column_end\": 10,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"    if(c) {\",\n-          \"highlight_start\": 7,\n-          \"highlight_end\": 10\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 618,\n-          \"byte_end\": 621,\n-          \"line_start\": 29,\n-          \"line_end\": 29,\n-          \"column_start\": 7,\n-          \"column_end\": 10,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"    if(c) {\",\n-              \"highlight_start\": 7,\n-              \"highlight_end\": 10\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \" c\",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:29:7\n+\"}\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":631,\"byte_end\":634,\"line_start\":28,\"line_end\":28,\"column_start\":7,\"column_end\":10,\"is_primary\":true,\"text\":[{\"text\":\"    if(c) {\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:28:7\n    |\n LL |     if(c) {\n    |       ^^^ help: remove these parentheses\n \n-\"\n-}\n-{\n-  \"message\": \"unnecessary parentheses around `if` condition\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-      \"byte_start\": 664,\n-      \"byte_end\": 667,\n-      \"line_start\": 33,\n-      \"line_end\": 33,\n-      \"column_start\": 8,\n-      \"column_end\": 11,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"    if (c){\",\n-          \"highlight_start\": 8,\n-          \"highlight_end\": 11\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 664,\n-          \"byte_end\": 667,\n-          \"line_start\": 33,\n-          \"line_end\": 33,\n-          \"column_start\": 8,\n-          \"column_end\": 11,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"    if (c){\",\n-              \"highlight_start\": 8,\n-              \"highlight_end\": 11\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \"c \",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:33:8\n+\"}\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":711,\"byte_end\":714,\"line_start\":32,\"line_end\":32,\"column_start\":8,\"column_end\":11,\"is_primary\":true,\"text\":[{\"text\":\"    if (c){\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:32:8\n    |\n LL |     if (c){\n    |        ^^^ help: remove these parentheses\n \n-\"\n-}\n-{\n-  \"message\": \"unnecessary parentheses around `while` condition\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-      \"byte_start\": 712,\n-      \"byte_end\": 727,\n-      \"line_start\": 37,\n-      \"line_end\": 37,\n-      \"column_start\": 11,\n-      \"column_end\": 26,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"    while (false && true){\",\n-          \"highlight_start\": 11,\n-          \"highlight_end\": 26\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 712,\n-          \"byte_end\": 727,\n-          \"line_start\": 37,\n-          \"line_end\": 37,\n-          \"column_start\": 11,\n-          \"column_end\": 26,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"    while (false && true){\",\n-              \"highlight_start\": 11,\n-              \"highlight_end\": 26\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \"false && true \",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:37:11\n+\"}\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":\"false && true \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"error: unnecessary parentheses around `while` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:36:11\n    |\n LL |     while (false && true){\n    |           ^^^^^^^^^^^^^^^ help: remove these parentheses\n \n-\"\n-}\n-{\n-  \"message\": \"unnecessary parentheses around `if` condition\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-      \"byte_start\": 740,\n-      \"byte_end\": 743,\n-      \"line_start\": 38,\n-      \"line_end\": 38,\n-      \"column_start\": 12,\n-      \"column_end\": 15,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"        if (c) {\",\n-          \"highlight_start\": 12,\n-          \"highlight_end\": 15\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 740,\n-          \"byte_end\": 743,\n-          \"line_start\": 38,\n-          \"line_end\": 38,\n-          \"column_start\": 12,\n-          \"column_end\": 15,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"        if (c) {\",\n-              \"highlight_start\": 12,\n-              \"highlight_end\": 15\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \"c\",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:38:12\n+\"}\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":821,\"byte_end\":824,\"line_start\":37,\"line_end\":37,\"column_start\":12,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"        if (c) {\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:37:12\n    |\n LL |         if (c) {\n    |            ^^^ help: remove these parentheses\n \n-\"\n-}\n-{\n-  \"message\": \"unnecessary parentheses around `while` condition\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-      \"byte_start\": 803,\n-      \"byte_end\": 818,\n-      \"line_start\": 44,\n-      \"line_end\": 44,\n-      \"column_start\": 10,\n-      \"column_end\": 25,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"    while(true && false) {\",\n-          \"highlight_start\": 10,\n-          \"highlight_end\": 25\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 803,\n-          \"byte_end\": 818,\n-          \"line_start\": 44,\n-          \"line_end\": 44,\n-          \"column_start\": 10,\n-          \"column_end\": 25,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"    while(true && false) {\",\n-              \"highlight_start\": 10,\n-              \"highlight_end\": 25\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \" true && false\",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:44:10\n+\"}\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":918,\"byte_end\":933,\"line_start\":43,\"line_end\":43,\"column_start\":10,\"column_end\":25,\"is_primary\":true,\"text\":[{\"text\":\"    while(true && false) {\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:43:10\n    |\n LL |     while(true && false) {\n    |          ^^^^^^^^^^^^^^^ help: remove these parentheses\n \n-\"\n-}\n-{\n-  \"message\": \"unnecessary parentheses around `for` head expression\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-      \"byte_start\": 838,\n-      \"byte_end\": 846,\n-      \"line_start\": 45,\n-      \"line_end\": 45,\n-      \"column_start\": 18,\n-      \"column_end\": 26,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"        for _ in (0 .. 3){\",\n-          \"highlight_start\": 18,\n-          \"highlight_end\": 26\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 838,\n-          \"byte_end\": 846,\n-          \"line_start\": 45,\n-          \"line_end\": 45,\n-          \"column_start\": 18,\n-          \"column_end\": 26,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"        for _ in (0 .. 3){\",\n-              \"highlight_start\": 18,\n-              \"highlight_end\": 26\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \"0 .. 3 \",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around `for` head expression\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:45:18\n+\"}\n+{\"message\":\"unnecessary parentheses around `for` head expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":987,\"byte_end\":995,\"line_start\":44,\"line_end\":44,\"column_start\":18,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        for _ in (0 .. 3){\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:44:18\n    |\n LL |         for _ in (0 .. 3){\n    |                  ^^^^^^^^ help: remove these parentheses\n \n-\"\n-}\n-{\n-  \"message\": \"unnecessary parentheses around `for` head expression\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-      \"byte_start\": 905,\n-      \"byte_end\": 913,\n-      \"line_start\": 50,\n-      \"line_end\": 50,\n-      \"column_start\": 14,\n-      \"column_end\": 22,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"    for _ in (0 .. 3) {\",\n-          \"highlight_start\": 14,\n-          \"highlight_end\": 22\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 905,\n-          \"byte_end\": 913,\n-          \"line_start\": 50,\n-          \"line_end\": 50,\n-          \"column_start\": 14,\n-          \"column_end\": 22,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"    for _ in (0 .. 3) {\",\n-              \"highlight_start\": 14,\n-              \"highlight_end\": 22\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \"0 .. 3\",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around `for` head expression\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:50:14\n+\"}\n+{\"message\":\"unnecessary parentheses around `for` head expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1088,\"byte_end\":1096,\"line_start\":49,\"line_end\":49,\"column_start\":14,\"column_end\":22,\"is_primary\":true,\"text\":[{\"text\":\"    for _ in (0 .. 3) {\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:49:14\n    |\n LL |     for _ in (0 .. 3) {\n    |              ^^^^^^^^ help: remove these parentheses\n \n-\"\n-}\n-{\n-  \"message\": \"unnecessary parentheses around `while` condition\",\n-  \"code\": {\n-    \"code\": \"unused_parens\",\n-    \"explanation\": null\n-  },\n-  \"level\": \"warning\",\n-  \"spans\": [\n-    {\n-      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-      \"byte_start\": 930,\n-      \"byte_end\": 945,\n-      \"line_start\": 51,\n-      \"line_end\": 51,\n-      \"column_start\": 15,\n-      \"column_end\": 30,\n-      \"is_primary\": true,\n-      \"text\": [\n-        {\n-          \"text\": \"        while (true && false) {\",\n-          \"highlight_start\": 15,\n-          \"highlight_end\": 30\n-        }\n-      ],\n-      \"label\": null,\n-      \"suggested_replacement\": null,\n-      \"suggestion_applicability\": null,\n-      \"expansion\": null\n-    }\n-  ],\n-  \"children\": [\n-    {\n-      \"message\": \"remove these parentheses\",\n-      \"code\": null,\n-      \"level\": \"help\",\n-      \"spans\": [\n-        {\n-          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n-          \"byte_start\": 930,\n-          \"byte_end\": 945,\n-          \"line_start\": 51,\n-          \"line_end\": 51,\n-          \"column_start\": 15,\n-          \"column_end\": 30,\n-          \"is_primary\": true,\n-          \"text\": [\n-            {\n-              \"text\": \"        while (true && false) {\",\n-              \"highlight_start\": 15,\n-              \"highlight_end\": 30\n-            }\n-          ],\n-          \"label\": null,\n-          \"suggested_replacement\": \"true && false\",\n-          \"suggestion_applicability\": \"MachineApplicable\",\n-          \"expansion\": null\n-        }\n-      ],\n-      \"children\": [],\n-      \"rendered\": null\n-    }\n-  ],\n-  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n-  --> $DIR/unused_parens_remove_json_suggestion.rs:51:15\n+\"}\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1147,\"byte_end\":1162,\"line_start\":50,\"line_end\":50,\"column_start\":15,\"column_end\":30,\"is_primary\":true,\"text\":[{\"text\":\"        while (true && false) {\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:50:15\n    |\n LL |         while (true && false) {\n    |               ^^^^^^^^^^^^^^^ help: remove these parentheses\n \n-\"\n-}\n+\"}\n+{\"message\":\"aborting due to 9 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 9 previous errors\n+\n+\"}"}, {"sha": "df001d6b5f2a4c0ed8b40bcd22914a506747f35b", "filename": "src/test/ui/repr/repr-packed-contains-align.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f466f52c1bf8f2e4454e31c683a88625ad4b4033/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.stderr?ref=f466f52c1bf8f2e4454e31c683a88625ad4b4033", "patch": "@@ -56,3 +56,4 @@ LL | | }\n \n error: aborting due to 8 previous errors\n \n+For more information about this error, try `rustc --explain E0588`."}]}