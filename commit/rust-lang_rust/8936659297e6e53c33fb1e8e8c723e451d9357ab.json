{"sha": "8936659297e6e53c33fb1e8e8c723e451d9357ab", "node_id": "C_kwDOAAsO6NoAKDg5MzY2NTkyOTdlNmU1M2MzM2ZiMWU4ZThjNzIzZTQ1MWQ5MzU3YWI", "commit": {"author": {"name": "J\u00fanior Bassani", "email": "junior.eduardo.bassani@gmail.com", "date": "2021-12-13T13:22:31Z"}, "committer": {"name": "J\u00fanior Bassani", "email": "junior.eduardo.bassani@gmail.com", "date": "2022-01-18T15:18:02Z"}, "message": "Replace iterator-based construction of collections by `Into<T>`", "tree": {"sha": "1e3c6f7715c10a3dc25165a4563edd7dca31d6dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e3c6f7715c10a3dc25165a4563edd7dca31d6dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8936659297e6e53c33fb1e8e8c723e451d9357ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEZBocjwquT4aBep/2JkJZezaJ/kkFAmHm2jQACgkQJkJZezaJ\n/kk8xw/9FzDDoHp8X7YMTeWNlO/bbcJFVUrhF4Iga39yEyP8bfuVfBScvU6MuU2O\nWN+9f4AWjsSux/WDqqUmg+If1CE80RyJW+MlLFCyVWqMUXTlakc9o3k360ygQHSj\nuYLCZT7eOCgTaF6pjkzC8xpRKes90pMF2UNI4Y0imyGSxLv2rCq5OuJZb1VLT2cj\nLTfBFJpSxP7h562oDcu2T12RFgpoflq0bBcBOvINcmIptrs7e4oe4dLACVL8tuuG\nu40OwY6f2Mn4IJmuZuTrDpkGTempXrdek4zjVHom+iaM5m5CMEXA6P3r8jqYxFtJ\nGoUxc0g1sTJ5Rj+jZ8jTJaIWzMhU7rHPShqRMaSrSrC3Kq6iHZX7lWO83NwMzd+r\nHLOJiIvYxaRlvPtynWP4AEtLKFDBSZ/QrC+NZN100aMILVnFBOnPANydkb73Ky5Y\nly+uQGBlgT2mMW5fne5HAprKuOm8W71GcIrfB4VzXT9hkLABzgG9AF8I154KMQ0F\n7tiz8PBANbPxM/QAt6/Cgpdny7VQYi02qMHoa+jiAklTkWyErkvseEOTDBijWg4t\nqj+9dqR0GTjlSzFN+F3cf6lDpRKhWSPgdLO6P8ycx+/gQnpyMkHGVlAySnOXp8wl\np2uamrzq2g1lHG+WovzQ57jlMEeBqP5XlxO1AjSln6mfFgX4JSU=\n=6qMt\n-----END PGP SIGNATURE-----", "payload": "tree 1e3c6f7715c10a3dc25165a4563edd7dca31d6dc\nparent 7bc7be860f99f4a40d45b0f74e2d01b02e072357\nauthor J\u00fanior Bassani <junior.eduardo.bassani@gmail.com> 1639401751 -0300\ncommitter J\u00fanior Bassani <junior.eduardo.bassani@gmail.com> 1642519082 -0300\n\nReplace iterator-based construction of collections by `Into<T>`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8936659297e6e53c33fb1e8e8c723e451d9357ab", "html_url": "https://github.com/rust-lang/rust/commit/8936659297e6e53c33fb1e8e8c723e451d9357ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8936659297e6e53c33fb1e8e8c723e451d9357ab/comments", "author": {"login": "juniorbassani", "id": 47573050, "node_id": "MDQ6VXNlcjQ3NTczMDUw", "avatar_url": "https://avatars.githubusercontent.com/u/47573050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juniorbassani", "html_url": "https://github.com/juniorbassani", "followers_url": "https://api.github.com/users/juniorbassani/followers", "following_url": "https://api.github.com/users/juniorbassani/following{/other_user}", "gists_url": "https://api.github.com/users/juniorbassani/gists{/gist_id}", "starred_url": "https://api.github.com/users/juniorbassani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juniorbassani/subscriptions", "organizations_url": "https://api.github.com/users/juniorbassani/orgs", "repos_url": "https://api.github.com/users/juniorbassani/repos", "events_url": "https://api.github.com/users/juniorbassani/events{/privacy}", "received_events_url": "https://api.github.com/users/juniorbassani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "juniorbassani", "id": 47573050, "node_id": "MDQ6VXNlcjQ3NTczMDUw", "avatar_url": "https://avatars.githubusercontent.com/u/47573050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juniorbassani", "html_url": "https://github.com/juniorbassani", "followers_url": "https://api.github.com/users/juniorbassani/followers", "following_url": "https://api.github.com/users/juniorbassani/following{/other_user}", "gists_url": "https://api.github.com/users/juniorbassani/gists{/gist_id}", "starred_url": "https://api.github.com/users/juniorbassani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juniorbassani/subscriptions", "organizations_url": "https://api.github.com/users/juniorbassani/orgs", "repos_url": "https://api.github.com/users/juniorbassani/repos", "events_url": "https://api.github.com/users/juniorbassani/events{/privacy}", "received_events_url": "https://api.github.com/users/juniorbassani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc7be860f99f4a40d45b0f74e2d01b02e072357", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc7be860f99f4a40d45b0f74e2d01b02e072357", "html_url": "https://github.com/rust-lang/rust/commit/7bc7be860f99f4a40d45b0f74e2d01b02e072357"}], "stats": {"total": 75, "additions": 35, "deletions": 40}, "files": [{"sha": "56a47001811990fe286cf3bdc45ae0470271a821", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8936659297e6e53c33fb1e8e8c723e451d9357ab/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8936659297e6e53c33fb1e8e8c723e451d9357ab/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=8936659297e6e53c33fb1e8e8c723e451d9357ab", "patch": "@@ -433,7 +433,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let mut heap = BinaryHeap::from(vec![1, 3]);\n+    /// let mut heap = BinaryHeap::from([1, 3]);\n     ///\n     /// assert_eq!(heap.pop(), Some(3));\n     /// assert_eq!(heap.pop(), Some(1));\n@@ -506,7 +506,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     /// use std::collections::BinaryHeap;\n     ///\n-    /// let mut heap = BinaryHeap::from(vec![1, 2, 4, 5, 7]);\n+    /// let mut heap = BinaryHeap::from([1, 2, 4, 5, 7]);\n     /// heap.push(6);\n     /// heap.push(3);\n     ///\n@@ -725,11 +725,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     /// use std::collections::BinaryHeap;\n     ///\n-    /// let v = vec![-10, 1, 2, 3, 3];\n-    /// let mut a = BinaryHeap::from(v);\n-    ///\n-    /// let v = vec![-20, 5, 43];\n-    /// let mut b = BinaryHeap::from(v);\n+    /// let mut a = BinaryHeap::from([-10, 1, 2, 3, 3]);\n+    /// let mut b = BinaryHeap::from([-20, 5, 43]);\n     ///\n     /// a.append(&mut b);\n     ///\n@@ -765,7 +762,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// #![feature(binary_heap_drain_sorted)]\n     /// use std::collections::BinaryHeap;\n     ///\n-    /// let mut heap = BinaryHeap::from(vec![1, 2, 3, 4, 5]);\n+    /// let mut heap = BinaryHeap::from([1, 2, 3, 4, 5]);\n     /// assert_eq!(heap.len(), 5);\n     ///\n     /// drop(heap.drain_sorted()); // removes all elements in heap order\n@@ -790,7 +787,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// #![feature(binary_heap_retain)]\n     /// use std::collections::BinaryHeap;\n     ///\n-    /// let mut heap = BinaryHeap::from(vec![-10, -5, 1, 2, 4, 13]);\n+    /// let mut heap = BinaryHeap::from([-10, -5, 1, 2, 4, 13]);\n     ///\n     /// heap.retain(|x| x % 2 == 0); // only keep even numbers\n     ///\n@@ -826,7 +823,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4]);\n+    /// let heap = BinaryHeap::from([1, 2, 3, 4]);\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order\n     /// for x in heap.iter() {\n@@ -848,9 +845,9 @@ impl<T> BinaryHeap<T> {\n     /// ```\n     /// #![feature(binary_heap_into_iter_sorted)]\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5]);\n+    /// let heap = BinaryHeap::from([1, 2, 3, 4, 5]);\n     ///\n-    /// assert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), vec![5, 4]);\n+    /// assert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), [5, 4]);\n     /// ```\n     #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n     pub fn into_iter_sorted(self) -> IntoIterSorted<T> {\n@@ -1086,7 +1083,7 @@ impl<T> BinaryHeap<T> {\n     /// use std::collections::BinaryHeap;\n     /// use std::io::{self, Write};\n     ///\n-    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5, 6, 7]);\n+    /// let heap = BinaryHeap::from([1, 2, 3, 4, 5, 6, 7]);\n     ///\n     /// io::sink().write(heap.as_slice()).unwrap();\n     /// ```\n@@ -1105,7 +1102,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5, 6, 7]);\n+    /// let heap = BinaryHeap::from([1, 2, 3, 4, 5, 6, 7]);\n     /// let vec = heap.into_vec();\n     ///\n     /// // Will print in some order\n@@ -1127,7 +1124,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from(vec![1, 3]);\n+    /// let heap = BinaryHeap::from([1, 3]);\n     ///\n     /// assert_eq!(heap.len(), 2);\n     /// ```\n@@ -1171,7 +1168,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let mut heap = BinaryHeap::from(vec![1, 3]);\n+    /// let mut heap = BinaryHeap::from([1, 3]);\n     ///\n     /// assert!(!heap.is_empty());\n     ///\n@@ -1195,7 +1192,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let mut heap = BinaryHeap::from(vec![1, 3]);\n+    /// let mut heap = BinaryHeap::from([1, 3]);\n     ///\n     /// assert!(!heap.is_empty());\n     ///\n@@ -1616,7 +1613,7 @@ impl<T> IntoIterator for BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4]);\n+    /// let heap = BinaryHeap::from([1, 2, 3, 4]);\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order\n     /// for x in heap.into_iter() {"}, {"sha": "cdb961d4cfbc5e697ebf49635231e5959aca84a3", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8936659297e6e53c33fb1e8e8c723e451d9357ab/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8936659297e6e53c33fb1e8e8c723e451d9357ab/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=8936659297e6e53c33fb1e8e8c723e451d9357ab", "patch": "@@ -1098,10 +1098,8 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n-    /// let mut map: BTreeMap<&str, i32> = [\"Alice\", \"Bob\", \"Carol\", \"Cheryl\"]\n-    ///     .iter()\n-    ///     .map(|&s| (s, 0))\n-    ///     .collect();\n+    /// let mut map: BTreeMap<&str, i32> =\n+    ///     [(\"Alice\", 0), (\"Bob\", 0), (\"Carol\", 0), (\"Cheryl\", 0)].into();\n     /// for (_, balance) in map.range_mut(\"B\"..\"Cheryl\") {\n     ///     *balance += 100;\n     /// }\n@@ -1135,7 +1133,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// let mut count: BTreeMap<&str, usize> = BTreeMap::new();\n     ///\n     /// // count the number of occurrences of letters in the vec\n-    /// for x in vec![\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"] {\n+    /// for x in [\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"] {\n     ///     *count.entry(x).or_insert(0) += 1;\n     /// }\n     ///\n@@ -1235,8 +1233,8 @@ impl<K, V> BTreeMap<K, V> {\n     /// let mut map: BTreeMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n     /// let evens: BTreeMap<_, _> = map.drain_filter(|k, _v| k % 2 == 0).collect();\n     /// let odds = map;\n-    /// assert_eq!(evens.keys().copied().collect::<Vec<_>>(), vec![0, 2, 4, 6]);\n-    /// assert_eq!(odds.keys().copied().collect::<Vec<_>>(), vec![1, 3, 5, 7]);\n+    /// assert_eq!(evens.keys().copied().collect::<Vec<_>>(), [0, 2, 4, 6]);\n+    /// assert_eq!(odds.keys().copied().collect::<Vec<_>>(), [1, 3, 5, 7]);\n     /// ```\n     #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, K, V, F>"}, {"sha": "a8a18d655855eb117585ae9b094b1084f1d9c53e", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8936659297e6e53c33fb1e8e8c723e451d9357ab/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8936659297e6e53c33fb1e8e8c723e451d9357ab/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=8936659297e6e53c33fb1e8e8c723e451d9357ab", "patch": "@@ -669,7 +669,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut buf: VecDeque<i32> = [1].into_iter().collect();\n+    /// let mut buf: VecDeque<i32> = [1].into();\n     /// buf.reserve_exact(10);\n     /// assert!(buf.capacity() >= 11);\n     /// ```\n@@ -692,7 +692,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut buf: VecDeque<i32> = [1].into_iter().collect();\n+    /// let mut buf: VecDeque<i32> = [1].into();\n     /// buf.reserve(10);\n     /// assert!(buf.capacity() >= 11);\n     /// ```\n@@ -1153,7 +1153,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let v: VecDeque<_> = [1, 2, 3].into_iter().collect();\n+    /// let v: VecDeque<_> = [1, 2, 3].into();\n     /// let range = v.range(2..).copied().collect::<VecDeque<_>>();\n     /// assert_eq!(range, [3]);\n     ///\n@@ -1188,17 +1188,17 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut v: VecDeque<_> = [1, 2, 3].into_iter().collect();\n+    /// let mut v: VecDeque<_> = [1, 2, 3].into();\n     /// for v in v.range_mut(2..) {\n     ///   *v *= 2;\n     /// }\n-    /// assert_eq!(v, vec![1, 2, 6]);\n+    /// assert_eq!(v, [1, 2, 6]);\n     ///\n     /// // A full range covers all contents\n     /// for v in v.range_mut(..) {\n     ///   *v *= 2;\n     /// }\n-    /// assert_eq!(v, vec![2, 4, 12]);\n+    /// assert_eq!(v, [2, 4, 12]);\n     /// ```\n     #[inline]\n     #[stable(feature = \"deque_range\", since = \"1.51.0\")]\n@@ -1235,7 +1235,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut v: VecDeque<_> = [1, 2, 3].into_iter().collect();\n+    /// let mut v: VecDeque<_> = [1, 2, 3].into();\n     /// let drained = v.drain(2..).collect::<VecDeque<_>>();\n     /// assert_eq!(drained, [3]);\n     /// assert_eq!(v, [1, 2]);\n@@ -2025,7 +2025,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut buf: VecDeque<_> = [1, 2, 3].into_iter().collect();\n+    /// let mut buf: VecDeque<_> = [1, 2, 3].into();\n     /// let buf2 = buf.split_off(1);\n     /// assert_eq!(buf, [1]);\n     /// assert_eq!(buf2, [2, 3]);\n@@ -2091,8 +2091,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut buf: VecDeque<_> = [1, 2].into_iter().collect();\n-    /// let mut buf2: VecDeque<_> = [3, 4].into_iter().collect();\n+    /// let mut buf: VecDeque<_> = [1, 2].into();\n+    /// let mut buf2: VecDeque<_> = [3, 4].into();\n     /// buf.append(&mut buf2);\n     /// assert_eq!(buf, [1, 2, 3, 4]);\n     /// assert_eq!(buf2, []);\n@@ -2547,7 +2547,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let deque: VecDeque<_> = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n+    /// let deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n     ///\n     /// assert_eq!(deque.binary_search(&13),  Ok(9));\n     /// assert_eq!(deque.binary_search(&4),   Err(7));\n@@ -2562,7 +2562,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut deque: VecDeque<_> = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n+    /// let mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n     /// let num = 42;\n     /// let idx = deque.binary_search(&num).unwrap_or_else(|x| x);\n     /// deque.insert(idx, num);\n@@ -2605,7 +2605,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let deque: VecDeque<_> = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n+    /// let deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n     ///\n     /// assert_eq!(deque.binary_search_by(|x| x.cmp(&13)),  Ok(9));\n     /// assert_eq!(deque.binary_search_by(|x| x.cmp(&4)),   Err(7));\n@@ -2658,7 +2658,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let deque: VecDeque<_> = vec![(0, 0), (2, 1), (4, 1), (5, 1),\n+    /// let deque: VecDeque<_> = [(0, 0), (2, 1), (4, 1), (5, 1),\n     ///          (3, 1), (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n     ///          (1, 21), (2, 34), (4, 55)].into();\n     ///\n@@ -2701,7 +2701,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let deque: VecDeque<_> = vec![1, 2, 3, 3, 5, 6, 7].into();\n+    /// let deque: VecDeque<_> = [1, 2, 3, 3, 5, 6, 7].into();\n     /// let i = deque.partition_point(|&x| x < 5);\n     ///\n     /// assert_eq!(i, 4);"}]}