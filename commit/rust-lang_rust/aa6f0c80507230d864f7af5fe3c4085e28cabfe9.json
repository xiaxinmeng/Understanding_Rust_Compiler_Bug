{"sha": "aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNmYwYzgwNTA3MjMwZDg2NGY3YWY1ZmUzYzQwODVlMjhjYWJmZTk=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-09-11T14:57:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-09-26T15:55:52Z"}, "message": "modify message for return time having multiple lifetimes", "tree": {"sha": "d18b3007124d55e8657f3d1404d27eb0a5e7b234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d18b3007124d55e8657f3d1404d27eb0a5e7b234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "html_url": "https://github.com/rust-lang/rust/commit/aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e58f528bb0664c33355ff6b0aa125b8a751fee2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58f528bb0664c33355ff6b0aa125b8a751fee2a", "html_url": "https://github.com/rust-lang/rust/commit/e58f528bb0664c33355ff6b0aa125b8a751fee2a"}], "stats": {"total": 69, "additions": 27, "deletions": 42}, "files": [{"sha": "e9866545f976a84578760a1ce39c16471a0e22ed", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             self.is_return_type_anon(scope_def_id_sub, bregion_sub, ty_fndecl_sub);\n \n         let span_label_var1 = if let Some(simple_name) = anon_arg_sup.pat.simple_name() {\n-            format!(\" flows from `{}`\", simple_name)\n+            format!(\" from `{}`\", simple_name)\n         } else {\n             format!(\"\")\n         };\n@@ -103,21 +103,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                              format!(\" with one lifetime\"),\n                              format!(\" into the other\")))\n                 } else {\n-                    (format!(\"these two types was declared with multiple lifetimes...\"),\n+                    (format!(\"these two types was declared with different lifetimes...\"),\n                      format!(\"...but data{} flows{} here\",\n                              span_label_var1,\n                              span_label_var2))\n                 };\n                 (ty_sup.span, ty_sub.span, main_label_1, span_label_1)\n             }\n-            (Some(ret_span1), Some(ret_span2)) => {\n-                (ret_span1,\n-                 ret_span2,\n-                 format!(\"the return type is declared with different lifetimes...\"),\n-                 format!(\"...but data{} flows{} here\",\n-                         format!(\" with one lifetime\"),\n-                         format!(\" into the other\")))\n-            }\n             \n             (Some(ret_span), _) => {\n                 (ty_sub.span,"}, {"sha": "f383a4dcf673e244d15d9fc8966ddbb0b49384d7", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr?ref=aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "patch": "@@ -1,27 +1,14 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:20\n    |\n+19 |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |                   ----                 -------\n+   |                   |\n+   |                   this parameter and the return type are declared\n+                  with different lifetimes...\n+20 | \n 21 |         if x > y { x } else { y }\n-   |                    ^\n-   |\n-note: ...the reference is valid for the lifetime 'a as defined on the method body at 19:5...\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:19:5\n-   |\n-19 | /     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-20 | |\n-21 | |         if x > y { x } else { y }\n-22 | |\n-23 | |     }\n-   | |_____^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the method body at 19:5\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:19:5\n-   |\n-19 | /     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-20 | |\n-21 | |         if x > y { x } else { y }\n-22 | |\n-23 | |     }\n-   | |_____^\n+   |                    ^ ...but data flows `x` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "27a674e5bb7e856f4d16c6c328746d79c1deb096", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "patch": "@@ -1,11 +1,14 @@\n-error[E0621]: explicit lifetime required in the type of `self`\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:18:5\n    |\n 16 |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n-   |              ----- consider changing the type of `self` to `&'a Foo`\n+   |                        -------     ----\n+   |                        |\n+   |                        this parameter and the return type are declared\n+                  with different lifetimes...\n 17 | \n 18 |     x\n-   |     ^ lifetime `'a` required\n+   |     ^ ...but data flows from `x` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "8f957d1b009d0430c84fe7bc063ce18a50256791", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "patch": "@@ -1,11 +1,14 @@\n-error[E0621]: explicit lifetime required in the type of `self`\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:30\n    |\n 16 |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n-   |                ----- consider changing the type of `self` to `&'a Foo`\n+   |                -----                 -------\n+   |                |\n+   |                this parameter and the return type are declared\n+                  with different lifetimes...\n 17 | \n 18 |         if true { x } else { self }\n-   |                              ^^^^ lifetime `'a` required\n+   |                              ^^^^ ...but data flows from `self` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "1ea2a4ff8ad4d12cb9753d4ea8c704249a9dfccd", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr?ref=aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "patch": "@@ -1,11 +1,11 @@\n-error[E0621]: explicit lifetime required in the type of `self`\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:17:5\n    |\n 16 |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |                        ----     ----\n    |                        |\n-   |                        this parameter and the return type are\n-                            declared with different lifetimes...\n+   |                        this parameter and the return type are declared\n+                  with different lifetimes...\n 17 |     x\n    |     ^ ...but data from `x` is returned here\n "}, {"sha": "316b76c64607b9deee2a532a7dfdc3fcaa5df419", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa6f0c80507230d864f7af5fe3c4085e28cabfe9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr?ref=aa6f0c80507230d864f7af5fe3c4085e28cabfe9", "patch": "@@ -4,8 +4,8 @@ error[E0623]: lifetime mismatch\n 16 |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                          ----     ----\n    |                          |\n-   |                          this parameter and the return type are\n-                            declared with different lifetimes...\n+   |                          this parameter and the return type are declared\n+                  with different lifetimes...\n 17 |         if true { x } else { self }\n    |                   ^ ...but data from `x` is returned here\n "}]}