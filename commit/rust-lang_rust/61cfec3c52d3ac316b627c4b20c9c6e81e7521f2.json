{"sha": "61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxY2ZlYzNjNTJkM2FjMzE2YjYyN2M0YjIwYzljNmU4MWU3NTIxZjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-28T01:25:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-28T19:28:16Z"}, "message": "librustc: Parse `extern \"C\" { ... }`. r=brson", "tree": {"sha": "cb814d1c1039b02d6baa62727eb91ce0911aa57d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb814d1c1039b02d6baa62727eb91ce0911aa57d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "html_url": "https://github.com/rust-lang/rust/commit/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2d6d955f45682399bce2a270e1ffaf2908fe0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d6d955f45682399bce2a270e1ffaf2908fe0b0", "html_url": "https://github.com/rust-lang/rust/commit/d2d6d955f45682399bce2a270e1ffaf2908fe0b0"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "3e0016ee40170e8f2bf7399fe3815b9f22ec8a86", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "patch": "@@ -75,6 +75,7 @@ fn fold_foreign_mod(cx: ctxt, nm: ast::foreign_mod,\n                                               |a| filter_view_item(cx, *a));\n     return {\n         sort: nm.sort,\n+        abi: nm.abi,\n         view_items: vec::map(filtered_view_items, |x| fld.fold_view_item(*x)),\n         items: filtered_items\n     };"}, {"sha": "c277aee27dee373accd9b7e8cf2418928a66f560", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "patch": "@@ -1861,6 +1861,7 @@ impl foreign_abi : cmp::Eq {\n #[auto_deserialize]\n type foreign_mod =\n     {sort: foreign_mod_sort,\n+     abi: ident,\n      view_items: ~[@view_item],\n      items: ~[@foreign_item]};\n "}, {"sha": "dc7a7feff14e0583a0cefd978e265b7fc5aa6a4a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "patch": "@@ -546,8 +546,9 @@ fn noop_fold_mod(m: _mod, fld: ast_fold) -> _mod {\n \n fn noop_fold_foreign_mod(nm: foreign_mod, fld: ast_fold) -> foreign_mod {\n     return {sort: nm.sort,\n-         view_items: vec::map(nm.view_items, |x| fld.fold_view_item(*x)),\n-         items: vec::map(nm.items, |x| fld.fold_foreign_item(*x))}\n+            abi: nm.abi,\n+            view_items: vec::map(nm.view_items, |x| fld.fold_view_item(*x)),\n+            items: vec::map(nm.items, |x| fld.fold_foreign_item(*x))}\n }\n \n fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {"}, {"sha": "e4d77e7da095f51902173c384a6b6b523a46c642", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "patch": "@@ -3043,8 +3043,9 @@ impl Parser {\n     }\n \n     fn parse_foreign_mod_items(sort: ast::foreign_mod_sort,\n-                               +first_item_attrs: ~[attribute]) ->\n-        foreign_mod {\n+                               +abi: ast::ident,\n+                               +first_item_attrs: ~[attribute])\n+                            -> foreign_mod {\n         // Shouldn't be any view items since we've already parsed an item attr\n         let {attrs_remaining, view_items, items: _, foreign_items} =\n             self.parse_items_and_view_items(first_item_attrs,\n@@ -3058,8 +3059,12 @@ impl Parser {\n             initial_attrs = ~[];\n             items.push(self.parse_foreign_item(attrs));\n         }\n-        return {sort: sort, view_items: view_items,\n-            items: items};\n+        return {\n+            sort: sort,\n+            abi: move abi,\n+            view_items: view_items,\n+            items: items\n+        };\n     }\n \n     fn parse_item_foreign_mod(lo: BytePos,\n@@ -3068,6 +3073,18 @@ impl Parser {\n                               items_allowed: bool)\n                            -> item_or_view_item {\n \n+        // Parse the ABI.\n+        let abi_opt;\n+        match self.token {\n+            token::LIT_STR(copy found_abi) => {\n+                self.bump();\n+                abi_opt = Some(found_abi);\n+            }\n+            _ => {\n+                abi_opt = None;\n+            }\n+        }\n+\n         let mut must_be_named_mod = false;\n         if self.is_keyword(~\"mod\") {\n             must_be_named_mod = true;\n@@ -3096,16 +3113,33 @@ impl Parser {\n \n         // extern mod { ... }\n         if items_allowed && self.eat(token::LBRACE) {\n+            let abi;\n+            match move abi_opt {\n+                Some(move found_abi) => abi = move found_abi,\n+                None => abi = special_idents::c_abi,\n+            }\n+\n             let extra_attrs = self.parse_inner_attrs_and_next();\n-            let m = self.parse_foreign_mod_items(sort, extra_attrs.next);\n+            let m = self.parse_foreign_mod_items(sort,\n+                                                 move abi,\n+                                                 extra_attrs.next);\n             self.expect(token::RBRACE);\n+\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident,\n                                           item_foreign_mod(m), visibility,\n                                           maybe_append(attrs,\n                                                        Some(extra_attrs.\n                                                             inner))));\n         }\n \n+        match abi_opt {\n+            None => {}  // OK.\n+            Some(_) => {\n+                self.span_err(copy self.span, ~\"an ABI may not be specified \\\n+                                                here\");\n+            }\n+        }\n+\n         // extern mod foo;\n         let metadata = self.parse_optional_meta();\n         self.expect(token::SEMI);"}, {"sha": "7b15f00d761973fba8eee84d47717e68495afd6a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "patch": "@@ -322,6 +322,7 @@ mod special_idents {\n     const intrinsic : ident = ident { repr: 32u };\n     const clownshoes_foreign_mod: ident = ident { repr: 33 };\n     const unnamed_field: ident = ident { repr: 34 };\n+    const c_abi: ident = ident { repr: 35 };\n }\n \n struct ident_interner {\n@@ -368,7 +369,8 @@ fn mk_ident_interner() -> @ident_interner {\n                     @~\"str\", @~\"TyVisitor\", @~\"arg\", @~\"descrim\",\n                     @~\"__rust_abi\", @~\"__rust_stack_shim\", @~\"TyDesc\",\n                     @~\"dtor\", @~\"main\", @~\"<opaque>\", @~\"blk\", @~\"static\",\n-                    @~\"intrinsic\", @~\"__foreign_mod__\"\n+                    @~\"intrinsic\", @~\"__foreign_mod__\", @~\"__field__\",\n+                    @~\"C\"\n                 ];\n \n                 let rv = @ident_interner {"}, {"sha": "f525436cc3e0e256630a8557c653a77cdf77b289", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "patch": "@@ -485,6 +485,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n       }\n       ast::item_foreign_mod(nmod) => {\n         head(s, visibility_qualified(item.vis, ~\"extern\"));\n+        print_string(s, *s.intr.get(nmod.abi));\n         match nmod.sort {\n             ast::named => {\n                 word_nbsp(s, ~\"mod\");"}, {"sha": "54befe77360ced403cc1a16bc6214a01ecaa56be", "filename": "src/test/run-pass/extern-mod-abi.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Ftest%2Frun-pass%2Fextern-mod-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cfec3c52d3ac316b627c4b20c9c6e81e7521f2/src%2Ftest%2Frun-pass%2Fextern-mod-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-abi.rs?ref=61cfec3c52d3ac316b627c4b20c9c6e81e7521f2", "patch": "@@ -0,0 +1,6 @@\n+extern \"C\" {\n+    fn pow(x: f64, y: f64) -> f64;\n+}\n+\n+fn main() {}\n+"}]}