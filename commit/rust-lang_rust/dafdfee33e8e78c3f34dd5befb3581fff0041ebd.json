{"sha": "dafdfee33e8e78c3f34dd5befb3581fff0041ebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZmRmZWUzM2U4ZTc4YzNmMzRkZDViZWZiMzU4MWZmZjAwNDFlYmQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-12T16:57:48Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-26T23:15:19Z"}, "message": "Inline RawMutableSpace", "tree": {"sha": "fd4c081af52b696c9cdb2918fd8025497599f23b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd4c081af52b696c9cdb2918fd8025497599f23b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dafdfee33e8e78c3f34dd5befb3581fff0041ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dafdfee33e8e78c3f34dd5befb3581fff0041ebd", "html_url": "https://github.com/rust-lang/rust/commit/dafdfee33e8e78c3f34dd5befb3581fff0041ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dafdfee33e8e78c3f34dd5befb3581fff0041ebd/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3307929a849592d8ea36b10f92192e31867f76e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3307929a849592d8ea36b10f92192e31867f76e3", "html_url": "https://github.com/rust-lang/rust/commit/3307929a849592d8ea36b10f92192e31867f76e3"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "f232d4ca69ec8cb25f7ce18326ae22606371ace7", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dafdfee33e8e78c3f34dd5befb3581fff0041ebd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dafdfee33e8e78c3f34dd5befb3581fff0041ebd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=dafdfee33e8e78c3f34dd5befb3581fff0041ebd", "patch": "@@ -36,9 +36,6 @@ pub struct AsyncSpace(pub hir::IsAsync);\n /// Similar to VisSpace, but used for mutability\n #[derive(Copy, Clone)]\n pub struct MutableSpace(pub clean::Mutability);\n-/// Similar to VisSpace, but used for mutability\n-#[derive(Copy, Clone)]\n-pub struct RawMutableSpace(pub clean::Mutability);\n /// Wrapper struct for emitting type parameter bounds.\n pub struct GenericBounds<'a>(pub &'a [clean::GenericBound]);\n /// Wrapper struct for emitting a comma-separated list of items\n@@ -604,19 +601,22 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n         clean::Never => primitive_link(f, PrimitiveType::Never, \"!\"),\n         clean::CVarArgs => primitive_link(f, PrimitiveType::CVarArgs, \"...\"),\n         clean::RawPointer(m, ref t) => {\n+            let m = match m {\n+                clean::Immutable => \"const\",\n+                clean::Mutable => \"mut\",\n+            };\n             match **t {\n                 clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {\n                     if f.alternate() {\n                         primitive_link(f, clean::PrimitiveType::RawPointer,\n-                                       &format!(\"*{}{:#}\", RawMutableSpace(m), t))\n+                                       &format!(\"*{} {:#}\", m, t))\n                     } else {\n                         primitive_link(f, clean::PrimitiveType::RawPointer,\n-                                       &format!(\"*{}{}\", RawMutableSpace(m), t))\n+                                       &format!(\"*{} {}\", m, t))\n                     }\n                 }\n                 _ => {\n-                    primitive_link(f, clean::PrimitiveType::RawPointer,\n-                                   &format!(\"*{}\", RawMutableSpace(m)))?;\n+                    primitive_link(f, clean::PrimitiveType::RawPointer, &format!(\"*{} \", m))?;\n                     fmt::Display::fmt(t, f)\n                 }\n             }\n@@ -1044,15 +1044,6 @@ impl fmt::Display for MutableSpace {\n     }\n }\n \n-impl fmt::Display for RawMutableSpace {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {\n-            RawMutableSpace(clean::Immutable) => write!(f, \"const \"),\n-            RawMutableSpace(clean::Mutable) => write!(f, \"mut \"),\n-        }\n-    }\n-}\n-\n impl fmt::Display for AbiSpace {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let quot = if f.alternate() { \"\\\"\" } else { \"&quot;\" };"}]}