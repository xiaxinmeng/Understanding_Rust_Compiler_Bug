{"sha": "95dc89f0124b85e289024c9ff96ae2e6f9f2b249", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZGM4OWYwMTI0Yjg1ZTI4OTAyNGM5ZmY5NmFlMmU2ZjlmMmIyNDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-19T01:33:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-19T01:34:06Z"}, "message": "rustc: Make iter_structural_ty_full() generic-safe wrt tags", "tree": {"sha": "b9f3214a7579e343e840852a77874ca7a0475483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f3214a7579e343e840852a77874ca7a0475483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95dc89f0124b85e289024c9ff96ae2e6f9f2b249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95dc89f0124b85e289024c9ff96ae2e6f9f2b249", "html_url": "https://github.com/rust-lang/rust/commit/95dc89f0124b85e289024c9ff96ae2e6f9f2b249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95dc89f0124b85e289024c9ff96ae2e6f9f2b249/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7972d34ed489f54e14972c176c2d335ed4f26c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7972d34ed489f54e14972c176c2d335ed4f26c2", "html_url": "https://github.com/rust-lang/rust/commit/b7972d34ed489f54e14972c176c2d335ed4f26c2"}], "stats": {"total": 38, "additions": 10, "deletions": 28}, "files": [{"sha": "e0d381401e2c042d2b7cf40900c75e64c141aea1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/95dc89f0124b85e289024c9ff96ae2e6f9f2b249/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc89f0124b85e289024c9ff96ae2e6f9f2b249/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=95dc89f0124b85e289024c9ff96ae2e6f9f2b249", "patch": "@@ -1738,19 +1738,6 @@ fn variant_types(@crate_ctxt cx, &ast.variant v) -> vec[@ty.t] {\n     ret tys;\n }\n \n-fn type_of_variant(@crate_ctxt cx,\n-                   &ast.variant v,\n-                   vec[ast.ty_param] ty_params,\n-                   vec[@ty.t] ty_param_substs) -> TypeRef {\n-    let vec[TypeRef] lltys = vec();\n-    auto tys = variant_types(cx, v);\n-    for (@ty.t typ in tys) {\n-        auto typ2 = ty.substitute_ty_params(ty_params, ty_param_substs, typ);\n-        lltys += vec(type_of(cx, typ2));\n-    }\n-    ret T_struct(lltys);\n-}\n-\n // Returns the type parameters of a tag.\n fn tag_ty_params(@crate_ctxt cx, ast.def_id id) -> vec[ast.ty_param] {\n     check (cx.items.contains_key(id));\n@@ -1923,27 +1910,22 @@ fn iter_structural_ty_full(@block_ctxt cx,\n \n                 if (_vec.len[ast.variant_arg](variant.args) > 0u) {\n                     // N-ary variant.\n-                    auto llvarty = type_of_variant(bcx.fcx.ccx, variants.(i),\n-                                                   ty_params, tps);\n-\n                     auto fn_ty = ty.ann_to_type(variants.(i).ann);\n                     alt (fn_ty.struct) {\n                         case (ty.ty_fn(_, ?args, _)) {\n-                            auto llvarp_a = variant_cx.build.\n-                                TruncOrBitCast(llunion_a_ptr, T_ptr(llvarty));\n-\n-                            auto llvarp_b = variant_cx.build.\n-                                TruncOrBitCast(llunion_b_ptr, T_ptr(llvarty));\n-\n-                            auto j = 0u;\n+                            auto j = 0;\n                             for (ty.arg a in args) {\n                                 auto v = vec(C_int(0), C_int(j as int));\n \n-                                auto llfldp_a =\n-                                    variant_cx.build.GEP(llvarp_a, v);\n+                                auto rslt = GEP_tag(variant_cx, llunion_a_ptr,\n+                                    tid, variants.(i).id, tps, j);\n+                                auto llfldp_a = rslt.val;\n+                                variant_cx = rslt.bcx;\n \n-                                auto llfldp_b =\n-                                    variant_cx.build.GEP(llvarp_b, v);\n+                                rslt = GEP_tag(variant_cx, llunion_b_ptr, tid,\n+                                    variants.(i).id, tps, j);\n+                                auto llfldp_b = rslt.val;\n+                                variant_cx = rslt.bcx;\n \n                                 auto ty_subst = ty.substitute_ty_params(\n                                     ty_params, tps, a.ty);\n@@ -1961,7 +1943,7 @@ fn iter_structural_ty_full(@block_ctxt cx,\n                                 auto res = f(variant_cx,\n                                              llfld_a, llfld_b, ty_subst);\n                                 variant_cx = res.bcx;\n-                                j += 1u;\n+                                j += 1;\n                             }\n                         }\n                         case (_) { fail; }"}]}