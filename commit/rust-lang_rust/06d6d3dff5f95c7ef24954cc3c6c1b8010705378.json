{"sha": "06d6d3dff5f95c7ef24954cc3c6c1b8010705378", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZDZkM2RmZjVmOTVjN2VmMjQ5NTRjYzNjNmMxYjgwMTA3MDUzNzg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-17T22:26:10Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-19T12:18:25Z"}, "message": "impl_for_type -> PrimitiveType::impls", "tree": {"sha": "a81035e4fc2b66a279bcfddfe3052eca67e86992", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a81035e4fc2b66a279bcfddfe3052eca67e86992"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d6d3dff5f95c7ef24954cc3c6c1b8010705378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d6d3dff5f95c7ef24954cc3c6c1b8010705378", "html_url": "https://github.com/rust-lang/rust/commit/06d6d3dff5f95c7ef24954cc3c6c1b8010705378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d6d3dff5f95c7ef24954cc3c6c1b8010705378/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ddd8b233c95853dd281493f4c646520354461b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddd8b233c95853dd281493f4c646520354461b5", "html_url": "https://github.com/rust-lang/rust/commit/3ddd8b233c95853dd281493f4c646520354461b5"}], "stats": {"total": 116, "additions": 59, "deletions": 57}, "files": [{"sha": "5b9f4830261e288f17176996a8398d011431836c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/06d6d3dff5f95c7ef24954cc3c6c1b8010705378/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d6d3dff5f95c7ef24954cc3c6c1b8010705378/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=06d6d3dff5f95c7ef24954cc3c6c1b8010705378", "patch": "@@ -19,12 +19,14 @@ use rustc_hir::lang_items;\n use rustc_hir::Mutability;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::stability;\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, FileName};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n+use smallvec::SmallVec;\n \n use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n@@ -1264,6 +1266,61 @@ impl PrimitiveType {\n         }\n     }\n \n+    pub fn impls(&self, tcx: TyCtxt<'_>) -> SmallVec<[DefId; 4]> {\n+        use self::PrimitiveType::*;\n+\n+        let both =\n+            |a: Option<DefId>, b: Option<DefId>| -> SmallVec<_> { a.into_iter().chain(b).collect() };\n+\n+        let lang_items = tcx.lang_items();\n+        let primary_impl = match self {\n+            Isize => lang_items.isize_impl(),\n+            I8 => lang_items.i8_impl(),\n+            I16 => lang_items.i16_impl(),\n+            I32 => lang_items.i32_impl(),\n+            I64 => lang_items.i64_impl(),\n+            I128 => lang_items.i128_impl(),\n+            Usize => lang_items.usize_impl(),\n+            U8 => lang_items.u8_impl(),\n+            U16 => lang_items.u16_impl(),\n+            U32 => lang_items.u32_impl(),\n+            U64 => lang_items.u64_impl(),\n+            U128 => lang_items.u128_impl(),\n+            F32 => return both(lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n+            F64 => return both(lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n+            Char => lang_items.char_impl(),\n+            Bool => lang_items.bool_impl(),\n+            Str => return both(lang_items.str_impl(), lang_items.str_alloc_impl()),\n+            Slice => {\n+                return lang_items\n+                    .slice_impl()\n+                    .into_iter()\n+                    .chain(lang_items.slice_u8_impl())\n+                    .chain(lang_items.slice_alloc_impl())\n+                    .chain(lang_items.slice_u8_alloc_impl())\n+                    .collect();\n+            }\n+            Array => lang_items.array_impl(),\n+            Tuple => None,\n+            Unit => None,\n+            RawPointer => {\n+                return lang_items\n+                    .const_ptr_impl()\n+                    .into_iter()\n+                    .chain(lang_items.mut_ptr_impl())\n+                    .chain(lang_items.const_slice_ptr_impl())\n+                    .chain(lang_items.mut_slice_ptr_impl())\n+                    .collect();\n+            }\n+            Reference => None,\n+            Fn => None,\n+            Never => None,\n+        };\n+\n+        primary_impl.into_iter().collect()\n+    }\n+\n+\n     pub fn to_url_str(&self) -> &'static str {\n         self.as_str()\n     }"}, {"sha": "b80ac0384fddbe2dad614aa8acdac1ddaa48a6ed", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 57, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/06d6d3dff5f95c7ef24954cc3c6c1b8010705378/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d6d3dff5f95c7ef24954cc3c6c1b8010705378/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=06d6d3dff5f95c7ef24954cc3c6c1b8010705378", "patch": "@@ -15,9 +15,8 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::mir::interpret::{sign_extend, ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, Ty};\n use rustc_span::symbol::{kw, sym, Symbol};\n-use smallvec::SmallVec;\n use std::mem;\n \n pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n@@ -351,60 +350,6 @@ pub fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n     s\n }\n \n-pub fn impl_for_type(tcx: TyCtxt<'_>, primitive: PrimitiveType) -> SmallVec<[DefId; 4]> {\n-    use self::PrimitiveType::*;\n-\n-    let both =\n-        |a: Option<DefId>, b: Option<DefId>| -> SmallVec<_> { a.into_iter().chain(b).collect() };\n-\n-    let lang_items = tcx.lang_items();\n-    let primary_impl = match primitive {\n-        Isize => lang_items.isize_impl(),\n-        I8 => lang_items.i8_impl(),\n-        I16 => lang_items.i16_impl(),\n-        I32 => lang_items.i32_impl(),\n-        I64 => lang_items.i64_impl(),\n-        I128 => lang_items.i128_impl(),\n-        Usize => lang_items.usize_impl(),\n-        U8 => lang_items.u8_impl(),\n-        U16 => lang_items.u16_impl(),\n-        U32 => lang_items.u32_impl(),\n-        U64 => lang_items.u64_impl(),\n-        U128 => lang_items.u128_impl(),\n-        F32 => return both(lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n-        F64 => return both(lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n-        Char => lang_items.char_impl(),\n-        Bool => lang_items.bool_impl(),\n-        Str => return both(lang_items.str_impl(), lang_items.str_alloc_impl()),\n-        Slice => {\n-            return lang_items\n-                .slice_impl()\n-                .into_iter()\n-                .chain(lang_items.slice_u8_impl())\n-                .chain(lang_items.slice_alloc_impl())\n-                .chain(lang_items.slice_u8_alloc_impl())\n-                .collect();\n-        }\n-        Array => lang_items.array_impl(),\n-        Tuple => None,\n-        Unit => None,\n-        RawPointer => {\n-            return lang_items\n-                .const_ptr_impl()\n-                .into_iter()\n-                .chain(lang_items.mut_ptr_impl())\n-                .chain(lang_items.const_slice_ptr_impl())\n-                .chain(lang_items.mut_slice_ptr_impl())\n-                .collect();\n-        }\n-        Reference => None,\n-        Fn => None,\n-        Never => None,\n-    };\n-\n-    primary_impl.into_iter().collect()\n-}\n-\n pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n     let tcx = cx.tcx;\n \n@@ -424,7 +369,7 @@ pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut V\n                 None => continue,\n             },\n         };\n-        for did in impl_for_type(tcx, primitive) {\n+        for did in primitive.impls(tcx) {\n             if !did.is_local() {\n                 inline::build_impl(cx, did, None, ret);\n             }"}]}