{"sha": "bde9cab66ec04b185679a39ded69d0ab857aec33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZTljYWI2NmVjMDRiMTg1Njc5YTM5ZGVkNjlkMGFiODU3YWVjMzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-23T18:01:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-23T18:01:31Z"}, "message": "remove references", "tree": {"sha": "67bd5296ddb6b65cfe689d2b81dff29d5360d66b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67bd5296ddb6b65cfe689d2b81dff29d5360d66b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bde9cab66ec04b185679a39ded69d0ab857aec33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bde9cab66ec04b185679a39ded69d0ab857aec33", "html_url": "https://github.com/rust-lang/rust/commit/bde9cab66ec04b185679a39ded69d0ab857aec33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bde9cab66ec04b185679a39ded69d0ab857aec33/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f22f905037f4a6c15195263e9bb6bcb022d65b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f22f905037f4a6c15195263e9bb6bcb022d65b6", "html_url": "https://github.com/rust-lang/rust/commit/7f22f905037f4a6c15195263e9bb6bcb022d65b6"}], "stats": {"total": 262, "additions": 105, "deletions": 157}, "files": [{"sha": "4447c608aa2a11367cf927ed27d4a3f144fcd95f", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 105, "deletions": 57, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/bde9cab66ec04b185679a39ded69d0ab857aec33/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde9cab66ec04b185679a39ded69d0ab857aec33/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=bde9cab66ec04b185679a39ded69d0ab857aec33", "patch": "@@ -1,10 +1,10 @@\n use std::sync::Arc;\n \n-use ra_db::{CrateId, SourceRootId, Edition};\n+use ra_db::{CrateId, SourceRootId, Edition, FileId};\n use ra_syntax::{ast::self, TreeArc};\n \n use crate::{\n-    Name, AsName, Ty, HirFileId, Either,\n+    Name, AsName, AstId, Ty, HirFileId, Either,\n     HirDatabase, DefDatabase,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n@@ -107,29 +107,66 @@ pub enum ModuleSource {\n     Module(TreeArc<ast::Module>),\n }\n \n+impl ModuleSource {\n+    pub(crate) fn new(\n+        db: &impl DefDatabase,\n+        file_id: Option<FileId>,\n+        decl_id: Option<AstId<ast::Module>>,\n+    ) -> ModuleSource {\n+        match (file_id, decl_id) {\n+            (Some(file_id), _) => {\n+                let source_file = db.parse(file_id);\n+                ModuleSource::SourceFile(source_file)\n+            }\n+            (None, Some(item_id)) => {\n+                let module = item_id.to_node(db);\n+                assert!(module.item_list().is_some(), \"expected inline module\");\n+                ModuleSource::Module(module.to_owned())\n+            }\n+            (None, None) => panic!(),\n+        }\n+    }\n+}\n+\n impl Module {\n     /// Name of this module.\n-    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n-        self.name_impl(db)\n+    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+        let def_map = db.crate_def_map(self.krate);\n+        let parent = def_map[self.module_id].parent?;\n+        def_map[parent].children.iter().find_map(|(name, module_id)| {\n+            if *module_id == self.module_id {\n+                Some(name.clone())\n+            } else {\n+                None\n+            }\n+        })\n     }\n \n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(&self, db: &impl DefDatabase) -> (HirFileId, ModuleSource) {\n-        self.definition_source_impl(db)\n+    pub fn definition_source(self, db: &impl DefDatabase) -> (HirFileId, ModuleSource) {\n+        let def_map = db.crate_def_map(self.krate);\n+        let decl_id = def_map[self.module_id].declaration;\n+        let file_id = def_map[self.module_id].definition;\n+        let module_source = ModuleSource::new(db, file_id, decl_id);\n+        let file_id = file_id.map(HirFileId::from).unwrap_or_else(|| decl_id.unwrap().file_id());\n+        (file_id, module_source)\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n     /// `None` for the crate root.\n     pub fn declaration_source(\n-        &self,\n+        self,\n         db: &impl HirDatabase,\n     ) -> Option<(HirFileId, TreeArc<ast::Module>)> {\n-        self.declaration_source_impl(db)\n+        let def_map = db.crate_def_map(self.krate);\n+        let decl = def_map[self.module_id].declaration?;\n+        let ast = decl.to_node(db);\n+        Some((decl.file_id(), ast))\n     }\n \n     /// Returns the syntax of the last path segment corresponding to this import\n     pub fn import_source(\n-        &self,\n+        self,\n         db: &impl HirDatabase,\n         import: ImportId,\n     ) -> Either<TreeArc<ast::UseTree>, TreeArc<ast::ExternCrateItem>> {\n@@ -139,33 +176,44 @@ impl Module {\n     }\n \n     /// Returns the crate this module is part of.\n-    pub fn krate(&self, _db: &impl DefDatabase) -> Option<Crate> {\n+    pub fn krate(self, _db: &impl DefDatabase) -> Option<Crate> {\n         Some(self.krate)\n     }\n \n     /// Topmost parent of this module. Every module has a `crate_root`, but some\n     /// might be missing `krate`. This can happen if a module's file is not included\n     /// in the module tree of any target in `Cargo.toml`.\n-    pub fn crate_root(&self, db: &impl DefDatabase) -> Module {\n-        self.crate_root_impl(db)\n+    pub fn crate_root(self, db: &impl DefDatabase) -> Module {\n+        let def_map = db.crate_def_map(self.krate);\n+        self.with_module_id(def_map.root())\n     }\n \n     /// Finds a child module with the specified name.\n-    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Option<Module> {\n-        self.child_impl(db, name)\n+    pub fn child(self, db: &impl HirDatabase, name: &Name) -> Option<Module> {\n+        let def_map = db.crate_def_map(self.krate);\n+        let child_id = def_map[self.module_id].children.get(name)?;\n+        Some(self.with_module_id(*child_id))\n     }\n \n     /// Iterates over all child modules.\n-    pub fn children(&self, db: &impl DefDatabase) -> impl Iterator<Item = Module> {\n-        self.children_impl(db)\n+    pub fn children(self, db: &impl DefDatabase) -> impl Iterator<Item = Module> {\n+        let def_map = db.crate_def_map(self.krate);\n+        let children = def_map[self.module_id]\n+            .children\n+            .iter()\n+            .map(|(_, module_id)| self.with_module_id(*module_id))\n+            .collect::<Vec<_>>();\n+        children.into_iter()\n     }\n \n     /// Finds a parent module.\n-    pub fn parent(&self, db: &impl DefDatabase) -> Option<Module> {\n-        self.parent_impl(db)\n+    pub fn parent(self, db: &impl DefDatabase) -> Option<Module> {\n+        let def_map = db.crate_def_map(self.krate);\n+        let parent_id = def_map[self.module_id].parent?;\n+        Some(self.with_module_id(parent_id))\n     }\n \n-    pub fn path_to_root(&self, db: &impl HirDatabase) -> Vec<Module> {\n+    pub fn path_to_root(self, db: &impl HirDatabase) -> Vec<Module> {\n         let mut res = vec![self.clone()];\n         let mut curr = self.clone();\n         while let Some(next) = curr.parent(db) {\n@@ -176,11 +224,11 @@ impl Module {\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n-    pub fn scope(&self, db: &impl HirDatabase) -> ModuleScope {\n+    pub fn scope(self, db: &impl HirDatabase) -> ModuleScope {\n         db.crate_def_map(self.krate)[self.module_id].scope.clone()\n     }\n \n-    pub fn diagnostics(&self, db: &impl HirDatabase, sink: &mut DiagnosticSink) {\n+    pub fn diagnostics(self, db: &impl HirDatabase, sink: &mut DiagnosticSink) {\n         db.crate_def_map(self.krate).add_diagnostics(db, self.module_id, sink);\n         for decl in self.declarations(db) {\n             match decl {\n@@ -200,7 +248,7 @@ impl Module {\n         }\n     }\n \n-    pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n+    pub(crate) fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         let def_map = db.crate_def_map(self.krate);\n         Resolver::default().push_module_scope(def_map, self.module_id)\n     }\n@@ -225,6 +273,10 @@ impl Module {\n             .map(|(impl_id, _)| ImplBlock::from_id(self, impl_id))\n             .collect()\n     }\n+\n+    fn with_module_id(&self, module_id: CrateModuleId) -> Module {\n+        Module { module_id, krate: self.krate }\n+    }\n }\n \n impl Docs for Module {\n@@ -278,49 +330,49 @@ pub struct Struct {\n }\n \n impl Struct {\n-    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n+    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn module(&self, db: &impl HirDatabase) -> Module {\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n         self.id.module(db)\n     }\n \n-    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n-        db.struct_data(*self).name.clone()\n+    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+        db.struct_data(self).name.clone()\n     }\n \n-    pub fn fields(&self, db: &impl HirDatabase) -> Vec<StructField> {\n-        db.struct_data(*self)\n+    pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n+        db.struct_data(self)\n             .variant_data\n             .fields()\n             .into_iter()\n             .flat_map(|it| it.iter())\n-            .map(|(id, _)| StructField { parent: (*self).into(), id })\n+            .map(|(id, _)| StructField { parent: self.into(), id })\n             .collect()\n     }\n \n-    pub fn field(&self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n-        db.struct_data(*self)\n+    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n+        db.struct_data(self)\n             .variant_data\n             .fields()\n             .into_iter()\n             .flat_map(|it| it.iter())\n             .find(|(_id, data)| data.name == *name)\n-            .map(|(id, _)| StructField { parent: (*self).into(), id })\n+            .map(|(id, _)| StructField { parent: self.into(), id })\n     }\n \n-    pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n-        db.type_for_def((*self).into(), Namespace::Types)\n+    pub fn ty(self, db: &impl HirDatabase) -> Ty {\n+        db.type_for_def(self.into(), Namespace::Types)\n     }\n \n-    pub fn constructor_ty(&self, db: &impl HirDatabase) -> Ty {\n-        db.type_for_def((*self).into(), Namespace::Values)\n+    pub fn constructor_ty(self, db: &impl HirDatabase) -> Ty {\n+        db.type_for_def(self.into(), Namespace::Values)\n     }\n \n     // FIXME move to a more general type\n     /// Builds a resolver for type references inside this struct.\n-    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n@@ -342,21 +394,21 @@ pub struct Union {\n }\n \n impl Union {\n-    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n+    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n         db.struct_data(Struct { id: self.id }).name.clone()\n     }\n \n-    pub fn module(&self, db: &impl HirDatabase) -> Module {\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n         self.id.module(db)\n     }\n \n     // FIXME move to a more general type\n     /// Builds a resolver for type references inside this union.\n-    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n@@ -378,41 +430,37 @@ pub struct Enum {\n }\n \n impl Enum {\n-    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n+    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn module(&self, db: &impl HirDatabase) -> Module {\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n         self.id.module(db)\n     }\n \n-    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n-        db.enum_data(*self).name.clone()\n+    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+        db.enum_data(self).name.clone()\n     }\n \n-    pub fn variants(&self, db: &impl DefDatabase) -> Vec<EnumVariant> {\n-        db.enum_data(*self)\n-            .variants\n-            .iter()\n-            .map(|(id, _)| EnumVariant { parent: *self, id })\n-            .collect()\n+    pub fn variants(self, db: &impl DefDatabase) -> Vec<EnumVariant> {\n+        db.enum_data(self).variants.iter().map(|(id, _)| EnumVariant { parent: self, id }).collect()\n     }\n \n-    pub fn variant(&self, db: &impl DefDatabase, name: &Name) -> Option<EnumVariant> {\n-        db.enum_data(*self)\n+    pub fn variant(self, db: &impl DefDatabase, name: &Name) -> Option<EnumVariant> {\n+        db.enum_data(self)\n             .variants\n             .iter()\n             .find(|(_id, data)| data.name.as_ref() == Some(name))\n-            .map(|(id, _)| EnumVariant { parent: *self, id })\n+            .map(|(id, _)| EnumVariant { parent: self, id })\n     }\n \n-    pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n-        db.type_for_def((*self).into(), Namespace::Types)\n+    pub fn ty(self, db: &impl HirDatabase) -> Ty {\n+        db.type_for_def(self.into(), Namespace::Types)\n     }\n \n     // FIXME: move to a more general type\n     /// Builds a resolver for type references inside this struct.\n-    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present"}, {"sha": "7bdd86eae51ad784eadc669ba26c58706f963f08", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bde9cab66ec04b185679a39ded69d0ab857aec33/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde9cab66ec04b185679a39ded69d0ab857aec33/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=bde9cab66ec04b185679a39ded69d0ab857aec33", "patch": "@@ -1,3 +1,2 @@\n mod konst; // `const` is invalid ident :(\n-mod module;\n pub(crate) mod function;"}, {"sha": "5c2ea73ce60748a5fda6e779f227e3e995da934d", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/7f22f905037f4a6c15195263e9bb6bcb022d65b6/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f22f905037f4a6c15195263e9bb6bcb022d65b6/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=7f22f905037f4a6c15195263e9bb6bcb022d65b6", "patch": "@@ -1,99 +0,0 @@\n-use ra_db::FileId;\n-use ra_syntax::{ast, TreeArc};\n-\n-use crate::{\n-    Module, ModuleSource, Name, AstId,\n-    nameres::CrateModuleId,\n-    HirDatabase, DefDatabase,\n-    HirFileId,\n-};\n-\n-impl ModuleSource {\n-    pub(crate) fn new(\n-        db: &impl DefDatabase,\n-        file_id: Option<FileId>,\n-        decl_id: Option<AstId<ast::Module>>,\n-    ) -> ModuleSource {\n-        match (file_id, decl_id) {\n-            (Some(file_id), _) => {\n-                let source_file = db.parse(file_id);\n-                ModuleSource::SourceFile(source_file)\n-            }\n-            (None, Some(item_id)) => {\n-                let module = item_id.to_node(db);\n-                assert!(module.item_list().is_some(), \"expected inline module\");\n-                ModuleSource::Module(module.to_owned())\n-            }\n-            (None, None) => panic!(),\n-        }\n-    }\n-}\n-\n-impl Module {\n-    fn with_module_id(&self, module_id: CrateModuleId) -> Module {\n-        Module { module_id, krate: self.krate }\n-    }\n-\n-    pub(crate) fn name_impl(&self, db: &impl HirDatabase) -> Option<Name> {\n-        let def_map = db.crate_def_map(self.krate);\n-        let parent = def_map[self.module_id].parent?;\n-        def_map[parent].children.iter().find_map(|(name, module_id)| {\n-            if *module_id == self.module_id {\n-                Some(name.clone())\n-            } else {\n-                None\n-            }\n-        })\n-    }\n-\n-    pub(crate) fn definition_source_impl(\n-        &self,\n-        db: &impl DefDatabase,\n-    ) -> (HirFileId, ModuleSource) {\n-        let def_map = db.crate_def_map(self.krate);\n-        let decl_id = def_map[self.module_id].declaration;\n-        let file_id = def_map[self.module_id].definition;\n-        let module_source = ModuleSource::new(db, file_id, decl_id);\n-        let file_id = file_id.map(HirFileId::from).unwrap_or_else(|| decl_id.unwrap().file_id());\n-        (file_id, module_source)\n-    }\n-\n-    pub(crate) fn declaration_source_impl(\n-        &self,\n-        db: &impl HirDatabase,\n-    ) -> Option<(HirFileId, TreeArc<ast::Module>)> {\n-        let def_map = db.crate_def_map(self.krate);\n-        let decl = def_map[self.module_id].declaration?;\n-        let ast = decl.to_node(db);\n-        Some((decl.file_id(), ast))\n-    }\n-\n-    pub(crate) fn crate_root_impl(&self, db: &impl DefDatabase) -> Module {\n-        let def_map = db.crate_def_map(self.krate);\n-        self.with_module_id(def_map.root())\n-    }\n-\n-    /// Finds a child module with the specified name.\n-    pub(crate) fn child_impl(&self, db: &impl HirDatabase, name: &Name) -> Option<Module> {\n-        let def_map = db.crate_def_map(self.krate);\n-        let child_id = def_map[self.module_id].children.get(name)?;\n-        Some(self.with_module_id(*child_id))\n-    }\n-\n-    /// Iterates over all child modules.\n-    pub(crate) fn children_impl(&self, db: &impl DefDatabase) -> impl Iterator<Item = Module> {\n-        let def_map = db.crate_def_map(self.krate);\n-        let children = def_map[self.module_id]\n-            .children\n-            .iter()\n-            .map(|(_, module_id)| self.with_module_id(*module_id))\n-            .collect::<Vec<_>>();\n-        children.into_iter()\n-    }\n-\n-    pub(crate) fn parent_impl(&self, db: &impl DefDatabase) -> Option<Module> {\n-        let def_map = db.crate_def_map(self.krate);\n-        let parent_id = def_map[self.module_id].parent?;\n-        Some(self.with_module_id(parent_id))\n-    }\n-}"}]}