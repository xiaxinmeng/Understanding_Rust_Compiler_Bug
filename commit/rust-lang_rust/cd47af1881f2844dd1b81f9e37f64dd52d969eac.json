{"sha": "cd47af1881f2844dd1b81f9e37f64dd52d969eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDdhZjE4ODFmMjg0NGRkMWI4MWY5ZTM3ZjY0ZGQ1MmQ5NjllYWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T11:36:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-11T11:36:04Z"}, "message": "Rollup merge of #67756 - Zoxc:collector-tweaks, r=Mark-Simulacrum\n\nCollector tweaks\n\nr? @Mark-Simulacrum", "tree": {"sha": "64150a9fe2a7075093ab85f4d54a5feceffadcf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64150a9fe2a7075093ab85f4d54a5feceffadcf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd47af1881f2844dd1b81f9e37f64dd52d969eac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGbMlCRBK7hj4Ov3rIwAAdHIIAIVydjgMBeRoQLpYEstGow4s\ndN9HdF4AweRu6RNUu/jfCr4zKMeIbbVebDG+azIE1XCeXU3txxMwjLbZGtKpwgeq\nz0q9Ij8FlyC6uBB4k8SRn0tZVbwJKiDrOH6sk/YV0Xae+KcJCioM3nQFhddw5YQf\nPltCKXPIn9HGGEiLXt5VLkWr/GXMdqQXIvqysyYiiVfrN7+JfnRh5pNrzksC3B4J\nV/2u6AdRBAPdz5SeJzLcrQaG+Q4XesRX3gM7LYXa8d+r7cp7OW4xzCQTBd5K1X56\n04eojVqjnKRMdigeFTIP2AcTItIXGcZ+DsMDQG/b5OoR0la3jcinqF1+v38Ph1Y=\n=OG1r\n-----END PGP SIGNATURE-----\n", "payload": "tree 64150a9fe2a7075093ab85f4d54a5feceffadcf2\nparent 543b7d97d019bff882cc70cf2f8bdc317e7b840f\nparent 4a647167e64c77c72a074c354543bbe9dacb2d96\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578742564 +0100\ncommitter GitHub <noreply@github.com> 1578742564 +0100\n\nRollup merge of #67756 - Zoxc:collector-tweaks, r=Mark-Simulacrum\n\nCollector tweaks\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd47af1881f2844dd1b81f9e37f64dd52d969eac", "html_url": "https://github.com/rust-lang/rust/commit/cd47af1881f2844dd1b81f9e37f64dd52d969eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd47af1881f2844dd1b81f9e37f64dd52d969eac/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543b7d97d019bff882cc70cf2f8bdc317e7b840f", "url": "https://api.github.com/repos/rust-lang/rust/commits/543b7d97d019bff882cc70cf2f8bdc317e7b840f", "html_url": "https://github.com/rust-lang/rust/commit/543b7d97d019bff882cc70cf2f8bdc317e7b840f"}, {"sha": "4a647167e64c77c72a074c354543bbe9dacb2d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a647167e64c77c72a074c354543bbe9dacb2d96", "html_url": "https://github.com/rust-lang/rust/commit/4a647167e64c77c72a074c354543bbe9dacb2d96"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "511a5fbc617951e94343a1cb6bc5ac8ba4cfab77", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cd47af1881f2844dd1b81f9e37f64dd52d969eac/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd47af1881f2844dd1b81f9e37f64dd52d969eac/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=cd47af1881f2844dd1b81f9e37f64dd52d969eac", "patch": "@@ -194,7 +194,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_index::bit_set::GrowableBitSet;\n-\n+use smallvec::SmallVec;\n use std::iter;\n \n #[derive(PartialEq)]\n@@ -227,28 +227,23 @@ impl<'tcx> InliningMap<'tcx> {\n         }\n     }\n \n-    fn record_accesses<I>(&mut self, source: MonoItem<'tcx>, new_targets: I)\n-    where\n-        I: Iterator<Item = (MonoItem<'tcx>, bool)> + ExactSizeIterator,\n-    {\n-        assert!(!self.index.contains_key(&source));\n-\n+    fn record_accesses(&mut self, source: MonoItem<'tcx>, new_targets: &[(MonoItem<'tcx>, bool)]) {\n         let start_index = self.targets.len();\n         let new_items_count = new_targets.len();\n         let new_items_count_total = new_items_count + self.targets.len();\n \n         self.targets.reserve(new_items_count);\n         self.inlines.ensure(new_items_count_total);\n \n-        for (i, (target, inline)) in new_targets.enumerate() {\n-            self.targets.push(target);\n-            if inline {\n+        for (i, (target, inline)) in new_targets.iter().enumerate() {\n+            self.targets.push(*target);\n+            if *inline {\n                 self.inlines.insert(i + start_index);\n             }\n         }\n \n         let end_index = self.targets.len();\n-        self.index.insert(source, (start_index, end_index));\n+        assert!(self.index.insert(source, (start_index, end_index)).is_none());\n     }\n \n     // Internally iterate over all items referenced by `source` which will be\n@@ -403,10 +398,15 @@ fn record_accesses<'tcx>(\n         mono_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy\n     };\n \n-    let accesses =\n-        callees.into_iter().map(|mono_item| (*mono_item, is_inlining_candidate(mono_item)));\n+    // We collect this into a `SmallVec` to avoid calling `is_inlining_candidate` in the lock.\n+    // FIXME: Call `is_inlining_candidate` when pushing to `neighbors` in `collect_items_rec`\n+    // instead to avoid creating this `SmallVec`.\n+    let accesses: SmallVec<[_; 128]> = callees\n+        .into_iter()\n+        .map(|mono_item| (*mono_item, is_inlining_candidate(mono_item)))\n+        .collect();\n \n-    inlining_map.lock_mut().record_accesses(caller, accesses);\n+    inlining_map.lock_mut().record_accesses(caller, &accesses);\n }\n \n fn check_recursion_limit<'tcx>("}, {"sha": "0def51a6a33e5410a1adeffc0fa2a2d15d65a9b1", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cd47af1881f2844dd1b81f9e37f64dd52d969eac/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd47af1881f2844dd1b81f9e37f64dd52d969eac/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=cd47af1881f2844dd1b81f9e37f64dd52d969eac", "patch": "@@ -104,6 +104,7 @@ use rustc::ty::print::characteristic_def_id_of_type;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, InstanceDef, TyCtxt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::sync;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_span::symbol::Symbol;\n@@ -796,6 +797,8 @@ where\n     I: Iterator<Item = &'a MonoItem<'tcx>>,\n     'tcx: 'a,\n {\n+    let _prof_timer = tcx.prof.generic_activity(\"assert_symbols_are_distinct\");\n+\n     let mut symbols: Vec<_> =\n         mono_items.map(|mono_item| (mono_item, mono_item.symbol_name(tcx))).collect();\n \n@@ -869,18 +872,23 @@ fn collect_and_partition_mono_items(\n \n     tcx.sess.abort_if_errors();\n \n-    assert_symbols_are_distinct(tcx, items.iter());\n-\n-    let strategy = if tcx.sess.opts.incremental.is_some() {\n-        PartitioningStrategy::PerModule\n-    } else {\n-        PartitioningStrategy::FixedUnitCount(tcx.sess.codegen_units())\n-    };\n-\n-    let codegen_units = partition(tcx, items.iter().cloned(), strategy, &inlining_map)\n-        .into_iter()\n-        .map(Arc::new)\n-        .collect::<Vec<_>>();\n+    let (codegen_units, _) = tcx.sess.time(\"partition_and_assert_distinct_symbols\", || {\n+        sync::join(\n+            || {\n+                let strategy = if tcx.sess.opts.incremental.is_some() {\n+                    PartitioningStrategy::PerModule\n+                } else {\n+                    PartitioningStrategy::FixedUnitCount(tcx.sess.codegen_units())\n+                };\n+\n+                partition(tcx, items.iter().cloned(), strategy, &inlining_map)\n+                    .into_iter()\n+                    .map(Arc::new)\n+                    .collect::<Vec<_>>()\n+            },\n+            || assert_symbols_are_distinct(tcx, items.iter()),\n+        )\n+    });\n \n     let mono_items: DefIdSet = items\n         .iter()"}]}