{"sha": "c65400548a0c9d36d7372592fb64bc95f0f37066", "node_id": "C_kwDOAAsO6NoAKGM2NTQwMDU0OGEwYzlkMzZkNzM3MjU5MmZiNjRiYzk1ZjBmMzcwNjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-01T02:33:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-01T02:33:03Z"}, "message": "Rollup merge of #89826 - guswynn:feature_gate_must_not_suspend, r=Mark-Simulacrum\n\nFeature gate + make must_not_suspend allow-by-default\n\nFixes #89798 and patches over #89562 (not a true fix, since we're just disabling the lint for now).", "tree": {"sha": "d1b02767bc13e1ec520bd853a06a039eafcbb419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b02767bc13e1ec520bd853a06a039eafcbb419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c65400548a0c9d36d7372592fb64bc95f0f37066", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhf1HfCRBK7hj4Ov3rIwAA9McIAHxUECP2ygLuJZ+akPqVfNyy\nlUCieCFT5h7YOr8WFmoE/+ioWMvfR8LO6fZH1zWmK34wHGSQvPYJBs/WENMAe94H\nDv1TXorAF9ENs1hG/GrwizmKzicQDuqA7c4pDGKLF3bPrWh9ltM8ivJe6UADFPsD\nTKsS4OFIvSqvAAfzzG5yDSqcU3iMjfmDrTZCwKWdKK2oDz7ZfLW8MUbbulrDSQiZ\nSvEF1MMWzKwuU5iOM+YIMRcAMeY+oXBWAAcdC9WX9RSxTe0VDmtC7LEbI5HlDtBB\n0kbAKqZlAk8vG95N/uNhvNt4At+idEa3EnV2vI2prLkV0uw6XneyNxxxRbmf9RA=\n=MITo\n-----END PGP SIGNATURE-----\n", "payload": "tree d1b02767bc13e1ec520bd853a06a039eafcbb419\nparent ff0e14829e1806ca0d4226595f7fdf3e8658758f\nparent 185fa5625656c5a5cb979397b131d1c8bbadeba9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635733983 +0100\ncommitter GitHub <noreply@github.com> 1635733983 +0100\n\nRollup merge of #89826 - guswynn:feature_gate_must_not_suspend, r=Mark-Simulacrum\n\nFeature gate + make must_not_suspend allow-by-default\n\nFixes #89798 and patches over #89562 (not a true fix, since we're just disabling the lint for now).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c65400548a0c9d36d7372592fb64bc95f0f37066", "html_url": "https://github.com/rust-lang/rust/commit/c65400548a0c9d36d7372592fb64bc95f0f37066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c65400548a0c9d36d7372592fb64bc95f0f37066/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0e14829e1806ca0d4226595f7fdf3e8658758f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0e14829e1806ca0d4226595f7fdf3e8658758f", "html_url": "https://github.com/rust-lang/rust/commit/ff0e14829e1806ca0d4226595f7fdf3e8658758f"}, {"sha": "185fa5625656c5a5cb979397b131d1c8bbadeba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/185fa5625656c5a5cb979397b131d1c8bbadeba9", "html_url": "https://github.com/rust-lang/rust/commit/185fa5625656c5a5cb979397b131d1c8bbadeba9"}], "stats": {"total": 130, "additions": 114, "deletions": 16}, "files": [{"sha": "ee0567608f4eda8f341da58afcad7ba7f284c879", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -300,7 +300,6 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         UNUSED_LABELS,\n         UNUSED_PARENS,\n         UNUSED_BRACES,\n-        MUST_NOT_SUSPEND,\n         REDUNDANT_SEMICOLONS\n     );\n "}, {"sha": "c42d2471ca5e6f99817b56f78a2c031b3270929c", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -323,6 +323,7 @@ declare_lint! {\n     ///\n     /// ```rust\n     /// #![feature(must_not_suspend)]\n+    /// #![warn(must_not_suspend)]\n     ///\n     /// #[must_not_suspend]\n     /// struct SyncThing {}\n@@ -349,8 +350,9 @@ declare_lint! {\n     /// `MutexGuard`'s)\n     ///\n     pub MUST_NOT_SUSPEND,\n-    Warn,\n+    Allow,\n     \"use of a `#[must_not_suspend]` value across a yield point\",\n+    @feature_gate = rustc_span::symbol::sym::must_not_suspend;\n }\n \n declare_lint! {"}, {"sha": "b652d239153302fc7fddd99b23cdc4d2be9b559b", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.rs?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -1,4 +1,6 @@\n // edition:2018\n+#![feature(must_not_suspend)]\n+#![allow(must_not_suspend)]\n \n // This tests the basic example case for the async-await-specific error.\n "}, {"sha": "a373ba6aa71361ea74b4bb90880874cd70cdfe4e", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-non-send-future-diags.rs:21:13\n+  --> $DIR/issue-64130-non-send-future-diags.rs:23:13\n    |\n LL |     is_send(foo());\n    |             ^^^^^ future returned by `foo` is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-non-send-future-diags.rs:15:5\n+  --> $DIR/issue-64130-non-send-future-diags.rs:17:5\n    |\n LL |     let g = x.lock().unwrap();\n    |         - has type `MutexGuard<'_, u32>` which is not `Send`\n@@ -15,7 +15,7 @@ LL |     baz().await;\n LL | }\n    | - `g` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/issue-64130-non-send-future-diags.rs:7:15\n+  --> $DIR/issue-64130-non-send-future-diags.rs:9:15\n    |\n LL | fn is_send<T: Send>(t: T) { }\n    |               ^^^^ required by this bound in `is_send`"}, {"sha": "7695e0325ff31feb45ee5dc1dc990d44d08ec2af", "filename": "src/test/ui/async-await/issue-71137.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -1,4 +1,6 @@\n // edition:2018\n+#![feature(must_not_suspend)]\n+#![allow(must_not_suspend)]\n \n use std::future::Future;\n use std::sync::Mutex;"}, {"sha": "3cc800f96c20d0ed983779fc88362c13f5bf7aa2", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-71137.rs:20:14\n+  --> $DIR/issue-71137.rs:22:14\n    |\n LL |   fake_spawn(wrong_mutex());\n    |              ^^^^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-71137.rs:12:5\n+  --> $DIR/issue-71137.rs:14:5\n    |\n LL |     let mut guard = m.lock().unwrap();\n    |         --------- has type `MutexGuard<'_, i32>` which is not `Send`\n@@ -16,7 +16,7 @@ LL |     *guard += 1;\n LL |   }\n    |   - `mut guard` is later dropped here\n note: required by a bound in `fake_spawn`\n-  --> $DIR/issue-71137.rs:6:27\n+  --> $DIR/issue-71137.rs:8:27\n    |\n LL | fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n    |                           ^^^^ required by this bound in `fake_spawn`"}, {"sha": "acb81b0bf9def5ef9b8a65a085e4a29fe6a9bd69", "filename": "src/test/ui/lint/must_not_suspend/gated.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+#![deny(must_not_suspend)]  //~ ERROR the `must_not_suspend`\n+//~| ERROR the `must_not_suspend`\n+//~| ERROR the `must_not_suspend`\n+\n+async fn other() {}\n+\n+pub async fn uhoh(m: std::sync::Mutex<()>) {\n+    let _guard = m.lock().unwrap(); //~ ERROR `MutexGuard` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "be077deb3f19750d73d9e86b9302ee0603d6043d", "filename": "src/test/ui/lint/must_not_suspend/gated.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -0,0 +1,54 @@\n+error[E0658]: the `must_not_suspend` lint is unstable\n+  --> $DIR/gated.rs:2:1\n+   |\n+LL | #![deny(must_not_suspend)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n+   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n+\n+error[E0658]: the `must_not_suspend` lint is unstable\n+  --> $DIR/gated.rs:2:1\n+   |\n+LL | #![deny(must_not_suspend)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n+   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n+\n+error[E0658]: the `must_not_suspend` lint is unstable\n+  --> $DIR/gated.rs:2:1\n+   |\n+LL | #![deny(must_not_suspend)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n+   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n+\n+error: `MutexGuard` held across a suspend point, but should not be\n+  --> $DIR/gated.rs:9:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/gated.rs:2:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n+  --> $DIR/gated.rs:9:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/gated.rs:9:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "acdb36fcdabf9d97b4ff9cd521e8d47cf7fa7c59", "filename": "src/test/ui/lint/must_not_suspend/issue-89562.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fissue-89562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fissue-89562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fissue-89562.rs?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+// run-pass\n+\n+use std::sync::Mutex;\n+\n+// Copied from the issue. Allow-by-default for now, so run-pass\n+pub async fn foo() {\n+    let foo = Mutex::new(1);\n+    let lock = foo.lock().unwrap();\n+\n+    // Prevent mutex lock being held across `.await` point.\n+    drop(lock);\n+\n+    bar().await;\n+}\n+\n+async fn bar() {}\n+\n+fn main() {}"}, {"sha": "7bb895e7d36438f143181273f304f4d2c017f374", "filename": "src/test/ui/lint/must_not_suspend/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -1,4 +1,5 @@\n // edition:2018\n+#![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n \n async fn other() {}"}, {"sha": "dde506c19e72501b9bb7fdce98902506890c2e08", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -1,23 +1,23 @@\n error: `MutexGuard` held across a suspend point, but should not be\n-  --> $DIR/mutex.rs:7:9\n+  --> $DIR/mutex.rs:8:9\n    |\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n LL |     other().await;\n    |     ------------- the value is held across this suspend point\n    |\n note: the lint level is defined here\n-  --> $DIR/mutex.rs:2:9\n+  --> $DIR/mutex.rs:3:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^\n note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n-  --> $DIR/mutex.rs:7:9\n+  --> $DIR/mutex.rs:8:9\n    |\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/mutex.rs:7:9\n+  --> $DIR/mutex.rs:8:9\n    |\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^"}, {"sha": "7fdea66a23517d5967e4241685820d499471f4e9", "filename": "src/test/ui/lint/must_not_suspend/warn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n // run-pass\n #![feature(must_not_suspend)]\n+#![warn(must_not_suspend)]\n \n #[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n struct Umm {"}, {"sha": "42374d4acac275f304fab03cccada0f7f85734e9", "filename": "src/test/ui/lint/must_not_suspend/warn.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c65400548a0c9d36d7372592fb64bc95f0f37066/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=c65400548a0c9d36d7372592fb64bc95f0f37066", "patch": "@@ -1,19 +1,23 @@\n warning: `Umm` held across a suspend point, but should not be\n-  --> $DIR/warn.rs:20:9\n+  --> $DIR/warn.rs:21:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n    |     ------------- the value is held across this suspend point\n    |\n-   = note: `#[warn(must_not_suspend)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/warn.rs:4:9\n+   |\n+LL | #![warn(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n note: You gotta use Umm's, ya know?\n-  --> $DIR/warn.rs:20:9\n+  --> $DIR/warn.rs:21:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/warn.rs:20:9\n+  --> $DIR/warn.rs:21:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^"}]}