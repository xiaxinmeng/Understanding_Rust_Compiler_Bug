{"sha": "33af3208fdb2180570c3ef266abc634a45158ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYWYzMjA4ZmRiMjE4MDU3MGMzZWYyNjZhYmM2MzRhNDUxNThlZjE=", "commit": {"author": {"name": "David Renshaw", "email": "dwrenshaw@gmail.com", "date": "2018-01-15T03:31:59Z"}, "committer": {"name": "David Renshaw", "email": "dwrenshaw@gmail.com", "date": "2018-01-15T03:31:59Z"}, "message": "update for rust/47205", "tree": {"sha": "fc9e362754074b1b3339950e12a9d43dea120e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9e362754074b1b3339950e12a9d43dea120e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33af3208fdb2180570c3ef266abc634a45158ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33af3208fdb2180570c3ef266abc634a45158ef1", "html_url": "https://github.com/rust-lang/rust/commit/33af3208fdb2180570c3ef266abc634a45158ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33af3208fdb2180570c3ef266abc634a45158ef1/comments", "author": {"login": "dwrensha", "id": 495768, "node_id": "MDQ6VXNlcjQ5NTc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/495768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrensha", "html_url": "https://github.com/dwrensha", "followers_url": "https://api.github.com/users/dwrensha/followers", "following_url": "https://api.github.com/users/dwrensha/following{/other_user}", "gists_url": "https://api.github.com/users/dwrensha/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrensha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrensha/subscriptions", "organizations_url": "https://api.github.com/users/dwrensha/orgs", "repos_url": "https://api.github.com/users/dwrensha/repos", "events_url": "https://api.github.com/users/dwrensha/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrensha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dwrensha", "id": 495768, "node_id": "MDQ6VXNlcjQ5NTc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/495768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrensha", "html_url": "https://github.com/dwrensha", "followers_url": "https://api.github.com/users/dwrensha/followers", "following_url": "https://api.github.com/users/dwrensha/following{/other_user}", "gists_url": "https://api.github.com/users/dwrensha/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrensha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrensha/subscriptions", "organizations_url": "https://api.github.com/users/dwrensha/orgs", "repos_url": "https://api.github.com/users/dwrensha/repos", "events_url": "https://api.github.com/users/dwrensha/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrensha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cabdc5597c6adc2e9f492c9cb682a3b58518bd8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cabdc5597c6adc2e9f492c9cb682a3b58518bd8c", "html_url": "https://github.com/rust-lang/rust/commit/cabdc5597c6adc2e9f492c9cb682a3b58518bd8c"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "b46f712818f29865ef1211e5e272a64eca3f6b73", "filename": "miri/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33af3208fdb2180570c3ef266abc634a45158ef1/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33af3208fdb2180570c3ef266abc634a45158ef1/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=33af3208fdb2180570c3ef266abc634a45158ef1", "patch": "@@ -386,7 +386,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator<'\n                         };\n                         // compute global if not cached\n                         let val = match self.tcx.interpret_interner.borrow().get_cached(cid) {\n-                            Some(ptr) => ptr,\n+                            Some(ptr) => MemoryPointer::new(ptr, 0).into(),\n                             None => eval_body(self.tcx, instance, ty::ParamEnv::empty(traits::Reveal::All))?.0,\n                         };\n                         let val = self.value_to_primval(ValTy { value: Value::ByRef(val, name_align),"}, {"sha": "92ae0ab8a820418e05128c07711af81573458178", "filename": "miri/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33af3208fdb2180570c3ef266abc634a45158ef1/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33af3208fdb2180570c3ef266abc634a45158ef1/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=33af3208fdb2180570c3ef266abc634a45158ef1", "patch": "@@ -203,7 +203,7 @@ pub struct MemoryData<'tcx> {\n     ///\n     /// Only mutable (static mut, heap, stack) allocations have an entry in this map.\n     /// The entry is created when allocating the memory and deleted after deallocation.\n-    locks: HashMap<u64, RangeMap<LockInfo<'tcx>>>,\n+    locks: HashMap<AllocId, RangeMap<LockInfo<'tcx>>>,\n }\n \n impl<'tcx> Machine<'tcx> for Evaluator<'tcx> {\n@@ -324,7 +324,7 @@ impl<'tcx> Machine<'tcx> for Evaluator<'tcx> {\n                 instance,\n                 promoted: None,\n             },\n-            ptr.into(),\n+            ptr.alloc_id,\n         );\n         Ok(())\n     }\n@@ -340,14 +340,14 @@ impl<'tcx> Machine<'tcx> for Evaluator<'tcx> {\n \n     fn add_lock<'a>(\n         mem: &mut Memory<'a, 'tcx, Self>,\n-        id: u64,\n+        id: AllocId,\n     ) {\n         mem.data.locks.insert(id, RangeMap::new());\n     }\n \n     fn free_lock<'a>(\n         mem: &mut Memory<'a, 'tcx, Self>,\n-        id: u64,\n+        id: AllocId,\n         len: u64,\n     ) -> EvalResult<'tcx> {\n         mem.data.locks"}, {"sha": "f0e8815c4fc50df8068b95e9523ed5db5f8f4fff", "filename": "miri/locks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33af3208fdb2180570c3ef266abc634a45158ef1/miri%2Flocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33af3208fdb2180570c3ef266abc634a45158ef1/miri%2Flocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flocks.rs?ref=33af3208fdb2180570c3ef266abc634a45158ef1", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'tcx: 'a> MemoryExt<'tcx> for Memory<'a, 'tcx, Evaluator<'tcx>> {\n         if len == 0 {\n             return Ok(());\n         }\n-        let locks = match self.data.locks.get(&ptr.alloc_id.0) {\n+        let locks = match self.data.locks.get(&ptr.alloc_id) {\n             Some(locks) => locks,\n             // immutable static or other constant memory\n             None => return Ok(()),\n@@ -148,7 +148,7 @@ impl<'a, 'tcx: 'a> MemoryExt<'tcx> for Memory<'a, 'tcx, Evaluator<'tcx>> {\n         );\n         self.check_bounds(ptr.offset(len, &*self)?, true)?; // if ptr.offset is in bounds, then so is ptr (because offset checks for overflow)\n \n-        let locks = match self.data.locks.get_mut(&ptr.alloc_id.0) {\n+        let locks = match self.data.locks.get_mut(&ptr.alloc_id) {\n             Some(locks) => locks,\n             // immutable static or other constant memory\n             None => return Ok(()),\n@@ -197,7 +197,7 @@ impl<'a, 'tcx: 'a> MemoryExt<'tcx> for Memory<'a, 'tcx, Evaluator<'tcx>> {\n     ) -> EvalResult<'tcx> {\n         assert!(len > 0);\n         let cur_frame = self.cur_frame;\n-        let locks = match self.data.locks.get_mut(&ptr.alloc_id.0) {\n+        let locks = match self.data.locks.get_mut(&ptr.alloc_id) {\n             Some(locks) => locks,\n             // immutable static or other constant memory\n             None => return Ok(()),\n@@ -275,7 +275,7 @@ impl<'a, 'tcx: 'a> MemoryExt<'tcx> for Memory<'a, 'tcx, Evaluator<'tcx>> {\n             frame: cur_frame,\n             path: lock_path.clone(),\n         };\n-        let locks = match self.data.locks.get_mut(&ptr.alloc_id.0) {\n+        let locks = match self.data.locks.get_mut(&ptr.alloc_id) {\n             Some(locks) => locks,\n             // immutable static or other constant memory\n             None => return Ok(()),"}]}