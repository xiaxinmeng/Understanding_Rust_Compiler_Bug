{"sha": "15c068ed0f4d231beabb22975cbca7fd33996ce5", "node_id": "C_kwDOAAsO6NoAKDE1YzA2OGVkMGY0ZDIzMWJlYWJiMjI5NzVjYmNhN2ZkMzM5OTZjZTU", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-03T17:44:33Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-21T14:50:11Z"}, "message": "Fix `needless_borrow` causing mutable borrows to be moved", "tree": {"sha": "ab92cf4fb0201fe5d09127d3667735dc26dcccac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab92cf4fb0201fe5d09127d3667735dc26dcccac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c068ed0f4d231beabb22975cbca7fd33996ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c068ed0f4d231beabb22975cbca7fd33996ce5", "html_url": "https://github.com/rust-lang/rust/commit/15c068ed0f4d231beabb22975cbca7fd33996ce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c068ed0f4d231beabb22975cbca7fd33996ce5/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff8e78f6d6699a8a05acb94fa0e6dd461d0bd86", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff8e78f6d6699a8a05acb94fa0e6dd461d0bd86", "html_url": "https://github.com/rust-lang/rust/commit/fff8e78f6d6699a8a05acb94fa0e6dd461d0bd86"}], "stats": {"total": 139, "additions": 114, "deletions": 25}, "files": [{"sha": "9645f1a03be88ffb59621fb65555197930c45683", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 55, "deletions": 24, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/15c068ed0f4d231beabb22975cbca7fd33996ce5/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c068ed0f4d231beabb22975cbca7fd33996ce5/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=15c068ed0f4d231beabb22975cbca7fd33996ce5", "patch": "@@ -10,11 +10,10 @@ use rustc_hir::{\n     Pat, PatKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n+use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::{self, Ty, TyCtxt, TyS, TypeckResults};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span};\n-use std::iter;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -226,40 +225,58 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                         let mut iter = find_adjustments(cx.tcx, typeck, expr).iter();\n                         if let Some((i, adjust)) = iter.by_ref().enumerate().find_map(|(i, adjust)| {\n                             if !matches!(adjust.kind, Adjust::Deref(_)) {\n-                                Some((i, adjust))\n+                                Some((i, Some(adjust)))\n                             } else if !adjust.target.is_ref() {\n-                                // Add one to the number of references found.\n-                                Some((i + 1, adjust))\n+                                // Include the current deref.\n+                                Some((i + 1, None))\n                             } else {\n                                 None\n                             }\n                         }) {\n-                            // Found two consecutive derefs. At least one can be removed.\n                             if i > 1 {\n-                                let target_mut = iter::once(adjust)\n-                                    .chain(iter)\n-                                    .find_map(|adjust| match adjust.kind {\n-                                        Adjust::Borrow(AutoBorrow::Ref(_, m)) => Some(m.into()),\n-                                        _ => None,\n-                                    })\n-                                    // This default should never happen. Auto-deref always reborrows.\n-                                    .unwrap_or(Mutability::Not);\n-                                self.state = Some((\n-                                    // Subtract one for the current borrow expression, and one to cover the last\n-                                    // reference which can't be removed (it's either reborrowed, or needed for\n-                                    // auto-deref to happen).\n-                                    State::DerefedBorrow {\n+                                // If the next adjustment is a mutable borrow, then check to see if the compiler will\n+                                // insert a re-borrow here. If not, leave an extra borrow here to avoid attempting to\n+                                // move the a mutable reference.\n+                                let (i, target_mut) = if let Some(&Adjust::Borrow(AutoBorrow::Ref(_, mutability))) =\n+                                    adjust.or_else(|| iter.next()).map(|a| &a.kind)\n+                                {\n+                                    if matches!(mutability, AutoBorrowMutability::Mut { .. })\n+                                        && !is_auto_reborrow_position(parent, expr.hir_id)\n+                                    {\n+                                        (i - 1, Mutability::Mut)\n+                                    } else {\n+                                        (i, mutability.into())\n+                                    }\n+                                } else {\n+                                    (\n+                                        i,\n+                                        iter.find_map(|adjust| match adjust.kind {\n+                                            Adjust::Borrow(AutoBorrow::Ref(_, m)) => Some(m.into()),\n+                                            _ => None,\n+                                        })\n+                                        // This default should never happen. Auto-deref always reborrows.\n+                                        .unwrap_or(Mutability::Not),\n+                                    )\n+                                };\n+\n+                                if i > 1 {\n+                                    self.state = Some((\n+                                        // Subtract one for the current borrow expression, and one to cover the last\n+                                        // reference which can't be removed (it's either reborrowed, or needed for\n+                                        // auto-deref to happen).\n+                                        State::DerefedBorrow {\n                                         count:\n                                             // Truncation here would require more than a `u32::MAX` level reference. The compiler\n                                             // does not support this.\n                                             #[allow(clippy::cast_possible_truncation)]\n                                             { i as u32 - 2 }\n                                     },\n-                                    StateData {\n-                                        span: expr.span,\n-                                        target_mut,\n-                                    },\n-                                ));\n+                                        StateData {\n+                                            span: expr.span,\n+                                            target_mut,\n+                                        },\n+                                    ));\n+                                }\n                             }\n                         }\n                     },\n@@ -456,6 +473,20 @@ fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId,\n     }\n }\n \n+/// Checks if the given expression is in a position which can be auto-reborrowed.\n+/// Note: This is only correct assuming auto-deref is already occurring.\n+fn is_auto_reborrow_position(parent: Option<Node<'_>>, child_id: HirId) -> bool {\n+    match parent {\n+        Some(Node::Expr(parent)) => match parent.kind {\n+            ExprKind::MethodCall(..) => true,\n+            ExprKind::Call(callee, _) => callee.hir_id != child_id,\n+            _ => false,\n+        },\n+        Some(Node::Local(_)) => true,\n+        _ => false,\n+    }\n+}\n+\n /// Adjustments are sometimes made in the parent block rather than the expression itself.\n fn find_adjustments<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "2a87b520ce5b561e2f8998c5a7c720762432d7b7", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15c068ed0f4d231beabb22975cbca7fd33996ce5/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/15c068ed0f4d231beabb22975cbca7fd33996ce5/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=15c068ed0f4d231beabb22975cbca7fd33996ce5", "patch": "@@ -45,6 +45,23 @@ fn main() {\n         let b = &mut b;\n         x(b);\n     }\n+\n+    // Issue #8191\n+    let mut x = 5;\n+    let mut x = &mut x;\n+\n+    mut_ref(x);\n+    mut_ref(x);\n+    let y: &mut i32 = x;\n+    let y: &mut i32 = x;\n+\n+    let y = match 0 {\n+        // Don't lint. Removing the borrow would move 'x'\n+        0 => &mut x,\n+        _ => &mut *x,\n+    };\n+\n+    *x = 5;\n }\n \n #[allow(clippy::needless_borrowed_reference)]"}, {"sha": "4a98350711f9f6dfa41f746f58c8fdddbd14072b", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15c068ed0f4d231beabb22975cbca7fd33996ce5/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c068ed0f4d231beabb22975cbca7fd33996ce5/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=15c068ed0f4d231beabb22975cbca7fd33996ce5", "patch": "@@ -45,6 +45,23 @@ fn main() {\n         let b = &mut b;\n         x(&b);\n     }\n+\n+    // Issue #8191\n+    let mut x = 5;\n+    let mut x = &mut x;\n+\n+    mut_ref(&mut x);\n+    mut_ref(&mut &mut x);\n+    let y: &mut i32 = &mut x;\n+    let y: &mut i32 = &mut &mut x;\n+\n+    let y = match 0 {\n+        // Don't lint. Removing the borrow would move 'x'\n+        0 => &mut x,\n+        _ => &mut *x,\n+    };\n+\n+    *x = 5;\n }\n \n #[allow(clippy::needless_borrowed_reference)]"}, {"sha": "2211f95798204099db117dacbc5e531588c1cee2", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/15c068ed0f4d231beabb22975cbca7fd33996ce5/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15c068ed0f4d231beabb22975cbca7fd33996ce5/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=15c068ed0f4d231beabb22975cbca7fd33996ce5", "patch": "@@ -60,5 +60,29 @@ error: this expression borrows a reference (`&mut i32`) that is immediately dere\n LL |         x(&b);\n    |           ^^ help: change this to: `b`\n \n-error: aborting due to 10 previous errors\n+error: this expression borrows a reference (`&mut i32`) that is immediately dereferenced by the compiler\n+  --> $DIR/needless_borrow.rs:53:13\n+   |\n+LL |     mut_ref(&mut x);\n+   |             ^^^^^^ help: change this to: `x`\n+\n+error: this expression borrows a reference (`&mut i32`) that is immediately dereferenced by the compiler\n+  --> $DIR/needless_borrow.rs:54:13\n+   |\n+LL |     mut_ref(&mut &mut x);\n+   |             ^^^^^^^^^^^ help: change this to: `x`\n+\n+error: this expression borrows a reference (`&mut i32`) that is immediately dereferenced by the compiler\n+  --> $DIR/needless_borrow.rs:55:23\n+   |\n+LL |     let y: &mut i32 = &mut x;\n+   |                       ^^^^^^ help: change this to: `x`\n+\n+error: this expression borrows a reference (`&mut i32`) that is immediately dereferenced by the compiler\n+  --> $DIR/needless_borrow.rs:56:23\n+   |\n+LL |     let y: &mut i32 = &mut &mut x;\n+   |                       ^^^^^^^^^^^ help: change this to: `x`\n+\n+error: aborting due to 14 previous errors\n "}]}