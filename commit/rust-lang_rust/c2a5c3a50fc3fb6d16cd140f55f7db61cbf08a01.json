{"sha": "c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01", "node_id": "C_kwDOAAsO6NoAKGMyYTVjM2E1MGZjM2ZiNmQxNmNkMTQwZjU1ZjdkYjYxY2JmMDhhMDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T17:00:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T17:00:24Z"}, "message": "Auto merge of #101703 - nicholasbishop:bishop-add-uefi-ci-2, r=jyn514\n\nAdd QEMU test for x86_64-unknown-uefi\n\nThe UEFI targets don't have std support yet, so the normal tests don't work. However, we can compile a simple no-std program and run it under QEMU to at least check that the target compiles, links, and runs.\n\nTested locally with: `src/ci/docker/run.sh x86_64-uefi`", "tree": {"sha": "d1faa7d6bbb6670140f8aa2cda8674474df12fb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1faa7d6bbb6670140f8aa2cda8674474df12fb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01", "html_url": "https://github.com/rust-lang/rust/commit/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6330c27ae24ec1556cf2b97eeac333dc23391686", "url": "https://api.github.com/repos/rust-lang/rust/commits/6330c27ae24ec1556cf2b97eeac333dc23391686", "html_url": "https://github.com/rust-lang/rust/commit/6330c27ae24ec1556cf2b97eeac333dc23391686"}, {"sha": "1e264abf795540a46fb14aa1f0ed717e4f22ecff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e264abf795540a46fb14aa1f0ed717e4f22ecff", "html_url": "https://github.com/rust-lang/rust/commit/1e264abf795540a46fb14aa1f0ed717e4f22ecff"}], "stats": {"total": 161, "additions": 159, "deletions": 2}, "files": [{"sha": "b0f35bcb9ccf505580aaba4f966ad089a4864b4a", "filename": "src/ci/docker/host-x86_64/test-various/Dockerfile", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile?ref=c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01", "patch": "@@ -16,7 +16,9 @@ RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-ins\n   pkg-config \\\n   xz-utils \\\n   wget \\\n-  patch\n+  patch \\\n+  ovmf \\\n+  qemu-system-x86\n \n RUN curl -sL https://nodejs.org/dist/v15.14.0/node-v15.14.0-linux-x64.tar.xz | \\\n   tar -xJ\n@@ -64,4 +66,9 @@ ENV MUSL_TARGETS=x86_64-unknown-linux-musl \\\n     CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++\n ENV MUSL_SCRIPT python3 /checkout/x.py --stage 2 test --host='' --target $MUSL_TARGETS\n \n-ENV SCRIPT $WASM_SCRIPT && $NVPTX_SCRIPT && $MUSL_SCRIPT\n+COPY host-x86_64/test-various/uefi_qemu_test /uefi_qemu_test\n+ENV UEFI_TARGETS=x86_64-unknown-uefi\n+ENV UEFI_SCRIPT python3 /checkout/x.py --stage 2 build --host='' --target $UEFI_TARGETS && \\\n+  python3 -u /uefi_qemu_test/run.py\n+\n+ENV SCRIPT $WASM_SCRIPT && $NVPTX_SCRIPT && $MUSL_SCRIPT && $UEFI_SCRIPT"}, {"sha": "fa8e5b3d08060ec3e547552148f23abe5f757984", "filename": "src/ci/docker/host-x86_64/test-various/uefi_qemu_test/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2FCargo.toml?ref=c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"uefi_qemu_test\"\n+version = \"0.0.0\"\n+edition = \"2021\"\n+\n+[workspace]\n+\n+[dependencies]\n+r-efi = \"4.1.0\""}, {"sha": "46793ce3afa15901f88fe83dde0bea5f8e49a715", "filename": "src/ci/docker/host-x86_64/test-various/uefi_qemu_test/run.py", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2Frun.py", "raw_url": "https://github.com/rust-lang/rust/raw/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2Frun.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2Frun.py?ref=c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01", "patch": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tempfile\n+\n+from pathlib import Path\n+\n+\n+def run(*cmd, capture=False, check=True, env=None):\n+    \"\"\"Print and run a command, optionally capturing the output.\"\"\"\n+    cmd = [str(p) for p in cmd]\n+    print(' '.join(cmd))\n+    return subprocess.run(cmd,\n+                          capture_output=capture,\n+                          check=check,\n+                          env=env,\n+                          text=True)\n+\n+\n+def build_and_run(tmp_dir):\n+    host_artifacts = Path('/checkout/obj/build/x86_64-unknown-linux-gnu')\n+    stage0 = host_artifacts / 'stage0/bin'\n+    stage2 = host_artifacts / 'stage2/bin'\n+\n+    env = dict(os.environ)\n+    env['PATH'] = '{}:{}:{}'.format(stage2, stage0, env['PATH'])\n+\n+    # Copy the test create into `tmp_dir`.\n+    test_crate = Path(tmp_dir) / 'uefi_qemu_test'\n+    shutil.copytree('/uefi_qemu_test', test_crate)\n+\n+    # Build the UEFI executable.\n+    target = 'x86_64-unknown-uefi'\n+    run('cargo',\n+        'build',\n+        '--manifest-path',\n+        test_crate / 'Cargo.toml',\n+        '--target',\n+        target,\n+        env=env)\n+\n+    # Create a mock EFI System Partition in a subdirectory.\n+    esp = test_crate / 'esp'\n+    boot = esp / 'efi/boot'\n+    os.makedirs(boot, exist_ok=True)\n+\n+    # Copy the executable into the ESP.\n+    src_exe_path = test_crate / 'target' / target / 'debug/uefi_qemu_test.efi'\n+    shutil.copy(src_exe_path, boot / 'bootx64.efi')\n+\n+    # Run the executable in QEMU and capture the output.\n+    qemu = 'qemu-system-x86_64'\n+    ovmf_dir = Path('/usr/share/OVMF')\n+    ovmf_code = ovmf_dir / 'OVMF_CODE.fd'\n+    ovmf_vars = ovmf_dir / 'OVMF_VARS.fd'\n+    output = run(qemu,\n+                 '-display',\n+                 'none',\n+                 '-serial',\n+                 'stdio',\n+                 '-drive',\n+                 f'if=pflash,format=raw,readonly=on,file={ovmf_code}',\n+                 '-drive',\n+                 f'if=pflash,format=raw,readonly=on,file={ovmf_vars}',\n+                 '-drive',\n+                 f'format=raw,file=fat:rw:{esp}',\n+                 capture=True,\n+                 # Ubuntu 20.04 (which is what the Dockerfile currently\n+                 # uses) provides QEMU 4.2.1, which segfaults on\n+                 # shutdown under some circumstances. That has been\n+                 # fixed in newer versions of QEMU, but for now just\n+                 # don't check the exit status.\n+                 check=False).stdout\n+\n+    if 'Hello World!' in output:\n+        print('VM produced expected output')\n+    else:\n+        print('unexpected VM output:')\n+        print('---start---')\n+        print(output)\n+        print('---end---')\n+        sys.exit(1)\n+\n+\n+def main():\n+    # Create a temporary directory so that we have a writeable\n+    # workspace.\n+    with tempfile.TemporaryDirectory() as tmp_dir:\n+        build_and_run(tmp_dir)\n+\n+\n+if __name__ == \"__main__\":\n+    main()"}, {"sha": "2ec554c140b59106007e453ee558b62abcaae11f", "filename": "src/ci/docker/host-x86_64/test-various/uefi_qemu_test/src/main.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2Fsrc%2Fmain.rs?ref=c2a5c3a50fc3fb6d16cd140f55f7db61cbf08a01", "patch": "@@ -0,0 +1,45 @@\n+// Code is adapted from this hello world example:\n+// https://doc.rust-lang.org/nightly/rustc/platform-support/unknown-uefi.html\n+\n+#![no_main]\n+#![no_std]\n+\n+use core::{panic, ptr};\n+use r_efi::efi::{Char16, Handle, Status, SystemTable, RESET_SHUTDOWN};\n+\n+#[panic_handler]\n+fn panic_handler(_info: &panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[export_name = \"efi_main\"]\n+pub extern \"C\" fn main(_h: Handle, st: *mut SystemTable) -> Status {\n+    let s = [\n+        0x0048u16, 0x0065u16, 0x006cu16, 0x006cu16, 0x006fu16, // \"Hello\"\n+        0x0020u16, //                                             \" \"\n+        0x0057u16, 0x006fu16, 0x0072u16, 0x006cu16, 0x0064u16, // \"World\"\n+        0x0021u16, //                                             \"!\"\n+        0x000au16, //                                             \"\\n\"\n+        0x0000u16, //                                             NUL\n+    ];\n+\n+    // Print \"Hello World!\".\n+    let r = unsafe { ((*(*st).con_out).output_string)((*st).con_out, s.as_ptr() as *mut Char16) };\n+    if r.is_error() {\n+        return r;\n+    }\n+\n+    // Shut down.\n+    unsafe {\n+        ((*((*st).runtime_services)).reset_system)(\n+            RESET_SHUTDOWN,\n+            Status::SUCCESS,\n+            0,\n+            ptr::null_mut(),\n+        );\n+    }\n+\n+    // This should never be reached because `reset_system` should never\n+    // return, so fail with an error if we get here.\n+    Status::UNSUPPORTED\n+}"}]}