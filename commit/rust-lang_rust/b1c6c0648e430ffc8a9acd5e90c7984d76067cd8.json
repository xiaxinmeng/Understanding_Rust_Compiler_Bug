{"sha": "b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "node_id": "C_kwDOAAsO6NoAKGIxYzZjMDY0OGU0MzBmZmM4YTlhY2Q1ZTkwYzc5ODRkNzYwNjdjZDg", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-07T01:57:42Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-07T02:32:27Z"}, "message": "Permit asm_const and asm_sym to reference outer generic params", "tree": {"sha": "44bf422767cbed7c779420c0a42a8471e67df929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44bf422767cbed7c779420c0a42a8471e67df929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "html_url": "https://github.com/rust-lang/rust/commit/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d93b03793d4b6bcbc5cd5c0715df31bfcff15845", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93b03793d4b6bcbc5cd5c0715df31bfcff15845", "html_url": "https://github.com/rust-lang/rust/commit/d93b03793d4b6bcbc5cd5c0715df31bfcff15845"}], "stats": {"total": 107, "additions": 60, "deletions": 47}, "files": [{"sha": "42213cf69661b504dac2ef80db5adb7b4a8ec631", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "patch": "@@ -326,7 +326,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         ItemKind::ForeignMod(ref foreign_module) => {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n-        ItemKind::GlobalAsm(ref asm) => walk_inline_asm(visitor, asm),\n+        ItemKind::GlobalAsm(ref asm) => visitor.visit_inline_asm(asm),\n         ItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n@@ -897,7 +897,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         }\n         ExprKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ExprKind::Paren(ref subexpression) => visitor.visit_expr(subexpression),\n-        ExprKind::InlineAsm(ref asm) => walk_inline_asm(visitor, asm),\n+        ExprKind::InlineAsm(ref asm) => visitor.visit_inline_asm(asm),\n         ExprKind::Yield(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }"}, {"sha": "7ac1bb441c68d04248a2eba6a064b622611c5de8", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "patch": "@@ -1171,6 +1171,7 @@ impl<'a> Resolver<'a> {\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n+                        | InlineAsmSymRibKind\n                         | ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                             continue;\n@@ -1216,22 +1217,6 @@ impl<'a> Resolver<'a> {\n                             }\n                             return Res::Err;\n                         }\n-                        InlineAsmSymRibKind => {\n-                            let features = self.session.features_untracked();\n-                            if !features.generic_const_exprs {\n-                                if let Some(span) = finalize {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInNonTrivialAnonConst {\n-                                            name: rib_ident.name,\n-                                            is_type: true,\n-                                        },\n-                                    );\n-                                }\n-                                return Res::Err;\n-                            }\n-                            continue;\n-                        }\n                     };\n \n                     if let Some(span) = finalize {\n@@ -1262,6 +1247,7 @@ impl<'a> Resolver<'a> {\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n+                        | InlineAsmSymRibKind\n                         | ForwardGenericParamBanRibKind => continue,\n \n                         ConstantItemRibKind(trivial, _) => {\n@@ -1296,22 +1282,6 @@ impl<'a> Resolver<'a> {\n                             }\n                             return Res::Err;\n                         }\n-                        InlineAsmSymRibKind => {\n-                            let features = self.session.features_untracked();\n-                            if !features.generic_const_exprs {\n-                                if let Some(span) = finalize {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInNonTrivialAnonConst {\n-                                            name: rib_ident.name,\n-                                            is_type: false,\n-                                        },\n-                                    );\n-                                }\n-                                return Res::Err;\n-                            }\n-                            continue;\n-                        }\n                     };\n \n                     // This was an attempt to use a const parameter outside its scope."}, {"sha": "2712bfeb7b311da06aeb036f76bd954453349632", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "patch": "@@ -918,6 +918,29 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.diagnostic_metadata.current_where_predicate = previous_value;\n     }\n \n+    fn visit_inline_asm(&mut self, asm: &'ast InlineAsm) {\n+        for (op, _) in &asm.operands {\n+            match op {\n+                InlineAsmOperand::In { expr, .. }\n+                | InlineAsmOperand::Out { expr: Some(expr), .. }\n+                | InlineAsmOperand::InOut { expr, .. } => self.visit_expr(expr),\n+                InlineAsmOperand::Out { expr: None, .. } => {}\n+                InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n+                    self.visit_expr(in_expr);\n+                    if let Some(out_expr) = out_expr {\n+                        self.visit_expr(out_expr);\n+                    }\n+                }\n+                InlineAsmOperand::Const { anon_const, .. } => {\n+                    // Although this is `DefKind::AnonConst`, it is allowed to reference outer\n+                    // generic parameters like an inline const.\n+                    self.resolve_inline_const(anon_const);\n+                }\n+                InlineAsmOperand::Sym { sym } => self.visit_inline_asm_sym(sym),\n+            }\n+        }\n+    }\n+\n     fn visit_inline_asm_sym(&mut self, sym: &'ast InlineAsmSym) {\n         // This is similar to the code for AnonConst.\n         self.with_rib(ValueNS, InlineAsmSymRibKind, |this| {"}, {"sha": "55c5587804b322059b20f95c1d562059c7a61f2b", "filename": "src/test/ui/asm/generic-const.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs?ref=b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "patch": "@@ -0,0 +1,30 @@\n+// needs-asm-support\n+// build-pass\n+\n+#![feature(asm_const, asm_sym)]\n+\n+use std::arch::asm;\n+\n+fn foofoo<const N: usize>() {}\n+\n+unsafe fn foo<const N: usize>() {\n+    asm!(\"/* {0} */\", const N);\n+    asm!(\"/* {0} */\", const N + 1);\n+    asm!(\"/* {0} */\", sym foofoo::<N>);\n+}\n+\n+fn barbar<T>() {}\n+\n+unsafe fn bar<T>() {\n+    asm!(\"/* {0} */\", const std::mem::size_of::<T>());\n+    asm!(\"/* {0} */\", const std::mem::size_of::<(T, T)>());\n+    asm!(\"/* {0} */\", sym barbar::<T>);\n+    asm!(\"/* {0} */\", sym barbar::<(T, T)>);\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo::<0>();\n+        bar::<usize>();\n+    }\n+}"}, {"sha": "367a035387bc8f785017077fd42a977363db4450", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "patch": "@@ -63,7 +63,6 @@ fn main() {\n \n unsafe fn generic<T>() {\n     asm!(\"{}\", sym generic::<T>);\n-    //~^ generic parameters may not be used in const operations\n }\n \n // Const operands must be integers and must be constants."}, {"sha": "bf5ea1befb69e9ae918531b14e4a5b616be97e78", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1c6c0648e430ffc8a9acd5e90c7984d76067cd8/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=b1c6c0648e430ffc8a9acd5e90c7984d76067cd8", "patch": "@@ -33,15 +33,6 @@ LL |         asm!(\"{}\", sym x);\n    |\n    = help: `sym` operands must refer to either a function or a static\n \n-error: generic parameters may not be used in const operations\n-  --> $DIR/type-check-1.rs:65:30\n-   |\n-LL |     asm!(\"{}\", sym generic::<T>);\n-   |                              ^ cannot perform const operation using `T`\n-   |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n error[E0308]: mismatched types\n   --> $DIR/type-check-1.rs:55:26\n    |\n@@ -109,21 +100,21 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    = note: all inline asm arguments must have a statically known size\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:74:25\n+  --> $DIR/type-check-1.rs:73:25\n    |\n LL | global_asm!(\"{}\", const 0f32);\n    |                         ^^^^ expected integer, found `f32`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:76:25\n+  --> $DIR/type-check-1.rs:75:25\n    |\n LL | global_asm!(\"{}\", const 0 as *mut u8);\n    |                         ^^^^^^^^^^^^ expected integer, found *-ptr\n    |\n    = note:     expected type `{integer}`\n            found raw pointer `*mut u8`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0435.\n For more information about an error, try `rustc --explain E0277`."}]}