{"sha": "c639f44adbb6652232650084df15422093ed4f56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MzlmNDRhZGJiNjY1MjIzMjY1MDA4NGRmMTU0MjIwOTNlZDRmNTY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-11T00:08:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-11T00:18:12Z"}, "message": "Tidy up macro_rules grammar.", "tree": {"sha": "03113dd498ca1ca71d1b8750abf662d69f36c4e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03113dd498ca1ca71d1b8750abf662d69f36c4e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c639f44adbb6652232650084df15422093ed4f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c639f44adbb6652232650084df15422093ed4f56", "html_url": "https://github.com/rust-lang/rust/commit/c639f44adbb6652232650084df15422093ed4f56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c639f44adbb6652232650084df15422093ed4f56/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58807b05007b627606a8466c9559fac45970a2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/58807b05007b627606a8466c9559fac45970a2eb", "html_url": "https://github.com/rust-lang/rust/commit/58807b05007b627606a8466c9559fac45970a2eb"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "29b99dd587f46540c49cf9c8bd122f626bc91718", "filename": "doc/rust.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c639f44adbb6652232650084df15422093ed4f56/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/c639f44adbb6652232650084df15422093ed4f56/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=c639f44adbb6652232650084df15422093ed4f56", "patch": "@@ -478,11 +478,8 @@ with values. `proto!` is an item, defining a new name.\n \n ## Macros\n \n-User-defined syntax extensions are called \"macros\", and they can be defined\n-with the `macro_rules!` syntax extension. User-defined macros can currently\n-only be invoked in expression position.\n+~~~~~~~~ {.ebnf .gram}\n \n-~~~~ {.ebnf .gram}\n expr_macro_rules : \"macro_rules\" '!' ident '(' macro_rule * ')'\n macro_rule : '(' matcher * ')' \"=>\" '(' transcriber * ')' ';'\n matcher : '(' matcher * ')' | '[' matcher * ']'\n@@ -494,13 +491,18 @@ transcriber : '(' transcriber * ')' | '[' transcriber * ']'\n             | '$' '(' transcriber * ')' sep_token? [ '*' | '+' ]\n             | non_special_token\n \n-~~~~\n+~~~~~~~~\n+\n+User-defined syntax extensions are called \"macros\", and they can be defined\n+with the `macro_rules!` syntax extension. User-defined macros can currently\n+only be invoked in expression position.\n+\n (A `sep_token` is any token other than `*` and `+`. A `non_special_token` is\n any token other than a delimiter or `$`.)\n \n Macro invocations are looked up by name, and each macro rule is tried in turn;\n the first successful match is transcribed. The matching and transcribing\n-processes are close cousins, and will be described together:\n+processes are closely related, and will be described together:\n \n ### Macro By Example\n "}]}