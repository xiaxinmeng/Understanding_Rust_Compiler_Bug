{"sha": "aa05f99001924004757ebd44b54bb6a4dd30c8bd", "node_id": "C_kwDOAAsO6NoAKGFhMDVmOTkwMDE5MjQwMDQ3NTdlYmQ0NGI1NGJiNmE0ZGQzMGM4YmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-12T11:03:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-12T11:03:33Z"}, "message": "Auto merge of #102701 - flba-eb:add_qnx_nostd_support, r=cjgillot\n\nAdd tier 3 no_std AArch64/x86_64 support for the QNX Neutrino RTOS\n\nThis change allows to compile `no_std` applications for the QNX Neutrino Real-time operating system for ARM 64 bit CPUs.\nTested with QNX Neutrino 7.1.\n\nPartially discussed in [zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Adding.20QNX.20as.20target).\n\n---\n\n> ## Tier 3 target policy\n>\n> At this tier, the Rust project provides no official support for a target, so we\nplace minimal requirements on the introduction of targets.\n>\n>A proposed new tier 3 target must be reviewed and approved by a member of the\ncompiler team based on these requirements. The reviewer may choose to gauge\nbroader compiler team consensus via a [Major Change Proposal (MCP)][MCP].\n>\n>A proposed target or target-specific patch that substantially changes code\nshared with other targets (not just target-specific code) must be reviewed and\napproved by the appropriate team for that shared code before acceptance.\n>\n>- A tier 3 target must have a designated developer or developers (the \"target\n  maintainers\") on record to be CCed when issues arise regarding the target.\n  (The mechanism to track and CC such developers may evolve over time.)\n\nSee also nto-qnx.md; designated developers are:\n\n- Florian Bartels, `Florian.Bartels@elektrobit.com`, https://github.com/flba-eb\n- Tristan Roach, `TRoach@blackberry.com`, https://github.com/gh-tr\n\n> - Targets must use naming consistent with any existing targets; for instance, a\n  target for the same CPU or OS as an existing Rust target should use the same\n  name for that CPU or OS. Targets should normally use the same names and\n  naming conventions as used elsewhere in the broader ecosystem beyond Rust\n  (such as in other toolchains), unless they have a very good reason to\n  diverge. Changing the name of a target can be highly disruptive, especially\n  once the target reaches a higher tier, so getting the name right is important\n  even for a tier 3 target.\n>  - Target names should not introduce undue confusion or ambiguity unless\n    absolutely necessary to maintain ecosystem compatibility. For example, if\n    the name of the target makes people extremely likely to form incorrect\n    beliefs about what it targets, the name should be changed or augmented to\n    disambiguate it.\n\n`aarch64-unknown-nto-qnx7.1.0` and `x86_64-pc-nto-qnx7.1.0` have been chosen as these\nstrings are used in the official QNX Neutrino toolchain (for `C`/`C++`). It should also\nharmonize with the other Rust targets.\n\nThe version (`7.1.0 `) is needed because libc needs to distinguish between different\nversions (`target_env` is set to `710` for QNX Neutrino 7.1): For example, functions are removed from 7.0\nto 7.1, sometimes the signature of functions is slightly changed or size/alignment of structs.\nI'm expecting the same for future versions.\nThis works very well in e.g. `libc` (tested with 7.0 which I'm not going to support).\n\n> - Tier 3 targets may have unusual requirements to build or use, but must not\n  create legal issues or impose onerous legal terms for the Rust project or for\n  Rust developers or users.\n>  - The target must not introduce license incompatibilities.\n\nNo issue as far as I can see.\n\n>  - Anything added to the Rust repository must be under the standard Rust\n    license (`MIT OR Apache-2.0`).\n\nOk\n\n>  - The target must not cause the Rust tools or libraries built for any other\n    host (even when supporting cross-compilation to the target) to depend\n    on any new dependency less permissive than the Rust licensing policy. This\n    applies whether the dependency is a Rust crate that would require adding\n    new license exceptions (as specified by the `tidy` tool in the\n    rust-lang/rust repository), or whether the dependency is a native library\n    or binary. In other words, the introduction of the target must not cause a\n    user installing or running a version of Rust or the Rust tools to be\n    subject to any new license requirements.\n\nNo change for host tools. When cross-compiling for QNX Neutrino, the compiler/linker\ndriver \"qcc\" is called. It should be possible (but not tested) to use other\n(OSS) compilers/linkers to produce working binaries.\n\n>  - Compiling, linking, and emitting functional binaries, libraries, or other\n    code for the target (whether hosted on the target itself or cross-compiling\n    from another target) must not depend on proprietary (non-FOSS) libraries.\n    Host tools built for the target itself may depend on the ordinary runtime\n    libraries supplied by the platform and commonly used by other applications\n    built for the target, but those libraries must not be required for code\n    generation for the target; cross-compilation to the target must not require\n    such libraries at all. For instance, `rustc` built for the target may\n    depend on a common proprietary C runtime library or console output library,\n    but must not depend on a proprietary code generation library or code\n    optimization library. Rust's license permits such combinations, but the\n    Rust project has no interest in maintaining such combinations within the\n    scope of Rust itself, even at tier 3.\n\nOnly rustc is required for code generation (i.e. no additional libraries to\ngenerate code). Linking of executables requires the ordinary runtime libraries\n`crt` and `libc`.\n\n>  - \"onerous\" here is an intentionally subjective term. At a minimum, \"onerous\"\n    legal/licensing terms include but are *not* limited to: non-disclosure\n    requirements, non-compete requirements, contributor license agreements\n    (CLAs) or equivalent, \"non-commercial\"/\"research-only\"/etc terms,\n    requirements conditional on the employer or employment of any particular\n    Rust developers, revocable terms, any requirements that create liability\n    for the Rust project or its developers or users, or any requirements that\n    adversely affect the livelihood or prospects of the Rust project or its\n    developers or users.\n>- Neither this policy nor any decisions made regarding targets shall create any\n  binding agreement or estoppel by any party. If any member of an approving\n  Rust team serves as one of the maintainers of a target, or has any legal or\n  employment requirement (explicit or implicit) that might affect their\n  decisions regarding a target, they must recuse themselves from any approval\n  decisions regarding the target's tier status, though they may otherwise\n  participate in discussions.\n>  - This requirement does not prevent part or all of this policy from being\n    cited in an explicit contract or work agreement (e.g. to implement or\n    maintain support for a target). This requirement exists to ensure that a\n    developer or team responsible for reviewing and approving a target does not\n    face any legal threats or obligations that would prevent them from freely\n    exercising their judgment in such approval, even if such judgment involves\n    subjective matters or goes beyond the letter of these requirements.\n\nI see no issues with any of the above.\n\n>- Tier 3 targets should attempt to implement as much of the standard libraries\n  as possible and appropriate (`core` for most targets, `alloc` for targets\n  that can support dynamic memory allocation, `std` for targets with an\n  operating system or equivalent layer of system-provided functionality), but\n  may leave some code unimplemented (either unavailable or stubbed out as\n  appropriate), whether because the target makes it impossible to implement or\n  challenging to implement. The authors of pull requests are not obligated to\n  avoid calling any portions of the standard library on the basis of a tier 3\n  target not implementing those portions.\n\n`core` and `alloc` should be working (no change required). `std` implementation\nis ongoing and will be provided separately.\n\n>- The target must provide documentation for the Rust community explaining how\n  to build for the target, using cross-compilation if possible. If the target\n  supports running binaries, or running tests (even if they do not pass), the\n  documentation must explain how to run such binaries or tests for the target,\n  using emulation if possible or dedicated hardware if necessary.\n\nsee nto-qnx.md\n\n>- Tier 3 targets must not impose burden on the authors of pull requests, or\n  other developers in the community, to maintain the target. In particular,\n  do not post comments (automated or manual) on a PR that derail or suggest a\n  block on the PR based on a tier 3 target. Do not send automated messages or\n  notifications (via any medium, including via ``@`)` to a PR author or others\n  involved with a PR regarding a tier 3 target, unless they have opted into\n  such messages.\n>  - Backlinks such as those generated by the issue/PR tracker when linking to\n    an issue or PR are not considered a violation of this policy, within\n    reason. However, such messages (even on a separate repository) must not\n    generate notifications to anyone involved with a PR who has not requested\n    such notifications.\n\nOk\n\n>- Patches adding or updating tier 3 targets must not break any existing tier 2\n  or tier 1 target, and must not knowingly break another tier 3 target without\n  approval of either the compiler team or the maintainers of the other tier 3\n  target.\n>  - In particular, this may come up when working on closely related targets,\n    such as variations of the same architecture with different features. Avoid\n    introducing unconditional uses of features that another variation of the\n    target may not have; use conditional compilation or runtime detection, as\n    appropriate, to let each target run code supported by that target.\n\nOk", "tree": {"sha": "bdac6283be3373e2c6bbcccb1aeb77a1340249f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdac6283be3373e2c6bbcccb1aeb77a1340249f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa05f99001924004757ebd44b54bb6a4dd30c8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa05f99001924004757ebd44b54bb6a4dd30c8bd", "html_url": "https://github.com/rust-lang/rust/commit/aa05f99001924004757ebd44b54bb6a4dd30c8bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa05f99001924004757ebd44b54bb6a4dd30c8bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4e73c4a4212922f0c24c6743b3837902619200", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4e73c4a4212922f0c24c6743b3837902619200", "html_url": "https://github.com/rust-lang/rust/commit/5f4e73c4a4212922f0c24c6743b3837902619200"}, {"sha": "a4cafc8af82776b33539de7f585788f5d5857fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cafc8af82776b33539de7f585788f5d5857fe4", "html_url": "https://github.com/rust-lang/rust/commit/a4cafc8af82776b33539de7f585788f5d5857fe4"}], "stats": {"total": 195, "additions": 194, "deletions": 1}, "files": [{"sha": "916b6137b650a0a2a60f89a6d85db37d95257146", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_nto_qnx_710.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aa05f99001924004757ebd44b54bb6a4dd30c8bd/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa05f99001924004757ebd44b54bb6a4dd30c8bd/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs?ref=aa05f99001924004757ebd44b54bb6a4dd30c8bd", "patch": "@@ -0,0 +1,28 @@\n+use super::nto_qnx_base;\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"aarch64-unknown-unknown\".into(),\n+        pointer_width: 64,\n+        // from: https://llvm.org/docs/LangRef.html#data-layout\n+        // e         = little endian\n+        // m:e       = ELF mangling: Private symbols get a .L prefix\n+        // i8:8:32   = 8-bit-integer, minimum_alignment=8, preferred_alignment=32\n+        // i16:16:32 = 16-bit-integer, minimum_alignment=16, preferred_alignment=32\n+        // i64:64    = 64-bit-integer, minimum_alignment=64, preferred_alignment=64\n+        // i128:128  = 128-bit-integer, minimum_alignment=128, preferred_alignment=128\n+        // n32:64    = 32 and 64 are native integer widths; Elements of this set are considered to support most general arithmetic operations efficiently.\n+        // S128      = 128 bits are the natural alignment of the stack in bits.\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: TargetOptions {\n+            max_atomic_width: Some(128),\n+            pre_link_args: TargetOptions::link_args(\n+                LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+                &[\"-Vgcc_ntoaarch64le_cxx\"],\n+            ),\n+            ..nto_qnx_base::opts()\n+        },\n+    }\n+}"}, {"sha": "e809f646860b0b2f55778715e24b8f3775a15496", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa05f99001924004757ebd44b54bb6a4dd30c8bd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa05f99001924004757ebd44b54bb6a4dd30c8bd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=aa05f99001924004757ebd44b54bb6a4dd30c8bd", "patch": "@@ -74,6 +74,7 @@ mod linux_musl_base;\n mod linux_uclibc_base;\n mod msvc_base;\n mod netbsd_base;\n+mod nto_qnx_base;\n mod openbsd_base;\n mod redox_base;\n mod solaris_base;\n@@ -1242,6 +1243,9 @@ supported_targets! {\n     (\"x86_64-unknown-none\", x86_64_unknown_none),\n \n     (\"mips64-openwrt-linux-musl\", mips64_openwrt_linux_musl),\n+\n+    (\"aarch64-unknown-nto-qnx7.1.0\", aarch64_unknown_nto_qnx_710),\n+    (\"x86_64-pc-nto-qnx7.1.0\", x86_64_pc_nto_qnx710),\n }\n \n /// Cow-Vec-Str: Cow<'static, [Cow<'static, str>]>"}, {"sha": "6fb581ef5ce34195f5928910744355e43e5e9c19", "filename": "compiler/rustc_target/src/spec/nto_qnx_base.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aa05f99001924004757ebd44b54bb6a4dd30c8bd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnto_qnx_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa05f99001924004757ebd44b54bb6a4dd30c8bd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnto_qnx_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnto_qnx_base.rs?ref=aa05f99001924004757ebd44b54bb6a4dd30c8bd", "patch": "@@ -0,0 +1,19 @@\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        crt_static_respected: true,\n+        dynamic_linking: true,\n+        env: \"nto71\".into(),\n+        executables: true,\n+        families: cvs![\"unix\"],\n+        has_rpath: true,\n+        has_thread_local: false,\n+        linker: Some(\"qcc\".into()),\n+        os: \"nto\".into(),\n+        position_independent_executables: true,\n+        static_position_independent_executables: true,\n+        relro_level: RelroLevel::Full,\n+        ..Default::default()\n+    }\n+}"}, {"sha": "e9b3acee2e7f1e1ea79766b0b60e4ebe93e2be06", "filename": "compiler/rustc_target/src/spec/x86_64_pc_nto_qnx710.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa05f99001924004757ebd44b54bb6a4dd30c8bd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_nto_qnx710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa05f99001924004757ebd44b54bb6a4dd30c8bd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_nto_qnx710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_nto_qnx710.rs?ref=aa05f99001924004757ebd44b54bb6a4dd30c8bd", "patch": "@@ -0,0 +1,21 @@\n+use super::nto_qnx_base;\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"x86_64-pc-unknown\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .into(),\n+        arch: \"x86_64\".into(),\n+        options: TargetOptions {\n+            cpu: \"x86-64\".into(),\n+            max_atomic_width: Some(64),\n+            pre_link_args: TargetOptions::link_args(\n+                LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+                &[\"-Vgcc_ntox86_64_cxx\"],\n+            ),\n+            ..nto_qnx_base::opts()\n+        },\n+    }\n+}"}, {"sha": "2d3b830946145825c91580157c78e7de62c3fa95", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa05f99001924004757ebd44b54bb6a4dd30c8bd/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa05f99001924004757ebd44b54bb6a4dd30c8bd/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=aa05f99001924004757ebd44b54bb6a4dd30c8bd", "patch": "@@ -33,6 +33,7 @@\n     - [nvptx64-nvidia-cuda](platform-support/nvptx64-nvidia-cuda.md)\n     - [riscv32imac-unknown-xous-elf](platform-support/riscv32imac-unknown-xous-elf.md)\n     - [*-pc-windows-gnullvm](platform-support/pc-windows-gnullvm.md)\n+    - [\\*-nto-qnx-\\*](platform-support/nto-qnx.md)\n     - [*-unknown-openbsd](platform-support/openbsd.md)\n     - [\\*-unknown-uefi](platform-support/unknown-uefi.md)\n     - [wasm64-unknown-unknown](platform-support/wasm64-unknown-unknown.md)"}, {"sha": "28929acb9b48dd667ef0c937c30013cf16d1b227", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa05f99001924004757ebd44b54bb6a4dd30c8bd/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa05f99001924004757ebd44b54bb6a4dd30c8bd/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=aa05f99001924004757ebd44b54bb6a4dd30c8bd", "patch": "@@ -214,6 +214,7 @@ target | std | host | notes\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n [`aarch64-nintendo-switch-freestanding`](platform-support/aarch64-nintendo-switch-freestanding.md) | * |  | ARM64 Nintendo Switch, Horizon\n [`aarch64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n+[`aarch64-unknown-nto-qnx7.1.0`](platform-support/nto-qnx.md) | ? |  | ARM64 QNX Neutrino 7.1 RTOS |\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | \u2713 |  | ARM64 HermitCore\n `aarch64-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (ILP32 ABI)\n@@ -303,6 +304,7 @@ target | std | host | notes\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n [`x86_64-apple-watchos-sim`](platform-support/apple-watchos.md) | \u2713 | | x86 64-bit Apple WatchOS simulator\n+[`x86_64-pc-nto-qnx7.1.0`](platform-support/nto-qnx.md) | ? |  | x86 64-bit QNX Neutrino 7.1 RTOS |\n [`x86_64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `x86_64-pc-windows-msvc` | * |  | 64-bit Windows XP support\n `x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos"}, {"sha": "2f6ea94d113a94af0e4c4f410dae0f94bbb49bb8", "filename": "src/doc/rustc/src/platform-support/nto-qnx.md", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/aa05f99001924004757ebd44b54bb6a4dd30c8bd/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa05f99001924004757ebd44b54bb6a4dd30c8bd/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md?ref=aa05f99001924004757ebd44b54bb6a4dd30c8bd", "patch": "@@ -0,0 +1,118 @@\n+# nto-qnx\n+\n+**Tier: 3**\n+\n+[BlackBerry\u00ae QNX\u00ae][BlackBerry] Neutrino (nto) Real-time operating system.\n+The support has been implemented jointly by [Elektrobit Automotive GmbH][Elektrobit]\n+and [BlackBerry][BlackBerry].\n+\n+[BlackBerry]: https://blackberry.qnx.com\n+[Elektrobit]: https://www.elektrobit.com\n+\n+## Target maintainers\n+\n+- Florian Bartels, `Florian.Bartels@elektrobit.com`, https://github.com/flba-eb\n+- Tristan Roach, `TRoach@blackberry.com`, https://github.com/gh-tr\n+\n+## Requirements\n+\n+Currently, only cross-compilation for QNX Neutrino on AArch64 and x86_64 are supported (little endian).\n+Adding other architectures that are supported by QNX Neutrino is possible.\n+\n+The standard library does not yet support QNX Neutrino. Therefore, only `no_std` code can\n+be compiled.\n+\n+`core` and `alloc` (with default allocator) are supported.\n+\n+Applications must link against `libc.so` (see example). This is required because applications\n+always link against the `crt` library and `crt` depends on `libc.so`.\n+\n+The correct version of `qcc` must be available by setting the `$PATH` variable (e.g. by sourcing `qnxsdp-env.sh` of the\n+QNX Neutrino toolchain).\n+\n+### Small example application\n+\n+```rust,ignore (platform-specific)\n+#![no_std]\n+#![no_main]\n+#![feature(lang_items)]\n+\n+// We must always link against libc, even if no external functions are used\n+// \"extern C\" - Block can be empty but must be present\n+#[link(name = \"c\")]\n+extern \"C\" {\n+    pub fn printf(format: *const core::ffi::c_char, ...) -> core::ffi::c_int;\n+}\n+\n+#[no_mangle]\n+pub extern \"C\" fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    const HELLO: &'static str = \"Hello World, the answer is %d\\n\\0\";\n+    unsafe {\n+        printf(HELLO.as_ptr() as *const _, 42);\n+    }\n+    0\n+}\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_handler]\n+fn panic(_panic: &PanicInfo<'_>) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+pub extern \"C\" fn rust_eh_personality() {}\n+```\n+\n+The QNX Neutrino support of Rust has been tested with QNX Neutrino 7.1.\n+\n+There are no further known requirements.\n+\n+## Conditional compilation\n+\n+For conditional compilation, following QNX Neutrino specific attributes are defined:\n+\n+- `target_os` = `\"nto\"`\n+- `target_env` = `\"nto71\"` (for QNX Neutrino 7.1)\n+\n+## Building the target\n+\n+1. Create a `config.toml`\n+\n+Example content:\n+\n+```toml\n+profile = \"compiler\"\n+changelog-seen = 2\n+```\n+\n+2. Compile the Rust toolchain for an `x86_64-unknown-linux-gnu` host (for both `aarch64` and `x86_64` targets)\n+\n+Run the following:\n+\n+```bash\n+env \\\n+    CC_aarch64-unknown-nto-qnx7.1.0=\"qcc\" \\\n+    CFLAGS_aarch64-unknown-nto-qnx7.1.0=\"-Vgcc_ntoaarch64le_cxx\" \\\n+    CXX_aarch64-unknown-nto-qnx7.1.0=\"qcc\" \\\n+    AR_aarch64_unknown_nto_qnx7.1.0=\"ntoaarch64-ar\" \\\n+    CC_x86_64-pc-nto-qnx7.1.0=\"qcc\" \\\n+    CFLAGS_x86_64-pc-nto-qnx7.1.0=\"-Vgcc_ntox86_64_cxx\" \\\n+    CXX_x86_64-pc-nto-qnx7.1.0=\"qcc\" \\\n+    AR_x86_64_pc_nto_qnx7.1.0=\"ntox86_64-ar\" \\\n+        ./x.py build --target aarch64-unknown-nto-qnx7.1.0 --target x86_64-pc-nto-qnx7.1.0 --target x86_64-unknown-linux-gnu rustc library/core library/alloc/\n+```\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for this target, you must either build Rust with the target enabled (see \"Building the target\" above), or build your own copy of  `core` by using\n+`build-std` or similar.\n+\n+## Testing\n+\n+Compiled executables can directly be run on QNX Neutrino.\n+\n+## Cross-compilation toolchains and C code\n+\n+Compiling C code requires the same environment variables to be set as compiling the Rust toolchain (see above), to ensure `qcc` is used with proper arguments. To ensure compatibility, do not specify any further arguments that for example change calling conventions or memory layout."}, {"sha": "6c0dc05ba2330c2a03d1e18fbed4b9eff9847dde", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa05f99001924004757ebd44b54bb6a4dd30c8bd/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa05f99001924004757ebd44b54bb6a4dd30c8bd/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=aa05f99001924004757ebd44b54bb6a4dd30c8bd", "patch": "@@ -6,7 +6,7 @@ LL | #[cfg(target_os = \"linuz\")]\n    |                   |\n    |                   help: did you mean: `\"linux\"`\n    |\n-   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n+   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, nto, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value"}]}