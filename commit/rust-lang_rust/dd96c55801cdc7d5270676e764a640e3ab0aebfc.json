{"sha": "dd96c55801cdc7d5270676e764a640e3ab0aebfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOTZjNTU4MDFjZGM3ZDUyNzA2NzZlNzY0YTY0MGUzYWIwYWViZmM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-03-29T07:57:16Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-03-29T07:57:16Z"}, "message": "Merge pull request #886 from matklad/make-illegal-states-unrepresentable\n\nIntroduce verbosity enum", "tree": {"sha": "d1627b6c6eec2eeb1d60004bfd9d5f752f693ac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1627b6c6eec2eeb1d60004bfd9d5f752f693ac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd96c55801cdc7d5270676e764a640e3ab0aebfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd96c55801cdc7d5270676e764a640e3ab0aebfc", "html_url": "https://github.com/rust-lang/rust/commit/dd96c55801cdc7d5270676e764a640e3ab0aebfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd96c55801cdc7d5270676e764a640e3ab0aebfc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "652653374544237fda15e15bf2c351995eb8f4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/652653374544237fda15e15bf2c351995eb8f4c2", "html_url": "https://github.com/rust-lang/rust/commit/652653374544237fda15e15bf2c351995eb8f4c2"}, {"sha": "c7e51d3994f3fc885bfb94b32232084ad6f94834", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e51d3994f3fc885bfb94b32232084ad6f94834", "html_url": "https://github.com/rust-lang/rust/commit/c7e51d3994f3fc885bfb94b32232084ad6f94834"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "c033851f98abf8af0e5d906103987b6cf18d123e", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dd96c55801cdc7d5270676e764a640e3ab0aebfc/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd96c55801cdc7d5270676e764a640e3ab0aebfc/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=dd96c55801cdc7d5270676e764a640e3ab0aebfc", "patch": "@@ -49,19 +49,22 @@ fn execute() -> i32 {\n         }\n     };\n \n-    let (verbose, quiet) = (matches.opt_present(\"v\"), matches.opt_present(\"q\"));\n-\n-    if verbose && quiet {\n-        print_usage(&opts, \"quiet mode and verbose mode are not compatible\");\n-        return failure;\n-    }\n+    let verbosity = match (matches.opt_present(\"v\"), matches.opt_present(\"q\")) {\n+        (false, false) => Verbosity::Normal,\n+        (false, true) => Verbosity::Quiet,\n+        (true, false) => Verbosity::Verbose,\n+        (true, true) => {\n+            print_usage(&opts, \"quiet mode and verbose mode are not compatible\");\n+            return failure;\n+        }\n+    };\n \n     if matches.opt_present(\"h\") {\n         print_usage(&opts, \"\");\n         return success;\n     }\n \n-    match format_crate(verbose, quiet) {\n+    match format_crate(verbosity) {\n         Err(e) => {\n             print_usage(&opts, &e.to_string());\n             failure\n@@ -83,21 +86,28 @@ fn print_usage(opts: &Options, reason: &str) {\n              opts.usage(&msg));\n }\n \n-fn format_crate(verbose: bool, quiet: bool) -> Result<ExitStatus, std::io::Error> {\n+#[derive(Debug, Clone, Copy, PartialEq)]\n+pub enum Verbosity {\n+    Verbose,\n+    Normal,\n+    Quiet,\n+}\n+\n+fn format_crate(verbosity: Verbosity) -> Result<ExitStatus, std::io::Error> {\n     let targets = try!(get_targets());\n \n     // Currently only bin and lib files get formatted\n     let files: Vec<_> = targets.into_iter()\n                                .filter(|t| t.kind.is_lib() | t.kind.is_bin())\n                                .inspect(|t| {\n-                                   if verbose {\n+                                   if verbosity == Verbosity::Verbose {\n                                        println!(\"[{:?}] {:?}\", t.kind, t.path)\n                                    }\n                                })\n                                .map(|t| t.path)\n                                .collect();\n \n-    format_files(&files, &get_fmt_args(), verbose, quiet)\n+    format_files(&files, &get_fmt_args(), verbosity)\n }\n \n fn get_fmt_args() -> Vec<String> {\n@@ -173,15 +183,14 @@ fn target_from_json(jtarget: &Json) -> Target {\n \n fn format_files(files: &Vec<PathBuf>,\n                 fmt_args: &Vec<String>,\n-                verbose: bool,\n-                quiet: bool)\n+                verbosity: Verbosity)\n                 -> Result<ExitStatus, std::io::Error> {\n-    let stdout = if quiet {\n+    let stdout = if verbosity == Verbosity::Quiet {\n         std::process::Stdio::null()\n     } else {\n         std::process::Stdio::inherit()\n     };\n-    if verbose {\n+    if verbosity == Verbosity::Verbose {\n         print!(\"rustfmt\");\n         for a in fmt_args.iter() {\n             print!(\" {}\", a);"}]}