{"sha": "0847b79adaf209e9d174e315e3b49127643312c6", "node_id": "C_kwDOAAsO6NoAKDA4NDdiNzlhZGFmMjA5ZTlkMTc0ZTMxNWUzYjQ5MTI3NjQzMzEyYzY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-18T08:12:49Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T15:28:59Z"}, "message": "Remove `ResolverTree`", "tree": {"sha": "726af5fa91a56aa145cbd8f51bd509db771ee2b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/726af5fa91a56aa145cbd8f51bd509db771ee2b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0847b79adaf209e9d174e315e3b49127643312c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0847b79adaf209e9d174e315e3b49127643312c6", "html_url": "https://github.com/rust-lang/rust/commit/0847b79adaf209e9d174e315e3b49127643312c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0847b79adaf209e9d174e315e3b49127643312c6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a47113efa37e690bfd5a7695e293d4d0c0c7a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a47113efa37e690bfd5a7695e293d4d0c0c7a88", "html_url": "https://github.com/rust-lang/rust/commit/2a47113efa37e690bfd5a7695e293d4d0c0c7a88"}], "stats": {"total": 29, "additions": 4, "deletions": 25}, "files": [{"sha": "7bd90d7e3455b7e365e165afd1c7d5cce64e01ac", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0847b79adaf209e9d174e315e3b49127643312c6/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0847b79adaf209e9d174e315e3b49127643312c6/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=0847b79adaf209e9d174e315e3b49127643312c6", "patch": "@@ -1,4 +1,4 @@\n-use crate::{NameBinding, NameBindingKind, Resolver, ResolverTree};\n+use crate::{NameBinding, NameBindingKind, Resolver};\n use rustc_ast::ast;\n use rustc_ast::visit;\n use rustc_ast::visit::Visitor;\n@@ -100,11 +100,7 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         for (binding, eff_vis) in visitor.import_effective_visibilities.iter() {\n             let NameBindingKind::Import { import, .. } = binding.kind else { unreachable!() };\n             if let Some(node_id) = import.id() {\n-                r.effective_visibilities.update_eff_vis(\n-                    r.local_def_id(node_id),\n-                    eff_vis,\n-                    ResolverTree(&r.tcx.untracked()),\n-                )\n+                r.effective_visibilities.update_eff_vis(r.local_def_id(node_id), eff_vis, r.tcx)\n             }\n         }\n "}, {"sha": "66034baaa0b6b7a89b4ab2ad02b591763ca11291", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0847b79adaf209e9d174e315e3b49127643312c6/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0847b79adaf209e9d174e315e3b49127643312c6/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=0847b79adaf209e9d174e315e3b49127643312c6", "patch": "@@ -44,7 +44,7 @@ use rustc_middle::span_bug;\n use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools, TyCtxt};\n use rustc_middle::ty::{ResolverGlobalCtxt, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_session::cstore::{CrateStore, Untracked};\n+use rustc_session::cstore::CrateStore;\n use rustc_session::lint::LintBuffer;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n@@ -1113,27 +1113,10 @@ impl<'a, 'tcx> AsMut<Resolver<'a, 'tcx>> for Resolver<'a, 'tcx> {\n     }\n }\n \n-/// A minimal subset of resolver that can implemenent `DefIdTree`, sometimes\n-/// required to satisfy borrow checker by avoiding borrowing the whole resolver.\n-#[derive(Clone, Copy)]\n-struct ResolverTree<'a>(&'a Untracked);\n-\n-impl DefIdTree for ResolverTree<'_> {\n-    #[inline]\n-    fn opt_parent(self, id: DefId) -> Option<DefId> {\n-        let ResolverTree(Untracked { definitions, cstore, .. }) = self;\n-        match id.as_local() {\n-            Some(id) => definitions.read().def_key(id).parent,\n-            None => cstore.read().as_any().downcast_ref::<CStore>().unwrap().def_key(id).parent,\n-        }\n-        .map(|index| DefId { index, ..id })\n-    }\n-}\n-\n impl<'a, 'b, 'tcx> DefIdTree for &'a Resolver<'b, 'tcx> {\n     #[inline]\n     fn opt_parent(self, id: DefId) -> Option<DefId> {\n-        ResolverTree(&self.tcx.untracked()).opt_parent(id)\n+        self.tcx.opt_parent(id)\n     }\n }\n "}]}