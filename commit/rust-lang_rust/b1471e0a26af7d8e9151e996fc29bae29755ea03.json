{"sha": "b1471e0a26af7d8e9151e996fc29bae29755ea03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNDcxZTBhMjZhZjdkOGU5MTUxZTk5NmZjMjliYWUyOTc1NWVhMDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-11T13:03:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-11T13:03:53Z"}, "message": "Rollup merge of #69888 - wesleywiser:miri_exception_env_var_to_session_var, r=RalfJung\n\n[Miri] Use a session variable instead of checking for an env var always\n\nIn CTFE heavy code, checking the env var everytime is inefficient. We\ncan do a lot better by using a `Session` variable instead.\n\nr? @RalfJung\n\nPart of #69297", "tree": {"sha": "a96bbd041a7e2e0c3de38800de73d2d705f6a4c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a96bbd041a7e2e0c3de38800de73d2d705f6a4c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1471e0a26af7d8e9151e996fc29bae29755ea03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeaOG5CRBK7hj4Ov3rIwAAdHIIACgwU69nCkNEtyffq1F+0AiI\n6RTGZuhF1jsCP8fixNv/xu/z+C3eAtzM1ADGHtbxq929agiuFn4LNTC5/NRtYMTA\nf50WlcBc9S8k7ePseOKV1Tu0dZGqxXjQoM3NNyh0N7AOLE9ECLVG3AtMcNxe5szu\nvR1BijOrU+LFmFCHdPB9lsW5dBIkjLwBFjnFIuog5mpbXZ2Aw98FAem8shKmB4dd\nqjyt1agWqe7qWcrZMo1O5fd3/VyzdDuWjr4svBS7o07QgfmlAAINjkRBDkjf8mPu\n4HiSm3yo2LuBDmUS5p0cME66Uh5LjmVKl2FkZ6T+wnxG0iBucqWpb/q4YtnHcjo=\n=dih3\n-----END PGP SIGNATURE-----\n", "payload": "tree a96bbd041a7e2e0c3de38800de73d2d705f6a4c2\nparent e838383ff895aa0393c358effc5707f1bdf83baf\nparent 5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583931833 +0100\ncommitter GitHub <noreply@github.com> 1583931833 +0100\n\nRollup merge of #69888 - wesleywiser:miri_exception_env_var_to_session_var, r=RalfJung\n\n[Miri] Use a session variable instead of checking for an env var always\n\nIn CTFE heavy code, checking the env var everytime is inefficient. We\ncan do a lot better by using a `Session` variable instead.\n\nr? @RalfJung\n\nPart of #69297\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1471e0a26af7d8e9151e996fc29bae29755ea03", "html_url": "https://github.com/rust-lang/rust/commit/b1471e0a26af7d8e9151e996fc29bae29755ea03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1471e0a26af7d8e9151e996fc29bae29755ea03/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e838383ff895aa0393c358effc5707f1bdf83baf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e838383ff895aa0393c358effc5707f1bdf83baf", "html_url": "https://github.com/rust-lang/rust/commit/e838383ff895aa0393c358effc5707f1bdf83baf"}, {"sha": "5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7", "html_url": "https://github.com/rust-lang/rust/commit/5357f83ee81bd1c11b4223f1531d9b2e2cb66ae7"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "0b33408edf02d0cb31c06a436773dc68325b71f0", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b1471e0a26af7d8e9151e996fc29bae29755ea03/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1471e0a26af7d8e9151e996fc29bae29755ea03/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=b1471e0a26af7d8e9151e996fc29bae29755ea03", "patch": "@@ -5,15 +5,18 @@ use crate::mir;\n use crate::mir::interpret::ConstValue;\n use crate::ty::layout::{Align, LayoutError, Size};\n use crate::ty::query::TyCtxtAt;\n+use crate::ty::tls;\n use crate::ty::{self, layout, Ty};\n \n use backtrace::Backtrace;\n+use rustc_data_structures::sync::Lock;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_macros::HashStable;\n+use rustc_session::CtfeBacktrace;\n use rustc_span::{Pos, Span};\n use rustc_target::spec::abi::Abi;\n-use std::{any::Any, env, fmt};\n+use std::{any::Any, fmt};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n pub enum ErrorHandled {\n@@ -257,21 +260,25 @@ impl From<ErrorHandled> for InterpErrorInfo<'_> {\n \n impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n     fn from(kind: InterpError<'tcx>) -> Self {\n-        let backtrace = match env::var(\"RUSTC_CTFE_BACKTRACE\") {\n-            // Matching `RUST_BACKTRACE` -- we treat \"0\" the same as \"not present\".\n-            Ok(ref val) if val != \"0\" => {\n-                let mut backtrace = Backtrace::new_unresolved();\n+        let capture_backtrace = tls::with_context_opt(|ctxt| {\n+            if let Some(ctxt) = ctxt {\n+                *Lock::borrow(&ctxt.tcx.sess.ctfe_backtrace)\n+            } else {\n+                CtfeBacktrace::Disabled\n+            }\n+        });\n \n-                if val == \"immediate\" {\n-                    // Print it now.\n-                    print_backtrace(&mut backtrace);\n-                    None\n-                } else {\n-                    Some(Box::new(backtrace))\n-                }\n+        let backtrace = match capture_backtrace {\n+            CtfeBacktrace::Disabled => None,\n+            CtfeBacktrace::Capture => Some(Box::new(Backtrace::new_unresolved())),\n+            CtfeBacktrace::Immediate => {\n+                // Print it now.\n+                let mut backtrace = Backtrace::new_unresolved();\n+                print_backtrace(&mut backtrace);\n+                None\n             }\n-            _ => None,\n         };\n+\n         InterpErrorInfo { kind, backtrace }\n     }\n }"}, {"sha": "8cda95783a8a9544f5d152b5fb23dd58936ce5c6", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b1471e0a26af7d8e9151e996fc29bae29755ea03/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1471e0a26af7d8e9151e996fc29bae29755ea03/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=b1471e0a26af7d8e9151e996fc29bae29755ea03", "patch": "@@ -49,6 +49,18 @@ pub struct OptimizationFuel {\n     out_of_fuel: bool,\n }\n \n+/// The behavior of the CTFE engine when an error occurs with regards to backtraces.\n+#[derive(Clone, Copy)]\n+pub enum CtfeBacktrace {\n+    /// Do nothing special, return the error as usual without a backtrace.\n+    Disabled,\n+    /// Capture a backtrace at the point the error is created and return it in the error\n+    /// (to be printed later if/when the error ever actually gets shown to the user).\n+    Capture,\n+    /// Capture a backtrace at the point the error is created and immediately print it out.\n+    Immediate,\n+}\n+\n /// Represents the data associated with a compilation\n /// session for a single crate.\n pub struct Session {\n@@ -139,6 +151,11 @@ pub struct Session {\n     /// Path for libraries that will take preference over libraries shipped by Rust.\n     /// Used by windows-gnu targets to priortize system mingw-w64 libraries.\n     pub system_library_path: OneThread<RefCell<Option<Option<PathBuf>>>>,\n+\n+    /// Tracks the current behavior of the CTFE engine when an error occurs.\n+    /// Options range from returning the error without a backtrace to returning an error\n+    /// and immediately printing the backtrace to stderr.\n+    pub ctfe_backtrace: Lock<CtfeBacktrace>,\n }\n \n pub struct PerfStats {\n@@ -1040,6 +1057,12 @@ fn build_session_(\n         sopts.debugging_opts.time_passes,\n     );\n \n+    let ctfe_backtrace = Lock::new(match env::var(\"RUSTC_CTFE_BACKTRACE\") {\n+        Ok(ref val) if val == \"immediate\" => CtfeBacktrace::Immediate,\n+        Ok(ref val) if val != \"0\" => CtfeBacktrace::Capture,\n+        _ => CtfeBacktrace::Disabled,\n+    });\n+\n     let sess = Session {\n         target: target_cfg,\n         host,\n@@ -1078,6 +1101,7 @@ fn build_session_(\n         trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),\n         system_library_path: OneThread::new(RefCell::new(Default::default())),\n+        ctfe_backtrace,\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}]}