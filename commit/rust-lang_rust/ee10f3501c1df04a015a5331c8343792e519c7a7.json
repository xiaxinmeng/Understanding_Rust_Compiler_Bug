{"sha": "ee10f3501c1df04a015a5331c8343792e519c7a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMTBmMzUwMWMxZGYwNGEwMTVhNTMzMWM4MzQzNzkyZTUxOWM3YTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-04T23:21:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:31:48Z"}, "message": "std: Make connect_timeout return Err on zero duration\n\n[breaking-change]", "tree": {"sha": "662384b040dcb8633d1a9157f7ff31ba1d2de452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/662384b040dcb8633d1a9157f7ff31ba1d2de452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee10f3501c1df04a015a5331c8343792e519c7a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee10f3501c1df04a015a5331c8343792e519c7a7", "html_url": "https://github.com/rust-lang/rust/commit/ee10f3501c1df04a015a5331c8343792e519c7a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee10f3501c1df04a015a5331c8343792e519c7a7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a391934ba8fb99b999f9956e855316692612f1ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a391934ba8fb99b999f9956e855316692612f1ab", "html_url": "https://github.com/rust-lang/rust/commit/a391934ba8fb99b999f9956e855316692612f1ab"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "6d03d4a8eed6dba4a6da425f8fa0f6e085aa11d0", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee10f3501c1df04a015a5331c8343792e519c7a7/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee10f3501c1df04a015a5331c8343792e519c7a7/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=ee10f3501c1df04a015a5331c8343792e519c7a7", "patch": "@@ -27,6 +27,7 @@ use io::net::addrinfo::get_host_addresses;\n use io::net::ip::SocketAddr;\n use io::{IoError, ConnectionFailed, InvalidInput};\n use io::{Reader, Writer, Listener, Acceptor};\n+use io::{standard_error, TimedOut};\n use from_str::FromStr;\n use kinds::Send;\n use option::{None, Some, Option};\n@@ -102,13 +103,14 @@ impl TcpStream {\n     /// Note that the `addr` argument may one day be split into a separate host\n     /// and port, similar to the API seen in `connect`.\n     ///\n-    /// # Failure\n-    ///\n-    /// Fails on a `timeout` of zero or negative duration.\n+    /// If a `timeout` with zero or negative duration is specified then\n+    /// the function returns `Err`, with the error kind set to `TimedOut`.\n     #[experimental = \"the timeout argument may eventually change types\"]\n     pub fn connect_timeout(addr: SocketAddr,\n                            timeout: Duration) -> IoResult<TcpStream> {\n-        assert!(timeout > Duration::milliseconds(0));\n+        if timeout <= Duration::milliseconds(0) {\n+            return standard_error(TimedOut);\n+        }\n \n         let SocketAddr { ip, port } = addr;\n         let addr = rtio::SocketAddr { ip: super::to_rtio(ip), port: port };"}, {"sha": "99e4822afeb9e7d776f8f7105912b2cd2b99b1a8", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee10f3501c1df04a015a5331c8343792e519c7a7/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee10f3501c1df04a015a5331c8343792e519c7a7/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=ee10f3501c1df04a015a5331c8343792e519c7a7", "patch": "@@ -29,6 +29,7 @@ use prelude::*;\n use c_str::ToCStr;\n use clone::Clone;\n use io::{Listener, Acceptor, Reader, Writer, IoResult, IoError};\n+use io::{standard_error, TimedOut};\n use kinds::Send;\n use boxed::Box;\n use rt::rtio::{IoFactory, LocalIo, RtioUnixListener};\n@@ -68,13 +69,14 @@ impl UnixStream {\n     /// This function is similar to `connect`, except that if `timeout_ms`\n     /// elapses the function will return an error of kind `TimedOut`.\n     ///\n-    /// # Failure\n-    ///\n-    /// Fails on a `timeout` of zero or negative duration.\n+    /// If a `timeout` with zero or negative duration is specified then\n+    /// the function returns `Err`, with the error kind set to `TimedOut`.\n     #[experimental = \"the timeout argument is likely to change types\"]\n     pub fn connect_timeout<P: ToCStr>(path: &P,\n                                       timeout: Duration) -> IoResult<UnixStream> {\n-        assert!(timeout > Duration::milliseconds(0));\n+        if timeout <= Duration::milliseconds(0) {\n+            return standard_error(TimedOut);\n+        }\n \n         LocalIo::maybe_raise(|io| {\n             let s = io.unix_connect(&path.to_c_str(), Some(timeout.num_milliseconds() as u64));\n@@ -518,14 +520,14 @@ mod tests {\n     iotest!(fn connect_timeout_zero() {\n         let addr = next_test_unix();\n         let _a = UnixListener::bind(&addr).unwrap().listen().unwrap();\n-        assert!(UnixStream::connect_timeout(&addr, Duration::milliseconds(0)).is_ok());\n-    } #[should_fail])\n+        assert!(UnixStream::connect_timeout(&addr, Duration::milliseconds(0)).is_err());\n+    })\n \n     iotest!(fn connect_timeout_negative() {\n         let addr = next_test_unix();\n         let _a = UnixListener::bind(&addr).unwrap().listen().unwrap();\n-        assert!(UnixStream::connect_timeout(&addr, Duration::milliseconds(-1)).is_ok());\n-    } #[should_fail])\n+        assert!(UnixStream::connect_timeout(&addr, Duration::milliseconds(-1)).is_err());\n+    })\n \n     iotest!(fn close_readwrite_smoke() {\n         let addr = next_test_unix();"}, {"sha": "5519963693d7a96bc7313bd4cdfc5c2279442eb1", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee10f3501c1df04a015a5331c8343792e519c7a7/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee10f3501c1df04a015a5331c8343792e519c7a7/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=ee10f3501c1df04a015a5331c8343792e519c7a7", "patch": "@@ -96,3 +96,14 @@ iotest!(fn timeout_error() {\n \n     assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(1000)).is_err());\n })\n+\n+    iotest!(fn connect_timeout_zero() {\n+        let addr = next_test_ip4();\n+        assert!(TcpStream::connect_timeout(&addr, Duration::milliseconds(0)).is_err());\n+    })\n+\n+    iotest!(fn connect_timeout_negative() {\n+        let addr = next_test_ip4();\n+        assert!(TcpStream::connect_timeout(&addr, Duration::milliseconds(-1)).is_err());\n+    })\n+"}]}