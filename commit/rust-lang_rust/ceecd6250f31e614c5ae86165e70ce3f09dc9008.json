{"sha": "ceecd6250f31e614c5ae86165e70ce3f09dc9008", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZWNkNjI1MGYzMWU2MTRjNWFlODYxNjVlNzBjZTNmMDlkYzkwMDg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-12T16:12:47Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:59Z"}, "message": "Fix more incorrectly transitioned code", "tree": {"sha": "9d762385405f8c14a22f24206f8ad16226f7b52a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d762385405f8c14a22f24206f8ad16226f7b52a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceecd6250f31e614c5ae86165e70ce3f09dc9008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceecd6250f31e614c5ae86165e70ce3f09dc9008", "html_url": "https://github.com/rust-lang/rust/commit/ceecd6250f31e614c5ae86165e70ce3f09dc9008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceecd6250f31e614c5ae86165e70ce3f09dc9008/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5ab2ceef8393f94fd1aa07b35bc25f74e9f879f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ab2ceef8393f94fd1aa07b35bc25f74e9f879f", "html_url": "https://github.com/rust-lang/rust/commit/a5ab2ceef8393f94fd1aa07b35bc25f74e9f879f"}], "stats": {"total": 81, "additions": 59, "deletions": 22}, "files": [{"sha": "e5e0bfa0ac90df6a9f5e7c839086bb713b70987f", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ceecd6250f31e614c5ae86165e70ce3f09dc9008/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceecd6250f31e614c5ae86165e70ce3f09dc9008/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=ceecd6250f31e614c5ae86165e70ce3f09dc9008", "patch": "@@ -32,7 +32,7 @@ use util::{self, dylib_path, dylib_path_var};\n use compile;\n use native;\n use builder::{Kind, Builder, Compiler, Step};\n-use tool::Tool;\n+use tool::{self, Tool};\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n@@ -151,6 +151,17 @@ impl<'a> Step<'a> for Cargotest<'a> {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n+    fn should_run(_builder: &Builder, path: &Path) -> bool {\n+        path.ends_with(\"src/tools/cargotest\")\n+    }\n+\n+    fn make_run(builder: &Builder, _path: Option<&Path>, host: &str, _target: &str) {\n+        builder.ensure(Cargotest {\n+            stage: builder.top_stage,\n+            host: host,\n+        });\n+    }\n+\n     /// Runs the `cargotest` tool as compiled in `stage` by the `host` compiler.\n     ///\n     /// This tool in `src/tools` will check out a few Rust projects and run `cargo\n@@ -786,6 +797,9 @@ impl<'a> Step<'a> for Docs<'a> {\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n         let compiler = self.compiler;\n+\n+        builder.ensure(compile::Test { compiler, target: compiler.host });\n+\n         // Do a breadth-first traversal of the `src/doc` directory and just run\n         // tests for all files that end in `*.md`\n         let mut stack = vec![build.src.join(\"src/doc\")];\n@@ -1106,6 +1120,7 @@ impl<'a> Step<'a> for Krate<'a> {\n                 (\"libtest\", \"src/libtest\", String::new(), \"test\")\n             }\n             Mode::Librustc => {\n+                builder.ensure(compile::Rustc { compiler, target });\n                 (\"librustc\", \"src/rustc\", build.rustc_features(), \"rustc-main\")\n             }\n             _ => panic!(\"can only test libraries\"),\n@@ -1261,16 +1276,6 @@ fn find_tests(dir: &Path, target: &str) -> Vec<PathBuf> {\n     dst\n }\n \n-//    // Some test suites are run inside emulators or on remote devices, and most\n-//    // of our test binaries are linked dynamically which means we need to ship\n-//    // the standard library and such to the emulator ahead of time. This step\n-//    // represents this and is a dependency of all test suites.\n-//    //\n-//    // Most of the time this step is a noop (the `check::emulator_copy_libs`\n-//    // only does work if necessary). For some steps such as shipping data to\n-//    // QEMU we have to build our own tools so we've got conditional dependencies\n-//    // on those programs as well. Note that the remote test client is built for\n-//    // the build target (us) and the server is built for the target.\n //    rules.test(\"remote-copy-libs\", \"path/to/nowhere\")\n //         .dep(|s| s.name(\"libtest\"))\n //         .dep(move |s| {\n@@ -1290,6 +1295,15 @@ fn find_tests(dir: &Path, target: &str) -> Vec<PathBuf> {\n //         .run(move |s| check::remote_copy_libs(build, &s.compiler(), s.target));\n //\n \n+/// Some test suites are run inside emulators or on remote devices, and most\n+/// of our test binaries are linked dynamically which means we need to ship\n+/// the standard library and such to the emulator ahead of time. This step\n+/// represents this and is a dependency of all test suites.\n+///\n+/// Most of the time this is a noop. For some steps such as shipping data to\n+/// QEMU we have to build our own tools so we've got conditional dependencies\n+/// on those programs as well. Note that the remote test client is built for\n+/// the build target (us) and the server is built for the target.\n #[derive(Serialize)]\n pub struct RemoteCopyLibs<'a> {\n     compiler: Compiler<'a>,\n@@ -1312,9 +1326,7 @@ impl<'a> Step<'a> for RemoteCopyLibs<'a> {\n         println!(\"REMOTE copy libs to emulator ({})\", target);\n         t!(fs::create_dir_all(build.out.join(\"tmp\")));\n \n-        // FIXME: This builds the tool for the native build triple\n-        // (build.build); that is probably wrong. Should build for target.\n-        let server = builder.tool_exe(Tool::RemoteTestServer);\n+        let server = builder.ensure(tool::RemoteTestServer { compiler, target }));\n \n         // Spawn the emulator and wait for it to come online\n         let tool = builder.tool_exe(Tool::RemoteTestClient);\n@@ -1356,6 +1368,9 @@ impl<'a> Step<'a> for Distcheck {\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n \n+        builder.ensure(dist::PlainSourceTarball);\n+        builder.ensure(dist::Src);\n+\n         if build.build != \"x86_64-unknown-linux-gnu\" {\n             return\n         }\n@@ -1366,9 +1381,6 @@ impl<'a> Step<'a> for Distcheck {\n             return\n         }\n \n-        builder.ensure(dist::PlainSourceTarball);\n-        builder.ensure(dist::Src);\n-\n         println!(\"Distcheck\");\n         let dir = build.out.join(\"tmp\").join(\"distcheck\");\n         let _ = fs::remove_dir_all(&dir);"}, {"sha": "6153d37cf1a07587bab8fcfcc55d92af19e767cd", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ceecd6250f31e614c5ae86165e70ce3f09dc9008/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceecd6250f31e614c5ae86165e70ce3f09dc9008/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=ceecd6250f31e614c5ae86165e70ce3f09dc9008", "patch": "@@ -239,11 +239,6 @@ tool!(\n     //      .dep(|s| s.name(\"libstd-tool\"))\n     //      .run(move |s| compile::tool(build, s.stage, s.target, \"build-manifest\"));\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::Librustc;\n-    // rules.build(\"tool-remote-test-server\", \"src/tools/remote-test-server\")\n-    //      .dep(|s| s.name(\"maybe-clean-tools\"))\n-    //      .dep(|s| s.name(\"libstd-tool\"))\n-    //      .run(move |s| compile::tool(build, s.stage, s.target, \"remote-test-server\"));\n-    RemoteTestServer, \"src/tools/remote-test-server\", \"remote-test-server\", Mode::Libstd;\n     // rules.build(\"tool-remote-test-client\", \"src/tools/remote-test-client\")\n     //      .dep(|s| s.name(\"maybe-clean-tools\"))\n     //      .dep(|s| s.name(\"libstd-tool\"))\n@@ -256,6 +251,36 @@ tool!(\n     RustInstaller, \"src/tools/rust-installer\", \"rust-installer\", Mode::Libstd;\n );\n \n+#[derive(Serialize)]\n+pub struct RemoteTestServer<'a> {\n+    pub compiler: Compiler<'a>,\n+    pub target: &'a str,\n+}\n+\n+impl<'a> Step<'a> for RemoteTestServer<'a> {\n+    type Output = PathBuf;\n+\n+    fn should_run(_builder: &Builder, path: &Path) -> bool {\n+        path.ends_with(\"src/tools/remote-test-server\")\n+    }\n+\n+    fn make_run(builder: &Builder, _path: Option<&Path>, host: &str, target: &str) {\n+        builder.ensure(RemoteTestServer {\n+            compiler: builder.compiler(builder.top_stage, host),\n+            target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> PathBuf {\n+        builder.ensure(ToolBuild {\n+            stage: self.stage,\n+            target: self.target,\n+            tool: \"remote-test-server\",\n+            mode: Mode::Libstd,\n+        })\n+    }\n+}\n+\n // rules.build(\"tool-cargo\", \"src/tools/cargo\")\n //      .host(true)\n //      .default(build.config.extended)"}]}