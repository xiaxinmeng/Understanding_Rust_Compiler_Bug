{"sha": "7e9a8483f486f73c5be14abfe48cf5298c7972f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOWE4NDgzZjQ4NmY3M2M1YmUxNGFiZmU0OGNmNTI5OGM3OTcyZjU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-07T18:52:02Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-07T18:52:02Z"}, "message": "Small cleanup\n\n* Add docstring to `Parser` field\n* Remove unnecessary `unwrap`\n* Remove unnecessary borrow\n* Fix indentation of some `teach`text output", "tree": {"sha": "edb4159dc52b42991bfe1ebf99d9cba95955f699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edb4159dc52b42991bfe1ebf99d9cba95955f699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e9a8483f486f73c5be14abfe48cf5298c7972f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9a8483f486f73c5be14abfe48cf5298c7972f5", "html_url": "https://github.com/rust-lang/rust/commit/7e9a8483f486f73c5be14abfe48cf5298c7972f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e9a8483f486f73c5be14abfe48cf5298c7972f5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db870ea71b6dcc7a91b999420b88f41d3cdd13e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/db870ea71b6dcc7a91b999420b88f41d3cdd13e1", "html_url": "https://github.com/rust-lang/rust/commit/db870ea71b6dcc7a91b999420b88f41d3cdd13e1"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "1165b9740296aa23009b281430f14265dec1fcfd", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a8483f486f73c5be14abfe48cf5298c7972f5/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a8483f486f73c5be14abfe48cf5298c7972f5/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=7e9a8483f486f73c5be14abfe48cf5298c7972f5", "patch": "@@ -104,6 +104,8 @@ pub struct Parser<'a> {\n     /// error.\n     pub(super) unclosed_delims: Vec<UnmatchedBrace>,\n     last_unexpected_token_span: Option<Span>,\n+    /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it\n+    /// looked like it could have been a mistyped path or literal `Option:Some(42)`).\n     pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,\n     /// If present, this `Parser` is not parsing Rust code but rather a macro call.\n     subparser_name: Option<&'static str>,"}, {"sha": "461edaf32524d54d16e962cd0eebe0d3a2ad3b2a", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a8483f486f73c5be14abfe48cf5298c7972f5/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a8483f486f73c5be14abfe48cf5298c7972f5/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=7e9a8483f486f73c5be14abfe48cf5298c7972f5", "patch": "@@ -226,7 +226,7 @@ impl<'a> PathSource<'a> {\n                 ValueNS => \"method or associated constant\",\n                 MacroNS => bug!(\"associated macro\"),\n             },\n-            PathSource::Expr(parent) => match &parent.as_ref().map(|p| &p.kind) {\n+            PathSource::Expr(parent) => match parent.as_ref().map(|p| &p.kind) {\n                 // \"function\" here means \"anything callable\" rather than `DefKind::Fn`,\n                 // this is not precise but usually more helpful than just \"value\".\n                 Some(ExprKind::Call(call_expr, _)) => match &call_expr.kind {"}, {"sha": "f598ada900feecfd2f6062cac615917acfecfa41", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7e9a8483f486f73c5be14abfe48cf5298c7972f5/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9a8483f486f73c5be14abfe48cf5298c7972f5/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=7e9a8483f486f73c5be14abfe48cf5298c7972f5", "patch": "@@ -1114,7 +1114,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.sess.struct_span_err(pat.span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !etc && !unmentioned_fields.is_empty() {\n-            unmentioned_err = Some(self.error_unmentioned_fields(pat.span, &unmentioned_fields));\n+            unmentioned_err = Some(self.error_unmentioned_fields(pat, &unmentioned_fields));\n         }\n         match (inexistent_fields_err, unmentioned_err) {\n             (Some(mut i), Some(mut u)) => {\n@@ -1237,13 +1237,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note(\n                 \"This error indicates that a struct pattern attempted to \\\n-                    extract a non-existent field from a struct. Struct fields \\\n-                    are identified by the name used before the colon : so struct \\\n-                    patterns should resemble the declaration of the struct type \\\n-                    being matched.\\n\\n\\\n-                    If you are using shorthand field patterns but want to refer \\\n-                    to the struct field by a different name, you should rename \\\n-                    it explicitly.\",\n+                 extract a non-existent field from a struct. Struct fields \\\n+                 are identified by the name used before the colon : so struct \\\n+                 patterns should resemble the declaration of the struct type \\\n+                 being matched.\\n\\n\\\n+                 If you are using shorthand field patterns but want to refer \\\n+                 to the struct field by a different name, you should rename \\\n+                 it explicitly.\",\n             );\n         }\n         err\n@@ -1299,7 +1299,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn error_unmentioned_fields(\n         &self,\n-        span: Span,\n+        pat: &Pat<'_>,\n         unmentioned_fields: &[Ident],\n     ) -> DiagnosticBuilder<'tcx> {\n         let field_names = if unmentioned_fields.len() == 1 {\n@@ -1312,23 +1312,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .join(\", \");\n             format!(\"fields {}\", fields)\n         };\n-        let mut diag = struct_span_err!(\n+        let mut err = struct_span_err!(\n             self.tcx.sess,\n-            span,\n+            pat.span,\n             E0027,\n             \"pattern does not mention {}\",\n             field_names\n         );\n-        diag.span_label(span, format!(\"missing {}\", field_names));\n-        if self.tcx.sess.teach(&diag.get_code().unwrap()) {\n-            diag.note(\n+        err.span_label(pat.span, format!(\"missing {}\", field_names));\n+        if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+            err.note(\n                 \"This error indicates that a pattern for a struct fails to specify a \\\n-                    sub-pattern for every one of the struct's fields. Ensure that each field \\\n-                    from the struct's definition is mentioned in the pattern, or use `..` to \\\n-                    ignore unwanted fields.\",\n+                 sub-pattern for every one of the struct's fields. Ensure that each field \\\n+                 from the struct's definition is mentioned in the pattern, or use `..` to \\\n+                 ignore unwanted fields.\",\n             );\n         }\n-        diag\n+        err\n     }\n \n     fn check_pat_box("}]}