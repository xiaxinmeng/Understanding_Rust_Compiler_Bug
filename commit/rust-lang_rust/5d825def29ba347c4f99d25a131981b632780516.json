{"sha": "5d825def29ba347c4f99d25a131981b632780516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkODI1ZGVmMjliYTM0N2M0Zjk5ZDI1YTEzMTk4MWI2MzI3ODA1MTY=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-02-28T21:33:45Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-02-26T13:00:00Z"}, "message": "Mark top level module as a crate in rustdoc, closes #12507", "tree": {"sha": "cbc1e2c9739f2fd1ef582f7d29f9ba2c63af624d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc1e2c9739f2fd1ef582f7d29f9ba2c63af624d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d825def29ba347c4f99d25a131981b632780516", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d825def29ba347c4f99d25a131981b632780516", "html_url": "https://github.com/rust-lang/rust/commit/5d825def29ba347c4f99d25a131981b632780516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d825def29ba347c4f99d25a131981b632780516/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a92c5ed58e676d6aa224681080f921b9e069a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a92c5ed58e676d6aa224681080f921b9e069a5", "html_url": "https://github.com/rust-lang/rust/commit/68a92c5ed58e676d6aa224681080f921b9e069a5"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "fc517a8c2e8daf53ef8694cd85c2285391bad153", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=5d825def29ba347c4f99d25a131981b632780516", "patch": "@@ -186,6 +186,7 @@ pub enum ItemEnum {\n #[deriving(Clone, Encodable, Decodable)]\n pub struct Module {\n     items: ~[Item],\n+    is_crate: bool,\n }\n \n impl Clean<Item> for doctree::Module {\n@@ -202,6 +203,7 @@ impl Clean<Item> for doctree::Module {\n             visibility: self.vis.clean(),\n             id: self.id,\n             inner: ModuleItem(Module {\n+               is_crate: self.is_crate,\n                items: [self.structs.clean(), self.enums.clean(),\n                        self.fns.clean(), self.foreigns.clean().concat_vec(),\n                        self.mods.clean(), self.typedefs.clean(),"}, {"sha": "c5849f5aa28b6376531d1d26616de52f9608209e", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=5d825def29ba347c4f99d25a131981b632780516", "patch": "@@ -33,6 +33,7 @@ pub struct Module {\n     foreigns: ~[ast::ForeignMod],\n     view_items: ~[ast::ViewItem],\n     macros: ~[Macro],\n+    is_crate: bool,\n }\n \n impl Module {\n@@ -54,6 +55,7 @@ impl Module {\n             view_items : ~[],\n             foreigns   : ~[],\n             macros     : ~[],\n+            is_crate   : false,\n         }\n     }\n }"}, {"sha": "672b46afcd0835ef615ec2a6579df472d62d771b", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=5d825def29ba347c4f99d25a131981b632780516", "patch": "@@ -87,7 +87,10 @@ pub trait DocFolder {\n     }\n \n     fn fold_mod(&mut self, m: Module) -> Module {\n-        Module { items: m.items.move_iter().filter_map(|i| self.fold_item(i)).collect() }\n+        Module {\n+            is_crate: m.is_crate,\n+            items: m.items.move_iter().filter_map(|i| self.fold_item(i)).collect()\n+        }\n     }\n \n     fn fold_crate(&mut self, mut c: Crate) -> Crate {"}, {"sha": "ff1643ff1262f876c57e4fb9044cba5d26c406b7", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5d825def29ba347c4f99d25a131981b632780516", "patch": "@@ -863,7 +863,11 @@ impl<'a> fmt::Show for Item<'a> {\n         // Write the breadcrumb trail header for the top\n         try!(write!(fmt.buf, \"<h1 class='fqn'>\"));\n         match self.item.inner {\n-            clean::ModuleItem(..) => try!(write!(fmt.buf, \"Module \")),\n+            clean::ModuleItem(ref m) => if m.is_crate {\n+                    try!(write!(fmt.buf, \"Crate \"));\n+                } else {\n+                    try!(write!(fmt.buf, \"Module \"));\n+                },\n             clean::FunctionItem(..) => try!(write!(fmt.buf, \"Function \")),\n             clean::TraitItem(..) => try!(write!(fmt.buf, \"Trait \")),\n             clean::StructItem(..) => try!(write!(fmt.buf, \"Struct \")),"}, {"sha": "994ee7ea03ef04f0b519e82b4f9c33adc660fda7", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d825def29ba347c4f99d25a131981b632780516/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5d825def29ba347c4f99d25a131981b632780516", "patch": "@@ -44,6 +44,7 @@ impl<'a> RustdocVisitor<'a> {\n         self.module = self.visit_mod_contents(krate.span, krate.attrs.clone(),\n                                               ast::Public, ast::CRATE_NODE_ID,\n                                               &krate.module, None);\n+        self.module.is_crate = true;\n     }\n \n     pub fn visit_struct_def(&mut self, item: &ast::Item, sd: @ast::StructDef,"}]}