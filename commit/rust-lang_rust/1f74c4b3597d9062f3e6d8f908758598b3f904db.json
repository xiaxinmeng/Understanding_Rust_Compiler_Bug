{"sha": "1f74c4b3597d9062f3e6d8f908758598b3f904db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNzRjNGIzNTk3ZDkwNjJmM2U2ZDhmOTA4NzU4NTk4YjNmOTA0ZGI=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-07T10:03:56Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-07T10:03:56Z"}, "message": "removed false positives from inline_always (issue #84)", "tree": {"sha": "5e0653203c53f49dc19bc29724563253520e6b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e0653203c53f49dc19bc29724563253520e6b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f74c4b3597d9062f3e6d8f908758598b3f904db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f74c4b3597d9062f3e6d8f908758598b3f904db", "html_url": "https://github.com/rust-lang/rust/commit/1f74c4b3597d9062f3e6d8f908758598b3f904db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f74c4b3597d9062f3e6d8f908758598b3f904db/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8563ee60ecf02be54c39dad0c063763c9dce4e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/8563ee60ecf02be54c39dad0c063763c9dce4e91", "html_url": "https://github.com/rust-lang/rust/commit/8563ee60ecf02be54c39dad0c063763c9dce4e91"}], "stats": {"total": 96, "additions": 86, "deletions": 10}, "files": [{"sha": "d5a56b1547f32b067a07edb3e63e88d53dd02515", "filename": "src/attrs.rs", "status": "modified", "additions": 63, "deletions": 8, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1f74c4b3597d9062f3e6d8f908758598b3f904db/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f74c4b3597d9062f3e6d8f908758598b3f904db/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=1f74c4b3597d9062f3e6d8f908758598b3f904db", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::*;\n use syntax::ptr::P;\n use syntax::codemap::{Span, ExpnInfo};\n use syntax::parse::token::InternedString;\n-use utils::in_macro;\n+use utils::{in_macro, match_path};\n \n declare_lint! { pub INLINE_ALWAYS, Warn,\n     \"#[inline(always)] is usually a bad idea.\"}\n@@ -21,18 +21,73 @@ impl LintPass for AttrPass {\n     }\n     \n     fn check_item(&mut self, cx: &Context, item: &Item) {\n-\t\tcx.sess().codemap().with_expn_info(item.span.expn_id, \n-\t\t\t|info| check_attrs(cx, info, &item.ident, &item.attrs))\n+\t\tif is_relevant_item(item) {\n+\t\t\tcx.sess().codemap().with_expn_info(item.span.expn_id, \n+\t\t\t\t|info| check_attrs(cx, info, &item.ident, &item.attrs))\n+\t\t}\n \t}\n     \n-    fn check_impl_item(&mut self, cx: &Context, item: &ImplItem) { \n-\t\tcx.sess().codemap().with_expn_info(item.span.expn_id, \n-\t\t\t|info| check_attrs(cx, info, &item.ident, &item.attrs))\n+    fn check_impl_item(&mut self, cx: &Context, item: &ImplItem) {\n+\t\tif is_relevant_impl(item) {\n+\t\t\tcx.sess().codemap().with_expn_info(item.span.expn_id, \n+\t\t\t\t|info| check_attrs(cx, info, &item.ident, &item.attrs))\n+\t\t}\n \t}\n         \n \tfn check_trait_item(&mut self, cx: &Context, item: &TraitItem) {\n-\t\tcx.sess().codemap().with_expn_info(item.span.expn_id, \n-\t\t\t|info| check_attrs(cx, info, &item.ident, &item.attrs))\n+\t\tif is_relevant_trait(item) {\n+\t\t\tcx.sess().codemap().with_expn_info(item.span.expn_id, \n+\t\t\t\t|info| check_attrs(cx, info, &item.ident, &item.attrs))\n+\t\t}\n+\t}\n+}\n+\n+fn is_relevant_item(item: &Item) -> bool {\n+\tif let &ItemFn(_, _, _, _, _, ref block) = &item.node {\n+\t\tis_relevant_block(block)\n+\t} else { false }\n+}\n+\n+fn is_relevant_impl(item: &ImplItem) -> bool {\n+\tmatch item.node {\n+\t\tMethodImplItem(_, ref block) => is_relevant_block(block),\n+\t\t_ => false\n+\t}\n+}\n+\n+fn is_relevant_trait(item: &TraitItem) -> bool {\n+\tmatch item.node {\n+\t\tMethodTraitItem(_, None) => true,\n+\t\tMethodTraitItem(_, Some(ref block)) => is_relevant_block(block),\n+\t\t_ => false\n+\t}\n+}\n+\n+fn is_relevant_block(block: &Block) -> bool {\n+\tfor stmt in block.stmts.iter() { \n+\t\tmatch stmt.node {\n+\t\t\tStmtDecl(_, _) => return true,\n+\t\t\tStmtExpr(ref expr, _) | StmtSemi(ref expr, _) => {\n+\t\t\t\treturn is_relevant_expr(expr);\n+\t\t\t}\n+\t\t\t_ => ()\n+\t\t}\n+\t}\n+\tblock.expr.as_ref().map_or(false, |e| is_relevant_expr(&*e))\n+}\n+\n+fn is_relevant_expr(expr: &Expr) -> bool {\n+\tmatch expr.node {\n+\t\tExprBlock(ref block) => is_relevant_block(block),\n+\t\tExprRet(Some(ref e)) | ExprParen(ref e) => \n+\t\t\tis_relevant_expr(&*e),\n+\t\tExprRet(None) | ExprBreak(_) | ExprMac(_) => false,\n+\t\tExprCall(ref path_expr, _) => {\n+\t\t\tif let ExprPath(_, ref path) = path_expr.node {\n+\t\t\t\t!match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])\n+\t\t\t} else { true }\n+\t\t}\n+\t\t_ => true\n \t}\n }\n "}, {"sha": "9b648a517e0cd2fd502fccf89461ba1f3727894c", "filename": "tests/compile-fail/attrs.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1f74c4b3597d9062f3e6d8f908758598b3f904db/tests%2Fcompile-fail%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f74c4b3597d9062f3e6d8f908758598b3f904db/tests%2Fcompile-fail%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fattrs.rs?ref=1f74c4b3597d9062f3e6d8f908758598b3f904db", "patch": "@@ -1,12 +1,33 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[deny(inline_always)]\n+#![deny(inline_always)]\n+\n #[inline(always)] //~ERROR You have declared #[inline(always)] on test_attr_lint.\n fn test_attr_lint() {\n \tassert!(true)\n }\n \n+#[inline(always)]\n+fn false_positive_expr() {\n+\tunreachable!()\n+}\n+\n+#[inline(always)]\n+fn false_positive_stmt() {\n+\tunreachable!();\n+}\n+\n+#[inline(always)]\n+fn empty_and_false_positive_stmt() {\n+\t;\n+\tunreachable!();\n+}\n+\n+\n fn main() {\n-\ttest_attr_lint()\n+\ttest_attr_lint();\n+\tif false { false_positive_expr() }\n+\tif false { false_positive_stmt() }\n+\tif false { empty_and_false_positive_stmt() }\n }"}]}