{"sha": "46e2a2e7c76dbc6ada09ee815a440701d6aeaba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZTJhMmU3Yzc2ZGJjNmFkYTA5ZWU4MTVhNDQwNzAxZDZhZWFiYTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-09-09T18:12:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-09-09T18:13:15Z"}, "message": "Support platforms without a timer\n\nI've dabbled recently in seeing how hard it would be to compile rustfmt to wasm\nand then run it in a web browser, and it turns out that it's [not too\nhard][wasm]! In addition to patching a few dependencies which already have a\nnumber of patches out rustfmt also needed some modifications to get it to work,\nnamely avoiding the usage of `Instant::now()` on the \"happy path\" which doesn't\nwork on wasm (it just panics).\n\nThis commit is an attempt to add a support for this by avoiding using\n`Instant::now()` on the wasm target, but panicking if the actual time elapsed is\nrequested (which doesn't happen unless verbosely logging I believe).\n\n[wasm]: https://alexcrichton.github.io/rustfmt-wasm/", "tree": {"sha": "fa56c01aae2cf7615376095666b2a6e43df1f1d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa56c01aae2cf7615376095666b2a6e43df1f1d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46e2a2e7c76dbc6ada09ee815a440701d6aeaba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46e2a2e7c76dbc6ada09ee815a440701d6aeaba9", "html_url": "https://github.com/rust-lang/rust/commit/46e2a2e7c76dbc6ada09ee815a440701d6aeaba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46e2a2e7c76dbc6ada09ee815a440701d6aeaba9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ada5b51ccfd99a91055dfc3b411e83f2e0514d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ada5b51ccfd99a91055dfc3b411e83f2e0514d5", "html_url": "https://github.com/rust-lang/rust/commit/6ada5b51ccfd99a91055dfc3b411e83f2e0514d5"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "a07cdcc8a14972bda37f4cffdcac1c8ad1ec9396", "filename": "src/formatting.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46e2a2e7c76dbc6ada09ee815a440701d6aeaba9/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e2a2e7c76dbc6ada09ee815a440701d6aeaba9/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=46e2a2e7c76dbc6ada09ee815a440701d6aeaba9", "patch": "@@ -64,7 +64,7 @@ fn format_project<T: FormatHandler>(\n     config: &Config,\n     handler: &mut T,\n ) -> Result<FormatReport, ErrorKind> {\n-    let mut timer = Timer::Initialized(Instant::now());\n+    let mut timer = Timer::start();\n \n     let main_file = input.file_name();\n     let input_is_stdin = main_file == FileName::Stdin;\n@@ -344,21 +344,31 @@ pub(crate) struct ModifiedLines {\n \n #[derive(Clone, Copy, Debug)]\n enum Timer {\n+    Disabled,\n     Initialized(Instant),\n     DoneParsing(Instant, Instant),\n     DoneFormatting(Instant, Instant, Instant),\n }\n \n impl Timer {\n+    fn start() -> Timer {\n+        if cfg!(target_arch = \"wasm32\") {\n+            Timer::Disabled\n+        } else {\n+            Timer::Initialized(Instant::now())\n+        }\n+    }\n     fn done_parsing(self) -> Self {\n         match self {\n+            Timer::Disabled => Timer::Disabled,\n             Timer::Initialized(init_time) => Timer::DoneParsing(init_time, Instant::now()),\n             _ => panic!(\"Timer can only transition to DoneParsing from Initialized state\"),\n         }\n     }\n \n     fn done_formatting(self) -> Self {\n         match self {\n+            Timer::Disabled => Timer::Disabled,\n             Timer::DoneParsing(init_time, parse_time) => {\n                 Timer::DoneFormatting(init_time, parse_time, Instant::now())\n             }\n@@ -369,6 +379,7 @@ impl Timer {\n     /// Returns the time it took to parse the source files in seconds.\n     fn get_parse_time(&self) -> f32 {\n         match *self {\n+            Timer::Disabled => panic!(\"this platform cannot time execution\"),\n             Timer::DoneParsing(init, parse_time) | Timer::DoneFormatting(init, parse_time, _) => {\n                 // This should never underflow since `Instant::now()` guarantees monotonicity.\n                 Self::duration_to_f32(parse_time.duration_since(init))\n@@ -381,6 +392,7 @@ impl Timer {\n     /// not included.\n     fn get_format_time(&self) -> f32 {\n         match *self {\n+            Timer::Disabled => panic!(\"this platform cannot time execution\"),\n             Timer::DoneFormatting(_init, parse_time, format_time) => {\n                 Self::duration_to_f32(format_time.duration_since(parse_time))\n             }"}]}