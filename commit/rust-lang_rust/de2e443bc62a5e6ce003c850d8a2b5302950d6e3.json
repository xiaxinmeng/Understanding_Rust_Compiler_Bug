{"sha": "de2e443bc62a5e6ce003c850d8a2b5302950d6e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMmU0NDNiYzYyYTVlNmNlMDAzYzg1MGQ4YTJiNTMwMjk1MGQ2ZTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T21:05:47Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:41:59Z"}, "message": "make parse_async_block conventional", "tree": {"sha": "592a6261341c53c5189511d795b5f0eabb8ee98e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592a6261341c53c5189511d795b5f0eabb8ee98e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de2e443bc62a5e6ce003c850d8a2b5302950d6e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de2e443bc62a5e6ce003c850d8a2b5302950d6e3", "html_url": "https://github.com/rust-lang/rust/commit/de2e443bc62a5e6ce003c850d8a2b5302950d6e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de2e443bc62a5e6ce003c850d8a2b5302950d6e3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e2bdc341a5f25da3f29b5f37150fd320e90e8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e2bdc341a5f25da3f29b5f37150fd320e90e8c", "html_url": "https://github.com/rust-lang/rust/commit/f6e2bdc341a5f25da3f29b5f37150fd320e90e8c"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "c3cac8c646598e63541c392d2327cda4ed11d54f", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de2e443bc62a5e6ce003c850d8a2b5302950d6e3/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2e443bc62a5e6ce003c850d8a2b5302950d6e3/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=de2e443bc62a5e6ce003c850d8a2b5302950d6e3", "patch": "@@ -1556,7 +1556,7 @@ impl<'a> Parser<'a> {\n     fn parse_match_expr(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let match_span = self.prev_span;\n         let lo = self.prev_span;\n-        let discriminant = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n+        let scrutinee = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n         if let Err(mut e) = self.expect(&token::OpenDelim(token::Brace)) {\n             if self.token == token::Semi {\n                 e.span_suggestion_short(\n@@ -1582,13 +1582,13 @@ impl<'a> Parser<'a> {\n                     if self.token == token::CloseDelim(token::Brace) {\n                         self.bump();\n                     }\n-                    return Ok(self.mk_expr(span, ExprKind::Match(discriminant, arms), attrs));\n+                    return Ok(self.mk_expr(span, ExprKind::Match(scrutinee, arms), attrs));\n                 }\n             }\n         }\n         let hi = self.token.span;\n         self.bump();\n-        return Ok(self.mk_expr(lo.to(hi), ExprKind::Match(discriminant, arms), attrs));\n+        return Ok(self.mk_expr(lo.to(hi), ExprKind::Match(scrutinee, arms), attrs));\n     }\n \n     pub(super) fn parse_arm(&mut self) -> PResult<'a, Arm> {\n@@ -1697,16 +1697,13 @@ impl<'a> Parser<'a> {\n \n     /// Parses an `async move? {...}` expression.\n     fn parse_async_block(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {\n-        let span_lo = self.token.span;\n+        let lo = self.token.span;\n         self.expect_keyword(kw::Async)?;\n         let capture_clause = self.parse_capture_clause();\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n-        Ok(self.mk_expr(\n-            span_lo.to(body.span),\n-            ExprKind::Async(capture_clause, DUMMY_NODE_ID, body),\n-            attrs,\n-        ))\n+        let kind = ExprKind::Async(capture_clause, DUMMY_NODE_ID, body);\n+        Ok(self.mk_expr(lo.to(self.prev_span), kind, attrs))\n     }\n \n     fn is_async_block(&self) -> bool {"}]}