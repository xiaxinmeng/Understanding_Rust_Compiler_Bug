{"sha": "e98aff109a1c4bda6a05f16981898425c302aa0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OGFmZjEwOWExYzRiZGE2YTA1ZjE2OTgxODk4NDI1YzMwMmFhMGM=", "commit": {"author": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-10T07:55:46Z"}, "committer": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-10T21:33:45Z"}, "message": "Parameter inlay hint separate from variable type inlay? #2876\n\nAdd setting to allow enabling either type inlay hints or parameter\ninlay hints or both. Group the the max inlay hint length option\ninto the object.\n\n- Add a new type for the inlayHint options.\n- Add tests to ensure the inlays don't happen on the server side", "tree": {"sha": "bad52598c5638a81af9066592913bdfcdcb639fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad52598c5638a81af9066592913bdfcdcb639fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e98aff109a1c4bda6a05f16981898425c302aa0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e98aff109a1c4bda6a05f16981898425c302aa0c", "html_url": "https://github.com/rust-lang/rust/commit/e98aff109a1c4bda6a05f16981898425c302aa0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e98aff109a1c4bda6a05f16981898425c302aa0c/comments", "author": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0714a065d578e8b22b0451bfc64378c875fe858f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0714a065d578e8b22b0451bfc64378c875fe858f", "html_url": "https://github.com/rust-lang/rust/commit/0714a065d578e8b22b0451bfc64378c875fe858f"}], "stats": {"total": 189, "additions": 155, "deletions": 34}, "files": [{"sha": "6173741b1aab9813b96f3bd41ea131919cb28c61", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -1028,6 +1028,7 @@ dependencies = [\n  \"ra_hir\",\n  \"ra_ide_db\",\n  \"ra_prof\",\n+ \"ra_project_model\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"rand\","}, {"sha": "486832529cf20a09f01f1dd871f97fd2c1de5214", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -21,6 +21,7 @@ rustc-hash = \"1.1.0\"\n rand = { version = \"0.7.3\", features = [\"small_rng\"] }\n \n ra_syntax = { path = \"../ra_syntax\" }\n+ra_project_model = { path = \"../ra_project_model\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }\n ra_ide_db = { path = \"../ra_ide_db\" }"}, {"sha": "0f1c13c149f9d06be09f54d98a53efd781f55e6d", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 84, "deletions": 17, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -3,6 +3,7 @@\n use hir::{Adt, HirDisplay, Semantics, Type};\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n+use ra_project_model::{InlayHintDisplayType, InlayHintOptions};\n use ra_syntax::{\n     ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n     match_ast, SmolStr, TextRange,\n@@ -26,7 +27,7 @@ pub struct InlayHint {\n pub(crate) fn inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n-    max_inlay_hint_length: Option<usize>,\n+    inlay_hint_opts: &InlayHintOptions,\n ) -> Vec<InlayHint> {\n     let _p = profile(\"inlay_hints\");\n     let sema = Semantics::new(db);\n@@ -36,9 +37,9 @@ pub(crate) fn inlay_hints(\n     for node in file.syntax().descendants() {\n         match_ast! {\n             match node {\n-                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, ast::Expr::from(it)); },\n-                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, ast::Expr::from(it)); },\n-                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, max_inlay_hint_length, it); },\n+                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, inlay_hint_opts, ast::Expr::from(it)); },\n+                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, inlay_hint_opts, ast::Expr::from(it)); },\n+                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, inlay_hint_opts, it); },\n                 _ => (),\n             }\n         }\n@@ -49,8 +50,14 @@ pub(crate) fn inlay_hints(\n fn get_param_name_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n+    inlay_hint_opts: &InlayHintOptions,\n     expr: ast::Expr,\n ) -> Option<()> {\n+    match inlay_hint_opts.display_type {\n+        InlayHintDisplayType::Off | InlayHintDisplayType::TypeHints => return None,\n+        _ => {}\n+    }\n+\n     let args = match &expr {\n         ast::Expr::CallExpr(expr) => expr.arg_list()?.args(),\n         ast::Expr::MethodCallExpr(expr) => expr.arg_list()?.args(),\n@@ -84,9 +91,14 @@ fn get_param_name_hints(\n fn get_bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    max_inlay_hint_length: Option<usize>,\n+    inlay_hint_opts: &InlayHintOptions,\n     pat: ast::BindPat,\n ) -> Option<()> {\n+    match inlay_hint_opts.display_type {\n+        InlayHintDisplayType::Off | InlayHintDisplayType::ParameterHints => return None,\n+        _ => {}\n+    }\n+\n     let ty = sema.type_of_pat(&pat.clone().into())?;\n \n     if should_not_display_type_hint(sema.db, &pat, &ty) {\n@@ -96,7 +108,7 @@ fn get_bind_pat_hints(\n     acc.push(InlayHint {\n         range: pat.syntax().text_range(),\n         kind: InlayKind::TypeHint,\n-        label: ty.display_truncated(sema.db, max_inlay_hint_length).to_string().into(),\n+        label: ty.display_truncated(sema.db, inlay_hint_opts.max_length).to_string().into(),\n     });\n     Some(())\n }\n@@ -205,7 +217,62 @@ mod tests {\n     use insta::assert_debug_snapshot;\n \n     use crate::mock_analysis::single_file;\n+    use ra_project_model::{InlayHintDisplayType, InlayHintOptions};\n \n+    #[test]\n+    fn param_hints_only() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            fn foo(a: i32, b: i32) -> i32 { a + b }\n+            fn main() {\n+                let _x = foo(4, 4);\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions{ display_type: InlayHintDisplayType::ParameterHints, max_length: None}).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [106; 107),\n+                kind: ParameterHint,\n+                label: \"a\",\n+            },\n+            InlayHint {\n+                range: [109; 110),\n+                kind: ParameterHint,\n+                label: \"b\",\n+            },\n+        ]\"###);\n+    }\n+\n+    #[test]\n+    fn hints_disabled() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            fn foo(a: i32, b: i32) -> i32 { a + b }\n+            fn main() {\n+                let _x = foo(4, 4);\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions{ display_type: InlayHintDisplayType::Off, max_length: None}).unwrap(), @r###\"[]\"###);\n+    }\n+\n+    #[test]\n+    fn type_hints_only() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            fn foo(a: i32, b: i32) -> i32 { a + b }\n+            fn main() {\n+                let _x = foo(4, 4);\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions{ display_type: InlayHintDisplayType::TypeHints, max_length: None}).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [97; 99),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+        ]\"###);\n+    }\n     #[test]\n     fn default_generic_types_should_not_be_displayed() {\n         let (analysis, file_id) = single_file(\n@@ -221,7 +288,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(None)).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [69; 71),\n@@ -278,7 +345,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(None)).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [193; 197),\n@@ -358,7 +425,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(None)).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -422,7 +489,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(None)).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -472,7 +539,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(None)).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -567,7 +634,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(None)).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -662,7 +729,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(None)).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [252; 256),\n@@ -734,7 +801,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, Some(8)).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(Some(8))).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [74; 75),\n@@ -822,7 +889,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(None)).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [798; 809),\n@@ -944,7 +1011,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, Some(8)).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(Some(8))).unwrap(), @r###\"\n         []\n         \"###\n         );\n@@ -970,7 +1037,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, Some(8)).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintOptions::new(Some(8))).unwrap(), @r###\"\n         []\n         \"###\n         );"}, {"sha": "8b1292a41ebfcc177a4b72d19a8297d0c0c91034", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -44,6 +44,7 @@ mod marks;\n #[cfg(test)]\n mod test_utils;\n \n+use ra_project_model::InlayHintOptions;\n use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n@@ -318,9 +319,9 @@ impl Analysis {\n     pub fn inlay_hints(\n         &self,\n         file_id: FileId,\n-        max_inlay_hint_length: Option<usize>,\n+        inlay_hint_opts: &InlayHintOptions,\n     ) -> Cancelable<Vec<InlayHint>> {\n-        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, max_inlay_hint_length))\n+        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, inlay_hint_opts))\n     }\n \n     /// Returns the set of folding ranges."}, {"sha": "a5012c0efd45cf33f6d2b2d19794afbf9219bcf7", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -16,6 +16,7 @@ use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n use ra_db::{CrateGraph, CrateName, Edition, Env, FileId};\n use rustc_hash::FxHashMap;\n+use serde::Deserialize;\n use serde_json::from_reader;\n \n pub use crate::{\n@@ -24,6 +25,34 @@ pub use crate::{\n     sysroot::Sysroot,\n };\n \n+#[derive(Deserialize, Clone, Debug, PartialEq, Eq)]\n+#[serde(rename_all = \"lowercase\")]\n+pub enum InlayHintDisplayType {\n+    Off,\n+    TypeHints,\n+    ParameterHints,\n+    Full,\n+}\n+\n+#[derive(Deserialize, Clone, Debug, PartialEq, Eq)]\n+#[serde(rename_all = \"camelCase\", default)]\n+pub struct InlayHintOptions {\n+    pub display_type: InlayHintDisplayType,\n+    pub max_length: Option<usize>,\n+}\n+\n+impl InlayHintOptions {\n+    pub fn new(max_length: Option<usize>) -> Self {\n+        Self { display_type: InlayHintDisplayType::Full, max_length }\n+    }\n+}\n+\n+impl Default for InlayHintOptions {\n+    fn default() -> Self {\n+        Self { display_type: InlayHintDisplayType::Full, max_length: None }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct CargoTomlNotFoundError {\n     pub searched_at: PathBuf,"}, {"sha": "1617eab0b92d4be42ce2d690e48144ceb6d4c7d8", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -7,6 +7,7 @@\n //! configure the server itself, feature flags are passed into analysis, and\n //! tweak things like automatic insertion of `()` in completions.\n \n+use ra_project_model::InlayHintOptions;\n use rustc_hash::FxHashMap;\n \n use ra_project_model::CargoFeatures;\n@@ -30,7 +31,7 @@ pub struct ServerConfig {\n \n     pub lru_capacity: Option<usize>,\n \n-    pub max_inlay_hint_length: Option<usize>,\n+    pub inlay_hint_opts: InlayHintOptions,\n \n     pub cargo_watch_enable: bool,\n     pub cargo_watch_args: Vec<String>,\n@@ -57,7 +58,7 @@ impl Default for ServerConfig {\n             exclude_globs: Vec::new(),\n             use_client_watching: false,\n             lru_capacity: None,\n-            max_inlay_hint_length: None,\n+            inlay_hint_opts: Default::default(),\n             cargo_watch_enable: true,\n             cargo_watch_args: Vec::new(),\n             cargo_watch_command: \"check\".to_string(),"}, {"sha": "91fb66abbe368e18ffd03cc38cf2517cb9d36d8c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -177,7 +177,7 @@ pub fn main_loop(\n                     .and_then(|it| it.folding_range.as_ref())\n                     .and_then(|it| it.line_folding_only)\n                     .unwrap_or(false),\n-                max_inlay_hint_length: config.max_inlay_hint_length,\n+                inlay_hint_opts: config.inlay_hint_opts.clone(),\n                 cargo_watch: CheckOptions {\n                     enable: config.cargo_watch_enable,\n                     args: config.cargo_watch_args,"}, {"sha": "8043a6cd3b1c47b9b8ce70ec3916b8b6bd1ccce7", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -15,7 +15,7 @@ use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckWa\n use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n-use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n+use ra_project_model::{get_rustc_cfg_options, InlayHintOptions, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n \n@@ -32,7 +32,7 @@ pub struct Options {\n     pub publish_decorations: bool,\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n-    pub max_inlay_hint_length: Option<usize>,\n+    pub inlay_hint_opts: InlayHintOptions,\n     pub rustfmt_args: Vec<String>,\n     pub cargo_watch: CheckOptions,\n }"}, {"sha": "06bc7ded55660cc577d562ed859422c53548ac04", "filename": "docs/user/features.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -191,8 +191,8 @@ Two types of inlay hints are displayed currently:\n \n In VS Code, the following settings can be used to configure the inlay hints:\n \n-* `rust-analyzer.displayInlayHints` \u2014\u00a0toggles inlay hints display on or off\n-* `rust-analyzer.maxInlayHintLength` \u2014\u00a0shortens the hints if their length exceeds the value specified. If no value is specified (`null`), no shortening is applied.\n+* `rust-analyzer.inlayHintOpts.displayType` configure which types of inlay hints are shown.\n+* `rust-analyzer.inlayHintOpts.maxLength` \u2014\u00a0shortens the hints if their length exceeds the value specified. If no value is specified (`null`), no shortening is applied.\n \n **Note:** VS Code does not have native support for inlay hints [yet](https://github.com/microsoft/vscode/issues/16221) and the hints are implemented using decorations.\n This approach has limitations, the caret movement and bracket highlighting near the edges of the hint may be weird:"}, {"sha": "6f2275062cf9a641dae6d989c545cf4ddced0747", "filename": "editors/code/package.json", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -307,12 +307,24 @@\n                     \"exclusiveMinimum\": true,\n                     \"description\": \"Number of syntax trees rust-analyzer keeps in memory\"\n                 },\n-                \"rust-analyzer.displayInlayHints\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n+                \"rust-analyzer.inlayHintOpts.displayType\": {\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"off\",\n+                        \"typeHints\",\n+                        \"parameterHints\",\n+                        \"full\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"No type inlay hints\",\n+                        \"Type inlays hints only\",\n+                        \"Parameter inlays hints only\",\n+                        \"All inlay hints types\"\n+                    ],\n+                    \"default\": \"full\",\n                     \"description\": \"Display additional type and parameter information in the editor\"\n                 },\n-                \"rust-analyzer.maxInlayHintLength\": {\n+                \"rust-analyzer.inlayHintOpts.maxLength\": {\n                     \"type\": [\n                         \"null\",\n                         \"integer\""}, {"sha": "ac4417c61814b926520ffbe57b34a275e7685f52", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -29,7 +29,7 @@ export async function createClient(config: Config, serverPath: string): Promise<\n         initializationOptions: {\n             publishDecorations: !config.highlightingSemanticTokens,\n             lruCapacity: config.lruCapacity,\n-            maxInlayHintLength: config.maxInlayHintLength,\n+            inlayHintOpts: config.inlayHintOpts,\n             cargoWatchEnable: cargoWatchOpts.enable,\n             cargoWatchArgs: cargoWatchOpts.arguments,\n             cargoWatchCommand: cargoWatchOpts.command,"}, {"sha": "5acce0752e6f564339fbaef119fde1c3a6b6749f", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -5,6 +5,11 @@ import { log } from \"./util\";\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n+export interface InlayHintOptions {\n+    displayType: string;\n+    maxLength: number;\n+}\n+\n export interface CargoWatchOptions {\n     enable: boolean;\n     arguments: string[];\n@@ -149,8 +154,12 @@ export class Config {\n     get highlightingOn() { return this.cfg.get(\"highlightingOn\") as boolean; }\n     get rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n     get lruCapacity() { return this.cfg.get(\"lruCapacity\") as null | number; }\n-    get displayInlayHints() { return this.cfg.get(\"displayInlayHints\") as boolean; }\n-    get maxInlayHintLength() { return this.cfg.get(\"maxInlayHintLength\") as number; }\n+    get inlayHintOpts(): InlayHintOptions {\n+        return {\n+            displayType: this.cfg.get(\"inlayHintOpts.displayType\") as string,\n+            maxLength: this.cfg.get(\"inlayHintOpts.maxLength\") as number,\n+        };\n+    }\n     get excludeGlobs() { return this.cfg.get(\"excludeGlobs\") as string[]; }\n     get useClientWatching() { return this.cfg.get(\"useClientWatching\") as boolean; }\n     get featureFlags() { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }"}, {"sha": "8d291406d4b4e7a2732762be7d6fde741b1c0cbb", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e98aff109a1c4bda6a05f16981898425c302aa0c/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e98aff109a1c4bda6a05f16981898425c302aa0c/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=e98aff109a1c4bda6a05f16981898425c302aa0c", "patch": "@@ -10,7 +10,7 @@ export function activateInlayHints(ctx: Ctx) {\n     const maybeUpdater = {\n         updater: null as null | HintsUpdater,\n         onConfigChange() {\n-            if (!ctx.config.displayInlayHints) {\n+            if (ctx.config.inlayHintOpts.displayType === 'off') {\n                 return this.dispose();\n             }\n             if (!this.updater) this.updater = new HintsUpdater(ctx);"}]}