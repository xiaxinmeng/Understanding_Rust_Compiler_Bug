{"sha": "4fff19528b80e4d2600c8866937bb70e9482e13b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZmYxOTUyOGI4MGU0ZDI2MDBjODg2NjkzN2JiNzBlOTQ4MmUxM2I=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-27T22:10:16Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-03T13:11:18Z"}, "message": "remove filling on drop", "tree": {"sha": "0d48ff3872ca918571c26b886f9fbb895b0cede9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d48ff3872ca918571c26b886f9fbb895b0cede9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fff19528b80e4d2600c8866937bb70e9482e13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fff19528b80e4d2600c8866937bb70e9482e13b", "html_url": "https://github.com/rust-lang/rust/commit/4fff19528b80e4d2600c8866937bb70e9482e13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fff19528b80e4d2600c8866937bb70e9482e13b/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d6d646203254fbd3bddfd5f40b13140ef12211a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6d646203254fbd3bddfd5f40b13140ef12211a", "html_url": "https://github.com/rust-lang/rust/commit/8d6d646203254fbd3bddfd5f40b13140ef12211a"}], "stats": {"total": 108, "additions": 6, "deletions": 102}, "files": [{"sha": "a917327b0523a5ffce2ae6eb2a0f60967f5ee07d", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=4fff19528b80e4d2600c8866937bb70e9482e13b", "patch": "@@ -26,7 +26,7 @@ use glue;\n use type_::Type;\n use rustc_data_structures::fnv::FnvHashMap;\n \n-use super::{MirContext, TempRef, drop};\n+use super::{MirContext, TempRef};\n use super::constant::Const;\n use super::lvalue::{LvalueRef, load_fat_ptr};\n use super::operand::OperandRef;\n@@ -168,11 +168,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                cleanup_bundle.as_ref());\n                     self.bcx(target).at_start(|bcx| {\n                         debug_loc.apply_to_bcx(bcx);\n-                        drop::drop_fill(bcx, lvalue.llval, ty)\n                     });\n                 } else {\n                     bcx.call(drop_fn, &[llvalue], cleanup_bundle.as_ref());\n-                    drop::drop_fill(&bcx, lvalue.llval, ty);\n                     funclet_br(bcx, self.llblock(target));\n                 }\n             }\n@@ -215,7 +213,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     let llptr = self.trans_operand(&bcx, &args[0]).immediate();\n                     let val = self.trans_operand(&bcx, &args[1]);\n                     self.store_operand(&bcx, llptr, val);\n-                    self.set_operand_dropped(&bcx, &args[1]);\n                     funclet_br(bcx, self.llblock(target));\n                     return;\n                 }\n@@ -226,7 +223,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         this.trans_transmute(&bcx, &args[0], dest);\n                     });\n \n-                    self.set_operand_dropped(&bcx, &args[0]);\n                     funclet_br(bcx, self.llblock(target));\n                     return;\n                 }\n@@ -332,9 +328,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         }\n \n                         if let Some((_, target)) = *destination {\n-                            for op in args {\n-                                self.set_operand_dropped(&bcx, op);\n-                            }\n                             funclet_br(bcx, self.llblock(target));\n                         } else {\n                             // trans_intrinsic_call already used Unreachable.\n@@ -363,13 +356,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                                cleanup_bundle.as_ref());\n                     fn_ty.apply_attrs_callsite(invokeret);\n \n-                    landingpad.at_start(|bcx| {\n-                        debug_loc.apply_to_bcx(bcx);\n-                        for op in args {\n-                            self.set_operand_dropped(bcx, op);\n-                        }\n-                    });\n-\n                     if destination.is_some() {\n                         let ret_bcx = ret_bcx.build();\n                         ret_bcx.at_start(|ret_bcx| {\n@@ -379,9 +365,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 ty: sig.output.unwrap()\n                             };\n                             self.store_return(&ret_bcx, ret_dest, fn_ty.ret, op);\n-                            for op in args {\n-                                self.set_operand_dropped(&ret_bcx, op);\n-                            }\n                         });\n                     }\n                 } else {\n@@ -393,9 +376,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             ty: sig.output.unwrap()\n                         };\n                         self.store_return(&bcx, ret_dest, fn_ty.ret, op);\n-                        for op in args {\n-                            self.set_operand_dropped(&bcx, op);\n-                        }\n                         funclet_br(bcx, self.llblock(target));\n                     } else {\n                         // no need to drop args, because the call never returns"}, {"sha": "623cd5a6f8cc9009914ac8f298e2392ea3556030", "filename": "src/librustc_trans/mir/drop.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d646203254fbd3bddfd5f40b13140ef12211a/src%2Flibrustc_trans%2Fmir%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d646203254fbd3bddfd5f40b13140ef12211a/src%2Flibrustc_trans%2Fmir%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fdrop.rs?ref=8d6d646203254fbd3bddfd5f40b13140ef12211a", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use llvm::ValueRef;\n-use rustc::ty::Ty;\n-use adt;\n-use base;\n-use common::{self, BlockAndBuilder};\n-use machine;\n-use type_of;\n-use type_::Type;\n-\n-pub fn drop_fill<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>, value: ValueRef, ty: Ty<'tcx>) {\n-    let llty = type_of::type_of(bcx.ccx(), ty);\n-    let llptr = bcx.pointercast(value, Type::i8(bcx.ccx()).ptr_to());\n-    let filling = common::C_u8(bcx.ccx(), adt::DTOR_DONE);\n-    let size = machine::llsize_of(bcx.ccx(), llty);\n-    let align = common::C_u32(bcx.ccx(), machine::llalign_of_min(bcx.ccx(), llty));\n-    base::call_memset(&bcx, llptr, filling, size, align, false);\n-}"}, {"sha": "bc79482666c929c54ab7d7f2ef782b1ede917e6b", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=4fff19528b80e4d2600c8866937bb70e9482e13b", "patch": "@@ -20,7 +20,6 @@ use common::{self, BlockAndBuilder, CrateContext, C_uint, C_undef};\n use consts;\n use machine;\n use type_of::type_of;\n-use mir::drop;\n use Disr;\n \n use std::ptr;\n@@ -51,9 +50,6 @@ impl<'tcx> LvalueRef<'tcx> {\n     {\n         assert!(!ty.has_erasable_regions());\n         let lltemp = bcx.with_block(|bcx| base::alloc_ty(bcx, ty, name));\n-        if bcx.fcx().type_needs_drop(ty) {\n-            drop::drop_fill(bcx, lltemp, ty);\n-        }\n         LvalueRef::new_sized(lltemp, LvalueTy::from_ty(ty))\n     }\n "}, {"sha": "3ff304758116c2c836e896d0c1f0279c03a319f3", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=4fff19528b80e4d2600c8866937bb70e9482e13b", "patch": "@@ -431,7 +431,6 @@ fn arg_value_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n mod analyze;\n mod block;\n mod constant;\n-mod drop;\n mod lvalue;\n mod operand;\n mod rvalue;"}, {"sha": "107ec1159f010a7fd90730ed65578dbdf61d5d6f", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=4fff19528b80e4d2600c8866937bb70e9482e13b", "patch": "@@ -15,12 +15,11 @@ use base;\n use common::{self, Block, BlockAndBuilder};\n use datum;\n use value::Value;\n-use glue;\n \n use std::fmt;\n \n use super::lvalue::load_fat_ptr;\n-use super::{MirContext, TempRef, drop};\n+use super::{MirContext, TempRef};\n \n /// The representation of a Rust value. The enum variant is in fact\n /// uniquely determined by the value's type, but is kept as a\n@@ -179,29 +178,4 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             }\n         }\n     }\n-\n-    pub fn set_operand_dropped(&mut self,\n-                               bcx: &BlockAndBuilder<'bcx, 'tcx>,\n-                               operand: &mir::Operand<'tcx>) {\n-        match *operand {\n-            mir::Operand::Constant(_) => return,\n-            mir::Operand::Consume(ref lvalue) => {\n-                if let mir::Lvalue::Temp(idx) = *lvalue {\n-                    if let TempRef::Operand(..) = self.temps[idx as usize] {\n-                        // All lvalues which have an associated drop are promoted to an alloca\n-                        // beforehand. If this is an operand, it is safe to say this is never\n-                        // dropped and there\u2019s no reason for us to zero this out at all.\n-                        return\n-                    }\n-                }\n-                let lvalue = self.trans_lvalue(bcx, lvalue);\n-                let ty = lvalue.ty.to_ty(bcx.tcx());\n-                if !glue::type_needs_drop(bcx.tcx(), ty) {\n-                    return\n-                } else {\n-                    drop::drop_fill(bcx, lvalue.llval, ty);\n-                }\n-            }\n-        }\n-    }\n }"}, {"sha": "6d141862ac3fffdc911f01572c3123a78441e64d", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fff19528b80e4d2600c8866937bb70e9482e13b/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=4fff19528b80e4d2600c8866937bb70e9482e13b", "patch": "@@ -25,7 +25,6 @@ use type_of;\n use tvec;\n use value::Value;\n use Disr;\n-use glue;\n \n use super::MirContext;\n use super::operand::{OperandRef, OperandValue};\n@@ -48,7 +47,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                // FIXME: consider not copying constants through stack. (fixable by translating\n                // constants into OperandValue::Ref, why don\u2019t we do that yet if we don\u2019t?)\n                self.store_operand(&bcx, dest.llval, tr_operand);\n-               self.set_operand_dropped(&bcx, operand);\n                bcx\n            }\n \n@@ -92,7 +90,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         }\n                     }\n                 });\n-                self.set_operand_dropped(&bcx, source);\n                 bcx\n             }\n \n@@ -107,7 +104,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         block\n                     })\n                 });\n-                self.set_operand_dropped(&bcx, elem);\n                 bcx\n             }\n \n@@ -128,7 +124,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                                                             val, disr, i);\n                                 self.store_operand(&bcx, lldest_i, op);\n                             }\n-                            self.set_operand_dropped(&bcx, operand);\n                         }\n                     },\n                     _ => {\n@@ -167,7 +162,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 let dest = bcx.gepi(dest.llval, &[0, i]);\n                                 self.store_operand(&bcx, dest, op);\n                             }\n-                            self.set_operand_dropped(&bcx, operand);\n                         }\n                     }\n                 }\n@@ -209,9 +203,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     asm::trans_inline_asm(bcx, asm, outputs, input_vals);\n                 });\n \n-                for input in inputs {\n-                    self.set_operand_dropped(&bcx, input);\n-                }\n                 bcx\n             }\n \n@@ -269,7 +260,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 //   &'a fmt::Debug+Send => &'a fmt::Debug,\n                                 // So we need to pointercast the base to ensure\n                                 // the types match up.\n-                                self.set_operand_dropped(&bcx, source);\n                                 let llcast_ty = type_of::fat_ptr_base_ty(bcx.ccx(), cast_ty);\n                                 let lldata = bcx.pointercast(lldata, llcast_ty);\n                                 OperandValue::FatPtr(lldata, llextra)\n@@ -280,7 +270,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                     base::unsize_thin_ptr(bcx, lldata,\n                                                           operand.ty, cast_ty)\n                                 });\n-                                self.set_operand_dropped(&bcx, source);\n                                 OperandValue::FatPtr(lldata, llextra)\n                             }\n                             OperandValue::Ref(_) => {\n@@ -569,30 +558,23 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     }\n }\n \n-pub fn rvalue_creates_operand<'bcx, 'tcx>(mir: &mir::Mir<'tcx>,\n-                                          bcx: &BlockAndBuilder<'bcx, 'tcx>,\n+pub fn rvalue_creates_operand<'bcx, 'tcx>(_mir: &mir::Mir<'tcx>,\n+                                          _bcx: &BlockAndBuilder<'bcx, 'tcx>,\n                                           rvalue: &mir::Rvalue<'tcx>) -> bool {\n     match *rvalue {\n         mir::Rvalue::Ref(..) |\n         mir::Rvalue::Len(..) |\n         mir::Rvalue::Cast(..) | // (*)\n         mir::Rvalue::BinaryOp(..) |\n         mir::Rvalue::UnaryOp(..) |\n-        mir::Rvalue::Box(..) =>\n+        mir::Rvalue::Box(..) |\n+        mir::Rvalue::Use(..) =>\n             true,\n         mir::Rvalue::Repeat(..) |\n         mir::Rvalue::Aggregate(..) |\n         mir::Rvalue::Slice { .. } |\n         mir::Rvalue::InlineAsm { .. } =>\n             false,\n-        mir::Rvalue::Use(ref operand) => {\n-            let ty = mir.operand_ty(bcx.tcx(), operand);\n-            let ty = bcx.monomorphize(&ty);\n-            // Types that don't need dropping can just be an operand,\n-            // this allows temporary lvalues, used as rvalues, to\n-            // avoid a stack slot when it's unnecessary\n-            !glue::type_needs_drop(bcx.tcx(), ty)\n-        }\n     }\n \n     // (*) this is only true if the type is suitable"}]}