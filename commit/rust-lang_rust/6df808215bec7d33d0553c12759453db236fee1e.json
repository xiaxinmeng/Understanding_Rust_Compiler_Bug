{"sha": "6df808215bec7d33d0553c12759453db236fee1e", "node_id": "C_kwDOAAsO6NoAKDZkZjgwODIxNWJlYzdkMzNkMDU1M2MxMjc1OTQ1M2RiMjM2ZmVlMWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T10:47:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T10:47:27Z"}, "message": "Auto merge of #109002 - michaelvanstraten:master, r=petrochenkov\n\nAdded byte position range for `proc_macro::Span`\n\nCurrently, the [`Debug`](https://doc.rust-lang.org/beta/proc_macro/struct.Span.html#impl-Debug-for-Span) implementation for [`proc_macro::Span`](https://doc.rust-lang.org/beta/proc_macro/struct.Span.html#) calls the debug function implemented in the trait implementation of `server::Span` for the type `Rustc` in the `rustc-expand` crate.\n\nThe current implementation, of the referenced function, looks something like this:\n```rust\nfn debug(&mut self, span: Self::Span) -> String {\n    if self.ecx.ecfg.span_debug {\n        format!(\"{:?}\", span)\n    } else {\n        format!(\"{:?} bytes({}..{})\", span.ctxt(), span.lo().0, span.hi().0)\n    }\n}\n```\n\nIt returns the byte position of the [`Span`](https://doc.rust-lang.org/beta/proc_macro/struct.Span.html#) as an interpolated string.\n\nBecause this is currently the only way to get a spans position in the file, I might lead someone, who is interested in this information, to parsing this interpolated string back into a range of bytes, which I think is a very non-rusty way.\n\nThe proposed `position()`, method implemented in this PR, gives the ability to directly get this info.\nIt returns a [`std::ops::Range`](https://doc.rust-lang.org/std/ops/struct.Range.html#) wrapping the lowest and highest byte of the [`Span`](https://doc.rust-lang.org/beta/proc_macro/struct.Span.html#).\n\nI put it behind the `proc_macro_span` feature flag because many of the other functions that have a similar footprint also are annotated with it, I don't actually know if this is right.\n\nIt would be great if somebody could take a look at this, thank you very much in advanced.", "tree": {"sha": "423cd2b2d0837bded8da014c316b66ebf61cb9cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/423cd2b2d0837bded8da014c316b66ebf61cb9cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6df808215bec7d33d0553c12759453db236fee1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6df808215bec7d33d0553c12759453db236fee1e", "html_url": "https://github.com/rust-lang/rust/commit/6df808215bec7d33d0553c12759453db236fee1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6df808215bec7d33d0553c12759453db236fee1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbf04a5ee29101afbd1db665369bb1d21224efb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf04a5ee29101afbd1db665369bb1d21224efb5", "html_url": "https://github.com/rust-lang/rust/commit/dbf04a5ee29101afbd1db665369bb1d21224efb5"}, {"sha": "e89d7dfe39c10aefcee285b8012d8ae68ad44830", "url": "https://api.github.com/repos/rust-lang/rust/commits/e89d7dfe39c10aefcee285b8012d8ae68ad44830", "html_url": "https://github.com/rust-lang/rust/commit/e89d7dfe39c10aefcee285b8012d8ae68ad44830"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "a9cd8e705a4cf27701038086dc524d5d4bb30c93", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6df808215bec7d33d0553c12759453db236fee1e/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df808215bec7d33d0553c12759453db236fee1e/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=6df808215bec7d33d0553c12759453db236fee1e", "patch": "@@ -20,7 +20,7 @@ use token_stream::TokenStreamBuilder;\n mod symbol;\n pub use symbol::*;\n \n-use std::ops::Bound;\n+use std::ops::{Bound, Range};\n \n use crate::tt;\n \n@@ -298,6 +298,10 @@ impl server::Span for RustAnalyzer {\n         // FIXME handle span\n         span\n     }\n+    fn byte_range(&mut self, _span: Self::Span) -> Range<usize> {\n+        // FIXME handle span\n+        Range { start: 0, end: 0 }\n+    }\n     fn start(&mut self, _span: Self::Span) -> LineColumn {\n         // FIXME handle span\n         LineColumn { line: 0, column: 0 }"}]}