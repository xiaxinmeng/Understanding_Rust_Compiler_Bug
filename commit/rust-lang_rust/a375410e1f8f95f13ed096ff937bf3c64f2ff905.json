{"sha": "a375410e1f8f95f13ed096ff937bf3c64f2ff905", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNzU0MTBlMWY4Zjk1ZjEzZWQwOTZmZjkzN2JmM2M2NGYyZmY5MDU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-12-15T02:02:33Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-12-15T02:33:25Z"}, "message": "Call poly_project_and_unify_type on types that contain inference types\n\nCommit f57247c48cb59 (Ensure that Rusdoc discovers all necessary auto\ntrait bounds) added a check to ensure that we only attempt to unify a\nprojection predicatre with inference variables. However, the check it\nadded was too strict - instead of checking that a type *contains* an\ninference variable (e.g. '&_', 'MyType<_>'), it required the type to\n*be* an inference variable (i.e. only '_' would match).\n\nThis commit relaxes the check to use 'ty.has_infer_types', ensuring that\nwe perform unification wherever possible.\n\nFixes #56822", "tree": {"sha": "b07bb829df7dfdc7d7dd21a5680c620d0e14b4ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b07bb829df7dfdc7d7dd21a5680c620d0e14b4ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a375410e1f8f95f13ed096ff937bf3c64f2ff905", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlwUZ/YACgkQtAh+UQ6Y\nsWREPQ//Y62Fjdg7M118L2DFB0tdUFUfLxbBlI970uNjbE9KIbtxMqt6WLtugfjQ\n0IhfzVEjxcnXBgQ+v70yiOBgtfAvQICjHHC/0tsUstfzXUaO4ivG2fagF5O5+aEx\nVQrSUTz/1QG006PV0n1UioZGM0+uYL1w7vZEfY6iajWO8fJIxmLibNvRnFtXOqFL\n+3mvK63iXgzLOhVc+SwpZPzqBKmeJFokkcAoF5XrR6kqwb/dOeBdV0DUNdja2pRL\nEuH6bDwDlAS1hhTsJrtTigcFI+oMXvJ/PBF/MOm4WkQt4t/V+xsP/40YdEikddFF\nJjLbwwRuA7g9RDV0VGJg8Q4Mh1lgxLFqsaBUPX10xH10scU+ZmyguIeCfCpIefoP\nBAi6PigNlIo7WTz9nQ1pvDGQhbUd7e3Jw6oPjQlpEUy5+t9uyNVEjlAZWiB2F2mM\nF8ewAsXJut+CKcAwgFvMRsBgiMoNJ5VO3xw6/ynWOs8//56k0jVtlyaF4DAuwHMy\nXoDV9cgjHWAuKu9EMlO7vFPOcotNj0XiBK9toErUQLVQB2pOPk/Grn7s7ypGc4TY\nJRoGMWty9ZHOnEviIw6nv/67aMYanNJl7mPIpVIB0zWFtIKrIrlN7vSqOzZDMY2l\nolCCdijcPB3x+OYLKf4B5ZZGjYxnYbx9R3wYX4aq5WujvmvA11w=\n=aBPx\n-----END PGP SIGNATURE-----", "payload": "tree b07bb829df7dfdc7d7dd21a5680c620d0e14b4ea\nparent 96d1334e567237b1507cd277938e7ae2de75ff51\nauthor Aaron Hill <aa1ronham@gmail.com> 1544839353 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1544841205 -0500\n\nCall poly_project_and_unify_type on types that contain inference types\n\nCommit f57247c48cb59 (Ensure that Rusdoc discovers all necessary auto\ntrait bounds) added a check to ensure that we only attempt to unify a\nprojection predicatre with inference variables. However, the check it\nadded was too strict - instead of checking that a type *contains* an\ninference variable (e.g. '&_', 'MyType<_>'), it required the type to\n*be* an inference variable (i.e. only '_' would match).\n\nThis commit relaxes the check to use 'ty.has_infer_types', ensuring that\nwe perform unification wherever possible.\n\nFixes #56822\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a375410e1f8f95f13ed096ff937bf3c64f2ff905", "html_url": "https://github.com/rust-lang/rust/commit/a375410e1f8f95f13ed096ff937bf3c64f2ff905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a375410e1f8f95f13ed096ff937bf3c64f2ff905/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d1334e567237b1507cd277938e7ae2de75ff51", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d1334e567237b1507cd277938e7ae2de75ff51", "html_url": "https://github.com/rust-lang/rust/commit/96d1334e567237b1507cd277938e7ae2de75ff51"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "8c0a8646ad5f7c295481c090d6f5d0b2f35dcd40", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a375410e1f8f95f13ed096ff937bf3c64f2ff905/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a375410e1f8f95f13ed096ff937bf3c64f2ff905/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=a375410e1f8f95f13ed096ff937bf3c64f2ff905", "patch": "@@ -742,9 +742,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     }\n \n                     // We can only call poly_project_and_unify_type when our predicate's\n-                    // Ty is an inference variable - otherwise, there won't be anything to\n+                    // Ty contains an inference variable - otherwise, there won't be anything to\n                     // unify\n-                    if p.ty().skip_binder().is_ty_infer() {\n+                    if p.ty().skip_binder().has_infer_types() {\n                         debug!(\"Projecting and unifying projection predicate {:?}\",\n                                predicate);\n                         match poly_project_and_unify_type(select, &obligation.with(p.clone())) {"}, {"sha": "41aba1a007ad8fc3f97f9af506e13c7bfe27220e", "filename": "src/test/rustdoc/issue-56822.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a375410e1f8f95f13ed096ff937bf3c64f2ff905/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a375410e1f8f95f13ed096ff937bf3c64f2ff905/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-56822.rs?ref=a375410e1f8f95f13ed096ff937bf3c64f2ff905", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Wrapper<T>(T);\n+\n+trait MyTrait {\n+    type Output;\n+}\n+\n+impl<'a, I, T: 'a> MyTrait for Wrapper<I>\n+    where I: MyTrait<Output=&'a T>\n+{\n+    type Output = T;\n+}\n+\n+struct Inner<'a, T>(&'a T);\n+\n+impl<'a, T> MyTrait for Inner<'a, T> {\n+    type Output = &'a T;\n+}\n+\n+// @has issue_56822/struct.Parser.html\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'a> Send for \\\n+// Parser<'a>\"\n+pub struct Parser<'a> {\n+    field: <Wrapper<Inner<'a, u8>> as MyTrait>::Output\n+}"}]}