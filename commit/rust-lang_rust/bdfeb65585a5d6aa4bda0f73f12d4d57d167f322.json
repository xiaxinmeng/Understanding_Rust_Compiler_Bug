{"sha": "bdfeb65585a5d6aa4bda0f73f12d4d57d167f322", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZmViNjU1ODVhNWQ2YWE0YmRhMGY3M2YxMmQ0ZDU3ZDE2N2YzMjI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-08-28T06:50:00Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-08-28T06:50:00Z"}, "message": "Forbid the Sized bound on unsized types\n\ncloses #16800", "tree": {"sha": "53cb19d09d16eee8c240f79b4a4dd5cf343b3624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53cb19d09d16eee8c240f79b4a4dd5cf343b3624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322", "html_url": "https://github.com/rust-lang/rust/commit/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b87e9ff0ffa1e08556bf8f41058f1caeb99ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b87e9ff0ffa1e08556bf8f41058f1caeb99ac6", "html_url": "https://github.com/rust-lang/rust/commit/f2b87e9ff0ffa1e08556bf8f41058f1caeb99ac6"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "2698ac94a99c6f0fd3ce3db217d89206b90c5ff2", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=bdfeb65585a5d6aa4bda0f73f12d4d57d167f322", "patch": "@@ -167,5 +167,6 @@ register_diagnostics!(\n     E0155,\n     E0156,\n     E0157,\n-    E0158\n+    E0158,\n+    E0159\n )"}, {"sha": "ee2d73dda95231e570bc6c31cd6a0ea01673c081", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=bdfeb65585a5d6aa4bda0f73f12d4d57d167f322", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use middle::freevars::freevar_entry;\n use middle::freevars;\n use middle::subst;\n@@ -593,15 +592,15 @@ fn check_ty(cx: &mut Context, aty: &Ty) {\n     match aty.node {\n         TyPath(_, _, id) => {\n             match cx.tcx.item_substs.borrow().find(&id) {\n-                None => { }\n+                None => {}\n                 Some(ref item_substs) => {\n                     let def_map = cx.tcx.def_map.borrow();\n                     let did = def_map.get_copy(&id).def_id();\n-                    let generics = ty::lookup_item_type(cx.tcx, did).generics;\n-                    for def in generics.types.iter() {\n+                    let ty = ty::lookup_item_type(cx.tcx, did);\n+                    for def in ty.generics.types.iter() {\n                         let ty = *item_substs.substs.types.get(def.space,\n                                                                def.index);\n-                        check_typaram_bounds(cx, aty.span, ty, def)\n+                        check_typaram_bounds(cx, aty.span, ty, def);\n                     }\n                 }\n             }\n@@ -645,6 +644,20 @@ pub fn check_typaram_bounds(cx: &Context,\n     });\n }\n \n+// Check that the programmer has not added the `Sized` bound to a trait type\n+// which would fool the compiler into thinking that trait types are sized, when\n+// they are really unsized.\n+fn check_false_sized(cx: &Context, sp: Span, ty: ty::t) {\n+    match ty::get(ty).sty {\n+        ty::ty_trait(..) if ty::type_is_sized(cx.tcx, ty) => {\n+            span_err!(cx.tcx.sess, sp, E0159,\n+                      \"explicitly adding `Sized` bound to an unsized type `{}`\",\n+                       ty_to_string(cx.tcx, ty));\n+        }\n+        _ => {}\n+    }\n+}\n+\n fn check_bounds_on_structs_or_enums_in_type_if_possible(cx: &mut Context,\n                                                         span: Span,\n                                                         ty: ty::t) {\n@@ -674,7 +687,8 @@ fn check_bounds_on_structs_or_enums_in_type_if_possible(cx: &mut Context,\n                                                   .zip(polytype.generics\n                                                                .types\n                                                                .iter()) {\n-                    check_typaram_bounds(cx, span, *ty, type_param_def)\n+                    check_typaram_bounds(cx, span, *ty, type_param_def);\n+                    check_false_sized(cx, span, *ty);\n                 }\n \n                 // Check trait bounds.\n@@ -702,6 +716,7 @@ fn check_bounds_on_structs_or_enums_in_type_if_possible(cx: &mut Context,\n                                             cx.tcx)).as_slice());\n                 })\n             }\n+            ty::ty_uniq(ty) => check_false_sized(cx, span, ty),\n             _ => {}\n         }\n     });"}, {"sha": "e0a929dcf4f8c4157adf410151bd12fac8570733", "filename": "src/test/compile-fail/bad-sized.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfeb65585a5d6aa4bda0f73f12d4d57d167f322/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=bdfeb65585a5d6aa4bda0f73f12d4d57d167f322", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::RefCell;\n+\n+trait Trait {}\n+\n+pub fn main() {\n+    let x: Vec<Trait + Sized> = Vec::new();\n+    //~^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n+    //~^^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n+    let x: Vec<Box<Trait + Sized>> = Vec::new();\n+    //~^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n+    //~^^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n+    let x: Vec<Box<RefCell<Trait + Sized>>> = Vec::new();\n+    //~^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n+    //~^^ ERROR explicitly adding `Sized` bound to an unsized type `Trait+Sized`\n+}"}]}