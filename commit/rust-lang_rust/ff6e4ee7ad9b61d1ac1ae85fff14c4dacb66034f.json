{"sha": "ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNmU0ZWU3YWQ5YjYxZDFhYzFhZTg1ZmZmMTRjNGRhY2I2NjAzNGY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-02-28T19:07:51Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-02-28T19:07:51Z"}, "message": "Use resolved types in body of coerce_unsized", "tree": {"sha": "5fd9a2cb5462eef07978746a7fd54c673c05804e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd9a2cb5462eef07978746a7fd54c673c05804e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl5ZZRgACgkQtAh+UQ6Y\nsWTVAQ/+N926MUk+AXcj1qwDO0X7QzKVRyvpwQNCw9vdjzaTMTXOS54XOpvCX4S5\nF6hanERV+5tyZM0svBvZWZ2YkaPl8xoPUx8rgRyabr169KrY1sunreresII2QmnL\nOA0irxCsixoY0THfc+ONCarO3RZ1mYXdn87AdN70EF/cKXK8lsIB8thk2oB/cLRh\nK7FaLHH8mThzxF524bt8XtOUJu1ybNAXJEHKqbAcVLs/o2HpKmnOkWbrcu16HVCa\ne/KZ7N1iG0XNcjVFZ3yqWNRN5I+lXWBUUhdqXMuONOslWvCRNIIIFs/p+jrUHCNO\nPXEI2/PVGQpahIzL6n+DRD6qAAxDftrh3zeN3iaVDCaBKA2pO2uTPNunMh1jmkWv\nybKwCNzS1srv+92zZ95cg4ppIlB2VObq9NseUPGw8gT+IcqL8AKVbEu1agwFlNzE\nHSMaEUg7OdBVLtUQi9NqnCoAE+lRx39GvT1bfKmf1zFG9rGM4rjwL68GcO9b9b7h\n8jnD0GFaioWUFrXNd35PfwCZ8+B4GlVfSgxojKzVQqieOfP8A0Q0HYYawI7S4KxW\n6Gdv9M8Q4O59uut61D8VIpT8r8DZe6gg1G9gq3y1SlNKWhvb0Vv+ecetMluKWsOP\nlpouWvLmFLIqoQqf3xuBTJHDmlwLMLlYV5+rT7/e6fCNcKf2tKE=\n=om5G\n-----END PGP SIGNATURE-----", "payload": "tree 5fd9a2cb5462eef07978746a7fd54c673c05804e\nparent 32c360b993d9706d48e1b216b1a35f3bdf422574\nauthor Aaron Hill <aa1ronham@gmail.com> 1582916871 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1582916871 -0500\n\nUse resolved types in body of coerce_unsized\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f", "html_url": "https://github.com/rust-lang/rust/commit/ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c360b993d9706d48e1b216b1a35f3bdf422574", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c360b993d9706d48e1b216b1a35f3bdf422574", "html_url": "https://github.com/rust-lang/rust/commit/32c360b993d9706d48e1b216b1a35f3bdf422574"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "8d02102afc6d8bf328ec019b7de48eef357190b9", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f", "patch": "@@ -452,9 +452,13 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     // &[T; n] or &mut [T; n] -> &[T]\n     // or &mut [T; n] -> &mut [T]\n     // or &Concrete -> &Trait, etc.\n-    fn coerce_unsized(&self, source: Ty<'tcx>, target: Ty<'tcx>) -> CoerceResult<'tcx> {\n+    fn coerce_unsized(&self, mut source: Ty<'tcx>, mut target: Ty<'tcx>) -> CoerceResult<'tcx> {\n         debug!(\"coerce_unsized(source={:?}, target={:?})\", source, target);\n \n+        source = self.shallow_resolve(source);\n+        target = self.shallow_resolve(target);\n+        debug!(\"coerce_unsized: resolved source={:?} target={:?}\", source, target);\n+\n         // These 'if' statements require some explanation.\n         // The `CoerceUnsized` trait is special - it is only\n         // possible to write `impl CoerceUnsized<B> for A` where\n@@ -476,11 +480,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         // the compiler! Therefore, we can be sure that coercion will always fail\n         // when either the source or target type is a type variable. This allows us\n         // to skip performing any trait selection, and immediately bail out.\n-        if self.shallow_resolve(source).is_ty_var() {\n+        if source.is_ty_var() {\n             debug!(\"coerce_unsized: source is a TyVar, bailing out\");\n             return Err(TypeError::Mismatch);\n         }\n-        if self.shallow_resolve(target).is_ty_var() {\n+        if target.is_ty_var() {\n             debug!(\"coerce_unsized: target is a TyVar, bailing out\");\n             return Err(TypeError::Mismatch);\n         }"}]}