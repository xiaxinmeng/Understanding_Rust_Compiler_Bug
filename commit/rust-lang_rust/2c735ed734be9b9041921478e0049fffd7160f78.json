{"sha": "2c735ed734be9b9041921478e0049fffd7160f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNzM1ZWQ3MzRiZTliOTA0MTkyMTQ3OGUwMDQ5ZmZmZDcxNjBmNzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-25T14:22:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-25T14:22:24Z"}, "message": "Merge #7426\n\n7426: Create all `ModuleId`s through a `DefMap` method r=jonas-schievink a=jonas-schievink\n\n`ModuleId` needs to be able to represent blocks, and only the\r\nassociated `DefMap` will know how to construct that `ModuleId`\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "724e39e3933126ee3129c3e4e0c971b443221afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/724e39e3933126ee3129c3e4e0c971b443221afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c735ed734be9b9041921478e0049fffd7160f78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgDtQgCRBK7hj4Ov3rIwAAdHIIAJwu8rRiYCFBqZZ4K6q5LXDJ\nOfHowwc4RNcN2+siiipyjyI+ovW/sM6rNIaEKpWO8KnGp6fzPphhp7k+Wdr6otFO\nN8o75DNqSweyT6n9hHynByqddl8Cr9ssPgvVtyDsB3IkB7kALNWAQOIlq2GpbZEd\nnBxECqHXviE95KooAtOBLj8u2XAfIfQMSzox7SwMcGnTwcEpEYxLtkt81sYr4e9w\noh14OYDIATAPHgZcU1yAiF1nBqWlWqxsFhJ6xF4TelgFqUgxyu4aDvOFwuppXRYj\noAs9jllWUlFs8Bq5obabIoCI19gOBdI1N06MUgqNu5m/dh8X+D9nc6WzwEdFNRI=\n=DsWO\n-----END PGP SIGNATURE-----\n", "payload": "tree 724e39e3933126ee3129c3e4e0c971b443221afd\nparent 0a6b2b784618ffbc7775e9a3e3aaf42689bb2962\nparent 5c241b07666bc7b29e97b8206e505944775266a0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611584544 +0000\ncommitter GitHub <noreply@github.com> 1611584544 +0000\n\nMerge #7426\n\n7426: Create all `ModuleId`s through a `DefMap` method r=jonas-schievink a=jonas-schievink\n\n`ModuleId` needs to be able to represent blocks, and only the\r\nassociated `DefMap` will know how to construct that `ModuleId`\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c735ed734be9b9041921478e0049fffd7160f78", "html_url": "https://github.com/rust-lang/rust/commit/2c735ed734be9b9041921478e0049fffd7160f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c735ed734be9b9041921478e0049fffd7160f78/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a6b2b784618ffbc7775e9a3e3aaf42689bb2962", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6b2b784618ffbc7775e9a3e3aaf42689bb2962", "html_url": "https://github.com/rust-lang/rust/commit/0a6b2b784618ffbc7775e9a3e3aaf42689bb2962"}, {"sha": "5c241b07666bc7b29e97b8206e505944775266a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c241b07666bc7b29e97b8206e505944775266a0", "html_url": "https://github.com/rust-lang/rust/commit/5c241b07666bc7b29e97b8206e505944775266a0"}], "stats": {"total": 135, "additions": 48, "deletions": 87}, "files": [{"sha": "e9bb4f5416c78e907b981f93dadc6205a893c21a", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -18,8 +18,8 @@ use hir_def::{\n     type_ref::{Mutability, TypeRef},\n     AdtId, AssocContainerId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId,\n     DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule, ImplId, LifetimeParamId,\n-    LocalEnumVariantId, LocalFieldId, LocalModuleId, Lookup, ModuleId, StaticId, StructId, TraitId,\n-    TypeAliasId, TypeParamId, UnionId,\n+    LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n+    TypeParamId, UnionId,\n };\n use hir_def::{find_path::PrefixKind, item_scope::ItemInNs, visibility::Visibility};\n use hir_expand::{\n@@ -90,8 +90,8 @@ impl Crate {\n     }\n \n     pub fn root_module(self, db: &dyn HirDatabase) -> Module {\n-        let module_id = db.crate_def_map(self.id).root();\n-        Module::new(self, module_id)\n+        let def_map = db.crate_def_map(self.id);\n+        Module { id: def_map.module_id(def_map.root()) }\n     }\n \n     pub fn root_file(self, db: &dyn HirDatabase) -> FileId {\n@@ -275,10 +275,6 @@ impl ModuleDef {\n }\n \n impl Module {\n-    pub(crate) fn new(krate: Crate, crate_module_id: LocalModuleId) -> Module {\n-        Module { id: ModuleId::top_level(krate.id, crate_module_id) }\n-    }\n-\n     /// Name of this module.\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         let def_map = self.id.def_map(db.upcast());\n@@ -302,7 +298,7 @@ impl Module {\n     /// in the module tree of any target in `Cargo.toml`.\n     pub fn crate_root(self, db: &dyn HirDatabase) -> Module {\n         let def_map = db.crate_def_map(self.id.krate());\n-        self.with_module_id(def_map.root())\n+        Module { id: def_map.module_id(def_map.root()) }\n     }\n \n     /// Iterates over all child modules.\n@@ -311,7 +307,7 @@ impl Module {\n         let children = def_map[self.id.local_id]\n             .children\n             .iter()\n-            .map(|(_, module_id)| self.with_module_id(*module_id))\n+            .map(|(_, module_id)| Module { id: def_map.module_id(*module_id) })\n             .collect::<Vec<_>>();\n         children.into_iter()\n     }\n@@ -321,7 +317,7 @@ impl Module {\n         // FIXME: handle block expressions as modules (their parent is in a different DefMap)\n         let def_map = self.id.def_map(db.upcast());\n         let parent_id = def_map[self.id.local_id].parent?;\n-        Some(self.with_module_id(parent_id))\n+        Some(Module { id: def_map.module_id(parent_id) })\n     }\n \n     pub fn path_to_root(self, db: &dyn HirDatabase) -> Vec<Module> {\n@@ -406,10 +402,6 @@ impl Module {\n         def_map[self.id.local_id].scope.impls().map(Impl::from).collect()\n     }\n \n-    pub(crate) fn with_module_id(self, module_id: LocalModuleId) -> Module {\n-        Module::new(self.krate(), module_id)\n-    }\n-\n     /// Finds a path that can be used to refer to the given item from within\n     /// this module, if possible.\n     pub fn find_use_path(self, db: &dyn DefDatabase, item: impl Into<ItemInNs>) -> Option<ModPath> {\n@@ -1013,8 +1005,9 @@ impl MacroDef {\n     /// early, in `hir_expand`, where modules simply do not exist yet.\n     pub fn module(self, db: &dyn HirDatabase) -> Option<Module> {\n         let krate = self.id.krate;\n-        let module_id = db.crate_def_map(krate).root();\n-        Some(Module::new(Crate { id: krate }, module_id))\n+        let def_map = db.crate_def_map(krate);\n+        let module_id = def_map.root();\n+        Some(Module { id: def_map.module_id(module_id) })\n     }\n \n     /// XXX: this parses the file"}, {"sha": "6c612ee863574de93fc4561bc7bb60133f62b140", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -30,13 +30,12 @@ pub(super) struct SourceToDefCtx<'a, 'b> {\n impl SourceToDefCtx<'_, '_> {\n     pub(super) fn file_to_def(&mut self, file: FileId) -> Option<ModuleId> {\n         let _p = profile::span(\"SourceBinder::to_module_def\");\n-        let (krate, local_id) = self.db.relevant_crates(file).iter().find_map(|&crate_id| {\n+        self.db.relevant_crates(file).iter().find_map(|&crate_id| {\n             // FIXME: inner items\n             let crate_def_map = self.db.crate_def_map(crate_id);\n             let local_id = crate_def_map.modules_for_file(file).next()?;\n-            Some((crate_id, local_id))\n-        })?;\n-        Some(ModuleId::top_level(krate, local_id))\n+            Some(crate_def_map.module_id(local_id))\n+        })\n     }\n \n     pub(super) fn module_to_def(&mut self, src: InFile<ast::Module>) -> Option<ModuleId> {\n@@ -63,8 +62,7 @@ impl SourceToDefCtx<'_, '_> {\n         let child_name = src.value.name()?.as_name();\n         let def_map = parent_module.def_map(self.db.upcast());\n         let child_id = *def_map[parent_module.local_id].children.get(&child_name)?;\n-        // FIXME: handle block expression modules\n-        Some(ModuleId::top_level(parent_module.krate(), child_id))\n+        Some(def_map.module_id(child_id))\n     }\n \n     pub(super) fn trait_to_def(&mut self, src: InFile<ast::Trait>) -> Option<TraitId> {"}, {"sha": "94a1d567d882ca6437e34ffa86a7a0ea8e6beda6", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -53,12 +53,8 @@ fn check_self_super(def_map: &DefMap, item: ItemInNs, from: ModuleId) -> Option<\n         Some(ModPath::from_segments(PathKind::Super(0), Vec::new()))\n     } else if let Some(parent_id) = def_map[from.local_id].parent {\n         // - if the item is the parent module, use `super` (this is not used recursively, since `super::super` is ugly)\n-        if item\n-            == ItemInNs::Types(ModuleDefId::ModuleId(ModuleId {\n-                krate: from.krate,\n-                local_id: parent_id,\n-            }))\n-        {\n+        let parent_id = def_map.module_id(parent_id);\n+        if item == ItemInNs::Types(ModuleDefId::ModuleId(parent_id)) {\n             Some(ModPath::from_segments(PathKind::Super(1), Vec::new()))\n         } else {\n             None\n@@ -120,12 +116,8 @@ fn find_path_inner(\n     }\n \n     // - if the item is the crate root, return `crate`\n-    if item\n-        == ItemInNs::Types(ModuleDefId::ModuleId(ModuleId {\n-            krate: from.krate,\n-            local_id: def_map.root(),\n-        }))\n-    {\n+    let root = def_map.module_id(def_map.root());\n+    if item == ItemInNs::Types(ModuleDefId::ModuleId(root)) {\n         return Some(ModPath::from_segments(PathKind::Crate, Vec::new()));\n     }\n \n@@ -175,7 +167,7 @@ fn find_path_inner(\n \n     // - otherwise, look for modules containing (reexporting) it and import it from one of those\n \n-    let crate_root = ModuleId { local_id: def_map.root(), krate: from.krate };\n+    let crate_root = def_map.module_id(def_map.root());\n     let crate_attrs = db.attrs(crate_root.into());\n     let prefer_no_std = crate_attrs.by_key(\"no_std\").exists();\n     let mut best_path = None;\n@@ -288,14 +280,11 @@ fn find_local_import_locations(\n     // Compute the initial worklist. We start with all direct child modules of `from` as well as all\n     // of its (recursive) parent modules.\n     let data = &def_map[from.local_id];\n-    let mut worklist = data\n-        .children\n-        .values()\n-        .map(|child| ModuleId { krate: from.krate, local_id: *child })\n-        .collect::<Vec<_>>();\n+    let mut worklist =\n+        data.children.values().map(|child| def_map.module_id(*child)).collect::<Vec<_>>();\n     let mut parent = data.parent;\n     while let Some(p) = parent {\n-        worklist.push(ModuleId { krate: from.krate, local_id: p });\n+        worklist.push(def_map.module_id(p));\n         parent = def_map[p].parent;\n     }\n "}, {"sha": "0a3dc79564d8ecf7cbd6a59486adf992d921f81f", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -75,7 +75,7 @@ impl ImportMap {\n \n         // We look only into modules that are public(ly reexported), starting with the crate root.\n         let empty = ImportPath { segments: vec![] };\n-        let root = ModuleId { krate, local_id: def_map.root() };\n+        let root = def_map.module_id(def_map.root());\n         let mut worklist = vec![(root, empty)];\n         while let Some((module, mod_path)) = worklist.pop() {\n             let ext_def_map;"}, {"sha": "cf09ebd3f08688213ae568ca6ca2e84b3237514a", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -78,10 +78,6 @@ pub struct ModuleId {\n }\n \n impl ModuleId {\n-    pub fn top_level(krate: CrateId, local_id: LocalModuleId) -> Self {\n-        Self { krate, local_id }\n-    }\n-\n     pub fn def_map(&self, db: &dyn db::DefDatabase) -> Arc<DefMap> {\n         db.crate_def_map(self.krate)\n     }"}, {"sha": "4fbbecb386d834605f8d40fea70ceb3c3d7314b8", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -265,6 +265,10 @@ impl DefMap {\n         self.extern_prelude.iter()\n     }\n \n+    pub fn module_id(&self, local_id: LocalModuleId) -> ModuleId {\n+        ModuleId { krate: self.krate, local_id }\n+    }\n+\n     pub(crate) fn resolve_path(\n         &self,\n         db: &dyn DefDatabase,"}, {"sha": "393170b32f1ecf491d6e9af88cd0b784685298f0", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -37,8 +37,8 @@ use crate::{\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n     AdtId, AsMacroCall, AstId, AstIdWithPath, ConstLoc, ContainerId, EnumLoc, EnumVariantId,\n-    FunctionLoc, ImplLoc, Intern, LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc,\n-    TraitLoc, TypeAliasLoc, UnionLoc,\n+    FunctionLoc, ImplLoc, Intern, LocalModuleId, ModuleDefId, StaticLoc, StructLoc, TraitLoc,\n+    TypeAliasLoc, UnionLoc,\n };\n \n const GLOB_RECURSION_LIMIT: usize = 100;\n@@ -56,10 +56,9 @@ pub(super) fn collect_defs(\n     for dep in &crate_graph[def_map.krate].dependencies {\n         log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n         let dep_def_map = db.crate_def_map(dep.crate_id);\n-        def_map.extern_prelude.insert(\n-            dep.as_name(),\n-            ModuleId { krate: dep.crate_id, local_id: dep_def_map.root }.into(),\n-        );\n+        def_map\n+            .extern_prelude\n+            .insert(dep.as_name(), dep_def_map.module_id(dep_def_map.root).into());\n \n         // look for the prelude\n         // If the dependency defines a prelude, we overwrite an already defined\n@@ -332,11 +331,9 @@ impl DefCollector<'_> {\n             // exported in type/value namespace. This function reduces the visibility of all items\n             // in the crate root that aren't proc macros.\n             let root = self.def_map.root;\n+            let module_id = self.def_map.module_id(root);\n             let root = &mut self.def_map.modules[root];\n-            root.scope.censor_non_proc_macros(ModuleId {\n-                krate: self.def_map.krate,\n-                local_id: self.def_map.root,\n-            });\n+            root.scope.censor_non_proc_macros(module_id);\n         }\n     }\n \n@@ -1029,8 +1026,7 @@ impl ModCollector<'_, '_> {\n                     continue;\n                 }\n             }\n-            let module =\n-                ModuleId { krate: self.def_collector.def_map.krate, local_id: self.module_id };\n+            let module = self.def_collector.def_map.module_id(self.module_id);\n             let container = ContainerId::ModuleId(module);\n \n             let mut def = None;\n@@ -1097,10 +1093,7 @@ impl ModCollector<'_, '_> {\n                     }\n                 }\n                 ModItem::Impl(imp) => {\n-                    let module = ModuleId {\n-                        krate: self.def_collector.def_map.krate,\n-                        local_id: self.module_id,\n-                    };\n+                    let module = self.def_collector.def_map.module_id(self.module_id);\n                     let container = ContainerId::ModuleId(module);\n                     let impl_id = ImplLoc { container, id: ItemTreeId::new(self.file_id, imp) }\n                         .intern(self.def_collector.db);\n@@ -1343,7 +1336,7 @@ impl ModCollector<'_, '_> {\n             modules[res].scope.define_legacy_macro(name, mac)\n         }\n         modules[self.module_id].children.insert(name.clone(), res);\n-        let module = ModuleId { krate: self.def_collector.def_map.krate, local_id: res };\n+        let module = self.def_collector.def_map.module_id(res);\n         let def: ModuleDefId = module.into();\n         self.def_collector.def_map.modules[self.module_id].scope.define_def(def);\n         self.def_collector.update("}, {"sha": "c1eded5f2b1de8a4cb4d82ba56d6c14212cda1ec", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n-    AdtId, CrateId, EnumVariantId, LocalModuleId, ModuleDefId, ModuleId,\n+    AdtId, CrateId, EnumVariantId, LocalModuleId, ModuleDefId,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -66,10 +66,7 @@ impl DefMap {\n     pub(super) fn resolve_name_in_extern_prelude(&self, name: &Name) -> PerNs {\n         if name == &name!(self) {\n             mark::hit!(extern_crate_self_as);\n-            return PerNs::types(\n-                ModuleId { krate: self.krate, local_id: self.root }.into(),\n-                Visibility::Public,\n-            );\n+            return PerNs::types(self.module_id(self.root).into(), Visibility::Public);\n         }\n         self.extern_prelude\n             .get(name)\n@@ -154,21 +151,15 @@ impl DefMap {\n             PathKind::DollarCrate(krate) => {\n                 if krate == self.krate {\n                     mark::hit!(macro_dollar_crate_self);\n-                    PerNs::types(\n-                        ModuleId { krate: self.krate, local_id: self.root }.into(),\n-                        Visibility::Public,\n-                    )\n+                    PerNs::types(self.module_id(self.root).into(), Visibility::Public)\n                 } else {\n                     let def_map = db.crate_def_map(krate);\n-                    let module = ModuleId { krate, local_id: def_map.root };\n+                    let module = def_map.module_id(def_map.root);\n                     mark::hit!(macro_dollar_crate_other);\n                     PerNs::types(module.into(), Visibility::Public)\n                 }\n             }\n-            PathKind::Crate => PerNs::types(\n-                ModuleId { krate: self.krate, local_id: self.root }.into(),\n-                Visibility::Public,\n-            ),\n+            PathKind::Crate => PerNs::types(self.module_id(self.root).into(), Visibility::Public),\n             // plain import or absolute path in 2015: crate-relative with\n             // fallback to extern prelude (with the simplification in\n             // rust-lang/rust#57745)\n@@ -205,10 +196,7 @@ impl DefMap {\n                 let m = successors(Some(original_module), |m| self.modules[*m].parent)\n                     .nth(lvl as usize);\n                 if let Some(local_id) = m {\n-                    PerNs::types(\n-                        ModuleId { krate: self.krate, local_id }.into(),\n-                        Visibility::Public,\n-                    )\n+                    PerNs::types(self.module_id(local_id).into(), Visibility::Public)\n                 } else {\n                     log::debug!(\"super path in root module\");\n                     return ResolvePathResult::empty(ReachedFixedPoint::Yes);"}, {"sha": "9021ea7125c517022e28ed23280cc50d54979bd3", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -459,7 +459,7 @@ impl Resolver {\n \n     pub fn module(&self) -> Option<ModuleId> {\n         let (def_map, local_id) = self.module_scope()?;\n-        Some(ModuleId { krate: def_map.krate(), local_id })\n+        Some(def_map.module_id(local_id))\n     }\n \n     pub fn krate(&self) -> Option<CrateId> {"}, {"sha": "c4e36eda5e5f099cc1d7eb24cefe053fbfd2c839", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -15,7 +15,7 @@ use rustc_hash::FxHashSet;\n use syntax::{TextRange, TextSize};\n use test_utils::extract_annotations;\n \n-use crate::{db::DefDatabase, ModuleDefId};\n+use crate::{db::DefDatabase, ModuleDefId, ModuleId};\n \n #[salsa::database(\n     base_db::SourceDatabaseExtStorage,\n@@ -72,12 +72,12 @@ impl FileLoader for TestDB {\n }\n \n impl TestDB {\n-    pub(crate) fn module_for_file(&self, file_id: FileId) -> crate::ModuleId {\n+    pub(crate) fn module_for_file(&self, file_id: FileId) -> ModuleId {\n         for &krate in self.relevant_crates(file_id).iter() {\n             let crate_def_map = self.crate_def_map(krate);\n             for (local_id, data) in crate_def_map.modules() {\n                 if data.origin.file_id() == Some(file_id) {\n-                    return crate::ModuleId { krate, local_id };\n+                    return crate_def_map.module_id(local_id);\n                 }\n             }\n         }"}, {"sha": "381b98ba8086763e749111d05c5f961ffd94b57c", "filename": "crates/hir_ty/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c735ed734be9b9041921478e0049fffd7160f78/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs?ref=2c735ed734be9b9041921478e0049fffd7160f78", "patch": "@@ -83,7 +83,7 @@ impl TestDB {\n             let crate_def_map = self.crate_def_map(krate);\n             for (local_id, data) in crate_def_map.modules() {\n                 if data.origin.file_id() == Some(file_id) {\n-                    return ModuleId::top_level(krate, local_id);\n+                    return crate_def_map.module_id(local_id);\n                 }\n             }\n         }"}]}