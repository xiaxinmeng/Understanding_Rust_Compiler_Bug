{"sha": "5cd99aa1677075baecbd5224861b36a7719e0f25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZDk5YWExNjc3MDc1YmFlY2JkNTIyNDg2MWIzNmE3NzE5ZTBmMjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-17T18:10:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-30T11:55:29Z"}, "message": "more detailed tests around diverging type variables", "tree": {"sha": "4e97f913a6b4582ecce2bdde24d7016708687f84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e97f913a6b4582ecce2bdde24d7016708687f84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cd99aa1677075baecbd5224861b36a7719e0f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd99aa1677075baecbd5224861b36a7719e0f25", "html_url": "https://github.com/rust-lang/rust/commit/5cd99aa1677075baecbd5224861b36a7719e0f25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cd99aa1677075baecbd5224861b36a7719e0f25/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52e524a3578b7661d6430735c7cd51eeccdacb0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/52e524a3578b7661d6430735c7cd51eeccdacb0b", "html_url": "https://github.com/rust-lang/rust/commit/52e524a3578b7661d6430735c7cd51eeccdacb0b"}], "stats": {"total": 214, "additions": 140, "deletions": 74}, "files": [{"sha": "ed6263d0fdbd13b97812cbd889d331f6496b3d79", "filename": "src/test/compile-fail/defaulted-unit-warning.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5cd99aa1677075baecbd5224861b36a7719e0f25/src%2Ftest%2Fcompile-fail%2Fdefaulted-unit-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd99aa1677075baecbd5224861b36a7719e0f25/src%2Ftest%2Fcompile-fail%2Fdefaulted-unit-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefaulted-unit-warning.rs?ref=5cd99aa1677075baecbd5224861b36a7719e0f25", "patch": "@@ -22,16 +22,6 @@ impl Deserialize for () {\n     }\n }\n \n-fn doit() -> Result<(), String> {\n-    let _ = match Deserialize::deserialize() {\n-        //~^ ERROR code relies on type\n-        //~| WARNING previously accepted\n-        Ok(x) => x,\n-        Err(e) => return Err(e),\n-    };\n-    Ok(())\n-}\n-\n trait ImplementedForUnitButNotNever {}\n \n impl ImplementedForUnitButNotNever for () {}\n@@ -46,6 +36,6 @@ fn smeg() {\n }\n \n fn main() {\n-    let _ = doit();\n+    smeg();\n }\n "}, {"sha": "a43b1a45fe939fdc88adbb71593c24d797cccecb", "filename": "src/test/compile-fail/never-fallback.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/52e524a3578b7661d6430735c7cd51eeccdacb0b/src%2Ftest%2Fcompile-fail%2Fnever-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e524a3578b7661d6430735c7cd51eeccdacb0b/src%2Ftest%2Fcompile-fail%2Fnever-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-fallback.rs?ref=52e524a3578b7661d6430735c7cd51eeccdacb0b", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that diverging types default to ! when feature(never_type) is enabled. This test is the\n-// same as run-pass/unit-fallback.rs except that ! is enabled.\n-\n-#![feature(never_type)]\n-\n-trait Balls: Sized {\n-    fn smeg() -> Result<Self, ()>;\n-}\n-\n-impl Balls for () {\n-    fn smeg() -> Result<(), ()> { Ok(()) }\n-}\n-\n-struct Flah;\n-\n-impl Flah {\n-    fn flah<T: Balls>(&self) -> Result<T, ()> {\n-        T::smeg()\n-    }\n-}\n-\n-fn doit() -> Result<(), ()> {\n-    // The type of _ is unconstrained here and should default to !\n-    let _ = try!(Flah.flah()); //~ ERROR the trait bound\n-    Ok(())\n-}\n-\n-fn main() {\n-    let _ = doit();\n-}\n-"}, {"sha": "656e90d2d52d7e0f57cf3f1d1add2791df92bd7a", "filename": "src/test/run-pass/diverging-fallback-control-flow.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/5cd99aa1677075baecbd5224861b36a7719e0f25/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd99aa1677075baecbd5224861b36a7719e0f25/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs?ref=5cd99aa1677075baecbd5224861b36a7719e0f25", "patch": "@@ -0,0 +1,106 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test various cases where we permit an unconstrained variable\n+// to fallback based on control-flow.\n+//\n+// These represent current behavior, but are pretty dubious.  I would\n+// like to revisit these and potentially change them. --nmatsakis\n+\n+#![feature(never_type)]\n+#![feature(loop_break_value)]\n+\n+trait BadDefault {\n+    fn default() -> Self;\n+}\n+\n+impl BadDefault for u32 {\n+    fn default() -> Self {\n+        0\n+    }\n+}\n+\n+impl BadDefault for ! {\n+    fn default() -> ! {\n+        panic!()\n+    }\n+}\n+\n+fn assignment() {\n+    let x;\n+\n+    if true {\n+        x = BadDefault::default();\n+    } else {\n+        x = return;\n+    }\n+}\n+\n+fn assignment_rev() {\n+    let x;\n+\n+    if true {\n+        x = return;\n+    } else {\n+        x = BadDefault::default();\n+    }\n+}\n+\n+fn if_then_else() {\n+    let _x = if true {\n+        BadDefault::default()\n+    } else {\n+        return;\n+    };\n+}\n+\n+fn if_then_else_rev() {\n+    let _x = if true {\n+        return;\n+    } else {\n+        BadDefault::default()\n+    };\n+}\n+\n+fn match_arm() {\n+    let _x = match Ok(BadDefault::default()) {\n+        Ok(v) => v,\n+        Err(()) => return,\n+    };\n+}\n+\n+fn match_arm_rev() {\n+    let _x = match Ok(BadDefault::default()) {\n+        Err(()) => return,\n+        Ok(v) => v,\n+    };\n+}\n+\n+fn loop_break() {\n+    let _x = loop {\n+        if false {\n+            break return;\n+        } else {\n+            break BadDefault::default();\n+        }\n+    };\n+}\n+\n+fn loop_break_rev() {\n+    let _x = loop {\n+        if false {\n+            break return;\n+        } else {\n+            break BadDefault::default();\n+        }\n+    };\n+}\n+\n+fn main() { }"}, {"sha": "664a329c228ae4a3ca52050ee6a2b1812ff38788", "filename": "src/test/run-pass/diverging-fallback-method-chain.rs", "status": "renamed", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5cd99aa1677075baecbd5224861b36a7719e0f25/src%2Ftest%2Frun-pass%2Fdiverging-fallback-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd99aa1677075baecbd5224861b36a7719e0f25/src%2Ftest%2Frun-pass%2Fdiverging-fallback-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fallback-method-chain.rs?ref=5cd99aa1677075baecbd5224861b36a7719e0f25", "patch": "@@ -8,31 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that diverging types default to () (with feature(never_type) disabled).\n+// Test a regression found when building compiler. The `produce()`\n+// error type `T` winds up getting unified with result of `x.parse()`;\n+// the type of the closure given to `unwrap_or_else` needs to be\n+// inferred to `usize`.\n \n-trait Balls: Sized {\n-    fn smeg() -> Result<Self, ()>;\n-}\n-\n-impl Balls for () {\n-    fn smeg() -> Result<(), ()> { Ok(()) }\n-}\n-\n-struct Flah;\n+use std::num::ParseIntError;\n \n-impl Flah {\n-    fn flah<T: Balls>(&self) -> Result<T, ()> {\n-        T::smeg()\n-    }\n-}\n-\n-fn doit() -> Result<(), ()> {\n-    // The type of _ is unconstrained here and should default to ()\n-    let _ = try!(Flah.flah());\n-    Ok(())\n+fn produce<T>() -> Result<&'static str, T> {\n+    Ok(\"22\")\n }\n \n fn main() {\n-    let _ = doit();\n+    let x: usize = produce()\n+        .and_then(|x| x.parse())\n+        .unwrap_or_else(|_| panic!());\n+    println!(\"{}\", x);\n }\n-", "previous_filename": "src/test/run-pass/unit-fallback.rs"}, {"sha": "49f90e7c91f34585597d2709c1472cb0153c1b1b", "filename": "src/test/run-pass/diverging-fallback-option.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5cd99aa1677075baecbd5224861b36a7719e0f25/src%2Ftest%2Frun-pass%2Fdiverging-fallback-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd99aa1677075baecbd5224861b36a7719e0f25/src%2Ftest%2Frun-pass%2Fdiverging-fallback-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fallback-option.rs?ref=5cd99aa1677075baecbd5224861b36a7719e0f25", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(warnings)]\n+\n+// Here the type of `c` is `Option<?T>`, where `?T` is unconstrained.\n+// Because there is data-flow from the `{ return; }` block, which\n+// diverges and hence has type `!`, into `c`, we will default `?T` to\n+// `!`, and hence this code compiles rather than failing and requiring\n+// a type annotation.\n+\n+fn main() {\n+    let c = Some({ return; });\n+    c.unwrap();\n+}"}]}