{"sha": "e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "node_id": "C_kwDOAAsO6NoAKGUxYWE3M2VmNDBiODkwMmIyY2JkZDgyNzI5NzhmY2MxYzQ3Y2YzYzc", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-12-21T15:24:49Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-12-21T15:24:49Z"}, "message": "Disable inlay hint location links on vscode < 1.76", "tree": {"sha": "2f73d440bb710749f0f4228ddcf44be6362bfc93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f73d440bb710749f0f4228ddcf44be6362bfc93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "html_url": "https://github.com/rust-lang/rust/commit/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801a2231bf154a720db97d50e8e581d1f8666e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/801a2231bf154a720db97d50e8e581d1f8666e2a", "html_url": "https://github.com/rust-lang/rust/commit/801a2231bf154a720db97d50e8e581d1f8666e2a"}], "stats": {"total": 131, "additions": 121, "deletions": 10}, "files": [{"sha": "9aef78143d6dd4316275bd7b475fd772f4f28a52", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "patch": "@@ -27,6 +27,7 @@ mod bind_pat;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n+    pub location_links: bool,\n     pub render_colons: bool,\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n@@ -182,6 +183,7 @@ struct InlayHintLabelBuilder<'a> {\n     db: &'a RootDatabase,\n     result: InlayHintLabel,\n     last_part: String,\n+    location_link_enabled: bool,\n     location: Option<FileRange>,\n }\n \n@@ -193,6 +195,9 @@ impl fmt::Write for InlayHintLabelBuilder<'_> {\n \n impl HirWrite for InlayHintLabelBuilder<'_> {\n     fn start_location_link(&mut self, def: ModuleDefId) {\n+        if !self.location_link_enabled {\n+            return;\n+        }\n         if self.location.is_some() {\n             never!(\"location link is already started\");\n         }\n@@ -204,6 +209,9 @@ impl HirWrite for InlayHintLabelBuilder<'_> {\n     }\n \n     fn end_location_link(&mut self) {\n+        if !self.location_link_enabled {\n+            return;\n+        }\n         self.make_new_part();\n     }\n }\n@@ -260,6 +268,7 @@ fn label_of_ty(\n         db: sema.db,\n         last_part: String::new(),\n         location: None,\n+        location_link_enabled: config.location_links,\n         result: InlayHintLabel::default(),\n     };\n     rec(sema, &famous_defs, config.max_length, ty, &mut label_builder);\n@@ -416,6 +425,7 @@ mod tests {\n     use super::ClosureReturnTypeHints;\n \n     pub(super) const DISABLED_CONFIG: InlayHintsConfig = InlayHintsConfig {\n+        location_links: false,\n         render_colons: false,\n         type_hints: false,\n         parameter_hints: false,\n@@ -430,14 +440,16 @@ mod tests {\n         max_length: None,\n         closing_brace_hints_min_lines: None,\n     };\n+    pub(super) const DISABLED_CONFIG_WITH_LINKS: InlayHintsConfig =\n+        InlayHintsConfig { location_links: true, ..DISABLED_CONFIG };\n     pub(super) const TEST_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         type_hints: true,\n         parameter_hints: true,\n         chaining_hints: true,\n         closure_return_type_hints: ClosureReturnTypeHints::WithBlock,\n         binding_mode_hints: true,\n         lifetime_elision_hints: LifetimeElisionHints::Always,\n-        ..DISABLED_CONFIG\n+        ..DISABLED_CONFIG_WITH_LINKS\n     };\n \n     #[track_caller]"}, {"sha": "7766d497918df8fda34eff1cad207e09ccbef4ea", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "patch": "@@ -194,7 +194,8 @@ mod tests {\n     use crate::{fixture, inlay_hints::InlayHintsConfig};\n \n     use crate::inlay_hints::tests::{\n-        check, check_expect, check_with_config, DISABLED_CONFIG, TEST_CONFIG,\n+        check, check_expect, check_with_config, DISABLED_CONFIG, DISABLED_CONFIG_WITH_LINKS,\n+        TEST_CONFIG,\n     };\n     use crate::ClosureReturnTypeHints;\n \n@@ -290,7 +291,7 @@ fn main() {\n     fn iterator_hint_regression_issue_12674() {\n         // Ensure we don't crash while solving the projection type of iterators.\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n             r#\"\n //- minicore: iterators\n struct S<T>(T);"}, {"sha": "efeb2b792550220e0e7c91d4bb9e4ee7097d9318", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "patch": "@@ -74,7 +74,10 @@ mod tests {\n     use expect_test::expect;\n \n     use crate::{\n-        inlay_hints::tests::{check_expect, check_with_config, DISABLED_CONFIG, TEST_CONFIG},\n+        inlay_hints::tests::{\n+            check_expect, check_with_config, DISABLED_CONFIG, DISABLED_CONFIG_WITH_LINKS,\n+            TEST_CONFIG,\n+        },\n         InlayHintsConfig,\n     };\n \n@@ -86,7 +89,11 @@ mod tests {\n     #[test]\n     fn chaining_hints_ignore_comments() {\n         check_expect(\n-            InlayHintsConfig { type_hints: false, chaining_hints: true, ..DISABLED_CONFIG },\n+            InlayHintsConfig {\n+                type_hints: false,\n+                chaining_hints: true,\n+                ..DISABLED_CONFIG_WITH_LINKS\n+            },\n             r#\"\n struct A(B);\n impl A { fn into_b(self) -> B { self.0 } }\n@@ -179,10 +186,69 @@ fn main() {\n     }\n \n     #[test]\n-    fn struct_access_chaining_hints() {\n+    fn disabled_location_links() {\n         check_expect(\n             InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n+    struct A { pub b: B }\n+    struct B { pub c: C }\n+    struct C(pub bool);\n+    struct D;\n+\n+    impl D {\n+        fn foo(&self) -> i32 { 42 }\n+    }\n+\n+    fn main() {\n+        let x = A { b: B { c: C(true) } }\n+            .b\n+            .c\n+            .0;\n+        let x = D\n+            .foo();\n+    }\"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 143..190,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"C\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                143..190,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 143..179,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"B\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                143..179,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_access_chaining_hints() {\n+        check_expect(\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n+            r#\"\n struct A { pub b: B }\n struct B { pub c: C }\n struct C(pub bool);\n@@ -264,7 +330,7 @@ fn main() {\n     #[test]\n     fn generic_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n             r#\"\n struct A<T>(T);\n struct B<T>(T);\n@@ -372,7 +438,7 @@ fn main() {\n     #[test]\n     fn shorten_iterator_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n             r#\"\n //- minicore: iterators\n use core::iter;"}, {"sha": "e340c64c54b55ed44f319e806c2fbeb4a152a1cf", "filename": "crates/ide/src/inlay_hints/closing_brace.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs?ref=e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "patch": "@@ -109,7 +109,10 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    let linked_location = name_range.map(|range| FileRange { file_id, range });\n+    let linked_location = config\n+        .location_links\n+        .then(|| name_range.map(|range| FileRange { file_id, range }))\n+        .flatten();\n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBraceHint,"}, {"sha": "42b5951c842f292f8cee7e9cc94999aebfa8188f", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "patch": "@@ -106,6 +106,7 @@ impl StaticIndex<'_> {\n             .analysis\n             .inlay_hints(\n                 &InlayHintsConfig {\n+                    location_links: true,\n                     render_colons: true,\n                     type_hints: true,\n                     parameter_hints: true,"}, {"sha": "ec5053e991d3d56b84dffb1d8d16eb9648bc1734", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "patch": "@@ -183,6 +183,8 @@ fn run_server() -> Result<()> {\n         }\n     }\n \n+    config.client_specific_adjustments(&initialize_params.client_info);\n+\n     let server_capabilities = rust_analyzer::server_capabilities(&config);\n \n     let initialize_result = lsp_types::InitializeResult {"}, {"sha": "0bcc91eb411e9bb202f31b4da0823d1d579a5853", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "patch": "@@ -20,7 +20,7 @@ use ide_db::{\n     SnippetCap,\n };\n use itertools::Itertools;\n-use lsp_types::{ClientCapabilities, MarkupKind};\n+use lsp_types::{ClientCapabilities, ClientInfo, MarkupKind};\n use project_model::{\n     CargoConfig, CargoFeatures, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource,\n     UnsetTestCrates,\n@@ -333,6 +333,8 @@ config_data! {\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n         inlayHints_lifetimeElisionHints_useParameterNames: bool    = \"false\",\n+        /// Whether to use location links for parts of type mentioned in inlay hints.\n+        inlayHints_locationLinks: bool                             = \"true\",\n         /// Maximum length for inlay hints. Set to null to have an unlimited length.\n         inlayHints_maxLength: Option<usize>                        = \"25\",\n         /// Whether to show function parameter name inlay hints at the call\n@@ -714,6 +716,19 @@ impl Config {\n         }\n     }\n \n+    pub fn client_specific_adjustments(&mut self, client_info: &Option<ClientInfo>) {\n+        // FIXME: remove this when we drop support for vscode 1.65 and below\n+        if let Some(client) = client_info {\n+            if client.name.contains(\"Code\") || client.name.contains(\"Codium\") {\n+                if let Some(version) = &client.version {\n+                    if version.as_str() < \"1.76\" {\n+                        self.data.inlayHints_locationLinks = false;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     pub fn update(&mut self, mut json: serde_json::Value) -> Result<(), ConfigUpdateError> {\n         tracing::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n@@ -1196,6 +1211,7 @@ impl Config {\n \n     pub fn inlay_hints(&self) -> InlayHintsConfig {\n         InlayHintsConfig {\n+            location_links: self.data.inlayHints_locationLinks,\n             render_colons: self.data.inlayHints_renderColons,\n             type_hints: self.data.inlayHints_typeHints_enable,\n             parameter_hints: self.data.inlayHints_parameterHints_enable,"}, {"sha": "47511aad0fea2efb863f1826de49899f6ba8a528", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "patch": "@@ -469,6 +469,11 @@ Whether to show inlay type hints for elided lifetimes in function signatures.\n --\n Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n --\n+[[rust-analyzer.inlayHints.locationLinks]]rust-analyzer.inlayHints.locationLinks (default: `true`)::\n++\n+--\n+Whether to use location links for parts of type mentioned in inlay hints.\n+--\n [[rust-analyzer.inlayHints.maxLength]]rust-analyzer.inlayHints.maxLength (default: `25`)::\n +\n --"}, {"sha": "5b09ee6f7dab550669ac6b3f10777cd155491d26", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "patch": "@@ -995,6 +995,11 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.locationLinks\": {\n+                    \"markdownDescription\": \"Whether to use location links for parts of type mentioned in inlay hints.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.maxLength\": {\n                     \"markdownDescription\": \"Maximum length for inlay hints. Set to null to have an unlimited length.\",\n                     \"default\": 25,"}]}