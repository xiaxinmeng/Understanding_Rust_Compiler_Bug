{"sha": "7cc7b8f190565af501b0b4eda7be18f029a5d676", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYzdiOGYxOTA1NjVhZjUwMWIwYjRlZGE3YmUxOGYwMjlhNWQ2NzY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-02-24T21:37:55Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-06T03:47:08Z"}, "message": "Execute all parallel blocks even if they panic in a single-threaded compiler", "tree": {"sha": "9c1cd50c3491045b16f420dc1766e43d12a87906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1cd50c3491045b16f420dc1766e43d12a87906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cc7b8f190565af501b0b4eda7be18f029a5d676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc7b8f190565af501b0b4eda7be18f029a5d676", "html_url": "https://github.com/rust-lang/rust/commit/7cc7b8f190565af501b0b4eda7be18f029a5d676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cc7b8f190565af501b0b4eda7be18f029a5d676/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01f7450ae40694a22ad5ba5df4a2d770ae9f6702", "url": "https://api.github.com/repos/rust-lang/rust/commits/01f7450ae40694a22ad5ba5df4a2d770ae9f6702", "html_url": "https://github.com/rust-lang/rust/commit/01f7450ae40694a22ad5ba5df4a2d770ae9f6702"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "80d9c1e2998471ba82f6427fa6703aa1f6e2b853", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cc7b8f190565af501b0b4eda7be18f029a5d676/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc7b8f190565af501b0b4eda7be18f029a5d676/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7cc7b8f190565af501b0b4eda7be18f029a5d676", "patch": "@@ -30,7 +30,7 @@ use syntax::util::parser::ExprPrecedence;\n use crate::ty::AdtKind;\n use crate::ty::query::Providers;\n \n-use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync};\n+use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_data_structures::thin_vec::ThinVec;\n \n use serialize::{self, Encoder, Encodable, Decoder, Decodable};\n@@ -782,15 +782,15 @@ impl Crate {\n         where V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send\n     {\n         parallel!({\n-            par_iter(&self.items).for_each(|(_, item)| {\n+            par_for_each_in(&self.items, |(_, item)| {\n                 visitor.visit_item(item);\n             });\n         }, {\n-            par_iter(&self.trait_items).for_each(|(_, trait_item)| {\n+            par_for_each_in(&self.trait_items, |(_, trait_item)| {\n                 visitor.visit_trait_item(trait_item);\n             });\n         }, {\n-            par_iter(&self.impl_items).for_each(|(_, impl_item)| {\n+            par_for_each_in(&self.impl_items, |(_, impl_item)| {\n                 visitor.visit_impl_item(impl_item);\n             });\n         });"}, {"sha": "f006a95f3fa3c217206035f482c049252322b451", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7cc7b8f190565af501b0b4eda7be18f029a5d676/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc7b8f190565af501b0b4eda7be18f029a5d676/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=7cc7b8f190565af501b0b4eda7be18f029a5d676", "patch": "@@ -65,6 +65,7 @@ cfg_if! {\n         }\n \n         use std::ops::Add;\n+        use std::panic::{resume_unwind, catch_unwind, AssertUnwindSafe};\n \n         #[derive(Debug)]\n         pub struct Atomic<T: Copy>(Cell<T>);\n@@ -130,7 +131,19 @@ cfg_if! {\n         #[macro_export]\n         macro_rules! parallel {\n             ($($blocks:tt),*) => {\n-                $($blocks)*;\n+                let mut panic = None;\n+                $(\n+                    if let Err(p) = ::std::panic::catch_unwind(\n+                        ::std::panic::AssertUnwindSafe(|| $blocks)\n+                    ) {\n+                        if panic.is_none() {\n+                            panic = Some(p);\n+                        }\n+                    }\n+                )*\n+                if let Some(panic) = panic {\n+                    ::std::panic::resume_unwind(panic);\n+                }\n             }\n         }\n \n@@ -140,6 +153,24 @@ cfg_if! {\n             t.into_iter()\n         }\n \n+        pub fn par_for_each_in<T: IntoIterator>(\n+            t: T,\n+            for_each:\n+                impl Fn(<<T as IntoIterator>::IntoIter as Iterator>::Item) + Sync + Send\n+        ) {\n+            let mut panic = None;\n+            t.into_iter().for_each(|i| {\n+                if let Err(p) = catch_unwind(AssertUnwindSafe(|| for_each(i))) {\n+                    if panic.is_none() {\n+                        panic = Some(p);\n+                    }\n+                }\n+            });\n+            if let Some(panic) = panic {\n+                resume_unwind(panic);\n+            }\n+        }\n+\n         pub type MetadataRef = OwningRef<Box<dyn Erased>, [u8]>;\n \n         pub use std::rc::Rc as Lrc;\n@@ -308,6 +339,15 @@ cfg_if! {\n             t.into_par_iter()\n         }\n \n+        pub fn par_for_each_in<T: IntoParallelIterator>(\n+            t: T,\n+            for_each: impl Fn(\n+                <<T as IntoParallelIterator>::Iter as ParallelIterator>::Item\n+            ) + Sync + Send\n+        ) {\n+            t.into_par_iter().for_each(for_each)\n+        }\n+\n         pub type MetadataRef = OwningRef<Box<dyn Erased + Send + Sync>, [u8]>;\n \n         /// This makes locks panic if they are already held."}]}