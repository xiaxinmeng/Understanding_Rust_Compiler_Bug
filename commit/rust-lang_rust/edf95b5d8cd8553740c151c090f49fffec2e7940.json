{"sha": "edf95b5d8cd8553740c151c090f49fffec2e7940", "node_id": "C_kwDOAAsO6NoAKGVkZjk1YjVkOGNkODU1Mzc0MGMxNTFjMDkwZjQ5ZmZmZWMyZTc5NDA", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-05-08T14:43:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-05-22T16:59:38Z"}, "message": "rustc_privacy: Reach underlying types of `impl Trait`s in a separate pass\n\noutside of fixed point iteration.", "tree": {"sha": "3359b619389017179fa3e1f6b845bb4a6c0f9c1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3359b619389017179fa3e1f6b845bb4a6c0f9c1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edf95b5d8cd8553740c151c090f49fffec2e7940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edf95b5d8cd8553740c151c090f49fffec2e7940", "html_url": "https://github.com/rust-lang/rust/commit/edf95b5d8cd8553740c151c090f49fffec2e7940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edf95b5d8cd8553740c151c090f49fffec2e7940/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41c422dffe5d05ba12be02cbd745db787b2c6d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e41c422dffe5d05ba12be02cbd745db787b2c6d3", "html_url": "https://github.com/rust-lang/rust/commit/e41c422dffe5d05ba12be02cbd745db787b2c6d3"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "65dfdf31e5457c5ff4d5d1716bcdae9ae9ae9b07", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/edf95b5d8cd8553740c151c090f49fffec2e7940/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf95b5d8cd8553740c151c090f49fffec2e7940/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=edf95b5d8cd8553740c151c090f49fffec2e7940", "patch": "@@ -454,6 +454,8 @@ struct EmbargoVisitor<'tcx> {\n     ///     n::p::f()\n     /// }\n     macro_reachable: FxHashSet<(LocalDefId, LocalDefId)>,\n+    /// Preliminary pass for marking all underlying types of `impl Trait`s as reachable.\n+    impl_trait_pass: bool,\n     /// Has something changed in the level map?\n     changed: bool,\n }\n@@ -700,6 +702,20 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n \n impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n+        if self.impl_trait_pass\n+            && let hir::ItemKind::OpaqueTy(ref opaque) = item.kind\n+            && !opaque.in_trait {\n+            // FIXME: This is some serious pessimization intended to workaround deficiencies\n+            // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time\n+            // reachable if they are returned via `impl Trait`, even from private functions.\n+            let pub_ev = EffectiveVisibility::from_vis(ty::Visibility::Public);\n+            self.reach_through_impl_trait(item.owner_id.def_id, pub_ev)\n+                .generics()\n+                .predicates()\n+                .ty();\n+            return;\n+        }\n+\n         // Update levels of nested things and mark all items\n         // in interfaces of reachable items as reachable.\n         let item_ev = self.get(item.owner_id.def_id);\n@@ -709,28 +725,12 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             | hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::GlobalAsm(..) => {}\n             // The interface is empty, and all nested items are processed by `visit_item`.\n-            hir::ItemKind::Mod(..) => {}\n+            hir::ItemKind::Mod(..) | hir::ItemKind::OpaqueTy(..) => {}\n             hir::ItemKind::Macro(ref macro_def, _) => {\n                 if let Some(item_ev) = item_ev {\n                     self.update_reachability_from_macro(item.owner_id.def_id, macro_def, item_ev);\n                 }\n             }\n-            hir::ItemKind::OpaqueTy(ref opaque) => {\n-                // HACK(jynelson): trying to infer the type of `impl trait` breaks `async-std` (and `pub async fn` in general)\n-                // Since rustdoc never needs to do codegen and doesn't care about link-time reachability,\n-                // mark this as unreachable.\n-                // See https://github.com/rust-lang/rust/issues/75100\n-                if !opaque.in_trait && !self.tcx.sess.opts.actually_rustdoc {\n-                    // FIXME: This is some serious pessimization intended to workaround deficiencies\n-                    // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time\n-                    // reachable if they are returned via `impl Trait`, even from private functions.\n-                    let exist_ev = EffectiveVisibility::from_vis(ty::Visibility::Public);\n-                    self.reach_through_impl_trait(item.owner_id.def_id, exist_ev)\n-                        .generics()\n-                        .predicates()\n-                        .ty();\n-                }\n-            }\n             hir::ItemKind::Const(..)\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Fn(..)\n@@ -2130,10 +2130,22 @@ fn effective_visibilities(tcx: TyCtxt<'_>, (): ()) -> &EffectiveVisibilities {\n         tcx,\n         effective_visibilities: tcx.resolutions(()).effective_visibilities.clone(),\n         macro_reachable: Default::default(),\n+        // HACK(jynelson): trying to infer the type of `impl Trait` breaks `async-std` (and\n+        // `pub async fn` in general). Since rustdoc never needs to do codegen and doesn't\n+        // care about link-time reachability, keep them unreachable (issue #75100).\n+        impl_trait_pass: !tcx.sess.opts.actually_rustdoc,\n         changed: false,\n     };\n \n     visitor.effective_visibilities.check_invariants(tcx, true);\n+    if visitor.impl_trait_pass {\n+        // Underlying types of `impl Trait`s are marked as reachable unconditionally,\n+        // so this pass doesn't need to be a part of the fixed point iteration below.\n+        tcx.hir().visit_all_item_likes_in_crate(&mut visitor);\n+        visitor.impl_trait_pass = false;\n+        visitor.changed = false;\n+    }\n+\n     loop {\n         tcx.hir().visit_all_item_likes_in_crate(&mut visitor);\n         if visitor.changed {"}]}