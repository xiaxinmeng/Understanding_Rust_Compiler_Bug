{"sha": "030166757c01db52805a55792224c15955e8af02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMDE2Njc1N2MwMWRiNTI4MDVhNTU3OTIyMjRjMTU5NTVlOGFmMDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-03T20:57:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-03T20:58:50Z"}, "message": "Fix transmute on ByValPair\n\nFixes #227", "tree": {"sha": "3561e092cf919be280fa4e8d8933842b5557644d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3561e092cf919be280fa4e8d8933842b5557644d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030166757c01db52805a55792224c15955e8af02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030166757c01db52805a55792224c15955e8af02", "html_url": "https://github.com/rust-lang/rust/commit/030166757c01db52805a55792224c15955e8af02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030166757c01db52805a55792224c15955e8af02/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff5d59efe5c08634646281e265fdbb8e64f05d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff5d59efe5c08634646281e265fdbb8e64f05d1", "html_url": "https://github.com/rust-lang/rust/commit/8ff5d59efe5c08634646281e265fdbb8e64f05d1"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "1248d74b3d92a2b5ab941dba4e202f7be18685a9", "filename": "src/eval_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030166757c01db52805a55792224c15955e8af02/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030166757c01db52805a55792224c15955e8af02/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=030166757c01db52805a55792224c15955e8af02", "patch": "@@ -1111,6 +1111,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx> {\n+        // Note that it is really important that the type here is the right one, and matches the type things are read at.\n+        // In case `src_val` is a `ByValPair`, we don't do any magic here to handle padding properly, which is only\n+        // correct if we never look at this data with the wrong type.\n+\n         match dest {\n             Lvalue::Global(cid) => {\n                 let dest = *self.globals.get_mut(&cid).expect(\"global should be cached\");"}, {"sha": "13e037f28b68a7cfd0710afb93ce3a53514fd454", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/030166757c01db52805a55792224c15955e8af02/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030166757c01db52805a55792224c15955e8af02/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=030166757c01db52805a55792224c15955e8af02", "patch": "@@ -395,16 +395,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"transmute\" => {\n                 let src_ty = substs.type_at(0);\n                 let dest_ty = substs.type_at(1);\n-                let src_align = self.type_align(src_ty)?;\n-                let dest_align = self.type_align(dest_ty)?;\n                 let size = self.type_size(dest_ty)?.expect(\"transmute() type must be sized\");\n-                if dest_align < src_align {\n-                    let ptr = self.force_allocation(dest)?.to_ptr()?;\n-                    self.memory.mark_packed(ptr, size);\n-                    self.write_value_to_ptr(arg_vals[0], PrimVal::Ptr(ptr), dest_ty)?;\n-                } else {\n-                    self.write_value(arg_vals[0], dest, dest_ty)?;\n-                }\n+                let ptr = self.force_allocation(dest)?.to_ptr()?;\n+                self.memory.mark_packed(ptr, size);\n+                self.write_value_to_ptr(arg_vals[0], PrimVal::Ptr(ptr), src_ty)?;\n             }\n \n             \"uninit\" => {"}, {"sha": "fad51215dd3b856ea06e51a86c69df3976d3027a", "filename": "tests/compile-fail/transmute-pair-undef.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/030166757c01db52805a55792224c15955e8af02/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030166757c01db52805a55792224c15955e8af02/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs?ref=030166757c01db52805a55792224c15955e8af02", "patch": "@@ -0,0 +1,17 @@\n+#![feature(core_intrinsics)]\n+\n+fn main() {\n+    let x: Option<Box<[u8]>> = unsafe {\n+        let z = std::intrinsics::add_with_overflow(0usize, 0usize);\n+        std::mem::transmute::<(usize, bool), Option<Box<[u8]>>>(z)\n+    };\n+    let y = &x;\n+    // Now read this bytewise.  There should be 9 def bytes followed by 7 undef bytes (the padding after the bool) in there.\n+    let z : *const u8 = y as *const _ as *const _;\n+    for i in 0..9 {\n+        let byte = unsafe { *z.offset(i) };\n+        assert_eq!(byte, 0);\n+    }\n+    let v = unsafe { *z.offset(9) };\n+    if v == 0 {} //~ ERROR attempted to read undefined bytes\n+}"}]}