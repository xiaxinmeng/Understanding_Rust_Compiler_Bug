{"sha": "0b77464d2234231e13d03acd1d580ab2e3369d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNzc0NjRkMjIzNDIzMWUxM2QwM2FjZDFkNTgwYWIyZTMzNjlkNjQ=", "commit": {"author": {"name": "Sebastian Humenda", "email": "shumenda@gmx.de", "date": "2017-09-06T14:01:51Z"}, "committer": {"name": "Tobias Schaffner", "email": "tschaff@genua.de", "date": "2017-09-08T12:36:56Z"}, "message": "Re-enable networking module fo rL4Re\n\nAs suggested in the discussion of PR #43972, std should provide a uniform API to\nall platforms. Since there's no networking on L4Re, this now is a module in\n`sys::net` providing types and functions/methods returning an error for each\naction.", "tree": {"sha": "399c4bdf00a5a385daf68e159373d154874d2c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/399c4bdf00a5a385daf68e159373d154874d2c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b77464d2234231e13d03acd1d580ab2e3369d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b77464d2234231e13d03acd1d580ab2e3369d64", "html_url": "https://github.com/rust-lang/rust/commit/0b77464d2234231e13d03acd1d580ab2e3369d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b77464d2234231e13d03acd1d580ab2e3369d64/comments", "author": {"login": "humenda", "id": 4473821, "node_id": "MDQ6VXNlcjQ0NzM4MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4473821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humenda", "html_url": "https://github.com/humenda", "followers_url": "https://api.github.com/users/humenda/followers", "following_url": "https://api.github.com/users/humenda/following{/other_user}", "gists_url": "https://api.github.com/users/humenda/gists{/gist_id}", "starred_url": "https://api.github.com/users/humenda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humenda/subscriptions", "organizations_url": "https://api.github.com/users/humenda/orgs", "repos_url": "https://api.github.com/users/humenda/repos", "events_url": "https://api.github.com/users/humenda/events{/privacy}", "received_events_url": "https://api.github.com/users/humenda/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9bbc6dbde3e3807362680a355098102bb38a67fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbc6dbde3e3807362680a355098102bb38a67fe", "html_url": "https://github.com/rust-lang/rust/commit/9bbc6dbde3e3807362680a355098102bb38a67fe"}], "stats": {"total": 457, "additions": 450, "deletions": 7}, "files": [{"sha": "433499a90a4054f574cb4ae8cfde1063887c0e74", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0b77464d2234231e13d03acd1d580ab2e3369d64", "patch": "@@ -466,7 +466,6 @@ pub mod error;\n pub mod ffi;\n pub mod fs;\n pub mod io;\n-#[cfg(not(target_os = \"l4re\"))]\n pub mod net;\n pub mod num;\n pub mod os;"}, {"sha": "98bc90dd4e13246694c14531affe2fd53cd47012", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=0b77464d2234231e13d03acd1d580ab2e3369d64", "patch": "@@ -36,7 +36,6 @@ pub mod fs;\n pub mod process;\n pub mod raw;\n pub mod thread;\n-#[cfg(not(target_os = \"l4re\"))]\n pub mod net;\n \n /// A prelude for conveniently writing platform-specific code."}, {"sha": "e07c864a6cbdc05d5b5513ca5e4ff9e4d2a4d417", "filename": "src/libstd/sys/unix/l4re.rs", "status": "added", "additions": 441, "deletions": 0, "changes": 441, "blob_url": "https://github.com/rust-lang/rust/blob/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=0b77464d2234231e13d03acd1d580ab2e3369d64", "patch": "@@ -0,0 +1,441 @@\n+// Copyright 2016-2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! unimpl {\n+    () => (return Err(io::Error::new(io::ErrorKind::Other, \"No networking available on L4Re.\"));)\n+}\n+\n+pub mod net {\n+    #![allow(warnings)]\n+    use fmt;\n+    use io;\n+    use libc;\n+    use net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n+    use sys_common::{AsInner, FromInner, IntoInner};\n+    use sys::fd::FileDesc;\n+    use time::Duration;\n+\n+\n+    pub extern crate libc as netc;\n+\n+    pub struct Socket(FileDesc);\n+    impl Socket {\n+        pub fn new(_: &SocketAddr, _: libc::c_int) -> io::Result<Socket> {\n+            unimpl!();\n+        }\n+\n+        pub fn new_raw(_: libc::c_int, _: libc::c_int) -> io::Result<Socket> {\n+            unimpl!();\n+        }\n+\n+        pub fn new_pair(_: libc::c_int, _: libc::c_int) -> io::Result<(Socket, Socket)> {\n+            unimpl!();\n+        }\n+\n+        pub fn connect_timeout(&self, _: &SocketAddr, _: Duration) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn accept(&self, _: *mut libc::sockaddr, _: *mut libc::socklen_t)\n+                  -> io::Result<Socket> {\n+            unimpl!();\n+        }\n+\n+        pub fn duplicate(&self) -> io::Result<Socket> {\n+            unimpl!();\n+        }\n+\n+        pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n+            unimpl!();\n+        }\n+\n+        pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n+            unimpl!();\n+        }\n+\n+        pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_timeout(&self, _: Option<Duration>, _: libc::c_int) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn timeout(&self, _: libc::c_int) -> io::Result<Option<Duration>> {\n+            unimpl!();\n+        }\n+\n+        pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn nodelay(&self) -> io::Result<bool> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n+            unimpl!();\n+        }\n+    }\n+\n+    impl AsInner<libc::c_int> for Socket {\n+        fn as_inner(&self) -> &libc::c_int { self.0.as_inner() }\n+    }\n+    \n+    impl FromInner<libc::c_int> for Socket {\n+        fn from_inner(fd: libc::c_int) -> Socket { Socket(FileDesc::new(fd)) }\n+    }\n+    \n+    impl IntoInner<libc::c_int> for Socket {\n+        fn into_inner(self) -> libc::c_int { self.0.into_raw() }\n+    }\n+\n+    pub struct TcpStream {\n+        inner: Socket,\n+    }\n+\n+    impl TcpStream {\n+        pub fn connect(_: &SocketAddr) -> io::Result<TcpStream> {\n+            unimpl!();\n+        }\n+\n+        pub fn connect_timeout(_: &SocketAddr, _: Duration) -> io::Result<TcpStream> {\n+            unimpl!();\n+        }\n+\n+        pub fn socket(&self) -> &Socket { &self.inner }\n+\n+        pub fn into_socket(self) -> Socket { self.inner }\n+\n+        pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n+            unimpl!();\n+        }\n+\n+        pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n+            unimpl!();\n+        }\n+\n+        pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+            unimpl!();\n+        }\n+\n+        pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n+            unimpl!();\n+        }\n+\n+        pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn duplicate(&self) -> io::Result<TcpStream> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn nodelay(&self) -> io::Result<bool> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn ttl(&self) -> io::Result<u32> {\n+            unimpl!();\n+        }\n+\n+        pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+    }\n+\n+    impl FromInner<Socket> for TcpStream {\n+        fn from_inner(socket: Socket) -> TcpStream {\n+            TcpStream { inner: socket }\n+        }\n+    }\n+\n+    impl fmt::Debug for TcpStream {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f, \"No networking support available on L4Re\")\n+        }\n+    }\n+\n+    pub struct TcpListener {\n+        inner: Socket,\n+    }\n+\n+    impl TcpListener {\n+        pub fn bind(_: &SocketAddr) -> io::Result<TcpListener> {\n+            unimpl!();\n+        }\n+\n+        pub fn socket(&self) -> &Socket { &self.inner }\n+\n+        pub fn into_socket(self) -> Socket { self.inner }\n+\n+        pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n+            unimpl!();\n+        }\n+\n+        pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n+            unimpl!();\n+        }\n+\n+        pub fn duplicate(&self) -> io::Result<TcpListener> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn ttl(&self) -> io::Result<u32> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_only_v6(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn only_v6(&self) -> io::Result<bool> {\n+            unimpl!();\n+        }\n+\n+        pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+    }\n+\n+    impl FromInner<Socket> for TcpListener {\n+        fn from_inner(socket: Socket) -> TcpListener {\n+            TcpListener { inner: socket }\n+        }\n+    }\n+\n+    impl fmt::Debug for TcpListener {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f, \"No networking support available on L4Re.\")\n+        }\n+    }\n+\n+    pub struct UdpSocket {\n+        inner: Socket,\n+    }\n+\n+    impl UdpSocket {\n+        pub fn bind(_: &SocketAddr) -> io::Result<UdpSocket> {\n+            unimpl!();\n+        }\n+\n+        pub fn socket(&self) -> &Socket { &self.inner }\n+\n+        pub fn into_socket(self) -> Socket { self.inner }\n+\n+        pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n+            unimpl!();\n+        }\n+\n+        pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n+            unimpl!();\n+        }\n+\n+        pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n+            unimpl!();\n+        }\n+\n+        pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn duplicate(&self) -> io::Result<UdpSocket> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n+            unimpl!();\n+        }\n+\n+        pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn broadcast(&self) -> io::Result<bool> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n+            unimpl!();\n+        }\n+\n+        pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr)\n+                             -> io::Result<()> {\n+                                 unimpl!();\n+        }\n+\n+        pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32)\n+                             -> io::Result<()> {\n+                                 unimpl!();\n+        }\n+\n+        pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr)\n+                              -> io::Result<()> {\n+                                  unimpl!();\n+        }\n+\n+        pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32)\n+                              -> io::Result<()> {\n+                                  unimpl!();\n+        }\n+\n+        pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn ttl(&self) -> io::Result<u32> {\n+            unimpl!();\n+        }\n+\n+        pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n+            unimpl!();\n+        }\n+\n+        pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n+            unimpl!();\n+        }\n+\n+        pub fn connect(&self, _: &SocketAddr) -> io::Result<()> {\n+            unimpl!();\n+        }\n+    }\n+\n+    impl FromInner<Socket> for UdpSocket {\n+        fn from_inner(socket: Socket) -> UdpSocket {\n+            UdpSocket { inner: socket }\n+        }\n+    }\n+\n+    impl fmt::Debug for UdpSocket {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f, \"No networking support on L4Re available.\")\n+        }\n+    }\n+\n+    pub struct LookupHost {\n+        original: *mut libc::addrinfo,\n+        cur: *mut libc::addrinfo,\n+    }\n+\n+    impl Iterator for LookupHost {\n+        type Item = SocketAddr;\n+        fn next(&mut self) -> Option<SocketAddr> {\n+            None\n+        }\n+    }\n+\n+    unsafe impl Sync for LookupHost {}\n+    unsafe impl Send for LookupHost {}\n+\n+    pub fn lookup_host(_: &str) -> io::Result<LookupHost> {\n+        unimpl!();\n+    }\n+}\n+"}, {"sha": "1b3f1000b77bbdf681b31946e1cf482678305e21", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=0b77464d2234231e13d03acd1d580ab2e3369d64", "patch": "@@ -47,6 +47,10 @@ pub mod memchr;\n pub mod mutex;\n #[cfg(not(target_os = \"l4re\"))]\n pub mod net;\n+#[cfg(target_os = \"l4re\")]\n+mod l4re;\n+#[cfg(target_os = \"l4re\")]\n+pub use self::l4re::net;\n pub mod os;\n pub mod os_str;\n pub mod path;"}, {"sha": "97058372e4c89f026e5f01acd72273a8b64d7207", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=0b77464d2234231e13d03acd1d580ab2e3369d64", "patch": "@@ -44,7 +44,7 @@ pub mod thread_local;\n pub mod util;\n pub mod wtf8;\n \n-#[cfg(target_os = \"redox\")]\n+#[cfg(any(target_os = \"redox\", target_os = \"l4re\"))]\n pub use sys::net;\n \n #[cfg(not(any(target_os = \"redox\", target_os = \"l4re\")))]"}, {"sha": "19dc841b9b5024961abb1eea38c84d22d1fc6693", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b77464d2234231e13d03acd1d580ab2e3369d64/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=0b77464d2234231e13d03acd1d580ab2e3369d64", "patch": "@@ -24,22 +24,22 @@ use time::Duration;\n #[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"ios\", target_os = \"macos\",\n           target_os = \"openbsd\", target_os = \"netbsd\",\n-          target_os = \"solaris\", target_os = \"haiku\"))]\n+          target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\"))]\n use sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n #[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"ios\", target_os = \"macos\",\n               target_os = \"openbsd\", target_os = \"netbsd\",\n-              target_os = \"solaris\", target_os = \"haiku\")))]\n+              target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\")))]\n use sys::net::netc::IPV6_ADD_MEMBERSHIP;\n #[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"ios\", target_os = \"macos\",\n           target_os = \"openbsd\", target_os = \"netbsd\",\n-          target_os = \"solaris\", target_os = \"haiku\"))]\n+          target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\"))]\n use sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n #[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"ios\", target_os = \"macos\",\n               target_os = \"openbsd\", target_os = \"netbsd\",\n-              target_os = \"solaris\", target_os = \"haiku\")))]\n+              target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\")))]\n use sys::net::netc::IPV6_DROP_MEMBERSHIP;\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\","}]}