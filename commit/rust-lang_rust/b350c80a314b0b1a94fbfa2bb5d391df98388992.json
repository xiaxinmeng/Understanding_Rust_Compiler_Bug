{"sha": "b350c80a314b0b1a94fbfa2bb5d391df98388992", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNTBjODBhMzE0YjBiMWE5NGZiZmEyYmI1ZDM5MWRmOTgzODg5OTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-03T13:20:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-03T13:25:30Z"}, "message": "add backtics back in isolation error message", "tree": {"sha": "5400beb09c5d8a8750abaaeb350165d83af4a9d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5400beb09c5d8a8750abaaeb350165d83af4a9d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b350c80a314b0b1a94fbfa2bb5d391df98388992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b350c80a314b0b1a94fbfa2bb5d391df98388992", "html_url": "https://github.com/rust-lang/rust/commit/b350c80a314b0b1a94fbfa2bb5d391df98388992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b350c80a314b0b1a94fbfa2bb5d391df98388992/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "044c9ca206e642aa11d6f0937427740cdb6c2fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/044c9ca206e642aa11d6f0937427740cdb6c2fc6", "html_url": "https://github.com/rust-lang/rust/commit/044c9ca206e642aa11d6f0937427740cdb6c2fc6"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "42fd6e3dced8a38ca315a3d3b075bdd42419e904", "filename": "src/shims/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=b350c80a314b0b1a94fbfa2bb5d391df98388992", "patch": "@@ -293,7 +293,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let target_os = &this.tcx.sess.target.target.target_os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`getcwd` is only available for the UNIX target family\");\n \n-        this.check_no_isolation(\"getcwd\")?;\n+        this.check_no_isolation(\"`getcwd`\")?;\n \n         let buf = this.read_scalar(buf_op)?.check_init()?;\n         let size = this.read_scalar(size_op)?.to_machine_usize(&*this.tcx)?;\n@@ -320,7 +320,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetCurrentDirectoryW\");\n \n-        this.check_no_isolation(\"GetCurrentDirectoryW\")?;\n+        this.check_no_isolation(\"`GetCurrentDirectoryW`\")?;\n \n         let size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n         let buf = this.read_scalar(buf_op)?.check_init()?;\n@@ -339,7 +339,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let target_os = &this.tcx.sess.target.target.target_os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`getcwd` is only available for the UNIX target family\");\n \n-        this.check_no_isolation(\"chdir\")?;\n+        this.check_no_isolation(\"`chdir`\")?;\n \n         let path = this.read_path_from_c_str(this.read_scalar(path_op)?.check_init()?)?;\n \n@@ -360,7 +360,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"SetCurrentDirectoryW\");\n \n-        this.check_no_isolation(\"SetCurrentDirectoryW\")?;\n+        this.check_no_isolation(\"`SetCurrentDirectoryW`\")?;\n \n         let path = this.read_path_from_wide_str(this.read_scalar(path_op)?.check_init()?)?;\n "}, {"sha": "88597b4a39814ff97aac594f9ad905a67ee5db8a", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=b350c80a314b0b1a94fbfa2bb5d391df98388992", "patch": "@@ -90,7 +90,7 @@ impl FileDescriptor for io::Stdin {\n     fn read<'tcx>(&mut self, communicate_allowed: bool, bytes: &mut [u8]) -> InterpResult<'tcx, io::Result<usize>> {\n         if !communicate_allowed {\n             // We want isolation mode to be deterministic, so we have to disallow all reads, even stdin.\n-            helpers::isolation_error(\"read\")?;\n+            helpers::isolation_error(\"`read` from stdin\")?;\n         }\n         Ok(Read::read(self, bytes))\n     }\n@@ -417,7 +417,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"open\")?;\n+        this.check_no_isolation(\"`open`\")?;\n \n         let flag = this.read_scalar(flag_op)?.to_i32()?;\n \n@@ -510,7 +510,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"fcntl\")?;\n+        this.check_no_isolation(\"`fcntl`\")?;\n \n         if args.len() < 2 {\n             throw_ub_format!(\"incorrect number of arguments for fcntl: got {}, expected at least 2\", args.len());\n@@ -574,8 +574,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn close(&mut self, fd_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"close\")?;\n-\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.remove(&fd) {\n@@ -709,7 +707,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn unlink(&mut self, path_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"unlink\")?;\n+        this.check_no_isolation(\"`unlink`\")?;\n \n         let path = this.read_path_from_c_str(this.read_scalar(path_op)?.check_init()?)?;\n \n@@ -739,7 +737,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"symlink\")?;\n+        this.check_no_isolation(\"`symlink`\")?;\n \n         let target = this.read_path_from_c_str(this.read_scalar(target_op)?.check_init()?)?;\n         let linkpath = this.read_path_from_c_str(this.read_scalar(linkpath_op)?.check_init()?)?;\n@@ -755,7 +753,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"macos\", \"stat\");\n-        this.check_no_isolation(\"stat\")?;\n+        this.check_no_isolation(\"`stat`\")?;\n         // `stat` always follows symlinks.\n         this.macos_stat_or_lstat(true, path_op, buf_op)\n     }\n@@ -768,7 +766,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"macos\", \"lstat\");\n-        this.check_no_isolation(\"lstat\")?;\n+        this.check_no_isolation(\"`lstat`\")?;\n         this.macos_stat_or_lstat(false, path_op, buf_op)\n     }\n \n@@ -780,7 +778,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"macos\", \"fstat\");\n-        this.check_no_isolation(\"fstat\")?;\n+        this.check_no_isolation(\"`fstat`\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n@@ -802,7 +800,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"linux\", \"statx\");\n-        this.check_no_isolation(\"statx\")?;\n+        this.check_no_isolation(\"`statx`\")?;\n \n         let statxbuf_scalar = this.read_scalar(statxbuf_op)?.check_init()?;\n         let pathname_scalar = this.read_scalar(pathname_op)?.check_init()?;\n@@ -961,7 +959,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"rename\")?;\n+        this.check_no_isolation(\"`rename`\")?;\n \n         let oldpath_scalar = this.read_scalar(oldpath_op)?.check_init()?;\n         let newpath_scalar = this.read_scalar(newpath_op)?.check_init()?;\n@@ -987,7 +985,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"mkdir\")?;\n+        this.check_no_isolation(\"`mkdir`\")?;\n \n         #[cfg_attr(not(unix), allow(unused_variables))]\n         let mode = if this.tcx.sess.target.target.target_os == \"macos\" {\n@@ -1020,7 +1018,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"rmdir\")?;\n+        this.check_no_isolation(\"`rmdir`\")?;\n \n         let path = this.read_path_from_c_str(this.read_scalar(path_op)?.check_init()?)?;\n \n@@ -1032,7 +1030,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn opendir(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"opendir\")?;\n+        this.check_no_isolation(\"`opendir`\")?;\n \n         let name = this.read_path_from_c_str(this.read_scalar(name_op)?.check_init()?)?;\n \n@@ -1063,7 +1061,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"linux\", \"readdir64_r\");\n-        this.check_no_isolation(\"readdir64_r\")?;\n+        this.check_no_isolation(\"`readdir64_r`\")?;\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n@@ -1150,7 +1148,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"macos\", \"readdir_r\");\n-        this.check_no_isolation(\"readdir_r\")?;\n+        this.check_no_isolation(\"`readdir_r`\")?;\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n@@ -1233,7 +1231,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn closedir(&mut self, dirp_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"closedir\")?;\n+        this.check_no_isolation(\"`closedir`\")?;\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n@@ -1252,7 +1250,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"ftruncate64\")?;\n+        this.check_no_isolation(\"`ftruncate64`\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let length = this.read_scalar(length_op)?.to_i64()?;\n@@ -1287,7 +1285,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"fsync\")?;\n+        this.check_no_isolation(\"`fsync`\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n@@ -1303,7 +1301,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn fdatasync(&mut self, fd_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"fdatasync\")?;\n+        this.check_no_isolation(\"`fdatasync`\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n@@ -1325,7 +1323,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"sync_file_range\")?;\n+        this.check_no_isolation(\"`sync_file_range`\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let offset = this.read_scalar(offset_op)?.to_i64()?;"}, {"sha": "ef172fa2a6715504b8dc63f75638f42695c25bb3", "filename": "src/shims/posix/linux/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fsync.rs?ref=b350c80a314b0b1a94fbfa2bb5d391df98388992", "patch": "@@ -55,6 +55,7 @@ pub fn futex<'tcx>(\n             let timeout_time = if this.is_null(this.read_scalar(timeout)?.check_init()?)? {\n                 None\n             } else {\n+                this.check_no_isolation(\"`syscall(SYS_FUTEX, op=FUTEX_WAIT)` with timeout\")?;\n                 let duration = match this.read_timespec(timeout)? {\n                     Some(duration) => duration,\n                     None => {\n@@ -64,7 +65,6 @@ pub fn futex<'tcx>(\n                         return Ok(());\n                     }\n                 };\n-                this.check_no_isolation(\"FUTEX_WAIT with timeout\")?;\n                 Some(if op & futex_realtime != 0 {\n                     Time::RealTime(SystemTime::now().checked_add(duration).unwrap())\n                 } else {"}, {"sha": "a0b5db42ed0665826c117d367d4714bc69ff55fb", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=b350c80a314b0b1a94fbfa2bb5d391df98388992", "patch": "@@ -690,7 +690,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"pthread_cond_timedwait\")?;\n+        this.check_no_isolation(\"`pthread_cond_timedwait`\")?;\n \n         let id = cond_get_or_create_id(this, cond_op)?;\n         let mutex_id = mutex_get_or_create_id(this, mutex_op)?;"}, {"sha": "806fa65d1564ce9f7191d7ae48d4afed926e409f", "filename": "src/shims/time.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b350c80a314b0b1a94fbfa2bb5d391df98388992/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=b350c80a314b0b1a94fbfa2bb5d391df98388992", "patch": "@@ -22,7 +22,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"linux\", \"clock_gettime\");\n-        this.check_no_isolation(\"clock_gettime\")?;\n+        this.check_no_isolation(\"`clock_gettime`\")?;\n \n         let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n         let tp = this.deref_operand(tp_op)?;\n@@ -60,7 +60,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"macos\", \"gettimeofday\");\n-        this.check_no_isolation(\"gettimeofday\")?;\n+        this.check_no_isolation(\"`gettimeofday`\")?;\n \n         // Using tz is obsolete and should always be null\n         let tz = this.read_scalar(tz_op)?.check_init()?;\n@@ -91,7 +91,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"windows\", \"GetSystemTimeAsFileTime\");\n-        this.check_no_isolation(\"GetSystemTimeAsFileTime\")?;\n+        this.check_no_isolation(\"`GetSystemTimeAsFileTime`\")?;\n \n         let NANOS_PER_SEC = this.eval_windows_u64(\"time\", \"NANOS_PER_SEC\")?;\n         let INTERVALS_PER_SEC = this.eval_windows_u64(\"time\", \"INTERVALS_PER_SEC\")?;\n@@ -119,7 +119,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"windows\", \"QueryPerformanceCounter\");\n-        this.check_no_isolation(\"QueryPerformanceCounter\")?;\n+        this.check_no_isolation(\"`QueryPerformanceCounter`\")?;\n \n         // QueryPerformanceCounter uses a hardware counter as its basis.\n         // Miri will emulate a counter with a resolution of 1 nanosecond.\n@@ -135,7 +135,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"windows\", \"QueryPerformanceFrequency\");\n-        this.check_no_isolation(\"QueryPerformanceFrequency\")?;\n+        this.check_no_isolation(\"`QueryPerformanceFrequency`\")?;\n \n         // Retrieves the frequency of the hardware performance counter.\n         // The frequency of the performance counter is fixed at system boot and\n@@ -150,7 +150,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n \n         this.assert_target_os(\"macos\", \"mach_absolute_time\");\n-        this.check_no_isolation(\"mach_absolute_time\")?;\n+        this.check_no_isolation(\"`mach_absolute_time`\")?;\n \n         // This returns a u64, with time units determined dynamically by `mach_timebase_info`.\n         // We return plain nanoseconds.\n@@ -163,7 +163,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"macos\", \"mach_timebase_info\");\n-        this.check_no_isolation(\"mach_timebase_info\")?;\n+        this.check_no_isolation(\"`mach_timebase_info`\")?;\n \n         let info = this.deref_operand(info_op)?;\n \n@@ -188,7 +188,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"nanosleep\")?;\n+        this.check_no_isolation(\"`nanosleep`\")?;\n \n         let duration = match this.read_timespec(req_op)? {\n             Some(duration) => duration,"}, {"sha": "5b7270f18931c4427463186dac0e1f353e2df966", "filename": "tests/compile-fail/fs/isolated_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b350c80a314b0b1a94fbfa2bb5d391df98388992/tests%2Fcompile-fail%2Ffs%2Fisolated_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b350c80a314b0b1a94fbfa2bb5d391df98388992/tests%2Fcompile-fail%2Ffs%2Fisolated_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Fisolated_file.rs?ref=b350c80a314b0b1a94fbfa2bb5d391df98388992", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: File handling is not implemented yet\n-// error-pattern: open not available when isolation is enabled\n+// error-pattern: `open` not available when isolation is enabled\n \n fn main() {\n     let _file = std::fs::File::open(\"file.txt\").unwrap();"}, {"sha": "4098a104761ee7b70df298b2d01da00ad877515d", "filename": "tests/compile-fail/fs/isolated_stdin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b350c80a314b0b1a94fbfa2bb5d391df98388992/tests%2Fcompile-fail%2Ffs%2Fisolated_stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b350c80a314b0b1a94fbfa2bb5d391df98388992/tests%2Fcompile-fail%2Ffs%2Fisolated_stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Fisolated_stdin.rs?ref=b350c80a314b0b1a94fbfa2bb5d391df98388992", "patch": "@@ -7,7 +7,7 @@ extern crate libc;\n fn main() -> std::io::Result<()> {\n     let mut bytes = [0u8; 512];\n     unsafe {\n-        libc::read(0, bytes.as_mut_ptr() as *mut libc::c_void, 512); //~ ERROR read not available when isolation is enabled\n+        libc::read(0, bytes.as_mut_ptr() as *mut libc::c_void, 512); //~ ERROR `read` from stdin not available when isolation is enabled\n     }\n     Ok(())\n }"}]}