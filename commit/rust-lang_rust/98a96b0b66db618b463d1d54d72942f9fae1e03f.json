{"sha": "98a96b0b66db618b463d1d54d72942f9fae1e03f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTk2YjBiNjZkYjYxOGI0NjNkMWQ1NGQ3Mjk0MmY5ZmFlMWUwM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-05T02:57:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-05T02:57:57Z"}, "message": "Auto merge of #46403 - oli-obk:generic_missing_impl, r=nikomatsakis\n\nReport a targeted note for generic parameters that are missing a trait bound", "tree": {"sha": "0c1bd7315bd074dfdd664705f9f9eda1b2cd73f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c1bd7315bd074dfdd664705f9f9eda1b2cd73f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a96b0b66db618b463d1d54d72942f9fae1e03f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a96b0b66db618b463d1d54d72942f9fae1e03f", "html_url": "https://github.com/rust-lang/rust/commit/98a96b0b66db618b463d1d54d72942f9fae1e03f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a96b0b66db618b463d1d54d72942f9fae1e03f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "html_url": "https://github.com/rust-lang/rust/commit/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640"}, {"sha": "9e062c85bb0a905bdba4d4e962abe389c46bb86d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e062c85bb0a905bdba4d4e962abe389c46bb86d", "html_url": "https://github.com/rust-lang/rust/commit/9e062c85bb0a905bdba4d4e962abe389c46bb86d"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "05aab27dc2acc5b77b032b114141a89801ec9374", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98a96b0b66db618b463d1d54d72942f9fae1e03f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a96b0b66db618b463d1d54d72942f9fae1e03f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=98a96b0b66db618b463d1d54d72942f9fae1e03f", "patch": "@@ -1196,13 +1196,6 @@ impl RegionKind {\n \n /// Type utilities\n impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n-    pub fn as_opt_param_ty(&self) -> Option<ty::ParamTy> {\n-        match self.sty {\n-            ty::TyParam(ref d) => Some(d.clone()),\n-            _ => None,\n-        }\n-    }\n-\n     pub fn is_nil(&self) -> bool {\n         match self.sty {\n             TyTuple(ref tys, _) => tys.is_empty(),"}, {"sha": "e099d1c0c2531a46a7a43c809e3a00d682c23090", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98a96b0b66db618b463d1d54d72942f9fae1e03f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a96b0b66db618b463d1d54d72942f9fae1e03f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=98a96b0b66db618b463d1d54d72942f9fae1e03f", "patch": "@@ -289,6 +289,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 // This has nothing here because it means we did string\n                                 // concatenation (e.g. \"Hello \" + \"World!\"). This means\n                                 // we don't want the note in the else clause to be emitted\n+                            } else if let ty::TyParam(_) = lhs_ty.sty {\n+                                // FIXME: point to span of param\n+                                err.note(\n+                                    &format!(\"`{}` might need a bound for `{}`\",\n+                                             lhs_ty, missing_trait));\n                             } else {\n                                 err.note(\n                                     &format!(\"an implementation of `{}` might be missing for `{}`\","}, {"sha": "fe008db68a00415bac81a0560c76a7a6cdc8335c", "filename": "src/test/ui/type-check/missing_trait_impl.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98a96b0b66db618b463d1d54d72942f9fae1e03f/src%2Ftest%2Fui%2Ftype-check%2Fmissing_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a96b0b66db618b463d1d54d72942f9fae1e03f/src%2Ftest%2Fui%2Ftype-check%2Fmissing_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fmissing_trait_impl.rs?ref=98a96b0b66db618b463d1d54d72942f9fae1e03f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+}\n+\n+fn foo<T>(x: T, y: T) {\n+    let z = x + y; //~ ERROR binary operation `+` cannot be applied to type `T`\n+    //~^ NOTE `T` might need a bound for `std::ops::Add`\n+}"}, {"sha": "64f8167eb1d01d2f82430016545a99cce3786369", "filename": "src/test/ui/type-check/missing_trait_impl.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98a96b0b66db618b463d1d54d72942f9fae1e03f/src%2Ftest%2Fui%2Ftype-check%2Fmissing_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a96b0b66db618b463d1d54d72942f9fae1e03f/src%2Ftest%2Fui%2Ftype-check%2Fmissing_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fmissing_trait_impl.stderr?ref=98a96b0b66db618b463d1d54d72942f9fae1e03f", "patch": "@@ -0,0 +1,10 @@\n+error[E0369]: binary operation `+` cannot be applied to type `T`\n+  --> $DIR/missing_trait_impl.rs:15:13\n+   |\n+15 |     let z = x + y; //~ ERROR binary operation `+` cannot be applied to type `T`\n+   |             ^^^^^\n+   |\n+   = note: `T` might need a bound for `std::ops::Add`\n+\n+error: aborting due to previous error\n+"}]}