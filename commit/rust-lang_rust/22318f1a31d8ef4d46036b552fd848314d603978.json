{"sha": "22318f1a31d8ef4d46036b552fd848314d603978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMzE4ZjFhMzFkOGVmNGQ0NjAzNmI1NTJmZDg0ODMxNGQ2MDM5Nzg=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-07T11:57:01Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-16T12:12:28Z"}, "message": "Account for blocks in arguments\n\nWhen giving an error about an obligation introduced by a function call\nthat an argument doesn't fulfill, and that argument is a block, add a\nspan_label pointing at the innermost tail expression.", "tree": {"sha": "e31a5bffaa94aa6ba89c613adaca767dd4daa325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e31a5bffaa94aa6ba89c613adaca767dd4daa325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22318f1a31d8ef4d46036b552fd848314d603978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22318f1a31d8ef4d46036b552fd848314d603978", "html_url": "https://github.com/rust-lang/rust/commit/22318f1a31d8ef4d46036b552fd848314d603978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22318f1a31d8ef4d46036b552fd848314d603978/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569a842730851ea8521f20f48fa96fd9f3e5db95", "url": "https://api.github.com/repos/rust-lang/rust/commits/569a842730851ea8521f20f48fa96fd9f3e5db95", "html_url": "https://github.com/rust-lang/rust/commit/569a842730851ea8521f20f48fa96fd9f3e5db95"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "92cf4fb414ab2669597cfc04dacd2d75496a4a8d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/22318f1a31d8ef4d46036b552fd848314d603978/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22318f1a31d8ef4d46036b552fd848314d603978/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=22318f1a31d8ef4d46036b552fd848314d603978", "patch": "@@ -2296,19 +2296,39 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 });\n             }\n             ObligationCauseCode::FunctionArgumentObligation {\n-                arg_hir_id: _,\n+                arg_hir_id,\n                 call_hir_id,\n                 ref parent_code,\n             } => {\n                 let hir = self.tcx.hir();\n+                if let Some(Node::Expr(expr @ hir::Expr { kind: hir::ExprKind::Block(..), .. })) =\n+                    hir.find(arg_hir_id)\n+                {\n+                    let in_progress_typeck_results =\n+                        self.in_progress_typeck_results.map(|t| t.borrow());\n+                    let parent_id = hir.local_def_id(hir.get_parent_item(arg_hir_id));\n+                    let typeck_results: &TypeckResults<'tcx> = match &in_progress_typeck_results {\n+                        Some(t) if t.hir_owner == parent_id => t,\n+                        _ => self.tcx.typeck(parent_id),\n+                    };\n+                    let ty = typeck_results.expr_ty_adjusted(expr);\n+                    err.span_label(\n+                        expr.peel_blocks().span,\n+                        &if ty.references_error() {\n+                            String::new()\n+                        } else {\n+                            format!(\"this tail expression is of type `{:?}`\", ty)\n+                        },\n+                    );\n+                }\n                 if let Some(Node::Expr(hir::Expr {\n                     kind:\n                         hir::ExprKind::Call(hir::Expr { span, .. }, _)\n                         | hir::ExprKind::MethodCall(_, span, ..),\n                     ..\n                 })) = hir.find(call_hir_id)\n                 {\n-                    err.span_label(*span, \"required by a bound in this call\");\n+                    err.span_label(*span, \"required by a bound introduced by this call\");\n                 }\n                 ensure_sufficient_stack(|| {\n                     self.note_obligation_cause_code("}]}