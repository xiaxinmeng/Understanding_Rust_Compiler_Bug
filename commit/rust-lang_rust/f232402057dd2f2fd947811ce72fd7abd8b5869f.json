{"sha": "f232402057dd2f2fd947811ce72fd7abd8b5869f", "node_id": "C_kwDOAAsO6NoAKGYyMzI0MDIwNTdkZDJmMmZkOTQ3ODExY2U3MmZkN2FiZDhiNTg2OWY", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-07-25T20:36:03Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-08-03T10:17:23Z"}, "message": "Warn about dead tuple struct fields", "tree": {"sha": "cac82ce703f109e066aba6c79eef72de0e38c745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac82ce703f109e066aba6c79eef72de0e38c745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f232402057dd2f2fd947811ce72fd7abd8b5869f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f232402057dd2f2fd947811ce72fd7abd8b5869f", "html_url": "https://github.com/rust-lang/rust/commit/f232402057dd2f2fd947811ce72fd7abd8b5869f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f232402057dd2f2fd947811ce72fd7abd8b5869f/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aaeee734fd1c68ddf27464e3f68caa77c98c0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aaeee734fd1c68ddf27464e3f68caa77c98c0b2", "html_url": "https://github.com/rust-lang/rust/commit/7aaeee734fd1c68ddf27464e3f68caa77c98c0b2"}], "stats": {"total": 111, "additions": 60, "deletions": 51}, "files": [{"sha": "f13733af3d0d18a04244d716541c232c85700347", "filename": "tests/ui/borrow_interior_mutable_const/auxiliary/helper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -2,6 +2,7 @@\n // As the most common case is the `http` crate, it replicates `http::HeadewrName`'s structure.\n \n #![allow(clippy::declare_interior_mutable_const)]\n+#![allow(unused_tuple_struct_fields)]\n \n use std::sync::atomic::AtomicUsize;\n "}, {"sha": "6b754f3bd7103bb3f6ff068ab637acc368f85c7c", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::print_literal,\n     clippy::redundant_clone,\n     clippy::to_string_in_format_args,"}, {"sha": "ca9826b356ec8aea1642450c6f3789244323f071", "filename": "tests/ui/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::print_literal,\n     clippy::redundant_clone,\n     clippy::to_string_in_format_args,"}, {"sha": "6c35caeb034d0fe5e817b2c51700a771dd68666d", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,25 +1,25 @@\n error: useless use of `format!`\n-  --> $DIR/format.rs:18:5\n+  --> $DIR/format.rs:19:5\n    |\n LL |     format!(\"foo\");\n    |     ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:19:5\n+  --> $DIR/format.rs:20:5\n    |\n LL |     format!(\"{{}}\");\n    |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:20:5\n+  --> $DIR/format.rs:21:5\n    |\n LL |     format!(\"{{}} abc {{}}\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:21:5\n+  --> $DIR/format.rs:22:5\n    |\n LL | /     format!(\n LL | |         r##\"foo {{}}\n@@ -34,91 +34,91 @@ LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:26:13\n+  --> $DIR/format.rs:27:13\n    |\n LL |     let _ = format!(\"\");\n    |             ^^^^^^^^^^^ help: consider using `String::new()`: `String::new()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:28:5\n+  --> $DIR/format.rs:29:5\n    |\n LL |     format!(\"{}\", \"foo\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:32:5\n+  --> $DIR/format.rs:33:5\n    |\n LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:33:5\n+  --> $DIR/format.rs:34:5\n    |\n LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:38:5\n+  --> $DIR/format.rs:39:5\n    |\n LL |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:42:5\n+  --> $DIR/format.rs:43:5\n    |\n LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:43:5\n+  --> $DIR/format.rs:44:5\n    |\n LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:70:5\n+  --> $DIR/format.rs:71:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:72:5\n+  --> $DIR/format.rs:73:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:76:18\n+  --> $DIR/format.rs:77:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:80:22\n+  --> $DIR/format.rs:81:22\n    |\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:86:13\n+  --> $DIR/format.rs:87:13\n    |\n LL |     let _ = format!(\"{x}\");\n    |             ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:88:13\n+  --> $DIR/format.rs:89:13\n    |\n LL |     let _ = format!(\"{y}\", y = x);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:92:13\n+  --> $DIR/format.rs:93:13\n    |\n LL |     let _ = format!(\"{abc}\");\n    |             ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `abc.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:94:13\n+  --> $DIR/format.rs:95:13\n    |\n LL |     let _ = format!(\"{xx}\");\n    |             ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `xx.to_string()`"}, {"sha": "48f8093311cbdb41ad7c1700873457cb1154a8be", "filename": "tests/ui/from_iter_instead_of_collect.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::from_iter_instead_of_collect)]\n-#![allow(unused_imports)]\n+#![allow(unused_imports, unused_tuple_struct_fields)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n "}, {"sha": "ebe0ad278be30f9502a29aade0f99821092f37fe", "filename": "tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::from_iter_instead_of_collect)]\n-#![allow(unused_imports)]\n+#![allow(unused_imports, unused_tuple_struct_fields)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n "}, {"sha": "04a74a009e09213cb84581fb7ccce94700324a50", "filename": "tests/ui/must_use_candidates.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fmust_use_candidates.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fmust_use_candidates.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.fixed?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut, clippy::redundant_allocation)]\n+#![allow(unused_mut, unused_tuple_struct_fields, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "f04122f4eeab653057d27b5300e9e8c4ef3d2ebe", "filename": "tests/ui/must_use_candidates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fmust_use_candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fmust_use_candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.rs?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut, clippy::redundant_allocation)]\n+#![allow(unused_mut, unused_tuple_struct_fields, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "68c987eb4c6771702ffac0374e4463631af244a9", "filename": "tests/ui/numbered_fields.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fnumbered_fields.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fnumbered_fields.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbered_fields.fixed?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,5 +1,6 @@\n //run-rustfix\n #![warn(clippy::init_numbered_fields)]\n+#![allow(unused_tuple_struct_fields)]\n \n #[derive(Default)]\n struct TupleStruct(u32, u32, u8);"}, {"sha": "2ef4fb4de5370becc102ce60feb1278f6ff267be", "filename": "tests/ui/numbered_fields.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fnumbered_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fnumbered_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbered_fields.rs?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,5 +1,6 @@\n //run-rustfix\n #![warn(clippy::init_numbered_fields)]\n+#![allow(unused_tuple_struct_fields)]\n \n #[derive(Default)]\n struct TupleStruct(u32, u32, u8);"}, {"sha": "60c0d7898063f5f07087b3e1da51c47c1603f539", "filename": "tests/ui/numbered_fields.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fnumbered_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Fnumbered_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbered_fields.stderr?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,5 +1,5 @@\n error: used a field initializer for a tuple struct\n-  --> $DIR/numbered_fields.rs:18:13\n+  --> $DIR/numbered_fields.rs:19:13\n    |\n LL |       let _ = TupleStruct {\n    |  _____________^\n@@ -12,7 +12,7 @@ LL | |     };\n    = note: `-D clippy::init-numbered-fields` implied by `-D warnings`\n \n error: used a field initializer for a tuple struct\n-  --> $DIR/numbered_fields.rs:25:13\n+  --> $DIR/numbered_fields.rs:26:13\n    |\n LL |       let _ = TupleStruct {\n    |  _____________^"}, {"sha": "b6d5e106f057a36ab1503f701f144a37614e98db", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::redundant_closure,\n     clippy::ref_option_ref,\n     clippy::equatable_if_let,"}, {"sha": "35bae159343587be7ea1a98c959260a0cc3ab62b", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(\n+    unused_tuple_struct_fields,\n     clippy::redundant_closure,\n     clippy::ref_option_ref,\n     clippy::equatable_if_let,"}, {"sha": "daba606004e114d68ed95d95682e94a4fd59c7f2", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,5 +1,5 @@\n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:11:5\n+  --> $DIR/option_if_let_else.rs:12:5\n    |\n LL | /     if let Some(x) = string {\n LL | |         (true, x)\n@@ -11,19 +11,19 @@ LL | |     }\n    = note: `-D clippy::option-if-let-else` implied by `-D warnings`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:29:13\n+  --> $DIR/option_if_let_else.rs:30:13\n    |\n LL |     let _ = if let Some(s) = *string { s.len() } else { 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `string.map_or(0, |s| s.len())`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:30:13\n+  --> $DIR/option_if_let_else.rs:31:13\n    |\n LL |     let _ = if let Some(s) = &num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:31:13\n+  --> $DIR/option_if_let_else.rs:32:13\n    |\n LL |       let _ = if let Some(s) = &mut num {\n    |  _____________^\n@@ -43,13 +43,13 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:37:13\n+  --> $DIR/option_if_let_else.rs:38:13\n    |\n LL |     let _ = if let Some(ref s) = num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:38:13\n+  --> $DIR/option_if_let_else.rs:39:13\n    |\n LL |       let _ = if let Some(mut s) = num {\n    |  _____________^\n@@ -69,7 +69,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:44:13\n+  --> $DIR/option_if_let_else.rs:45:13\n    |\n LL |       let _ = if let Some(ref mut s) = num {\n    |  _____________^\n@@ -89,7 +89,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:53:5\n+  --> $DIR/option_if_let_else.rs:54:5\n    |\n LL | /     if let Some(x) = arg {\n LL | |         let y = x * x;\n@@ -108,7 +108,7 @@ LL +     })\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:66:13\n+  --> $DIR/option_if_let_else.rs:67:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -120,7 +120,7 @@ LL | |     };\n    | |_____^ help: try: `arg.map_or_else(|| side_effect(), |x| x)`\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:75:13\n+  --> $DIR/option_if_let_else.rs:76:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -143,7 +143,7 @@ LL ~     }, |x| x * x * x * x);\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:108:13\n+  --> $DIR/option_if_let_else.rs:109:13\n    |\n LL | /             if let Some(idx) = s.find('.') {\n LL | |                 vec![s[..idx].to_string(), s[idx..].to_string()]\n@@ -153,13 +153,13 @@ LL | |             }\n    | |_____________^ help: try: `s.find('.').map_or_else(|| vec![s.to_string()], |idx| vec![s[..idx].to_string(), s[idx..].to_string()])`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:132:13\n+  --> $DIR/option_if_let_else.rs:133:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:141:13\n+  --> $DIR/option_if_let_else.rs:142:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -181,13 +181,13 @@ LL ~         });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:169:13\n+  --> $DIR/option_if_let_else.rs:170:13\n    |\n LL |     let _ = if let Some(x) = Some(0) { s.len() + x } else { s.len() };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(0).map_or(s.len(), |x| s.len() + x)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:173:13\n+  --> $DIR/option_if_let_else.rs:174:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^"}, {"sha": "a67363b09ea5ac7e675d053ed791a05466435fb2", "filename": "tests/ui/unreadable_literal.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.fixed?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::unreadable_literal)]\n+#![allow(unused_tuple_struct_fields)]\n \n struct Foo(u64);\n "}, {"sha": "82f04e7ced5279f95e8959ca7e4a8848ad6e6721", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::unreadable_literal)]\n+#![allow(unused_tuple_struct_fields)]\n \n struct Foo(u64);\n "}, {"sha": "b51130c6a6abae11e2ba30908ab8a34ec94a9c7b", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f232402057dd2f2fd947811ce72fd7abd8b5869f/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=f232402057dd2f2fd947811ce72fd7abd8b5869f", "patch": "@@ -1,69 +1,69 @@\n error: digits of hex or binary literal not grouped by four\n-  --> $DIR/unreadable_literal.rs:25:9\n+  --> $DIR/unreadable_literal.rs:26:9\n    |\n LL |         0x1_234_567,\n    |         ^^^^^^^^^^^ help: consider: `0x0123_4567`\n    |\n    = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:17\n+  --> $DIR/unreadable_literal.rs:34:17\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                 ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:31\n+  --> $DIR/unreadable_literal.rs:34:31\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                               ^^^^^^^^^^^^^^^^ help: consider: `0x1234_5678_usize`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:49\n+  --> $DIR/unreadable_literal.rs:34:49\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                                                 ^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:33:61\n+  --> $DIR/unreadable_literal.rs:34:61\n    |\n LL |     let _bad = (0b110110_i64, 0x12345678_usize, 123456_f32, 1.234567_f32);\n    |                                                             ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:35:20\n+  --> $DIR/unreadable_literal.rs:36:20\n    |\n LL |     let _bad_sci = 1.123456e1;\n    |                    ^^^^^^^^^^ help: consider: `1.123_456e1`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:37:18\n+  --> $DIR/unreadable_literal.rs:38:18\n    |\n LL |     let _fail1 = 0xabcdef;\n    |                  ^^^^^^^^ help: consider: `0x00ab_cdef`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:38:23\n+  --> $DIR/unreadable_literal.rs:39:23\n    |\n LL |     let _fail2: u32 = 0xBAFEBAFE;\n    |                       ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:39:18\n+  --> $DIR/unreadable_literal.rs:40:18\n    |\n LL |     let _fail3 = 0xabcdeff;\n    |                  ^^^^^^^^^ help: consider: `0x0abc_deff`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:40:24\n+  --> $DIR/unreadable_literal.rs:41:24\n    |\n LL |     let _fail4: i128 = 0xabcabcabcabcabcabc;\n    |                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:41:18\n+  --> $DIR/unreadable_literal.rs:42:18\n    |\n LL |     let _fail5 = 1.100300400;\n    |                  ^^^^^^^^^^^ help: consider: `1.100_300_400`"}]}