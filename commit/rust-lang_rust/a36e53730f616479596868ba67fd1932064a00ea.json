{"sha": "a36e53730f616479596868ba67fd1932064a00ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNmU1MzczMGY2MTY0Nzk1OTY4NjhiYTY3ZmQxOTMyMDY0YTAwZWE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-15T10:23:54Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-16T20:30:43Z"}, "message": "debuginfo: Added test cases for methods on structs, enums, traits, and tuple-structs.\n\nAlso new test cases for tuple structs and by-value parameter passing.", "tree": {"sha": "12327524c2604e0d2d5fff47321d41235a263b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12327524c2604e0d2d5fff47321d41235a263b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a36e53730f616479596868ba67fd1932064a00ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a36e53730f616479596868ba67fd1932064a00ea", "html_url": "https://github.com/rust-lang/rust/commit/a36e53730f616479596868ba67fd1932064a00ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a36e53730f616479596868ba67fd1932064a00ea/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689929c51a7eb4458458b53b92f2c775b444b405", "url": "https://api.github.com/repos/rust-lang/rust/commits/689929c51a7eb4458458b53b92f2c775b444b405", "html_url": "https://github.com/rust-lang/rust/commit/689929c51a7eb4458458b53b92f2c775b444b405"}], "stats": {"total": 663, "additions": 663, "deletions": 0}, "files": [{"sha": "052b3c6994a9c82d800de60697da31d2f2fb9d20", "filename": "src/test/debug-info/by-value-struct-argument.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fby-value-struct-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fby-value-struct-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-struct-argument.rs?ref=a36e53730f616479596868ba67fd1932064a00ea", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Does not work yet, see issue #8512\n+// xfail-test\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// debugger:finish\n+// debugger:print s\n+// check:$1 = {a = 1, b = 2.5}\n+// debugger:continue\n+\n+#[deriving(Clone)]\n+struct Struct {\n+    a: int,\n+    b: float\n+}\n+\n+fn fun(s: Struct) {\n+    zzz();\n+}\n+\n+fn main() {\n+    fun(Struct { a: 1, b: 2.5 });\n+}\n+\n+fn zzz() {()}"}, {"sha": "07481011df3f99597588e3263113ac2602dade47", "filename": "src/test/debug-info/method-on-enum.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs?ref=a36e53730f616479596868ba67fd1932064a00ea", "patch": "@@ -0,0 +1,141 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// STACK BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$1 = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// debugger:print arg1\n+// check:$2 = -1\n+// debugger:print arg2\n+// check:$3 = -2\n+// debugger:continue\n+\n+// STACK BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// debugger:print arg1\n+// check:$4 = -3\n+// debugger:print arg2\n+// check:$5 = -4\n+// debugger:continue\n+\n+// OWNED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$6 = {{Variant1, x = 1799, y = 1799}, {Variant1, 117901063}}\n+// debugger:print arg1\n+// check:$7 = -5\n+// debugger:print arg2\n+// check:$8 = -6\n+// debugger:continue\n+\n+// OWNED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {{Variant1, x = 1799, y = 1799}, {Variant1, 117901063}}\n+// debugger:print arg1\n+// check:$9 = -7\n+// debugger:print arg2\n+// check:$10 = -8\n+// debugger:continue\n+\n+// OWNED MOVED\n+// debugger:finish\n+// debugger:print *self\n+// check:$11 = {{Variant1, x = 1799, y = 1799}, {Variant1, 117901063}}\n+// debugger:print arg1\n+// check:$12 = -9\n+// debugger:print arg2\n+// check:$13 = -10\n+// debugger:continue\n+\n+// MANAGED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$14 = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// debugger:print arg1\n+// check:$15 = -11\n+// debugger:print arg2\n+// check:$16 = -12\n+// debugger:continue\n+\n+// MANAGED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// debugger:print arg1\n+// check:$17 = -13\n+// debugger:print arg2\n+// check:$18 = -14\n+// debugger:continue\n+\n+// MANAGED SELF\n+// debugger:finish\n+// debugger:print self->val\n+// check:$19 = {{Variant2, x = 1799, y = 1799}, {Variant2, 117901063}}\n+// debugger:print arg1\n+// check:$20 = -15\n+// debugger:print arg2\n+// check:$21 = -16\n+// debugger:continue\n+\n+enum Enum {\n+    Variant1 { x: u16, y: u16 },\n+    Variant2 (u32)\n+}\n+\n+impl Enum {\n+\n+    fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+\n+    fn self_by_val(self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+\n+    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+\n+    fn self_managed(@self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+}\n+\n+fn main() {\n+    let stack = Variant2(117901063);\n+    let _ = stack.self_by_ref(-1, -2);\n+    let _ = stack.self_by_val(-3, -4);\n+\n+    let owned = ~Variant1{ x: 1799, y: 1799 };\n+    let _ = owned.self_by_ref(-5, -6);\n+    let _ = owned.self_by_val(-7, -8);\n+    let _ = owned.self_owned(-9, -10);\n+\n+    let managed = @Variant2(117901063);\n+    let _ = managed.self_by_ref(-11, -12);\n+    let _ = managed.self_by_val(-13, -14);\n+    let _ = managed.self_managed(-15, -16);\n+}\n+\n+fn zzz() {()}"}, {"sha": "211f83e6107de40da7af7aa5dfca40cd2af7f765", "filename": "src/test/debug-info/method-on-struct.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs?ref=a36e53730f616479596868ba67fd1932064a00ea", "patch": "@@ -0,0 +1,140 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// STACK BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$1 = {x = 100}\n+// debugger:print arg1\n+// check:$2 = -1\n+// debugger:print arg2\n+// check:$3 = -2\n+// debugger:continue\n+\n+// STACK BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 100}\n+// debugger:print arg1\n+// check:$4 = -3\n+// debugger:print arg2\n+// check:$5 = -4\n+// debugger:continue\n+\n+// OWNED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$6 = {x = 200}\n+// debugger:print arg1\n+// check:$7 = -5\n+// debugger:print arg2\n+// check:$8 = -6\n+// debugger:continue\n+\n+// OWNED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 200}\n+// debugger:print arg1\n+// check:$9 = -7\n+// debugger:print arg2\n+// check:$10 = -8\n+// debugger:continue\n+\n+// OWNED MOVED\n+// debugger:finish\n+// debugger:print *self\n+// check:$11 = {x = 200}\n+// debugger:print arg1\n+// check:$12 = -9\n+// debugger:print arg2\n+// check:$13 = -10\n+// debugger:continue\n+\n+// MANAGED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$14 = {x = 300}\n+// debugger:print arg1\n+// check:$15 = -11\n+// debugger:print arg2\n+// check:$16 = -12\n+// debugger:continue\n+\n+// MANAGED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 300}\n+// debugger:print arg1\n+// check:$17 = -13\n+// debugger:print arg2\n+// check:$18 = -14\n+// debugger:continue\n+\n+// MANAGED SELF\n+// debugger:finish\n+// debugger:print self->val\n+// check:$19 = {x = 300}\n+// debugger:print arg1\n+// check:$20 = -15\n+// debugger:print arg2\n+// check:$21 = -16\n+// debugger:continue\n+\n+struct Struct {\n+    x: int\n+}\n+\n+impl Struct {\n+\n+    fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        self.x + arg1 + arg2\n+    }\n+\n+    fn self_by_val(self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        self.x + arg1 + arg2\n+    }\n+\n+    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        self.x + arg1 + arg2\n+    }\n+\n+    fn self_managed(@self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        self.x + arg1 + arg2\n+    }\n+}\n+\n+fn main() {\n+    let stack = Struct { x: 100 };\n+    let _ = stack.self_by_ref(-1, -2);\n+    let _ = stack.self_by_val(-3, -4);\n+\n+    let owned = ~Struct { x: 200 };\n+    let _ = owned.self_by_ref(-5, -6);\n+    let _ = owned.self_by_val(-7, -8);\n+    let _ = owned.self_owned(-9, -10);\n+\n+    let managed = @Struct { x: 300 };\n+    let _ = managed.self_by_ref(-11, -12);\n+    let _ = managed.self_by_val(-13, -14);\n+    let _ = managed.self_managed(-15, -16);\n+}\n+\n+fn zzz() {()}"}, {"sha": "ad6c9a1cada4fdf68c3d0f2d8f9fa31e6946de72", "filename": "src/test/debug-info/method-on-trait.rs", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs?ref=a36e53730f616479596868ba67fd1932064a00ea", "patch": "@@ -0,0 +1,147 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// STACK BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$1 = {x = 100}\n+// debugger:print arg1\n+// check:$2 = -1\n+// debugger:print arg2\n+// check:$3 = -2\n+// debugger:continue\n+\n+// STACK BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 100}\n+// debugger:print arg1\n+// check:$4 = -3\n+// debugger:print arg2\n+// check:$5 = -4\n+// debugger:continue\n+\n+// OWNED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$6 = {x = 200}\n+// debugger:print arg1\n+// check:$7 = -5\n+// debugger:print arg2\n+// check:$8 = -6\n+// debugger:continue\n+\n+// OWNED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 200}\n+// debugger:print arg1\n+// check:$9 = -7\n+// debugger:print arg2\n+// check:$10 = -8\n+// debugger:continue\n+\n+// OWNED MOVED\n+// debugger:finish\n+// debugger:print *self\n+// check:$11 = {x = 200}\n+// debugger:print arg1\n+// check:$12 = -9\n+// debugger:print arg2\n+// check:$13 = -10\n+// debugger:continue\n+\n+// MANAGED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$14 = {x = 300}\n+// debugger:print arg1\n+// check:$15 = -11\n+// debugger:print arg2\n+// check:$16 = -12\n+// debugger:continue\n+\n+// MANAGED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 300}\n+// debugger:print arg1\n+// check:$17 = -13\n+// debugger:print arg2\n+// check:$18 = -14\n+// debugger:continue\n+\n+// MANAGED SELF\n+// debugger:finish\n+// debugger:print self->val\n+// check:$19 = {x = 300}\n+// debugger:print arg1\n+// check:$20 = -15\n+// debugger:print arg2\n+// check:$21 = -16\n+// debugger:continue\n+\n+struct Struct {\n+    x: int\n+}\n+\n+trait Trait {\n+    fn self_by_ref(&self, arg1: int, arg2: int) -> int;\n+    fn self_by_val(self, arg1: int, arg2: int) -> int;\n+    fn self_owned(~self, arg1: int, arg2: int) -> int;\n+    fn self_managed(@self, arg1: int, arg2: int) -> int;\n+}\n+\n+impl Trait for Struct {\n+\n+    fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        self.x + arg1 + arg2\n+    }\n+\n+    fn self_by_val(self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        self.x + arg1 + arg2\n+    }\n+\n+    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        self.x + arg1 + arg2\n+    }\n+\n+    fn self_managed(@self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        self.x + arg1 + arg2\n+    }\n+}\n+\n+fn main() {\n+    let stack = Struct { x: 100 };\n+    let _ = stack.self_by_ref(-1, -2);\n+    let _ = stack.self_by_val(-3, -4);\n+\n+    let owned = ~Struct { x: 200 };\n+    let _ = owned.self_by_ref(-5, -6);\n+    let _ = owned.self_by_val(-7, -8);\n+    let _ = owned.self_owned(-9, -10);\n+\n+    let managed = @Struct { x: 300 };\n+    let _ = managed.self_by_ref(-11, -12);\n+    let _ = managed.self_by_val(-13, -14);\n+    let _ = managed.self_managed(-15, -16);\n+}\n+\n+fn zzz() {()}"}, {"sha": "03d7c44059fa19ec1cdb72a0460cbf8a1a5e3dee", "filename": "src/test/debug-info/method-on-tuple-struct.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs?ref=a36e53730f616479596868ba67fd1932064a00ea", "patch": "@@ -0,0 +1,138 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// STACK BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$1 = {100, -100.5}\n+// debugger:print arg1\n+// check:$2 = -1\n+// debugger:print arg2\n+// check:$3 = -2\n+// debugger:continue\n+\n+// STACK BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {100, -100.5}\n+// debugger:print arg1\n+// check:$4 = -3\n+// debugger:print arg2\n+// check:$5 = -4\n+// debugger:continue\n+\n+// OWNED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$6 = {200, -200.5}\n+// debugger:print arg1\n+// check:$7 = -5\n+// debugger:print arg2\n+// check:$8 = -6\n+// debugger:continue\n+\n+// OWNED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {200, -200.5}\n+// debugger:print arg1\n+// check:$9 = -7\n+// debugger:print arg2\n+// check:$10 = -8\n+// debugger:continue\n+\n+// OWNED MOVED\n+// debugger:finish\n+// debugger:print *self\n+// check:$11 = {200, -200.5}\n+// debugger:print arg1\n+// check:$12 = -9\n+// debugger:print arg2\n+// check:$13 = -10\n+// debugger:continue\n+\n+// MANAGED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$14 = {300, -300.5}\n+// debugger:print arg1\n+// check:$15 = -11\n+// debugger:print arg2\n+// check:$16 = -12\n+// debugger:continue\n+\n+// MANAGED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {300, -300.5}\n+// debugger:print arg1\n+// check:$17 = -13\n+// debugger:print arg2\n+// check:$18 = -14\n+// debugger:continue\n+\n+// MANAGED SELF\n+// debugger:finish\n+// debugger:print self->val\n+// check:$19 = {300, -300.5}\n+// debugger:print arg1\n+// check:$20 = -15\n+// debugger:print arg2\n+// check:$21 = -16\n+// debugger:continue\n+\n+struct TupleStruct(int, float);\n+\n+impl TupleStruct {\n+\n+    fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+\n+    fn self_by_val(self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+\n+    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+\n+    fn self_managed(@self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+}\n+\n+fn main() {\n+    let stack = TupleStruct(100, -100.5);\n+    let _ = stack.self_by_ref(-1, -2);\n+    let _ = stack.self_by_val(-3, -4);\n+\n+    let owned = ~TupleStruct(200, -200.5);\n+    let _ = owned.self_by_ref(-5, -6);\n+    let _ = owned.self_by_val(-7, -8);\n+    let _ = owned.self_owned(-9, -10);\n+\n+    let managed = @TupleStruct(300, -300.5);\n+    let _ = managed.self_by_ref(-11, -12);\n+    let _ = managed.self_by_val(-13, -14);\n+    let _ = managed.self_managed(-15, -16);\n+}\n+\n+fn zzz() {()}"}, {"sha": "ada3802e15d5a899edb651c11110bd0980d2d26b", "filename": "src/test/debug-info/tuple-struct.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36e53730f616479596868ba67fd1932064a00ea/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs?ref=a36e53730f616479596868ba67fd1932064a00ea", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:set print pretty off\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print no_padding16\n+// check:$1 = {10000, -10001}\n+\n+// debugger:print no_padding32\n+// check:$2 = {-10002, -10003.5, 10004}\n+\n+// debugger:print no_padding64\n+// check:$3 = {-10005.5, 10006, 10007}\n+\n+// debugger:print no_padding163264\n+// check:$4 = {-10008, 10009, 10010, 10011}\n+\n+// debugger:print internal_padding\n+// check:$5 = {10012, -10013}\n+\n+// debugger:print padding_at_end\n+// check:$6 = {-10014, 10015}\n+\n+\n+// This test case mainly makes sure that no field names are generated for tuple structs (as opposed\n+// to all fields having the name \"__field__\"). Otherwise they are handled the same a normal structs.\n+\n+struct NoPadding16(u16, i16);\n+struct NoPadding32(i32, f32, u32);\n+struct NoPadding64(f64, i64, u64);\n+struct NoPadding163264(i16, u16, i32, u64);\n+struct InternalPadding(u16, i64);\n+struct PaddingAtEnd(i64, u16);\n+\n+fn main() {\n+    let no_padding16 = NoPadding16(10000, -10001);\n+    let no_padding32 = NoPadding32(-10002, -10003.5, 10004);\n+    let no_padding64 = NoPadding64(-10005.5, 10006, 10007);\n+    let no_padding163264 = NoPadding163264(-10008, 10009, 10010, 10011);\n+\n+    let internal_padding = InternalPadding(10012, -10013);\n+    let padding_at_end = PaddingAtEnd(-10014, 10015);\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}"}]}