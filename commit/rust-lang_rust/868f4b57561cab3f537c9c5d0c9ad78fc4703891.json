{"sha": "868f4b57561cab3f537c9c5d0c9ad78fc4703891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OGY0YjU3NTYxY2FiM2Y1MzdjOWM1ZDBjOWFkNzhmYzQ3MDM4OTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-10T20:55:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-10T20:55:06Z"}, "message": "Merge #5956\n\n5956: Highlight errors in macros r=jonas-schievink a=popzxc\n\nResolves #4924 \r\n\r\nThis PR makes rust-analyzer highlight not only the source place when error originates in macro, but also the exact places in macro which caused an error.\r\n\r\nThis is done by creating an inverse diagnostic, which points to the macro and cross-references the source place.\r\n\r\n![\u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435](https://user-images.githubusercontent.com/12111581/92319594-b71e6c00-f022-11ea-94c1-f412905269dd.png)\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "217405b14f2b57de8739166045b625cbb3e9cacb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/217405b14f2b57de8739166045b625cbb3e9cacb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/868f4b57561cab3f537c9c5d0c9ad78fc4703891", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWpKqCRBK7hj4Ov3rIwAAdHIIAB8aZ5sZGuxjqdM8Q+C8ZPZN\n9SPGTZLWGkMaexQ++H5zHxVnuOIbBKsrl7xPyWUsWLg+C9COiR40BlNC/8lhPB8E\n9Y83pHntoTXskywyKdHkOrZwtuBQZ2oReqLEJQwR8h7HtRiHexeNvLfMTcLTfJsO\nHQ+gYBNPMXS9AbRW/unET2rCaH2xwxFOPT1lEEWq6zDv66gEcpisxF8bm8K32hmm\n/XJDXGZP+i4BHwG74kXzK+Qz07IPc4j+soPMeqYm3D9u3rn8bbQfiiZLj99CSsSd\np9FwNbvs3J09ZKqCnkUdhPL8MwTAxkQZ9w93ZVdH2ULeAZmMSjyR4u4ks1KnJBc=\n=/8ak\n-----END PGP SIGNATURE-----\n", "payload": "tree 217405b14f2b57de8739166045b625cbb3e9cacb\nparent 5c336e266fe09ae9ae6e634513d441cbcde63696\nparent 023e3a1deaff4e8780eb5eb5f660bf193cbe384d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1599771306 +0000\ncommitter GitHub <noreply@github.com> 1599771306 +0000\n\nMerge #5956\n\n5956: Highlight errors in macros r=jonas-schievink a=popzxc\n\nResolves #4924 \r\n\r\nThis PR makes rust-analyzer highlight not only the source place when error originates in macro, but also the exact places in macro which caused an error.\r\n\r\nThis is done by creating an inverse diagnostic, which points to the macro and cross-references the source place.\r\n\r\n![\u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435](https://user-images.githubusercontent.com/12111581/92319594-b71e6c00-f022-11ea-94c1-f412905269dd.png)\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/868f4b57561cab3f537c9c5d0c9ad78fc4703891", "html_url": "https://github.com/rust-lang/rust/commit/868f4b57561cab3f537c9c5d0c9ad78fc4703891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/868f4b57561cab3f537c9c5d0c9ad78fc4703891/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c336e266fe09ae9ae6e634513d441cbcde63696", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c336e266fe09ae9ae6e634513d441cbcde63696", "html_url": "https://github.com/rust-lang/rust/commit/5c336e266fe09ae9ae6e634513d441cbcde63696"}, {"sha": "023e3a1deaff4e8780eb5eb5f660bf193cbe384d", "url": "https://api.github.com/repos/rust-lang/rust/commits/023e3a1deaff4e8780eb5eb5f660bf193cbe384d", "html_url": "https://github.com/rust-lang/rust/commit/023e3a1deaff4e8780eb5eb5f660bf193cbe384d"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "00e8da8a70c801bdf7a0fbcfb01dac5488391046", "filename": "crates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/868f4b57561cab3f537c9c5d0c9ad78fc4703891/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "raw_url": "https://github.com/rust-lang/rust/raw/868f4b57561cab3f537c9c5d0c9ad78fc4703891/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt?ref=868f4b57561cab3f537c9c5d0c9ad78fc4703891", "patch": "@@ -44,4 +44,49 @@\n         },\n         fixes: [],\n     },\n+    MappedRustDiagnostic {\n+        url: \"file:///test/crates/hir_def/src/path.rs\",\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 264,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 264,\n+                    character: 76,\n+                },\n+            },\n+            severity: Some(\n+                Error,\n+            ),\n+            code: None,\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"Please register your known path in the path module\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: \"file:///test/crates/hir_def/src/data.rs\",\n+                            range: Range {\n+                                start: Position {\n+                                    line: 79,\n+                                    character: 15,\n+                                },\n+                                end: Position {\n+                                    line: 79,\n+                                    character: 41,\n+                                },\n+                            },\n+                        },\n+                        message: \"Exact error occured here\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+        },\n+        fixes: [],\n+    },\n ]"}, {"sha": "33606edda4b0c03a75290ebe470cc9c27b32b7cd", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/868f4b57561cab3f537c9c5d0c9ad78fc4703891/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868f4b57561cab3f537c9c5d0c9ad78fc4703891/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=868f4b57561cab3f537c9c5d0c9ad78fc4703891", "patch": "@@ -225,12 +225,43 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n \n             // If error occurs from macro expansion, add related info pointing to\n             // where the error originated\n-            if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n-                related_information.push(lsp_types::DiagnosticRelatedInformation {\n-                    location: location_naive(workspace_root, &primary_span),\n-                    message: \"Error originated from macro here\".to_string(),\n-                });\n-            }\n+            // Also, we would generate an additional diagnostic, so that exact place of macro\n+            // will be highlighted in the error origin place.\n+            let additional_diagnostic =\n+                if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n+                    let in_macro_location = location_naive(workspace_root, &primary_span);\n+\n+                    // Add related information for the main disagnostic.\n+                    related_information.push(lsp_types::DiagnosticRelatedInformation {\n+                        location: in_macro_location.clone(),\n+                        message: \"Error originated from macro here\".to_string(),\n+                    });\n+\n+                    // For the additional in-macro diagnostic we add the inverse message pointing to the error location in code.\n+                    let information_for_additional_diagnostic =\n+                        vec![lsp_types::DiagnosticRelatedInformation {\n+                            location: location.clone(),\n+                            message: \"Exact error occured here\".to_string(),\n+                        }];\n+\n+                    let diagnostic = lsp_types::Diagnostic {\n+                        range: in_macro_location.range,\n+                        severity,\n+                        code: code.clone().map(lsp_types::NumberOrString::String),\n+                        source: Some(source.clone()),\n+                        message: message.clone(),\n+                        related_information: Some(information_for_additional_diagnostic),\n+                        tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n+                    };\n+\n+                    Some(MappedRustDiagnostic {\n+                        url: in_macro_location.uri,\n+                        diagnostic,\n+                        fixes: fixes.clone(),\n+                    })\n+                } else {\n+                    None\n+                };\n \n             let diagnostic = lsp_types::Diagnostic {\n                 range: location.range,\n@@ -246,8 +277,14 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n             };\n \n-            MappedRustDiagnostic { url: location.uri, diagnostic, fixes: fixes.clone() }\n+            let main_diagnostic =\n+                MappedRustDiagnostic { url: location.uri, diagnostic, fixes: fixes.clone() };\n+            match additional_diagnostic {\n+                None => vec![main_diagnostic],\n+                Some(additional_diagnostic) => vec![main_diagnostic, additional_diagnostic],\n+            }\n         })\n+        .flatten()\n         .collect()\n }\n "}]}