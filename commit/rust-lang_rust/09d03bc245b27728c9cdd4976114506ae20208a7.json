{"sha": "09d03bc245b27728c9cdd4976114506ae20208a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZDAzYmMyNDViMjc3MjhjOWNkZDQ5NzYxMTQ1MDZhZTIwMjA4YTc=", "commit": {"author": {"name": "Nicolas Koch", "email": "nioko1337@gmail.com", "date": "2018-05-17T12:10:14Z"}, "committer": {"name": "Nicolas Koch", "email": "nioko1337@gmail.com", "date": "2018-05-17T12:10:14Z"}, "message": "Store ENOSYS in a global to avoid unnecessary system calls", "tree": {"sha": "ba1eda7458aaa0f40f36aba1378edd0f57c60350", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba1eda7458aaa0f40f36aba1378edd0f57c60350"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d03bc245b27728c9cdd4976114506ae20208a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d03bc245b27728c9cdd4976114506ae20208a7", "html_url": "https://github.com/rust-lang/rust/commit/09d03bc245b27728c9cdd4976114506ae20208a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d03bc245b27728c9cdd4976114506ae20208a7/comments", "author": {"login": "nicokoch", "id": 3924281, "node_id": "MDQ6VXNlcjM5MjQyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3924281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicokoch", "html_url": "https://github.com/nicokoch", "followers_url": "https://api.github.com/users/nicokoch/followers", "following_url": "https://api.github.com/users/nicokoch/following{/other_user}", "gists_url": "https://api.github.com/users/nicokoch/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicokoch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicokoch/subscriptions", "organizations_url": "https://api.github.com/users/nicokoch/orgs", "repos_url": "https://api.github.com/users/nicokoch/repos", "events_url": "https://api.github.com/users/nicokoch/events{/privacy}", "received_events_url": "https://api.github.com/users/nicokoch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nicokoch", "id": 3924281, "node_id": "MDQ6VXNlcjM5MjQyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3924281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicokoch", "html_url": "https://github.com/nicokoch", "followers_url": "https://api.github.com/users/nicokoch/followers", "following_url": "https://api.github.com/users/nicokoch/following{/other_user}", "gists_url": "https://api.github.com/users/nicokoch/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicokoch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicokoch/subscriptions", "organizations_url": "https://api.github.com/users/nicokoch/orgs", "repos_url": "https://api.github.com/users/nicokoch/repos", "events_url": "https://api.github.com/users/nicokoch/events{/privacy}", "received_events_url": "https://api.github.com/users/nicokoch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e2942861324493c2cc5a32cb1473e656857b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e2942861324493c2cc5a32cb1473e656857b98", "html_url": "https://github.com/rust-lang/rust/commit/a5e2942861324493c2cc5a32cb1473e656857b98"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "8412540934eb2d4c108f7f72bcf02d9e06f49fd5", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/09d03bc245b27728c9cdd4976114506ae20208a7/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d03bc245b27728c9cdd4976114506ae20208a7/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=09d03bc245b27728c9cdd4976114506ae20208a7", "patch": "@@ -781,6 +781,11 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     use fs::{File, set_permissions};\n+    use sync::atomic::{AtomicBool, Ordering};\n+\n+    // Kernel prior to 4.5 don't have copy_file_range\n+    // We store the availability in a global to avoid unneccessary syscalls\n+    static HAS_COPY_FILE_RANGE: AtomicBool = AtomicBool::new(true);\n \n     unsafe fn copy_file_range(\n         fd_in: libc::c_int,\n@@ -820,16 +825,26 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n         } else {\n             (len - written) as usize\n         };\n-        let copy_result = unsafe {\n-            // We actually don't have to adjust the offsets,\n-            // because copy_file_range adjusts the file offset automatically\n-            cvt(copy_file_range(reader.as_raw_fd(),\n-                                ptr::null_mut(),\n-                                writer.as_raw_fd(),\n-                                ptr::null_mut(),\n-                                bytes_to_copy,\n-                                0)\n-                )\n+        let copy_result = if HAS_COPY_FILE_RANGE.load(Ordering::Relaxed) {\n+            let copy_result = unsafe {\n+                // We actually don't have to adjust the offsets,\n+                // because copy_file_range adjusts the file offset automatically\n+                cvt(copy_file_range(reader.as_raw_fd(),\n+                                    ptr::null_mut(),\n+                                    writer.as_raw_fd(),\n+                                    ptr::null_mut(),\n+                                    bytes_to_copy,\n+                                    0)\n+                    )\n+            };\n+            if let Err(ref copy_err) = copy_result {\n+                if let Some(libc::ENOSYS) = copy_err.raw_os_error() {\n+                    HAS_COPY_FILE_RANGE.store(false, Ordering::Relaxed);\n+                }\n+            }\n+            copy_result\n+        } else {\n+            Err(io::Error::from_raw_os_error(libc::ENOSYS))\n         };\n         match copy_result {\n             Ok(ret) => written += ret as u64,"}]}