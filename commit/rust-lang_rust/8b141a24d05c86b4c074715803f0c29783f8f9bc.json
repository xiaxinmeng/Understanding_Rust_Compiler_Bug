{"sha": "8b141a24d05c86b4c074715803f0c29783f8f9bc", "node_id": "C_kwDOAAsO6NoAKDhiMTQxYTI0ZDA1Yzg2YjRjMDc0NzE1ODAzZjBjMjk3ODNmOGY5YmM", "commit": {"author": {"name": "Dominik Stolz", "email": "d.stolz@tum.de", "date": "2021-10-07T21:14:33Z"}, "committer": {"name": "Dominik Stolz", "email": "d.stolz@tum.de", "date": "2021-10-07T21:20:53Z"}, "message": "Add variance constraints for const params", "tree": {"sha": "5d95297e8a4c16bbb3ec7be4b052169567836a8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d95297e8a4c16bbb3ec7be4b052169567836a8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b141a24d05c86b4c074715803f0c29783f8f9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b141a24d05c86b4c074715803f0c29783f8f9bc", "html_url": "https://github.com/rust-lang/rust/commit/8b141a24d05c86b4c074715803f0c29783f8f9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b141a24d05c86b4c074715803f0c29783f8f9bc/comments", "author": {"login": "voidc", "id": 5302792, "node_id": "MDQ6VXNlcjUzMDI3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5302792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidc", "html_url": "https://github.com/voidc", "followers_url": "https://api.github.com/users/voidc/followers", "following_url": "https://api.github.com/users/voidc/following{/other_user}", "gists_url": "https://api.github.com/users/voidc/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidc/subscriptions", "organizations_url": "https://api.github.com/users/voidc/orgs", "repos_url": "https://api.github.com/users/voidc/repos", "events_url": "https://api.github.com/users/voidc/events{/privacy}", "received_events_url": "https://api.github.com/users/voidc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "voidc", "id": 5302792, "node_id": "MDQ6VXNlcjUzMDI3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5302792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidc", "html_url": "https://github.com/voidc", "followers_url": "https://api.github.com/users/voidc/followers", "following_url": "https://api.github.com/users/voidc/following{/other_user}", "gists_url": "https://api.github.com/users/voidc/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidc/subscriptions", "organizations_url": "https://api.github.com/users/voidc/orgs", "repos_url": "https://api.github.com/users/voidc/repos", "events_url": "https://api.github.com/users/voidc/events{/privacy}", "received_events_url": "https://api.github.com/users/voidc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc", "html_url": "https://github.com/rust-lang/rust/commit/ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "33c27ce86ddb5f8357f2a42a763b9559afbb3932", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8b141a24d05c86b4c074715803f0c29783f8f9bc/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b141a24d05c86b4c074715803f0c29783f8f9bc/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=8b141a24d05c86b4c074715803f0c29783f8f9bc", "patch": "@@ -223,8 +223,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     self.add_constraints_from_region(current, lt, variance_i)\n                 }\n                 GenericArgKind::Type(ty) => self.add_constraints_from_ty(current, ty, variance_i),\n-                GenericArgKind::Const(_) => {\n-                    // Consts impose no constraints.\n+                GenericArgKind::Const(val) => {\n+                    self.add_constraints_from_const(current, val, variance_i)\n                 }\n             }\n         }\n@@ -263,7 +263,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(current, &ty::TypeAndMut { ty, mutbl }, variance);\n             }\n \n-            ty::Array(typ, _) => {\n+            ty::Array(typ, len) => {\n+                self.add_constraints_from_const(current, len, variance);\n                 self.add_constraints_from_ty(current, typ, variance);\n             }\n \n@@ -385,13 +386,32 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     self.add_constraints_from_region(current, lt, variance_i)\n                 }\n                 GenericArgKind::Type(ty) => self.add_constraints_from_ty(current, ty, variance_i),\n-                GenericArgKind::Const(_) => {\n-                    // Consts impose no constraints.\n+                GenericArgKind::Const(val) => {\n+                    self.add_constraints_from_const(current, val, variance)\n                 }\n             }\n         }\n     }\n \n+    /// Adds constraints appropriate for a const expression `val`\n+    /// in a context with ambient variance `variance`\n+    fn add_constraints_from_const(\n+        &mut self,\n+        current: &CurrentItem,\n+        val: &ty::Const<'tcx>,\n+        variance: VarianceTermPtr<'a>,\n+    ) {\n+        debug!(\"add_constraints_from_const(val={:?}, variance={:?})\", val, variance);\n+\n+        match &val.val {\n+            ty::ConstKind::Unevaluated(uv) => {\n+                let substs = uv.substs(self.tcx());\n+                self.add_constraints_from_invariant_substs(current, substs, variance);\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     /// Adds constraints appropriate for a function with signature\n     /// `sig` appearing in a context with ambient variance `variance`\n     fn add_constraints_from_sig("}]}