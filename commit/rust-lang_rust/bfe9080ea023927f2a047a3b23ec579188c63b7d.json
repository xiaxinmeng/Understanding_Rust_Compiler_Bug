{"sha": "bfe9080ea023927f2a047a3b23ec579188c63b7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZTkwODBlYTAyMzkyN2YyYTA0N2EzYjIzZWM1NzkxODhjNjNiN2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-28T22:19:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-28T22:19:57Z"}, "message": "Rollup merge of #61024 - petrochenkov:proctest, r=nikomatsakis\n\ntests: Centralize proc macros commonly used for testing\n\nMany proc macros in `ui\\proc-macro\\auxiliary` were doing same things.\n(I added a fair share of those myself.)\n\nNow commonly used macros (empty, identity, etc) are collected in one place - `ui\\proc-macro\\auxiliary\\test-macros.rs`.", "tree": {"sha": "0267f1ec48290946a88d08708cbe9ac441874433", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0267f1ec48290946a88d08708cbe9ac441874433"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfe9080ea023927f2a047a3b23ec579188c63b7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7bQNCRBK7hj4Ov3rIwAAdHIIAHFOjNzYVb4JEFMSxj6kbsBh\nHGelq3KhGGpWdzxvlOpJoq8t5ZCxoIxtnaHbce4ugN+VHUhtzdKQo+szauXl73XD\nTzuwM6SBjpnhE8KLryZotOOFu9ehOdEI4z/Dx5vuRgfY0MnQwM7B1rQUH3s4gmhf\n1dz9Rqd/EAcYxvIuUno+1TceLLxz2XTa5PK5iTzq/uJKOqBFZAn5be+KAjht2fyB\nlBcaEmFQC/ZLHNyMRlLGPvL0nE7R+1L97gvelMiPaZpNmitY4GwfDW/vs/ReTuC0\nrNfz+OlzkPzhRgN6Yd1rqGv5q0AIDWT8Buv7YSS3ZKu36+8EkPqhBNG+SIG7RK4=\n=hsMr\n-----END PGP SIGNATURE-----\n", "payload": "tree 0267f1ec48290946a88d08708cbe9ac441874433\nparent ee08261c8c5bef635ff38f6d617bb7b72dd470cd\nparent fb52aeafc97f4927e7dcc178a81bc005c3dc0015\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559081997 +0200\ncommitter GitHub <noreply@github.com> 1559081997 +0200\n\nRollup merge of #61024 - petrochenkov:proctest, r=nikomatsakis\n\ntests: Centralize proc macros commonly used for testing\n\nMany proc macros in `ui\\proc-macro\\auxiliary` were doing same things.\n(I added a fair share of those myself.)\n\nNow commonly used macros (empty, identity, etc) are collected in one place - `ui\\proc-macro\\auxiliary\\test-macros.rs`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe9080ea023927f2a047a3b23ec579188c63b7d", "html_url": "https://github.com/rust-lang/rust/commit/bfe9080ea023927f2a047a3b23ec579188c63b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfe9080ea023927f2a047a3b23ec579188c63b7d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "html_url": "https://github.com/rust-lang/rust/commit/ee08261c8c5bef635ff38f6d617bb7b72dd470cd"}, {"sha": "fb52aeafc97f4927e7dcc178a81bc005c3dc0015", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb52aeafc97f4927e7dcc178a81bc005c3dc0015", "html_url": "https://github.com/rust-lang/rust/commit/fb52aeafc97f4927e7dcc178a81bc005c3dc0015"}], "stats": {"total": 1124, "additions": 475, "deletions": 649}, "files": [{"sha": "5e500de607c1aae7e56bc2e873bc23be925d92fb", "filename": "src/test/ui/custom-derive/auxiliary/plugin.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fauxiliary%2Fplugin.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,28 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_derive(Foo)]\n-pub fn derive_foo(input: TokenStream) -> TokenStream {\n-    input\n-}\n-\n-#[proc_macro_derive(Bar)]\n-pub fn derive_bar(input: TokenStream) -> TokenStream {\n-    panic!(\"lolnope\");\n-}\n-\n-#[proc_macro_derive(WithHelper, attributes(helper))]\n-pub fn with_helper(input: TokenStream) -> TokenStream {\n-    TokenStream::new()\n-}\n-\n-#[proc_macro_attribute]\n-pub fn helper(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input\n-}"}, {"sha": "8478ff1a6ae6c7616833547b4f4323bd5a1a6a18", "filename": "src/test/ui/custom-derive/derive-in-mod.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fderive-in-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fderive-in-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fderive-in-mod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,13 +0,0 @@\n-// compile-pass\n-// aux-build:plugin.rs\n-\n-extern crate plugin;\n-\n-mod inner {\n-    use plugin::WithHelper;\n-\n-    #[derive(WithHelper)]\n-    struct S;\n-}\n-\n-fn main() {}"}, {"sha": "ba072ba3568b7aac6ad2f8a3889eaa74100af974", "filename": "src/test/ui/custom-derive/helper-attr-blocked-by-import-ambig.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,12 +0,0 @@\n-// aux-build:plugin.rs\n-\n-#[macro_use(WithHelper)]\n-extern crate plugin;\n-\n-use plugin::helper;\n-\n-#[derive(WithHelper)]\n-#[helper] //~ ERROR `helper` is ambiguous\n-struct S;\n-\n-fn main() {}"}, {"sha": "e83c291c9bfe4ed5cc23a89e309e8e4e9640f221", "filename": "src/test/ui/custom-derive/helper-attr-blocked-by-import-ambig.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.stderr?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,21 +0,0 @@\n-error[E0659]: `helper` is ambiguous (derive helper attribute vs any other name)\n-  --> $DIR/helper-attr-blocked-by-import-ambig.rs:9:3\n-   |\n-LL | #[helper]\n-   |   ^^^^^^ ambiguous name\n-   |\n-note: `helper` could refer to the derive helper attribute defined here\n-  --> $DIR/helper-attr-blocked-by-import-ambig.rs:8:10\n-   |\n-LL | #[derive(WithHelper)]\n-   |          ^^^^^^^^^^\n-note: `helper` could also refer to the attribute macro imported here\n-  --> $DIR/helper-attr-blocked-by-import-ambig.rs:6:5\n-   |\n-LL | use plugin::helper;\n-   |     ^^^^^^^^^^^^^^\n-   = help: use `crate::helper` to refer to this attribute macro unambiguously\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0659`."}, {"sha": "abbf014f55337483f2fb9ee31a53e00c5086d533", "filename": "src/test/ui/custom-derive/helper-attr-blocked-by-import.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,28 +0,0 @@\n-// compile-pass\n-// aux-build:plugin.rs\n-\n-#[macro_use(WithHelper)]\n-extern crate plugin;\n-\n-use self::one::*;\n-use self::two::*;\n-\n-mod helper {}\n-\n-mod one {\n-    use helper;\n-\n-    #[derive(WithHelper)]\n-    #[helper]\n-    struct One;\n-}\n-\n-mod two {\n-    use helper;\n-\n-    #[derive(WithHelper)]\n-    #[helper]\n-    struct Two;\n-}\n-\n-fn main() {}"}, {"sha": "7a5d19f771f3ca5a8ebc33f5b645ff9490a2dbe5", "filename": "src/test/ui/custom-derive/issue-36935.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,12 +0,0 @@\n-// aux-build:plugin.rs\n-\n-\n-#[macro_use] extern crate plugin;\n-\n-#[derive(Foo, Bar)] //~ ERROR proc-macro derive panicked\n-struct Baz {\n-    a: i32,\n-    b: i32,\n-}\n-\n-fn main() {}"}, {"sha": "2875bc5fce99b69604953df61ae6079db7a530f6", "filename": "src/test/ui/custom-derive/issue-36935.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,10 +0,0 @@\n-error: proc-macro derive panicked\n-  --> $DIR/issue-36935.rs:6:15\n-   |\n-LL | #[derive(Foo, Bar)]\n-   |               ^^^\n-   |\n-   = help: message: lolnope\n-\n-error: aborting due to previous error\n-"}, {"sha": "a3d4d23450ca6f1e44c346c667e1ad97bfef83cf", "filename": "src/test/ui/proc-macro/attribute-order-restricted.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,14 +1,14 @@\n-// aux-build:attr_proc_macro.rs\n+// aux-build:test-macros.rs\n \n-extern crate attr_proc_macro;\n-use attr_proc_macro::*;\n+#[macro_use]\n+extern crate test_macros;\n \n-#[attr_proc_macro] // OK\n+#[identity_attr] // OK\n #[derive(Clone)]\n struct Before;\n \n #[derive(Clone)]\n-#[attr_proc_macro] //~ ERROR macro attributes must be placed before `#[derive]`\n+#[identity_attr] //~ ERROR macro attributes must be placed before `#[derive]`\n struct After;\n \n fn main() {}"}, {"sha": "9ca8a443e40fbb5cf1fcb8015e279b10b4954ac6", "filename": "src/test/ui/proc-macro/attribute-order-restricted.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,8 +1,8 @@\n error: macro attributes must be placed before `#[derive]`\n   --> $DIR/attribute-order-restricted.rs:11:1\n    |\n-LL | #[attr_proc_macro]\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[identity_attr]\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "aaa6c07dddbbd402440a524a6cf102cb813bcd1a", "filename": "src/test/ui/proc-macro/attribute-with-error.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,12 +1,11 @@\n-// aux-build:attribute-with-error.rs\n+// aux-build:test-macros.rs\n \n #![feature(custom_inner_attributes)]\n \n-extern crate attribute_with_error;\n+#[macro_use]\n+extern crate test_macros;\n \n-use attribute_with_error::foo;\n-\n-#[foo]\n+#[recollect_attr]\n fn test1() {\n     let a: i32 = \"foo\";\n     //~^ ERROR: mismatched types\n@@ -15,13 +14,13 @@ fn test1() {\n }\n \n fn test2() {\n-    #![foo]\n+    #![recollect_attr]\n \n     // FIXME: should have a type error here and assert it works but it doesn't\n }\n \n trait A {\n-    // FIXME: should have a #[foo] attribute here and assert that it works\n+    // FIXME: should have a #[recollect_attr] attribute here and assert that it works\n     fn foo(&self) {\n         let a: i32 = \"foo\";\n         //~^ ERROR: mismatched types\n@@ -31,13 +30,13 @@ trait A {\n struct B;\n \n impl A for B {\n-    #[foo]\n+    #[recollect_attr]\n     fn foo(&self) {\n         let a: i32 = \"foo\";\n         //~^ ERROR: mismatched types\n     }\n }\n \n-#[foo]\n+#[recollect_attr]\n fn main() {\n }"}, {"sha": "937d47ff089798e66f2d8be8e423cbf76ed7e08f", "filename": "src/test/ui/proc-macro/attribute-with-error.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/attribute-with-error.rs:11:18\n+  --> $DIR/attribute-with-error.rs:10:18\n    |\n LL |     let a: i32 = \"foo\";\n    |                  ^^^^^ expected i32, found reference\n@@ -8,7 +8,7 @@ LL |     let a: i32 = \"foo\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/attribute-with-error.rs:13:18\n+  --> $DIR/attribute-with-error.rs:12:18\n    |\n LL |     let b: i32 = \"f'oo\";\n    |                  ^^^^^^ expected i32, found reference\n@@ -17,7 +17,7 @@ LL |     let b: i32 = \"f'oo\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/attribute-with-error.rs:26:22\n+  --> $DIR/attribute-with-error.rs:25:22\n    |\n LL |         let a: i32 = \"foo\";\n    |                      ^^^^^ expected i32, found reference\n@@ -26,7 +26,7 @@ LL |         let a: i32 = \"foo\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/attribute-with-error.rs:36:22\n+  --> $DIR/attribute-with-error.rs:35:22\n    |\n LL |         let a: i32 = \"foo\";\n    |                      ^^^^^ expected i32, found reference"}, {"sha": "b1f54be6bac4b0ca4a3cccd5066d4c48dc427e9c", "filename": "src/test/ui/proc-macro/auxiliary/attr_proc_macro.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,13 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_attribute]\n-pub fn attr_proc_macro(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input\n-}"}, {"sha": "c073be003101983bc3b83d1d420b08ab75bf71de", "filename": "src/test/ui/proc-macro/auxiliary/attribute-with-error.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattribute-with-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattribute-with-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattribute-with-error.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,13 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_attribute]\n-pub fn foo(_attr: TokenStream, input: TokenStream) -> TokenStream {\n-    input.into_iter().collect()\n-}"}, {"sha": "16f3b7640290d42dc282302913432fece5604d33", "filename": "src/test/ui/proc-macro/auxiliary/bang_proc_macro.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,13 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro]\n-pub fn bang_proc_macro(input: TokenStream) -> TokenStream {\n-    input\n-}"}, {"sha": "64d4e0f7b7ae597a3c1dbe647cea58f000cf2178", "filename": "src/test/ui/proc-macro/auxiliary/derive-a-b.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-a-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-a-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-a-b.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,17 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_derive(A)]\n-pub fn derive_a(_: TokenStream) -> TokenStream {\n-    \"\".parse().unwrap()\n-}\n-\n-#[proc_macro_derive(B)]\n-pub fn derive_b(_: TokenStream) -> TokenStream {\n-    \"\".parse().unwrap()\n-}"}, {"sha": "c9d94aba9f7564391250b152415768affd1ebd9e", "filename": "src/test/ui/proc-macro/auxiliary/derive-a.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-a.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,13 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_derive(A)]\n-pub fn derive_a(input: TokenStream) -> TokenStream {\n-    \"\".parse().unwrap()\n-}"}, {"sha": "ab532da2992247ca5e6a7fb8fe45d79897bedd74", "filename": "src/test/ui/proc-macro/auxiliary/derive-helper-shadowed-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed-2.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,2 +1,2 @@\n #[macro_export]\n-macro_rules! my_attr { () => () }\n+macro_rules! empty_helper { () => () }"}, {"sha": "5b5243dd60ee3b89847a0bddd8c09d0909464648", "filename": "src/test/ui/proc-macro/auxiliary/derive-helper-shadowed.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,12 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-use proc_macro::*;\n-\n-#[proc_macro_derive(MyTrait, attributes(my_attr))]\n-pub fn foo(_: TokenStream) -> TokenStream {\n-    TokenStream::new()\n-}"}, {"sha": "6e0bdcba9c50f11b39a90826b6d9c7aa635859c2", "filename": "src/test/ui/proc-macro/auxiliary/derive-helper-shadowing.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,17 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-use proc_macro::*;\n-\n-#[proc_macro_attribute]\n-pub fn my_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input\n-}\n-\n-#[proc_macro_derive(MyTrait, attributes(my_attr))]\n-pub fn derive(input: TokenStream) -> TokenStream {\n-    TokenStream::new()\n-}"}, {"sha": "e2afa7affa30223fd81dfe2b02f4aa27eb02e443", "filename": "src/test/ui/proc-macro/auxiliary/derive-panic.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,13 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_derive(A)]\n-pub fn derive_a(_input: TokenStream) -> TokenStream {\n-    panic!(\"nope!\");\n-}"}, {"sha": "d5d393b5a6457df34cddb74fd0ad058a1694affa", "filename": "src/test/ui/proc-macro/auxiliary/dollar-crate-external.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate-external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate-external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate-external.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -3,14 +3,14 @@ pub type S = u8;\n #[macro_export]\n macro_rules! external {\n     () => {\n-        dollar_crate::m! {\n+        print_bang! {\n             struct M($crate::S);\n         }\n \n-        #[dollar_crate::a]\n+        #[print_attr]\n         struct A($crate::S);\n \n-        #[derive(dollar_crate::d)]\n+        #[derive(Print)]\n         struct D($crate::S);\n     };\n }"}, {"sha": "c5347d2e81a6b3401df6cc795cd91978f27755b2", "filename": "src/test/ui/proc-macro/auxiliary/dollar-crate.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,35 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-use proc_macro::TokenStream;\n-\n-#[proc_macro]\n-pub fn m_empty(input: TokenStream) -> TokenStream {\n-    println!(\"PROC MACRO INPUT (PRETTY-PRINTED): {}\", input);\n-    println!(\"PROC MACRO INPUT: {:#?}\", input);\n-    TokenStream::new()\n-}\n-\n-#[proc_macro]\n-pub fn m(input: TokenStream) -> TokenStream {\n-    println!(\"PROC MACRO INPUT (PRETTY-PRINTED): {}\", input);\n-    println!(\"PROC MACRO INPUT: {:#?}\", input);\n-    input.into_iter().collect()\n-}\n-\n-#[proc_macro_attribute]\n-pub fn a(_args: TokenStream, input: TokenStream) -> TokenStream {\n-    println!(\"ATTRIBUTE INPUT (PRETTY-PRINTED): {}\", input);\n-    println!(\"ATTRIBUTE INPUT: {:#?}\", input);\n-    input.into_iter().collect()\n-}\n-\n-#[proc_macro_derive(d)]\n-pub fn d(input: TokenStream) -> TokenStream {\n-    println!(\"DERIVE INPUT (PRETTY-PRINTED): {}\", input);\n-    println!(\"DERIVE INPUT: {:#?}\", input);\n-    input.into_iter().collect()\n-}"}, {"sha": "db946e7f331ca706584188335a92ce8a1602f664", "filename": "src/test/ui/proc-macro/auxiliary/issue-41211.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-41211.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,12 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_attribute]\n-pub fn emit_unchanged(_args: TokenStream, input: TokenStream) -> TokenStream {\n-    input\n-}"}, {"sha": "d9f290dec7ef928db64d19dd994a5826300e3b88", "filename": "src/test/ui/proc-macro/auxiliary/issue-53481.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-53481.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-53481.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-53481.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,13 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::*;\n-\n-#[proc_macro_derive(MyTrait, attributes(my_attr))]\n-pub fn foo(_: TokenStream) -> TokenStream {\n-    TokenStream::new()\n-}"}, {"sha": "f2c62ab1b5ef0c8f40e2b27c023e26ec7ff70fd2", "filename": "src/test/ui/proc-macro/auxiliary/macro-brackets.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmacro-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmacro-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmacro-brackets.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,12 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-use proc_macro::*;\n-\n-#[proc_macro_attribute]\n-pub fn doit(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input.into_iter().collect()\n-}"}, {"sha": "8f720b4574dde7b36f3a7bda42140a3f8b5f0f97", "filename": "src/test/ui/proc-macro/auxiliary/nested-item-spans.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-item-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-item-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-item-spans.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,13 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::*;\n-\n-#[proc_macro_attribute]\n-pub fn foo(_: TokenStream, item: TokenStream) -> TokenStream {\n-    item.into_iter().collect()\n-}"}, {"sha": "c7c7167eca0d536d6632f118281a5e3abbfd3f66", "filename": "src/test/ui/proc-macro/auxiliary/proc-macro-gates.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,18 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::*;\n-\n-#[proc_macro]\n-pub fn m(a: TokenStream) -> TokenStream {\n-    a\n-}\n-\n-#[proc_macro_attribute]\n-pub fn a(_a: TokenStream, b: TokenStream) -> TokenStream {\n-    b\n-}"}, {"sha": "33c7968104b72c6be01dfb3f8c1409552804deeb", "filename": "src/test/ui/proc-macro/auxiliary/span-preservation.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fspan-preservation.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,13 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_attribute]\n-pub fn foo(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input.into_iter().collect()\n-}"}, {"sha": "27efa44f980323a5948d336d6e88a788d3bf7959", "filename": "src/test/ui/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 95, "deletions": 9, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,26 +1,112 @@\n // force-host\n // no-prefer-dynamic\n \n+// Proc macros commonly used by tests.\n+// `panic`/`print` -> `panic_bang`/`print_bang` to avoid conflicts with standard macros.\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;\n-\n use proc_macro::TokenStream;\n \n+// Macro that return empty token stream.\n+\n+#[proc_macro]\n+pub fn empty(_: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}\n+\n #[proc_macro_attribute]\n-pub fn nop_attr(_attr: TokenStream, input: TokenStream) -> TokenStream {\n-    assert!(_attr.to_string().is_empty());\n-    input\n+pub fn empty_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}\n+\n+#[proc_macro_derive(Empty, attributes(empty_helper))]\n+pub fn empty_derive(_: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}\n+\n+// Macro that panics.\n+\n+#[proc_macro]\n+pub fn panic_bang(_: TokenStream) -> TokenStream {\n+    panic!(\"panic-bang\");\n }\n \n #[proc_macro_attribute]\n-pub fn no_output(_attr: TokenStream, _input: TokenStream) -> TokenStream {\n-    assert!(_attr.to_string().is_empty());\n-    assert!(!_input.to_string().is_empty());\n-    \"\".parse().unwrap()\n+pub fn panic_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n+    panic!(\"panic-attr\");\n+}\n+\n+#[proc_macro_derive(Panic, attributes(panic_helper))]\n+pub fn panic_derive(_: TokenStream) -> TokenStream {\n+    panic!(\"panic-derive\");\n }\n \n+// Macros that return the input stream.\n+\n #[proc_macro]\n-pub fn emit_input(input: TokenStream) -> TokenStream {\n+pub fn identity(input: TokenStream) -> TokenStream {\n     input\n }\n+\n+#[proc_macro_attribute]\n+pub fn identity_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(Identity, attributes(identity_helper))]\n+pub fn identity_derive(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+// Macros that iterate and re-collect the input stream.\n+\n+#[proc_macro]\n+pub fn recollect(input: TokenStream) -> TokenStream {\n+    input.into_iter().collect()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn recollect_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input.into_iter().collect()\n+}\n+\n+#[proc_macro_derive(Recollect, attributes(recollect_helper))]\n+pub fn recollect_derive(input: TokenStream) -> TokenStream {\n+    input.into_iter().collect()\n+}\n+\n+// Macros that print their input in the original and re-collected forms (if they differ).\n+\n+fn print_helper(input: TokenStream, kind: &str) -> TokenStream {\n+    let input_display = format!(\"{}\", input);\n+    let input_debug = format!(\"{:#?}\", input);\n+    let recollected = input.into_iter().collect();\n+    let recollected_display = format!(\"{}\", recollected);\n+    let recollected_debug = format!(\"{:#?}\", recollected);\n+    println!(\"PRINT-{} INPUT (DISPLAY): {}\", kind, input_display);\n+    if recollected_display != input_display {\n+        println!(\"PRINT-{} RE-COLLECTED (DISPLAY): {}\", kind, recollected_display);\n+    }\n+    println!(\"PRINT-{} INPUT (DEBUG): {}\", kind, input_debug);\n+    if recollected_debug != input_debug {\n+        println!(\"PRINT-{} RE-COLLECTED (DEBUG): {}\", kind, recollected_debug);\n+    }\n+    recollected\n+}\n+\n+#[proc_macro]\n+pub fn print_bang(input: TokenStream) -> TokenStream {\n+    print_helper(input, \"BANG\")\n+}\n+\n+#[proc_macro_attribute]\n+pub fn print_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    print_helper(input, \"ATTR\")\n+}\n+\n+#[proc_macro_derive(Print, attributes(print_helper))]\n+pub fn print_derive(input: TokenStream) -> TokenStream {\n+    print_helper(input, \"DERIVE\")\n+}"}, {"sha": "0388e647b58aad7691f334de67c39ab8202380f8", "filename": "src/test/ui/proc-macro/derive-helper-shadowed.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowed.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,16 +1,16 @@\n // compile-pass\n-// aux-build:derive-helper-shadowed.rs\n+// aux-build:test-macros.rs\n // aux-build:derive-helper-shadowed-2.rs\n \n #[macro_use]\n-extern crate derive_helper_shadowed;\n-#[macro_use(my_attr)]\n+extern crate test_macros;\n+#[macro_use(empty_helper)]\n extern crate derive_helper_shadowed_2;\n \n-macro_rules! my_attr { () => () }\n+macro_rules! empty_helper { () => () }\n \n-#[derive(MyTrait)]\n-#[my_attr] // OK\n+#[derive(Empty)]\n+#[empty_helper] // OK\n struct S;\n \n fn main() {}"}, {"sha": "cdc0d6da94695c018f3752c1248b911d699606ac", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,23 +1,25 @@\n-// aux-build:derive-helper-shadowing.rs\n+// aux-build:test-macros.rs\n \n-extern crate derive_helper_shadowing;\n-use derive_helper_shadowing::*;\n+#[macro_use]\n+extern crate test_macros;\n \n-#[my_attr] //~ ERROR `my_attr` is ambiguous\n-#[derive(MyTrait)]\n+use test_macros::empty_attr as empty_helper;\n+\n+#[empty_helper] //~ ERROR `empty_helper` is ambiguous\n+#[derive(Empty)]\n struct S {\n     // FIXME No ambiguity, attributes in non-macro positions are not resolved properly\n-    #[my_attr]\n+    #[empty_helper]\n     field: [u8; {\n         // FIXME No ambiguity, derive helpers are not put into scope for non-attributes\n-        use my_attr;\n+        use empty_helper;\n \n         // FIXME No ambiguity, derive helpers are not put into scope for inner items\n-        #[my_attr]\n+        #[empty_helper]\n         struct U;\n \n         mod inner {\n-            #[my_attr] //~ ERROR attribute `my_attr` is currently unknown\n+            #[empty_helper] //~ ERROR attribute `empty_helper` is currently unknown\n             struct V;\n         }\n "}, {"sha": "ed6d30516562d5e50f17a425b385fed724776ad6", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,29 +1,29 @@\n-error[E0658]: The attribute `my_attr` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/derive-helper-shadowing.rs:20:15\n+error[E0658]: The attribute `empty_helper` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/derive-helper-shadowing.rs:22:15\n    |\n-LL |             #[my_attr]\n-   |               ^^^^^^^\n+LL |             #[empty_helper]\n+   |               ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0659]: `my_attr` is ambiguous (derive helper attribute vs any other name)\n-  --> $DIR/derive-helper-shadowing.rs:6:3\n+error[E0659]: `empty_helper` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/derive-helper-shadowing.rs:8:3\n    |\n-LL | #[my_attr]\n-   |   ^^^^^^^ ambiguous name\n+LL | #[empty_helper]\n+   |   ^^^^^^^^^^^^ ambiguous name\n    |\n-note: `my_attr` could refer to the derive helper attribute defined here\n-  --> $DIR/derive-helper-shadowing.rs:7:10\n+note: `empty_helper` could refer to the derive helper attribute defined here\n+  --> $DIR/derive-helper-shadowing.rs:9:10\n    |\n-LL | #[derive(MyTrait)]\n-   |          ^^^^^^^\n-note: `my_attr` could also refer to the attribute macro imported here\n-  --> $DIR/derive-helper-shadowing.rs:4:5\n+LL | #[derive(Empty)]\n+   |          ^^^^^\n+note: `empty_helper` could also refer to the attribute macro imported here\n+  --> $DIR/derive-helper-shadowing.rs:6:5\n    |\n-LL | use derive_helper_shadowing::*;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: use `crate::my_attr` to refer to this attribute macro unambiguously\n+LL | use test_macros::empty_attr as empty_helper;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e6b91324f95d0828856413fdad655d189c17e9d3", "filename": "src/test/ui/proc-macro/derive-in-mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-in-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-in-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-in-mod.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -0,0 +1,13 @@\n+// compile-pass\n+// aux-build:test-macros.rs\n+\n+extern crate test_macros;\n+\n+mod inner {\n+    use test_macros::Empty;\n+\n+    #[derive(Empty)]\n+    struct S;\n+}\n+\n+fn main() {}"}, {"sha": "d895d26f26763385c630034d1fe31ecfba78bdb6", "filename": "src/test/ui/proc-macro/derive-still-gated.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-still-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-still-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-still-gated.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,11 +1,9 @@\n-// aux-build:derive-a.rs\n-\n-#![allow(warnings)]\n+// aux-build:test-macros.rs\n \n #[macro_use]\n-extern crate derive_a;\n+extern crate test_macros;\n \n-#[derive_A] //~ ERROR attribute `derive_A` is currently unknown\n+#[derive_Empty] //~ ERROR attribute `derive_Empty` is currently unknown\n struct A;\n \n fn main() {}"}, {"sha": "f299b5abdbc6be5d14a2e173593d78d4106be627", "filename": "src/test/ui/proc-macro/derive-still-gated.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-still-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fderive-still-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-still-gated.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: The attribute `derive_A` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/derive-still-gated.rs:8:3\n+error[E0658]: The attribute `derive_Empty` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/derive-still-gated.rs:6:3\n    |\n-LL | #[derive_A]\n-   |   ^^^^^^^^ help: a built-in attribute with a similar name exists: `derive`\n+LL | #[derive_Empty]\n+   |   ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable"}, {"sha": "2615db3e119f1366d9495631ba1a2e55f42c9fb1", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,22 +1,23 @@\n // compile-pass\n // edition:2018\n-// aux-build:dollar-crate.rs\n+// aux-build:test-macros.rs\n \n // Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n // normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n // normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n \n-extern crate dollar_crate;\n+#[macro_use]\n+extern crate test_macros;\n \n type S = u8;\n \n macro_rules! m {\n     () => {\n-        dollar_crate::m_empty! {\n+        print_bang! {\n             struct M($crate::S);\n         }\n \n-        #[dollar_crate::a]\n+        #[print_attr]\n         struct A($crate::S);\n     };\n }"}, {"sha": "0611fcb13f267dc17f471345ce1976df45be51b0", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,5 +1,5 @@\n-PROC MACRO INPUT (PRETTY-PRINTED): struct M ( $crate :: S ) ;\n-PROC MACRO INPUT: TokenStream [\n+PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n         span: #2 bytes(LO..HI),\n@@ -38,8 +38,9 @@ PROC MACRO INPUT: TokenStream [\n         span: #2 bytes(LO..HI),\n     },\n ]\n-ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(crate::S);\n-ATTRIBUTE INPUT: TokenStream [\n+PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n         span: #2 bytes(LO..HI),"}, {"sha": "aadd87ffaf203e86d9af6bc23ebbc1c0058f3822", "filename": "src/test/ui/proc-macro/dollar-crate.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,29 +1,28 @@\n // edition:2018\n-// aux-build:dollar-crate.rs\n+// aux-build:test-macros.rs\n // aux-build:dollar-crate-external.rs\n \n // Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n // normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n // normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n \n-extern crate dollar_crate;\n+#[macro_use]\n+extern crate test_macros;\n extern crate dollar_crate_external;\n \n type S = u8;\n \n mod local {\n-    use crate::dollar_crate;\n-\n     macro_rules! local {\n         () => {\n-            dollar_crate::m! {\n+            print_bang! {\n                 struct M($crate::S);\n             }\n \n-            #[dollar_crate::a]\n+            #[print_attr]\n             struct A($crate::S);\n \n-            #[derive(dollar_crate::d)]\n+            #[derive(Print)]\n             struct D($crate::S); //~ ERROR the name `D` is defined multiple times\n         };\n     }"}, {"sha": "5d78a8e1987292fa1cbd1149f10989a29b28e5b9", "filename": "src/test/ui/proc-macro/dollar-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,5 +1,5 @@\n error[E0428]: the name `D` is defined multiple times\n-  --> $DIR/dollar-crate.rs:27:13\n+  --> $DIR/dollar-crate.rs:26:13\n    |\n LL |             struct D($crate::S);\n    |             ^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ LL |     local!();\n    = note: `D` must be defined only once in the type namespace of this module\n \n error[E0428]: the name `D` is defined multiple times\n-  --> $DIR/dollar-crate.rs:37:5\n+  --> $DIR/dollar-crate.rs:36:5\n    |\n LL |     dollar_crate_external::external!();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3c88ee99842a26e27f2e717fc08ce453e0372c4d", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,5 +1,5 @@\n-PROC MACRO INPUT (PRETTY-PRINTED): struct M ( $crate :: S ) ;\n-PROC MACRO INPUT: TokenStream [\n+PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n         span: #2 bytes(LO..HI),\n@@ -38,8 +38,9 @@ PROC MACRO INPUT: TokenStream [\n         span: #2 bytes(LO..HI),\n     },\n ]\n-ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(crate::S);\n-ATTRIBUTE INPUT: TokenStream [\n+PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n         span: #2 bytes(LO..HI),\n@@ -78,8 +79,9 @@ ATTRIBUTE INPUT: TokenStream [\n         span: #2 bytes(LO..HI),\n     },\n ]\n-DERIVE INPUT (PRETTY-PRINTED): struct D(crate::S);\n-DERIVE INPUT: TokenStream [\n+PRINT-DERIVE INPUT (DISPLAY): struct D(crate::S);\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( $crate :: S ) ;\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n         span: #2 bytes(LO..HI),\n@@ -118,8 +120,8 @@ DERIVE INPUT: TokenStream [\n         span: #2 bytes(LO..HI),\n     },\n ]\n-PROC MACRO INPUT (PRETTY-PRINTED): struct M ( $crate :: S ) ;\n-PROC MACRO INPUT: TokenStream [\n+PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n         span: #10 bytes(LO..HI),\n@@ -158,8 +160,9 @@ PROC MACRO INPUT: TokenStream [\n         span: #10 bytes(LO..HI),\n     },\n ]\n-ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(::dollar_crate_external::S);\n-ATTRIBUTE INPUT: TokenStream [\n+PRINT-ATTR INPUT (DISPLAY): struct A(::dollar_crate_external::S);\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n         span: #10 bytes(LO..HI),\n@@ -198,8 +201,9 @@ ATTRIBUTE INPUT: TokenStream [\n         span: #10 bytes(LO..HI),\n     },\n ]\n-DERIVE INPUT (PRETTY-PRINTED): struct D(::dollar_crate_external::S);\n-DERIVE INPUT: TokenStream [\n+PRINT-DERIVE INPUT (DISPLAY): struct D(::dollar_crate_external::S);\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( $crate :: S ) ;\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n         span: #10 bytes(LO..HI),"}, {"sha": "3a1c56efce8c268f1a307583e2850bab41778f98", "filename": "src/test/ui/proc-macro/helper-attr-blocked-by-import-ambig.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fhelper-attr-blocked-by-import-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fhelper-attr-blocked-by-import-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fhelper-attr-blocked-by-import-ambig.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:test-macros.rs\n+\n+#[macro_use(Empty)]\n+extern crate test_macros;\n+use test_macros::empty_attr as empty_helper;\n+\n+#[derive(Empty)]\n+#[empty_helper] //~ ERROR `empty_helper` is ambiguous\n+struct S;\n+\n+fn main() {}"}, {"sha": "012fb105b128d47b89cc4e6143c43b8fcbba9785", "filename": "src/test/ui/proc-macro/helper-attr-blocked-by-import-ambig.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fhelper-attr-blocked-by-import-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fhelper-attr-blocked-by-import-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fhelper-attr-blocked-by-import-ambig.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -0,0 +1,21 @@\n+error[E0659]: `empty_helper` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/helper-attr-blocked-by-import-ambig.rs:8:3\n+   |\n+LL | #[empty_helper]\n+   |   ^^^^^^^^^^^^ ambiguous name\n+   |\n+note: `empty_helper` could refer to the derive helper attribute defined here\n+  --> $DIR/helper-attr-blocked-by-import-ambig.rs:7:10\n+   |\n+LL | #[derive(Empty)]\n+   |          ^^^^^\n+note: `empty_helper` could also refer to the attribute macro imported here\n+  --> $DIR/helper-attr-blocked-by-import-ambig.rs:5:5\n+   |\n+LL | use test_macros::empty_attr as empty_helper;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "6d3e5ec198d8557d8a0c9b67c7e18db7c2ef930d", "filename": "src/test/ui/proc-macro/helper-attr-blocked-by-import.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fhelper-attr-blocked-by-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fhelper-attr-blocked-by-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fhelper-attr-blocked-by-import.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -0,0 +1,28 @@\n+// compile-pass\n+// aux-build:test-macros.rs\n+\n+#[macro_use(Empty)]\n+extern crate test_macros;\n+\n+use self::one::*;\n+use self::two::*;\n+\n+mod empty_helper {}\n+\n+mod one {\n+    use empty_helper;\n+\n+    #[derive(Empty)]\n+    #[empty_helper]\n+    struct One;\n+}\n+\n+mod two {\n+    use empty_helper;\n+\n+    #[derive(Empty)]\n+    #[empty_helper]\n+    struct Two;\n+}\n+\n+fn main() {}"}, {"sha": "d1b1ff350695f10f2ca5aa63f316e910d549baa6", "filename": "src/test/ui/proc-macro/import.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fimport.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,11 +1,8 @@\n-// aux-build:derive-a.rs\n+// aux-build:test-macros.rs\n \n-#![allow(warnings)]\n+extern crate test_macros;\n \n-#[macro_use]\n-extern crate derive_a;\n-\n-use derive_a::derive_a;\n-//~^ ERROR: unresolved import `derive_a::derive_a`\n+use test_macros::empty_derive;\n+//~^ ERROR: unresolved import `test_macros::empty_derive`\n \n fn main() {}"}, {"sha": "aae621193ab9f3ea329765a7d36729560e88459e", "filename": "src/test/ui/proc-macro/import.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fimport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fimport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fimport.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,8 +1,8 @@\n-error[E0432]: unresolved import `derive_a::derive_a`\n-  --> $DIR/import.rs:8:5\n+error[E0432]: unresolved import `test_macros::empty_derive`\n+  --> $DIR/import.rs:5:5\n    |\n-LL | use derive_a::derive_a;\n-   |     ^^^^^^^^^^^^^^^^^^ no `derive_a` in the root\n+LL | use test_macros::empty_derive;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `empty_derive` in the root\n \n error: aborting due to previous error\n "}, {"sha": "f809592d5f449c280902c85f07e4289822d3def6", "filename": "src/test/ui/proc-macro/issue-36935.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:test-macros.rs\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[derive(Identity, Panic)] //~ ERROR proc-macro derive panicked\n+struct Baz {\n+    a: i32,\n+    b: i32,\n+}\n+\n+fn main() {}"}, {"sha": "da4366eb668d64d672139c7bd93c8440080c3816", "filename": "src/test/ui/proc-macro/issue-36935.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-36935.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -0,0 +1,10 @@\n+error: proc-macro derive panicked\n+  --> $DIR/issue-36935.rs:6:20\n+   |\n+LL | #[derive(Identity, Panic)]\n+   |                    ^^^^^\n+   |\n+   = help: message: panic-derive\n+\n+error: aborting due to previous error\n+"}, {"sha": "73b1f0d58c8371a5f6599204af953e51d0953117", "filename": "src/test/ui/proc-macro/issue-37788.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,7 +1,7 @@\n-// aux-build:derive-a-b.rs\n+// aux-build:test-macros.rs\n \n #[macro_use]\n-extern crate derive_a_b;\n+extern crate test_macros;\n \n fn main() {\n     // Test that constructing the `visible_parent_map` (in `cstore_impl.rs`) does not ICE."}, {"sha": "ee9246e1c9b5cf25b24b106b46696e4dd4164022", "filename": "src/test/ui/proc-macro/issue-41211.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,14 +1,14 @@\n-// aux-build:issue-41211.rs\n+// aux-build:test-macros.rs\n \n // FIXME: https://github.com/rust-lang/rust/issues/41430\n // This is a temporary regression test for the ICE reported in #41211\n \n #![feature(custom_inner_attributes)]\n \n-#![emit_unchanged]\n-//~^ ERROR attribute `emit_unchanged` is currently unknown to the compiler\n+#![identity_attr]\n+//~^ ERROR attribute `identity_attr` is currently unknown to the compiler\n //~| ERROR inconsistent resolution for a macro: first custom attribute, then attribute macro\n-extern crate issue_41211;\n-use issue_41211::emit_unchanged;\n+extern crate test_macros;\n+use test_macros::identity_attr;\n \n fn main() {}"}, {"sha": "1de6b293ecfb8601633338a52fcd2f2538355a45", "filename": "src/test/ui/proc-macro/issue-41211.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,17 +1,17 @@\n-error[E0658]: The attribute `emit_unchanged` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: The attribute `identity_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/issue-41211.rs:8:4\n    |\n-LL | #![emit_unchanged]\n-   |    ^^^^^^^^^^^^^^\n+LL | #![identity_attr]\n+   |    ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: inconsistent resolution for a macro: first custom attribute, then attribute macro\n   --> $DIR/issue-41211.rs:8:4\n    |\n-LL | #![emit_unchanged]\n-   |    ^^^^^^^^^^^^^^\n+LL | #![identity_attr]\n+   |    ^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2fbde5fedb95b7527c9157f61a62fdeb6935b524", "filename": "src/test/ui/proc-macro/issue-53481.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-53481.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-53481.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-53481.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,21 +1,21 @@\n // compile-pass\n-// aux-build:issue-53481.rs\n+// aux-build:test-macros.rs\n \n #[macro_use]\n-extern crate issue_53481;\n+extern crate test_macros;\n \n mod m1 {\n-    use m2::MyTrait;\n+    use m2::Empty;\n \n-    #[derive(MyTrait)]\n+    #[derive(Empty)]\n     struct A {}\n }\n \n mod m2 {\n-    pub type MyTrait = u8;\n+    pub type Empty = u8;\n \n-    #[derive(MyTrait)]\n-    #[my_attr]\n+    #[derive(Empty)]\n+    #[empty_helper]\n     struct B {}\n }\n "}, {"sha": "2e9a311d882bd3019f107d6e11a4a28b1546e0bf", "filename": "src/test/ui/proc-macro/load-panic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,10 +1,9 @@\n-// aux-build:derive-panic.rs\n-// compile-flags:--error-format human\n+// aux-build:test-macros.rs\n \n #[macro_use]\n-extern crate derive_panic;\n+extern crate test_macros;\n \n-#[derive(A)]\n+#[derive(Panic)]\n //~^ ERROR: proc-macro derive panicked\n struct Foo;\n "}, {"sha": "40cc4ee0e3d373246c2f41583dd90472b567e13d", "filename": "src/test/ui/proc-macro/load-panic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,10 +1,10 @@\n error: proc-macro derive panicked\n-  --> $DIR/load-panic.rs:7:10\n+  --> $DIR/load-panic.rs:6:10\n    |\n-LL | #[derive(A)]\n-   |          ^\n+LL | #[derive(Panic)]\n+   |          ^^^^^\n    |\n-   = help: message: nope!\n+   = help: message: panic-derive\n \n error: aborting due to previous error\n "}, {"sha": "aa0046f458229caeb5b6b58a7538a3b364017d8b", "filename": "src/test/ui/proc-macro/macro-brackets.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,13 +1,13 @@\n-// aux-build:macro-brackets.rs\n+// aux-build:test-macros.rs\n \n-extern crate macro_brackets as bar;\n-use bar::doit;\n+#[macro_use]\n+extern crate test_macros;\n \n macro_rules! id {\n     ($($t:tt)*) => ($($t)*)\n }\n \n-#[doit]\n+#[identity_attr]\n id![static X: u32 = 'a';]; //~ ERROR: mismatched types\n \n "}, {"sha": "d1b1430fb5d034f5effb78dc6a711cfec95c0ddc", "filename": "src/test/ui/proc-macro/macro-use-attr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-attr.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,9 +1,10 @@\n // compile-pass\n-// aux-build:attr_proc_macro.rs\n+// aux-build:test-macros.rs\n \n-#[macro_use] extern crate attr_proc_macro;\n+#[macro_use]\n+extern crate test_macros;\n \n-#[attr_proc_macro]\n+#[identity_attr]\n struct Foo;\n \n fn main() {"}, {"sha": "d39c42267fb96003d48941acaf05efdffe98c475", "filename": "src/test/ui/proc-macro/macro-use-bang.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-bang.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,11 +1,11 @@\n // compile-pass\n-// aux-build:bang_proc_macro.rs\n+// aux-build:test-macros.rs\n \n #![feature(proc_macro_hygiene)]\n \n #[macro_use]\n-extern crate bang_proc_macro;\n+extern crate test_macros;\n \n fn main() {\n-    bang_proc_macro!(println!(\"Hello, world!\"));\n+    identity!(println!(\"Hello, world!\"));\n }"}, {"sha": "0477b5c48ecc9600bf5b67493f2736875d76d1cd", "filename": "src/test/ui/proc-macro/macros-in-extern.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,25 +1,24 @@\n // aux-build:test-macros.rs\n // ignore-wasm32\n \n+#[macro_use]\n extern crate test_macros;\n \n-use test_macros::{nop_attr, no_output, emit_input};\n-\n fn main() {\n     assert_eq!(unsafe { rust_get_test_int() }, 0isize);\n     assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEF);\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n-    #[no_output]\n+    #[empty_attr]\n     //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     fn some_definitely_unknown_symbol_which_should_be_removed();\n \n-    #[nop_attr]\n+    #[identity_attr]\n     //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     fn rust_get_test_int() -> isize;\n \n-    emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n+    identity!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n     //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }"}, {"sha": "592c91553aa8cf6972a4100408365699bf9c0e8a", "filename": "src/test/ui/proc-macro/macros-in-extern.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,26 +1,26 @@\n error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/macros-in-extern.rs:15:5\n+  --> $DIR/macros-in-extern.rs:14:5\n    |\n-LL |     #[no_output]\n-   |     ^^^^^^^^^^^^\n+LL |     #[empty_attr]\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/macros-in-extern.rs:19:5\n+  --> $DIR/macros-in-extern.rs:18:5\n    |\n-LL |     #[nop_attr]\n-   |     ^^^^^^^^^^^\n+LL |     #[identity_attr]\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/macros-in-extern.rs:23:5\n+  --> $DIR/macros-in-extern.rs:22:5\n    |\n-LL |     emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     identity!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable"}, {"sha": "63da170d0bbb263c130eccc5502cc5373e80886e", "filename": "src/test/ui/proc-macro/nested-item-spans.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,10 +1,9 @@\n-// aux-build:nested-item-spans.rs\n+// aux-build:test-macros.rs\n \n-extern crate nested_item_spans;\n+#[macro_use]\n+extern crate test_macros;\n \n-use nested_item_spans::foo;\n-\n-#[foo]\n+#[recollect_attr]\n fn another() {\n     fn bar() {\n         let x: u32 = \"x\"; //~ ERROR: mismatched types\n@@ -14,7 +13,7 @@ fn another() {\n }\n \n fn main() {\n-    #[foo]\n+    #[recollect_attr]\n     fn bar() {\n         let x: u32 = \"x\"; //~ ERROR: mismatched types\n     }"}, {"sha": "bef80311f38e5fa5f85c44b619d758ce975fba0f", "filename": "src/test/ui/proc-macro/nested-item-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/nested-item-spans.rs:10:22\n+  --> $DIR/nested-item-spans.rs:9:22\n    |\n LL |         let x: u32 = \"x\";\n    |                      ^^^ expected u32, found reference\n@@ -8,7 +8,7 @@ LL |         let x: u32 = \"x\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/nested-item-spans.rs:19:22\n+  --> $DIR/nested-item-spans.rs:18:22\n    |\n LL |         let x: u32 = \"x\";\n    |                      ^^^ expected u32, found reference"}, {"sha": "15ab431fe754af5576fbaf600ba08e8635b649f0", "filename": "src/test/ui/proc-macro/no-macro-use-attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,9 +1,9 @@\n-// aux-build:derive-a.rs\n+// aux-build:test-macros.rs\n \n #![feature(rustc_attrs)]\n #![warn(unused_extern_crates)]\n \n-extern crate derive_a;\n+extern crate test_macros;\n //~^ WARN unused extern crate\n \n #[rustc_error]"}, {"sha": "87487bcc7d6627526ecf15dcf57366d613c5a4ed", "filename": "src/test/ui/proc-macro/no-macro-use-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,8 +1,8 @@\n warning: unused extern crate\n   --> $DIR/no-macro-use-attr.rs:6:1\n    |\n-LL | extern crate derive_a;\n-   | ^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL | extern crate test_macros;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n   --> $DIR/no-macro-use-attr.rs:4:9"}, {"sha": "678dc83b753b5f7b5143b846833c62c37698b4d9", "filename": "src/test/ui/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,61 +1,62 @@\n-// aux-build:proc-macro-gates.rs\n+// aux-build:test-macros.rs\n // gate-test-proc_macro_hygiene\n \n #![feature(stmt_expr_attributes)]\n \n-extern crate proc_macro_gates as foo;\n-\n-use foo::*;\n+#[macro_use]\n+extern crate test_macros;\n \n fn _test_inner() {\n-    #![a] //~ ERROR: non-builtin inner attributes are unstable\n+    #![empty_attr] //~ ERROR: non-builtin inner attributes are unstable\n }\n \n-#[a] //~ ERROR: custom attributes cannot be applied to modules\n+#[empty_attr] //~ ERROR: custom attributes cannot be applied to modules\n mod _test2 {}\n \n mod _test2_inner {\n-    #![a] //~ ERROR: custom attributes cannot be applied to modules\n+    #![empty_attr] //~ ERROR: custom attributes cannot be applied to modules\n           //~| ERROR: non-builtin inner attributes are unstable\n }\n \n-#[a = \"y\"] //~ ERROR: must only be followed by a delimiter token\n+#[empty_attr = \"y\"] //~ ERROR: must only be followed by a delimiter token\n fn _test3() {}\n \n fn attrs() {\n     // Statement, item\n-    #[a] // OK\n+    #[empty_attr] // OK\n     struct S;\n \n     // Statement, macro\n-    #[a] //~ ERROR: custom attributes cannot be applied to statements\n+    #[empty_attr] //~ ERROR: custom attributes cannot be applied to statements\n     println!();\n \n     // Statement, semi\n-    #[a] //~ ERROR: custom attributes cannot be applied to statements\n+    #[empty_attr] //~ ERROR: custom attributes cannot be applied to statements\n     S;\n \n     // Statement, local\n-    #[a] //~ ERROR: custom attributes cannot be applied to statements\n+    #[empty_attr] //~ ERROR: custom attributes cannot be applied to statements\n     let _x = 2;\n \n     // Expr\n-    let _x = #[a] 2; //~ ERROR: custom attributes cannot be applied to expressions\n+    let _x = #[identity_attr] 2; //~ ERROR: custom attributes cannot be applied to expressions\n \n     // Opt expr\n-    let _x = [#[a] 2]; //~ ERROR: custom attributes cannot be applied to expressions\n+    let _x = [#[identity_attr] 2]; //~ ERROR: custom attributes cannot be applied to expressions\n \n     // Expr macro\n-    let _x = #[a] println!(); //~ ERROR: custom attributes cannot be applied to expressions\n+    let _x = #[identity_attr] println!();\n+    //~^ ERROR: custom attributes cannot be applied to expressions\n }\n \n fn main() {\n-    let _x: m!(u32) = 3; //~ ERROR: procedural macros cannot be expanded to types\n-    if let m!(Some(_x)) = Some(3) {} //~ ERROR: procedural macros cannot be expanded to patterns\n+    let _x: identity!(u32) = 3; //~ ERROR: procedural macros cannot be expanded to types\n+    if let identity!(Some(_x)) = Some(3) {}\n+    //~^ ERROR: procedural macros cannot be expanded to patterns\n \n-    m!(struct S;); //~ ERROR: procedural macros cannot be expanded to statements\n-    m!(let _x = 3;); //~ ERROR: procedural macros cannot be expanded to statements\n+    empty!(struct S;); //~ ERROR: procedural macros cannot be expanded to statements\n+    empty!(let _x = 3;); //~ ERROR: procedural macros cannot be expanded to statements\n \n-    let _x = m!(3); //~ ERROR: procedural macros cannot be expanded to expressions\n-    let _x = [m!(3)]; //~ ERROR: procedural macros cannot be expanded to expressions\n+    let _x = identity!(3); //~ ERROR: procedural macros cannot be expanded to expressions\n+    let _x = [empty!(3)]; //~ ERROR: procedural macros cannot be expanded to expressions\n }"}, {"sha": "f53ad222a036811c09746a32255496ccb8d98dfa", "filename": "src/test/ui/proc-macro/proc-macro-gates.stderr", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,149 +1,149 @@\n error[E0658]: non-builtin inner attributes are unstable\n-  --> $DIR/proc-macro-gates.rs:11:5\n+  --> $DIR/proc-macro-gates.rs:10:5\n    |\n-LL |     #![a]\n-   |     ^^^^^\n+LL |     #![empty_attr]\n+   |     ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54726\n    = help: add #![feature(custom_inner_attributes)] to the crate attributes to enable\n \n error[E0658]: non-builtin inner attributes are unstable\n-  --> $DIR/proc-macro-gates.rs:18:5\n+  --> $DIR/proc-macro-gates.rs:17:5\n    |\n-LL |     #![a]\n-   |     ^^^^^\n+LL |     #![empty_attr]\n+   |     ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54726\n    = help: add #![feature(custom_inner_attributes)] to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to modules\n-  --> $DIR/proc-macro-gates.rs:14:1\n+  --> $DIR/proc-macro-gates.rs:13:1\n    |\n-LL | #[a]\n-   | ^^^^\n+LL | #[empty_attr]\n+   | ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to modules\n-  --> $DIR/proc-macro-gates.rs:18:5\n+  --> $DIR/proc-macro-gates.rs:17:5\n    |\n-LL |     #![a]\n-   |     ^^^^^\n+LL |     #![empty_attr]\n+   |     ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error: custom attribute invocations must be of the form #[foo] or #[foo(..)], the macro name must only be followed by a delimiter token\n-  --> $DIR/proc-macro-gates.rs:22:1\n+  --> $DIR/proc-macro-gates.rs:21:1\n    |\n-LL | #[a = \"y\"]\n-   | ^^^^^^^^^^\n+LL | #[empty_attr = \"y\"]\n+   | ^^^^^^^^^^^^^^^^^^^\n \n error[E0658]: custom attributes cannot be applied to statements\n-  --> $DIR/proc-macro-gates.rs:31:5\n+  --> $DIR/proc-macro-gates.rs:30:5\n    |\n-LL |     #[a]\n-   |     ^^^^\n+LL |     #[empty_attr]\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to statements\n-  --> $DIR/proc-macro-gates.rs:35:5\n+  --> $DIR/proc-macro-gates.rs:34:5\n    |\n-LL |     #[a]\n-   |     ^^^^\n+LL |     #[empty_attr]\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to statements\n-  --> $DIR/proc-macro-gates.rs:39:5\n+  --> $DIR/proc-macro-gates.rs:38:5\n    |\n-LL |     #[a]\n-   |     ^^^^\n+LL |     #[empty_attr]\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to expressions\n-  --> $DIR/proc-macro-gates.rs:43:14\n+  --> $DIR/proc-macro-gates.rs:42:14\n    |\n-LL |     let _x = #[a] 2;\n-   |              ^^^^\n+LL |     let _x = #[identity_attr] 2;\n+   |              ^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to expressions\n-  --> $DIR/proc-macro-gates.rs:46:15\n+  --> $DIR/proc-macro-gates.rs:45:15\n    |\n-LL |     let _x = [#[a] 2];\n-   |               ^^^^\n+LL |     let _x = [#[identity_attr] 2];\n+   |               ^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to expressions\n-  --> $DIR/proc-macro-gates.rs:49:14\n+  --> $DIR/proc-macro-gates.rs:48:14\n    |\n-LL |     let _x = #[a] println!();\n-   |              ^^^^\n+LL |     let _x = #[identity_attr] println!();\n+   |              ^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to types\n   --> $DIR/proc-macro-gates.rs:53:13\n    |\n-LL |     let _x: m!(u32) = 3;\n-   |             ^^^^^^^\n+LL |     let _x: identity!(u32) = 3;\n+   |             ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to patterns\n   --> $DIR/proc-macro-gates.rs:54:12\n    |\n-LL |     if let m!(Some(_x)) = Some(3) {}\n-   |            ^^^^^^^^^^^^\n+LL |     if let identity!(Some(_x)) = Some(3) {}\n+   |            ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to statements\n-  --> $DIR/proc-macro-gates.rs:56:5\n+  --> $DIR/proc-macro-gates.rs:57:5\n    |\n-LL |     m!(struct S;);\n-   |     ^^^^^^^^^^^^^^\n+LL |     empty!(struct S;);\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to statements\n-  --> $DIR/proc-macro-gates.rs:57:5\n+  --> $DIR/proc-macro-gates.rs:58:5\n    |\n-LL |     m!(let _x = 3;);\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     empty!(let _x = 3;);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to expressions\n-  --> $DIR/proc-macro-gates.rs:59:14\n+  --> $DIR/proc-macro-gates.rs:60:14\n    |\n-LL |     let _x = m!(3);\n-   |              ^^^^^\n+LL |     let _x = identity!(3);\n+   |              ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to expressions\n-  --> $DIR/proc-macro-gates.rs:60:15\n+  --> $DIR/proc-macro-gates.rs:61:15\n    |\n-LL |     let _x = [m!(3)];\n-   |               ^^^^^\n+LL |     let _x = [empty!(3)];\n+   |               ^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable"}, {"sha": "35d7fc8042a3d838038b13df0ebf02893069e0a1", "filename": "src/test/ui/proc-macro/proc-macro-gates2.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,21 +1,20 @@\n-// aux-build:proc-macro-gates.rs\n+// aux-build:test-macros.rs\n \n #![feature(stmt_expr_attributes)]\n \n-extern crate proc_macro_gates as foo;\n-\n-use foo::*;\n+#[macro_use]\n+extern crate test_macros;\n \n // NB. these errors aren't the best errors right now, but they're definitely\n // intended to be errors. Somehow using a custom attribute in these positions\n // should either require a feature gate or not be allowed on stable.\n \n-fn _test6<#[a] T>() {}\n+fn _test6<#[empty_attr] T>() {}\n //~^ ERROR: unknown to the compiler\n \n fn _test7() {\n     match 1 {\n-        #[a] //~ ERROR: unknown to the compiler\n+        #[empty_attr] //~ ERROR: unknown to the compiler\n         0 => {}\n         _ => {}\n     }"}, {"sha": "8eeca99ab39849723675650240eed6a9e946d12b", "filename": "src/test/ui/proc-macro/proc-macro-gates2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,17 +1,17 @@\n-error[E0658]: The attribute `a` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/proc-macro-gates2.rs:13:11\n+error[E0658]: The attribute `empty_attr` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-gates2.rs:12:11\n    |\n-LL | fn _test6<#[a] T>() {}\n-   |           ^^^^\n+LL | fn _test6<#[empty_attr] T>() {}\n+   |           ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: The attribute `a` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/proc-macro-gates2.rs:18:9\n+error[E0658]: The attribute `empty_attr` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/proc-macro-gates2.rs:17:9\n    |\n-LL |         #[a]\n-   |         ^^^^\n+LL |         #[empty_attr]\n+   |         ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable"}, {"sha": "82607136f0b6f2d87ee4ff3dc3f6d162ab3ceacc", "filename": "src/test/ui/proc-macro/resolve-error.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,19 +1,17 @@\n // aux-build:derive-foo.rs\n // aux-build:derive-clona.rs\n-// aux-build:attr_proc_macro.rs\n-// aux-build:bang_proc_macro.rs\n+// aux-build:test-macros.rs\n \n #![feature(custom_attribute)]\n \n #[macro_use]\n extern crate derive_foo;\n #[macro_use]\n extern crate derive_clona;\n-extern crate attr_proc_macro;\n-extern crate bang_proc_macro;\n+extern crate test_macros;\n \n-use attr_proc_macro::attr_proc_macro;\n-use bang_proc_macro::bang_proc_macro;\n+use test_macros::empty as bang_proc_macro;\n+use test_macros::empty_attr as attr_proc_macro;\n \n macro_rules! FooWithLongNam {\n     () => {}"}, {"sha": "705ef6006a049929573175538a1497428fab5fd4", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,47 +1,47 @@\n error: cannot find derive macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:26:10\n+  --> $DIR/resolve-error.rs:24:10\n    |\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n \n error: cannot find derive macro `Dlone` in this scope\n-  --> $DIR/resolve-error.rs:36:10\n+  --> $DIR/resolve-error.rs:34:10\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: try: `Clone`\n \n error: cannot find derive macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:40:10\n+  --> $DIR/resolve-error.rs:38:10\n    |\n LL | #[derive(Dlona)]\n    |          ^^^^^ help: try: `Clona`\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:44:10\n+  --> $DIR/resolve-error.rs:42:10\n    |\n LL | #[derive(attr_proc_macra)]\n    |          ^^^^^^^^^^^^^^^\n \n error: cannot find macro `FooWithLongNama!` in this scope\n-  --> $DIR/resolve-error.rs:49:5\n+  --> $DIR/resolve-error.rs:47:5\n    |\n LL |     FooWithLongNama!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam`\n \n error: cannot find macro `attr_proc_macra!` in this scope\n-  --> $DIR/resolve-error.rs:52:5\n+  --> $DIR/resolve-error.rs:50:5\n    |\n LL |     attr_proc_macra!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac`\n \n error: cannot find macro `Dlona!` in this scope\n-  --> $DIR/resolve-error.rs:55:5\n+  --> $DIR/resolve-error.rs:53:5\n    |\n LL |     Dlona!();\n    |     ^^^^^\n \n error: cannot find macro `bang_proc_macrp!` in this scope\n-  --> $DIR/resolve-error.rs:58:5\n+  --> $DIR/resolve-error.rs:56:5\n    |\n LL |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro`"}, {"sha": "61959594c7981b3c6386ce30916d06f58f16e943", "filename": "src/test/ui/proc-macro/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,8 +1,8 @@\n-// aux-build:derive-a.rs\n+// aux-build:test-macros.rs\n \n #[macro_use]\n-extern crate derive_a;\n+extern crate test_macros;\n #[macro_use]\n-extern crate derive_a; //~ ERROR the name `derive_a` is defined multiple times\n+extern crate test_macros; //~ ERROR the name `test_macros` is defined multiple times\n \n fn main() {}"}, {"sha": "e7d95cc8358117d0c24f480b3cba9b40758845d3", "filename": "src/test/ui/proc-macro/shadow.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fshadow.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,13 +1,13 @@\n-error[E0259]: the name `derive_a` is defined multiple times\n+error[E0259]: the name `test_macros` is defined multiple times\n   --> $DIR/shadow.rs:6:1\n    |\n-LL | extern crate derive_a;\n-   | ---------------------- previous import of the extern crate `derive_a` here\n+LL | extern crate test_macros;\n+   | ------------------------- previous import of the extern crate `test_macros` here\n LL | #[macro_use]\n-LL | extern crate derive_a;\n-   | ^^^^^^^^^^^^^^^^^^^^^^ `derive_a` reimported here\n+LL | extern crate test_macros;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ `test_macros` reimported here\n    |\n-   = note: `derive_a` must be defined only once in the type namespace of this module\n+   = note: `test_macros` must be defined only once in the type namespace of this module\n \n error: aborting due to previous error\n "}, {"sha": "0a82d28e9e544f830964545c26fc85348233effd", "filename": "src/test/ui/proc-macro/span-preservation.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -1,27 +1,26 @@\n //~ ERROR mismatched types\n-// aux-build:span-preservation.rs\n+// aux-build:test-macros.rs\n \n // For each of these, we should get the appropriate type mismatch error message,\n // and the function should be echoed.\n \n-extern crate span_preservation as foo;\n+#[macro_use]\n+extern crate test_macros;\n \n-use foo::foo;\n-\n-#[foo]\n+#[recollect_attr]\n fn a() {\n     let x: usize = \"hello\";;;;; //~ ERROR mismatched types\n }\n \n-#[foo]\n+#[recollect_attr]\n fn b(x: Option<isize>) -> usize {\n     match x {\n         Some(x) => { return x }, //~ ERROR mismatched types\n         None => 10\n     }\n }\n \n-#[foo]\n+#[recollect_attr]\n fn c() {\n     struct Foo {\n         a: usize\n@@ -39,12 +38,12 @@ fn c() {\n // FIXME: This doesn't work at the moment. See the one below. The pretty-printer\n // injects a \"C\" between `extern` and `fn` which causes a \"probably_eq\"\n // `TokenStream` mismatch. The lack of `\"C\"` should be preserved in the AST.\n-#[foo]\n+#[recollect_attr]\n extern fn bar() {\n     0\n }\n \n-#[foo]\n+#[recollect_attr]\n extern \"C\" fn baz() {\n     0 //~ ERROR mismatched types\n }"}, {"sha": "cf03deee7e44554dd2003cfe1a7a723f156c8f01", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe9080ea023927f2a047a3b23ec579188c63b7d/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=bfe9080ea023927f2a047a3b23ec579188c63b7d", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:13:20\n+  --> $DIR/span-preservation.rs:12:20\n    |\n LL |     let x: usize = \"hello\";;;;;\n    |                    ^^^^^^^ expected usize, found reference\n@@ -13,7 +13,7 @@ LL |     let x: usize = \"hello\";;;;;\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:19:29\n+  --> $DIR/span-preservation.rs:18:29\n    |\n LL | fn b(x: Option<isize>) -> usize {\n    |                           ----- expected `usize` because of return type\n@@ -22,21 +22,21 @@ LL |         Some(x) => { return x },\n    |                             ^ expected usize, found isize\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:35:22\n+  --> $DIR/span-preservation.rs:34:22\n    |\n LL |     let x = Foo { a: 10isize };\n    |                      ^^^^^^^ expected usize, found isize\n \n error[E0560]: struct `c::Foo` has no field named `b`\n-  --> $DIR/span-preservation.rs:36:26\n+  --> $DIR/span-preservation.rs:35:26\n    |\n LL |     let y = Foo { a: 10, b: 10isize };\n    |                          ^ `c::Foo` does not have this field\n    |\n    = note: available fields are: `a`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:49:5\n+  --> $DIR/span-preservation.rs:48:5\n    |\n LL | extern \"C\" fn baz() {\n    |                     - possibly return type missing here?"}]}