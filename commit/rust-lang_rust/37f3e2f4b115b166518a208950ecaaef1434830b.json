{"sha": "37f3e2f4b115b166518a208950ecaaef1434830b", "node_id": "C_kwDOAAsO6NoAKDM3ZjNlMmY0YjExNWIxNjY1MThhMjA4OTUwZWNhYWVmMTQzNDgzMGI", "commit": {"author": {"name": "Charisee", "email": "chiw@google.com", "date": "2023-05-05T19:47:00Z"}, "committer": {"name": "Charisee", "email": "chiw@google.com", "date": "2023-05-05T19:47:00Z"}, "message": "rewriting match on endianness", "tree": {"sha": "611514eca435a62322e6a7cb2376b9e3dabeee09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611514eca435a62322e6a7cb2376b9e3dabeee09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f3e2f4b115b166518a208950ecaaef1434830b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f3e2f4b115b166518a208950ecaaef1434830b", "html_url": "https://github.com/rust-lang/rust/commit/37f3e2f4b115b166518a208950ecaaef1434830b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f3e2f4b115b166518a208950ecaaef1434830b/comments", "author": null, "committer": null, "parents": [{"sha": "1fc0442f7e6eaf0848ceb7230df9fe03d4e6630d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc0442f7e6eaf0848ceb7230df9fe03d4e6630d", "html_url": "https://github.com/rust-lang/rust/commit/1fc0442f7e6eaf0848ceb7230df9fe03d4e6630d"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "8968133bac5ba0cdf55b31f1d203736a146b7ef7", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37f3e2f4b115b166518a208950ecaaef1434830b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f3e2f4b115b166518a208950ecaaef1434830b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=37f3e2f4b115b166518a208950ecaaef1434830b", "patch": "@@ -123,11 +123,6 @@ fn add_gnu_property_note(\n             Endianness::Big => v.to_be_bytes(),\n         })\n     });\n-    /*\n-    match endianness {\n-        Endianness::Little => header_values.map(|v| data.extend_from_slice(&(v.to_le_bytes()))),\n-        Endianness::Big => header_values.map(|v| data.extend_from_slice(&(v.to_be_bytes()))),\n-    };*/\n     data.extend_from_slice(b\"GNU\\0\"); // Owner of the program property note\n     let pr_type: u32 = match architecture {\n         Architecture::X86_64 => 0xc0000002,\n@@ -138,10 +133,12 @@ fn add_gnu_property_note(\n     let pr_data: u32 = 3; //program property descriptor\n     let pr_padding: u32 = 0;\n     let property_values = [pr_type, pr_datasz, pr_data, pr_padding];\n-    match endianness {\n-        Endianness::Little => property_values.map(|v| data.extend_from_slice(&(v.to_le_bytes()))),\n-        Endianness::Big => property_values.map(|v| data.extend_from_slice(&(v.to_be_bytes()))),\n-    };\n+    property_values.iter().for_each(|v| {\n+        data.extend_from_slice(&match endianness {\n+            Endianness::Little => v.to_le_bytes(),\n+            Endianness::Big => v.to_be_bytes(),\n+        })\n+    });\n     file.append_section_data(section, &data, 8);\n }\n "}]}