{"sha": "938897e2e429445dca5a549b5d4eb194a291a7c2", "node_id": "C_kwDOAAsO6NoAKDkzODg5N2UyZTQyOTQ0NWRjYTVhNTQ5YjVkNGViMTk0YTI5MWE3YzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-02T16:21:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-02T16:21:58Z"}, "message": "Rollup merge of #100121 - Nilstrieb:mir-validator-param-env, r=oli-obk\n\nTry normalizing types without RevealAll in ParamEnv in MIR validation\n\nBefore, the MIR validator used RevealAll in its ParamEnv for type\nchecking. This could cause false negatives in some cases due to\nRevealAll ParamEnvs not always use all predicates as expected here.\n\nSince some MIR passes like inlining use RevealAll as well, keep using\nit in the MIR validator too, but when it fails usign RevealAll, also\ntry the check without it, to stop false negatives.\n\nFixes #99866\n\ncc ````````@compiler-errors```````` who nicely helped me on zulip", "tree": {"sha": "b8183ee6ccaa30a69ca70623e6724b3ba67e9d0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8183ee6ccaa30a69ca70623e6724b3ba67e9d0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/938897e2e429445dca5a549b5d4eb194a291a7c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEi2mCRBK7hj4Ov3rIwAABoAIAGkKuysQfFgJDswwuigLn7L5\nyLTWy6wEsyzEsYopVKXWwRY347ZtRTlhk6nkJO6ChFtezBwftOoAZsat53fC+6wD\nLMQuGcFlrC4F7q7mdrgfdvPKfmjObNotrs86TwZM+ZBsG2ffoQa5jBiv0IBIXcWU\nLmiJaJPq/MEo1wt6Rccas7R0E/lPhcW1GhbLk+BvOvt4mdXX6YJN75nS9XUrQGRK\n3OkrAIkdaPxPTjoMoeB1X8qbkYnUO70TpFzvvOZwqkhPZ9Gp+wIXPDpFo61FNxLo\nCLnOXFON1robL39PQ742wOwksn5C7uD5gNmfi9/H1Ai9okBhN7jjM7ujHf5vCIU=\n=6+Ec\n-----END PGP SIGNATURE-----\n", "payload": "tree b8183ee6ccaa30a69ca70623e6724b3ba67e9d0c\nparent 9353538c7bea6edb245457712cec720305c4576e\nparent 96d4137deed6c52c6db2dd19568c37d1c160f1e7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662135718 +0200\ncommitter GitHub <noreply@github.com> 1662135718 +0200\n\nRollup merge of #100121 - Nilstrieb:mir-validator-param-env, r=oli-obk\n\nTry normalizing types without RevealAll in ParamEnv in MIR validation\n\nBefore, the MIR validator used RevealAll in its ParamEnv for type\nchecking. This could cause false negatives in some cases due to\nRevealAll ParamEnvs not always use all predicates as expected here.\n\nSince some MIR passes like inlining use RevealAll as well, keep using\nit in the MIR validator too, but when it fails usign RevealAll, also\ntry the check without it, to stop false negatives.\n\nFixes #99866\n\ncc ````````@compiler-errors```````` who nicely helped me on zulip\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/938897e2e429445dca5a549b5d4eb194a291a7c2", "html_url": "https://github.com/rust-lang/rust/commit/938897e2e429445dca5a549b5d4eb194a291a7c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/938897e2e429445dca5a549b5d4eb194a291a7c2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9353538c7bea6edb245457712cec720305c4576e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9353538c7bea6edb245457712cec720305c4576e", "html_url": "https://github.com/rust-lang/rust/commit/9353538c7bea6edb245457712cec720305c4576e"}, {"sha": "96d4137deed6c52c6db2dd19568c37d1c160f1e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d4137deed6c52c6db2dd19568c37d1c160f1e7", "html_url": "https://github.com/rust-lang/rust/commit/96d4137deed6c52c6db2dd19568c37d1c160f1e7"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "b798862583952eb5d1604a56750c14850ac8c6ab", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/938897e2e429445dca5a549b5d4eb194a291a7c2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938897e2e429445dca5a549b5d4eb194a291a7c2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=938897e2e429445dca5a549b5d4eb194a291a7c2", "patch": "@@ -181,16 +181,23 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if (src, dest).has_opaque_types() {\n             return true;\n         }\n-        // Normalize projections and things like that.\n-        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n-        let src = self.tcx.normalize_erasing_regions(param_env, src);\n-        let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n \n+        // Normalize projections and things like that.\n         // Type-changing assignments can happen when subtyping is used. While\n         // all normal lifetimes are erased, higher-ranked types with their\n         // late-bound lifetimes are still around and can lead to type\n         // differences. So we compare ignoring lifetimes.\n-        equal_up_to_regions(self.tcx, param_env, src, dest)\n+\n+        // First, try with reveal_all. This might not work in some cases, as the predicates\n+        // can be cleared in reveal_all mode. We try the reveal first anyways as it is used\n+        // by some other passes like inlining as well.\n+        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n+        if equal_up_to_regions(self.tcx, param_env, src, dest) {\n+            return true;\n+        }\n+\n+        // If this fails, we can try it without the reveal.\n+        equal_up_to_regions(self.tcx, self.param_env, src, dest)\n     }\n }\n "}, {"sha": "d39ae6ebf1da2c01191cb995083f5f2e7599543d", "filename": "src/test/ui/mir/issue-99866.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/938897e2e429445dca5a549b5d4eb194a291a7c2/src%2Ftest%2Fui%2Fmir%2Fissue-99866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938897e2e429445dca5a549b5d4eb194a291a7c2/src%2Ftest%2Fui%2Fmir%2Fissue-99866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-99866.rs?ref=938897e2e429445dca5a549b5d4eb194a291a7c2", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+pub trait Backend {\n+    type DescriptorSetLayout;\n+}\n+\n+pub struct Back;\n+\n+impl Backend for Back {\n+    type DescriptorSetLayout = u32;\n+}\n+\n+pub struct HalSetLayouts {\n+    vertex_layout: <Back as Backend>::DescriptorSetLayout,\n+}\n+\n+impl HalSetLayouts {\n+    pub fn iter<DSL>(self) -> DSL\n+    where\n+        Back: Backend<DescriptorSetLayout = DSL>,\n+    {\n+        self.vertex_layout\n+    }\n+}\n+\n+fn main() {}"}]}