{"sha": "6b23d20452ef7c2d2eb79baf074bcda04fad9a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMjNkMjA0NTJlZjdjMmQyZWI3OWJhZjA3NGJjZGEwNGZhZDlhNjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-21T15:39:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-21T16:02:21Z"}, "message": "Prohibit assignment to `&mut` pointers that are found in frozen or borrowed locations.\n\nFixes #8625.", "tree": {"sha": "761f1d4e9cf2ad157af0afa4deb77523e748a602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/761f1d4e9cf2ad157af0afa4deb77523e748a602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b23d20452ef7c2d2eb79baf074bcda04fad9a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b23d20452ef7c2d2eb79baf074bcda04fad9a66", "html_url": "https://github.com/rust-lang/rust/commit/6b23d20452ef7c2d2eb79baf074bcda04fad9a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b23d20452ef7c2d2eb79baf074bcda04fad9a66/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ea2a20397497a33af4d5d602e51cc50a8e15b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea2a20397497a33af4d5d602e51cc50a8e15b4f", "html_url": "https://github.com/rust-lang/rust/commit/0ea2a20397497a33af4d5d602e51cc50a8e15b4f"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "a2529261aafc35b2480355fae226bd7c0a3f2de1", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b23d20452ef7c2d2eb79baf074bcda04fad9a66/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b23d20452ef7c2d2eb79baf074bcda04fad9a66/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=6b23d20452ef7c2d2eb79baf074bcda04fad9a66", "patch": "@@ -496,6 +496,12 @@ impl<'self> CheckLoanCtxt<'self> {\n             // path, and check that the super path was not lent out as\n             // mutable or immutable (a const loan is ok).\n             //\n+            // Mutability of a path can be dependent on the super path\n+            // in two ways. First, it might be inherited mutability.\n+            // Second, the pointee of an `&mut` pointer can only be\n+            // mutated if it is found in an unaliased location, so we\n+            // have to check that the owner location is not borrowed.\n+            //\n             // Note that we are *not* checking for any and all\n             // restrictions.  We are only interested in the pointers\n             // that the user created, whereas we add restrictions for\n@@ -513,9 +519,12 @@ impl<'self> CheckLoanCtxt<'self> {\n             let mut loan_path = loan_path;\n             loop {\n                 match *loan_path {\n-                    // Peel back one layer if `loan_path` has\n-                    // inherited mutability\n-                    LpExtend(lp_base, mc::McInherited, _) => {\n+                    // Peel back one layer if, for `loan_path` to be\n+                    // mutable, `lp_base` must be mutable. This occurs\n+                    // with inherited mutability and with `&mut`\n+                    // pointers.\n+                    LpExtend(lp_base, mc::McInherited, _) |\n+                    LpExtend(lp_base, _, LpDeref(mc::region_ptr(ast::m_mutbl, _))) => {\n                         loan_path = lp_base;\n                     }\n "}, {"sha": "dcef74b6c2bc28aad9e3a0c0be46653b7316d288", "filename": "src/test/compile-fail/borrowck-assign-to-andmut-in-borrowed-loc.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6b23d20452ef7c2d2eb79baf074bcda04fad9a66/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b23d20452ef7c2d2eb79baf074bcda04fad9a66/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs?ref=6b23d20452ef7c2d2eb79baf074bcda04fad9a66", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that assignments to an `&mut` pointer which is found in a\n+// borrowed (but otherwise non-aliasable) location is illegal.\n+\n+struct S<'self> {\n+    pointer: &'self mut int\n+}\n+\n+fn copy_borrowed_ptr<'a>(p: &'a mut S<'a>) -> S<'a> {\n+    S { pointer: &mut *p.pointer }\n+}\n+\n+fn main() {\n+    let mut x = 1;\n+\n+    {\n+        let mut y = S { pointer: &mut x };\n+        let z = copy_borrowed_ptr(&mut y);\n+        *y.pointer += 1; //~ ERROR cannot assign\n+        *z.pointer += 1;\n+    }\n+}"}]}