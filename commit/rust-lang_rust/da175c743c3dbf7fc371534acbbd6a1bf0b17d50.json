{"sha": "da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "node_id": "C_kwDOAAsO6NoAKGRhMTc1Yzc0M2MzZGJmN2ZjMzcxNTM0YWNiYmQ2YTFiZjBiMTdkNTA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T19:25:38Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-29T10:16:09Z"}, "message": "Make lifetime errors more precise in the presence of `Fresh` lifetimes.", "tree": {"sha": "fedc4fe5c4d085482933b40177bbf08c723d869d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fedc4fe5c4d085482933b40177bbf08c723d869d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "html_url": "https://github.com/rust-lang/rust/commit/da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da27078d3b102a1d96dd0a4270baa1bb5f392e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da27078d3b102a1d96dd0a4270baa1bb5f392e2", "html_url": "https://github.com/rust-lang/rust/commit/8da27078d3b102a1d96dd0a4270baa1bb5f392e2"}], "stats": {"total": 480, "additions": 434, "deletions": 46}, "files": [{"sha": "dbe6fe6ea84022e7da78650cdbed48e941d5a419", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -131,6 +131,17 @@ impl LifetimeName {\n         }\n     }\n \n+    pub fn is_anonymous(&self) -> bool {\n+        match *self {\n+            LifetimeName::ImplicitObjectLifetimeDefault\n+            | LifetimeName::Implicit\n+            | LifetimeName::Underscore\n+            | LifetimeName::Param(ParamName::Fresh(_))\n+            | LifetimeName::Error => true,\n+            LifetimeName::Static | LifetimeName::Param(_) => false,\n+        }\n+    }\n+\n     pub fn is_elided(&self) -> bool {\n         match self {\n             LifetimeName::ImplicitObjectLifetimeDefault"}, {"sha": "a2bd11f8b8e3e25592ec4bc38a7109ae1c3b3def", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -72,7 +72,7 @@ use rustc_middle::ty::{\n     subst::{GenericArgKind, Subst, SubstsRef},\n     Binder, EarlyBinder, List, Region, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_span::{sym, BytePos, DesugaringKind, Pos, Span};\n+use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::ops::ControlFlow;\n use std::{cmp, fmt, iter};\n@@ -161,7 +161,12 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n             {\n                 sp = param.span;\n             }\n-            (format!(\"the lifetime `{}` as defined here\", br.name), sp)\n+            let text = if br.name == kw::UnderscoreLifetime {\n+                format!(\"the anonymous lifetime as defined here\")\n+            } else {\n+                format!(\"the lifetime `{}` as defined here\", br.name)\n+            };\n+            (text, sp)\n         }\n         ty::ReFree(ty::FreeRegion {\n             bound_region: ty::BoundRegionKind::BrNamed(_, name), ..\n@@ -172,7 +177,12 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n             {\n                 sp = param.span;\n             }\n-            (format!(\"the lifetime `{}` as defined here\", name), sp)\n+            let text = if name == kw::UnderscoreLifetime {\n+                format!(\"the anonymous lifetime as defined here\")\n+            } else {\n+                format!(\"the lifetime `{}` as defined here\", name)\n+            };\n+            (text, sp)\n         }\n         ty::ReFree(ref fr) => match fr.bound_region {\n             ty::BrAnon(idx) => {"}, {"sha": "b744594ddb7e6b0e6bd2548c5b87c77a22394254", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -12,6 +12,7 @@ use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::{GenericParamKind, Ty};\n use rustc_middle::ty::Region;\n+use rustc_span::symbol::kw;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when both the concerned regions are anonymous.\n@@ -169,7 +170,7 @@ pub fn suggest_adding_lifetime_params<'tcx>(\n         return false;\n     };\n \n-    if !lifetime_sub.name.is_elided() || !lifetime_sup.name.is_elided() {\n+    if !lifetime_sub.name.is_anonymous() || !lifetime_sup.name.is_anonymous() {\n         return false;\n     };\n \n@@ -188,32 +189,37 @@ pub fn suggest_adding_lifetime_params<'tcx>(\n         _ => return false,\n     };\n \n-    let (suggestion_param_name, introduce_new) = generics\n+    let suggestion_param_name = generics\n         .params\n         .iter()\n-        .find(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }))\n-        .and_then(|p| tcx.sess.source_map().span_to_snippet(p.span).ok())\n-        .map(|name| (name, false))\n-        .unwrap_or_else(|| (\"'a\".to_string(), true));\n-\n-    let mut suggestions = vec![\n-        if let hir::LifetimeName::Underscore = lifetime_sub.name {\n-            (lifetime_sub.span, suggestion_param_name.clone())\n+        .filter(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }))\n+        .map(|p| p.name.ident().name)\n+        .find(|i| *i != kw::UnderscoreLifetime);\n+    let introduce_new = suggestion_param_name.is_none();\n+    let suggestion_param_name =\n+        suggestion_param_name.map(|n| n.to_string()).unwrap_or_else(|| \"'a\".to_owned());\n+\n+    debug!(?lifetime_sup.span);\n+    debug!(?lifetime_sub.span);\n+    let make_suggestion = |span: rustc_span::Span| {\n+        if span.is_empty() {\n+            (span, format!(\"{}, \", suggestion_param_name))\n+        } else if let Ok(\"&\") = tcx.sess.source_map().span_to_snippet(span).as_deref() {\n+            (span.shrink_to_hi(), format!(\"{} \", suggestion_param_name))\n         } else {\n-            (lifetime_sub.span.shrink_to_hi(), suggestion_param_name.clone() + \" \")\n-        },\n-        if let hir::LifetimeName::Underscore = lifetime_sup.name {\n-            (lifetime_sup.span, suggestion_param_name.clone())\n-        } else {\n-            (lifetime_sup.span.shrink_to_hi(), suggestion_param_name.clone() + \" \")\n-        },\n-    ];\n+            (span, suggestion_param_name.clone())\n+        }\n+    };\n+    let mut suggestions =\n+        vec![make_suggestion(lifetime_sub.span), make_suggestion(lifetime_sup.span)];\n \n     if introduce_new {\n-        let new_param_suggestion = match &generics.params {\n-            [] => (generics.span, format!(\"<{}>\", suggestion_param_name)),\n-            [first, ..] => (first.span.shrink_to_lo(), format!(\"{}, \", suggestion_param_name)),\n-        };\n+        let new_param_suggestion =\n+            if let Some(first) = generics.params.iter().find(|p| !p.name.ident().span.is_empty()) {\n+                (first.span.shrink_to_lo(), format!(\"{}, \", suggestion_param_name))\n+            } else {\n+                (generics.span, format!(\"<{}>\", suggestion_param_name))\n+            };\n \n         suggestions.push(new_param_suggestion);\n     }"}, {"sha": "375ad8d3736dc2fb2f266956346d42d6d1cfabec", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -4,6 +4,7 @@ use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_middle::ty;\n+use rustc_span::symbol::kw;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with parameters containing a named region and\n@@ -67,7 +68,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let is_impl_item = region_info.is_impl_item;\n \n         match br {\n-            ty::BrAnon(_) => {}\n+            ty::BrNamed(_, kw::UnderscoreLifetime) | ty::BrAnon(_) => {}\n             _ => {\n                 /* not an anonymous region */\n                 debug!(\"try_report_named_anon_conflict: not an anonymous region\");"}, {"sha": "109883fbeb7cb2ca77c1417818c67eee68f780b8", "filename": "src/test/ui/async-await/issue-76547.base.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -5,6 +5,12 @@ LL | async fn fut(bufs: &mut [&mut [u8]]) {\n    |                    ---------------- these two types are declared with different lifetimes...\n LL |     ListFut(bufs).await\n    |             ^^^^ ...but data from `bufs` flows into `bufs` here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | async fn fut<'a>(bufs: &'a mut [&'a mut [u8]]) {\n+   |             ++++        ++       ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/issue-76547.rs:39:14\n@@ -13,6 +19,12 @@ LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n    |                     ---------------- these two types are declared with different lifetimes...\n LL |     ListFut2(bufs).await\n    |              ^^^^ ...but data from `bufs` flows into `bufs` here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | async fn fut2<'a>(bufs: &'a mut [&'a mut [u8]]) -> i32 {\n+   |              ++++        ++       ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0a5a52cb79e4ce06dfb9fde3014505e651207e9a", "filename": "src/test/ui/async-await/issue-76547.nll.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.nll.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,11 @@ LL | async fn fut(bufs: &mut [&mut [u8]]) {\n    |                    let's call the lifetime of this reference `'1`\n LL |     ListFut(bufs).await\n    |             ^^^^ this usage requires that `'1` must outlive `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | async fn fut<'a>(bufs: &'a mut [&'a mut [u8]]) {\n+   |             ++++        ++       ++\n \n error: lifetime may not live long enough\n   --> $DIR/issue-76547.rs:39:14\n@@ -17,6 +22,11 @@ LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n    |                     let's call the lifetime of this reference `'1`\n LL |     ListFut2(bufs).await\n    |              ^^^^ this usage requires that `'1` must outlive `'2`\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | async fn fut2<'a>(bufs: &'a mut [&'a mut [u8]]) -> i32 {\n+   |              ++++        ++       ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f5409a7ca5d29ecd7c9a88a4bbd248d9f8712135", "filename": "src/test/ui/async-await/issues/issue-63388-1.base.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -1,14 +1,12 @@\n-error[E0623]: lifetime mismatch\n+error[E0621]: explicit lifetime required in the type of `foo`\n   --> $DIR/issue-63388-1.rs:19:9\n    |\n LL |         &'a self, foo: &dyn Foo\n-   |                        -------- this parameter and the return type are declared with different lifetimes...\n-LL |     ) -> &dyn Foo\n-   |          --------\n+   |                        -------- help: add explicit lifetime `'a` to the type of `foo`: `&'a (dyn Foo + 'a)`\n ...\n LL |         foo\n-   |         ^^^ ...but data from `foo` is returned here\n+   |         ^^^ lifetime `'a` required\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0623`.\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "9263a81bb6af42c3a4f2e20d3f7f6986548ff7d0", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -1,17 +1,16 @@\n-error: lifetime may not live long enough\n+error[E0621]: explicit lifetime required in the type of `foo`\n   --> $DIR/issue-63388-1.rs:17:5\n    |\n-LL |       async fn do_sth<'a>(\n-   |                       -- lifetime `'a` defined here\n LL |           &'a self, foo: &dyn Foo\n-   |                          - let's call the lifetime of this reference `'1`\n+   |                          -------- help: add explicit lifetime `'a` to the type of `foo`: `&'a (dyn Foo + 'a)`\n LL |       ) -> &dyn Foo\n LL | /     {\n LL | |\n LL | |         foo\n LL | |\n LL | |     }\n-   | |_____^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   | |_____^ lifetime `'a` required\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "f00f92954064095e13e9e4e0a7194b63fafea198", "filename": "src/test/ui/async-await/issues/issue-63388-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -15,9 +15,9 @@ impl Xyz {\n         &'a self, foo: &dyn Foo\n     ) -> &dyn Foo\n     {\n-        //[nll]~^ ERROR lifetime may not live long enough\n+        //[nll]~^ ERROR explicit lifetime required in the type of `foo` [E0621]\n         foo\n-        //[base]~^ ERROR lifetime mismatch\n+        //[base]~^ ERROR explicit lifetime required in the type of `foo` [E0621]\n     }\n }\n "}, {"sha": "de54a417253d406a36d29920a2f6346b1895b6ea", "filename": "src/test/ui/error-codes/E0308-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -6,7 +6,7 @@ LL | impl Eq for &dyn DynEq {}\n    |\n    = note: expected trait `<&dyn DynEq as PartialEq>`\n               found trait `<&(dyn DynEq + 'static) as PartialEq>`\n-note: the lifetime `'_` as defined here...\n+note: the anonymous lifetime as defined here...\n   --> $DIR/E0308-2.rs:9:13\n    |\n LL | impl Eq for &dyn DynEq {}"}, {"sha": "88b5fbec6cf03a860e548461e3c0309ae753db21", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -11,7 +11,7 @@ note: the anonymous lifetime defined here...\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n    |                        ^^^^\n-note: ...does not necessarily outlive the lifetime `'_` as defined here\n+note: ...does not necessarily outlive the anonymous lifetime as defined here\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n LL |     &str,\n@@ -25,7 +25,7 @@ LL |     fn say(self: &Pair<&str, isize>) {\n    |\n    = note: expected struct `Pair<&str, _>`\n               found struct `Pair<&str, _>`\n-note: the lifetime `'_` as defined here...\n+note: the anonymous lifetime as defined here...\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n LL |     &str,"}, {"sha": "fcabcdea74fc299305032f124e33ee9ce56aeff3", "filename": "src/test/ui/issues/issue-65230.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -6,7 +6,7 @@ LL | impl T1 for &dyn T2 {}\n    |\n    = note: expected trait `<&dyn T2 as T0>`\n               found trait `<&(dyn T2 + 'static) as T0>`\n-note: the lifetime `'_` as defined here...\n+note: the anonymous lifetime as defined here...\n   --> $DIR/issue-65230.rs:8:13\n    |\n LL | impl T1 for &dyn T2 {}"}, {"sha": "7b1fac082e42f18a4774857bcdf50a6642a74305", "filename": "src/test/ui/nll/issue-52742.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -4,7 +4,7 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         self.y = b.z\n    |                  ^^^\n    |\n-note: ...the reference is valid for the lifetime `'_` as defined here...\n+note: ...the reference is valid for the anonymous lifetime as defined here...\n   --> $DIR/issue-52742.rs:15:10\n    |\n LL | impl Foo<'_, '_> {"}, {"sha": "2ec6a7af3f25747af97e73c1ec28ab741c9b9cac", "filename": "src/test/ui/nll/issue-55394.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         Foo { bar }\n    |               ^^^\n-note: but, the lifetime must be valid for the lifetime `'_` as defined here...\n+note: but, the lifetime must be valid for the anonymous lifetime as defined here...\n   --> $DIR/issue-55394.rs:11:10\n    |\n LL | impl Foo<'_> {"}, {"sha": "a0a42e3adbf8121e87fd39f7b9eef7faf7f32fa7", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          -                     ^^^^^^^^\n    |                          |\n-   |                          hidden type `Pin<&Foo>` captures the lifetime `'_` as defined here\n+   |                          hidden type `Pin<&Foo>` captures the anonymous lifetime as defined here\n    |\n help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |"}, {"sha": "d2106630dfed799deade85311de88b7308030239", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.base.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -5,6 +5,12 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                                    ----     ----   ^ ...but data from `f` is returned here\n    |                                    |\n    |                                    this parameter and the return type are declared with different lifetimes...\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn a<'a>(self: Pin<&'a Foo>, f: &'a Foo) -> &Foo { f }\n+   |               ++++            ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:82\n@@ -13,6 +19,12 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                                     ----              -----------------          ^ ...but data from `f` is returned here\n    |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn c<'a>(self: Pin<&'a Self>, f: &'a Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |               ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:22:64"}, {"sha": "3fd58725d02b7fcf3ba0218e83d8156e794d4c14", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -6,6 +6,11 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          |         |\n    |                          |         let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn a<'a>(self: Pin<&'a Foo>, f: &'a Foo) -> &Foo { f }\n+   |               ++++            ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:75\n@@ -15,6 +20,11 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                          |          |\n    |                          |          let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn c<'a>(self: Pin<&'a Self>, f: &'a Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |               ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:22:64"}, {"sha": "0e2bbcc3c04db4f5eca744dc41570bba4503ebcb", "filename": "src/test/ui/self/elision/lt-ref-self-async.base.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,12 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n+   |                      ++++  ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:24:9\n@@ -17,6 +23,12 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n+   |                      ++++        ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:30:9\n@@ -27,6 +39,12 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:36:9\n@@ -37,6 +55,12 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:42:9\n@@ -47,6 +71,12 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++             ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:48:9\n@@ -57,6 +87,12 @@ LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                     this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                          ++++                ++             ++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "1c889838e7082cabbd3c4f95d18bec503f726fb9", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,11 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n+   |                      ++++  ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:24:9\n@@ -17,6 +22,11 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n+   |                      ++++        ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:30:9\n@@ -27,6 +37,11 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:36:9\n@@ -37,6 +52,11 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:42:9\n@@ -47,6 +67,11 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++             ++\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:48:9\n@@ -57,6 +82,11 @@ LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                          ++++                ++             ++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8ffc0d62242129748939bfb5796ce1ad626bca07", "filename": "src/test/ui/self/elision/ref-mut-self-async.base.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,12 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_self<'a>(&'a mut self, f: &'a u32) -> &u32 {\n+   |                      ++++  ++               ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:24:9\n@@ -17,6 +23,12 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Self<'a>(self: &'a mut Self, f: &'a u32) -> &u32 {\n+   |                      ++++        ++               ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:30:9\n@@ -27,6 +39,12 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Self<'a>(self: Box<&'a mut Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++                ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:36:9\n@@ -37,6 +55,12 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Self<'a>(self: Pin<&'a mut Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++                ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:42:9\n@@ -47,6 +71,12 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Self<'a>(self: Box<Box<&'a mut Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++                 ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:48:9\n@@ -57,6 +87,12 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_ref_Self<'a>(self: Box<Pin<&'a mut Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++                 ++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "9beafcd4ff994c3e000e13dfea4c475eaa474831", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,11 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_self<'a>(&'a mut self, f: &'a u32) -> &u32 {\n+   |                      ++++  ++               ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:24:9\n@@ -17,6 +22,11 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Self<'a>(self: &'a mut Self, f: &'a u32) -> &u32 {\n+   |                      ++++        ++               ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:30:9\n@@ -27,6 +37,11 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Self<'a>(self: Box<&'a mut Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++                ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:36:9\n@@ -37,6 +52,11 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Self<'a>(self: Pin<&'a mut Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++                ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:42:9\n@@ -47,6 +67,11 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Self<'a>(self: Box<Box<&'a mut Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++                 ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:48:9\n@@ -57,6 +82,11 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_ref_Self<'a>(self: Box<Pin<&'a mut Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++                 ++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fefb3fc1944393f057946d08ce43e43f72994e80", "filename": "src/test/ui/self/elision/ref-mut-struct-async.base.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,12 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                               this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Struct<'a>(self: &'a mut Struct, f: &'a u32) -> &u32 {\n+   |                        ++++        ++                 ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:22:9\n@@ -17,6 +23,12 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                        this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Struct<'a>(self: Box<&'a mut Struct>, f: &'a u32) -> &u32 {\n+   |                            ++++            ++                  ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:28:9\n@@ -27,6 +39,12 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                        this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Struct<'a>(self: Pin<&'a mut Struct>, f: &'a u32) -> &u32 {\n+   |                            ++++            ++                  ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:34:9\n@@ -37,6 +55,12 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n    |                                                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Struct<'a>(self: Box<Box<&'a mut Struct>>, f: &'a u32) -> &u32 {\n+   |                                ++++                ++                   ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:40:9\n@@ -47,6 +71,12 @@ LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u\n    |                                                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_ref_Struct<'a>(self: Box<Pin<&'a mut Struct>>, f: &'a u32) -> &u32 {\n+   |                                ++++                ++                   ++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "7fbecbe76a5485f1801321187082d8dbed49a8a5", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,11 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Struct<'a>(self: &'a mut Struct, f: &'a u32) -> &u32 {\n+   |                        ++++        ++                 ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:22:9\n@@ -17,6 +22,11 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Struct<'a>(self: Box<&'a mut Struct>, f: &'a u32) -> &u32 {\n+   |                            ++++            ++                  ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:28:9\n@@ -27,6 +37,11 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Struct<'a>(self: Pin<&'a mut Struct>, f: &'a u32) -> &u32 {\n+   |                            ++++            ++                  ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:34:9\n@@ -37,6 +52,11 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Struct<'a>(self: Box<Box<&'a mut Struct>>, f: &'a u32) -> &u32 {\n+   |                                ++++                ++                   ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:40:9\n@@ -47,6 +67,11 @@ LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_ref_Struct<'a>(self: Box<Pin<&'a mut Struct>>, f: &'a u32) -> &u32 {\n+   |                                ++++                ++                   ++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2b142b089d51b423e19457468791371a08fc5e86", "filename": "src/test/ui/self/elision/ref-self-async.base.stderr", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,12 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n+   |                      ++++  ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:34:9\n@@ -17,6 +23,12 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n+   |                      ++++        ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:40:9\n@@ -27,6 +39,12 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:46:9\n@@ -37,6 +55,12 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:52:9\n@@ -47,6 +71,12 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++             ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:58:9\n@@ -57,6 +87,12 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_ref_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++             ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:64:9\n@@ -67,6 +103,12 @@ LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn wrap_ref_Self_Self<'a>(self: Wrap<&'a Self, Self>, f: &'a u8) -> &u8 {\n+   |                                ++++             ++                  ++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "f4e531a817c3d067a8acd0a00240164b3f0414e7", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,11 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n+   |                      ++++  ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:34:9\n@@ -17,6 +22,11 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n+   |                      ++++        ++           ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:40:9\n@@ -27,6 +37,11 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:46:9\n@@ -37,6 +52,11 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n+   |                          ++++            ++            ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:52:9\n@@ -47,6 +67,11 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++             ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:58:9\n@@ -57,6 +82,11 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_ref_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                              ++++                ++             ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:64:9\n@@ -67,6 +97,11 @@ LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn wrap_ref_Self_Self<'a>(self: Wrap<&'a Self, Self>, f: &'a u8) -> &u8 {\n+   |                                ++++             ++                  ++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "88ddca89804f6833085f233684117a2cde1d009d", "filename": "src/test/ui/self/elision/ref-struct-async.base.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.base.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,12 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Struct<'a>(self: &'a Struct, f: &'a u32) -> &u32 {\n+   |                        ++++        ++             ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:22:9\n@@ -17,6 +23,12 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Struct<'a>(self: Box<&'a Struct>, f: &'a u32) -> &u32 {\n+   |                            ++++            ++              ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:28:9\n@@ -27,6 +39,12 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                    this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Struct<'a>(self: Pin<&'a Struct>, f: &'a u32) -> &u32 {\n+   |                            ++++            ++              ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:34:9\n@@ -37,6 +55,12 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                             this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Struct<'a>(self: Box<Box<&'a Struct>>, f: &'a u32) -> &u32 {\n+   |                                ++++                ++               ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:40:9\n@@ -47,6 +71,12 @@ LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_Struct<'a>(self: Box<Pin<&'a Struct>>, f: &'a u32) -> &u32 {\n+   |                            ++++                ++               ++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "83c20329c3dad9601a736bf9069a5ac1fe4aa0fd", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da175c743c3dbf7fc371534acbbd6a1bf0b17d50/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=da175c743c3dbf7fc371534acbbd6a1bf0b17d50", "patch": "@@ -7,6 +7,11 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn ref_Struct<'a>(self: &'a Struct, f: &'a u32) -> &u32 {\n+   |                        ++++        ++             ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:22:9\n@@ -17,6 +22,11 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_ref_Struct<'a>(self: Box<&'a Struct>, f: &'a u32) -> &u32 {\n+   |                            ++++            ++              ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:28:9\n@@ -27,6 +37,11 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn pin_ref_Struct<'a>(self: Pin<&'a Struct>, f: &'a u32) -> &u32 {\n+   |                            ++++            ++              ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:34:9\n@@ -37,6 +52,11 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_box_ref_Struct<'a>(self: Box<Box<&'a Struct>>, f: &'a u32) -> &u32 {\n+   |                                ++++                ++               ++\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:40:9\n@@ -47,6 +67,11 @@ LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     async fn box_pin_Struct<'a>(self: Box<Pin<&'a Struct>>, f: &'a u32) -> &u32 {\n+   |                            ++++                ++               ++\n \n error: aborting due to 5 previous errors\n "}]}