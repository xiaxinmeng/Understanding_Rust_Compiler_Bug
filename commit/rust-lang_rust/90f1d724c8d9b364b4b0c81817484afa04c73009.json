{"sha": "90f1d724c8d9b364b4b0c81817484afa04c73009", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjFkNzI0YzhkOWIzNjRiNGIwYzgxODE3NDg0YWZhMDRjNzMwMDk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T15:53:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T15:53:06Z"}, "message": "Rollup merge of #72920 - oli-obk:const_transmute, r=RalfJung\n\nStabilize `transmute` in constants and statics but not const fn\n\ncc #53605 (leaving issue open so we can add `transmute` to `const fn` later)\n\nPrevious attempt: #64011\n\nr? @RalfJung\n\ncc @rust-lang/wg-const-eval", "tree": {"sha": "faeaf565f2045577edb5641c3cd091f25109219f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faeaf565f2045577edb5641c3cd091f25109219f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f1d724c8d9b364b4b0c81817484afa04c73009", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCeBjCRBK7hj4Ov3rIwAAdHIIAHnkD3R0PUiS+OfRU1eEOUqU\nL4Wfo66ZITGcpjdVasoc5jyN2YSD8tNsmxRVeGoyUm9quBYjz2waofJIR0CZ97mx\nL+9O4H+Uz0G9k9YxuCar3wUzQVnNRoaasZ+U8wgJSdnhv+zJIc+jxsEGSTymhUUD\nSSXggFpbqrnI9G4ZNC3cEitBIKEqv1wFMNKrpbHKzM89JkMPKv3vXmTjBIpaFmbo\nROFCq+wpi9ta37HNFGqNER2LKaNJFIJ75APG9lVG1R7crQpdljLTcq2eheydTW5p\nH5NekhtLWhDdwU1OR+oNro0XK1LEzEtX413FMf13iL8C9AzJzqVsSY6wNYZ0G7c=\n=nFH4\n-----END PGP SIGNATURE-----\n", "payload": "tree faeaf565f2045577edb5641c3cd091f25109219f\nparent 346aec9b02f3c74f3fce97fd6bda24709d220e49\nparent dd872be5da0887d800ae9a001ec212c7161f661c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594482786 -0700\ncommitter GitHub <noreply@github.com> 1594482786 -0700\n\nRollup merge of #72920 - oli-obk:const_transmute, r=RalfJung\n\nStabilize `transmute` in constants and statics but not const fn\n\ncc #53605 (leaving issue open so we can add `transmute` to `const fn` later)\n\nPrevious attempt: #64011\n\nr? @RalfJung\n\ncc @rust-lang/wg-const-eval\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f1d724c8d9b364b4b0c81817484afa04c73009", "html_url": "https://github.com/rust-lang/rust/commit/90f1d724c8d9b364b4b0c81817484afa04c73009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f1d724c8d9b364b4b0c81817484afa04c73009/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346aec9b02f3c74f3fce97fd6bda24709d220e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/346aec9b02f3c74f3fce97fd6bda24709d220e49", "html_url": "https://github.com/rust-lang/rust/commit/346aec9b02f3c74f3fce97fd6bda24709d220e49"}, {"sha": "dd872be5da0887d800ae9a001ec212c7161f661c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd872be5da0887d800ae9a001ec212c7161f661c", "html_url": "https://github.com/rust-lang/rust/commit/dd872be5da0887d800ae9a001ec212c7161f661c"}], "stats": {"total": 344, "additions": 238, "deletions": 106}, "files": [{"sha": "540a8cfb290b36deb3741e69a5635f46f6399bc9", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1285,7 +1285,9 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_transmute\", issue = \"53605\")]\n+    // NOTE: While this makes the intrinsic const stable, we have some custom code in const fn\n+    // checks that prevent its use within `const fn`.\n+    #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n     pub fn transmute<T, U>(e: T) -> U;\n \n     /// Returns `true` if the actual type given as `T` requires drop"}, {"sha": "820c0a49e7f0318aaf4b1ef35464ad496982653a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -140,7 +140,7 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![feature(const_transmute)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_transmute))]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n #![feature(maybe_uninit_slice)]"}, {"sha": "c32ed1ea48c976ca3516ac147f5a01bdd3d24c19", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -10,7 +10,7 @@\n #![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)] // For the `transmute` in `P::new`\n #![feature(const_panic)]\n-#![feature(const_transmute)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_transmute))]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]"}, {"sha": "0da3693af4fb694447d64a87a4fbe1d7140c337c", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -573,6 +573,9 @@ declare_features! (\n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n     (active, lazy_normalization_consts, \"1.46.0\", Some(72219), None),\n \n+    /// Alloc calling `transmute` in const fn\n+    (active, const_fn_transmute, \"1.46.0\", Some(53605), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "c2b14cb2e8408cb66610f22d1593543383776a7d", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -30,7 +30,7 @@\n #![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n-#![feature(const_transmute)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_transmute))]\n #![feature(core_intrinsics)]\n #![feature(discriminant_kind)]\n #![feature(drain_filter)]"}, {"sha": "52b1eba3b93c277510857d5b858154a1b2c0ee5f", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n+use rustc_target::spec::abi::Abi::RustIntrinsic;\n use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n@@ -418,6 +419,20 @@ fn check_terminator(\n                     ));\n                 }\n \n+                // HACK: This is to \"unstabilize\" the `transmute` intrinsic\n+                // within const fns. `transmute` is allowed in all other const contexts.\n+                // This won't really scale to more intrinsics or functions. Let's allow const\n+                // transmutes in const fn before we add more hacks to this.\n+                if tcx.fn_sig(fn_def_id).abi() == RustIntrinsic\n+                    && tcx.item_name(fn_def_id) == sym::transmute\n+                    && !feature_allowed(tcx, def_id, sym::const_fn_transmute)\n+                {\n+                    return Err((\n+                        span,\n+                        \"can only call `transmute` from const items, not `const fn`\".into(),\n+                    ));\n+                }\n+\n                 check_operand(tcx, func, span, fn_def_id, body)?;\n \n                 for arg in args {"}, {"sha": "3c5521132135ce08102f1aaa97bab4bb4ff947e5", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -848,6 +848,7 @@ symbols! {\n         track_caller,\n         trait_alias,\n         transmute,\n+        const_fn_transmute,\n         transparent,\n         transparent_enums,\n         transparent_unions,"}, {"sha": "78cf000db03d19ad692bc5af12143c25dc246a35", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_transmute, const_raw_ptr_deref)]\n+#![feature(const_raw_ptr_deref)]\n \n use std::{mem, usize};\n "}, {"sha": "56ca0aa1f15873f68c0902b80c7b9222e18f29f2", "filename": "src/test/ui/consts/const-eval/double_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -20,4 +20,6 @@ static FOO: (&Foo, &Bar) = unsafe {(\n     Union { u8: &BAR }.bar,\n )};\n \n+static FOO2: (&Foo, &Bar) = unsafe {(std::mem::transmute(&BAR), std::mem::transmute(&BAR))};\n+\n fn main() {}"}, {"sha": "8402d628856648f0d9ec022fc9a50a77e17e14cb", "filename": "src/test/ui/consts/const-eval/double_check2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -17,5 +17,7 @@ static FOO: (&Foo, &Bar) = unsafe {( //~ undefined behavior\n     Union { u8: &BAR }.foo,\n     Union { u8: &BAR }.bar,\n )};\n+static FOO2: (&Foo, &Bar) = unsafe {(std::mem::transmute(&BAR), std::mem::transmute(&BAR))};\n+//~^ undefined behavior\n \n fn main() {}"}, {"sha": "84f60809156d0201d9543c09695b39b8bcb02db7", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -9,6 +9,14 @@ LL | | )};\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to previous error\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/double_check2.rs:20:1\n+   |\n+LL | static FOO2: (&Foo, &Bar) = unsafe {(std::mem::transmute(&BAR), std::mem::transmute(&BAR))};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x05 at .1.<deref>.<enum-tag>, but expected a valid enum tag\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "fa5a493abde2131bd10e71489c4fe9e6aeeee7f5", "filename": "src/test/ui/consts/const-eval/issue-55541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -2,7 +2,7 @@\n \n // Test that we can handle newtypes wrapping extern types\n \n-#![feature(extern_types, const_transmute)]\n+#![feature(extern_types)]\n \n use std::marker::PhantomData;\n "}, {"sha": "1cfad00ca76df7126e41dd03403b265d1030cca8", "filename": "src/test/ui/consts/const-eval/transmute-const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_transmute)]\n-\n use std::mem;\n \n static FOO: bool = unsafe { mem::transmute(3u8) };"}, {"sha": "46a404982778d5f4025caf420a02549ed566f3c8", "filename": "src/test/ui/consts/const-eval/transmute-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/transmute-const.rs:5:1\n+  --> $DIR/transmute-const.rs:3:1\n    |\n LL | static FOO: bool = unsafe { mem::transmute(3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03, but expected a boolean"}, {"sha": "dc94f2368c9b6a05dfb98aedb297b55543dc41e2", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,5 +1,5 @@\n // normalize-stderr-64bit \"0x0000000000\" -> \"0x00\"\n-#![feature(const_transmute, never_type)]\n+#![feature(never_type)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "6801c7fa3ff083e6ded310512f96892842488c04", "filename": "src/test/ui/consts/const-eval/ub-int-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_transmute)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n //! Test the \"array of int\" fast path in validity checking, and in particular whether it"}, {"sha": "92f654847df32ef3ede0108920479613e414448a", "filename": "src/test/ui/consts/const-eval/ub-int-array.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-int-array.rs:15:1\n+  --> $DIR/ub-int-array.rs:14:1\n    |\n LL | / const UNINIT_INT_0: [u32; 3] = unsafe {\n LL | |\n@@ -13,7 +13,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-int-array.rs:24:1\n+  --> $DIR/ub-int-array.rs:23:1\n    |\n LL | / const UNINIT_INT_1: [u32; 3] = unsafe {\n LL | |\n@@ -27,7 +27,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-int-array.rs:44:1\n+  --> $DIR/ub-int-array.rs:43:1\n    |\n LL | / const UNINIT_INT_2: [u32; 3] = unsafe {\n LL | |"}, {"sha": "4b90b892dce9a3663eb368950cf2d5b281a1be86", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_transmute)]\n+#![feature(rustc_attrs)]\n #![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "e8b101fed6d2f6f6ad1fa8952000c8583a850b87", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,5 +1,4 @@\n // ignore-tidy-linelength\n-#![feature(const_transmute)]\n #![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "cd270f2a533bf8e5e1e88ef06b69b3440d1b46cf", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,69 +1,69 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:7:1\n+  --> $DIR/ub-ref.rs:6:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:11:1\n+  --> $DIR/ub-ref.rs:10:1\n    |\n LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:15:1\n+  --> $DIR/ub-ref.rs:14:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:18:1\n+  --> $DIR/ub-ref.rs:17:1\n    |\n LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL box\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:24:1\n+  --> $DIR/ub-ref.rs:23:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc16, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:27:1\n+  --> $DIR/ub-ref.rs:26:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:30:1\n+  --> $DIR/ub-ref.rs:29:1\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:33:1\n+  --> $DIR/ub-ref.rs:32:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (created from integer)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:36:1\n+  --> $DIR/ub-ref.rs:35:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (created from integer)"}, {"sha": "b81bca3849431cec69385355b0f53f9a81096148", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_transmute)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "16f5316a44230e0695723595146b06bd6c3827a7", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,21 +1,21 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:15:1\n+  --> $DIR/ub-uninhabit.rs:14:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:18:1\n+  --> $DIR/ub-uninhabit.rs:17:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Bar at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:21:1\n+  --> $DIR/ub-uninhabit.rs:20:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Bar at [0]"}, {"sha": "5d19276557eb6d53d99a63642ba46a85dee025f7", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_transmute)]\n #![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "afd6c9035cabf94389e49bba8f56d0b13d66c82a", "filename": "src/test/ui/consts/const-eval/ub-upvars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-upvars.rs:6:1\n+  --> $DIR/ub-upvars.rs:5:1\n    |\n LL | / const BAD_UPVAR: &dyn FnOnce() = &{\n LL | |     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };"}, {"sha": "3e148af8de9d59fd5ba20d461f578e25b3b54d1c", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,5 +1,4 @@\n // ignore-tidy-linelength\n-#![feature(const_transmute)]\n #![allow(unused)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n "}, {"sha": "b7509108abc234a543f96e456029312daee79a4e", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,61 +1,61 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:32:1\n+  --> $DIR/ub-wide-ptr.rs:31:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:34:1\n+  --> $DIR/ub-wide-ptr.rs:33:1\n    |\n LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, usize::MAX)) },);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object at .0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:37:1\n+  --> $DIR/ub-wide-ptr.rs:36:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:40:1\n+  --> $DIR/ub-wide-ptr.rs:39:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:42:1\n+  --> $DIR/ub-wide-ptr.rs:41:1\n    |\n LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:46:1\n+  --> $DIR/ub-wide-ptr.rs:45:1\n    |\n LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:49:1\n+  --> $DIR/ub-wide-ptr.rs:48:1\n    |\n LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>.0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:56:1\n+  --> $DIR/ub-wide-ptr.rs:55:1\n    |\n LL | / const SLICE_LENGTH_UNINIT: &[u8] = unsafe {\n LL | |\n@@ -67,63 +67,63 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:62:1\n+  --> $DIR/ub-wide-ptr.rs:61:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:65:1\n+  --> $DIR/ub-wide-ptr.rs:64:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:68:1\n+  --> $DIR/ub-wide-ptr.rs:67:1\n    |\n LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:71:1\n+  --> $DIR/ub-wide-ptr.rs:70:1\n    |\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:75:1\n+  --> $DIR/ub-wide-ptr.rs:74:1\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>[0], but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:81:1\n+  --> $DIR/ub-wide-ptr.rs:80:1\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.0, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:84:1\n+  --> $DIR/ub-wide-ptr.rs:83:1\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.1[0], but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:91:1\n+  --> $DIR/ub-wide-ptr.rs:90:1\n    |\n LL | / const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n LL | |\n@@ -135,93 +135,93 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:99:1\n+  --> $DIR/ub-wide-ptr.rs:98:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: &dyn Trait = unsafe { mem::transmute((&92u8, &3u8)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:102:1\n+  --> $DIR/ub-wide-ptr.rs:101:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: &dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:105:1\n+  --> $DIR/ub-wide-ptr.rs:104:1\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, 4usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:107:1\n+  --> $DIR/ub-wide-ptr.rs:106:1\n    |\n LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:109:1\n+  --> $DIR/ub-wide-ptr.rs:108:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:111:1\n+  --> $DIR/ub-wide-ptr.rs:110:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:113:1\n+  --> $DIR/ub-wide-ptr.rs:112:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: &dyn Trait = unsafe { mem::transmute((&92u8, &[&42u8; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:117:1\n+  --> $DIR/ub-wide-ptr.rs:116:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.<dyn-downcast>, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:121:1\n+  --> $DIR/ub-wide-ptr.rs:120:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:123:1\n+  --> $DIR/ub-wide-ptr.rs:122:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:129:5\n+  --> $DIR/ub-wide-ptr.rs:128:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inbounds test failed: 0x0 is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:133:5\n+  --> $DIR/ub-wide-ptr.rs:132:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N"}, {"sha": "9e4707182d596262c4925f0f1b30b456ebb0b9b2", "filename": "src/test/ui/consts/const-eval/valid-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n // Some constants that *are* valid\n-#![feature(const_transmute)]\n #![deny(const_err)]\n \n use std::mem;"}, {"sha": "48a989bf58863bcd213931b896a2a8b04b895f66", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_fn)]\n-#![feature(const_transmute)]\n+#![feature(const_fn_transmute)]\n \n const fn foo() -> ! {\n     unsafe { std::mem::transmute(()) }"}, {"sha": "d51215447d6cac05dae1319b45ccecbdc63d0bea", "filename": "src/test/ui/consts/consts-in-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconsts-in-patterns.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_transmute)]\n \n const FOO: isize = 10;\n const BAR: isize = 3;"}, {"sha": "eb250081d6a72c37af4438f5584a7bd8bc4cf375", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -17,11 +17,6 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     my_fn();\n    |     ^^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/abi-mismatch.rs:16:40\n-   |\n-LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "d782a3633b243faee3c2987d4a9c37fd64f07a84", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -17,11 +17,6 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     let _v = x == x;\n    |              ^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/ptr_arith.rs:15:20\n-   |\n-LL |     let x: usize = std::mem::transmute(&0);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "5044d99ec51834b55437d303ba207b5af3ad95eb", "filename": "src/test/ui/consts/transmute-const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Fconsts%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-const.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_transmute)]\n-\n use std::mem;\n \n #[repr(transparent)]"}, {"sha": "981680b5d1fadc34b3375559dc7838ab9aafa626", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -0,0 +1,38 @@\n+use std::mem;\n+\n+#[repr(transparent)]\n+struct Foo(u32);\n+\n+const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n+\n+const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n+\n+const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n+\n+const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n+\n+fn main() {}"}, {"sha": "44430fd577d886a027b6e1e1f98316623ef60876", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.stderr", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -0,0 +1,109 @@\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:8:43\n+   |\n+LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:11:53\n+   |\n+LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n+   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:14:58\n+   |\n+LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:17:48\n+   |\n+LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:20:58\n+   |\n+LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:23:63\n+   |\n+LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n+   |\n+LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:30:49\n+   |\n+LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:34:54\n+   |\n+LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n+   |\n+LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:30:49\n+   |\n+LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:34:54\n+   |\n+LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0133, E0723.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "da532643d9457630088faef894324e6038542b11", "filename": "src/test/ui/feature-gates/feature-gate-const_transmute.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/346aec9b02f3c74f3fce97fd6bda24709d220e49/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aec9b02f3c74f3fce97fd6bda24709d220e49/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs?ref=346aec9b02f3c74f3fce97fd6bda24709d220e49", "patch": "@@ -1,9 +0,0 @@\n-use std::mem;\n-\n-#[repr(transparent)]\n-struct Foo(u32);\n-\n-const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n-//~^ ERROR `std::intrinsics::transmute` is not yet stable as a const fn\n-\n-fn main() {}"}, {"sha": "772e8d294781a0cd57fa1901bfb751236a090fde", "filename": "src/test/ui/feature-gates/feature-gate-const_transmute.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/346aec9b02f3c74f3fce97fd6bda24709d220e49/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aec9b02f3c74f3fce97fd6bda24709d220e49/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr?ref=346aec9b02f3c74f3fce97fd6bda24709d220e49", "patch": "@@ -1,10 +0,0 @@\n-error: `std::intrinsics::transmute` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_transmute.rs:6:38\n-   |\n-LL | const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_transmute)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-"}, {"sha": "b923bc22f6e5f741684ff83f424e3e47750aa90c", "filename": "src/test/ui/internal/internal-unstable-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -8,7 +8,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn foo() -> i32 {\n-    unsafe { std::mem::transmute(4u32) } //~ ERROR is not stable as `const fn`\n+    unsafe { std::mem::transmute(4u32) } //~ ERROR can only call `transmute` from const items\n }\n \n fn main() {}"}, {"sha": "9626df23ec3c2838b80c68c54dd6f26c2cdd6c8c", "filename": "src/test/ui/internal/internal-unstable-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -1,4 +1,4 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `const std::intrinsics::transmute::<u32, i32>` is not stable as `const fn`\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n   --> $DIR/internal-unstable-const.rs:11:14\n    |\n LL |     unsafe { std::mem::transmute(4u32) }"}, {"sha": "74d32b8a1aa933a0960b5751b503103b2735c384", "filename": "src/tools/clippy/tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f1d724c8d9b364b4b0c81817484afa04c73009/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=90f1d724c8d9b364b4b0c81817484afa04c73009", "patch": "@@ -57,14 +57,6 @@ LL | |     t\n LL | | }\n    | |_^\n \n-error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:48:1\n-   |\n-LL | / fn sub(x: u32) -> usize {\n-LL | |     unsafe { transmute(&x) }\n-LL | | }\n-   | |_^\n-\n error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:67:9\n    |\n@@ -73,5 +65,5 @@ LL | |             B\n LL | |         }\n    | |_________^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}]}