{"sha": "f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwY2U1YmI2NmJmMmViZGRlYmJlZThhZTkzYzE1YzEzNTFlYTJiODY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-11-24T19:15:11Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "Split nested_visit_mode function off from nested_visit_map\n\n... and make the latter mandatory to implement.", "tree": {"sha": "35ce5b7abead2181bebf1fb5a1a87b31ae032844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35ce5b7abead2181bebf1fb5a1a87b31ae032844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "html_url": "https://github.com/rust-lang/rust/commit/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "725cffb1d58696e94d7a0d4fcb3b4143cfcdafd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/725cffb1d58696e94d7a0d4fcb3b4143cfcdafd3", "html_url": "https://github.com/rust-lang/rust/commit/725cffb1d58696e94d7a0d4fcb3b4143cfcdafd3"}], "stats": {"total": 270, "additions": 160, "deletions": 110}, "files": [{"sha": "dcdba57fc719dcb05ebc8f5c765edb0a2a4c4b1e", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -95,23 +95,26 @@ pub trait Visitor<'v> : Sized {\n     ///////////////////////////////////////////////////////////////////////////\n     // Nested items.\n \n-    /// The default versions of the `visit_nested_XXX` routines invoke\n-    /// this method to get a map to use; if they get back `None`, they\n-    /// just skip nested things. Otherwise, they will lookup the\n-    /// nested item-like things in the map and visit it. So the best\n-    /// way to implement a nested visitor is to override this method\n-    /// to return a `Map`; one advantage of this is that if we add\n-    /// more types of nested things in the future, they will\n-    /// automatically work.\n+    /// The default versions of the `visit_nested_XXX` routines invoke this\n+    /// method to get a map to use; if they get back `None`, they just skip\n+    /// nested things. Otherwise, they will lookup the nested thing in the map\n+    /// and visit it depending on what `nested_visit_mode` returns. So the best\n+    /// way to implement a nested visitor is to override this method to return a\n+    /// `Map`; one advantage of this is that if we add more types of nested\n+    /// things in the future, they will automatically work.\n     ///\n     /// **If for some reason you want the nested behavior, but don't\n     /// have a `Map` are your disposal:** then you should override the\n     /// `visit_nested_XXX` methods, and override this method to\n     /// `panic!()`. This way, if a new `visit_nested_XXX` variant is\n     /// added in the future, we will see the panic in your code and\n     /// fix it appropriately.\n-    fn nested_visit_map(&mut self) -> Option<(&Map<'v>, NestedVisitMode)> {\n-        None\n+    fn nested_visit_map(&mut self) -> Option<&Map<'v>>;\n+\n+    /// Specifies what things nested things this visitor wants to visit. By\n+    /// default, bodies will be visited, but not nested items.\n+    fn nested_visit_mode(&mut self) -> NestedVisitMode {\n+        NestedVisitMode::OnlyBodies\n     }\n \n     /// Invoked when a nested item is encountered. By default does\n@@ -300,16 +303,15 @@ pub trait Visitor<'v> : Sized {\n }\n \n fn map_for_body<'v, V: Visitor<'v>>(visitor: &mut V) -> Option<&Map<'v>> {\n-    visitor.nested_visit_map().map(|(map, _mode)| map)\n+    visitor.nested_visit_map()\n }\n \n fn map_for_item<'v, V: Visitor<'v>>(visitor: &mut V) -> Option<&Map<'v>> {\n-    visitor.nested_visit_map().and_then(|(map, mode)| {\n-        match mode {\n-            NestedVisitMode::OnlyBodies => None,\n-            NestedVisitMode::All => Some(map)\n-        }\n-    })\n+    match visitor.nested_visit_mode() {\n+        NestedVisitMode::OnlyBodies => None,\n+        NestedVisitMode::All => Some(visitor.nested_visit_map()\n+                                     .expect(\"NestedVisitMode::All without nested_visit_map\"))\n+    }\n }\n \n pub fn walk_opt_name<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_name: Option<Name>) {\n@@ -1059,8 +1061,8 @@ impl<'a, 'ast> IdRangeComputingVisitor<'a, 'ast> {\n }\n \n impl<'a, 'ast> Visitor<'ast> for IdRangeComputingVisitor<'a, 'ast> {\n-    fn nested_visit_map(&mut self) -> Option<(&Map<'ast>, NestedVisitMode)> {\n-        Some((&self.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&Map<'ast>> {\n+        Some(&self.map)\n     }\n \n     fn visit_id(&mut self, id: NodeId) {"}, {"sha": "2cfb35affc7bf0deb38063e6757e7f35afdfc252", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -10,7 +10,7 @@\n \n use super::*;\n \n-use hir::intravisit::{Visitor, NestedVisitMode};\n+use hir::intravisit::Visitor;\n use hir::def_id::DefId;\n use middle::cstore::InlinedItem;\n use std::iter::repeat;\n@@ -91,7 +91,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map(&mut self) -> Option<(&map::Map<'ast>, NestedVisitMode)> {\n+    fn nested_visit_map(&mut self) -> Option<&map::Map<'ast>> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n "}, {"sha": "30445ffe73e28b3e7eeab90140472d707e477fc4", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -327,6 +327,10 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n \n // We walk the HIR rather than the AST when reading items from metadata.\n impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> {\n+        None\n+    }\n+\n     fn visit_body(&mut self, id: hir::ExprId) {\n         if let Some(krate) = self.hir_crate {\n             self.visit_expr(krate.expr(id));"}, {"sha": "0ec2e6641b943b32ccb34b51a8545adef2b2ddcb", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -791,8 +791,12 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, hir_visit::NestedVisitMode)> {\n-        Some((&self.tcx.map, hir_visit::NestedVisitMode::All))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n+    }\n+\n+    fn nested_visit_mode(&mut self) -> hir_visit::NestedVisitMode {\n+        hir_visit::NestedVisitMode::All\n     }\n \n     fn visit_item(&mut self, it: &'tcx hir::Item) {\n@@ -1109,8 +1113,8 @@ struct IdVisitor<'a, 'b: 'a, 'tcx: 'a+'b> {\n \n // Output any lints that were previously added to the session.\n impl<'a, 'b, 'tcx> hir_visit::Visitor<'tcx> for IdVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, hir_visit::NestedVisitMode)> {\n-        Some((&self.cx.tcx.map, hir_visit::NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.cx.tcx.map)\n     }\n \n     fn visit_id(&mut self, id: ast::NodeId) {"}, {"sha": "5fc7d43f48d09b831d33532edba5b756b072fa5a", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -193,6 +193,8 @@ fn build_nodeid_to_index(decl: Option<&hir::FnDecl>,\n         let mut formals = Formals { entry: entry, index: index };\n         intravisit::walk_fn_decl(&mut formals, decl);\n         impl<'a, 'v> intravisit::Visitor<'v> for Formals<'a> {\n+            fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+\n             fn visit_pat(&mut self, p: &hir::Pat) {\n                 self.index.entry(p.id).or_insert(vec![]).push(self.entry);\n                 intravisit::walk_pat(self, p)"}, {"sha": "f96bfb4718eda874c1b4ff3b5ae825f5fc06d43f", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -221,8 +221,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     fn visit_variant_data(&mut self, def: &'tcx hir::VariantData, _: ast::Name,\n@@ -510,10 +510,12 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n     /// on inner functions when the outer function is already getting\n     /// an error. We could do this also by checking the parents, but\n     /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::All))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n+    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n+\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         if self.should_warn_about_item(item) {\n             self.warn_dead_code("}, {"sha": "8b0432df2f019c7764911001be0a51ee90812b69", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -21,7 +21,7 @@ use syntax::ast;\n use syntax_pos::Span;\n use hir::{self, PatKind};\n use hir::def::Def;\n-use hir::intravisit::{self, FnKind, Visitor, NestedVisitMode};\n+use hir::intravisit::{self, FnKind, Visitor};\n \n #[derive(Copy, Clone)]\n struct UnsafeContext {\n@@ -93,8 +93,8 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, fn_decl: &'tcx hir::FnDecl,"}, {"sha": "49ada60c57675b17fd58b7b6fa394942850cc55e", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -19,7 +19,7 @@ use ty::layout::{LayoutError, Pointer, SizeSkeleton};\n use syntax::abi::Abi::RustIntrinsic;\n use syntax::ast;\n use syntax_pos::Span;\n-use hir::intravisit::{self, Visitor, FnKind, NestedVisitMode};\n+use hir::intravisit::{self, Visitor, FnKind};\n use hir;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n@@ -117,8 +117,8 @@ impl<'a, 'gcx, 'tcx> ExprVisitor<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ItemVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     // const, static and N in [T; N].\n@@ -163,8 +163,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ItemVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for ExprVisitor<'a, 'gcx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'gcx>, NestedVisitMode)> {\n-        Some((&self.infcx.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n+        Some(&self.infcx.tcx.map)\n     }\n \n     fn visit_expr(&mut self, expr: &'gcx hir::Expr) {"}, {"sha": "94f880f9fdff6839b2f1de19b886a9ae6653fd20", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -128,7 +128,7 @@ use syntax_pos::Span;\n use hir::Expr;\n use hir;\n use hir::print::{expr_to_string, block_to_string};\n-use hir::intravisit::{self, Visitor, FnKind, NestedVisitMode};\n+use hir::intravisit::{self, Visitor, FnKind};\n \n /// For use with `propagate_through_loop`.\n enum LoopKind<'a> {\n@@ -183,8 +183,8 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt) -> String {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for IrMaps<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n     fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,\n                 b: hir::ExprId, s: Span, id: NodeId) {\n@@ -352,8 +352,8 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.ir.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.ir.tcx.map)\n     }\n     fn visit_fn(&mut self, _: FnKind<'tcx>, _: &'tcx hir::FnDecl,\n                 _: hir::ExprId, _: Span, _: NodeId) {"}, {"sha": "31731adc087933ea7933e32d1043e2a5c988615c", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -28,7 +28,7 @@ use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use hir;\n-use hir::intravisit::{Visitor, NestedVisitMode};\n+use hir::intravisit::{Visitor};\n use hir::itemlikevisit::ItemLikeVisitor;\n use hir::intravisit;\n \n@@ -89,8 +89,8 @@ struct ReachableContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {"}, {"sha": "c2a34fca6e138a9f06a33e8915877265ffb6dd51", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -31,7 +31,7 @@ use syntax::ast::{self, NodeId};\n use syntax_pos::Span;\n \n use hir;\n-use hir::intravisit::{self, Visitor, FnKind, NestedVisitMode};\n+use hir::intravisit::{self, Visitor, FnKind};\n use hir::{Block, Item, FnDecl, Arm, Pat, PatKind, Stmt, Expr, Local};\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n@@ -1170,8 +1170,8 @@ impl<'ast, 'a> RegionResolutionVisitor<'ast, 'a> {\n }\n \n impl<'ast, 'a> Visitor<'ast> for RegionResolutionVisitor<'ast, 'a> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'ast>, NestedVisitMode)> {\n-        Some((&self.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> {\n+        Some(&self.map)\n     }\n \n     fn visit_block(&mut self, b: &'ast Block) {"}, {"sha": "88877b5a15be263183f64fdc804bba0b74f4fc2e", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -132,10 +132,12 @@ pub fn krate(sess: &Session,\n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     // Override the nested functions -- lifetimes follow lexical scope,\n     // so it's convenient to walk the tree in lexical order.\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.hir_map, NestedVisitMode::All))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.hir_map)\n     }\n \n+    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n+\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         // Save labels for nested items.\n         let saved_labels_in_fn = replace(&mut self.labels_in_fn, vec![]);\n@@ -423,6 +425,8 @@ fn extract_labels(ctxt: &mut LifetimeContext, b: hir::ExprId) {\n     return;\n \n     impl<'v, 'a> Visitor<'v> for GatherLabels<'a> {\n+        fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+\n         fn visit_expr(&mut self, ex: &'v hir::Expr) {\n             // do not recurse into closures defined in the block\n             // since they are treated as separate fns from the POV of\n@@ -938,6 +942,8 @@ fn insert_late_bound_lifetimes(map: &mut NamedRegionMap,\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n+        fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+\n         fn visit_ty(&mut self, ty: &'v hir::Ty) {\n             match ty.node {\n                 hir::TyPath(hir::QPath::Resolved(Some(_), _)) |\n@@ -975,6 +981,8 @@ fn insert_late_bound_lifetimes(map: &mut NamedRegionMap,\n     }\n \n     impl<'v> Visitor<'v> for AllCollector {\n+        fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+\n         fn visit_lifetime(&mut self, lifetime_ref: &'v hir::Lifetime) {\n             self.regions.insert(lifetime_ref.name);\n         }"}, {"sha": "33507f12ac43bbbbe218c8ec98a0aea8481349f3", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -234,10 +234,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::All))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n+    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n+\n     fn visit_item(&mut self, i: &'tcx Item) {\n         let orig_in_trait_impl = self.in_trait_impl;\n         let mut kind = AnnotationKind::Required;\n@@ -534,10 +536,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n+    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::OnlyBodies }\n+\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n             hir::ItemExternCrate(_) => {"}, {"sha": "36ce4f98dfdfffc74eb1b4dc5fccdb4cb7451ad8", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -125,6 +125,8 @@ impl<'a> Context<'a> {\n }\n \n impl<'a, 'v> Visitor<'v> for Context<'a> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+\n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n         if let Some(lang_item) = lang_items::extract(&i.attrs) {\n             self.register(&lang_item.as_str(), i.span);"}, {"sha": "710f47f06c7c572ce82e9a5934c74483f10c107b", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -30,7 +30,7 @@ use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::Expr;\n use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{Visitor};\n \n use self::restrictions::RestrictionResult;\n \n@@ -521,8 +521,8 @@ struct StaticInitializerCtxt<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for StaticInitializerCtxt<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.bccx.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.bccx.tcx.map)\n     }\n \n     fn visit_expr(&mut self, ex: &'tcx Expr) {"}, {"sha": "dd87b8472e22dcdd8aecbc177847ac8f935e653f", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -47,7 +47,7 @@ use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor, FnKind};\n \n pub mod check_loans;\n \n@@ -63,8 +63,8 @@ pub struct LoanDataFlowOperator;\n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,"}, {"sha": "08116327590d6db73b01e42351f284f66aac3e98", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -29,7 +29,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc_errors::DiagnosticBuilder;\n \n use rustc::hir::def::*;\n-use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor, FnKind};\n use rustc::hir::print::pat_to_string;\n use rustc::hir::{self, Pat, PatKind};\n \n@@ -42,6 +42,8 @@ use syntax_pos::Span;\n struct OuterVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n \n impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> { None }\n+\n     fn visit_expr(&mut self, _expr: &'tcx hir::Expr) {\n         return // const, static and N in [T; N] - shouldn't contain anything\n     }\n@@ -91,8 +93,8 @@ struct MatchVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n@@ -561,6 +563,8 @@ struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+\n     fn visit_pat(&mut self, pat: &Pat) {\n         match pat.node {\n             PatKind::Binding(.., ref subpat) => {"}, {"sha": "6de7192b17ce44629607c4c9f8be694fc540acc8", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -224,6 +224,8 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n \n \n impl<'a, 'tcx> Visitor<'tcx> for HashItemsVisitor<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> { None }\n+\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         self.calculate_node_id(item.id, |v| v.visit_item(item));\n         visit::walk_item(self, item);"}, {"sha": "59165649fdecd0ee9789ba84a3fb8a221fd8f5be", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -513,9 +513,9 @@ macro_rules! hash_span {\n }\n \n impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, visit::NestedVisitMode)> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n         if self.hash_bodies {\n-            Some((&self.tcx.map, visit::NestedVisitMode::OnlyBodies))\n+            Some(&self.tcx.map)\n         } else {\n             None\n         }"}, {"sha": "52a0dc8a6191d11d5062ef070323730838117306", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -11,7 +11,7 @@\n use rustc::hir;\n use rustc::hir::map as ast_map;\n \n-use rustc::hir::intravisit::{Visitor, IdRangeComputingVisitor, IdRange, NestedVisitMode};\n+use rustc::hir::intravisit::{Visitor, IdRangeComputingVisitor, IdRange};\n \n use cstore::CrateMetadata;\n use encoder::EncodeContext;\n@@ -75,8 +75,8 @@ struct SideTableEncodingIdVisitor<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for SideTableEncodingIdVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.ecx.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.ecx.tcx.map)\n     }\n \n     fn visit_id(&mut self, id: ast::NodeId) {"}, {"sha": "41c8a9728fa2e29e2dd9ff54efde6fef329e76aa", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -39,7 +39,7 @@ use syntax_pos;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::intravisit::{Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{Visitor};\n use rustc::hir::intravisit;\n \n use super::index_builder::{FromId, IndexBuilder, Untracked};\n@@ -983,8 +983,8 @@ struct EncodeVisitor<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.index.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.index.tcx.map)\n     }\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n         intravisit::walk_expr(self, ex);"}, {"sha": "ecc978542e127cb9de6f86d8a445a55ad524b732", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -30,7 +30,7 @@ use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::hir;\n-use rustc::hir::intravisit::{self, FnKind, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, FnKind, Visitor};\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -144,8 +144,8 @@ impl<'a, 'gcx> BuildMir<'a, 'gcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     // Const and static items."}, {"sha": "5946c3840e47178b17c879668b08500b952716c2", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -48,7 +48,7 @@ use rustc::lint::builtin::CONST_ERR;\n use rustc::hir::{self, PatKind};\n use syntax::ast;\n use syntax_pos::Span;\n-use rustc::hir::intravisit::{self, FnKind, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, FnKind, Visitor};\n \n use std::collections::hash_map::Entry;\n use std::cmp::Ordering;\n@@ -233,8 +233,8 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     fn visit_item(&mut self, i: &'tcx hir::Item) {"}, {"sha": "8c51a50526c7dc72e3eec9568032ac0f856209ed", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -106,7 +106,7 @@ impl<'k> StatCollector<'k> {\n }\n \n impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'v>, hir_visit::NestedVisitMode)> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n "}, {"sha": "a2c261a36a606dbc051f79bacf8bd868598a6fe9", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -13,7 +13,7 @@ use rustc::session::Session;\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -60,8 +60,8 @@ pub fn check_crate(sess: &Session, map: &Map) {\n }\n \n impl<'a, 'ast> Visitor<'ast> for CheckLoopVisitor<'a, 'ast> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'ast>, NestedVisitMode)> {\n-        Some((&self.hir_map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> {\n+        Some(&self.map)\n     }\n \n     fn visit_item(&mut self, i: &'ast hir::Item) {"}, {"sha": "3e2b2b62fa822566e1590da07a8256819cb369e0", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n use rustc::traits::Reveal;\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor};\n use syntax::ast;\n use syntax_pos::Span;\n \n@@ -32,8 +32,8 @@ struct RvalueContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for RvalueContext<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     fn visit_fn(&mut self,"}, {"sha": "f8d7e100dabf125aeda1017dad151b239119eb77", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -20,7 +20,7 @@ use rustc::util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax_pos::Span;\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir;\n \n use std::cell::RefCell;\n@@ -36,6 +36,8 @@ struct CheckCrateVisitor<'a, 'ast: 'a> {\n }\n \n impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> { None }\n+\n     fn visit_item(&mut self, it: &'ast hir::Item) {\n         match it.node {\n             hir::ItemStatic(..) |\n@@ -200,8 +202,8 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n }\n \n impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'ast>, NestedVisitMode)> {\n-        Some((&self.ast_map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> {\n+        Some(&self.ast_map)\n     }\n \n     fn visit_item(&mut self, it: &'ast hir::Item) {"}, {"sha": "644f681a6dac3c6f63ed8d7e7f0199441b620bc3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -120,10 +120,12 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::All))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n+    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n+\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let inherited_item_level = match item.node {\n             // Impls inherit level from their types and traits\n@@ -432,10 +434,12 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for PrivacyVisitor<'a, 'tcx> {\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::All))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n+    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n+\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let orig_curitem = replace(&mut self.curitem, item.id);\n         intravisit::walk_item(self, item);\n@@ -615,6 +619,8 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+\n     fn visit_ty(&mut self, ty: &hir::Ty) {\n         if let hir::TyPath(hir::QPath::Resolved(_, ref path)) = ty.node {\n             if self.inner.path_is_private_type(path) {\n@@ -640,10 +646,12 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a\n impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::All))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.tcx.map)\n     }\n \n+    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n+\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n             // contents of a private mod can be reexported, so we need"}, {"sha": "bdd8d00acd41fc92be3f3077d6ca55628ec7f57c", "filename": "src/librustc_trans/symbol_names_test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_names_test.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -67,6 +67,8 @@ impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for SymbolNamesTest<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> { None }\n+\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         self.process_attrs(item.id);\n         intravisit::walk_item(self, item);"}, {"sha": "2909f9210095b69780a74440fdb20db713bfa52a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -119,7 +119,7 @@ use syntax::symbol::{Symbol, InternedString, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{self, BytePos, Span};\n \n-use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, PatKind};\n use rustc::hir::print as pprust;\n@@ -538,8 +538,8 @@ struct CheckItemTypesVisitor<'a, 'tcx: 'a> { ccx: &'a CrateCtxt<'a, 'tcx> }\n struct CheckItemBodiesVisitor<'a, 'tcx: 'a> { ccx: &'a CrateCtxt<'a, 'tcx> }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.ccx.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.ccx.tcx.map)\n     }\n \n     fn visit_item(&mut self, i: &'tcx hir::Item) {\n@@ -700,6 +700,8 @@ impl<'a, 'gcx, 'tcx> GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> { None }\n+\n     // Add explicitly-declared locals.\n     fn visit_local(&mut self, local: &'gcx hir::Local) {\n         let o_ty = match local.ty {"}, {"sha": "3d39aed2e16d89c93af3739d4055aeb01a00dd23", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -99,7 +99,7 @@ use std::mem;\n use std::ops::Deref;\n use syntax::ast;\n use syntax_pos::Span;\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::{self, PatKind};\n \n use self::SubjectNode::Subject;\n@@ -480,8 +480,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for RegionCtxt<'a, 'gcx, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'gcx>, NestedVisitMode)> {\n-        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n+        Some(&self.tcx.map)\n     }\n \n     fn visit_fn(&mut self, _fk: intravisit::FnKind<'gcx>, fd: &'gcx hir::FnDecl,"}, {"sha": "92432c0e55f8afaf2a041ab9ba7ffbc7798660de", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -50,7 +50,7 @@ use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor};\n use rustc::util::nodemap::NodeMap;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -78,8 +78,8 @@ struct SeedBorrowKind<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for SeedBorrowKind<'a, 'gcx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'gcx>, NestedVisitMode)> {\n-        Some((&self.fcx.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n+        Some(&self.fcx.tcx.map)\n     }\n \n     fn visit_expr(&mut self, expr: &'gcx hir::Expr) {\n@@ -490,8 +490,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for AdjustBorrowKind<'a, 'gcx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'gcx>, NestedVisitMode)> {\n-        Some((&self.fcx.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n+        Some(&self.fcx.tcx.map)\n     }\n \n     fn visit_fn(&mut self,"}, {"sha": "bb06847f7bed8ca30e9c1471be6ba557ed4ebd91", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -609,6 +609,8 @@ fn reject_shadowing_type_parameters(tcx: TyCtxt, span: Span, def_id: DefId) {\n }\n \n impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+\n     fn visit_item(&mut self, i: &hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n         self.check_item_well_formed(i);"}, {"sha": "6f95a3da29ed7afe48c56223a043527372a497b4", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -27,7 +27,7 @@ use syntax::ast;\n use syntax_pos::{DUMMY_SP, Span};\n \n use rustc::hir::print::pat_to_string;\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::{self, PatKind};\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -187,8 +187,8 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n // traffic in node-ids or update tables in the type context etc.\n \n impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'gcx>, NestedVisitMode)> {\n-        Some((&self.fcx.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n+        Some(&self.fcx.tcx.map)\n     }\n \n     fn visit_stmt(&mut self, s: &'gcx hir::Stmt) {"}, {"sha": "0ae0d8942955a75a753f6c250e8f1d53d952ba49", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f0ce5bb66bf2ebddebbee8ae93c15c1351ea2b86", "patch": "@@ -83,7 +83,7 @@ use syntax::symbol::{Symbol, keywords};\n use syntax_pos::Span;\n \n use rustc::hir::{self, map as hir_map, print as pprust};\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n \n@@ -178,8 +178,8 @@ impl<'a, 'tcx> CollectItemTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n-        Some((&self.ccx.tcx.map, NestedVisitMode::OnlyBodies))\n+    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+        Some(&self.ccx.tcx.map)\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {"}]}