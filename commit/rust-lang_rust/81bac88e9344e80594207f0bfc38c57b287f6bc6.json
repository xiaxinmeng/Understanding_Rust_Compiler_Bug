{"sha": "81bac88e9344e80594207f0bfc38c57b287f6bc6", "node_id": "C_kwDOAAsO6NoAKDgxYmFjODhlOTM0NGU4MDU5NDIwN2YwYmZjMzhjNTdiMjg3ZjZiYzY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-09T16:59:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-10T12:46:52Z"}, "message": "Directly encode ImplPolarity in metadata.", "tree": {"sha": "377c67c9cad948ec849873489c5e9eae81019df8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377c67c9cad948ec849873489c5e9eae81019df8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81bac88e9344e80594207f0bfc38c57b287f6bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81bac88e9344e80594207f0bfc38c57b287f6bc6", "html_url": "https://github.com/rust-lang/rust/commit/81bac88e9344e80594207f0bfc38c57b287f6bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81bac88e9344e80594207f0bfc38c57b287f6bc6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd38eea722c1f6f970a314435533e91cc2c14ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd38eea722c1f6f970a314435533e91cc2c14ffb", "html_url": "https://github.com/rust-lang/rust/commit/dd38eea722c1f6f970a314435533e91cc2c14ffb"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "5c7a1ccf6c2765047df551548b21a075afc698e3", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=81bac88e9344e80594207f0bfc38c57b287f6bc6", "patch": "@@ -5,6 +5,7 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]\n+#![feature(macro_metavar_expr)]\n #![feature(min_specialization)]\n #![feature(try_blocks)]\n #![feature(never_type)]"}, {"sha": "4d06a079f526c09bc3faed5c43fd67526a175d97", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=81bac88e9344e80594207f0bfc38c57b287f6bc6", "patch": "@@ -292,6 +292,12 @@ trait LazyQueryDecodable<'a, 'tcx, T> {\n     ) -> T;\n }\n \n+impl<'a, 'tcx, T> LazyQueryDecodable<'a, 'tcx, T> for Option<T> {\n+    fn decode_query(self, _: CrateMetadataRef<'a>, _: TyCtxt<'tcx>, err: impl FnOnce() -> !) -> T {\n+        if let Some(l) = self { l } else { err() }\n+    }\n+}\n+\n impl<'a, 'tcx, T> LazyQueryDecodable<'a, 'tcx, T> for Option<Lazy<T>>\n where\n     T: Decodable<DecodeContext<'a, 'tcx>>,"}, {"sha": "2b989ee2952f0559812b773bd629d40a3748549a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=81bac88e9344e80594207f0bfc38c57b287f6bc6", "patch": "@@ -1472,7 +1472,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 }\n \n                 let polarity = self.tcx.impl_polarity(def_id);\n-                record!(self.tables.impl_polarity[def_id] <- polarity);\n+                self.tables.impl_polarity.set(def_id.index, polarity);\n \n                 EntryKind::Impl\n             }"}, {"sha": "ffd21767f5ce095ceab85bdbae3707b1770e7e63", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=81bac88e9344e80594207f0bfc38c57b287f6bc6", "patch": "@@ -310,7 +310,7 @@ define_tables! {\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n     thir_abstract_const: Table<DefIndex, Lazy!(&'tcx [thir::abstract_const::Node<'tcx>])>,\n     impl_parent: Table<DefIndex, Lazy!(DefId)>,\n-    impl_polarity: Table<DefIndex, Lazy!(ty::ImplPolarity)>,\n+    impl_polarity: Table<DefIndex, ty::ImplPolarity>,\n     impl_constness: Table<DefIndex, Lazy!(hir::Constness)>,\n     impl_defaultness: Table<DefIndex, Lazy!(hir::Defaultness)>,\n     // FIXME(eddyb) perhaps compute this on the fly if cheap enough?"}, {"sha": "ca76afeffe0c59e64586dcbdd477817fd945b15e", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bac88e9344e80594207f0bfc38c57b287f6bc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=81bac88e9344e80594207f0bfc38c57b287f6bc6", "patch": "@@ -76,6 +76,43 @@ impl FixedSizeEncoding for u32 {\n     }\n }\n \n+macro_rules! fixed_size_enum {\n+    ($ty:ty { $(($($pat:tt)*))* }) => {\n+        impl FixedSizeEncoding for Option<$ty> {\n+            fixed_size_encoding_byte_len_and_defaults!(1);\n+\n+            #[inline]\n+            fn from_bytes(b: &[u8]) -> Self {\n+                use $ty::*;\n+                if b[0] == 0 {\n+                    return None;\n+                }\n+                match b[0] - 1 {\n+                    $(${index()} => Some($($pat)*),)*\n+                    _ => panic!(\"Unexpected ImplPolarity code: {:?}\", b[0]),\n+                }\n+            }\n+\n+            #[inline]\n+            fn write_to_bytes(self, b: &mut [u8]) {\n+                use $ty::*;\n+                b[0] = match self {\n+                    None => 0,\n+                    $(Some($($pat)*) => 1 + ${index()},)*\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fixed_size_enum! {\n+    ty::ImplPolarity {\n+        ( Positive    )\n+        ( Negative    )\n+        ( Reservation )\n+    }\n+}\n+\n // NOTE(eddyb) there could be an impl for `usize`, which would enable a more\n // generic `Lazy<T>` impl, but in the general case we might not need / want to\n // fit every `usize` in `u32`."}]}