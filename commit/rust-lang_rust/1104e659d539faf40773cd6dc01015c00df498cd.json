{"sha": "1104e659d539faf40773cd6dc01015c00df498cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMDRlNjU5ZDUzOWZhZjQwNzczY2Q2ZGMwMTAxNWMwMGRmNDk4Y2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-15T03:28:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-15T03:28:09Z"}, "message": "auto merge of #7144 : dotdash/rust/caches, r=graydon\n\nThe lookups for these items in external crates currently cause repeated\r\ndecoding of the EBML metadata, which is pretty slow. Adding caches to\r\navoid the repeated decoding reduces the time required for the type\r\nchecking of librustc by about 25%.", "tree": {"sha": "07b437b036b3bf1b0ddbdc5ffbdb1a90a2345096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b437b036b3bf1b0ddbdc5ffbdb1a90a2345096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1104e659d539faf40773cd6dc01015c00df498cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1104e659d539faf40773cd6dc01015c00df498cd", "html_url": "https://github.com/rust-lang/rust/commit/1104e659d539faf40773cd6dc01015c00df498cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1104e659d539faf40773cd6dc01015c00df498cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "104e6120b1161e6d242644c987b65525daa5ad5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/104e6120b1161e6d242644c987b65525daa5ad5a", "html_url": "https://github.com/rust-lang/rust/commit/104e6120b1161e6d242644c987b65525daa5ad5a"}, {"sha": "a710e619038c9ff96c332eedb72a8c77a3a370be", "url": "https://api.github.com/repos/rust-lang/rust/commits/a710e619038c9ff96c332eedb72a8c77a3a370be", "html_url": "https://github.com/rust-lang/rust/commit/a710e619038c9ff96c332eedb72a8c77a3a370be"}], "stats": {"total": 96, "additions": 53, "deletions": 43}, "files": [{"sha": "001f85f46f45848a0d9a1e55ac126e387cb58a9f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1104e659d539faf40773cd6dc01015c00df498cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1104e659d539faf40773cd6dc01015c00df498cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1104e659d539faf40773cd6dc01015c00df498cd", "patch": "@@ -3094,6 +3094,7 @@ pub fn trans_crate(sess: session::Session,\n               const_globals: @mut HashMap::new(),\n               const_values: @mut HashMap::new(),\n               extern_const_values: @mut HashMap::new(),\n+              impl_method_cache: @mut HashMap::new(),\n               module_data: @mut HashMap::new(),\n               lltypes: @mut HashMap::new(),\n               llsizingtypes: @mut HashMap::new(),"}, {"sha": "2c80ef7980da70d7a0aa3ccc24d9ad8fdea8b7b6", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1104e659d539faf40773cd6dc01015c00df498cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1104e659d539faf40773cd6dc01015c00df498cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1104e659d539faf40773cd6dc01015c00df498cd", "patch": "@@ -205,6 +205,8 @@ pub struct CrateContext {\n      // Cache of external const values\n      extern_const_values: @mut HashMap<ast::def_id, ValueRef>,\n \n+     impl_method_cache: @mut HashMap<(ast::def_id, ast::ident), ast::def_id>,\n+\n      module_data: @mut HashMap<~str, ValueRef>,\n      lltypes: @mut HashMap<ty::t, TypeRef>,\n      llsizingtypes: @mut HashMap<ty::t, TypeRef>,"}, {"sha": "93587d81dd682127df0040e2fb83bd503cfe017f", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1104e659d539faf40773cd6dc01015c00df498cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1104e659d539faf40773cd6dc01015c00df498cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=1104e659d539faf40773cd6dc01015c00df498cd", "patch": "@@ -381,35 +381,37 @@ pub fn method_from_methods(ms: &[@ast::method], name: ast::ident)\n pub fn method_with_name_or_default(ccx: @CrateContext,\n                                    impl_id: ast::def_id,\n                                    name: ast::ident) -> ast::def_id {\n-    if impl_id.crate == ast::local_crate {\n-        match ccx.tcx.items.get_copy(&impl_id.node) {\n-          ast_map::node_item(@ast::item {\n-                node: ast::item_impl(_, _, _, ref ms), _\n-          }, _) => {\n-              let did = method_from_methods(*ms, name);\n-              if did.is_some() {\n-                  return did.get();\n-              } else {\n-                  // Look for a default method\n-                  let pmm = ccx.tcx.provided_methods;\n-                  match pmm.find(&impl_id) {\n-                      Some(pmis) => {\n-                          for pmis.each |pmi| {\n-                              if pmi.method_info.ident == name {\n-                                  debug!(\"pmi.method_info.did = %?\", pmi.method_info.did);\n-                                  return pmi.method_info.did;\n-                              }\n-                          }\n-                          fail!()\n-                      }\n-                      None => fail!()\n-                  }\n-              }\n-          }\n-          _ => fail!(\"method_with_name\")\n+    *do ccx.impl_method_cache.find_or_insert_with((impl_id, name)) |_| {\n+        if impl_id.crate == ast::local_crate {\n+            match ccx.tcx.items.get_copy(&impl_id.node) {\n+                ast_map::node_item(@ast::item {\n+                                   node: ast::item_impl(_, _, _, ref ms), _\n+                                   }, _) => {\n+                    let did = method_from_methods(*ms, name);\n+                    if did.is_some() {\n+                        did.get()\n+                    } else {\n+                        // Look for a default method\n+                        let pmm = ccx.tcx.provided_methods;\n+                        match pmm.find(&impl_id) {\n+                            Some(pmis) => {\n+                                for pmis.each |pmi| {\n+                                    if pmi.method_info.ident == name {\n+                                        debug!(\"pmi.method_info.did = %?\", pmi.method_info.did);\n+                                        return pmi.method_info.did;\n+                                    }\n+                                }\n+                                fail!()\n+                            }\n+                            None => fail!()\n+                        }\n+                    }\n+                }\n+                _ => fail!(\"method_with_name\")\n+            }\n+        } else {\n+            csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n         }\n-    } else {\n-        csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n     }\n }\n "}, {"sha": "271bc6bfd6c9b90fc55ebe50a785f05cc9eb0396", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1104e659d539faf40773cd6dc01015c00df498cd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1104e659d539faf40773cd6dc01015c00df498cd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1104e659d539faf40773cd6dc01015c00df498cd", "patch": "@@ -271,6 +271,8 @@ struct ctxt_ {\n     // A cache for the trait_methods() routine\n     trait_methods_cache: @mut HashMap<def_id, @~[@Method]>,\n \n+    impl_trait_cache: @mut HashMap<ast::def_id, Option<@ty::TraitRef>>,\n+\n     trait_refs: @mut HashMap<node_id, @TraitRef>,\n     trait_defs: @mut HashMap<def_id, @TraitDef>,\n \n@@ -967,6 +969,7 @@ pub fn mk_ctxt(s: session::Session,\n         methods: @mut HashMap::new(),\n         trait_method_def_ids: @mut HashMap::new(),\n         trait_methods_cache: @mut HashMap::new(),\n+        impl_trait_cache: @mut HashMap::new(),\n         ty_param_defs: @mut HashMap::new(),\n         adjustments: @mut HashMap::new(),\n         normalized_cache: new_ty_hash(),\n@@ -3749,22 +3752,24 @@ pub fn trait_method_def_ids(cx: ctxt, id: ast::def_id) -> @~[def_id] {\n }\n \n pub fn impl_trait_ref(cx: ctxt, id: ast::def_id) -> Option<@TraitRef> {\n-    if id.crate == ast::local_crate {\n-        debug!(\"(impl_trait_ref) searching for trait impl %?\", id);\n-        match cx.items.find(&id.node) {\n-           Some(&ast_map::node_item(@ast::item {\n-                        node: ast::item_impl(_, opt_trait, _, _),\n-                        _},\n-                    _)) => {\n-               match opt_trait {\n-                   Some(t) => Some(ty::node_id_to_trait_ref(cx, t.ref_id)),\n-                   None => None\n-               }\n-           }\n-           _ => None\n+    *do cx.impl_trait_cache.find_or_insert_with(id) |_| {\n+        if id.crate == ast::local_crate {\n+            debug!(\"(impl_trait_ref) searching for trait impl %?\", id);\n+            match cx.items.find(&id.node) {\n+                Some(&ast_map::node_item(@ast::item {\n+                                         node: ast::item_impl(_, opt_trait, _, _),\n+                                         _},\n+                                         _)) => {\n+                    match opt_trait {\n+                        Some(t) => Some(ty::node_id_to_trait_ref(cx, t.ref_id)),\n+                        None => None\n+                    }\n+                }\n+                _ => None\n+            }\n+        } else {\n+            csearch::get_impl_trait(cx, id)\n         }\n-    } else {\n-        csearch::get_impl_trait(cx, id)\n     }\n }\n "}]}