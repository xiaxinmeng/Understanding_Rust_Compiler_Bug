{"sha": "edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "node_id": "C_kwDOAAsO6NoAKGVkZjc5Y2I4NmI1ZjFlNGQyZjI0MmM2MzE5MDlhM2E2YzllZWJmYTA", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-09-02T09:34:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-02T09:34:49Z"}, "message": "Rollup merge of #100552 - petrochenkov:flavorcompat, r=lqd\n\nrustc_target: Add a compatibility layer to separate internal and user-facing linker flavors\n\nI want to do some refactorings in `rustc_target` - merge `lld_flavor` and `linker_is_gnu` into `linker_flavor`, support combination gcc+lld (https://github.com/rust-lang/rust/pull/96827).\nThis PR adds some compatibility infra that makes that possible without making any changes to user-facing interfaces - `-Clinker-flavor` values and json target specs. (For json target specs this infra may eventually go away since they are not very stable.)\n\nThe second commit does some light refactoring of internal linker flavors (applies changes from https://github.com/petrochenkov/rust/commit/53eca42973b7e379b9fa0469c33f08680b57c35f that don't require mass-editing target specs).", "tree": {"sha": "52e22eeee3f69858227d793a320964eeee01ab00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e22eeee3f69858227d793a320964eeee01ab00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEc45CRBK7hj4Ov3rIwAAEe0IAKzclj/OQ58+aGMyYGeZxmRP\nvxNZXGHxC1yxVFJ5PAfJI+bIsRlJdgEmfoOwlBtv3GzUELOmjx2JXH3Sa6VYuNK1\nzzEq5/kiS6secJNAY8nW0UbACIlFpfDAzAtnhupqvUzl5k6qX6znuMNcEy3sk6To\nR6wQ2cepzdQ/LLqR+U9F+vl3YE1Z4+kKRFwAzbt1JXj6+o+K8mtMmaQ0lZUgOBEq\nMjWtaFZazuLETS6OijCMgGb5342J2lDc864H6Fnyl+CRrzLmdcoZYVDclb3Livy4\nP4T7CvApDikJvSdZs1YSV8pPkdSJquWNh9BrFQeXTV+CWv8YUs2js92HHHlxROU=\n=enEF\n-----END PGP SIGNATURE-----\n", "payload": "tree 52e22eeee3f69858227d793a320964eeee01ab00\nparent 1aaf9aec95a61b636c21b79702cfd4bd86be9379\nparent a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1662111289 +0200\ncommitter GitHub <noreply@github.com> 1662111289 +0200\n\nRollup merge of #100552 - petrochenkov:flavorcompat, r=lqd\n\nrustc_target: Add a compatibility layer to separate internal and user-facing linker flavors\n\nI want to do some refactorings in `rustc_target` - merge `lld_flavor` and `linker_is_gnu` into `linker_flavor`, support combination gcc+lld (https://github.com/rust-lang/rust/pull/96827).\nThis PR adds some compatibility infra that makes that possible without making any changes to user-facing interfaces - `-Clinker-flavor` values and json target specs. (For json target specs this infra may eventually go away since they are not very stable.)\n\nThe second commit does some light refactoring of internal linker flavors (applies changes from https://github.com/petrochenkov/rust/commit/53eca42973b7e379b9fa0469c33f08680b57c35f that don't require mass-editing target specs).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "html_url": "https://github.com/rust-lang/rust/commit/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aaf9aec95a61b636c21b79702cfd4bd86be9379", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aaf9aec95a61b636c21b79702cfd4bd86be9379", "html_url": "https://github.com/rust-lang/rust/commit/1aaf9aec95a61b636c21b79702cfd4bd86be9379"}, {"sha": "a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "html_url": "https://github.com/rust-lang/rust/commit/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8"}], "stats": {"total": 359, "additions": 211, "deletions": 148}, "files": [{"sha": "1ebe5bac203de79afc27868b9ae9a01fe211006d", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -1173,13 +1173,6 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n             // only the linker flavor is known; use the default linker for the selected flavor\n             (None, Some(flavor)) => Some((\n                 PathBuf::from(match flavor {\n-                    LinkerFlavor::Em => {\n-                        if cfg!(windows) {\n-                            \"emcc.bat\"\n-                        } else {\n-                            \"emcc\"\n-                        }\n-                    }\n                     LinkerFlavor::Gcc => {\n                         if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n                             // On historical Solaris systems, \"cc\" may have\n@@ -1194,11 +1187,17 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                         }\n                     }\n                     LinkerFlavor::Ld => \"ld\",\n-                    LinkerFlavor::Msvc => \"link.exe\",\n                     LinkerFlavor::Lld(_) => \"lld\",\n-                    LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n-                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n-                    LinkerFlavor::L4Bender => \"l4-bender\",\n+                    LinkerFlavor::Msvc => \"link.exe\",\n+                    LinkerFlavor::EmCc => {\n+                        if cfg!(windows) {\n+                            \"emcc.bat\"\n+                        } else {\n+                            \"emcc\"\n+                        }\n+                    }\n+                    LinkerFlavor::Bpf => \"bpf-linker\",\n+                    LinkerFlavor::Ptx => \"rust-ptx-linker\",\n                 }),\n                 flavor,\n             )),\n@@ -1208,7 +1207,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 });\n \n                 let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::Em\n+                    LinkerFlavor::EmCc\n                 } else if stem == \"gcc\"\n                     || stem.ends_with(\"-gcc\")\n                     || stem == \"clang\"\n@@ -1236,7 +1235,8 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     // linker and linker flavor specified via command line have precedence over what the target\n     // specification specifies\n-    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), sess.opts.cg.linker_flavor) {\n+    let linker_flavor = sess.opts.cg.linker_flavor.map(LinkerFlavor::from_cli);\n+    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), linker_flavor) {\n         return ret;\n     }\n \n@@ -2113,11 +2113,11 @@ fn add_order_independent_options(\n         });\n     }\n \n-    if flavor == LinkerFlavor::PtxLinker {\n+    if flavor == LinkerFlavor::Ptx {\n         // Provide the linker with fallback to internal `target-cpu`.\n         cmd.arg(\"--fallback-arch\");\n         cmd.arg(&codegen_results.crate_info.target_cpu);\n-    } else if flavor == LinkerFlavor::BpfLinker {\n+    } else if flavor == LinkerFlavor::Bpf {\n         cmd.arg(\"--cpu\");\n         cmd.arg(&codegen_results.crate_info.target_cpu);\n         cmd.arg(\"--cpu-features\");"}, {"sha": "8c6f526b054bc5ec213eddf5fac9d8505029d9d5", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -126,29 +126,26 @@ pub fn get_linker<'a>(\n     // to the linker args construction.\n     assert!(cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n     match flavor {\n-        LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n-            Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n-        }\n-        LinkerFlavor::Em => Box::new(EmLinker { cmd, sess }) as Box<dyn Linker>,\n         LinkerFlavor::Gcc => {\n             Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: false })\n                 as Box<dyn Linker>\n         }\n-\n+        LinkerFlavor::Ld if sess.target.os == \"l4re\" => {\n+            Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>\n+        }\n         LinkerFlavor::Lld(LldFlavor::Ld)\n         | LinkerFlavor::Lld(LldFlavor::Ld64)\n         | LinkerFlavor::Ld => {\n             Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: true })\n                 as Box<dyn Linker>\n         }\n-\n+        LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n+            Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n+        }\n         LinkerFlavor::Lld(LldFlavor::Wasm) => Box::new(WasmLd::new(cmd, sess)) as Box<dyn Linker>,\n-\n-        LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n-\n-        LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n-\n-        LinkerFlavor::L4Bender => Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>,\n+        LinkerFlavor::EmCc => Box::new(EmLinker { cmd, sess }) as Box<dyn Linker>,\n+        LinkerFlavor::Bpf => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n+        LinkerFlavor::Ptx => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n     }\n }\n "}, {"sha": "5df5ab3ddc032eb19ec354e3f1bcb012b8b32345", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -21,10 +21,8 @@ use rustc_session::{build_session, getopts, DiagnosticOutput, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n-use rustc_target::spec::{\n-    RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel,\n-};\n+use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, RelocModel};\n+use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel};\n \n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n@@ -552,7 +550,7 @@ fn test_codegen_options_tracking_hash() {\n     untracked!(link_args, vec![String::from(\"abc\"), String::from(\"def\")]);\n     untracked!(link_self_contained, Some(true));\n     untracked!(linker, Some(PathBuf::from(\"linker\")));\n-    untracked!(linker_flavor, Some(LinkerFlavor::Gcc));\n+    untracked!(linker_flavor, Some(LinkerFlavorCli::Gcc));\n     untracked!(no_stack_check, true);\n     untracked!(remark, Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]));\n     untracked!(rpath, true);"}, {"sha": "d4d29288f7f28147c647886c1672674adfbcd605", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -12,8 +12,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use rustc_data_structures::stable_hasher::ToStableHashKey;\n use rustc_target::abi::{Align, TargetDataLayout};\n-use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n-use rustc_target::spec::{PanicStrategy, SanitizerSet, TARGETS};\n+use rustc_target::spec::{PanicStrategy, SanitizerSet, SplitDebuginfo};\n+use rustc_target::spec::{Target, TargetTriple, TargetWarnings, TARGETS};\n \n use crate::parse::{CrateCheckConfig, CrateConfig};\n use rustc_feature::UnstableFeatures;\n@@ -2379,16 +2379,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n-    if cg.linker_flavor == Some(LinkerFlavor::L4Bender)\n-        && !nightly_options::is_unstable_enabled(matches)\n-    {\n-        early_error(\n-            error_format,\n-            \"`l4-bender` linker flavor is unstable, `-Z unstable-options` \\\n-             flag must also be passed to explicitly use it\",\n-        );\n-    }\n-\n     let prints = collect_print_requests(&mut cg, &mut unstable_opts, matches, error_format);\n \n     let cg = cg;"}, {"sha": "9f07394b61ab8fc0808ee5397d4bfd7e20b5deec", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -5,7 +5,7 @@ use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLib;\n use rustc_errors::LanguageIdentifier;\n-use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy, SanitizerSet};\n+use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{\n     RelocModel, RelroLevel, SplitDebuginfo, StackProtector, TargetTriple, TlsModel,\n };\n@@ -382,7 +382,7 @@ mod desc {\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n     pub const parse_cfprotection: &str = \"`none`|`no`|`n` (default), `branch`, `return`, or `full`|`yes`|`y` (equivalent to `branch` and `return`)\";\n     pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n-    pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n+    pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavorCli::one_of();\n     pub const parse_optimization_fuel: &str = \"crate=integer\";\n     pub const parse_mir_spanview: &str = \"`statement` (default), `terminator`, or `block`\";\n     pub const parse_instrument_coverage: &str =\n@@ -763,8 +763,8 @@ mod parse {\n         true\n     }\n \n-    pub(crate) fn parse_linker_flavor(slot: &mut Option<LinkerFlavor>, v: Option<&str>) -> bool {\n-        match v.and_then(LinkerFlavor::from_str) {\n+    pub(crate) fn parse_linker_flavor(slot: &mut Option<LinkerFlavorCli>, v: Option<&str>) -> bool {\n+        match v.and_then(LinkerFlavorCli::from_str) {\n             Some(lf) => *slot = Some(lf),\n             _ => return false,\n         }\n@@ -1139,7 +1139,7 @@ options! {\n         on C toolchain installed in the system\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"system linker to link outputs with\"),\n-    linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n+    linker_flavor: Option<LinkerFlavorCli> = (None, parse_linker_flavor, [UNTRACKED],\n         \"linker flavor\"),\n     linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n         parse_linker_plugin_lto, [TRACKED],"}, {"sha": "f492c3451a4182dcb18dbf991980f5089cd27a39", "filename": "compiler/rustc_target/src/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -2,6 +2,6 @@ use super::{wasm32_unknown_emscripten, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut target = wasm32_unknown_emscripten::target();\n-    target.add_post_link_args(LinkerFlavor::Em, &[\"-sWASM=0\", \"--memory-init-file\", \"0\"]);\n+    target.add_post_link_args(LinkerFlavor::EmCc, &[\"-sWASM=0\", \"--memory-init-file\", \"0\"]);\n     target\n }"}, {"sha": "baf36587147a690d4ecbeba0066468e4f5af6c2f", "filename": "compiler/rustc_target/src/spec/bpf_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -5,7 +5,7 @@ pub fn opts(endian: Endian) -> TargetOptions {\n     TargetOptions {\n         allow_asm: true,\n         endian,\n-        linker_flavor: LinkerFlavor::BpfLinker,\n+        linker_flavor: LinkerFlavor::Bpf,\n         atomic_cas: false,\n         dynamic_linking: true,\n         no_builtins: true,"}, {"sha": "b7bc1072bf3280c0b496ce057c09dabef754f47f", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -4,7 +4,7 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"l4re\".into(),\n         env: \"uclibc\".into(),\n-        linker_flavor: LinkerFlavor::L4Bender,\n+        linker_flavor: LinkerFlavor::Ld,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"l4-bender\".into()),\n         linker_is_gnu: false,"}, {"sha": "47eb5fc6a1dcbc6d5beac04d65a6fae9d2709b49", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 158, "deletions": 78, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -92,14 +92,24 @@ mod windows_uwp_msvc_base;\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LinkerFlavor {\n-    Em,\n     Gcc,\n-    L4Bender,\n     Ld,\n+    Lld(LldFlavor),\n     Msvc,\n+    EmCc,\n+    Bpf,\n+    Ptx,\n+}\n+\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+pub enum LinkerFlavorCli {\n+    Gcc,\n+    Ld,\n     Lld(LldFlavor),\n-    PtxLinker,\n+    Msvc,\n+    Em,\n     BpfLinker,\n+    PtxLinker,\n }\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n@@ -137,19 +147,40 @@ impl ToJson for LldFlavor {\n     }\n }\n \n-impl ToJson for LinkerFlavor {\n-    fn to_json(&self) -> Json {\n-        self.desc().to_json()\n+impl LinkerFlavor {\n+    pub fn from_cli(cli: LinkerFlavorCli) -> LinkerFlavor {\n+        match cli {\n+            LinkerFlavorCli::Gcc => LinkerFlavor::Gcc,\n+            LinkerFlavorCli::Ld => LinkerFlavor::Ld,\n+            LinkerFlavorCli::Lld(lld_flavor) => LinkerFlavor::Lld(lld_flavor),\n+            LinkerFlavorCli::Msvc => LinkerFlavor::Msvc,\n+            LinkerFlavorCli::Em => LinkerFlavor::EmCc,\n+            LinkerFlavorCli::BpfLinker => LinkerFlavor::Bpf,\n+            LinkerFlavorCli::PtxLinker => LinkerFlavor::Ptx,\n+        }\n+    }\n+\n+    fn to_cli(self) -> LinkerFlavorCli {\n+        match self {\n+            LinkerFlavor::Gcc => LinkerFlavorCli::Gcc,\n+            LinkerFlavor::Ld => LinkerFlavorCli::Ld,\n+            LinkerFlavor::Lld(lld_flavor) => LinkerFlavorCli::Lld(lld_flavor),\n+            LinkerFlavor::Msvc => LinkerFlavorCli::Msvc,\n+            LinkerFlavor::EmCc => LinkerFlavorCli::Em,\n+            LinkerFlavor::Bpf => LinkerFlavorCli::BpfLinker,\n+            LinkerFlavor::Ptx => LinkerFlavorCli::PtxLinker,\n+        }\n     }\n }\n-macro_rules! flavor_mappings {\n-    ($((($($flavor:tt)*), $string:expr),)*) => (\n-        impl LinkerFlavor {\n+\n+macro_rules! linker_flavor_cli_impls {\n+    ($(($($flavor:tt)*) $string:literal)*) => (\n+        impl LinkerFlavorCli {\n             pub const fn one_of() -> &'static str {\n                 concat!(\"one of: \", $($string, \" \",)*)\n             }\n \n-            pub fn from_str(s: &str) -> Option<Self> {\n+            pub fn from_str(s: &str) -> Option<LinkerFlavorCli> {\n                 Some(match s {\n                     $($string => $($flavor)*,)*\n                     _ => return None,\n@@ -165,18 +196,23 @@ macro_rules! flavor_mappings {\n     )\n }\n \n-flavor_mappings! {\n-    ((LinkerFlavor::Em), \"em\"),\n-    ((LinkerFlavor::Gcc), \"gcc\"),\n-    ((LinkerFlavor::L4Bender), \"l4-bender\"),\n-    ((LinkerFlavor::Ld), \"ld\"),\n-    ((LinkerFlavor::Msvc), \"msvc\"),\n-    ((LinkerFlavor::PtxLinker), \"ptx-linker\"),\n-    ((LinkerFlavor::BpfLinker), \"bpf-linker\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Link)), \"lld-link\"),\n+linker_flavor_cli_impls! {\n+    (LinkerFlavorCli::Gcc) \"gcc\"\n+    (LinkerFlavorCli::Ld) \"ld\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Ld)) \"ld.lld\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Ld64)) \"ld64.lld\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Link)) \"lld-link\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Wasm)) \"wasm-ld\"\n+    (LinkerFlavorCli::Msvc) \"msvc\"\n+    (LinkerFlavorCli::Em) \"em\"\n+    (LinkerFlavorCli::BpfLinker) \"bpf-linker\"\n+    (LinkerFlavorCli::PtxLinker) \"ptx-linker\"\n+}\n+\n+impl ToJson for LinkerFlavorCli {\n+    fn to_json(&self) -> Json {\n+        self.desc().to_json()\n+    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Hash, Encodable, Decodable, HashStable_Generic)]\n@@ -467,6 +503,7 @@ impl fmt::Display for LinkOutputKind {\n }\n \n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<StaticCow<str>>>;\n+pub type LinkArgsCli = BTreeMap<LinkerFlavorCli, Vec<StaticCow<str>>>;\n \n /// Which kind of debuginfo does the target use?\n ///\n@@ -1210,19 +1247,21 @@ pub struct TargetOptions {\n     pub abi: StaticCow<str>,\n     /// Vendor name to use for conditional compilation (`target_vendor`). Defaults to \"unknown\".\n     pub vendor: StaticCow<str>,\n-    /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n-    /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n-    pub linker_flavor: LinkerFlavor,\n \n     /// Linker to invoke\n     pub linker: Option<StaticCow<str>>,\n-\n+    /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n+    /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n+    pub linker_flavor: LinkerFlavor,\n+    linker_flavor_json: LinkerFlavorCli,\n     /// LLD flavor used if `lld` (or `rust-lld`) is specified as a linker\n     /// without clarifying its flavor in any way.\n+    /// FIXME: Merge this into `LinkerFlavor`.\n     pub lld_flavor: LldFlavor,\n+    /// Whether the linker support GNU-like arguments such as -O. Defaults to true.\n+    /// FIXME: Merge this into `LinkerFlavor`.\n+    pub linker_is_gnu: bool,\n \n-    /// Linker arguments that are passed *before* any user-defined libraries.\n-    pub pre_link_args: LinkArgs,\n     /// Objects to link before and after all other object code.\n     pub pre_link_objects: CrtObjects,\n     pub post_link_objects: CrtObjects,\n@@ -1231,24 +1270,31 @@ pub struct TargetOptions {\n     pub post_link_objects_self_contained: CrtObjects,\n     pub link_self_contained: LinkSelfContainedDefault,\n \n+    /// Linker arguments that are passed *before* any user-defined libraries.\n+    pub pre_link_args: LinkArgs,\n+    pre_link_args_json: LinkArgsCli,\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post-link objects. Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n+    late_link_args_json: LinkArgsCli,\n     /// Linker arguments used in addition to `late_link_args` if at least one\n     /// Rust dependency is dynamically linked.\n     pub late_link_args_dynamic: LinkArgs,\n+    late_link_args_dynamic_json: LinkArgsCli,\n     /// Linker arguments used in addition to `late_link_args` if all Rust\n     /// dependencies are statically linked.\n     pub late_link_args_static: LinkArgs,\n+    late_link_args_static_json: LinkArgsCli,\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n+    post_link_args_json: LinkArgsCli,\n+\n     /// Optional link script applied to `dylib` and `executable` crate types.\n     /// This is a string containing the script, not a path. Can only be applied\n     /// to linkers where `linker_is_gnu` is true.\n     pub link_script: Option<StaticCow<str>>,\n-\n     /// Environment variables to be set for the linker invocation.\n     pub link_env: StaticCow<[(StaticCow<str>, StaticCow<str>)]>,\n     /// Environment variables to be removed for the linker invocation.\n@@ -1333,8 +1379,6 @@ pub struct TargetOptions {\n     /// Default supported version of DWARF on this platform.\n     /// Useful because some platforms (osx, bsd) only want up to DWARF2.\n     pub default_dwarf_version: u32,\n-    /// Whether the linker support GNU-like arguments such as -O. Defaults to true.\n-    pub linker_is_gnu: bool,\n     /// The MinGW toolchain has a known issue that prevents it from correctly\n     /// handling COFF object files with more than 2<sup>15</sup> sections. Since each weak\n     /// symbol needs its own COMDAT section, weak linkage implies a large\n@@ -1532,11 +1576,7 @@ fn add_link_args(link_args: &mut LinkArgs, flavor: LinkerFlavor, args: &[&'stati\n         LinkerFlavor::Lld(lld_flavor) => {\n             panic!(\"add_link_args: use non-LLD flavor for {:?}\", lld_flavor)\n         }\n-        LinkerFlavor::Gcc\n-        | LinkerFlavor::Em\n-        | LinkerFlavor::L4Bender\n-        | LinkerFlavor::BpfLinker\n-        | LinkerFlavor::PtxLinker => {}\n+        LinkerFlavor::Gcc | LinkerFlavor::EmCc | LinkerFlavor::Bpf | LinkerFlavor::Ptx => {}\n     }\n }\n \n@@ -1554,6 +1594,36 @@ impl TargetOptions {\n     fn add_post_link_args(&mut self, flavor: LinkerFlavor, args: &[&'static str]) {\n         add_link_args(&mut self.post_link_args, flavor, args);\n     }\n+\n+    fn update_from_cli(&mut self) {\n+        self.linker_flavor = LinkerFlavor::from_cli(self.linker_flavor_json);\n+        for (args, args_json) in [\n+            (&mut self.pre_link_args, &self.pre_link_args_json),\n+            (&mut self.late_link_args, &self.late_link_args_json),\n+            (&mut self.late_link_args_dynamic, &self.late_link_args_dynamic_json),\n+            (&mut self.late_link_args_static, &self.late_link_args_static_json),\n+            (&mut self.post_link_args, &self.post_link_args_json),\n+        ] {\n+            *args = args_json\n+                .iter()\n+                .map(|(flavor, args)| (LinkerFlavor::from_cli(*flavor), args.clone()))\n+                .collect();\n+        }\n+    }\n+\n+    fn update_to_cli(&mut self) {\n+        self.linker_flavor_json = self.linker_flavor.to_cli();\n+        for (args, args_json) in [\n+            (&self.pre_link_args, &mut self.pre_link_args_json),\n+            (&self.late_link_args, &mut self.late_link_args_json),\n+            (&self.late_link_args_dynamic, &mut self.late_link_args_dynamic_json),\n+            (&self.late_link_args_static, &mut self.late_link_args_static_json),\n+            (&self.post_link_args, &mut self.post_link_args_json),\n+        ] {\n+            *args_json =\n+                args.iter().map(|(flavor, args)| (flavor.to_cli(), args.clone())).collect();\n+        }\n+    }\n }\n \n impl Default for TargetOptions {\n@@ -1568,11 +1638,11 @@ impl Default for TargetOptions {\n             env: \"\".into(),\n             abi: \"\".into(),\n             vendor: \"unknown\".into(),\n-            linker_flavor: LinkerFlavor::Gcc,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.into()),\n+            linker_flavor: LinkerFlavor::Gcc,\n+            linker_flavor_json: LinkerFlavorCli::Gcc,\n             lld_flavor: LldFlavor::Ld,\n-            pre_link_args: LinkArgs::new(),\n-            post_link_args: LinkArgs::new(),\n+            linker_is_gnu: true,\n             link_script: None,\n             asm_args: cvs![],\n             cpu: \"generic\".into(),\n@@ -1599,7 +1669,6 @@ impl Default for TargetOptions {\n             is_like_msvc: false,\n             is_like_wasm: false,\n             default_dwarf_version: 4,\n-            linker_is_gnu: true,\n             allows_weak_linkage: true,\n             has_rpath: false,\n             no_default_libraries: true,\n@@ -1612,9 +1681,16 @@ impl Default for TargetOptions {\n             pre_link_objects_self_contained: Default::default(),\n             post_link_objects_self_contained: Default::default(),\n             link_self_contained: LinkSelfContainedDefault::False,\n+            pre_link_args: LinkArgs::new(),\n+            pre_link_args_json: LinkArgsCli::new(),\n             late_link_args: LinkArgs::new(),\n+            late_link_args_json: LinkArgsCli::new(),\n             late_link_args_dynamic: LinkArgs::new(),\n+            late_link_args_dynamic_json: LinkArgsCli::new(),\n             late_link_args_static: LinkArgs::new(),\n+            late_link_args_static_json: LinkArgsCli::new(),\n+            post_link_args: LinkArgs::new(),\n+            post_link_args_json: LinkArgsCli::new(),\n             link_env: cvs![],\n             link_env_remove: cvs![],\n             archive_format: \"gnu\".into(),\n@@ -2019,13 +2095,13 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n-            ($key_name:ident, LinkerFlavor) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n-                    match LinkerFlavor::from_str(s) {\n+            ($key_name:ident = $json_name:expr, LinkerFlavor) => ( {\n+                let name = $json_name;\n+                obj.remove(name).and_then(|o| o.as_str().and_then(|s| {\n+                    match LinkerFlavorCli::from_str(s) {\n                         Some(linker_flavor) => base.$key_name = linker_flavor,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for linker-flavor. \\\n-                                                      Use {}\", s, LinkerFlavor::one_of()))),\n+                                                      Use {}\", s, LinkerFlavorCli::one_of()))),\n                     }\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n@@ -2106,14 +2182,14 @@ impl Target {\n                     base.$key_name = args;\n                 }\n             } );\n-            ($key_name:ident, link_args) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(val) = obj.remove(&name) {\n+            ($key_name:ident = $json_name:expr, link_args) => ( {\n+                let name = $json_name;\n+                if let Some(val) = obj.remove(name) {\n                     let obj = val.as_object().ok_or_else(|| format!(\"{}: expected a \\\n                         JSON object with fields per linker-flavor.\", name))?;\n-                    let mut args = LinkArgs::new();\n+                    let mut args = LinkArgsCli::new();\n                     for (k, v) in obj {\n-                        let flavor = LinkerFlavor::from_str(&k).ok_or_else(|| {\n+                        let flavor = LinkerFlavorCli::from_str(&k).ok_or_else(|| {\n                             format!(\"{}: '{}' is not a valid value for linker-flavor. \\\n                                      Use 'em', 'gcc', 'ld' or 'msvc'\", name, k)\n                         })?;\n@@ -2199,19 +2275,20 @@ impl Target {\n         key!(env);\n         key!(abi);\n         key!(vendor);\n-        key!(linker_flavor, LinkerFlavor)?;\n         key!(linker, optional);\n+        key!(linker_flavor_json = \"linker-flavor\", LinkerFlavor)?;\n         key!(lld_flavor, LldFlavor)?;\n+        key!(linker_is_gnu, bool);\n         key!(pre_link_objects = \"pre-link-objects\", link_objects);\n         key!(post_link_objects = \"post-link-objects\", link_objects);\n         key!(pre_link_objects_self_contained = \"pre-link-objects-fallback\", link_objects);\n         key!(post_link_objects_self_contained = \"post-link-objects-fallback\", link_objects);\n         key!(link_self_contained = \"crt-objects-fallback\", link_self_contained)?;\n-        key!(pre_link_args, link_args);\n-        key!(late_link_args, link_args);\n-        key!(late_link_args_dynamic, link_args);\n-        key!(late_link_args_static, link_args);\n-        key!(post_link_args, link_args);\n+        key!(pre_link_args_json = \"pre-link-args\", link_args);\n+        key!(late_link_args_json = \"late-link-args\", link_args);\n+        key!(late_link_args_dynamic_json = \"late-link-args-dynamic\", link_args);\n+        key!(late_link_args_static_json = \"late-link-args-static\", link_args);\n+        key!(post_link_args_json = \"post-link-args\", link_args);\n         key!(link_script, optional);\n         key!(link_env, env);\n         key!(link_env_remove, list);\n@@ -2239,7 +2316,6 @@ impl Target {\n         key!(is_like_msvc, bool);\n         key!(is_like_wasm, bool);\n         key!(default_dwarf_version, u32);\n-        key!(linker_is_gnu, bool);\n         key!(allows_weak_linkage, bool);\n         key!(has_rpath, bool);\n         key!(no_default_libraries, bool);\n@@ -2296,6 +2372,8 @@ impl Target {\n             // This can cause unfortunate ICEs later down the line.\n             return Err(\"may not set is_builtin for targets not built-in\".into());\n         }\n+        base.update_from_cli();\n+\n         // Each field should have been read using `Json::remove` so any keys remaining are unused.\n         let remaining_keys = obj.keys();\n         Ok((\n@@ -2387,42 +2465,44 @@ impl ToJson for Target {\n     fn to_json(&self) -> Json {\n         let mut d = serde_json::Map::new();\n         let default: TargetOptions = Default::default();\n+        let mut target = self.clone();\n+        target.update_to_cli();\n \n         macro_rules! target_val {\n             ($attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                d.insert(name, self.$attr.to_json());\n+                d.insert(name, target.$attr.to_json());\n             }};\n         }\n \n         macro_rules! target_option_val {\n             ($attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.$attr {\n-                    d.insert(name, self.$attr.to_json());\n+                if default.$attr != target.$attr {\n+                    d.insert(name, target.$attr.to_json());\n                 }\n             }};\n-            ($attr:ident, $key_name:expr) => {{\n-                let name = $key_name;\n-                if default.$attr != self.$attr {\n-                    d.insert(name.into(), self.$attr.to_json());\n+            ($attr:ident, $json_name:expr) => {{\n+                let name = $json_name;\n+                if default.$attr != target.$attr {\n+                    d.insert(name.into(), target.$attr.to_json());\n                 }\n             }};\n-            (link_args - $attr:ident) => {{\n-                let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.$attr {\n-                    let obj = self\n+            (link_args - $attr:ident, $json_name:expr) => {{\n+                let name = $json_name;\n+                if default.$attr != target.$attr {\n+                    let obj = target\n                         .$attr\n                         .iter()\n                         .map(|(k, v)| (k.desc().to_string(), v.clone()))\n                         .collect::<BTreeMap<_, _>>();\n-                    d.insert(name, obj.to_json());\n+                    d.insert(name.to_string(), obj.to_json());\n                 }\n             }};\n             (env - $attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.$attr {\n-                    let obj = self\n+                if default.$attr != target.$attr {\n+                    let obj = target\n                         .$attr\n                         .iter()\n                         .map(|&(ref k, ref v)| format!(\"{k}={v}\"))\n@@ -2444,19 +2524,20 @@ impl ToJson for Target {\n         target_option_val!(env);\n         target_option_val!(abi);\n         target_option_val!(vendor);\n-        target_option_val!(linker_flavor);\n         target_option_val!(linker);\n+        target_option_val!(linker_flavor_json, \"linker-flavor\");\n         target_option_val!(lld_flavor);\n+        target_option_val!(linker_is_gnu);\n         target_option_val!(pre_link_objects);\n         target_option_val!(post_link_objects);\n         target_option_val!(pre_link_objects_self_contained, \"pre-link-objects-fallback\");\n         target_option_val!(post_link_objects_self_contained, \"post-link-objects-fallback\");\n         target_option_val!(link_self_contained, \"crt-objects-fallback\");\n-        target_option_val!(link_args - pre_link_args);\n-        target_option_val!(link_args - late_link_args);\n-        target_option_val!(link_args - late_link_args_dynamic);\n-        target_option_val!(link_args - late_link_args_static);\n-        target_option_val!(link_args - post_link_args);\n+        target_option_val!(link_args - pre_link_args_json, \"pre-link-args\");\n+        target_option_val!(link_args - late_link_args_json, \"late-link-args\");\n+        target_option_val!(link_args - late_link_args_dynamic_json, \"late-link-args-dynamic\");\n+        target_option_val!(link_args - late_link_args_static_json, \"late-link-args-static\");\n+        target_option_val!(link_args - post_link_args_json, \"post-link-args\");\n         target_option_val!(link_script);\n         target_option_val!(env - link_env);\n         target_option_val!(link_env_remove);\n@@ -2485,7 +2566,6 @@ impl ToJson for Target {\n         target_option_val!(is_like_msvc);\n         target_option_val!(is_like_wasm);\n         target_option_val!(default_dwarf_version);\n-        target_option_val!(linker_is_gnu);\n         target_option_val!(allows_weak_linkage);\n         target_option_val!(has_rpath);\n         target_option_val!(no_default_libraries);"}, {"sha": "6ab3a8b7eb5a06f688bc5505f1f0ddb9e6301bb8", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             os: \"cuda\".into(),\n             vendor: \"nvidia\".into(),\n-            linker_flavor: LinkerFlavor::PtxLinker,\n+            linker_flavor: LinkerFlavor::Ptx,\n             // The linker can be installed from `crates.io`.\n             linker: Some(\"rust-ptx-linker\".into()),\n             linker_is_gnu: false,"}, {"sha": "d03f959076de0c0ab5fe7691c1f70daf5756d2ab", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -2,9 +2,11 @@ use super::super::*;\n use std::assert_matches::assert_matches;\n \n // Test target self-consistency and JSON encoding/decoding roundtrip.\n-pub(super) fn test_target(target: Target, triple: &str) {\n+pub(super) fn test_target(mut target: Target, triple: &str) {\n+    let recycled_target = Target::from_json(target.to_json()).map(|(j, _)| j);\n+    target.update_to_cli();\n     target.check_consistency(triple);\n-    assert_eq!(Target::from_json(target.to_json()).map(|(j, _)| j), Ok(target));\n+    assert_eq!(recycled_target, Ok(target));\n }\n \n impl Target {\n@@ -22,10 +24,9 @@ impl Target {\n         assert_eq!(self.is_like_osx, matches!(self.lld_flavor, LldFlavor::Ld64));\n         assert_eq!(self.is_like_msvc, matches!(self.lld_flavor, LldFlavor::Link));\n         assert_eq!(self.is_like_wasm, matches!(self.lld_flavor, LldFlavor::Wasm));\n-        assert_eq!(self.os == \"l4re\", matches!(self.linker_flavor, LinkerFlavor::L4Bender));\n-        assert_eq!(self.os == \"emscripten\", matches!(self.linker_flavor, LinkerFlavor::Em));\n-        assert_eq!(self.arch == \"bpf\", matches!(self.linker_flavor, LinkerFlavor::BpfLinker));\n-        assert_eq!(self.arch == \"nvptx64\", matches!(self.linker_flavor, LinkerFlavor::PtxLinker));\n+        assert_eq!(self.os == \"emscripten\", matches!(self.linker_flavor, LinkerFlavor::EmCc));\n+        assert_eq!(self.arch == \"bpf\", matches!(self.linker_flavor, LinkerFlavor::Bpf));\n+        assert_eq!(self.arch == \"nvptx64\", matches!(self.linker_flavor, LinkerFlavor::Ptx));\n \n         for args in [\n             &self.pre_link_args,\n@@ -65,17 +66,14 @@ impl Target {\n                             LinkerFlavor::Lld(LldFlavor::Wasm) | LinkerFlavor::Gcc\n                         )\n                     }\n-                    (LinkerFlavor::L4Bender, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::L4Bender)\n+                    (LinkerFlavor::EmCc, LldFlavor::Wasm) => {\n+                        assert_matches!(flavor, LinkerFlavor::EmCc)\n                     }\n-                    (LinkerFlavor::Em, LldFlavor::Wasm) => {\n-                        assert_matches!(flavor, LinkerFlavor::Em)\n+                    (LinkerFlavor::Bpf, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::Bpf)\n                     }\n-                    (LinkerFlavor::BpfLinker, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::BpfLinker)\n-                    }\n-                    (LinkerFlavor::PtxLinker, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::PtxLinker)\n+                    (LinkerFlavor::Ptx, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::Ptx)\n                     }\n                     flavors => unreachable!(\"unexpected flavor combination: {:?}\", flavors),\n                 }"}, {"sha": "6f77ef98c015df8c38dc5629d23fa5c496982be8", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=edf79cb86b5f1e4d2f242c631909a3a6c9eebfa0", "patch": "@@ -5,13 +5,13 @@ pub fn target() -> Target {\n     // Reset flags for non-Em flavors back to empty to satisfy sanity checking tests.\n     let pre_link_args = LinkArgs::new();\n     let post_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Em,\n+        LinkerFlavor::EmCc,\n         &[\"-sABORTING_MALLOC=0\", \"-Wl,--fatal-warnings\"],\n     );\n \n     let opts = TargetOptions {\n         os: \"emscripten\".into(),\n-        linker_flavor: LinkerFlavor::Em,\n+        linker_flavor: LinkerFlavor::EmCc,\n         // emcc emits two files - a .js file to instantiate the wasm and supply platform\n         // functionality, and a .wasm file.\n         exe_suffix: \".js\".into(),"}]}