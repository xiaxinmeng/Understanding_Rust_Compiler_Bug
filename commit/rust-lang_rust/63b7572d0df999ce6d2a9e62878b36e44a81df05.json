{"sha": "63b7572d0df999ce6d2a9e62878b36e44a81df05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYjc1NzJkMGRmOTk5Y2U2ZDJhOWU2Mjg3OGIzNmU0NGE4MWRmMDU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:14:18Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:10:02Z"}, "message": "Stub methods in infer\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "c5440b025f72f5ca9bc9cc560dc4fae35931084f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5440b025f72f5ca9bc9cc560dc4fae35931084f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63b7572d0df999ce6d2a9e62878b36e44a81df05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63b7572d0df999ce6d2a9e62878b36e44a81df05", "html_url": "https://github.com/rust-lang/rust/commit/63b7572d0df999ce6d2a9e62878b36e44a81df05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63b7572d0df999ce6d2a9e62878b36e44a81df05/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7", "html_url": "https://github.com/rust-lang/rust/commit/9a9aa5b46aa0c81a6dad3a3377d6b7d2e65a93c7"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "0d067d1de856aa4572eb7411d4e1c5d1935a60ac", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=63b7572d0df999ce6d2a9e62878b36e44a81df05", "patch": "@@ -443,6 +443,9 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                     UnpackedKind::Lifetime(..) => tcx.mk_region(\n                         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(i))\n                     ).into(),\n+                    UnpackedKind::Const(..) => {\n+                        unimplemented!() // FIXME(const_generics)\n+                    }\n                 })\n                 .collect()\n         }"}, {"sha": "008882fd50036fc6c0df553fd73735c1dbd2d282", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=63b7572d0df999ce6d2a9e62878b36e44a81df05", "patch": "@@ -315,6 +315,10 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                     obligations.extend(ok.into_obligations());\n                 }\n \n+                (UnpackedKind::Const(..), UnpackedKind::Const(..)) => {\n+                    unimplemented!() // FIXME(const_generics)\n+                }\n+\n                 _ => {\n                     bug!(\n                         \"kind mismatch, cannot unify {:?} and {:?}\",\n@@ -473,6 +477,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                         opt_values[br.assert_bound_var()] = Some(*original_value);\n                     }\n                 }\n+                UnpackedKind::Const(..) => {\n+                    unimplemented!() // FIXME(const_generics)\n+                }\n             }\n         }\n \n@@ -568,6 +575,11 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                                 ty::OutlivesPredicate(t1, r2)\n                             )\n                         ),\n+                        UnpackedKind::Const(..) => {\n+                            // Consts cannot outlive one another, so we don't expect to\n+                            // ecounter this branch.\n+                            span_bug!(cause.span, \"unexpected const outlives {:?}\", constraint);\n+                        }\n                     }\n                 )\n             })\n@@ -602,6 +614,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                         obligations\n                             .extend(self.at(cause, param_env).eq(v1, v2)?.into_obligations());\n                     }\n+                    (UnpackedKind::Const(..), UnpackedKind::Const(..)) => {\n+                        unimplemented!() // FIXME(const_generics)\n+                    }\n                     _ => {\n                         bug!(\"kind mismatch, cannot unify {:?} and {:?}\", value1, value2,);\n                     }"}, {"sha": "885b439ef1ca58c44c7eb4cfce5f05f438c7e327", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=63b7572d0df999ce6d2a9e62878b36e44a81df05", "patch": "@@ -449,7 +449,7 @@ impl<'cx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx> for Generalizer<'cx, 'gcx, '\n \n                             let origin = *variables.var_origin(vid);\n                             let new_var_id = variables.new_var(self.for_universe, false, origin);\n-                            let u = self.tcx().mk_var(new_var_id);\n+                            let u = self.tcx().mk_ty_var(new_var_id);\n                             debug!(\"generalize: replacing original vid={:?} with new={:?}\",\n                                    vid, u);\n                             return Ok(u);"}, {"sha": "c7936534aad2e00d0cc8689a97e5ec99b0cd1c95", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=63b7572d0df999ce6d2a9e62878b36e44a81df05", "patch": "@@ -691,17 +691,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) -> SubstsRef<'tcx> {\n         let generics = self.tcx.generics_of(def_id);\n         let mut num_supplied_defaults = 0;\n-        let mut type_params = generics\n-            .params\n-            .iter()\n-            .rev()\n-            .filter_map(|param| match param.kind {\n-                ty::GenericParamDefKind::Lifetime => None,\n-                ty::GenericParamDefKind::Type { has_default, .. } => {\n-                    Some((param.def_id, has_default))\n-                }\n-            })\n-            .peekable();\n+        let mut type_params = generics.params.iter().rev().filter_map(|param| match param.kind {\n+            ty::GenericParamDefKind::Lifetime => None,\n+            ty::GenericParamDefKind::Type { has_default, .. } => Some((param.def_id, has_default)),\n+            ty::GenericParamDefKind::Const => None, // FIXME(const_generics:defaults)\n+        }).peekable();\n         let has_default = {\n             let has_default = type_params.peek().map(|(_, has_default)| has_default);\n             *has_default.unwrap_or(&false)"}, {"sha": "cc1c439f3bd94fbc7a4a4e65b146eaec8ab6c270", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=63b7572d0df999ce6d2a9e62878b36e44a81df05", "patch": "@@ -656,7 +656,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         type_variables\n             .unsolved_variables()\n             .into_iter()\n-            .map(|t| self.tcx.mk_var(t))\n+            .map(|t| self.tcx.mk_ty_var(t))\n             .chain(\n                 (0..int_unification_table.len())\n                     .map(|i| ty::IntVid { index: i as u32 })\n@@ -981,7 +981,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {\n-        self.tcx.mk_var(self.next_ty_var_id(false, origin))\n+        self.tcx.mk_ty_var(self.next_ty_var_id(false, origin))\n     }\n \n     pub fn next_ty_var_in_universe(\n@@ -992,11 +992,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let vid = self.type_variables\n             .borrow_mut()\n             .new_var(universe, false, origin);\n-        self.tcx.mk_var(vid)\n+        self.tcx.mk_ty_var(vid)\n     }\n \n     pub fn next_diverging_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {\n-        self.tcx.mk_var(self.next_ty_var_id(true, origin))\n+        self.tcx.mk_ty_var(self.next_ty_var_id(true, origin))\n     }\n \n     pub fn next_int_var_id(&self) -> IntVid {\n@@ -1081,7 +1081,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     TypeVariableOrigin::TypeParameterDefinition(span, param.name),\n                 );\n \n-                self.tcx.mk_var(ty_var_id).into()\n+                self.tcx.mk_ty_var(ty_var_id).into()\n+            }\n+            GenericParamDefKind::Const { .. } => {\n+                unimplemented!() // FIXME(const_generics)\n             }\n         }\n     }"}, {"sha": "7140af36acbdc4191a0133b85f35f323b250b863", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b7572d0df999ce6d2a9e62878b36e44a81df05/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=63b7572d0df999ce6d2a9e62878b36e44a81df05", "patch": "@@ -310,7 +310,7 @@ where\n             ty::Projection(projection_ty)\n                 if D::normalization() == NormalizationStrategy::Lazy =>\n             {\n-                return Ok(self.relate_projection_ty(projection_ty, self.infcx.tcx.mk_var(vid)));\n+                return Ok(self.relate_projection_ty(projection_ty, self.infcx.tcx.mk_ty_var(vid)));\n             }\n \n             _ => (),\n@@ -764,7 +764,7 @@ where\n                             // the universe `_universe`.\n                             let new_var_id = variables.new_var(self.universe, false, origin);\n \n-                            let u = self.tcx().mk_var(new_var_id);\n+                            let u = self.tcx().mk_ty_var(new_var_id);\n                             debug!(\n                                 \"generalize: replacing original vid={:?} with new={:?}\",\n                                 vid,"}]}