{"sha": "b4686ca95885eb384b518bf8e4f0b44aef6fc4f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0Njg2Y2E5NTg4NWViMzg0YjUxOGJmOGU0ZjBiNDRhZWY2ZmM0Zjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-03T23:49:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-03T23:49:09Z"}, "message": "Rollup merge of #59664 - DevQps:improve-yield-spinlock-docs, r=alexcrichton\n\nUpdated the documentation of spin_loop and spin_loop_hint\n\n# Description\n\n- Updated the description of `core::hints::spin_loop`\n- Updated the description of `core::async::spin_loop_hint`\n\nBoth documentation is rewritten to better reflect when one should prefer using a busy-wait spin-loop (and the `spin_loop` and `spin_loop_hint` functions) over `yield_now`. It also dives a little bit deeper on what the function actually does.\n\ncloses #55418", "tree": {"sha": "168e4bd40ecba6cdda75514d846b22d3d869c751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168e4bd40ecba6cdda75514d846b22d3d869c751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4686ca95885eb384b518bf8e4f0b44aef6fc4f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcpUZ1CRBK7hj4Ov3rIwAAdHIIAHDvgu5V8FrrJNiggn/ejEN1\nkoxebA4RCXyFPuGo5EVzqH1n1GUx8bVvplLas9w8xU8+3o1QTga6aHdZzIcAKtHk\ncxtAFkXAkb7IGxZGhtZzdMLBBsAJDfpNF+Kq6o/0ekyRCf367fBdi8UgBYr5MAtS\n94IshiICSoAEjhbjF079QnWYziuyTfe0uEzoBLBRWrrDP2gj/pOJldSJNvcL0NVJ\nKlt/KeaXFTZNQCFEzU66hfgUtThaYYL/2R21XhvIJCEfgcvHP0L48eOYH49W6NA5\n5q6Z5vgnIjcoTljOBHEif/MG1AY3MNfwKzejAqi4W/VisPcZ7112CsVSZeYsT8g=\n=axKz\n-----END PGP SIGNATURE-----\n", "payload": "tree 168e4bd40ecba6cdda75514d846b22d3d869c751\nparent b78cbe6dddc5065c0dba1808e82f4bd17a453036\nparent becee90cfd9f174ed050c1d4b366fd13d89f1913\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554335349 +0200\ncommitter GitHub <noreply@github.com> 1554335349 +0200\n\nRollup merge of #59664 - DevQps:improve-yield-spinlock-docs, r=alexcrichton\n\nUpdated the documentation of spin_loop and spin_loop_hint\n\n# Description\n\n- Updated the description of `core::hints::spin_loop`\n- Updated the description of `core::async::spin_loop_hint`\n\nBoth documentation is rewritten to better reflect when one should prefer using a busy-wait spin-loop (and the `spin_loop` and `spin_loop_hint` functions) over `yield_now`. It also dives a little bit deeper on what the function actually does.\n\ncloses #55418\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4686ca95885eb384b518bf8e4f0b44aef6fc4f7", "html_url": "https://github.com/rust-lang/rust/commit/b4686ca95885eb384b518bf8e4f0b44aef6fc4f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4686ca95885eb384b518bf8e4f0b44aef6fc4f7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b78cbe6dddc5065c0dba1808e82f4bd17a453036", "url": "https://api.github.com/repos/rust-lang/rust/commits/b78cbe6dddc5065c0dba1808e82f4bd17a453036", "html_url": "https://github.com/rust-lang/rust/commit/b78cbe6dddc5065c0dba1808e82f4bd17a453036"}, {"sha": "becee90cfd9f174ed050c1d4b366fd13d89f1913", "url": "https://api.github.com/repos/rust-lang/rust/commits/becee90cfd9f174ed050c1d4b366fd13d89f1913", "html_url": "https://github.com/rust-lang/rust/commit/becee90cfd9f174ed050c1d4b366fd13d89f1913"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "d43e6c49f4c99e5bad0ce803cf80700396878caf", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b4686ca95885eb384b518bf8e4f0b44aef6fc4f7/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4686ca95885eb384b518bf8e4f0b44aef6fc4f7/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=b4686ca95885eb384b518bf8e4f0b44aef6fc4f7", "patch": "@@ -50,15 +50,28 @@ pub unsafe fn unreachable_unchecked() -> ! {\n     intrinsics::unreachable()\n }\n \n-/// Save power or switch hyperthreads in a busy-wait spin-loop.\n+/// Signals the processor that it is entering a busy-wait spin-loop.\n ///\n-/// This function is deliberately more primitive than\n-/// [`std::thread::yield_now`](../../std/thread/fn.yield_now.html) and\n-/// does not directly yield to the system's scheduler.\n-/// In some cases it might be useful to use a combination of both functions.\n-/// Careful benchmarking is advised.\n+/// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n+/// power or switching hyper-threads.\n ///\n-/// On some platforms this function may not do anything at all.\n+/// This function is different than [`std::thread::yield_now`] which directly yields to the\n+/// system's scheduler, whereas `spin_loop` only signals the processor that it is entering a\n+/// busy-wait spin-loop without yielding control to the system's scheduler.\n+///\n+/// Using a busy-wait spin-loop with `spin_loop` is ideally used in situations where a\n+/// contended lock is held by another thread executed on a different CPU and where the waiting\n+/// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n+/// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n+/// contended lock is running on the same CPU, the spin-loop is likely to occupy an entire CPU slice\n+/// before switching to the thread that holds the lock. If the contending lock is held by a thread\n+/// on the same CPU or if the waiting times for acquiring the lock are longer, it is often better to\n+/// use [`std::thread::yield_now`].\n+///\n+/// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n+/// do anything at all.\n+///\n+/// [`std::thread::yield_now`]: ../../std/thread/fn.yield_now.html\n #[inline]\n #[unstable(feature = \"renamed_spin_loop\", issue = \"55002\")]\n pub fn spin_loop() {"}, {"sha": "26b59969e18afc20c4b31736f0eaed9d6cfb4fc5", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b4686ca95885eb384b518bf8e4f0b44aef6fc4f7/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4686ca95885eb384b518bf8e4f0b44aef6fc4f7/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=b4686ca95885eb384b518bf8e4f0b44aef6fc4f7", "patch": "@@ -124,15 +124,28 @@ use fmt;\n \n use hint::spin_loop;\n \n-/// Save power or switch hyperthreads in a busy-wait spin-loop.\n+/// Signals the processor that it is entering a busy-wait spin-loop.\n ///\n-/// This function is deliberately more primitive than\n-/// [`std::thread::yield_now`](../../../std/thread/fn.yield_now.html) and\n-/// does not directly yield to the system's scheduler.\n-/// In some cases it might be useful to use a combination of both functions.\n-/// Careful benchmarking is advised.\n+/// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n+/// power or switching hyper-threads.\n ///\n-/// On some platforms this function may not do anything at all.\n+/// This function is different than [`std::thread::yield_now`] which directly yields to the\n+/// system's scheduler, whereas `spin_loop_hint` only signals the processor that it is entering a\n+/// busy-wait spin-loop without yielding control to the system's scheduler.\n+///\n+/// Using a busy-wait spin-loop with `spin_loop_hint` is ideally used in situations where a\n+/// contended lock is held by another thread executed on a different CPU and where the waiting\n+/// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n+/// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n+/// contended lock is running on the same CPU, the spin-loop is likely to occupy an entire CPU slice\n+/// before switching to the thread that holds the lock. If the contending lock is held by a thread\n+/// on the same CPU or if the waiting times for acquiring the lock are longer, it is often better to\n+/// use [`std::thread::yield_now`].\n+///\n+/// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n+/// do anything at all.\n+///\n+/// [`std::thread::yield_now`]: ../../../std/thread/fn.yield_now.html\n #[inline]\n #[stable(feature = \"spin_loop_hint\", since = \"1.24.0\")]\n pub fn spin_loop_hint() {"}]}