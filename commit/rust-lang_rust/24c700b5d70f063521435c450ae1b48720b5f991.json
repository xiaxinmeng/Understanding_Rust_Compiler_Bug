{"sha": "24c700b5d70f063521435c450ae1b48720b5f991", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YzcwMGI1ZDcwZjA2MzUyMTQzNWM0NTBhZTFiNDg3MjBiNWY5OTE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-12-30T21:38:21Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-01-08T18:13:06Z"}, "message": "Use DefId in interning defined symbol lint", "tree": {"sha": "26d3345b0878fc5135f89d071953b5f0d1487cc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26d3345b0878fc5135f89d071953b5f0d1487cc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24c700b5d70f063521435c450ae1b48720b5f991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24c700b5d70f063521435c450ae1b48720b5f991", "html_url": "https://github.com/rust-lang/rust/commit/24c700b5d70f063521435c450ae1b48720b5f991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24c700b5d70f063521435c450ae1b48720b5f991/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2950c8e1cb32e864b599c4b4dae896d29d86e5e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2950c8e1cb32e864b599c4b4dae896d29d86e5e7", "html_url": "https://github.com/rust-lang/rust/commit/2950c8e1cb32e864b599c4b4dae896d29d86e5e7"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "945aaa4668cfc7798052fcaa8e97e5665bfdb192", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24c700b5d70f063521435c450ae1b48720b5f991/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c700b5d70f063521435c450ae1b48720b5f991/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=24c700b5d70f063521435c450ae1b48720b5f991", "patch": "@@ -10,6 +10,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Node, Path, StmtKind, Ty, TyKind};\n@@ -868,8 +869,8 @@ impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n \n #[derive(Default)]\n pub struct InterningDefinedSymbol {\n-    // Maps the symbol value to the constant name.\n-    symbol_map: FxHashMap<u32, String>,\n+    // Maps the symbol value to the constant DefId.\n+    symbol_map: FxHashMap<u32, DefId>,\n }\n \n impl_lint_pass!(InterningDefinedSymbol => [INTERNING_DEFINED_SYMBOL]);\n@@ -889,7 +890,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n                     if let Ok(ConstValue::Scalar(value)) = cx.tcx.const_eval_poly(item_def_id);\n                     if let Ok(value) = value.to_u32();\n                     then {\n-                        self.symbol_map.insert(value, item.ident.to_string());\n+                        self.symbol_map.insert(value, item_def_id);\n                     }\n                 }\n             }\n@@ -903,15 +904,15 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n             if match_def_path(cx, *def_id, &paths::SYMBOL_INTERN);\n             if let Some(Constant::Str(arg)) = constant_simple(cx, cx.typeck_results(), arg);\n             let value = Symbol::intern(&arg).as_u32();\n-            if let Some(symbol_const) = self.symbol_map.get(&value);\n+            if let Some(&def_id) = self.symbol_map.get(&value);\n             then {\n                 span_lint_and_sugg(\n                     cx,\n                     INTERNING_DEFINED_SYMBOL,\n                     is_expn_of(expr.span, \"sym\").unwrap_or(expr.span),\n                     \"interning a defined symbol\",\n                     \"try\",\n-                    format!(\"rustc_span::symbol::sym::{}\", symbol_const),\n+                    cx.tcx.def_path_str(def_id),\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "2af362b8f99f8f08ae3e8209dbbcbc95ad6493af", "filename": "tests/ui-internal/interning_defined_symbol.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24c700b5d70f063521435c450ae1b48720b5f991/tests%2Fui-internal%2Finterning_defined_symbol.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/24c700b5d70f063521435c450ae1b48720b5f991/tests%2Fui-internal%2Finterning_defined_symbol.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.fixed?ref=24c700b5d70f063521435c450ae1b48720b5f991", "patch": "@@ -14,13 +14,13 @@ macro_rules! sym {\n \n fn main() {\n     // Direct use of Symbol::intern\n-    let _ = rustc_span::symbol::sym::f32;\n+    let _ = rustc_span::sym::f32;\n \n     // Using a sym macro\n-    let _ = rustc_span::symbol::sym::f32;\n+    let _ = rustc_span::sym::f32;\n \n     // Correct suggestion when symbol isn't stringified constant name\n-    let _ = rustc_span::symbol::sym::proc_dash_macro;\n+    let _ = rustc_span::sym::proc_dash_macro;\n \n     // Interning a symbol that is not defined\n     let _ = Symbol::intern(\"xyz123\");"}, {"sha": "d7e1d62d51ac925725c592fb2ba84acd8ccb363d", "filename": "tests/ui-internal/interning_defined_symbol.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24c700b5d70f063521435c450ae1b48720b5f991/tests%2Fui-internal%2Finterning_defined_symbol.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c700b5d70f063521435c450ae1b48720b5f991/tests%2Fui-internal%2Finterning_defined_symbol.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.stderr?ref=24c700b5d70f063521435c450ae1b48720b5f991", "patch": "@@ -2,7 +2,7 @@ error: interning a defined symbol\n   --> $DIR/interning_defined_symbol.rs:17:13\n    |\n LL |     let _ = Symbol::intern(\"f32\");\n-   |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::symbol::sym::f32`\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::f32`\n    |\n note: the lint level is defined here\n   --> $DIR/interning_defined_symbol.rs:2:9\n@@ -15,13 +15,13 @@ error: interning a defined symbol\n   --> $DIR/interning_defined_symbol.rs:20:13\n    |\n LL |     let _ = sym!(f32);\n-   |             ^^^^^^^^^ help: try: `rustc_span::symbol::sym::f32`\n+   |             ^^^^^^^^^ help: try: `rustc_span::sym::f32`\n \n error: interning a defined symbol\n   --> $DIR/interning_defined_symbol.rs:23:13\n    |\n LL |     let _ = Symbol::intern(\"proc-macro\");\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::symbol::sym::proc_dash_macro`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::proc_dash_macro`\n \n error: aborting due to 3 previous errors\n "}]}