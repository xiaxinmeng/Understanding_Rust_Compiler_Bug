{"sha": "6a52fb730310cdfec267b1da5cc48cce073647e3", "node_id": "C_kwDOAAsO6NoAKDZhNTJmYjczMDMxMGNkZmVjMjY3YjFkYTVjYzQ4Y2NlMDczNjQ3ZTM", "commit": {"author": {"name": "Tim McNamara", "email": "code@timmcnamara.co.nz", "date": "2021-10-08T08:40:25Z"}, "committer": {"name": "Tim McNamara", "email": "code@timmcnamara.co.nz", "date": "2021-10-08T08:40:25Z"}, "message": "Add documentation to boxed conversions\n\nAmong other changes, documents whether allocations are necessary\nto complete the type conversion.\n\nPart of #51430\n\nCo-authored-by: Giacomo Stevanato <giaco.stevanato@gmail.com>\n\nCo-authored-by: Joshua Nelson <github@jyn.dev>", "tree": {"sha": "b777421d7f7e78bbadc77f1e36b308ed3d83a044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b777421d7f7e78bbadc77f1e36b308ed3d83a044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a52fb730310cdfec267b1da5cc48cce073647e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a52fb730310cdfec267b1da5cc48cce073647e3", "html_url": "https://github.com/rust-lang/rust/commit/6a52fb730310cdfec267b1da5cc48cce073647e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a52fb730310cdfec267b1da5cc48cce073647e3/comments", "author": {"login": "timClicks", "id": 27889, "node_id": "MDQ6VXNlcjI3ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/27889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timClicks", "html_url": "https://github.com/timClicks", "followers_url": "https://api.github.com/users/timClicks/followers", "following_url": "https://api.github.com/users/timClicks/following{/other_user}", "gists_url": "https://api.github.com/users/timClicks/gists{/gist_id}", "starred_url": "https://api.github.com/users/timClicks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timClicks/subscriptions", "organizations_url": "https://api.github.com/users/timClicks/orgs", "repos_url": "https://api.github.com/users/timClicks/repos", "events_url": "https://api.github.com/users/timClicks/events{/privacy}", "received_events_url": "https://api.github.com/users/timClicks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timClicks", "id": 27889, "node_id": "MDQ6VXNlcjI3ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/27889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timClicks", "html_url": "https://github.com/timClicks", "followers_url": "https://api.github.com/users/timClicks/followers", "following_url": "https://api.github.com/users/timClicks/following{/other_user}", "gists_url": "https://api.github.com/users/timClicks/gists{/gist_id}", "starred_url": "https://api.github.com/users/timClicks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timClicks/subscriptions", "organizations_url": "https://api.github.com/users/timClicks/orgs", "repos_url": "https://api.github.com/users/timClicks/repos", "events_url": "https://api.github.com/users/timClicks/events{/privacy}", "received_events_url": "https://api.github.com/users/timClicks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2171ee53ef2c98addbc3543e50e61496d8440a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2171ee53ef2c98addbc3543e50e61496d8440a9", "html_url": "https://github.com/rust-lang/rust/commit/c2171ee53ef2c98addbc3543e50e61496d8440a9"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "1eff1f9e3078ae03b9be56f1e359af446311466c", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6a52fb730310cdfec267b1da5cc48cce073647e3/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a52fb730310cdfec267b1da5cc48cce073647e3/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=6a52fb730310cdfec267b1da5cc48cce073647e3", "patch": "@@ -1277,6 +1277,7 @@ impl<T> From<T> for Box<T> {\n     /// from the stack into it.\n     ///\n     /// # Examples\n+    ///\n     /// ```rust\n     /// let x = 5;\n     /// let boxed = Box::new(5);\n@@ -1330,6 +1331,12 @@ impl<T: Copy> From<&[T]> for Box<[T]> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl<T: Copy> From<Cow<'_, [T]>> for Box<[T]> {\n+    /// Converts a `Cow<'_, [T]>` into a `Box<[T]>`\n+    ///\n+    /// When `cow` is the `Cow::Borrowed` variant, this\n+    /// conversion allocates on the heap and performs a copy of the\n+    /// underlying slice. Otherwise, it will try to re-use the owned\n+    /// vec's allocation.\n     #[inline]\n     fn from(cow: Cow<'_, [T]>) -> Box<[T]> {\n         match cow {\n@@ -1348,6 +1355,7 @@ impl From<&str> for Box<str> {\n     /// and performs a copy of `s`.\n     ///\n     /// # Examples\n+    ///\n     /// ```rust\n     /// let boxed: Box<str> = Box::from(\"hello\");\n     /// println!(\"{}\", boxed);\n@@ -1361,6 +1369,29 @@ impl From<&str> for Box<str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, str>> for Box<str> {\n+    /// Converts a `Cow<'_, str>` into a `Box<str>`\n+    ///\n+    /// When `cow` is the `Cow::Borrowed` variant, this\n+    /// conversion allocates on the heap and performs a copy of the\n+    /// underlying `str`. Otherwise, it will try to re-use the owned\n+    /// `String`'s allocation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let unboxed = Cow::Borrowed(\"hello\");\n+    /// let boxed: Box<str> = Box::from(unboxed);\n+    /// println!(\"{}\", boxed);\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// # use std::borrow::Cow;\n+    /// let unboxed = Cow::Owned(\"hello\".to_string());\n+    /// let boxed: Box<str> = Box::from(unboxed);\n+    /// println!(\"{}\", boxed);\n+    /// ```\n     #[inline]\n     fn from(cow: Cow<'_, str>) -> Box<str> {\n         match cow {\n@@ -1403,6 +1434,7 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     /// This conversion moves the array to newly heap-allocated memory.\n     ///\n     /// # Examples\n+    ///\n     /// ```rust\n     /// let boxed: Box<[u8]> = Box::from([4, 2]);\n     /// println!(\"{:?}\", boxed);\n@@ -1416,6 +1448,15 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]> {\n     type Error = Box<[T]>;\n \n+    /// Attempts to convert a `Box<[T]>` into a `Box<[T; N]>`.\n+    ///\n+    /// The conversion occurs in-place and does not require a\n+    /// new memory allocation.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns the old `Box<[T]>` in the `Err` variant if\n+    /// `boxed_slice.len()` does not equal `N`.\n     fn try_from(boxed_slice: Box<[T]>) -> Result<Self, Self::Error> {\n         if boxed_slice.len() == N {\n             Ok(unsafe { Box::from_raw(Box::into_raw(boxed_slice) as *mut [T; N]) })"}]}