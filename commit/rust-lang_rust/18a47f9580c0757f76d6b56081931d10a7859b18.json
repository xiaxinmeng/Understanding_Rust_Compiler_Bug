{"sha": "18a47f9580c0757f76d6b56081931d10a7859b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YTQ3Zjk1ODBjMDc1N2Y3NmQ2YjU2MDgxOTMxZDEwYTc4NTliMTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T07:43:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T07:43:51Z"}, "message": "auto merge of #6384 : thomaslee/rust/issue-4202, r=catamorphism\n\nThis fixes the issue described in #4202.\r\n\r\nFrom what I understood of the code, when we reexport a trait in a submodule using e.g. \"pub use foo::SomeTrait\", we were not previously making an effort to reexport the static methods on that trait.\r\n\r\nI'm new to the Rust code base (and the Rust language itself) so my approach may not be kosher, but this patch works by changing the encoder to include the static methods associated with traits.\r\n\r\nI couldn't see any tests for this area of the code, so I didn't really have any examples to go by. If tests are needed, I'm happy to work through that if I can get some assistance to do so.", "tree": {"sha": "e860694d1ab5c3d494453be925cfbb9e87c78720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e860694d1ab5c3d494453be925cfbb9e87c78720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18a47f9580c0757f76d6b56081931d10a7859b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18a47f9580c0757f76d6b56081931d10a7859b18", "html_url": "https://github.com/rust-lang/rust/commit/18a47f9580c0757f76d6b56081931d10a7859b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18a47f9580c0757f76d6b56081931d10a7859b18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d43d3e538c42798db0706983ba7696b44f6764eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d43d3e538c42798db0706983ba7696b44f6764eb", "html_url": "https://github.com/rust-lang/rust/commit/d43d3e538c42798db0706983ba7696b44f6764eb"}, {"sha": "1e241ce52bbba72e1641f44f83ced0bfea4717f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e241ce52bbba72e1641f44f83ced0bfea4717f9", "html_url": "https://github.com/rust-lang/rust/commit/1e241ce52bbba72e1641f44f83ced0bfea4717f9"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "9fa0ad438ccddb938b029dab1cd7314302673d68", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/18a47f9580c0757f76d6b56081931d10a7859b18/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a47f9580c0757f76d6b56081931d10a7859b18/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=18a47f9580c0757f76d6b56081931d10a7859b18", "patch": "@@ -363,6 +363,47 @@ fn encode_path(ecx: @EncodeContext,\n     ebml_w.end_tag();\n }\n \n+fn encode_reexported_static_method(ecx: @EncodeContext,\n+                                   ebml_w: &mut writer::Encoder,\n+                                   exp: &middle::resolve::Export2,\n+                                   m: @ty::method) {\n+    debug!(\"(encode static trait method) reexport '%s::%s'\",\n+            *exp.name, *ecx.tcx.sess.str_of(m.ident));\n+    ebml_w.start_tag(tag_items_data_item_reexport);\n+    ebml_w.start_tag(tag_items_data_item_reexport_def_id);\n+    ebml_w.wr_str(def_to_str(m.def_id));\n+    ebml_w.end_tag();\n+    ebml_w.start_tag(tag_items_data_item_reexport_name);\n+    ebml_w.wr_str(*exp.name + \"::\" + *ecx.tcx.sess.str_of(m.ident));\n+    ebml_w.end_tag();\n+    ebml_w.end_tag();\n+}\n+\n+fn encode_reexported_static_methods(ecx: @EncodeContext,\n+                                    ebml_w: &mut writer::Encoder,\n+                                    mod_path: &[ast_map::path_elt],\n+                                    exp: &middle::resolve::Export2) {\n+    match ecx.tcx.trait_methods_cache.find(&exp.def_id) {\n+        Some(methods) => {\n+            match ecx.tcx.items.find(&exp.def_id.node) {\n+                Some(&ast_map::node_item(_, path)) => {\n+                    if mod_path != *path {\n+                        for methods.each |&m| {\n+                            if m.self_ty  == ast::sty_static {\n+                                encode_reexported_static_method(ecx,\n+                                                                ebml_w,\n+                                                                exp, m);\n+                            }\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+        _ => {}\n+    }\n+}\n+\n fn encode_info_for_mod(ecx: @EncodeContext,\n                        ebml_w: &mut writer::Encoder,\n                        md: &_mod,\n@@ -413,6 +454,7 @@ fn encode_info_for_mod(ecx: @EncodeContext,\n                 ebml_w.wr_str(*exp.name);\n                 ebml_w.end_tag();\n                 ebml_w.end_tag();\n+                encode_reexported_static_methods(ecx, ebml_w, path, exp);\n             }\n         }\n         None => {"}, {"sha": "b060c7aee49a2a539ce4cfbbf44a7213caf358d0", "filename": "src/test/auxiliary/mod_trait_with_static_methods_lib.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/18a47f9580c0757f76d6b56081931d10a7859b18/src%2Ftest%2Fauxiliary%2Fmod_trait_with_static_methods_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a47f9580c0757f76d6b56081931d10a7859b18/src%2Ftest%2Fauxiliary%2Fmod_trait_with_static_methods_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmod_trait_with_static_methods_lib.rs?ref=18a47f9580c0757f76d6b56081931d10a7859b18", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use sub_foo::Foo;\n+\n+pub mod sub_foo {\n+    pub trait Foo {\n+        pub fn foo() -> Self;\n+    }\n+\n+    impl Foo for int {\n+        pub fn foo() -> int { 42 }\n+    }\n+}\n+"}, {"sha": "1af8629468024665ea014bc942d503736b09de40", "filename": "src/test/run-pass/trait_with_static_methods_cross_crate.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/18a47f9580c0757f76d6b56081931d10a7859b18/src%2Ftest%2Frun-pass%2Ftrait_with_static_methods_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18a47f9580c0757f76d6b56081931d10a7859b18/src%2Ftest%2Frun-pass%2Ftrait_with_static_methods_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait_with_static_methods_cross_crate.rs?ref=18a47f9580c0757f76d6b56081931d10a7859b18", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:mod_trait_with_static_methods_lib.rs\n+extern mod mod_trait_with_static_methods_lib;\n+\n+use mod_trait_with_static_methods_lib::Foo;\n+\n+pub fn main() {\n+    assert!(42 == Foo::foo());\n+}"}]}