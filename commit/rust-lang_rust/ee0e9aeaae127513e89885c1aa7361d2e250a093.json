{"sha": "ee0e9aeaae127513e89885c1aa7361d2e250a093", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMGU5YWVhYWUxMjc1MTNlODk4ODVjMWFhNzM2MWQyZTI1MGEwOTM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-16T09:53:21Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-17T06:24:45Z"}, "message": "Use special rules when overflowing the last argument\n\nWhen overflowing the last argument of function call, if it is a closure,\nwe apply some special rules in order to avoid weird formatting.", "tree": {"sha": "6052f0333d1d41f3008eafd5939cfc74e97f4b1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6052f0333d1d41f3008eafd5939cfc74e97f4b1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0e9aeaae127513e89885c1aa7361d2e250a093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0e9aeaae127513e89885c1aa7361d2e250a093", "html_url": "https://github.com/rust-lang/rust/commit/ee0e9aeaae127513e89885c1aa7361d2e250a093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0e9aeaae127513e89885c1aa7361d2e250a093/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af57d285aa17270b42108d9f59fa6f792b2b8577", "url": "https://api.github.com/repos/rust-lang/rust/commits/af57d285aa17270b42108d9f59fa6f792b2b8577", "html_url": "https://github.com/rust-lang/rust/commit/af57d285aa17270b42108d9f59fa6f792b2b8577"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "092f64fbb3e83edc0b588e541ddf8678217adce1", "filename": "src/expr.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ee0e9aeaae127513e89885c1aa7361d2e250a093/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0e9aeaae127513e89885c1aa7361d2e250a093/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ee0e9aeaae127513e89885c1aa7361d2e250a093", "patch": "@@ -2207,6 +2207,48 @@ fn last_arg_shape(\n     })\n }\n \n+// Rewriting closure which is placed at the end of the function call's arg.\n+// Returns `None` if the reformatted closure 'looks bad'.\n+fn rewrite_last_closure(\n+    context: &RewriteContext,\n+    expr: &ast::Expr,\n+    shape: Shape,\n+) -> Option<String> {\n+    if let ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) = expr.node {\n+        let body = match body.node {\n+            ast::ExprKind::Block(ref block) if block.stmts.len() == 1 => {\n+                stmt_expr(&block.stmts[0]).unwrap_or(body)\n+            }\n+            _ => body,\n+        };\n+        let (prefix, extra_offset) = try_opt!(rewrite_closure_fn_decl(\n+            capture,\n+            fn_decl,\n+            body,\n+            expr.span,\n+            context,\n+            shape,\n+        ));\n+        // If the closure goes multi line before its body, do not overflow the closure.\n+        if prefix.contains('\\n') {\n+            return None;\n+        }\n+        let body_shape = try_opt!(shape.offset_left(extra_offset));\n+        // When overflowing the closure which consists of a single control flow expression,\n+        // force to use block if its condition uses multi line.\n+        if rewrite_cond(context, body, body_shape)\n+            .map(|cond| cond.contains('\\n'))\n+            .unwrap_or(false)\n+        {\n+            return rewrite_closure_with_block(context, body_shape, &prefix, body);\n+        }\n+\n+        // Seems fine, just format the closure in usual manner.\n+        return expr.rewrite(context, shape);\n+    }\n+    None\n+}\n+\n fn rewrite_last_arg_with_overflow<'a, T>(\n     context: &RewriteContext,\n     last_arg: &T,\n@@ -2220,31 +2262,7 @@ where\n         match expr.node {\n             // When overflowing the closure which consists of a single control flow expression,\n             // force to use block if its condition uses multi line.\n-            ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n-                let try_closure_with_block = || {\n-                    let body = match body.node {\n-                        ast::ExprKind::Block(ref block) if block.stmts.len() == 1 => {\n-                            try_opt!(stmt_expr(&block.stmts[0]))\n-                        }\n-                        _ => body,\n-                    };\n-                    let (prefix, extra_offset) = try_opt!(rewrite_closure_fn_decl(\n-                        capture,\n-                        fn_decl,\n-                        body,\n-                        expr.span,\n-                        context,\n-                        shape,\n-                    ));\n-                    let shape = try_opt!(shape.offset_left(extra_offset));\n-                    rewrite_cond(context, body, shape).map_or(None, |cond| if cond.contains('\\n') {\n-                        rewrite_closure_with_block(context, shape, &prefix, body)\n-                    } else {\n-                        None\n-                    })\n-                };\n-                try_closure_with_block().or_else(|| expr.rewrite(context, shape))\n-            }\n+            ast::ExprKind::Closure(..) => rewrite_last_closure(context, expr, shape),\n             _ => expr.rewrite(context, shape),\n         }\n     } else {"}]}