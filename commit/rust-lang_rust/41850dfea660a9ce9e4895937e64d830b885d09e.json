{"sha": "41850dfea660a9ce9e4895937e64d830b885d09e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxODUwZGZlYTY2MGE5Y2U5ZTQ4OTU5MzdlNjRkODMwYjg4NWQwOWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-10-23T08:14:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-23T08:14:46Z"}, "message": "Rollup merge of #65695 - michaelwoerister:fix-self-profiling-work-item-event-names, r=wesleywiser\n\nself-profiling: Remove module names from some event-ids in codegen backend.\n\nEvent-IDs are not supposed to contain argument values. Event-IDs are the equivalent of function names. Proper support for parameters will be added to self-profiling down the line.\n\nThis PR fixes an oversight from https://github.com/rust-lang/rust/pull/64840.\n\nr? @wesleywiser", "tree": {"sha": "e9b309a2133303b976e96bc4845969aa760d0a18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9b309a2133303b976e96bc4845969aa760d0a18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41850dfea660a9ce9e4895937e64d830b885d09e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsAv2CRBK7hj4Ov3rIwAAdHIIAGIYh9d9a/8wWe/1ARjbl5rc\nS8oaeaDyqKEhss5sDTWb89Ad1tc628WZbafD5sWLWDDPOVD4B0xyfUwUoozQsdYz\n6VC3BboIQXmFwKmNPsfV/iJ0bxEiCM+NInldRl1lFBwdQFFWxNUqtQvaINnVxU58\nhJ/C9SpnNSCW3p+iUVZeBziBT7zcm3WLPYEzfGvF06RZYHvOGQgzCC3BBF3WXOwR\n+qvavauewtClyCtmqNFs0TJpVexHctGh8s6fBXCJTPdGcNBMQkehEP9K9lvsdKyS\nykwXuIw6/sIxbaZcudg/sEAFoxQC9g++aCZXYKcttXELy+0lWzH9cG2D1g0HpU4=\n=Sy2m\n-----END PGP SIGNATURE-----\n", "payload": "tree e9b309a2133303b976e96bc4845969aa760d0a18\nparent 12f32c2f292463132e84eceddd22330ddebe9ad8\nparent 66a025378025742a2a867287c4683e1209d15f65\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1571818486 +0900\ncommitter GitHub <noreply@github.com> 1571818486 +0900\n\nRollup merge of #65695 - michaelwoerister:fix-self-profiling-work-item-event-names, r=wesleywiser\n\nself-profiling: Remove module names from some event-ids in codegen backend.\n\nEvent-IDs are not supposed to contain argument values. Event-IDs are the equivalent of function names. Proper support for parameters will be added to self-profiling down the line.\n\nThis PR fixes an oversight from https://github.com/rust-lang/rust/pull/64840.\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41850dfea660a9ce9e4895937e64d830b885d09e", "html_url": "https://github.com/rust-lang/rust/commit/41850dfea660a9ce9e4895937e64d830b885d09e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41850dfea660a9ce9e4895937e64d830b885d09e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12f32c2f292463132e84eceddd22330ddebe9ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/12f32c2f292463132e84eceddd22330ddebe9ad8", "html_url": "https://github.com/rust-lang/rust/commit/12f32c2f292463132e84eceddd22330ddebe9ad8"}, {"sha": "66a025378025742a2a867287c4683e1209d15f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/66a025378025742a2a867287c4683e1209d15f65", "html_url": "https://github.com/rust-lang/rust/commit/66a025378025742a2a867287c4683e1209d15f65"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "762b50f1659ccd7b00a536aa78ecbe482c227eda", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41850dfea660a9ce9e4895937e64d830b885d09e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41850dfea660a9ce9e4895937e64d830b885d09e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=41850dfea660a9ce9e4895937e64d830b885d09e", "patch": "@@ -259,7 +259,7 @@ fn generate_lto_work<B: ExtraBackendMethods>(\n     needs_thin_lto: Vec<(String, B::ThinBuffer)>,\n     import_only_modules: Vec<(SerializedModule<B::ModuleBuffer>, WorkProduct)>\n ) -> Vec<(WorkItem<B>, u64)> {\n-    let _prof_timer = cgcx.prof.generic_activity(\"codegen_run_lto\");\n+    let _prof_timer = cgcx.prof.generic_activity(\"codegen_generate_lto_work\");\n \n     let (lto_modules, copy_jobs) = if !needs_fat_lto.is_empty() {\n         assert!(needs_thin_lto.is_empty());\n@@ -674,11 +674,11 @@ impl<B: WriteBackendMethods> WorkItem<B> {\n         }\n     }\n \n-    pub fn name(&self) -> String {\n+    fn profiling_event_id(&self) -> &'static str {\n         match *self {\n-            WorkItem::Optimize(ref m) => format!(\"optimize: {}\", m.name),\n-            WorkItem::CopyPostLtoArtifacts(ref m) => format!(\"copy post LTO artifacts: {}\", m.name),\n-            WorkItem::LTO(ref m) => format!(\"lto: {}\", m.name()),\n+            WorkItem::Optimize(_) => \"codegen_module_optimize\",\n+            WorkItem::CopyPostLtoArtifacts(_) => \"codegen_copy_artifacts_from_incr_cache\",\n+            WorkItem::LTO(_) => \"codegen_module_perform_lto\",\n         }\n     }\n }\n@@ -1587,7 +1587,7 @@ fn spawn_work<B: ExtraBackendMethods>(\n         // as a diagnostic was already sent off to the main thread - just\n         // surface that there was an error in this worker.\n         bomb.result = {\n-            let _prof_timer = cgcx.prof.generic_activity(&work.name());\n+            let _prof_timer = cgcx.prof.generic_activity(work.profiling_event_id());\n             execute_work_item(&cgcx, work).ok()\n         };\n     });"}]}