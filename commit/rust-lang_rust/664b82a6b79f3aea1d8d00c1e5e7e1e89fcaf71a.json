{"sha": "664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NGI4MmE2Yjc5ZjNhZWExZDhkMDBjMWU1ZTdlMWU4OWZjYWY3MWE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2012-05-10T22:35:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2012-05-10T22:35:26Z"}, "message": "Merge pull request #2375 from paulstansifer/remove_do_loops\n\nRemove do loops", "tree": {"sha": "93a864156865a7eff132dc392c14e29f0d0b9ebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93a864156865a7eff132dc392c14e29f0d0b9ebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "html_url": "https://github.com/rust-lang/rust/commit/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "html_url": "https://github.com/rust-lang/rust/commit/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd"}, {"sha": "f943667af391f7003a46aa5c3fc1a5ac0360574a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f943667af391f7003a46aa5c3fc1a5ac0360574a", "html_url": "https://github.com/rust-lang/rust/commit/f943667af391f7003a46aa5c3fc1a5ac0360574a"}], "stats": {"total": 272, "additions": 67, "deletions": 205}, "files": [{"sha": "d7e35d8339ff274bc9affebd41dac4ba82caa720", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -1991,28 +1991,19 @@ way.\n \n *TODO*.\n \n-### While expressions\n+### While loops\n \n ~~~~~~~~{.ebnf .gram}\n while_expr : \"while\" expr '{' block '}'\n            | \"do\" '{' block '}' \"while\" expr ;\n ~~~~~~~~\n \n-A `while` expression is a loop construct. A `while` loop may be either a\n-simple `while` or a `do`-`while` loop.\n+A `while` loop begins by evaluating the boolean loop conditional expression.\n+If the loop conditional expression evaluates to `true`, the loop body block\n+executes and control returns to the loop conditional expression. If the loop\n+conditional expression evaluates to `false`, the `while` expression completes.\n \n-In the case of a simple `while`, the loop begins by evaluating the boolean\n-loop conditional expression. If the loop conditional expression evaluates to\n-`true`, the loop body block executes and control returns to the loop\n-conditional expression. If the loop conditional expression evaluates to\n-`false`, the `while` expression completes.\n-\n-In the case of a `do`-`while`, the loop begins with an execution of the loop\n-body. After the loop body executes, it evaluates the loop conditional\n-expression. If it evaluates to `true`, control returns to the beginning of the\n-loop body. If it evaluates to `false`, control exits the loop.\n-\n-An example of a simple `while` expression:\n+An example:\n \n ~~~~\n # let mut i = 0;\n@@ -2024,18 +2015,6 @@ while i < 10 {\n }\n ~~~~\n \n-An example of a `do`-`while` expression:\n-\n-~~~~\n-# let mut i = 0;\n-# let println = io::println;\n-\n-do {\n-    println(\"hello\\n\");\n-    i = i + 1;\n-} while i < 10;\n-~~~~\n-\n ### Infinite loops\n \n A `loop` expression denotes an infinite loop:"}, {"sha": "8f1affc1284ef5e8236a370da20451ce9878c8e1", "filename": "doc/tutorial.md", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -667,6 +667,15 @@ a specific value, are not allowed.\n keyword `break` can be used to abort the loop, and `cont` can be used\n to abort the current iteration and continue with the next.\n \n+~~~~\n+let mut cake_amount = 8;\n+while cake_amount > 0 {\n+    cake_amount -= 1;\n+}\n+~~~~\n+\n+`loop` is the preferred way of writing `while true`:\n+\n ~~~~\n let mut x = 5;\n while true {\n@@ -679,17 +688,6 @@ while true {\n This code prints out a weird sequence of numbers and stops as soon as\n it finds one that can be divided by five.\n \n-There's also `while`'s ugly cousin, `do`/`while`, which does not check\n-its condition on the first iteration, using traditional syntax:\n-\n-~~~~\n-# fn eat_cake() {}\n-# fn any_cake_left() -> bool { false }\n-do {\n-    eat_cake();\n-} while any_cake_left();\n-~~~~\n-\n For more involved iteration, such as going over the elements of a\n collection, Rust uses higher-order functions. We'll come back to those\n in a moment.\n@@ -2496,12 +2494,12 @@ Here is the function which implements the child task:\n fn stringifier(from_parent: comm::port<uint>,\n                to_parent: comm::chan<str>) {\n     let mut value: uint;\n-    do {\n+    loop {\n         value = comm::recv(from_parent);\n         comm::send(to_parent, uint::to_str(value, 10u));\n-    } while value != 0u;\n+        if value == 0u { break; }\n+    }\n }\n-\n ~~~~\n \n You can see that the function takes two parameters.  The first is a"}, {"sha": "dd65b0142eabf045a3614f9599a3583275973045", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -74,9 +74,6 @@ pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           ast::expr_alt(_, _, _) { false }\n           ast::expr_while(_, _) { false }\n \n-          // https://github.com/mozilla/rust/issues/955\n-          ast::expr_do_while(_, _) { false }\n-\n           // https://github.com/mozilla/rust/issues/929\n           ast::expr_cast(_, _) { false }\n           ast::expr_assert(_) { false }"}, {"sha": "75ca4cb035e39d611e031eaf43dd1a3dcd92c4ab", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -251,7 +251,7 @@ fn normalize(p: path) -> path {\n         let mut t = [];\n         let mut i = vec::len(s);\n         let mut skip = 0;\n-        do {\n+        while i != 0u {\n             i -= 1u;\n             if s[i] == \"..\" {\n                 skip += 1;\n@@ -262,7 +262,7 @@ fn normalize(p: path) -> path {\n                     skip -= 1;\n                 }\n             }\n-        } while i != 0u;\n+        }\n         let mut t = vec::reversed(t);\n         while skip > 0 {\n             t += [\"..\"];"}, {"sha": "fb97751fd51c28d5f0fb30007798963f3d714f15", "filename": "src/librustsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -305,7 +305,6 @@ enum expr_ {\n     expr_cast(@expr, @ty),\n     expr_if(@expr, blk, option<@expr>),\n     expr_while(@expr, blk),\n-    expr_do_while(blk, @expr),\n     /* Conditionless loop (can be exited with break, cont, ret, or fail)\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */"}, {"sha": "7e5a315a1e1540474923ddac256d245a4efac153", "filename": "src/librustsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Ffold.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -444,9 +444,6 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_while(cond, body) {\n             expr_while(fld.fold_expr(cond), fld.fold_block(body))\n           }\n-          expr_do_while(blk, expr) {\n-            expr_do_while(fld.fold_block(blk), fld.fold_expr(expr))\n-          }\n           expr_loop(body) {\n               expr_loop(fld.fold_block(body))\n           }"}, {"sha": "70f89a38f4709d3beac7e76605240d881ddb27ac", "filename": "src/librustsyntax/parse/classify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fclassify.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -7,8 +7,8 @@ fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     alt e.node {\n       ast::expr_if(_, _, _) | ast::expr_if_check(_, _, _)\n       | ast::expr_alt(_, _, _) | ast::expr_block(_)\n-      | ast::expr_do_while(_, _) | ast::expr_while(_, _)\n-      | ast::expr_loop(_) | ast::expr_call(_, _, true) {\n+      | ast::expr_while(_, _) | ast::expr_loop(_)\n+      | ast::expr_call(_, _, true) {\n         false\n       }\n       _ { true }"}, {"sha": "125dbb927f4a56b6596469fe839a1cecd570a229", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -727,8 +727,6 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n         ret pexpr(parse_for_expr(p));\n     } else if eat_keyword(p, \"while\") {\n         ret pexpr(parse_while_expr(p));\n-    } else if eat_keyword(p, \"do\") {\n-        ret pexpr(parse_do_while_expr(p));\n     } else if eat_keyword(p, \"loop\") {\n         ret pexpr(parse_loop_expr(p));\n     } else if eat_keyword(p, \"alt\") {\n@@ -1233,15 +1231,6 @@ fn parse_while_expr(p: parser) -> @expr {\n     ret mk_expr(p, lo, hi, expr_while(cond, body));\n }\n \n-fn parse_do_while_expr(p: parser) -> @expr {\n-    let lo = p.last_span.lo;\n-    let body = parse_block_no_value(p);\n-    expect_keyword(p, \"while\");\n-    let cond = parse_expr(p);\n-    let mut hi = cond.span.hi;\n-    ret mk_expr(p, lo, hi, expr_do_while(body, cond));\n-}\n-\n fn parse_loop_expr(p: parser) -> @expr {\n     let lo = p.last_span.lo;\n     let body = parse_block_no_value(p);"}, {"sha": "46745b7e28c57e43c033797ee4ef407ea3b7dbd3", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -975,14 +975,6 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         space(s.s);\n         print_block(s, blk);\n       }\n-      ast::expr_do_while(blk, expr) {\n-        head(s, \"do\");\n-        space(s.s);\n-        print_block(s, blk);\n-        space(s.s);\n-        word_space(s, \"while\");\n-        print_expr(s, expr);\n-      }\n       ast::expr_alt(expr, arms, mode) {\n         cbox(s, alt_indent_unit);\n         ibox(s, 4u);"}, {"sha": "c9c751900c8c85ec8bc50831f14991da6782e28b", "filename": "src/librustsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Flibrustsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fvisit.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -376,7 +376,6 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       }\n       expr_while(x, b) { v.visit_expr(x, e, v); v.visit_block(b, e, v); }\n       expr_loop(b) { v.visit_block(b, e, v); }\n-      expr_do_while(b, x) { v.visit_block(b, e, v); v.visit_expr(x, e, v); }\n       expr_alt(x, arms, _) {\n         v.visit_expr(x, e, v);\n         for arms.each {|a| v.visit_arm(a, e, v); }"}, {"sha": "dbdb8137b8a9e897111fdac1d115f3765fdb518f", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -69,10 +69,11 @@ fn parse_constrs(st: @pstate, conv: conv_did) -> [@ty::constr] {\n     let mut rslt: [@ty::constr] = [];\n     alt peek(st) {\n       ':' {\n-        do  {\n+        loop {\n             next(st);\n             rslt += [parse_constr(st, conv, parse_constr_arg)];\n-        } while peek(st) == ';'\n+            if peek(st) != ';' { break; }\n+        }\n       }\n       _ { }\n     }\n@@ -84,10 +85,11 @@ fn parse_ty_constrs(st: @pstate, conv: conv_did) -> [@ty::type_constr] {\n     let mut rslt: [@ty::type_constr] = [];\n     alt peek(st) {\n       ':' {\n-        do  {\n+        loop {\n             next(st);\n             rslt += [parse_constr(st, conv, parse_ty_constr_arg)];\n-        } while peek(st) == ';'\n+            if peek(st) != ';' { break; }\n+        }\n       }\n       _ { }\n     }\n@@ -154,12 +156,13 @@ fn parse_constr<T: copy>(st: @pstate, conv: conv_did,\n     assert (ignore == '(');\n     let def = parse_def(st, conv);\n     let mut an_arg: constr_arg_general_<T>;\n-    do  {\n+    loop {\n         an_arg = pser(st);\n         // FIXME use a real span\n         args += [@respan(sp, an_arg)];\n         ignore = next(st);\n-    } while ignore == ';'\n+        if ignore != ';' { break; }\n+    }\n     assert (ignore == ')');\n     ret @respan(sp, {path: pth, args: args, id: def});\n }"}, {"sha": "f3b6cbf6efc845cb7a1d018497ac65eb915bdacd", "filename": "src/rustc/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Falias.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -122,7 +122,7 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n         check_lval(cx, dest, sc, v);\n       }\n       ast::expr_if(c, then, els) { check_if(c, then, els, sc, v); }\n-      ast::expr_while(_, _) | ast::expr_do_while(_, _) {\n+      ast::expr_while(_, _) {\n         check_loop(*cx, sc) {|| visit::visit_expr(ex, sc, v); }\n       }\n       _ { handled = false; }"}, {"sha": "9e87cbc0bcdb6d9070e4a73b3996aa0d0a5ca6ed", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -761,9 +761,9 @@ impl categorize_methods for borrowck_ctxt {\n           ast::expr_vstore(*) | ast::expr_vec(*) | ast::expr_tup(*) |\n           ast::expr_if_check(*) | ast::expr_if(*) | ast::expr_log(*) |\n           ast::expr_new(*) | ast::expr_binary(*) | ast::expr_while(*) |\n-          ast::expr_do_while(*) | ast::expr_block(*) | ast::expr_loop(*) |\n-          ast::expr_alt(*) | ast::expr_lit(*) | ast::expr_break |\n-          ast::expr_mac(*) | ast::expr_cont | ast::expr_rec(*) {\n+          ast::expr_block(*) | ast::expr_loop(*) | ast::expr_alt(*) |\n+          ast::expr_lit(*) | ast::expr_break | ast::expr_mac(*) |\n+          ast::expr_cont | ast::expr_rec(*) {\n             @{id:expr.id, span:expr.span,\n               cat:cat_rvalue(rv_misc), lp:none,\n               mutbl:m_imm, ty:expr_ty}"}, {"sha": "b815afd36465cc0f2abdec76eaba96f463dab678", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -11,7 +11,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n         },\n         visit_expr: {|e: @expr, cx: ctx, v: visit::vt<ctx>|\n             alt e.node {\n-              expr_while(e, b) | expr_do_while(b, e) {\n+              expr_while(e, b) {\n                 v.visit_expr(e, cx, v);\n                 v.visit_block(b, {in_loop: true with cx}, v);\n               }"}, {"sha": "4454c76d65685341b41d89f037502fe8ef9e9a2e", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -103,7 +103,7 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         leave_fn(cx);\n       }\n       expr_break { add_block_exit(cx, lp); }\n-      expr_while(_, _) | expr_do_while(_, _) | expr_loop(_) {\n+      expr_while(_, _) | expr_loop(_) {\n         visit_block(lp, cx) {|| visit::visit_expr(ex, cx, v);}\n       }\n       expr_alt(input, arms, _) {"}, {"sha": "1df25c9e93ebbfc56de749f82beb575b0c1b121a", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -1761,23 +1761,6 @@ fn trans_while(cx: block, cond: @ast::expr, body: ast::blk)\n     ret next_cx;\n }\n \n-fn trans_do_while(cx: block, body: ast::blk, cond: @ast::expr) ->\n-    block {\n-    let _icx = cx.insn_ctxt(\"trans_do_while\");\n-    let next_cx = sub_block(cx, \"next\");\n-    let body_cx =\n-        loop_scope_block(cx, cont_self, next_cx,\n-                                  \"do-while loop body\", body.span);\n-    let body_end = trans_block(body_cx, body, ignore);\n-    let cond_cx = scope_block(body_cx, \"do-while cond\");\n-    cleanup_and_Br(body_end, body_cx, cond_cx.llbb);\n-    let cond_res = trans_temp_expr(cond_cx, cond);\n-    let cond_bcx = trans_block_cleanups(cond_res.bcx, cond_cx);\n-    CondBr(cond_bcx, cond_res.val, body_cx.llbb, next_cx.llbb);\n-    Br(cx, body_cx.llbb);\n-    ret next_cx;\n-}\n-\n fn trans_loop(cx:block, body: ast::blk) -> block {\n     let _icx = cx.insn_ctxt(\"trans_loop\");\n     let next_cx = sub_block(cx, \"next\");\n@@ -3285,10 +3268,6 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n         assert dest == ignore;\n         ret trans_loop(bcx, body);\n       }\n-      ast::expr_do_while(body, cond) {\n-        assert dest == ignore;\n-        ret trans_do_while(bcx, body, cond);\n-      }\n       ast::expr_assign(dst, src) {\n         assert dest == ignore;\n         let src_r = trans_temp_lval(bcx, src);"}, {"sha": "4b57f33af7de867c1b34d302402025cb253c2d5e", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -212,10 +212,9 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n             }\n         }\n       }\n-      expr_do_while(_, _) | expr_alt(_, _, _) |\n-      expr_block(_) | expr_if(_, _, _) | expr_while(_, _) |\n-      expr_fail(_) | expr_break | expr_cont | expr_unary(_, _) |\n-      expr_lit(_) | expr_assert(_) | expr_check(_, _) |\n+      expr_alt(_, _, _) | expr_block(_) | expr_if(_, _, _) |\n+      expr_while(_, _) | expr_fail(_) | expr_break | expr_cont |\n+      expr_unary(_, _) | expr_lit(_) | expr_assert(_) | expr_check(_, _) |\n       expr_if_check(_, _, _) | expr_mac(_) | expr_addr_of(_, _) |\n       expr_ret(_) | expr_loop(_) | expr_bind(_, _) | expr_loop_body(_) {}\n     }"}, {"sha": "559e8587cef2eb21b6e1d19fe222985c298d409b", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -425,25 +425,6 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n                          intersect_states(expr_postcond(fcx.ccx, test),\n                                           block_postcond(fcx.ccx, body)));\n       }\n-      expr_do_while(body, test) {\n-        find_pre_post_block(fcx, body);\n-        find_pre_post_expr(fcx, test);\n-        let mut loop_postcond =\n-            seq_postconds(fcx,\n-                          [block_postcond(fcx.ccx, body),\n-                           expr_postcond(fcx.ccx, test)]);\n-        /* conservative approximation: if the body\n-           could break or cont, the test may never be executed */\n-\n-        if has_nonlocal_exits(body) {\n-            loop_postcond = empty_poststate(num_local_vars);\n-        }\n-        set_pre_and_post(fcx.ccx, e.id,\n-                         seq_preconds(fcx,\n-                                      [block_pp(fcx.ccx, body),\n-                                       expr_pp(fcx.ccx, test)]),\n-                         loop_postcond);\n-      }\n       expr_loop(body) {\n         find_pre_post_block(fcx, body);\n         /* Infinite loop: if control passes it, everything is true. */"}, {"sha": "8fbdec3d9b5321927f71996f661ea602d5788d0b", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -540,40 +540,6 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                       intersect_states(e_post, b_post));\n         }\n       }\n-      expr_do_while(body, test) {\n-        let loop_pres = intersect_states(expr_poststate(fcx.ccx, test), pres);\n-\n-        let mut changed = set_prestate_ann(fcx.ccx, e.id, loop_pres);\n-        changed |= find_pre_post_state_block(fcx, loop_pres, body);\n-        /* conservative approximination: if the body of the loop\n-           could break or cont, we revert to the prestate\n-           (TODO: could treat cont differently from break, since\n-           if there's a cont, the test will execute) */\n-\n-        changed |=\n-            find_pre_post_state_expr(fcx, block_poststate(fcx.ccx, body),\n-                                     test);\n-\n-        let breaks = has_nonlocal_exits(body);\n-        if breaks {\n-            // this should probably be true_poststate and not pres,\n-            // b/c the body could invalidate stuff\n-            // FIXME [Break-unsound]\n-            // This is unsound as it is -- consider\n-            // while (true) {\n-            //    x <- y;\n-            //    break;\n-            // }\n-            // The poststate wouldn't take into account that\n-            // y gets deinitialized\n-            changed |= set_poststate_ann(fcx.ccx, e.id, pres);\n-        } else {\n-            changed |=\n-                set_poststate_ann(fcx.ccx, e.id,\n-                                  expr_poststate(fcx.ccx, test));\n-        }\n-        ret changed;\n-      }\n       expr_loop(body) {\n         let loop_pres =\n             intersect_states(block_poststate(fcx.ccx, body), pres);"}, {"sha": "472a4f43e2c1bdd6879d1ccdeb2424829830a703", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -3444,11 +3444,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         check_block_no_value(fcx, body);\n         fcx.write_ty(id, ty::mk_nil(tcx));\n       }\n-      ast::expr_do_while(body, cond) {\n-        bot = check_expr_with(fcx, cond, ty::mk_bool(tcx)) |\n-              check_block_no_value(fcx, body);\n-        fcx.write_ty(id, fcx.node_ty(body.node.id));\n-      }\n       ast::expr_loop(body) {\n           check_block_no_value(fcx, body);\n           fcx.write_ty(id, ty::mk_nil(tcx));"}, {"sha": "0aec0cc86bf449bd31379f11f7f3ff8586ae01c3", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -61,24 +61,6 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     }\n }\n \n-fn do_while_aliased_mut(cond: bool) {\n-    let mut v = ~3, w = ~4;\n-    let mut _x = &mut w;\n-    do {\n-        borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-        _x = &mut v; //! NOTE prior loan as mutable granted here\n-    } while cond;\n-}\n-\n-fn loop_in_block() {\n-    let mut v = ~3, w = ~4;\n-    let mut _x = &mut w;\n-    uint::range(0u, 10u) {|_i|\n-        borrow(v); //! ERROR loan of mutable local variable as immutable conflicts with prior loan\n-        _x = &mut v; //! NOTE prior loan as mutable granted here\n-    }\n-}\n-\n fn at_most_once_block() {\n     fn at_most_once(f: fn()) { f() }\n "}, {"sha": "8babc95f0dcc4d1360fda44d9e97638afae1e389", "filename": "src/test/compile-fail/break-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -4,7 +4,7 @@ fn foo() -> int {\n     let x: int;\n     let i: int;\n \n-    do  { i = 0; break; x = 0; } while x != 0\n+    loop { i = 0; break; x = 0; }\n \n     log(debug, x);\n "}, {"sha": "1229e0dc0ee8f1cf36fb4add0f589e71755a8ada", "filename": "src/test/compile-fail/break-uninit2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -4,7 +4,7 @@ fn foo() -> int {\n     let x: int;\n     let i: int;\n \n-    do  { i = 0; break; x = 0; } while 1 != 2\n+    while 1 != 2  { i = 0; break; x = 0; }\n \n     log(debug, x);\n "}, {"sha": "b085de80a23ce00cb9bbe807ad8d99ffb113a919", "filename": "src/test/compile-fail/loop-pred-constraints.rs", "status": "renamed", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Floop-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Floop-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-pred-constraints.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -1,14 +1,17 @@\n+// xfail-test\n+// https://github.com/mozilla/rust/issues/2374\n // error-pattern:unsatisfied precondition constraint (for example, even(y\n \n+\n fn print_even(y: int) : even(y) { log(debug, y); }\n \n pure fn even(y: int) -> bool { true }\n \n fn main() {\n-    let y: int = 42;\n+    let mut y = 42;\n     check (even(y));\n     loop {\n         print_even(y);\n-        do  { do  { do  { y += 1; } while false } while false } while false\n+        loop { y += 1; break; }\n     }\n }", "previous_filename": "src/test/compile-fail/do-while-pred-constraints.rs"}, {"sha": "ca8d014010811b7316af497732c7d9f0608676c0", "filename": "src/test/compile-fail/while-constraints.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Fwhile-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Fcompile-fail%2Fwhile-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-constraints.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     let x: int;\n     loop {\n         log(debug, y);\n-        do  { do  { do  { x <- y; } while true } while true } while true\n+        while true { while true { while true { x <- y; } } }\n     }\n }", "previous_filename": "src/test/compile-fail/do-while-constraints.rs"}, {"sha": "08835ab9204031530e29f3929f10ed113664046c", "filename": "src/test/run-fail/do-while-body-fails.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Ftest%2Frun-fail%2Fdo-while-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Ftest%2Frun-fail%2Fdo-while-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdo-while-body-fails.rs?ref=fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "patch": "@@ -1,2 +0,0 @@\n-// error-pattern:quux\n-fn main() { let x: int = do  { fail \"quux\"; } while true; }"}, {"sha": "38c6d38f309cbb1a3eebab84e33fef4ede375f66", "filename": "src/test/run-fail/do-while-fail.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Ftest%2Frun-fail%2Fdo-while-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Ftest%2Frun-fail%2Fdo-while-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdo-while-fail.rs?ref=fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "patch": "@@ -1,4 +0,0 @@\n-// error-pattern:giraffe\n-fn main() {\n-  fail do { fail \"giraffe\" } while true;\n-}"}, {"sha": "da241afe8a3dc7fe6a4d5dfb541252e2c51cb638", "filename": "src/test/run-fail/while-body-fails.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -0,0 +1,2 @@\n+// error-pattern:quux\n+fn main() { let x: int = { while true { fail \"quux\"; } ; 8 } ; }"}, {"sha": "3f1f9f3e65517c567b7a7325b3c0d9fd94d637b4", "filename": "src/test/run-fail/while-fail.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-fail.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -0,0 +1,4 @@\n+// error-pattern:giraffe\n+fn main() {\n+    fail { while true { fail \"giraffe\"}; \"clandestine\" };\n+}"}, {"sha": "4770b9ce8863f586adc7e3bca2674cabeaf83dcc", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -4,15 +4,18 @@ fn main() {\n     let mut i = 0;\n     while i < 20 { i += 1; if i == 10 { break; } }\n     assert (i == 10);\n-    do  { i += 1; if i == 20 { break; } } while i < 30\n+    loop { i += 1; if i == 20 { break; } }\n     assert (i == 20);\n     for vec::each([1, 2, 3, 4, 5, 6]) {|x|\n         if x == 3 { break; } assert (x <= 3);\n     }\n     i = 0;\n     while i < 10 { i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); }\n     i = 0;\n-    do  { i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); } while i < 10\n+    loop { \n+        i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); \n+        if i >= 10 { break; }\n+    }\n     for vec::each([1, 2, 3, 4, 5, 6]) {|x|\n         if x % 2 == 0 { cont; }\n         assert (x % 2 != 0);"}, {"sha": "870d4aec4031d4531dbed9cc32bf304f83d97592", "filename": "src/test/run-pass/issue-1257.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1257.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -1,8 +1,8 @@\n fn main () {\n   let mut line = \"\";\n   let mut i = 0;\n-  do {\n+  while line != \"exit\" {\n     line = if i == 9 { \"exit\" } else { \"notexit\" };\n     i += 1;\n-  } while line != \"exit\";\n+  }\n }"}, {"sha": "0b4e90ae1dfe9e37f9ad3cb72582f3692060633a", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -16,7 +16,7 @@ fn what() {\n }\n \n fn zombiejesus() {\n-    do  {\n+    loop {\n         while (ret) {\n             if (ret) {\n                 alt (ret) {\n@@ -33,7 +33,8 @@ fn zombiejesus() {\n                 ret;\n             }\n         }\n-    } while ret\n+        if (ret) { break; }\n+    }\n }\n \n fn notsure() {\n@@ -58,7 +59,7 @@ fn canttouchthis() -> uint {\n fn angrydome() {\n     loop { if break { } }\n     let mut i = 0;\n-    do  { i += 1; if i == 1 { alt check cont { 1 { } } } } while false\n+    loop { i += 1; if i == 1 { alt check cont { 1 { } } } break; }\n }\n \n fn evil_lincoln() { let evil <- #debug(\"lincoln\"); }"}, {"sha": "4fce93acd35a810ed13a093c9e1721f395a1aa7e", "filename": "src/test/run-pass/while.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-pass%2Fwhile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a/src%2Ftest%2Frun-pass%2Fwhile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile.rs?ref=664b82a6b79f3aea1d8d00c1e5e7e1e89fcaf71a", "patch": "@@ -4,9 +4,9 @@ fn main() {\n     let mut x: int = 10;\n     let mut y: int = 0;\n     while y < x { log(debug, y); #debug(\"hello\"); y = y + 1; }\n-    do {\n+    while x > 0 {\n         #debug(\"goodbye\");\n         x = x - 1;\n         log(debug, x);\n-    } while x > 0\n+    }\n }", "previous_filename": "src/test/run-pass/while-and-do-while.rs"}]}