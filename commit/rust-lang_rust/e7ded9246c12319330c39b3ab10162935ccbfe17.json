{"sha": "e7ded9246c12319330c39b3ab10162935ccbfe17", "node_id": "C_kwDOAAsO6NoAKGU3ZGVkOTI0NmMxMjMxOTMzMGMzOWIzYWIxMDE2MjkzNWNjYmZlMTc", "commit": {"author": {"name": "Adrian Tombu", "email": "adrian@otso.fr", "date": "2022-08-23T16:48:46Z"}, "committer": {"name": "Adrian Tombu", "email": "adrian@otso.fr", "date": "2022-08-25T16:06:12Z"}, "message": "Fixes fmt & SessionDiagnostic structs", "tree": {"sha": "f6989fd0ca561ed6b7a18096faaada3fb51b15ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6989fd0ca561ed6b7a18096faaada3fb51b15ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7ded9246c12319330c39b3ab10162935ccbfe17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFDBAABCAAtFiEEPq029qEtTUDaayZUnNjpedOpQ/4FAmMHnfQPHGFkcmlhbkBv\ndHNvLmZyAAoJEJzY6XnTqUP+K4MH/39Lj8Lsgpxuo/Y25pAF+YFc3ppLssyX0bm4\nGW9AZtDztQcfw70uxhzx2mYXtXhsmES0A0NLQ5GxhsK0fqN8H4FHoX+Ker731RH7\nxmaG25WZ78qpRrzVXzhuETcSFtnnzhYfUnuyzWloj3emHCfNBRsF+Wdbs84xTBO5\nQGkOtPt2xt3dLyv8koOMTeqIfjEoUHDvBHgkIB07+AGhs63X+Q8M1TR8OhM9MPOf\nHWTlD23FHaTy97kATYevEe/246BpG3BssTj71veUkA9NCZYOY+a8MUMIWULMGTYQ\nx/Ur/a4ae7WkhuARKXp+T9yrifky94I84o8C4/9aYfiHJKowwCA=\n=wJQB\n-----END PGP SIGNATURE-----", "payload": "tree f6989fd0ca561ed6b7a18096faaada3fb51b15ba\nparent dbe39d835e93d784076b96564176825e556e8824\nauthor Adrian Tombu <adrian@otso.fr> 1661273326 +0200\ncommitter Adrian Tombu <adrian@otso.fr> 1661443572 +0200\n\nFixes fmt & SessionDiagnostic structs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ded9246c12319330c39b3ab10162935ccbfe17", "html_url": "https://github.com/rust-lang/rust/commit/e7ded9246c12319330c39b3ab10162935ccbfe17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7ded9246c12319330c39b3ab10162935ccbfe17/comments", "author": {"login": "adriantombu", "id": 383297, "node_id": "MDQ6VXNlcjM4MzI5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/383297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adriantombu", "html_url": "https://github.com/adriantombu", "followers_url": "https://api.github.com/users/adriantombu/followers", "following_url": "https://api.github.com/users/adriantombu/following{/other_user}", "gists_url": "https://api.github.com/users/adriantombu/gists{/gist_id}", "starred_url": "https://api.github.com/users/adriantombu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adriantombu/subscriptions", "organizations_url": "https://api.github.com/users/adriantombu/orgs", "repos_url": "https://api.github.com/users/adriantombu/repos", "events_url": "https://api.github.com/users/adriantombu/events{/privacy}", "received_events_url": "https://api.github.com/users/adriantombu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adriantombu", "id": 383297, "node_id": "MDQ6VXNlcjM4MzI5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/383297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adriantombu", "html_url": "https://github.com/adriantombu", "followers_url": "https://api.github.com/users/adriantombu/followers", "following_url": "https://api.github.com/users/adriantombu/following{/other_user}", "gists_url": "https://api.github.com/users/adriantombu/gists{/gist_id}", "starred_url": "https://api.github.com/users/adriantombu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adriantombu/subscriptions", "organizations_url": "https://api.github.com/users/adriantombu/orgs", "repos_url": "https://api.github.com/users/adriantombu/repos", "events_url": "https://api.github.com/users/adriantombu/events{/privacy}", "received_events_url": "https://api.github.com/users/adriantombu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbe39d835e93d784076b96564176825e556e8824", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe39d835e93d784076b96564176825e556e8824", "html_url": "https://github.com/rust-lang/rust/commit/dbe39d835e93d784076b96564176825e556e8824"}], "stats": {"total": 40, "additions": 9, "deletions": 31}, "files": [{"sha": "33af7fd0e42c08a7fa54d826879fbbd862e7bd68", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e7ded9246c12319330c39b3ab10162935ccbfe17/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ded9246c12319330c39b3ab10162935ccbfe17/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=e7ded9246c12319330c39b3ab10162935ccbfe17", "patch": "@@ -550,11 +550,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n \n fn show_content_with_pager(content: &str) {\n     let pager_name = env::var_os(\"PAGER\").unwrap_or_else(|| {\n-        if cfg!(windows) {\n-            OsString::from(\"more.com\")\n-        } else {\n-            OsString::from(\"less\")\n-        }\n+        if cfg!(windows) { OsString::from(\"more.com\") } else { OsString::from(\"less\") }\n     });\n \n     let mut fallback_to_println = false;\n@@ -590,24 +586,18 @@ pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Comp\n             sess.init_crate_types(collect_crate_types(sess, &[]));\n             let outputs = compiler.build_output_filenames(sess, &[]);\n             let rlink_data = fs::read(file).unwrap_or_else(|err| {\n-                sess.fatal(RlinkUnableToRead {\n-                    span: Default::default(),\n-                    error_message: err.to_string(),\n-                });\n+                sess.emit_fatal(RlinkUnableToRead { error_message: err.to_string() });\n             });\n             let codegen_results = match CodegenResults::deserialize_rlink(rlink_data) {\n                 Ok(codegen) => codegen,\n                 Err(error) => {\n-                    sess.fatal(RlinkUnableToDeserialize {\n-                        span: Default::default(),\n-                        error_message: error.to_string(),\n-                    });\n+                    sess.emit_fatal(RlinkUnableToDeserialize { error_message: error.to_string() });\n                 }\n             };\n             let result = compiler.codegen_backend().link(sess, codegen_results, &outputs);\n             abort_on_err(result, sess);\n         } else {\n-            sess.fatal(RlinkNotAFile { span: Default::default() })\n+            sess.emit_fatal(RlinkNotAFile {})\n         }\n         Compilation::Stop\n     } else {\n@@ -1131,11 +1121,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n         }\n     }\n \n-    if !result.is_empty() {\n-        Some((result, excluded_cargo_defaults))\n-    } else {\n-        None\n-    }\n+    if !result.is_empty() { Some((result, excluded_cargo_defaults)) } else { None }\n }\n \n /// Runs a closure and catches unwinds triggered by fatal errors."}, {"sha": "ed10a66c8231cd564fca8e65653b8fabb11177f2", "filename": "compiler/rustc_driver/src/session_diagnostics.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7ded9246c12319330c39b3ab10162935ccbfe17/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ded9246c12319330c39b3ab10162935ccbfe17/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs?ref=e7ded9246c12319330c39b3ab10162935ccbfe17", "patch": "@@ -1,25 +1,17 @@\n use rustc_macros::SessionDiagnostic;\n-use rustc_span::Span;\n \n #[derive(SessionDiagnostic)]\n-#[error(driver::rlink_unable_to_read)]\n+#[diag(driver::rlink_unable_to_read)]\n pub(crate) struct RlinkUnableToRead {\n-    #[primary_span]\n-    pub span: Span,\n     pub error_message: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(driver::rlink_unable_to_deserialize)]\n+#[diag(driver::rlink_unable_to_deserialize)]\n pub(crate) struct RlinkUnableToDeserialize {\n-    #[primary_span]\n-    pub span: Span,\n     pub error_message: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(driver::rlink_no_a_file)]\n-pub(crate) struct RlinkNotAFile {\n-    #[primary_span]\n-    pub span: Span,\n-}\n+#[diag(driver::rlink_no_a_file)]\n+pub(crate) struct RlinkNotAFile {}"}]}