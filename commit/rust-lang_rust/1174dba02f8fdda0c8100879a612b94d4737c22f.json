{"sha": "1174dba02f8fdda0c8100879a612b94d4737c22f", "node_id": "C_kwDOAAsO6NoAKDExNzRkYmEwMmY4ZmRkYTBjODEwMDg3OWE2MTJiOTRkNDczN2MyMmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-27T23:11:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-27T23:11:47Z"}, "message": "Rollup merge of #97411 - raiyansayeed:print-stderr-consistently, r=Mark-Simulacrum\n\nPrint stderr consistently\n\nSolves https://github.com/rust-lang/rust/issues/96712\n\nI tried to follow what I perceived as the general consensus for error messages in boostrap i.e messages that were ..\n* resulting from an Err(...) =>\n* literally called as \"Error: ....\"\n* by the end of the block scope forced to run a panic! or process::exit with a guaranteed non-zero error code.", "tree": {"sha": "5917ee23c2d7d7c3262b7ccfbd88f5fb5bd3817f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5917ee23c2d7d7c3262b7ccfbd88f5fb5bd3817f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1174dba02f8fdda0c8100879a612b94d4737c22f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJikVq0CRBK7hj4Ov3rIwAAB30IAFZlIlzlYTSf5ivSoKkaSInU\nT6Wn5/xZOF9/kVViEsOn1DWBEOaKgoh3sM9O/udaeXShh5oI27eSiJfRn8vzSmHk\ngIuiWUcEwBysBA+HMczIbIMh2aJl5xs9iQ8nczp7O3m4jki2+cMMA7COxsKvHAyQ\nAI1oiIsSD2f7N3Rx9dmx/FFdhnuqnAkSE6gCmLHvVLkguTQ4mid5U9nqWWTTxenN\ng4bwWkamoYfNH9iEGre/hLeJfakgeAlYCOcTn6+WLi9wNP60IE5S1d47dWgIsf8C\n2OXEgWRpqK+GvihIiM9awlkRiw+Du48c7/pM9eI7wx22WKPRlTwen+Qzm8kkNHM=\n=g5pu\n-----END PGP SIGNATURE-----\n", "payload": "tree 5917ee23c2d7d7c3262b7ccfbd88f5fb5bd3817f\nparent 4254f922db8f257902077023d28d60c61684206b\nparent 392077df24785f2539c4c994d0ba6563a1ba6fb3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1653693107 +0200\ncommitter GitHub <noreply@github.com> 1653693107 +0200\n\nRollup merge of #97411 - raiyansayeed:print-stderr-consistently, r=Mark-Simulacrum\n\nPrint stderr consistently\n\nSolves https://github.com/rust-lang/rust/issues/96712\n\nI tried to follow what I perceived as the general consensus for error messages in boostrap i.e messages that were ..\n* resulting from an Err(...) =>\n* literally called as \"Error: ....\"\n* by the end of the block scope forced to run a panic! or process::exit with a guaranteed non-zero error code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1174dba02f8fdda0c8100879a612b94d4737c22f", "html_url": "https://github.com/rust-lang/rust/commit/1174dba02f8fdda0c8100879a612b94d4737c22f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1174dba02f8fdda0c8100879a612b94d4737c22f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4254f922db8f257902077023d28d60c61684206b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4254f922db8f257902077023d28d60c61684206b", "html_url": "https://github.com/rust-lang/rust/commit/4254f922db8f257902077023d28d60c61684206b"}, {"sha": "392077df24785f2539c4c994d0ba6563a1ba6fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/392077df24785f2539c4c994d0ba6563a1ba6fb3", "html_url": "https://github.com/rust-lang/rust/commit/392077df24785f2539c4c994d0ba6563a1ba6fb3"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "b804cefd3fcde9f35bfaa69ed733f7f900e6911a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1174dba02f8fdda0c8100879a612b94d4737c22f", "patch": "@@ -227,7 +227,7 @@ impl StepDescription {\n \n     fn is_excluded(&self, builder: &Builder<'_>, pathset: &PathSet) -> bool {\n         if builder.config.exclude.iter().any(|e| pathset.has(&e.path, e.kind)) {\n-            eprintln!(\"Skipping {:?} because it is excluded\", pathset);\n+            println!(\"Skipping {:?} because it is excluded\", pathset);\n             return true;\n         }\n "}, {"sha": "b82c1505b249562f8015bb8802adb721480e9d55", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1174dba02f8fdda0c8100879a612b94d4737c22f", "patch": "@@ -765,7 +765,7 @@ impl Config {\n             {\n                 Ok(table) => table,\n                 Err(err) => {\n-                    println!(\"failed to parse TOML configuration '{}': {}\", file.display(), err);\n+                    eprintln!(\"failed to parse TOML configuration '{}': {}\", file.display(), err);\n                     process::exit(2);\n                 }\n             }"}, {"sha": "9827a6c590b57b4fd2487cb19e62aa9fb0bbd2b8", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=1174dba02f8fdda0c8100879a612b94d4737c22f", "patch": "@@ -367,8 +367,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             }\n         }\n         if !pass_sanity_check {\n-            println!(\"{}\\n\", subcommand_help);\n-            println!(\n+            eprintln!(\"{}\\n\", subcommand_help);\n+            eprintln!(\n                 \"Sorry, I couldn't figure out which subcommand you were trying to specify.\\n\\\n                  You may need to move some options to after the subcommand.\\n\"\n             );\n@@ -532,7 +532,7 @@ Arguments:\n             Kind::Build => Subcommand::Build { paths },\n             Kind::Check => {\n                 if matches.opt_present(\"all-targets\") {\n-                    eprintln!(\n+                    println!(\n                         \"Warning: --all-targets is now on by default and does not need to be passed explicitly.\"\n                     );\n                 }\n@@ -606,7 +606,7 @@ Arguments:\n             if matches.opt_str(\"keep-stage\").is_some()\n                 || matches.opt_str(\"keep-stage-std\").is_some()\n             {\n-                println!(\"--keep-stage not yet supported for x.py check\");\n+                eprintln!(\"--keep-stage not yet supported for x.py check\");\n                 process::exit(1);\n             }\n         }"}, {"sha": "d1a450f1bff8ed7b8ee2df7775a004573e9150bc", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=1174dba02f8fdda0c8100879a612b94d4737c22f", "patch": "@@ -96,7 +96,7 @@ pub fn format(build: &Build, check: bool, paths: &[PathBuf]) {\n                     entry.split(' ').nth(1).expect(\"every git status entry should list a path\")\n                 });\n             for untracked_path in untracked_paths {\n-                eprintln!(\"skip untracked path {} during rustfmt invocations\", untracked_path);\n+                println!(\"skip untracked path {} during rustfmt invocations\", untracked_path);\n                 // The leading `/` makes it an exact match against the\n                 // repository root, rather than a glob. Without that, if you\n                 // have `foo.rs` in the repository root it will also match\n@@ -105,10 +105,10 @@ pub fn format(build: &Build, check: bool, paths: &[PathBuf]) {\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n         } else {\n-            eprintln!(\"Not in git tree. Skipping git-aware format checks\");\n+            println!(\"Not in git tree. Skipping git-aware format checks\");\n         }\n     } else {\n-        eprintln!(\"Could not find usable git. Skipping git-aware format checks\");\n+        println!(\"Could not find usable git. Skipping git-aware format checks\");\n     }\n     let ignore_fmt = ignore_fmt.build().unwrap();\n "}, {"sha": "0f0cf0762ab5df6823ebe0d62656cf43411744a4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1174dba02f8fdda0c8100879a612b94d4737c22f", "patch": "@@ -689,9 +689,9 @@ impl Build {\n         // Check for postponed failures from `test --no-fail-fast`.\n         let failures = self.delayed_failures.borrow();\n         if failures.len() > 0 {\n-            println!(\"\\n{} command(s) did not execute successfully:\\n\", failures.len());\n+            eprintln!(\"\\n{} command(s) did not execute successfully:\\n\", failures.len());\n             for failure in failures.iter() {\n-                println!(\"  - {}\\n\", failure);\n+                eprintln!(\"  - {}\\n\", failure);\n             }\n             process::exit(1);\n         }"}, {"sha": "7bfcfcdef2c7d2dba1608586f252591b445e95e9", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=1174dba02f8fdda0c8100879a612b94d4737c22f", "patch": "@@ -138,10 +138,10 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n     let llvm_sha = llvm_sha.trim();\n \n     if llvm_sha == \"\" {\n-        println!(\"error: could not find commit hash for downloading LLVM\");\n-        println!(\"help: maybe your repository history is too shallow?\");\n-        println!(\"help: consider disabling `download-ci-llvm`\");\n-        println!(\"help: or fetch enough history to include one upstream commit\");\n+        eprintln!(\"error: could not find commit hash for downloading LLVM\");\n+        eprintln!(\"help: maybe your repository history is too shallow?\");\n+        eprintln!(\"help: consider disabling `download-ci-llvm`\");\n+        eprintln!(\"help: or fetch enough history to include one upstream commit\");\n         panic!();\n     }\n "}, {"sha": "82f55440ce50c4e6f55f586e9f11e360d440812c", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=1174dba02f8fdda0c8100879a612b94d4737c22f", "patch": "@@ -85,12 +85,12 @@ pub fn setup(config: &Config, profile: Profile) {\n     let path = &config.config;\n \n     if path.exists() {\n-        println!(\n+        eprintln!(\n             \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n             path.display()\n         );\n-        println!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, path.display());\n-        println!(\n+        eprintln!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, path.display());\n+        eprintln!(\n             \"note: this will use the configuration in {}\",\n             profile.include_path(&config.src).display()\n         );\n@@ -115,7 +115,7 @@ pub fn setup(config: &Config, profile: Profile) {\n     println!();\n \n     if !rustup_installed() && profile != Profile::User {\n-        println!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n+        eprintln!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n     } else if stage_dir_exists(&stage_path[..]) {\n         attempt_toolchain_link(&stage_path[..]);\n     }\n@@ -173,7 +173,7 @@ fn attempt_toolchain_link(stage_path: &str) {\n     }\n \n     if !ensure_stage1_toolchain_placeholder_exists(stage_path) {\n-        println!(\n+        eprintln!(\n             \"Failed to create a template for stage 1 toolchain or confirm that it already exists\"\n         );\n         return;\n@@ -184,8 +184,8 @@ fn attempt_toolchain_link(stage_path: &str) {\n             \"Added `stage1` rustup toolchain; try `cargo +stage1 build` on a separate rust project to run a newly-built toolchain\"\n         );\n     } else {\n-        println!(\"`rustup` failed to link stage 1 build to `stage1` toolchain\");\n-        println!(\n+        eprintln!(\"`rustup` failed to link stage 1 build to `stage1` toolchain\");\n+        eprintln!(\n             \"To manually link stage 1 build to `stage1` toolchain, run:\\n\n             `rustup toolchain link stage1 {}`\",\n             &stage_path\n@@ -292,8 +292,8 @@ pub fn interactive_path() -> io::Result<Profile> {\n         break match parse_with_abbrev(&input) {\n             Ok(profile) => profile,\n             Err(err) => {\n-                println!(\"error: {}\", err);\n-                println!(\"note: press Ctrl+C to exit\");\n+                eprintln!(\"error: {}\", err);\n+                eprintln!(\"note: press Ctrl+C to exit\");\n                 continue;\n             }\n         };\n@@ -320,8 +320,8 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n             \"y\" | \"yes\" => true,\n             \"n\" | \"no\" | \"\" => false,\n             _ => {\n-                println!(\"error: unrecognized option '{}'\", input.trim());\n-                println!(\"note: press Ctrl+C to exit\");\n+                eprintln!(\"error: unrecognized option '{}'\", input.trim());\n+                eprintln!(\"note: press Ctrl+C to exit\");\n                 continue;\n             }\n         };\n@@ -337,7 +337,7 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n         ));\n         let dst = git.join(\"hooks\").join(\"pre-push\");\n         match fs::hard_link(src, &dst) {\n-            Err(e) => println!(\n+            Err(e) => eprintln!(\n                 \"error: could not create hook {}: do you already have the git hook installed?\\n{}\",\n                 dst.display(),\n                 e"}, {"sha": "f39cbb57b827100f416b2564480eeeaf0b843f6d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=1174dba02f8fdda0c8100879a612b94d4737c22f", "patch": "@@ -152,43 +152,43 @@ impl Step for ToolBuild {\n         });\n \n         if is_expected && !duplicates.is_empty() {\n-            println!(\n+            eprintln!(\n                 \"duplicate artifacts found when compiling a tool, this \\\n                       typically means that something was recompiled because \\\n                       a transitive dependency has different features activated \\\n                       than in a previous build:\\n\"\n             );\n-            println!(\n+            eprintln!(\n                 \"the following dependencies are duplicated although they \\\n                       have the same features enabled:\"\n             );\n             let (same, different): (Vec<_>, Vec<_>) =\n                 duplicates.into_iter().partition(|(_, cur, prev)| cur.2 == prev.2);\n             for (id, cur, prev) in same {\n-                println!(\"  {}\", id);\n+                eprintln!(\"  {}\", id);\n                 // same features\n-                println!(\"    `{}` ({:?})\\n    `{}` ({:?})\", cur.0, cur.1, prev.0, prev.1);\n+                eprintln!(\"    `{}` ({:?})\\n    `{}` ({:?})\", cur.0, cur.1, prev.0, prev.1);\n             }\n-            println!(\"the following dependencies have different features:\");\n+            eprintln!(\"the following dependencies have different features:\");\n             for (id, cur, prev) in different {\n-                println!(\"  {}\", id);\n+                eprintln!(\"  {}\", id);\n                 let cur_features: HashSet<_> = cur.2.into_iter().collect();\n                 let prev_features: HashSet<_> = prev.2.into_iter().collect();\n-                println!(\n+                eprintln!(\n                     \"    `{}` additionally enabled features {:?} at {:?}\",\n                     cur.0,\n                     &cur_features - &prev_features,\n                     cur.1\n                 );\n-                println!(\n+                eprintln!(\n                     \"    `{}` additionally enabled features {:?} at {:?}\",\n                     prev.0,\n                     &prev_features - &cur_features,\n                     prev.1\n                 );\n             }\n-            println!();\n-            println!(\n+            eprintln!();\n+            eprintln!(\n                 \"to fix this you will probably want to edit the local \\\n                       src/tools/rustc-workspace-hack/Cargo.toml crate, as \\\n                       that will update the dependency graph to ensure that \\"}, {"sha": "848d9a7dc92ed1c19496badc68b7e37b1b64ce97", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174dba02f8fdda0c8100879a612b94d4737c22f/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=1174dba02f8fdda0c8100879a612b94d4737c22f", "patch": "@@ -455,7 +455,7 @@ fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n }\n \n fn fail(s: &str) -> ! {\n-    println!(\"\\n\\n{}\\n\\n\", s);\n+    eprintln!(\"\\n\\n{}\\n\\n\", s);\n     std::process::exit(1);\n }\n "}]}