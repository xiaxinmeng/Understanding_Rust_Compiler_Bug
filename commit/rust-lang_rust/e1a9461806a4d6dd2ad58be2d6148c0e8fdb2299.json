{"sha": "e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYTk0NjE4MDZhNGQ2ZGQyYWQ1OGJlMmQ2MTQ4YzBlOGZkYjIyOTk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-21T14:43:48Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-21T14:43:48Z"}, "message": "Add identity expansion checking", "tree": {"sha": "4bc77ef5e85876a4c5a164da97ceb0bdde9bdbb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc77ef5e85876a4c5a164da97ceb0bdde9bdbb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299", "html_url": "https://github.com/rust-lang/rust/commit/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b561b5c7da8303473792ba2bacb430614da2d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b561b5c7da8303473792ba2bacb430614da2d1", "html_url": "https://github.com/rust-lang/rust/commit/92b561b5c7da8303473792ba2bacb430614da2d1"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "4421d187bcbd06a602cc481ce52824772ef222aa", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299", "patch": "@@ -6,7 +6,7 @@ use mbe::{ExpandResult, MacroRules};\n use ra_db::{salsa, SourceDatabase};\n use ra_parser::FragmentKind;\n use ra_prof::profile;\n-use ra_syntax::{AstNode, Parse, SyntaxKind::*, SyntaxNode};\n+use ra_syntax::{algo::diff, AstNode, Parse, SyntaxKind::*, SyntaxNode};\n \n use crate::{\n     ast_id_map::AstIdMap, BuiltinDeriveExpander, BuiltinFnLikeExpander, EagerCallLoc, EagerMacroId,\n@@ -238,7 +238,7 @@ pub fn parse_macro_with_arg(\n     } else {\n         db.macro_expand(macro_call_id)\n     };\n-    if let Some(err) = err {\n+    if let Some(err) = &err {\n         // Note:\n         // The final goal we would like to make all parse_macro success,\n         // such that the following log will not call anyway.\n@@ -272,7 +272,25 @@ pub fn parse_macro_with_arg(\n     let fragment_kind = to_fragment_kind(db, macro_call_id);\n \n     let (parse, rev_token_map) = mbe::token_tree_to_syntax_node(&tt, fragment_kind).ok()?;\n-    Some((parse, Arc::new(rev_token_map)))\n+\n+    if err.is_none() {\n+        Some((parse, Arc::new(rev_token_map)))\n+    } else {\n+        // FIXME:\n+        // In future, we should proprate the actual error with recovery information\n+        // instead of ignore the error here.\n+\n+        // Safe check for recurisve identity macro\n+        let node = parse.syntax_node();\n+        let file: HirFileId = macro_file.into();\n+        let call_node = file.call_node(db)?;\n+\n+        if !diff(&node, &call_node.value).is_empty() {\n+            Some((parse, Arc::new(rev_token_map)))\n+        } else {\n+            None\n+        }\n+    }\n }\n \n /// Given a `MacroCallId`, return what `FragmentKind` it belongs to."}, {"sha": "50106e31eb9fa64461253afeac1c90cc9c80f452", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299", "patch": "@@ -715,4 +715,34 @@ fn main() {\n             check_struct_shorthand_initialization,\n         );\n     }\n+\n+    #[test]\n+    fn test_bad_macro_stackover() {\n+        check_no_diagnostic(\n+            r#\"\n+                //- /main.rs\n+    #[macro_export]\n+    macro_rules! match_ast {\n+        (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n+\n+        (match ($node:expr) {\n+            $( ast::$ast:ident($it:ident) => $res:expr, )*\n+            _ => $catch_all:expr $(,)?\n+        }) => {{\n+            $( if let Some($it) = ast::$ast::cast($node.clone()) { $res } else )*\n+            { $catch_all }\n+        }};\n+    }\n+\n+    fn main() {\n+        let anchor = match_ast! {\n+            match parent {\n+                as => {},\n+                _ => return None\n+            }\n+        };\n+    }\n+            \"#,\n+        );\n+    }\n }"}, {"sha": "ffdbdc7671333a27909f96d343889391ac1c752d", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=e1a9461806a4d6dd2ad58be2d6148c0e8fdb2299", "patch": "@@ -95,6 +95,10 @@ impl TreeDiff {\n             builder.replace(from.text_range(), to.to_string())\n         }\n     }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.replacements.is_empty()\n+    }\n }\n \n /// Finds minimal the diff, which, applied to `from`, will result in `to`."}]}