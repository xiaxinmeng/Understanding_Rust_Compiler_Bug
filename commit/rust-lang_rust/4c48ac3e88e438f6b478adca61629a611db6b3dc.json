{"sha": "4c48ac3e88e438f6b478adca61629a611db6b3dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNDhhYzNlODhlNDM4ZjZiNDc4YWRjYTYxNjI5YTYxMWRiNmIzZGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T18:41:41Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T18:41:41Z"}, "message": "Use intra-doc links in BTreeMap", "tree": {"sha": "923c3ae690663f49219e4c731196023c2e23d227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/923c3ae690663f49219e4c731196023c2e23d227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c48ac3e88e438f6b478adca61629a611db6b3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c48ac3e88e438f6b478adca61629a611db6b3dc", "html_url": "https://github.com/rust-lang/rust/commit/4c48ac3e88e438f6b478adca61629a611db6b3dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c48ac3e88e438f6b478adca61629a611db6b3dc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3168b7d6c0bb129637e0b6797a5f4a5cf72a807f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3168b7d6c0bb129637e0b6797a5f4a5cf72a807f", "html_url": "https://github.com/rust-lang/rust/commit/3168b7d6c0bb129637e0b6797a5f4a5cf72a807f"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "d2f4278d0d0e0a817d51246c971265c4056c6103", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4c48ac3e88e438f6b478adca61629a611db6b3dc/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c48ac3e88e438f6b478adca61629a611db6b3dc/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=4c48ac3e88e438f6b478adca61629a611db6b3dc", "patch": "@@ -47,9 +47,9 @@ use UnderflowResult::*;\n /// any other key, as determined by the [`Ord`] trait, changes while it is in the map. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n ///\n-/// [`Ord`]: ../../std/cmp/trait.Ord.html\n-/// [`Cell`]: ../../std/cell/struct.Cell.html\n-/// [`RefCell`]: ../../std/cell/struct.RefCell.html\n+/// [`Ord`]: core::cmp::Ord\n+/// [`Cell`]: core::cell::Cell\n+/// [`RefCell`]: core::cell::RefCell\n ///\n /// # Examples\n ///\n@@ -256,8 +256,7 @@ where\n /// This `struct` is created by the [`iter`] method on [`BTreeMap`]. See its\n /// documentation for more.\n ///\n-/// [`iter`]: struct.BTreeMap.html#method.iter\n-/// [`BTreeMap`]: struct.BTreeMap.html\n+/// [`iter`]: BTreeMap::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     range: Range<'a, K, V>,\n@@ -276,8 +275,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Iter<'_, K, V> {\n /// This `struct` is created by the [`iter_mut`] method on [`BTreeMap`]. See its\n /// documentation for more.\n ///\n-/// [`iter_mut`]: struct.BTreeMap.html#method.iter_mut\n-/// [`BTreeMap`]: struct.BTreeMap.html\n+/// [`iter_mut`]: BTreeMap::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n@@ -290,8 +288,7 @@ pub struct IterMut<'a, K: 'a, V: 'a> {\n /// This `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n-/// [`into_iter`]: struct.BTreeMap.html#method.into_iter\n-/// [`BTreeMap`]: struct.BTreeMap.html\n+/// [`into_iter`]: IntoIterator::into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     front: Option<Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge>>,\n@@ -315,8 +312,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n /// This `struct` is created by the [`keys`] method on [`BTreeMap`]. See its\n /// documentation for more.\n ///\n-/// [`keys`]: struct.BTreeMap.html#method.keys\n-/// [`BTreeMap`]: struct.BTreeMap.html\n+/// [`keys`]: BTreeMap::keys\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -334,8 +330,7 @@ impl<K: fmt::Debug, V> fmt::Debug for Keys<'_, K, V> {\n /// This `struct` is created by the [`values`] method on [`BTreeMap`]. See its\n /// documentation for more.\n ///\n-/// [`values`]: struct.BTreeMap.html#method.values\n-/// [`BTreeMap`]: struct.BTreeMap.html\n+/// [`values`]: BTreeMap::values\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -353,8 +348,7 @@ impl<K, V: fmt::Debug> fmt::Debug for Values<'_, K, V> {\n /// This `struct` is created by the [`values_mut`] method on [`BTreeMap`]. See its\n /// documentation for more.\n ///\n-/// [`values_mut`]: struct.BTreeMap.html#method.values_mut\n-/// [`BTreeMap`]: struct.BTreeMap.html\n+/// [`values_mut`]: BTreeMap::values_mut\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n@@ -366,8 +360,7 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// This `struct` is created by the [`range`] method on [`BTreeMap`]. See its\n /// documentation for more.\n ///\n-/// [`range`]: struct.BTreeMap.html#method.range\n-/// [`BTreeMap`]: struct.BTreeMap.html\n+/// [`range`]: BTreeMap::range\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, K: 'a, V: 'a> {\n     front: Option<Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n@@ -386,8 +379,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Range<'_, K, V> {\n /// This `struct` is created by the [`range_mut`] method on [`BTreeMap`]. See its\n /// documentation for more.\n ///\n-/// [`range_mut`]: struct.BTreeMap.html#method.range_mut\n-/// [`BTreeMap`]: struct.BTreeMap.html\n+/// [`range_mut`]: BTreeMap::range_mut\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Option<Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n@@ -412,8 +404,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for RangeMut<'_, K, V> {\n ///\n /// This `enum` is constructed from the [`entry`] method on [`BTreeMap`].\n ///\n-/// [`BTreeMap`]: struct.BTreeMap.html\n-/// [`entry`]: struct.BTreeMap.html#method.entry\n+/// [`entry`]: BTreeMap::entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// A vacant entry."}]}