{"sha": "48dd72888c67e4afa193565ed288e6351253bf29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZGQ3Mjg4OGM2N2U0YWZhMTkzNTY1ZWQyODhlNjM1MTI1M2JmMjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-17T23:10:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-23T22:16:14Z"}, "message": "extra: use deriving more in workcache, switch to treemaps.", "tree": {"sha": "ca289bd0a2e1618ff659269c0cd4a866bf8a38e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca289bd0a2e1618ff659269c0cd4a866bf8a38e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48dd72888c67e4afa193565ed288e6351253bf29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48dd72888c67e4afa193565ed288e6351253bf29", "html_url": "https://github.com/rust-lang/rust/commit/48dd72888c67e4afa193565ed288e6351253bf29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48dd72888c67e4afa193565ed288e6351253bf29/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8990f8be5480ac572c0a108df5312290cc937364", "url": "https://api.github.com/repos/rust-lang/rust/commits/8990f8be5480ac572c0a108df5312290cc937364", "html_url": "https://github.com/rust-lang/rust/commit/8990f8be5480ac572c0a108df5312290cc937364"}], "stats": {"total": 93, "additions": 22, "deletions": 71}, "files": [{"sha": "b0f9dc06bf19f362285e6b173e6cfca88e283932", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 22, "deletions": 71, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/48dd72888c67e4afa193565ed288e6351253bf29/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48dd72888c67e4afa193565ed288e6351253bf29/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=48dd72888c67e4afa193565ed288e6351253bf29", "patch": "@@ -15,18 +15,16 @@ use digest::DigestUtil;\n use json;\n use sha1::Sha1;\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n-use sort;\n+use treemap::TreeMap;\n \n use std::cell::Cell;\n-use std::cmp;\n use std::comm::{PortOne, oneshot, send_one, recv_one};\n use std::either::{Either, Left, Right};\n use std::hashmap::HashMap;\n use std::io;\n use std::result;\n use std::run;\n use std::task;\n-use std::to_bytes;\n \n /**\n *\n@@ -96,36 +94,12 @@ use std::to_bytes;\n *\n */\n \n-#[deriving(Clone, Eq, Encodable, Decodable)]\n+#[deriving(Clone, Eq, Encodable, Decodable, TotalOrd, TotalEq)]\n struct WorkKey {\n     kind: ~str,\n     name: ~str\n }\n \n-impl to_bytes::IterBytes for WorkKey {\n-    #[inline]\n-    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        self.kind.iter_bytes(lsb0, |b| f(b)) && self.name.iter_bytes(lsb0, |b| f(b))\n-    }\n-}\n-\n-impl cmp::Ord for WorkKey {\n-    fn lt(&self, other: &WorkKey) -> bool {\n-        self.kind < other.kind ||\n-            (self.kind == other.kind &&\n-             self.name < other.name)\n-    }\n-    fn le(&self, other: &WorkKey) -> bool {\n-        self.lt(other) || self.eq(other)\n-    }\n-    fn ge(&self, other: &WorkKey) -> bool {\n-        self.gt(other) || self.eq(other)\n-    }\n-    fn gt(&self, other: &WorkKey) -> bool {\n-        ! self.le(other)\n-    }\n-}\n-\n impl WorkKey {\n     pub fn new(kind: &str, name: &str) -> WorkKey {\n         WorkKey {\n@@ -135,43 +109,16 @@ impl WorkKey {\n     }\n }\n \n-struct WorkMap(HashMap<WorkKey, ~str>);\n-\n-impl Clone for WorkMap {\n-    fn clone(&self) -> WorkMap {\n-        WorkMap((**self).clone())\n-    }\n-}\n+#[deriving(Clone, Eq, Encodable, Decodable)]\n+struct WorkMap(TreeMap<WorkKey, ~str>);\n \n impl WorkMap {\n-    fn new() -> WorkMap { WorkMap(HashMap::new()) }\n-}\n-\n-impl<S:Encoder> Encodable<S> for WorkMap {\n-    fn encode(&self, s: &mut S) {\n-        let mut d = ~[];\n-        for self.iter().advance |(k, v)| {\n-            d.push(((*k).clone(), (*v).clone()))\n-        }\n-        sort::tim_sort(d);\n-        d.encode(s)\n-    }\n-}\n-\n-impl<D:Decoder> Decodable<D> for WorkMap {\n-    fn decode(d: &mut D) -> WorkMap {\n-        let v : ~[(WorkKey,~str)] = Decodable::decode(d);\n-        let mut w = WorkMap::new();\n-        for v.iter().advance |pair| {\n-            w.insert(pair.first(), pair.second());\n-        }\n-        w\n-    }\n+    fn new() -> WorkMap { WorkMap(TreeMap::new()) }\n }\n \n struct Database {\n     db_filename: Path,\n-    db_cache: HashMap<~str, ~str>,\n+    db_cache: TreeMap<~str, ~str>,\n     db_dirty: bool\n }\n \n@@ -217,7 +164,7 @@ struct Context {\n     db: @mut Database,\n     logger: @mut Logger,\n     cfg: @json::Object,\n-    freshness: HashMap<~str,@fn(&str,&str)->bool>\n+    freshness: TreeMap<~str,@fn(&str,&str)->bool>\n }\n \n #[deriving(Clone)]\n@@ -273,7 +220,7 @@ impl Context {\n             db: db,\n             logger: lg,\n             cfg: cfg,\n-            freshness: HashMap::new()\n+            freshness: TreeMap::new()\n         }\n     }\n \n@@ -312,16 +259,20 @@ impl TPrep for Prep {\n     fn is_fresh(&self, cat: &str, kind: &str,\n                 name: &str, val: &str) -> bool {\n         let k = kind.to_owned();\n-        let f = (*self.ctxt.freshness.get(&k))(name, val);\n+        let f = self.ctxt.freshness.find(&k);\n+        let fresh = match f {\n+            None => fail!(\"missing freshness-function for '%s'\", kind),\n+            Some(f) => (*f)(name, val)\n+        };\n         let lg = self.ctxt.logger;\n-            if f {\n-                lg.info(fmt!(\"%s %s:%s is fresh\",\n-                             cat, kind, name));\n-            } else {\n-                lg.info(fmt!(\"%s %s:%s is not fresh\",\n-                             cat, kind, name))\n-            }\n-        f\n+        if fresh {\n+            lg.info(fmt!(\"%s %s:%s is fresh\",\n+                         cat, kind, name));\n+        } else {\n+            lg.info(fmt!(\"%s %s:%s is not fresh\",\n+                         cat, kind, name))\n+        }\n+        fresh\n     }\n \n     fn all_fresh(&self, cat: &str, map: &WorkMap) -> bool {\n@@ -411,7 +362,7 @@ fn test() {\n     use std::io::WriterUtil;\n \n     let db = @mut Database { db_filename: Path(\"db.json\"),\n-                             db_cache: HashMap::new(),\n+                             db_cache: TreeMap::new(),\n                              db_dirty: false };\n     let lg = @mut Logger { a: () };\n     let cfg = @HashMap::new();"}]}