{"sha": "7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNDQ1NjFhZDZmNDY1MTA0NzI1NWQwYzYzMGEwYzNmODBjM2ZkZDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-25T19:21:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-04T15:04:26Z"}, "message": "Move various data structures out of typeck and into ty.", "tree": {"sha": "c737e2c7f366b607d2b99906b5655db912823e98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c737e2c7f366b607d2b99906b5655db912823e98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "html_url": "https://github.com/rust-lang/rust/commit/7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d965cc2c99787a949d38abf225412fe502d3ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d965cc2c99787a949d38abf225412fe502d3ed8", "html_url": "https://github.com/rust-lang/rust/commit/6d965cc2c99787a949d38abf225412fe502d3ed8"}], "stats": {"total": 675, "additions": 331, "deletions": 344}, "files": [{"sha": "cb617b169a06079220f53a9fe30fe5b23202be22", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -30,7 +30,7 @@ use metadata::csearch;\n use middle::def::*;\n use middle::ty::{mod, Ty};\n use middle::typeck::astconv::ast_ty_to_ty;\n-use middle::typeck::{mod, infer};\n+use middle::typeck::infer;\n use middle::{def, pat_util, stability};\n use middle::const_eval::{eval_const_expr_partial, const_int, const_uint};\n use util::ppaux::{ty_to_string};\n@@ -1589,22 +1589,22 @@ impl LintPass for Stability {\n             }\n             ast::ExprMethodCall(i, _, _) => {\n                 span = i.span;\n-                let method_call = typeck::MethodCall::expr(e.id);\n+                let method_call = ty::MethodCall::expr(e.id);\n                 match cx.tcx.method_map.borrow().get(&method_call) {\n                     Some(method) => {\n                         match method.origin {\n-                            typeck::MethodStatic(def_id) => {\n+                            ty::MethodStatic(def_id) => {\n                                 def_id\n                             }\n-                            typeck::MethodStaticUnboxedClosure(def_id) => {\n+                            ty::MethodStaticUnboxedClosure(def_id) => {\n                                 def_id\n                             }\n-                            typeck::MethodTypeParam(typeck::MethodParam {\n+                            ty::MethodTypeParam(ty::MethodParam {\n                                 ref trait_ref,\n                                 method_num: index,\n                                 ..\n                             }) |\n-                            typeck::MethodTraitObject(typeck::MethodObject {\n+                            ty::MethodTraitObject(ty::MethodObject {\n                                 ref trait_ref,\n                                 method_num: index,\n                                 .."}, {"sha": "ebf5cca6a31a306520ad5f89497bf3a7c0e1859e", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -21,7 +21,6 @@ use middle::def;\n use middle::lang_items;\n use middle::resolve;\n use middle::ty;\n-use middle::typeck;\n use middle::subst::VecPerParamSpace;\n \n use rbml;\n@@ -268,7 +267,7 @@ pub fn get_impl_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n // Given a def_id for an impl, return information about its vtables\n pub fn get_impl_vtables<'tcx>(tcx: &ty::ctxt<'tcx>,\n                               def: ast::DefId)\n-                              -> typeck::vtable_res<'tcx> {\n+                              -> ty::vtable_res<'tcx> {\n     let cstore = &tcx.sess.cstore;\n     let cdata = cstore.get_crate_data(def.krate);\n     decoder::get_impl_vtables(&*cdata, def.node, tcx)"}, {"sha": "f352a28df6972e3b9690759c5b7720711993b61b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -30,7 +30,6 @@ use middle::resolve::{TraitItemKind, TypeTraitItemKind};\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n use middle::ty::{mod, Ty};\n-use middle::typeck;\n use middle::astencode::vtable_decoder_helpers;\n \n use std::hash::Hash;\n@@ -422,7 +421,7 @@ pub fn get_impl_trait<'tcx>(cdata: Cmd,\n pub fn get_impl_vtables<'tcx>(cdata: Cmd,\n                               id: ast::NodeId,\n                               tcx: &ty::ctxt<'tcx>)\n-                              -> typeck::vtable_res<'tcx>\n+                              -> ty::vtable_res<'tcx>\n {\n     let item_doc = lookup_item(id, cdata.data());\n     let vtables_doc = reader::get_doc(item_doc, tag_item_impl_vtables);"}, {"sha": "113d127503f023df929e793c24613a0b74ec2e60", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -26,8 +26,7 @@ use metadata::tyencode;\n use middle::mem_categorization::Typer;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::typeck::{mod, MethodCall, MethodCallee, MethodOrigin};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, Ty, MethodCall, MethodCallee, MethodOrigin};\n use util::ppaux::ty_to_string;\n \n use syntax::{ast, ast_map, ast_util, codemap, fold};\n@@ -576,12 +575,12 @@ impl tr for ty::UpvarBorrow {\n \n trait read_method_callee_helper<'tcx> {\n     fn read_method_callee<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-        -> (typeck::ExprAdjustment, MethodCallee<'tcx>);\n+        -> (ty::ExprAdjustment, MethodCallee<'tcx>);\n }\n \n fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n                                   rbml_w: &mut Encoder,\n-                                  adjustment: typeck::ExprAdjustment,\n+                                  adjustment: ty::ExprAdjustment,\n                                   method: &MethodCallee<'tcx>) {\n     use serialize::Encoder;\n \n@@ -603,7 +602,7 @@ fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n \n impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n     fn read_method_callee<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-        -> (typeck::ExprAdjustment, MethodCallee<'tcx>) {\n+        -> (ty::ExprAdjustment, MethodCallee<'tcx>) {\n \n         self.read_struct(\"MethodCallee\", 4, |this| {\n             let adjustment = this.read_struct_field(\"adjustment\", 0, |this| {\n@@ -627,22 +626,22 @@ impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n impl<'tcx> tr for MethodOrigin<'tcx> {\n     fn tr(&self, dcx: &DecodeContext) -> MethodOrigin<'tcx> {\n         match *self {\n-            typeck::MethodStatic(did) => typeck::MethodStatic(did.tr(dcx)),\n-            typeck::MethodStaticUnboxedClosure(did) => {\n-                typeck::MethodStaticUnboxedClosure(did.tr(dcx))\n+            ty::MethodStatic(did) => ty::MethodStatic(did.tr(dcx)),\n+            ty::MethodStaticUnboxedClosure(did) => {\n+                ty::MethodStaticUnboxedClosure(did.tr(dcx))\n             }\n-            typeck::MethodTypeParam(ref mp) => {\n-                typeck::MethodTypeParam(\n-                    typeck::MethodParam {\n+            ty::MethodTypeParam(ref mp) => {\n+                ty::MethodTypeParam(\n+                    ty::MethodParam {\n                         // def-id is already translated when we read it out\n                         trait_ref: mp.trait_ref.clone(),\n                         method_num: mp.method_num,\n                     }\n                 )\n             }\n-            typeck::MethodTraitObject(ref mo) => {\n-                typeck::MethodTraitObject(\n-                    typeck::MethodObject {\n+            ty::MethodTraitObject(ref mo) => {\n+                ty::MethodTraitObject(\n+                    ty::MethodObject {\n                         trait_ref: mo.trait_ref.clone(),\n                         .. *mo\n                     }\n@@ -687,16 +686,16 @@ pub trait vtable_decoder_helpers<'tcx> {\n     fn read_vtable_res_with_key(&mut self,\n                                 tcx: &ty::ctxt<'tcx>,\n                                 cdata: &cstore::crate_metadata)\n-                                -> (typeck::ExprAdjustment, typeck::vtable_res<'tcx>);\n+                                -> (ty::ExprAdjustment, ty::vtable_res<'tcx>);\n     fn read_vtable_res(&mut self,\n                        tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                      -> typeck::vtable_res<'tcx>;\n+                      -> ty::vtable_res<'tcx>;\n     fn read_vtable_param_res(&mut self,\n                        tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                      -> typeck::vtable_param_res<'tcx>;\n+                      -> ty::vtable_param_res<'tcx>;\n     fn read_vtable_origin(&mut self,\n                           tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                          -> typeck::vtable_origin<'tcx>;\n+                          -> ty::vtable_origin<'tcx>;\n }\n \n impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n@@ -714,7 +713,7 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_vtable_res_with_key(&mut self,\n                                 tcx: &ty::ctxt<'tcx>,\n                                 cdata: &cstore::crate_metadata)\n-                                -> (typeck::ExprAdjustment, typeck::vtable_res<'tcx>) {\n+                                -> (ty::ExprAdjustment, ty::vtable_res<'tcx>) {\n         self.read_struct(\"VtableWithKey\", 2, |this| {\n             let adjustment = this.read_struct_field(\"adjustment\", 0, |this| {\n                 Decodable::decode(this)\n@@ -728,22 +727,22 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_vtable_res(&mut self,\n                        tcx: &ty::ctxt<'tcx>,\n                        cdata: &cstore::crate_metadata)\n-                       -> typeck::vtable_res<'tcx>\n+                       -> ty::vtable_res<'tcx>\n     {\n         self.read_vec_per_param_space(\n             |this| this.read_vtable_param_res(tcx, cdata))\n     }\n \n     fn read_vtable_param_res(&mut self,\n                              tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                      -> typeck::vtable_param_res<'tcx> {\n+                      -> ty::vtable_param_res<'tcx> {\n         self.read_to_vec(|this| Ok(this.read_vtable_origin(tcx, cdata)))\n              .unwrap().into_iter().collect()\n     }\n \n     fn read_vtable_origin(&mut self,\n                           tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-        -> typeck::vtable_origin<'tcx> {\n+        -> ty::vtable_origin<'tcx> {\n         self.read_enum(\"vtable_origin\", |this| {\n             this.read_enum_variant(&[\"vtable_static\",\n                                      \"vtable_param\",\n@@ -752,7 +751,7 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                                    |this, i| {\n                 Ok(match i {\n                   0 => {\n-                    typeck::vtable_static(\n+                    ty::vtable_static(\n                         this.read_enum_variant_arg(0u, |this| {\n                             Ok(this.read_def_id_nodcx(cdata))\n                         }).unwrap(),\n@@ -765,7 +764,7 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                     )\n                   }\n                   1 => {\n-                    typeck::vtable_param(\n+                    ty::vtable_param(\n                         this.read_enum_variant_arg(0u, |this| {\n                             Decodable::decode(this)\n                         }).unwrap(),\n@@ -775,14 +774,14 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                     )\n                   }\n                   2 => {\n-                    typeck::vtable_unboxed_closure(\n+                    ty::vtable_unboxed_closure(\n                         this.read_enum_variant_arg(0u, |this| {\n                             Ok(this.read_def_id_nodcx(cdata))\n                         }).unwrap()\n                     )\n                   }\n                   3 => {\n-                    typeck::vtable_error\n+                    ty::vtable_error\n                   }\n                   _ => panic!(\"bad enum variant\")\n                 })\n@@ -826,7 +825,7 @@ trait rbml_writer_helpers<'tcx> {\n                              closure_type: &ty::ClosureTy<'tcx>);\n     fn emit_method_origin<'a>(&mut self,\n                               ecx: &e::EncodeContext<'a, 'tcx>,\n-                              method_origin: &typeck::MethodOrigin<'tcx>);\n+                              method_origin: &ty::MethodOrigin<'tcx>);\n     fn emit_ty<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, ty: Ty<'tcx>);\n     fn emit_tys<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, tys: &[Ty<'tcx>]);\n     fn emit_type_param_def<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n@@ -860,25 +859,25 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n \n     fn emit_method_origin<'a>(&mut self,\n                               ecx: &e::EncodeContext<'a, 'tcx>,\n-                              method_origin: &typeck::MethodOrigin<'tcx>)\n+                              method_origin: &ty::MethodOrigin<'tcx>)\n     {\n         use serialize::Encoder;\n \n         self.emit_enum(\"MethodOrigin\", |this| {\n             match *method_origin {\n-                typeck::MethodStatic(def_id) => {\n+                ty::MethodStatic(def_id) => {\n                     this.emit_enum_variant(\"MethodStatic\", 0, 1, |this| {\n                         Ok(this.emit_def_id(def_id))\n                     })\n                 }\n \n-                typeck::MethodStaticUnboxedClosure(def_id) => {\n+                ty::MethodStaticUnboxedClosure(def_id) => {\n                     this.emit_enum_variant(\"MethodStaticUnboxedClosure\", 1, 1, |this| {\n                         Ok(this.emit_def_id(def_id))\n                     })\n                 }\n \n-                typeck::MethodTypeParam(ref p) => {\n+                ty::MethodTypeParam(ref p) => {\n                     this.emit_enum_variant(\"MethodTypeParam\", 2, 1, |this| {\n                         this.emit_struct(\"MethodParam\", 2, |this| {\n                             try!(this.emit_struct_field(\"trait_ref\", 0, |this| {\n@@ -892,7 +891,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                     })\n                 }\n \n-                typeck::MethodTraitObject(ref o) => {\n+                ty::MethodTraitObject(ref o) => {\n                     this.emit_enum_variant(\"MethodTraitObject\", 3, 1, |this| {\n                         this.emit_struct(\"MethodObject\", 2, |this| {\n                             try!(this.emit_struct_field(\"trait_ref\", 0, |this| {\n@@ -1330,7 +1329,7 @@ impl<'a> doc_decoder_helpers for rbml::Doc<'a> {\n \n trait rbml_decoder_decoder_helpers<'tcx> {\n     fn read_method_origin<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                  -> typeck::MethodOrigin<'tcx>;\n+                                  -> ty::MethodOrigin<'tcx>;\n     fn read_ty<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Ty<'tcx>;\n     fn read_tys<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Vec<Ty<'tcx>>;\n     fn read_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n@@ -1409,7 +1408,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     }\n \n     fn read_method_origin<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                  -> typeck::MethodOrigin<'tcx>\n+                                  -> ty::MethodOrigin<'tcx>\n     {\n         self.read_enum(\"MethodOrigin\", |this| {\n             let variants = &[\"MethodStatic\", \"MethodStaticUnboxedClosure\",\n@@ -1418,18 +1417,18 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                 Ok(match i {\n                     0 => {\n                         let def_id = this.read_def_id(dcx);\n-                        typeck::MethodStatic(def_id)\n+                        ty::MethodStatic(def_id)\n                     }\n \n                     1 => {\n                         let def_id = this.read_def_id(dcx);\n-                        typeck::MethodStaticUnboxedClosure(def_id)\n+                        ty::MethodStaticUnboxedClosure(def_id)\n                     }\n \n                     2 => {\n                         this.read_struct(\"MethodTypeParam\", 2, |this| {\n-                            Ok(typeck::MethodTypeParam(\n-                                typeck::MethodParam {\n+                            Ok(ty::MethodTypeParam(\n+                                ty::MethodParam {\n                                     trait_ref: {\n                                         this.read_struct_field(\"trait_ref\", 0, |this| {\n                                             Ok(this.read_trait_ref(dcx))\n@@ -1446,8 +1445,8 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n \n                     3 => {\n                         this.read_struct(\"MethodTraitObject\", 2, |this| {\n-                            Ok(typeck::MethodTraitObject(\n-                                typeck::MethodObject {\n+                            Ok(ty::MethodTraitObject(\n+                                ty::MethodObject {\n                                     trait_ref: {\n                                         this.read_struct_field(\"trait_ref\", 0, |this| {\n                                             Ok(this.read_trait_ref(dcx))"}, {"sha": "90919609e2e447ab72535ff461866ef2b709e55a", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -12,7 +12,6 @@ use middle::cfg::*;\n use middle::def;\n use middle::graph;\n use middle::region::CodeExtent;\n-use middle::typeck;\n use middle::ty;\n use syntax::ast;\n use syntax::ast_util;\n@@ -510,7 +509,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             pred: CFGIndex,\n             func_or_rcvr: &ast::Expr,\n             args: I) -> CFGIndex {\n-        let method_call = typeck::MethodCall::expr(call_expr.id);\n+        let method_call = ty::MethodCall::expr(call_expr.id);\n         let return_ty = ty::ty_fn_ret(match self.tcx.method_map.borrow().get(&method_call) {\n             Some(method) => method.ty,\n             None => ty::expr_ty(self.tcx, func_or_rcvr)\n@@ -635,7 +634,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     }\n \n     fn is_method_call(&self, expr: &ast::Expr) -> bool {\n-        let method_call = typeck::MethodCall::expr(expr.id);\n+        let method_call = ty::MethodCall::expr(expr.id);\n         self.tcx.method_map.borrow().contains_key(&method_call)\n     }\n }"}, {"sha": "de140fd5c306c5bed9efb706ba261603b18392f0", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -11,7 +11,6 @@\n \n use middle::def::*;\n use middle::ty;\n-use middle::typeck;\n use util::ppaux;\n \n use syntax::ast;\n@@ -111,7 +110,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &ast::Expr) -> bool {\n         }\n         ast::ExprLit(ref lit) if ast_util::lit_is_str(&**lit) => {}\n         ast::ExprBinary(..) | ast::ExprUnary(..) => {\n-            let method_call = typeck::MethodCall::expr(e.id);\n+            let method_call = ty::MethodCall::expr(e.id);\n             if v.tcx.method_map.borrow().contains_key(&method_call) {\n                 span_err!(v.tcx.sess, e.span, E0011,\n                           \"user-defined operators are not allowed in constant \\"}, {"sha": "03fe87824215925b36e09b4f8338a41f4bc56377", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -12,7 +12,7 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use middle::{def, pat_util, privacy, ty, typeck};\n+use middle::{def, pat_util, privacy, ty};\n use lint;\n use util::nodemap::NodeSet;\n \n@@ -90,23 +90,23 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n \n     fn lookup_and_handle_method(&mut self, id: ast::NodeId,\n                                 span: codemap::Span) {\n-        let method_call = typeck::MethodCall::expr(id);\n+        let method_call = ty::MethodCall::expr(id);\n         match self.tcx.method_map.borrow().get(&method_call) {\n             Some(method) => {\n                 match method.origin {\n-                    typeck::MethodStatic(def_id) => {\n+                    ty::MethodStatic(def_id) => {\n                         match ty::provided_source(self.tcx, def_id) {\n                             Some(p_did) => self.check_def_id(p_did),\n                             None => self.check_def_id(def_id)\n                         }\n                     }\n-                    typeck::MethodStaticUnboxedClosure(_) => {}\n-                    typeck::MethodTypeParam(typeck::MethodParam {\n+                    ty::MethodStaticUnboxedClosure(_) => {}\n+                    ty::MethodTypeParam(ty::MethodParam {\n                         ref trait_ref,\n                         method_num: index,\n                         ..\n                     }) |\n-                    typeck::MethodTraitObject(typeck::MethodObject {\n+                    ty::MethodTraitObject(ty::MethodObject {\n                         ref trait_ref,\n                         method_num: index,\n                         .."}, {"sha": "dbec69f420503f139efa1facf2863bfb5c321f86", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -14,7 +14,7 @@ use self::UnsafeContext::*;\n \n use middle::def;\n use middle::ty::{mod, Ty};\n-use middle::typeck::MethodCall;\n+use middle::ty::MethodCall;\n use util::ppaux;\n \n use syntax::ast;"}, {"sha": "7d2bb7458acd59cd197bc09d8c09d59f91de7bdc", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -24,10 +24,9 @@ use middle::{def, region, pat_util};\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Typer;\n use middle::ty::{mod, Ty};\n-use middle::typeck::{MethodCall, MethodObject, MethodTraitObject};\n-use middle::typeck::{MethodOrigin, MethodParam, MethodTypeParam};\n-use middle::typeck::{MethodStatic, MethodStaticUnboxedClosure};\n-use middle::typeck;\n+use middle::ty::{MethodCall, MethodObject, MethodTraitObject};\n+use middle::ty::{MethodOrigin, MethodParam, MethodTypeParam};\n+use middle::ty::{MethodStatic, MethodStaticUnboxedClosure};\n use util::ppaux::Repr;\n \n use syntax::ast;\n@@ -825,7 +824,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         debug!(\"walk_autoderefs expr={} autoderefs={}\", expr.repr(self.tcx()), autoderefs);\n \n         for i in range(0, autoderefs) {\n-            let deref_id = typeck::MethodCall::autoderef(expr.id, i);\n+            let deref_id = ty::MethodCall::autoderef(expr.id, i);\n             match self.typer.node_method_ty(deref_id) {\n                 None => {}\n                 Some(method_ty) => {"}, {"sha": "523c9f3330968cd875f01ebd58e378e8e4c682c2", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -111,7 +111,7 @@ use self::VarKind::*;\n \n use middle::def::*;\n use middle::mem_categorization::Typer;\n-use middle::{pat_util, typeck, ty};\n+use middle::{pat_util, ty};\n use lint;\n use util::nodemap::NodeMap;\n \n@@ -1156,7 +1156,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           }\n \n           ast::ExprMethodCall(_, _, ref args) => {\n-            let method_call = typeck::MethodCall::expr(expr.id);\n+            let method_call = ty::MethodCall::expr(expr.id);\n             let method_ty = self.ir.tcx.method_map.borrow().get(&method_call).unwrap().ty;\n             let diverges = ty::ty_fn_ret(method_ty) == ty::FnDiverging;\n             let succ = if diverges {"}, {"sha": "cd70d8e2b487adb4d39b69805d3fde44b54f3229", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -74,7 +74,6 @@ pub use self::categorization::*;\n use middle::def;\n use middle::region;\n use middle::ty::{mod, Ty};\n-use middle::typeck;\n use util::nodemap::{DefIdMap, NodeMap};\n use util::ppaux::{ty_to_string, Repr};\n \n@@ -283,7 +282,7 @@ pub type McResult<T> = Result<T, ()>;\n pub trait Typer<'tcx> {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;\n     fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>>;\n-    fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<Ty<'tcx>>;\n+    fn node_method_ty(&self, method_call: ty::MethodCall) -> Option<Ty<'tcx>>;\n     fn adjustments<'a>(&'a self) -> &'a RefCell<NodeMap<ty::AutoAdjustment<'tcx>>>;\n     fn is_method_call(&self, id: ast::NodeId) -> bool;\n     fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent>;\n@@ -509,7 +508,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           }\n \n           ast::ExprIndex(ref base, _) => {\n-            let method_call = typeck::MethodCall::expr(expr.id());\n+            let method_call = ty::MethodCall::expr(expr.id());\n             match self.typer.node_method_ty(method_call) {\n                 Some(method_ty) => {\n                     // If this is an index implemented by a method call, then it will\n@@ -890,12 +889,12 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                              implicit: bool)\n                              -> cmt<'tcx> {\n         let adjustment = match self.typer.adjustments().borrow().get(&node.id()) {\n-            Some(adj) if ty::adjust_is_object(adj) => typeck::AutoObject,\n-            _ if deref_cnt != 0 => typeck::AutoDeref(deref_cnt),\n-            _ => typeck::NoAdjustment\n+            Some(adj) if ty::adjust_is_object(adj) => ty::AutoObject,\n+            _ if deref_cnt != 0 => ty::AutoDeref(deref_cnt),\n+            _ => ty::NoAdjustment\n         };\n \n-        let method_call = typeck::MethodCall {\n+        let method_call = ty::MethodCall {\n             expr_id: node.id(),\n             adjustment: adjustment\n         };\n@@ -980,7 +979,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n         //! - `elt`: the AST node being indexed\n         //! - `base_cmt`: the cmt of `elt`\n \n-        let method_call = typeck::MethodCall::expr(elt.id());\n+        let method_call = ty::MethodCall::expr(elt.id());\n         let method_ty = self.typer.node_method_ty(method_call);\n \n         let element_ty = match method_ty {"}, {"sha": "5770b601a69ce44ad6a68074d561b6ad4df6da63", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -19,8 +19,8 @@ use std::mem::replace;\n use metadata::csearch;\n use middle::{def, resolve};\n use middle::ty::{mod, Ty};\n-use middle::typeck::{MethodCall, MethodMap, MethodOrigin, MethodParam, MethodTypeParam};\n-use middle::typeck::{MethodStatic, MethodStaticUnboxedClosure, MethodObject, MethodTraitObject};\n+use middle::ty::{MethodCall, MethodMap, MethodOrigin, MethodParam, MethodTypeParam};\n+use middle::ty::{MethodStatic, MethodStaticUnboxedClosure, MethodObject, MethodTraitObject};\n use util::nodemap::{NodeMap, NodeSet};\n \n use syntax::{ast, ast_map};"}, {"sha": "fa02c940aa75426d28813587015b4e030bfd67b5", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -17,7 +17,6 @@\n \n use middle::def;\n use middle::ty;\n-use middle::typeck;\n use middle::privacy;\n use session::config;\n use util::nodemap::NodeSet;\n@@ -137,9 +136,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n                 }\n             }\n             ast::ExprMethodCall(..) => {\n-                let method_call = typeck::MethodCall::expr(expr.id);\n+                let method_call = ty::MethodCall::expr(expr.id);\n                 match (*self.tcx.method_map.borrow())[method_call].origin {\n-                    typeck::MethodStatic(def_id) => {\n+                    ty::MethodStatic(def_id) => {\n                         if is_local(def_id) {\n                             if self.def_id_represents_local_inlined_item(def_id) {\n                                 self.worklist.push(def_id.node)"}, {"sha": "fe8121375ad0573a11461fdbe900427fa61a0943", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 190, "deletions": 8, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -35,6 +35,9 @@ pub use self::ImplOrTraitItem::*;\n pub use self::BoundRegion::*;\n pub use self::sty::*;\n pub use self::IntVarValue::*;\n+pub use self::ExprAdjustment::*;\n+pub use self::vtable_origin::*;\n+pub use self::MethodOrigin::*;\n \n use back::svh::Svh;\n use session::Session;\n@@ -53,7 +56,6 @@ use middle::stability;\n use middle::subst::{mod, Subst, Substs, VecPerParamSpace};\n use middle::traits;\n use middle::ty;\n-use middle::typeck;\n use middle::ty_fold::{mod, TypeFoldable, TypeFolder, HigherRankedFoldable};\n use middle;\n use util::ppaux::{note_and_explain_region, bound_region_ptr_to_string};\n@@ -412,7 +414,161 @@ pub fn type_of_adjust<'tcx>(cx: &ctxt<'tcx>, adj: &AutoAdjustment<'tcx>) -> Opti\n     }\n }\n \n+#[deriving(Clone, Encodable, Decodable, PartialEq, PartialOrd, Show)]\n+pub struct param_index {\n+    pub space: subst::ParamSpace,\n+    pub index: uint\n+}\n+\n+#[deriving(Clone, Show)]\n+pub enum MethodOrigin<'tcx> {\n+    // fully statically resolved method\n+    MethodStatic(ast::DefId),\n+\n+    // fully statically resolved unboxed closure invocation\n+    MethodStaticUnboxedClosure(ast::DefId),\n+\n+    // method invoked on a type parameter with a bounded trait\n+    MethodTypeParam(MethodParam<'tcx>),\n+\n+    // method invoked on a trait instance\n+    MethodTraitObject(MethodObject<'tcx>),\n+\n+}\n+\n+// details for a method invoked with a receiver whose type is a type parameter\n+// with a bounded trait.\n+#[deriving(Clone, Show)]\n+pub struct MethodParam<'tcx> {\n+    // the precise trait reference that occurs as a bound -- this may\n+    // be a supertrait of what the user actually typed.\n+    pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n+\n+    // index of uint in the list of methods for the trait\n+    pub method_num: uint,\n+}\n+\n+// details for a method invoked with a receiver whose type is an object\n+#[deriving(Clone, Show)]\n+pub struct MethodObject<'tcx> {\n+    // the (super)trait containing the method to be invoked\n+    pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n+\n+    // the actual base trait id of the object\n+    pub object_trait_id: ast::DefId,\n+\n+    // index of the method to be invoked amongst the trait's methods\n+    pub method_num: uint,\n+\n+    // index into the actual runtime vtable.\n+    // the vtable is formed by concatenating together the method lists of\n+    // the base object trait and all supertraits;  this is the index into\n+    // that vtable\n+    pub real_index: uint,\n+}\n+\n+#[deriving(Clone)]\n+pub struct MethodCallee<'tcx> {\n+    pub origin: MethodOrigin<'tcx>,\n+    pub ty: Ty<'tcx>,\n+    pub substs: subst::Substs<'tcx>\n+}\n+\n+/// With method calls, we store some extra information in\n+/// side tables (i.e method_map). We use\n+/// MethodCall as a key to index into these tables instead of\n+/// just directly using the expression's NodeId. The reason\n+/// for this being that we may apply adjustments (coercions)\n+/// with the resulting expression also needing to use the\n+/// side tables. The problem with this is that we don't\n+/// assign a separate NodeId to this new expression\n+/// and so it would clash with the base expression if both\n+/// needed to add to the side tables. Thus to disambiguate\n+/// we also keep track of whether there's an adjustment in\n+/// our key.\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+pub struct MethodCall {\n+    pub expr_id: ast::NodeId,\n+    pub adjustment: ExprAdjustment\n+}\n+\n+#[deriving(Clone, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n+pub enum ExprAdjustment {\n+    NoAdjustment,\n+    AutoDeref(uint),\n+    AutoObject\n+}\n+\n+impl MethodCall {\n+    pub fn expr(id: ast::NodeId) -> MethodCall {\n+        MethodCall {\n+            expr_id: id,\n+            adjustment: NoAdjustment\n+        }\n+    }\n+\n+    pub fn autoobject(id: ast::NodeId) -> MethodCall {\n+        MethodCall {\n+            expr_id: id,\n+            adjustment: AutoObject\n+        }\n+    }\n+\n+    pub fn autoderef(expr_id: ast::NodeId, autoderef: uint) -> MethodCall {\n+        MethodCall {\n+            expr_id: expr_id,\n+            adjustment: AutoDeref(1 + autoderef)\n+        }\n+    }\n+}\n+\n+// maps from an expression id that corresponds to a method call to the details\n+// of the method to be invoked\n+pub type MethodMap<'tcx> = RefCell<FnvHashMap<MethodCall, MethodCallee<'tcx>>>;\n+\n+pub type vtable_param_res<'tcx> = Vec<vtable_origin<'tcx>>;\n \n+// Resolutions for bounds of all parameters, left to right, for a given path.\n+pub type vtable_res<'tcx> = VecPerParamSpace<vtable_param_res<'tcx>>;\n+\n+#[deriving(Clone)]\n+pub enum vtable_origin<'tcx> {\n+    /*\n+      Statically known vtable. def_id gives the impl item\n+      from whence comes the vtable, and tys are the type substs.\n+      vtable_res is the vtable itself.\n+     */\n+    vtable_static(ast::DefId, subst::Substs<'tcx>, vtable_res<'tcx>),\n+\n+    /*\n+      Dynamic vtable, comes from a parameter that has a bound on it:\n+      fn foo<T:quux,baz,bar>(a: T) -- a's vtable would have a\n+      vtable_param origin\n+\n+      The first argument is the param index (identifying T in the example),\n+      and the second is the bound number (identifying baz)\n+     */\n+    vtable_param(param_index, uint),\n+\n+    /*\n+      Vtable automatically generated for an unboxed closure. The def ID is the\n+      ID of the closure expression.\n+     */\n+    vtable_unboxed_closure(ast::DefId),\n+\n+    /*\n+      Asked to determine the vtable for ty_err. This is the value used\n+      for the vtables of `Self` in a virtual call like `foo.bar()`\n+      where `foo` is of object type. The same value is also used when\n+      type errors occur.\n+     */\n+    vtable_error,\n+}\n+\n+\n+// For every explicit cast into an object type, maps from the cast\n+// expr to the associated trait ref.\n+pub type ObjectCastMap<'tcx> = RefCell<NodeMap<Rc<ty::TraitRef<'tcx>>>>;\n \n /// A restriction that certain types must be the same size. The use of\n /// `transmute` gives rise to these restrictions.\n@@ -473,7 +629,7 @@ pub struct ctxt<'tcx> {\n \n     /// Maps from node-id of a trait object cast (like `foo as\n     /// Box<Trait>`) to the trait reference.\n-    pub object_cast_map: typeck::ObjectCastMap<'tcx>,\n+    pub object_cast_map: ObjectCastMap<'tcx>,\n \n     pub map: ast_map::Map<'tcx>,\n     pub intrinsic_defs: RefCell<DefIdMap<Ty<'tcx>>>,\n@@ -548,7 +704,7 @@ pub struct ctxt<'tcx> {\n     pub extern_const_statics: RefCell<DefIdMap<ast::NodeId>>,\n     pub extern_const_variants: RefCell<DefIdMap<ast::NodeId>>,\n \n-    pub method_map: typeck::MethodMap<'tcx>,\n+    pub method_map: MethodMap<'tcx>,\n \n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n \n@@ -3658,7 +3814,7 @@ pub fn adjust_ty<'tcx>(cx: &ctxt<'tcx>,\n                        expr_id: ast::NodeId,\n                        unadjusted_ty: Ty<'tcx>,\n                        adjustment: Option<&AutoAdjustment<'tcx>>,\n-                       method_type: |typeck::MethodCall| -> Option<Ty<'tcx>>)\n+                       method_type: |MethodCall| -> Option<Ty<'tcx>>)\n                        -> Ty<'tcx> {\n \n     if let ty_err = unadjusted_ty.sty {\n@@ -3699,7 +3855,7 @@ pub fn adjust_ty<'tcx>(cx: &ctxt<'tcx>,\n \n                     if !ty::type_is_error(adjusted_ty) {\n                         for i in range(0, adj.autoderefs) {\n-                            let method_call = typeck::MethodCall::autoderef(expr_id, i);\n+                            let method_call = MethodCall::autoderef(expr_id, i);\n                             match method_type(method_call) {\n                                 Some(method_ty) => {\n                                     if let ty::FnConverging(result_type) = ty_fn_ret(method_ty) {\n@@ -3830,7 +3986,7 @@ pub enum ExprKind {\n }\n \n pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n-    if tcx.method_map.borrow().contains_key(&typeck::MethodCall::expr(expr.id)) {\n+    if tcx.method_map.borrow().contains_key(&MethodCall::expr(expr.id)) {\n         // Overloaded operations are generally calls, and hence they are\n         // generated via DPS, but there are a few exceptions:\n         return match expr.node {\n@@ -5747,7 +5903,7 @@ impl<'tcx> mc::Typer<'tcx> for ty::ctxt<'tcx> {\n         Ok(ty::node_id_to_type(self, id))\n     }\n \n-    fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<Ty<'tcx>> {\n+    fn node_method_ty(&self, method_call: MethodCall) -> Option<Ty<'tcx>> {\n         self.method_map.borrow().get(&method_call).map(|method| method.ty)\n     }\n \n@@ -5756,7 +5912,7 @@ impl<'tcx> mc::Typer<'tcx> for ty::ctxt<'tcx> {\n     }\n \n     fn is_method_call(&self, id: ast::NodeId) -> bool {\n-        self.method_map.borrow().contains_key(&typeck::MethodCall::expr(id))\n+        self.method_map.borrow().contains_key(&MethodCall::expr(id))\n     }\n \n     fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent> {\n@@ -6010,3 +6166,29 @@ impl<'tcx> Repr<'tcx> for TyTrait<'tcx> {\n                 self.bounds.repr(tcx))\n     }\n }\n+\n+impl<'tcx> Repr<'tcx> for vtable_origin<'tcx> {\n+    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n+        match *self {\n+            vtable_static(def_id, ref tys, ref vtable_res) => {\n+                format!(\"vtable_static({}:{}, {}, {})\",\n+                        def_id,\n+                        ty::item_path_str(tcx, def_id),\n+                        tys.repr(tcx),\n+                        vtable_res.repr(tcx))\n+            }\n+\n+            vtable_param(x, y) => {\n+                format!(\"vtable_param({}, {})\", x, y)\n+            }\n+\n+            vtable_unboxed_closure(def_id) => {\n+                format!(\"vtable_unboxed_closure({})\", def_id)\n+            }\n+\n+            vtable_error => {\n+                format!(\"vtable_error\")\n+            }\n+        }\n+    }\n+}"}, {"sha": "77092025349e783c64251b034c23e93c5d3fb34f", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -38,7 +38,6 @@ use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty::{mod, Ty};\n use middle::traits;\n-use middle::typeck;\n use std::rc::Rc;\n use syntax::owned_slice::OwnedSlice;\n use util::ppaux::Repr;\n@@ -304,23 +303,23 @@ impl<'tcx> TypeFoldable<'tcx> for ty::AutoRef<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for typeck::MethodOrigin<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> typeck::MethodOrigin<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ty::MethodOrigin<'tcx> {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::MethodOrigin<'tcx> {\n         match *self {\n-            typeck::MethodStatic(def_id) => {\n-                typeck::MethodStatic(def_id)\n+            ty::MethodStatic(def_id) => {\n+                ty::MethodStatic(def_id)\n             }\n-            typeck::MethodStaticUnboxedClosure(def_id) => {\n-                typeck::MethodStaticUnboxedClosure(def_id)\n+            ty::MethodStaticUnboxedClosure(def_id) => {\n+                ty::MethodStaticUnboxedClosure(def_id)\n             }\n-            typeck::MethodTypeParam(ref param) => {\n-                typeck::MethodTypeParam(typeck::MethodParam {\n+            ty::MethodTypeParam(ref param) => {\n+                ty::MethodTypeParam(ty::MethodParam {\n                     trait_ref: param.trait_ref.fold_with(folder),\n                     method_num: param.method_num\n                 })\n             }\n-            typeck::MethodTraitObject(ref object) => {\n-                typeck::MethodTraitObject(typeck::MethodObject {\n+            ty::MethodTraitObject(ref object) => {\n+                ty::MethodTraitObject(ty::MethodObject {\n                     trait_ref: object.trait_ref.fold_with(folder),\n                     object_trait_id: object.object_trait_id,\n                     method_num: object.method_num,\n@@ -331,22 +330,22 @@ impl<'tcx> TypeFoldable<'tcx> for typeck::MethodOrigin<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for typeck::vtable_origin<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> typeck::vtable_origin<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ty::vtable_origin<'tcx> {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::vtable_origin<'tcx> {\n         match *self {\n-            typeck::vtable_static(def_id, ref substs, ref origins) => {\n+            ty::vtable_static(def_id, ref substs, ref origins) => {\n                 let r_substs = substs.fold_with(folder);\n                 let r_origins = origins.fold_with(folder);\n-                typeck::vtable_static(def_id, r_substs, r_origins)\n+                ty::vtable_static(def_id, r_substs, r_origins)\n             }\n-            typeck::vtable_param(n, b) => {\n-                typeck::vtable_param(n, b)\n+            ty::vtable_param(n, b) => {\n+                ty::vtable_param(n, b)\n             }\n-            typeck::vtable_unboxed_closure(def_id) => {\n-                typeck::vtable_unboxed_closure(def_id)\n+            ty::vtable_unboxed_closure(def_id) => {\n+                ty::vtable_unboxed_closure(def_id)\n             }\n-            typeck::vtable_error => {\n-                typeck::vtable_error\n+            ty::vtable_error => {\n+                ty::vtable_error\n             }\n         }\n     }"}, {"sha": "4e541f120ab8e471211fe8f42726fc7d559e1b81", "filename": "src/librustc/middle/typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -13,9 +13,9 @@ use super::probe;\n use middle::subst::{mod, Subst};\n use middle::traits;\n use middle::ty::{mod, Ty};\n+use middle::ty::{MethodCall, MethodCallee, MethodObject, MethodOrigin,\n+                 MethodParam, MethodStatic, MethodTraitObject, MethodTypeParam};\n use middle::typeck::check::{mod, FnCtxt, NoPreference, PreferMutLvalue};\n-use middle::typeck::{MethodCall, MethodCallee, MethodObject, MethodOrigin,\n-                     MethodParam, MethodStatic, MethodTraitObject, MethodTypeParam};\n use middle::typeck::infer::{mod, InferCtxt};\n use middle::ty_fold::HigherRankedFoldable;\n use syntax::ast;"}, {"sha": "001f5be69a13dc6dbb66443b21aca04562960a93", "filename": "src/librustc/middle/typeck/check/method/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -21,8 +21,6 @@ use middle::typeck::check::{impl_self_ty};\n use middle::typeck::check::vtable;\n use middle::typeck::check::vtable::select_new_fcx_obligations;\n use middle::typeck::infer;\n-use middle::typeck::{MethodCallee};\n-use middle::typeck::{MethodParam, MethodTypeParam};\n use util::ppaux::{Repr, UserString};\n \n use std::rc::Rc;"}, {"sha": "689071b77e49614f14b4a26d8bcb278ff20f3f24", "filename": "src/librustc/middle/typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -17,10 +17,10 @@ use middle::subst;\n use middle::subst::Subst;\n use middle::traits;\n use middle::ty::{mod, Ty};\n+use middle::ty::{MethodObject};\n use middle::ty_fold::HigherRankedFoldable;\n use middle::typeck::check;\n use middle::typeck::check::{FnCtxt, NoPreference};\n-use middle::typeck::{MethodObject};\n use middle::typeck::infer;\n use middle::typeck::infer::InferCtxt;\n use syntax::ast;"}, {"sha": "0033613d9c6ba5f365e2d89423e55b91636ad218", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -93,12 +93,13 @@ use middle::ty::{FnSig, VariantInfo, Polytype};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n use middle::ty::{mod, Ty};\n use middle::ty::liberate_late_bound_regions;\n+use middle::ty::{MethodCall, MethodCallee, MethodMap, ObjectCastMap};\n use middle::ty_fold::TypeFolder;\n use middle::typeck::astconv::{mod, ast_region_to_region, ast_ty_to_ty, AstConv};\n use middle::typeck::check::_match::pat_ctxt;\n use middle::typeck::rscope::RegionScope;\n-use middle::typeck::{mod, CrateCtxt, infer, lookup_def_ccx, no_params, require_same_types};\n-use middle::typeck::{MethodCall, MethodCallee, MethodMap, ObjectCastMap, TypeAndSubsts};\n+use middle::typeck::{CrateCtxt, infer, lookup_def_ccx, no_params, require_same_types};\n+use middle::typeck::TypeAndSubsts;\n use middle::lang_items::TypeIdLangItem;\n use lint;\n use util::common::{block_query, indenter, loop_query};\n@@ -279,15 +280,15 @@ impl<'a, 'tcx> mem_categorization::Typer<'tcx> for FnCtxt<'a, 'tcx> {\n     fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> {\n         Ok(self.node_ty(id))\n     }\n-    fn node_method_ty(&self, method_call: typeck::MethodCall)\n+    fn node_method_ty(&self, method_call: ty::MethodCall)\n                       -> Option<Ty<'tcx>> {\n         self.inh.method_map.borrow().get(&method_call).map(|m| m.ty)\n     }\n     fn adjustments<'a>(&'a self) -> &'a RefCell<NodeMap<ty::AutoAdjustment<'tcx>>> {\n         &self.inh.adjustments\n     }\n     fn is_method_call(&self, id: ast::NodeId) -> bool {\n-        self.inh.method_map.borrow().contains_key(&typeck::MethodCall::expr(id))\n+        self.inh.method_map.borrow().contains_key(&ty::MethodCall::expr(id))\n     }\n     fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<CodeExtent> {\n         self.tcx().temporary_scope(rvalue_id)\n@@ -3260,7 +3261,7 @@ fn check_expr_with_unifier<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             Some(method) => {\n                 let method_ty = method.ty;\n                 // HACK(eddyb) Fully qualified path to work around a resolve bug.\n-                let method_call = ::middle::typeck::MethodCall::expr(op_ex.id);\n+                let method_call = ::middle::ty::MethodCall::expr(op_ex.id);\n                 fcx.inh.method_map.borrow_mut().insert(method_call, method);\n                 match check_method_argument_types(fcx,\n                                             op_ex.span,"}, {"sha": "1c938bc1e1f301318beaf7c080ed23a78fa2e348", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -119,15 +119,14 @@ use middle::mem_categorization as mc;\n use middle::region::CodeExtent;\n use middle::traits;\n use middle::ty::{ReScope};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, Ty, MethodCall};\n use middle::typeck::astconv::AstConv;\n use middle::typeck::check::FnCtxt;\n use middle::typeck::check::regionmanip;\n use middle::typeck::check::vtable;\n use middle::typeck::infer::resolve_and_force_all_but_regions;\n use middle::typeck::infer::resolve_type;\n use middle::typeck::infer;\n-use middle::typeck::MethodCall;\n use middle::pat_util;\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap};\n use util::ppaux::{ty_to_string, Repr};"}, {"sha": "8205e83fb052b64f2573fea6668220483566cb85", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -15,14 +15,13 @@ use self::ResolveReason::*;\n \n use middle::def;\n use middle::pat_util;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, Ty, MethodCall, MethodCallee};\n use middle::ty_fold::{TypeFolder,TypeFoldable};\n use middle::typeck::astconv::AstConv;\n use middle::typeck::check::FnCtxt;\n use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n use middle::typeck::infer::resolve_type;\n use middle::typeck::infer;\n-use middle::typeck::{MethodCall, MethodCallee};\n use middle::typeck::write_substs_to_tcx;\n use middle::typeck::write_ty_to_tcx;\n use util::ppaux::Repr;"}, {"sha": "a95849e083d10b6ee0d07ab4087eaa5b1344fcc0", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 0, "deletions": 188, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -61,10 +61,6 @@ independently:\n \n #![allow(non_camel_case_types)]\n \n-pub use self::ExprAdjustment::*;\n-pub use self::vtable_origin::*;\n-pub use self::MethodOrigin::*;\n-\n use middle::def;\n use middle::resolve;\n use middle::subst;\n@@ -74,10 +70,7 @@ use session::config;\n use util::common::time;\n use util::ppaux::Repr;\n use util::ppaux;\n-use util::nodemap::{NodeMap, FnvHashMap};\n \n-use std::cell::RefCell;\n-use std::rc::Rc;\n use syntax::codemap::Span;\n use syntax::print::pprust::*;\n use syntax::{ast, ast_map, abi};\n@@ -90,192 +83,11 @@ pub mod collect;\n pub mod coherence;\n pub mod variance;\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq, PartialOrd, Show)]\n-pub struct param_index {\n-    pub space: subst::ParamSpace,\n-    pub index: uint\n-}\n-\n-#[deriving(Clone, Show)]\n-pub enum MethodOrigin<'tcx> {\n-    // fully statically resolved method\n-    MethodStatic(ast::DefId),\n-\n-    // fully statically resolved unboxed closure invocation\n-    MethodStaticUnboxedClosure(ast::DefId),\n-\n-    // method invoked on a type parameter with a bounded trait\n-    MethodTypeParam(MethodParam<'tcx>),\n-\n-    // method invoked on a trait instance\n-    MethodTraitObject(MethodObject<'tcx>),\n-\n-}\n-\n-// details for a method invoked with a receiver whose type is a type parameter\n-// with a bounded trait.\n-#[deriving(Clone, Show)]\n-pub struct MethodParam<'tcx> {\n-    // the precise trait reference that occurs as a bound -- this may\n-    // be a supertrait of what the user actually typed.\n-    pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n-\n-    // index of uint in the list of methods for the trait\n-    pub method_num: uint,\n-}\n-\n-// details for a method invoked with a receiver whose type is an object\n-#[deriving(Clone, Show)]\n-pub struct MethodObject<'tcx> {\n-    // the (super)trait containing the method to be invoked\n-    pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n-\n-    // the actual base trait id of the object\n-    pub object_trait_id: ast::DefId,\n-\n-    // index of the method to be invoked amongst the trait's methods\n-    pub method_num: uint,\n-\n-    // index into the actual runtime vtable.\n-    // the vtable is formed by concatenating together the method lists of\n-    // the base object trait and all supertraits;  this is the index into\n-    // that vtable\n-    pub real_index: uint,\n-}\n-\n-#[deriving(Clone)]\n-pub struct MethodCallee<'tcx> {\n-    pub origin: MethodOrigin<'tcx>,\n-    pub ty: Ty<'tcx>,\n-    pub substs: subst::Substs<'tcx>\n-}\n-\n-/// With method calls, we store some extra information in\n-/// side tables (i.e method_map). We use\n-/// MethodCall as a key to index into these tables instead of\n-/// just directly using the expression's NodeId. The reason\n-/// for this being that we may apply adjustments (coercions)\n-/// with the resulting expression also needing to use the\n-/// side tables. The problem with this is that we don't\n-/// assign a separate NodeId to this new expression\n-/// and so it would clash with the base expression if both\n-/// needed to add to the side tables. Thus to disambiguate\n-/// we also keep track of whether there's an adjustment in\n-/// our key.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n-pub struct MethodCall {\n-    pub expr_id: ast::NodeId,\n-    pub adjustment: ExprAdjustment\n-}\n-\n-#[deriving(Clone, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n-pub enum ExprAdjustment {\n-    NoAdjustment,\n-    AutoDeref(uint),\n-    AutoObject\n-}\n-\n pub struct TypeAndSubsts<'tcx> {\n     pub substs: subst::Substs<'tcx>,\n     pub ty: Ty<'tcx>,\n }\n \n-impl MethodCall {\n-    pub fn expr(id: ast::NodeId) -> MethodCall {\n-        MethodCall {\n-            expr_id: id,\n-            adjustment: NoAdjustment\n-        }\n-    }\n-\n-    pub fn autoobject(id: ast::NodeId) -> MethodCall {\n-        MethodCall {\n-            expr_id: id,\n-            adjustment: AutoObject\n-        }\n-    }\n-\n-    pub fn autoderef(expr_id: ast::NodeId, autoderef: uint) -> MethodCall {\n-        MethodCall {\n-            expr_id: expr_id,\n-            adjustment: AutoDeref(1 + autoderef)\n-        }\n-    }\n-}\n-\n-// maps from an expression id that corresponds to a method call to the details\n-// of the method to be invoked\n-pub type MethodMap<'tcx> = RefCell<FnvHashMap<MethodCall, MethodCallee<'tcx>>>;\n-\n-pub type vtable_param_res<'tcx> = Vec<vtable_origin<'tcx>>;\n-\n-// Resolutions for bounds of all parameters, left to right, for a given path.\n-pub type vtable_res<'tcx> = VecPerParamSpace<vtable_param_res<'tcx>>;\n-\n-#[deriving(Clone)]\n-pub enum vtable_origin<'tcx> {\n-    /*\n-      Statically known vtable. def_id gives the impl item\n-      from whence comes the vtable, and tys are the type substs.\n-      vtable_res is the vtable itself.\n-     */\n-    vtable_static(ast::DefId, subst::Substs<'tcx>, vtable_res<'tcx>),\n-\n-    /*\n-      Dynamic vtable, comes from a parameter that has a bound on it:\n-      fn foo<T:quux,baz,bar>(a: T) -- a's vtable would have a\n-      vtable_param origin\n-\n-      The first argument is the param index (identifying T in the example),\n-      and the second is the bound number (identifying baz)\n-     */\n-    vtable_param(param_index, uint),\n-\n-    /*\n-      Vtable automatically generated for an unboxed closure. The def ID is the\n-      ID of the closure expression.\n-     */\n-    vtable_unboxed_closure(ast::DefId),\n-\n-    /*\n-      Asked to determine the vtable for ty_err. This is the value used\n-      for the vtables of `Self` in a virtual call like `foo.bar()`\n-      where `foo` is of object type. The same value is also used when\n-      type errors occur.\n-     */\n-    vtable_error,\n-}\n-\n-impl<'tcx> Repr<'tcx> for vtable_origin<'tcx> {\n-    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n-        match *self {\n-            vtable_static(def_id, ref tys, ref vtable_res) => {\n-                format!(\"vtable_static({}:{}, {}, {})\",\n-                        def_id,\n-                        ty::item_path_str(tcx, def_id),\n-                        tys.repr(tcx),\n-                        vtable_res.repr(tcx))\n-            }\n-\n-            vtable_param(x, y) => {\n-                format!(\"vtable_param({}, {})\", x, y)\n-            }\n-\n-            vtable_unboxed_closure(def_id) => {\n-                format!(\"vtable_unboxed_closure({})\", def_id)\n-            }\n-\n-            vtable_error => {\n-                format!(\"vtable_error\")\n-            }\n-        }\n-    }\n-}\n-\n-// For every explicit cast into an object type, maps from the cast\n-// expr to the associated trait ref.\n-pub type ObjectCastMap<'tcx> = RefCell<NodeMap<Rc<ty::TraitRef<'tcx>>>>;\n-\n pub struct CrateCtxt<'a, 'tcx: 'a> {\n     // A mapping from method call sites to traits that have that method.\n     trait_map: resolve::TraitMap,"}, {"sha": "1dfedd4c85c06ef455a71dffc3f6dd3bc949b679", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -23,7 +23,6 @@ use middle::ty::{ty_param, ty_ptr, ty_rptr, ty_tup, ty_open};\n use middle::ty::{ty_unboxed_closure};\n use middle::ty::{ty_uniq, ty_trait, ty_int, ty_uint, ty_infer};\n use middle::ty;\n-use middle::typeck;\n use middle::typeck::check::regionmanip;\n \n use std::rc::Rc;\n@@ -1018,7 +1017,7 @@ impl<'tcx> Repr<'tcx> for ty::FnOutput<'tcx> {\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for typeck::MethodCallee<'tcx> {\n+impl<'tcx> Repr<'tcx> for ty::MethodCallee<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         format!(\"MethodCallee {{origin: {}, ty: {}, {}}}\",\n                 self.origin.repr(tcx),\n@@ -1027,34 +1026,34 @@ impl<'tcx> Repr<'tcx> for typeck::MethodCallee<'tcx> {\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for typeck::MethodOrigin<'tcx> {\n+impl<'tcx> Repr<'tcx> for ty::MethodOrigin<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         match self {\n-            &typeck::MethodStatic(def_id) => {\n+            &ty::MethodStatic(def_id) => {\n                 format!(\"MethodStatic({})\", def_id.repr(tcx))\n             }\n-            &typeck::MethodStaticUnboxedClosure(def_id) => {\n+            &ty::MethodStaticUnboxedClosure(def_id) => {\n                 format!(\"MethodStaticUnboxedClosure({})\", def_id.repr(tcx))\n             }\n-            &typeck::MethodTypeParam(ref p) => {\n+            &ty::MethodTypeParam(ref p) => {\n                 p.repr(tcx)\n             }\n-            &typeck::MethodTraitObject(ref p) => {\n+            &ty::MethodTraitObject(ref p) => {\n                 p.repr(tcx)\n             }\n         }\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for typeck::MethodParam<'tcx> {\n+impl<'tcx> Repr<'tcx> for ty::MethodParam<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         format!(\"MethodParam({},{})\",\n                 self.trait_ref.repr(tcx),\n                 self.method_num)\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for typeck::MethodObject<'tcx> {\n+impl<'tcx> Repr<'tcx> for ty::MethodObject<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         format!(\"MethodObject({},{},{})\",\n                 self.trait_ref.repr(tcx),\n@@ -1293,7 +1292,6 @@ impl<'tcx> Repr<'tcx> for ty::ExplicitSelfCategory {\n     }\n }\n \n-\n impl<'tcx> Repr<'tcx> for regionmanip::WfConstraint<'tcx> {\n     fn repr(&self, tcx: &ctxt) -> String {\n         match *self {"}, {"sha": "481ee679dbd62322741ff9fd2e597476e4673be0", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -912,10 +912,10 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                            ex: &ast::Expr,\n                            args: &Vec<P<ast::Expr>>) {\n         let method_map = self.analysis.ty_cx.method_map.borrow();\n-        let method_callee = &(*method_map)[typeck::MethodCall::expr(ex.id)];\n+        let method_callee = &(*method_map)[ty::MethodCall::expr(ex.id)];\n         let (def_id, decl_id) = match method_callee.origin {\n-            typeck::MethodStatic(def_id) |\n-            typeck::MethodStaticUnboxedClosure(def_id) => {\n+            ty::MethodStatic(def_id) |\n+            ty::MethodStaticUnboxedClosure(def_id) => {\n                 // method invoked on an object with a concrete type (not a static method)\n                 let decl_id =\n                     match ty::trait_item_of_item(&self.analysis.ty_cx,\n@@ -936,14 +936,14 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 };\n                 (Some(def_id), decl_id)\n             }\n-            typeck::MethodTypeParam(ref mp) => {\n+            ty::MethodTypeParam(ref mp) => {\n                 // method invoked on a type parameter\n                 let trait_item = ty::trait_item(&self.analysis.ty_cx,\n                                                 mp.trait_ref.def_id,\n                                                 mp.method_num);\n                 (None, Some(trait_item.def_id()))\n             }\n-            typeck::MethodTraitObject(ref mo) => {\n+            ty::MethodTraitObject(ref mo) => {\n                 // method invoked on a trait instance\n                 let trait_item = ty::trait_item(&self.analysis.ty_cx,\n                                                 mo.trait_ref.def_id,"}, {"sha": "1a273f1e2b7c20fd49dd9ecaae964edec9dec899", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -49,8 +49,8 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n use middle::ty::{mod, Ty};\n+use middle::ty::MethodCall;\n use middle::typeck::coherence::make_substs_for_receiver_types;\n-use middle::typeck::MethodCall;\n use util::ppaux::Repr;\n use util::ppaux::ty_to_string;\n "}, {"sha": "6bd86cf5aa4a233a02bcad980adeb13b8654ee23", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -36,7 +36,6 @@ use middle::traits;\n use middle::ty::{mod, Ty};\n use middle::ty_fold;\n use middle::ty_fold::TypeFoldable;\n-use middle::typeck;\n use middle::typeck::infer;\n use util::ppaux::Repr;\n use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n@@ -468,7 +467,7 @@ impl<'blk, 'tcx> mc::Typer<'tcx> for BlockS<'blk, 'tcx> {\n         Ok(node_id_type(self, id))\n     }\n \n-    fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<Ty<'tcx>> {\n+    fn node_method_ty(&self, method_call: ty::MethodCall) -> Option<Ty<'tcx>> {\n         self.tcx()\n             .method_map\n             .borrow()\n@@ -481,7 +480,7 @@ impl<'blk, 'tcx> mc::Typer<'tcx> for BlockS<'blk, 'tcx> {\n     }\n \n     fn is_method_call(&self, id: ast::NodeId) -> bool {\n-        self.tcx().method_map.borrow().contains_key(&typeck::MethodCall::expr(id))\n+        self.tcx().method_map.borrow().contains_key(&ty::MethodCall::expr(id))\n     }\n \n     fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent> {\n@@ -870,7 +869,7 @@ pub enum ExprOrMethodCall {\n     ExprId(ast::NodeId),\n \n     // Type parameters for a method call like `a.foo::<int>()`\n-    MethodCall(typeck::MethodCall)\n+    MethodCall(ty::MethodCall)\n }\n \n pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,"}, {"sha": "a1574aa2f0e4339eab45f4bc954a8af131a52ea7", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -27,7 +27,7 @@ use trans::meth;\n use trans::type_::Type;\n use trans;\n use middle::ty;\n-use middle::typeck::MethodCall;\n+use middle::ty::MethodCall;\n use session::config::FullDebugInfo;\n use util::ppaux::Repr;\n use util::ppaux;"}, {"sha": "f538a73329b5de2d132626b9fa3f162743fd0c33", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -47,9 +47,18 @@ use trans::build::*;\n use trans::cleanup::{mod, CleanupMethods};\n use trans::common::*;\n use trans::datum::*;\n-use middle::ty::{mod, struct_fields, tup_fields};\n-use middle::ty::{AdjustDerefRef, AdjustAddEnv, AutoUnsafe, AutoPtr, Ty};\n-use middle::typeck::{mod, MethodCall};\n+use trans::debuginfo;\n+use trans::glue;\n+use trans::machine;\n+use trans::meth;\n+use trans::inline;\n+use trans::tvec;\n+use trans::type_of;\n+use middle::ty::{struct_fields, tup_fields};\n+use middle::ty::{AdjustDerefRef, AdjustAddEnv, AutoUnsafe};\n+use middle::ty::{AutoPtr};\n+use middle::ty::{mod, Ty};\n+use middle::ty::MethodCall;\n use util::common::indenter;\n use util::ppaux::Repr;\n use trans::machine::{llsize_of, llsize_of_alloc};\n@@ -2091,7 +2100,7 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // path (below) to dereference that `&T`.\n             let datum = match method_call.adjustment {\n                 // Always perform an AutoPtr when applying an overloaded auto-deref\n-                typeck::AutoDeref(_) => unpack_datum!(bcx, auto_ref(bcx, datum, expr)),\n+                ty::AutoDeref(_) => unpack_datum!(bcx, auto_ref(bcx, datum, expr)),\n                 _ => datum\n             };\n "}, {"sha": "94ff526debd1e8f0a3fd74558279206af3a08035", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c44561ad6f4651047255d0c630a0c3f80c3fdd4/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=7c44561ad6f4651047255d0c630a0c3f80c3fdd4", "patch": "@@ -31,8 +31,7 @@ use trans::machine;\n use trans::type_::Type;\n use trans::type_of::*;\n use middle::ty::{mod, Ty};\n-use middle::typeck;\n-use middle::typeck::MethodCall;\n+use middle::ty::MethodCall;\n use util::ppaux::Repr;\n \n use std::c_str::ToCStr;\n@@ -119,8 +118,8 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                  .unwrap();\n \n     match origin {\n-        typeck::MethodStatic(did) |\n-        typeck::MethodStaticUnboxedClosure(did) => {\n+        ty::MethodStatic(did) |\n+        ty::MethodStaticUnboxedClosure(did) => {\n             Callee {\n                 bcx: bcx,\n                 data: Fn(callee::trans_fn_ref(bcx,\n@@ -129,7 +128,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n         }\n \n-        typeck::MethodTypeParam(typeck::MethodParam {\n+        ty::MethodTypeParam(ty::MethodParam {\n             ref trait_ref,\n             method_num\n         }) => {\n@@ -147,7 +146,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                        method_num, origin)\n         }\n \n-        typeck::MethodTraitObject(ref mt) => {\n+        ty::MethodTraitObject(ref mt) => {\n             let self_expr = match self_expr {\n                 Some(self_expr) => self_expr,\n                 None => {"}]}