{"sha": "ae16884b950d26546f323810170b1f8a25dc0bc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMTY4ODRiOTUwZDI2NTQ2ZjMyMzgxMDE3MGIxZjhhMjVkYzBiYzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-02T21:27:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-02T21:27:58Z"}, "message": "Merge #2989\n\n2989: vscode extension: migrate from any to unknown where possible r=Veetaha a=Veetaha\n\n`unknown` type is the stricter version of `any` and it should always be prefered (like `const` over `let`).\r\nIt lets you assign any value to it, but doesn't let you carry out arbitrary operations on them without an explicit type check (like `typeof unknownValue === 'string'`).\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>", "tree": {"sha": "2b51c5ea7f7cbda460ea08c535a2f56489295543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b51c5ea7f7cbda460ea08c535a2f56489295543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae16884b950d26546f323810170b1f8a25dc0bc0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeNz7eCRBK7hj4Ov3rIwAAdHIIAIBBmtidzIvcK5SnkAbL2LM/\nesFXjqzQ1k258N0AQULPIs3M43amqeuxIiIt7EiUkrLBkAZcuPn1KJkh3FTaOEN2\ngjFIc1DqmtOWf29yaNATAXYE5zOt+errcDDeOK8ScKWfS7eSqCxVaPJy6JmjhLg4\n1CYPzyJemH+9QWFBMcmyn3FOtYlOOI2xhducSTMy7o4Ql1W7YLFhgwVDQTt4LrDb\npUImqLHFbjkX0bWTNWDNwvZRQASvCUogztZSJFBYaUbJcDTQ9vf2uGJKydtJhvxE\nrLw3DUtsIk90CFXFxOsjPTVxiq7BXHbAJqO5gMFI1MLu2ZqDief2kLzQiqNn6pY=\n=ZUMP\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b51c5ea7f7cbda460ea08c535a2f56489295543\nparent 5e61c9b11def1897c4123eeafb14b4d6a5223546\nparent 2fd7af2a62ce0c8acb5daa6b2c179b638318f31a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580678878 +0000\ncommitter GitHub <noreply@github.com> 1580678878 +0000\n\nMerge #2989\n\n2989: vscode extension: migrate from any to unknown where possible r=Veetaha a=Veetaha\n\n`unknown` type is the stricter version of `any` and it should always be prefered (like `const` over `let`).\r\nIt lets you assign any value to it, but doesn't let you carry out arbitrary operations on them without an explicit type check (like `typeof unknownValue === 'string'`).\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae16884b950d26546f323810170b1f8a25dc0bc0", "html_url": "https://github.com/rust-lang/rust/commit/ae16884b950d26546f323810170b1f8a25dc0bc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae16884b950d26546f323810170b1f8a25dc0bc0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e61c9b11def1897c4123eeafb14b4d6a5223546", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e61c9b11def1897c4123eeafb14b4d6a5223546", "html_url": "https://github.com/rust-lang/rust/commit/5e61c9b11def1897c4123eeafb14b4d6a5223546"}, {"sha": "2fd7af2a62ce0c8acb5daa6b2c179b638318f31a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd7af2a62ce0c8acb5daa6b2c179b638318f31a", "html_url": "https://github.com/rust-lang/rust/commit/2fd7af2a62ce0c8acb5daa6b2c179b638318f31a"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "1778c4e9f4174c679a591984efdc4004971b716b", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=ae16884b950d26546f323810170b1f8a25dc0bc0", "patch": "@@ -68,7 +68,7 @@ PATH=${process.env.PATH}\n     // This also requires considering our settings strategy, which is work which needs doing\n     // @ts-ignore The tracer is private to vscode-languageclient, but we need access to it to not log publishDecorations requests\n     res._tracer = {\n-        log: (messageOrDataObject: string | any, data?: string) => {\n+        log: (messageOrDataObject: string | unknown, data?: string) => {\n             if (typeof messageOrDataObject === 'string') {\n                 if (\n                     messageOrDataObject.includes("}, {"sha": "7e10c7f79ec32e58404e22ac02db8dd2e8495979", "filename": "editors/code/src/color_theme.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcolor_theme.ts?ref=ae16884b950d26546f323810170b1f8a25dc0bc0", "patch": "@@ -61,7 +61,7 @@ export class ColorTheme {\n }\n \n function loadThemeNamed(themeName: string): ColorTheme {\n-    function isTheme(extension: vscode.Extension<any>): boolean {\n+    function isTheme(extension: vscode.Extension<unknown>): boolean {\n         return (\n             extension.extensionKind === vscode.ExtensionKind.UI &&\n             extension.packageJSON.contributes &&"}, {"sha": "211f2251f25189c5330d115beeb90b1629f1c5c1", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=ae16884b950d26546f323810170b1f8a25dc0bc0", "patch": "@@ -55,7 +55,7 @@ export function syntaxTree(ctx: Ctx): Cmd {\n \n // We need to order this after LS updates, but there's no API for that.\n // Hence, good old setTimeout.\n-function afterLs(f: () => any) {\n+function afterLs(f: () => void) {\n     setTimeout(f, 10);\n }\n "}, {"sha": "05d21ae56f62da85c0fd6f66aad0edbf327c7bce", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=ae16884b950d26546f323810170b1f8a25dc0bc0", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+\n import { Config } from './config';\n import { createClient } from './client';\n \n@@ -52,12 +53,12 @@ export class Ctx {\n     overrideCommand(name: string, factory: (ctx: Ctx) => Cmd) {\n         const defaultCmd = `default:${name}`;\n         const override = factory(this);\n-        const original = (...args: any[]) =>\n+        const original = (...args: unknown[]) =>\n             vscode.commands.executeCommand(defaultCmd, ...args);\n         try {\n             const d = vscode.commands.registerCommand(\n                 name,\n-                async (...args: any[]) => {\n+                async (...args: unknown[]) => {\n                     if (!(await override(...args))) {\n                         return await original(...args);\n                     }\n@@ -73,11 +74,11 @@ export class Ctx {\n         }\n     }\n \n-    get subscriptions(): { dispose(): any }[] {\n+    get subscriptions(): Disposable[] {\n         return this.extCtx.subscriptions;\n     }\n \n-    pushCleanup(d: { dispose(): any }) {\n+    pushCleanup(d: Disposable) {\n         this.extCtx.subscriptions.push(d);\n     }\n \n@@ -86,12 +87,15 @@ export class Ctx {\n     }\n }\n \n-export type Cmd = (...args: any[]) => any;\n+export interface Disposable {\n+    dispose(): void;\n+}\n+export type Cmd = (...args: any[]) => unknown;\n \n export async function sendRequestWithRetry<R>(\n     client: lc.LanguageClient,\n     method: string,\n-    param: any,\n+    param: unknown,\n     token?: vscode.CancellationToken,\n ): Promise<R> {\n     for (const delay of [2, 4, 6, 8, 10, null]) {"}, {"sha": "4317410c7ef5cd8903e4e7f38a67b4d062447019", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae16884b950d26546f323810170b1f8a25dc0bc0/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=ae16884b950d26546f323810170b1f8a25dc0bc0", "patch": "@@ -1,6 +1,6 @@\n import * as vscode from 'vscode';\n \n-import { WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressReport, WorkDoneProgressEnd } from 'vscode-languageclient';\n+import { WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressReport, WorkDoneProgressEnd, Disposable } from 'vscode-languageclient';\n \n import { Ctx } from './ctx';\n \n@@ -14,7 +14,7 @@ export function activateStatusDisplay(ctx: Ctx) {\n     });\n }\n \n-class StatusDisplay implements vscode.Disposable {\n+class StatusDisplay implements vscode.Disposable, Disposable {\n     packageName?: string;\n \n     private i: number = 0;"}]}