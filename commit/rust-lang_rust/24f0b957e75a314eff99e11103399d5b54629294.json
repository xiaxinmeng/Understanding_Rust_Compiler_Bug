{"sha": "24f0b957e75a314eff99e11103399d5b54629294", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZjBiOTU3ZTc1YTMxNGVmZjk5ZTExMTAzMzk5ZDViNTQ2MjkyOTQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-20T18:35:17Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-08T16:51:53Z"}, "message": "Use a field for is_anon.", "tree": {"sha": "7a72ad85531c5a08532d6ba67aab4b103e9dd0ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a72ad85531c5a08532d6ba67aab4b103e9dd0ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24f0b957e75a314eff99e11103399d5b54629294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24f0b957e75a314eff99e11103399d5b54629294", "html_url": "https://github.com/rust-lang/rust/commit/24f0b957e75a314eff99e11103399d5b54629294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24f0b957e75a314eff99e11103399d5b54629294/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "016ea6b319e12df6ed568a147f9e5f06ceccbfff", "url": "https://api.github.com/repos/rust-lang/rust/commits/016ea6b319e12df6ed568a147f9e5f06ceccbfff", "html_url": "https://github.com/rust-lang/rust/commit/016ea6b319e12df6ed568a147f9e5f06ceccbfff"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "a5f632f251643f52f1cc7ac9d65a31bdd9559a72", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/24f0b957e75a314eff99e11103399d5b54629294/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f0b957e75a314eff99e11103399d5b54629294/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=24f0b957e75a314eff99e11103399d5b54629294", "patch": "@@ -75,7 +75,12 @@ pub use rustc_query_system::dep_graph::{DepContext, DepNodeParams};\n /// Information is retrieved by indexing the `DEP_KINDS` array using the integer value\n /// of the `DepKind`. Overall, this allows to implement `DepContext` using this manual\n /// jump table instead of large matches.\n-pub struct DepKindStruct {}\n+pub struct DepKindStruct {\n+    /// Anonymous queries cannot be replayed from one compiler invocation to the next.\n+    /// When their result is needed, it is recomputed. They are useful for fine-grained\n+    /// dependency tracking, and caching within one compiler invocation.\n+    pub(super) is_anon: bool,\n+}\n \n impl std::ops::Deref for DepKind {\n     type Target = DepKindStruct;\n@@ -122,22 +127,25 @@ pub mod dep_kind {\n     use super::*;\n \n     // We use this for most things when incr. comp. is turned off.\n-    pub const Null: DepKindStruct = DepKindStruct {};\n+    pub const Null: DepKindStruct = DepKindStruct { is_anon: false };\n \n     // Represents metadata from an extern crate.\n-    pub const CrateMetadata: DepKindStruct = DepKindStruct {};\n+    pub const CrateMetadata: DepKindStruct = DepKindStruct { is_anon: false };\n \n-    pub const TraitSelect: DepKindStruct = DepKindStruct {};\n+    pub const TraitSelect: DepKindStruct = DepKindStruct { is_anon: true };\n \n-    pub const CompileCodegenUnit: DepKindStruct = DepKindStruct {};\n+    pub const CompileCodegenUnit: DepKindStruct = DepKindStruct { is_anon: false };\n \n     macro_rules! define_query_dep_kinds {\n         ($(\n             [$($attrs:tt)*]\n             $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n         ,)*) => (\n             $(pub const $variant: DepKindStruct = {\n+                const is_anon: bool = contains_anon_attr!($($attrs)*);\n+\n                 DepKindStruct {\n+                    is_anon,\n                 }\n             };)*\n         );\n@@ -165,13 +173,13 @@ macro_rules! define_dep_nodes {\n         impl DepKind {\n             #[allow(unreachable_code)]\n             pub fn can_reconstruct_query_key<$tcx>(&self) -> bool {\n+                if self.is_anon {\n+                    return false;\n+                }\n+\n                 match *self {\n                     $(\n                         DepKind :: $variant => {\n-                            if contains_anon_attr!($($attrs)*) {\n-                                return false;\n-                            }\n-\n                             // tuple args\n                             $({\n                                 return <$tuple_arg_ty as DepNodeParams<TyCtxt<'_>>>\n@@ -184,14 +192,6 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            pub fn is_anon(&self) -> bool {\n-                match *self {\n-                    $(\n-                        DepKind :: $variant => { contains_anon_attr!($($attrs)*) }\n-                    )*\n-                }\n-            }\n-\n             pub fn is_eval_always(&self) -> bool {\n                 match *self {\n                     $("}, {"sha": "b1ee279d6667234037130569a73ab89562313e8c", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24f0b957e75a314eff99e11103399d5b54629294/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f0b957e75a314eff99e11103399d5b54629294/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=24f0b957e75a314eff99e11103399d5b54629294", "patch": "@@ -37,7 +37,7 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n     fn debug_node(node: &DepNode, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(f, \"{:?}\", node.kind)?;\n \n-        if !node.kind.has_params() && !node.kind.is_anon() {\n+        if !node.kind.has_params() && !node.kind.is_anon {\n             return Ok(());\n         }\n "}]}