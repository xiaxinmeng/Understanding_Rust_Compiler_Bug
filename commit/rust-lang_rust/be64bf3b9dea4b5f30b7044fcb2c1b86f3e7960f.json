{"sha": "be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNjRiZjNiOWRlYTRiNWYzMGI3MDQ0ZmNiMmMxYjg2ZjNlNzk2MGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-10T22:59:25Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-10T22:59:25Z"}, "message": "Rollup merge of #54909 - scalexm:finish-rules, r=nikomatsakis\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "8585b052fbc5987af28d660923c6b3134c37b5b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8585b052fbc5987af28d660923c6b3134c37b5b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "html_url": "https://github.com/rust-lang/rust/commit/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff3e4d9f1c4b8e4faecd2bf95e2f52abb9380250", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3e4d9f1c4b8e4faecd2bf95e2f52abb9380250", "html_url": "https://github.com/rust-lang/rust/commit/ff3e4d9f1c4b8e4faecd2bf95e2f52abb9380250"}, {"sha": "282559cff607c19eb0a74e1ddf90df781cd77849", "url": "https://api.github.com/repos/rust-lang/rust/commits/282559cff607c19eb0a74e1ddf90df781cd77849", "html_url": "https://github.com/rust-lang/rust/commit/282559cff607c19eb0a74e1ddf90df781cd77849"}], "stats": {"total": 291, "additions": 198, "deletions": 93}, "files": [{"sha": "2719587f20e8a742956282f79388c844a4141030", "filename": "src/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -270,7 +270,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.7.0\"\n+version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1898,7 +1898,7 @@ dependencies = [\n  \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n@@ -2434,7 +2434,7 @@ name = \"rustc_traits\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -3195,7 +3195,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d6809b327f87369e6f3651efd2c5a96c49847a3ed2559477ecba79014751ee1\"\n \"checksum cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f159dfd43363c4d08055a07703eb7a3406b0dac4d0584d96965a3262db3c9d16\"\n \"checksum cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c4e7bb64a8ebb0d856483e1e682ea3422f883c5f5615a90d51a2c82fe87fdd3\"\n-\"checksum chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25ce2f28f55ed544a2a3756b7acf41dd7d6f27acffb2086439950925506af7d0\"\n+\"checksum chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6749eb72e7d4355d944a99f15fbaea701b978c18c5e184a025fcde942b0c9779\"\n \"checksum chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"295635afd6853aa9f20baeb7f0204862440c0fe994c5a253d5f479dac41d047e\"\n \"checksum chrono 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6962c635d530328acc53ac6a955e83093fedc91c5809dfac1fa60fa470830a37\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\""}, {"sha": "d0ec8640ce9ef3edcf4a1e9aa07e42a64cbbf398", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -31,7 +31,7 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\"\n parking_lot = \"0.6\"\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n-chalk-engine = { version = \"0.7.0\", default-features=false }\n+chalk-engine = { version = \"0.8.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"0.6.5\", features = [\"union\"] }\n "}, {"sha": "f51a3e71d0741f9eb68aeaa1a4f8381906aabe40", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -1370,7 +1370,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Goal<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::Goal::*;\n+        use traits::GoalKind::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {"}, {"sha": "6e4abee32c0771e3b87ef9c016a0ed0b0df48672", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -318,31 +318,33 @@ pub enum QuantifierKind {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n-pub enum Goal<'tcx> {\n-    Implies(Clauses<'tcx>, &'tcx Goal<'tcx>),\n-    And(&'tcx Goal<'tcx>, &'tcx Goal<'tcx>),\n-    Not(&'tcx Goal<'tcx>),\n+pub enum GoalKind<'tcx> {\n+    Implies(Clauses<'tcx>, Goal<'tcx>),\n+    And(Goal<'tcx>, Goal<'tcx>),\n+    Not(Goal<'tcx>),\n     DomainGoal(DomainGoal<'tcx>),\n-    Quantified(QuantifierKind, ty::Binder<&'tcx Goal<'tcx>>),\n+    Quantified(QuantifierKind, ty::Binder<Goal<'tcx>>),\n     CannotProve,\n }\n \n+pub type Goal<'tcx> = &'tcx GoalKind<'tcx>;\n+\n pub type Goals<'tcx> = &'tcx List<Goal<'tcx>>;\n \n impl<'tcx> DomainGoal<'tcx> {\n-    pub fn into_goal(self) -> Goal<'tcx> {\n-        Goal::DomainGoal(self)\n+    pub fn into_goal(self) -> GoalKind<'tcx> {\n+        GoalKind::DomainGoal(self)\n     }\n }\n \n-impl<'tcx> Goal<'tcx> {\n+impl<'tcx> GoalKind<'tcx> {\n     pub fn from_poly_domain_goal<'a>(\n         domain_goal: PolyDomainGoal<'tcx>,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    ) -> Goal<'tcx> {\n+    ) -> GoalKind<'tcx> {\n         match domain_goal.no_late_bound_regions() {\n             Some(p) => p.into_goal(),\n-            None => Goal::Quantified(\n+            None => GoalKind::Quantified(\n                 QuantifierKind::Universal,\n                 domain_goal.map_bound(|p| tcx.mk_goal(p.into_goal()))\n             ),"}, {"sha": "1524f89af291d05b8738bdbe3df0b9b29152bff7", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -469,7 +469,7 @@ impl fmt::Display for traits::QuantifierKind {\n \n impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::Goal::*;\n+        use traits::GoalKind::*;\n \n         match self {\n             Implies(hypotheses, goal) => {\n@@ -598,25 +598,25 @@ CloneTypeFoldableAndLiftImpls! {\n }\n \n EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for traits::Goal<'tcx> {\n-        (traits::Goal::Implies)(hypotheses, goal),\n-        (traits::Goal::And)(goal1, goal2),\n-        (traits::Goal::Not)(goal),\n-        (traits::Goal::DomainGoal)(domain_goal),\n-        (traits::Goal::Quantified)(qkind, goal),\n-        (traits::Goal::CannotProve),\n+    impl<'tcx> TypeFoldable<'tcx> for traits::GoalKind<'tcx> {\n+        (traits::GoalKind::Implies)(hypotheses, goal),\n+        (traits::GoalKind::And)(goal1, goal2),\n+        (traits::GoalKind::Not)(goal),\n+        (traits::GoalKind::DomainGoal)(domain_goal),\n+        (traits::GoalKind::Quantified)(qkind, goal),\n+        (traits::GoalKind::CannotProve),\n     }\n }\n \n EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for traits::Goal<'a> {\n-        type Lifted = traits::Goal<'tcx>;\n-        (traits::Goal::Implies)(hypotheses, goal),\n-        (traits::Goal::And)(goal1, goal2),\n-        (traits::Goal::Not)(goal),\n-        (traits::Goal::DomainGoal)(domain_goal),\n-        (traits::Goal::Quantified)(kind, goal),\n-        (traits::Goal::CannotProve),\n+    impl<'a, 'tcx> Lift<'tcx> for traits::GoalKind<'a> {\n+        type Lifted = traits::GoalKind<'tcx>;\n+        (traits::GoalKind::Implies)(hypotheses, goal),\n+        (traits::GoalKind::And)(goal1, goal2),\n+        (traits::GoalKind::Not)(goal),\n+        (traits::GoalKind::DomainGoal)(domain_goal),\n+        (traits::GoalKind::Quantified)(kind, goal),\n+        (traits::GoalKind::CannotProve),\n     }\n }\n \n@@ -633,7 +633,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<traits::Goal<'tcx>> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx traits::Goal<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for traits::Goal<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         let v = (**self).fold_with(folder);\n         folder.tcx().mk_goal(v)"}, {"sha": "3d4ae572d0b81fb0880f6bc76a8c98c08075ef37", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -36,7 +36,7 @@ use mir::interpret::Allocation;\n use ty::subst::{CanonicalSubsts, Kind, Substs, Subst};\n use ty::ReprOptions;\n use traits;\n-use traits::{Clause, Clauses, Goal, Goals};\n+use traits::{Clause, Clauses, GoalKind, Goal, Goals};\n use ty::{self, Ty, TypeAndMut};\n use ty::{TyS, TyKind, List};\n use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const};\n@@ -143,7 +143,8 @@ pub struct CtxtInterners<'tcx> {\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     const_: InternedSet<'tcx, Const<'tcx>>,\n     clauses: InternedSet<'tcx, List<Clause<'tcx>>>,\n-    goals: InternedSet<'tcx, List<Goal<'tcx>>>,\n+    goal: InternedSet<'tcx, GoalKind<'tcx>>,\n+    goal_list: InternedSet<'tcx, List<Goal<'tcx>>>,\n }\n \n impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n@@ -159,7 +160,8 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             predicates: Default::default(),\n             const_: Default::default(),\n             clauses: Default::default(),\n-            goals: Default::default(),\n+            goal: Default::default(),\n+            goal_list: Default::default(),\n         }\n     }\n \n@@ -1731,9 +1733,9 @@ impl<'a, 'tcx> Lift<'tcx> for Region<'a> {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for &'a Goal<'a> {\n-    type Lifted = &'tcx Goal<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx Goal<'tcx>> {\n+impl<'a, 'tcx> Lift<'tcx> for Goal<'a> {\n+    type Lifted = Goal<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Goal<'tcx>> {\n         if tcx.interners.arena.in_arena(*self as *const _) {\n             return Some(unsafe { mem::transmute(*self) });\n         }\n@@ -2304,6 +2306,12 @@ impl<'tcx> Borrow<RegionKind> for Interned<'tcx, RegionKind> {\n     }\n }\n \n+impl<'tcx: 'lcx, 'lcx> Borrow<GoalKind<'lcx>> for Interned<'tcx, GoalKind<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a GoalKind<'lcx> {\n+        &self.0\n+    }\n+}\n+\n impl<'tcx: 'lcx, 'lcx> Borrow<[ExistentialPredicate<'lcx>]>\n     for Interned<'tcx, List<ExistentialPredicate<'tcx>>> {\n     fn borrow<'a>(&'a self) -> &'a [ExistentialPredicate<'lcx>] {\n@@ -2419,7 +2427,8 @@ pub fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool {\n \n direct_interners!('tcx,\n     region: mk_region(|r: &RegionKind| r.keep_in_local_tcx()) -> RegionKind,\n-    const_: mk_const(|c: &Const<'_>| keep_local(&c.ty) || keep_local(&c.val)) -> Const<'tcx>\n+    const_: mk_const(|c: &Const<'_>| keep_local(&c.ty) || keep_local(&c.val)) -> Const<'tcx>,\n+    goal: mk_goal(|c: &GoalKind<'_>| keep_local(c)) -> GoalKind<'tcx>\n );\n \n macro_rules! slice_interners {\n@@ -2438,7 +2447,7 @@ slice_interners!(\n     type_list: _intern_type_list(Ty),\n     substs: _intern_substs(Kind),\n     clauses: _intern_clauses(Clause),\n-    goals: _intern_goals(Goal)\n+    goal_list: _intern_goals(Goal)\n );\n \n // This isn't a perfect fit: CanonicalVarInfo slices are always\n@@ -2818,10 +2827,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         iter.intern_with(|xs| self.intern_goals(xs))\n     }\n \n-    pub fn mk_goal(self, goal: Goal<'tcx>) -> &'tcx Goal<'_> {\n-        &self.intern_goals(&[goal])[0]\n-    }\n-\n     pub fn lint_hir<S: Into<MultiSpan>>(self,\n                                         lint: &'static Lint,\n                                         hir_id: HirId,"}, {"sha": "10a90dfc8a8cf936a56662820ca3300e8600c0be", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -148,7 +148,10 @@ impl FlagComputation {\n                 self.add_projection_ty(data);\n             }\n \n-            &ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+            &ty::UnnormalizedProjection(ref data) => {\n+                self.add_flags(TypeFlags::HAS_PROJECTION);\n+                self.add_projection_ty(data);\n+            },\n \n             &ty::Opaque(_, substs) => {\n                 self.add_flags(TypeFlags::HAS_PROJECTION);"}, {"sha": "16f0f11757a1278661d0e67be407d28fd1eed9ca", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -16,5 +16,5 @@ rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-chalk-engine = { version = \"0.7.0\", default-features=false }\n+chalk-engine = { version = \"0.8.0\", default-features=false }\n smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "dea3aa4372a332f6252cd7be466fa29edbfea7ed", "filename": "src/librustc_traits/chalk_context.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc_traits%2Fchalk_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc_traits%2Fchalk_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context.rs?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -19,6 +19,7 @@ use rustc::traits::{\n     ExClauseFold,\n     ExClauseLift,\n     Goal,\n+    GoalKind,\n     ProgramClause,\n     QuantifierKind\n };\n@@ -92,7 +93,7 @@ impl context::Context for ChalkArenas<'tcx> {\n \n     type DomainGoal = DomainGoal<'tcx>;\n \n-    type BindersGoal = ty::Binder<&'tcx Goal<'tcx>>;\n+    type BindersGoal = ty::Binder<Goal<'tcx>>;\n \n     type Parameter = Kind<'tcx>;\n \n@@ -102,14 +103,6 @@ impl context::Context for ChalkArenas<'tcx> {\n \n     type UnificationResult = InferOk<'tcx, ()>;\n \n-    fn into_goal(domain_goal: DomainGoal<'tcx>) -> Goal<'tcx> {\n-        Goal::DomainGoal(domain_goal)\n-    }\n-\n-    fn cannot_prove() -> Goal<'tcx> {\n-        Goal::CannotProve\n-    }\n-\n     fn goal_in_environment(\n         env: &ty::ParamEnv<'tcx>,\n         goal: Goal<'tcx>,\n@@ -251,15 +244,23 @@ impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n impl context::InferenceTable<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n     for ChalkInferenceContext<'cx, 'gcx, 'tcx>\n {\n+    fn into_goal(&self, domain_goal: DomainGoal<'tcx>) -> Goal<'tcx> {\n+        self.infcx.tcx.mk_goal(GoalKind::DomainGoal(domain_goal))\n+    }\n+\n+    fn cannot_prove(&self) -> Goal<'tcx> {\n+        self.infcx.tcx.mk_goal(GoalKind::CannotProve)\n+    }\n+\n     fn into_hh_goal(&mut self, goal: Goal<'tcx>) -> ChalkHhGoal<'tcx> {\n-        match goal {\n-            Goal::Implies(..) => panic!(\"FIXME rust-lang-nursery/chalk#94\"),\n-            Goal::And(left, right) => HhGoal::And(*left, *right),\n-            Goal::Not(subgoal) => HhGoal::Not(*subgoal),\n-            Goal::DomainGoal(d) => HhGoal::DomainGoal(d),\n-            Goal::Quantified(QuantifierKind::Universal, binder) => HhGoal::ForAll(binder),\n-            Goal::Quantified(QuantifierKind::Existential, binder) => HhGoal::Exists(binder),\n-            Goal::CannotProve => HhGoal::CannotProve,\n+        match *goal {\n+            GoalKind::Implies(..) => panic!(\"FIXME rust-lang-nursery/chalk#94\"),\n+            GoalKind::And(left, right) => HhGoal::And(left, right),\n+            GoalKind::Not(subgoal) => HhGoal::Not(subgoal),\n+            GoalKind::DomainGoal(d) => HhGoal::DomainGoal(d),\n+            GoalKind::Quantified(QuantifierKind::Universal, binder) => HhGoal::ForAll(binder),\n+            GoalKind::Quantified(QuantifierKind::Existential, binder) => HhGoal::Exists(binder),\n+            GoalKind::CannotProve => HhGoal::CannotProve,\n         }\n     }\n \n@@ -363,21 +364,21 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n \n     fn instantiate_binders_universally(\n         &mut self,\n-        _arg: &ty::Binder<&'tcx Goal<'tcx>>,\n+        _arg: &ty::Binder<Goal<'tcx>>,\n     ) -> Goal<'tcx> {\n         panic!(\"FIXME -- universal instantiation needs sgrif's branch\")\n     }\n \n     fn instantiate_binders_existentially(\n         &mut self,\n-        arg: &ty::Binder<&'tcx Goal<'tcx>>,\n+        arg: &ty::Binder<Goal<'tcx>>,\n     ) -> Goal<'tcx> {\n         let (value, _map) = self.infcx.replace_late_bound_regions_with_fresh_var(\n             DUMMY_SP,\n             LateBoundRegionConversionTime::HigherRankedType,\n             arg,\n         );\n-        *value\n+        value\n     }\n \n     fn debug_ex_clause(&mut self, value: &'v ChalkExClause<'tcx>) -> Box<dyn Debug + 'v> {"}, {"sha": "181106d3f84bf19f9b4f371ff65edd1476ae162d", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 99, "deletions": 15, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -13,7 +13,14 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n use rustc::hir::{self, ImplPolarity};\n use rustc::traits::{\n-    Clause, Clauses, DomainGoal, FromEnv, Goal, PolyDomainGoal, ProgramClause, WellFormed,\n+    Clause,\n+    Clauses,\n+    DomainGoal,\n+    FromEnv,\n+    GoalKind,\n+    PolyDomainGoal,\n+    ProgramClause,\n+    WellFormed,\n     WhereClause,\n };\n use rustc::ty::query::Providers;\n@@ -249,7 +256,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     let impl_trait: DomainGoal = trait_pred.lower();\n \n     // `FromEnv(Self: Trait<P1..Pn>)`\n-    let from_env_goal = impl_trait.into_from_env_goal().into_goal();\n+    let from_env_goal = tcx.mk_goal(impl_trait.into_from_env_goal().into_goal());\n     let hypotheses = tcx.intern_goals(&[from_env_goal]);\n \n     // `Implemented(Self: Trait<P1..Pn>) :- FromEnv(Self: Trait<P1..Pn>)`\n@@ -308,7 +315,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     let wf_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Trait(trait_pred)),\n         hypotheses: tcx.mk_goals(\n-            wf_conditions.map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+            wf_conditions.map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n     let wf_clause = iter::once(Clause::ForAll(ty::Binder::dummy(wf_clause)));\n@@ -352,10 +359,10 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n         hypotheses: tcx.mk_goals(\n             where_clauses\n                 .into_iter()\n-                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+                .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n-    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn program_clauses_for_type_def<'a, 'tcx>(\n@@ -388,7 +395,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n             where_clauses\n                 .iter()\n                 .cloned()\n-                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+                .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n \n@@ -404,7 +411,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     // ```\n \n     // `FromEnv(Ty<...>)`\n-    let from_env_goal = DomainGoal::FromEnv(FromEnv::Ty(ty)).into_goal();\n+    let from_env_goal = tcx.mk_goal(DomainGoal::FromEnv(FromEnv::Ty(ty)).into_goal());\n     let hypotheses = tcx.intern_goals(&[from_env_goal]);\n \n     // For each where clause `WC`:\n@@ -423,10 +430,86 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n }\n \n pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n-    _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    _item_id: DefId,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    item_id: DefId,\n ) -> Clauses<'tcx> {\n-    unimplemented!()\n+    // Rule ProjectionEq-Skolemize\n+    //\n+    // ```\n+    // trait Trait<P1..Pn> {\n+    //     type AssocType<Pn+1..Pm>;\n+    // }\n+    // ```\n+    //\n+    // `ProjectionEq` can succeed by skolemizing, see \"associated type\"\n+    // chapter for more:\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm> {\n+    //     ProjectionEq(\n+    //         <Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> =\n+    //         (Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>\n+    //     )\n+    // }\n+    // ```\n+\n+    let item = tcx.associated_item(item_id);\n+    debug_assert_eq!(item.kind, ty::AssociatedKind::Type);\n+    let trait_id = match item.container {\n+        ty::AssociatedItemContainer::TraitContainer(trait_id) => trait_id,\n+        _ => bug!(\"not an trait container\"),\n+    };\n+    let trait_ref = ty::TraitRef::identity(tcx, trait_id);\n+\n+    let projection_ty = ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, item.ident);\n+    let placeholder_ty = tcx.mk_ty(ty::UnnormalizedProjection(projection_ty));\n+    let projection_eq = WhereClause::ProjectionEq(ty::ProjectionPredicate {\n+        projection_ty,\n+        ty: placeholder_ty,\n+    });\n+\n+    let projection_eq_clause = ProgramClause {\n+        goal: DomainGoal::Holds(projection_eq),\n+        hypotheses: &ty::List::empty(),\n+    };\n+\n+    // Rule WellFormed-AssocTy\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm> {\n+    //     WellFormed((Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>)\n+    //         :- Implemented(Self: Trait<P1..Pn>)\n+    // }\n+    // ```\n+\n+    let trait_predicate = ty::TraitPredicate { trait_ref };\n+    let hypothesis = tcx.mk_goal(\n+        DomainGoal::Holds(WhereClause::Implemented(trait_predicate)).into_goal()\n+    );\n+    let wf_clause = ProgramClause {\n+        goal: DomainGoal::WellFormed(WellFormed::Ty(placeholder_ty)),\n+        hypotheses: tcx.mk_goals(iter::once(hypothesis)),\n+    };\n+\n+    // Rule Implied-Trait-From-AssocTy\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm> {\n+    //     FromEnv(Self: Trait<P1..Pn>)\n+    //         :- FromEnv((Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>)\n+    // }\n+    // ```\n+\n+    let hypothesis = tcx.mk_goal(\n+        DomainGoal::FromEnv(FromEnv::Ty(placeholder_ty)).into_goal()\n+    );\n+    let from_env_clause = ProgramClause {\n+        goal: DomainGoal::FromEnv(FromEnv::Trait(trait_predicate)),\n+        hypotheses: tcx.mk_goals(iter::once(hypothesis)),\n+    };\n+\n+    let clauses = iter::once(projection_eq_clause)\n+        .chain(iter::once(wf_clause))\n+        .chain(iter::once(from_env_clause));\n+    let clauses = clauses.map(|clause| Clause::ForAll(ty::Binder::dummy(clause)));\n+    tcx.mk_clauses(clauses)\n }\n \n pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n@@ -435,10 +518,11 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n ) -> Clauses<'tcx> {\n     // Rule Normalize-From-Impl (see rustc guide)\n     //\n-    // ```impl<P0..Pn> Trait<A1..An> for A0\n-    // {\n+    // ```\n+    // impl<P0..Pn> Trait<A1..An> for A0 {\n     //     type AssocType<Pn+1..Pm> = T;\n-    // }```\n+    // }\n+    // ```\n     //\n     // FIXME: For the moment, we don't account for where clauses written on the associated\n     // ty definition (i.e. in the trait def, as in `type AssocType<T> where T: Sized`).\n@@ -482,10 +566,10 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n         hypotheses: tcx.mk_goals(\n             hypotheses\n                 .into_iter()\n-                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+                .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n-    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}, {"sha": "ba7d4ff0d9bf55ac0adc4573e195552b28810d93", "filename": "src/test/ui/chalkify/lower_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -10,11 +10,12 @@\n \n #![feature(rustc_attrs)]\n \n+trait Bar { }\n+\n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n-trait Foo<S, T, U> {\n-    fn s(_: S) -> S;\n-    fn t(_: T) -> T;\n-    fn u(_: U) -> U;\n+trait Foo<S, T: ?Sized> {\n+    #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+    type Assoc: Bar + ?Sized;\n }\n \n fn main() {"}, {"sha": "dc2375277e7342d713049d371ae759707c5fdd1f", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=be64bf3b9dea4b5f30b7044fcb2c1b86f3e7960f", "patch": "@@ -1,14 +1,23 @@\n error: program clause dump\n-  --> $DIR/lower_trait.rs:13:1\n+  --> $DIR/lower_trait.rs:15:1\n    |\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: FromEnv(U: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: Implemented(Self: Foo<S, T, U>) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: WellFormed(Self: Foo<S, T, U>) :- Implemented(Self: Foo<S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(U: std::marker::Sized).\n+   = note: FromEnv(<Self as Foo<S, T>>::Assoc: Bar) :- FromEnv(Self: Foo<S, T>).\n+   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T>).\n+   = note: Implemented(Self: Foo<S, T>) :- FromEnv(Self: Foo<S, T>).\n+   = note: WellFormed(Self: Foo<S, T>) :- Implemented(Self: Foo<S, T>), WellFormed(S: std::marker::Sized), WellFormed(<Self as Foo<S, T>>::Assoc: Bar).\n \n-error: aborting due to previous error\n+error: program clause dump\n+  --> $DIR/lower_trait.rs:17:5\n+   |\n+LL |     #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: FromEnv(Self: Foo<S, T>) :- FromEnv(Unnormalized(<Self as Foo<S, T>>::Assoc)).\n+   = note: ProjectionEq(<Self as Foo<S, T>>::Assoc == Unnormalized(<Self as Foo<S, T>>::Assoc)).\n+   = note: WellFormed(Unnormalized(<Self as Foo<S, T>>::Assoc)) :- Implemented(Self: Foo<S, T>).\n+\n+error: aborting due to 2 previous errors\n "}]}