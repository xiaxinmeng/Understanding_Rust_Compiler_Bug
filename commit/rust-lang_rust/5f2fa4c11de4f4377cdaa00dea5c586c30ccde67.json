{"sha": "5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "node_id": "C_kwDOAAsO6NoAKDVmMmZhNGMxMWRlNGY0Mzc3Y2RhYTAwZGVhNWM1ODZjMzBjY2RlNjc", "commit": {"author": {"name": "zhaixiaojuan", "email": "zhaixiaojuan@loongson.cn", "date": "2022-08-19T09:41:56Z"}, "committer": {"name": "WANG Rui", "email": "wangrui@loongson.cn", "date": "2023-04-25T06:15:31Z"}, "message": "Add loongarch64 asm! support", "tree": {"sha": "e0420385e7953d4c6fca3765ba8dbae3921865ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0420385e7953d4c6fca3765ba8dbae3921865ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "html_url": "https://github.com/rust-lang/rust/commit/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/comments", "author": {"login": "zhaixiaojuan", "id": 67671683, "node_id": "MDQ6VXNlcjY3NjcxNjgz", "avatar_url": "https://avatars.githubusercontent.com/u/67671683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhaixiaojuan", "html_url": "https://github.com/zhaixiaojuan", "followers_url": "https://api.github.com/users/zhaixiaojuan/followers", "following_url": "https://api.github.com/users/zhaixiaojuan/following{/other_user}", "gists_url": "https://api.github.com/users/zhaixiaojuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhaixiaojuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhaixiaojuan/subscriptions", "organizations_url": "https://api.github.com/users/zhaixiaojuan/orgs", "repos_url": "https://api.github.com/users/zhaixiaojuan/repos", "events_url": "https://api.github.com/users/zhaixiaojuan/events{/privacy}", "received_events_url": "https://api.github.com/users/zhaixiaojuan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "heiher", "id": 1407733, "node_id": "MDQ6VXNlcjE0MDc3MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1407733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heiher", "html_url": "https://github.com/heiher", "followers_url": "https://api.github.com/users/heiher/followers", "following_url": "https://api.github.com/users/heiher/following{/other_user}", "gists_url": "https://api.github.com/users/heiher/gists{/gist_id}", "starred_url": "https://api.github.com/users/heiher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heiher/subscriptions", "organizations_url": "https://api.github.com/users/heiher/orgs", "repos_url": "https://api.github.com/users/heiher/repos", "events_url": "https://api.github.com/users/heiher/events{/privacy}", "received_events_url": "https://api.github.com/users/heiher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6830a212973ced91a047cee86cb79cee4f23868", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6830a212973ced91a047cee86cb79cee4f23868", "html_url": "https://github.com/rust-lang/rust/commit/f6830a212973ced91a047cee86cb79cee4f23868"}], "stats": {"total": 381, "additions": 380, "deletions": 1}, "files": [{"sha": "738cdb6f119f2c9f369ea24a44be83fbe59c1c2f", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "patch": "@@ -593,6 +593,8 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => \"w\",\n             InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::LoongArch(LoongArchInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::LoongArch(LoongArchInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::M68k(M68kInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::M68k(M68kInlineAsmRegClass::reg_addr) => \"a\",\n             InlineAsmRegClass::M68k(M68kInlineAsmRegClass::reg_data) => \"d\",\n@@ -667,6 +669,8 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         InlineAsmRegClass::Avr(_) => unimplemented!(),\n         InlineAsmRegClass::Bpf(_) => unimplemented!(),\n         InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::LoongArch(LoongArchInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::LoongArch(LoongArchInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::M68k(M68kInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::M68k(M68kInlineAsmRegClass::reg_addr) => cx.type_i32(),\n         InlineAsmRegClass::M68k(M68kInlineAsmRegClass::reg_data) => cx.type_i32(),\n@@ -804,6 +808,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n             }\n         }\n         InlineAsmRegClass::Hexagon(_) => None,\n+        InlineAsmRegClass::LoongArch(_) => None,\n         InlineAsmRegClass::Mips(_) => None,\n         InlineAsmRegClass::Nvptx(_) => None,\n         InlineAsmRegClass::PowerPC(_) => None,"}, {"sha": "98d5b3599d9656a9ec6083e9a74a188b5c8b94ac", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "patch": "@@ -236,6 +236,7 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                 InlineAsmArch::Nvptx64 => {}\n                 InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {}\n                 InlineAsmArch::Hexagon => {}\n+                InlineAsmArch::LoongArch64 => {}\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n                 InlineAsmArch::S390x => {}\n                 InlineAsmArch::SpirV => {}\n@@ -633,6 +634,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'_>>) ->\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => \"w\",\n             InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::LoongArch(LoongArchInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::LoongArch(LoongArchInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => \"h\",\n@@ -719,6 +722,7 @@ fn modifier_to_llvm(\n             }\n         }\n         InlineAsmRegClass::Hexagon(_) => None,\n+        InlineAsmRegClass::LoongArch(_) => None,\n         InlineAsmRegClass::Mips(_) => None,\n         InlineAsmRegClass::Nvptx(_) => None,\n         InlineAsmRegClass::PowerPC(_) => None,\n@@ -803,6 +807,8 @@ fn dummy_output_type<'ll>(cx: &CodegenCx<'ll, '_>, reg: InlineAsmRegClass) -> &'\n             cx.type_vector(cx.type_i64(), 2)\n         }\n         InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::LoongArch(LoongArchInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::LoongArch(LoongArchInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => cx.type_i16(),"}, {"sha": "7ace1647ded437feab6da138c71cc484ca58ef9e", "filename": "compiler/rustc_target/src/asm/loongarch.rs", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/compiler%2Frustc_target%2Fsrc%2Fasm%2Floongarch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/compiler%2Frustc_target%2Fsrc%2Fasm%2Floongarch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Floongarch.rs?ref=5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "patch": "@@ -0,0 +1,131 @@\n+use super::{InlineAsmArch, InlineAsmType};\n+use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n+use std::fmt;\n+\n+def_reg_class! {\n+    LoongArch LoongArchInlineAsmRegClass {\n+        reg,\n+        freg,\n+    }\n+}\n+\n+impl LoongArchInlineAsmRegClass {\n+    pub fn valid_modifiers(self, _arch: super::InlineAsmArch) -> &'static [char] {\n+        &[]\n+    }\n+\n+    pub fn suggest_class(self, _arch: InlineAsmArch, _ty: InlineAsmType) -> Option<Self> {\n+        None\n+    }\n+\n+    pub fn suggest_modifier(\n+        self,\n+        _arch: InlineAsmArch,\n+        _ty: InlineAsmType,\n+    ) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn supported_types(\n+        self,\n+        arch: InlineAsmArch,\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n+        match (self, arch) {\n+            (Self::reg, InlineAsmArch::LoongArch64) => types! { _: I8, I16, I32, I64, F32, F64; },\n+            (Self::reg, _) => types! { _: I8, I16, I32, F32; },\n+            (Self::freg, _) => types! { _: F32, F64; },\n+        }\n+    }\n+}\n+\n+// The reserved registers are taken from <https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/LoongArch/LoongArchRegisterInfo.cpp#79>\n+def_regs! {\n+    LoongArch LoongArchInlineAsmReg LoongArchInlineAsmRegClass {\n+        r1: reg = [\"$r1\",\"$ra\"],\n+        r4: reg = [\"$r4\",\"$a0\"],\n+        r5: reg = [\"$r5\",\"$a1\"],\n+        r6: reg = [\"$r6\",\"$a2\"],\n+        r7: reg = [\"$r7\",\"$a3\"],\n+        r8: reg = [\"$r8\",\"$a4\"],\n+        r9: reg = [\"$r9\",\"$a5\"],\n+        r10: reg = [\"$r10\",\"$a6\"],\n+        r11: reg = [\"$r11\",\"$a7\"],\n+        r12: reg = [\"$r12\",\"$t0\"],\n+        r13: reg = [\"$r13\",\"$t1\"],\n+        r14: reg = [\"$r14\",\"$t2\"],\n+        r15: reg = [\"$r15\",\"$t3\"],\n+        r16: reg = [\"$r16\",\"$t4\"],\n+        r17: reg = [\"$r17\",\"$t5\"],\n+        r18: reg = [\"$r18\",\"$t6\"],\n+        r19: reg = [\"$r19\",\"$t7\"],\n+        r20: reg = [\"$r20\",\"$t8\"],\n+        r23: reg = [\"$r23\",\"$s0\"],\n+        r24: reg = [\"$r24\",\"$s1\"],\n+        r25: reg = [\"$r25\",\"$s2\"],\n+        r26: reg = [\"$r26\",\"$s3\"],\n+        r27: reg = [\"$r27\",\"$s4\"],\n+        r28: reg = [\"$r28\",\"$s5\"],\n+        r29: reg = [\"$r29\",\"$s6\"],\n+        r30: reg = [\"$r30\",\"$s7\"],\n+        f0: freg = [\"$f0\",\"$fa0\"],\n+        f1: freg = [\"$f1\",\"$fa1\"],\n+        f2: freg = [\"$f2\",\"$fa2\"],\n+        f3: freg = [\"$f3\",\"$fa3\"],\n+        f4: freg = [\"$f4\",\"$fa4\"],\n+        f5: freg = [\"$f5\",\"$fa5\"],\n+        f6: freg = [\"$f6\",\"$fa6\"],\n+        f7: freg = [\"$f7\",\"$fa7\"],\n+        f8: freg = [\"$f8\",\"$ft0\"],\n+        f9: freg = [\"$f9\",\"$ft1\"],\n+        f10: freg = [\"$f10\",\"$ft2\"],\n+        f11: freg = [\"$f11\",\"$ft3\"],\n+        f12: freg = [\"$f12\",\"$ft4\"],\n+        f13: freg = [\"$f13\",\"$ft5\"],\n+        f14: freg = [\"$f14\",\"$ft6\"],\n+        f15: freg = [\"$f15\",\"$ft7\"],\n+        f16: freg = [\"$f16\",\"$ft8\"],\n+        f17: freg = [\"$f17\",\"$ft9\"],\n+        f18: freg = [\"$f18\",\"$ft10\"],\n+        f19: freg = [\"$f19\",\"$ft11\"],\n+        f20: freg = [\"$f20\",\"$ft12\"],\n+        f21: freg = [\"$f21\",\"$ft13\"],\n+        f22: freg = [\"$f22\",\"$ft14\"],\n+        f23: freg = [\"$f23\",\"$ft15\"],\n+        f24: freg = [\"$f24\",\"$fs0\"],\n+        f25: freg = [\"$f25\",\"$fs1\"],\n+        f26: freg = [\"$f26\",\"$fs2\"],\n+        f27: freg = [\"$f27\",\"$fs3\"],\n+        f28: freg = [\"$f28\",\"$fs4\"],\n+        f29: freg = [\"$f29\",\"$fs5\"],\n+        f30: freg = [\"$f30\",\"$fs6\"],\n+        f31: freg = [\"$f31\",\"$fs7\"],\n+        #error = [\"$r0\",\"$zero\"] =>\n+            \"constant zero cannot be used as an operand for inline asm\",\n+        #error = [\"$r2\",\"$tp\"] =>\n+            \"reserved for TLS\",\n+        #error = [\"$r3\",\"$sp\"] =>\n+            \"the stack pointer cannot be used as an operand for inline asm\",\n+        #error = [\"$r21\"] =>\n+            \"reserved by the ABI\",\n+        #error = [\"$r22\",\"$fp\"] =>\n+            \"the frame pointer cannot be used as an operand for inline asm\",\n+        #error = [\"$r31\",\"$s8\"] =>\n+            \"$r31 is used internally by LLVM and cannot be used as an operand for inline asm\",\n+    }\n+}\n+\n+impl LoongArchInlineAsmReg {\n+    pub fn emit(\n+        self,\n+        out: &mut dyn fmt::Write,\n+        _arch: InlineAsmArch,\n+        _modifier: Option<char>,\n+    ) -> fmt::Result {\n+        out.write_str(self.name())\n+    }\n+}"}, {"sha": "266691b2c88c3267175d4a07fd3c6c6c1e18723c", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "patch": "@@ -168,6 +168,7 @@ mod arm;\n mod avr;\n mod bpf;\n mod hexagon;\n+mod loongarch;\n mod m68k;\n mod mips;\n mod msp430;\n@@ -184,6 +185,7 @@ pub use arm::{ArmInlineAsmReg, ArmInlineAsmRegClass};\n pub use avr::{AvrInlineAsmReg, AvrInlineAsmRegClass};\n pub use bpf::{BpfInlineAsmReg, BpfInlineAsmRegClass};\n pub use hexagon::{HexagonInlineAsmReg, HexagonInlineAsmRegClass};\n+pub use loongarch::{LoongArchInlineAsmReg, LoongArchInlineAsmRegClass};\n pub use m68k::{M68kInlineAsmReg, M68kInlineAsmRegClass};\n pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use msp430::{Msp430InlineAsmReg, Msp430InlineAsmRegClass};\n@@ -205,6 +207,7 @@ pub enum InlineAsmArch {\n     RiscV64,\n     Nvptx64,\n     Hexagon,\n+    LoongArch64,\n     Mips,\n     Mips64,\n     PowerPC,\n@@ -234,6 +237,7 @@ impl FromStr for InlineAsmArch {\n             \"powerpc\" => Ok(Self::PowerPC),\n             \"powerpc64\" => Ok(Self::PowerPC64),\n             \"hexagon\" => Ok(Self::Hexagon),\n+            \"loongarch64\" => Ok(Self::LoongArch64),\n             \"mips\" => Ok(Self::Mips),\n             \"mips64\" => Ok(Self::Mips64),\n             \"s390x\" => Ok(Self::S390x),\n@@ -259,6 +263,7 @@ pub enum InlineAsmReg {\n     Nvptx(NvptxInlineAsmReg),\n     PowerPC(PowerPCInlineAsmReg),\n     Hexagon(HexagonInlineAsmReg),\n+    LoongArch(LoongArchInlineAsmReg),\n     Mips(MipsInlineAsmReg),\n     S390x(S390xInlineAsmReg),\n     SpirV(SpirVInlineAsmReg),\n@@ -280,6 +285,7 @@ impl InlineAsmReg {\n             Self::RiscV(r) => r.name(),\n             Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n+            Self::LoongArch(r) => r.name(),\n             Self::Mips(r) => r.name(),\n             Self::S390x(r) => r.name(),\n             Self::Bpf(r) => r.name(),\n@@ -298,6 +304,7 @@ impl InlineAsmReg {\n             Self::RiscV(r) => InlineAsmRegClass::RiscV(r.reg_class()),\n             Self::PowerPC(r) => InlineAsmRegClass::PowerPC(r.reg_class()),\n             Self::Hexagon(r) => InlineAsmRegClass::Hexagon(r.reg_class()),\n+            Self::LoongArch(r) => InlineAsmRegClass::LoongArch(r.reg_class()),\n             Self::Mips(r) => InlineAsmRegClass::Mips(r.reg_class()),\n             Self::S390x(r) => InlineAsmRegClass::S390x(r.reg_class()),\n             Self::Bpf(r) => InlineAsmRegClass::Bpf(r.reg_class()),\n@@ -324,6 +331,7 @@ impl InlineAsmReg {\n                 Self::PowerPC(PowerPCInlineAsmReg::parse(name)?)\n             }\n             InlineAsmArch::Hexagon => Self::Hexagon(HexagonInlineAsmReg::parse(name)?),\n+            InlineAsmArch::LoongArch64 => Self::LoongArch(LoongArchInlineAsmReg::parse(name)?),\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmReg::parse(name)?)\n             }\n@@ -354,6 +362,9 @@ impl InlineAsmReg {\n             Self::RiscV(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),\n             Self::PowerPC(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),\n             Self::Hexagon(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),\n+            Self::LoongArch(r) => {\n+                r.validate(arch, reloc_model, target_features, target, is_clobber)\n+            }\n             Self::Mips(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),\n             Self::S390x(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),\n             Self::Bpf(r) => r.validate(arch, reloc_model, target_features, target, is_clobber),\n@@ -379,6 +390,7 @@ impl InlineAsmReg {\n             Self::RiscV(r) => r.emit(out, arch, modifier),\n             Self::PowerPC(r) => r.emit(out, arch, modifier),\n             Self::Hexagon(r) => r.emit(out, arch, modifier),\n+            Self::LoongArch(r) => r.emit(out, arch, modifier),\n             Self::Mips(r) => r.emit(out, arch, modifier),\n             Self::S390x(r) => r.emit(out, arch, modifier),\n             Self::Bpf(r) => r.emit(out, arch, modifier),\n@@ -397,6 +409,7 @@ impl InlineAsmReg {\n             Self::RiscV(_) => cb(self),\n             Self::PowerPC(r) => r.overlapping_regs(|r| cb(Self::PowerPC(r))),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n+            Self::LoongArch(_) => cb(self),\n             Self::Mips(_) => cb(self),\n             Self::S390x(_) => cb(self),\n             Self::Bpf(r) => r.overlapping_regs(|r| cb(Self::Bpf(r))),\n@@ -418,6 +431,7 @@ pub enum InlineAsmRegClass {\n     Nvptx(NvptxInlineAsmRegClass),\n     PowerPC(PowerPCInlineAsmRegClass),\n     Hexagon(HexagonInlineAsmRegClass),\n+    LoongArch(LoongArchInlineAsmRegClass),\n     Mips(MipsInlineAsmRegClass),\n     S390x(S390xInlineAsmRegClass),\n     SpirV(SpirVInlineAsmRegClass),\n@@ -440,6 +454,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.name(),\n             Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n+            Self::LoongArch(r) => r.name(),\n             Self::Mips(r) => r.name(),\n             Self::S390x(r) => r.name(),\n             Self::SpirV(r) => r.name(),\n@@ -464,6 +479,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Nvptx),\n             Self::PowerPC(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::PowerPC),\n             Self::Hexagon(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Hexagon),\n+            Self::LoongArch(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::LoongArch),\n             Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n             Self::S390x(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::S390x),\n             Self::SpirV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::SpirV),\n@@ -495,6 +511,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.suggest_modifier(arch, ty),\n             Self::PowerPC(r) => r.suggest_modifier(arch, ty),\n             Self::Hexagon(r) => r.suggest_modifier(arch, ty),\n+            Self::LoongArch(r) => r.suggest_modifier(arch, ty),\n             Self::Mips(r) => r.suggest_modifier(arch, ty),\n             Self::S390x(r) => r.suggest_modifier(arch, ty),\n             Self::SpirV(r) => r.suggest_modifier(arch, ty),\n@@ -522,6 +539,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.default_modifier(arch),\n             Self::PowerPC(r) => r.default_modifier(arch),\n             Self::Hexagon(r) => r.default_modifier(arch),\n+            Self::LoongArch(r) => r.default_modifier(arch),\n             Self::Mips(r) => r.default_modifier(arch),\n             Self::S390x(r) => r.default_modifier(arch),\n             Self::SpirV(r) => r.default_modifier(arch),\n@@ -548,6 +566,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.supported_types(arch),\n             Self::PowerPC(r) => r.supported_types(arch),\n             Self::Hexagon(r) => r.supported_types(arch),\n+            Self::LoongArch(r) => r.supported_types(arch),\n             Self::Mips(r) => r.supported_types(arch),\n             Self::S390x(r) => r.supported_types(arch),\n             Self::SpirV(r) => r.supported_types(arch),\n@@ -575,6 +594,7 @@ impl InlineAsmRegClass {\n                 Self::PowerPC(PowerPCInlineAsmRegClass::parse(name)?)\n             }\n             InlineAsmArch::Hexagon => Self::Hexagon(HexagonInlineAsmRegClass::parse(name)?),\n+            InlineAsmArch::LoongArch64 => Self::LoongArch(LoongArchInlineAsmRegClass::parse(name)?),\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmRegClass::parse(name)?)\n             }\n@@ -601,6 +621,7 @@ impl InlineAsmRegClass {\n             Self::Nvptx(r) => r.valid_modifiers(arch),\n             Self::PowerPC(r) => r.valid_modifiers(arch),\n             Self::Hexagon(r) => r.valid_modifiers(arch),\n+            Self::LoongArch(r) => r.valid_modifiers(arch),\n             Self::Mips(r) => r.valid_modifiers(arch),\n             Self::S390x(r) => r.valid_modifiers(arch),\n             Self::SpirV(r) => r.valid_modifiers(arch),\n@@ -760,6 +781,11 @@ pub fn allocatable_registers(\n             hexagon::fill_reg_map(arch, reloc_model, target_features, target, &mut map);\n             map\n         }\n+        InlineAsmArch::LoongArch64 => {\n+            let mut map = loongarch::regclass_map();\n+            loongarch::fill_reg_map(arch, reloc_model, target_features, target, &mut map);\n+            map\n+        }\n         InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n             let mut map = mips::regclass_map();\n             mips::fill_reg_map(arch, reloc_model, target_features, target, &mut map);"}, {"sha": "1874baa0c385ad29bc375bccbe3545212ba5de03", "filename": "src/doc/unstable-book/src/language-features/asm-experimental-arch.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md?ref=5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "patch": "@@ -17,6 +17,7 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n - AVR\n - MSP430\n - M68k\n+- LoongArch\n \n ## Register classes\n \n@@ -45,6 +46,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `reg`          | `d[0-7]`, `a[0-7]`                 | `r`                  |\n | M68k         | `reg_data`     | `d[0-7]`                           | `d`                  |\n | M68k         | `reg_addr`     | `a[0-3]`                           | `a`                  |\n+| LoongArch    | `reg`          | `$r1`, `$r[4-20]`, `$r[23,30]`     | `r`                  |\n+| LoongArch    | `freg`         | `$f[0-31]`                         | `f`                  |\n \n > **Notes**:\n > - NVPTX doesn't have a fixed register set, so named registers are not supported.\n@@ -76,6 +79,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | MSP430       | `reg`                           | None           | `i8`, `i16`                             |\n | M68k         | `reg`, `reg_addr`               | None           | `i16`, `i32`                            |\n | M68k         | `reg_data`                      | None           | `i8`, `i16`, `i32`                      |\n+| LoongArch64  | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`, `f32`, `f64` |\n+| LoongArch64  | `freg`                          | None           | `f32`, `f64`                            |\n \n ## Register aliases\n \n@@ -97,6 +102,10 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `a5`          | `bp`      |\n | M68k         | `a6`          | `fp`      |\n | M68k         | `a7`          | `sp`, `usp`, `ssp`, `isp` |\n+| LoongArch    | `$r0`         | `zero`    |\n+| LoongArch    | `$r2`         | `tp`      |\n+| LoongArch    | `$r3`         | `sp`      |\n+| LoongArch    | `$r22`        | `fp`      |\n \n > **Notes**:\n > - TI does not mandate a frame pointer for MSP430, but toolchains are allowed\n@@ -107,7 +116,7 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | Architecture | Unsupported register                    | Reason                                                                                                                                                                              |\n | ------------ | --------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n | All          | `sp`                                    | The stack pointer must be restored to its original value at the end of an asm code block.                                                                                           |\n-| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n+| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `$fp` (LoongArch) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n | All          | `r19` (Hexagon)                         | This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames.                                                                                        |\n | MIPS         | `$0` or `$zero`                         | This is a constant zero register which can't be modified.                                                                                                                           |\n | MIPS         | `$1` or `$at`                           | Reserved for assembler.                                                                                                                                                             |\n@@ -118,6 +127,10 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | AVR          | `r0`, `r1`, `r1r0`                      | Due to an issue in LLVM, the `r0` and `r1` registers cannot be used as inputs or outputs.  If modified, they must be restored to their original values before the end of the block. |\n |MSP430        | `r0`, `r2`, `r3`                        | These are the program counter, status register, and constant generator respectively. Neither the status register nor constant generator can be written to.                          |\n | M68k         | `a4`, `a5`                              | Used internally by LLVM for the base pointer and global base pointer. |\n+| LoongArch    | `$r0` or `$zero`                        | This is a constant zero register which can't be modified.                                                                                                                           |\n+| LoongArch    | `$r2` or `$tp`                          | This is reserved for TLS.                                                                                                                                                           |\n+| LoongArch    | `$r21`                                  | This is reserved by the ABI.                                                                                                                                                        |\n+| LoongArch    | `$r31` or `$s8`                         | This is used internally by LLVM.                                                                                                                                                    |\n \n ## Template modifiers\n \n@@ -132,6 +145,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | PowerPC      | `reg`          | None     | `0`            | None          |\n | PowerPC      | `reg_nonzero`  | None     | `3`            | `b`           |\n | PowerPC      | `freg`         | None     | `0`            | None          |\n+| LoongArch    | `reg`          | None     | `$r2`          | None          |\n+| LoongArch    | `freg`         | None     | `$f0`          | None          |\n \n # Flags covered by `preserves_flags`\n "}, {"sha": "4e296f3ade58b362b5041e8a96a9cbe8cd0d4ed0", "filename": "tests/assembly/asm/loongarch-type.rs", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/tests%2Fassembly%2Fasm%2Floongarch-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2fa4c11de4f4377cdaa00dea5c586c30ccde67/tests%2Fassembly%2Fasm%2Floongarch-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fasm%2Floongarch-type.rs?ref=5f2fa4c11de4f4377cdaa00dea5c586c30ccde67", "patch": "@@ -0,0 +1,196 @@\n+// min-llvm-version: 16.0\n+// assembly-output: emit-asm\n+// compile-flags: --target loongarch64-unknown-linux-gnu\n+// needs-llvm-components: loongarch\n+\n+#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *const i32;\n+\n+impl Copy for i8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for i64 {}\n+impl Copy for f32 {}\n+impl Copy for f64 {}\n+impl Copy for ptr {}\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// Hack to avoid function merging\n+extern \"Rust\" {\n+   fn dont_merge(s: &str);\n+}\n+\n+// CHECK-LABEL: sym_fn:\n+// CHECK: #APP\n+// CHECK: pcalau12i $t0, %got_pc_hi20(extern_func)\n+// CHECK: ld.d $t0, $t0, %got_pc_lo12(extern_func)\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    asm!(\"la.got $r12, {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: sym_static:\n+// CHECK: #APP\n+// CHECK: pcalau12i $t0, %got_pc_hi20(extern_static)\n+// CHECK: ld.d $t0, $t0, %got_pc_lo12(extern_static)\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_static() {\n+    asm!(\"la.got $r12, {}\", sym extern_static);\n+}\n+\n+macro_rules! check { ($func:ident, $ty:ty, $class:ident, $mov:literal) => {\n+    #[no_mangle]\n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!($func));\n+\n+        let y;\n+        asm!(concat!($mov,\" {}, {}\"), out($class) y, in($class) x);\n+        y\n+    }\n+};}\n+\n+macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt, $mov:literal) => {\n+    #[no_mangle]\n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!($func));\n+\n+        let y;\n+        asm!(concat!($mov, \" \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n+        y\n+    }\n+};}\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: #APP\n+// CHECK: move ${{[a-z0-9]+}}, ${{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8, i8, reg, \"move\");\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: #APP\n+// CHECK: move ${{[a-z0-9]+}}, ${{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16, i16, reg, \"move\");\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: #APP\n+// CHECK: move ${{[a-z0-9]+}}, ${{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32, i32, reg, \"move\");\n+\n+// CHECK-LABEL: reg_f32:\n+// CHECK: #APP\n+// CHECK: move ${{[a-z0-9]+}}, ${{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f32, f32, reg, \"move\");\n+\n+// CHECK-LABEL: reg_i64:\n+// CHECK: #APP\n+// CHECK: move ${{[a-z0-9]+}}, ${{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i64, i64, reg, \"move\");\n+\n+// CHECK-LABEL: reg_f64:\n+// CHECK: #APP\n+// CHECK: move ${{[a-z0-9]+}}, ${{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f64, f64, reg, \"move\");\n+\n+// CHECK-LABEL: reg_ptr:\n+// CHECK: #APP\n+// CHECK: move ${{[a-z0-9]+}}, ${{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_ptr, ptr, reg, \"move\");\n+\n+// CHECK-LABEL: freg_f32:\n+// CHECK: #APP\n+// CHECK: fmov.s $f{{[a-z0-9]+}}, $f{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(freg_f32, f32, freg, \"fmov.s\");\n+\n+// CHECK-LABEL: freg_f64:\n+// CHECK: #APP\n+// CHECK: fmov.d $f{{[a-z0-9]+}}, $f{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(freg_f64, f64, freg, \"fmov.d\");\n+\n+// CHECK-LABEL: r4_i8:\n+// CHECK: #APP\n+// CHECK: move $a0, $a0\n+// CHECK: #NO_APP\n+check_reg!(r4_i8, i8, \"$r4\", \"move\");\n+\n+// CHECK-LABEL: r4_i16:\n+// CHECK: #APP\n+// CHECK: move $a0, $a0\n+// CHECK: #NO_APP\n+check_reg!(r4_i16, i16, \"$r4\", \"move\");\n+\n+// CHECK-LABEL: r4_i32:\n+// CHECK: #APP\n+// CHECK: move $a0, $a0\n+// CHECK: #NO_APP\n+check_reg!(r4_i32, i32, \"$r4\", \"move\");\n+\n+// CHECK-LABEL: r4_f32:\n+// CHECK: #APP\n+// CHECK: move $a0, $a0\n+// CHECK: #NO_APP\n+check_reg!(r4_f32, f32, \"$r4\", \"move\");\n+\n+// CHECK-LABEL: r4_i64:\n+// CHECK: #APP\n+// CHECK: move $a0, $a0\n+// CHECK: #NO_APP\n+check_reg!(r4_i64, i64, \"$r4\", \"move\");\n+\n+// CHECK-LABEL: r4_f64:\n+// CHECK: #APP\n+// CHECK: move $a0, $a0\n+// CHECK: #NO_APP\n+check_reg!(r4_f64, f64, \"$r4\", \"move\");\n+\n+// CHECK-LABEL: r4_ptr:\n+// CHECK: #APP\n+// CHECK: move $a0, $a0\n+// CHECK: #NO_APP\n+check_reg!(r4_ptr, ptr, \"$r4\", \"move\");\n+\n+// CHECK-LABEL: f0_f32:\n+// CHECK: #APP\n+// CHECK: fmov.s $f{{[a-z0-9]+}}, $f{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check_reg!(f0_f32, f32, \"$f0\", \"fmov.s\");\n+\n+// CHECK-LABEL: f0_f64:\n+// CHECK: #APP\n+// CHECK: fmov.d $f{{[a-z0-9]+}}, $f{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check_reg!(f0_f64, f64, \"$f0\", \"fmov.d\");"}]}