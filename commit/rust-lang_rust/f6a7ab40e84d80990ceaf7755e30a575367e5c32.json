{"sha": "f6a7ab40e84d80990ceaf7755e30a575367e5c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YTdhYjQwZTg0ZDgwOTkwY2VhZjc3NTVlMzBhNTc1MzY3ZTVjMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-29T08:21:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-29T08:21:26Z"}, "message": "auto merge of #16762 : huonw/rust/for-error-nice, r=alexcrichton\n\n- print the type of `x` in `for ... in x` in the \"does not implement Iterator\" message\r\n- avoid printing that message if `x` has a type error", "tree": {"sha": "05e788396e1625c40b8ea6693a28cf365f6f63bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e788396e1625c40b8ea6693a28cf365f6f63bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6a7ab40e84d80990ceaf7755e30a575367e5c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a7ab40e84d80990ceaf7755e30a575367e5c32", "html_url": "https://github.com/rust-lang/rust/commit/f6a7ab40e84d80990ceaf7755e30a575367e5c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6a7ab40e84d80990ceaf7755e30a575367e5c32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3549ee202355731003002e813cf071cd89f04cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3549ee202355731003002e813cf071cd89f04cb", "html_url": "https://github.com/rust-lang/rust/commit/e3549ee202355731003002e813cf071cd89f04cb"}, {"sha": "fd278a892a9bb27fbe274d7cb472bc7e4ca0c1b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd278a892a9bb27fbe274d7cb472bc7e4ca0c1b3", "html_url": "https://github.com/rust-lang/rust/commit/fd278a892a9bb27fbe274d7cb472bc7e4ca0c1b3"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "cfd2ee2b44190c74e82a9f40e7ef74a373fc1f3f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f6a7ab40e84d80990ceaf7755e30a575367e5c32/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a7ab40e84d80990ceaf7755e30a575367e5c32/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f6a7ab40e84d80990ceaf7755e30a575367e5c32", "patch": "@@ -2168,12 +2168,13 @@ fn lookup_method_for_for_loop(fcx: &FnCtxt,\n         }\n     };\n \n+    let expr_type = fcx.expr_ty(&*iterator_expr);\n     let method = method::lookup_in_trait(fcx,\n                                          iterator_expr.span,\n                                          Some(&*iterator_expr),\n                                          token::intern(\"next\"),\n                                          trait_did,\n-                                         fcx.expr_ty(&*iterator_expr),\n+                                         expr_type,\n                                          [],\n                                          DontAutoderefReceiver,\n                                          IgnoreStaticMethods);\n@@ -2183,9 +2184,15 @@ fn lookup_method_for_for_loop(fcx: &FnCtxt,\n     let method_type = match method {\n         Some(ref method) => method.ty,\n         None => {\n-            fcx.tcx().sess.span_err(iterator_expr.span,\n-                                    \"`for` loop expression does not \\\n-                                     implement the `Iterator` trait\");\n+            let true_expr_type = fcx.infcx().resolve_type_vars_if_possible(expr_type);\n+\n+            if !ty::type_is_error(true_expr_type) {\n+                let ty_string = fcx.infcx().ty_to_string(true_expr_type);\n+                fcx.tcx().sess.span_err(iterator_expr.span,\n+                                        format!(\"`for` loop expression has type `{}` which does \\\n+                                                 not implement the `Iterator` trait\",\n+                                                ty_string).as_slice());\n+            }\n             ty::mk_err()\n         }\n     };"}, {"sha": "67d07ca4bd1fbc1af752187118f18f9509fa1e95", "filename": "src/test/compile-fail/for-loop-bogosity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6a7ab40e84d80990ceaf7755e30a575367e5c32/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a7ab40e84d80990ceaf7755e30a575367e5c32/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs?ref=f6a7ab40e84d80990ceaf7755e30a575367e5c32", "patch": "@@ -24,8 +24,7 @@ pub fn main() {\n         x: 1,\n         y: 2,\n     };\n-    for x in bogus {    //~ ERROR does not implement the `Iterator` trait\n+    for x in bogus { //~ ERROR has type `MyStruct` which does not implement the `Iterator` trait\n         drop(x);\n     }\n }\n-"}, {"sha": "7f0e40128f5d681f382e9cd43b118aa4dde83c94", "filename": "src/test/compile-fail/for-loop-type-error.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6a7ab40e84d80990ceaf7755e30a575367e5c32/src%2Ftest%2Fcompile-fail%2Ffor-loop-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a7ab40e84d80990ceaf7755e30a575367e5c32/src%2Ftest%2Fcompile-fail%2Ffor-loop-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-type-error.rs?ref=f6a7ab40e84d80990ceaf7755e30a575367e5c32", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let x = () + (); //~ ERROR binary operation\n+\n+    // this shouldn't have a flow-on error:\n+    for _ in x {}\n+}"}]}