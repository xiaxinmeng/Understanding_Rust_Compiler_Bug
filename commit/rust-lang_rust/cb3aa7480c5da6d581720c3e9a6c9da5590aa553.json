{"sha": "cb3aa7480c5da6d581720c3e9a6c9da5590aa553", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiM2FhNzQ4MGM1ZGE2ZDU4MTcyMGMzZTlhNmM5ZGE1NTkwYWE1NTM=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2019-03-18T11:49:12Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2019-03-18T11:54:10Z"}, "message": "Fix path_qualified\n\nAs suggested by eddyb", "tree": {"sha": "64c4f8c5ff2fb08aa5f0319a3274e428704e0377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64c4f8c5ff2fb08aa5f0319a3274e428704e0377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3aa7480c5da6d581720c3e9a6c9da5590aa553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3aa7480c5da6d581720c3e9a6c9da5590aa553", "html_url": "https://github.com/rust-lang/rust/commit/cb3aa7480c5da6d581720c3e9a6c9da5590aa553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3aa7480c5da6d581720c3e9a6c9da5590aa553/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "html_url": "https://github.com/rust-lang/rust/commit/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "586a33384e0bcc34cca4b40f772bee51a784a84e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb3aa7480c5da6d581720c3e9a6c9da5590aa553/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3aa7480c5da6d581720c3e9a6c9da5590aa553/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=cb3aa7480c5da6d581720c3e9a6c9da5590aa553", "patch": "@@ -141,6 +141,12 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n     ) -> Result<Self::Path, Self::Error> {\n+        if trait_ref.is_none() {\n+            if let ty::Adt(def, substs) = self_ty.sty {\n+                return self.print_def_path(def.did, substs);\n+            }\n+        }\n+        \n         // This shouldn't ever be needed, but just in case:\n         Ok(vec![match trait_ref {\n             Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)).as_str(),"}, {"sha": "9ee25aaea5ead2ff86481be069d65e4f7ad3c240", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb3aa7480c5da6d581720c3e9a6c9da5590aa553/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3aa7480c5da6d581720c3e9a6c9da5590aa553/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=cb3aa7480c5da6d581720c3e9a6c9da5590aa553", "patch": "@@ -17,7 +17,7 @@ pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n-pub const CSTRING_NEW: [&str; 2] = [\"<std::ffi::CString>\", \"new\"];\n+pub const CSTRING_NEW: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"new\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n@@ -27,8 +27,8 @@ pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const DROP_TRAIT: [&str; 4] = [\"core\", \"ops\", \"drop\", \"Drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n-pub const FMT_ARGUMENTS_NEWV1: [&str; 2] = [\"<std::fmt::Arguments<'a>>\", \"new_v1\"];\n-pub const FMT_ARGUMENTS_NEWV1FORMATTED: [&str; 2] = [\"<std::fmt::Arguments<'a>>\", \"new_v1_formatted\"];\n+pub const FMT_ARGUMENTS_NEWV1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n+pub const FMT_ARGUMENTS_NEWV1FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const HASH: [&str; 2] = [\"hash\", \"Hash\"];\n@@ -60,11 +60,11 @@ pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n pub const OS_STRING: [&str; 4] = [\"std\", \"ffi\", \"os_str\", \"OsString\"];\n-pub const OS_STR_TO_OS_STRING: [&str; 2] = [\"<std::ffi::OsStr>\", \"to_os_string\"];\n+pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n pub const PARTIAL_ORD: [&str; 3] = [\"core\", \"cmp\", \"PartialOrd\"];\n pub const PATH: [&str; 3] = [\"std\", \"path\", \"Path\"];\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n-pub const PATH_TO_PATH_BUF: [&str; 2] = [\"<std::path::Path>\", \"to_path_buf\"];\n+pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];\n@@ -83,12 +83,12 @@ pub const RANGE_TO_STD: [&str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n pub const RECEIVER: [&str; 4] = [\"std\", \"sync\", \"mpsc\", \"Receiver\"];\n pub const REGEX: [&str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n-pub const REGEX_BUILDER_NEW: [&str; 2] = [\"<regex::RegexBuilder>\", \"new\"];\n-pub const REGEX_BYTES_BUILDER_NEW: [&str; 2] = [\"<regex::bytes::RegexBuilder>\", \"new\"];\n-pub const REGEX_BYTES_NEW: [&str; 2] = [\"<regex::bytes::Regex>\", \"new\"];\n-pub const REGEX_BYTES_SET_NEW: [&str; 2] = [\"<regex::bytes::RegexSet>\", \"new\"];\n-pub const REGEX_NEW: [&str; 2] = [\"<regex::Regex>\", \"new\"];\n-pub const REGEX_SET_NEW: [&str; 2] = [\"<regex::RegexSet>\", \"new\"];\n+pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n+pub const REGEX_BYTES_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];\n+pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n+pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n+pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n+pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n pub const REPEAT: [&str; 3] = [\"core\", \"iter\", \"repeat\"];\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];"}]}