{"sha": "4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkODFmZTkyNDNjYzgzNzJkM2FkNWEwZWVjM2RkNjM4NTc4YTM1NDE=", "commit": {"author": {"name": "Igor Gutorov", "email": "igootorov@gmail.com", "date": "2018-08-13T19:15:16Z"}, "committer": {"name": "Igor Gutorov", "email": "igootorov@gmail.com", "date": "2018-08-23T07:45:53Z"}, "message": "Use optimized SmallVec implementation", "tree": {"sha": "f392a7f8c84c5c771588d993675ecb07338739db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f392a7f8c84c5c771588d993675ecb07338739db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "html_url": "https://github.com/rust-lang/rust/commit/4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/comments", "author": {"login": "gootorov", "id": 24283012, "node_id": "MDQ6VXNlcjI0MjgzMDEy", "avatar_url": "https://avatars.githubusercontent.com/u/24283012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gootorov", "html_url": "https://github.com/gootorov", "followers_url": "https://api.github.com/users/gootorov/followers", "following_url": "https://api.github.com/users/gootorov/following{/other_user}", "gists_url": "https://api.github.com/users/gootorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/gootorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gootorov/subscriptions", "organizations_url": "https://api.github.com/users/gootorov/orgs", "repos_url": "https://api.github.com/users/gootorov/repos", "events_url": "https://api.github.com/users/gootorov/events{/privacy}", "received_events_url": "https://api.github.com/users/gootorov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gootorov", "id": 24283012, "node_id": "MDQ6VXNlcjI0MjgzMDEy", "avatar_url": "https://avatars.githubusercontent.com/u/24283012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gootorov", "html_url": "https://github.com/gootorov", "followers_url": "https://api.github.com/users/gootorov/followers", "following_url": "https://api.github.com/users/gootorov/following{/other_user}", "gists_url": "https://api.github.com/users/gootorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/gootorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gootorov/subscriptions", "organizations_url": "https://api.github.com/users/gootorov/orgs", "repos_url": "https://api.github.com/users/gootorov/repos", "events_url": "https://api.github.com/users/gootorov/events{/privacy}", "received_events_url": "https://api.github.com/users/gootorov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73077e10603b3586828f2d3d067f804c2fc0a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73077e10603b3586828f2d3d067f804c2fc0a1f", "html_url": "https://github.com/rust-lang/rust/commit/e73077e10603b3586828f2d3d067f804c2fc0a1f"}], "stats": {"total": 590, "additions": 156, "deletions": 434}, "files": [{"sha": "62e7a58cd36114018e45238489bf53426d404c7d", "filename": "src/Cargo.lock", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -554,7 +554,7 @@ dependencies = [\n  \"crossbeam-utils 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1488,7 +1488,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1925,6 +1925,7 @@ dependencies = [\n  \"rustc_target 0.0.0\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n  \"tempfile 3.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2086,6 +2087,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2172,6 +2174,7 @@ dependencies = [\n  \"rustc-rayon-core 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n  \"serialize 0.0.0\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2317,6 +2320,7 @@ dependencies = [\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"serialize 0.0.0\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2422,6 +2426,7 @@ dependencies = [\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2597,6 +2602,9 @@ dependencies = [\n [[package]]\n name = \"serialize\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"shell-escape\"\n@@ -2615,7 +2623,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"smallvec\"\n-version = \"0.6.3\"\n+version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2771,6 +2779,7 @@ dependencies = [\n  \"rustc_target 0.0.0\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax_pos 0.0.0\",\n ]\n \n@@ -2783,6 +2792,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -3327,7 +3337,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum shell-escape 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"170a13e64f2a51b77a45702ba77287f5c6829375b04a69cf2222acd17d0cfab9\"\n \"checksum shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n \"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n-\"checksum smallvec 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"26df3bb03ca5eac2e64192b723d51f56c1b1e0860e7c766281f4598f181acdc8\"\n+\"checksum smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"153ffa32fd170e9944f7e0838edf824a754ec4c1fc64746fcc9fe1f8fa602e5d\"\n \"checksum socket2 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"962a516af4d3a7c272cb3a1d50a8cc4e5b41802e4ad54cfb7bee8ba61d37d703\"\n \"checksum stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffbc596e092fe5f598b12ef46cc03754085ac2f4d8c739ad61c4ae266cc3b3fa\"\n \"checksum string_cache 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25d70109977172b127fe834e5449e5ab1740b9ba49fa18a2020f509174f25423\""}, {"sha": "fc5d4a9c92331bb606e535b23a9f5b55eca2168c", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -33,6 +33,7 @@ parking_lot = \"0.5.5\"\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n chalk-engine = { version = \"0.7.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n+smallvec = { version = \"0.6.5\", features = [\"union\"] }\n \n # Note that these dependencies are a lie, they're just here to get linkage to\n # work."}, {"sha": "a285399657177a3ade729dc2421f45363c82b390", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -12,7 +12,7 @@ use errors::DiagnosticBuilder;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n use rustc_data_structures::sync::{Lrc, Lock};\n use std::env;\n use std::hash::Hash;\n@@ -1025,7 +1025,7 @@ impl CurrentDepGraph {\n         } = task {\n             debug_assert_eq!(node, key);\n             let krate_idx = self.node_to_node_index[&DepNode::new_no_params(DepKind::Krate)];\n-            self.alloc_node(node, SmallVec::one(krate_idx))\n+            self.alloc_node(node, smallvec![krate_idx])\n         } else {\n             bug!(\"complete_eval_always_task() - Expected eval always task to be popped\");\n         }"}, {"sha": "db07a3b883e0a06ce4290cd56d442faac13d4607", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -3178,26 +3178,26 @@ impl<'a> LoweringContext<'a> {\n     fn lower_item_id(&mut self, i: &Item) -> OneVector<hir::ItemId> {\n         match i.node {\n             ItemKind::Use(ref use_tree) => {\n-                let mut vec = OneVector::one(hir::ItemId { id: i.id });\n+                let mut vec = smallvec![hir::ItemId { id: i.id }];\n                 self.lower_item_id_use_tree(use_tree, i.id, &mut vec);\n                 vec\n             }\n             ItemKind::MacroDef(..) => OneVector::new(),\n             ItemKind::Fn(ref decl, ref header, ..) => {\n-                let mut ids = OneVector::one(hir::ItemId { id: i.id });\n+                let mut ids = smallvec![hir::ItemId { id: i.id }];\n                 self.lower_impl_trait_ids(decl, header, &mut ids);\n                 ids\n             },\n             ItemKind::Impl(.., None, _, ref items) => {\n-                let mut ids = OneVector::one(hir::ItemId { id: i.id });\n+                let mut ids = smallvec![hir::ItemId { id: i.id }];\n                 for item in items {\n                     if let ImplItemKind::Method(ref sig, _) = item.node {\n                         self.lower_impl_trait_ids(&sig.decl, &sig.header, &mut ids);\n                     }\n                 }\n                 ids\n             },\n-            _ => OneVector::one(hir::ItemId { id: i.id }),\n+            _ => smallvec![hir::ItemId { id: i.id }],\n         }\n     }\n \n@@ -4297,7 +4297,7 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_stmt(&mut self, s: &Stmt) -> OneVector<hir::Stmt> {\n-        OneVector::one(match s.node {\n+        smallvec![match s.node {\n             StmtKind::Local(ref l) => Spanned {\n                 node: hir::StmtKind::Decl(\n                     P(Spanned {\n@@ -4336,7 +4336,7 @@ impl<'a> LoweringContext<'a> {\n                 span: s.span,\n             },\n             StmtKind::Mac(..) => panic!(\"Shouldn't exist here\"),\n-        })\n+        }]\n     }\n \n     fn lower_capture_clause(&mut self, c: CaptureBy) -> hir::CaptureClause {"}, {"sha": "fbe9165ae97fa590c463241c63c0bd9746e6f4c2", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -27,7 +27,7 @@ use ty::{self, CanonicalVar, Lift, List, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// Canonicalizes a query value `V`. When we canonicalize a query,\n@@ -380,7 +380,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         // avoid allocations in those cases. We also don't use `indices` to\n         // determine if a kind has been seen before until the limit of 8 has\n         // been exceeded, to also avoid allocations for `indices`.\n-        if var_values.is_array() {\n+        if !var_values.spilled() {\n             // `var_values` is stack-allocated. `indices` isn't used yet. Do a\n             // direct linear search of `var_values`.\n             if let Some(idx) = var_values.iter().position(|&k| k == kind) {\n@@ -395,7 +395,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n \n                 // If `var_values` has become big enough to be heap-allocated,\n                 // fill up `indices` to facilitate subsequent lookups.\n-                if !var_values.is_array() {\n+                if var_values.spilled() {\n                     assert!(indices.is_empty());\n                     *indices =\n                         var_values.iter()"}, {"sha": "2e57ef7b17d4491649cbff413fd09807b1987ac5", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -33,7 +33,7 @@\n \n use infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n use rustc_data_structures::sync::Lrc;\n use serialize::UseSpecializedDecodable;\n use std::ops::Index;"}, {"sha": "b1d515464b9d09efc6d0bd0e2c74354ac400d766", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -109,6 +109,9 @@ extern crate rustc_apfloat;\n extern crate byteorder;\n extern crate backtrace;\n \n+#[macro_use]\n+extern crate smallvec;\n+\n // Note that librustc doesn't actually depend on these crates, see the note in\n // `Cargo.toml` for this crate about why these are here.\n #[allow(unused_extern_crates)]"}, {"sha": "14981a700a32eda3ffccf3b0a41725e6009e8493", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -24,7 +24,7 @@ use rustc_apfloat::Float;\n use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::sync::ReadGuard;\n use rustc_serialize as serialize;"}, {"sha": "3a0f7700824097078d16dda4dc19e3270c3ac742", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -10,7 +10,7 @@\n \n use infer::at::At;\n use infer::InferOk;\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n use std::iter::FromIterator;\n use syntax::source_map::Span;\n use ty::subst::Kind;"}, {"sha": "6bd92678362544ac62522f02dcfbddd4ef7d8ffb", "filename": "src/librustc/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use infer::InferCtxt;\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n use traits::{EvaluationResult, PredicateObligation, SelectionContext,\n              TraitQueryMode, OverflowError};\n "}, {"sha": "f8b3933e2a153c554115d32c8c39380abb71460a", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -15,7 +15,7 @@\n use infer::at::At;\n use infer::{InferCtxt, InferOk};\n use mir::interpret::{ConstValue, GlobalId};\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n use traits::project::Normalized;\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use ty::fold::{TypeFoldable, TypeFolder};"}, {"sha": "47c8ee357fbe846e340ece253e68827e406e6fb4", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -11,7 +11,7 @@\n use infer::InferCtxt;\n use syntax::ast;\n use syntax::source_map::Span;\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n use traits::{FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt};\n use traits::query::NoSolution;\n use ty::{self, Ty, TyCtxt};"}, {"sha": "3b16dab22f2c27ac2d38dd24635db5eb34748831", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -11,7 +11,7 @@\n use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryRegionConstraint,\n                        QueryResult};\n use infer::{InferCtxt, InferOk};\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n use std::fmt;\n use std::rc::Rc;\n use traits::query::Fallible;"}, {"sha": "c152c0fb8e94cea9ccdf9b272929902b93044756", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::mem;\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n use syntax::ast::CRATE_NODE_ID;\n use ty::context::TyCtxt;\n use ty::{DefId, DefIdTree};\n@@ -83,14 +83,14 @@ impl<'a, 'gcx, 'tcx> DefIdForest {\n         let mut next_ret = SmallVec::new();\n         let mut old_ret: SmallVec<[DefId; 1]> = SmallVec::new();\n         for next_forest in iter {\n-            for id in ret.root_ids.drain(..) {\n+            for id in ret.root_ids.drain() {\n                 if next_forest.contains(tcx, id) {\n                     next_ret.push(id);\n                 } else {\n                     old_ret.push(id);\n                 }\n             }\n-            ret.root_ids.extend(old_ret.drain(..));\n+            ret.root_ids.extend(old_ret.drain());\n \n             for id in next_forest.root_ids {\n                 if ret.contains(tcx, id) {\n@@ -99,7 +99,7 @@ impl<'a, 'gcx, 'tcx> DefIdForest {\n             }\n \n             mem::swap(&mut next_ret, &mut ret.root_ids);\n-            next_ret.drain(..);\n+            next_ret.drain();\n         }\n         ret\n     }\n@@ -112,7 +112,7 @@ impl<'a, 'gcx, 'tcx> DefIdForest {\n         let mut ret = DefIdForest::empty();\n         let mut next_ret = SmallVec::new();\n         for next_forest in iter {\n-            for id in ret.root_ids.drain(..) {\n+            for id in ret.root_ids.drain() {\n                 if !next_forest.contains(tcx, id) {\n                     next_ret.push(id);\n                 }\n@@ -125,7 +125,7 @@ impl<'a, 'gcx, 'tcx> DefIdForest {\n             }\n \n             mem::swap(&mut next_ret, &mut ret.root_ids);\n-            next_ret.drain(..);\n+            next_ret.drain();\n         }\n         ret\n     }"}, {"sha": "77b4d32c397d7c402a011b86de79f249b1edf919", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -55,7 +55,7 @@ use syntax::ext::hygiene::Mark;\n use syntax::symbol::{keywords, Symbol, LocalInternedString, InternedString};\n use syntax_pos::{DUMMY_SP, Span};\n \n-use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n+use smallvec;\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};\n \n@@ -2382,7 +2382,7 @@ impl<'tcx> TyS<'tcx> {\n     /// Iterator that walks the immediate children of `self`.  Hence\n     /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`\n     /// (but not `i32`, like `walk`).\n-    pub fn walk_shallow(&'tcx self) -> AccIntoIter<walk::TypeWalkerArray<'tcx>> {\n+    pub fn walk_shallow(&'tcx self) -> smallvec::IntoIter<walk::TypeWalkerArray<'tcx>> {\n         walk::walk_shallow(self)\n     }\n "}, {"sha": "6d3ba22c57f27f346c10d9316253a268c8ed8806", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -13,8 +13,7 @@\n \n use mir::interpret::ConstValue;\n use ty::{self, Ty};\n-use rustc_data_structures::small_vec::SmallVec;\n-use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n+use smallvec::{self, SmallVec};\n \n // The TypeWalker's stack is hot enough that it's worth going to some effort to\n // avoid heap allocations.\n@@ -28,7 +27,7 @@ pub struct TypeWalker<'tcx> {\n \n impl<'tcx> TypeWalker<'tcx> {\n     pub fn new(ty: Ty<'tcx>) -> TypeWalker<'tcx> {\n-        TypeWalker { stack: SmallVec::one(ty), last_subtree: 1, }\n+        TypeWalker { stack: smallvec![ty], last_subtree: 1, }\n     }\n \n     /// Skips the subtree of types corresponding to the last type\n@@ -67,7 +66,7 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n     }\n }\n \n-pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> AccIntoIter<TypeWalkerArray<'tcx>> {\n+pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> smallvec::IntoIter<TypeWalkerArray<'tcx>> {\n     let mut stack = SmallVec::new();\n     push_subtypes(&mut stack, ty);\n     stack.into_iter()"}, {"sha": "cd3ef6a1f043ce85c1935e7c3cb3289ea2e93db5", "filename": "src/librustc_allocator/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_allocator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_allocator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2FCargo.toml?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -16,3 +16,4 @@ rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n log = \"0.4\"\n+smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "5999416cecf1528818defc81159bf7d8cc41ba54", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -78,20 +78,20 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n             _ => {\n                 self.handler\n                     .span_err(item.span, \"allocators must be statics\");\n-                return OneVector::one(item);\n+                return smallvec![item];\n             }\n         }\n \n         if self.in_submod > 0 {\n             self.handler\n                 .span_err(item.span, \"`global_allocator` cannot be used in submodules\");\n-            return OneVector::one(item);\n+            return smallvec![item];\n         }\n \n         if self.found {\n             self.handler\n                 .span_err(item.span, \"cannot define more than one #[global_allocator]\");\n-            return OneVector::one(item);\n+            return smallvec![item];\n         }\n         self.found = true;\n "}, {"sha": "2a3404ee830343d10de823c8663c175394c9d7a6", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -18,6 +18,8 @@ extern crate rustc_errors;\n extern crate rustc_target;\n extern crate syntax;\n extern crate syntax_pos;\n+#[macro_use]\n+extern crate smallvec;\n \n pub mod expand;\n "}, {"sha": "0376cf8115756bf43e89d0d2c31d61df566ae25f", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -19,6 +19,7 @@ parking_lot_core = \"0.2.8\"\n rustc-rayon = \"0.1.1\"\n rustc-rayon-core = \"0.1.1\"\n rustc-hash = \"1.0.1\"\n+smallvec = { version = \"0.6.5\", features = [\"union\"] }\n \n [dependencies.parking_lot]\n version = \"0.5\""}, {"sha": "1eef7870c01b4df1206998db9a91e84ae785fe0b", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -48,6 +48,8 @@ extern crate rustc_rayon as rayon;\n extern crate rustc_rayon_core as rayon_core;\n extern crate rustc_hash;\n extern crate serialize;\n+#[cfg_attr(test, macro_use)]\n+extern crate smallvec;\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "e4e6a3d1a9c6735d722af2a3e2fcad1705c345d6", "filename": "src/librustc_data_structures/small_vec.rs", "status": "modified", "additions": 9, "deletions": 355, "changes": 364, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -16,264 +16,26 @@\n //!\n //! The N above is determined by Array's implementor, by way of an associated constant.\n \n-use std::ops::{Deref, DerefMut};\n-use std::iter::{IntoIterator, FromIterator};\n-use std::fmt::{self, Debug};\n-use std::mem;\n-use std::ptr;\n-\n-use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n-\n-use accumulate_vec::{IntoIter, AccumulateVec};\n-use array_vec::Array;\n-\n-pub struct SmallVec<A: Array>(AccumulateVec<A>);\n+use smallvec::{Array, SmallVec};\n \n pub type OneVector<T> = SmallVec<[T; 1]>;\n \n-impl<A> Clone for SmallVec<A>\n-    where A: Array,\n-          A::Element: Clone {\n-    fn clone(&self) -> Self {\n-        SmallVec(self.0.clone())\n-    }\n-}\n-\n-impl<A> Debug for SmallVec<A>\n-    where A: Array + Debug,\n-          A::Element: Debug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"SmallVec\").field(&self.0).finish()\n-    }\n+pub trait ExpectOne<A: Array> {\n+    fn expect_one(self, err: &'static str) -> A::Item;\n }\n \n-impl<A: Array> SmallVec<A> {\n-    pub fn new() -> Self {\n-        SmallVec(AccumulateVec::new())\n-    }\n-\n-    pub fn is_array(&self) -> bool {\n-        self.0.is_array()\n-    }\n-\n-    pub fn with_capacity(cap: usize) -> Self {\n-        let mut vec = SmallVec::new();\n-        vec.reserve(cap);\n-        vec\n-    }\n-\n-    pub fn one(el: A::Element) -> Self {\n-        SmallVec(AccumulateVec::one(el))\n-    }\n-\n-    pub fn many<I: IntoIterator<Item=A::Element>>(els: I) -> Self {\n-        SmallVec(AccumulateVec::many(els))\n-    }\n-\n-    pub fn expect_one(self, err: &'static str) -> A::Element {\n+impl<A: Array> ExpectOne<A> for SmallVec<A> {\n+    fn expect_one(self, err: &'static str) -> A::Item {\n         assert!(self.len() == 1, err);\n-        match self.0 {\n-            AccumulateVec::Array(arr) => arr.into_iter().next().unwrap(),\n-            AccumulateVec::Heap(vec) => vec.into_iter().next().unwrap(),\n-        }\n-    }\n-\n-    /// Will reallocate onto the heap if needed.\n-    pub fn push(&mut self, el: A::Element) {\n-        self.reserve(1);\n-        match self.0 {\n-            AccumulateVec::Array(ref mut array) => array.push(el),\n-            AccumulateVec::Heap(ref mut vec) => vec.push(el),\n-        }\n-    }\n-\n-    pub fn reserve(&mut self, n: usize) {\n-        match self.0 {\n-            AccumulateVec::Array(_) => {\n-                if self.len() + n > A::LEN {\n-                    let len = self.len();\n-                    let array = mem::replace(&mut self.0,\n-                            AccumulateVec::Heap(Vec::with_capacity(len + n)));\n-                    if let AccumulateVec::Array(array) = array {\n-                        match self.0 {\n-                            AccumulateVec::Heap(ref mut vec) => vec.extend(array),\n-                            _ => unreachable!()\n-                        }\n-                    }\n-                }\n-            }\n-            AccumulateVec::Heap(ref mut vec) => vec.reserve(n)\n-        }\n-    }\n-\n-    pub unsafe fn set_len(&mut self, len: usize) {\n-        match self.0 {\n-            AccumulateVec::Array(ref mut arr) => arr.set_len(len),\n-            AccumulateVec::Heap(ref mut vec) => vec.set_len(len),\n-        }\n-    }\n-\n-    pub fn insert(&mut self, index: usize, element: A::Element) {\n-        let len = self.len();\n-\n-        // Reserve space for shifting elements to the right\n-        self.reserve(1);\n-\n-        assert!(index <= len);\n-\n-        unsafe {\n-            // infallible\n-            // The spot to put the new value\n-            {\n-                let p = self.as_mut_ptr().add(index);\n-                // Shift everything over to make space. (Duplicating the\n-                // `index`th element into two consecutive places.)\n-                ptr::copy(p, p.offset(1), len - index);\n-                // Write it in, overwriting the first copy of the `index`th\n-                // element.\n-                ptr::write(p, element);\n-            }\n-            self.set_len(len + 1);\n-        }\n-    }\n-\n-    pub fn truncate(&mut self, len: usize) {\n-        unsafe {\n-            while len < self.len() {\n-                // Decrement len before the drop_in_place(), so a panic on Drop\n-                // doesn't re-drop the just-failed value.\n-                let newlen = self.len() - 1;\n-                self.set_len(newlen);\n-                ::std::ptr::drop_in_place(self.get_unchecked_mut(newlen));\n-            }\n-        }\n-    }\n-}\n-\n-impl<A: Array> Deref for SmallVec<A> {\n-    type Target = AccumulateVec<A>;\n-    fn deref(&self) -> &Self::Target {\n-        &self.0\n-    }\n-}\n-\n-impl<A: Array> DerefMut for SmallVec<A> {\n-    fn deref_mut(&mut self) -> &mut AccumulateVec<A> {\n-        &mut self.0\n-    }\n-}\n-\n-impl<A: Array> FromIterator<A::Element> for SmallVec<A> {\n-    fn from_iter<I>(iter: I) -> Self where I: IntoIterator<Item=A::Element> {\n-        SmallVec(iter.into_iter().collect())\n-    }\n-}\n-\n-impl<A: Array> Extend<A::Element> for SmallVec<A> {\n-    fn extend<I: IntoIterator<Item=A::Element>>(&mut self, iter: I) {\n-        let iter = iter.into_iter();\n-        self.reserve(iter.size_hint().0);\n-        match self.0 {\n-            AccumulateVec::Heap(ref mut vec) => vec.extend(iter),\n-            _ => iter.for_each(|el| self.push(el))\n-        }\n-    }\n-}\n-\n-impl<A: Array> IntoIterator for SmallVec<A> {\n-    type Item = A::Element;\n-    type IntoIter = IntoIter<A>;\n-    fn into_iter(self) -> Self::IntoIter {\n-        self.0.into_iter()\n-    }\n-}\n-\n-impl<A: Array> Default for SmallVec<A> {\n-    fn default() -> SmallVec<A> {\n-        SmallVec::new()\n-    }\n-}\n-\n-impl<A> Encodable for SmallVec<A>\n-    where A: Array,\n-          A::Element: Encodable {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s))?;\n-            }\n-            Ok(())\n-        })\n-    }\n-}\n-\n-impl<A> Decodable for SmallVec<A>\n-    where A: Array,\n-          A::Element: Decodable {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<SmallVec<A>, D::Error> {\n-        d.read_seq(|d, len| {\n-            let mut vec = SmallVec::with_capacity(len);\n-            // FIXME(#48994) - could just be collected into a Result<SmallVec, D::Error>\n-            for i in 0..len {\n-                vec.push(d.read_seq_elt(i, |d| Decodable::decode(d))?);\n-            }\n-            Ok(vec)\n-        })\n+        self.into_iter().next().unwrap()\n     }\n }\n \n #[cfg(test)]\n mod tests {\n     extern crate test;\n-    use self::test::Bencher;\n-\n     use super::*;\n \n-    #[test]\n-    fn test_len() {\n-        let v: OneVector<isize> = OneVector::new();\n-        assert_eq!(0, v.len());\n-\n-        assert_eq!(1, OneVector::one(1).len());\n-        assert_eq!(5, OneVector::many(vec![1, 2, 3, 4, 5]).len());\n-    }\n-\n-    #[test]\n-    fn test_push_get() {\n-        let mut v = OneVector::new();\n-        v.push(1);\n-        assert_eq!(1, v.len());\n-        assert_eq!(1, v[0]);\n-        v.push(2);\n-        assert_eq!(2, v.len());\n-        assert_eq!(2, v[1]);\n-        v.push(3);\n-        assert_eq!(3, v.len());\n-        assert_eq!(3, v[2]);\n-    }\n-\n-    #[test]\n-    fn test_from_iter() {\n-        let v: OneVector<isize> = (vec![1, 2, 3]).into_iter().collect();\n-        assert_eq!(3, v.len());\n-        assert_eq!(1, v[0]);\n-        assert_eq!(2, v[1]);\n-        assert_eq!(3, v[2]);\n-    }\n-\n-    #[test]\n-    fn test_move_iter() {\n-        let v = OneVector::new();\n-        let v: Vec<isize> = v.into_iter().collect();\n-        assert_eq!(v, Vec::new());\n-\n-        let v = OneVector::one(1);\n-        assert_eq!(v.into_iter().collect::<Vec<_>>(), [1]);\n-\n-        let v = OneVector::many(vec![1, 2, 3]);\n-        assert_eq!(v.into_iter().collect::<Vec<_>>(), [1, 2, 3]);\n-    }\n-\n     #[test]\n     #[should_panic]\n     fn test_expect_one_zero() {\n@@ -283,120 +45,12 @@ mod tests {\n     #[test]\n     #[should_panic]\n     fn test_expect_one_many() {\n-        OneVector::many(vec![1, 2]).expect_one(\"\");\n+        OneVector::from_vec(vec![1, 2]).expect_one(\"\");\n     }\n \n     #[test]\n     fn test_expect_one_one() {\n-        assert_eq!(1, OneVector::one(1).expect_one(\"\"));\n-        assert_eq!(1, OneVector::many(vec![1]).expect_one(\"\"));\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_1_10_with_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 1]> = SmallVec::with_capacity(10);\n-\n-            sv.extend(0..10);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_1_10_wo_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 1]> = SmallVec::new();\n-\n-            sv.extend(0..10);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_8_10_with_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 8]> = SmallVec::with_capacity(10);\n-\n-            sv.extend(0..10);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_8_10_wo_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 8]> = SmallVec::new();\n-\n-            sv.extend(0..10);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_32_10_with_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 32]> = SmallVec::with_capacity(10);\n-\n-            sv.extend(0..10);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_32_10_wo_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 32]> = SmallVec::new();\n-\n-            sv.extend(0..10);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_1_50_with_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 1]> = SmallVec::with_capacity(50);\n-\n-            sv.extend(0..50);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_1_50_wo_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 1]> = SmallVec::new();\n-\n-            sv.extend(0..50);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_8_50_with_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 8]> = SmallVec::with_capacity(50);\n-\n-            sv.extend(0..50);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_8_50_wo_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 8]> = SmallVec::new();\n-\n-            sv.extend(0..50);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_32_50_with_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 32]> = SmallVec::with_capacity(50);\n-\n-            sv.extend(0..50);\n-        })\n-    }\n-\n-    #[bench]\n-    fn fill_small_vec_32_50_wo_cap(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut sv: SmallVec<[usize; 32]> = SmallVec::new();\n-\n-            sv.extend(0..50);\n-        })\n+        assert_eq!(1, (smallvec![1] as OneVector<_>).expect_one(\"\"));\n+        assert_eq!(1, OneVector::from_vec(vec![1]).expect_one(\"\"));\n     }\n }"}, {"sha": "2da0ede9d15ce45f702a6468f1c9514608175456", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -25,3 +25,4 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n byteorder = { version = \"1.1\", features = [\"i128\"] }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n+smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "70b6c8f25805c4259cd8a062ad49887b8a2c8aad", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -29,7 +29,7 @@ use rustc_data_structures::graph::dominators::Dominators;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_set::IdxSet;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n \n use std::rc::Rc;\n "}, {"sha": "d36dbaa0608265425768bf35037f9f8370ff316f", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -62,6 +62,7 @@ extern crate log_settings;\n extern crate rustc_apfloat;\n extern crate byteorder;\n extern crate core;\n+extern crate smallvec;\n \n mod diagnostics;\n "}, {"sha": "dd6e632803bea4c7df9fdeddc8541cf43d5bbbab", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -43,6 +43,7 @@ use errors::Applicability;\n use std::cell::Cell;\n use std::mem;\n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::small_vec::ExpectOne;\n \n crate struct FromPrelude(bool);\n crate struct FromExpansion(bool);"}, {"sha": "cd21ee601a7d2d47ffe0204b78cdfaac12bbb4a5", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -17,3 +17,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n chalk-engine = { version = \"0.7.0\", default-features=false }\n+smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "4c28df97bdf50a5024907237b2699463f6ca45b0", "filename": "src/librustc_traits/chalk_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_traits%2Fchalk_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_traits%2Fchalk_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -25,7 +25,7 @@ use rustc::traits::{\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::subst::Kind;\n use rustc::ty::{self, TyCtxt};\n-use rustc_data_structures::small_vec::SmallVec;\n+use smallvec::SmallVec;\n \n use std::fmt::{self, Debug};\n use std::marker::PhantomData;"}, {"sha": "700efbd6ba942deee32e9dc0d2c635866ab199d1", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -28,6 +28,7 @@ extern crate rustc;\n extern crate rustc_data_structures;\n extern crate syntax;\n extern crate syntax_pos;\n+extern crate smallvec;\n \n mod chalk_context;\n mod dropck_outlives;"}, {"sha": "66140d9c01f82b860e9e494d6a748c6c19edf3d3", "filename": "src/libserialize/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibserialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibserialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2FCargo.toml?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -7,3 +7,6 @@ version = \"0.0.0\"\n name = \"serialize\"\n path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n+\n+[dependencies]\n+smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "3e028d755c6d4a5dd89634954b8ad836bc1baa16", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -17,6 +17,38 @@ use std::collections::{LinkedList, VecDeque, BTreeMap, BTreeSet, HashMap, HashSe\n use std::rc::Rc;\n use std::sync::Arc;\n \n+use smallvec::{Array, SmallVec};\n+\n+impl<A> Encodable for SmallVec<A>\n+    where A: Array,\n+          A::Item: Encodable\n+{\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_seq(self.len(), |s| {\n+            for (i, e) in self.iter().enumerate() {\n+                s.emit_seq_elt(i, |s| e.encode(s))?;\n+            }\n+            Ok(())\n+        })\n+    }\n+}\n+\n+impl<A> Decodable for SmallVec<A>\n+    where A: Array,\n+          A::Item: Decodable\n+{\n+    fn decode<D: Decoder>(d: &mut D) -> Result<SmallVec<A>, D::Error> {\n+        d.read_seq(|d, len| {\n+            let mut vec = SmallVec::with_capacity(len);\n+            // FIXME(#48994) - could just be collected into a Result<SmallVec, D::Error>\n+            for i in 0..len {\n+                vec.push(d.read_seq_elt(i, |d| Decodable::decode(d))?);\n+            }\n+            Ok(vec)\n+        })\n+    }\n+}\n+\n impl<T: Encodable> Encodable for LinkedList<T> {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_seq(self.len(), |s| {"}, {"sha": "1f6ee3d867b17b3c7225b31a84266de1f039df8a", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -32,6 +32,8 @@ pub use self::serialize::{Decoder, Encoder, Decodable, Encodable};\n pub use self::serialize::{SpecializationError, SpecializedEncoder, SpecializedDecoder};\n pub use self::serialize::{UseSpecializedEncodable, UseSpecializedDecodable};\n \n+extern crate smallvec;\n+\n mod serialize;\n mod collection_impls;\n "}, {"sha": "519cc7aa92c556e135423cc15780e1766ef90951", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -17,3 +17,4 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_target = { path = \"../librustc_target\" }\n+smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "c5a2cd5ac0b439f03d22ad39f9b44c488c612cbc", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -131,7 +131,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     let sym = Ident::with_empty_ctxt(Symbol::gensym(&format!(\n         \"__register_diagnostic_{}\", code\n     )));\n-    MacEager::items(OneVector::many(vec![\n+    MacEager::items(OneVector::from_vec(vec![\n         ecx.item_mod(\n             span,\n             span,\n@@ -214,7 +214,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n         ),\n     );\n \n-    MacEager::items(OneVector::many(vec![\n+    MacEager::items(OneVector::from_vec(vec![\n         P(ast::Item {\n             ident: *name,\n             attrs: Vec::new(),"}, {"sha": "75d24df7b629fc850a697ecf79837df431c48634", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -316,11 +316,11 @@ impl<F> IdentMacroExpander for F\n // Use a macro because forwarding to a simple function has type system issues\n macro_rules! make_stmts_default {\n     ($me:expr) => {\n-        $me.make_expr().map(|e| OneVector::one(ast::Stmt {\n+        $me.make_expr().map(|e| smallvec![ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             span: e.span,\n             node: ast::StmtKind::Expr(e),\n-        }))\n+        }])\n     }\n }\n \n@@ -548,11 +548,11 @@ impl MacResult for DummyResult {\n     }\n \n     fn make_stmts(self: Box<DummyResult>) -> Option<OneVector<ast::Stmt>> {\n-        Some(OneVector::one(ast::Stmt {\n+        Some(smallvec![ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             node: ast::StmtKind::Expr(DummyResult::raw_expr(self.span)),\n             span: self.span,\n-        }))\n+        }])\n     }\n \n     fn make_ty(self: Box<DummyResult>) -> Option<P<ast::Ty>> {"}, {"sha": "276ce73d2d50114e8dda2e2e4e688f7091d05c3a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -37,6 +37,7 @@ use visit::{self, Visitor};\n use std::collections::HashMap;\n use std::fs::File;\n use std::io::Read;\n+use std::iter::FromIterator;\n use std::{iter, mem};\n use std::rc::Rc;\n use std::path::PathBuf;\n@@ -131,7 +132,7 @@ macro_rules! ast_fragments {\n                 self.expand_fragment(AstFragment::$Kind(ast)).$make_ast()\n             })*)*\n             $($(fn $fold_ast_elt(&mut self, ast_elt: <$AstTy as IntoIterator>::Item) -> $AstTy {\n-                self.expand_fragment(AstFragment::$Kind(OneVector::one(ast_elt))).$make_ast()\n+                self.expand_fragment(AstFragment::$Kind(smallvec![ast_elt])).$make_ast()\n             })*)*\n         }\n \n@@ -270,15 +271,15 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         let orig_mod_span = krate.module.inner;\n \n-        let krate_item = AstFragment::Items(OneVector::one(P(ast::Item {\n+        let krate_item = AstFragment::Items(smallvec![P(ast::Item {\n             attrs: krate.attrs,\n             span: krate.span,\n             node: ast::ItemKind::Mod(krate.module),\n             ident: keywords::Invalid.ident(),\n             id: ast::DUMMY_NODE_ID,\n             vis: respan(krate.span.shrink_to_lo(), ast::VisibilityKind::Public),\n             tokens: None,\n-        })));\n+        })]);\n \n         match self.expand_fragment(krate_item).make_items().pop().map(P::into_inner) {\n             Some(ast::Item { attrs, node: ast::ItemKind::Mod(module), .. }) => {\n@@ -1409,7 +1410,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                         ui\n                     });\n \n-                    OneVector::many(\n+                    OneVector::from_iter(\n                         self.fold_unnameable(item).into_iter()\n                             .chain(self.fold_unnameable(use_item)))\n                 } else {"}, {"sha": "7a8ccfddf8eb65cda1440ab7969617b8df838323", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -46,37 +46,37 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n     match kind {\n         AstFragmentKind::Expr => AstFragment::Expr(expr_placeholder()),\n         AstFragmentKind::OptExpr => AstFragment::OptExpr(Some(expr_placeholder())),\n-        AstFragmentKind::Items => AstFragment::Items(OneVector::one(P(ast::Item {\n+        AstFragmentKind::Items => AstFragment::Items(smallvec![P(ast::Item {\n             id, span, ident, vis, attrs,\n             node: ast::ItemKind::Mac(mac_placeholder()),\n             tokens: None,\n-        }))),\n-        AstFragmentKind::TraitItems => AstFragment::TraitItems(OneVector::one(ast::TraitItem {\n+        })]),\n+        AstFragmentKind::TraitItems => AstFragment::TraitItems(smallvec![ast::TraitItem {\n             id, span, ident, attrs, generics,\n             node: ast::TraitItemKind::Macro(mac_placeholder()),\n             tokens: None,\n-        })),\n-        AstFragmentKind::ImplItems => AstFragment::ImplItems(OneVector::one(ast::ImplItem {\n+        }]),\n+        AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![ast::ImplItem {\n             id, span, ident, vis, attrs, generics,\n             node: ast::ImplItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n-        })),\n+        }]),\n         AstFragmentKind::ForeignItems =>\n-            AstFragment::ForeignItems(OneVector::one(ast::ForeignItem {\n+            AstFragment::ForeignItems(smallvec![ast::ForeignItem {\n                 id, span, ident, vis, attrs,\n                 node: ast::ForeignItemKind::Macro(mac_placeholder()),\n-            })),\n+            }]),\n         AstFragmentKind::Pat => AstFragment::Pat(P(ast::Pat {\n             id, span, node: ast::PatKind::Mac(mac_placeholder()),\n         })),\n         AstFragmentKind::Ty => AstFragment::Ty(P(ast::Ty {\n             id, span, node: ast::TyKind::Mac(mac_placeholder()),\n         })),\n-        AstFragmentKind::Stmts => AstFragment::Stmts(OneVector::one({\n+        AstFragmentKind::Stmts => AstFragment::Stmts(smallvec![{\n             let mac = P((mac_placeholder(), ast::MacStmtStyle::Braces, ThinVec::new()));\n             ast::Stmt { id, span, node: ast::StmtKind::Mac(mac) }\n-        })),\n+        }]),\n     }\n }\n \n@@ -118,7 +118,7 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n     fn fold_item(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n         match item.node {\n             ast::ItemKind::Mac(_) => return self.remove(item.id).make_items(),\n-            ast::ItemKind::MacroDef(_) => return OneVector::one(item),\n+            ast::ItemKind::MacroDef(_) => return smallvec![item],\n             _ => {}\n         }\n "}, {"sha": "dcdeee5c2e700d015f2a4a7861a98f4ff26703c8", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -644,7 +644,7 @@ pub fn parse(\n     // This MatcherPos instance is allocated on the stack. All others -- and\n     // there are frequently *no* others! -- are allocated on the heap.\n     let mut initial = initial_matcher_pos(ms, parser.span.lo());\n-    let mut cur_items = OneVector::one(MatcherPosHandle::Ref(&mut initial));\n+    let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];\n     let mut next_items = Vec::new();\n \n     loop {"}, {"sha": "67a15b149f6d50bd4dff1b02cfc2522c67d2715b", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -70,7 +70,7 @@ pub fn transcribe(cx: &ExtCtxt,\n                   interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n                   src: Vec<quoted::TokenTree>)\n                   -> TokenStream {\n-    let mut stack = OneVector::one(Frame::new(src));\n+    let mut stack: OneVector<Frame> = smallvec![Frame::new(src)];\n     let interpolations = interp.unwrap_or_else(HashMap::new); /* just a convenience */\n     let mut repeats = Vec::new();\n     let mut result: Vec<TokenStream> = Vec::new();"}, {"sha": "07b8b80c131f98c2e9704b9ee33e54b652d2b198", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -31,6 +31,7 @@ use tokenstream::*;\n use util::move_map::MoveMap;\n \n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::small_vec::ExpectOne;\n \n pub trait Folder : Sized {\n     // Any additions to this trait should happen in form\n@@ -962,7 +963,7 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n \n pub fn noop_fold_trait_item<T: Folder>(i: TraitItem, folder: &mut T)\n                                        -> OneVector<TraitItem> {\n-    OneVector::one(TraitItem {\n+    smallvec![TraitItem {\n         id: folder.new_id(i.id),\n         ident: folder.fold_ident(i.ident),\n         attrs: fold_attrs(i.attrs, folder),\n@@ -986,12 +987,12 @@ pub fn noop_fold_trait_item<T: Folder>(i: TraitItem, folder: &mut T)\n         },\n         span: folder.new_span(i.span),\n         tokens: i.tokens,\n-    })\n+    }]\n }\n \n pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n                                       -> OneVector<ImplItem> {\n-    OneVector::one(ImplItem {\n+    smallvec![ImplItem {\n         id: folder.new_id(i.id),\n         vis: folder.fold_vis(i.vis),\n         ident: folder.fold_ident(i.ident),\n@@ -1014,7 +1015,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n         },\n         span: folder.new_span(i.span),\n         tokens: i.tokens,\n-    })\n+    }]\n }\n \n pub fn noop_fold_fn_header<T: Folder>(mut header: FnHeader, folder: &mut T) -> FnHeader {\n@@ -1067,7 +1068,7 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n \n // fold one item into possibly many items\n pub fn noop_fold_item<T: Folder>(i: P<Item>, folder: &mut T) -> OneVector<P<Item>> {\n-    OneVector::one(i.map(|i| folder.fold_item_simple(i)))\n+    smallvec![i.map(|i| folder.fold_item_simple(i))]\n }\n \n // fold one item into exactly one item\n@@ -1089,7 +1090,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span,\n \n pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T)\n -> OneVector<ForeignItem> {\n-    OneVector::one(folder.fold_foreign_item_simple(ni))\n+    smallvec![folder.fold_foreign_item_simple(ni)]\n }\n \n pub fn noop_fold_foreign_item_simple<T: Folder>(ni: ForeignItem, folder: &mut T) -> ForeignItem {\n@@ -1377,17 +1378,17 @@ pub fn noop_fold_stmt<T: Folder>(Stmt {node, span, id}: Stmt, folder: &mut T) ->\n \n pub fn noop_fold_stmt_kind<T: Folder>(node: StmtKind, folder: &mut T) -> OneVector<StmtKind> {\n     match node {\n-        StmtKind::Local(local) => OneVector::one(StmtKind::Local(folder.fold_local(local))),\n+        StmtKind::Local(local) => smallvec![StmtKind::Local(folder.fold_local(local))],\n         StmtKind::Item(item) => folder.fold_item(item).into_iter().map(StmtKind::Item).collect(),\n         StmtKind::Expr(expr) => {\n             folder.fold_opt_expr(expr).into_iter().map(StmtKind::Expr).collect()\n         }\n         StmtKind::Semi(expr) => {\n             folder.fold_opt_expr(expr).into_iter().map(StmtKind::Semi).collect()\n         }\n-        StmtKind::Mac(mac) => OneVector::one(StmtKind::Mac(mac.map(|(mac, semi, attrs)| {\n+        StmtKind::Mac(mac) => smallvec![StmtKind::Mac(mac.map(|(mac, semi, attrs)| {\n             (folder.fold_mac(mac), semi, fold_attrs(attrs.into(), folder).into())\n-        }))),\n+        }))],\n     }\n }\n "}, {"sha": "b11726e4cc03bca73650f5cb711d81d724159bff", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -40,6 +40,8 @@ extern crate syntax_pos;\n extern crate rustc_data_structures;\n extern crate rustc_target;\n #[macro_use] extern crate scoped_tls;\n+#[macro_use]\n+extern crate smallvec;\n \n extern crate serialize as rustc_serialize; // used by deriving\n "}, {"sha": "49ab0c2256e89674c3e983217f79daad314345bf", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -41,6 +41,7 @@ use ptr::P;\n use OneVector;\n use symbol::{self, Symbol, keywords};\n use ThinVec;\n+use rustc_data_structures::small_vec::ExpectOne;\n \n enum ShouldPanic {\n     No,\n@@ -183,7 +184,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         if ident.name != keywords::Invalid.name() {\n             self.cx.path.pop();\n         }\n-        OneVector::one(P(item))\n+        smallvec![P(item)]\n     }\n \n     fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac { mac }\n@@ -235,7 +236,7 @@ impl fold::Folder for EntryPointCleaner {\n             EntryPointType::OtherMain => folded,\n         };\n \n-        OneVector::one(folded)\n+        smallvec![folded]\n     }\n \n     fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac { mac }"}, {"sha": "8dba34583bef3ff25b1d8045a77dfc1a938f8285", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -15,4 +15,5 @@ rustc_errors = { path = \"../librustc_errors\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_target = { path = \"../librustc_target\" }\n\\ No newline at end of file\n+rustc_target = { path = \"../librustc_target\" }\n+smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "1130a50537d017150d48e7e8e761d51522ee91da", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -18,8 +18,6 @@\n /// LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n /// therefore apply.\n \n-use rustc_data_structures::small_vec::OneVector;\n-\n use syntax::ast;\n use syntax::source_map::respan;\n use syntax::ext::base;\n@@ -52,7 +50,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n         None => return DummyResult::any(sp),\n     };\n \n-    MacEager::items(OneVector::one(P(ast::Item {\n+    MacEager::items(smallvec![P(ast::Item {\n         ident: ast::Ident::with_empty_ctxt(Symbol::intern(\"\")),\n         attrs: Vec::new(),\n         id: ast::DUMMY_NODE_ID,\n@@ -63,5 +61,5 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n         vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n         span: sp,\n         tokens: None,\n-    })))\n+    })])\n }"}, {"sha": "790a42007fb1db5d55a956e3de9143232e9a7998", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -29,6 +29,8 @@ extern crate proc_macro;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;\n extern crate rustc_target;\n+#[macro_use]\n+extern crate smallvec;\n \n mod diagnostics;\n "}, {"sha": "533d0ac490c413c5179e50de334c5b1f51100b90", "filename": "src/test/run-pass-fulldeps/auxiliary/issue-16723.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81fe9243cc8372d3ad5a0eec3dd638578a3541/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs?ref=4d81fe9243cc8372d3ad5a0eec3dd638578a3541", "patch": "@@ -31,7 +31,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n \n fn expand(cx: &mut ExtCtxt, _: syntax_pos::Span, _: &[tokenstream::TokenTree])\n           -> Box<MacResult+'static> {\n-    MacEager::items(OneVector::many(vec![\n+    MacEager::items(OneVector::from_vec(vec![\n         quote_item!(cx, struct Struct1;).unwrap(),\n         quote_item!(cx, struct Struct2;).unwrap()\n     ]))"}]}