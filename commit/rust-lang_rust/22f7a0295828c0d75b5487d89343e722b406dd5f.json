{"sha": "22f7a0295828c0d75b5487d89343e722b406dd5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZjdhMDI5NTgyOGMwZDc1YjU0ODdkODkzNDNlNzIyYjQwNmRkNWY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-02-16T10:14:35Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-17T22:07:40Z"}, "message": "Deprecate core::nonzero in favor of ptr::NonNull and num::NonZero*", "tree": {"sha": "5d265fa830e73f57fc1a5d94e5cfe563a6628330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d265fa830e73f57fc1a5d94e5cfe563a6628330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f7a0295828c0d75b5487d89343e722b406dd5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f7a0295828c0d75b5487d89343e722b406dd5f", "html_url": "https://github.com/rust-lang/rust/commit/22f7a0295828c0d75b5487d89343e722b406dd5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f7a0295828c0d75b5487d89343e722b406dd5f/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f46ce1122121849890ad51c35f0eb6ded14b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f46ce1122121849890ad51c35f0eb6ded14b6f", "html_url": "https://github.com/rust-lang/rust/commit/67f46ce1122121849890ad51c35f0eb6ded14b6f"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "59aaef9d66a0048ed822a699a811cb9621d43f85", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22f7a0295828c0d75b5487d89343e722b406dd5f/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f7a0295828c0d75b5487d89343e722b406dd5f/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=22f7a0295828c0d75b5487d89343e722b406dd5f", "patch": "@@ -10,8 +10,11 @@\n \n //! Exposes the NonZero lang item which provides optimization hints.\n #![unstable(feature = \"nonzero\",\n-            reason = \"needs an RFC to flesh out the design\",\n+            reason = \"deprecated\",\n             issue = \"27730\")]\n+#![rustc_deprecated(reason = \"use `std::ptr::NonNull` or `std::num::NonZero*` instead\",\n+                    since = \"1.26.0\")]\n+#![allow(deprecated)]\n \n use ops::CoerceUnsized;\n "}, {"sha": "84f6ab9b764987e089f7133d9225c60c10ede178", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22f7a0295828c0d75b5487d89343e722b406dd5f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f7a0295828c0d75b5487d89343e722b406dd5f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=22f7a0295828c0d75b5487d89343e722b406dd5f", "patch": "@@ -15,7 +15,7 @@\n use convert::{Infallible, TryFrom};\n use fmt;\n use intrinsics;\n-use nonzero::NonZero;\n+#[allow(deprecated)] use nonzero::NonZero;\n use ops;\n use str::FromStr;\n \n@@ -46,9 +46,11 @@ macro_rules! nonzero_integers {\n             /// assert_eq!(size_of::<Option<std::num::NonZeroU32>>(), size_of::<u32>());\n             /// ```\n             #[$stability]\n+            #[allow(deprecated)]\n             #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n             pub struct $Ty(NonZero<$Int>);\n \n+            #[allow(deprecated)]\n             impl $Ty {\n                 /// Create a non-zero without checking the value.\n                 ///"}, {"sha": "834a2ed09f77a203d9da0a3f1c7d5da7072bcadf", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22f7a0295828c0d75b5487d89343e722b406dd5f/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f7a0295828c0d75b5487d89343e722b406dd5f/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=22f7a0295828c0d75b5487d89343e722b406dd5f", "patch": "@@ -23,7 +23,7 @@ use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n use mem;\n-use nonzero::NonZero;\n+#[allow(deprecated)] use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n \n@@ -2285,6 +2285,7 @@ impl<T: ?Sized> PartialOrd for *mut T {\n #[unstable(feature = \"ptr_internals\", issue = \"0\",\n            reason = \"use NonNull instead and consider PhantomData<T> \\\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n+#[allow(deprecated)]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n@@ -2332,6 +2333,7 @@ impl<T: Sized> Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[allow(deprecated)]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n     ///\n@@ -2392,13 +2394,15 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n         Unique { pointer: NonZero::from(reference), _marker: PhantomData }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n         Unique { pointer: NonZero::from(reference), _marker: PhantomData }\n@@ -2436,7 +2440,7 @@ pub type Shared<T> = NonNull<T>;\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n pub struct NonNull<T: ?Sized> {\n-    pointer: NonZero<*const T>,\n+    #[allow(deprecated)] pointer: NonZero<*const T>,\n }\n \n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n@@ -2463,6 +2467,7 @@ impl<T: Sized> NonNull<T> {\n     }\n }\n \n+#[allow(deprecated)]\n impl<T: ?Sized> NonNull<T> {\n     /// Creates a new `NonNull`.\n     ///\n@@ -2581,13 +2586,15 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }"}]}