{"sha": "2342414f497ea6d76f91d109c28259aad5ec014c", "node_id": "C_kwDOAAsO6NoAKDIzNDI0MTRmNDk3ZWE2ZDc2ZjkxZDEwOWMyODI1OWFhZDVlYzAxNGM", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-08-29T21:35:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-29T21:35:50Z"}, "message": "Merge pull request #213 from rust-lang/fix/bitcast-wrong-size\n\nFix bitcast to a type of a different size", "tree": {"sha": "35730a40792087354c58cfae554267d071b6c125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35730a40792087354c58cfae554267d071b6c125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2342414f497ea6d76f91d109c28259aad5ec014c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDTE2CRBK7hj4Ov3rIwAAmEgIAF0ny+Xm/vZGxcaNT7Cz2HDm\n0qXUixl66aMlR572aOGhusxe4dGVqSnazrlch+HF97eDV9V3h04HOgH4F4p0lYHG\nZ496ZXjS3Mn5HP6S7yvN2THR0qbhpTJsiZrephtz4EbKP+415ip6Eac0hFj6s2vO\njS4gE+b8LjCUNGF+TP5+8GBT/PLeER0juk22Fs8erywqGr6pjeIhaXCgeki2rl+s\n1pRfup6B6BSx/BgCzh9Xua5vidISGf6AeHYHcZVKXU41a8p45B1nijcohH1DHa5z\nGyCXKohqjU0uN7TGHSwmzJa3rO5J2feBCAeV/uakGZEJpLkQp77Y5Ijl5rmHYZ0=\n=vVwe\n-----END PGP SIGNATURE-----\n", "payload": "tree 35730a40792087354c58cfae554267d071b6c125\nparent 866f9c527a2c9e5c7cbde97fc515ffcebdcbee6d\nparent 45ec5f267689ad71677abde6403c98a9fd6a3e82\nauthor antoyo <antoyo@users.noreply.github.com> 1661808950 -0400\ncommitter GitHub <noreply@github.com> 1661808950 -0400\n\nMerge pull request #213 from rust-lang/fix/bitcast-wrong-size\n\nFix bitcast to a type of a different size"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2342414f497ea6d76f91d109c28259aad5ec014c", "html_url": "https://github.com/rust-lang/rust/commit/2342414f497ea6d76f91d109c28259aad5ec014c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2342414f497ea6d76f91d109c28259aad5ec014c/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "866f9c527a2c9e5c7cbde97fc515ffcebdcbee6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/866f9c527a2c9e5c7cbde97fc515ffcebdcbee6d", "html_url": "https://github.com/rust-lang/rust/commit/866f9c527a2c9e5c7cbde97fc515ffcebdcbee6d"}, {"sha": "45ec5f267689ad71677abde6403c98a9fd6a3e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ec5f267689ad71677abde6403c98a9fd6a3e82", "html_url": "https://github.com/rust-lang/rust/commit/45ec5f267689ad71677abde6403c98a9fd6a3e82"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "d9b24b2dc3505a6ca535f4da0df0e50cfd14e543", "filename": "src/builder.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2342414f497ea6d76f91d109c28259aad5ec014c/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2342414f497ea6d76f91d109c28259aad5ec014c/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=2342414f497ea6d76f91d109c28259aad5ec014c", "patch": "@@ -1364,22 +1364,17 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n             vector_elements.push(self.context.new_rvalue_zero(mask_element_type));\n         }\n \n-        let array_type = self.context.new_array_type(None, element_type, vec_num_units as i32);\n         let result_type = self.context.new_vector_type(element_type, mask_num_units as u64);\n         let (v1, v2) =\n             if vec_num_units < mask_num_units {\n                 // NOTE: the mask needs to be the same length as the input vectors, so join the 2\n                 // vectors and create a dummy second vector.\n-                // TODO(antoyo): switch to using new_vector_access.\n-                let array = self.context.new_bitcast(None, v1, array_type);\n                 let mut elements = vec![];\n                 for i in 0..vec_num_units {\n-                    elements.push(self.context.new_array_access(None, array, self.context.new_rvalue_from_int(self.int_type, i as i32)).to_rvalue());\n+                    elements.push(self.context.new_vector_access(None, v1, self.context.new_rvalue_from_int(self.int_type, i as i32)).to_rvalue());\n                 }\n-                // TODO(antoyo): switch to using new_vector_access.\n-                let array = self.context.new_bitcast(None, v2, array_type);\n                 for i in 0..(mask_num_units - vec_num_units) {\n-                    elements.push(self.context.new_array_access(None, array, self.context.new_rvalue_from_int(self.int_type, i as i32)).to_rvalue());\n+                    elements.push(self.context.new_vector_access(None, v2, self.context.new_rvalue_from_int(self.int_type, i as i32)).to_rvalue());\n                 }\n                 let v1 = self.context.new_rvalue_from_vector(None, result_type, &elements);\n                 let zero = self.context.new_rvalue_zero(element_type);\n@@ -1399,10 +1394,8 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n             // NOTE: if padding was added, only select the number of elements of the masks to\n             // remove that padding in the result.\n             let mut elements = vec![];\n-            // TODO(antoyo): switch to using new_vector_access.\n-            let array = self.context.new_bitcast(None, result, array_type);\n             for i in 0..mask_num_units {\n-                elements.push(self.context.new_array_access(None, array, self.context.new_rvalue_from_int(self.int_type, i as i32)).to_rvalue());\n+                elements.push(self.context.new_vector_access(None, result, self.context.new_rvalue_from_int(self.int_type, i as i32)).to_rvalue());\n             }\n             self.context.new_rvalue_from_vector(None, result_type, &elements)\n         }"}]}