{"sha": "eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZjBmM2RmMTUwOWU4ZDAzMTI4OTVhZmJkYTk0Y2Y4MjFiNWY0YzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-16T18:33:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-16T18:33:45Z"}, "message": "Auto merge of #7075 - xFrednet:7054-fp-branches-sharing-code, r=camsteffen,flip1995\n\nFixing FPs for the `branches_sharing_code` lint\n\nFixes #7053\nFixes #7054\nAnd an additional CSS adjustment to support dark mode for every inline code. It currently only works in paragraphs, which was an oversight on my part :sweat_smile:. [Current Example](https://rust-lang.github.io/rust-clippy/master/index.html#blacklisted_name)\n\nThis also includes ~50 lines of doc comments and is therefor not as big as the changes would indicate. :penguin:\n\n---\n\nchangelog: none\n\nAll of these bugs were introduced in this dev version and are therefor not worth a change log entry.\n\nr? `@phansch`\ncc: `@camsteffen` since you have a pretty good overview of the `SpanlessEq` implementation :upside_down_face:", "tree": {"sha": "f7aaea2c3b5d7de559bfe6e8628554e33f546124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7aaea2c3b5d7de559bfe6e8628554e33f546124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "html_url": "https://github.com/rust-lang/rust/commit/eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28dbcd85c8a956a1d1e39066668fcf1484080949", "url": "https://api.github.com/repos/rust-lang/rust/commits/28dbcd85c8a956a1d1e39066668fcf1484080949", "html_url": "https://github.com/rust-lang/rust/commit/28dbcd85c8a956a1d1e39066668fcf1484080949"}, {"sha": "0b4af7257ddea5cf508305635fbdc4c0d1e6bdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4af7257ddea5cf508305635fbdc4c0d1e6bdd5", "html_url": "https://github.com/rust-lang/rust/commit/0b4af7257ddea5cf508305635fbdc4c0d1e6bdd5"}], "stats": {"total": 97, "additions": 69, "deletions": 28}, "files": [{"sha": "42e153909ce75b29f8264d6c4982ec732e2a435b", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::implements_trait;\n-use clippy_utils::{get_trait_def_id, if_sequence, parent_node_is_if_expr, paths, SpanlessEq};\n+use clippy_utils::{get_trait_def_id, if_sequence, is_else_clause, paths, SpanlessEq};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for ComparisonChain {\n         }\n \n         // We only care about the top-most `if` in the chain\n-        if parent_node_is_if_expr(expr, cx) {\n+        if is_else_clause(cx.tcx, expr) {\n             return;\n         }\n "}, {"sha": "f956d171bfbe0519e9d222eebd4c581aa39c6c46", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_then};\n use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, snippet, snippet_opt};\n use clippy_utils::{\n-    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, in_macro, parent_node_is_if_expr,\n+    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, in_macro, is_else_clause,\n     run_lints, search_same, ContainsName, SpanlessEq, SpanlessHash,\n };\n use if_chain::if_chain;\n@@ -188,13 +188,18 @@ fn lint_same_then_else<'tcx>(\n     expr: &'tcx Expr<'_>,\n ) {\n     // We only lint ifs with multiple blocks\n-    if blocks.len() < 2 || parent_node_is_if_expr(expr, cx) {\n+    if blocks.len() < 2 || is_else_clause(cx.tcx, expr) {\n         return;\n     }\n \n     // Check if each block has shared code\n     let has_expr = blocks[0].expr.is_some();\n-    let (start_eq, mut end_eq, expr_eq) = scan_block_for_eq(cx, blocks);\n+\n+    let (start_eq, mut end_eq, expr_eq) = if let Some(block_eq) = scan_block_for_eq(cx, blocks) {\n+        (block_eq.start_eq, block_eq.end_eq, block_eq.expr_eq)\n+    } else {\n+        return;\n+    };\n \n     // BRANCHES_SHARING_CODE prerequisites\n     if has_conditional_else || (start_eq == 0 && end_eq == 0 && (has_expr && !expr_eq)) {\n@@ -290,7 +295,19 @@ fn lint_same_then_else<'tcx>(\n     }\n }\n \n-fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> (usize, usize, bool) {\n+struct BlockEqual {\n+    /// The amount statements that are equal from the start\n+    start_eq: usize,\n+    /// The amount statements that are equal from the end\n+    end_eq: usize,\n+    ///  An indication if the block expressions are the same. This will also be true if both are\n+    /// `None`\n+    expr_eq: bool,\n+}\n+\n+/// This function can also trigger the `IF_SAME_THEN_ELSE` in which case it'll return `None` to\n+/// abort any further processing and avoid duplicate lint triggers.\n+fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> Option<BlockEqual> {\n     let mut start_eq = usize::MAX;\n     let mut end_eq = usize::MAX;\n     let mut expr_eq = true;\n@@ -332,7 +349,7 @@ fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> (usize,\n                     \"same as this\",\n                 );\n \n-                return (0, 0, false);\n+                return None;\n             }\n         }\n \n@@ -352,7 +369,11 @@ fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> (usize,\n         end_eq = min_block_size - start_eq;\n     }\n \n-    (start_eq, end_eq, expr_eq)\n+    Some(BlockEqual {\n+        start_eq,\n+        end_eq,\n+        expr_eq,\n+    })\n }\n \n fn check_for_warn_of_moved_symbol("}, {"sha": "85c95f1151f84b53db10ffdacc68cc98cdd92783", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::{is_lang_ctor, meets_msrv, parent_node_is_if_expr};\n+use clippy_utils::{is_else_clause, is_lang_ctor, meets_msrv};\n use if_chain::if_chain;\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_hir::{Expr, ExprKind};\n@@ -68,7 +68,7 @@ impl LateLintPass<'_> for IfThenSomeElseNone {\n         }\n \n         // We only care about the top-most `if` in the chain\n-        if parent_node_is_if_expr(expr, cx) {\n+        if is_else_clause(cx.tcx, expr) {\n             return;\n         }\n "}, {"sha": "dd4581986377f54b02e6034a3a1bf23e487af971", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "patch": "@@ -5,7 +5,7 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{is_expn_of, parent_node_is_if_expr};\n+use clippy_utils::{is_else_clause, is_expn_of};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n@@ -81,7 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n                     snip = snip.make_return();\n                 }\n \n-                if parent_node_is_if_expr(e, cx) {\n+                if is_else_clause(cx.tcx, e) {\n                     snip = snip.blockify()\n                 }\n "}, {"sha": "07ae6e924e28b7daee63fe73710532859c40b5e5", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "patch": "@@ -96,6 +96,16 @@ impl HirEqInterExpr<'_, '_, '_> {\n     pub fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n             (&StmtKind::Local(ref l), &StmtKind::Local(ref r)) => {\n+                // This additional check ensures that the type of the locals are equivalent even if the init\n+                // expression or type have some inferred parts.\n+                if let Some(typeck) = self.inner.maybe_typeck_results {\n+                    let l_ty = typeck.pat_ty(&l.pat);\n+                    let r_ty = typeck.pat_ty(&r.pat);\n+                    if !rustc_middle::ty::TyS::same_type(l_ty, r_ty) {\n+                        return false;\n+                    }\n+                }\n+\n                 // eq_pat adds the HirIds to the locals map. We therefor call it last to make sure that\n                 // these only get added if the init and type is equal.\n                 both(&l.init, &r.init, |l, r| self.eq_expr(l, r))"}, {"sha": "b7017411927daa5cf81f257296769f979f9e4fcc", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "patch": "@@ -1300,21 +1300,6 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n     (conds, blocks)\n }\n \n-/// This function returns true if the given expression is the `else` or `if else` part of an if\n-/// statement\n-pub fn parent_node_is_if_expr(expr: &Expr<'_>, cx: &LateContext<'_>) -> bool {\n-    let map = cx.tcx.hir();\n-    let parent_id = map.get_parent_node(expr.hir_id);\n-    let parent_node = map.get(parent_id);\n-    matches!(\n-        parent_node,\n-        Node::Expr(Expr {\n-            kind: ExprKind::If(_, _, _),\n-            ..\n-        })\n-    )\n-}\n-\n // Finds the `#[must_use]` attribute, if any\n pub fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n     attrs.iter().find(|a| a.has_name(sym::must_use))"}, {"sha": "ce2040bdeb82d934e2bbe8c7fbd7bbb63d959835", "filename": "tests/ui/branches_sharing_code/shared_at_bottom.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs?ref=eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "patch": "@@ -206,4 +206,18 @@ fn fp_test() {\n     }\n }\n \n+fn fp_if_let_issue7054() {\n+    // This shouldn't trigger the lint\n+    let string;\n+    let _x = if let true = true {\n+        \"\"\n+    } else if true {\n+        string = \"x\".to_owned();\n+        &string\n+    } else {\n+        string = \"y\".to_owned();\n+        &string\n+    };\n+}\n+\n fn main() {}"}, {"sha": "51a46481399b4e6a5b6af13ec2384fbe46eb263e", "filename": "tests/ui/branches_sharing_code/shared_at_top.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.rs?ref=eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "patch": "@@ -100,4 +100,15 @@ fn check_if_same_than_else_mask() {\n     }\n }\n \n+#[allow(clippy::vec_init_then_push)]\n+fn pf_local_with_inferred_type_issue7053() {\n+    if true {\n+        let mut v = Vec::new();\n+        v.push(0);\n+    } else {\n+        let mut v = Vec::new();\n+        v.push(\"\");\n+    };\n+}\n+\n fn main() {}"}, {"sha": "27ecb532dd00e97bbaa2672049c03e64af9e5ef3", "filename": "util/gh-pages/index.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaf0f3df1509e8d0312895afbda94cf821b5f4c2/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "patch": "@@ -133,7 +133,7 @@\n             opacity: 30%;\n         }\n \n-        p > code {\n+        :not(pre) > code {\n             color: var(--inline-code-color);\n             background-color: var(--inline-code-bg);\n         }"}]}