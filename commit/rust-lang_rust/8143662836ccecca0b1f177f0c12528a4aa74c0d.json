{"sha": "8143662836ccecca0b1f177f0c12528a4aa74c0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNDM2NjI4MzZjY2VjY2EwYjFmMTc3ZjBjMTI1MjhhNGFhNzRjMGQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-12-29T05:06:22Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-12-30T07:41:09Z"}, "message": "Start passing around &mut ExtCtxt", "tree": {"sha": "20f2ad5f627233c97d5c299cc3a6abb4fdedf62c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f2ad5f627233c97d5c299cc3a6abb4fdedf62c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8143662836ccecca0b1f177f0c12528a4aa74c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8143662836ccecca0b1f177f0c12528a4aa74c0d", "html_url": "https://github.com/rust-lang/rust/commit/8143662836ccecca0b1f177f0c12528a4aa74c0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8143662836ccecca0b1f177f0c12528a4aa74c0d/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3965dddf49aa30a69614e9f42a73960f1be4790e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3965dddf49aa30a69614e9f42a73960f1be4790e", "html_url": "https://github.com/rust-lang/rust/commit/3965dddf49aa30a69614e9f42a73960f1be4790e"}], "stats": {"total": 97, "additions": 49, "deletions": 48}, "files": [{"sha": "cd7953aac20674727a9b6e8d0c55dc198bee49bb", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -37,7 +37,7 @@ fn next_state(s: State) -> Option<State> {\n     }\n }\n \n-pub fn expand_asm(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                -> base::MacResult {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),\n                                        cx.cfg(),"}, {"sha": "b5f8329a0b24f84c6b557a485ba3681afae932ed", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -45,15 +45,15 @@ pub struct SyntaxExpanderTT {\n \n pub trait SyntaxExpanderTTTrait {\n     fn expand(&self,\n-              ecx: &ExtCtxt,\n+              ecx: &mut ExtCtxt,\n               span: Span,\n               token_tree: &[ast::token_tree],\n               context: ast::SyntaxContext)\n               -> MacResult;\n }\n \n pub type SyntaxExpanderTTFunNoCtxt =\n-    fn(ecx: &ExtCtxt, span: codemap::Span, token_tree: &[ast::token_tree])\n+    fn(ecx: &mut ExtCtxt, span: codemap::Span, token_tree: &[ast::token_tree])\n        -> MacResult;\n \n enum SyntaxExpanderTTExpander {\n@@ -62,7 +62,7 @@ enum SyntaxExpanderTTExpander {\n \n impl SyntaxExpanderTTTrait for SyntaxExpanderTT {\n     fn expand(&self,\n-              ecx: &ExtCtxt,\n+              ecx: &mut ExtCtxt,\n               span: Span,\n               token_tree: &[ast::token_tree],\n               _: ast::SyntaxContext)\n@@ -87,7 +87,7 @@ pub struct SyntaxExpanderTTItem {\n \n pub trait SyntaxExpanderTTItemTrait {\n     fn expand(&self,\n-              cx: &ExtCtxt,\n+              cx: &mut ExtCtxt,\n               sp: Span,\n               ident: ast::Ident,\n               token_tree: ~[ast::token_tree],\n@@ -97,7 +97,7 @@ pub trait SyntaxExpanderTTItemTrait {\n \n impl SyntaxExpanderTTItemTrait for SyntaxExpanderTTItem {\n     fn expand(&self,\n-              cx: &ExtCtxt,\n+              cx: &mut ExtCtxt,\n               sp: Span,\n               ident: ast::Ident,\n               token_tree: ~[ast::token_tree],\n@@ -115,11 +115,11 @@ impl SyntaxExpanderTTItemTrait for SyntaxExpanderTTItem {\n }\n \n pub type SyntaxExpanderTTItemFun =\n-    fn(&ExtCtxt, Span, ast::Ident, ~[ast::token_tree], ast::SyntaxContext)\n+    fn(&mut ExtCtxt, Span, ast::Ident, ~[ast::token_tree], ast::SyntaxContext)\n        -> MacResult;\n \n pub type SyntaxExpanderTTItemFunNoCtxt =\n-    fn(&ExtCtxt, Span, ast::Ident, ~[ast::token_tree]) -> MacResult;\n+    fn(&mut ExtCtxt, Span, ast::Ident, ~[ast::token_tree]) -> MacResult;\n \n pub trait AnyMacro {\n     fn make_expr(&self) -> @ast::Expr;\n@@ -320,7 +320,7 @@ impl ExtCtxt {\n         }\n     }\n \n-    pub fn expand_expr(&self, mut e: @ast::Expr) -> @ast::Expr {\n+    pub fn expand_expr(&mut self, mut e: @ast::Expr) -> @ast::Expr {\n         loop {\n             match e.node {\n                 ast::ExprMac(..) => {"}, {"sha": "e5f20950412ac8045d4de4c96bd97082d01294b8", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -236,7 +236,7 @@ pub trait AstBuilder {\n                      vis: ast::visibility, path: ~[ast::Ident]) -> ast::view_item;\n }\n \n-impl<'a> AstBuilder for &'a ExtCtxt {\n+impl AstBuilder for ExtCtxt {\n     fn path(&self, span: Span, strs: ~[ast::Ident]) -> ast::Path {\n         self.path_all(span, false, strs, opt_vec::Empty, ~[])\n     }\n@@ -686,12 +686,12 @@ impl<'a> AstBuilder for &'a ExtCtxt {\n     }\n     fn lambda0(&self, _span: Span, blk: P<ast::Block>) -> @ast::Expr {\n         let blk_e = self.expr(blk.span, ast::ExprBlock(blk));\n-        quote_expr!(*self, || $blk_e )\n+        quote_expr!(self, || $blk_e )\n     }\n \n     fn lambda1(&self, _span: Span, blk: P<ast::Block>, ident: ast::Ident) -> @ast::Expr {\n         let blk_e = self.expr(blk.span, ast::ExprBlock(blk));\n-        quote_expr!(*self, |$ident| $blk_e )\n+        quote_expr!(self, |$ident| $blk_e )\n     }\n \n     fn lambda_expr(&self, span: Span, ids: ~[ast::Ident], expr: @ast::Expr) -> @ast::Expr {"}, {"sha": "1878f6f3c3cbc93e7878b5e8db560e7b677f3b9a", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -18,7 +18,7 @@ use ext::build::AstBuilder;\n \n use std::char;\n \n-pub fn expand_syntax_ext(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n+pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n     // Gather all argument expressions\n     let exprs = get_exprs_from_tts(cx, sp, tts);\n     let mut bytes = ~[];"}, {"sha": "d9fbc33153a609c5114f3e9c649c3263c3f6985a", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -25,7 +25,7 @@ use parse;\n use parse::token;\n use parse::attr::parser_attr;\n \n-pub fn expand_cfg(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n+pub fn expand_cfg(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n     let p = parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(), tts.to_owned());\n \n     let mut cfgs = ~[];"}, {"sha": "d8be7dedef2f2851302a457e98482ed076c93f9b", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -15,7 +15,7 @@ use codemap;\n use ext::base;\n use ext::build::AstBuilder;\n \n-pub fn expand_syntax_ext(cx: &base::ExtCtxt,\n+pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                          sp: codemap::Span,\n                          tts: &[ast::token_tree]) -> base::MacResult {\n     let es = base::get_exprs_from_tts(cx, sp, tts);"}, {"sha": "0cb3e781c26ef91dd805b281b089c237672373fb", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -16,7 +16,7 @@ use opt_vec;\n use parse::token;\n use parse::token::{str_to_ident};\n \n-pub fn expand_syntax_ext(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let mut res_str = ~\"\";\n     for (i, e) in tts.iter().enumerate() {"}, {"sha": "cebd7aac4e3ea7c16755a095a3c88239cca34345", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -22,7 +22,7 @@ use ext::build::AstBuilder;\n \n use std::os;\n \n-pub fn expand_option_env(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_option_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let var = get_single_str_from_tts(cx, sp, tts, \"option_env!\");\n \n@@ -33,7 +33,7 @@ pub fn expand_option_env(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     MRExpr(e)\n }\n \n-pub fn expand_env(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let exprs = get_exprs_from_tts(cx, sp, tts);\n "}, {"sha": "eb07353cda3d174c20a21fcad42c397c4ae6db35", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -932,7 +932,7 @@ pub fn inject_std_macros(parse_sess: @mut parse::ParseSess,\n \n pub struct MacroExpander<'a> {\n     extsbox: @mut SyntaxEnv,\n-    cx: &'a ExtCtxt,\n+    cx: &'a mut ExtCtxt,\n }\n \n impl<'a> ast_fold for MacroExpander<'a> {\n@@ -970,10 +970,10 @@ pub fn expand_crate(parse_sess: @mut parse::ParseSess,\n     // exts table through the fold, but that would require updating\n     // every method/element of AstFoldFns in fold.rs.\n     let extsbox = syntax_expander_table();\n-    let cx = ExtCtxt::new(parse_sess, cfg.clone());\n+    let mut cx = ExtCtxt::new(parse_sess, cfg.clone());\n     let mut expander = MacroExpander {\n         extsbox: @mut extsbox,\n-        cx: &cx,\n+        cx: &mut cx,\n     };\n \n     let ret = expander.fold_crate(c);"}, {"sha": "34a8236905b0aa3c8150856773f612c93b8b49a5", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -15,7 +15,7 @@ use codemap::Span;\n use ext::base;\n use ext::build::AstBuilder;\n \n-pub fn expand_syntax_ext(ecx: &base::ExtCtxt, sp: Span,\n+pub fn expand_syntax_ext(ecx: &mut base::ExtCtxt, sp: Span,\n                          _tts: &[ast::token_tree]) -> base::MacResult {\n     ecx.span_err(sp, \"`fmt!` is deprecated, use `format!` instead\");\n     ecx.parse_sess.span_diagnostic.span_note(sp,"}, {"sha": "3bfab7da9b46d50d949b3a9ffbd45ab2976d48a9", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -29,7 +29,7 @@ enum ArgumentType {\n }\n \n struct Context<'a> {\n-    ecx: &'a ExtCtxt,\n+    ecx: &'a mut ExtCtxt,\n     fmtsp: Span,\n \n     // Parsed argument expressions and the types that we've found so far for\n@@ -722,7 +722,7 @@ impl<'a> Context<'a> {\n     }\n }\n \n-pub fn expand_args(ecx: &ExtCtxt, sp: Span,\n+pub fn expand_args(ecx: &mut ExtCtxt, sp: Span,\n                    tts: &[ast::token_tree]) -> base::MacResult {\n     let mut cx = Context {\n         ecx: ecx,\n@@ -739,19 +739,20 @@ pub fn expand_args(ecx: &ExtCtxt, sp: Span,\n     };\n     let (extra, efmt) = match cx.parse_args(sp, tts) {\n         (extra, Some(e)) => (extra, e),\n-        (_, None) => { return MRExpr(ecx.expr_uint(sp, 2)); }\n+        (_, None) => { return MRExpr(cx.ecx.expr_uint(sp, 2)); }\n     };\n     cx.fmtsp = efmt.span;\n     // Be sure to recursively expand macros just in case the format string uses\n     // a macro to build the format expression.\n-    let (fmt, _) = expr_to_str(ecx, ecx.expand_expr(efmt),\n+    let expr = cx.ecx.expand_expr(efmt);\n+    let (fmt, _) = expr_to_str(cx.ecx, expr,\n                                \"format argument must be a string literal.\");\n \n     let mut err = false;\n     parse::parse_error::cond.trap(|m| {\n         if !err {\n             err = true;\n-            ecx.span_err(efmt.span, m);\n+            cx.ecx.span_err(efmt.span, m);\n         }\n     }).inside(|| {\n         for piece in parse::Parser::new(fmt) {\n@@ -767,12 +768,12 @@ pub fn expand_args(ecx: &ExtCtxt, sp: Span,\n     // Make sure that all arguments were used and all arguments have types.\n     for (i, ty) in cx.arg_types.iter().enumerate() {\n         if ty.is_none() {\n-            ecx.span_err(cx.args[i].span, \"argument never used\");\n+            cx.ecx.span_err(cx.args[i].span, \"argument never used\");\n         }\n     }\n     for (name, e) in cx.names.iter() {\n         if !cx.name_types.contains_key(name) {\n-            ecx.span_err(e.span, \"named argument never used\");\n+            cx.ecx.span_err(e.span, \"named argument never used\");\n         }\n     }\n "}, {"sha": "22b04501cfbec2b5fe444d6a63f1e0f2b856091e", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -15,7 +15,7 @@ use ext::base;\n use print;\n use parse::token::{get_ident_interner};\n \n-pub fn expand_syntax_ext(cx: &ExtCtxt,\n+pub fn expand_syntax_ext(cx: &mut ExtCtxt,\n                          sp: codemap::Span,\n                          tt: &[ast::token_tree])\n                       -> base::MacResult {"}, {"sha": "330d33d6fc6c4436d4c84f218fda9e7e997faab4", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -289,22 +289,22 @@ pub mod rt {\n \n }\n \n-pub fn expand_quote_tokens(cx: &ExtCtxt,\n+pub fn expand_quote_tokens(cx: &mut ExtCtxt,\n                            sp: Span,\n                            tts: &[ast::token_tree]) -> base::MacResult {\n     let (cx_expr, expr) = expand_tts(cx, sp, tts);\n     let expanded = expand_wrapper(cx, sp, cx_expr, expr);\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_expr(cx: &ExtCtxt,\n+pub fn expand_quote_expr(cx: &mut ExtCtxt,\n                          sp: Span,\n                          tts: &[ast::token_tree]) -> base::MacResult {\n     let expanded = expand_parse_call(cx, sp, \"parse_expr\", ~[], tts);\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_item(cx: &ExtCtxt,\n+pub fn expand_quote_item(cx: &mut ExtCtxt,\n                          sp: Span,\n                          tts: &[ast::token_tree]) -> base::MacResult {\n     let e_attrs = cx.expr_vec_uniq(sp, ~[]);\n@@ -313,7 +313,7 @@ pub fn expand_quote_item(cx: &ExtCtxt,\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_pat(cx: &ExtCtxt,\n+pub fn expand_quote_pat(cx: &mut ExtCtxt,\n                         sp: Span,\n                         tts: &[ast::token_tree]) -> base::MacResult {\n     let e_refutable = cx.expr_lit(sp, ast::lit_bool(true));\n@@ -322,7 +322,7 @@ pub fn expand_quote_pat(cx: &ExtCtxt,\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_ty(cx: &ExtCtxt,\n+pub fn expand_quote_ty(cx: &mut ExtCtxt,\n                        sp: Span,\n                        tts: &[ast::token_tree]) -> base::MacResult {\n     let e_param_colons = cx.expr_lit(sp, ast::lit_bool(false));\n@@ -331,7 +331,7 @@ pub fn expand_quote_ty(cx: &ExtCtxt,\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_stmt(cx: &ExtCtxt,\n+pub fn expand_quote_stmt(cx: &mut ExtCtxt,\n                          sp: Span,\n                          tts: &[ast::token_tree]) -> base::MacResult {\n     let e_attrs = cx.expr_vec_uniq(sp, ~[]);"}, {"sha": "ccf4bf2acd6f312e84190a7f36db379657467083", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -28,7 +28,7 @@ use std::str;\n // a given file into the current one.\n \n /* line!(): expands to the current line number */\n-pub fn expand_line(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_line(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"line!\");\n \n@@ -39,7 +39,7 @@ pub fn expand_line(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n }\n \n /* col!(): expands to the current column number */\n-pub fn expand_col(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_col(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"col!\");\n \n@@ -51,7 +51,7 @@ pub fn expand_col(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n /* file!(): expands to the current filename */\n /* The filemap (`loc.file`) contains a bunch more information we could spit\n  * out if we wanted. */\n-pub fn expand_file(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_file(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"file!\");\n \n@@ -61,13 +61,13 @@ pub fn expand_file(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     base::MRExpr(cx.expr_str(topmost.call_site, filename))\n }\n \n-pub fn expand_stringify(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_stringify(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let s = pprust::tts_to_str(tts, get_ident_interner());\n     base::MRExpr(cx.expr_str(sp, s.to_managed()))\n }\n \n-pub fn expand_mod(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_mod(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"module_path!\");\n     base::MRExpr(cx.expr_str(sp,\n@@ -77,7 +77,7 @@ pub fn expand_mod(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n // include! : parse the given file as an expr\n // This is generally a bad idea because it's going to behave\n // unhygienically.\n-pub fn expand_include(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_include(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let file = get_single_str_from_tts(cx, sp, tts, \"include!\");\n     // The file will be added to the code map by the parser\n@@ -88,7 +88,7 @@ pub fn expand_include(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n }\n \n // include_str! : read the given file, insert it as a literal string expr\n-pub fn expand_include_str(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let file = get_single_str_from_tts(cx, sp, tts, \"include_str!\");\n     let file = res_rel_file(cx, sp, &Path::new(file));\n@@ -120,7 +120,7 @@ pub fn expand_include_str(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     }\n }\n \n-pub fn expand_include_bin(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_include_bin(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n         -> base::MacResult\n {\n     use std::at_vec;\n@@ -167,7 +167,7 @@ fn topmost_expn_info(expn_info: @codemap::ExpnInfo) -> @codemap::ExpnInfo {\n \n // resolve a file-system path to an absolute file-system path (if it\n // isn't already)\n-fn res_rel_file(cx: &ExtCtxt, sp: codemap::Span, arg: &Path) -> Path {\n+fn res_rel_file(cx: &mut ExtCtxt, sp: codemap::Span, arg: &Path) -> Path {\n     // NB: relative paths are resolved relative to the compilation unit\n     if !arg.is_absolute() {\n         let mut cu = Path::new(cx.codemap().span_to_filename(sp));"}, {"sha": "d9b1c2bddbca82df9a90b75ecf0e8cd86d38ab3a", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -16,7 +16,7 @@ use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n use parse::token::keywords;\n \n-pub fn expand_trace_macros(cx: &ExtCtxt,\n+pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                            sp: Span,\n                            tt: &[ast::token_tree])\n                         -> base::MacResult {"}, {"sha": "ae9bbdadf2cbd9ed4dc9ce3cd23f6c5874156eb2", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8143662836ccecca0b1f177f0c12528a4aa74c0d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8143662836ccecca0b1f177f0c12528a4aa74c0d", "patch": "@@ -83,7 +83,7 @@ struct MacroRulesSyntaxExpanderTTFun {\n \n impl SyntaxExpanderTTTrait for MacroRulesSyntaxExpanderTTFun {\n     fn expand(&self,\n-              cx: &ExtCtxt,\n+              cx: &mut ExtCtxt,\n               sp: Span,\n               arg: &[ast::token_tree],\n               _: ast::SyntaxContext)\n@@ -168,7 +168,7 @@ fn generic_extension(cx: &ExtCtxt,\n // this procedure performs the expansion of the\n // macro_rules! macro. It parses the RHS and adds\n // an extension to the current context.\n-pub fn add_new_extension(cx: &ExtCtxt,\n+pub fn add_new_extension(cx: &mut ExtCtxt,\n                          sp: Span,\n                          name: Ident,\n                          arg: ~[ast::token_tree],"}]}