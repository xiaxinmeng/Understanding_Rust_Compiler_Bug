{"sha": "af1e3633f734930a50000cc424fbcdc6629885c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMWUzNjMzZjczNDkzMGE1MDAwMGNjNDI0ZmJjZGM2NjI5ODg1YzM=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-08-26T21:52:20Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-09-19T23:12:02Z"}, "message": "Set sift=true only when PeekMut yields a mutable reference", "tree": {"sha": "51c4d7066cf74cb026273cdc8b19c3fda4797950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51c4d7066cf74cb026273cdc8b19c3fda4797950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af1e3633f734930a50000cc424fbcdc6629885c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af1e3633f734930a50000cc424fbcdc6629885c3", "html_url": "https://github.com/rust-lang/rust/commit/af1e3633f734930a50000cc424fbcdc6629885c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af1e3633f734930a50000cc424fbcdc6629885c3/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "924cd135b6ab0fe48dae26d9ae30eaadebcd066d", "url": "https://api.github.com/repos/rust-lang/rust/commits/924cd135b6ab0fe48dae26d9ae30eaadebcd066d", "html_url": "https://github.com/rust-lang/rust/commit/924cd135b6ab0fe48dae26d9ae30eaadebcd066d"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "e3b738a70c88882e542fd04e4aaec66b995293f4", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af1e3633f734930a50000cc424fbcdc6629885c3/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1e3633f734930a50000cc424fbcdc6629885c3/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=af1e3633f734930a50000cc424fbcdc6629885c3", "patch": "@@ -293,6 +293,7 @@ impl<T: Ord> Deref for PeekMut<'_, T> {\n impl<T: Ord> DerefMut for PeekMut<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         debug_assert!(!self.heap.is_empty());\n+        self.sift = true;\n         // SAFE: PeekMut is only instantiated for non-empty heaps\n         unsafe { self.heap.data.get_unchecked_mut(0) }\n     }\n@@ -401,7 +402,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// Cost is *O*(1) in the worst case.\n     #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n     pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T>> {\n-        if self.is_empty() { None } else { Some(PeekMut { heap: self, sift: true }) }\n+        if self.is_empty() { None } else { Some(PeekMut { heap: self, sift: false }) }\n     }\n \n     /// Removes the greatest item from the binary heap and returns it, or `None` if it"}]}