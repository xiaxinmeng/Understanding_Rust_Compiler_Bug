{"sha": "e7497a8ccb8885823e413f4e3a54412812b60528", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NDk3YThjY2I4ODg1ODIzZTQxM2Y0ZTNhNTQ0MTI4MTJiNjA1Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T06:42:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T06:42:51Z"}, "message": "Auto merge of #69793 - estebank:predicate-obligations-4, r=nikomatsakis\n\n Maintain chain of derived obligations\n\nWhen evaluating the derived obligations from super traits, maintain a\nreference to the original obligation in order to give more actionable\ncontext in the output.\n\nContinuation (and built on) #69745, subset of #69709.\n\nr? @eddyb", "tree": {"sha": "f69613df3cbbb3e6972e9cee0b6efabc9e82d922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f69613df3cbbb3e6972e9cee0b6efabc9e82d922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7497a8ccb8885823e413f4e3a54412812b60528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7497a8ccb8885823e413f4e3a54412812b60528", "html_url": "https://github.com/rust-lang/rust/commit/e7497a8ccb8885823e413f4e3a54412812b60528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7497a8ccb8885823e413f4e3a54412812b60528/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e52b1e82472e4890202082a0482b178f9d6a16", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e52b1e82472e4890202082a0482b178f9d6a16", "html_url": "https://github.com/rust-lang/rust/commit/a0e52b1e82472e4890202082a0482b178f9d6a16"}, {"sha": "d9a5419ef4f0af07cbf62a5a4a6b002b9d6bcabd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a5419ef4f0af07cbf62a5a4a6b002b9d6bcabd", "html_url": "https://github.com/rust-lang/rust/commit/d9a5419ef4f0af07cbf62a5a4a6b002b9d6bcabd"}], "stats": {"total": 600, "additions": 287, "deletions": 313}, "files": [{"sha": "d22a4ac298efeff2e8a8926f7ba1ea59f89dba9f", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -191,6 +191,8 @@ pub enum ObligationCauseCode<'tcx> {\n \n     ImplDerivedObligation(DerivedObligationCause<'tcx>),\n \n+    DerivedObligation(DerivedObligationCause<'tcx>),\n+\n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplMethodObligation {\n         item_name: ast::Name,\n@@ -257,28 +259,22 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// #[feature(trivial_bounds)] is not enabled\n     TrivialBound,\n-\n-    AssocTypeBound(Box<AssocTypeBoundData>),\n }\n \n impl ObligationCauseCode<'_> {\n     // Return the base obligation, ignoring derived obligations.\n     pub fn peel_derives(&self) -> &Self {\n         let mut base_cause = self;\n-        while let BuiltinDerivedObligation(cause) | ImplDerivedObligation(cause) = base_cause {\n+        while let BuiltinDerivedObligation(cause)\n+        | ImplDerivedObligation(cause)\n+        | DerivedObligation(cause) = base_cause\n+        {\n             base_cause = &cause.parent_code;\n         }\n         base_cause\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct AssocTypeBoundData {\n-    pub impl_span: Option<Span>,\n-    pub original: Span,\n-    pub bounds: Vec<Span>,\n-}\n-\n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(ObligationCauseCode<'_>, 32);"}, {"sha": "5831cb3859f81773f85f58496157c23d3cf8bcd7", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -456,6 +456,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::ImplDerivedObligation(ref cause) => {\n                 tcx.lift(cause).map(super::ImplDerivedObligation)\n             }\n+            super::DerivedObligation(ref cause) => tcx.lift(cause).map(super::DerivedObligation),\n             super::CompareImplMethodObligation {\n                 item_name,\n                 impl_item_def_id,\n@@ -501,7 +502,6 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::MethodReceiver => Some(super::MethodReceiver),\n             super::BlockTailExpression(id) => Some(super::BlockTailExpression(id)),\n             super::TrivialBound => Some(super::TrivialBound),\n-            super::AssocTypeBound(ref data) => Some(super::AssocTypeBound(data.clone())),\n         }\n     }\n }"}, {"sha": "e9f55c24256c718b8143bf1cc08abfd0a7236433", "filename": "src/librustc_trait_selection/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -134,7 +134,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         match obligation.cause.code {\n             ObligationCauseCode::BuiltinDerivedObligation(..)\n-            | ObligationCauseCode::ImplDerivedObligation(..) => {}\n+            | ObligationCauseCode::ImplDerivedObligation(..)\n+            | ObligationCauseCode::DerivedObligation(..) => {}\n             _ => {\n                 // this is a \"direct\", user-specified, rather than derived,\n                 // obligation."}, {"sha": "330ae49e628d8eadbf9e33b5a168f7feaca9bfd3", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1135,7 +1135,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         while let Some(code) = next_code {\n             debug!(\"maybe_note_obligation_cause_for_async_await: code={:?}\", code);\n             match code {\n-                ObligationCauseCode::BuiltinDerivedObligation(derived_obligation)\n+                ObligationCauseCode::DerivedObligation(derived_obligation)\n+                | ObligationCauseCode::BuiltinDerivedObligation(derived_obligation)\n                 | ObligationCauseCode::ImplDerivedObligation(derived_obligation) => {\n                     let ty = derived_obligation.parent_trait_ref.self_ty();\n                     debug!(\n@@ -1531,14 +1532,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let msg = format!(\"required by this bound in `{}`\", item_name);\n                 if let Some(ident) = tcx.opt_item_name(item_def_id) {\n-                    let sm = self.tcx.sess.source_map();\n+                    let sm = tcx.sess.source_map();\n                     let same_line =\n                         match (sm.lookup_line(ident.span.hi()), sm.lookup_line(span.lo())) {\n                             (Ok(l), Ok(r)) => l.line == r.line,\n                             _ => true,\n                         };\n                     if !ident.span.overlaps(span) && !same_line {\n-                        err.span_label(ident.span, \"\");\n+                        err.span_label(ident.span, \"required by a bound in this\");\n                     }\n                 }\n                 if span != DUMMY_SP {\n@@ -1661,6 +1662,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     obligated_types,\n                 );\n             }\n+            ObligationCauseCode::DerivedObligation(ref data) => {\n+                let parent_trait_ref = self.resolve_vars_if_possible(&data.parent_trait_ref);\n+                let parent_predicate = parent_trait_ref.without_const().to_predicate();\n+                self.note_obligation_cause_code(\n+                    err,\n+                    &parent_predicate,\n+                    &data.parent_code,\n+                    obligated_types,\n+                );\n+            }\n             ObligationCauseCode::CompareImplMethodObligation { .. } => {\n                 err.note(&format!(\n                     \"the requirement `{}` appears on the impl method \\\n@@ -1684,15 +1695,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.help(\"add `#![feature(trivial_bounds)]` to the crate attributes to enable\");\n                 }\n             }\n-            ObligationCauseCode::AssocTypeBound(ref data) => {\n-                err.span_label(data.original, \"associated type defined here\");\n-                if let Some(sp) = data.impl_span {\n-                    err.span_label(sp, \"in this `impl` item\");\n-                }\n-                for sp in &data.bounds {\n-                    err.span_label(*sp, \"restricted in this bound\");\n-                }\n-            }\n         }\n     }\n "}, {"sha": "f6953971ef5bcbbc74e618caa43caedd597f5585", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 51, "deletions": 170, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,13 +1,13 @@\n use crate::infer::InferCtxt;\n use crate::opaque_types::required_region_bounds;\n-use crate::traits::{self, AssocTypeBoundData};\n+use crate::traits;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n-use rustc_span::symbol::{kw, Ident};\n use rustc_span::Span;\n+use std::rc::Rc;\n \n /// Returns the set of obligations needed to make `ty` well-formed.\n /// If `ty` contains unresolved inference variables, this may include\n@@ -142,137 +142,57 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n     pred: &ty::Predicate<'_>,\n     mut trait_assoc_items: impl Iterator<Item = ty::AssocItem>,\n ) {\n-    let trait_item =\n-        tcx.hir().as_local_hir_id(trait_ref.def_id).and_then(|trait_id| tcx.hir().find(trait_id));\n-    let (trait_name, trait_generics) = match trait_item {\n-        Some(hir::Node::Item(hir::Item {\n-            ident,\n-            kind: hir::ItemKind::Trait(.., generics, _, _),\n-            ..\n-        }))\n-        | Some(hir::Node::Item(hir::Item {\n-            ident,\n-            kind: hir::ItemKind::TraitAlias(generics, _),\n-            ..\n-        })) => (Some(ident), Some(generics)),\n-        _ => (None, None),\n+    debug!(\n+        \"extended_cause_with_original_assoc_item_obligation {:?} {:?} {:?} {:?}\",\n+        trait_ref, item, cause, pred\n+    );\n+    let items = match item {\n+        Some(hir::Item { kind: hir::ItemKind::Impl { items, .. }, .. }) => items,\n+        _ => return,\n     };\n-\n-    let item_span = item.map(|i| tcx.sess.source_map().guess_head_span(i.span));\n+    let fix_span =\n+        |impl_item_ref: &hir::ImplItemRef<'_>| match tcx.hir().impl_item(impl_item_ref.id).kind {\n+            hir::ImplItemKind::Const(ty, _) | hir::ImplItemKind::TyAlias(ty) => ty.span,\n+            _ => impl_item_ref.span,\n+        };\n     match pred {\n         ty::Predicate::Projection(proj) => {\n             // The obligation comes not from the current `impl` nor the `trait` being\n             // implemented, but rather from a \"second order\" obligation, like in\n-            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs`:\n-            //\n-            //   error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n-            //     --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n-            //      |\n-            //   LL |     type Ok;\n-            //      |          -- associated type defined here\n-            //   ...\n-            //   LL | impl Bar for Foo {\n-            //      | ---------------- in this `impl` item\n-            //   LL |     type Ok = ();\n-            //      |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n-            //      |\n-            //      = note: expected type `u32`\n-            //                 found type `()`\n-            //\n-            // FIXME: we would want to point a span to all places that contributed to this\n-            // obligation. In the case above, it should be closer to:\n-            //\n-            //   error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n-            //     --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n-            //      |\n-            //   LL |     type Ok;\n-            //      |          -- associated type defined here\n-            //   LL |     type Sibling: Bar2<Ok=Self::Ok>;\n-            //      |     -------------------------------- obligation set here\n-            //   ...\n-            //   LL | impl Bar for Foo {\n-            //      | ---------------- in this `impl` item\n-            //   LL |     type Ok = ();\n-            //      |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n-            //   ...\n-            //   LL | impl Bar2 for Foo2 {\n-            //      | ---------------- in this `impl` item\n-            //   LL |     type Ok = u32;\n-            //      |     -------------- obligation set here\n-            //      |\n-            //      = note: expected type `u32`\n-            //                 found type `()`\n-            if let Some(hir::ItemKind::Impl { items, .. }) = item.map(|i| &i.kind) {\n-                let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n-                if let Some(impl_item) =\n-                    items.iter().find(|item| item.ident == trait_assoc_item.ident)\n-                {\n-                    cause.span = impl_item.span;\n-                    cause.code = traits::AssocTypeBound(Box::new(AssocTypeBoundData {\n-                        impl_span: item_span,\n-                        original: trait_assoc_item.ident.span,\n-                        bounds: vec![],\n-                    }));\n+            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs`.\n+            let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n+            if let Some(impl_item_span) =\n+                items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n+            {\n+                cause.span = impl_item_span;\n+            } else {\n+                let kind = &proj.ty().skip_binder().kind;\n+                if let ty::Projection(projection_ty) = kind {\n+                    // This happens when an associated type has a projection coming from another\n+                    // associated type. See `traits-assoc-type-in-supertrait-bad.rs`.\n+                    let trait_assoc_item = tcx.associated_item(projection_ty.item_def_id);\n+                    if let Some(impl_item_span) =\n+                        items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n+                    {\n+                        cause.span = impl_item_span;\n+                    }\n                 }\n             }\n         }\n-        ty::Predicate::Trait(proj, _) => {\n-            // An associated item obligation born out of the `trait` failed to be met.\n-            // Point at the `impl` that failed the obligation, the associated item that\n-            // needed to meet the obligation, and the definition of that associated item,\n-            // which should hold the obligation in most cases. An example can be seen in\n-            // `src/test/ui/associated-types/point-at-type-on-obligation-failure-2.rs`:\n-            //\n-            //   error[E0277]: the trait bound `bool: Bar` is not satisfied\n-            //     --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n-            //      |\n-            //   LL |     type Assoc: Bar;\n-            //      |          ----- associated type defined here\n-            //   ...\n-            //   LL | impl Foo for () {\n-            //      | --------------- in this `impl` item\n-            //   LL |     type Assoc = bool;\n-            //      |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n-            //\n-            // If the obligation comes from the where clause in the `trait`, we point at it:\n-            //\n-            //   error[E0277]: the trait bound `bool: Bar` is not satisfied\n-            //     --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n-            //      |\n-            //      | trait Foo where <Self as Foo>>::Assoc: Bar {\n-            //      |                 -------------------------- restricted in this bound\n-            //   LL |     type Assoc;\n-            //      |          ----- associated type defined here\n-            //   ...\n-            //   LL | impl Foo for () {\n-            //      | --------------- in this `impl` item\n-            //   LL |     type Assoc = bool;\n-            //      |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n-            if let (\n-                ty::Projection(ty::ProjectionTy { item_def_id, .. }),\n-                Some(hir::ItemKind::Impl { items, .. }),\n-            ) = (&proj.skip_binder().self_ty().kind, item.map(|i| &i.kind))\n+        ty::Predicate::Trait(pred, _) => {\n+            // An associated item obligation born out of the `trait` failed to be met. An example\n+            // can be seen in `ui/associated-types/point-at-type-on-obligation-failure-2.rs`.\n+            debug!(\"extended_cause_with_original_assoc_item_obligation trait proj {:?}\", pred);\n+            if let ty::Projection(ty::ProjectionTy { item_def_id, .. }) =\n+                &pred.skip_binder().self_ty().kind\n             {\n-                if let Some((impl_item, trait_assoc_item)) = trait_assoc_items\n+                if let Some(impl_item_span) = trait_assoc_items\n                     .find(|i| i.def_id == *item_def_id)\n                     .and_then(|trait_assoc_item| {\n-                        items\n-                            .iter()\n-                            .find(|i| i.ident == trait_assoc_item.ident)\n-                            .map(|impl_item| (impl_item, trait_assoc_item))\n+                        items.iter().find(|i| i.ident == trait_assoc_item.ident).map(fix_span)\n                     })\n                 {\n-                    let bounds = trait_generics\n-                        .map(|generics| {\n-                            get_generic_bound_spans(&generics, trait_name, trait_assoc_item.ident)\n-                        })\n-                        .unwrap_or_else(Vec::new);\n-                    cause.span = impl_item.span;\n-                    cause.code = traits::AssocTypeBound(Box::new(AssocTypeBoundData {\n-                        impl_span: item_span,\n-                        original: trait_assoc_item.ident.span,\n-                        bounds,\n-                    }));\n+                    cause.span = impl_item_span;\n                 }\n             }\n         }\n@@ -306,6 +226,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let obligations = self.nominal_obligations(trait_ref.def_id, trait_ref.substs);\n \n+        debug!(\"compute_trait_ref obligations {:?}\", obligations);\n         let cause = self.cause(traits::MiscObligation);\n         let param_env = self.param_env;\n \n@@ -314,7 +235,16 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         if let Elaborate::All = elaborate {\n             let implied_obligations = traits::util::elaborate_obligations(tcx, obligations.clone());\n             let implied_obligations = implied_obligations.map(|obligation| {\n+                debug!(\"compute_trait_ref implied_obligation {:?}\", obligation);\n+                debug!(\"compute_trait_ref implied_obligation cause {:?}\", obligation.cause);\n                 let mut cause = cause.clone();\n+                if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_ref() {\n+                    let derived_cause = traits::DerivedObligationCause {\n+                        parent_trait_ref,\n+                        parent_code: Rc::new(obligation.cause.code.clone()),\n+                    };\n+                    cause.code = traits::ObligationCauseCode::DerivedObligation(derived_cause);\n+                }\n                 extend_cause_with_original_assoc_item_obligation(\n                     tcx,\n                     trait_ref,\n@@ -323,6 +253,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     &obligation.predicate,\n                     tcx.associated_items(trait_ref.def_id).in_definition_order().copied(),\n                 );\n+                debug!(\"compute_trait_ref new cause {:?}\", cause);\n                 traits::Obligation::new(cause, param_env, obligation.predicate)\n             });\n             self.out.extend(implied_obligations);\n@@ -709,53 +640,3 @@ pub fn object_region_bounds<'tcx>(\n \n     required_region_bounds(tcx, open_ty, predicates)\n }\n-\n-/// Find the span of a generic bound affecting an associated type.\n-fn get_generic_bound_spans(\n-    generics: &hir::Generics<'_>,\n-    trait_name: Option<&Ident>,\n-    assoc_item_name: Ident,\n-) -> Vec<Span> {\n-    let mut bounds = vec![];\n-    for clause in generics.where_clause.predicates.iter() {\n-        if let hir::WherePredicate::BoundPredicate(pred) = clause {\n-            match &pred.bounded_ty.kind {\n-                hir::TyKind::Path(hir::QPath::Resolved(Some(ty), path)) => {\n-                    let mut s = path.segments.iter();\n-                    if let (a, Some(b), None) = (s.next(), s.next(), s.next()) {\n-                        if a.map(|s| &s.ident) == trait_name\n-                            && b.ident == assoc_item_name\n-                            && is_self_path(&ty.kind)\n-                        {\n-                            // `<Self as Foo>::Bar`\n-                            bounds.push(pred.span);\n-                        }\n-                    }\n-                }\n-                hir::TyKind::Path(hir::QPath::TypeRelative(ty, segment)) => {\n-                    if segment.ident == assoc_item_name {\n-                        if is_self_path(&ty.kind) {\n-                            // `Self::Bar`\n-                            bounds.push(pred.span);\n-                        }\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n-    }\n-    bounds\n-}\n-\n-fn is_self_path(kind: &hir::TyKind<'_>) -> bool {\n-    if let hir::TyKind::Path(hir::QPath::Resolved(None, path)) = kind {\n-        let mut s = path.segments.iter();\n-        if let (Some(segment), None) = (s.next(), s.next()) {\n-            if segment.ident.name == kw::SelfUpper {\n-                // `type(Self)`\n-                return true;\n-            }\n-        }\n-    }\n-    false\n-}"}, {"sha": "0d9d14547c7af4721b3c645f115bce9fd42bd9c7", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1045,7 +1045,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 bounds,\n                 speculative,\n                 &mut dup_bindings,\n-                span,\n+                binding.span,\n             );\n             // Okay to ignore `Err` because of `ErrorReported` (see above).\n         }"}, {"sha": "f65ae32c01c99d2266d37c5fd44b4f6b2e94709f", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,12 @@\n error[E0277]: `<L1 as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:31:6\n    |\n+LL | trait Case1 {\n+   |       ----- required by a bound in this\n+...\n+LL |                 Debug\n+   |                 ----- required by this bound in `Case1`\n+...\n LL | impl Case1 for S1 {\n    |      ^^^^^ `<L1 as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n@@ -20,7 +26,7 @@ error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent be\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n LL | trait Case1 {\n-   |       -----\n+   |       ----- required by a bound in this\n LL |     type C: Clone + Iterator<Item:\n LL |         Send + Iterator<Item:\n    |         ---- required by this bound in `Case1`\n@@ -36,7 +42,7 @@ error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n LL | trait Case1 {\n-   |       -----\n+   |       ----- required by a bound in this\n ...\n LL |         > + Sync>;\n    |             ---- required by this bound in `Case1`\n@@ -52,7 +58,7 @@ error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n LL | trait Case1 {\n-   |       -----\n+   |       ----- required by a bound in this\n ...\n LL |                 Debug\n    |                 ----- required by this bound in `Case1`"}, {"sha": "b6a88179c1f63ab81d687f4ee405f3be3bb357dd", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -28,7 +28,7 @@ LL | fn dent<C:BoxCar>(c: C, color: <C as Vehicle>::Color) {\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0222]: ambiguous associated type `Color` in bounds of `BoxCar`\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:30\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:37\n    |\n LL |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n@@ -37,7 +37,7 @@ LL |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n-   |                              ^^^^^^^^^^^^^^^^^^^ ambiguous associated type `Color`\n+   |                                     ^^^^^^^^^^^ ambiguous associated type `Color`\n    |\n    = help: consider introducing a new type parameter `T` and adding `where` constraints:\n                where"}, {"sha": "58d72746e76aa3c3c4c4ec7f003b142a52c51af1", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize\n   --> $DIR/associated-types-eq-hr.rs:82:5\n    |\n LL | fn foo<T>()\n-   |    ---\n+   |    --- required by a bound in this\n LL |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n    |                                           ------------- required by this bound in `foo`\n ...\n@@ -16,7 +16,7 @@ error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>\n   --> $DIR/associated-types-eq-hr.rs:86:5\n    |\n LL | fn bar<T>()\n-   |    ---\n+   |    --- required by a bound in this\n LL |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n    |                                           ------------- required by this bound in `bar`\n ...\n@@ -30,7 +30,7 @@ error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize\n   --> $DIR/associated-types-eq-hr.rs:91:17\n    |\n LL | fn tuple_one<T>()\n-   |    ---------\n+   |    --------- required by a bound in this\n LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n    |               ---------------------------------------------------------- required by this bound in `tuple_one`\n ...\n@@ -44,7 +44,7 @@ error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL | fn tuple_one<T>()\n-   |    ---------\n+   |    --------- required by a bound in this\n LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n    |                                                           ------------- required by this bound in `tuple_one`\n ...\n@@ -55,7 +55,7 @@ error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize\n   --> $DIR/associated-types-eq-hr.rs:97:17\n    |\n LL | fn tuple_two<T>()\n-   |    ---------\n+   |    --------- required by a bound in this\n LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n    |               ---------------------------------------------------------- required by this bound in `tuple_two`\n ...\n@@ -69,7 +69,7 @@ error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize\n   --> $DIR/associated-types-eq-hr.rs:97:5\n    |\n LL | fn tuple_two<T>()\n-   |    ---------\n+   |    --------- required by a bound in this\n LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n    |                                                           ------------- required by this bound in `tuple_two`\n ...\n@@ -80,7 +80,7 @@ error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize\n   --> $DIR/associated-types-eq-hr.rs:107:18\n    |\n LL | fn tuple_four<T>()\n-   |    ----------\n+   |    ---------- required by a bound in this\n LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n    |               ------------------------------------------- required by this bound in `tuple_four`\n ..."}, {"sha": "856d513d60bd313b8ea95e2498a231cbdc41889d", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -42,6 +42,12 @@ LL |     + Display = Self;\n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       ------------- required by a bound in this\n+...\n+LL |     + Display = Self;\n+   |       ------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n@@ -55,6 +61,12 @@ LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       ------------- required by a bound in this\n+...\n+LL |     + Deref<Target = str>\n+   |       ------------------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n@@ -66,6 +78,12 @@ LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       ------------- required by a bound in this\n+...\n+LL |     + AddAssign<&'static str>\n+   |       ----------------------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n@@ -78,6 +96,12 @@ LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       ------------- required by a bound in this\n+...\n+LL |     type Output: Copy\n+   |                  ---- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |"}, {"sha": "1060c82fec22ae598670c898aabe824b9e3cdffc", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -42,6 +42,12 @@ LL |     + Display = Self;\n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       ------------- required by a bound in this\n+...\n+LL |     + Display = Self;\n+   |       ------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n@@ -55,6 +61,12 @@ LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       ------------- required by a bound in this\n+...\n+LL |     + Deref<Target = str>\n+   |       ------------------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n@@ -66,6 +78,12 @@ LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       ------------- required by a bound in this\n+...\n+LL |     + AddAssign<&'static str>\n+   |       ----------------------- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n@@ -78,6 +96,12 @@ LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n+LL | trait UncheckedCopy: Sized {\n+   |       ------------- required by a bound in this\n+...\n+LL |     type Output: Copy\n+   |                  ---- required by this bound in `UncheckedCopy`\n+...\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |"}, {"sha": "3b3e4c3ea117a6211ee32e7c95984f7826787b8c", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n LL | fn foo<U, T>(_t: T)\n-   |    ---\n+   |    --- required by a bound in this\n LL |     where for<'a> &'a T: Mirror<Image=U>\n    |                                 ------- required by this bound in `foo`\n ..."}, {"sha": "f21846fd82c43a8ea5f1bc3bf13f32786ae43f58", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -9,12 +9,22 @@ LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n   --> $DIR/issue-43924.rs:10:6\n    |\n+LL | trait Foo<T: Default + ToString> {\n+   |       --- required by a bound in this\n+LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n+   |               ------- required by this bound in `Foo`\n+...\n LL | impl Foo<u32> for () {}\n    |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n \n error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n   --> $DIR/issue-43924.rs:11:6\n    |\n+LL | trait Foo<T: Default + ToString> {\n+   |       --- required by a bound in this\n+LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n+   |               ------- required by this bound in `Foo`\n+...\n LL | impl Foo<u64> for () {}\n    |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n "}, {"sha": "72f47df5d80e727b1be77f8bc4a323e49cafd671", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -9,6 +9,11 @@ LL |     type MpuConfig: MyDisplay = T;\n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n   --> $DIR/issue-65774-1.rs:16:6\n    |\n+LL | trait MPU {\n+   |       --- required by a bound in this\n+LL |     type MpuConfig: MyDisplay = T;\n+   |                     --------- required by this bound in `MPU`\n+...\n LL | impl MPU for S { }\n    |      ^^^ the trait `MyDisplay` is not implemented for `T`\n "}, {"sha": "aef70885af369d5afe50d676076b8824856d9dfe", "filename": "src/test/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -9,6 +9,11 @@ LL |     type MpuConfig: MyDisplay = T;\n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n   --> $DIR/issue-65774-2.rs:16:6\n    |\n+LL | trait MPU {\n+   |       --- required by a bound in this\n+LL |     type MpuConfig: MyDisplay = T;\n+   |                     --------- required by this bound in `MPU`\n+...\n LL | impl MPU for S { }\n    |      ^^^ the trait `MyDisplay` is not implemented for `T`\n "}, {"sha": "3118a9c5352c351ca0105cdeaf6ac4059b5ebe26", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,39 +1,31 @@\n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:8:18\n    |\n+LL | trait Foo {\n+   |       --- required by a bound in this\n LL |     type Assoc: Bar;\n-   |          ----- associated type defined here\n+   |                 --- required by this bound in `Foo`\n ...\n-LL | impl Foo for () {\n-   | --------------- in this `impl` item\n LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:16:5\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:16:18\n    |\n LL | trait Baz where Self::Assoc: Bar {\n-   |                 ---------------- restricted in this bound\n-LL |     type Assoc;\n-   |          ----- associated type defined here\n+   |                              --- required by this bound in `Baz`\n ...\n-LL | impl Baz for () {\n-   | --------------- in this `impl` item\n LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:24:5\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:24:18\n    |\n LL | trait Bat where <Self as Bat>::Assoc: Bar {\n-   |                 ------------------------- restricted in this bound\n-LL |     type Assoc;\n-   |          ----- associated type defined here\n+   |                                       --- required by this bound in `Bat`\n ...\n-LL | impl Bat for () {\n-   | --------------- in this `impl` item\n LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "818702b7afe2ab2e850e07be78e993aca59ceb17", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,13 +1,8 @@\n error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n-  --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n+  --> $DIR/point-at-type-on-obligation-failure.rs:13:15\n    |\n-LL |     type Ok;\n-   |          -- associated type defined here\n-...\n-LL | impl Bar for Foo {\n-   | ---------------- in this `impl` item\n LL |     type Ok = ();\n-   |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n+   |               ^^ expected `u32`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "4e7b513629d0512fdab25ab6c6d3eda8ff43ae90", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:6:24\n    |\n+LL | trait Foo : Send+Sync { }\n+   |             ---- required by this bound in `Foo`\n+LL | \n LL | impl <T: Sync+'static> Foo for (T,) { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n@@ -14,6 +17,9 @@ LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n    |\n+LL | trait Foo : Send+Sync { }\n+   |                  ---- required by this bound in `Foo`\n+...\n LL | impl <T: Send> Foo for (T,T) { }\n    |                ^^^ `T` cannot be shared between threads safely\n    |"}, {"sha": "3fb1af3a67cc225b4149642fd4a65250fbe99a2f", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -3,6 +3,11 @@ error[E0277]: `T` cannot be sent between threads safely\n    |\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   | \n+  ::: $DIR/auxiliary/trait_superkinds_in_metadata.rs:7:58\n+   |\n+LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n+   |                                                          ---- required by this bound in `trait_superkinds_in_metadata::RequiresRequiresShareAndSend`\n    |\n    = help: within `X<T>`, the trait `std::marker::Send` is not implemented for `T`\n    = note: required because it appears within the type `X<T>`"}, {"sha": "592cc3b1c4ec1e747fd53b4e1560802c6b5a42aa", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-simple.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `std::rc::Rc<i8>` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-simple.rs:6:6\n    |\n+LL | trait Foo : Send { }\n+   |             ---- required by this bound in `Foo`\n+LL | \n LL | impl Foo for std::rc::Rc<i8> { }\n    |      ^^^ `std::rc::Rc<i8>` cannot be sent between threads safely\n    |"}, {"sha": "9c5073a1e49d73b94468cb47c4981f9a1450571b", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-typaram-not-send.rs:5:24\n    |\n+LL | trait Foo : Send { }\n+   |             ---- required by this bound in `Foo`\n+LL | \n LL | impl <T: Sync+'static> Foo for T { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |"}, {"sha": "97fdb76dd11c77b1f6cdf9eeb4015761c3c58360", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:30:5\n    |\n LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-   |    ------------------------------------------\n+   |    ------------------------------------------ required by a bound in this\n LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n    |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n ...\n@@ -15,7 +15,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:37:5\n    |\n LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    -------------------------------------------\n+   |    ------------------------------------------- required by a bound in this\n LL |     where F: FnOnce(fn(&u32), &i32)\n    |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n@@ -28,7 +28,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:46:5\n    |\n LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    -------------------------------------------\n+   |    ------------------------------------------- required by a bound in this\n LL |     where F: FnOnce(fn(&u32), &i32)\n    |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ..."}, {"sha": "fae41c4114abc49621895e30b76b73d935008ea4", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -40,7 +40,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:30:5\n    |\n LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-   |    ------------------------------------------\n+   |    ------------------------------------------ required by a bound in this\n LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n    |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n ...\n@@ -53,7 +53,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:37:5\n    |\n LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    -------------------------------------------\n+   |    ------------------------------------------- required by a bound in this\n LL |     where F: FnOnce(fn(&u32), &i32)\n    |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n@@ -66,7 +66,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:46:5\n    |\n LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    -------------------------------------------\n+   |    ------------------------------------------- required by a bound in this\n LL |     where F: FnOnce(fn(&u32), &i32)\n    |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ..."}, {"sha": "93b42a5a305f23fb518a228fad92109099834a60", "filename": "src/test/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-infer-var-appearing-twice.rs:14:5\n    |\n LL | fn with_closure<F, A>(_: F)\n-   |    ------------\n+   |    ------------ required by a bound in this\n LL |     where F: FnOnce(A, A)\n    |              ------------ required by this bound in `with_closure`\n ..."}, {"sha": "749d569b9aedc46d487c3ab5a54284133a5ae0a0", "filename": "src/test/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:7:6\n    |\n+LL | trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n+   |           - required by this bound in `Foo`\n+LL | \n LL | impl Foo<[isize]> for usize { }\n    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -10,6 +13,9 @@ LL | impl Foo<[isize]> for usize { }\n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:10:6\n    |\n+LL | trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n+   |                ----- required by this bound in `Foo`\n+...\n LL | impl Foo<isize> for [usize] { }\n    |      ^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "9699abd5661a2510b5bfd547a78992fa46454142", "filename": "src/test/ui/generator/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-re\n   --> $DIR/generator-yielding-or-returning-itself.rs:15:5\n    |\n LL | pub fn want_cyclic_generator_return<T>(_: T)\n-   |        ----------------------------\n+   |        ---------------------------- required by a bound in this\n LL |     where T: Generator<Yield = (), Return = T>\n    |                                    ---------- required by this bound in `want_cyclic_generator_return`\n ...\n@@ -18,7 +18,7 @@ error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-re\n   --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n    |\n LL | pub fn want_cyclic_generator_yield<T>(_: T)\n-   |        ---------------------------\n+   |        --------------------------- required by a bound in this\n LL |     where T: Generator<Yield = T, Return = ()>\n    |                        --------- required by this bound in `want_cyclic_generator_yield`\n ..."}, {"sha": "4b06baa09ffbfa574c57475a7a3d5dcdec8556e4", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0280]: the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not\n   --> $DIR/issue-62326-parameter-out-of-range.rs:7:20\n    |\n LL | trait Iterator {\n-   |       --------\n+   |       -------- required by a bound in this\n LL |     type Item<'a>: 'a;\n    |                    ^^ required by this bound in `Iterator`\n "}, {"sha": "b1298163aabf09727cda6efd72eab5164933b92b", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,33 +1,19 @@\n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:15:5\n+  --> $DIR/iterable.rs:15:33\n    |\n-LL | impl<T> Iterable for Vec<T> {\n-   | --------------------------- in this `impl` item\n LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n-   | \n-  ::: $SRC_DIR/libcore/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     type Item;\n-   |          ---- associated type defined here\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n    |\n    = note:    expected reference `&T`\n            found associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n    = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:27:5\n+  --> $DIR/iterable.rs:27:33\n    |\n-LL | impl<T> Iterable for [T] {\n-   | ------------------------ in this `impl` item\n LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n-   | \n-  ::: $SRC_DIR/libcore/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     type Item;\n-   |          ---- associated type defined here\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n    |\n    = note:    expected reference `&T`\n            found associated type `<[T] as Iterable>::Item<'_>`\n@@ -38,7 +24,7 @@ error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::\n   --> $DIR/iterable.rs:19:30\n    |\n LL | trait Iterable {\n-   |       --------\n+   |       -------- required by a bound in this\n LL |     type Item<'a> where Self: 'a;\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n    |                             --------------------- required by this bound in `Iterable`\n@@ -55,7 +41,7 @@ error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as s\n   --> $DIR/iterable.rs:31:30\n    |\n LL | trait Iterable {\n-   |       --------\n+   |       -------- required by a bound in this\n LL |     type Item<'a> where Self: 'a;\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n    |                             --------------------- required by this bound in `Iterable`"}, {"sha": "95f4aa9e6dbaa749c272752699726ce9c8189d19", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the size for values of type `[()]` cannot be known at compilation time\n   --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:6\n    |\n+LL | trait Tsized<P: Sized = [Self]> {}\n+   |              - required by this bound in `Tsized`\n+LL | \n LL | impl Tsized for () {}\n    |      ^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "7250935ea296b067fb44fd8798154d9dd631adca", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize\n   --> $DIR/hrtb-conflate-regions.rs:27:22\n    |\n LL | fn want_foo2<T>()\n-   |    ---------\n+   |    --------- required by a bound in this\n LL |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n    |               -------------------------------------- required by this bound in `want_foo2`\n ..."}, {"sha": "7a7285d3d76e051dbc23c8ee082448a4be4fe33e", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `(): Trait<for<'b> fn(&'b u32)>` is not satisfied\n   --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:11\n    |\n LL | fn foo<T>()\n-   |    ---\n+   |    --- required by a bound in this\n LL | where\n LL |     T: Trait<for<'b> fn(&'b u32)>,\n    |        -------------------------- required by this bound in `foo`"}, {"sha": "1e335f9ee96106d4a8df6b0f1a36f12ca6df4077", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `(): Trait<for<'b> fn(fn(&'b u32))>` is not satisf\n   --> $DIR/hrtb-exists-forall-trait-covariant.rs:36:11\n    |\n LL | fn foo<T>()\n-   |    ---\n+   |    --- required by a bound in this\n LL | where\n LL |     T: Trait<for<'b> fn(fn(&'b u32))>,\n    |        ------------------------------ required by this bound in `foo`"}, {"sha": "9174ea4d8419d208f087468ffe879240533ee88a", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `(): Trait<for<'b> fn(std::cell::Cell<&'b u32>)>`\n   --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:11\n    |\n LL | fn foo<T>()\n-   |    ---\n+   |    --- required by a bound in this\n LL | where\n LL |     T: Trait<for<'b> fn(Cell<&'b u32>)>,\n    |        -------------------------------- required by this bound in `foo`"}, {"sha": "87a13889298dfc81f40b9d9cc3923b50942cabc0", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:26\n    |\n LL | fn want_bar_for_any_ccx<B>(b: &B)\n-   |    --------------------\n+   |    -------------------- required by a bound in this\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ------------------- required by this bound in `want_bar_for_any_ccx`\n ..."}, {"sha": "0123faa36dbcd8fdbcdd1c072dd9cc99a398a889", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -5,7 +5,7 @@ LL |     want_foo_for_any_tcx(f);\n    |                          ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n ...\n LL | fn want_foo_for_any_tcx<F>(f: &F)\n-   |    --------------------\n+   |    -------------------- required by a bound in this\n LL |     where F : for<'tcx> Foo<'tcx>\n    |               ------------------- required by this bound in `want_foo_for_any_tcx`\n    |\n@@ -21,7 +21,7 @@ LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n ...\n LL | fn want_bar_for_any_ccx<B>(b: &B)\n-   |    --------------------\n+   |    -------------------- required by a bound in this\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ------------------- required by this bound in `want_bar_for_any_ccx`\n    |"}, {"sha": "4fa404624775b731bba309d7034687fefba4fd1d", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfi\n   --> $DIR/hrtb-just-for-static.rs:24:17\n    |\n LL | fn want_hrtb<T>()\n-   |    ---------\n+   |    --------- required by a bound in this\n LL |     where T : for<'a> Foo<&'a isize>\n    |               ---------------------- required by this bound in `want_hrtb`\n ...\n@@ -16,7 +16,7 @@ error[E0277]: the trait bound `for<'a> &'a u32: Foo<&'a isize>` is not satisfied\n   --> $DIR/hrtb-just-for-static.rs:30:17\n    |\n LL | fn want_hrtb<T>()\n-   |    ---------\n+   |    --------- required by a bound in this\n LL |     where T : for<'a> Foo<&'a isize>\n    |               ---------------------- required by this bound in `want_hrtb`\n ..."}, {"sha": "8698ed6e875f306f1a4227c789b7eedab51d3351", "filename": "src/test/ui/impl-bounds-checking.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fimpl-bounds-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fimpl-bounds-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-bounds-checking.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `isize: Clone2` is not satisfied\n   --> $DIR/impl-bounds-checking.rs:10:6\n    |\n+LL | trait Getter<T: Clone2> {\n+   |                 ------ required by this bound in `Getter`\n+...\n LL | impl Getter<isize> for isize {\n    |      ^^^^^^^^^^^^^ the trait `Clone2` is not implemented for `isize`\n "}, {"sha": "888576c43365f912ab2f2c4b307def62e05476e1", "filename": "src/test/ui/issues/issue-10412.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -49,6 +49,9 @@ LL | impl<'self> Serializable<str> for &'self str {\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/issue-10412.rs:6:13\n    |\n+LL | trait Serializable<'self, T> {\n+   |                           - required by this bound in `Serializable`\n+...\n LL | impl<'self> Serializable<str> for &'self str {\n    |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "d69efc860059b83c7c5be9cb40bf2781a4521612", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<<T as Trait>::A as MultiDispatch<i32>>::\n   --> $DIR/issue-24204.rs:14:12\n    |\n LL | trait Trait: Sized {\n-   |       -----\n+   |       ----- required by a bound in this\n LL |     type A: MultiDispatch<Self::B, O = Self>;\n    |                                    -------- required by this bound in `Trait`\n ..."}, {"sha": "99fb2a1f5d030fc3889f44e1507e881e10ef37b5", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-43623.rs:14:5\n    |\n LL | pub fn break_me<T, F>(f: F)\n-   |        --------\n+   |        -------- required by a bound in this\n LL | where T: for<'b> Trait<'b>,\n LL |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n    |          -------------------------------------- required by this bound in `break_me`\n@@ -16,7 +16,7 @@ error[E0271]: type mismatch resolving `for<'b> <fn(_) as std::ops::FnOnce<(<Type\n   --> $DIR/issue-43623.rs:14:5\n    |\n LL | pub fn break_me<T, F>(f: F)\n-   |        --------\n+   |        -------- required by a bound in this\n LL | where T: for<'b> Trait<'b>,\n LL |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n    |                  ------------------------------ required by this bound in `break_me`"}, {"sha": "d8e9110fbbd1d66a02984dc0761bfaf89f559c03", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,13 +1,8 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-43784-associated-type.rs:14:5\n+  --> $DIR/issue-43784-associated-type.rs:14:18\n    |\n-LL |     type Assoc: Partial<Self>;\n-   |          ----- associated type defined here\n-...\n-LL | impl<T> Complete for T {\n-   | ---------------------- in this `impl` item\n LL |     type Assoc = T;\n-   |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |                  ^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "c84d8ecb4c9e634a161771502972d54babd60875", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -14,7 +14,7 @@ LL |     Bar(i32),\n    |     -------- takes 1 argument\n ...\n LL | fn foo<F>(f: F)\n-   |    ---\n+   |    --- required by a bound in this\n LL | where\n LL |     F: Fn(),\n    |        ---- required by this bound in `foo`"}, {"sha": "77b9d9c4aaa3a34da22ba01e6ec292dae93d1266", "filename": "src/test/ui/issues/issue-60218.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `for<'t> <std::iter::Map<<&'t _ as std::iter::Into\n   --> $DIR/issue-60218.rs:18:5\n    |\n LL | pub fn trigger_error<I, F>(iterable: I, functor: F)\n-   |        -------------\n+   |        ------------- required by a bound in this\n ...\n LL | for<'t> <Map<<&'t I as IntoIterator>::IntoIter, F> as Iterator>::Item: Foo,\n    |                                                                        --- required by this bound in `trigger_error`"}, {"sha": "e74a34e247a6763e3381b031daaca69dd7854db2", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-60283.rs:14:13\n    |\n LL | pub fn foo<T, F>(_: T, _: F)\n-   |        ---\n+   |        --- required by a bound in this\n LL | where T: for<'a> Trait<'a>,\n LL |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n    |          ------------------------------------- required by this bound in `foo`\n@@ -17,7 +17,7 @@ error[E0271]: type mismatch resolving `for<'a> <fn(_) {std::mem::drop::<_>} as s\n   --> $DIR/issue-60283.rs:14:5\n    |\n LL | pub fn foo<T, F>(_: T, _: F)\n-   |        ---\n+   |        --- required by a bound in this\n LL | where T: for<'a> Trait<'a>,\n LL |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n    |                  ----------------------------- required by this bound in `foo`"}, {"sha": "114f2d62e561ad0204af45e6a342a927b5bf3ab6", "filename": "src/test/ui/issues/issue-65673.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65673.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-65673.rs:9:5\n+  --> $DIR/issue-65673.rs:9:16\n    |\n+LL | trait WithType {\n+   |       -------- required by a bound in this\n LL |     type Ctx;\n-   |          --- associated type defined here\n+   |     --------- required by this bound in `WithType`\n ...\n-LL | impl<T> WithType for T {\n-   | ---------------------- in this `impl` item\n LL |     type Ctx = dyn Alias<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "2c45a498240efccda7a64f401eecf09844c72766", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -21,6 +21,11 @@ error[E0277]: the trait bound `Test1: std::clone::Clone` is not satisfied\n    |\n LL | #[derive(Copy(Bad))]\n    |          ^^^^ the trait `std::clone::Clone` is not implemented for `Test1`\n+   | \n+  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   |                 ----- required by this bound in `std::marker::Copy`\n    |\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -29,6 +34,11 @@ error[E0277]: the trait bound `Test2: std::clone::Clone` is not satisfied\n    |\n LL | #[derive(Copy=\"bad\")]\n    |          ^^^^ the trait `std::clone::Clone` is not implemented for `Test2`\n+   | \n+  ::: $SRC_DIR/libcore/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   |                 ----- required by this bound in `std::marker::Copy`\n    |\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f499c1f5698595e1de2a708386d8d5605265e67a", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `U: std::cmp::Eq` is not satisfied\n   --> $DIR/specialization-wfcheck.rs:7:17\n    |\n+LL | trait Foo<'a, T: Eq + 'a> { }\n+   |                  -- required by this bound in `Foo`\n+LL | \n LL | default impl<U> Foo<'static, U> for () {}\n    |                 ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n    |"}, {"sha": "ef484e94729e84105af767207cbba3ca6d223acf", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:17:19\n    |\n LL | trait Parent {\n-   |       ------\n+   |       ------ required by a bound in this\n LL |     type Ty;\n LL |     type Assoc: Child<Self::Ty>;\n    |                 --------------- required by this bound in `Parent`\n@@ -13,26 +13,27 @@ LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n    |                   the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n \n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n-  --> $DIR/missing-assoc-type-bound-restriction.rs:20:5\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:20:18\n    |\n+LL | trait Parent {\n+   |       ------ required by a bound in this\n+LL |     type Ty;\n LL |     type Assoc: Child<Self::Ty>;\n-   |          ----- associated type defined here\n+   |                 --------------- required by this bound in `Parent`\n ...\n LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n-   | ------------------------------------------------------- help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n-   | |\n-   | in this `impl` item\n+   |                                                       - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n ...\n LL |     type Assoc = ChildWrapper<T::Assoc>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n    |\n    = note: required because of the requirements on the impl of `Child<A>` for `ChildWrapper<<T as Parent>::Assoc>`\n \n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:20:5\n    |\n LL | trait Parent {\n-   |       ------\n+   |       ------ required by a bound in this\n LL |     type Ty;\n LL |     type Assoc: Child<Self::Ty>;\n    |                 --------------- required by this bound in `Parent`"}, {"sha": "3188ee83e7d39f4cc5bd16c7340cc8b1606a4f40", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -7,15 +7,15 @@ LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n    = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n \n error[E0275]: overflow evaluating the requirement `Runtime<RootDatabase>: std::panic::RefUnwindSafe`\n-  --> $DIR/cycle-cache-err-60010.rs:31:5\n+  --> $DIR/cycle-cache-err-60010.rs:31:20\n    |\n+LL | trait Database {\n+   |       -------- required by a bound in this\n LL |     type Storage;\n-   |          ------- associated type defined here\n+   |     ------------- required by this bound in `Database`\n ...\n-LL | impl Database for RootDatabase {\n-   | ------------------------------ in this `impl` item\n LL |     type Storage = SalsaStorage;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^\n    |\n    = note: required because it appears within the type `RootDatabase`\n    = note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`"}, {"sha": "579ce7cf70669c9f55c96078d84460a2c45d551d", "filename": "src/test/ui/traits/traits-assoc-type-in-supertrait-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.rs?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -8,8 +8,8 @@ pub trait Foo: Iterator<Item=<Self as Foo>::Key> {\n     type Key;\n }\n \n-impl Foo for IntoIter<i32> { //~ ERROR type mismatch\n-    type Key = u32;\n+impl Foo for IntoIter<i32> {\n+    type Key = u32; //~ ERROR type mismatch\n }\n \n fn main() {"}, {"sha": "604763f8e354e07e82f7f78ac14b7b031f2156d8", "filename": "src/test/ui/traits/traits-assoc-type-in-supertrait-bad.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-assoc-type-in-supertrait-bad.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,8 +1,8 @@\n error[E0271]: type mismatch resolving `<std::vec::IntoIter<i32> as std::iter::Iterator>::Item == u32`\n-  --> $DIR/traits-assoc-type-in-supertrait-bad.rs:11:6\n+  --> $DIR/traits-assoc-type-in-supertrait-bad.rs:12:16\n    |\n-LL | impl Foo for IntoIter<i32> {\n-   |      ^^^ expected `i32`, found `u32`\n+LL |     type Key = u32;\n+   |                ^^^ expected `i32`, found `u32`\n \n error: aborting due to previous error\n "}, {"sha": "c81402a3dcc004cc53a79fa788ec94f40b36eb78", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -5,10 +5,10 @@ LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n    |        ^^^^^^^^^^^^ unexpected type argument\n \n error[E0220]: associated type `Output` not found for `Trait`\n-  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:8\n+  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:24\n    |\n LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^ associated type `Output` not found\n+   |                        ^^^^^ associated type `Output` not found\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4cf054d177f6624476794b56deec67457a3ba9ca", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-trait-impl-trait-arg.rs:8:17\n    |\n+LL | trait T2<Z> {\n+   |          - required by this bound in `T2`\n+...\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |"}, {"sha": "d18644f005a887d4742b3c0ca5c39116256191fb", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized7.rs:12:21\n    |\n+LL | trait T1<Z: T> {\n+   |          - required by this bound in `T1`\n+...\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      -              ^^^^^ doesn't have a size known at compile-time\n    |      |"}, {"sha": "9976243b200dc907562306b21bee2ef8995e799e", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7497a8ccb8885823e413f4e3a54412812b60528/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=e7497a8ccb8885823e413f4e3a54412812b60528", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `for<'a> &'a _: Bar` is not satisfied\n   --> $DIR/where-for-self-2.rs:21:5\n    |\n LL | fn foo<T>(x: &T)\n-   |    ---\n+   |    --- required by a bound in this\n LL |     where for<'a> &'a T: Bar\n    |                          --- required by this bound in `foo`\n ..."}]}