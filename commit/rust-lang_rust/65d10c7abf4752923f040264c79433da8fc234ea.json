{"sha": "65d10c7abf4752923f040264c79433da8fc234ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZDEwYzdhYmY0NzUyOTIzZjA0MDI2NGM3OTQzM2RhOGZjMjM0ZWE=", "commit": {"author": {"name": "jrqc", "email": "jrqc01@hotmail.com", "date": "2020-08-13T12:14:08Z"}, "committer": {"name": "jrqc", "email": "jrqc01@hotmail.com", "date": "2020-08-15T21:24:27Z"}, "message": "Borrow checker added", "tree": {"sha": "7d4952d15cebf038989e944e5468fe9e73abe943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d4952d15cebf038989e944e5468fe9e73abe943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d10c7abf4752923f040264c79433da8fc234ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d10c7abf4752923f040264c79433da8fc234ea", "html_url": "https://github.com/rust-lang/rust/commit/65d10c7abf4752923f040264c79433da8fc234ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d10c7abf4752923f040264c79433da8fc234ea/comments", "author": {"login": "jrqc", "id": 14986914, "node_id": "MDQ6VXNlcjE0OTg2OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/14986914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrqc", "html_url": "https://github.com/jrqc", "followers_url": "https://api.github.com/users/jrqc/followers", "following_url": "https://api.github.com/users/jrqc/following{/other_user}", "gists_url": "https://api.github.com/users/jrqc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrqc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrqc/subscriptions", "organizations_url": "https://api.github.com/users/jrqc/orgs", "repos_url": "https://api.github.com/users/jrqc/repos", "events_url": "https://api.github.com/users/jrqc/events{/privacy}", "received_events_url": "https://api.github.com/users/jrqc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrqc", "id": 14986914, "node_id": "MDQ6VXNlcjE0OTg2OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/14986914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrqc", "html_url": "https://github.com/jrqc", "followers_url": "https://api.github.com/users/jrqc/followers", "following_url": "https://api.github.com/users/jrqc/following{/other_user}", "gists_url": "https://api.github.com/users/jrqc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrqc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrqc/subscriptions", "organizations_url": "https://api.github.com/users/jrqc/orgs", "repos_url": "https://api.github.com/users/jrqc/repos", "events_url": "https://api.github.com/users/jrqc/events{/privacy}", "received_events_url": "https://api.github.com/users/jrqc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f4ef0fbd92453cf480af4e3f9eed877071ea2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f4ef0fbd92453cf480af4e3f9eed877071ea2e", "html_url": "https://github.com/rust-lang/rust/commit/85f4ef0fbd92453cf480af4e3f9eed877071ea2e"}], "stats": {"total": 124, "additions": 79, "deletions": 45}, "files": [{"sha": "ba280cd5a6176a3ded21f74947155e7cd688bb85", "filename": "clippy_lints/src/needless_return.rs", "status": "modified", "additions": 58, "deletions": 41, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/65d10c7abf4752923f040264c79433da8fc234ea/clippy_lints%2Fsrc%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d10c7abf4752923f040264c79433da8fc234ea/clippy_lints%2Fsrc%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_return.rs?ref=65d10c7abf4752923f040264c79433da8fc234ea", "patch": "@@ -1,13 +1,13 @@\n-use rustc_lint::{LateLintPass, LateContext};\n use rustc_ast::ast::Attribute;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{FnKind, walk_expr, NestedVisitorMap, Visitor};\n-use rustc_span::source_map::Span;\n-use rustc_middle::lint::in_external_macro;\n+use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, HirId, MatchSource, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, HirId, MatchSource, StmtKind};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Span;\n \n use crate::utils::{fn_def_id, snippet_opt, span_lint_and_sugg, span_lint_and_then};\n \n@@ -46,16 +46,39 @@ enum RetReplacement {\n declare_lint_pass!(NeedlessReturn => [NEEDLESS_RETURN]);\n \n impl<'tcx> LateLintPass<'tcx> for NeedlessReturn {\n-    fn check_fn(&mut self, cx: &LateContext<'tcx>, kind: FnKind<'tcx>, _: &'tcx FnDecl<'tcx>, body: &'tcx Body<'tcx>, _: Span, _: HirId) {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        kind: FnKind<'tcx>,\n+        _: &'tcx FnDecl<'tcx>,\n+        body: &'tcx Body<'tcx>,\n+        _: Span,\n+        _: HirId,\n+    ) {\n         match kind {\n             FnKind::Closure(_) => {\n-                check_final_expr(cx, &body.value, Some(body.value.span), RetReplacement::Empty)\n-            }\n+                if !last_statement_borrows(cx, &body.value) {\n+                    check_final_expr(cx, &body.value, Some(body.value.span), RetReplacement::Empty)\n+                }\n+            },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 if let ExprKind::Block(ref block, _) = body.value.kind {\n-                    check_block_return(cx, block)\n+                    if let Some(expr) = block.expr {\n+                        if !last_statement_borrows(cx, expr) {\n+                            check_final_expr(cx, expr, Some(expr.span), RetReplacement::Empty);\n+                        }\n+                    } else if let Some(stmt) = block.stmts.iter().last() {\n+                        match stmt.kind {\n+                            StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => {\n+                                if !last_statement_borrows(cx, expr) {\n+                                    check_final_expr(cx, expr, Some(stmt.span), RetReplacement::Empty);\n+                                }\n+                            },\n+                            _ => (),\n+                        }\n+                    }\n                 }\n-            }\n+            },\n         }\n     }\n }\n@@ -71,23 +94,16 @@ fn check_block_return(cx: &LateContext<'_>, block: &Block<'_>) {\n         match stmt.kind {\n             StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => {\n                 check_final_expr(cx, expr, Some(stmt.span), RetReplacement::Empty);\n-            }\n+            },\n             _ => (),\n         }\n     }\n }\n \n-\n-fn check_final_expr(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    span: Option<Span>,\n-    replacement: RetReplacement,\n-) {\n+fn check_final_expr(cx: &LateContext<'_>, expr: &Expr<'_>, span: Option<Span>, replacement: RetReplacement) {\n     match expr.kind {\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n-\n             // allow `#[cfg(a)] return a; #[cfg(b)] return b;`\n             if !expr.attrs.iter().any(attr_is_cfg) {\n                 emit_return_lint(\n@@ -97,32 +113,34 @@ fn check_final_expr(\n                     replacement,\n                 );\n             }\n-        }\n+        },\n         // a whole block? check it!\n         ExprKind::Block(ref block, _) => {\n             check_block_return(cx, block);\n-        }\n+        },\n         // a match expr, check all arms\n         // an if/if let expr, check both exprs\n         // note, if without else is going to be a type checking error anyways\n         // (except for unit type functions) so we don't match it\n-\n-        ExprKind::Match(_, ref arms, source) => {\n-            match source {\n-                MatchSource::Normal => {\n-                    for arm in arms.iter() {\n-                        check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Block);\n-                    }\n-                }\n-                MatchSource::IfDesugar { contains_else_clause: true } | MatchSource::IfLetDesugar { contains_else_clause: true } => {\n-                    if let ExprKind::Block(ref ifblock, _) = arms[0].body.kind {\n-                        check_block_return(cx, ifblock);\n-                    }\n-                    check_final_expr(cx, arms[1].body, None, RetReplacement::Empty);\n+        ExprKind::Match(_, ref arms, source) => match source {\n+            MatchSource::Normal => {\n+                for arm in arms.iter() {\n+                    check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Block);\n                 }\n-                _ => ()\n+            },\n+            MatchSource::IfDesugar {\n+                contains_else_clause: true,\n             }\n-        }\n+            | MatchSource::IfLetDesugar {\n+                contains_else_clause: true,\n+            } => {\n+                if let ExprKind::Block(ref ifblock, _) = arms[0].body.kind {\n+                    check_block_return(cx, ifblock);\n+                }\n+                check_final_expr(cx, arms[1].body, None, RetReplacement::Empty);\n+            },\n+            _ => (),\n+        },\n         _ => (),\n     }\n }\n@@ -139,7 +157,7 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Spa\n                     diag.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n                 }\n             })\n-        }\n+        },\n         None => match replacement {\n             RetReplacement::Empty => {\n                 span_lint_and_sugg(\n@@ -151,7 +169,7 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Spa\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 );\n-            }\n+            },\n             RetReplacement::Block => {\n                 span_lint_and_sugg(\n                     cx,\n@@ -162,7 +180,7 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Spa\n                     \"{}\".to_string(),\n                     Applicability::MachineApplicable,\n                 );\n-            }\n+            },\n         },\n     }\n }\n@@ -204,4 +222,3 @@ impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n         NestedVisitorMap::None\n     }\n }\n-"}, {"sha": "593e2f6c74b259d2715ceb95efcd0e4643aeec97", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65d10c7abf4752923f040264c79433da8fc234ea/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d10c7abf4752923f040264c79433da8fc234ea/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=65d10c7abf4752923f040264c79433da8fc234ea", "patch": "@@ -7,7 +7,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::{span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for unit (`()`) expressions that can be removed.\n@@ -30,12 +30,10 @@ declare_clippy_lint! {\n     \"needless unit expression\"\n }\n \n-\n declare_lint_pass!(Return => [UNUSED_UNIT]);\n \n impl EarlyLintPass for Return {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, kind: FnKind<'_>, span: Span, _: ast::NodeId) {\n-\n         if_chain! {\n             if let ast::FnRetTy::Ty(ref ty) = kind.decl().output;\n             if let ast::TyKind::Tup(ref vals) = ty.kind;\n@@ -102,7 +100,6 @@ impl EarlyLintPass for Return {\n     }\n }\n \n-\n // get the def site\n #[must_use]\n fn get_def(span: Span) -> Option<Span> {"}, {"sha": "6b5cf2626df41910e31780c932d188dc546cc0e1", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65d10c7abf4752923f040264c79433da8fc234ea/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/65d10c7abf4752923f040264c79433da8fc234ea/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=65d10c7abf4752923f040264c79433da8fc234ea", "patch": "@@ -69,6 +69,16 @@ fn test_void_match(x: u32) {\n     }\n }\n \n+mod no_lint_if_stmt_borrows {\n+    mod issue_5858 {\n+        fn read_line() -> String {\n+            use std::io::BufRead;\n+            let stdin = ::std::io::stdin();\n+            return stdin.lock().lines().next().unwrap().unwrap();\n+        }\n+    }\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}, {"sha": "1a693c9aa53ded23ab235cb9a22f473a6e818246", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65d10c7abf4752923f040264c79433da8fc234ea/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d10c7abf4752923f040264c79433da8fc234ea/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=65d10c7abf4752923f040264c79433da8fc234ea", "patch": "@@ -69,6 +69,16 @@ fn test_void_match(x: u32) {\n     }\n }\n \n+mod no_lint_if_stmt_borrows {\n+    mod issue_5858 {\n+        fn read_line() -> String {\n+            use std::io::BufRead;\n+            let stdin = ::std::io::stdin();\n+            return stdin.lock().lines().next().unwrap().unwrap();\n+        }\n+    }\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}]}