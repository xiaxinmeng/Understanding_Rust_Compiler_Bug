{"sha": "82dc99ba7aca7880acc0e823f31e9ba5da518e88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZGM5OWJhN2FjYTc4ODBhY2MwZTgyM2YzMWU5YmE1ZGE1MThlODg=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-24T23:44:04Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-25T00:25:43Z"}, "message": "Use the name \"auto traits\" everywhere in the compiler\n\nGoodbye, OIBIT!", "tree": {"sha": "49ab4d77f6be574b14751b93b3270591d4ad1f50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ab4d77f6be574b14751b93b3270591d4ad1f50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82dc99ba7aca7880acc0e823f31e9ba5da518e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82dc99ba7aca7880acc0e823f31e9ba5da518e88", "html_url": "https://github.com/rust-lang/rust/commit/82dc99ba7aca7880acc0e823f31e9ba5da518e88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82dc99ba7aca7880acc0e823f31e9ba5da518e88/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "810324d1f31eb8d75e8f0044df720652986ef133", "url": "https://api.github.com/repos/rust-lang/rust/commits/810324d1f31eb8d75e8f0044df720652986ef133", "html_url": "https://github.com/rust-lang/rust/commit/810324d1f31eb8d75e8f0044df720652986ef133"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "814f91b04310f5c98dd6347701e79e5c952a5a03", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -811,7 +811,7 @@ pub struct LocalDecl<'tcx> {\n     /// after typeck.\n     ///\n     /// This should be sound because the drop flags are fully algebraic, and\n-    /// therefore don't affect the OIBIT or outlives properties of the\n+    /// therefore don't affect the auto-trait or outlives properties of the\n     /// generator.\n     pub internal: bool,\n "}, {"sha": "0764e273a4aef4f0e77d9450c720d4ba1d136b7f", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -70,7 +70,7 @@ pub enum Reveal {\n     /// be observable directly by the user, `Reveal::All`\n     /// should not be used by checks which may expose\n     /// type equality or type contents to the user.\n-    /// There are some exceptions, e.g., around OIBITS and\n+    /// There are some exceptions, e.g., around auto traits and\n     /// transmute-checking, which expose some details, but\n     /// not the whole concrete type of the `impl Trait`.\n     All,"}, {"sha": "7c34b996055d3e214f4091b9324fdf2c566b85fa", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Box { value } => {\n                 let value = this.hir.mirror(value);\n                 // The `Box<T>` temporary created here is not a part of the HIR,\n-                // and therefore is not considered during generator OIBIT\n+                // and therefore is not considered during generator auto-trait\n                 // determination. See the comment about `box` at `yield_in_scope`.\n                 let result = this.local_decls.push(LocalDecl::new(expr.ty, expr_span).internal());\n                 this.cfg.push("}, {"sha": "135987fc00d517333ca3ef5d846223b76b44c572", "filename": "src/test/rustdoc/auxiliary/rustdoc-impl-parts-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -1,3 +1,3 @@\n #![feature(auto_traits)]\n \n-pub auto trait AnOibit {}\n+pub auto trait AnAutoTrait {}"}, {"sha": "6c5e79d5aa32380bb781b3221dd6540f9ee66c00", "filename": "src/test/rustdoc/impl-parts-crosscrate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -12,9 +12,9 @@ pub struct Bar<T> { t: T }\n // full impl string.  Instead, just make sure something from each part\n // is mentioned.\n \n-// @has implementors/rustdoc_impl_parts_crosscrate/trait.AnOibit.js Bar\n+// @has implementors/rustdoc_impl_parts_crosscrate/trait.AnAutoTrait.js Bar\n // @has - Send\n-// @has - !AnOibit\n+// @has - !AnAutoTrait\n // @has - Copy\n-impl<T: Send> !rustdoc_impl_parts_crosscrate::AnOibit for Bar<T>\n+impl<T: Send> !rustdoc_impl_parts_crosscrate::AnAutoTrait for Bar<T>\n     where T: Copy {}"}, {"sha": "90110babea75fc5417842b0a2a53495d1858a878", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -1,12 +1,12 @@\n #![feature(negative_impls)]\n #![feature(auto_traits)]\n \n-pub auto trait AnOibit {}\n+pub auto trait AnAutoTrait {}\n \n pub struct Foo<T> { field: T }\n \n // @has impl_parts/struct.Foo.html '//*[@class=\"impl\"]//code' \\\n-//     \"impl<T: Clone> !AnOibit for Foo<T> where T: Sync,\"\n-// @has impl_parts/trait.AnOibit.html '//*[@class=\"item-list\"]//code' \\\n-//     \"impl<T: Clone> !AnOibit for Foo<T> where T: Sync,\"\n-impl<T: Clone> !AnOibit for Foo<T> where T: Sync {}\n+//     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\"\n+// @has impl_parts/trait.AnAutoTrait.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\"\n+impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync {}"}, {"sha": "0172ca335c32ab4ecd22ff36a16890d6ddc3a844", "filename": "src/test/ui/phantom-auto-trait.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Fui%2Fphantom-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Fui%2Fphantom-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-auto-trait.rs?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -1,5 +1,5 @@\n-// Ensure that OIBIT checks `T` when it encounters a `PhantomData<T>` field, instead of checking\n-// the `PhantomData<T>` type itself (which almost always implements an auto trait)\n+// Ensure that auto trait checks `T` when it encounters a `PhantomData<T>` field, instead of\n+// checking the `PhantomData<T>` type itself (which almost always implements an auto trait).\n \n #![feature(auto_traits)]\n ", "previous_filename": "src/test/ui/phantom-oibit.rs"}, {"sha": "779919f9d643f56b3774eb7d914f601c020cca21", "filename": "src/test/ui/phantom-auto-trait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `T` cannot be shared between threads safely\n-  --> $DIR/phantom-oibit.rs:21:12\n+  --> $DIR/phantom-auto-trait.rs:21:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n    |              --- required by this bound in `is_zen`\n@@ -16,7 +16,7 @@ LL | fn not_sync<T: Sync>(x: Guard<T>) {\n    |              ^^^^^^\n \n error[E0277]: `T` cannot be shared between threads safely\n-  --> $DIR/phantom-oibit.rs:26:12\n+  --> $DIR/phantom-auto-trait.rs:26:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n    |              --- required by this bound in `is_zen`", "previous_filename": "src/test/ui/phantom-oibit.stderr"}, {"sha": "5fea47a1be87daf50ce2ac7119d2a6c3284bd767", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-auto-trait.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-auto-trait.rs?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -1,5 +1,5 @@\n-// OIBIT-based version of #29859, supertrait version. Test that using\n-// a simple OIBIT `..` impl alone still doesn't allow arbitrary bounds\n+// Auto-trait-based version of #29859, supertrait version. Test that using\n+// a simple auto trait `..` impl alone still doesn't allow arbitrary bounds\n // to be synthesized.\n \n #![feature(auto_traits)]", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.rs"}, {"sha": "140ffa4b079a3ed51a6a7967498a580ecfee81dc", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-auto-trait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82dc99ba7aca7880acc0e823f31e9ba5da518e88/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-auto-trait.stderr?ref=82dc99ba7aca7880acc0e823f31e9ba5da518e88", "patch": "@@ -1,13 +1,13 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:8:19\n+  --> $DIR/traits-inductive-overflow-supertrait-auto-trait.rs:8:19\n    |\n LL | auto trait Magic: Copy {}\n    |            -----  ^^^^ help: remove the super traits\n    |            |\n    |            auto trait cannot have super traits\n \n error[E0277]: the trait bound `NoClone: Copy` is not satisfied\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:16:23\n+  --> $DIR/traits-inductive-overflow-supertrait-auto-trait.rs:16:23\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    |            ----- required by this bound in `copy`", "previous_filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr"}]}