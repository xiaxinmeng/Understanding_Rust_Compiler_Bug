{"sha": "9d378b33defb2edcacadc4fd5fb0e9329f9d1eec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMzc4YjMzZGVmYjJlZGNhY2FkYzRmZDVmYjBlOTMyOWY5ZDFlZWM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T15:10:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T15:10:25Z"}, "message": "Rollup merge of #82297 - tmiasko:write-only, r=oli-obk\n\nConsider auto derefs before warning about write only fields\n\nChanges from #81473 extended the dead code lint with an ability to detect\nfields that are written to but never read from. The implementation skips\nover fields on the left hand side of an assignment, without marking them\nas live.\n\nA field access might involve an automatic dereference and de-facto read\nthe field. Conservatively mark expressions with deref adjustments as\nlive to avoid generating false positive warnings.\n\nCloses #81626.", "tree": {"sha": "c375279bb20fa57dc840f47552c531457addde0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c375279bb20fa57dc840f47552c531457addde0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNRrhCRBK7hj4Ov3rIwAAdHIIAIb92TvofKTpIQwka3SA2Nmp\nStezIQBwiWQVA3vPLRH6jGna2TlV7t8BO8z0J1xo5Dh739YTceENh1bJ2orKQGyu\nIhIc63zD7+s2WhDfCdsvBXESTr81ltYB5tgZhYGs40unxKeK6yOEZIKiKIvRyd9H\nqCUX2LI4S4y2Hbfe0erjdsyo2a5oFrA7GRQP4mG16+FVJmmEzTed44SGbR4w/qE0\nefVJ7pBGdSYsLhurV5yxB/GfcSfk6b5dIapWWKKzMBUQ1Z0YZB5AAewAhGY6U+gb\nwSw6TtGmDdEbUBMCTf2HiNeitQk9Onj4FguFr+E/oDlmRSv5Gwoqt75cCf5a8p0=\n=FLVt\n-----END PGP SIGNATURE-----\n", "payload": "tree c375279bb20fa57dc840f47552c531457addde0f\nparent e2561c58a41023a14e0e583113dcf55e1ecb236a\nparent 343b67387772dbd068d06a76267288579d3eaed0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614093025 +0100\ncommitter GitHub <noreply@github.com> 1614093025 +0100\n\nRollup merge of #82297 - tmiasko:write-only, r=oli-obk\n\nConsider auto derefs before warning about write only fields\n\nChanges from #81473 extended the dead code lint with an ability to detect\nfields that are written to but never read from. The implementation skips\nover fields on the left hand side of an assignment, without marking them\nas live.\n\nA field access might involve an automatic dereference and de-facto read\nthe field. Conservatively mark expressions with deref adjustments as\nlive to avoid generating false positive warnings.\n\nCloses #81626.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec", "html_url": "https://github.com/rust-lang/rust/commit/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2561c58a41023a14e0e583113dcf55e1ecb236a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2561c58a41023a14e0e583113dcf55e1ecb236a", "html_url": "https://github.com/rust-lang/rust/commit/e2561c58a41023a14e0e583113dcf55e1ecb236a"}, {"sha": "343b67387772dbd068d06a76267288579d3eaed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/343b67387772dbd068d06a76267288579d3eaed0", "html_url": "https://github.com/rust-lang/rust/commit/343b67387772dbd068d06a76267288579d3eaed0"}], "stats": {"total": 97, "additions": 85, "deletions": 12}, "files": [{"sha": "62a95aa57c29f66399a1a138ff7adb15f7cac0d8", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=9d378b33defb2edcacadc4fd5fb0e9329f9d1eec", "patch": "@@ -37,15 +37,6 @@ fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     )\n }\n \n-fn base_expr<'a>(mut expr: &'a hir::Expr<'a>) -> &'a hir::Expr<'a> {\n-    loop {\n-        match expr.kind {\n-            hir::ExprKind::Field(base, ..) => expr = base,\n-            _ => return expr,\n-        }\n-    }\n-}\n-\n struct MarkSymbolVisitor<'tcx> {\n     worklist: Vec<hir::HirId>,\n     tcx: TyCtxt<'tcx>,\n@@ -143,6 +134,22 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n     }\n \n+    fn handle_assign(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n+        if self\n+            .typeck_results()\n+            .expr_adjustments(expr)\n+            .iter()\n+            .any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(_)))\n+        {\n+            self.visit_expr(expr);\n+        } else if let hir::ExprKind::Field(base, ..) = expr.kind {\n+            // Ignore write to field\n+            self.handle_assign(base);\n+        } else {\n+            self.visit_expr(expr);\n+        }\n+    }\n+\n     fn handle_field_pattern_match(\n         &mut self,\n         lhs: &hir::Pat<'_>,\n@@ -272,8 +279,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n                 self.lookup_and_handle_method(expr.hir_id);\n             }\n             hir::ExprKind::Assign(ref left, ref right, ..) => {\n-                // Ignore write to field\n-                self.visit_expr(base_expr(left));\n+                self.handle_assign(left);\n                 self.visit_expr(right);\n                 return;\n             }"}, {"sha": "7b3f1e9f5b6cb89e4f88042e1c43df9a48a3a7b9", "filename": "src/test/ui/lint/dead-code/write-only-field.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs?ref=9d378b33defb2edcacadc4fd5fb0e9329f9d1eec", "patch": "@@ -17,4 +17,53 @@ fn field_write(s: &mut S) {\n fn main() {\n     let mut s = S { f: 0, sub: Sub { f: 0 } };\n     field_write(&mut s);\n+\n+    auto_deref();\n+    nested_boxes();\n+}\n+\n+fn auto_deref() {\n+    struct E {\n+        x: bool,\n+        y: bool, //~ ERROR: field is never read\n+    }\n+\n+    struct P<'a> {\n+        e: &'a mut E\n+    }\n+\n+    impl P<'_> {\n+        fn f(&mut self) {\n+            self.e.x = true;\n+            self.e.y = true;\n+        }\n+    }\n+\n+    let mut e = E { x: false, y: false };\n+    let mut p = P { e: &mut e };\n+    p.f();\n+    assert!(e.x);\n+}\n+\n+fn nested_boxes() {\n+    struct A {\n+        b: Box<B>,\n+    }\n+\n+    struct B {\n+        c: Box<C>,\n+    }\n+\n+    struct C {\n+        u: u32, //~ ERROR: field is never read\n+        v: u32, //~ ERROR: field is never read\n+    }\n+\n+    let mut a = A {\n+        b: Box::new(B {\n+            c: Box::new(C { u: 0, v: 0 }),\n+        }),\n+    };\n+    a.b.c.v = 10;\n+    a.b.c = Box::new(C { u: 1, v: 2 });\n }"}, {"sha": "a191d22c8b94cfe317507529ccb818d0080a0b9a", "filename": "src/test/ui/lint/dead-code/write-only-field.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d378b33defb2edcacadc4fd5fb0e9329f9d1eec/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr?ref=9d378b33defb2edcacadc4fd5fb0e9329f9d1eec", "patch": "@@ -22,5 +22,23 @@ error: field is never read: `f`\n LL |     f: i32,\n    |     ^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: field is never read: `y`\n+  --> $DIR/write-only-field.rs:28:9\n+   |\n+LL |         y: bool,\n+   |         ^^^^^^^\n+\n+error: field is never read: `u`\n+  --> $DIR/write-only-field.rs:58:9\n+   |\n+LL |         u: u32,\n+   |         ^^^^^^\n+\n+error: field is never read: `v`\n+  --> $DIR/write-only-field.rs:59:9\n+   |\n+LL |         v: u32,\n+   |         ^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}]}