{"sha": "7a6ae2367d3b3442a7ae36e53551b58a9ece7155", "node_id": "C_kwDOAAsO6NoAKDdhNmFlMjM2N2QzYjM0NDJhN2FlMzZlNTM1NTFiNThhOWVjZTcxNTU", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-08-20T00:47:05Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-08-22T12:24:14Z"}, "message": "migrate: `OverruledAttribute`", "tree": {"sha": "05aefe0e67a552dfb36489f95b38d8e3c070f454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05aefe0e67a552dfb36489f95b38d8e3c070f454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a6ae2367d3b3442a7ae36e53551b58a9ece7155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6ae2367d3b3442a7ae36e53551b58a9ece7155", "html_url": "https://github.com/rust-lang/rust/commit/7a6ae2367d3b3442a7ae36e53551b58a9ece7155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a6ae2367d3b3442a7ae36e53551b58a9ece7155/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32e445af7499fa470961f30750942398bf51d198", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e445af7499fa470961f30750942398bf51d198", "html_url": "https://github.com/rust-lang/rust/commit/32e445af7499fa470961f30750942398bf51d198"}], "stats": {"total": 87, "additions": 75, "deletions": 12}, "files": [{"sha": "cb393d67193b91de2034ed1dab374e2dcf515bcd", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a6ae2367d3b3442a7ae36e53551b58a9ece7155/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7a6ae2367d3b3442a7ae36e53551b58a9ece7155/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=7a6ae2367d3b3442a7ae36e53551b58a9ece7155", "patch": "@@ -394,6 +394,16 @@ lint_builtin_deref_nullptr = dereferencing a null pointer\n \n lint_builtin_asm_labels = avoid using named labels in inline assembly\n \n+lint_overruled_attribute = {$lint_level}({$lint_source}) incompatible with previous forbid\n+    .label = overruled by previous forbid\n+\n+lint_default_source = `forbid` lint level is the default for {$id}\n+\n+lint_node_source = `forbid` level set here\n+    .note = {$reason}\n+\n+lint_command_line_source = `forbid` lint level was set on command line\n+\n lint_malformed_attribute = malformed lint attribute input\n \n lint_bad_attribute_argument = bad attribute argument"}, {"sha": "bb4e23e29e7a3dc075165687106ef13bf94aa3a6", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7a6ae2367d3b3442a7ae36e53551b58a9ece7155/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6ae2367d3b3442a7ae36e53551b58a9ece7155/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=7a6ae2367d3b3442a7ae36e53551b58a9ece7155", "patch": "@@ -1,6 +1,46 @@\n+use rustc_errors::{fluent, AddSubdiagnostic};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n+#[derive(SessionDiagnostic)]\n+#[error(lint::overruled_attribute, code = \"E0453\")]\n+pub struct OverruledAttribute {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub overruled: Span,\n+    pub lint_level: String,\n+    pub lint_source: Symbol,\n+    #[subdiagnostic]\n+    pub sub: OverruledAttributeSub,\n+}\n+//\n+pub enum OverruledAttributeSub {\n+    DefaultSource { id: String },\n+    NodeSource { span: Span, reason: Option<Symbol> },\n+    CommandLineSource,\n+}\n+\n+impl AddSubdiagnostic for OverruledAttributeSub {\n+    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+        match self {\n+            OverruledAttributeSub::DefaultSource { id } => {\n+                diag.note(fluent::lint::default_source);\n+                diag.set_arg(\"id\", id);\n+            }\n+            OverruledAttributeSub::NodeSource { span, reason } => {\n+                diag.span_label(span, fluent::lint::node_source);\n+                if let Some(rationale) = reason {\n+                    diag.note(rationale.as_str());\n+                }\n+            }\n+            OverruledAttributeSub::CommandLineSource => {\n+                diag.note(fluent::lint::command_line_source);\n+            }\n+        }\n+    }\n+}\n+\n #[derive(SessionDiagnostic)]\n #[error(lint::malformed_attribute, code = \"E0452\")]\n pub struct MalformedAttribute {"}, {"sha": "2bafe64c1394a5277f957c455844dfcc2103670a", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a6ae2367d3b3442a7ae36e53551b58a9ece7155/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6ae2367d3b3442a7ae36e53551b58a9ece7155/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=7a6ae2367d3b3442a7ae36e53551b58a9ece7155", "patch": "@@ -6,7 +6,7 @@ use crate::late::unerased_lint_store;\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, LintDiagnosticBuilder, MultiSpan};\n+use rustc_errors::{Applicability, Diagnostic, LintDiagnosticBuilder, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::nested_filter;\n@@ -26,7 +26,10 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use tracing::debug;\n \n-use crate::errors::{MalformedAttribute, MalformedAttributeSub, UnknownTool};\n+use crate::errors::{\n+    MalformedAttribute, MalformedAttributeSub, OverruledAttribute, OverruledAttributeSub,\n+    UnknownTool,\n+};\n \n fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n     let store = unerased_lint_store(tcx);\n@@ -191,16 +194,26 @@ impl<'s> LintLevelsBuilder<'s> {\n                     }\n                 };\n                 if !fcw_warning {\n-                    let mut diag_builder = struct_span_err!(\n-                        self.sess,\n-                        src.span(),\n-                        E0453,\n-                        \"{}({}) incompatible with previous forbid\",\n-                        level.as_str(),\n-                        src.name(),\n-                    );\n-                    decorate_diag(&mut diag_builder);\n-                    diag_builder.emit();\n+                    self.sess.emit_err(OverruledAttribute {\n+                        span: src.span(),\n+                        overruled: src.span(),\n+                        lint_level: level.as_str().to_string(),\n+                        lint_source: src.name(),\n+                        sub: match old_src {\n+                            LintLevelSource::Default => {\n+                                OverruledAttributeSub::DefaultSource { id: id.to_string() }\n+                            }\n+                            LintLevelSource::Node(_, forbid_source_span, reason) => {\n+                                OverruledAttributeSub::NodeSource {\n+                                    span: forbid_source_span,\n+                                    reason,\n+                                }\n+                            }\n+                            LintLevelSource::CommandLine(_, _) => {\n+                                OverruledAttributeSub::CommandLineSource\n+                            }\n+                        },\n+                    });\n                 } else {\n                     self.struct_lint(\n                         FORBIDDEN_LINT_GROUPS,"}]}