{"sha": "107d6a0a16c8dc89394b9ee69ec3b20f52a5a721", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwN2Q2YTBhMTZjOGRjODkzOTRiOWVlNjllYzNiMjBmNTJhNWE3MjE=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-24T22:01:49Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-24T22:01:49Z"}, "message": "Reformat", "tree": {"sha": "8675aee76ac940e4916a2b2d0cbb6e075bb17967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8675aee76ac940e4916a2b2d0cbb6e075bb17967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/107d6a0a16c8dc89394b9ee69ec3b20f52a5a721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/107d6a0a16c8dc89394b9ee69ec3b20f52a5a721", "html_url": "https://github.com/rust-lang/rust/commit/107d6a0a16c8dc89394b9ee69ec3b20f52a5a721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/107d6a0a16c8dc89394b9ee69ec3b20f52a5a721/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82dfb0015760742e437f224f315f2d5534bdb926", "url": "https://api.github.com/repos/rust-lang/rust/commits/82dfb0015760742e437f224f315f2d5534bdb926", "html_url": "https://github.com/rust-lang/rust/commit/82dfb0015760742e437f224f315f2d5534bdb926"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "6d6d89f707a696c6bcb1a7c241a84df3e9847843", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/107d6a0a16c8dc89394b9ee69ec3b20f52a5a721/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107d6a0a16c8dc89394b9ee69ec3b20f52a5a721/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=107d6a0a16c8dc89394b9ee69ec3b20f52a5a721", "patch": "@@ -36,21 +36,22 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n }\n \n // E.g. for after the break in `if break {}`, this should not match\n-pub(super) const ATOM_EXPR_FIRST: TokenSet = LITERAL_FIRST.union(paths::PATH_FIRST).union(token_set![\n-    L_PAREN,\n-    L_CURLY,\n-    L_BRACK,\n-    PIPE,\n-    MOVE_KW,\n-    IF_KW,\n-    WHILE_KW,\n-    MATCH_KW,\n-    UNSAFE_KW,\n-    RETURN_KW,\n-    BREAK_KW,\n-    CONTINUE_KW,\n-    LIFETIME,\n-]);\n+pub(super) const ATOM_EXPR_FIRST: TokenSet =\n+    LITERAL_FIRST.union(paths::PATH_FIRST).union(token_set![\n+        L_PAREN,\n+        L_CURLY,\n+        L_BRACK,\n+        PIPE,\n+        MOVE_KW,\n+        IF_KW,\n+        WHILE_KW,\n+        MATCH_KW,\n+        UNSAFE_KW,\n+        RETURN_KW,\n+        BREAK_KW,\n+        CONTINUE_KW,\n+        LIFETIME,\n+    ]);\n \n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];\n "}]}