{"sha": "0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYWI0YmY0MzA3OTE0MzY4ZTZjNzlkMDliYmJlZDBlMmE3ZmNjNTg=", "commit": {"author": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-07-26T12:05:43Z"}, "committer": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-08-02T11:12:51Z"}, "message": "Remove ChangeSet of FmtVisitor", "tree": {"sha": "6dbb30fefe71f73fd86a53e628cbc15aaa823aa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dbb30fefe71f73fd86a53e628cbc15aaa823aa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "html_url": "https://github.com/rust-lang/rust/commit/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e10329dc74fac5a1579cf62989629ddca06117a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e10329dc74fac5a1579cf62989629ddca06117a", "html_url": "https://github.com/rust-lang/rust/commit/0e10329dc74fac5a1579cf62989629ddca06117a"}], "stats": {"total": 225, "additions": 67, "deletions": 158}, "files": [{"sha": "ab758f71d95f78b9ef97db941e16ec1cbff2f4ae", "filename": "src/changes.rs", "status": "modified", "additions": 10, "deletions": 92, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "patch": "@@ -15,96 +15,23 @@\n \n use strings::string_buffer::StringBuffer;\n use std::collections::HashMap;\n-use syntax::codemap::{CodeMap, Span, BytePos};\n use std::fmt;\n use std::fs::File;\n use std::io::{Write, stdout};\n use WriteMode;\n use NewlineStyle;\n use config::Config;\n-use utils::round_up_to_power_of_two;\n \n // This is basically a wrapper around a bunch of Ropes which makes it convenient\n // to work with libsyntax. It is badly named.\n-pub struct ChangeSet<'a> {\n-    file_map: HashMap<String, StringBuffer>,\n-    codemap: &'a CodeMap,\n-    file_spans: Vec<(u32, u32)>,\n+pub struct ChangeSet {\n+    pub file_map: HashMap<String, StringBuffer>,\n }\n \n-impl<'a> ChangeSet<'a> {\n+impl ChangeSet {\n     // Create a new ChangeSet for a given libsyntax CodeMap.\n-    pub fn from_codemap(codemap: &'a CodeMap) -> ChangeSet<'a> {\n-        let mut result = ChangeSet {\n-            file_map: HashMap::new(),\n-            codemap: codemap,\n-            file_spans: Vec::with_capacity(codemap.files.borrow().len()),\n-        };\n-\n-        for f in codemap.files.borrow().iter() {\n-            // Use the length of the file as a heuristic for how much space we\n-            // need. Round to the next power of two.\n-            let buffer_cap = round_up_to_power_of_two(f.src.as_ref().unwrap().len());\n-\n-            result.file_map.insert(f.name.clone(), StringBuffer::with_capacity(buffer_cap));\n-            result.file_spans.push((f.start_pos.0, f.end_pos.0));\n-        }\n-\n-        result.file_spans.sort();\n-\n-        result\n-    }\n-\n-    pub fn filespans_for_span(&self, start: BytePos, end: BytePos) -> Vec<(u32, u32)> {\n-        assert!(start.0 <= end.0);\n-\n-        if self.file_spans.len() == 0 {\n-            return Vec::new();\n-        }\n-\n-        // idx is the index into file_spans which indicates the current file, we\n-        // with the file start denotes.\n-        let mut idx = match self.file_spans.binary_search(&(start.0, ::std::u32::MAX)) {\n-            Ok(i) => i,\n-            Err(0) => 0,\n-            Err(i) => i - 1,\n-        };\n-\n-        let mut result = Vec::new();\n-        let mut start = start.0;\n-        loop {\n-            let cur_file = &self.file_spans[idx];\n-            idx += 1;\n-\n-            if idx >= self.file_spans.len() || start >= end.0 {\n-                if start < end.0 {\n-                    result.push((start, end.0));\n-                }\n-                return result;\n-            }\n-\n-            let end = ::std::cmp::min(cur_file.1 - 1, end.0);\n-            if start < end {\n-                result.push((start, end));\n-            }\n-            start = self.file_spans[idx].0;\n-        }\n-    }\n-\n-    pub fn push_str(&mut self, filename: &str, text: &str) {\n-        let buf = self.file_map.get_mut(&*filename).unwrap();\n-        buf.push_str(text)\n-    }\n-\n-    pub fn push_str_span(&mut self, span: Span, text: &str) {\n-        let file_name = self.codemap.span_to_filename(span);\n-        self.push_str(&file_name, text)\n-    }\n-\n-    // Fetch the output buffer for the given file name.\n-    // Panics on unknown files.\n-    pub fn get(&mut self, file_name: &str) -> &StringBuffer {\n-        self.file_map.get(file_name).unwrap()\n+    pub fn new() -> ChangeSet {\n+        ChangeSet { file_map: HashMap::new() }\n     }\n \n     // Fetch a mutable reference to the output buffer for the given file name.\n@@ -113,17 +40,8 @@ impl<'a> ChangeSet<'a> {\n         self.file_map.get_mut(file_name).unwrap()\n     }\n \n-    pub fn cur_offset(&mut self, filename: &str) -> usize {\n-        self.file_map[&*filename].cur_offset()\n-    }\n-\n-    pub fn cur_offset_span(&mut self, span: Span) -> usize {\n-        let filename = self.codemap.span_to_filename(span);\n-        self.cur_offset(&filename)\n-    }\n-\n     // Return an iterator over the entire changed text.\n-    pub fn text<'c>(&'c self) -> FileIterator<'c, 'a> {\n+    pub fn text<'c>(&'c self) -> FileIterator<'c> {\n         FileIterator { change_set: self, keys: self.file_map.keys().collect(), cur_key: 0 }\n     }\n \n@@ -220,13 +138,13 @@ impl<'a> ChangeSet<'a> {\n \n // Iterates over each file in the ChangSet. Yields the filename and the changed\n // text for that file.\n-pub struct FileIterator<'c, 'a: 'c> {\n-    change_set: &'c ChangeSet<'a>,\n+pub struct FileIterator<'c> {\n+    change_set: &'c ChangeSet,\n     keys: Vec<&'c String>,\n     cur_key: usize,\n }\n \n-impl<'c, 'a> Iterator for FileIterator<'c, 'a> {\n+impl<'c> Iterator for FileIterator<'c> {\n     type Item = (&'c str, &'c StringBuffer);\n \n     fn next(&mut self) -> Option<(&'c str, &'c StringBuffer)> {\n@@ -240,7 +158,7 @@ impl<'c, 'a> Iterator for FileIterator<'c, 'a> {\n     }\n }\n \n-impl<'a> fmt::Display for ChangeSet<'a> {\n+impl fmt::Display for ChangeSet {\n     // Prints the entire changed text.\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         for (f, r) in self.text() {"}, {"sha": "334c509c59d39f781dddf3b5a3511d0b2d45e63d", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "patch": "@@ -138,13 +138,9 @@ impl Rewrite for ast::Block {\n \n         // Push text between last block item and end of block\n         let snippet = visitor.snippet(mk_sp(visitor.last_pos, self.span.hi));\n-        visitor.changes.push_str_span(self.span, &snippet);\n+        visitor.buffer.push_str(&snippet);\n \n-        // Stringify visitor\n-        let file_name = context.codemap.span_to_filename(self.span);\n-        let string_buffer = visitor.changes.get(&file_name);\n-\n-        Some(format!(\"{}{}\", prefix, string_buffer))\n+        Some(format!(\"{}{}\", prefix, visitor.buffer))\n     }\n }\n "}, {"sha": "378d822d4133d1d13449eed38b243edd13741823", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "patch": "@@ -382,7 +382,7 @@ impl<'a> FmtVisitor<'a> {\n                       generics: &ast::Generics,\n                       span: Span) {\n         let header_str = self.format_header(\"enum \", ident, vis);\n-        self.changes.push_str_span(span, &header_str);\n+        self.buffer.push_str(&header_str);\n \n         let enum_snippet = self.snippet(span);\n         let body_start = span.lo + BytePos(enum_snippet.find_uncommented(\"{\").unwrap() as u32 + 1);\n@@ -391,7 +391,7 @@ impl<'a> FmtVisitor<'a> {\n                                                 self.block_indent + self.config.tab_spaces,\n                                                 codemap::mk_sp(span.lo,\n                                                                body_start));\n-        self.changes.push_str_span(span, &generics_str);\n+        self.buffer.push_str(&generics_str);\n \n         self.last_pos = body_start;\n         self.block_indent += self.config.tab_spaces;\n@@ -407,7 +407,7 @@ impl<'a> FmtVisitor<'a> {\n         self.block_indent -= self.config.tab_spaces;\n \n         self.format_missing_with_indent(span.lo + BytePos(enum_snippet.rfind('}').unwrap() as u32));\n-        self.changes.push_str_span(span, \"}\");\n+        self.buffer.push_str(\"}\");\n     }\n \n     // Variant of an enum\n@@ -421,9 +421,9 @@ impl<'a> FmtVisitor<'a> {\n         let result = match field.node.kind {\n             ast::VariantKind::TupleVariantKind(ref types) => {\n                 let vis = format_visibility(field.node.vis);\n-                self.changes.push_str_span(field.span, vis);\n+                self.buffer.push_str(vis);\n                 let name = field.node.name.to_string();\n-                self.changes.push_str_span(field.span, &name);\n+                self.buffer.push_str(&name);\n \n                 let mut result = String::new();\n \n@@ -491,10 +491,10 @@ impl<'a> FmtVisitor<'a> {\n                                    self.block_indent)\n             }\n         };\n-        self.changes.push_str_span(field.span, &result);\n+        self.buffer.push_str(&result);\n \n         if !last_field || self.config.enum_trailing_comma {\n-            self.changes.push_str_span(field.span, \",\");\n+            self.buffer.push_str(\",\");\n         }\n \n         self.last_pos = field.span.hi + BytePos(1);\n@@ -621,7 +621,7 @@ impl<'a> FmtVisitor<'a> {\n                                         Some(generics),\n                                         span,\n                                         indent);\n-        self.changes.push_str_span(span, &result);\n+        self.buffer.push_str(&result);\n         self.last_pos = span.hi;\n     }\n "}, {"sha": "f25e323504eef3209e6ce2774d895684cbec6cbf", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "patch": "@@ -196,12 +196,15 @@ impl fmt::Display for FormatReport {\n }\n \n // Formatting which depends on the AST.\n-fn fmt_ast<'a>(krate: &ast::Crate, codemap: &'a CodeMap, config: &'a Config) -> ChangeSet<'a> {\n-    let mut visitor = FmtVisitor::from_codemap(codemap, config);\n+fn fmt_ast(krate: &ast::Crate, codemap: &CodeMap, config: &Config) -> ChangeSet {\n+    let mut changes = ChangeSet::new();\n     for (path, module) in modules::list_modules(krate, codemap) {\n-        visitor.format_separate_mod(module, path.to_str().unwrap());\n+        let path = path.to_str().unwrap();\n+        let mut visitor = FmtVisitor::from_codemap(codemap, config);\n+        visitor.format_separate_mod(module, path);\n+        changes.file_map.insert(path.to_owned(), visitor.buffer);\n     }\n-    visitor.changes\n+    changes\n }\n \n // Formatting done on a char by char or line by line basis."}, {"sha": "2f1a014a6e8b868fb9115c59dfc3912f8b1e8ad2", "filename": "src/missed_spans.rs", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "patch": "@@ -17,34 +17,33 @@ impl<'a> FmtVisitor<'a> {\n     // TODO these format_missing methods are ugly. Refactor and add unit tests\n     // for the central whitespace stripping loop.\n     pub fn format_missing(&mut self, end: BytePos) {\n-        self.format_missing_inner(end, |this, last_snippet, file_name, _| {\n-            this.changes.push_str(file_name, last_snippet)\n+        self.format_missing_inner(end, |this, last_snippet, _| {\n+            this.buffer.push_str(last_snippet)\n         })\n     }\n \n     pub fn format_missing_with_indent(&mut self, end: BytePos) {\n-        self.format_missing_inner(end, |this, last_snippet, file_name, snippet| {\n-            this.changes.push_str(file_name, last_snippet.trim_right());\n+        self.format_missing_inner(end, |this, last_snippet, snippet| {\n+            this.buffer.push_str(last_snippet.trim_right());\n             if last_snippet == snippet {\n                 // No new lines in the snippet.\n-                this.changes.push_str(file_name, \"\\n\");\n+                this.buffer.push_str(\"\\n\");\n             }\n             let indent = make_indent(this.block_indent);\n-            this.changes.push_str(file_name, &indent);\n+            this.buffer.push_str(&indent);\n         })\n     }\n \n-    fn format_missing_inner<F: Fn(&mut FmtVisitor, &str, &str, &str)>(&mut self,\n-                                                                      end: BytePos,\n-                                                                      process_last_snippet: F) {\n+    fn format_missing_inner<F: Fn(&mut FmtVisitor, &str, &str)>(&mut self,\n+                                                                end: BytePos,\n+                                                                process_last_snippet: F) {\n         let start = self.last_pos;\n         debug!(\"format_missing_inner: {:?} to {:?}\",\n                self.codemap.lookup_char_pos(start),\n                self.codemap.lookup_char_pos(end));\n \n         if start == end {\n-            let file_name = &self.codemap.lookup_char_pos(start).file.name;\n-            process_last_snippet(self, \"\", file_name, \"\");\n+            process_last_snippet(self, \"\", \"\");\n             return;\n         }\n \n@@ -54,24 +53,18 @@ impl<'a> FmtVisitor<'a> {\n                 self.codemap.lookup_char_pos(end));\n \n         self.last_pos = end;\n-        let spans = self.changes.filespans_for_span(start, end);\n-        for (i, &(start, end)) in spans.iter().enumerate() {\n-            let span = codemap::mk_sp(BytePos(start), BytePos(end));\n-            let file_name = &self.codemap.span_to_filename(span);\n-            let snippet = self.snippet(span);\n+        let span = codemap::mk_sp(start, end);\n+        let snippet = self.snippet(span);\n \n-            self.write_snippet(&snippet,\n-                               file_name,\n-                               i == spans.len() - 1,\n+        self.write_snippet(&snippet,\n+                               true,\n                                &process_last_snippet);\n-        }\n     }\n \n-    fn write_snippet<F: Fn(&mut FmtVisitor, &str, &str, &str)>(&mut self,\n-                                                               snippet: &str,\n-                                                               file_name: &str,\n-                                                               last_snippet: bool,\n-                                                               process_last_snippet: F) {\n+    fn write_snippet<F: Fn(&mut FmtVisitor, &str, &str)>(&mut self,\n+                                                         snippet: &str,\n+                                                         last_snippet: bool,\n+                                                         process_last_snippet: F) {\n         // Trim whitespace from the right hand side of each line.\n         // Annoyingly, the library functions for splitting by lines etc. are not\n         // quite right, so we must do it ourselves.\n@@ -80,10 +73,10 @@ impl<'a> FmtVisitor<'a> {\n         for (i, c) in snippet.char_indices() {\n             if c == '\\n' {\n                 if let Some(lw) = last_wspace {\n-                    self.changes.push_str(file_name, &snippet[line_start..lw]);\n-                    self.changes.push_str(file_name, \"\\n\");\n+                    self.buffer.push_str(&snippet[line_start..lw]);\n+                    self.buffer.push_str(\"\\n\");\n                 } else {\n-                    self.changes.push_str(file_name, &snippet[line_start..i+1]);\n+                    self.buffer.push_str(&snippet[line_start..i+1]);\n                 }\n \n                 line_start = i + 1;\n@@ -99,9 +92,9 @@ impl<'a> FmtVisitor<'a> {\n             }\n         }\n         if last_snippet {\n-            process_last_snippet(self, &snippet[line_start..], file_name, snippet);\n+            process_last_snippet(self, &snippet[line_start..], snippet);\n         } else {\n-            self.changes.push_str(file_name, &snippet[line_start..]);\n+            self.buffer.push_str(&snippet[line_start..]);\n         }\n     }\n }"}, {"sha": "6b3c223a4ff394ea1200386839b2f202270d16ac", "filename": "src/modules.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "patch": "@@ -15,7 +15,7 @@ use std::collections::HashMap;\n \n use syntax::ast;\n use syntax::codemap;\n-use syntax::parse::{parser, token};\n+use syntax::parse::parser;\n \n \n /// List all the files containing modules of a crate.\n@@ -42,8 +42,7 @@ fn list_submodules<'a>(module: &'a ast::Mod,\n                 let is_internal = codemap.span_to_filename(item.span) ==\n                                   codemap.span_to_filename(sub_mod.inner);\n                 let dir_path = if is_internal {\n-                    let dir: &str = &token::get_ident(item.ident);\n-                    search_dir.join(dir)\n+                    search_dir.join(&item.ident.to_string())\n                 } else {\n                     let mod_path = module_file(item.ident, &item.attrs, search_dir, codemap);\n                     let dir_path = mod_path.parent().unwrap().to_owned();\n@@ -68,6 +67,6 @@ fn module_file(id: ast::Ident,\n \n     match parser::Parser::default_submod_path(id, &dir_path, codemap).result {\n         Ok(parser::ModulePathSuccess { path, .. }) => path,\n-        Err(_) => panic!(\"Couldn't find module {}\", token::get_ident(id))\n+        Err(_) => panic!(\"Couldn't find module {}\", id)\n     }\n }"}, {"sha": "23908edf8d0517e13e660f8236ee0750a1048b86", "filename": "src/visitor.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eab4bf4307914368e6c79d09bbbed0e2a7fcc58/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=0eab4bf4307914368e6c79d09bbbed0e2a7fcc58", "patch": "@@ -12,15 +12,15 @@ use syntax::ast;\n use syntax::codemap::{self, CodeMap, Span, BytePos};\n use syntax::visit;\n \n+use strings::string_buffer::StringBuffer;\n+\n use utils;\n use config::Config;\n-\n-use changes::ChangeSet;\n use rewrite::{Rewrite, RewriteContext};\n \n pub struct FmtVisitor<'a> {\n     pub codemap: &'a CodeMap,\n-    pub changes: ChangeSet<'a>,\n+    pub buffer: StringBuffer,\n     pub last_pos: BytePos,\n     // TODO RAII util for indenting\n     pub block_indent: usize,\n@@ -33,7 +33,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                self.codemap.lookup_char_pos(ex.span.lo),\n                self.codemap.lookup_char_pos(ex.span.hi));\n         self.format_missing(ex.span.lo);\n-        let offset = self.changes.cur_offset_span(ex.span);\n+        let offset = self.buffer.cur_offset();\n         let context = RewriteContext {\n             codemap: self.codemap,\n             config: self.config,\n@@ -42,7 +42,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         let rewrite = ex.rewrite(&context, self.config.max_width - offset, offset);\n \n         if let Some(new_str) = rewrite {\n-            self.changes.push_str_span(ex.span, &new_str);\n+            self.buffer.push_str(&new_str);\n             self.last_pos = ex.span.hi;\n         }\n     }\n@@ -72,7 +72,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                self.codemap.lookup_char_pos(b.span.lo),\n                self.codemap.lookup_char_pos(b.span.hi));\n \n-        self.changes.push_str_span(b.span, \"{\");\n+        self.buffer.push_str(\"{\");\n         self.last_pos = self.last_pos + BytePos(1);\n         self.block_indent += self.config.tab_spaces;\n \n@@ -91,7 +91,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         self.block_indent -= self.config.tab_spaces;\n         // TODO we should compress any newlines here to just one\n         self.format_missing_with_indent(b.span.hi - BytePos(1));\n-        self.changes.push_str_span(b.span, \"}\");\n+        self.buffer.push_str(\"}\");\n         self.last_pos = b.span.hi;\n     }\n \n@@ -124,7 +124,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                                              abi,\n                                              vis,\n                                              codemap::mk_sp(s.lo, b.span.lo));\n-                self.changes.push_str_span(s, &new_fn);\n+                self.buffer.push_str(&new_fn);\n             }\n             visit::FkMethod(ident, ref sig, vis) => {\n                 let new_fn = self.rewrite_fn(indent,\n@@ -137,7 +137,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                                              &sig.abi,\n                                              vis.unwrap_or(ast::Visibility::Inherited),\n                                              codemap::mk_sp(s.lo, b.span.lo));\n-                self.changes.push_str_span(s, &new_fn);\n+                self.buffer.push_str(&new_fn);\n             }\n             visit::FkFnBlock(..) => {}\n         }\n@@ -173,7 +173,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             ast::Item_::ItemExternCrate(_) => {\n                 self.format_missing_with_indent(item.span.lo);\n                 let new_str = self.snippet(item.span);\n-                self.changes.push_str_span(item.span, &new_str);\n+                self.buffer.push_str(&new_str);\n                 self.last_pos = item.span.hi;\n             }\n             ast::Item_::ItemStruct(ref def, ref generics) => {\n@@ -217,7 +217,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                                                   sig,\n                                                   ti.span);\n \n-            self.changes.push_str_span(ti.span, &new_fn);\n+            self.buffer.push_str(&new_fn);\n             self.last_pos = ti.span.hi;\n         }\n         // TODO format trait types\n@@ -241,7 +241,7 @@ impl<'a> FmtVisitor<'a> {\n     pub fn from_codemap<'b>(codemap: &'b CodeMap, config: &'b Config) -> FmtVisitor<'b> {\n         FmtVisitor {\n             codemap: codemap,\n-            changes: ChangeSet::from_codemap(codemap),\n+            buffer: StringBuffer::new(),\n             last_pos: BytePos(0),\n             block_indent: 0,\n             config: config,\n@@ -273,7 +273,7 @@ impl<'a> FmtVisitor<'a> {\n             true\n         } else {\n             let rewrite = self.rewrite_attrs(attrs, self.block_indent);\n-            self.changes.push_str_span(first.span, &rewrite);\n+            self.buffer.push_str(&rewrite);\n             let last = attrs.last().unwrap();\n             self.last_pos = last.span.hi;\n             false\n@@ -363,7 +363,7 @@ impl<'a> FmtVisitor<'a> {\n             Some(ref s) => {\n                 let s = format!(\"{}use {};\", vis, s);\n                 self.format_missing_with_indent(span.lo);\n-                self.changes.push_str_span(span, &s);\n+                self.buffer.push_str(&s);\n                 self.last_pos = span.hi;\n             }\n             None => {"}]}