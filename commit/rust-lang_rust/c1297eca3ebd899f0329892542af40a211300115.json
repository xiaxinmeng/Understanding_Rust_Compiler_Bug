{"sha": "c1297eca3ebd899f0329892542af40a211300115", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMjk3ZWNhM2ViZDg5OWYwMzI5ODkyNTQyYWY0MGEyMTEzMDAxMTU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-10-07T21:35:51Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-10-09T17:00:11Z"}, "message": "unix/vxworks: make DirEntry slightly smaller\n\n`DirEntry` contains a `ReadDir` handle, which used to just be a wrapper\non `Arc<InnerReadDir>`. Commit af75314ecdbc5 added `end_of_stream: bool`\nwhich is not needed by `DirEntry`, but adds 8 bytes after padding. We\ncan let `DirEntry` have an `Arc<InnerReadDir>` directly to avoid that.", "tree": {"sha": "0e136335d1ade9086a3c5e55b11761a896a97cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e136335d1ade9086a3c5e55b11761a896a97cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1297eca3ebd899f0329892542af40a211300115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1297eca3ebd899f0329892542af40a211300115", "html_url": "https://github.com/rust-lang/rust/commit/c1297eca3ebd899f0329892542af40a211300115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1297eca3ebd899f0329892542af40a211300115/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a4c3b0baed8fb224e19380c576c86c12c38d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a4c3b0baed8fb224e19380c576c86c12c38d8c", "html_url": "https://github.com/rust-lang/rust/commit/53a4c3b0baed8fb224e19380c576c86c12c38d8c"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "9e37108c88724c935b373b01532e5c10832b7d90", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1297eca3ebd899f0329892542af40a211300115/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1297eca3ebd899f0329892542af40a211300115/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=c1297eca3ebd899f0329892542af40a211300115", "patch": "@@ -183,7 +183,6 @@ struct InnerReadDir {\n     root: PathBuf,\n }\n \n-#[derive(Clone)]\n pub struct ReadDir {\n     inner: Arc<InnerReadDir>,\n     end_of_stream: bool,\n@@ -196,7 +195,7 @@ unsafe impl Sync for Dir {}\n \n pub struct DirEntry {\n     entry: dirent64,\n-    dir: ReadDir,\n+    dir: Arc<InnerReadDir>,\n     // We need to store an owned copy of the entry name\n     // on Solaris and Fuchsia because a) it uses a zero-length\n     // array to store the name, b) its lifetime between readdir\n@@ -443,7 +442,7 @@ impl Iterator for ReadDir {\n                     name: slice::from_raw_parts(name as *const u8, namelen as usize)\n                         .to_owned()\n                         .into_boxed_slice(),\n-                    dir: self.clone(),\n+                    dir: Arc::clone(&self.inner),\n                 };\n                 if ret.name_bytes() != b\".\" && ret.name_bytes() != b\"..\" {\n                     return Some(Ok(ret));\n@@ -464,7 +463,7 @@ impl Iterator for ReadDir {\n         }\n \n         unsafe {\n-            let mut ret = DirEntry { entry: mem::zeroed(), dir: self.clone() };\n+            let mut ret = DirEntry { entry: mem::zeroed(), dir: Arc::clone(&self.inner) };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n                 if readdir64_r(self.inner.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n@@ -497,7 +496,7 @@ impl Drop for Dir {\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        self.dir.inner.root.join(OsStr::from_bytes(self.name_bytes()))\n+        self.dir.root.join(OsStr::from_bytes(self.name_bytes()))\n     }\n \n     pub fn file_name(&self) -> OsString {\n@@ -506,7 +505,7 @@ impl DirEntry {\n \n     #[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\"))]\n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        let fd = cvt(unsafe { dirfd(self.dir.inner.dirp.0) })?;\n+        let fd = cvt(unsafe { dirfd(self.dir.dirp.0) })?;\n         let name = self.entry.d_name.as_ptr();\n \n         cfg_has_statx! {"}, {"sha": "cb761af1a25c2d4ea123d3c2f73b35b4d1637927", "filename": "library/std/src/sys/vxworks/fs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1297eca3ebd899f0329892542af40a211300115/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1297eca3ebd899f0329892542af40a211300115/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffs.rs?ref=c1297eca3ebd899f0329892542af40a211300115", "patch": "@@ -27,7 +27,6 @@ struct InnerReadDir {\n     root: PathBuf,\n }\n \n-#[derive(Clone)]\n pub struct ReadDir {\n     inner: Arc<InnerReadDir>,\n     end_of_stream: bool,\n@@ -40,7 +39,7 @@ unsafe impl Sync for Dir {}\n \n pub struct DirEntry {\n     entry: dirent,\n-    dir: ReadDir,\n+    dir: Arc<InnerReadDir>,\n }\n \n #[derive(Clone, Debug)]\n@@ -170,7 +169,7 @@ impl Iterator for ReadDir {\n         }\n \n         unsafe {\n-            let mut ret = DirEntry { entry: mem::zeroed(), dir: self.clone() };\n+            let mut ret = DirEntry { entry: mem::zeroed(), dir: Arc::clone(&self.inner) };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n                 if readdir64_r(self.inner.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n@@ -204,7 +203,7 @@ impl Drop for Dir {\n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n         use crate::sys::vxworks::ext::ffi::OsStrExt;\n-        self.dir.inner.root.join(OsStr::from_bytes(self.name_bytes()))\n+        self.dir.root.join(OsStr::from_bytes(self.name_bytes()))\n     }\n \n     pub fn file_name(&self) -> OsString {"}]}