{"sha": "d6f161ffa900db3e88ff262571971b8dde7a8a91", "node_id": "C_kwDOAAsO6NoAKGQ2ZjE2MWZmYTkwMGRiM2U4OGZmMjYyNTcxOTcxYjhkZGU3YThhOTE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T15:15:29Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T15:15:29Z"}, "message": "internal: Collapse lift is_infer_qualifier into `Qualified` variant", "tree": {"sha": "1ad11955eab598d018c756a2c36f7798e061c08a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ad11955eab598d018c756a2c36f7798e061c08a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6f161ffa900db3e88ff262571971b8dde7a8a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f161ffa900db3e88ff262571971b8dde7a8a91", "html_url": "https://github.com/rust-lang/rust/commit/d6f161ffa900db3e88ff262571971b8dde7a8a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6f161ffa900db3e88ff262571971b8dde7a8a91/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f2ea77d88c86a61111f060069146d529065ff2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2ea77d88c86a61111f060069146d529065ff2e", "html_url": "https://github.com/rust-lang/rust/commit/2f2ea77d88c86a61111f060069146d529065ff2e"}], "stats": {"total": 81, "additions": 41, "deletions": 40}, "files": [{"sha": "096e24eab330a455258f41bcf71b2675922405de", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -112,6 +112,7 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n+        Qualified::Infer => {}\n     }\n \n     let attributes = annotated_item_kind.and_then(|kind| {"}, {"sha": "0f78fc988d7392341231ddd0286dc23b40238d14", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -101,6 +101,7 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n+        Qualified::Infer => {}\n     }\n }\n "}, {"sha": "41e1dc9f916d947ab61a8ca236b4dc0f04b95e97", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -61,15 +61,13 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n     };\n \n     match qualified {\n-        Qualified::With(PathQualifierCtx { is_infer_qualifier, resolution, .. }) => {\n-            if *is_infer_qualifier {\n-                ctx.traits_in_scope()\n-                    .0\n-                    .into_iter()\n-                    .flat_map(|it| hir::Trait::from(it).items(ctx.sema.db))\n-                    .for_each(|item| add_assoc_item(acc, ctx, item));\n-                return;\n-            }\n+        Qualified::Infer => ctx\n+            .traits_in_scope()\n+            .0\n+            .into_iter()\n+            .flat_map(|it| hir::Trait::from(it).items(ctx.sema.db))\n+            .for_each(|item| add_assoc_item(acc, ctx, item)),\n+        Qualified::With(PathQualifierCtx { resolution, .. }) => {\n             let resolution = match resolution {\n                 Some(it) => it,\n                 None => return,"}, {"sha": "9c8fbb84f5a6e7672cc5fe72ea5cc9d492c6821c", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -66,7 +66,7 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n-        Qualified::No => {}\n+        Qualified::Infer | Qualified::No => {}\n     }\n }\n "}, {"sha": "8dedcc35ec1200f732ddb24b15292267a3c730b9", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -208,5 +208,6 @@ fn pattern_path_completion(\n \n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n+        Qualified::Infer => {}\n     }\n }"}, {"sha": "d2dab9f4edf0c17489c999d49f88e42e3dba2350", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -55,15 +55,13 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n     };\n \n     match qualified {\n-        Qualified::With(PathQualifierCtx { is_infer_qualifier, resolution, .. }) => {\n-            if *is_infer_qualifier {\n-                ctx.traits_in_scope()\n-                    .0\n-                    .into_iter()\n-                    .flat_map(|it| hir::Trait::from(it).items(ctx.sema.db))\n-                    .for_each(|item| add_assoc_item(acc, item));\n-                return;\n-            }\n+        Qualified::Infer => ctx\n+            .traits_in_scope()\n+            .0\n+            .into_iter()\n+            .flat_map(|it| hir::Trait::from(it).items(ctx.sema.db))\n+            .for_each(|item| add_assoc_item(acc, item)),\n+        Qualified::With(PathQualifierCtx { resolution, .. }) => {\n             let resolution = match resolution {\n                 Some(it) => it,\n                 None => return,"}, {"sha": "33b50f22f53c9129b4dcb1b36642bb10e8126953", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -24,13 +24,7 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n     };\n \n     match qualified {\n-        Qualified::With(PathQualifierCtx {\n-            path,\n-            resolution,\n-            is_super_chain,\n-            use_tree_parent,\n-            ..\n-        }) => {\n+        Qualified::With(PathQualifierCtx { path, resolution, is_super_chain, use_tree_parent }) => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n@@ -136,5 +130,6 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n+        Qualified::Infer => {}\n     }\n }"}, {"sha": "d27fc8f4463477c24392aeef7d61e8c82629743a", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -37,7 +37,7 @@ pub(crate) fn complete_vis_path(acc: &mut Completions, ctx: &CompletionContext)\n                 acc.add_keyword(ctx, \"super::\");\n             }\n         }\n-        Qualified::Absolute => {}\n+        Qualified::Absolute | Qualified::Infer => {}\n         Qualified::No => {\n             if !has_in_token {\n                 cov_mark::hit!(kw_completion_in);"}, {"sha": "e2bf4284f50091716a58d9eb66830d6d1a231a7e", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -150,6 +150,8 @@ pub(super) enum ItemListKind {\n pub(super) enum Qualified {\n     No,\n     With(PathQualifierCtx),\n+    /// <_>::\n+    Infer,\n     /// Whether the path is an absolute path\n     Absolute,\n }\n@@ -163,8 +165,6 @@ pub(crate) struct PathQualifierCtx {\n     pub(crate) is_super_chain: bool,\n     /// Whether the qualifier comes from a use tree parent or not\n     pub(crate) use_tree_parent: bool,\n-    /// <_>\n-    pub(crate) is_infer_qualifier: bool,\n }\n \n /// The state of the pattern we are completing.\n@@ -320,13 +320,16 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) expected_type: Option<Type>,\n \n     /// The parent function of the cursor position if it exists.\n+    // FIXME: This probably doesn't belong here\n     pub(super) function_def: Option<ast::Fn>,\n     /// The parent impl of the cursor position if it exists.\n+    // FIXME: This probably doesn't belong here\n     pub(super) impl_def: Option<ast::Impl>,\n     /// Are we completing inside a let statement with a missing semicolon?\n     // FIXME: This should be part of PathKind::Expr\n     pub(super) incomplete_let: bool,\n \n+    // FIXME: This shouldn't exist\n     pub(super) previous_token: Option<SyntaxToken>,\n \n     pub(super) ident_ctx: IdentContext,\n@@ -354,6 +357,7 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n+    // FIXME: This shouldn't exist\n     pub(crate) fn previous_token_is(&self, kind: SyntaxKind) -> bool {\n         self.previous_token.as_ref().map_or(false, |tok| tok.kind() == kind)\n     }"}, {"sha": "57d6682b4ba0165884e871dcc648ccd6099eac95", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f161ffa900db3e88ff262571971b8dde7a8a91/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=d6f161ffa900db3e88ff262571971b8dde7a8a91", "patch": "@@ -861,10 +861,6 @@ impl<'a> CompletionContext<'a> {\n                     .and_then(|it| find_node_in_file(original_file, &it))\n                     .map(|it| it.parent_path());\n                 if let Some(path) = path {\n-                    let res = sema.resolve_path(&path);\n-                    let is_super_chain = iter::successors(Some(path.clone()), |p| p.qualifier())\n-                        .all(|p| p.segment().and_then(|s| s.super_token()).is_some());\n-\n                     // `<_>::$0`\n                     let is_infer_qualifier = path.qualifier().is_none()\n                         && matches!(\n@@ -875,13 +871,20 @@ impl<'a> CompletionContext<'a> {\n                             })\n                         );\n \n-                    path_ctx.qualified = Qualified::With(PathQualifierCtx {\n-                        path,\n-                        resolution: res,\n-                        is_super_chain,\n-                        use_tree_parent,\n-                        is_infer_qualifier,\n-                    })\n+                    path_ctx.qualified = if is_infer_qualifier {\n+                        Qualified::Infer\n+                    } else {\n+                        let res = sema.resolve_path(&path);\n+                        let is_super_chain =\n+                            iter::successors(Some(path.clone()), |p| p.qualifier())\n+                                .all(|p| p.segment().and_then(|s| s.super_token()).is_some());\n+                        Qualified::With(PathQualifierCtx {\n+                            path,\n+                            resolution: res,\n+                            is_super_chain,\n+                            use_tree_parent,\n+                        })\n+                    }\n                 };\n             }\n         } else if let Some(segment) = path.segment() {"}]}