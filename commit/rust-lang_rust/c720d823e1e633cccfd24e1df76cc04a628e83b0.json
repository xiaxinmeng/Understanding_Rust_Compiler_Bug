{"sha": "c720d823e1e633cccfd24e1df76cc04a628e83b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MjBkODIzZTFlNjMzY2NjZmQyNGUxZGY3NmNjMDRhNjI4ZTgzYjA=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-07-14T18:27:25Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-07-19T22:30:43Z"}, "message": "redundant_closure_call - don't lint when used more than once", "tree": {"sha": "a5544ba2a1d9d459c943c087fcac902b4ddcc879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5544ba2a1d9d459c943c087fcac902b4ddcc879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c720d823e1e633cccfd24e1df76cc04a628e83b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c720d823e1e633cccfd24e1df76cc04a628e83b0", "html_url": "https://github.com/rust-lang/rust/commit/c720d823e1e633cccfd24e1df76cc04a628e83b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c720d823e1e633cccfd24e1df76cc04a628e83b0/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf4219c1673533eb5caf304237bffaa8e847067", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf4219c1673533eb5caf304237bffaa8e847067", "html_url": "https://github.com/rust-lang/rust/commit/8cf4219c1673533eb5caf304237bffaa8e847067"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "125df226ceb3793c3ea97d08ec7fc33e8598a64e", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c720d823e1e633cccfd24e1df76cc04a628e83b0/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c720d823e1e633cccfd24e1df76cc04a628e83b0/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=c720d823e1e633cccfd24e1df76cc04a628e83b0", "patch": "@@ -14,6 +14,7 @@ use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for structure field patterns bound to wildcards.\n@@ -493,6 +494,29 @@ impl EarlyLintPass for MiscEarlyLints {\n     }\n \n     fn check_block(&mut self, cx: &EarlyContext<'_>, block: &Block) {\n+        fn count_closure_usage(block: &Block, ident: &Ident) -> usize {\n+            struct ClosureUsageCount<'ast> {\n+                ident: &'ast Ident,\n+                count: usize,\n+            };\n+            impl<'ast> Visitor<'ast> for ClosureUsageCount<'ast> {\n+                fn visit_expr(&mut self, expr: &'ast Expr) {\n+                    if_chain! {\n+                        if let ExprKind::Call(ref closure, _) = expr.kind;\n+                        if let ExprKind::Path(_, ref path) = closure.kind;\n+                        if self.ident == &path.segments[0].ident;\n+                        then {\n+                            self.count += 1;\n+                        }\n+                    }\n+                    walk_expr(self, expr);\n+                }\n+            }\n+            let mut closure_usage_count = ClosureUsageCount { ident, count: 0 };\n+            closure_usage_count.visit_block(block);\n+            closure_usage_count.count\n+        }\n+\n         for w in block.stmts.windows(2) {\n             if_chain! {\n                 if let StmtKind::Local(ref local) = w[0].kind;\n@@ -503,15 +527,15 @@ impl EarlyLintPass for MiscEarlyLints {\n                 if let ExprKind::Assign(_, ref call, _) = second.kind;\n                 if let ExprKind::Call(ref closure, _) = call.kind;\n                 if let ExprKind::Path(_, ref path) = closure.kind;\n+                if ident == path.segments[0].ident;\n+                if  count_closure_usage(block, &ident) == 1;\n                 then {\n-                    if ident == path.segments[0].ident {\n-                        span_lint(\n-                            cx,\n-                            REDUNDANT_CLOSURE_CALL,\n-                            second.span,\n-                            \"Closure called just once immediately after it was declared\",\n-                        );\n-                    }\n+                    span_lint(\n+                        cx,\n+                        REDUNDANT_CLOSURE_CALL,\n+                        second.span,\n+                        \"Closure called just once immediately after it was declared\",\n+                    );\n                 }\n             }\n         }"}, {"sha": "0f2ba4a075dd58db9bc3adf0f90d7de148f15e53", "filename": "tests/ui/redundant_closure_call.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c720d823e1e633cccfd24e1df76cc04a628e83b0/tests%2Fui%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c720d823e1e633cccfd24e1df76cc04a628e83b0/tests%2Fui%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.rs?ref=c720d823e1e633cccfd24e1df76cc04a628e83b0", "patch": "@@ -8,14 +8,21 @@ fn main() {\n \n     k = (|a, b| a * b)(1, 5);\n \n-    let closure = || 32;\n-    i = closure();\n-\n+    // don't lint here, the closure is used more than once\n     let closure = |i| i + 1;\n     i = closure(3);\n-\n     i = closure(4);\n \n+    // lint here\n+    let redun_closure = || 1;\n+    i = redun_closure();\n+\n+    // the lint is applicable here but the lint doesn't support redefinition\n+    let redefined_closure = || 1;\n+    i = redefined_closure();\n+    let redefined_closure = || 2;\n+    i = redefined_closure();\n+\n     #[allow(clippy::needless_return)]\n     (|| return 2)();\n     (|| -> Option<i32> { None? })();"}, {"sha": "d5e0664319b86fdaa5a07f5f76ae6f24fe7fa628", "filename": "tests/ui/redundant_closure_call.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c720d823e1e633cccfd24e1df76cc04a628e83b0/tests%2Fui%2Fredundant_closure_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c720d823e1e633cccfd24e1df76cc04a628e83b0/tests%2Fui%2Fredundant_closure_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.stderr?ref=c720d823e1e633cccfd24e1df76cc04a628e83b0", "patch": "@@ -1,17 +1,11 @@\n error: Closure called just once immediately after it was declared\n-  --> $DIR/redundant_closure_call.rs:12:5\n+  --> $DIR/redundant_closure_call.rs:18:5\n    |\n-LL |     i = closure();\n-   |     ^^^^^^^^^^^^^\n+LL |     i = redun_closure();\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n \n-error: Closure called just once immediately after it was declared\n-  --> $DIR/redundant_closure_call.rs:15:5\n-   |\n-LL |     i = closure(3);\n-   |     ^^^^^^^^^^^^^^\n-\n error: Try not to call a closure in the expression where it is declared.\n   --> $DIR/redundant_closure_call.rs:7:17\n    |\n@@ -24,5 +18,5 @@ error: Try not to call a closure in the expression where it is declared.\n LL |     k = (|a, b| a * b)(1, 5);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}]}