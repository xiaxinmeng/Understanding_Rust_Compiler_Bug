{"sha": "4c793538d4c7b5ee28c5021635ae8526919ab98a", "node_id": "C_kwDOAAsO6NoAKDRjNzkzNTM4ZDRjN2I1ZWUyOGM1MDIxNjM1YWU4NTI2OTE5YWI5OGE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-08T16:09:18Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-08T16:14:04Z"}, "message": "update `ty::TyKind` documentation", "tree": {"sha": "5a328fd2015e3015ffc2c84381fb4f0b487ec982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a328fd2015e3015ffc2c84381fb4f0b487ec982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c793538d4c7b5ee28c5021635ae8526919ab98a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c793538d4c7b5ee28c5021635ae8526919ab98a", "html_url": "https://github.com/rust-lang/rust/commit/4c793538d4c7b5ee28c5021635ae8526919ab98a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c793538d4c7b5ee28c5021635ae8526919ab98a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775e480722c7aba6ff4ff3ccec8c1f4639ae7889", "url": "https://api.github.com/repos/rust-lang/rust/commits/775e480722c7aba6ff4ff3ccec8c1f4639ae7889", "html_url": "https://github.com/rust-lang/rust/commit/775e480722c7aba6ff4ff3ccec8c1f4639ae7889"}], "stats": {"total": 88, "additions": 68, "deletions": 20}, "files": [{"sha": "028f9db368f3ae8678b39968cd11d531cf038b2d", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 67, "deletions": 19, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/4c793538d4c7b5ee28c5021635ae8526919ab98a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c793538d4c7b5ee28c5021635ae8526919ab98a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4c793538d4c7b5ee28c5021635ae8526919ab98a", "patch": "@@ -74,10 +74,10 @@ impl BoundRegionKind {\n     }\n }\n \n-/// Defines the kinds of types.\n+/// Defines the kinds of types used by the type system.\n ///\n-/// N.B., if you change this, you'll probably want to change the corresponding\n-/// AST structure in `rustc_ast/src/ast.rs` as well.\n+/// Types written by the user start out as [hir::TyKind](rustc_hir::TyKind) and get\n+/// converted to this representation using `AstConv::ast_ty_to_ty`.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]\n #[derive(HashStable)]\n #[rustc_diagnostic_item = \"TyKind\"]\n@@ -100,10 +100,11 @@ pub enum TyKind<'tcx> {\n \n     /// Algebraic data types (ADT). For example: structures, enumerations and unions.\n     ///\n-    /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.\n-    /// That is, even after substitution it is possible that there are type\n-    /// variables. This happens when the `Adt` corresponds to an ADT\n-    /// definition and not a concrete use of it.\n+    /// For example, the type `List<i32>` would be represented using the `AdtDef`\n+    /// for `struct List<T>` and the substs `[i32]`.\n+    ///\n+    /// Note that generic parameters in fields only get lazily substituted\n+    /// by using something like `adt_def.all_fields().map(|field| field.ty(tcx, substs))`.\n     Adt(&'tcx AdtDef, SubstsRef<'tcx>),\n \n     /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.\n@@ -112,7 +113,7 @@ pub enum TyKind<'tcx> {\n     /// The pointee of a string slice. Written as `str`.\n     Str,\n \n-    /// An array with the given length. Written as `[T; n]`.\n+    /// An array with the given length. Written as `[T; N]`.\n     Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),\n \n     /// The pointee of an array slice. Written as `[T]`.\n@@ -126,11 +127,12 @@ pub enum TyKind<'tcx> {\n     Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),\n \n     /// The anonymous type of a function declaration/definition. Each\n-    /// function has a unique type, which is output (for a function\n-    /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.\n+    /// function has a unique type.\n     ///\n-    /// For example the type of `bar` here:\n+    /// For the function `fn foo() -> i32 { 3 }` this type would be\n+    /// shown to the user as `fn() -> i32 {foo}`.\n     ///\n+    /// For example the type of `bar` here:\n     /// ```rust\n     /// fn foo() -> i32 { 1 }\n     /// let bar = foo; // bar: fn() -> i32 {foo}\n@@ -139,6 +141,9 @@ pub enum TyKind<'tcx> {\n \n     /// A pointer to a function. Written as `fn() -> i32`.\n     ///\n+    /// Note that both functions and closures start out as either\n+    /// [FnDef] or [Closure] which can be then be coerced to this variant.\n+    ///\n     /// For example the type of `bar` here:\n     ///\n     /// ```rust\n@@ -150,17 +155,41 @@ pub enum TyKind<'tcx> {\n     /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.\n     Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),\n \n-    /// The anonymous type of a closure. Used to represent the type of\n-    /// `|a| a`.\n-    /// For the order of the substs see the `ClosureSubsts` type's documentation.\n+    /// The anonymous type of a closure. Used to represent the type of `|a| a`.\n+    ///\n+    /// Closure substs contain both the - potentially substituted - generic parameters\n+    /// of its parent and some synthetic parameters. See the documentation for\n+    /// [ClosureSubsts] for more details.\n     Closure(DefId, SubstsRef<'tcx>),\n \n     /// The anonymous type of a generator. Used to represent the type of\n     /// `|a| yield a`.\n+    ///\n+    /// For more info about generator substs, visit the documentation for\n+    /// [GeneratorSubsts].\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n \n     /// A type representing the types stored inside a generator.\n-    /// This should only appear in GeneratorInteriors.\n+    /// This should only appear as part of the [GeneratorSubsts].\n+    ///\n+    /// Note that the captured variables for generators are stored separately\n+    /// using a tuple in the same way as for closures.\n+    ///\n+    /// Unlike upvars, the witness can reference lifetimes from\n+    /// inside of the generator itself. To deal with them in\n+    /// the type of the generator, we convert them to higher ranked\n+    /// lifetimes bound by the witness itself.\n+    ///\n+    /// Looking at the following example, the witness for this generator\n+    /// may end up as something like `for<'a> [Vec<i32>, &'a Vec<i32>]`:\n+    ///\n+    /// ```rust\n+    /// |a| {\n+    ///     let x = &vec![3];\n+    ///     yield a;\n+    ///     yield x[0];\n+    /// }\n+    /// ```\n     GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),\n \n     /// The never type `!`.\n@@ -175,23 +204,42 @@ pub enum TyKind<'tcx> {\n     Projection(ProjectionTy<'tcx>),\n \n     /// Opaque (`impl Trait`) type found in a return type.\n+    ///\n     /// The `DefId` comes either from\n     /// * the `impl Trait` ast::Ty node,\n     /// * or the `type Foo = impl Trait` declaration\n-    /// The substitutions are for the generics of the function in question.\n-    /// After typeck, the concrete type can be found in the `types` map.\n+    ///\n+    /// For RTIT the substitutions are for the generics of the function,\n+    /// while for TAIT it is used for the generic parameters of the alias.\n     Opaque(DefId, SubstsRef<'tcx>),\n \n     /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.\n     Param(ParamTy),\n \n-    /// Bound type variable, used only when preparing a trait query.\n+    /// Bound type variable, used to represent the `'a` in `for<'a> fn(&'a ())`.\n+    ///\n+    /// For canonical queries, we replace inference variables with bound variables,\n+    /// so e.g. when checking whether `&'_ (): Trait<_>` holds, we canonicalize that to\n+    /// `for<'a, T> &'a (): Trait<T>` and then convert the introduced bound variables\n+    /// back to inference variables in a new inference context when inside of the query.\n+    ///\n+    /// See the `rustc-dev-guide` for more details about\n+    /// [higher-ranked trait bounds][1] and [canonical queries][2].\n+    ///\n+    /// [1]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n+    /// [2]: https://rustc-dev-guide.rust-lang.org/traits/canonical-queries.html\n     Bound(ty::DebruijnIndex, BoundTy),\n \n-    /// A placeholder type - universally quantified higher-ranked type.\n+    /// A placeholder type, used during higher ranked subtyping to instantiate\n+    /// bound variables.\n     Placeholder(ty::PlaceholderType),\n \n     /// A type variable used during type checking.\n+    ///\n+    /// Similar to placeholders, inference variables also live in a universe to\n+    /// correctly deal with higher ranked types. Though unlike placeholders,\n+    /// that universe is stored in the `InferCtxt` instead of directly\n+    /// inside of the type.\n     Infer(InferTy),\n \n     /// A placeholder for a type which could not be computed; this is"}, {"sha": "e8a828b7ea7d7e818310a28720f5b035c9136532", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c793538d4c7b5ee28c5021635ae8526919ab98a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c793538d4c7b5ee28c5021635ae8526919ab98a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=4c793538d4c7b5ee28c5021635ae8526919ab98a", "patch": "@@ -208,7 +208,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     };\n     intravisit::walk_body(&mut visitor, body);\n \n-    // Check that we visited the same amount of expressions and the RegionResolutionVisitor\n+    // Check that we visited the same amount of expressions as the RegionResolutionVisitor\n     let region_expr_count = visitor.region_scope_tree.body_expr_count(body_id).unwrap();\n     assert_eq!(region_expr_count, visitor.expr_count);\n "}]}