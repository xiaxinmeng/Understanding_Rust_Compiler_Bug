{"sha": "c06efa380debe52dfdc965e23d3d4f2885a30ff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNmVmYTM4MGRlYmU1MmRmZGM5NjVlMjNkM2Q0ZjI4ODVhMzBmZjQ=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-12-21T19:06:46Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-12-22T13:13:34Z"}, "message": "Build aarch64-apple-darwin binaries on CI", "tree": {"sha": "3bd9d10a0add723846b77f6587a81f6a46ef3b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bd9d10a0add723846b77f6587a81f6a46ef3b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06efa380debe52dfdc965e23d3d4f2885a30ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06efa380debe52dfdc965e23d3d4f2885a30ff4", "html_url": "https://github.com/rust-lang/rust/commit/c06efa380debe52dfdc965e23d3d4f2885a30ff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06efa380debe52dfdc965e23d3d4f2885a30ff4/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b98ee075ee8baa6dc4284f04df4c7012baccda28", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98ee075ee8baa6dc4284f04df4c7012baccda28", "html_url": "https://github.com/rust-lang/rust/commit/b98ee075ee8baa6dc4284f04df4c7012baccda28"}], "stats": {"total": 186, "additions": 154, "deletions": 32}, "files": [{"sha": "09752b817f0b3a5a402126cf03779d8679228ff7", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 96, "deletions": 18, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/c06efa380debe52dfdc965e23d3d4f2885a30ff4/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/c06efa380debe52dfdc965e23d3d4f2885a30ff4/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=c06efa380debe52dfdc965e23d3d4f2885a30ff4", "patch": "@@ -15,12 +15,9 @@ env:\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:\n-  dist:\n-    name: dist\n-    runs-on: ${{ matrix.os }}\n-    strategy:\n-      matrix:\n-        os: [ubuntu-16.04, windows-latest, macos-latest]\n+  dist-windows:\n+    name: dist (Windows)\n+    runs-on: windows-latest\n \n     steps:\n     - name: Checkout repository\n@@ -30,8 +27,7 @@ jobs:\n     # which takes a long time. The fastest way to do this is to rename the\n     # existing folder, as deleting it takes about as much time as not doing\n     # anything and just updating rust-docs.\n-    - name: Rename existing rust toolchain (Windows)\n-      if: matrix.os == 'windows-latest'\n+    - name: Rename existing rust toolchain\n       run: Rename-Item C:\\Users\\runneradmin\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc C:\\Users\\runneradmin\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc.old\n \n     - name: Install Rust toolchain\n@@ -41,38 +37,116 @@ jobs:\n         profile: minimal\n         override: true\n \n+    - name: Dist\n+      run: cargo xtask dist\n+      env:\n+        RA_TARGET: x86_64-pc-windows-msvc\n+\n+    - name: Upload artifacts\n+      uses: actions/upload-artifact@v1\n+      with:\n+        name: dist-windows-latest\n+        path: ./dist\n+\n+  dist-ubuntu:\n+    name: dist (Ubuntu 16.04)\n+    runs-on: ubuntu-16.04\n+\n+    steps:\n+    - name: Checkout repository\n+      uses: actions/checkout@v2\n+\n+    - name: Install Rust toolchain\n+      uses: actions-rs/toolchain@v1\n+      with:\n+        toolchain: stable\n+        profile: minimal\n+        override: true\n+\n     - name: Install Nodejs\n-      if: matrix.os == 'ubuntu-16.04'\n       uses: actions/setup-node@v1\n       with:\n         node-version: 12.x\n \n     - name: Dist\n-      if: matrix.os == 'ubuntu-16.04' && github.ref == 'refs/heads/release'\n+      if: github.ref == 'refs/heads/release'\n       run: cargo xtask dist --client 0.2.$GITHUB_RUN_NUMBER\n+      env:\n+        RA_TARGET: x86_64-unknown-linux-gnu\n \n     - name: Dist\n-      if: matrix.os == 'ubuntu-16.04' && github.ref != 'refs/heads/release'\n+      if: github.ref != 'refs/heads/release'\n       run: cargo xtask dist --nightly --client 0.3.$GITHUB_RUN_NUMBER-nightly\n+      env:\n+        RA_TARGET: x86_64-unknown-linux-gnu\n+\n+    - name: Nightly analysis-stats check\n+      if: github.ref != 'refs/heads/release'\n+      run: ./dist/rust-analyzer-x86_64-unknown-linux-gnu analysis-stats .\n+\n+    - name: Upload artifacts\n+      uses: actions/upload-artifact@v1\n+      with:\n+        name: dist-ubuntu-16.04\n+        path: ./dist\n+\n+  dist-macos-latest:\n+    name: dist (MacOS latest)\n+    runs-on: macos-latest\n+\n+    steps:\n+    - name: Checkout repository\n+      uses: actions/checkout@v2\n+\n+    - name: Install Rust toolchain\n+      uses: actions-rs/toolchain@v1\n+      with:\n+        toolchain: stable\n+        profile: minimal\n+        override: true\n \n     - name: Dist\n-      if: matrix.os != 'ubuntu-16.04'\n       run: cargo xtask dist\n+      env:\n+        RA_TARGET: x86_64-apple-darwin\n \n-    - name: Nightly analysis-stats check\n-      if: matrix.os == 'ubuntu-16.04' && github.ref != 'refs/heads/release'\n-      run: ./dist/rust-analyzer-linux analysis-stats .\n+    - name: Upload artifacts\n+      uses: actions/upload-artifact@v1\n+      with:\n+        name: dist-macos-latest\n+        path: ./dist\n+\n+  dist-macos-11:\n+    name: dist (MacOS 11.0)\n+    runs-on: macos-11.0\n+\n+    steps:\n+    - name: Checkout repository\n+      uses: actions/checkout@v2\n+\n+    - name: Install Rust toolchain (beta)\n+      uses: actions-rs/toolchain@v1\n+      with:\n+        toolchain: beta\n+        target: aarch64-apple-darwin\n+        profile: minimal\n+        override: true\n+\n+    - name: Dist\n+      run: cargo xtask dist\n+      env:\n+        RA_TARGET: aarch64-apple-darwin\n \n     - name: Upload artifacts\n       uses: actions/upload-artifact@v1\n       with:\n-        name: dist-${{ matrix.os }}\n+        name: dist-macos-11.0\n         path: ./dist\n \n   publish:\n     name: publish\n     runs-on: ubuntu-16.04\n-    needs: ['dist']\n+    needs: ['dist-windows', 'dist-ubuntu', 'dist-macos-latest', 'dist-macos-11']\n     steps:\n     - name: Install Nodejs\n       uses: actions/setup-node@v1\n@@ -91,6 +165,10 @@ jobs:\n     - run: echo \"HEAD_SHA=$(git rev-parse HEAD)\" >> $GITHUB_ENV\n     - run: 'echo \"HEAD_SHA: $HEAD_SHA\"'\n \n+    - uses: actions/download-artifact@v1\n+      with:\n+        name: dist-macos-11.0\n+        path: dist\n     - uses: actions/download-artifact@v1\n       with:\n         name: dist-macos-latest\n@@ -103,7 +181,7 @@ jobs:\n       with:\n         name: dist-windows-latest\n         path: dist\n-    - run: ls -all ./dist\n+    - run: ls -al ./dist\n \n     - name: Publish Release\n       uses: ./.github/actions/github-release"}, {"sha": "d07ad94204cfe0858dae2537077e67afccb41bf5", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c06efa380debe52dfdc965e23d3d4f2885a30ff4/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06efa380debe52dfdc965e23d3d4f2885a30ff4/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=c06efa380debe52dfdc965e23d3d4f2885a30ff4", "patch": "@@ -58,30 +58,74 @@ fn dist_client(version: &str, release_tag: &str) -> Result<()> {\n }\n \n fn dist_server() -> Result<()> {\n-    if cfg!(target_os = \"linux\") {\n+    let target = get_target();\n+    if target.contains(\"-linux-gnu\") {\n         env::set_var(\"CC\", \"clang\");\n     }\n-    cmd!(\"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\").run()?;\n-\n-    let (src, dst) = if cfg!(target_os = \"linux\") {\n-        (\"./target/release/rust-analyzer\", \"./dist/rust-analyzer-linux\")\n-    } else if cfg!(target_os = \"windows\") {\n-        (\"./target/release/rust-analyzer.exe\", \"./dist/rust-analyzer-windows.exe\")\n-    } else if cfg!(target_os = \"macos\") {\n-        (\"./target/release/rust-analyzer\", \"./dist/rust-analyzer-mac\")\n-    } else {\n-        panic!(\"Unsupported OS\")\n-    };\n \n-    let src = Path::new(src);\n-    let dst = Path::new(dst);\n+    let toolchain = toolchain(&target);\n+    cmd!(\"cargo +{toolchain} build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --target {target} --release\").run()?;\n \n+    let suffix = exe_suffix(&target);\n+    let src =\n+        Path::new(\"target\").join(&target).join(\"release\").join(format!(\"rust-analyzer{}\", suffix));\n+    let dst = Path::new(\"dist\").join(format!(\"rust-analyzer-{}{}\", target, suffix));\n     cp(&src, &dst)?;\n     gzip(&src, &dst.with_extension(\"gz\"))?;\n \n+    // FIXME: the old names are temporarily kept for client compatibility, but they should be removed\n+    // Remove this block after a couple of releases\n+    match target.as_ref() {\n+        \"x86_64-unknown-linux-gnu\" => {\n+            cp(&src, \"dist/rust-analyzer-linux\")?;\n+            gzip(&src, Path::new(\"dist/rust-analyzer-linux.gz\"))?;\n+        }\n+        \"x86_64-pc-windows-msvc\" => {\n+            cp(&src, \"dist/rust-analyzer-windows.exe\")?;\n+            gzip(&src, Path::new(\"dist/rust-analyzer-windows.gz\"))?;\n+        }\n+        \"x86_64-apple-darwin\" => {\n+            cp(&src, \"dist/rust-analyzer-mac\")?;\n+            gzip(&src, Path::new(\"dist/rust-analyzer-mac.gz\"))?;\n+        }\n+        _ => {}\n+    }\n+\n     Ok(())\n }\n \n+fn get_target() -> String {\n+    match env::var(\"RA_TARGET\") {\n+        Ok(target) => target,\n+        _ => {\n+            if cfg!(target_os = \"linux\") {\n+                \"x86_64-unknown-linux-gnu\".to_string()\n+            } else if cfg!(target_os = \"windows\") {\n+                \"x86_64-pc-windows-msvc\".to_string()\n+            } else if cfg!(target_os = \"macos\") {\n+                \"x86_64-apple-darwin\".to_string()\n+            } else {\n+                panic!(\"Unsupported OS, maybe try setting RA_TARGET\")\n+            }\n+        }\n+    }\n+}\n+\n+fn exe_suffix(target: &str) -> String {\n+    if target.contains(\"-windows-\") {\n+        \".exe\".into()\n+    } else {\n+        \"\".into()\n+    }\n+}\n+\n+fn toolchain(target: &str) -> String {\n+    match target {\n+        \"aarch64-apple-darwin\" => \"beta\".to_string(),\n+        _ => \"stable\".to_string(),\n+    }\n+}\n+\n fn gzip(src_path: &Path, dest_path: &Path) -> Result<()> {\n     let mut encoder = GzEncoder::new(File::create(dest_path)?, Compression::best());\n     let mut input = io::BufReader::new(File::open(src_path)?);"}]}