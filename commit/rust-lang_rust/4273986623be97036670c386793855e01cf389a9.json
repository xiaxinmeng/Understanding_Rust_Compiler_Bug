{"sha": "4273986623be97036670c386793855e01cf389a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNzM5ODY2MjNiZTk3MDM2NjcwYzM4Njc5Mzg1NWUwMWNmMzg5YTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-02T02:30:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-02T02:30:35Z"}, "message": "Remove similar over-application of auto-deref from type.", "tree": {"sha": "34cb1daa64249de2038398f989d985d97e6b3a61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34cb1daa64249de2038398f989d985d97e6b3a61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4273986623be97036670c386793855e01cf389a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4273986623be97036670c386793855e01cf389a9", "html_url": "https://github.com/rust-lang/rust/commit/4273986623be97036670c386793855e01cf389a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4273986623be97036670c386793855e01cf389a9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65a87a55a1795ecf1485ab1c3ac6f5af1e792bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/65a87a55a1795ecf1485ab1c3ac6f5af1e792bf7", "html_url": "https://github.com/rust-lang/rust/commit/65a87a55a1795ecf1485ab1c3ac6f5af1e792bf7"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "c0e711733d172ca53345604943440ed5c360d0e6", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4273986623be97036670c386793855e01cf389a9/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4273986623be97036670c386793855e01cf389a9/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=4273986623be97036670c386793855e01cf389a9", "patch": "@@ -1132,7 +1132,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n             let tvrec = ref (TYSPEC_record dct) in\n             let add_field (ident, atom) =\n               let tv = any() in\n-                unify_atom rval_ctx atom tv;\n+                unify_atom arg_pass_ctx atom tv;\n                 Hashtbl.add dct ident tv\n             in\n               Array.iter add_field fields;\n@@ -1145,7 +1145,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n             let dct = Hashtbl.create 10 in\n             let add_field (ident, atom) =\n               let tv = any() in\n-                unify_atom rval_ctx atom tv;\n+                unify_atom arg_pass_ctx atom tv;\n                 Hashtbl.add dct ident tv\n             in\n               Array.iter add_field fields;\n@@ -1154,15 +1154,15 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         | Ast.STMT_init_tup (dst, members) ->\n             let member_to_tv atom =\n               let tv = any() in\n-                unify_atom rval_ctx atom tv;\n+                unify_atom arg_pass_ctx atom tv;\n                 tv\n             in\n             let member_tvs = Array.map member_to_tv members in\n               unify_lval init_ctx dst (ref (TYSPEC_tuple member_tvs))\n \n         | Ast.STMT_init_vec (dst, atoms) ->\n             let tv = any() in\n-            let unify_with_tv atom = unify_atom rval_ctx atom tv in\n+            let unify_with_tv atom = unify_atom arg_pass_ctx atom tv in\n               Array.iter unify_with_tv atoms;\n               unify_lval init_ctx dst (ref (TYSPEC_vector tv))\n \n@@ -1171,12 +1171,12 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n         | Ast.STMT_copy (dst, expr) ->\n             let tv = any() in\n-              unify_expr rval_ctx expr tv;\n+              unify_expr arg_pass_ctx expr tv;\n               unify_lval lval_ctx dst tv\n \n         | Ast.STMT_copy_binop (dst, binop, at) ->\n             let tv = any() in\n-              unify_expr rval_ctx\n+              unify_expr arg_pass_ctx\n                 (Ast.EXPR_binary (binop, Ast.ATOM_lval dst, at)) tv;\n               (* Force-override the 'auto-deref' judgment that was cached \n                * in cx.ctxt_auto_deref_lval by preceding unify_expr call.\n@@ -1268,7 +1268,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         | Ast.STMT_alt_tag\n             { Ast.alt_tag_lval = lval; Ast.alt_tag_arms = arms } ->\n             let lval_tv = any() in\n-              unify_lval lval_ctx lval lval_tv;\n+              unify_lval arg_pass_ctx lval lval_tv;\n               Array.iter (fun _ -> push_pat_tv lval_tv) arms\n \n         | Ast.STMT_join lval ->"}]}