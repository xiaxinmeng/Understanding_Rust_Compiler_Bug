{"sha": "8ac9245df4ce650abab468ae73431dc454d0e064", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzkyNDVkZjRjZTY1MGFiYWI0NjhhZTczNDMxZGM0NTRkMGUwNjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-06T05:11:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-06T05:11:10Z"}, "message": "Merge pull request #1634 from topecongiro/impl-rewrite-attribute\n\nImplement Rewrite trait for syntax::ast::Attribute", "tree": {"sha": "a3e981d79daf4bb1980178c93b9b740ee15349fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3e981d79daf4bb1980178c93b9b740ee15349fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac9245df4ce650abab468ae73431dc454d0e064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac9245df4ce650abab468ae73431dc454d0e064", "html_url": "https://github.com/rust-lang/rust/commit/8ac9245df4ce650abab468ae73431dc454d0e064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac9245df4ce650abab468ae73431dc454d0e064/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9d7dab0d2a1720bdee67148db28b3a29ec3655", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9d7dab0d2a1720bdee67148db28b3a29ec3655", "html_url": "https://github.com/rust-lang/rust/commit/6a9d7dab0d2a1720bdee67148db28b3a29ec3655"}, {"sha": "7be703a6374527379a40d19ad10d868bde7167ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be703a6374527379a40d19ad10d868bde7167ad", "html_url": "https://github.com/rust-lang/rust/commit/7be703a6374527379a40d19ad10d868bde7167ad"}], "stats": {"total": 161, "additions": 149, "deletions": 12}, "files": [{"sha": "d3ab3d2d96daaa6bec3c9a271db6ced573770a83", "filename": "src/visitor.rs", "status": "modified", "additions": 77, "deletions": 10, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/8ac9245df4ce650abab468ae73431dc454d0e064/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac9245df4ce650abab468ae73431dc454d0e064/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=8ac9245df4ce650abab468ae73431dc454d0e064", "patch": "@@ -26,6 +26,7 @@ use comment::rewrite_comment;\n use macros::{rewrite_macro, MacroPosition};\n use items::{rewrite_static, rewrite_associated_type, rewrite_associated_impl_type,\n             rewrite_type_alias, format_impl, format_trait};\n+use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorTactic};\n \n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n@@ -638,6 +639,81 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n+impl Rewrite for ast::NestedMetaItem {\n+    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        match self.node {\n+            ast::NestedMetaItemKind::MetaItem(ref meta_item) => meta_item.rewrite(context, shape),\n+            ast::NestedMetaItemKind::Literal(..) => Some(context.snippet(self.span)),\n+        }\n+    }\n+}\n+\n+impl Rewrite for ast::MetaItem {\n+    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        Some(match self.node {\n+                 ast::MetaItemKind::Word => String::from(&*self.name.as_str()),\n+                 ast::MetaItemKind::List(ref list) => {\n+                     let name = self.name.as_str();\n+                     // 3 = `#[` and `(`, 2 = `]` and `)`\n+                     let item_shape = try_opt!(shape\n+                                                   .shrink_left(name.len() + 3)\n+                                                   .and_then(|s| s.sub_width(2)));\n+                     let items = itemize_list(context.codemap,\n+                                              list.iter(),\n+                                              \")\",\n+                                              |nested_meta_item| nested_meta_item.span.lo,\n+                                              |nested_meta_item| nested_meta_item.span.hi,\n+                                              |nested_meta_item| {\n+                                                  nested_meta_item.rewrite(context, item_shape)\n+                                              },\n+                                              self.span.lo,\n+                                              self.span.hi);\n+                     let item_vec = items.collect::<Vec<_>>();\n+                     let fmt = ListFormatting {\n+                         tactic: DefinitiveListTactic::Mixed,\n+                         separator: \",\",\n+                         trailing_separator: SeparatorTactic::Never,\n+                         shape: item_shape,\n+                         ends_with_newline: false,\n+                         config: context.config,\n+                     };\n+                     format!(\"{}({})\", name, try_opt!(write_list(&item_vec, &fmt)))\n+                 }\n+                 ast::MetaItemKind::NameValue(ref literal) => {\n+                     let name = self.name.as_str();\n+                     let value = context.snippet(literal.span);\n+                     if &*name == \"doc\" && value.starts_with(\"///\") {\n+                         let doc_shape = Shape {\n+                             width: cmp::min(shape.width, context.config.comment_width())\n+                                 .checked_sub(shape.indent.width())\n+                                 .unwrap_or(0),\n+                             ..shape\n+                         };\n+                         format!(\"{}\",\n+                                 try_opt!(rewrite_comment(&value,\n+                                                          false,\n+                                                          doc_shape,\n+                                                          context.config)))\n+                     } else {\n+                         format!(\"{} = {}\", name, value)\n+                     }\n+                 }\n+             })\n+    }\n+}\n+\n+impl Rewrite for ast::Attribute {\n+    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        self.value\n+            .rewrite(context, shape)\n+            .map(|rw| if rw.starts_with(\"///\") {\n+                     rw\n+                 } else {\n+                     format!(\"#[{}]\", rw)\n+                 })\n+    }\n+}\n+\n impl<'a> Rewrite for [ast::Attribute] {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let mut result = String::new();\n@@ -647,7 +723,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n         let indent = shape.indent.to_string(context.config);\n \n         for (i, a) in self.iter().enumerate() {\n-            let mut a_str = context.snippet(a.span);\n+            let a_str = try_opt!(a.rewrite(context, shape));\n \n             // Write comments and blank lines between attributes.\n             if i > 0 {\n@@ -674,15 +750,6 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 result.push_str(&indent);\n             }\n \n-            if a_str.starts_with(\"//\") {\n-                a_str = try_opt!(rewrite_comment(&a_str,\n-                                                 false,\n-                                                 Shape::legacy(context.config.comment_width() -\n-                                                               shape.indent.width(),\n-                                                               shape.indent),\n-                                                 context.config));\n-            }\n-\n             // Write the attribute itself.\n             result.push_str(&a_str);\n "}, {"sha": "593fb0ff57ef434aa99835e3c783284e9c5f611f", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=8ac9245df4ce650abab468ae73431dc454d0e064", "patch": "@@ -41,4 +41,14 @@ impl Bar {\n     /// Blah blah bing.\n     fn f4(self) -> Cat {\n     }\n+\n+    // We want spaces around `=`\n+    #[cfg(feature=\"nightly\")]\n+    fn f5(self) -> Monkey {}\n+}\n+\n+// #984\n+struct Foo {\n+    # [ derive ( Clone , PartialEq , Debug , Deserialize , Serialize ) ]\n+    foo: usize,\n }"}, {"sha": "6992ca53c1b4c7479c92df65f8baf2c360dad864", "filename": "tests/source/enum.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=8ac9245df4ce650abab468ae73431dc454d0e064", "patch": "@@ -109,3 +109,14 @@ pub enum Bencoding<'i> {\n     // TODO make Dict \"structlike\" AKA name the two values.\n     Dict(&'i [u8], BTreeMap<&'i [u8], Bencoding<'i>>),\n }\n+\n+// #1261\n+pub enum CoreResourceMsg {\n+    SetCookieForUrl(\n+        ServoUrl,\n+        #[serde(deserialize_with = \"::hyper_serde::deserialize\",\n+                serialize_with = \"::hyper_serde::serialize\")]\n+        Cookie,\n+        CookieSource\n+    ),\n+}"}, {"sha": "6fc69c2dfe47979c968ec951edd41498417df637", "filename": "tests/source/struct-field-attributes.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Fsource%2Fstruct-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Fsource%2Fstruct-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct-field-attributes.rs?ref=8ac9245df4ce650abab468ae73431dc454d0e064", "patch": "@@ -20,3 +20,18 @@ fn do_something() -> Foo {\n fn main() {\n     do_something();\n }\n+\n+// #1462\n+struct Foo {\n+    foo: usize,\n+    #[cfg(feature=\"include-bar\")]\n+    bar: usize,\n+}\n+\n+fn new_foo() -> Foo {\n+    Foo {\n+        foo: 0,\n+        #[cfg(feature=\"include-bar\")]\n+        bar: 0,\n+    }\n+}"}, {"sha": "fb70585bd21cc20433586f0462811984718dcef6", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=8ac9245df4ce650abab468ae73431dc454d0e064", "patch": "@@ -37,4 +37,14 @@ impl Bar {\n     // tooooooooooooooooooooooooooooooo loooooooooooong.\n     /// Blah blah bing.\n     fn f4(self) -> Cat {}\n+\n+    // We want spaces around `=`\n+    #[cfg(feature = \"nightly\")]\n+    fn f5(self) -> Monkey {}\n+}\n+\n+// #984\n+struct Foo {\n+    #[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]\n+    foo: usize,\n }"}, {"sha": "0bb18e2df674f1a7f56c048431711f4e6ec09968", "filename": "tests/target/enum.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=8ac9245df4ce650abab468ae73431dc454d0e064", "patch": "@@ -139,3 +139,12 @@ pub enum Bencoding<'i> {\n     // TODO make Dict \"structlike\" AKA name the two values.\n     Dict(&'i [u8], BTreeMap<&'i [u8], Bencoding<'i>>),\n }\n+\n+// #1261\n+pub enum CoreResourceMsg {\n+    SetCookieForUrl(ServoUrl,\n+                    #[serde(deserialize_with = \"::hyper_serde::deserialize\",\n+                            serialize_with = \"::hyper_serde::serialize\")]\n+                    Cookie,\n+                    CookieSource),\n+}"}, {"sha": "ff0d55b0175c4ddd3dca6dce910e1097abd3cbf0", "filename": "tests/target/nestedmod/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fnestedmod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fnestedmod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fmod.rs?ref=8ac9245df4ce650abab468ae73431dc454d0e064", "patch": "@@ -7,7 +7,7 @@ mod mymod1 {\n     mod mod3a;\n }\n \n-#[path=\"mod2c.rs\"]\n+#[path = \"mod2c.rs\"]\n mod mymod2;\n \n mod submod2;"}, {"sha": "f06766f304fdf64f84714023453d30fd19236b57", "filename": "tests/target/nestedmod/mod2b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fnestedmod%2Fmod2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fnestedmod%2Fmod2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fmod2b.rs?ref=8ac9245df4ce650abab468ae73431dc454d0e064", "patch": "@@ -1,3 +1,3 @@\n \n-#[path=\"mod2a.rs\"]\n+#[path = \"mod2a.rs\"]\n mod c;"}, {"sha": "8ae40ac9bdfbdad97bf50c7b32e22665cb3544fc", "filename": "tests/target/struct-field-attributes.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fstruct-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac9245df4ce650abab468ae73431dc454d0e064/tests%2Ftarget%2Fstruct-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct-field-attributes.rs?ref=8ac9245df4ce650abab468ae73431dc454d0e064", "patch": "@@ -20,3 +20,18 @@ fn do_something() -> Foo {\n fn main() {\n     do_something();\n }\n+\n+// #1462\n+struct Foo {\n+    foo: usize,\n+    #[cfg(feature = \"include-bar\")]\n+    bar: usize,\n+}\n+\n+fn new_foo() -> Foo {\n+    Foo {\n+        foo: 0,\n+        #[cfg(feature = \"include-bar\")]\n+        bar: 0,\n+    }\n+}"}]}