{"sha": "976438f78fdce8092430f4c81ca272293c48f1a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NjQzOGY3OGZkY2U4MDkyNDMwZjRjODFjYTI3MjI5M2M0OGYxYTA=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-08-25T21:55:00Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-30T16:54:02Z"}, "message": "Produce a better error for irrefutable `if let` patterns\n\nModify ast::ExprMatch to include a new value of type ast::MatchSource,\nmaking it easy to tell whether the match was written literally or\nproduced via desugaring. This allows us to customize error messages\nappropriately.", "tree": {"sha": "69c6449d655bf964fcaeda704d6058a35d06ca80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69c6449d655bf964fcaeda704d6058a35d06ca80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976438f78fdce8092430f4c81ca272293c48f1a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976438f78fdce8092430f4c81ca272293c48f1a0", "html_url": "https://github.com/rust-lang/rust/commit/976438f78fdce8092430f4c81ca272293c48f1a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976438f78fdce8092430f4c81ca272293c48f1a0/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1bc407fb8413b6e7f05a9d38b0d0a770e67dde5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc407fb8413b6e7f05a9d38b0d0a770e67dde5a", "html_url": "https://github.com/rust-lang/rust/commit/1bc407fb8413b6e7f05a9d38b0d0a770e67dde5a"}], "stats": {"total": 138, "additions": 115, "deletions": 23}, "files": [{"sha": "10fff4db8d61be471b26f9a197b763649dfa33af", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -19,6 +19,11 @@ register_diagnostic!(E0001, r##\"\n     one is too specific or the ordering is incorrect.\n \"##)\n \n+register_diagnostic!(E0162, r##\"\n+    This error is produced by an `if let` expression where the pattern is irrefutable.\n+    An `if let` that can never fail is considered an error.\n+\"##)\n+\n register_diagnostics!(\n     E0002,\n     E0003,"}, {"sha": "b1cd431818cb86faeea4d0056019ca6f7fb8f1ec", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -1091,7 +1091,10 @@ impl LintPass for UnnecessaryParens {\n         let (value, msg, struct_lit_needs_parens) = match e.node {\n             ast::ExprIf(ref cond, _, _) => (cond, \"`if` condition\", true),\n             ast::ExprWhile(ref cond, _, _) => (cond, \"`while` condition\", true),\n-            ast::ExprMatch(ref head, _) => (head, \"`match` head expression\", true),\n+            ast::ExprMatch(ref head, _, source) => match source {\n+                ast::MatchNormal => (head, \"`match` head expression\", true),\n+                ast::MatchIfLetDesugar => (head, \"`if let` head expression\", true)\n+            },\n             ast::ExprRet(Some(ref value)) => (value, \"`return` value\", false),\n             ast::ExprAssign(_, ref value) => (value, \"assigned value\", false),\n             ast::ExprAssignOp(_, _, ref value) => (value, \"assigned value\", false),\n@@ -1241,7 +1244,7 @@ impl LintPass for UnusedMut {\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprMatch(_, ref arms) => {\n+            ast::ExprMatch(_, ref arms, _) => {\n                 for a in arms.iter() {\n                     self.check_unused_mut_pat(cx, a.pats.as_slice())\n                 }"}, {"sha": "f370de31fdca7c44ccba9743151266d1fabaa8a0", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 expr_exit\n             }\n \n-            ast::ExprMatch(ref discr, ref arms) => {\n+            ast::ExprMatch(ref discr, ref arms, _) => {\n                 //\n                 //     [pred]\n                 //       |"}, {"sha": "600d449ffe5e8f4181ffaeb4af4e4b9c97d031a6", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -147,7 +147,7 @@ pub fn check_crate(tcx: &ty::ctxt) {\n fn check_expr(cx: &mut MatchCheckCtxt, ex: &Expr) {\n     visit::walk_expr(cx, ex);\n     match ex.node {\n-        ExprMatch(ref scrut, ref arms) => {\n+        ExprMatch(ref scrut, ref arms, source) => {\n             // First, check legality of move bindings.\n             for arm in arms.iter() {\n                 check_legality_of_move_bindings(cx,\n@@ -184,7 +184,7 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &Expr) {\n             }\n \n             // Fourth, check for unreachable arms.\n-            check_arms(cx, inlined_arms.as_slice());\n+            check_arms(cx, inlined_arms.as_slice(), source);\n \n             // Finally, check if the whole match expression is exhaustive.\n             // Check for empty enum, because is_useful only works on inhabited types.\n@@ -252,13 +252,31 @@ fn check_for_static_nan(cx: &MatchCheckCtxt, pats: &[P<Pat>]) {\n }\n \n // Check for unreachable patterns\n-fn check_arms(cx: &MatchCheckCtxt, arms: &[(Vec<P<Pat>>, Option<&Expr>)]) {\n+fn check_arms(cx: &MatchCheckCtxt, arms: &[(Vec<P<Pat>>, Option<&Expr>)], source: MatchSource) {\n     let mut seen = Matrix(vec![]);\n+    let mut printed_if_let_err = false;\n     for &(ref pats, guard) in arms.iter() {\n         for pat in pats.iter() {\n             let v = vec![&**pat];\n+\n             match is_useful(cx, &seen, v.as_slice(), LeaveOutWitness) {\n-                NotUseful => span_err!(cx.tcx.sess, pat.span, E0001, \"unreachable pattern\"),\n+                NotUseful => {\n+                    if source == MatchIfLetDesugar {\n+                        if printed_if_let_err {\n+                            // we already printed an irrefutable if-let pattern error.\n+                            // We don't want two, that's just confusing.\n+                        } else {\n+                            // find the first arm pattern so we can use its span\n+                            let &(ref first_arm_pats, _) = &arms[0]; // we know there's at least 1 arm\n+                            let first_pat = first_arm_pats.get(0); // and it's safe to assume 1 pat\n+                            let span = first_pat.span;\n+                            span_err!(cx.tcx.sess, span, E0162, \"irrefutable if-let pattern\");\n+                            printed_if_let_err = true;\n+                        }\n+                    } else {\n+                        span_err!(cx.tcx.sess, pat.span, E0001, \"unreachable pattern\");\n+                    }\n+                }\n                 Useful => (),\n                 UsefulWithWitness(_) => unreachable!()\n             }"}, {"sha": "4423b83c7459128d41a15bc24412347c98b18234", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -376,7 +376,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,TYPER> {\n \n             ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n \n-            ast::ExprMatch(ref discr, ref arms) => {\n+            ast::ExprMatch(ref discr, ref arms, _) => {\n                 let discr_cmt = return_if_err!(self.mc.cat_expr(&**discr));\n                 self.borrow_expr(&**discr, ty::ReEmpty, ty::ImmBorrow, MatchDiscriminant);\n "}, {"sha": "00e65f34cf3474a91240db9bbada589962c589a0", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -1029,7 +1029,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_loop(expr, LoopLoop, &**blk, succ)\n           }\n \n-          ExprMatch(ref e, ref arms) => {\n+          ExprMatch(ref e, ref arms, _) => {\n             //\n             //      (e)\n             //       |"}, {"sha": "aada90d260e8f2f2b283d44907a78ef714b73235", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -3659,7 +3659,7 @@ fn populate_scope_map(cx: &CrateContext,\n                 }\n             }\n \n-            ast::ExprMatch(ref discriminant_exp, ref arms) => {\n+            ast::ExprMatch(ref discriminant_exp, ref arms, _) => {\n                 walk_expr(cx, &**discriminant_exp, scope_stack, scope_map);\n \n                 // For each arm we have to first walk the pattern as these might"}, {"sha": "eeea10e8eb0a5576855f0872ecccdace14d2122c", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -1013,7 +1013,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::ExprIf(ref cond, ref thn, ref els) => {\n             controlflow::trans_if(bcx, expr.id, &**cond, &**thn, els.as_ref().map(|e| &**e), dest)\n         }\n-        ast::ExprMatch(ref discr, ref arms) => {\n+        ast::ExprMatch(ref discr, ref arms, _) => {\n             _match::trans_match(bcx, expr, &**discr, arms.as_slice(), dest)\n         }\n         ast::ExprBlock(ref blk) => {"}, {"sha": "2c866b9ee383d30e3104a1b7702cbc4cefe5f8de", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -4144,7 +4144,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             fcx.write_nil(id);\n         }\n       }\n-      ast::ExprMatch(ref discrim, ref arms) => {\n+      ast::ExprMatch(ref discrim, ref arms, _) => {\n         _match::check_match(fcx, expr, &**discrim, arms.as_slice());\n       }\n       ast::ExprFnBlock(_, ref decl, ref body) => {"}, {"sha": "9e20028569bf497146335c4f758e0ef3e7a77f17", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -725,7 +725,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             visit::walk_expr(rcx, expr);\n         }\n \n-        ast::ExprMatch(ref discr, ref arms) => {\n+        ast::ExprMatch(ref discr, ref arms, _) => {\n             link_match(rcx, &**discr, arms.as_slice());\n \n             visit::walk_expr(rcx, expr);"}, {"sha": "638aea10e37952fa1bc9306ffce827e83d27b6db", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -92,6 +92,7 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n               ast::ExprMethodCall(..) => {\n                 explain_span(cx, \"method call\", expr.span)\n               },\n+              ast::ExprMatch(_, _, ast::MatchIfLetDesugar) => explain_span(cx, \"if let\", expr.span),\n               ast::ExprMatch(..) => explain_span(cx, \"match\", expr.span),\n               _ => explain_span(cx, \"expression\", expr.span)\n             }"}, {"sha": "59c824d0eae772d865e769504837e4a330c66916", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -529,7 +529,7 @@ pub enum Expr_ {\n     // Conditionless loop (can be exited with break, cont, or ret)\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprLoop(P<Block>, Option<Ident>),\n-    ExprMatch(P<Expr>, Vec<Arm>),\n+    ExprMatch(P<Expr>, Vec<Arm>, MatchSource),\n     ExprFnBlock(CaptureClause, P<FnDecl>, P<Block>),\n     ExprProc(P<FnDecl>, P<Block>),\n     ExprUnboxedFn(CaptureClause, UnboxedClosureKind, P<FnDecl>, P<Block>),\n@@ -577,6 +577,12 @@ pub struct QPath {\n     pub item_name: Ident,\n }\n \n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+pub enum MatchSource {\n+    MatchNormal,\n+    MatchIfLetDesugar\n+}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum CaptureClause {\n     CaptureByValue,"}, {"sha": "41b7218da0c526cdae3f308f13646a754676a80d", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -210,10 +210,10 @@ fn fold_expr(cx: &mut Context, expr: P<ast::Expr>) -> P<ast::Expr> {\n         fold::noop_fold_expr(ast::Expr {\n             id: id,\n             node: match node {\n-                ast::ExprMatch(m, arms) => {\n+                ast::ExprMatch(m, arms, source) => {\n                     ast::ExprMatch(m, arms.into_iter()\n                                         .filter(|a| (cx.in_cfg)(a.attrs.as_slice()))\n-                                        .collect())\n+                                        .collect(), source)\n                 }\n                 _ => node\n             },"}, {"sha": "f2b806f43ccbbb6822fbcf0e9b37ea7a9fd18eb0", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -845,7 +845,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: Vec<ast::Arm>) -> P<Expr> {\n-        self.expr(span, ast::ExprMatch(arg, arms))\n+        self.expr(span, ast::ExprMatch(arg, arms, ast::MatchNormal))\n     }\n \n     fn expr_if(&self, span: Span, cond: P<ast::Expr>,"}, {"sha": "de6a8675e133b0f4bf8f2f114e7f2ef7a71cf679", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -127,7 +127,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             arms.push_all_move(else_if_arms);\n             arms.push(else_arm);\n \n-            let match_expr = fld.cx.expr_match(span, expr, arms);\n+            let match_expr = fld.cx.expr(span, ast::ExprMatch(expr, arms, ast::MatchIfLetDesugar));\n             fld.fold_expr(match_expr)\n         }\n "}, {"sha": "31bec58a4daa6f24afd9b9c3e151fb686108c0a1", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -1226,9 +1226,10 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                 ExprLoop(folder.fold_block(body),\n                         opt_ident.map(|i| folder.fold_ident(i)))\n             }\n-            ExprMatch(expr, arms) => {\n+            ExprMatch(expr, arms, source) => {\n                 ExprMatch(folder.fold_expr(expr),\n-                        arms.move_map(|x| folder.fold_arm(x)))\n+                        arms.move_map(|x| folder.fold_arm(x)),\n+                        source)\n             }\n             ExprFnBlock(capture_clause, decl, body) => {\n                 ExprFnBlock(capture_clause,"}, {"sha": "ccb398bf2fb3ac2b39c4c48e89c9d2764fd1b6cf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -38,7 +38,7 @@ use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy};\n use ast::{LifetimeDef, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitBinary};\n use ast::{LitNil, LitStr, LitInt, Local, LocalLet};\n-use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, Matcher, MatchNonterminal};\n+use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, Matcher, MatchNonterminal, MatchNormal};\n use ast::{MatchSeq, MatchTok, Method, MutTy, BiMul, Mutability};\n use ast::{MethodImplItem, NamedField, UnNeg, NoReturn, UnNot};\n use ast::{Pat, PatEnum, PatIdent, PatLit, PatRange, PatRegion, PatStruct};\n@@ -2973,7 +2973,7 @@ impl<'a> Parser<'a> {\n         }\n         let hi = self.span.hi;\n         self.bump();\n-        return self.mk_expr(lo, hi, ExprMatch(discriminant, arms));\n+        return self.mk_expr(lo, hi, ExprMatch(discriminant, arms, MatchNormal));\n     }\n \n     pub fn parse_arm(&mut self) -> Arm {"}, {"sha": "a8e99b4e85f2bd36db5ca49e4e866962d6fb4ea3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -1535,7 +1535,7 @@ impl<'a> State<'a> {\n                 try!(space(&mut self.s));\n                 try!(self.print_block(&**blk));\n             }\n-            ast::ExprMatch(ref expr, ref arms) => {\n+            ast::ExprMatch(ref expr, ref arms, _) => {\n                 try!(self.cbox(indent_unit));\n                 try!(self.ibox(4));\n                 try!(self.word_nbsp(\"match\"));"}, {"sha": "88b6854bb1d2c3a59df2e43e03f082c2c0a99136", "filename": "src/test/compile-fail/if-let.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Ftest%2Fcompile-fail%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Ftest%2Fcompile-fail%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-let.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+fn macros() {\n+    macro_rules! foo{\n+        ($p:pat, $e:expr, $b:block) => {{\n+            if let $p = $e $b\n+        }}\n+    }\n+    macro_rules! bar{\n+        ($p:pat, $e:expr, $b:block) => {{\n+            foo!($p, $e, $b)\n+        }}\n+    }\n+\n+    foo!(a, 1i, { //~ ERROR irrefutable if-let\n+        println!(\"irrefutable pattern\");\n+    });\n+    bar!(a, 1i, { //~ ERROR irrefutable if-let\n+        println!(\"irrefutable pattern\");\n+    });\n+}\n+\n+pub fn main() {\n+    if let a = 1i { //~ ERROR irrefutable if-let\n+        println!(\"irrefutable pattern\");\n+    }\n+\n+    if let a = 1i { //~ ERROR irrefutable if-let\n+        println!(\"irrefutable pattern\");\n+    } else if true {\n+        println!(\"else-if in irrefutable if-let\");\n+    } else {\n+        println!(\"else in irrefutable if-let\");\n+    }\n+\n+    if let 1i = 2i {\n+        println!(\"refutable pattern\");\n+    } else if let a = 1i { //~ ERROR irrefutable if-let\n+        println!(\"irrefutable pattern\");\n+    }\n+\n+    if true {\n+        println!(\"if\");\n+    } else if let a = 1i { //~ ERROR irrefutable if-let\n+        println!(\"irrefutable pattern\");\n+    }\n+}"}, {"sha": "82fb42571af74c674ff9ad21c274bdc11e9bc5db", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976438f78fdce8092430f4c81ca272293c48f1a0/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=976438f78fdce8092430f4c81ca272293c48f1a0", "patch": "@@ -32,6 +32,7 @@ fn main() {\n     match (true) { //~ ERROR unnecessary parentheses around `match` head expression\n         _ => {}\n     }\n+    if let 1i = (1i) {} //~ ERROR unnecessary parentheses around `if let` head expression\n     let v = X { y: false };\n     // struct lits needs parens, so these shouldn't warn.\n     if (v == X { y: true }) {}"}]}