{"sha": "6275b045d7136bf32290201ff8e4a4348b4a8f14", "node_id": "C_kwDOAAsO6NoAKDYyNzViMDQ1ZDcxMzZiZjMyMjkwMjAxZmY4ZTRhNDM0OGI0YThmMTQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-02T17:44:05Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-08T17:28:21Z"}, "message": "Move paren expr and loop HIR lowering", "tree": {"sha": "1df4c1d4eddab6d255d8e0fd4499b7732c65f88a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1df4c1d4eddab6d255d8e0fd4499b7732c65f88a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6275b045d7136bf32290201ff8e4a4348b4a8f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6275b045d7136bf32290201ff8e4a4348b4a8f14", "html_url": "https://github.com/rust-lang/rust/commit/6275b045d7136bf32290201ff8e4a4348b4a8f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6275b045d7136bf32290201ff8e4a4348b4a8f14/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0fb226bb9b6d021544898bd49c6046355d6d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0fb226bb9b6d021544898bd49c6046355d6d61", "html_url": "https://github.com/rust-lang/rust/commit/0c0fb226bb9b6d021544898bd49c6046355d6d61"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "615067b64a4e55967a6e2ee47e18dd521c9b2b1b", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6275b045d7136bf32290201ff8e4a4348b4a8f14/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6275b045d7136bf32290201ff8e4a4348b4a8f14/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=6275b045d7136bf32290201ff8e4a4348b4a8f14", "patch": "@@ -31,6 +31,41 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     pub(super) fn lower_expr_mut(&mut self, e: &Expr) -> hir::Expr<'hir> {\n         ensure_sufficient_stack(|| {\n+            match &e.kind {\n+                // Paranthesis expression does not have a HirId and is handled specially.\n+                ExprKind::Paren(ex) => {\n+                    let mut ex = self.lower_expr_mut(ex);\n+                    // Include parens in span, but only if it is a super-span.\n+                    if e.span.contains(ex.span) {\n+                        ex.span = self.lower_span(e.span);\n+                    }\n+                    // Merge attributes into the inner expression.\n+                    if !e.attrs.is_empty() {\n+                        let old_attrs =\n+                            self.attrs.get(&ex.hir_id.local_id).map(|la| *la).unwrap_or(&[]);\n+                        self.attrs.insert(\n+                            ex.hir_id.local_id,\n+                            &*self.arena.alloc_from_iter(\n+                                e.attrs\n+                                    .iter()\n+                                    .map(|a| self.lower_attr(a))\n+                                    .chain(old_attrs.iter().cloned()),\n+                            ),\n+                        );\n+                    }\n+                    return ex;\n+                }\n+                // Desugar `ExprForLoop`\n+                // from: `[opt_ident]: for <pat> in <head> <body>`\n+                //\n+                // This also needs special handling because the HirId of the returned `hir::Expr` will not\n+                // correspond to the `e.id`, so `lower_expr_for` handles attribute lowering itself.\n+                ExprKind::ForLoop(pat, head, body, opt_label) => {\n+                    return self.lower_expr_for(e, pat, head, body, *opt_label);\n+                }\n+                _ => (),\n+            }\n+\n             let hir_id = self.lower_node_id(e.id);\n             self.lower_attrs(hir_id, &e.attrs);\n \n@@ -51,7 +86,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     if e.attrs.get(0).map_or(false, |a| a.has_name(sym::rustc_box)) {\n                         if let [inner] = &args[..] && e.attrs.len() == 1 {\n                             let kind = hir::ExprKind::Box(self.lower_expr(&inner));\n-                            let hir_id = self.lower_node_id(e.id);\n                             return hir::Expr { hir_id, kind, span: self.lower_span(e.span) };\n                         } else {\n                             self.tcx.sess.emit_err(RustcBoxAttributeError { span: e.span });\n@@ -283,34 +317,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::Yield(opt_expr) => self.lower_expr_yield(e.span, opt_expr.as_deref()),\n                 ExprKind::Err => hir::ExprKind::Err,\n                 ExprKind::Try(sub_expr) => self.lower_expr_try(e.span, sub_expr),\n-                ExprKind::Paren(ex) => {\n-                    let mut ex = self.lower_expr_mut(ex);\n-                    // Include parens in span, but only if it is a super-span.\n-                    if e.span.contains(ex.span) {\n-                        ex.span = self.lower_span(e.span);\n-                    }\n-                    // Merge attributes into the inner expression.\n-                    if !e.attrs.is_empty() {\n-                        let old_attrs =\n-                            self.attrs.get(&ex.hir_id.local_id).map(|la| *la).unwrap_or(&[]);\n-                        self.attrs.insert(\n-                            ex.hir_id.local_id,\n-                            &*self.arena.alloc_from_iter(\n-                                e.attrs\n-                                    .iter()\n-                                    .map(|a| self.lower_attr(a))\n-                                    .chain(old_attrs.iter().cloned()),\n-                            ),\n-                        );\n-                    }\n-                    return ex;\n-                }\n \n-                // Desugar `ExprForLoop`\n-                // from: `[opt_ident]: for <pat> in <head> <body>`\n-                ExprKind::ForLoop(pat, head, body, opt_label) => {\n-                    return self.lower_expr_for(e, pat, head, body, *opt_label);\n-                }\n+                ExprKind::Paren(_) | ExprKind::ForLoop(..) => unreachable!(\"already handled\"),\n+\n                 ExprKind::MacCall(_) => panic!(\"{:?} shouldn't exist here\", e.span),\n             };\n "}]}