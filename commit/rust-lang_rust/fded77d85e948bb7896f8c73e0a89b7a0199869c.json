{"sha": "fded77d85e948bb7896f8c73e0a89b7a0199869c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZWQ3N2Q4NWU5NDhiYjc4OTZmOGM3M2UwYTg5YjdhMDE5OTg2OWM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-01-05T23:23:28Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-01-06T10:22:20Z"}, "message": "Split up casting UI tests\n\nPart of #2038", "tree": {"sha": "f536d1129180418846163738bc544e83f05562a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f536d1129180418846163738bc544e83f05562a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fded77d85e948bb7896f8c73e0a89b7a0199869c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJaUKNcAAoJEGZ8j0taaYpgjLgQAK55s2i32jCtHP7z1ArYOD5d\n7Nu1fL28FgbHv3jr6+xjr5MQ83MUPu+AKRlBPkeZmjS8vK1Hq3Xqy9scddp402DQ\nU5HJTORPgjwLEEGzUxrbtv7xVNrICi6X3nAlUnn6jPI0o76gHlszpsKYn6qzPYqo\npUzVE6Epl9sX+6qogWr6l7D+ms9pyG5X+p2VwqqXVQjbGkZHH2AhmmONf5yWATPF\nGNfi7rIIRFh86LGrZd0e587kgR3tqub84K9vcb/drYeHS8P5n+OdS06qFG+OWL5T\nCM8tBm83vs+cF492ZEN3xSKl0hy/IO8Zxn2BemlIFYcjyeqKCFFyIBr+SY7KG8r8\nOU698NFCUTQklPjco/L9a9BqS8pKXKkiuFMQM14yaY1ji7CXGbmAqzCyHNOg0Fjn\nM6meGe5ONXJGRg7ZxUH6YLzkk0Ie1nm/ZSrrpyxoqvZQneBJKcDifM307Vx1+/Tw\nmVvg0Ph5HbCP43f6s7BfBa9LAFtLRO54V3IGpFBiYYev65gPRMILnFcjfe7qrbap\nHoTs9SDy9EdMHtak0vZzlEMVPDv7Ec2+1i0gs3mwP7FWZqZFHgIzPD7G8a9nKd2u\nx3FhbtkARvpyWaio9Z+F7U0Jtb+Yk9uEe9W1v4JEDdbi3RyqR+ONXHtqBK1WueoB\nODMo6mNE2TRSrPdw6JRP\n=RwcB\n-----END PGP SIGNATURE-----", "payload": "tree f536d1129180418846163738bc544e83f05562a2\nparent 5815681b38af9af5b1daa4ae41d9d40c7d3dd115\nauthor Philipp Hansch <dev@phansch.net> 1515194608 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1515234140 +0100\n\nSplit up casting UI tests\n\nPart of #2038\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fded77d85e948bb7896f8c73e0a89b7a0199869c", "html_url": "https://github.com/rust-lang/rust/commit/fded77d85e948bb7896f8c73e0a89b7a0199869c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fded77d85e948bb7896f8c73e0a89b7a0199869c/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5815681b38af9af5b1daa4ae41d9d40c7d3dd115", "url": "https://api.github.com/repos/rust-lang/rust/commits/5815681b38af9af5b1daa4ae41d9d40c7d3dd115", "html_url": "https://github.com/rust-lang/rust/commit/5815681b38af9af5b1daa4ae41d9d40c7d3dd115"}], "stats": {"total": 717, "additions": 371, "deletions": 346}, "files": [{"sha": "833e5a557807688408e27ff19f99af1e7d8e9e4d", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=fded77d85e948bb7896f8c73e0a89b7a0199869c", "patch": "@@ -25,36 +25,6 @@ fn main() {\n     1u32 as i32;\n     1u64 as i64;\n     1usize as isize;\n-    // Test cast_lossless with casts to integer types\n-    1i8 as i16;\n-    1i8 as i32;\n-    1i8 as i64;\n-    1u8 as i16;\n-    1u8 as i32;\n-    1u8 as i64;\n-    1u8 as u16;\n-    1u8 as u32;\n-    1u8 as u64;\n-    1i16 as i32;\n-    1i16 as i64;\n-    1u16 as i32;\n-    1u16 as i64;\n-    1u16 as u32;\n-    1u16 as u64;\n-    1i32 as i64;\n-    1u32 as i64;\n-    1u32 as u64;\n-    // Test cast_lossless with casts to floating-point types\n-    1i8 as f32;\n-    1i8 as f64;\n-    1u8 as f32;\n-    1u8 as f64;\n-    1i16 as f32;\n-    1i16 as f64;\n-    1u16 as f32;\n-    1u16 as f64;\n-    1i32 as f64;\n-    1u32 as f64;\n     // Test cast_lossless with casts from floating-point types\n     1.0f32 as f64;\n     // Test cast_lossless with an expression wrapped in parens\n@@ -63,25 +33,6 @@ fn main() {\n     1i32 as u32;\n     1isize as usize;\n     // Extra checks for *size\n-    // Casting from *size\n-    1isize as i8;\n-    1isize as f64;\n-    1usize as f64;\n-    1isize as f32;\n-    1usize as f32;\n-    1isize as i32;\n-    1isize as u32;\n-    1usize as u32;\n-    1usize as i32;\n-    // Casting to *size\n-    1i64 as isize;\n-    1i64 as usize;\n-    1u64 as isize;\n-    1u64 as usize;\n-    1u32 as isize;\n-    1u32 as usize; // Should not trigger any lint\n-    1i32 as isize; // Neither should this\n-    1i32 as usize;\n     // Test cast_unnecessary\n     1i32 as i32;\n     1f32 as f32;"}, {"sha": "ac409a813cce943f5ac958b83b16bafa34789d9b", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 15, "deletions": 297, "changes": 312, "blob_url": "https://github.com/rust-lang/rust/blob/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=fded77d85e948bb7896f8c73e0a89b7a0199869c", "patch": "@@ -132,331 +132,49 @@ error: casting usize to isize may wrap around the value\n 27 |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n-error: casting i8 to i16 may become silently lossy if types change\n+error: casting f32 to f64 may become silently lossy if types change\n   --> $DIR/cast.rs:29:5\n    |\n-29 |     1i8 as i16;\n-   |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n+29 |     1.0f32 as f64;\n+   |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n    |\n    = note: `-D cast-lossless` implied by `-D warnings`\n \n-error: casting i8 to i32 may become silently lossy if types change\n-  --> $DIR/cast.rs:30:5\n-   |\n-30 |     1i8 as i32;\n-   |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n-\n-error: casting i8 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:31:5\n-   |\n-31 |     1i8 as i64;\n-   |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n-\n-error: casting u8 to i16 may become silently lossy if types change\n-  --> $DIR/cast.rs:32:5\n-   |\n-32 |     1u8 as i16;\n-   |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n-\n-error: casting u8 to i32 may become silently lossy if types change\n-  --> $DIR/cast.rs:33:5\n-   |\n-33 |     1u8 as i32;\n-   |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n-\n-error: casting u8 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:34:5\n-   |\n-34 |     1u8 as i64;\n-   |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n-\n error: casting u8 to u16 may become silently lossy if types change\n-  --> $DIR/cast.rs:35:5\n-   |\n-35 |     1u8 as u16;\n-   |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n-\n-error: casting u8 to u32 may become silently lossy if types change\n-  --> $DIR/cast.rs:36:5\n-   |\n-36 |     1u8 as u32;\n-   |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n-\n-error: casting u8 to u64 may become silently lossy if types change\n-  --> $DIR/cast.rs:37:5\n-   |\n-37 |     1u8 as u64;\n-   |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n-\n-error: casting i16 to i32 may become silently lossy if types change\n-  --> $DIR/cast.rs:38:5\n-   |\n-38 |     1i16 as i32;\n-   |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n-\n-error: casting i16 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:39:5\n-   |\n-39 |     1i16 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n-\n-error: casting u16 to i32 may become silently lossy if types change\n-  --> $DIR/cast.rs:40:5\n-   |\n-40 |     1u16 as i32;\n-   |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n-\n-error: casting u16 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:41:5\n-   |\n-41 |     1u16 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n-\n-error: casting u16 to u32 may become silently lossy if types change\n-  --> $DIR/cast.rs:42:5\n-   |\n-42 |     1u16 as u32;\n-   |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n-\n-error: casting u16 to u64 may become silently lossy if types change\n-  --> $DIR/cast.rs:43:5\n-   |\n-43 |     1u16 as u64;\n-   |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n-\n-error: casting i32 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:44:5\n-   |\n-44 |     1i32 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n-\n-error: casting u32 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:45:5\n-   |\n-45 |     1u32 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n-\n-error: casting u32 to u64 may become silently lossy if types change\n-  --> $DIR/cast.rs:46:5\n-   |\n-46 |     1u32 as u64;\n-   |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n-\n-error: casting i8 to f32 may become silently lossy if types change\n-  --> $DIR/cast.rs:48:5\n-   |\n-48 |     1i8 as f32;\n-   |     ^^^^^^^^^^ help: try: `f32::from(1i8)`\n-\n-error: casting i8 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:49:5\n-   |\n-49 |     1i8 as f64;\n-   |     ^^^^^^^^^^ help: try: `f64::from(1i8)`\n-\n-error: casting u8 to f32 may become silently lossy if types change\n-  --> $DIR/cast.rs:50:5\n-   |\n-50 |     1u8 as f32;\n-   |     ^^^^^^^^^^ help: try: `f32::from(1u8)`\n-\n-error: casting u8 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:51:5\n-   |\n-51 |     1u8 as f64;\n-   |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n-\n-error: casting i16 to f32 may become silently lossy if types change\n-  --> $DIR/cast.rs:52:5\n-   |\n-52 |     1i16 as f32;\n-   |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n-\n-error: casting i16 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:53:5\n-   |\n-53 |     1i16 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1i16)`\n-\n-error: casting u16 to f32 may become silently lossy if types change\n-  --> $DIR/cast.rs:54:5\n-   |\n-54 |     1u16 as f32;\n-   |     ^^^^^^^^^^^ help: try: `f32::from(1u16)`\n-\n-error: casting u16 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:55:5\n-   |\n-55 |     1u16 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1u16)`\n-\n-error: casting i32 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:56:5\n-   |\n-56 |     1i32 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1i32)`\n-\n-error: casting u32 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:57:5\n-   |\n-57 |     1u32 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`\n-\n-error: casting f32 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:59:5\n-   |\n-59 |     1.0f32 as f64;\n-   |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n-\n-error: casting u8 to u16 may become silently lossy if types change\n-  --> $DIR/cast.rs:61:5\n+  --> $DIR/cast.rs:31:5\n    |\n-61 |     (1u8 + 1u8) as u16;\n+31 |     (1u8 + 1u8) as u16;\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n \n error: casting i32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:63:5\n+  --> $DIR/cast.rs:33:5\n    |\n-63 |     1i32 as u32;\n+33 |     1i32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:64:5\n+  --> $DIR/cast.rs:34:5\n    |\n-64 |     1isize as usize;\n+34 |     1isize as usize;\n    |     ^^^^^^^^^^^^^^^\n \n-error: casting isize to i8 may truncate the value\n-  --> $DIR/cast.rs:67:5\n-   |\n-67 |     1isize as i8;\n-   |     ^^^^^^^^^^^^\n-\n-error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:68:5\n-   |\n-68 |     1isize as f64;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:69:5\n-   |\n-69 |     1usize as f64;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:70:5\n-   |\n-70 |     1isize as f32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:71:5\n-   |\n-71 |     1usize as f32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:72:5\n-   |\n-72 |     1isize as i32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting isize to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:73:5\n-   |\n-73 |     1isize as u32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:73:5\n-   |\n-73 |     1isize as u32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:74:5\n-   |\n-74 |     1usize as u32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:75:5\n-   |\n-75 |     1usize as i32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:75:5\n-   |\n-75 |     1usize as i32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:77:5\n-   |\n-77 |     1i64 as isize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting i64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:78:5\n-   |\n-78 |     1i64 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:78:5\n-   |\n-78 |     1i64 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:79:5\n-   |\n-79 |     1u64 as isize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:79:5\n-   |\n-79 |     1u64 as isize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:80:5\n-   |\n-80 |     1u64 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:81:5\n-   |\n-81 |     1u32 as isize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting i32 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:84:5\n-   |\n-84 |     1i32 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:86:5\n+  --> $DIR/cast.rs:37:5\n    |\n-86 |     1i32 as i32;\n+37 |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:87:5\n+  --> $DIR/cast.rs:38:5\n    |\n-87 |     1f32 as f32;\n+38 |     1f32 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:88:5\n+  --> $DIR/cast.rs:39:5\n    |\n-88 |     false as bool;\n+39 |     false as bool;\n    |     ^^^^^^^^^^^^^\n "}, {"sha": "9e61059b630c56af76c8a01f87f9ca984c283485", "filename": "tests/ui/cast_lossless_float.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=fded77d85e948bb7896f8c73e0a89b7a0199869c", "patch": "@@ -0,0 +1,15 @@\n+#[warn(cast_lossless)]\n+#[allow(no_effect, unnecessary_operation)]\n+fn main() {\n+    // Test cast_lossless with casts to floating-point types\n+    1i8 as f32;\n+    1i8 as f64;\n+    1u8 as f32;\n+    1u8 as f64;\n+    1i16 as f32;\n+    1i16 as f64;\n+    1u16 as f32;\n+    1u16 as f64;\n+    1i32 as f64;\n+    1u32 as f64;\n+}"}, {"sha": "781d9c897672cb849405edfd7f53bf4baafa9408", "filename": "tests/ui/cast_lossless_float.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=fded77d85e948bb7896f8c73e0a89b7a0199869c", "patch": "@@ -0,0 +1,62 @@\n+error: casting i8 to f32 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:5:5\n+  |\n+5 |     1i8 as f32;\n+  |     ^^^^^^^^^^ help: try: `f32::from(1i8)`\n+  |\n+  = note: `-D cast-lossless` implied by `-D warnings`\n+\n+error: casting i8 to f64 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:6:5\n+  |\n+6 |     1i8 as f64;\n+  |     ^^^^^^^^^^ help: try: `f64::from(1i8)`\n+\n+error: casting u8 to f32 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:7:5\n+  |\n+7 |     1u8 as f32;\n+  |     ^^^^^^^^^^ help: try: `f32::from(1u8)`\n+\n+error: casting u8 to f64 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:8:5\n+  |\n+8 |     1u8 as f64;\n+  |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n+\n+error: casting i16 to f32 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:9:5\n+  |\n+9 |     1i16 as f32;\n+  |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n+\n+error: casting i16 to f64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:10:5\n+   |\n+10 |     1i16 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1i16)`\n+\n+error: casting u16 to f32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:11:5\n+   |\n+11 |     1u16 as f32;\n+   |     ^^^^^^^^^^^ help: try: `f32::from(1u16)`\n+\n+error: casting u16 to f64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:12:5\n+   |\n+12 |     1u16 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1u16)`\n+\n+error: casting i32 to f64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:13:5\n+   |\n+13 |     1i32 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1i32)`\n+\n+error: casting u32 to f64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:14:5\n+   |\n+14 |     1u32 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`\n+"}, {"sha": "5f89d057c3325dab9ed49049d1f3052c7f73253d", "filename": "tests/ui/cast_lossless_integer.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=fded77d85e948bb7896f8c73e0a89b7a0199869c", "patch": "@@ -0,0 +1,24 @@\n+\n+#[warn(cast_lossless)]\n+#[allow(no_effect, unnecessary_operation)]\n+fn main() {\n+    // Test cast_lossless with casts to integer types\n+    1i8 as i16;\n+    1i8 as i32;\n+    1i8 as i64;\n+    1u8 as i16;\n+    1u8 as i32;\n+    1u8 as i64;\n+    1u8 as u16;\n+    1u8 as u32;\n+    1u8 as u64;\n+    1i16 as i32;\n+    1i16 as i64;\n+    1u16 as i32;\n+    1u16 as i64;\n+    1u16 as u32;\n+    1u16 as u64;\n+    1i32 as i64;\n+    1u32 as i64;\n+    1u32 as u64;\n+}"}, {"sha": "fdd915979e4866af4fc5744245f28e23d14d66d5", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=fded77d85e948bb7896f8c73e0a89b7a0199869c", "patch": "@@ -0,0 +1,110 @@\n+error: casting i8 to i16 may become silently lossy if types change\n+ --> $DIR/cast_lossless_integer.rs:6:5\n+  |\n+6 |     1i8 as i16;\n+  |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n+  |\n+  = note: `-D cast-lossless` implied by `-D warnings`\n+\n+error: casting i8 to i32 may become silently lossy if types change\n+ --> $DIR/cast_lossless_integer.rs:7:5\n+  |\n+7 |     1i8 as i32;\n+  |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n+\n+error: casting i8 to i64 may become silently lossy if types change\n+ --> $DIR/cast_lossless_integer.rs:8:5\n+  |\n+8 |     1i8 as i64;\n+  |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n+\n+error: casting u8 to i16 may become silently lossy if types change\n+ --> $DIR/cast_lossless_integer.rs:9:5\n+  |\n+9 |     1u8 as i16;\n+  |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n+\n+error: casting u8 to i32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:10:5\n+   |\n+10 |     1u8 as i32;\n+   |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n+\n+error: casting u8 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:11:5\n+   |\n+11 |     1u8 as i64;\n+   |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n+\n+error: casting u8 to u16 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:12:5\n+   |\n+12 |     1u8 as u16;\n+   |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n+\n+error: casting u8 to u32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:13:5\n+   |\n+13 |     1u8 as u32;\n+   |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n+\n+error: casting u8 to u64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:14:5\n+   |\n+14 |     1u8 as u64;\n+   |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n+\n+error: casting i16 to i32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:15:5\n+   |\n+15 |     1i16 as i32;\n+   |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n+\n+error: casting i16 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:16:5\n+   |\n+16 |     1i16 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n+\n+error: casting u16 to i32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:17:5\n+   |\n+17 |     1u16 as i32;\n+   |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n+\n+error: casting u16 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:18:5\n+   |\n+18 |     1u16 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n+\n+error: casting u16 to u32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:19:5\n+   |\n+19 |     1u16 as u32;\n+   |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n+\n+error: casting u16 to u64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:20:5\n+   |\n+20 |     1u16 as u64;\n+   |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n+\n+error: casting i32 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:21:5\n+   |\n+21 |     1i32 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n+\n+error: casting u32 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:22:5\n+   |\n+22 |     1u32 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n+\n+error: casting u32 to u64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:23:5\n+   |\n+23 |     1u32 as u64;\n+   |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n+"}, {"sha": "d0bef860c709ccb8d689ea1b84d9e9de42b10cbc", "filename": "tests/ui/cast_size.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.rs?ref=fded77d85e948bb7896f8c73e0a89b7a0199869c", "patch": "@@ -0,0 +1,23 @@\n+#[warn(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap, cast_lossless)]\n+#[allow(no_effect, unnecessary_operation)]\n+fn main() {\n+    // Casting from *size\n+    1isize as i8;\n+    1isize as f64;\n+    1usize as f64;\n+    1isize as f32;\n+    1usize as f32;\n+    1isize as i32;\n+    1isize as u32;\n+    1usize as u32;\n+    1usize as i32;\n+    // Casting to *size\n+    1i64 as isize;\n+    1i64 as usize;\n+    1u64 as isize;\n+    1u64 as usize;\n+    1u32 as isize;\n+    1u32 as usize; // Should not trigger any lint\n+    1i32 as isize; // Neither should this\n+    1i32 as usize;\n+}"}, {"sha": "a6aac1300a32b093d2d41d37cfe39a0d47576373", "filename": "tests/ui/cast_size.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fded77d85e948bb7896f8c73e0a89b7a0199869c/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=fded77d85e948bb7896f8c73e0a89b7a0199869c", "patch": "@@ -0,0 +1,122 @@\n+error: casting isize to i8 may truncate the value\n+ --> $DIR/cast_size.rs:5:5\n+  |\n+5 |     1isize as i8;\n+  |     ^^^^^^^^^^^^\n+  |\n+  = note: `-D cast-possible-truncation` implied by `-D warnings`\n+\n+error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+ --> $DIR/cast_size.rs:6:5\n+  |\n+6 |     1isize as f64;\n+  |     ^^^^^^^^^^^^^\n+  |\n+  = note: `-D cast-precision-loss` implied by `-D warnings`\n+\n+error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+ --> $DIR/cast_size.rs:7:5\n+  |\n+7 |     1usize as f64;\n+  |     ^^^^^^^^^^^^^\n+\n+error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+ --> $DIR/cast_size.rs:8:5\n+  |\n+8 |     1isize as f32;\n+  |     ^^^^^^^^^^^^^\n+\n+error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+ --> $DIR/cast_size.rs:9:5\n+  |\n+9 |     1usize as f32;\n+  |     ^^^^^^^^^^^^^\n+\n+error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:10:5\n+   |\n+10 |     1isize as i32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to u32 may lose the sign of the value\n+  --> $DIR/cast_size.rs:11:5\n+   |\n+11 |     1isize as u32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: `-D cast-sign-loss` implied by `-D warnings`\n+\n+error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:11:5\n+   |\n+11 |     1isize as u32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:12:5\n+   |\n+12 |     1usize as u32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:13:5\n+   |\n+13 |     1usize as i32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:13:5\n+   |\n+13 |     1usize as i32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: `-D cast-possible-wrap` implied by `-D warnings`\n+\n+error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:15:5\n+   |\n+15 |     1i64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to usize may lose the sign of the value\n+  --> $DIR/cast_size.rs:16:5\n+   |\n+16 |     1i64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:16:5\n+   |\n+16 |     1i64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:17:5\n+   |\n+17 |     1u64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:17:5\n+   |\n+17 |     1u64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:18:5\n+   |\n+18 |     1u64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:19:5\n+   |\n+19 |     1u32 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i32 to usize may lose the sign of the value\n+  --> $DIR/cast_size.rs:22:5\n+   |\n+22 |     1i32 as usize;\n+   |     ^^^^^^^^^^^^^\n+"}]}