{"sha": "25e864e19812e079a9e69134fd1bbbfee444c0a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTg2NGUxOTgxMmUwNzlhOWU2OTEzNGZkMWJiYmZlZTQ0NGMwYTI=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-06-23T11:45:13Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-06-25T17:39:31Z"}, "message": "Implement mixed script confusable lint.", "tree": {"sha": "17fa20c8a730bea265769f867984a9fd692ee5f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17fa20c8a730bea265769f867984a9fd692ee5f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e864e19812e079a9e69134fd1bbbfee444c0a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e864e19812e079a9e69134fd1bbbfee444c0a2", "html_url": "https://github.com/rust-lang/rust/commit/25e864e19812e079a9e69134fd1bbbfee444c0a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e864e19812e079a9e69134fd1bbbfee444c0a2/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef24faf130b35964cce159bd130631b6e90ed0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef24faf130b35964cce159bd130631b6e90ed0ea", "html_url": "https://github.com/rust-lang/rust/commit/ef24faf130b35964cce159bd130631b6e90ed0ea"}], "stats": {"total": 218, "additions": 206, "deletions": 12}, "files": [{"sha": "e05439d71e7e407cbbcca382bfbd08b13e32c07e", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25e864e19812e079a9e69134fd1bbbfee444c0a2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/25e864e19812e079a9e69134fd1bbbfee444c0a2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=25e864e19812e079a9e69134fd1bbbfee444c0a2", "patch": "@@ -5405,15 +5405,15 @@ dependencies = [\n \n [[package]]\n name = \"unicode-script\"\n-version = \"0.4.0\"\n+version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5b2c5c29e805da6817f5af6a627d65adb045cebf05cccd5a3493d6109454391c\"\n+checksum = \"58b33414ea8db4b7ea0343548dbdc31d27aef06beacf7044a87e564d9b0feb7d\"\n \n [[package]]\n name = \"unicode-security\"\n-version = \"0.0.3\"\n+version = \"0.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a5f9011bbed9c13372bc8df618b55a38138445199caf3b61d432c6859c36dee0\"\n+checksum = \"5d87c28edc5b263377e448d6cdcb935c06b95413d8013ba6fae470558ccab18f\"\n dependencies = [\n  \"unicode-normalization\",\n  \"unicode-script\","}, {"sha": "58c15257326aeb20481869f3a161972b448d5e42", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=25e864e19812e079a9e69134fd1bbbfee444c0a2", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n \n [dependencies]\n log = \"0.4\"\n-unicode-security = \"0.0.3\"\n+unicode-security = \"0.0.5\"\n rustc_middle = { path = \"../librustc_middle\" }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_attr = { path = \"../librustc_attr\" }"}, {"sha": "30dbd069c29bd2d847050b2955c477997040fdc0", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 125, "deletions": 2, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=25e864e19812e079a9e69134fd1bbbfee444c0a2", "patch": "@@ -24,21 +24,35 @@ declare_lint! {\n     crate_level_only\n }\n \n-declare_lint_pass!(NonAsciiIdents => [NON_ASCII_IDENTS, UNCOMMON_CODEPOINTS, CONFUSABLE_IDENTS]);\n+declare_lint! {\n+    pub MIXED_SCRIPT_CONFUSABLES,\n+    Warn,\n+    \"detects Unicode scripts whose mixed script confusables codepoints are solely used\",\n+    crate_level_only\n+}\n+\n+declare_lint_pass!(NonAsciiIdents => [NON_ASCII_IDENTS, UNCOMMON_CODEPOINTS, CONFUSABLE_IDENTS, MIXED_SCRIPT_CONFUSABLES]);\n \n impl EarlyLintPass for NonAsciiIdents {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n         use rustc_session::lint::Level;\n         use rustc_span::Span;\n+        use std::collections::BTreeMap;\n         use unicode_security::GeneralSecurityProfile;\n         use utils::CowBoxSymStr;\n \n         let check_non_ascii_idents = cx.builder.lint_level(NON_ASCII_IDENTS).0 != Level::Allow;\n         let check_uncommon_codepoints =\n             cx.builder.lint_level(UNCOMMON_CODEPOINTS).0 != Level::Allow;\n         let check_confusable_idents = cx.builder.lint_level(CONFUSABLE_IDENTS).0 != Level::Allow;\n+        let check_mixed_script_confusables =\n+            cx.builder.lint_level(MIXED_SCRIPT_CONFUSABLES).0 != Level::Allow;\n \n-        if !check_non_ascii_idents && !check_uncommon_codepoints && !check_confusable_idents {\n+        if !check_non_ascii_idents\n+            && !check_uncommon_codepoints\n+            && !check_confusable_idents\n+            && !check_mixed_script_confusables\n+        {\n             return;\n         }\n \n@@ -107,6 +121,115 @@ impl EarlyLintPass for NonAsciiIdents {\n                     .or_insert((symbol_str, sp, is_ascii));\n             }\n         }\n+\n+        if has_non_ascii_idents && check_mixed_script_confusables {\n+            use unicode_security::is_potential_mixed_script_confusable_char;\n+            use unicode_security::mixed_script::AugmentedScriptSet;\n+\n+            #[derive(Clone)]\n+            enum ScriptSetUsage {\n+                Suspicious(Vec<char>, Span),\n+                Verified,\n+            }\n+\n+            let mut script_states: FxHashMap<AugmentedScriptSet, ScriptSetUsage> =\n+                FxHashMap::default();\n+            let latin_augmented_script_set = AugmentedScriptSet::for_char('A');\n+            script_states.insert(latin_augmented_script_set, ScriptSetUsage::Verified);\n+\n+            let mut has_suspicous = false;\n+            for (symbol, &sp) in symbols.iter() {\n+                let symbol_str = symbol.as_str();\n+                for ch in symbol_str.chars() {\n+                    if ch.is_ascii() {\n+                        // all ascii characters are covered by exception.\n+                        continue;\n+                    }\n+                    if !GeneralSecurityProfile::identifier_allowed(ch) {\n+                        // this character is covered by `uncommon_codepoints` lint.\n+                        continue;\n+                    }\n+                    let augmented_script_set = AugmentedScriptSet::for_char(ch);\n+                    script_states\n+                        .entry(augmented_script_set)\n+                        .and_modify(|existing_state| {\n+                            if let ScriptSetUsage::Suspicious(ch_list, _) = existing_state {\n+                                if is_potential_mixed_script_confusable_char(ch) {\n+                                    ch_list.push(ch);\n+                                } else {\n+                                    *existing_state = ScriptSetUsage::Verified;\n+                                }\n+                            }\n+                        })\n+                        .or_insert_with(|| {\n+                            if !is_potential_mixed_script_confusable_char(ch) {\n+                                ScriptSetUsage::Verified\n+                            } else {\n+                                has_suspicous = true;\n+                                ScriptSetUsage::Suspicious(vec![ch], sp)\n+                            }\n+                        });\n+                }\n+            }\n+\n+            if has_suspicous {\n+                let verified_augmented_script_sets = script_states\n+                    .iter()\n+                    .flat_map(|(k, v)| match v {\n+                        ScriptSetUsage::Verified => Some(*k),\n+                        _ => None,\n+                    })\n+                    .collect::<Vec<_>>();\n+\n+                // we're sorting the output here.\n+                let mut lint_reports: BTreeMap<(Span, Vec<char>), AugmentedScriptSet> =\n+                    BTreeMap::new();\n+\n+                'outerloop: for (augment_script_set, usage) in script_states {\n+                    let (mut ch_list, sp) = match usage {\n+                        ScriptSetUsage::Verified => continue,\n+                        ScriptSetUsage::Suspicious(ch_list, sp) => (ch_list, sp),\n+                    };\n+\n+                    if augment_script_set.is_all() {\n+                        continue;\n+                    }\n+\n+                    for existing in verified_augmented_script_sets.iter() {\n+                        if existing.is_all() {\n+                            continue;\n+                        }\n+                        let mut intersect = *existing;\n+                        intersect.intersect_with(augment_script_set);\n+                        if !intersect.is_empty() && !intersect.is_all() {\n+                            continue 'outerloop;\n+                        }\n+                    }\n+\n+                    ch_list.sort();\n+                    ch_list.dedup();\n+                    lint_reports.insert((sp, ch_list), augment_script_set);\n+                }\n+\n+                for ((sp, ch_list), script_set) in lint_reports {\n+                    cx.struct_span_lint(MIXED_SCRIPT_CONFUSABLES, sp, |lint| {\n+                        let message = format!(\n+                            \"The usage of Script Group `{}` in this crate consists solely of mixed script confusables\",\n+                            script_set);\n+                        let mut note = \"The usage includes \".to_string();\n+                        for (idx, ch) in ch_list.into_iter().enumerate() {\n+                            if idx != 0 {\n+                                note += \", \";\n+                            }\n+                            let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n+                            note += &char_info;\n+                        }\n+                        note += \".\";\n+                        lint.build(&message).note(&note).note(\"Please recheck to make sure their usages are indeed what you want.\").emit()\n+                    });\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "a5b45466da5ca5c12ca970d1bc7d6258ae6bff1d", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables-2.rs?ref=25e864e19812e079a9e69134fd1bbbfee444c0a2", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+#![feature(non_ascii_idents)]\n+#![deny(mixed_script_confusables)]\n+\n+struct \u0391ctuallyNotLatin;\n+\n+fn main() {\n+    let \u03bb = 42; // this usage of Greek confirms that Greek is used intentionally.\n+}\n+\n+mod \u0440\u043e\u0440\u0435 {\n+    const \u30a8: &'static str = \"\u30a2\u30a4\u30a6\";\n+\n+    // this usage of Katakana confirms that Katakana is used intentionally.\n+    fn \u30cb\u30e3\u30f3() {\n+        let \u0434: usize = 100; // this usage of Cyrillic confirms that Cyrillic is used intentionally.\n+\n+        println!(\"meow!\");\n+    }\n+}"}, {"sha": "4637b03f250de14f7336fdf8b3cd0ca04a6c310b", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs?ref=25e864e19812e079a9e69134fd1bbbfee444c0a2", "patch": "@@ -0,0 +1,15 @@\n+#![feature(non_ascii_idents)]\n+#![deny(mixed_script_confusables)]\n+\n+struct \u0391ctuallyNotLatin;\n+//~^ ERROR The usage of Script Group `Greek` in this crate consists solely of\n+\n+fn main() {\n+    let v = \u0391ctuallyNotLatin;\n+}\n+\n+mod \u0440\u043e\u0440\u0435 {\n+//~^ ERROR The usage of Script Group `Cyrillic` in this crate consists solely of\n+    const \u30a8: &'static str = \"\u30a2\u30a4\u30a6\";\n+    //~^ ERROR The usage of Script Group `Japanese, Katakana` in this crate consists solely of\n+}"}, {"sha": "6f75a1ece37662769c292d2a9f544e7c9cd65867", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr?ref=25e864e19812e079a9e69134fd1bbbfee444c0a2", "patch": "@@ -0,0 +1,34 @@\n+error: The usage of Script Group `Greek` in this crate consists solely of mixed script confusables\n+  --> $DIR/lint-mixed-script-confusables.rs:4:8\n+   |\n+LL | struct \u0391ctuallyNotLatin;\n+   |        ^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-mixed-script-confusables.rs:2:9\n+   |\n+LL | #![deny(mixed_script_confusables)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: The usage includes '\u0391' (U+0391).\n+   = note: Please recheck to make sure their usages are indeed what you want.\n+\n+error: The usage of Script Group `Cyrillic` in this crate consists solely of mixed script confusables\n+  --> $DIR/lint-mixed-script-confusables.rs:11:5\n+   |\n+LL | mod \u0440\u043e\u0440\u0435 {\n+   |     ^^^^\n+   |\n+   = note: The usage includes '\u0435' (U+0435), '\u043e' (U+043E), '\u0440' (U+0440).\n+   = note: Please recheck to make sure their usages are indeed what you want.\n+\n+error: The usage of Script Group `Japanese, Katakana` in this crate consists solely of mixed script confusables\n+  --> $DIR/lint-mixed-script-confusables.rs:13:11\n+   |\n+LL |     const \u30a8: &'static str = \"\u30a2\u30a4\u30a6\";\n+   |           ^^\n+   |\n+   = note: The usage includes '\u30a8' (U+30A8).\n+   = note: Please recheck to make sure their usages are indeed what you want.\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6c54086cc2009a4059218f16825fd85dde53da3f", "filename": "src/test/ui/utf8_idents.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.rs?ref=25e864e19812e079a9e69134fd1bbbfee444c0a2", "patch": "@@ -1,3 +1,5 @@\n+#![allow(mixed_script_confusables)]\n+\n fn foo<\n     '\u03b2, //~ ERROR non-ascii idents are not fully supported\n     \u03b3  //~ ERROR non-ascii idents are not fully supported"}, {"sha": "2fc0b1c39effb54f6766d3f6f0b8cd413dbae562", "filename": "src/test/ui/utf8_idents.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25e864e19812e079a9e69134fd1bbbfee444c0a2/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=25e864e19812e079a9e69134fd1bbbfee444c0a2", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/utf8_idents.rs:2:5\n+  --> $DIR/utf8_idents.rs:4:5\n    |\n LL |     '\u03b2,\n    |     ^^\n@@ -8,7 +8,7 @@ LL |     '\u03b2,\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/utf8_idents.rs:3:5\n+  --> $DIR/utf8_idents.rs:5:5\n    |\n LL |     \u03b3\n    |     ^\n@@ -17,7 +17,7 @@ LL |     \u03b3\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/utf8_idents.rs:8:5\n+  --> $DIR/utf8_idents.rs:10:5\n    |\n LL |     \u03b4: usize\n    |     ^\n@@ -26,7 +26,7 @@ LL |     \u03b4: usize\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/utf8_idents.rs:12:9\n+  --> $DIR/utf8_idents.rs:14:9\n    |\n LL |     let \u03b1 = 0.00001f64;\n    |         ^\n@@ -35,7 +35,7 @@ LL |     let \u03b1 = 0.00001f64;\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n warning: type parameter `\u03b3` should have an upper camel case name\n-  --> $DIR/utf8_idents.rs:3:5\n+  --> $DIR/utf8_idents.rs:5:5\n    |\n LL |     \u03b3\n    |     ^ help: convert the identifier to upper camel case: `\u0393`"}]}