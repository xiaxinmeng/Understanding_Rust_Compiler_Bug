{"sha": "64c5b9a3d6f26659e0bd388fbb00cd92d888178d", "node_id": "C_kwDOAAsO6NoAKDY0YzViOWEzZDZmMjY2NTllMGJkMzg4ZmJiMDBjZDkyZDg4ODE3OGQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-26T15:49:43Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:11Z"}, "message": "Add backcompat hack to support\n\n```rust\nfn foo() -> impl MyTrait {\n    panic!();\n    MyStruct\n}\n\nstruct MyStruct;\ntrait MyTrait {}\n\nimpl MyTrait for MyStruct {}\n```", "tree": {"sha": "4846134561dad6dd2bf42e0d06b3360b2a93ce7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4846134561dad6dd2bf42e0d06b3360b2a93ce7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64c5b9a3d6f26659e0bd388fbb00cd92d888178d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64c5b9a3d6f26659e0bd388fbb00cd92d888178d", "html_url": "https://github.com/rust-lang/rust/commit/64c5b9a3d6f26659e0bd388fbb00cd92d888178d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64c5b9a3d6f26659e0bd388fbb00cd92d888178d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edaf9625fbc4fc3bb4f8eb049112840e68d79351", "url": "https://api.github.com/repos/rust-lang/rust/commits/edaf9625fbc4fc3bb4f8eb049112840e68d79351", "html_url": "https://github.com/rust-lang/rust/commit/edaf9625fbc4fc3bb4f8eb049112840e68d79351"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "694b7d2b817cfc4ff8407f4fd179bcaad32bac7f", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64c5b9a3d6f26659e0bd388fbb00cd92d888178d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c5b9a3d6f26659e0bd388fbb00cd92d888178d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=64c5b9a3d6f26659e0bd388fbb00cd92d888178d", "patch": "@@ -30,6 +30,7 @@ use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n+use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -464,9 +465,13 @@ pub struct TypeckResults<'tcx> {\n     /// this field will be set to `Some(ErrorReported)`.\n     pub tainted_by_errors: Option<ErrorReported>,\n \n-    /// All the opaque types that are restricted to concrete types\n-    /// by this function.\n-    pub concrete_opaque_types: FxHashSet<DefId>,\n+    /// All the opaque types that have hidden types set\n+    /// by this function. For return-position-impl-trait we also store the\n+    /// type here, so that mir-borrowck can figure out hidden types,\n+    /// even if they are only set in dead code (which doesn't show up in MIR).\n+    /// For type-alias-impl-trait, this map is only used to prevent query cycles,\n+    /// so the hidden types are all `None`.\n+    pub concrete_opaque_types: VecMap<DefId, Option<Ty<'tcx>>>,\n \n     /// Tracks the minimum captures required for a closure;\n     /// see `MinCaptureInformationMap` for more details."}, {"sha": "e04c1423cdac81f567c8b41f119778c221c766a2", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64c5b9a3d6f26659e0bd388fbb00cd92d888178d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c5b9a3d6f26659e0bd388fbb00cd92d888178d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=64c5b9a3d6f26659e0bd388fbb00cd92d888178d", "patch": "@@ -499,8 +499,14 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     fn visit_opaque_types(&mut self) {\n         let opaque_types =\n             self.fcx.infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n-        for (opaque_type_key, _) in opaque_types {\n-            self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id);\n+        for (opaque_type_key, decl) in opaque_types {\n+            let hidden_type = match decl.origin {\n+                hir::OpaqueTyOrigin::FnReturn(_) | hir::OpaqueTyOrigin::AsyncFn(_) => {\n+                    Some(self.resolve(decl.hidden_type.ty, &decl.hidden_type.span))\n+                }\n+                hir::OpaqueTyOrigin::TyAlias => None,\n+            };\n+            self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id, hidden_type);\n         }\n     }\n "}, {"sha": "81faacd4da559113697d201add36a2bf03263c5f", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/64c5b9a3d6f26659e0bd388fbb00cd92d888178d/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c5b9a3d6f26659e0bd388fbb00cd92d888178d/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=64c5b9a3d6f26659e0bd388fbb00cd92d888178d", "patch": "@@ -389,21 +389,22 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         .get_value_matching(|(key, _)| key.def_id == def_id.to_def_id())\n                         .copied()\n                         .unwrap_or_else(|| {\n-                            if let Some(ErrorReported) =\n-                                tcx.typeck(owner).tainted_by_errors\n-                            {\n+                            let table = tcx.typeck(owner);\n+                            if let Some(ErrorReported) = table.tainted_by_errors {\n                                 // Some error in the\n                                 // owner fn prevented us from populating\n                                 // the `concrete_opaque_types` table.\n                                 tcx.ty_error()\n                             } else {\n-                                // We failed to resolve the opaque type or it\n-                                // resolves to itself. We interpret this as the\n-                                // no values of the hidden type ever being constructed,\n-                                // so we can just make the hidden type be `!`.\n-                                // For backwards compatibility reasons, we fall back to\n-                                // `()` until we the diverging default is changed.\n-                                tcx.mk_diverging_default()\n+                                table.concrete_opaque_types.get(&def_id.to_def_id()).copied().unwrap_or_else(|| {\n+                                    // We failed to resolve the opaque type or it\n+                                    // resolves to itself. We interpret this as the\n+                                    // no values of the hidden type ever being constructed,\n+                                    // so we can just make the hidden type be `!`.\n+                                    // For backwards compatibility reasons, we fall back to\n+                                    // `()` until we the diverging default is changed.\n+                                    Some(tcx.mk_diverging_default())\n+                                }).expect(\"RPIT always have a hidden type from typeck\")\n                             }\n                         });\n                     debug!(\"concrete_ty = {:?}\", concrete_ty);\n@@ -597,7 +598,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             }\n             // Calling `mir_borrowck` can lead to cycle errors through\n             // const-checking, avoid calling it if we don't have to.\n-            if !self.tcx.typeck(def_id).concrete_opaque_types.contains(&self.def_id) {\n+            if self.tcx.typeck(def_id).concrete_opaque_types.get(&self.def_id).is_none() {\n                 debug!(\"no constraints in typeck results\");\n                 return;\n             }"}]}