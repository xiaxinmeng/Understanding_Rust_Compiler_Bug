{"sha": "89cdd26e71ecc7778f05b06c8878d641a258519a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Y2RkMjZlNzFlY2M3Nzc4ZjA1YjA2Yzg4NzhkNjQxYTI1ODUxOWE=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-25T04:20:40Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-25T04:40:04Z"}, "message": "Refactor `booleans`\n\nInline `snip (..)` function", "tree": {"sha": "96457361bf8a92178a725da3f377e10e032254f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96457361bf8a92178a725da3f377e10e032254f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89cdd26e71ecc7778f05b06c8878d641a258519a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89cdd26e71ecc7778f05b06c8878d641a258519a", "html_url": "https://github.com/rust-lang/rust/commit/89cdd26e71ecc7778f05b06c8878d641a258519a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89cdd26e71ecc7778f05b06c8878d641a258519a/comments", "author": null, "committer": null, "parents": [{"sha": "0cc48ad9f9bddf8fda492a2ab2485dfee69b8cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc48ad9f9bddf8fda492a2ab2485dfee69b8cf9", "html_url": "https://github.com/rust-lang/rust/commit/0cc48ad9f9bddf8fda492a2ab2485dfee69b8cf9"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "dafa34dec1d30f10d51caf8781efe1ba02187f9b", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/89cdd26e71ecc7778f05b06c8878d641a258519a/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cdd26e71ecc7778f05b06c8878d641a258519a/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=89cdd26e71ecc7778f05b06c8878d641a258519a", "patch": "@@ -183,7 +183,7 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                         self.output.push_str(&str)\n                     } else {\n                         self.output.push('!');\n-                        let snip = snip(self.cx, terminal)?;\n+                        let snip = snippet_opt(self.cx, terminal.span)?;\n                         self.output.push_str(&snip);\n                     }\n                 },\n@@ -215,18 +215,14 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                 }\n             },\n             &Term(n) => {\n-                let snip = snip(self.cx, self.terminals[n as usize])?;\n+                let snip = snippet_opt(self.cx, self.terminals[n as usize].span)?;\n                 self.output.push_str(&snip);\n             },\n         }\n         Some(())\n     }\n }\n \n-fn snip(cx: &LateContext<'_, '_>, e: &Expr) -> Option<String> {\n-    snippet_opt(cx, e.span)\n-}\n-\n fn simplify_not(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<String> {\n     match &expr.node {\n         ExprKind::Binary(binop, lhs, rhs) => {\n@@ -243,7 +239,14 @@ fn simplify_not(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<String> {\n                 BinOpKind::Ge => Some(\" < \"),\n                 _ => None,\n             }\n-            .and_then(|op| Some(format!(\"{}{}{}\", snip(cx, lhs)?, op, snip(cx, rhs)?)))\n+            .and_then(|op| {\n+                Some(format!(\n+                    \"{}{}{}\",\n+                    snippet_opt(cx, lhs.span)?,\n+                    op,\n+                    snippet_opt(cx, rhs.span)?\n+                ))\n+            })\n         },\n         ExprKind::MethodCall(path, _, args) if args.len() == 1 => {\n             let type_of_receiver = cx.tables.expr_ty(&args[0]);\n@@ -255,7 +258,7 @@ fn simplify_not(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<String> {\n                 .cloned()\n                 .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                 .find(|&(a, _)| a == path.ident.name.as_str())\n-                .and_then(|(_, neg_method)| Some(format!(\"{}.{}()\", snip(cx, &args[0])?, neg_method)))\n+                .and_then(|(_, neg_method)| Some(format!(\"{}.{}()\", snippet_opt(cx, args[0].span)?, neg_method)))\n         },\n         _ => None,\n     }"}]}