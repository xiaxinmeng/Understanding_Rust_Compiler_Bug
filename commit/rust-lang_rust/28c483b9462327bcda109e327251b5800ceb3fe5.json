{"sha": "28c483b9462327bcda109e327251b5800ceb3fe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YzQ4M2I5NDYyMzI3YmNkYTEwOWUzMjcyNTFiNTgwMGNlYjNmZTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-01T20:54:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-12T04:38:40Z"}, "message": "deconstruct the `ControlFlowGraph` trait into more granular traits", "tree": {"sha": "3a90d6d94e51ac9e9c6ac2521a6b545048fee7d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a90d6d94e51ac9e9c6ac2521a6b545048fee7d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28c483b9462327bcda109e327251b5800ceb3fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28c483b9462327bcda109e327251b5800ceb3fe5", "html_url": "https://github.com/rust-lang/rust/commit/28c483b9462327bcda109e327251b5800ceb3fe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28c483b9462327bcda109e327251b5800ceb3fe5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa240e96a5f5a0f4f819feda34fd6927cf7d60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa240e96a5f5a0f4f819feda34fd6927cf7d60d", "html_url": "https://github.com/rust-lang/rust/commit/5fa240e96a5f5a0f4f819feda34fd6927cf7d60d"}], "stats": {"total": 194, "additions": 130, "deletions": 64}, "files": [{"sha": "1ce5742b4646fcdfcabd6d8b789e7fb82c7265ca", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=28c483b9462327bcda109e327251b5800ceb3fe5", "patch": "@@ -22,7 +22,7 @@ use mir::visit::MirVisitable;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_data_structures::control_flow_graph::dominators::{dominators, Dominators};\n-use rustc_data_structures::control_flow_graph::ControlFlowGraph;\n+use rustc_data_structures::control_flow_graph;\n use rustc_data_structures::control_flow_graph::{GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::small_vec::SmallVec;\n@@ -2289,23 +2289,32 @@ fn item_path_str(def_id: DefId) -> String {\n     ty::tls::with(|tcx| tcx.item_path_str(def_id))\n }\n \n-impl<'tcx> ControlFlowGraph for Mir<'tcx> {\n+impl<'tcx> control_flow_graph::DirectedGraph for Mir<'tcx> {\n     type Node = BasicBlock;\n+}\n \n+impl<'tcx> control_flow_graph::WithNumNodes for Mir<'tcx> {\n     fn num_nodes(&self) -> usize {\n         self.basic_blocks.len()\n     }\n+}\n \n+impl<'tcx> control_flow_graph::WithStartNode for Mir<'tcx> {\n     fn start_node(&self) -> Self::Node {\n         START_BLOCK\n     }\n+}\n \n+impl<'tcx> control_flow_graph::WithPredecessors for Mir<'tcx> {\n     fn predecessors<'graph>(\n         &'graph self,\n         node: Self::Node,\n     ) -> <Self as GraphPredecessors<'graph>>::Iter {\n         self.predecessors_for(node).clone().into_iter()\n     }\n+}\n+\n+impl<'tcx> control_flow_graph::WithSuccessors for Mir<'tcx> {\n     fn successors<'graph>(\n         &'graph self,\n         node: Self::Node,\n@@ -2314,12 +2323,12 @@ impl<'tcx> ControlFlowGraph for Mir<'tcx> {\n     }\n }\n \n-impl<'a, 'b> GraphPredecessors<'b> for Mir<'a> {\n+impl<'a, 'b> control_flow_graph::GraphPredecessors<'b> for Mir<'a> {\n     type Item = BasicBlock;\n     type Iter = IntoIter<BasicBlock>;\n }\n \n-impl<'a, 'b> GraphSuccessors<'b> for Mir<'a> {\n+impl<'a, 'b> control_flow_graph::GraphSuccessors<'b> for Mir<'a> {\n     type Item = BasicBlock;\n     type Iter = iter::Cloned<Successors<'b>>;\n }"}, {"sha": "d134fad2855bbdd999907698e10e7e17cfd8e07b", "filename": "src/librustc_data_structures/control_flow_graph/dominators/mod.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs?ref=28c483b9462327bcda109e327251b5800ceb3fe5", "patch": "@@ -14,9 +14,9 @@\n //! Rice Computer Science TS-06-33870\n //! <https://www.cs.rice.edu/~keith/EMBED/dom.pdf>\n \n-use super::ControlFlowGraph;\n+use super::super::indexed_vec::{Idx, IndexVec};\n use super::iterate::reverse_post_order;\n-use super::super::indexed_vec::{IndexVec, Idx};\n+use super::ControlFlowGraph;\n \n use std::fmt;\n \n@@ -29,15 +29,16 @@ pub fn dominators<G: ControlFlowGraph>(graph: &G) -> Dominators<G::Node> {\n     dominators_given_rpo(graph, &rpo)\n }\n \n-pub fn dominators_given_rpo<G: ControlFlowGraph>(graph: &G,\n-                                                 rpo: &[G::Node])\n-                                                 -> Dominators<G::Node> {\n+pub fn dominators_given_rpo<G: ControlFlowGraph>(\n+    graph: &G,\n+    rpo: &[G::Node],\n+) -> Dominators<G::Node> {\n     let start_node = graph.start_node();\n     assert_eq!(rpo[0], start_node);\n \n     // compute the post order index (rank) for each node\n-    let mut post_order_rank: IndexVec<G::Node, usize> = IndexVec::from_elem_n(usize::default(),\n-                                                                              graph.num_nodes());\n+    let mut post_order_rank: IndexVec<G::Node, usize> =\n+        IndexVec::from_elem_n(usize::default(), graph.num_nodes());\n     for (index, node) in rpo.iter().rev().cloned().enumerate() {\n         post_order_rank[node] = index;\n     }\n@@ -56,10 +57,12 @@ pub fn dominators_given_rpo<G: ControlFlowGraph>(graph: &G,\n                 if immediate_dominators[pred].is_some() {\n                     // (*)\n                     // (*) dominators for `pred` have been calculated\n-                    new_idom = intersect_opt(&post_order_rank,\n-                                             &immediate_dominators,\n-                                             new_idom,\n-                                             Some(pred));\n+                    new_idom = intersect_opt(\n+                        &post_order_rank,\n+                        &immediate_dominators,\n+                        new_idom,\n+                        Some(pred),\n+                    );\n                 }\n             }\n \n@@ -76,23 +79,25 @@ pub fn dominators_given_rpo<G: ControlFlowGraph>(graph: &G,\n     }\n }\n \n-fn intersect_opt<Node: Idx>(post_order_rank: &IndexVec<Node, usize>,\n-                            immediate_dominators: &IndexVec<Node, Option<Node>>,\n-                            node1: Option<Node>,\n-                            node2: Option<Node>)\n-                            -> Option<Node> {\n+fn intersect_opt<Node: Idx>(\n+    post_order_rank: &IndexVec<Node, usize>,\n+    immediate_dominators: &IndexVec<Node, Option<Node>>,\n+    node1: Option<Node>,\n+    node2: Option<Node>,\n+) -> Option<Node> {\n     match (node1, node2) {\n         (None, None) => None,\n         (Some(n), None) | (None, Some(n)) => Some(n),\n         (Some(n1), Some(n2)) => Some(intersect(post_order_rank, immediate_dominators, n1, n2)),\n     }\n }\n \n-fn intersect<Node: Idx>(post_order_rank: &IndexVec<Node, usize>,\n-                        immediate_dominators: &IndexVec<Node, Option<Node>>,\n-                        mut node1: Node,\n-                        mut node2: Node)\n-                        -> Node {\n+fn intersect<Node: Idx>(\n+    post_order_rank: &IndexVec<Node, usize>,\n+    immediate_dominators: &IndexVec<Node, Option<Node>>,\n+    mut node1: Node,\n+    mut node2: Node,\n+) -> Node {\n     while node1 != node2 {\n         while post_order_rank[node1] < post_order_rank[node2] {\n             node1 = immediate_dominators[node1].unwrap();\n@@ -176,11 +181,13 @@ impl<Node: Idx> DominatorTree<Node> {\n \n impl<Node: Idx> fmt::Debug for DominatorTree<Node> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(&DominatorTreeNode {\n-                            tree: self,\n-                            node: self.root,\n-                        },\n-                        fmt)\n+        fmt::Debug::fmt(\n+            &DominatorTreeNode {\n+                tree: self,\n+                node: self.root,\n+            },\n+            fmt,\n+        )\n     }\n }\n \n@@ -194,11 +201,9 @@ impl<'tree, Node: Idx> fmt::Debug for DominatorTreeNode<'tree, Node> {\n         let subtrees: Vec<_> = self.tree\n             .children(self.node)\n             .iter()\n-            .map(|&child| {\n-                DominatorTreeNode {\n-                    tree: self.tree,\n-                    node: child,\n-                }\n+            .map(|&child| DominatorTreeNode {\n+                tree: self.tree,\n+                node: child,\n             })\n             .collect();\n         fmt.debug_tuple(\"\")"}, {"sha": "3afdc88d60279a001724064acbca44e3a1c7a091", "filename": "src/librustc_data_structures/control_flow_graph/iterate/mod.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fiterate%2Fmod.rs?ref=28c483b9462327bcda109e327251b5800ceb3fe5", "patch": "@@ -8,20 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::ControlFlowGraph;\n use super::super::indexed_vec::IndexVec;\n+use super::{DirectedGraph, WithSuccessors, WithNumNodes};\n \n #[cfg(test)]\n mod test;\n \n-pub fn post_order_from<G: ControlFlowGraph>(graph: &G, start_node: G::Node) -> Vec<G::Node> {\n+pub fn post_order_from<G: DirectedGraph + WithSuccessors + WithNumNodes>(\n+    graph: &G,\n+    start_node: G::Node,\n+) -> Vec<G::Node> {\n     post_order_from_to(graph, start_node, None)\n }\n \n-pub fn post_order_from_to<G: ControlFlowGraph>(graph: &G,\n-                                               start_node: G::Node,\n-                                               end_node: Option<G::Node>)\n-                                               -> Vec<G::Node> {\n+pub fn post_order_from_to<G: DirectedGraph + WithSuccessors + WithNumNodes>(\n+    graph: &G,\n+    start_node: G::Node,\n+    end_node: Option<G::Node>,\n+) -> Vec<G::Node> {\n     let mut visited: IndexVec<G::Node, bool> = IndexVec::from_elem_n(false, graph.num_nodes());\n     let mut result: Vec<G::Node> = Vec::with_capacity(graph.num_nodes());\n     if let Some(end_node) = end_node {\n@@ -31,10 +35,12 @@ pub fn post_order_from_to<G: ControlFlowGraph>(graph: &G,\n     result\n }\n \n-fn post_order_walk<G: ControlFlowGraph>(graph: &G,\n-                                        node: G::Node,\n-                                        result: &mut Vec<G::Node>,\n-                                        visited: &mut IndexVec<G::Node, bool>) {\n+fn post_order_walk<G: DirectedGraph + WithSuccessors + WithNumNodes>(\n+    graph: &G,\n+    node: G::Node,\n+    result: &mut Vec<G::Node>,\n+    visited: &mut IndexVec<G::Node, bool>,\n+) {\n     if visited[node] {\n         return;\n     }\n@@ -47,7 +53,10 @@ fn post_order_walk<G: ControlFlowGraph>(graph: &G,\n     result.push(node);\n }\n \n-pub fn reverse_post_order<G: ControlFlowGraph>(graph: &G, start_node: G::Node) -> Vec<G::Node> {\n+pub fn reverse_post_order<G: DirectedGraph + WithSuccessors + WithNumNodes>(\n+    graph: &G,\n+    start_node: G::Node,\n+) -> Vec<G::Node> {\n     let mut vec = post_order_from(graph, start_node);\n     vec.reverse();\n     vec"}, {"sha": "cfb4b07b50582d11fa835633656cdd7d0b7a4056", "filename": "src/librustc_data_structures/control_flow_graph/mod.rs", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fmod.rs?ref=28c483b9462327bcda109e327251b5800ceb3fe5", "patch": "@@ -17,26 +17,61 @@ mod reference;\n #[cfg(test)]\n mod test;\n \n-pub trait ControlFlowGraph\n-    where Self: for<'graph> GraphPredecessors<'graph, Item=<Self as ControlFlowGraph>::Node>,\n-          Self: for<'graph> GraphSuccessors<'graph, Item=<Self as ControlFlowGraph>::Node>\n-{\n+pub trait DirectedGraph {\n     type Node: Idx;\n+}\n \n+pub trait WithNumNodes: DirectedGraph {\n     fn num_nodes(&self) -> usize;\n-    fn start_node(&self) -> Self::Node;\n-    fn predecessors<'graph>(&'graph self, node: Self::Node)\n-                            -> <Self as GraphPredecessors<'graph>>::Iter;\n-    fn successors<'graph>(&'graph self, node: Self::Node)\n-                            -> <Self as GraphSuccessors<'graph>>::Iter;\n }\n \n-pub trait GraphPredecessors<'graph> {\n+pub trait WithSuccessors: DirectedGraph\n+where\n+    Self: for<'graph> GraphSuccessors<'graph, Item = <Self as DirectedGraph>::Node>,\n+{\n+    fn successors<'graph>(\n+        &'graph self,\n+        node: Self::Node,\n+    ) -> <Self as GraphSuccessors<'graph>>::Iter;\n+}\n+\n+pub trait GraphSuccessors<'graph> {\n     type Item;\n     type Iter: Iterator<Item = Self::Item>;\n }\n \n-pub trait GraphSuccessors<'graph> {\n+pub trait WithPredecessors: DirectedGraph\n+where\n+    Self: for<'graph> GraphPredecessors<'graph, Item = <Self as DirectedGraph>::Node>,\n+{\n+    fn predecessors<'graph>(\n+        &'graph self,\n+        node: Self::Node,\n+    ) -> <Self as GraphPredecessors<'graph>>::Iter;\n+}\n+\n+pub trait GraphPredecessors<'graph> {\n     type Item;\n     type Iter: Iterator<Item = Self::Item>;\n }\n+\n+pub trait WithStartNode: DirectedGraph {\n+    fn start_node(&self) -> Self::Node;\n+}\n+\n+pub trait ControlFlowGraph:\n+    DirectedGraph + WithStartNode + WithPredecessors + WithStartNode + WithSuccessors + WithNumNodes\n+{\n+    // convenient trait\n+}\n+\n+impl<T> ControlFlowGraph for T\n+where\n+    T: DirectedGraph\n+        + WithStartNode\n+        + WithPredecessors\n+        + WithStartNode\n+        + WithSuccessors\n+        + WithNumNodes,\n+{\n+}"}, {"sha": "a7b763db8da293eed8ae251d6d4c3ebb5fc2ef51", "filename": "src/librustc_data_structures/control_flow_graph/reference.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c483b9462327bcda109e327251b5800ceb3fe5/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freference.rs?ref=28c483b9462327bcda109e327251b5800ceb3fe5", "patch": "@@ -10,34 +10,42 @@\n \n use super::*;\n \n-impl<'graph, G: ControlFlowGraph> ControlFlowGraph for &'graph G {\n+impl<'graph, G: DirectedGraph> DirectedGraph for &'graph G {\n     type Node = G::Node;\n+}\n \n+impl<'graph, G: WithNumNodes> WithNumNodes for &'graph G {\n     fn num_nodes(&self) -> usize {\n         (**self).num_nodes()\n     }\n+}\n \n+impl<'graph, G: WithStartNode> WithStartNode for &'graph G {\n     fn start_node(&self) -> Self::Node {\n         (**self).start_node()\n     }\n+}\n+\n+impl<'graph, G: WithSuccessors> WithSuccessors for &'graph G {\n+    fn successors<'iter>(&'iter self, node: Self::Node) -> <Self as GraphSuccessors<'iter>>::Iter {\n+        (**self).successors(node)\n+    }\n+}\n \n+impl<'graph, G: WithPredecessors> WithPredecessors for &'graph G {\n     fn predecessors<'iter>(&'iter self,\n                            node: Self::Node)\n                            -> <Self as GraphPredecessors<'iter>>::Iter {\n         (**self).predecessors(node)\n     }\n-\n-    fn successors<'iter>(&'iter self, node: Self::Node) -> <Self as GraphSuccessors<'iter>>::Iter {\n-        (**self).successors(node)\n-    }\n }\n \n-impl<'iter, 'graph, G: ControlFlowGraph> GraphPredecessors<'iter> for &'graph G {\n+impl<'iter, 'graph, G: WithPredecessors> GraphPredecessors<'iter> for &'graph G {\n     type Item = G::Node;\n     type Iter = <G as GraphPredecessors<'iter>>::Iter;\n }\n \n-impl<'iter, 'graph, G: ControlFlowGraph> GraphSuccessors<'iter> for &'graph G {\n+impl<'iter, 'graph, G: WithSuccessors> GraphSuccessors<'iter> for &'graph G {\n     type Item = G::Node;\n     type Iter = <G as GraphSuccessors<'iter>>::Iter;\n }"}]}