{"sha": "b49b30746d8276b833c058fde88073800a1fdf82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OWIzMDc0NmQ4Mjc2YjgzM2MwNThmZGU4ODA3MzgwMGExZmRmODI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-13T19:00:26Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-13T19:00:26Z"}, "message": "Disable formatting macro-def if args do not fit on one line", "tree": {"sha": "77e64ec510524755020f4dca1f105e2ff17ea3ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77e64ec510524755020f4dca1f105e2ff17ea3ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b49b30746d8276b833c058fde88073800a1fdf82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b49b30746d8276b833c058fde88073800a1fdf82", "html_url": "https://github.com/rust-lang/rust/commit/b49b30746d8276b833c058fde88073800a1fdf82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b49b30746d8276b833c058fde88073800a1fdf82/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d36c70199322b262479aca949871ff97ec6358", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d36c70199322b262479aca949871ff97ec6358", "html_url": "https://github.com/rust-lang/rust/commit/67d36c70199322b262479aca949871ff97ec6358"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "a8a8c28c585b28f3b28fbce04a2b939a053f3c6c", "filename": "rustfmt-core/src/macros.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b49b30746d8276b833c058fde88073800a1fdf82/rustfmt-core%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49b30746d8276b833c058fde88073800a1fdf82/rustfmt-core%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fmacros.rs?ref=b49b30746d8276b833c058fde88073800a1fdf82", "patch": "@@ -431,7 +431,8 @@ fn replace_names(input: &str) -> Option<(String, HashMap<String, String>)> {\n // and `(`/`)` have special meaning.\n //\n // We always try and format on one line.\n-fn format_macro_args(toks: ThinTokenStream) -> Option<String> {\n+// FIXME: Use multi-line when every thing does not fit on one line.\n+fn format_macro_args(toks: ThinTokenStream, shape: Shape) -> Option<String> {\n     let mut result = String::with_capacity(128);\n     let mut insert_space = SpaceState::Never;\n \n@@ -459,7 +460,7 @@ fn format_macro_args(toks: ThinTokenStream) -> Option<String> {\n                 if let SpaceState::Always = insert_space {\n                     result.push(' ');\n                 }\n-                let formatted = format_macro_args(d.tts)?;\n+                let formatted = format_macro_args(d.tts, shape)?;\n                 match d.delim {\n                     DelimToken::Paren => {\n                         result.push_str(&format!(\"({})\", formatted));\n@@ -482,7 +483,11 @@ fn format_macro_args(toks: ThinTokenStream) -> Option<String> {\n         }\n     }\n \n-    Some(result)\n+    if result.len() <= shape.width {\n+        Some(result)\n+    } else {\n+        None\n+    }\n }\n \n // We should insert a space if the next token is a:\n@@ -617,7 +622,7 @@ fn macro_style(mac: &ast::Mac, context: &RewriteContext) -> MacroStyle {\n ///         a,\n ///         b,\n ///         c,\n-//      ),\n+///     ),\n /// }\n /// ```\n fn indent_macro_snippet(\n@@ -757,7 +762,8 @@ impl MacroBranch {\n             return None;\n         }\n \n-        let mut result = format_macro_args(self.args.clone())?;\n+        // 5 = \" => {\"\n+        let mut result = format_macro_args(self.args.clone(), shape.sub_width(5)?)?;\n \n         if multi_branch_style {\n             result += \" =>\";\n@@ -847,7 +853,12 @@ mod test {\n             &ParseSess::new(FilePathMapping::empty()),\n             None,\n         );\n-        format_macro_args(input.into()).unwrap()\n+        let shape = Shape {\n+            width: 100,\n+            indent: Indent::empty(),\n+            offset: 0,\n+        };\n+        format_macro_args(input.into(), shape).unwrap()\n     }\n \n     #[test]"}, {"sha": "ed5f7e16c04755e5c982a76cb0e6f00c785410d1", "filename": "rustfmt-core/tests/source/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b49b30746d8276b833c058fde88073800a1fdf82/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49b30746d8276b833c058fde88073800a1fdf82/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs?ref=b49b30746d8276b833c058fde88073800a1fdf82", "patch": "@@ -49,3 +49,13 @@ macro m2 {\n \tmod macro_item    {  struct $item ; }\n }\n }\n+\n+// #2439\n+macro_rules! m {\n+    (\n+        $line0_xxxxxxxxxxxxxxxxx: expr,\n+        $line1_xxxxxxxxxxxxxxxxx: expr,\n+        $line2_xxxxxxxxxxxxxxxxx: expr,\n+        $line3_xxxxxxxxxxxxxxxxx: expr,\n+    ) => {};\n+}"}, {"sha": "ef4a59e38cd4a40419de909477f1d31cbff45670", "filename": "rustfmt-core/tests/target/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b49b30746d8276b833c058fde88073800a1fdf82/rustfmt-core%2Ftests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49b30746d8276b833c058fde88073800a1fdf82/rustfmt-core%2Ftests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Ftarget%2Fmacro_rules.rs?ref=b49b30746d8276b833c058fde88073800a1fdf82", "patch": "@@ -41,3 +41,13 @@ macro m2 {\n         }\n     }\n }\n+\n+// #2439\n+macro_rules! m {\n+    (\n+        $line0_xxxxxxxxxxxxxxxxx: expr,\n+        $line1_xxxxxxxxxxxxxxxxx: expr,\n+        $line2_xxxxxxxxxxxxxxxxx: expr,\n+        $line3_xxxxxxxxxxxxxxxxx: expr,\n+    ) => {};\n+}"}]}