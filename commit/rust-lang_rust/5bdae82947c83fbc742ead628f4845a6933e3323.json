{"sha": "5bdae82947c83fbc742ead628f4845a6933e3323", "node_id": "C_kwDOAAsO6NoAKDViZGFlODI5NDdjODNmYmM3NDJlYWQ2MjhmNDg0NWE2OTMzZTMzMjM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-04T15:58:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-04T15:58:06Z"}, "message": "Merge #10456\n\n10456: fix: Avoid cycle when lowering predicates for associated item lookup r=flodiebold a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10386\r\n\r\n(the salsa bug persists, but this lets us avoid it by fixing the underlying bug)\r\n\r\nThis reimplements the rustc logic in https://github.com/rust-lang/rust/blob/b27661eb33c74cb514dba059b47d86b6582ac1c2/compiler/rustc_typeck/src/collect.rs#L556: When resolving an associated type `T::Item`, we've previously lowered all predicates that could affect `T`, but we actually have to look only at those predicates whose traits define an associated type of the right name.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "a86d04fb95dc370aa215e8605b328456f1f21703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a86d04fb95dc370aa215e8605b328456f1f21703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bdae82947c83fbc742ead628f4845a6933e3323", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhWySOCRBK7hj4Ov3rIwAANycIABoCwH/+/LNr+Yz0bgSyBedi\nW+oFvyRzgaxojTCvq0zpM55BMfQI6l8n8Sw7fMnHC539P7ASE884TdrMdMgNoLPD\nNrAjEUwdk8w6u9++NSOBHce4gpHVlFJQHEksFJBru32xqdG0/N3QwRdfGE8X1xsD\nyr9yo4UriLWUnah/QZUYkRnnK+tombgokP2SxozSIMWDJtj9obik1UIuSi61zpdZ\nBENjAcbuSNL7m7KRIKdMyCziE79HWbE9PyYlzJpmySzPjlyVJTBm/MM81wRGIryW\nDULdqAMo7w+U6rPXoebmqrYCVmwVTn3W2US5JxOh9UW0K7suWWie55cjVY5UAuQ=\n=exMx\n-----END PGP SIGNATURE-----\n", "payload": "tree a86d04fb95dc370aa215e8605b328456f1f21703\nparent cf1ea9d0b9241265369b3ba869795ac9bda9f146\nparent 3aa37d7f804a776637d516a77842e5198b5d5d9f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633363086 +0000\ncommitter GitHub <noreply@github.com> 1633363086 +0000\n\nMerge #10456\n\n10456: fix: Avoid cycle when lowering predicates for associated item lookup r=flodiebold a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10386\r\n\r\n(the salsa bug persists, but this lets us avoid it by fixing the underlying bug)\r\n\r\nThis reimplements the rustc logic in https://github.com/rust-lang/rust/blob/b27661eb33c74cb514dba059b47d86b6582ac1c2/compiler/rustc_typeck/src/collect.rs#L556: When resolving an associated type `T::Item`, we've previously lowered all predicates that could affect `T`, but we actually have to look only at those predicates whose traits define an associated type of the right name.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bdae82947c83fbc742ead628f4845a6933e3323", "html_url": "https://github.com/rust-lang/rust/commit/5bdae82947c83fbc742ead628f4845a6933e3323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bdae82947c83fbc742ead628f4845a6933e3323/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf1ea9d0b9241265369b3ba869795ac9bda9f146", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1ea9d0b9241265369b3ba869795ac9bda9f146", "html_url": "https://github.com/rust-lang/rust/commit/cf1ea9d0b9241265369b3ba869795ac9bda9f146"}, {"sha": "3aa37d7f804a776637d516a77842e5198b5d5d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa37d7f804a776637d516a77842e5198b5d5d9f", "html_url": "https://github.com/rust-lang/rust/commit/3aa37d7f804a776637d516a77842e5198b5d5d9f"}], "stats": {"total": 82, "additions": 65, "deletions": 17}, "files": [{"sha": "a541cbd5e18888ac6c1db22d5349e49c3a098f3a", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=5bdae82947c83fbc742ead628f4845a6933e3323", "patch": "@@ -241,7 +241,7 @@ impl HirDisplay for TypeParam {\n             return Ok(());\n         }\n \n-        let bounds = f.db.generic_predicates_for_param(self.id);\n+        let bounds = f.db.generic_predicates_for_param(self.id, None);\n         let substs = TyBuilder::type_params_subst(f.db, self.id.parent);\n         let predicates: Vec<_> =\n             bounds.iter().cloned().map(|b| b.substitute(&Interner, &substs)).collect();"}, {"sha": "a33c8ce65eb0c0a5d0ad188b1c40685e02610469", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5bdae82947c83fbc742ead628f4845a6933e3323", "patch": "@@ -2024,7 +2024,7 @@ impl TypeParam {\n     }\n \n     pub fn trait_bounds(self, db: &dyn HirDatabase) -> Vec<Trait> {\n-        db.generic_predicates_for_param(self.id)\n+        db.generic_predicates_for_param(self.id, None)\n             .iter()\n             .filter_map(|pred| match &pred.skip_binders().skip_binders() {\n                 hir_ty::WhereClause::Implemented(trait_ref) => {"}, {"sha": "98a584900123fd747381d901cad38f616b8fc029", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=5bdae82947c83fbc742ead628f4845a6933e3323", "patch": "@@ -61,6 +61,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn generic_predicates_for_param(\n         &self,\n         param_id: TypeParamId,\n+        assoc_name: Option<Name>,\n     ) -> Arc<[Binders<QuantifiedWhereClause>]>;\n \n     #[salsa::invoke(crate::lower::generic_predicates_query)]"}, {"sha": "d5f3940149f1965517a6aff01a287b37d49c3764", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 58, "deletions": 12, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=5bdae82947c83fbc742ead628f4845a6933e3323", "patch": "@@ -30,6 +30,7 @@ use smallvec::SmallVec;\n use stdx::impl_from;\n use syntax::ast;\n \n+use crate::all_super_traits;\n use crate::{\n     consteval,\n     db::HirDatabase,\n@@ -531,9 +532,10 @@ impl<'a> TyLoweringContext<'a> {\n \n     fn select_associated_type(&self, res: Option<TypeNs>, segment: PathSegment<'_>) -> Ty {\n         if let Some(res) = res {\n-            let ty = associated_type_shorthand_candidates(\n+            let ty = named_associated_type_shorthand_candidates(\n                 self.db,\n                 res,\n+                Some(segment.name.clone()),\n                 move |name, t, associated_ty| {\n                     if name == segment.name {\n                         let substs = match self.type_param_mode {\n@@ -555,16 +557,16 @@ impl<'a> TyLoweringContext<'a> {\n                         // associated_type_shorthand_candidates does not do that\n                         let substs = substs.shifted_in_from(&Interner, self.in_binders);\n                         // FIXME handle type parameters on the segment\n-                        return Some(\n+                        Some(\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n                                 associated_ty_id: to_assoc_type_id(associated_ty),\n                                 substitution: substs,\n                             }))\n                             .intern(&Interner),\n-                        );\n+                        )\n+                    } else {\n+                        None\n                     }\n-\n-                    None\n                 },\n             );\n \n@@ -935,6 +937,15 @@ pub fn callable_item_sig(db: &dyn HirDatabase, def: CallableDefId) -> PolyFnSig\n pub fn associated_type_shorthand_candidates<R>(\n     db: &dyn HirDatabase,\n     res: TypeNs,\n+    cb: impl FnMut(&Name, &TraitRef, TypeAliasId) -> Option<R>,\n+) -> Option<R> {\n+    named_associated_type_shorthand_candidates(db, res, None, cb)\n+}\n+\n+fn named_associated_type_shorthand_candidates<R>(\n+    db: &dyn HirDatabase,\n+    res: TypeNs,\n+    assoc_name: Option<Name>,\n     mut cb: impl FnMut(&Name, &TraitRef, TypeAliasId) -> Option<R>,\n ) -> Option<R> {\n     let mut search = |t| {\n@@ -959,7 +970,7 @@ pub fn associated_type_shorthand_candidates<R>(\n             db.impl_trait(impl_id)?.into_value_and_skipped_binders().0,\n         ),\n         TypeNs::GenericParam(param_id) => {\n-            let predicates = db.generic_predicates_for_param(param_id);\n+            let predicates = db.generic_predicates_for_param(param_id, assoc_name);\n             let res = predicates.iter().find_map(|pred| match pred.skip_binders().skip_binders() {\n                 // FIXME: how to correctly handle higher-ranked bounds here?\n                 WhereClause::Implemented(tr) => search(\n@@ -1022,6 +1033,7 @@ pub(crate) fn field_types_query(\n pub(crate) fn generic_predicates_for_param_query(\n     db: &dyn HirDatabase,\n     param_id: TypeParamId,\n+    assoc_name: Option<Name>,\n ) -> Arc<[Binders<QuantifiedWhereClause>]> {\n     let resolver = param_id.parent.resolver(db.upcast());\n     let ctx =\n@@ -1031,13 +1043,46 @@ pub(crate) fn generic_predicates_for_param_query(\n         .where_predicates_in_scope()\n         // we have to filter out all other predicates *first*, before attempting to lower them\n         .filter(|pred| match pred {\n-            WherePredicate::ForLifetime { target, .. }\n-            | WherePredicate::TypeBound { target, .. } => match target {\n-                WherePredicateTypeTarget::TypeRef(type_ref) => {\n-                    ctx.lower_ty_only_param(type_ref) == Some(param_id)\n+            WherePredicate::ForLifetime { target, bound, .. }\n+            | WherePredicate::TypeBound { target, bound, .. } => {\n+                match target {\n+                    WherePredicateTypeTarget::TypeRef(type_ref) => {\n+                        if ctx.lower_ty_only_param(type_ref) != Some(param_id) {\n+                            return false;\n+                        }\n+                    }\n+                    WherePredicateTypeTarget::TypeParam(local_id) => {\n+                        if *local_id != param_id.local_id {\n+                            return false;\n+                        }\n+                    }\n+                };\n+\n+                match &**bound {\n+                    TypeBound::ForLifetime(_, path) | TypeBound::Path(path, _) => {\n+                        // Only lower the bound if the trait could possibly define the associated\n+                        // type we're looking for.\n+\n+                        let assoc_name = match &assoc_name {\n+                            Some(it) => it,\n+                            None => return true,\n+                        };\n+                        let tr = match resolver\n+                            .resolve_path_in_type_ns_fully(db.upcast(), path.mod_path())\n+                        {\n+                            Some(TypeNs::TraitId(tr)) => tr,\n+                            _ => return false,\n+                        };\n+\n+                        all_super_traits(db.upcast(), tr).iter().any(|tr| {\n+                            db.trait_data(*tr).items.iter().any(|(name, item)| {\n+                                matches!(item, AssocItemId::TypeAliasId(_)) && name == assoc_name\n+                            })\n+                        })\n+                    }\n+                    TypeBound::Lifetime(_) | TypeBound::Error => false,\n                 }\n-                WherePredicateTypeTarget::TypeParam(local_id) => *local_id == param_id.local_id,\n-            },\n+            }\n             WherePredicate::Lifetime { .. } => false,\n         })\n         .flat_map(|pred| ctx.lower_where_predicate(pred, true).map(|p| make_binders(&generics, p)))\n@@ -1056,6 +1101,7 @@ pub(crate) fn generic_predicates_for_param_recover(\n     _db: &dyn HirDatabase,\n     _cycle: &[String],\n     _param_id: &TypeParamId,\n+    _assoc_name: &Option<Name>,\n ) -> Arc<[Binders<QuantifiedWhereClause>]> {\n     Arc::new([])\n }"}, {"sha": "9531be760e9d01b60873f18a5a80012afbb49fd0", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=5bdae82947c83fbc742ead628f4845a6933e3323", "patch": "@@ -2100,7 +2100,8 @@ fn test() {\n \n #[test]\n fn unselected_projection_in_trait_env_cycle_1() {\n-    // this is a legitimate cycle\n+    // This is not a cycle, because the `T: Trait2<T::Item>` bound depends only on the `T: Trait`\n+    // bound, not on itself (since only `Trait` can define `Item`).\n     check_types(\n         r#\"\n trait Trait {\n@@ -2111,7 +2112,7 @@ trait Trait2<T> {}\n \n fn test<T: Trait>() where T: Trait2<T::Item> {\n     let x: T::Item = no_matter;\n-}                  //^^^^^^^^^ {unknown}\n+}                  //^^^^^^^^^ Trait::Item<T>\n \"#,\n     );\n }"}, {"sha": "07898f00888f06396db914408c0234105cbdd541", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdae82947c83fbc742ead628f4845a6933e3323/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=5bdae82947c83fbc742ead628f4845a6933e3323", "patch": "@@ -79,7 +79,7 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n         Some(p) => TypeParamId { parent: trait_ref.hir_trait_id().into(), local_id: p },\n         None => return Vec::new(),\n     };\n-    db.generic_predicates_for_param(trait_self)\n+    db.generic_predicates_for_param(trait_self, None)\n         .iter()\n         .filter_map(|pred| {\n             pred.as_ref().filter_map(|pred| match pred.skip_binders() {"}]}