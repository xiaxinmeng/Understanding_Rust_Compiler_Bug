{"sha": "aa23c98450063992473d40d707273903f8a3937d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMjNjOTg0NTAwNjM5OTI0NzNkNDBkNzA3MjczOTAzZjhhMzkzN2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-05T01:16:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-13T22:42:55Z"}, "message": "std: Deprecate all std::os::*::raw types\n\nThis commit is an implementation of [RFC 1415][rfc] which deprecates all types\nin the `std::os::*::raw` modules.\n\n[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/1415-trim-std-os.md\n\nMany of the types in these modules don't actually have a canonical platform\nrepresentation, for example the definition of `stat` on 32-bit Linux will change\ndepending on whether C code is compiled with LFS support or not. Unfortunately\nthe current types in `std::os::*::raw` are billed as \"compatible with C\", which\nin light of this means it isn't really possible.\n\nTo make matters worse, platforms like Android sometimes define these types as\n*smaller* than the way they're actually represented in the `stat` structure\nitself. This means that when methods like `DirEntry::ino` are called on Android\nthe result may be truncated as we're tied to returning a `ino_t` type, not the\nunderlying type.\n\nThe commit here incorporates two backwards-compatible components:\n\n* Deprecate all `raw` types that aren't in `std::os::raw`\n* Expand the `std::os::*::fs::MetadataExt` trait on all platforms for method\n  accessors of all fields. The fields now returned widened types which are the\n  same across platforms (consistency across platforms is not required, however,\n  it's just convenient).\n\nand two also backwards-incompatible components:\n\n* Change the definition of all `std::os::*::raw` type aliases to\n  correspond to the newly widened types that are being returned on each\n  platform.\n* Change the definition of `std::os::*::raw::stat` on Linux to match the LFS\n  definitions rather than the standard ones.\n\nThe breaking changes here will specifically break code that assumes that `libc`\nand `std` agree on the definition of `std::os::*::raw` types, or that the `std`\ntypes are faithful representations of the types in C. An [audit] has been\nperformed of crates.io to determine the fallout which was determined two be\nminimal, with the two found cases of breakage having been fixed now.\n\n[audit]: https://github.com/rust-lang/rfcs/pull/1415#issuecomment-180645582\n\n---\n\nOk, so after all that, we're finally able to support LFS on Linux! This commit\nthen simultaneously starts using `stat64` and friends on Linux to ensure that we\ncan open >4GB files on 32-bit Linux. Yay!\n\nCloses #28978\nCloses #30050\nCloses #31549", "tree": {"sha": "b25b5d6622917e7786af77b0f07c594688e6e4b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b25b5d6622917e7786af77b0f07c594688e6e4b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa23c98450063992473d40d707273903f8a3937d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa23c98450063992473d40d707273903f8a3937d", "html_url": "https://github.com/rust-lang/rust/commit/aa23c98450063992473d40d707273903f8a3937d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa23c98450063992473d40d707273903f8a3937d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f4227af139f1da30710a9f07dc28e5a3ccc6fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4227af139f1da30710a9f07dc28e5a3ccc6fe5", "html_url": "https://github.com/rust-lang/rust/commit/3f4227af139f1da30710a9f07dc28e5a3ccc6fe5"}], "stats": {"total": 2518, "additions": 2036, "deletions": 482}, "files": [{"sha": "a51b46559859e67a2d514ca42c2b7a8d77a3a80a", "filename": "src/libstd/os/android/fs.rs", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,129 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::android::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}\n+"}, {"sha": "7cc37769c1e0b99aa773db3c72e00205297304c7", "filename": "src/libstd/os/android/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "ce6e810592c6c62e4ce71b600f382d66678c9bcc", "filename": "src/libstd/os/android/raw.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,6 +11,12 @@\n //! Android-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n use os::raw::c_long;\n \n@@ -26,22 +32,22 @@ mod arch {\n     use os::unix::raw::{uid_t, gid_t};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type dev_t = u32;\n+    pub type dev_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type mode_t = u16;\n+    pub type mode_t = u32;\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type blkcnt_t = u32;\n+    pub type blkcnt_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type blksize_t = u32;\n+    pub type blksize_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type ino_t = u32;\n+    pub type ino_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type nlink_t = u16;\n+    pub type nlink_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type off_t = i32;\n+    pub type off_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type time_t = i32;\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -52,7 +58,7 @@ mod arch {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad0: [c_uchar; 4],\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __st_ino: ino_t,\n+        pub __st_ino: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mode: c_uint,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n@@ -68,19 +74,19 @@ mod arch {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_size: c_longlong,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n+        pub st_blksize: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: c_ulonglong,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n+        pub st_atime: c_ulong,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_ulong,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n+        pub st_mtime: c_ulong,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_ulong,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n+        pub st_ctime: c_ulong,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_ulong,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n@@ -103,13 +109,13 @@ mod arch {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type blkcnt_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type blksize_t = u32;\n+    pub type blksize_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type ino_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type nlink_t = u32;\n+    pub type nlink_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type off_t = i64;\n+    pub type off_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type time_t = i64;\n "}, {"sha": "e4f1c9432f3f08f4cc60859c5b6a968330f5f021", "filename": "src/libstd/os/bitrig/fs.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,149 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::bitrig::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_flags(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gen(&self) -> u32;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_birthtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime as i64\n+    }\n+    fn st_birthtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+    fn st_gen(&self) -> u32 {\n+        self.as_inner().as_inner().st_gen as u32\n+    }\n+    fn st_flags(&self) -> u32 {\n+        self.as_inner().as_inner().st_flags as u32\n+    }\n+}\n+"}, {"sha": "fb58818a5baf101a8f1468a01a6901ce0158a0d1", "filename": "src/libstd/os/bitrig/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "3fc3c5937f4da7fe9758b3179320eb355185dcf8", "filename": "src/libstd/os/bitrig/raw.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,18 +11,24 @@\n //! Bitrig-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n@@ -32,43 +38,43 @@ use os::unix::raw::{uid_t, gid_t};\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mode: mode_t,\n+    pub st_mode: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_dev: dev_t,\n+    pub st_dev: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ino: ino_t,\n+    pub st_ino: u64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_nlink: nlink_t,\n+    pub st_nlink: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_uid: uid_t,\n+    pub st_uid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_gid: gid_t,\n+    pub st_gid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_rdev: dev_t,\n+    pub st_rdev: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime: time_t,\n+    pub st_atime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime_nsec: c_long,\n+    pub st_atime_nsec: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime: time_t,\n+    pub st_mtime: u64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime_nsec: c_long,\n+    pub st_mtime_nsec: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime: time_t,\n+    pub st_ctime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime_nsec: c_long,\n+    pub st_ctime_nsec: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_size: off_t,\n+    pub st_size: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blocks: blkcnt_t,\n+    pub st_blocks: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blksize: blksize_t,\n+    pub st_blksize: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_flags: fflags_t,\n+    pub st_flags: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime: time_t,\n+    pub st_birthtime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime_nsec: c_long,\n+    pub st_birthtime_nsec: i64,\n }"}, {"sha": "eb09800a18cb04a4a79872a19952f8e9a5149f09", "filename": "src/libstd/os/dragonfly/fs.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,154 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::dragonfly::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_flags(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gen(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_lspare(&self) -> u32;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_birthtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime as i64\n+    }\n+    fn st_birthtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+    fn st_gen(&self) -> u32 {\n+        self.as_inner().as_inner().st_gen as u32\n+    }\n+    fn st_flags(&self) -> u32 {\n+        self.as_inner().as_inner().st_flags as u32\n+    }\n+    fn st_lspare(&self) -> u32 {\n+        self.as_inner().as_inner().st_lspare as u32\n+    }\n+}\n+"}, {"sha": "645561823fcf98ea8a66c0d7ea23141ad35672b4", "filename": "src/libstd/os/dragonfly/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "f3bde9cd1f31508ed03e322d78a8d737040f154b", "filename": "src/libstd/os/dragonfly/raw.rs", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,18 +11,24 @@\n //! Dragonfly-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u16;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u16;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n@@ -32,47 +38,45 @@ use os::unix::raw::{uid_t, gid_t};\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ino: ino_t,\n+    pub st_dev: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_nlink: nlink_t,\n+    pub st_ino: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_dev: dev_t,\n+    pub st_mode: u16,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mode: mode_t,\n+    pub st_nlink: u16,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_padding1: u16,\n+    pub st_uid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_uid: uid_t,\n+    pub st_gid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_gid: gid_t,\n+    pub st_rdev: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_rdev: dev_t,\n+    pub st_atime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime: time_t,\n+    pub st_atime_nsec: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime_nsec: c_long,\n+    pub st_mtime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime: time_t,\n+    pub st_mtime_nsec: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime_nsec: c_long,\n+    pub st_ctime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime: time_t,\n+    pub st_ctime_nsec: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime_nsec: c_long,\n+    pub st_size: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_size: off_t,\n+    pub st_blocks: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blocks: blkcnt_t,\n+    pub st_blksize: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blksize: blksize_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_flags: fflags_t,\n+    pub st_flags: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_lspare: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_qspare1: i64,\n+    pub st_birthtime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_qspare2: i64,\n+    pub st_birthtime_nsec: i64,\n }"}, {"sha": "2f17d2f7409434c568887478bbafaefc2ec702c5", "filename": "src/libstd/os/freebsd/fs.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,154 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::freebsd::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_flags(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gen(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_lspare(&self) -> u32;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_birthtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime as i64\n+    }\n+    fn st_birthtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+    fn st_gen(&self) -> u32 {\n+        self.as_inner().as_inner().st_gen as u32\n+    }\n+    fn st_flags(&self) -> u32 {\n+        self.as_inner().as_inner().st_flags as u32\n+    }\n+    fn st_lspare(&self) -> u32 {\n+        self.as_inner().as_inner().st_lspare as u32\n+    }\n+}\n+"}, {"sha": "ce7b91ea41c877c7579bf005aecef6e1e05d9cdc", "filename": "src/libstd/os/freebsd/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "073ddf10d1ccdd57056d3428bcf94274acf75bb1", "filename": "src/libstd/os/freebsd/raw.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,14 +11,20 @@\n //! FreeBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u16;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u16;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n \n #[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n@@ -33,7 +39,7 @@ mod arch {\n     use os::raw::c_long;\n     use os::unix::raw::{uid_t, gid_t};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -99,47 +105,47 @@ mod arch {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_dev: dev_t,\n+        pub st_dev: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ino_t,\n+        pub st_ino: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: mode_t,\n+        pub st_mode: u16,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: nlink_t,\n+        pub st_nlink: u16,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: uid_t,\n+        pub st_uid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: gid_t,\n+        pub st_gid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_rdev: dev_t,\n+        pub st_rdev: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n+        pub st_atime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime_nsec: c_long,\n+        pub st_atime_nsec: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n+        pub st_mtime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime_nsec: c_long,\n+        pub st_mtime_nsec: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n+        pub st_ctime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime_nsec: c_long,\n+        pub st_ctime_nsec: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: off_t,\n+        pub st_size: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: blkcnt_t,\n+        pub st_blocks: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n+        pub st_blksize: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_flags: fflags_t,\n+        pub st_flags: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_gen: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_lspare: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_birthtime: time_t,\n+        pub st_birthtime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_birthtime_nsec: c_long,\n+        pub st_birthtime_nsec: i64,\n     }\n }\n "}, {"sha": "275daf3d3a0ac5f842c4e6d3db52f07447e01d62", "filename": "src/libstd/os/ios/fs.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,154 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::ios::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_flags(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gen(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_lspare(&self) -> u32;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_birthtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime as i64\n+    }\n+    fn st_birthtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+    fn st_gen(&self) -> u32 {\n+        self.as_inner().as_inner().st_gen as u32\n+    }\n+    fn st_flags(&self) -> u32 {\n+        self.as_inner().as_inner().st_flags as u32\n+    }\n+    fn st_lspare(&self) -> u32 {\n+        self.as_inner().as_inner().st_lspare as u32\n+    }\n+}\n+"}, {"sha": "4cad23389d02e214db5bb55fc5e23fd1da2ef62f", "filename": "src/libstd/os/ios/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "5a2de14b28b0c4be4c2eb3a138ed02aa9f8ccd45", "filename": "src/libstd/os/ios/raw.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fios%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,18 +11,23 @@\n //! iOS-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n use os::raw::c_long;\n-use os::unix::raw::{uid_t, gid_t};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u16;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u16;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n \n@@ -31,41 +36,41 @@ use os::unix::raw::{uid_t, gid_t};\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_dev: dev_t,\n+    pub st_dev: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mode: mode_t,\n+    pub st_mode: u16,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_nlink: nlink_t,\n+    pub st_nlink: u16,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ino: ino_t,\n+    pub st_ino: u64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_uid: uid_t,\n+    pub st_uid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_gid: gid_t,\n+    pub st_gid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_rdev: dev_t,\n+    pub st_rdev: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime: time_t,\n+    pub st_atime: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime: time_t,\n+    pub st_mtime: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime: time_t,\n+    pub st_ctime: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime: time_t,\n+    pub st_birthtime: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_size: off_t,\n+    pub st_size: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blocks: blkcnt_t,\n+    pub st_blocks: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blksize: blksize_t,\n+    pub st_blksize: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_flags: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]"}, {"sha": "11c41816cec862bec1a2b671eb9c06c0e700ea36", "filename": "src/libstd/os/linux/fs.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::linux::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat64\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "8ec44b9fae49759aef99fb752456b87be4200050", "filename": "src/libstd/os/linux/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "4113966841b24bdcd0d98ef74ac0908d17b701ec", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 80, "deletions": 93, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,6 +11,12 @@\n //! Linux-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n use os::raw::c_ulong;\n \n@@ -29,92 +35,79 @@ pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n           target_arch = \"arm\",\n           target_arch = \"asmjs\"))]\n mod arch {\n-    use super::{dev_t, mode_t};\n-    use os::raw::{c_long, c_short};\n-    use os::unix::raw::{gid_t, uid_t};\n+    use os::raw::{c_long, c_short, c_uint};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    #[cfg(not(any(target_env = \"musl\", target_arch = \"asmjs\")))]\n-    pub type ino_t = u32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    #[cfg(any(target_env = \"musl\", target_arch = \"asmjs\"))]\n-    pub type ino_t = u64;\n-\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_dev: dev_t,\n+        pub st_dev: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad1: c_short,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ino_t,\n+        pub __st_ino: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: mode_t,\n+        pub st_mode: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: nlink_t,\n+        pub st_nlink: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: uid_t,\n+        pub st_uid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: gid_t,\n+        pub st_gid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_rdev: dev_t,\n+        pub st_rdev: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad2: c_short,\n+        pub __pad2: c_uint,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: off_t,\n+        pub st_size: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n+        pub st_blksize: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: blkcnt_t,\n+        pub st_blocks: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n+        pub st_atime: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n+        pub st_mtime: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n+        pub st_ctime: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __unused4: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __unused5: c_long,\n+        pub st_ino: u64,\n     }\n }\n \n #[cfg(target_arch = \"mips\")]\n mod arch {\n-    use super::mode_t;\n     use os::raw::{c_long, c_ulong};\n-    use os::unix::raw::{gid_t, uid_t};\n \n     #[cfg(target_env = \"musl\")]\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n     #[cfg(not(target_env = \"musl\"))]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n     #[cfg(target_env = \"musl\")]\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n     #[cfg(not(target_env = \"musl\"))]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n     #[cfg(target_env = \"musl\")]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n     #[cfg(not(target_env = \"musl\"))]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -125,95 +118,91 @@ mod arch {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad1: [c_long; 3],\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ino_t,\n+        pub st_ino: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: mode_t,\n+        pub st_mode: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: nlink_t,\n+        pub st_nlink: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: uid_t,\n+        pub st_uid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: gid_t,\n+        pub st_gid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_rdev: c_ulong,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad2: [c_long; 2],\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: off_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_pad3: c_long,\n+        pub st_size: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n+        pub st_atime: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n+        pub st_mtime: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n+        pub st_ctime: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n+        pub st_blksize: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: blkcnt_t,\n+        pub st_blocks: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_pad5: [c_long; 14],\n     }\n }\n \n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n-    use super::{dev_t, mode_t};\n     use os::raw::{c_long, c_int};\n-    use os::unix::raw::{gid_t, uid_t};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_dev: dev_t,\n+        pub st_dev: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ino_t,\n+        pub st_ino: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: mode_t,\n+        pub st_mode: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: nlink_t,\n+        pub st_nlink: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: uid_t,\n+        pub st_uid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: gid_t,\n+        pub st_gid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_rdev: dev_t,\n+        pub st_rdev: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad1: dev_t,\n+        pub __pad1: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: off_t,\n+        pub st_size: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n+        pub st_blksize: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad2: c_int,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: blkcnt_t,\n+        pub st_blocks: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n+        pub st_atime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n+        pub st_mtime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n+        pub st_ctime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n@@ -223,53 +212,51 @@ mod arch {\n \n #[cfg(any(target_arch = \"x86_64\", target_arch = \"powerpc64\"))]\n mod arch {\n-    use super::{dev_t, mode_t};\n     use os::raw::{c_long, c_int};\n-    use os::unix::raw::{gid_t, uid_t};\n \n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_dev: dev_t,\n+        pub st_dev: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ino_t,\n+        pub st_ino: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: nlink_t,\n+        pub st_nlink: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: mode_t,\n+        pub st_mode: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: uid_t,\n+        pub st_uid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: gid_t,\n+        pub st_gid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub __pad0: c_int,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_rdev: dev_t,\n+        pub st_rdev: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: off_t,\n+        pub st_size: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n+        pub st_blksize: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: blkcnt_t,\n+        pub st_blocks: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n+        pub st_atime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n+        pub st_mtime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n+        pub st_ctime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]"}, {"sha": "12b44901d03d93b6bb468e205c944b310cb09d6c", "filename": "src/libstd/os/macos/fs.rs", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,160 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::macos::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_flags(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gen(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_lspare(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_qspare(&self) -> [u64; 2];\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_birthtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime as i64\n+    }\n+    fn st_birthtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+    fn st_gen(&self) -> u32 {\n+        self.as_inner().as_inner().st_gen as u32\n+    }\n+    fn st_flags(&self) -> u32 {\n+        self.as_inner().as_inner().st_flags as u32\n+    }\n+    fn st_lspare(&self) -> u32 {\n+        self.as_inner().as_inner().st_lspare as u32\n+    }\n+    fn st_qspare(&self) -> [u64; 2] {\n+        let qspare = self.as_inner().as_inner().st_qspare;\n+        [qspare[0] as u64, qspare[1] as u64]\n+    }\n+}\n+"}, {"sha": "4e995358fd8763580ba2ad7d8e8ab139c996944f", "filename": "src/libstd/os/macos/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "2148670ccbd2a5ec5b580f89870df6df627a3b57", "filename": "src/libstd/os/macos/raw.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,18 +11,23 @@\n //! MacOS-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n use os::raw::c_long;\n-use os::unix::raw::{uid_t, gid_t};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u16;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u16;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n \n@@ -31,41 +36,41 @@ use os::unix::raw::{uid_t, gid_t};\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_dev: dev_t,\n+    pub st_dev: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mode: mode_t,\n+    pub st_mode: u16,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_nlink: nlink_t,\n+    pub st_nlink: u16,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ino: ino_t,\n+    pub st_ino: u64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_uid: uid_t,\n+    pub st_uid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_gid: gid_t,\n+    pub st_gid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_rdev: dev_t,\n+    pub st_rdev: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime: time_t,\n+    pub st_atime: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime: time_t,\n+    pub st_mtime: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime: time_t,\n+    pub st_ctime: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime: time_t,\n+    pub st_birthtime: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_size: off_t,\n+    pub st_size: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blocks: blkcnt_t,\n+    pub st_blocks: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blksize: blksize_t,\n+    pub st_blksize: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_flags: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]"}, {"sha": "3e0fb44b01e30bd9719b61d9672ef9806deffcea", "filename": "src/libstd/os/nacl/fs.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnacl%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnacl%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::nacl::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat64\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "7dfa2eabe3e1721b4ae240cdd53f34c8046f5389", "filename": "src/libstd/os/nacl/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "9a10fbcc30b72dac612a3f800eb58fa45e7bd359", "filename": "src/libstd/os/nacl/raw.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,18 +11,24 @@\n //! Nacl-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type pid_t = i32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type uid_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type gid_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n \n #[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n "}, {"sha": "f11e23138b0e01f84ca4cd0d65aa7dca4e75d2b5", "filename": "src/libstd/os/netbsd/fs.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,154 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::netbsd::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_flags(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gen(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_spare(&self) -> u32;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_birthtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime as i64\n+    }\n+    fn st_birthtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+    fn st_gen(&self) -> u32 {\n+        self.as_inner().as_inner().st_gen as u32\n+    }\n+    fn st_flags(&self) -> u32 {\n+        self.as_inner().as_inner().st_flags as u32\n+    }\n+    fn st_spare(&self) -> u32 {\n+        self.as_inner().as_inner().st_spare as u32\n+    }\n+}\n+"}, {"sha": "06efbd83707d3e1fbe397c2ee48d240ced546c04", "filename": "src/libstd/os/netbsd/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnetbsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnetbsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "7eb3f6d47d13cb06ab2571945e0112d0d2dd7c82", "filename": "src/libstd/os/netbsd/raw.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,18 +11,24 @@\n //! NetBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n@@ -32,43 +38,43 @@ use os::unix::raw::{uid_t, gid_t};\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mode: mode_t,\n+    pub st_dev: u64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_dev: dev_t,\n+    pub st_mode: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ino: ino_t,\n+    pub st_ino: u64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_nlink: nlink_t,\n+    pub st_nlink: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_uid: uid_t,\n+    pub st_uid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_gid: gid_t,\n+    pub st_gid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_rdev: dev_t,\n+    pub st_rdev: u64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime: time_t,\n+    pub st_atime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime: time_t,\n+    pub st_mtime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime: time_t,\n+    pub st_ctime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime: time_t,\n+    pub st_birthtime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_size: off_t,\n+    pub st_size: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blocks: blkcnt_t,\n+    pub st_blocks: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blksize: blksize_t,\n+    pub st_blksize: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_flags: fflags_t,\n+    pub st_flags: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n     st_spare: [u32; 2],"}, {"sha": "cc812fcf12cfe5f9061694ff787a871cf584810c", "filename": "src/libstd/os/openbsd/fs.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,149 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::openbsd::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_flags(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gen(&self) -> u32;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_birthtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime as i64\n+    }\n+    fn st_birthtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+    fn st_gen(&self) -> u32 {\n+        self.as_inner().as_inner().st_gen as u32\n+    }\n+    fn st_flags(&self) -> u32 {\n+        self.as_inner().as_inner().st_flags as u32\n+    }\n+}\n+"}, {"sha": "06efbd83707d3e1fbe397c2ee48d240ced546c04", "filename": "src/libstd/os/openbsd/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "6effcdecae10919b0f7f8cf1da9f1fbedebd0f43", "filename": "src/libstd/os/openbsd/raw.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,18 +11,24 @@\n //! OpenBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n@@ -32,43 +38,43 @@ use os::unix::raw::{uid_t, gid_t};\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mode: mode_t,\n+    pub st_mode: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_dev: dev_t,\n+    pub st_dev: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ino: ino_t,\n+    pub st_ino: u64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_nlink: nlink_t,\n+    pub st_nlink: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_uid: uid_t,\n+    pub st_uid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_gid: gid_t,\n+    pub st_gid: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_rdev: dev_t,\n+    pub st_rdev: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime: time_t,\n+    pub st_atime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_atime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime: time_t,\n+    pub st_mtime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_mtime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime: time_t,\n+    pub st_ctime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_ctime_nsec: c_long,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_size: off_t,\n+    pub st_size: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blocks: blkcnt_t,\n+    pub st_blocks: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blksize: blksize_t,\n+    pub st_blksize: i32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_flags: fflags_t,\n+    pub st_flags: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_gen: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime: time_t,\n+    pub st_birthtime: i64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_birthtime_nsec: c_long,\n }"}, {"sha": "55d8ad17460dd25111bde63fa1ee24c7e8cf6f3e", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -81,36 +81,10 @@ mod tests {\n         )*}\n     }\n \n-    macro_rules! ok_size {\n-        ($($t:ident)*) => {$(\n-            assert!(mem::size_of::<libc::$t>() == mem::size_of::<raw::$t>(),\n-                    \"{} is wrong\", stringify!($t));\n-        )*}\n-    }\n-\n     #[test]\n     fn same() {\n         use os::raw;\n         ok!(c_char c_schar c_uchar c_short c_ushort c_int c_uint c_long c_ulong\n             c_longlong c_ulonglong c_float c_double);\n     }\n-\n-    #[cfg(all(unix, not(target_os = \"android\")))]\n-    #[test]\n-    fn unix() {\n-        {\n-            use os::unix::raw;\n-            ok!(uid_t gid_t dev_t ino_t mode_t nlink_t off_t blksize_t blkcnt_t);\n-        }\n-        {\n-            use sys::platform::raw;\n-            ok_size!(stat);\n-        }\n-    }\n-\n-    #[cfg(windows)]\n-    #[test]\n-    fn windows() {\n-        use os::windows::raw;\n-    }\n }"}, {"sha": "1c043af735af53580d6712969ecd638df5aac528", "filename": "src/libstd/os/solaris/fs.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::solaris::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat64\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "1e0166947bf5c1dd1938e22b6850fb2b34e8b6a5", "filename": "src/libstd/os/solaris/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -13,9 +13,4 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod raw;\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub mod fs {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub use sys::fs::MetadataExt;\n-}\n+pub mod fs;"}, {"sha": "6a75b36bd6bdea776308356e268e9bb32fef48d1", "filename": "src/libstd/os/solaris/raw.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,18 +11,24 @@\n //! Solaris-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n \n #[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;"}, {"sha": "bdde25648ed8707e56f009d02fa52f1986ea59fb", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 70, "deletions": 54, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -15,69 +15,88 @@\n use fs::{self, Permissions, OpenOptions};\n use io;\n use libc;\n-use os::raw::c_long;\n+#[allow(deprecated)]\n use os::unix::raw;\n use path::Path;\n-use sys::fs::MetadataExt as UnixMetadataExt;\n use sys;\n use sys_common::{FromInner, AsInner, AsInnerMut};\n+use sys::platform::fs::MetadataExt as UnixMetadataExt;\n \n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const USER_READ: raw::mode_t = 0o400;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const USER_WRITE: raw::mode_t = 0o200;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const USER_EXECUTE: raw::mode_t = 0o100;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const USER_RWX: raw::mode_t = 0o700;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const GROUP_READ: raw::mode_t = 0o040;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const GROUP_WRITE: raw::mode_t = 0o020;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const GROUP_EXECUTE: raw::mode_t = 0o010;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const GROUP_RWX: raw::mode_t = 0o070;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const OTHER_READ: raw::mode_t = 0o004;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const OTHER_WRITE: raw::mode_t = 0o002;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const OTHER_EXECUTE: raw::mode_t = 0o001;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const OTHER_RWX: raw::mode_t = 0o007;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const ALL_READ: raw::mode_t = 0o444;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const ALL_WRITE: raw::mode_t = 0o222;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const ALL_EXECUTE: raw::mode_t = 0o111;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const ALL_RWX: raw::mode_t = 0o777;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const SETUID: raw::mode_t = 0o4000;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const SETGID: raw::mode_t = 0o2000;\n #[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"moved to the libc crate instead\")]\n+#[allow(deprecated)]\n pub const STICKY_BIT: raw::mode_t = 0o1000;\n \n /// Unix-specific extensions to `Permissions`\n@@ -86,28 +105,30 @@ pub trait PermissionsExt {\n     /// Returns the underlying raw `mode_t` bits that are the standard Unix\n     /// permissions for this file.\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n-    fn mode(&self) -> raw::mode_t;\n+    fn mode(&self) -> u32;\n \n-    /// Sets the underlying raw `mode_t` bits for this set of permissions.\n+    /// Sets the underlying raw bits for this set of permissions.\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n-    fn set_mode(&mut self, mode: raw::mode_t);\n+    fn set_mode(&mut self, mode: u32);\n \n     /// Creates a new instance of `Permissions` from the given set of Unix\n     /// permission bits.\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n-    fn from_mode(mode: raw::mode_t) -> Self;\n+    fn from_mode(mode: u32) -> Self;\n }\n \n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n impl PermissionsExt for Permissions {\n-    fn mode(&self) -> raw::mode_t { self.as_inner().mode() }\n+    fn mode(&self) -> u32 {\n+        self.as_inner().mode()\n+    }\n \n-    fn set_mode(&mut self, mode: raw::mode_t) {\n-        *self = FromInner::from_inner(FromInner::from_inner(mode));\n+    fn set_mode(&mut self, mode: u32) {\n+        *self = Permissions::from_inner(FromInner::from_inner(mode));\n     }\n \n-    fn from_mode(mode: raw::mode_t) -> Permissions {\n-        FromInner::from_inner(FromInner::from_inner(mode))\n+    fn from_mode(mode: u32) -> Permissions {\n+        Permissions::from_inner(FromInner::from_inner(mode))\n     }\n }\n \n@@ -122,7 +143,7 @@ pub trait OpenOptionsExt {\n     /// The operating system masks out bits with the systems `umask`, to produce\n     /// the final permissions.\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n-    fn mode(&mut self, mode: raw::mode_t) -> &mut Self;\n+    fn mode(&mut self, mode: u32) -> &mut Self;\n \n     /// Pass custom flags to the `flags` agument of `open`.\n     ///\n@@ -154,7 +175,7 @@ pub trait OpenOptionsExt {\n \n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n impl OpenOptionsExt for OpenOptions {\n-    fn mode(&mut self, mode: raw::mode_t) -> &mut OpenOptions {\n+    fn mode(&mut self, mode: u32) -> &mut OpenOptions {\n         self.as_inner_mut().mode(mode); self\n     }\n \n@@ -173,62 +194,57 @@ impl OpenOptionsExt for OpenOptions {\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn dev(&self) -> raw::dev_t;\n+    fn dev(&self) -> u64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn ino(&self) -> raw::ino_t;\n+    fn ino(&self) -> u64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn mode(&self) -> raw::mode_t;\n+    fn mode(&self) -> u32;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn nlink(&self) -> raw::nlink_t;\n+    fn nlink(&self) -> u64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn uid(&self) -> raw::uid_t;\n+    fn uid(&self) -> u32;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn gid(&self) -> raw::gid_t;\n+    fn gid(&self) -> u32;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn rdev(&self) -> raw::dev_t;\n+    fn rdev(&self) -> u64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn size(&self) -> raw::off_t;\n+    fn size(&self) -> u64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn atime(&self) -> raw::time_t;\n+    fn atime(&self) -> i64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn atime_nsec(&self) -> c_long;\n+    fn atime_nsec(&self) -> i64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn mtime(&self) -> raw::time_t;\n+    fn mtime(&self) -> i64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn mtime_nsec(&self) -> c_long;\n+    fn mtime_nsec(&self) -> i64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn ctime(&self) -> raw::time_t;\n+    fn ctime(&self) -> i64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn ctime_nsec(&self) -> c_long;\n+    fn ctime_nsec(&self) -> i64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn blksize(&self) -> raw::blksize_t;\n+    fn blksize(&self) -> u64;\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn blocks(&self) -> raw::blkcnt_t;\n+    fn blocks(&self) -> u64;\n }\n \n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n impl MetadataExt for fs::Metadata {\n-    fn dev(&self) -> raw::dev_t { self.as_raw_stat().st_dev as raw::dev_t }\n-    fn ino(&self) -> raw::ino_t { self.as_raw_stat().st_ino as raw::ino_t }\n-    fn mode(&self) -> raw::mode_t { self.as_raw_stat().st_mode as raw::mode_t }\n-    fn nlink(&self) -> raw::nlink_t { self.as_raw_stat().st_nlink as raw::nlink_t }\n-    fn uid(&self) -> raw::uid_t { self.as_raw_stat().st_uid as raw::uid_t }\n-    fn gid(&self) -> raw::gid_t { self.as_raw_stat().st_gid as raw::gid_t }\n-    fn rdev(&self) -> raw::dev_t { self.as_raw_stat().st_rdev as raw::dev_t }\n-    fn size(&self) -> raw::off_t { self.as_raw_stat().st_size as raw::off_t }\n-    fn atime(&self) -> raw::time_t { self.as_raw_stat().st_atime }\n-    fn atime_nsec(&self) -> c_long { self.as_raw_stat().st_atime_nsec as c_long }\n-    fn mtime(&self) -> raw::time_t { self.as_raw_stat().st_mtime }\n-    fn mtime_nsec(&self) -> c_long { self.as_raw_stat().st_mtime_nsec as c_long }\n-    fn ctime(&self) -> raw::time_t { self.as_raw_stat().st_ctime }\n-    fn ctime_nsec(&self) -> c_long { self.as_raw_stat().st_ctime_nsec as c_long }\n-\n-    fn blksize(&self) -> raw::blksize_t {\n-        self.as_raw_stat().st_blksize as raw::blksize_t\n-    }\n-    fn blocks(&self) -> raw::blkcnt_t {\n-        self.as_raw_stat().st_blocks as raw::blkcnt_t\n-    }\n+    fn dev(&self) -> u64 { self.st_dev() }\n+    fn ino(&self) -> u64 { self.st_ino() }\n+    fn mode(&self) -> u32 { self.st_mode() }\n+    fn nlink(&self) -> u64 { self.st_nlink() }\n+    fn uid(&self) -> u32 { self.st_uid() }\n+    fn gid(&self) -> u32 { self.st_gid() }\n+    fn rdev(&self) -> u64 { self.st_rdev() }\n+    fn size(&self) -> u64 { self.st_size() }\n+    fn atime(&self) -> i64 { self.st_atime() }\n+    fn atime_nsec(&self) -> i64 { self.st_atime_nsec() }\n+    fn mtime(&self) -> i64 { self.st_mtime() }\n+    fn mtime_nsec(&self) -> i64 { self.st_mtime_nsec() }\n+    fn ctime(&self) -> i64 { self.st_ctime() }\n+    fn ctime_nsec(&self) -> i64 { self.st_ctime_nsec() }\n+    fn blksize(&self) -> u64 { self.st_blksize() }\n+    fn blocks(&self) -> u64 { self.st_blocks() }\n }\n \n /// Add special unix types (block/char device, fifo and socket)\n@@ -262,12 +278,12 @@ pub trait DirEntryExt {\n     /// Returns the underlying `d_ino` field in the contained `dirent`\n     /// structure.\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n-    fn ino(&self) -> raw::ino_t;\n+    fn ino(&self) -> u64;\n }\n \n #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n impl DirEntryExt for fs::DirEntry {\n-    fn ino(&self) -> raw::ino_t { self.as_inner().ino() }\n+    fn ino(&self) -> u64 { self.as_inner().ino() }\n }\n \n /// Creates a new symbolic link on the filesystem.\n@@ -305,12 +321,12 @@ pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to\n     /// 0o777.\n     #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n-    fn mode(&mut self, mode: raw::mode_t) -> &mut Self;\n+    fn mode(&mut self, mode: u32) -> &mut Self;\n }\n \n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n impl DirBuilderExt for fs::DirBuilder {\n-    fn mode(&mut self, mode: raw::mode_t) -> &mut fs::DirBuilder {\n+    fn mode(&mut self, mode: u32) -> &mut fs::DirBuilder {\n         self.as_inner_mut().set_mode(mode);\n         self\n     }"}, {"sha": "8cc291d00ee027cf4cca947a1db1b0a6829ed556", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -16,7 +16,6 @@ use prelude::v1::*;\n \n use io;\n use os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n-use os::unix::raw::{uid_t, gid_t};\n use process;\n use sys;\n use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n@@ -28,12 +27,12 @@ pub trait CommandExt {\n     /// `setuid` call in the child process. Failure in the `setuid`\n     /// call will cause the spawn to fail.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn uid(&mut self, id: uid_t) -> &mut process::Command;\n+    fn uid(&mut self, id: u32) -> &mut process::Command;\n \n     /// Similar to `uid`, but sets the group id of the child process. This has\n     /// the same semantics as the `uid` field.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn gid(&mut self, id: gid_t) -> &mut process::Command;\n+    fn gid(&mut self, id: u32) -> &mut process::Command;\n \n     /// Create a new session (cf. `setsid(2)`) for the child process. This means\n     /// that the child is the leader of a new process group. The parent process\n@@ -101,12 +100,12 @@ pub trait CommandExt {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl CommandExt for process::Command {\n-    fn uid(&mut self, id: uid_t) -> &mut process::Command {\n+    fn uid(&mut self, id: u32) -> &mut process::Command {\n         self.as_inner_mut().uid(id);\n         self\n     }\n \n-    fn gid(&mut self, id: gid_t) -> &mut process::Command {\n+    fn gid(&mut self, id: u32) -> &mut process::Command {\n         self.as_inner_mut().gid(id);\n         self\n     }"}, {"sha": "96535e886041803b50598d8e4a1f1f2ae1811800", "filename": "src/libstd/sys/unix/ext/raw.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -11,6 +11,12 @@\n //! Unix-specific primitives available on all unix platforms\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type uid_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type gid_t = u32;"}, {"sha": "bb8200ff8597a9bf6ad4639c155158217d9dc611", "filename": "src/libstd/sys/unix/ext/thread.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -12,11 +12,13 @@\n \n #![unstable(feature = \"thread_extensions\", issue = \"29791\")]\n \n-use os::unix::raw::{pthread_t};\n+#[allow(deprecated)]\n+use os::unix::raw::pthread_t;\n use sys_common::{AsInner, IntoInner};\n-use thread::{JoinHandle};\n+use thread::JoinHandle;\n \n #[unstable(feature = \"thread_extensions\", issue = \"29791\")]\n+#[allow(deprecated)]\n pub type RawPthread = pthread_t;\n \n /// Unix-specific extensions to `std::thread::JoinHandle`"}, {"sha": "14f30a6257660bcf4ffa31819c1ce15b09103f4f", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 30, "deletions": 48, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa23c98450063992473d40d707273903f8a3937d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=aa23c98450063992473d40d707273903f8a3937d", "patch": "@@ -21,16 +21,20 @@ use path::{Path, PathBuf};\n use ptr;\n use sync::Arc;\n use sys::fd::FileDesc;\n-use sys::platform::raw;\n use sys::time::SystemTime;\n use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n \n+#[cfg(target_os = \"linux\")]\n+use libc::{stat64, fstat64, lstat64};\n+#[cfg(not(target_os = \"linux\"))]\n+use libc::{stat as stat64, fstat as fstat64, lstat as lstat64};\n+\n pub struct File(FileDesc);\n \n #[derive(Clone)]\n pub struct FileAttr {\n-    stat: raw::stat,\n+    stat: stat64,\n }\n \n pub struct ReadDir {\n@@ -116,14 +120,14 @@ impl FileAttr {\n impl FileAttr {\n     pub fn modified(&self) -> io::Result<SystemTime> {\n         Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_mtime,\n+            tv_sec: self.stat.st_mtime as libc::time_t,\n             tv_nsec: self.stat.st_mtime_nsec as libc::c_long,\n         }))\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n         Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_atime,\n+            tv_sec: self.stat.st_atime as libc::time_t,\n             tv_nsec: self.stat.st_atime_nsec as libc::c_long,\n         }))\n     }\n@@ -133,7 +137,7 @@ impl FileAttr {\n               target_os = \"openbsd\"))]\n     pub fn created(&self) -> io::Result<SystemTime> {\n         Ok(SystemTime::from(libc::timespec {\n-            tv_sec: self.stat.st_birthtime,\n+            tv_sec: self.stat.st_birthtime as libc::time_t,\n             tv_nsec: self.stat.st_birthtime_nsec as libc::c_long,\n         }))\n     }\n@@ -148,26 +152,8 @@ impl FileAttr {\n     }\n }\n \n-impl AsInner<raw::stat> for FileAttr {\n-    fn as_inner(&self) -> &raw::stat { &self.stat }\n-}\n-\n-/// OS-specific extension methods for `fs::Metadata`\n-#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-pub trait MetadataExt {\n-    /// Gain a reference to the underlying `stat` structure which contains the\n-    /// raw information returned by the OS.\n-    ///\n-    /// The contents of the returned `stat` are **not** consistent across Unix\n-    /// platforms. The `os::unix::fs::MetadataExt` trait contains the cross-Unix\n-    /// abstractions contained within the raw stat.\n-    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    fn as_raw_stat(&self) -> &raw::stat;\n-}\n-\n-#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-impl MetadataExt for ::fs::Metadata {\n-    fn as_raw_stat(&self) -> &raw::stat { &self.as_inner().stat }\n+impl AsInner<stat64> for FileAttr {\n+    fn as_inner(&self) -> &stat64 { &self.stat }\n }\n \n impl FilePermissions {\n@@ -179,7 +165,7 @@ impl FilePermissions {\n             self.mode |= 0o222;\n         }\n     }\n-    pub fn mode(&self) -> raw::mode_t { self.mode }\n+    pub fn mode(&self) -> u32 { self.mode as u32 }\n }\n \n impl FileType {\n@@ -190,8 +176,8 @@ impl FileType {\n     pub fn is(&self, mode: mode_t) -> bool { self.mode & libc::S_IFMT == mode }\n }\n \n-impl FromInner<raw::mode_t> for FilePermissions {\n-    fn from_inner(mode: raw::mode_t) -> FilePermissions {\n+impl FromInner<u32> for FilePermissions {\n+    fn from_inner(mode: u32) -> FilePermissions {\n         FilePermissions { mode: mode as mode_t }\n     }\n }\n@@ -293,24 +279,20 @@ impl DirEntry {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"linux\",\n-              target_os = \"solaris\",\n-              target_os = \"emscripten\"))]\n-    pub fn ino(&self) -> raw::ino_t {\n-        self.entry.d_ino\n-    }\n-\n-    #[cfg(target_os = \"android\")]\n-    pub fn ino(&self) -> raw::ino_t {\n-        self.entry.d_ino as raw::ino_t\n+              target_os = \"emscripten\",\n+              target_os = \"android\",\n+              target_os = \"solaris\"))]\n+    pub fn ino(&self) -> u64 {\n+        self.entry.d_ino as u64\n     }\n \n     #[cfg(any(target_os = \"freebsd\",\n               target_os = \"openbsd\",\n               target_os = \"bitrig\",\n               target_os = \"netbsd\",\n               target_os = \"dragonfly\"))]\n-    pub fn ino(&self) -> raw::ino_t {\n-        self.entry.d_fileno\n+    pub fn ino(&self) -> u64 {\n+        self.entry.d_fileno as u64\n     }\n \n     #[cfg(any(target_os = \"macos\",\n@@ -364,7 +346,7 @@ impl OpenOptions {\n     pub fn create_new(&mut self, create_new: bool) { self.create_new = create_new; }\n \n     pub fn custom_flags(&mut self, flags: i32) { self.custom_flags = flags; }\n-    pub fn mode(&mut self, mode: raw::mode_t) { self.mode = mode as mode_t; }\n+    pub fn mode(&mut self, mode: u32) { self.mode = mode as mode_t; }\n \n     fn get_access_mode(&self) -> io::Result<c_int> {\n         match (self.read, self.write, self.append) {\n@@ -431,9 +413,9 @@ impl File {\n     }\n \n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n-        let mut stat: raw::stat = unsafe { mem::zeroed() };\n+        let mut stat: stat64 = unsafe { mem::zeroed() };\n         try!(cvt(unsafe {\n-            libc::fstat(self.0.raw(), &mut stat as *mut _ as *mut _)\n+            fstat64(self.0.raw(), &mut stat)\n         }));\n         Ok(FileAttr { stat: stat })\n     }\n@@ -506,8 +488,8 @@ impl DirBuilder {\n         Ok(())\n     }\n \n-    pub fn set_mode(&mut self, mode: mode_t) {\n-        self.mode = mode;\n+    pub fn set_mode(&mut self, mode: u32) {\n+        self.mode = mode as mode_t;\n     }\n }\n \n@@ -689,18 +671,18 @@ pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n \n pub fn stat(p: &Path) -> io::Result<FileAttr> {\n     let p = try!(cstr(p));\n-    let mut stat: raw::stat = unsafe { mem::zeroed() };\n+    let mut stat: stat64 = unsafe { mem::zeroed() };\n     try!(cvt(unsafe {\n-        libc::stat(p.as_ptr(), &mut stat as *mut _ as *mut _)\n+        stat64(p.as_ptr(), &mut stat as *mut _ as *mut _)\n     }));\n     Ok(FileAttr { stat: stat })\n }\n \n pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n     let p = try!(cstr(p));\n-    let mut stat: raw::stat = unsafe { mem::zeroed() };\n+    let mut stat: stat64 = unsafe { mem::zeroed() };\n     try!(cvt(unsafe {\n-        libc::lstat(p.as_ptr(), &mut stat as *mut _ as *mut _)\n+        lstat64(p.as_ptr(), &mut stat as *mut _ as *mut _)\n     }));\n     Ok(FileAttr { stat: stat })\n }"}]}