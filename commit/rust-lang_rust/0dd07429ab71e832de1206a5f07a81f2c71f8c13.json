{"sha": "0dd07429ab71e832de1206a5f07a81f2c71f8c13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZDA3NDI5YWI3MWU4MzJkZTEyMDZhNWYwN2E4MWYyYzcxZjhjMTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:36:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:36:28Z"}, "message": "rollup merge of #20258: sanxiyn/show-span-2", "tree": {"sha": "34a3cdd3f9c79fab0d77d17dcc5faf0bd93a0a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a3cdd3f9c79fab0d77d17dcc5faf0bd93a0a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd07429ab71e832de1206a5f07a81f2c71f8c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd07429ab71e832de1206a5f07a81f2c71f8c13", "html_url": "https://github.com/rust-lang/rust/commit/0dd07429ab71e832de1206a5f07a81f2c71f8c13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd07429ab71e832de1206a5f07a81f2c71f8c13/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2b79c757d45a2892b24953c8411cb40c2a789b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2b79c757d45a2892b24953c8411cb40c2a789b", "html_url": "https://github.com/rust-lang/rust/commit/ba2b79c757d45a2892b24953c8411cb40c2a789b"}, {"sha": "98aeac2930dfd64ef1cb52c3a20e1f3609feee8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e", "html_url": "https://github.com/rust-lang/rust/commit/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "138f648049c73f748e6937474f7e94ff38054148", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0dd07429ab71e832de1206a5f07a81f2c71f8c13", "patch": "@@ -105,6 +105,7 @@ pub struct Options {\n     pub prints: Vec<PrintRequest>,\n     pub cg: CodegenOptions,\n     pub color: ColorConfig,\n+    pub show_span: Option<String>,\n     pub externs: HashMap<String, Vec<String>>,\n     pub crate_name: Option<String>,\n     /// An optional name to use as the crate for std during std injection,\n@@ -211,6 +212,7 @@ pub fn basic_options() -> Options {\n         prints: Vec::new(),\n         cg: basic_codegen_options(),\n         color: Auto,\n+        show_span: None,\n         externs: HashMap::new(),\n         crate_name: None,\n         alt_std_name: None,\n@@ -259,7 +261,6 @@ debugging_opts! {\n         BORROWCK_STATS,\n         NO_LANDING_PADS,\n         DEBUG_LLVM,\n-        SHOW_SPAN,\n         COUNT_TYPE_SIZES,\n         META_STATS,\n         GC,\n@@ -299,7 +300,6 @@ pub fn debugging_opts_map() -> Vec<(&'static str, &'static str, u64)> {\n      (\"no-landing-pads\", \"omit landing pads for unwinding\",\n       NO_LANDING_PADS),\n      (\"debug-llvm\", \"enable debug output from LLVM\", DEBUG_LLVM),\n-     (\"show-span\", \"show spans for compiler debugging\", SHOW_SPAN),\n      (\"count-type-sizes\", \"count the sizes of aggregate types\",\n       COUNT_TYPE_SIZES),\n      (\"meta-stats\", \"gather metadata statistics\", META_STATS),\n@@ -823,6 +823,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                       `flowgraph=<nodeid>` (graphviz formatted flowgraph for node), or\n                       `everybody_loops` (all function bodies replaced with `loop {}`).\",\n                      \"TYPE\"),\n+        opt::opt_u(\"\", \"show-span\", \"Show spans for compiler debugging\", \"expr|pat|ty\"),\n         opt::flagopt(\"\", \"dep-info\",\n                  \"Output dependency info to <filename> after compiling, \\\n                   in a format suitable for use by Makefiles\", \"FILENAME\"),\n@@ -1143,6 +1144,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         prints: prints,\n         cg: cg,\n         color: color,\n+        show_span: None,\n         externs: externs,\n         crate_name: crate_name,\n         alt_std_name: None,"}, {"sha": "abb780615ae7b8170f6f8801dd660e3368417683", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=0dd07429ab71e832de1206a5f07a81f2c71f8c13", "patch": "@@ -201,8 +201,8 @@ impl Session {\n     pub fn no_landing_pads(&self) -> bool {\n         self.debugging_opt(config::NO_LANDING_PADS)\n     }\n-    pub fn show_span(&self) -> bool {\n-        self.debugging_opt(config::SHOW_SPAN)\n+    pub fn unstable_options(&self) -> bool {\n+        self.debugging_opt(config::UNSTABLE_OPTIONS)\n     }\n     pub fn print_enum_sizes(&self) -> bool {\n         self.debugging_opt(config::PRINT_ENUM_SIZES)"}, {"sha": "f5c29a6b30b3069f7fe9f02859cc033d44ddf451", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0dd07429ab71e832de1206a5f07a81f2c71f8c13", "patch": "@@ -146,8 +146,8 @@ pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n         println!(\"{}\", json::as_json(&krate));\n     }\n \n-    if sess.show_span() {\n-        syntax::show_span::run(sess.diagnostic(), &krate);\n+    if let Some(ref s) = sess.opts.show_span {\n+        syntax::show_span::run(sess.diagnostic(), s.as_slice(), &krate);\n     }\n \n     krate\n@@ -572,7 +572,7 @@ pub fn stop_after_phase_1(sess: &Session) -> bool {\n         debug!(\"invoked with --parse-only, returning early from compile_input\");\n         return true;\n     }\n-    if sess.show_span() {\n+    if sess.opts.show_span.is_some() {\n         return true;\n     }\n     return sess.opts.debugging_opts & config::AST_JSON_NOEXPAND != 0;"}, {"sha": "2e8cde658904cc3304c08207c88871537cf98e0d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=0dd07429ab71e832de1206a5f07a81f2c71f8c13", "patch": "@@ -134,7 +134,7 @@ fn run_compiler(args: &[String]) {\n         _ => early_error(\"multiple input filenames provided\")\n     };\n \n-    let sess = build_session(sopts, input_file_path, descriptions);\n+    let mut sess = build_session(sopts, input_file_path, descriptions);\n     let cfg = config::build_configuration(&sess);\n     if print_crate_info(&sess, Some(&input), &odir, &ofile) {\n         return\n@@ -145,7 +145,7 @@ fn run_compiler(args: &[String]) {\n         pretty::parse_pretty(&sess, a.as_slice(), false)\n     });\n     let pretty = if pretty.is_none() &&\n-        sess.debugging_opt(config::UNSTABLE_OPTIONS) {\n+        sess.unstable_options() {\n             matches.opt_str(\"xpretty\").map(|a| {\n                 // extended with unstable pretty-print variants\n                 pretty::parse_pretty(&sess, a.as_slice(), true)\n@@ -162,6 +162,10 @@ fn run_compiler(args: &[String]) {\n         None => {/* continue */ }\n     }\n \n+    if sess.unstable_options() {\n+        sess.opts.show_span = matches.opt_str(\"show-span\");\n+    }\n+\n     let r = matches.opt_strs(\"Z\");\n     if r.contains(&(\"ls\".to_string())) {\n         match input {"}, {"sha": "51d655ec0f2c5075070a48299c7af70402b6d537", "filename": "src/libsyntax/show_span.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd07429ab71e832de1206a5f07a81f2c71f8c13/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=0dd07429ab71e832de1206a5f07a81f2c71f8c13", "patch": "@@ -13,27 +13,73 @@\n //! This module shows spans for all expressions in the crate\n //! to help with compiler debugging.\n \n+use std::str::FromStr;\n+\n use ast;\n use diagnostic;\n use visit;\n use visit::Visitor;\n \n+enum Mode {\n+    Expression,\n+    Pattern,\n+    Type,\n+}\n+\n+impl FromStr for Mode {\n+    fn from_str(s: &str) -> Option<Mode> {\n+        let mode = match s {\n+            \"expr\" => Mode::Expression,\n+            \"pat\" => Mode::Pattern,\n+            \"ty\" => Mode::Type,\n+            _ => return None\n+        };\n+        Some(mode)\n+    }\n+}\n+\n struct ShowSpanVisitor<'a> {\n     span_diagnostic: &'a diagnostic::SpanHandler,\n+    mode: Mode,\n }\n \n impl<'a, 'v> Visitor<'v> for ShowSpanVisitor<'a> {\n     fn visit_expr(&mut self, e: &ast::Expr) {\n-        self.span_diagnostic.span_note(e.span, \"expression\");\n+        if let Mode::Expression = self.mode {\n+            self.span_diagnostic.span_note(e.span, \"expression\");\n+        }\n         visit::walk_expr(self, e);\n     }\n \n+    fn visit_pat(&mut self, p: &ast::Pat) {\n+        if let Mode::Pattern = self.mode {\n+            self.span_diagnostic.span_note(p.span, \"pattern\");\n+        }\n+        visit::walk_pat(self, p);\n+    }\n+\n+    fn visit_ty(&mut self, t: &ast::Ty) {\n+        if let Mode::Type = self.mode {\n+            self.span_diagnostic.span_note(t.span, \"type\");\n+        }\n+        visit::walk_ty(self, t);\n+    }\n+\n     fn visit_mac(&mut self, macro: &ast::Mac) {\n         visit::walk_mac(self, macro);\n     }\n }\n \n-pub fn run(span_diagnostic: &diagnostic::SpanHandler, krate: &ast::Crate) {\n-    let mut v = ShowSpanVisitor { span_diagnostic: span_diagnostic };\n+pub fn run(span_diagnostic: &diagnostic::SpanHandler,\n+           mode: &str,\n+           krate: &ast::Crate) {\n+    let mode = match mode.parse() {\n+        Some(mode) => mode,\n+        None => return\n+    };\n+    let mut v = ShowSpanVisitor {\n+        span_diagnostic: span_diagnostic,\n+        mode: mode,\n+    };\n     visit::walk_crate(&mut v, krate);\n }"}]}