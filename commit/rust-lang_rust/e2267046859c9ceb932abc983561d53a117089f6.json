{"sha": "e2267046859c9ceb932abc983561d53a117089f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMjY3MDQ2ODU5YzljZWI5MzJhYmM5ODM1NjFkNTNhMTE3MDg5ZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-30T18:32:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-30T18:32:31Z"}, "message": "Auto merge of #80511 - Mark-Simulacrum:bump-stage0, r=pietroalbini\n\nBump bootstrap compiler to 1.50 beta\n\nr? `@pietroalbini`", "tree": {"sha": "44571cb51ae98551920b2383a709c7a97ccb414e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44571cb51ae98551920b2383a709c7a97ccb414e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2267046859c9ceb932abc983561d53a117089f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2267046859c9ceb932abc983561d53a117089f6", "html_url": "https://github.com/rust-lang/rust/commit/e2267046859c9ceb932abc983561d53a117089f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2267046859c9ceb932abc983561d53a117089f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "507bff92fadf1f25a830da5065a5a87113345163", "url": "https://api.github.com/repos/rust-lang/rust/commits/507bff92fadf1f25a830da5065a5a87113345163", "html_url": "https://github.com/rust-lang/rust/commit/507bff92fadf1f25a830da5065a5a87113345163"}, {"sha": "fe031180d0be11ce15ee82872829af4092356188", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe031180d0be11ce15ee82872829af4092356188", "html_url": "https://github.com/rust-lang/rust/commit/fe031180d0be11ce15ee82872829af4092356188"}], "stats": {"total": 111, "additions": 19, "deletions": 92}, "files": [{"sha": "5880bbd3de44e83018d2d69b3476fd47aef11df0", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -15,8 +15,7 @@\n #![feature(fn_traits)]\n #![feature(int_bits_const)]\n #![feature(min_specialization)]\n-#![cfg_attr(bootstrap, feature(optin_builtin_traits))]\n-#![cfg_attr(not(bootstrap), feature(auto_traits))]\n+#![feature(auto_traits)]\n #![feature(nll)]\n #![feature(allow_internal_unstable)]\n #![feature(hash_raw_entry)]"}, {"sha": "54b402faaeba0a765a1f59c4d4a3ccb1cd87a7ee", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -112,8 +112,7 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(nonnull_slice_from_raw_parts)]\n-#![cfg_attr(bootstrap, feature(optin_builtin_traits))]\n-#![cfg_attr(not(bootstrap), feature(auto_traits))]\n+#![feature(auto_traits)]\n #![feature(or_patterns)]\n #![feature(pattern)]\n #![feature(ptr_internals)]"}, {"sha": "938dc214486a67a6b04c4aa8938c0b47fffab89a", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -1736,7 +1736,6 @@ extern \"rust-intrinsic\" {\n \n     /// Allocate at compile time. Should not be called at runtime.\n     #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n-    #[cfg(not(bootstrap))]\n     pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n }\n "}, {"sha": "eb474792dc418f213d36d5de669f60c5ffdc609d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -68,7 +68,7 @@\n #![feature(arbitrary_self_types)]\n #![feature(asm)]\n #![feature(cfg_target_has_atomic)]\n-#![cfg_attr(not(bootstrap), feature(const_heap))]\n+#![feature(const_heap)]\n #![feature(const_alloc_layout)]\n #![feature(const_assert_type)]\n #![feature(const_discriminant)]\n@@ -124,8 +124,7 @@\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n-#![cfg_attr(bootstrap, feature(optin_builtin_traits))]\n-#![cfg_attr(not(bootstrap), feature(auto_traits))]\n+#![feature(auto_traits)]\n #![feature(or_patterns)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]"}, {"sha": "1634aff7b4dc9b37971e12c2d07261e14dc66908", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -2,7 +2,7 @@\n #[macro_export]\n #[allow_internal_unstable(core_panic, const_caller_location)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"core_panic_macro\")]\n+#[rustc_diagnostic_item = \"core_panic_macro\"]\n macro_rules! panic {\n     () => (\n         $crate::panic!(\"explicit panic\")\n@@ -163,7 +163,7 @@ macro_rules! assert_ne {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"debug_assert_macro\")]\n+#[rustc_diagnostic_item = \"debug_assert_macro\"]\n macro_rules! debug_assert {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert!($($arg)*); })\n }\n@@ -1217,7 +1217,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"assert_macro\")]\n+    #[rustc_diagnostic_item = \"assert_macro\"]\n     #[allow_internal_unstable(core_panic)]\n     macro_rules! assert {\n         ($cond:expr $(,)?) => {{ /* compiler built-in */ }};"}, {"sha": "e4b99e103548197c497d41666176878b0f2adbf6", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 4, "deletions": 62, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -991,16 +991,8 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn load(&self, order: Ordering) -> *mut T {\n-        #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_load(self.p.get(), order)\n-        }\n-        #[cfg(bootstrap)]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_load(self.p.get() as *mut usize, order) as *mut T\n-        }\n+        unsafe { atomic_load(self.p.get(), order) }\n     }\n \n     /// Stores a value into the pointer.\n@@ -1027,16 +1019,10 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, ptr: *mut T, order: Ordering) {\n-        #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n         unsafe {\n             atomic_store(self.p.get(), ptr, order);\n         }\n-        #[cfg(bootstrap)]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_store(self.p.get() as *mut usize, ptr as usize, order);\n-        }\n     }\n \n     /// Stores a value into the pointer, returning the previous value.\n@@ -1065,16 +1051,8 @@ impl<T> AtomicPtr<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n     pub fn swap(&self, ptr: *mut T, order: Ordering) -> *mut T {\n-        #[cfg(bootstrap)]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_swap(self.p.get() as *mut usize, ptr as usize, order) as *mut T\n-        }\n-        #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_swap(self.p.get(), ptr, order)\n-        }\n+        unsafe { atomic_swap(self.p.get(), ptr, order) }\n     }\n \n     /// Stores a value into the pointer if the current value is the same as the `current` value.\n@@ -1174,26 +1152,8 @@ impl<T> AtomicPtr<T> {\n         success: Ordering,\n         failure: Ordering,\n     ) -> Result<*mut T, *mut T> {\n-        #[cfg(bootstrap)]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            let res = atomic_compare_exchange(\n-                self.p.get() as *mut usize,\n-                current as usize,\n-                new as usize,\n-                success,\n-                failure,\n-            );\n-            match res {\n-                Ok(x) => Ok(x as *mut T),\n-                Err(x) => Err(x as *mut T),\n-            }\n-        }\n-        #[cfg(not(bootstrap))]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_compare_exchange(self.p.get(), current, new, success, failure)\n-        }\n+        unsafe { atomic_compare_exchange(self.p.get(), current, new, success, failure) }\n     }\n \n     /// Stores a value into the pointer if the current value is the same as the `current` value.\n@@ -1241,29 +1201,11 @@ impl<T> AtomicPtr<T> {\n         success: Ordering,\n         failure: Ordering,\n     ) -> Result<*mut T, *mut T> {\n-        #[cfg(bootstrap)]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            let res = atomic_compare_exchange_weak(\n-                self.p.get() as *mut usize,\n-                current as usize,\n-                new as usize,\n-                success,\n-                failure,\n-            );\n-            match res {\n-                Ok(x) => Ok(x as *mut T),\n-                Err(x) => Err(x as *mut T),\n-            }\n-        }\n-        #[cfg(not(bootstrap))]\n         // SAFETY: This intrinsic is unsafe because it operates on a raw pointer\n         // but we know for sure that the pointer is valid (we just got it from\n         // an `UnsafeCell` that we have by reference) and the atomic operation\n         // itself allows us to safely mutate the `UnsafeCell` contents.\n-        unsafe {\n-            atomic_compare_exchange_weak(self.p.get(), current, new, success, failure)\n-        }\n+        unsafe { atomic_compare_exchange_weak(self.p.get(), current, new, success, failure) }\n     }\n \n     /// Fetches the value, and applies a function to it that returns an optional"}, {"sha": "79ca2bba40388a830bb15e5fa2244eb3856e302e", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -134,7 +134,6 @@ fn test_discriminant_send_sync() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn assume_init_good() {\n     const TRUE: bool = unsafe { MaybeUninit::<bool>::new(true).assume_init() };\n "}, {"sha": "a89e7b53e43c4fbc1c0b06cad12a16fd58b458eb", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -28,8 +28,7 @@\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(negative_impls)]\n-#![cfg_attr(bootstrap, feature(optin_builtin_traits))]\n-#![cfg_attr(not(bootstrap), feature(auto_traits))]\n+#![feature(auto_traits)]\n #![feature(restricted_std)]\n #![feature(rustc_attrs)]\n #![feature(min_specialization)]"}, {"sha": "c6a4548ec0c2d532e8cfed38a4c2b29c5474fe78", "filename": "library/rtstartup/rsbegin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Frtstartup%2Frsbegin.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -14,8 +14,7 @@\n \n #![feature(no_core)]\n #![feature(lang_items)]\n-#![cfg_attr(bootstrap, feature(optin_builtin_traits))]\n-#![cfg_attr(not(bootstrap), feature(auto_traits))]\n+#![feature(auto_traits)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(non_camel_case_types)]"}, {"sha": "d5aca80edf9e00d5cfcc8468e8354215f554e7d8", "filename": "library/rtstartup/rsend.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Frtstartup%2Frsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Frtstartup%2Frsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Frtstartup%2Frsend.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -2,8 +2,7 @@\n \n #![feature(no_core)]\n #![feature(lang_items)]\n-#![cfg_attr(bootstrap, feature(optin_builtin_traits))]\n-#![cfg_attr(not(bootstrap), feature(auto_traits))]\n+#![feature(auto_traits)]\n #![crate_type = \"rlib\"]\n #![no_core]\n "}, {"sha": "2c6f03fe2240688caeaf7f4b82adc91cec668779", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -289,8 +289,7 @@\n #![feature(nll)]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(once_cell)]\n-#![cfg_attr(bootstrap, feature(optin_builtin_traits))]\n-#![cfg_attr(not(bootstrap), feature(auto_traits))]\n+#![feature(auto_traits)]\n #![feature(or_patterns)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]"}, {"sha": "5a70aa070e87043fed042c70c0f1f018319157b5", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -8,7 +8,7 @@\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(libstd_sys_internals)]\n-#[cfg_attr(not(any(bootstrap, test)), rustc_diagnostic_item = \"std_panic_macro\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_macro\")]\n macro_rules! panic {\n     () => ({ $crate::panic!(\"explicit panic\") });\n     ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });"}, {"sha": "c2abb01fa8c95f5723a16ef6ca3ba2456378c330", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -736,10 +736,7 @@ impl<'a> Builder<'a> {\n         if self.config.deny_warnings {\n             cmd.arg(\"-Dwarnings\");\n         }\n-        // cfg(not(bootstrap)), can be removed on the next beta bump\n-        if compiler.stage != 0 {\n-            cmd.arg(\"-Znormalize-docs\");\n-        }\n+        cmd.arg(\"-Znormalize-docs\");\n \n         // Remove make-related flags that can cause jobserver problems.\n         cmd.env_remove(\"MAKEFLAGS\");"}, {"sha": "8c849846676f0e386103c2b604e161b02ed6a4c2", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -530,10 +530,7 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"--document-private-items\");\n         cargo.rustdocflag(\"--enable-index-page\");\n         cargo.rustdocflag(\"-Zunstable-options\");\n-        // cfg(not(bootstrap)), can be removed on the next beta bump\n-        if stage != 0 {\n-            cargo.rustdocflag(\"-Znormalize-docs\");\n-        }\n+        cargo.rustdocflag(\"-Znormalize-docs\");\n         compile::rustc_cargo(builder, &mut cargo, target);\n \n         // Only include compiler crates, no dependencies of those, such as `libc`."}, {"sha": "e853b9b4e4191a9984c9bc5f9b7f83f4f94422ba", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2267046859c9ceb932abc983561d53a117089f6/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e2267046859c9ceb932abc983561d53a117089f6/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=e2267046859c9ceb932abc983561d53a117089f6", "patch": "@@ -12,7 +12,7 @@\n # stable release's version number. `date` is the date where the release we're\n # bootstrapping off was released.\n \n-date: 2020-11-18\n+date: 2020-12-30\n rustc: beta\n \n # We use a nightly rustfmt to format the source because it solves some"}]}