{"sha": "b82624bf205e83555d7764d9f849fbfd30df0083", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjYyNGJmMjA1ZTgzNTU1ZDc3NjRkOWY4NDlmYmZkMzBkZjAwODM=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-11-08T16:26:52Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-11-30T21:52:11Z"}, "message": "std: Change the behavior of `reserve` for HashMap.\n\nHashMap's `reserve` method now takes as an argument the *extra* space\nto reserve.\n\n[breaking-change]", "tree": {"sha": "dfaae7120f480c9acb4fb876f821b5ce748a9b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfaae7120f480c9acb4fb876f821b5ce748a9b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b82624bf205e83555d7764d9f849fbfd30df0083", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b82624bf205e83555d7764d9f849fbfd30df0083", "html_url": "https://github.com/rust-lang/rust/commit/b82624bf205e83555d7764d9f849fbfd30df0083", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b82624bf205e83555d7764d9f849fbfd30df0083/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72c96badd277f1090d7a70fdca37b547b6ba000f", "url": "https://api.github.com/repos/rust-lang/rust/commits/72c96badd277f1090d7a70fdca37b547b6ba000f", "html_url": "https://github.com/rust-lang/rust/commit/72c96badd277f1090d7a70fdca37b547b6ba000f"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "17e6becdfaffa60c0518976a2b46b18747143933", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b82624bf205e83555d7764d9f849fbfd30df0083/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82624bf205e83555d7764d9f849fbfd30df0083/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b82624bf205e83555d7764d9f849fbfd30df0083", "patch": "@@ -587,9 +587,13 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n         self.resize_policy.usable_capacity(self.table.capacity())\n     }\n \n+    /// Reserves capacity for at least `additional` more elements to be inserted\n+    /// in the `HashMap`. The collection may reserve more space to avoid\n+    /// frequent reallocations.\n     ///\n-    /// This function has no effect on the operational semantics of the\n-    /// hashtable, only on performance.\n+    /// # Panics\n+    ///\n+    /// Panics if the new allocation size overflows `uint`.\n     ///\n     /// # Example\n     ///\n@@ -598,11 +602,18 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// let mut map: HashMap<&str, int> = HashMap::new();\n     /// map.reserve(10);\n     /// ```\n-    pub fn reserve(&mut self, new_minimum_capacity: uint) {\n-        let cap = max(INITIAL_CAPACITY, new_minimum_capacity).next_power_of_two();\n+    #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+    pub fn reserve(&mut self, additional: uint) {\n+        let new_size = self.len().checked_add(additional).expect(\"capacity overflow\");\n+        let min_cap = self.resize_policy.min_capacity(new_size);\n+\n+        // An invalid value shouldn't make us run out of space. This includes\n+        // an overflow check.\n+        assert!(new_size <= min_cap);\n \n-        if self.table.capacity() < cap {\n-            self.resize(cap);\n+        if self.table.capacity() < min_cap {\n+            let new_capacity = max(min_cap.next_power_of_two(), INITIAL_CAPACITY);\n+            self.resize(new_capacity);\n         }\n     }\n "}]}