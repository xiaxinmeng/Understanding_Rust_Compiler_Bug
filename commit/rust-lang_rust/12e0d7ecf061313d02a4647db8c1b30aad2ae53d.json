{"sha": "12e0d7ecf061313d02a4647db8c1b30aad2ae53d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZTBkN2VjZjA2MTMxM2QwMmE0NjQ3ZGI4YzFiMzBhYWQyYWU1M2Q=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-11T16:32:09Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-13T01:54:12Z"}, "message": "std: Add ToResult/IntoResult/AsResult", "tree": {"sha": "263eec61c0b087e98c0b6034da885071342964ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/263eec61c0b087e98c0b6034da885071342964ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e0d7ecf061313d02a4647db8c1b30aad2ae53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e0d7ecf061313d02a4647db8c1b30aad2ae53d", "html_url": "https://github.com/rust-lang/rust/commit/12e0d7ecf061313d02a4647db8c1b30aad2ae53d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e0d7ecf061313d02a4647db8c1b30aad2ae53d/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff34740a29e3ba4f8c34fd05badf798e481e2257", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff34740a29e3ba4f8c34fd05badf798e481e2257", "html_url": "https://github.com/rust-lang/rust/commit/ff34740a29e3ba4f8c34fd05badf798e481e2257"}], "stats": {"total": 183, "additions": 171, "deletions": 12}, "files": [{"sha": "526a5380dfbef16ba2a6941cb328c2fecbc7475e", "filename": "src/libstd/either.rs", "status": "modified", "additions": 62, "deletions": 12, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/12e0d7ecf061313d02a4647db8c1b30aad2ae53d/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e0d7ecf061313d02a4647db8c1b30aad2ae53d/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=12e0d7ecf061313d02a4647db8c1b30aad2ae53d", "patch": "@@ -54,18 +54,6 @@ impl<L, R> Either<L, R> {\n         }\n     }\n \n-    /// Converts a `Either` to a `Result`\n-    ///\n-    /// Converts an `Either` type to a `Result` type, making the \"right\" choice\n-    /// an `Ok` result, and the \"left\" choice a `Err`\n-    #[inline]\n-    pub fn to_result(self) -> Result<R, L> {\n-        match self {\n-            Right(r) => result::Ok(r),\n-            Left(l) => result::Err(l)\n-        }\n-    }\n-\n     /// Checks whether the given value is a `Left`\n     #[inline]\n     pub fn is_left(&self) -> bool {\n@@ -147,6 +135,36 @@ impl<L, R> option::AsOption<R> for Either<L, R> {\n     }\n }\n \n+impl<L: Clone, R: Clone> result::ToResult<R, L> for Either<L, R> {\n+    #[inline]\n+    fn to_result(&self)-> result::Result<R, L> {\n+        match *self {\n+            Left(ref l) => result::Err(l.clone()),\n+            Right(ref r) => result::Ok(r.clone()),\n+        }\n+    }\n+}\n+\n+impl<L, R> result::IntoResult<R, L> for Either<L, R> {\n+    #[inline]\n+    fn into_result(self)-> result::Result<R, L> {\n+        match self {\n+            Left(l) => result::Err(l),\n+            Right(r) => result::Ok(r),\n+        }\n+    }\n+}\n+\n+impl<L, R> result::AsResult<R, L> for Either<L, R> {\n+    #[inline]\n+    fn as_result<'a>(&'a self) -> result::Result<&'a R, &'a L> {\n+        match *self {\n+            Left(ref l) => result::Err(l),\n+            Right(ref r) => result::Ok(r),\n+        }\n+    }\n+}\n+\n /// An iterator yielding the `Left` values of its source\n pub type Lefts<L, R, Iter> = FilterMap<'static, Either<L, R>, L, Iter>;\n \n@@ -200,6 +218,8 @@ mod tests {\n \n     use option::{IntoOption, ToOption, AsOption};\n     use option;\n+    use result::{IntoResult, ToResult, AsResult};\n+    use result;\n \n     #[test]\n     fn test_either_left() {\n@@ -320,4 +340,34 @@ mod tests {\n         assert_eq!(right.as_option().unwrap(), &100);\n         assert_eq!(left.as_option(), option::None);\n     }\n+\n+    #[test]\n+    pub fn test_to_result() {\n+        let right: Either<int, int> = Right(100);\n+        let left: Either<int, int> = Left(404);\n+\n+        assert_eq!(right.to_result(), result::Ok(100));\n+        assert_eq!(left.to_result(), result::Err(404));\n+    }\n+\n+    #[test]\n+    pub fn test_into_result() {\n+        let right: Either<int, int> = Right(100);\n+        let left: Either<int, int> = Left(404);\n+\n+        assert_eq!(right.into_result(), result::Ok(100));\n+        assert_eq!(left.into_result(), result::Err(404));\n+    }\n+\n+    #[test]\n+    pub fn test_as_result() {\n+        let right: Either<int, int> = Right(100);\n+        let left: Either<int, int> = Left(404);\n+\n+        let x = 100;\n+        assert_eq!(right.as_result(), result::Ok(&x));\n+\n+        let x = 404;\n+        assert_eq!(left.as_result(), result::Err(&x));\n+    }\n }"}, {"sha": "83bc7856098ed731b8c004209719efdce71dfae1", "filename": "src/libstd/option.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/12e0d7ecf061313d02a4647db8c1b30aad2ae53d/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e0d7ecf061313d02a4647db8c1b30aad2ae53d/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=12e0d7ecf061313d02a4647db8c1b30aad2ae53d", "patch": "@@ -48,6 +48,7 @@ use util;\n use num::Zero;\n use iter;\n use iter::{Iterator, DoubleEndedIterator, ExactSize};\n+use result;\n use str::{StrSlice, OwnedStr};\n use to_str::ToStr;\n use clone::DeepClone;\n@@ -426,6 +427,26 @@ impl<T> AsOption<T> for Option<T> {\n     }\n }\n \n+impl<T: Clone> result::ToResult<T, ()> for Option<T> {\n+    #[inline]\n+    fn to_result(&self) -> result::Result<T, ()> {\n+        match *self {\n+            Some(ref x) => result::Ok(x.clone()),\n+            None => result::Err(()),\n+        }\n+    }\n+}\n+\n+impl<T> result::IntoResult<T, ()> for Option<T> {\n+    #[inline]\n+    fn into_result(self) -> result::Result<T, ()> {\n+        match self {\n+            Some(x) => result::Ok(x),\n+            None => result::Err(()),\n+        }\n+    }\n+}\n+\n impl<T: Default> Option<T> {\n     /// Returns the contained value or default (for this type)\n     #[inline]\n@@ -508,6 +529,8 @@ impl<A> ExactSize<A> for OptionIterator<A> {}\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use result::{IntoResult, ToResult};\n+    use result;\n     use util;\n \n     #[test]\n@@ -776,4 +799,22 @@ mod tests {\n         assert_eq!(some.as_option().unwrap(), &100);\n         assert_eq!(none.as_option(), None);\n     }\n+\n+    #[test]\n+    pub fn test_to_result() {\n+        let some: Option<int> = Some(100);\n+        let none: Option<int> = None;\n+\n+        assert_eq!(some.to_result(), result::Ok(100));\n+        assert_eq!(none.to_result(), result::Err(()));\n+    }\n+\n+    #[test]\n+    pub fn test_into_result() {\n+        let some: Option<int> = Some(100);\n+        let none: Option<int> = None;\n+\n+        assert_eq!(some.into_result(), result::Ok(100));\n+        assert_eq!(none.into_result(), result::Err(()));\n+    }\n }"}, {"sha": "f6c2a39ccf09002d07172f1798edf40935520e07", "filename": "src/libstd/result.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/12e0d7ecf061313d02a4647db8c1b30aad2ae53d/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e0d7ecf061313d02a4647db8c1b30aad2ae53d/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=12e0d7ecf061313d02a4647db8c1b30aad2ae53d", "patch": "@@ -256,6 +256,24 @@ impl<T, E: Clone + ToStr> Result<T, E> {\n     }\n }\n \n+/// A generic trait for converting a value to a `Result`\n+pub trait ToResult<T, E> {\n+    /// Convert to the `result` type\n+    fn to_result(&self) -> Result<T, E>;\n+}\n+\n+/// A generic trait for converting a value to a `Result`\n+pub trait IntoResult<T, E> {\n+    /// Convert to the `result` type\n+    fn into_result(self) -> Result<T, E>;\n+}\n+\n+/// A generic trait for converting a value to a `Result`\n+pub trait AsResult<T, E> {\n+    /// Convert to the `result` type\n+    fn as_result<'a>(&'a self) -> Result<&'a T, &'a E>;\n+}\n+\n impl<T: Clone, E> option::ToOption<T> for Result<T, E> {\n     #[inline]\n     fn to_option(&self)-> Option<T> {\n@@ -286,6 +304,26 @@ impl<T, E> option::AsOption<T> for Result<T, E> {\n     }\n }\n \n+impl<T: Clone, E: Clone> ToResult<T, E> for Result<T, E> {\n+    #[inline]\n+    fn to_result(&self) -> Result<T, E> { self.clone() }\n+}\n+\n+impl<T, E> IntoResult<T, E> for Result<T, E> {\n+    #[inline]\n+    fn into_result(self) -> Result<T, E> { self }\n+}\n+\n+impl<T, E> AsResult<T, E> for Result<T, E> {\n+    #[inline]\n+    fn as_result<'a>(&'a self) -> Result<&'a T, &'a E> {\n+        match *self {\n+            Ok(ref t) => Ok(t),\n+            Err(ref e) => Err(e),\n+        }\n+    }\n+}\n+\n #[inline]\n #[allow(missing_doc)]\n pub fn map_opt<T, U: ToStr, V>(o_t: &Option<T>,\n@@ -520,4 +558,34 @@ mod tests {\n         assert_eq!(ok.as_option().unwrap(), &100);\n         assert_eq!(err.as_option(), option::None);\n     }\n+\n+    #[test]\n+    pub fn test_to_result() {\n+        let ok: Result<int, int> = Ok(100);\n+        let err: Result<int, int> = Err(404);\n+\n+        assert_eq!(ok.to_result(), Ok(100));\n+        assert_eq!(err.to_result(), Err(404));\n+    }\n+\n+    #[test]\n+    pub fn test_into_result() {\n+        let ok: Result<int, int> = Ok(100);\n+        let err: Result<int, int> = Err(404);\n+\n+        assert_eq!(ok.into_result(), Ok(100));\n+        assert_eq!(err.into_result(), Err(404));\n+    }\n+\n+    #[test]\n+    pub fn test_as_result() {\n+        let ok: Result<int, int> = Ok(100);\n+        let err: Result<int, int> = Err(404);\n+\n+        let x = 100;\n+        assert_eq!(ok.as_result(), Ok(&x));\n+\n+        let x = 404;\n+        assert_eq!(err.as_result(), Err(&x));\n+    }\n }"}]}