{"sha": "4675a3104b3ace025560337c5d164e330f6b9d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NzVhMzEwNGIzYWNlMDI1NTYwMzM3YzVkMTY0ZTMzMGY2YjlkNjg=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-18T07:51:26Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-18T07:51:26Z"}, "message": "Use intra-doc links in core/src/iter when possible", "tree": {"sha": "8098590a9bdadded8d1d0a8eddc758fb4537c7d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8098590a9bdadded8d1d0a8eddc758fb4537c7d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4675a3104b3ace025560337c5d164e330f6b9d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4675a3104b3ace025560337c5d164e330f6b9d68", "html_url": "https://github.com/rust-lang/rust/commit/4675a3104b3ace025560337c5d164e330f6b9d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4675a3104b3ace025560337c5d164e330f6b9d68/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bdb5dee7bac15458b10b148e9e24968e633053e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bdb5dee7bac15458b10b148e9e24968e633053e", "html_url": "https://github.com/rust-lang/rust/commit/7bdb5dee7bac15458b10b148e9e24968e633053e"}], "stats": {"total": 223, "additions": 91, "deletions": 132}, "files": [{"sha": "0348d5a10d9847085cd2db9c54ed4c275cf38b3f", "filename": "library/core/src/iter/sources.rs", "status": "modified", "additions": 27, "deletions": 49, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs?ref=4675a3104b3ace025560337c5d164e330f6b9d68", "patch": "@@ -5,9 +5,7 @@ use super::{FusedIterator, TrustedLen};\n \n /// An iterator that repeats an element endlessly.\n ///\n-/// This `struct` is created by the [`repeat`] function. See its documentation for more.\n-///\n-/// [`repeat`]: fn.repeat.html\n+/// This `struct` is created by the [`repeat()`] function. See its documentation for more.\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Repeat<A> {\n@@ -47,15 +45,11 @@ unsafe impl<A: Clone> TrustedLen for Repeat<A> {}\n /// The `repeat()` function repeats a single value over and over again.\n ///\n /// Infinite iterators like `repeat()` are often used with adapters like\n-/// [`take`], in order to make them finite.\n-///\n-/// [`take`]: trait.Iterator.html#method.take\n+/// [`Iterator::take()`], in order to make them finite.\n ///\n /// If the element type of the iterator you need does not implement `Clone`,\n /// or if you do not want to keep the repeated element in memory, you can\n-/// instead use the [`repeat_with`] function.\n-///\n-/// [`repeat_with`]: fn.repeat_with.html\n+/// instead use the [`repeat_with()`] function.\n ///\n /// # Examples\n ///\n@@ -77,7 +71,7 @@ unsafe impl<A: Clone> TrustedLen for Repeat<A> {}\n /// assert_eq!(Some(4), fours.next());\n /// ```\n ///\n-/// Going finite with [`take`]:\n+/// Going finite with [`Iterator::take()`]:\n ///\n /// ```\n /// use std::iter;\n@@ -102,10 +96,8 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n /// An iterator that repeats elements of type `A` endlessly by\n /// applying the provided closure `F: FnMut() -> A`.\n ///\n-/// This `struct` is created by the [`repeat_with`] function.\n+/// This `struct` is created by the [`repeat_with()`] function.\n /// See its documentation for more.\n-///\n-/// [`repeat_with`]: fn.repeat_with.html\n #[derive(Copy, Clone, Debug)]\n #[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n pub struct RepeatWith<F> {\n@@ -139,20 +131,18 @@ unsafe impl<A, F: FnMut() -> A> TrustedLen for RepeatWith<F> {}\n /// The `repeat_with()` function calls the repeater over and over again.\n ///\n /// Infinite iterators like `repeat_with()` are often used with adapters like\n-/// [`take`], in order to make them finite.\n+/// [`Iterator::take()`], in order to make them finite.\n ///\n-/// [`take`]: trait.Iterator.html#method.take\n-///\n-/// If the element type of the iterator you need implements `Clone`, and\n+/// If the element type of the iterator you need implements [`Clone`], and\n /// it is OK to keep the source element in memory, you should instead use\n-/// the [`repeat`] function.\n-///\n-/// [`repeat`]: fn.repeat.html\n+/// the [`repeat()`] function.\n ///\n-/// An iterator produced by `repeat_with()` is not a `DoubleEndedIterator`.\n-/// If you need `repeat_with()` to return a `DoubleEndedIterator`,\n+/// An iterator produced by `repeat_with()` is not a [`DoubleEndedIterator`].\n+/// If you need `repeat_with()` to return a [`DoubleEndedIterator`],\n /// please open a GitHub issue explaining your use case.\n ///\n+/// [`DoubleEndedIterator`]: crate::iter::DoubleEndedIterator\n+///\n /// # Examples\n ///\n /// Basic usage:\n@@ -201,9 +191,7 @@ pub fn repeat_with<A, F: FnMut() -> A>(repeater: F) -> RepeatWith<F> {\n \n /// An iterator that yields nothing.\n ///\n-/// This `struct` is created by the [`empty`] function. See its documentation for more.\n-///\n-/// [`empty`]: fn.empty.html\n+/// This `struct` is created by the [`empty()`] function. See its documentation for more.\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub struct Empty<T>(marker::PhantomData<T>);\n \n@@ -292,9 +280,7 @@ pub const fn empty<T>() -> Empty<T> {\n \n /// An iterator that yields an element exactly once.\n ///\n-/// This `struct` is created by the [`once`] function. See its documentation for more.\n-///\n-/// [`once`]: fn.once.html\n+/// This `struct` is created by the [`once()`] function. See its documentation for more.\n #[derive(Clone, Debug)]\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub struct Once<T> {\n@@ -336,12 +322,12 @@ impl<T> FusedIterator for Once<T> {}\n \n /// Creates an iterator that yields an element exactly once.\n ///\n-/// This is commonly used to adapt a single value into a [`chain`] of other\n+/// This is commonly used to adapt a single value into a [`chain()`] of other\n /// kinds of iteration. Maybe you have an iterator that covers almost\n /// everything, but you need an extra special case. Maybe you have a function\n /// which works on iterators, but you only need to process one value.\n ///\n-/// [`chain`]: trait.Iterator.html#method.chain\n+/// [`chain()`]: Iterator::chain\n ///\n /// # Examples\n ///\n@@ -393,10 +379,8 @@ pub fn once<T>(value: T) -> Once<T> {\n /// An iterator that yields a single element of type `A` by\n /// applying the provided closure `F: FnOnce() -> A`.\n ///\n-/// This `struct` is created by the [`once_with`] function.\n+/// This `struct` is created by the [`once_with()`] function.\n /// See its documentation for more.\n-///\n-/// [`once_with`]: fn.once_with.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n pub struct OnceWith<F> {\n@@ -442,15 +426,14 @@ unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n /// Creates an iterator that lazily generates a value exactly once by invoking\n /// the provided closure.\n ///\n-/// This is commonly used to adapt a single value generator into a [`chain`] of\n+/// This is commonly used to adapt a single value generator into a [`chain()`] of\n /// other kinds of iteration. Maybe you have an iterator that covers almost\n /// everything, but you need an extra special case. Maybe you have a function\n /// which works on iterators, but you only need to process one value.\n ///\n-/// Unlike [`once`], this function will lazily generate the value on request.\n+/// Unlike [`once()`], this function will lazily generate the value on request.\n ///\n-/// [`once`]: fn.once.html\n-/// [`chain`]: trait.Iterator.html#method.chain\n+/// [`chain()`]: Iterator::chain\n ///\n /// # Examples\n ///\n@@ -505,17 +488,16 @@ pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n ///\n /// This allows creating a custom iterator with any behavior\n /// without using the more verbose syntax of creating a dedicated type\n-/// and implementing the `Iterator` trait for it.\n+/// and implementing the [`Iterator`] trait for it.\n ///\n /// Note that the `FromFn` iterator doesn\u2019t make assumptions about the behavior of the closure,\n /// and therefore conservatively does not implement [`FusedIterator`],\n-/// or override [`Iterator::size_hint`] from its default `(0, None)`.\n-///\n-/// [`FusedIterator`]: trait.FusedIterator.html\n-/// [`Iterator::size_hint`]: trait.Iterator.html#method.size_hint\n+/// or override [`Iterator::size_hint()`] from its default `(0, None)`.\n ///\n /// The closure can use captures and its environment to track state across iterations. Depending on\n-/// how the iterator is used, this may require specifying the `move` keyword on the closure.\n+/// how the iterator is used, this may require specifying the [`move`] keyword on the closure.\n+///\n+/// [`move`]: ../../../std/keyword.move.html\n ///\n /// # Examples\n ///\n@@ -549,10 +531,8 @@ where\n \n /// An iterator where each iteration calls the provided closure `F: FnMut() -> Option<T>`.\n ///\n-/// This `struct` is created by the [`iter::from_fn`] function.\n+/// This `struct` is created by the [`from_fn()`] function.\n /// See its documentation for more.\n-///\n-/// [`iter::from_fn`]: fn.from_fn.html\n #[derive(Clone)]\n #[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]\n pub struct FromFn<F>(F);\n@@ -601,10 +581,8 @@ where\n \n /// An new iterator where each successive item is computed based on the preceding one.\n ///\n-/// This `struct` is created by the [`successors`] function.\n+/// This `struct` is created by the [`successors()`] function.\n /// See its documentation for more.\n-///\n-/// [`successors`]: fn.successors.html\n #[derive(Clone)]\n #[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n pub struct Successors<T, F> {"}, {"sha": "dc0d8087ffbff4e739543ee8ab7f91e56f311f7a", "filename": "library/core/src/iter/traits/accum.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs?ref=4675a3104b3ace025560337c5d164e330f6b9d68", "patch": "@@ -4,14 +4,13 @@ use crate::ops::{Add, Mul};\n \n /// Trait to represent types that can be created by summing up an iterator.\n ///\n-/// This trait is used to implement the [`sum`] method on iterators. Types which\n-/// implement the trait can be generated by the [`sum`] method. Like\n+/// This trait is used to implement the [`sum()`] method on iterators. Types which\n+/// implement the trait can be generated by the [`sum()`] method. Like\n /// [`FromIterator`] this trait should rarely be called directly and instead\n-/// interacted with through [`Iterator::sum`].\n+/// interacted with through [`Iterator::sum()`].\n ///\n-/// [`sum`]: #tymethod.sum\n-/// [`FromIterator`]: crate::iter::FromIterator\n-/// [`Iterator::sum`]: crate::iter::Iterator::sum\n+/// [`sum()`]: Sum::sum\n+/// [`FromIterator`]: iter::FromIterator\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Sum<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n@@ -23,14 +22,13 @@ pub trait Sum<A = Self>: Sized {\n /// Trait to represent types that can be created by multiplying elements of an\n /// iterator.\n ///\n-/// This trait is used to implement the [`product`] method on iterators. Types\n-/// which implement the trait can be generated by the [`product`] method. Like\n+/// This trait is used to implement the [`product()`] method on iterators. Types\n+/// which implement the trait can be generated by the [`product()`] method. Like\n /// [`FromIterator`] this trait should rarely be called directly and instead\n-/// interacted with through [`Iterator::product`].\n+/// interacted with through [`Iterator::product()`].\n ///\n-/// [`product`]: #tymethod.product\n-/// [`FromIterator`]: crate::iter::FromIterator\n-/// [`Iterator::product`]: crate::iter::Iterator::product\n+/// [`product()`]: Product::product\n+/// [`FromIterator`]: iter::FromIterator\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Product<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n@@ -120,9 +118,9 @@ impl<T, U, E> Sum<Result<U, E>> for Result<T, E>\n where\n     T: Sum<U>,\n {\n-    /// Takes each element in the `Iterator`: if it is an `Err`, no further\n-    /// elements are taken, and the `Err` is returned. Should no `Err` occur,\n-    /// the sum of all elements is returned.\n+    /// Takes each element in the [`Iterator`]: if it is an [`Err`], no further\n+    /// elements are taken, and the [`Err`] is returned. Should no [`Err`]\n+    /// occur, the sum of all elements is returned.\n     ///\n     /// # Examples\n     ///\n@@ -150,9 +148,9 @@ impl<T, U, E> Product<Result<U, E>> for Result<T, E>\n where\n     T: Product<U>,\n {\n-    /// Takes each element in the `Iterator`: if it is an `Err`, no further\n-    /// elements are taken, and the `Err` is returned. Should no `Err` occur,\n-    /// the product of all elements is returned.\n+    /// Takes each element in the [`Iterator`]: if it is an [`Err`], no further\n+    /// elements are taken, and the [`Err`] is returned. Should no [`Err`]\n+    /// occur, the product of all elements is returned.\n     fn product<I>(iter: I) -> Result<T, E>\n     where\n         I: Iterator<Item = Result<U, E>>,\n@@ -166,9 +164,9 @@ impl<T, U> Sum<Option<U>> for Option<T>\n where\n     T: Sum<U>,\n {\n-    /// Takes each element in the `Iterator`: if it is a `None`, no further\n-    /// elements are taken, and the `None` is returned. Should no `None` occur,\n-    /// the sum of all elements is returned.\n+    /// Takes each element in the [`Iterator`]: if it is a [`None`], no further\n+    /// elements are taken, and the [`None`] is returned. Should no [`None`]\n+    /// occur, the sum of all elements is returned.\n     ///\n     /// # Examples\n     ///\n@@ -193,9 +191,9 @@ impl<T, U> Product<Option<U>> for Option<T>\n where\n     T: Product<U>,\n {\n-    /// Takes each element in the `Iterator`: if it is a `None`, no further\n-    /// elements are taken, and the `None` is returned. Should no `None` occur,\n-    /// the product of all elements is returned.\n+    /// Takes each element in the [`Iterator`]: if it is a [`None`], no further\n+    /// elements are taken, and the [`None`] is returned. Should no [`None`]\n+    /// occur, the product of all elements is returned.\n     fn product<I>(iter: I) -> Option<T>\n     where\n         I: Iterator<Item = Option<U>>,"}, {"sha": "41a503c4abb4fbb14938ce3d4c670a7823d6798c", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=4675a3104b3ace025560337c5d164e330f6b9d68", "patch": "@@ -1,21 +1,15 @@\n-/// Conversion from an `Iterator`.\n+/// Conversion from an [`Iterator`].\n ///\n /// By implementing `FromIterator` for a type, you define how it will be\n /// created from an iterator. This is common for types which describe a\n /// collection of some kind.\n ///\n-/// `FromIterator`'s [`from_iter`] is rarely called explicitly, and is instead\n-/// used through [`Iterator`]'s [`collect`] method. See [`collect`]'s\n+/// [`FromIterator::from_iter()`] is rarely called explicitly, and is instead\n+/// used through [`Iterator::collect()`] method. See [`Iterator::collect()`]'s\n /// documentation for more examples.\n ///\n-/// [`from_iter`]: #tymethod.from_iter\n-/// [`Iterator`]: trait.Iterator.html\n-/// [`collect`]: trait.Iterator.html#method.collect\n-///\n /// See also: [`IntoIterator`].\n ///\n-/// [`IntoIterator`]: trait.IntoIterator.html\n-///\n /// # Examples\n ///\n /// Basic usage:\n@@ -30,7 +24,7 @@\n /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n /// ```\n ///\n-/// Using [`collect`] to implicitly use `FromIterator`:\n+/// Using [`Iterator::collect()`] to implicitly use `FromIterator`:\n ///\n /// ```\n /// let five_fives = std::iter::repeat(5).take(5);\n@@ -119,7 +113,7 @@ pub trait FromIterator<A>: Sized {\n     fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> Self;\n }\n \n-/// Conversion into an `Iterator`.\n+/// Conversion into an [`Iterator`].\n ///\n /// By implementing `IntoIterator` for a type, you define how it will be\n /// converted to an iterator. This is common for types which describe a\n@@ -130,8 +124,6 @@ pub trait FromIterator<A>: Sized {\n ///\n /// See also: [`FromIterator`].\n ///\n-/// [`FromIterator`]: trait.FromIterator.html\n-///\n /// # Examples\n ///\n /// Basic usage:\n@@ -326,7 +318,7 @@ pub trait Extend<A> {\n     /// As this is the only required method for this trait, the [trait-level] docs\n     /// contain more details.\n     ///\n-    /// [trait-level]: trait.Extend.html\n+    /// [trait-level]: Extend\n     ///\n     /// # Examples\n     ///"}, {"sha": "bc03c143d6afb8b1727c62d08efa84f445e3dea3", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=4675a3104b3ace025560337c5d164e330f6b9d68", "patch": "@@ -10,11 +10,12 @@ use crate::ops::{ControlFlow, Try};\n /// and do not cross: iteration is over when they meet in the middle.\n ///\n /// In a similar fashion to the [`Iterator`] protocol, once a\n-/// `DoubleEndedIterator` returns `None` from a `next_back()`, calling it again\n-/// may or may not ever return `Some` again. `next()` and `next_back()` are\n-/// interchangeable for this purpose.\n+/// `DoubleEndedIterator` returns [`None`] from a [`next_back()`], calling it\n+/// again may or may not ever return [`Some`] again. [`next()`] and\n+/// [`next_back()`] are interchangeable for this purpose.\n ///\n-/// [`Iterator`]: trait.Iterator.html\n+/// [`next_back()`]: DoubleEndedIterator::next_back\n+/// [`next()`]: Iterator::next\n ///\n /// # Examples\n ///\n@@ -42,7 +43,7 @@ pub trait DoubleEndedIterator: Iterator {\n     ///\n     /// The [trait-level] docs contain more details.\n     ///\n-    /// [trait-level]: trait.DoubleEndedIterator.html\n+    /// [trait-level]: DoubleEndedIterator\n     ///\n     /// # Examples\n     ///\n@@ -66,7 +67,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// # Remarks\n     ///\n     /// The elements yielded by `DoubleEndedIterator`'s methods may differ from\n-    /// the ones yielded by `Iterator`'s methods:\n+    /// the ones yielded by [`Iterator`]'s methods:\n     ///\n     /// ```\n     /// let vec = vec![(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b')];\n@@ -87,25 +88,23 @@ pub trait DoubleEndedIterator: Iterator {\n     ///     vec![(2, 'b'), (1, 'c')]\n     /// );\n     /// ```\n-    ///\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n \n     /// Returns the `n`th element from the end of the iterator.\n     ///\n-    /// This is essentially the reversed version of [`nth`]. Although like most indexing\n-    /// operations, the count starts from zero, so `nth_back(0)` returns the first value from\n-    /// the end, `nth_back(1)` the second, and so on.\n+    /// This is essentially the reversed version of [`Iterator::nth()`].\n+    /// Although like most indexing operations, the count starts from zero, so\n+    /// `nth_back(0)` returns the first value from the end, `nth_back(1)` the\n+    /// second, and so on.\n     ///\n     /// Note that all elements between the end and the returned element will be\n     /// consumed, including the returned element. This also means that calling\n     /// `nth_back(0)` multiple times on the same iterator will return different\n     /// elements.\n     ///\n-    /// `nth_back()` will return [`None`] if `n` is greater than or equal to the length of the\n-    /// iterator.\n-    ///\n-    /// [`nth`]: crate::iter::Iterator::nth\n+    /// `nth_back()` will return [`None`] if `n` is greater than or equal to the\n+    /// length of the iterator.\n     ///\n     /// # Examples\n     ///\n@@ -145,10 +144,8 @@ pub trait DoubleEndedIterator: Iterator {\n         None\n     }\n \n-    /// This is the reverse version of [`try_fold()`]: it takes elements\n-    /// starting from the back of the iterator.\n-    ///\n-    /// [`try_fold()`]: Iterator::try_fold\n+    /// This is the reverse version of [`Iterator::try_fold()`]: it takes\n+    /// elements starting from the back of the iterator.\n     ///\n     /// # Examples\n     ///\n@@ -195,8 +192,8 @@ pub trait DoubleEndedIterator: Iterator {\n     /// An iterator method that reduces the iterator's elements to a single,\n     /// final value, starting from the back.\n     ///\n-    /// This is the reverse version of [`fold()`]: it takes elements starting from\n-    /// the back of the iterator.\n+    /// This is the reverse version of [`Iterator::fold()`]: it takes elements\n+    /// starting from the back of the iterator.\n     ///\n     /// `rfold()` takes two arguments: an initial value, and a closure with two\n     /// arguments: an 'accumulator', and an element. The closure returns the value that\n@@ -213,8 +210,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Folding is useful whenever you have a collection of something, and want\n     /// to produce a single value from it.\n     ///\n-    /// [`fold()`]: Iterator::fold\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}, {"sha": "33ace60a27419e6b2d4759437f36c6bcca732f3f", "filename": "library/core/src/iter/traits/exact_size.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs?ref=4675a3104b3ace025560337c5d164e330f6b9d68", "patch": "@@ -6,17 +6,14 @@\n /// backwards, a good start is to know where the end is.\n ///\n /// When implementing an `ExactSizeIterator`, you must also implement\n-/// [`Iterator`]. When doing so, the implementation of [`size_hint`] *must*\n-/// return the exact size of the iterator.\n-///\n-/// [`Iterator`]: trait.Iterator.html\n-/// [`size_hint`]: trait.Iterator.html#method.size_hint\n+/// [`Iterator`]. When doing so, the implementation of [`Iterator::size_hint`]\n+/// *must* return the exact size of the iterator.\n ///\n /// The [`len`] method has a default implementation, so you usually shouldn't\n /// implement it. However, you may be able to provide a more performant\n /// implementation than the default, so overriding it in this case makes sense.\n ///\n-/// [`len`]: #method.len\n+/// [`len`]: ExactSizeIterator::len\n ///\n /// # Examples\n ///\n@@ -72,17 +69,17 @@ pub trait ExactSizeIterator: Iterator {\n     /// Returns the exact length of the iterator.\n     ///\n     /// The implementation ensures that the iterator will return exactly `len()`\n-    /// more times a `Some(T)` value, before returning `None`.\n+    /// more times a [`Some(T)`] value, before returning [`None`].\n     /// This method has a default implementation, so you usually should not\n     /// implement it directly. However, if you can provide a more efficient\n     /// implementation, you can do so. See the [trait-level] docs for an\n     /// example.\n     ///\n-    /// This function has the same safety guarantees as the [`size_hint`]\n-    /// function.\n+    /// This function has the same safety guarantees as the\n+    /// [`Iterator::size_hint`] function.\n     ///\n-    /// [trait-level]: trait.ExactSizeIterator.html\n-    /// [`size_hint`]: trait.Iterator.html#method.size_hint\n+    /// [trait-level]: ExactSizeIterator\n+    /// [`Some(T)`]: Some\n     ///\n     /// # Examples\n     ///\n@@ -108,8 +105,8 @@ pub trait ExactSizeIterator: Iterator {\n \n     /// Returns `true` if the iterator is empty.\n     ///\n-    /// This method has a default implementation using `self.len()`, so you\n-    /// don't need to implement it yourself.\n+    /// This method has a default implementation using\n+    /// [`ExactSizeIterator::len()`], so you don't need to implement it yourself.\n     ///\n     /// # Examples\n     ///"}, {"sha": "f70e92f0ffafefcf41a5080e991d2fd5741d3447", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=4675a3104b3ace025560337c5d164e330f6b9d68", "patch": "@@ -2203,7 +2203,6 @@ pub trait Iterator {\n     ///\n     /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.\n     ///\n-    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "0900676146c0d7c63dd590bf1d96da2954dbecc1", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675a3104b3ace025560337c5d164e330f6b9d68/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=4675a3104b3ace025560337c5d164e330f6b9d68", "patch": "@@ -2,14 +2,13 @@\n ///\n /// Calling next on a fused iterator that has returned `None` once is guaranteed\n /// to return [`None`] again. This trait should be implemented by all iterators\n-/// that behave this way because it allows optimizing [`Iterator::fuse`].\n+/// that behave this way because it allows optimizing [`Iterator::fuse()`].\n ///\n /// Note: In general, you should not use `FusedIterator` in generic bounds if\n-/// you need a fused iterator. Instead, you should just call [`Iterator::fuse`]\n+/// you need a fused iterator. Instead, you should just call [`Iterator::fuse()`]\n /// on the iterator. If the iterator is already fused, the additional [`Fuse`]\n /// wrapper will be a no-op with no performance penalty.\n ///\n-/// [`Iterator::fuse`]: crate::iter::Iterator::fuse\n /// [`Fuse`]: crate::iter::Fuse\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n #[rustc_unsafe_specialization_marker]\n@@ -24,18 +23,18 @@ impl<I: FusedIterator + ?Sized> FusedIterator for &mut I {}\n /// (lower bound is equal to upper bound), or the upper bound is [`None`].\n /// The upper bound must only be [`None`] if the actual iterator length is\n /// larger than [`usize::MAX`]. In that case, the lower bound must be\n-/// [`usize::MAX`], resulting in a [`.size_hint`] of `(usize::MAX, None)`.\n+/// [`usize::MAX`], resulting in a [`Iterator::size_hint()`] of\n+/// `(usize::MAX, None)`.\n ///\n /// The iterator must produce exactly the number of elements it reported\n /// or diverge before reaching the end.\n ///\n /// # Safety\n ///\n-/// This trait must only be implemented when the contract is upheld.\n-/// Consumers of this trait must inspect [`.size_hint`]\u2019s upper bound.\n+/// This trait must only be implemented when the contract is upheld. Consumers\n+/// of this trait must inspect [`Iterator::size_hint()`]\u2019s upper bound.\n ///\n /// [`usize::MAX`]: crate::usize::MAX\n-/// [`.size_hint`]: crate::iter::Iterator::size_hint\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n #[rustc_unsafe_specialization_marker]\n pub unsafe trait TrustedLen: Iterator {}\n@@ -46,11 +45,12 @@ unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}\n /// An iterator that when yielding an item will have taken at least one element\n /// from its underlying [`SourceIter`].\n ///\n-/// Calling next() guarantees that at least one value of the iterator's underlying source\n+/// Calling [`next()`] guarantees that at least one value of the iterator's underlying source\n /// has been moved out and the result of the iterator chain could be inserted in its place,\n /// assuming structural constraints of the source allow such an insertion.\n /// In other words this trait indicates that an iterator pipeline can be collected in place.\n ///\n-/// [`SourceIter`]: ../../std/iter/trait.SourceIter.html\n+/// [`SourceIter`]: crate::iter::SourceIter\n+/// [`next()`]: Iterator::next\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n pub unsafe trait InPlaceIterable: Iterator {}"}]}