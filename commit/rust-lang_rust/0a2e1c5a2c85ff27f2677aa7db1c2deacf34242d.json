{"sha": "0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMmUxYzVhMmM4NWZmMjdmMjY3N2FhN2RiMWMyZGVhY2YzNDI0MmQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-26T21:42:52Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert rustc to use Tarball", "tree": {"sha": "28440ff550e9bd506bd12ccdf869e26383c55137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28440ff550e9bd506bd12ccdf869e26383c55137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjfAACgkQPgar6Auq\n8ZxXohAAlVy2r2hbbFx0tgXKY4aWO1MRgvoKg3N1ox25lQFcBmJiKd7wThe03jtf\nVUjqKL4Wz064SGgPqRfI296nfNzyM7fcITH7/YCDz4Funbhsa/bWUtf5hwh/pL2Q\nIjRVCBJjESjjONxBK9ghj54hJxoWPZckVHIyVp34aesdSg+N+PEsKGz6cJwBXqsH\nZ21qz1/sMYHunnJVNoKsAVvNiHFgtGt305/XiHMPN2u8E2AYUmn967Ijcm6pgXcA\nERZiqHRvwQYjtR3bafzxpFRqeYSlhQkGa7a8yJ571EmgaiIcZ6twc3/slS0vSFih\nySudQlkZNQfiCbbPKw40B4imeRsrRFpy9Nrof0mO71a16JIMnv9vzs6DO685E8vD\n1w63mOrRWJlG6BQ83GM1H8QgmArdOkwHsC85riEi+v0xv22omzcXgL2PX4hxXDZx\nj/9H2L636z5a1w5nd7Hpu3PEdOE7QQZab3F6f1Xb+ZGljM1B51fIWOi2fI0nyKag\n7z0kmfntDG2ADQ9v25qab4BGmegyzuv7MvGpQZr872EY/wazcoKLFLCNdDff0bp0\noseOjwA2/FtzVkzAEBE+t5DsykuBOsC2fQqUPHl/gKxTaUxzFW+J4cDOWW+SHurH\nPSVJYAx0YFlsUa36ns0D6KGvZfkIF3F9N1DekVr4dZr7a/sel7Y=\n=PMdq\n-----END PGP SIGNATURE-----", "payload": "tree 28440ff550e9bd506bd12ccdf869e26383c55137\nparent 82d9eaa54d3a60edc2dd664355e390ec9aa36fa5\nauthor Pietro Albini <pietro@pietroalbini.org> 1606426972 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert rustc to use Tarball\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d", "html_url": "https://github.com/rust-lang/rust/commit/0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d9eaa54d3a60edc2dd664355e390ec9aa36fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d9eaa54d3a60edc2dd664355e390ec9aa36fa5", "html_url": "https://github.com/rust-lang/rust/commit/82d9eaa54d3a60edc2dd664355e390ec9aa36fa5"}], "stats": {"total": 63, "additions": 11, "deletions": 52}, "files": [{"sha": "db792886c16658cfe8de8ca9f0a9eee7744d0991", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 8, "deletions": 52, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d", "patch": "@@ -341,30 +341,13 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let host = self.compiler.host;\n \n-        let name = pkgname(builder, \"rustc\");\n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host.triple));\n-        let _ = fs::remove_dir_all(&image);\n-        let overlay = tmpdir(builder).join(format!(\"{}-{}-overlay\", name, host.triple));\n-        let _ = fs::remove_dir_all(&overlay);\n+        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host.triple));\n+        let _time = timeit(builder);\n \n-        // Prepare the rustc \"image\", what will actually end up getting installed\n-        prepare_image(builder, compiler, &image);\n+        let tarball = Tarball::new(builder, \"rustc\", &host.triple);\n \n-        // Prepare the overlay which is part of the tarball but won't actually be\n-        // installed\n-        let cp = |file: &str| {\n-            builder.install(&builder.src.join(file), &overlay, 0o644);\n-        };\n-        cp(\"COPYRIGHT\");\n-        cp(\"LICENSE-APACHE\");\n-        cp(\"LICENSE-MIT\");\n-        cp(\"README.md\");\n-        // tiny morsel of metadata is used by rust-packaging\n-        let version = builder.rust_version();\n-        builder.create(&overlay.join(\"version\"), &version);\n-        if let Some(sha) = builder.rust_sha() {\n-            builder.create(&overlay.join(\"git-commit-hash\"), &sha);\n-        }\n+        // Prepare the rustc \"image\", what will actually end up getting installed\n+        prepare_image(builder, compiler, tarball.image_dir());\n \n         // On MinGW we've got a few runtime DLL dependencies that we need to\n         // include. The first argument to this script is where to put these DLLs\n@@ -377,38 +360,11 @@ impl Step for Rustc {\n         // install will *also* include the rust-mingw package, which also needs\n         // licenses, so to be safe we just include it here in all MinGW packages.\n         if host.contains(\"pc-windows-gnu\") {\n-            make_win_dist(&image, &tmpdir(builder), host, builder);\n-\n-            let dst = image.join(\"share/doc\");\n-            t!(fs::create_dir_all(&dst));\n-            builder.cp_r(&builder.src.join(\"src/etc/third-party\"), &dst);\n+            make_win_dist(tarball.image_dir(), &tmpdir(builder), host, builder);\n+            tarball.add_dir(builder.src.join(\"src/etc/third-party\"), \"share/doc\");\n         }\n \n-        // Finally, wrap everything up in a nice tarball!\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(\"--non-installed-overlay\")\n-            .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, host.triple))\n-            .arg(\"--component-name=rustc\")\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n-\n-        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host.triple));\n-        let _time = timeit(builder);\n-        builder.run(&mut cmd);\n-        builder.remove_dir(&image);\n-        builder.remove_dir(&overlay);\n-\n-        return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host.triple));\n+        return tarball.generate();\n \n         fn prepare_image(builder: &Builder<'_>, compiler: Compiler, image: &Path) {\n             let host = compiler.host;"}, {"sha": "294b69c85f4881f07a7a8208b7b4ae861f540e63", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=0a2e1c5a2c85ff27f2677aa7db1c2deacf34242d", "patch": "@@ -107,6 +107,9 @@ impl<'a> Tarball<'a> {\n     pub(crate) fn generate(self) -> PathBuf {\n         t!(std::fs::create_dir_all(&self.overlay_dir));\n         self.builder.create(&self.overlay_dir.join(\"version\"), &self.builder.rust_version());\n+        if let Some(sha) = self.builder.rust_sha() {\n+            self.builder.create(&self.overlay_dir.join(\"git-commit-hash\"), &sha);\n+        }\n         for file in self.overlay.included_files() {\n             self.builder.install(&self.builder.src.join(file), &self.overlay_dir, 0o644);\n         }"}]}