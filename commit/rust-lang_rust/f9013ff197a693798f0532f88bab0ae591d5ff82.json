{"sha": "f9013ff197a693798f0532f88bab0ae591d5ff82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDEzZmYxOTdhNjkzNzk4ZjA1MzJmODhiYWIwYWU1OTFkNWZmODI=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-21T13:34:48Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-21T13:34:48Z"}, "message": "Relax fs layout so that multiple pass/fail manifests are possible", "tree": {"sha": "eb2de4cb6ce91ae3bb915d8bc4d47befa2147451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2de4cb6ce91ae3bb915d8bc4d47befa2147451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9013ff197a693798f0532f88bab0ae591d5ff82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9013ff197a693798f0532f88bab0ae591d5ff82", "html_url": "https://github.com/rust-lang/rust/commit/f9013ff197a693798f0532f88bab0ae591d5ff82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9013ff197a693798f0532f88bab0ae591d5ff82/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a04686fc0d2752de8731c833ab67bfae6136720", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a04686fc0d2752de8731c833ab67bfae6136720", "html_url": "https://github.com/rust-lang/rust/commit/1a04686fc0d2752de8731c833ab67bfae6136720"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "b3f5a62d55307798298c250ae6d5524c633cc427", "filename": "doc/adding_lints.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9013ff197a693798f0532f88bab0ae591d5ff82/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9013ff197a693798f0532f88bab0ae591d5ff82/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=f9013ff197a693798f0532f88bab0ae591d5ff82", "patch": "@@ -43,7 +43,7 @@ case), and we don't need type information so it will have an early pass type\n (category will default to nursery if not provided). This command will create\n two files: `tests/ui/foo_functions.rs` and `clippy_lints/src/foo_functions.rs`,\n as well as run `cargo dev update_lints` to register the new lint. For cargo lints,\n-two project hierarchies (fail/pass) will be created under `tests/ui-cargo`.\n+two project hierarchies (fail/pass) will be created by default under `tests/ui-cargo`.\n \n Next, we'll open up these files and add our lint!\n \n@@ -110,12 +110,17 @@ specific lint you are creating/editing.\n ### Cargo lints\n \n For cargo lints, the process of testing differs in that we are interested in\n-the contents of the `Cargo.toml` files. If our new lint is named e.g. `foo_categories`,\n-after running `cargo dev new_lint` we will find two new manifest files:\n+the `Cargo.toml` manifest file. We also need a minimal crate associated\n+with that manifest.\n+\n+If our new lint is named e.g. `foo_categories`, after running `cargo dev new_lint` \n+we will find by default two new crates, each with its manifest file:\n \n * `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the new lint to raise an error.\n * `tests/ui-cargo/foo_categories/pass/Cargo.toml`: this file should not trigger the lint.\n \n+If you need more cases, you can copy one of those crates (under `foo_categories`) and rename it.\n+\n The process of generating the `.stderr` file is the same, and prepending the `TESTNAME`\n variable to `cargo uitest` works too, but the script to update the references\n is in another path: `tests/ui-cargo/update-all-references.sh`."}, {"sha": "a5de84293909f24c8e99b77aedb8c6e3afd8be08", "filename": "tests/compile-test.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9013ff197a693798f0532f88bab0ae591d5ff82/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9013ff197a693798f0532f88bab0ae591d5ff82/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=f9013ff197a693798f0532f88bab0ae591d5ff82", "patch": "@@ -174,9 +174,13 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n                 _ => {},\n             }\n \n-            for case in &[\"pass\", \"fail\"] {\n-                let tail: PathBuf = [case, \"src\"].iter().collect();\n-                let src_path = dir_path.join(tail);\n+            for case in fs::read_dir(&dir_path)? {\n+                let case = case?;\n+                if !case.file_type()?.is_dir() {\n+                    continue;\n+                }\n+\n+                let src_path = case.path().join(\"src\");\n                 env::set_current_dir(&src_path)?;\n \n                 for file in fs::read_dir(&src_path)? {"}]}