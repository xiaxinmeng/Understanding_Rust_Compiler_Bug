{"sha": "13e62be1e5efbab8b3a8247fb61d2712b28aa20f", "node_id": "C_kwDOAAsO6NoAKDEzZTYyYmUxZTVlZmJhYjhiM2E4MjQ3ZmI2MWQyNzEyYjI4YWEyMGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-06T07:35:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-06T07:35:28Z"}, "message": "Rollup merge of #104016 - Nilstrieb:query-descs-more, r=compiler-errors\n\nAdd internal descriptions to a few queries\n\nhelps with #104008", "tree": {"sha": "43884a33d6891efcacc46a8a54f9012cadbf9ecd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43884a33d6891efcacc46a8a54f9012cadbf9ecd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e62be1e5efbab8b3a8247fb61d2712b28aa20f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZ2PACRBK7hj4Ov3rIwAAC6IIAEGU7E78eFuG4v3XAVt/3WiD\nIgOGgHkXPTVMUvDufjTHm14+/tRelkixvXoqeNO1P+vSWPPojKH9X5fScD9TxJBy\n51j5LglO22HikIfckWU99APMA5fjIhKkT/TnpohWRsufc5xGQyeITMr2wUjWgj0W\n3YTrXw2jzJZLEPfD/1tmvFdLRLKS7eqe5k63zVr+q9LxHG4lMVyVzYVBoFCPq9iK\nFt13A32eGw/rd1W2AXolJ0YEIsOkywEMr40FEz7AHuLoB7Iw3TURWqBY5P1mEZ3e\nIaeaRNky33ZsrpAKS9GF7MOI+fgZRWRKOq7/m2skHUJLs5dufEJRzKnHBmysddg=\n=Sl49\n-----END PGP SIGNATURE-----\n", "payload": "tree 43884a33d6891efcacc46a8a54f9012cadbf9ecd\nparent ef0d79f8654e5d9b170844263ef73d2aa615fa50\nparent 27e0f03d411b867ea0605c43aea1eccdd4b9c71c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667720128 +0100\ncommitter GitHub <noreply@github.com> 1667720128 +0100\n\nRollup merge of #104016 - Nilstrieb:query-descs-more, r=compiler-errors\n\nAdd internal descriptions to a few queries\n\nhelps with #104008\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e62be1e5efbab8b3a8247fb61d2712b28aa20f", "html_url": "https://github.com/rust-lang/rust/commit/13e62be1e5efbab8b3a8247fb61d2712b28aa20f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e62be1e5efbab8b3a8247fb61d2712b28aa20f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0d79f8654e5d9b170844263ef73d2aa615fa50", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0d79f8654e5d9b170844263ef73d2aa615fa50", "html_url": "https://github.com/rust-lang/rust/commit/ef0d79f8654e5d9b170844263ef73d2aa615fa50"}, {"sha": "27e0f03d411b867ea0605c43aea1eccdd4b9c71c", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e0f03d411b867ea0605c43aea1eccdd4b9c71c", "html_url": "https://github.com/rust-lang/rust/commit/27e0f03d411b867ea0605c43aea1eccdd4b9c71c"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "9bf7778bfb29c7abd75a2a6144d12fcee9b86453", "filename": "compiler/rustc_interface/src/proc_macro_decls.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13e62be1e5efbab8b3a8247fb61d2712b28aa20f/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e62be1e5efbab8b3a8247fb61d2712b28aa20f/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs?ref=13e62be1e5efbab8b3a8247fb61d2712b28aa20f", "patch": "@@ -4,21 +4,16 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n fn proc_macro_decls_static(tcx: TyCtxt<'_>, (): ()) -> Option<LocalDefId> {\n-    let mut finder = Finder { tcx, decls: None };\n+    let mut decls = None;\n \n     for id in tcx.hir().items() {\n-        let attrs = finder.tcx.hir().attrs(id.hir_id());\n-        if finder.tcx.sess.contains_name(attrs, sym::rustc_proc_macro_decls) {\n-            finder.decls = Some(id.owner_id.def_id);\n+        let attrs = tcx.hir().attrs(id.hir_id());\n+        if tcx.sess.contains_name(attrs, sym::rustc_proc_macro_decls) {\n+            decls = Some(id.owner_id.def_id);\n         }\n     }\n \n-    finder.decls\n-}\n-\n-struct Finder<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    decls: Option<LocalDefId>,\n+    decls\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "00242e7eed775ff925c370f6aedcf5315e186b45", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13e62be1e5efbab8b3a8247fb61d2712b28aa20f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e62be1e5efbab8b3a8247fb61d2712b28aa20f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=13e62be1e5efbab8b3a8247fb61d2712b28aa20f", "patch": "@@ -271,6 +271,10 @@ rustc_queries! {\n         desc { |tcx| \"elaborating item bounds for `{}`\", tcx.def_path_str(key) }\n     }\n \n+    /// Look up all native libraries this crate depends on.\n+    /// These are assembled from the following places:\n+    /// - `extern` blocks (depending on their `link` attributes)\n+    /// - the `libs` (`-l`) option\n     query native_libraries(_: CrateNum) -> Vec<NativeLib> {\n         arena_cache\n         desc { \"looking up the native libraries of a linked crate\" }\n@@ -1539,6 +1543,7 @@ rustc_queries! {\n         desc { \"available upstream drop-glue for `{:?}`\", substs }\n     }\n \n+    /// Returns a list of all `extern` blocks of a crate.\n     query foreign_modules(_: CrateNum) -> FxHashMap<DefId, ForeignModule> {\n         arena_cache\n         desc { \"looking up the foreign modules of a linked crate\" }\n@@ -1550,27 +1555,37 @@ rustc_queries! {\n     query entry_fn(_: ()) -> Option<(DefId, EntryFnType)> {\n         desc { \"looking up the entry function of a crate\" }\n     }\n+\n+    /// Finds the `rustc_proc_macro_decls` item of a crate.\n     query proc_macro_decls_static(_: ()) -> Option<LocalDefId> {\n-        desc { \"looking up the derive registrar for a crate\" }\n+        desc { \"looking up the proc macro declarations for a crate\" }\n     }\n+\n     // The macro which defines `rustc_metadata::provide_extern` depends on this query's name.\n     // Changing the name should cause a compiler error, but in case that changes, be aware.\n     query crate_hash(_: CrateNum) -> Svh {\n         eval_always\n         desc { \"looking up the hash a crate\" }\n         separate_provide_extern\n     }\n+\n+    /// Gets the hash for the host proc macro. Used to support -Z dual-proc-macro.\n     query crate_host_hash(_: CrateNum) -> Option<Svh> {\n         eval_always\n         desc { \"looking up the hash of a host version of a crate\" }\n         separate_provide_extern\n     }\n+\n+    /// Gets the extra data to put in each output filename for a crate.\n+    /// For example, compiling the `foo` crate with `extra-filename=-a` creates a `libfoo-b.rlib` file.\n     query extra_filename(_: CrateNum) -> String {\n         arena_cache\n         eval_always\n         desc { \"looking up the extra filename for a crate\" }\n         separate_provide_extern\n     }\n+\n+    /// Gets the paths where the crate came from in the file system.\n     query crate_extern_paths(_: CrateNum) -> Vec<PathBuf> {\n         arena_cache\n         eval_always\n@@ -1594,6 +1609,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    /// Get the corresponding native library from the `native_libraries` query\n     query native_library(def_id: DefId) -> Option<&'tcx NativeLib> {\n         desc { |tcx| \"getting the native library for `{}`\", tcx.def_path_str(def_id) }\n     }"}]}