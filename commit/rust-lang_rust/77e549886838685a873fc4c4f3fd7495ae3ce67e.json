{"sha": "77e549886838685a873fc4c4f3fd7495ae3ce67e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZTU0OTg4NjgzODY4NWE4NzNmYzRjNGYzZmQ3NDk1YWUzY2U2N2U=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-24T21:59:21Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-24T21:59:21Z"}, "message": "Long lines", "tree": {"sha": "90b835b17f063eafa97b42902aa59b8d067e4dea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b835b17f063eafa97b42902aa59b8d067e4dea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77e549886838685a873fc4c4f3fd7495ae3ce67e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77e549886838685a873fc4c4f3fd7495ae3ce67e", "html_url": "https://github.com/rust-lang/rust/commit/77e549886838685a873fc4c4f3fd7495ae3ce67e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77e549886838685a873fc4c4f3fd7495ae3ce67e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec0c029a7ed9ac34bec716193e51b15d29965b0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0c029a7ed9ac34bec716193e51b15d29965b0e", "html_url": "https://github.com/rust-lang/rust/commit/ec0c029a7ed9ac34bec716193e51b15d29965b0e"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "905b7f318e0601f453af5d8656fe9a8e3d9604fb", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77e549886838685a873fc4c4f3fd7495ae3ce67e/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e549886838685a873fc4c4f3fd7495ae3ce67e/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=77e549886838685a873fc4c4f3fd7495ae3ce67e", "patch": "@@ -99,7 +99,8 @@ pub mod Reader {\n             let elt_size = vuint_at(*d.data, elt_tag.next);\n             pos = elt_size.next + elt_size.val;\n             if elt_tag.val == tg {\n-                return Some(Doc { data: d.data, start: elt_size.next, end: pos });\n+                return Some(Doc { data: d.data, start: elt_size.next,\n+                                  end: pos });\n             }\n         }\n         None\n@@ -135,15 +136,17 @@ pub mod Reader {\n             let elt_size = vuint_at(*d.data, elt_tag.next);\n             pos = elt_size.next + elt_size.val;\n             if elt_tag.val == tg {\n-                let doc = Doc { data: d.data, start: elt_size.next, end: pos };\n+                let doc = Doc { data: d.data, start: elt_size.next,\n+                                end: pos };\n                 if !it(doc) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    pub fn doc_data(d: Doc) -> ~[u8] { vec::slice::<u8>(*d.data, d.start, d.end) }\n+    pub fn doc_data(d: Doc) -> ~[u8] { vec::slice::<u8>(*d.data, d.start,\n+                                                        d.end) }\n \n     pub fn with_doc_data<T>(d: Doc, f: fn(x: &[u8]) -> T) -> T {\n         f(vec::view(*d.data, d.start, d.end))\n@@ -217,8 +220,8 @@ pub mod Reader {\n                           exp_tag, r_tag);\n             }\n             if r_doc.end > self.parent.end {\n-                fail fmt!(\"invalid EBML, child extends to 0x%x, parent to 0x%x\",\n-                          r_doc.end, self.parent.end);\n+                fail fmt!(\"invalid EBML, child extends to 0x%x, \\\n+                           parent to 0x%x\", r_doc.end, self.parent.end);\n             }\n             self.pos = r_doc.end;\n             r_doc\n@@ -277,7 +280,8 @@ pub mod Reader {\n             v as int\n         }\n \n-        fn read_bool(&self) -> bool { doc_as_u8(self.next_doc(EsBool)) as bool }\n+        fn read_bool(&self) -> bool { doc_as_u8(self.next_doc(EsBool))\n+                                         as bool }\n \n         fn read_f64(&self) -> f64 { fail ~\"read_f64()\"; }\n         fn read_f32(&self) -> f32 { fail ~\"read_f32()\"; }\n@@ -557,8 +561,12 @@ pub mod Writer {\n         }\n \n         // FIXME (#2742): implement these\n-        fn emit_f64(&self, _v: f64) { fail ~\"Unimplemented: serializing an f64\"; }\n-        fn emit_f32(&self, _v: f32) { fail ~\"Unimplemented: serializing an f32\"; }\n+        fn emit_f64(&self, _v: f64) {\n+            fail ~\"Unimplemented: serializing an f64\";\n+        }\n+        fn emit_f32(&self, _v: f32) {\n+            fail ~\"Unimplemented: serializing an f32\";\n+        }\n         fn emit_float(&self, _v: float) {\n             fail ~\"Unimplemented: serializing a float\";\n         }"}]}