{"sha": "ac3c18bc17eddb62aab0abf9c7c6dea9d17dd0b1", "node_id": "C_kwDOAAsO6NoAKGFjM2MxOGJjMTdlZGRiNjJhYWIwYWJmOWM3YzZkZWE5ZDE3ZGQwYjE", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-10T14:54:31Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-10T14:54:31Z"}, "message": "Include assoc. types in trait signature help", "tree": {"sha": "918da9cc1139362160a02a7cb2cbe9f1704792dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/918da9cc1139362160a02a7cb2cbe9f1704792dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac3c18bc17eddb62aab0abf9c7c6dea9d17dd0b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3c18bc17eddb62aab0abf9c7c6dea9d17dd0b1", "html_url": "https://github.com/rust-lang/rust/commit/ac3c18bc17eddb62aab0abf9c7c6dea9d17dd0b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac3c18bc17eddb62aab0abf9c7c6dea9d17dd0b1/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92e56e0c70df8bbaa8b996a8cbfe8b73700109e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/92e56e0c70df8bbaa8b996a8cbfe8b73700109e8", "html_url": "https://github.com/rust-lang/rust/commit/92e56e0c70df8bbaa8b996a8cbfe8b73700109e8"}], "stats": {"total": 180, "additions": 176, "deletions": 4}, "files": [{"sha": "32e7c59b2a5a1d8ea74af237e048f1024cc7b04e", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 176, "deletions": 4, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/ac3c18bc17eddb62aab0abf9c7c6dea9d17dd0b1/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3c18bc17eddb62aab0abf9c7c6dea9d17dd0b1/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=ac3c18bc17eddb62aab0abf9c7c6dea9d17dd0b1", "patch": "@@ -1,8 +1,10 @@\n //! This module provides primitives for showing type and function parameter information when editing\n //! a call or use-site.\n \n+use std::collections::BTreeSet;\n+\n use either::Either;\n-use hir::{GenericParam, HasAttrs, HirDisplay, Semantics};\n+use hir::{AssocItem, GenericParam, HasAttrs, HirDisplay, Semantics, Trait};\n use ide_db::{active_parameter::callable_for_node, base_db::FilePosition};\n use stdx::format_to;\n use syntax::{\n@@ -316,11 +318,52 @@ fn signature_help_for_generics(\n         format_to!(buf, \"{}\", param.display(db));\n         res.push_generic_param(&buf);\n     }\n+    if let hir::GenericDef::Trait(tr) = generics_def {\n+        add_assoc_type_bindings(db, &mut res, tr, arg_list);\n+    }\n     res.signature.push('>');\n \n     Some(res)\n }\n \n+fn add_assoc_type_bindings(\n+    db: &RootDatabase,\n+    res: &mut SignatureHelp,\n+    tr: Trait,\n+    args: ast::GenericArgList,\n+) {\n+    if args.syntax().ancestors().find_map(ast::TypeBound::cast).is_none() {\n+        // Assoc type bindings are only valid in type bound position.\n+        return;\n+    }\n+\n+    let present_bindings = args\n+        .generic_args()\n+        .filter_map(|arg| match arg {\n+            ast::GenericArg::AssocTypeArg(arg) => arg.name_ref().map(|n| n.to_string()),\n+            _ => None,\n+        })\n+        .collect::<BTreeSet<_>>();\n+\n+    let mut buf = String::new();\n+    for binding in &present_bindings {\n+        buf.clear();\n+        format_to!(buf, \"{} = \u2026\", binding);\n+        res.push_generic_param(&buf);\n+    }\n+\n+    for item in tr.items_with_supertraits(db) {\n+        if let AssocItem::TypeAlias(ty) = item {\n+            let name = ty.name(db).to_smol_str();\n+            if !present_bindings.contains(&*name) {\n+                buf.clear();\n+                format_to!(buf, \"{} = \u2026\", name);\n+                res.push_generic_param(&buf);\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::iter;\n@@ -368,10 +411,11 @@ mod tests {\n                         panic!(\"parameter ranges out of order: {:?}\", sig_help.parameter_ranges())\n                     });\n                     rendered.extend(iter::repeat(' ').take(gap as usize));\n-                    let width = u32::from(range.end() - range.start());\n+                    let param_text = &sig_help.signature[*range];\n+                    let width = param_text.chars().count(); // \u2026\n                     let marker = if is_active { '^' } else { '-' };\n-                    rendered.extend(iter::repeat(marker).take(width as usize));\n-                    offset += gap + width;\n+                    rendered.extend(iter::repeat(marker).take(width));\n+                    offset += gap + u32::from(range.len());\n                 }\n                 if !sig_help.parameter_ranges().is_empty() {\n                     format_to!(rendered, \"\\n\");\n@@ -1124,6 +1168,134 @@ fn f() {\n         );\n     }\n \n+    #[test]\n+    fn test_trait_assoc_types() {\n+        check(\n+            r#\"\n+trait Trait<'a, T> {\n+    type Assoc;\n+}\n+fn f() -> impl Trait<(), $0\n+            \"#,\n+            expect![[r#\"\n+                trait Trait<'a, T, Assoc = \u2026>\n+                            --  -  ^^^^^^^^^\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Iterator {\n+    type Item;\n+}\n+fn f() -> impl Iterator<$0\n+            \"#,\n+            expect![[r#\"\n+                trait Iterator<Item = \u2026>\n+                               ^^^^^^^^\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Iterator {\n+    type Item;\n+}\n+fn f() -> impl Iterator<Item = $0\n+            \"#,\n+            expect![[r#\"\n+                trait Iterator<Item = \u2026>\n+                               ^^^^^^^^\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Tr {\n+    type A;\n+    type B;\n+}\n+fn f() -> impl Tr<$0\n+            \"#,\n+            expect![[r#\"\n+                trait Tr<A = \u2026, B = \u2026>\n+                         ^^^^^  -----\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Tr {\n+    type A;\n+    type B;\n+}\n+fn f() -> impl Tr<B$0\n+            \"#,\n+            expect![[r#\"\n+                trait Tr<A = \u2026, B = \u2026>\n+                         ^^^^^  -----\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Tr {\n+    type A;\n+    type B;\n+}\n+fn f() -> impl Tr<B = $0\n+            \"#,\n+            expect![[r#\"\n+                trait Tr<B = \u2026, A = \u2026>\n+                         ^^^^^  -----\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait Tr {\n+    type A;\n+    type B;\n+}\n+fn f() -> impl Tr<B = (), $0\n+            \"#,\n+            expect![[r#\"\n+                trait Tr<B = \u2026, A = \u2026>\n+                         -----  ^^^^^\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_supertrait_assoc() {\n+        check(\n+            r#\"\n+trait Super {\n+    type SuperTy;\n+}\n+trait Sub: Super + Super {\n+    type SubTy;\n+}\n+fn f() -> impl Sub<$0\n+            \"#,\n+            expect![[r#\"\n+                trait Sub<SubTy = \u2026, SuperTy = \u2026>\n+                          ^^^^^^^^^  -----------\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn no_assoc_types_outside_type_bounds() {\n+        check(\n+            r#\"\n+trait Tr<T> {\n+    type Assoc;\n+}\n+\n+impl Tr<$0\n+        \"#,\n+            expect![[r#\"\n+            trait Tr<T>\n+                     ^\n+        \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn impl_trait() {\n         // FIXME: Substitute type vars in impl trait (`U` -> `i8`)"}]}