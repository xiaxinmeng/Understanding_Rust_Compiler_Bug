{"sha": "3f66efde759e396e02e4a1cdadb3b178884e3bbc", "node_id": "C_kwDOAAsO6NoAKDNmNjZlZmRlNzU5ZTM5NmUwMmU0YTFjZGFkYjNiMTc4ODg0ZTNiYmM", "commit": {"author": {"name": "Donough Liu", "email": "liudingming@bytdance.com", "date": "2022-08-29T17:44:06Z"}, "committer": {"name": "bogon-right", "email": "bogon-right@bytedance.com", "date": "2022-08-31T03:12:46Z"}, "message": "Fix uintended diagnostic caused by `drain(..)`", "tree": {"sha": "19fc02263a61b95d31b0fee73740c1b246ad44c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19fc02263a61b95d31b0fee73740c1b246ad44c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f66efde759e396e02e4a1cdadb3b178884e3bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f66efde759e396e02e4a1cdadb3b178884e3bbc", "html_url": "https://github.com/rust-lang/rust/commit/3f66efde759e396e02e4a1cdadb3b178884e3bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f66efde759e396e02e4a1cdadb3b178884e3bbc/comments", "author": null, "committer": null, "parents": [{"sha": "f07d6e8c0a90a6b03dcf96366d0462c7c25962bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07d6e8c0a90a6b03dcf96366d0462c7c25962bd", "html_url": "https://github.com/rust-lang/rust/commit/f07d6e8c0a90a6b03dcf96366d0462c7c25962bd"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "9fc637ddbbffae4cc939405cb4702105e8f59585", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3f66efde759e396e02e4a1cdadb3b178884e3bbc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f66efde759e396e02e4a1cdadb3b178884e3bbc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=3f66efde759e396e02e4a1cdadb3b178884e3bbc", "patch": "@@ -1792,7 +1792,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 }\n             };\n \n-            let mut suggestable_variants = variants\n+            let suggestable_variants = variants\n                 .iter()\n                 .filter(|(_, def_id, kind)| !needs_placeholder(*def_id, *kind))\n                 .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n@@ -1802,8 +1802,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     CtorKind::Fictive => format!(\"({} {{}})\", variant),\n                 })\n                 .collect::<Vec<_>>();\n+            let no_suggestable_variant = suggestable_variants.is_empty();\n \n-            if !suggestable_variants.is_empty() {\n+            if !no_suggestable_variant {\n                 let msg = if suggestable_variants.len() == 1 {\n                     \"you might have meant to use the following enum variant\"\n                 } else {\n@@ -1813,7 +1814,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 err.span_suggestions(\n                     span,\n                     msg,\n-                    suggestable_variants.drain(..),\n+                    suggestable_variants.into_iter(),\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -1830,15 +1831,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 .collect::<Vec<_>>();\n \n             if !suggestable_variants_with_placeholders.is_empty() {\n-                let msg = match (\n-                    suggestable_variants.is_empty(),\n-                    suggestable_variants_with_placeholders.len(),\n-                ) {\n-                    (true, 1) => \"the following enum variant is available\",\n-                    (true, _) => \"the following enum variants are available\",\n-                    (false, 1) => \"alternatively, the following enum variant is available\",\n-                    (false, _) => \"alternatively, the following enum variants are also available\",\n-                };\n+                let msg =\n+                    match (no_suggestable_variant, suggestable_variants_with_placeholders.len()) {\n+                        (true, 1) => \"the following enum variant is available\",\n+                        (true, _) => \"the following enum variants are available\",\n+                        (false, 1) => \"alternatively, the following enum variant is available\",\n+                        (false, _) => {\n+                            \"alternatively, the following enum variants are also available\"\n+                        }\n+                    };\n \n                 err.span_suggestions(\n                     span,"}, {"sha": "5c2459a59036de4b2498813792a9bfc314b7a4e2", "filename": "src/test/ui/resolve/issue-73427.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f66efde759e396e02e4a1cdadb3b178884e3bbc/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f66efde759e396e02e4a1cdadb3b178884e3bbc/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.rs?ref=3f66efde759e396e02e4a1cdadb3b178884e3bbc", "patch": "@@ -22,6 +22,10 @@ enum D {\n     Unit,\n }\n \n+enum E {\n+    TupleWithFields(()),\n+}\n+\n fn main() {\n     // Only variants without fields are suggested (and others mentioned in a note) where an enum\n     // is used rather than a variant.\n@@ -34,6 +38,8 @@ fn main() {\n     //~^ ERROR expected value, found enum `C`\n     D.foo();\n     //~^ ERROR expected value, found enum `D`\n+    E.foo();\n+    //~^ ERROR expected value, found enum `E`\n \n     // Only tuple variants are suggested in calls or tuple struct pattern matching.\n "}, {"sha": "a2ca46f0ce964d1cdfbbc4edc4edda39432555fc", "filename": "src/test/ui/resolve/issue-73427.stderr", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3f66efde759e396e02e4a1cdadb3b178884e3bbc/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f66efde759e396e02e4a1cdadb3b178884e3bbc/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.stderr?ref=3f66efde759e396e02e4a1cdadb3b178884e3bbc", "patch": "@@ -1,5 +1,5 @@\n error[E0423]: expected value, found enum `A`\n-  --> $DIR/issue-73427.rs:29:5\n+  --> $DIR/issue-73427.rs:33:5\n    |\n LL |     A.foo();\n    |     ^\n@@ -23,15 +23,15 @@ LL |     (A::Tuple()).foo();\n    |     ~~~~~~~~~~~~\n LL |     A::Unit.foo();\n    |     ~~~~~~~\n-help: the following enum variants are available\n+help: alternatively, the following enum variants are also available\n    |\n LL |     (A::StructWithFields { /* fields */ }).foo();\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     (A::TupleWithFields(/* fields */)).foo();\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0423]: expected value, found enum `B`\n-  --> $DIR/issue-73427.rs:31:5\n+  --> $DIR/issue-73427.rs:35:5\n    |\n LL |     B.foo();\n    |     ^\n@@ -52,7 +52,7 @@ LL |     (B::TupleWithFields(/* fields */)).foo();\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0423]: expected value, found enum `C`\n-  --> $DIR/issue-73427.rs:33:5\n+  --> $DIR/issue-73427.rs:37:5\n    |\n LL |     C.foo();\n    |     ^\n@@ -70,15 +70,15 @@ help: you might have meant to use the following enum variant\n    |\n LL |     C::Unit.foo();\n    |     ~~~~~~~\n-help: the following enum variants are available\n+help: alternatively, the following enum variants are also available\n    |\n LL |     (C::StructWithFields { /* fields */ }).foo();\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     (C::TupleWithFields(/* fields */)).foo();\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0423]: expected value, found enum `D`\n-  --> $DIR/issue-73427.rs:35:5\n+  --> $DIR/issue-73427.rs:39:5\n    |\n LL |     D.foo();\n    |     ^\n@@ -95,13 +95,37 @@ help: you might have meant to use the following enum variant\n    |\n LL |     D::Unit.foo();\n    |     ~~~~~~~\n-help: the following enum variant is available\n+help: alternatively, the following enum variant is available\n    |\n LL |     (D::TupleWithFields(/* fields */)).foo();\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n+error[E0423]: expected value, found enum `E`\n+  --> $DIR/issue-73427.rs:41:5\n+   |\n+LL |     E.foo();\n+   |     ^\n+   |\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:25:1\n+   |\n+LL | / enum E {\n+LL | |     TupleWithFields(()),\n+LL | | }\n+   | |_^\n+help: the following enum variant is available\n+   |\n+LL |     (E::TupleWithFields(/* fields */)).foo();\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: consider importing one of these items instead\n+   |\n+LL | use std::f32::consts::E;\n+   |\n+LL | use std::f64::consts::E;\n+   |\n+\n error[E0423]: expected function, tuple struct or tuple variant, found enum `A`\n-  --> $DIR/issue-73427.rs:40:13\n+  --> $DIR/issue-73427.rs:46:13\n    |\n LL |     let x = A(3);\n    |             ^\n@@ -126,7 +150,7 @@ LL |     let x = A::TupleWithFields(3);\n    |             ~~~~~~~~~~~~~~~~~~\n \n error[E0532]: expected tuple struct or tuple variant, found enum `A`\n-  --> $DIR/issue-73427.rs:42:12\n+  --> $DIR/issue-73427.rs:48:12\n    |\n LL |     if let A(3) = x { }\n    |            ^\n@@ -150,7 +174,7 @@ LL |     if let A::Tuple(3) = x { }\n LL |     if let A::TupleWithFields(3) = x { }\n    |            ~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0423, E0532.\n For more information about an error, try `rustc --explain E0423`."}, {"sha": "4c51d1252613a5f4739c76bcb792986809f82286", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f66efde759e396e02e4a1cdadb3b178884e3bbc/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f66efde759e396e02e4a1cdadb3b178884e3bbc/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=3f66efde759e396e02e4a1cdadb3b178884e3bbc", "patch": "@@ -19,7 +19,7 @@ help: you might have meant to use the following enum variant\n    |\n LL |         m::Z::Unit;\n    |         ~~~~~~~~~~\n-help: the following enum variants are available\n+help: alternatively, the following enum variants are also available\n    |\n LL |         (m::Z::Fn(/* fields */));\n    |         ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -47,7 +47,7 @@ help: you might have meant to use the following enum variant\n    |\n LL |         m::Z::Unit;\n    |         ~~~~~~~~~~\n-help: the following enum variants are available\n+help: alternatively, the following enum variants are also available\n    |\n LL |         (m::Z::Fn(/* fields */));\n    |         ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -89,7 +89,7 @@ help: you might have meant to use the following enum variant\n    |\n LL |     let _: E = E::Unit;\n    |                ~~~~~~~\n-help: the following enum variants are available\n+help: alternatively, the following enum variants are also available\n    |\n LL |     let _: E = (E::Fn(/* fields */));\n    |                ~~~~~~~~~~~~~~~~~~~~~\n@@ -143,7 +143,7 @@ help: you might have meant to use the following enum variant\n    |\n LL |     let _: E = E::Unit;\n    |                ~~~~~~~\n-help: the following enum variants are available\n+help: alternatively, the following enum variants are also available\n    |\n LL |     let _: E = (E::Fn(/* fields */));\n    |                ~~~~~~~~~~~~~~~~~~~~~\n@@ -203,7 +203,7 @@ help: you might have meant to use the following enum variant\n    |\n LL |     let _: Z = m::Z::Unit;\n    |                ~~~~~~~~~~\n-help: the following enum variants are available\n+help: alternatively, the following enum variants are also available\n    |\n LL |     let _: Z = (m::Z::Fn(/* fields */));\n    |                ~~~~~~~~~~~~~~~~~~~~~~~~"}]}