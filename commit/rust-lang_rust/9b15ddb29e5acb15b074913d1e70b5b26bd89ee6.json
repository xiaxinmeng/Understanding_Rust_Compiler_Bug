{"sha": "9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMTVkZGIyOWU1YWNiMTViMDc0OTEzZDFlNzBiNWIyNmJkODllZTY=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-01-21T05:33:21Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-03-14T04:44:51Z"}, "message": "remove defaulting to unit\n\nTypes will no longer default to `()`, instead always defaulting to `!`.\nThis disables the associated warning and removes the flag from TyTuple", "tree": {"sha": "3755b4166f4e5095d105278dad6494449585b493", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3755b4166f4e5095d105278dad6494449585b493"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "html_url": "https://github.com/rust-lang/rust/commit/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab632f9759af4f3d96c6ec69e24e5428060dba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab632f9759af4f3d96c6ec69e24e5428060dba4", "html_url": "https://github.com/rust-lang/rust/commit/fab632f9759af4f3d96c6ec69e24e5428060dba4"}], "stats": {"total": 350, "additions": 107, "deletions": 243}, "files": [{"sha": "bb3051b546e64d61e0131f9fec2789417f988a64", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -886,9 +886,8 @@ for ty::TypeVariants<'gcx>\n             TyGeneratorWitness(types) => {\n                 types.hash_stable(hcx, hasher)\n             }\n-            TyTuple(inner_tys, from_diverging_type_var) => {\n+            TyTuple(inner_tys) => {\n                 inner_tys.hash_stable(hcx, hasher);\n-                from_diverging_type_var.hash_stable(hcx, hasher);\n             }\n             TyProjection(ref projection_ty) => {\n                 projection_ty.hash_stable(hcx, hasher);"}, {"sha": "77b722c5695f86803465b0586d96ec7c2360c666", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -173,12 +173,6 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for FullTypeResolver<'a, 'gcx, 'tcx>\n                 ty::TyInfer(_) => {\n                     bug!(\"Unexpected type in full type resolver: {:?}\", t);\n                 }\n-                ty::TyTuple(tys, true) => {\n-                    // Un-default defaulted tuples - we are going to a\n-                    // different infcx, and the default will just cause\n-                    // pollution.\n-                    self.tcx().intern_tup(tys, false)\n-                }\n                 _ => {\n                     t.super_fold_with(self)\n                 }"}, {"sha": "1795866e103b3786c618aa517f5584b01f7d852e", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -151,13 +151,6 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n-declare_lint! {\n-    pub RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n-    Deny,\n-    \"attempt to resolve a trait on an expression whose type cannot be inferred but which \\\n-     currently defaults to ()\"\n-}\n-\n declare_lint! {\n     pub SAFE_EXTERN_STATICS,\n     Deny,\n@@ -304,7 +297,6 @@ impl LintPass for HardwiredLints {\n             INVALID_TYPE_PARAM_DEFAULT,\n             CONST_ERR,\n             RENAMED_AND_REMOVED_LINTS,\n-            RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n             SAFE_EXTERN_STATICS,\n             SAFE_PACKED_BORROWS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,"}, {"sha": "6bf0c5d1ba3e39478389c9fa1d60b95fec599f37", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -1298,7 +1298,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           PatKind::Tuple(ref subpats, ddpos) => {\n             // (p1, ..., pN)\n             let expected_len = match self.pat_ty(&pat)?.sty {\n-                ty::TyTuple(ref tys, _) => tys.len(),\n+                ty::TyTuple(ref tys) => tys.len(),\n                 ref ty => span_bug!(pat.span, \"tuple pattern unexpected type {:?}\", ty),\n             };\n             for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {"}, {"sha": "20902d9111019bd33c50ad11b927e7101e7317f2", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 let lhs_ty = lhs.ty(local_decls, tcx);\n                 let rhs_ty = rhs.ty(local_decls, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n-                tcx.intern_tup(&[ty, tcx.types.bool], false)\n+                tcx.intern_tup(&[ty, tcx.types.bool])\n             }\n             Rvalue::UnaryOp(UnOp::Not, ref operand) |\n             Rvalue::UnaryOp(UnOp::Neg, ref operand) => {\n@@ -178,10 +178,7 @@ impl<'tcx> Rvalue<'tcx> {\n                         tcx.mk_array(ty, ops.len() as u64)\n                     }\n                     AggregateKind::Tuple => {\n-                        tcx.mk_tup(\n-                            ops.iter().map(|op| op.ty(local_decls, tcx)),\n-                            false\n-                        )\n+                        tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx)))\n                     }\n                     AggregateKind::Adt(def, _, substs, _) => {\n                         tcx.type_of(def.did).subst(tcx, substs)"}, {"sha": "5d994a0e444c60f2ebcf5ce11cbfcdc699c785db", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -729,14 +729,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }).map(|sp| self.tcx.sess.codemap().def_span(sp)); // the sp could be an fn def\n \n                 let found = match found_trait_ref.skip_binder().substs.type_at(1).sty {\n-                    ty::TyTuple(ref tys, _) => tys.iter()\n+                    ty::TyTuple(ref tys) => tys.iter()\n                         .map(|_| ArgKind::empty()).collect::<Vec<_>>(),\n                     _ => vec![ArgKind::empty()],\n                 };\n                 let expected = match expected_trait_ref.skip_binder().substs.type_at(1).sty {\n-                    ty::TyTuple(ref tys, _) => tys.iter()\n+                    ty::TyTuple(ref tys) => tys.iter()\n                         .map(|t| match t.sty {\n-                            ty::TypeVariants::TyTuple(ref tys, _) => ArgKind::Tuple(\n+                            ty::TypeVariants::TyTuple(ref tys) => ArgKind::Tuple(\n                                 Some(span),\n                                 tys.iter()\n                                     .map(|ty| (\"_\".to_owned(), format!(\"{}\", ty.sty)))\n@@ -986,7 +986,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         fn build_fn_sig_string<'a, 'gcx, 'tcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n                                                trait_ref: &ty::TraitRef<'tcx>) -> String {\n             let inputs = trait_ref.substs.type_at(1);\n-            let sig = if let ty::TyTuple(inputs, _) = inputs.sty {\n+            let sig = if let ty::TyTuple(inputs) = inputs.sty {\n                 tcx.mk_fn_sig(\n                     inputs.iter().map(|&x| x),\n                     tcx.mk_infer(ty::TyVar(ty::TyVid { index: 0 })),\n@@ -1422,7 +1422,7 @@ impl ArgKind {\n     /// argument. This has no name (`_`) and no source spans..\n     pub fn from_expected_ty(t: Ty<'_>) -> ArgKind {\n         match t.sty {\n-            ty::TyTuple(ref tys, _) => ArgKind::Tuple(\n+            ty::TyTuple(ref tys) => ArgKind::Tuple(\n                 None,\n                 tys.iter()\n                    .map(|ty| (\"_\".to_owned(), format!(\"{}\", ty.sty)))"}, {"sha": "150a2ead9e96d61f338796e357b2537edcc6aaae", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -330,11 +330,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n             if data.is_global() {\n                 // no type variables present, can use evaluation for better caching.\n                 // FIXME: consider caching errors too.\n-                if\n-                    // make defaulted unit go through the slow path for better warnings,\n-                    // please remove this when the warnings are removed.\n-                    !trait_obligation.predicate.skip_binder().self_ty().is_defaulted_unit() &&\n-                    selcx.evaluate_obligation_conservatively(&obligation) {\n+                if selcx.evaluate_obligation_conservatively(&obligation) {\n                     debug!(\"selecting trait `{:?}` at depth {} evaluated to holds\",\n                            data, obligation.recursion_depth);\n                     return Ok(Some(vec![]))"}, {"sha": "4db81cf1dec1d3827f9689f2366ee21cd2c56ce3", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 49, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -53,7 +53,6 @@ use std::mem;\n use std::rc::Rc;\n use syntax::abi::Abi;\n use hir;\n-use lint;\n use util::nodemap::{FxHashMap, FxHashSet};\n \n \n@@ -526,54 +525,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"select({:?})\", obligation);\n         assert!(!obligation.predicate.has_escaping_regions());\n \n-        let tcx = self.tcx();\n-\n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n         let ret = match self.candidate_from_obligation(&stack)? {\n             None => None,\n             Some(candidate) => Some(self.confirm_candidate(obligation, candidate)?)\n         };\n \n-        // Test whether this is a `()` which was produced by defaulting a\n-        // diverging type variable with `!` disabled. If so, we may need\n-        // to raise a warning.\n-        if obligation.predicate.skip_binder().self_ty().is_defaulted_unit() {\n-            let mut raise_warning = true;\n-            // Don't raise a warning if the trait is implemented for ! and only\n-            // permits a trivial implementation for !. This stops us warning\n-            // about (for example) `(): Clone` becoming `!: Clone` because such\n-            // a switch can't cause code to stop compiling or execute\n-            // differently.\n-            let mut never_obligation = obligation.clone();\n-            let def_id = never_obligation.predicate.skip_binder().trait_ref.def_id;\n-            never_obligation.predicate = never_obligation.predicate.map_bound(|mut trait_pred| {\n-                // Swap out () with ! so we can check if the trait is impld for !\n-                {\n-                    let trait_ref = &mut trait_pred.trait_ref;\n-                    let unit_substs = trait_ref.substs;\n-                    let mut never_substs = Vec::with_capacity(unit_substs.len());\n-                    never_substs.push(tcx.types.never.into());\n-                    never_substs.extend(&unit_substs[1..]);\n-                    trait_ref.substs = tcx.intern_substs(&never_substs);\n-                }\n-                trait_pred\n-            });\n-            if let Ok(Some(..)) = self.select(&never_obligation) {\n-                if !tcx.trait_relevant_for_never(def_id) {\n-                    // The trait is also implemented for ! and the resulting\n-                    // implementation cannot actually be invoked in any way.\n-                    raise_warning = false;\n-                }\n-            }\n-\n-            if raise_warning {\n-                tcx.lint_node(lint::builtin::RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n-                              obligation.cause.body_id,\n-                              obligation.cause.span,\n-                              &format!(\"code relies on type inference rules which are likely \\\n-                                        to change\"));\n-            }\n-        }\n         Ok(ret)\n     }\n \n@@ -1929,7 +1886,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             // (.., T) -> (.., U).\n-            (&ty::TyTuple(tys_a, _), &ty::TyTuple(tys_b, _)) => {\n+            (&ty::TyTuple(tys_a), &ty::TyTuple(tys_b)) => {\n                 tys_a.len() == tys_b.len()\n             }\n \n@@ -2068,7 +2025,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n             ty::TyStr | ty::TySlice(_) | ty::TyDynamic(..) | ty::TyForeign(..) => Never,\n \n-            ty::TyTuple(tys, _) => {\n+            ty::TyTuple(tys) => {\n                 Where(ty::Binder(tys.last().into_iter().cloned().collect()))\n             }\n \n@@ -2122,7 +2079,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(vec![element_ty]))\n             }\n \n-            ty::TyTuple(tys, _) => {\n+            ty::TyTuple(tys) => {\n                 // (*) binder moved here\n                 Where(ty::Binder(tys.to_vec()))\n             }\n@@ -2215,7 +2172,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 vec![element_ty]\n             }\n \n-            ty::TyTuple(ref tys, _) => {\n+            ty::TyTuple(ref tys) => {\n                 // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet\n                 tys.to_vec()\n             }\n@@ -3004,7 +2961,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             // (.., T) -> (.., U).\n-            (&ty::TyTuple(tys_a, _), &ty::TyTuple(tys_b, _)) => {\n+            (&ty::TyTuple(tys_a), &ty::TyTuple(tys_b)) => {\n                 assert_eq!(tys_a.len(), tys_b.len());\n \n                 // The last field of the tuple has to exist.\n@@ -3017,7 +2974,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n                 // Check that the source tuple with the target's\n                 // last element is equal to the target.\n-                let new_tuple = tcx.mk_tup(a_mid.iter().chain(Some(b_last)), false);\n+                let new_tuple = tcx.mk_tup(a_mid.iter().chain(Some(b_last)));\n                 let InferOk { obligations, .. } =\n                     self.infcx.at(&obligation.cause, obligation.param_env)\n                               .eq(target, new_tuple)"}, {"sha": "8f7a24057472c1c2d65b48b4a52e13b366a393e6", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let arguments_tuple = match tuple_arguments {\n             TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n             TupleArgumentsFlag::Yes =>\n-                self.intern_tup(sig.skip_binder().inputs(), false),\n+                self.intern_tup(sig.skip_binder().inputs()),\n         };\n         let trait_ref = ty::TraitRef {\n             def_id: fn_trait_def_id,"}, {"sha": "fd3465f59ebf2c79661fc694f21dde7dff3f9072", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -2014,7 +2014,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn coerce_closure_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {\n         let converted_sig = sig.map_bound(|s| {\n             let params_iter = match s.inputs()[0].sty {\n-                ty::TyTuple(params, _) => {\n+                ty::TyTuple(params) => {\n                     params.into_iter().cloned()\n                 }\n                 _ => bug!(),\n@@ -2134,25 +2134,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TySlice(ty))\n     }\n \n-    pub fn intern_tup(self, ts: &[Ty<'tcx>], defaulted: bool) -> Ty<'tcx> {\n-        self.mk_ty(TyTuple(self.intern_type_list(ts), defaulted))\n+    pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n+        self.mk_ty(TyTuple(self.intern_type_list(ts)))\n     }\n \n-    pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I,\n-                                                     defaulted: bool) -> I::Output {\n-        iter.intern_with(|ts| self.mk_ty(TyTuple(self.intern_type_list(ts), defaulted)))\n+    pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {\n+        iter.intern_with(|ts| self.mk_ty(TyTuple(self.intern_type_list(ts))))\n     }\n \n     pub fn mk_nil(self) -> Ty<'tcx> {\n-        self.intern_tup(&[], false)\n-    }\n-\n-    pub fn mk_diverging_default(self) -> Ty<'tcx> {\n-        if self.features().never_type {\n-            self.types.never\n-        } else {\n-            self.intern_tup(&[], true)\n-        }\n+        self.intern_tup(&[])\n     }\n \n     pub fn mk_bool(self) -> Ty<'tcx> {"}, {"sha": "eb3924186472c57d9364ca1b551db96f7026bf87", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -177,7 +177,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n         match self.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr | ty::TyNever => self.to_string(),\n-            ty::TyTuple(ref tys, _) if tys.is_empty() => self.to_string(),\n+            ty::TyTuple(ref tys) if tys.is_empty() => self.to_string(),\n \n             ty::TyAdt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n             ty::TyForeign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)),"}, {"sha": "6533a7440ac384a86ec3614da8f79f59773c511d", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -97,7 +97,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len()))\n         }\n         ty::TyNever => Some(NeverSimplifiedType),\n-        ty::TyTuple(ref tys, _) => {\n+        ty::TyTuple(ref tys) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }\n         ty::TyFnPtr(ref f) => {"}, {"sha": "086fc66c70f9d27e85bef68f93c77bade8f3231e", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -179,10 +179,7 @@ impl FlagComputation {\n                 self.add_ty(m.ty);\n             }\n \n-            &ty::TyTuple(ref ts, is_default) => {\n-                if is_default {\n-                    self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX);\n-                }\n+            &ty::TyTuple(ref ts) => {\n                 self.add_tys(&ts[..]);\n             }\n "}, {"sha": "325f8575fd0a792b922546a9277cc3d737fdb4c2", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             },\n \n             TyNever => DefIdForest::full(tcx),\n-            TyTuple(ref tys, _) => {\n+            TyTuple(ref tys) => {\n                 DefIdForest::union(tcx, tys.iter().map(|ty| {\n                     ty.uninhabited_from(visited, tcx)\n                 }))"}, {"sha": "1f23b0a27e33de547d85402b0bf9301317978ce1", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -355,9 +355,9 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::TyRawPtr(mt) |\n         ty::TyRef(_, mt) => characteristic_def_id_of_type(mt.ty),\n \n-        ty::TyTuple(ref tys, _) => tys.iter()\n-                                      .filter_map(|ty| characteristic_def_id_of_type(ty))\n-                                      .next(),\n+        ty::TyTuple(ref tys) => tys.iter()\n+                                   .filter_map(|ty| characteristic_def_id_of_type(ty))\n+                                   .next(),\n \n         ty::TyFnDef(def_id, _) |\n         ty::TyClosure(def_id, _) |"}, {"sha": "3a3f10cb87db4c6d5d74b56423fecf919079ff5e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -1318,7 +1318,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     StructKind::AlwaysSized)?\n             }\n \n-            ty::TyTuple(tys, _) => {\n+            ty::TyTuple(tys) => {\n                 let kind = if tys.len() == 0 {\n                     StructKind::AlwaysSized\n                 } else {\n@@ -2243,7 +2243,7 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n                 substs.field_tys(def_id, tcx).nth(i).unwrap()\n             }\n \n-            ty::TyTuple(tys, _) => tys[i],\n+            ty::TyTuple(tys) => tys[i],\n \n             // SIMD vector types.\n             ty::TyAdt(def, ..) if def.repr.simd() => {"}, {"sha": "09b11a36352e123a50ae532b68851df03dd8d2e2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -2046,7 +2046,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 vec![ty]\n             }\n \n-            TyTuple(ref tys, _) => {\n+            TyTuple(ref tys) => {\n                 match tys.last() {\n                     None => vec![],\n                     Some(ty) => self.sized_constraint_for_ty(tcx, ty)"}, {"sha": "36eb3e3f94cfa0c529750b954c27d160bd310f8a", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -529,11 +529,10 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.mk_slice(t))\n         }\n \n-        (&ty::TyTuple(as_, a_defaulted), &ty::TyTuple(bs, b_defaulted)) =>\n+        (&ty::TyTuple(as_), &ty::TyTuple(bs)) =>\n         {\n             if as_.len() == bs.len() {\n-                let defaulted = a_defaulted || b_defaulted;\n-                Ok(tcx.mk_tup(as_.iter().zip(bs).map(|(a, b)| relation.relate(a, b)), defaulted)?)\n+                Ok(tcx.mk_tup(as_.iter().zip(bs).map(|(a, b)| relation.relate(a, b)))?)\n             } else if !(as_.is_empty() || bs.is_empty()) {\n                 Err(TypeError::TupleSize(\n                     expected_found(relation, &as_.len(), &bs.len())))"}, {"sha": "c9a69d5405c9a4e716ea0bcf159d777ff2cafa88", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -869,7 +869,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAdt(tid, substs) => ty::TyAdt(tid, substs.fold_with(folder)),\n             ty::TyDynamic(ref trait_ty, ref region) =>\n                 ty::TyDynamic(trait_ty.fold_with(folder), region.fold_with(folder)),\n-            ty::TyTuple(ts, defaulted) => ty::TyTuple(ts.fold_with(folder), defaulted),\n+            ty::TyTuple(ts) => ty::TyTuple(ts.fold_with(folder)),\n             ty::TyFnDef(def_id, substs) => {\n                 ty::TyFnDef(def_id, substs.fold_with(folder))\n             }\n@@ -908,7 +908,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAdt(_, substs) => substs.visit_with(visitor),\n             ty::TyDynamic(ref trait_ty, ref reg) =>\n                 trait_ty.visit_with(visitor) || reg.visit_with(visitor),\n-            ty::TyTuple(ts, _) => ts.visit_with(visitor),\n+            ty::TyTuple(ts) => ts.visit_with(visitor),\n             ty::TyFnDef(_, substs) => substs.visit_with(visitor),\n             ty::TyFnPtr(ref f) => f.visit_with(visitor),\n             ty::TyRef(r, ref tm) => r.visit_with(visitor) || tm.visit_with(visitor),"}, {"sha": "ae053d7f4f58db96dbe39d02edb1d0b729268b69", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -148,11 +148,7 @@ pub enum TypeVariants<'tcx> {\n     TyNever,\n \n     /// A tuple type.  For example, `(i32, bool)`.\n-    /// The bool indicates whether this is a unit tuple and was created by\n-    /// defaulting a diverging type variable with feature(never_type) disabled.\n-    /// It's only purpose is for raising future-compatibility warnings for when\n-    /// diverging type variables start defaulting to ! instead of ().\n-    TyTuple(&'tcx Slice<Ty<'tcx>>, bool),\n+    TyTuple(&'tcx Slice<Ty<'tcx>>),\n \n     /// The projection of an associated type.  For example,\n     /// `<T as Trait<..>>::N`.\n@@ -1274,7 +1270,7 @@ impl RegionKind {\n impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_nil(&self) -> bool {\n         match self.sty {\n-            TyTuple(ref tys, _) => tys.is_empty(),\n+            TyTuple(ref tys) => tys.is_empty(),\n             _ => false,\n         }\n     }\n@@ -1286,15 +1282,6 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Test whether this is a `()` which was produced by defaulting a\n-    /// diverging type variable with feature(never_type) disabled.\n-    pub fn is_defaulted_unit(&self) -> bool {\n-        match self.sty {\n-            TyTuple(_, true) => true,\n-            _ => false,\n-        }\n-    }\n-\n     pub fn is_primitive(&self) -> bool {\n         match self.sty {\n             TyBool | TyChar | TyInt(_) | TyUint(_) | TyFloat(_) => true,"}, {"sha": "91d460a96f785725eea068e89dce00f6bbbe1567", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // Don't use `non_enum_variant`, this may be a univariant enum.\n                 adt.variants[0].fields.get(i).map(|f| f.ty(self, substs))\n             }\n-            (&TyTuple(ref v, _), None) => v.get(i).cloned(),\n+            (&TyTuple(ref v), None) => v.get(i).cloned(),\n             _ => None,\n         }\n     }\n@@ -307,7 +307,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n \n-                ty::TyTuple(tys, _) => {\n+                ty::TyTuple(tys) => {\n                     if let Some((&last_ty, _)) = tys.split_last() {\n                         ty = last_ty;\n                     } else {\n@@ -344,7 +344,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         break;\n                     }\n                 },\n-                (&TyTuple(a_tys, _), &TyTuple(b_tys, _))\n+                (&TyTuple(a_tys), &TyTuple(b_tys))\n                         if a_tys.len() == b_tys.len() => {\n                     if let Some(a_last) = a_tys.last() {\n                         a = a_last;\n@@ -709,9 +709,8 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             TyGeneratorWitness(tys) => {\n                 self.hash(tys.skip_binder().len());\n             }\n-            TyTuple(tys, defaulted) => {\n+            TyTuple(tys) => {\n                 self.hash(tys.len());\n-                self.hash(defaulted);\n             }\n             TyParam(p) => {\n                 self.hash(p.idx);\n@@ -838,7 +837,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             -> Representability\n         {\n             match ty.sty {\n-                TyTuple(ref ts, _) => {\n+                TyTuple(ref ts) => {\n                     // Find non representable\n                     fold_repr(ts.iter().map(|ty| {\n                         is_type_structurally_recursive(tcx, sp, seen, representable_cache, ty)\n@@ -1106,7 +1105,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // state transformation pass\n         ty::TyGenerator(..) => true,\n \n-        ty::TyTuple(ref tys, _) => tys.iter().cloned().any(needs_drop),\n+        ty::TyTuple(ref tys) => tys.iter().cloned().any(needs_drop),\n \n         // unions don't have destructors regardless of the child types\n         ty::TyAdt(def, _) if def.is_union() => false,"}, {"sha": "46c048e839b4b9e422942b387f1e2f3e8169f4aa", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -125,7 +125,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::TyGeneratorWitness(ts) => {\n             stack.extend(ts.skip_binder().iter().cloned().rev());\n         }\n-        ty::TyTuple(ts, _) => {\n+        ty::TyTuple(ts) => {\n             stack.extend(ts.iter().cloned().rev());\n         }\n         ty::TyFnDef(_, substs) => {"}, {"sha": "f05d56c9d8371657ccb05c6d1b76cd422f425b6c", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -275,7 +275,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     self.compute_const(len);\n                 }\n \n-                ty::TyTuple(ref tys, _) => {\n+                ty::TyTuple(ref tys) => {\n                     if let Some((_last, rest)) = tys.split_last() {\n                         for elem in rest {\n                             self.require_sized(elem, traits::TupleElem);"}, {"sha": "2c3ee1ec285a9bd5d8f5b0cf80e6085ef5caa2db", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -340,7 +340,7 @@ impl PrintContext {\n \n         if !verbose && fn_trait_kind.is_some() && projections.len() == 1 {\n             let projection_ty = projections[0].ty;\n-            if let TyTuple(ref args, _) = substs.type_at(1).sty {\n+            if let TyTuple(ref args) = substs.type_at(1).sty {\n                 return self.fn_sig(f, args, false, projection_ty);\n             }\n         }\n@@ -1013,7 +1013,7 @@ define_print! {\n                     tm.print(f, cx)\n                 }\n                 TyNever => write!(f, \"!\"),\n-                TyTuple(ref tys, _) => {\n+                TyTuple(ref tys) => {\n                     write!(f, \"(\")?;\n                     let mut tys = tys.iter();\n                     if let Some(&ty) = tys.next() {"}, {"sha": "f7cd1c99a79dd10b7346087720919580bf66d116", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -287,7 +287,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_pair(&self, ty1: Ty<'tcx>, ty2: Ty<'tcx>) -> Ty<'tcx> {\n-        self.infcx.tcx.intern_tup(&[ty1, ty2], false)\n+        self.infcx.tcx.intern_tup(&[ty1, ty2])\n     }\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n@@ -593,8 +593,8 @@ fn walk_ty() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let usize_ty = tcx.types.usize;\n-        let tup1_ty = tcx.intern_tup(&[int_ty, usize_ty, int_ty, usize_ty], false);\n-        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, usize_ty], false);\n+        let tup1_ty = tcx.intern_tup(&[int_ty, usize_ty, int_ty, usize_ty]);\n+        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, usize_ty]);\n         let walked: Vec<_> = tup2_ty.walk().collect();\n         assert_eq!(walked,\n                    [tup2_ty, tup1_ty, int_ty, usize_ty, int_ty, usize_ty, tup1_ty, int_ty,\n@@ -608,8 +608,8 @@ fn walk_ty_skip_subtree() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let usize_ty = tcx.types.usize;\n-        let tup1_ty = tcx.intern_tup(&[int_ty, usize_ty, int_ty, usize_ty], false);\n-        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, usize_ty], false);\n+        let tup1_ty = tcx.intern_tup(&[int_ty, usize_ty, int_ty, usize_ty]);\n+        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, usize_ty]);\n \n         // types we expect to see (in order), plus a boolean saying\n         // whether to skip the subtree."}, {"sha": "235d733b253a23e7355ea529aab8e17a9884bd1c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -234,11 +234,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n             epoch: None,\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(RESOLVE_TRAIT_ON_DEFAULTED_UNIT),\n-            reference: \"issue #39216 <https://github.com/rust-lang/rust/issues/39216>\",\n-            epoch: None,\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\","}, {"sha": "d777f6f19b0ffd8ca7af3aa916ec0f13780533a5", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n \n         let t = cx.tables.expr_ty(&expr);\n         let ty_warned = match t.sty {\n-            ty::TyTuple(ref tys, _) if tys.is_empty() => return,\n+            ty::TyTuple(ref tys) if tys.is_empty() => return,\n             ty::TyNever => return,\n             ty::TyAdt(def, _) => {\n                 if def.variants.is_empty() {"}, {"sha": "56371d809b26abbd07b09c02c5d7cba64cf056fd", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -789,7 +789,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 } else {\n                     format!(\"{}\", def.non_enum_variant().fields[field.index()].name)\n                 },\n-                ty::TyTuple(_, _) => format!(\"{}\", field.index()),\n+                ty::TyTuple(_) => format!(\"{}\", field.index()),\n                 ty::TyRef(_, tnm) | ty::TyRawPtr(tnm) => {\n                     self.describe_field_from_ty(&tnm.ty, field)\n                 }"}, {"sha": "022831b5a9259db2286d7cfc672d43b8e8b7f61a", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -542,7 +542,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                         }),\n                     };\n                 }\n-                ty::TyTuple(tys, _) => {\n+                ty::TyTuple(tys) => {\n                     return match tys.get(field.index()) {\n                         Some(&ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {"}, {"sha": "afd338581392d8c6f8761df754acba455097b9c1", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -635,7 +635,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                         let (&output, tuplized_inputs) = inputs_and_output.split_last().unwrap();\n                         assert_eq!(tuplized_inputs.len(), 1, \"multiple closure inputs\");\n                         let inputs = match tuplized_inputs[0].sty {\n-                            ty::TyTuple(inputs, _) => inputs,\n+                            ty::TyTuple(inputs) => inputs,\n                             _ => bug!(\"closure inputs not a tuple: {:?}\", tuplized_inputs[0]),\n                         };\n "}, {"sha": "b7f402f61a9c1d5ac8f56a6bd4ab927168f13c31", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -298,7 +298,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n         let bool_ty = self.hir.bool_ty();\n         if self.hir.check_overflow() && op.is_checkable() && ty.is_integral() {\n-            let result_tup = self.hir.tcx().intern_tup(&[ty, bool_ty], false);\n+            let result_tup = self.hir.tcx().intern_tup(&[ty, bool_ty]);\n             let result_value = self.temp(result_tup, span);\n \n             self.cfg.push_assign(block, source_info,"}, {"sha": "62d1b43d625706a3cc262f4fbd5437f3b8e19c26", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -227,7 +227,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n                 let arg_tys = args.iter().map(|e| cx.tables().expr_ty_adjusted(e));\n                 let tupled_args = Expr {\n-                    ty: cx.tcx.mk_tup(arg_tys, false),\n+                    ty: cx.tcx.mk_tup(arg_tys),\n                     temp_lifetime,\n                     span: expr.span,\n                     kind: ExprKind::Tuple { fields: args.iter().map(ToRef::to_ref).collect() },"}, {"sha": "58aa9b06c642583f044efa7f98ee9059e28f585f", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -877,7 +877,7 @@ fn pat_constructors<'tcx>(_cx: &mut MatchCheckCtxt,\n fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> u64 {\n     debug!(\"constructor_arity({:#?}, {:?})\", ctor, ty);\n     match ty.sty {\n-        ty::TyTuple(ref fs, _) => fs.len() as u64,\n+        ty::TyTuple(ref fs) => fs.len() as u64,\n         ty::TySlice(..) | ty::TyArray(..) => match *ctor {\n             Slice(length) => length,\n             ConstantValue(_) => 0,\n@@ -901,7 +901,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n {\n     debug!(\"constructor_sub_pattern_tys({:#?}, {:?})\", ctor, ty);\n     match ty.sty {\n-        ty::TyTuple(ref fs, _) => fs.into_iter().map(|t| *t).collect(),\n+        ty::TyTuple(ref fs) => fs.into_iter().map(|t| *t).collect(),\n         ty::TySlice(ty) | ty::TyArray(ty, _) => match *ctor {\n             Slice(length) => (0..length).map(|_| ty).collect(),\n             ConstantValue(_) => vec![],"}, {"sha": "eb87d5b044b4569feb6a5bbfefea6044e2f963dc", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             PatKind::Tuple(ref subpatterns, ddpos) => {\n                 let ty = self.tables.node_id_to_type(pat.hir_id);\n                 match ty.sty {\n-                    ty::TyTuple(ref tys, _) => {\n+                    ty::TyTuple(ref tys) => {\n                         let subpatterns =\n                             subpatterns.iter()\n                                        .enumerate_and_adjust(tys.len(), ddpos)\n@@ -879,7 +879,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     subpatterns: adt_subpatterns(struct_var.fields.len(), None),\n                 }\n             }\n-            ty::TyTuple(fields, _) => {\n+            ty::TyTuple(fields) => {\n                 PatternKind::Leaf {\n                     subpatterns: adt_subpatterns(fields.len(), None),\n                 }"}, {"sha": "851fac532e366d9f726727a04c2269c10d88dd46", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     // Second argument must be a tuple matching the argument list of sig\n                     let snd_ty = real_sig.inputs_and_output[1];\n                     match snd_ty.sty {\n-                        ty::TyTuple(tys, _) if sig.inputs().len() == tys.len() =>\n+                        ty::TyTuple(tys) if sig.inputs().len() == tys.len() =>\n                             if sig.inputs().iter().zip(tys).all(|(ty, real_ty)| check_ty_compat(ty, real_ty)) {\n                                 return Ok(true)\n                             },"}, {"sha": "c2f4359c0082b005d1eaff0b3b71ee448b1fd169", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -281,7 +281,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 self.push_def_path(adt_def.did, output);\n                 self.push_type_params(substs, iter::empty(), output);\n             },\n-            ty::TyTuple(component_types, _) => {\n+            ty::TyTuple(component_types) => {\n                 output.push('(');\n                 for &component_type in component_types {\n                     self.push_type_name(component_type, output);"}, {"sha": "6a0f42c6dbb6659ca9bcf3d1f01a6a0e4eb958a6", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -312,7 +312,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 substs.upvar_tys(def_id, tcx)\n             )\n         }\n-        ty::TyTuple(tys, _) => builder.tuple_like_shim(dest, src, tys.iter().cloned()),\n+        ty::TyTuple(tys) => builder.tuple_like_shim(dest, src, tys.iter().cloned()),\n         _ => {\n             bug!(\"clone shim for `{:?}` which is not `Copy` and is not an aggregate\", self_ty)\n         }"}, {"sha": "2dd805ccf9b59696a9067101886c9b95a4a2eb9e", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -599,7 +599,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             assert!(args.next().is_none());\n \n             let tuple = Place::Local(tuple);\n-            let tuple_tys = if let ty::TyTuple(s, _) = tuple.ty(caller_mir, tcx).to_ty(tcx).sty {\n+            let tuple_tys = if let ty::TyTuple(s) = tuple.ty(caller_mir, tcx).to_ty(tcx).sty {\n                 s\n             } else {\n                 bug!(\"Closure arguments are not passed as a tuple\");"}, {"sha": "e95126c8a1a0f555daf24fe575bf0f6743b14db7", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -788,7 +788,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n-            ty::TyTuple(tys, _) => {\n+            ty::TyTuple(tys) => {\n                 self.open_drop_for_tuple(tys)\n             }\n             ty::TyAdt(def, _) if def.is_box() => {"}, {"sha": "4a98fff6af76dab76d4cc501db790524cdcf547f", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -722,7 +722,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n             assert!(!sig.variadic && extra_args.is_empty());\n \n             match sig.inputs().last().unwrap().sty {\n-                ty::TyTuple(ref tupled_arguments, _) => {\n+                ty::TyTuple(ref tupled_arguments) => {\n                     inputs = &sig.inputs()[0..sig.inputs().len() - 1];\n                     tupled_arguments\n                 }"}, {"sha": "f3d95cf794babc101891650882d441cafbea29b5", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -362,7 +362,7 @@ fn subroutine_type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     // return type\n     signature_metadata.push(match signature.output().sty {\n-        ty::TyTuple(ref tys, _) if tys.is_empty() => ptr::null_mut(),\n+        ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n         _ => type_metadata(cx, signature.output(), span)\n     });\n \n@@ -533,7 +533,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::TyFloat(_) => {\n             MetadataCreationResult::new(basic_type_metadata(cx, t), false)\n         }\n-        ty::TyTuple(ref elements, _) if elements.is_empty() => {\n+        ty::TyTuple(ref elements) if elements.is_empty() => {\n             MetadataCreationResult::new(basic_type_metadata(cx, t), false)\n         }\n         ty::TyArray(typ, _) |\n@@ -621,7 +621,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                     usage_site_span).finalize(cx)\n             }\n         },\n-        ty::TyTuple(ref elements, _) => {\n+        ty::TyTuple(ref elements) => {\n             prepare_tuple_metadata(cx,\n                                    t,\n                                    &elements[..],\n@@ -731,7 +731,7 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     let (name, encoding) = match t.sty {\n         ty::TyNever => (\"!\", DW_ATE_unsigned),\n-        ty::TyTuple(ref elements, _) if elements.is_empty() =>\n+        ty::TyTuple(ref elements) if elements.is_empty() =>\n             (\"()\", DW_ATE_unsigned),\n         ty::TyBool => (\"bool\", DW_ATE_boolean),\n         ty::TyChar => (\"char\", DW_ATE_unsigned_char),"}, {"sha": "7664c88679e0e2db53e96489e24e467617bed0c3", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -312,7 +312,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n         // Return type -- llvm::DIBuilder wants this at index 0\n         signature.push(match sig.output().sty {\n-            ty::TyTuple(ref tys, _) if tys.is_empty() => ptr::null_mut(),\n+            ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n             _ => type_metadata(cx, sig.output(), syntax_pos::DUMMY_SP)\n         });\n \n@@ -351,7 +351,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n \n         if sig.abi == Abi::RustCall && !sig.inputs().is_empty() {\n-            if let ty::TyTuple(args, _) = sig.inputs()[sig.inputs().len() - 1].sty {\n+            if let ty::TyTuple(args) = sig.inputs()[sig.inputs().len() - 1].sty {\n                 for &argument_type in args {\n                     signature.push(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP));\n                 }"}, {"sha": "96ed4e884711583b529345d696b577d135b31588", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -53,7 +53,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             push_item_name(cx, def.did, qualified, output);\n             push_type_params(cx, substs, output);\n         },\n-        ty::TyTuple(component_types, _) => {\n+        ty::TyTuple(component_types) => {\n             output.push('(');\n             for &component_type in component_types {\n                 push_debuginfo_type_name(cx, component_type, true, output);"}, {"sha": "93bc89f0914f57af49db44949639a3ea9fe77c29", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -710,7 +710,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n             let layout = cx.layout_of(cx.tcx.intern_tup(&[\n                 cx.tcx.mk_mut_ptr(cx.tcx.types.u8),\n                 cx.tcx.types.i32\n-            ], false));\n+            ]));\n             let slot = PlaceRef::alloca(bx, layout, \"personalityslot\");\n             self.personality_slot = Some(slot);\n             slot"}, {"sha": "11dabbeae7430145be4d82e249cf30f880ccd243", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -448,7 +448,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n \n             let arg_ty = fx.monomorphize(&arg_decl.ty);\n             let tupled_arg_tys = match arg_ty.sty {\n-                ty::TyTuple(ref tys, _) => tys,\n+                ty::TyTuple(ref tys) => tys,\n                 _ => bug!(\"spread argument isn't a tuple?!\")\n             };\n "}, {"sha": "93702bfbbf3b1a00bb292c8cf9c7c0bd96ea3b17", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                                                              lhs.immediate(), rhs.immediate(),\n                                                              lhs.layout.ty);\n                 let val_ty = op.ty(bx.tcx(), lhs.layout.ty, rhs.layout.ty);\n-                let operand_ty = bx.tcx().intern_tup(&[val_ty, bx.tcx().types.bool], false);\n+                let operand_ty = bx.tcx().intern_tup(&[val_ty, bx.tcx().types.bool]);\n                 let operand = OperandRef {\n                     val: result,\n                     layout: bx.cx.layout_of(operand_ty)"}, {"sha": "827ca79334cbe53b94533fe14cbf933883846dca", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -1050,7 +1050,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 tcx.types.never\n             },\n             hir::TyTup(ref fields) => {\n-                tcx.mk_tup(fields.iter().map(|t| self.ast_ty_to_ty(&t)), false)\n+                tcx.mk_tup(fields.iter().map(|t| self.ast_ty_to_ty(&t)))\n             }\n             hir::TyBareFn(ref bf) => {\n                 require_c_abi_if_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);"}, {"sha": "379fd93ba2bd6ebb31bb8ab2ab46c971a21e4a6a", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -319,7 +319,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let mut expected_len = elements.len();\n                 if ddpos.is_some() {\n                     // Require known type only when `..` is present\n-                    if let ty::TyTuple(ref tys, _) =\n+                    if let ty::TyTuple(ref tys) =\n                             self.structurally_resolved_type(pat.span, expected).sty {\n                         expected_len = tys.len();\n                     }\n@@ -332,7 +332,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::UniverseIndex::ROOT,\n                     TypeVariableOrigin::TypeInference(pat.span)));\n                 let element_tys = tcx.mk_type_list(element_tys_iter);\n-                let pat_ty = tcx.mk_ty(ty::TyTuple(element_tys, false));\n+                let pat_ty = tcx.mk_ty(ty::TyTuple(element_tys));\n                 self.demand_eqtype(pat.span, expected, pat_ty);\n                 for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n                     self.check_pat_walk(elem, &element_tys[i], def_bm, true);"}, {"sha": "c2c113f2da9fa3de457f62cabc051917613f6472", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-            ty::TyTuple(fields, _) => match fields.last() {\n+            ty::TyTuple(fields) => match fields.last() {\n                 None => Some(PointerKind::Thin),\n                 Some(f) => self.pointer_kind(f, span)?\n             },"}, {"sha": "562c0cb1b8d0eab7fa724e2c2ad5acdbe7cc6230", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -140,7 +140,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // the `closures` table.\n         let sig = bound_sig.map_bound(|sig| {\n             self.tcx.mk_fn_sig(\n-                iter::once(self.tcx.intern_tup(sig.inputs(), false)),\n+                iter::once(self.tcx.intern_tup(sig.inputs())),\n                 sig.output(),\n                 sig.variadic,\n                 sig.unsafety,\n@@ -312,7 +312,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         );\n \n         let input_tys = match arg_param_ty.sty {\n-            ty::TyTuple(tys, _) => tys.into_iter(),\n+            ty::TyTuple(tys) => tys.into_iter(),\n             _ => {\n                 return None;\n             }"}, {"sha": "59cf8a0358efac01de1b1d6c50f67a41d521543a", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -87,7 +87,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"cxchg\" | \"cxchgweak\" => (1, vec![tcx.mk_mut_ptr(param(0)),\n                                               param(0),\n                                               param(0)],\n-                                      tcx.intern_tup(&[param(0), tcx.types.bool], false)),\n+                                      tcx.intern_tup(&[param(0), tcx.types.bool])),\n             \"load\" => (1, vec![tcx.mk_imm_ptr(param(0))],\n                        param(0)),\n             \"store\" => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)],\n@@ -281,7 +281,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>\n                 (1, vec![param(0), param(0)],\n-                tcx.intern_tup(&[param(0), tcx.types.bool], false)),\n+                tcx.intern_tup(&[param(0), tcx.types.bool])),\n \n             \"unchecked_div\" | \"unchecked_rem\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n@@ -441,7 +441,7 @@ fn match_intrinsic_type_to_type<'a, 'tcx>(\n \n     match *expected {\n         Void => match t.sty {\n-            ty::TyTuple(ref v, _) if v.is_empty() => {},\n+            ty::TyTuple(ref v) if v.is_empty() => {},\n             _ => simple_error(&format!(\"`{}`\", t), \"()\"),\n         },\n         // (The width we pass to LLVM doesn't concern the type checker.)\n@@ -515,7 +515,7 @@ fn match_intrinsic_type_to_type<'a, 'tcx>(\n         }\n         Aggregate(_flatten, ref expected_contents) => {\n             match t.sty {\n-                ty::TyTuple(contents, _) => {\n+                ty::TyTuple(contents) => {\n                     if contents.len() != expected_contents.len() {\n                         simple_error(&format!(\"tuple with length {}\", contents.len()),\n                                      &format!(\"tuple with length {}\", expected_contents.len()));"}, {"sha": "ec6383bf9a52aac56bc9e34adba536b27fb52c8e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -2160,8 +2160,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     // Tries to apply a fallback to `ty` if it is an unsolved variable.\n-    // Non-numerics get replaced with ! or () (depending on whether\n-    // feature(never_type) is enabled), unconstrained ints with i32,\n+    // Non-numerics get replaced with !, unconstrained ints with i32,\n     // unconstrained floats with f64.\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to TyError.\n@@ -2174,7 +2173,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ if self.is_tainted_by_errors() => self.tcx().types.err,\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n-            Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n+            Neither if self.type_var_diverges(ty) => self.tcx.types.never,\n             Neither => return\n         };\n         debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);\n@@ -2438,7 +2437,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             let err_inputs = match tuple_arguments {\n                 DontTupleArguments => err_inputs,\n-                TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..], false)],\n+                TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..])],\n             };\n \n             self.check_argument_types(sp, expr_sp, &err_inputs[..], &[], args_no_rcvr,\n@@ -2531,16 +2530,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let formal_tys = if tuple_arguments == TupleArguments {\n             let tuple_type = self.structurally_resolved_type(sp, fn_inputs[0]);\n             match tuple_type.sty {\n-                ty::TyTuple(arg_types, _) if arg_types.len() != args.len() => {\n+                ty::TyTuple(arg_types) if arg_types.len() != args.len() => {\n                     parameter_count_error(tcx.sess, sp, expr_sp, arg_types.len(), args.len(),\n                                           \"E0057\", false, def_span, false);\n                     expected_arg_tys = &[];\n                     self.err_args(args.len())\n                 }\n-                ty::TyTuple(arg_types, _) => {\n+                ty::TyTuple(arg_types) => {\n                     expected_arg_tys = match expected_arg_tys.get(0) {\n                         Some(&ty) => match ty.sty {\n-                            ty::TyTuple(ref tys, _) => &tys,\n+                            ty::TyTuple(ref tys) => &tys,\n                             _ => &[]\n                         },\n                         None => &[]\n@@ -3193,7 +3192,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         None\n                     }\n                 }\n-                ty::TyTuple(ref v, _) => {\n+                ty::TyTuple(ref v) => {\n                     tuple_like = true;\n                     v.get(idx.node).cloned()\n                 }\n@@ -4060,7 +4059,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let flds = expected.only_has_type(self).and_then(|ty| {\n                 let ty = self.resolve_type_vars_with_obligations(ty);\n                 match ty.sty {\n-                    ty::TyTuple(ref flds, _) => Some(&flds[..]),\n+                    ty::TyTuple(ref flds) => Some(&flds[..]),\n                     _ => None\n                 }\n             });\n@@ -4078,7 +4077,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 };\n                 t\n             });\n-            let tuple = tcx.mk_tup(elt_ts_iter, false);\n+            let tuple = tcx.mk_tup(elt_ts_iter);\n             if tuple.references_error() {\n                 tcx.types.err\n             } else {"}, {"sha": "a24e501aba95015aed46eddc69b2d32e641ee2da", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -287,7 +287,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(current, mt, variance);\n             }\n \n-            ty::TyTuple(subtys, _) => {\n+            ty::TyTuple(subtys) => {\n                 for &subty in subtys {\n                     self.add_constraints_from_ty(current, subty, variance);\n                 }"}, {"sha": "904c24815cb7f3d4c36b033a044f087e66c9901e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -1322,7 +1322,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n         Some(did) if cx.tcx.lang_items().fn_trait_kind(did).is_some() => {\n             assert_eq!(types.len(), 1);\n             let inputs = match types[0].sty {\n-                ty::TyTuple(ref tys, _) => tys.iter().map(|t| t.clean(cx)).collect(),\n+                ty::TyTuple(ref tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n                 _ => {\n                     return PathParameters::AngleBracketed {\n                         lifetimes,\n@@ -1334,7 +1334,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n             let output = None;\n             // FIXME(#20299) return type comes from a projection now\n             // match types[1].sty {\n-            //     ty::TyTuple(ref v, _) if v.is_empty() => None, // -> ()\n+            //     ty::TyTuple(ref v) if v.is_empty() => None, // -> ()\n             //     _ => Some(types[1].clean(cx))\n             // };\n             PathParameters::Parenthesized {\n@@ -1377,7 +1377,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         // collect any late bound regions\n         let mut late_bounds = vec![];\n         for ty_s in self.input_types().skip(1) {\n-            if let ty::TyTuple(ts, _) = ty_s.sty {\n+            if let ty::TyTuple(ts) = ty_s.sty {\n                 for &ty_s in ts {\n                     if let ty::TyRef(ref reg, _) = ty_s.sty {\n                         if let &ty::RegionKind::ReLateBound(..) = *reg {\n@@ -2731,7 +2731,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     Never\n                 }\n             }\n-            ty::TyTuple(ref t, _) => Tuple(t.clean(cx)),\n+            ty::TyTuple(ref t) => Tuple(t.clean(cx)),\n \n             ty::TyProjection(ref data) => data.clean(cx),\n "}, {"sha": "3f4e1cce548b9e79dc12e0271ac5402ed658f015", "filename": "src/test/compile-fail/defaulted-unit-warning.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fab632f9759af4f3d96c6ec69e24e5428060dba4/src%2Ftest%2Fcompile-fail%2Fdefaulted-unit-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab632f9759af4f3d96c6ec69e24e5428060dba4/src%2Ftest%2Fcompile-fail%2Fdefaulted-unit-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefaulted-unit-warning.rs?ref=fab632f9759af4f3d96c6ec69e24e5428060dba4", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unused)]\n-\n-trait Deserialize: Sized {\n-    fn deserialize() -> Result<Self, String>;\n-}\n-\n-impl Deserialize for () {\n-    fn deserialize() -> Result<(), String> {\n-        Ok(())\n-    }\n-}\n-\n-trait ImplementedForUnitButNotNever {}\n-\n-impl ImplementedForUnitButNotNever for () {}\n-\n-fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n-\n-fn smeg() {\n-    let _x = return;\n-    foo(_x);\n-    //~^ ERROR code relies on type\n-    //~| WARNING previously accepted\n-}\n-\n-fn main() {\n-    smeg();\n-}"}, {"sha": "052575de4c267944372854ee0be5b0d2943aa1d6", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -31,5 +31,5 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n+    //~^ ERROR the trait bound `!: Add<A>` is not satisfied\n }"}, {"sha": "c22a645385adede474544b3b89c35359a6c50684", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b15ddb29e5acb15b074913d1e70b5b26bd89ee6/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=9b15ddb29e5acb15b074913d1e70b5b26bd89ee6", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): Add<A>` is not satisfied\n+error[E0277]: the trait bound `!: Add<A>` is not satisfied\n   --> $DIR/associated-types-ICE-when-projecting-out-of-err.rs:33:11\n    |\n LL |     r = r + a;\n-   |           ^ the trait `Add<A>` is not implemented for `()`\n+   |           ^ the trait `Add<A>` is not implemented for `!`\n \n error: aborting due to previous error\n "}]}