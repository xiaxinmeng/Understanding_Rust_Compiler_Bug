{"sha": "f807b6a61e7f1fb0645a4f58f874292214d65907", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MDdiNmE2MWU3ZjFmYjA2NDVhNGY1OGY4NzQyOTIyMTRkNjU5MDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-17T23:14:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T01:26:44Z"}, "message": "rollup merge of #22440: semarie/openbsd-connect_error\n\nThe `connect_error` test check if connecting to \"0.0.0.0:1\" works (it\nshouldn't). And in case of error, the test expects a `ConnectionRefused`\nerror.\n\nUnder OpenBSD, trying to connect to \"0.0.0.0\" isn't a `ConnectionRefused`:\nit is an `InvalidInput` error.\n\nThe patch allow the error to be `ConnectionRefused` or `InvalidInput`.\n\nAnother possibility is to check connecting to \"127.0.0.1:1\" and expects only `ConnectionRefused` error.", "tree": {"sha": "87a2c404ddfeb56b3d35d9fde5d78548fe441036", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a2c404ddfeb56b3d35d9fde5d78548fe441036"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f807b6a61e7f1fb0645a4f58f874292214d65907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f807b6a61e7f1fb0645a4f58f874292214d65907", "html_url": "https://github.com/rust-lang/rust/commit/f807b6a61e7f1fb0645a4f58f874292214d65907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f807b6a61e7f1fb0645a4f58f874292214d65907/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c276175af6caeeb0bc41f7c3c5d3bc79db6359", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c276175af6caeeb0bc41f7c3c5d3bc79db6359", "html_url": "https://github.com/rust-lang/rust/commit/02c276175af6caeeb0bc41f7c3c5d3bc79db6359"}, {"sha": "9eeaa3c78694ec593450e5dd96a5f3fa10afd434", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eeaa3c78694ec593450e5dd96a5f3fa10afd434", "html_url": "https://github.com/rust-lang/rust/commit/9eeaa3c78694ec593450e5dd96a5f3fa10afd434"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "01c005bd8a60ebe36b9ac22fc099d0f1b0e35887", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f807b6a61e7f1fb0645a4f58f874292214d65907/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f807b6a61e7f1fb0645a4f58f874292214d65907/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=f807b6a61e7f1fb0645a4f58f874292214d65907", "patch": "@@ -247,7 +247,8 @@ mod tests {\n     fn connect_error() {\n         match TcpStream::connect(\"0.0.0.0:1\") {\n             Ok(..) => panic!(),\n-            Err(e) => assert_eq!(e.kind(), ErrorKind::ConnectionRefused),\n+            Err(e) => assert!((e.kind() == ErrorKind::ConnectionRefused)\n+                              || (e.kind() == ErrorKind::InvalidInput)),\n         }\n     }\n "}, {"sha": "45dba733535647ecb0f32a1f454587175e07ca41", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f807b6a61e7f1fb0645a4f58f874292214d65907/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f807b6a61e7f1fb0645a4f58f874292214d65907/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=f807b6a61e7f1fb0645a4f58f874292214d65907", "patch": "@@ -494,6 +494,7 @@ mod test {\n     use old_io::{EndOfFile, TimedOut, ShortWrite, IoError};\n     use old_io::{ConnectionRefused, BrokenPipe, ConnectionAborted};\n     use old_io::{ConnectionReset, NotConnected, PermissionDenied, OtherIoError};\n+    use old_io::{InvalidInput};\n     use old_io::{Acceptor, Listener};\n \n     // FIXME #11530 this fails on android because tests are run as root\n@@ -510,7 +511,8 @@ mod test {\n     fn connect_error() {\n         match TcpStream::connect(\"0.0.0.0:1\") {\n             Ok(..) => panic!(),\n-            Err(e) => assert_eq!(e.kind, ConnectionRefused),\n+            Err(e) => assert!((e.kind == ConnectionRefused)\n+                              || (e.kind == InvalidInput)),\n         }\n     }\n "}]}