{"sha": "a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YTllNDg4YTQ3ZWY5Y2EyZjljYzlmNzM5MDNiMmFjM2Y1NGZjNGM=", "commit": {"author": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2013-12-26T19:55:10Z"}, "committer": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2013-12-31T20:28:02Z"}, "message": "Generate --dep-info earlier in the compillation.", "tree": {"sha": "8ac6d3ad5cc6d5db3e1f10b007966110f926b0a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac6d3ad5cc6d5db3e1f10b007966110f926b0a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c", "html_url": "https://github.com/rust-lang/rust/commit/a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c/comments", "author": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff7b283731b795930d1e6782ae1639c83595e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff7b283731b795930d1e6782ae1639c83595e91", "html_url": "https://github.com/rust-lang/rust/commit/5ff7b283731b795930d1e6782ae1639c83595e91"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "c4f2b409247bb79a112d00e18ef53f713c10b0c4", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c", "patch": "@@ -392,14 +392,48 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n /// This should produce either a finished executable or library.\n pub fn phase_6_link_output(sess: Session,\n                            trans: &CrateTranslation,\n-                           input: &input,\n                            outputs: &OutputFilenames) {\n-    let outputs = time(sess.time_passes(), \"linking\", (), |_|\n+    time(sess.time_passes(), \"linking\", (), |_|\n          link::link_binary(sess,\n                            trans,\n                            &outputs.obj_filename,\n                            &outputs.out_filename,\n                            &trans.link));\n+}\n+\n+pub fn stop_after_phase_3(sess: Session) -> bool {\n+   if sess.opts.no_trans {\n+        debug!(\"invoked with --no-trans, returning early from compile_input\");\n+        return true;\n+    }\n+    return false;\n+}\n+\n+pub fn stop_after_phase_1(sess: Session) -> bool {\n+    if sess.opts.parse_only {\n+        debug!(\"invoked with --parse-only, returning early from compile_input\");\n+        return true;\n+    }\n+    return false;\n+}\n+\n+pub fn stop_after_phase_5(sess: Session) -> bool {\n+    if sess.opts.output_type != link::output_type_exe {\n+        debug!(\"not building executable, returning early from compile_input\");\n+        return true;\n+    }\n+    return false;\n+}\n+\n+fn write_out_deps(sess: Session, input: &input, outputs: &OutputFilenames, crate: &ast::Crate)\n+{\n+    let lm = link::build_link_meta(sess, crate.attrs, &outputs.obj_filename,\n+                                       &mut ::util::sha2::Sha256::new());\n+\n+    let sess_outputs = sess.outputs.borrow();\n+    let out_filenames = sess_outputs.get().iter()\n+        .map(|&output| link::filename_for_input(&sess, output, &lm, &outputs.out_filename))\n+        .to_owned_vec();\n \n     // Write out dependency rules to the dep-info file if requested with --dep-info\n     let deps_filename = match sess.opts.write_dependency_info {\n@@ -409,7 +443,7 @@ pub fn phase_6_link_output(sess: Session,\n         (true, None) => match *input {\n             file_input(ref input_path) => {\n                 let filestem = input_path.filestem().expect(\"input file must have stem\");\n-                let filename = outputs[0].dir_path().join(filestem).with_extension(\"d\");\n+                let filename = out_filenames[0].dir_path().join(filestem).with_extension(\"d\");\n                 filename\n             },\n             str_input(..) => {\n@@ -419,40 +453,17 @@ pub fn phase_6_link_output(sess: Session,\n         },\n         _ => return,\n     };\n+\n     // Build a list of files used to compile the output and\n     // write Makefile-compatible dependency rules\n     let files: ~[@str] = sess.codemap.files.iter()\n         .filter_map(|fmap| if fmap.is_real_file() { Some(fmap.name) } else { None })\n         .collect();\n     let mut file = io::File::create(&deps_filename);\n-    for output in outputs.iter() {\n+    for path in out_filenames.iter() {\n         write!(&mut file as &mut Writer,\n-               \"{}: {}\\n\\n\", output.display(), files.connect(\" \"));\n-    }\n-}\n-\n-pub fn stop_after_phase_3(sess: Session) -> bool {\n-   if sess.opts.no_trans {\n-        debug!(\"invoked with --no-trans, returning early from compile_input\");\n-        return true;\n+               \"{}: {}\\n\\n\", path.display(), files.connect(\" \"));\n     }\n-    return false;\n-}\n-\n-pub fn stop_after_phase_1(sess: Session) -> bool {\n-    if sess.opts.parse_only {\n-        debug!(\"invoked with --parse-only, returning early from compile_input\");\n-        return true;\n-    }\n-    return false;\n-}\n-\n-pub fn stop_after_phase_5(sess: Session) -> bool {\n-    if sess.opts.output_type != link::output_type_exe {\n-        debug!(\"not building executable, returning early from compile_input\");\n-        return true;\n-    }\n-    return false;\n }\n \n pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n@@ -468,6 +479,9 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n         };\n         let outputs = build_output_filenames(input, outdir, output,\n                                              expanded_crate.attrs, sess);\n+\n+        write_out_deps(sess, input, outputs, &expanded_crate);\n+\n         let analysis = phase_3_run_analysis_passes(sess, &expanded_crate);\n         if stop_after_phase_3(sess) { return; }\n         let trans = phase_4_translate_to_llvm(sess, expanded_crate,\n@@ -476,7 +490,7 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n     };\n     phase_5_run_llvm_passes(sess, &trans, outputs);\n     if stop_after_phase_5(sess) { return; }\n-    phase_6_link_output(sess, &trans, input, outputs);\n+    phase_6_link_output(sess, &trans, outputs);\n }\n \n struct IdentifiedAnnotation {"}, {"sha": "af940e34789c7c7b118205a884de17de781405ba", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=a7a9e488a47ef9ca2f9cc9f73903b2ac3f54fc4c", "patch": "@@ -405,7 +405,7 @@ pub fn compile_crate_from_input(input: &Path,\n     // -c\n     if driver::stop_after_phase_5(sess)\n         || stop_before == Link || stop_before == Assemble { return Some(outputs.out_filename); }\n-    driver::phase_6_link_output(sess, &translation, &file_input, outputs);\n+    driver::phase_6_link_output(sess, &translation, outputs);\n \n     // Register dependency on the source file\n     // FIXME (#9639): This needs to handle non-utf8 paths"}]}