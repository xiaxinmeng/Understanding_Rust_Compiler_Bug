{"sha": "4a8679824b9ddf950e6754231755d5d065692c47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhODY3OTgyNGI5ZGRmOTUwZTY3NTQyMzE3NTVkNWQwNjU2OTJjNDc=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-03T03:15:00Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-03T22:56:58Z"}, "message": "SSR: Improve error reporting when a test fails", "tree": {"sha": "3b18c785b92b4c4619a877aaa26ec12a7302bba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b18c785b92b4c4619a877aaa26ec12a7302bba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a8679824b9ddf950e6754231755d5d065692c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8679824b9ddf950e6754231755d5d065692c47", "html_url": "https://github.com/rust-lang/rust/commit/4a8679824b9ddf950e6754231755d5d065692c47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a8679824b9ddf950e6754231755d5d065692c47/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4", "html_url": "https://github.com/rust-lang/rust/commit/a5ef644a16f6d187fb6b612d30f19bf4f20fc6c4"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "cca4576ce05baab20f0e27949494863503846b0b", "filename": "crates/ra_ssr/src/lib.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4a8679824b9ddf950e6754231755d5d065692c47/crates%2Fra_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8679824b9ddf950e6754231755d5d065692c47/crates%2Fra_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Flib.rs?ref=4a8679824b9ddf950e6754231755d5d065692c47", "patch": "@@ -201,9 +201,8 @@ impl<'db> MatchFinder<'db> {\n                         );\n                     }\n                 }\n-            } else {\n-                self.output_debug_for_nodes_at_range(&node, range, restrict_range, out);\n             }\n+            self.output_debug_for_nodes_at_range(&node, range, restrict_range, out);\n         }\n     }\n }\n@@ -218,25 +217,26 @@ pub struct MatchDebugInfo {\n \n impl std::fmt::Debug for MatchDebugInfo {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(f, \"========= PATTERN ==========\\n\")?;\n+        match &self.matched {\n+            Ok(_) => writeln!(f, \"Node matched\")?,\n+            Err(reason) => writeln!(f, \"Node failed to match because: {}\", reason.reason)?,\n+        }\n+        writeln!(\n+            f,\n+            \"============ AST ===========\\n\\\n+            {:#?}\",\n+            self.node\n+        )?;\n+        writeln!(f, \"========= PATTERN ==========\")?;\n         match &self.pattern {\n             Ok(pattern) => {\n-                write!(f, \"{:#?}\", pattern)?;\n+                writeln!(f, \"{:#?}\", pattern)?;\n             }\n             Err(err) => {\n-                write!(f, \"{}\", err.reason)?;\n+                writeln!(f, \"{}\", err.reason)?;\n             }\n         }\n-        write!(\n-            f,\n-            \"\\n============ AST ===========\\n\\\n-            {:#?}\\n============================\\n\",\n-            self.node\n-        )?;\n-        match &self.matched {\n-            Ok(_) => write!(f, \"Node matched\")?,\n-            Err(reason) => write!(f, \"Node failed to match because: {}\", reason.reason)?,\n-        }\n+        writeln!(f, \"============================\")?;\n         Ok(())\n     }\n }"}, {"sha": "9628dcbac4a813897346062a902e7c00b0d6fc25", "filename": "crates/ra_ssr/src/tests.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4a8679824b9ddf950e6754231755d5d065692c47/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8679824b9ddf950e6754231755d5d065692c47/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ftests.rs?ref=4a8679824b9ddf950e6754231755d5d065692c47", "patch": "@@ -91,6 +91,18 @@ fn assert_ssr_transforms(rules: &[&str], input: &str, result: &str) {\n     }\n }\n \n+fn print_match_debug_info(match_finder: &MatchFinder, file_id: FileId, snippet: &str) {\n+    let debug_info = match_finder.debug_where_text_equal(file_id, snippet);\n+    println!(\n+        \"Match debug info: {} nodes had text exactly equal to '{}'\",\n+        debug_info.len(),\n+        snippet\n+    );\n+    for (index, d) in debug_info.iter().enumerate() {\n+        println!(\"Node #{}\\n{:#?}\\n\", index, d);\n+    }\n+}\n+\n fn assert_matches(pattern: &str, code: &str, expected: &[&str]) {\n     let (db, file_id) = single_file(code);\n     let mut match_finder = MatchFinder::new(&db);\n@@ -103,17 +115,20 @@ fn assert_matches(pattern: &str, code: &str, expected: &[&str]) {\n         .map(|m| m.matched_text())\n         .collect();\n     if matched_strings != expected && !expected.is_empty() {\n-        let debug_info = match_finder.debug_where_text_equal(file_id, &expected[0]);\n-        eprintln!(\"Test is about to fail. Some possibly useful info: {} nodes had text exactly equal to '{}'\", debug_info.len(), &expected[0]);\n-        for d in debug_info {\n-            eprintln!(\"{:#?}\", d);\n-        }\n+        print_match_debug_info(&match_finder, file_id, &expected[0]);\n     }\n     assert_eq!(matched_strings, expected);\n }\n \n fn assert_no_match(pattern: &str, code: &str) {\n-    assert_matches(pattern, code, &[]);\n+    let (db, file_id) = single_file(code);\n+    let mut match_finder = MatchFinder::new(&db);\n+    match_finder.add_search_pattern(pattern.parse().unwrap());\n+    let matches = match_finder.find_matches_in_file(file_id).flattened().matches;\n+    if !matches.is_empty() {\n+        print_match_debug_info(&match_finder, file_id, &matches[0].matched_text());\n+        panic!(\"Got {} matches when we expected none: {:#?}\", matches.len(), matches);\n+    }\n }\n \n fn assert_match_failure_reason(pattern: &str, code: &str, snippet: &str, expected_reason: &str) {"}]}