{"sha": "8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMDY4NTEwYTRhN2UwYmY3YWUxYzRlNjQxZjhhNzkwODQyZjZmMTc=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-04-03T09:16:54Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-04-03T09:16:54Z"}, "message": "keep comment appearing between parameter's name and its type (#3491)", "tree": {"sha": "e1d3b2fd1b3d80f4012d4a1ced7de3d091686acd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1d3b2fd1b3d80f4012d4a1ced7de3d091686acd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "html_url": "https://github.com/rust-lang/rust/commit/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7650f0bc8bbf8addf734dc3b0379c8bcb130089c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7650f0bc8bbf8addf734dc3b0379c8bcb130089c", "html_url": "https://github.com/rust-lang/rust/commit/7650f0bc8bbf8addf734dc3b0379c8bcb130089c"}], "stats": {"total": 69, "additions": 51, "deletions": 18}, "files": [{"sha": "1dbcf73618a26e675b6faf2fdc89909a2e38284c", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "patch": "@@ -1691,7 +1691,7 @@ pub fn wrap_struct_field(\n }\n \n pub fn struct_lit_field_separator(config: &Config) -> &str {\n-    colon_spaces(config.space_before_colon(), config.space_after_colon())\n+    colon_spaces(config)\n }\n \n pub fn rewrite_field("}, {"sha": "c907d34b47c998a6006a77735f65a5c0d368812b", "filename": "src/items.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "patch": "@@ -36,7 +36,7 @@ const DEFAULT_VISIBILITY: ast::Visibility = source_map::Spanned {\n };\n \n fn type_annotation_separator(config: &Config) -> &str {\n-    colon_spaces(config.space_before_colon(), config.space_after_colon())\n+    colon_spaces(config)\n }\n \n // Statements of the form\n@@ -1695,10 +1695,7 @@ fn rewrite_static(\n     static_parts: &StaticParts<'_>,\n     offset: Indent,\n ) -> Option<String> {\n-    let colon = colon_spaces(\n-        context.config.space_before_colon(),\n-        context.config.space_after_colon(),\n-    );\n+    let colon = colon_spaces(context.config);\n     let mut prefix = format!(\n         \"{}{}{} {}{}{}\",\n         format_visibility(context, static_parts.vis),\n@@ -1828,6 +1825,42 @@ fn is_empty_infer(ty: &ast::Ty, pat_span: Span) -> bool {\n     }\n }\n \n+/// Recover any missing comments between the argument and the type.\n+///\n+/// # Returns\n+///\n+/// A 2-len tuple with the comment before the colon in first position, and the comment after the\n+/// colon in second position.\n+fn get_missing_arg_comments(\n+    context: &RewriteContext<'_>,\n+    pat_span: Span,\n+    ty_span: Span,\n+    shape: Shape,\n+) -> (String, String) {\n+    let missing_comment_span = mk_sp(pat_span.hi(), ty_span.lo());\n+\n+    let span_before_colon = {\n+        let missing_comment_span_hi = context\n+            .snippet_provider\n+            .span_before(missing_comment_span, \":\");\n+        mk_sp(pat_span.hi(), missing_comment_span_hi)\n+    };\n+    let span_after_colon = {\n+        let missing_comment_span_lo = context\n+            .snippet_provider\n+            .span_after(missing_comment_span, \":\");\n+        mk_sp(missing_comment_span_lo, ty_span.lo())\n+    };\n+\n+    let comment_before_colon = rewrite_missing_comment(span_before_colon, shape, context)\n+        .filter(|comment| !comment.is_empty())\n+        .map_or(String::new(), |comment| format!(\" {}\", comment));\n+    let comment_after_colon = rewrite_missing_comment(span_after_colon, shape, context)\n+        .filter(|comment| !comment.is_empty())\n+        .map_or(String::new(), |comment| format!(\"{} \", comment));\n+    (comment_before_colon, comment_after_colon)\n+}\n+\n impl Rewrite for ast::Arg {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         if let Some(ref explicit_self) = self.to_self() {\n@@ -1838,13 +1871,11 @@ impl Rewrite for ast::Arg {\n                 .rewrite(context, Shape::legacy(shape.width, shape.indent))?;\n \n             if !is_empty_infer(&*self.ty, self.pat.span) {\n-                if context.config.space_before_colon() {\n-                    result.push_str(\" \");\n-                }\n-                result.push_str(\":\");\n-                if context.config.space_after_colon() {\n-                    result.push_str(\" \");\n-                }\n+                let (before_comment, after_comment) =\n+                    get_missing_arg_comments(context, self.pat.span, self.ty.span, shape);\n+                result.push_str(&before_comment);\n+                result.push_str(colon_spaces(context.config));\n+                result.push_str(&after_comment);\n                 let overhead = last_line_width(&result);\n                 let max_width = shape.width.checked_sub(overhead)?;\n                 let ty_str = self"}, {"sha": "8ed73b999138e1bac38bf915934a0c3f8fee7879", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "patch": "@@ -378,10 +378,7 @@ where\n }\n \n fn type_bound_colon(context: &RewriteContext<'_>) -> &'static str {\n-    colon_spaces(\n-        context.config.space_before_colon(),\n-        context.config.space_after_colon(),\n-    )\n+    colon_spaces(context.config)\n }\n \n impl Rewrite for ast::WherePredicate {"}, {"sha": "a1ab5fd5aadd265d3b4fba93f4988d05e73d8ad6", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "patch": "@@ -376,7 +376,9 @@ fn is_valid_str(snippet: &str, max_width: usize, shape: Shape) -> bool {\n }\n \n #[inline]\n-pub fn colon_spaces(before: bool, after: bool) -> &'static str {\n+pub fn colon_spaces(config: &Config) -> &'static str {\n+    let before = config.space_before_colon();\n+    let after = config.space_after_colon();\n     match (before, after) {\n         (true, true) => \" : \",\n         (true, false) => \" :\","}, {"sha": "51c94a84ba29588974099f309d872f935c272acc", "filename": "tests/target/issue-2976.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/tests%2Ftarget%2Fissue-2976.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17/tests%2Ftarget%2Fissue-2976.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2976.rs?ref=8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "patch": "@@ -0,0 +1,3 @@\n+fn a(_ /*comment*/: u8 /* toto */) {}\n+fn b(/*comment*/ _: u8 /* tata */) {}\n+fn c(_: /*comment*/ u8) {}"}]}