{"sha": "8ec9543f13ba0fe6af76816441b7c7d54653b854", "node_id": "C_kwDOAAsO6NoAKDhlYzk1NDNmMTNiYTBmZTZhZjc2ODE2NDQxYjdjN2Q1NDY1M2I4NTQ", "commit": {"author": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-01-09T23:18:24Z"}, "committer": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-02-15T20:29:58Z"}, "message": "Add `impl_trait_param` lint\n\nAs this is a lint about \"style\", and a purely cosmetical choice (using `<A: Trait>` over `impl Trait`), a lot of other files needed to be allowed this lint.", "tree": {"sha": "33b00025d2fe57f03c8fc61a196766c1d2495411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33b00025d2fe57f03c8fc61a196766c1d2495411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec9543f13ba0fe6af76816441b7c7d54653b854", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEM3aofraJSaf7CtgpTTgXC1ovwzQFAmPtQMYACgkQTTgXC1ov\nwzSkqw//YiKXEFo5nz48OTlhsVd30O3kX2kflW6cIFjk6wSJ81zokTzuBj5uBAI6\nzW+nTiVUU5ECKQaNf8vuIR1mg8v/WKJwHGTFmgq9eCo53phGmoKQa6TRlLccqjM/\nSgaksQfhvypxMlT0Rdd1NLZSFyuXNmaBuIXfRpN5ntvxbb+B/KratEAxVDCAz562\nf3/jMf3D/tnIm5Sk7esS7y+RdiOmlhyjXrH6w3qa6FQKsmxM2kDN2vbWUIcfCAUC\nY6yme60ciQtVBaQeuHPWm+e7CzAgySdInbBKPlZxnMLwj96o6krJA5Vb0SglZFag\nXtzAPD57qoMqmhmetjJluzvJwZsNtLEDZ0oArwuI+Mw992cdCbE2Vt77FOR4YiWc\nx2uUhiVlgEYVK9MlrzZYriOtat/lKoqT+Xhuw8ofE5qhEWJIdnCDXsr9PrcCwovo\nutp+24eXlZGvjbnMY9WmDv78dwFeUkN4sSf3XTBJpzOeWe+TMrC9CMYlDJRg3eNa\nujaUmLA/XsaVJ3JeLbw5b78k58Om0HtnEwyMfJceI5F0CXHR4Jju68t/tAuJTsjO\neniwAWVP5ZMqg9fquM8E1wKnssgVXdhMvy9xgc+gOuz3B9hbPXQlzgkl2DLxf/rO\nAPksolhEEbipYipZkl2hNUPWaP2H+HS+5qna1KhtlhNoRXhXG8c=\n=iaQB\n-----END PGP SIGNATURE-----", "payload": "tree 33b00025d2fe57f03c8fc61a196766c1d2495411\nparent 5b6795f50b521b11393d39f823d8a3e5b262b134\nauthor blyxyas <blyxyas@gmail.com> 1673306304 +0100\ncommitter blyxyas <blyxyas@gmail.com> 1676492998 +0100\n\nAdd `impl_trait_param` lint\n\nAs this is a lint about \"style\", and a purely cosmetical choice (using `<A: Trait>` over `impl Trait`), a lot of other files needed to be allowed this lint.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec9543f13ba0fe6af76816441b7c7d54653b854", "html_url": "https://github.com/rust-lang/rust/commit/8ec9543f13ba0fe6af76816441b7c7d54653b854", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec9543f13ba0fe6af76816441b7c7d54653b854/comments", "author": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b6795f50b521b11393d39f823d8a3e5b262b134", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6795f50b521b11393d39f823d8a3e5b262b134", "html_url": "https://github.com/rust-lang/rust/commit/5b6795f50b521b11393d39f823d8a3e5b262b134"}], "stats": {"total": 267, "additions": 219, "deletions": 48}, "files": [{"sha": "e2d971b38bcb7ba5491cc17381e5db988d71001e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -4430,6 +4430,7 @@ Released 2018-09-13\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n [`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n+[`impl_trait_param`]: https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_param\n [`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n [`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return"}, {"sha": "41b04f13721bd43e3b464611a27db3bab87509f6", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -179,6 +179,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR_INFO,\n     crate::from_str_radix_10::FROM_STR_RADIX_10_INFO,\n     crate::functions::DOUBLE_MUST_USE_INFO,\n+    crate::functions::IMPL_TRAIT_PARAM_INFO,\n     crate::functions::MISNAMED_GETTERS_INFO,\n     crate::functions::MUST_USE_CANDIDATE_INFO,\n     crate::functions::MUST_USE_UNIT_INFO,"}, {"sha": "1e819dc6c82a2174424bf4e754935c6a88a2549e", "filename": "clippy_lints/src/functions/impl_trait_param.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_param.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -0,0 +1,88 @@\n+use clippy_utils::{diagnostics::span_lint_and_then, is_in_test_function};\n+\n+use rustc_hir::{intravisit::FnKind, Body, Generics, HirId};\n+use rustc_lint::LateContext;\n+use rustc_span::Span;\n+\n+use super::IMPL_TRAIT_PARAM;\n+\n+pub(super) fn check_fn<'tcx>(cx: &LateContext<'_>, kind: &'tcx FnKind<'_>, body: &'tcx Body<'_>, hir_id: HirId) {\n+    if cx.tcx.visibility(cx.tcx.hir().body_owner_def_id(body.id())).is_public() && !is_in_test_function(cx.tcx, hir_id)\n+    {\n+        if let FnKind::ItemFn(ident, generics, _) = kind {\n+            for param in generics.params {\n+                if param.is_impl_trait()\n+                    && !param.name.ident().as_str().contains('<')\n+                    && !param.name.ident().as_str().contains('(')\n+                {\n+                    // No generics with nested generics, and no generics like FnMut(x)\n+                    span_lint_and_then(\n+                        cx,\n+                        IMPL_TRAIT_PARAM,\n+                        param.span,\n+                        &format!(\"'{}' in the function's parameters\", param.name.ident().as_str()),\n+                        |diag| {\n+                            let next_letter = next_valid_letter(generics);\n+                            if let Some(gen_span) = generics.span_for_param_suggestion() {\n+                                diag.span_suggestion_with_style(\n+                                    gen_span,\n+                                    format!(\n+                                        \"create a generic type here and replace that `{}` with `{}`\",\n+                                        param.name.ident().as_str(),\n+                                        next_letter\n+                                    ),\n+                                    \", T: Trait\",\n+                                    rustc_errors::Applicability::MaybeIncorrect,\n+                                    rustc_errors::SuggestionStyle::ShowAlways,\n+                                );\n+                            } else {\n+                                // multispan.push_span_label(param.span, format!(\"Replace this with `{}`\",\n+                                // next_letter));\n+\n+                                diag.span_suggestion_with_style(\n+                                    Span::new(\n+                                        body.params[0].span.lo() - rustc_span::BytePos(1),\n+                                        ident.span.hi(),\n+                                        ident.span.ctxt(),\n+                                        ident.span.parent(),\n+                                    ),\n+                                    format!(\n+                                        \"create a generic type here and replace that '{}' with `{}`\",\n+                                        param.name.ident().as_str(),\n+                                        next_letter\n+                                    ),\n+                                    \"<T: Trait>\",\n+                                    rustc_errors::Applicability::MaybeIncorrect,\n+                                    rustc_errors::SuggestionStyle::ShowAlways,\n+                                );\n+                            }\n+                        },\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn next_valid_letter(generics: &Generics<'_>) -> char {\n+    let mut generics_names = Vec::new();\n+\n+    generics.params.iter().for_each(|param| {\n+        generics_names.push(param.name.ident().as_str().to_owned());\n+    });\n+\n+    // If T exists, try with U, then with V, and so on...\n+    let mut current_letter = 84u32; // ASCII code for \"T\"\n+    while generics_names.contains(&String::from(char::from_u32(current_letter).unwrap())) {\n+        current_letter += 1;\n+        if current_letter == 91 {\n+            // ASCII code for \"Z\"\n+            current_letter = 65;\n+        } else if current_letter == 83 {\n+            // ASCII \"S\"\n+            current_letter = 97; // \"a\"\n+        };\n+    }\n+\n+    char::from_u32(current_letter).unwrap()\n+}"}, {"sha": "cd0df1438df43a9808c7846757f934429624da02", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,3 +1,4 @@\n+mod impl_trait_param;\n mod misnamed_getters;\n mod must_use;\n mod not_unsafe_ptr_arg_deref;\n@@ -327,6 +328,32 @@ declare_clippy_lint! {\n     \"getter method returning the wrong field\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Lints when `impl Trait` is being used in a function's paremeters.\n+    /// ### Why is this bad?\n+    /// Turbofish syntax (`::<>`) cannot be used when `impl Trait` is being used, making `impl Trait` less powerful. Readability may also be a factor.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// trait MyTrait {}\n+    /// fn foo(a: impl MyTrait) {\n+    /// \t// [...]\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// trait MyTrait {}\n+    /// fn foo<T: A>(a: A) {\n+    /// \t// [...]\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.68.0\"]\n+    pub IMPL_TRAIT_PARAM,\n+    style,\n+    \"`impl Trait` is used in the function's parameters\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Functions {\n     too_many_arguments_threshold: u64,\n@@ -354,6 +381,7 @@ impl_lint_pass!(Functions => [\n     RESULT_UNIT_ERR,\n     RESULT_LARGE_ERR,\n     MISNAMED_GETTERS,\n+    IMPL_TRAIT_PARAM,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Functions {\n@@ -371,6 +399,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         too_many_lines::check_fn(cx, kind, span, body, self.too_many_lines_threshold);\n         not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, def_id);\n         misnamed_getters::check_fn(cx, kind, decl, body, span);\n+        impl_trait_param::check_fn(cx, &kind, body, hir_id);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {"}, {"sha": "62089320ce35cb7825461c6794a43fadc96ec78e", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -2,7 +2,12 @@\n //!\n //! - The `eq_foobar` functions test for semantic equality but ignores `NodeId`s and `Span`s.\n \n-#![allow(clippy::similar_names, clippy::wildcard_imports, clippy::enum_glob_use)]\n+#![allow(\n+    clippy::similar_names,\n+    clippy::wildcard_imports,\n+    clippy::enum_glob_use,\n+    clippy::impl_trait_param\n+)]\n \n use crate::{both, over};\n use rustc_ast::ptr::P;"}, {"sha": "8650f3c68289a349d153788e406c884ebd6fe1db", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,3 +1,4 @@\n+#![allow(clippy::impl_trait_param)]\n //! This module handles checking if the span given is from a proc-macro or not.\n //!\n //! Proc-macros are capable of setting the span of every token they output to a few possible spans."}, {"sha": "2cd213ed705af7191a087a84677fe7687feb9918", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,3 +1,4 @@\n+#![allow(clippy::impl_trait_param)]\n use crate::consts::constant_simple;\n use crate::macros::macro_backtrace;\n use crate::source::snippet_opt;"}, {"sha": "a85d11f6234c0543cf8d38ae3c9f85a59dc33e49", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,4 +1,4 @@\n-#![allow(clippy::similar_names)] // `expr` and `expn`\n+#![allow(clippy::similar_names, clippy::impl_trait_param)] // `expr` and `expn`\n \n use crate::source::snippet_opt;\n use crate::visitors::{for_each_expr, Descend};"}, {"sha": "39d00e89551a570495191006271e4e5f5849de80", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,6 +1,6 @@\n //! Utils for extracting, inspecting or transforming source code\n \n-#![allow(clippy::module_name_repetitions)]\n+#![allow(clippy::module_name_repetitions, clippy::impl_trait_param)]\n \n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "e3e5b8464b77dcabd64d185450ce6f72b9cefab1", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,6 +1,6 @@\n #![deny(clippy::borrowed_box)]\n #![allow(dead_code, unused_variables)]\n-#![allow(clippy::uninlined_format_args, clippy::disallowed_names)]\n+#![allow(clippy::uninlined_format_args, clippy::disallowed_names, clippy::impl_trait_param)]\n \n use std::fmt::Display;\n "}, {"sha": "8c19143cb2e0918ab9763bdbfc14e631a87612b0", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -7,7 +7,8 @@\n     clippy::no_effect,\n     clippy::option_map_unit_fn,\n     clippy::redundant_closure_call,\n-    clippy::uninlined_format_args\n+    clippy::uninlined_format_args,\n+    clippy::impl_trait_param\n )]\n \n use std::path::{Path, PathBuf};"}, {"sha": "10d4924c59927056bf5634e6dda372a20ec0d051", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -7,7 +7,8 @@\n     clippy::no_effect,\n     clippy::option_map_unit_fn,\n     clippy::redundant_closure_call,\n-    clippy::uninlined_format_args\n+    clippy::uninlined_format_args,\n+    clippy::impl_trait_param\n )]\n \n use std::path::{Path, PathBuf};"}, {"sha": "6ddecc58eaf12c8683552cbba31282bdc4bf3e7c", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,159 +1,159 @@\n error: redundant closure\n-  --> $DIR/eta.rs:28:27\n+  --> $DIR/eta.rs:29:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: replace the closure with the function itself: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure\n-  --> $DIR/eta.rs:32:40\n+  --> $DIR/eta.rs:33:40\n    |\n LL |     let _: Option<Vec<u8>> = true.then(|| vec![]); // special case vec!\n    |                                        ^^^^^^^^^ help: replace the closure with `Vec::new`: `std::vec::Vec::new`\n \n error: redundant closure\n-  --> $DIR/eta.rs:33:35\n+  --> $DIR/eta.rs:34:35\n    |\n LL |     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n    |                                   ^^^^^^^^^^^^^ help: replace the closure with the function itself: `foo2`\n \n error: redundant closure\n-  --> $DIR/eta.rs:34:26\n+  --> $DIR/eta.rs:35:26\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                          ^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `below`\n \n error: redundant closure\n-  --> $DIR/eta.rs:41:27\n+  --> $DIR/eta.rs:42:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `generic`\n \n error: redundant closure\n-  --> $DIR/eta.rs:87:51\n+  --> $DIR/eta.rs:88:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: replace the closure with the method itself: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure\n-  --> $DIR/eta.rs:88:51\n+  --> $DIR/eta.rs:89:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `TestTrait::trait_foo`\n \n error: redundant closure\n-  --> $DIR/eta.rs:90:42\n+  --> $DIR/eta.rs:91:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::vec::Vec::clear`\n \n error: redundant closure\n-  --> $DIR/eta.rs:94:29\n+  --> $DIR/eta.rs:95:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::ToString::to_string`\n \n error: redundant closure\n-  --> $DIR/eta.rs:95:27\n+  --> $DIR/eta.rs:96:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_uppercase`\n \n error: redundant closure\n-  --> $DIR/eta.rs:97:65\n+  --> $DIR/eta.rs:98:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_ascii_uppercase`\n \n error: redundant closure\n-  --> $DIR/eta.rs:160:22\n+  --> $DIR/eta.rs:161:22\n    |\n LL |     requires_fn_once(|| x());\n    |                      ^^^^^^ help: replace the closure with the function itself: `x`\n \n error: redundant closure\n-  --> $DIR/eta.rs:167:27\n+  --> $DIR/eta.rs:168:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `foo_ptr`\n \n error: redundant closure\n-  --> $DIR/eta.rs:172:27\n+  --> $DIR/eta.rs:173:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `closure`\n \n error: redundant closure\n-  --> $DIR/eta.rs:204:28\n+  --> $DIR/eta.rs:205:28\n    |\n LL |     x.into_iter().for_each(|x| add_to_res(x));\n    |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut add_to_res`\n \n error: redundant closure\n-  --> $DIR/eta.rs:205:28\n+  --> $DIR/eta.rs:206:28\n    |\n LL |     y.into_iter().for_each(|x| add_to_res(x));\n    |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut add_to_res`\n \n error: redundant closure\n-  --> $DIR/eta.rs:206:28\n+  --> $DIR/eta.rs:207:28\n    |\n LL |     z.into_iter().for_each(|x| add_to_res(x));\n    |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `add_to_res`\n \n error: redundant closure\n-  --> $DIR/eta.rs:213:21\n+  --> $DIR/eta.rs:214:21\n    |\n LL |         Some(1).map(|n| closure(n));\n    |                     ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut closure`\n \n error: redundant closure\n-  --> $DIR/eta.rs:217:21\n+  --> $DIR/eta.rs:218:21\n    |\n LL |         Some(1).map(|n| in_loop(n));\n    |                     ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `in_loop`\n \n error: redundant closure\n-  --> $DIR/eta.rs:310:18\n+  --> $DIR/eta.rs:311:18\n    |\n LL |     takes_fn_mut(|| f());\n    |                  ^^^^^^ help: replace the closure with the function itself: `&mut f`\n \n error: redundant closure\n-  --> $DIR/eta.rs:313:19\n+  --> $DIR/eta.rs:314:19\n    |\n LL |     takes_fn_once(|| f());\n    |                   ^^^^^^ help: replace the closure with the function itself: `&mut f`\n \n error: redundant closure\n-  --> $DIR/eta.rs:317:26\n+  --> $DIR/eta.rs:318:26\n    |\n LL |     move || takes_fn_mut(|| f_used_once())\n    |                          ^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut f_used_once`\n \n error: redundant closure\n-  --> $DIR/eta.rs:329:19\n+  --> $DIR/eta.rs:330:19\n    |\n LL |     array_opt.map(|a| a.as_slice());\n    |                   ^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<[u8; 3]>::as_slice`\n \n error: redundant closure\n-  --> $DIR/eta.rs:332:19\n+  --> $DIR/eta.rs:333:19\n    |\n LL |     slice_opt.map(|s| s.len());\n    |                   ^^^^^^^^^^^ help: replace the closure with the method itself: `<[u8]>::len`\n \n error: redundant closure\n-  --> $DIR/eta.rs:335:17\n+  --> $DIR/eta.rs:336:17\n    |\n LL |     ptr_opt.map(|p| p.is_null());\n    |                 ^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<*const usize>::is_null`\n \n error: redundant closure\n-  --> $DIR/eta.rs:339:17\n+  --> $DIR/eta.rs:340:17\n    |\n LL |     dyn_opt.map(|d| d.method_on_dyn());\n    |                 ^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<dyn TestTrait>::method_on_dyn`"}, {"sha": "3bb9cdbaa094550fbfcb2f874208e01b54668586", "filename": "tests/ui/impl_trait_param.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Fimpl_trait_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Fimpl_trait_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl_trait_param.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -0,0 +1,15 @@\n+#![allow(unused)]\n+#![warn(clippy::impl_trait_param)]\n+\n+pub trait Trait {}\n+\n+// Should warn\n+pub fn a(_: impl Trait) {}\n+pub fn c<C: Trait>(_: C, _: impl Trait) {}\n+\n+// Shouldn't warn\n+\n+pub fn b<B: Trait>(_: B) {}\n+fn d<D: Trait>(_: D, _: impl Trait) {}\n+\n+fn main() {}"}, {"sha": "55dec5d0d99f4abe904653dc489c0d8268d56d97", "filename": "tests/ui/impl_trait_param.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Fimpl_trait_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Fimpl_trait_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl_trait_param.stderr?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -0,0 +1,25 @@\n+error: 'impl Trait' in the function's parameters\n+  --> $DIR/impl_trait_param.rs:7:13\n+   |\n+LL | pub fn a(_: impl Trait) {}\n+   |             ^^^^^^^^^^\n+   |\n+   = note: `-D clippy::impl-trait-param` implied by `-D warnings`\n+help: create a generic type here and replace that 'impl Trait' with `T`\n+   |\n+LL | pub fn a<T: Trait>(_: impl Trait) {}\n+   |         ++++++++++\n+\n+error: 'impl Trait' in the function's parameters\n+  --> $DIR/impl_trait_param.rs:8:29\n+   |\n+LL | pub fn c<C: Trait>(_: C, _: impl Trait) {}\n+   |                             ^^^^^^^^^^\n+   |\n+help: create a generic type here and replace that `impl Trait` with `T`\n+   |\n+LL | pub fn c<C: Trait, T: Trait>(_: C, _: impl Trait) {}\n+   |                  ++++++++++\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a587cc8b456fad9a5375d1c0e6c6943b2ccf16c1", "filename": "tests/ui/trait_duplication_in_bounds.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.fixed?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![deny(clippy::trait_duplication_in_bounds)]\n+#![allow(clippy::impl_trait_param)]\n #![allow(unused)]\n \n fn bad_foo<T: Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {"}, {"sha": "beb41ea26d96600363112156fb8f926f5c6ebeed", "filename": "tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![deny(clippy::trait_duplication_in_bounds)]\n+#![allow(clippy::impl_trait_param)]\n #![allow(unused)]\n \n fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {"}, {"sha": "5216b2250dbd04acd72a94b34df4a5038a12fd3f", "filename": "tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,5 +1,5 @@\n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:5:15\n+  --> $DIR/trait_duplication_in_bounds.rs:6:15\n    |\n LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n@@ -11,43 +11,43 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:11:8\n+  --> $DIR/trait_duplication_in_bounds.rs:12:8\n    |\n LL |     T: Clone + Clone + Clone + Copy,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:39:26\n+  --> $DIR/trait_duplication_in_bounds.rs:40:26\n    |\n LL | trait BadSelfTraitBound: Clone + Clone + Clone {\n    |                          ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:46:15\n+  --> $DIR/trait_duplication_in_bounds.rs:47:15\n    |\n LL |         Self: Clone + Clone + Clone;\n    |               ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:60:24\n+  --> $DIR/trait_duplication_in_bounds.rs:61:24\n    |\n LL | trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:67:12\n+  --> $DIR/trait_duplication_in_bounds.rs:68:12\n    |\n LL |         T: Clone + Clone + Clone + Copy,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:100:19\n+  --> $DIR/trait_duplication_in_bounds.rs:101:19\n    |\n LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u64> + GenericTrait<u32>`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:108:22\n+  --> $DIR/trait_duplication_in_bounds.rs:109:22\n    |\n LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::clone::Clone + foo::Clone`"}, {"sha": "63ae4493143ee7db20c21bff7981cf060586b046", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,4 +1,5 @@\n #![deny(clippy::trait_duplication_in_bounds)]\n+#![allow(clippy::impl_trait_param)]\n \n use std::collections::BTreeMap;\n use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};"}, {"sha": "48091b38fb41be01c12c7fcbefaa5bf370c67206", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ec9543f13ba0fe6af76816441b7c7d54653b854/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr?ref=8ec9543f13ba0fe6af76816441b7c7d54653b854", "patch": "@@ -1,5 +1,5 @@\n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:7:15\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |               ^^^^^\n@@ -12,55 +12,55 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:23\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:7:23\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |                       ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:35:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:36:15\n    |\n LL |         Self: Default;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:49:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:50:15\n    |\n LL |         Self: Default + Clone;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:55:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:56:15\n    |\n LL |         Self: Default + Clone;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:55:25\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:56:25\n    |\n LL |         Self: Default + Clone;\n    |                         ^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:58:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:59:15\n    |\n LL |         Self: Default;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:93:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:94:15\n    |\n LL |         Self: Iterator<Item = Foo>,\n    |               ^^^^^^^^^^^^^^^^^^^^"}]}