{"sha": "cc77087d6f6143927d9fe98a07ca3d12b26ce474", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNzcwODdkNmY2MTQzOTI3ZDlmZTk4YTA3Y2EzZDEyYjI2Y2U0NzQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-04-18T13:49:41Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-04-18T13:49:41Z"}, "message": "Use new `needs-(profiler|sanitizer)-support` compiletest directive to clean up some run-make tests.", "tree": {"sha": "c2bf2a5bc8ffe45a5f0e94b7f97feb13304068b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2bf2a5bc8ffe45a5f0e94b7f97feb13304068b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc77087d6f6143927d9fe98a07ca3d12b26ce474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc77087d6f6143927d9fe98a07ca3d12b26ce474", "html_url": "https://github.com/rust-lang/rust/commit/cc77087d6f6143927d9fe98a07ca3d12b26ce474", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc77087d6f6143927d9fe98a07ca3d12b26ce474/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2acaee8bb364197af2ab197f0f641e8f988ae04", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2acaee8bb364197af2ab197f0f641e8f988ae04", "html_url": "https://github.com/rust-lang/rust/commit/e2acaee8bb364197af2ab197f0f641e8f988ae04"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "48181bcbdc6d363f636140483c79c2eafcd9b267", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,8 +1,8 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(RUSTC_PROFILER_SUPPORT),1)\n \t$(RUSTC) -Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)\"/default_*.profraw ] || (echo \"No .profraw file\"; exit 1)\n-endif"}, {"sha": "20977edb88e87ad8b2467863c04bdff8a1cb4493", "filename": "src/test/run-make-fulldeps/pgo-gen-no-imp-symbols/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,11 +1,11 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(RUSTC_PROFILER_SUPPORT),1)\n \t$(RUSTC) -O -Ccodegen-units=1 -Z pgo-gen=\"$(TMPDIR)\" --emit=llvm-ir test.rs\n \t# We expect symbols starting with \"__llvm_profile_\".\n \t$(CGREP) \"__llvm_profile_\" < $(TMPDIR)/test.ll\n \t# We do NOT expect the \"__imp_\" version of these symbols.\n \t$(CGREP) -v \"__imp___llvm_profile_\" < $(TMPDIR)/test.ll # 64 bit\n \t$(CGREP) -v \"__imp____llvm_profile_\" < $(TMPDIR)/test.ll # 32 bit\n-endif"}, {"sha": "ce44c10a7c2d2c5e8f50724fb7ba8db6dccb83a0", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,8 +1,8 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(RUSTC_PROFILER_SUPPORT),1)\n \t$(RUSTC) -g -Z pgo-gen=\"$(TMPDIR)\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)\"/default_*.profraw ] || (echo \"No .profraw file\"; exit 1)\n-endif"}, {"sha": "c12712590e48fdc1cf18640ca7b35b98536fbede", "filename": "src/test/run-make-fulldeps/profile/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fprofile%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fprofile%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprofile%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,9 +1,9 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(RUSTC_PROFILER_SUPPORT),1)\n \t$(RUSTC) -g -Z profile test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)/test.gcno\" ] || (echo \"No .gcno file\"; exit 1)\n \t[ -e \"$(TMPDIR)/test.gcda\" ] || (echo \"No .gcda file\"; exit 1)\n-endif"}, {"sha": "51d8a4a947adc553d035d7c4164a0be2a12105c2", "filename": "src/test/run-make-fulldeps/sanitizer-address/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,15 +1,15 @@\n+# needs-sanitizer-support\n+\n -include ../tools.mk\n \n LOG := $(TMPDIR)/log.txt\n \n # NOTE the address sanitizer only supports x86_64 linux and macOS\n \n ifeq ($(TARGET),x86_64-apple-darwin)\n-ASAN_SUPPORT=$(RUSTC_SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=-C rpath\n else\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(RUSTC_SANITIZER_SUPPORT)\n \n # Apparently there are very specific Linux kernels, notably the one that's\n # currently on Travis CI, which contain a buggy commit that triggers failures in\n@@ -23,7 +23,5 @@ endif\n endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | $(CGREP) librustc_asan\n \t$(TMPDIR)/overflow 2>&1 | $(CGREP) stack-buffer-overflow\n-endif"}, {"sha": "36cde355468be2ab5c97dcc2938e64cbe8980908", "filename": "src/test/run-make-fulldeps/sanitizer-cdylib-link/Makefile", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,3 +1,5 @@\n+# needs-sanitizer-support\n+\n -include ../tools.mk\n \n LOG := $(TMPDIR)/log.txt\n@@ -8,15 +10,12 @@ LOG := $(TMPDIR)/log.txt\n # is correctly detected.\n \n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(RUSTC_SANITIZER_SUPPORT)\n \n # See comment in sanitizer-address/Makefile for why this is here\n EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type cdylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n \t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n-endif"}, {"sha": "b382ff5e7b24f2a728e87e40c6b88e20a421d6ec", "filename": "src/test/run-make-fulldeps/sanitizer-dylib-link/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,3 +1,5 @@\n+# needs-sanitizer-support\n+\n -include ../tools.mk\n \n LOG := $(TMPDIR)/log.txt\n@@ -8,15 +10,11 @@ LOG := $(TMPDIR)/log.txt\n # is correctly detected.\n \n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(RUSTC_SANITIZER_SUPPORT)\n-\n # See comment in sanitizer-address/Makefile for why this is here\n EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type dylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n \t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n-endif"}, {"sha": "9581ac565ea0221441fd88ce1feb1200c8d9a94b", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-cratetype/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,18 +1,16 @@\n+# needs-sanitizer-support\n+\n -include ../tools.mk\n \n # NOTE the address sanitizer only supports x86_64 linux and macOS\n \n ifeq ($(TARGET),x86_64-apple-darwin)\n-ASAN_SUPPORT=$(RUSTC_SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=-C rpath\n else\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(RUSTC_SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=\n endif\n endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -Z sanitizer=address --crate-type proc-macro --target $(TARGET) hello.rs 2>&1 | $(CGREP) '-Z sanitizer'\n-endif"}, {"sha": "101e8272ab91e40114655aef9eeed17c77b28fe4", "filename": "src/test/run-make-fulldeps/sanitizer-leak/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,12 +1,11 @@\n -include ../tools.mk\n \n+# needs-sanitizer-support\n # only-linux\n # only-x86_64\n # ignore-test\n # FIXME(#46126) ThinLTO for libstd broke this test\n \n all:\n-ifdef RUSTC_SANITIZER_SUPPORT\n \t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) librustc_lsan\n \t$(TMPDIR)/leak 2>&1 | $(CGREP) 'detected memory leaks'\n-endif"}, {"sha": "b3376f8a72358d3dd80e3e07c5ae5a2c7d523e9c", "filename": "src/test/run-make-fulldeps/sanitizer-memory/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,10 +1,9 @@\n -include ../tools.mk\n \n+# needs-sanitizer-support\n # only-linux\n # only-x86_64\n \n all:\n-ifdef RUSTC_SANITIZER_SUPPORT\n \t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) librustc_msan\n \t$(TMPDIR)/uninit 2>&1 | $(CGREP) use-of-uninitialized-value\n-endif"}, {"sha": "8fa08688fdd71a35d02a8562300c6eb02213ce3f", "filename": "src/test/run-make-fulldeps/sanitizer-staticlib-link/Makefile", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc77087d6f6143927d9fe98a07ca3d12b26ce474/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile?ref=cc77087d6f6143927d9fe98a07ca3d12b26ce474", "patch": "@@ -1,18 +1,17 @@\n+# needs-sanitizer-support\n+\n -include ../tools.mk\n \n # This test builds a staticlib, then an executable that links to it.\n # The staticlib and executable both  are compiled with address sanitizer,\n # and we assert that a fault in the staticlib is correctly detected.\n \n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(RUSTC_SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=\n endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type staticlib --target $(TARGET) library.rs\n \t$(CC) program.c $(call STATICLIB,library) $(call OUT_EXE,program) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n-endif\n "}]}