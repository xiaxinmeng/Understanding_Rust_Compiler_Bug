{"sha": "6a04d1f292f14744c6b747fa39f1d1c1c20db0ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMDRkMWYyOTJmMTQ3NDRjNmI3NDdmYTM5ZjFkMWMxYzIwZGIwZWU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-23T11:32:25Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-23T11:37:29Z"}, "message": "Fix resolution of associated method calls across crates\n\nI think it'll be better to make the path resolution the number of unresolved\nsegments, not the first unresolved index; then this error could simply not have\nhappened. But I'll do that separately.", "tree": {"sha": "5efa93cfd5c474d70b850ab24cd9b1e90ff79bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5efa93cfd5c474d70b850ab24cd9b1e90ff79bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee", "html_url": "https://github.com/rust-lang/rust/commit/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d8a0982a12f3aa4b8c193a841f864b15c3cb66e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8a0982a12f3aa4b8c193a841f864b15c3cb66e", "html_url": "https://github.com/rust-lang/rust/commit/3d8a0982a12f3aa4b8c193a841f864b15c3cb66e"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "ac390c5db6682a8ecec13bd50e575db737aa3dbf", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=6a04d1f292f14744c6b747fa39f1d1c1c20db0ee", "patch": "@@ -642,7 +642,11 @@ impl ItemMap {\n                         log::debug!(\"resolving {:?} in other crate\", path);\n                         let item_map = db.item_map(module.krate);\n                         let (def, s) = item_map.resolve_path(db, *module, &path);\n-                        return ResolvePathResult::with(def, ReachedFixedPoint::Yes, s);\n+                        return ResolvePathResult::with(\n+                            def,\n+                            ReachedFixedPoint::Yes,\n+                            s.map(|s| s + i),\n+                        );\n                     }\n \n                     match self[module.module_id].items.get(&segment.name) {"}, {"sha": "34f9ccd07e43dadea7823462c91ebb361854165a", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=6a04d1f292f14744c6b747fa39f1d1c1c20db0ee", "patch": "@@ -1170,6 +1170,13 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         let (def, remaining_index) = resolved.into_inner();\n \n+        log::debug!(\n+            \"path {:?} resolved to {:?} with remaining index {:?}\",\n+            path,\n+            def,\n+            remaining_index\n+        );\n+\n         // if the remaining_index is None, we expect the path\n         // to be fully resolved, in this case we continue with\n         // the default by attempting to `take_values\u00b4 from the resolution.\n@@ -1191,6 +1198,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     // if we have more segments to process\n                     let segment = &path.segments[remaining_index];\n \n+                    log::debug!(\"looking for path segment: {:?}\", segment);\n+\n                     // Attempt to find an impl_item for the type which has a name matching\n                     // the current segment\n                     let ty = ty.iterate_impl_items(self.db, |item| match item {"}, {"sha": "77aeca6690053d72afb41c6d7c71583f163ccbf2", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a04d1f292f14744c6b747fa39f1d1c1c20db0ee/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=6a04d1f292f14744c6b747fa39f1d1c1c20db0ee", "patch": "@@ -1,8 +1,8 @@\n use std::sync::Arc;\n use std::fmt::Write;\n \n-use ra_db::{SourceDatabase, salsa::Database};\n-use ra_syntax::ast::{self, AstNode};\n+use ra_db::{SourceDatabase, salsa::Database, FilePosition};\n+use ra_syntax::{algo, ast::{self, AstNode}};\n use test_utils::covers;\n \n use crate::{\n@@ -946,6 +946,43 @@ fn test<R>(query_response: Canonical<QueryResponse<R>>) {\n     );\n }\n \n+#[test]\n+fn cross_crate_associated_method_call() {\n+    let (mut db, pos) = MockDatabase::with_position(\n+        r#\"\n+//- /main.rs\n+fn test() {\n+    let x = other_crate::foo::S::thing();\n+    x<|>;\n+}\n+\n+//- /lib.rs\n+mod foo {\n+    struct S;\n+    impl S {\n+        fn thing() -> i128 {}\n+    }\n+}\n+\"#,\n+    );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"other_crate\"]),\n+        \"other_crate\": (\"/lib.rs\", []),\n+    });\n+    assert_eq!(\"i128\", type_at_pos(&db, pos));\n+}\n+\n+fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n+    let func = source_binder::function_from_position(db, pos).unwrap();\n+    let body_syntax_mapping = func.body_syntax_mapping(db);\n+    let inference_result = func.infer(db);\n+    let (_, syntax) = func.source(db);\n+    let node = algo::find_node_at_offset::<ast::Expr>(syntax.syntax(), pos.offset).unwrap();\n+    let expr = body_syntax_mapping.node_expr(node).unwrap();\n+    let ty = &inference_result[expr];\n+    ty.to_string()\n+}\n+\n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.parse(file_id);"}]}