{"sha": "43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZjJjMTk5ZTRlODdkN2NjZDE1NjU4YzUyYWQ4ZGM1YTFkNTRmYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-19T12:17:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-19T12:17:07Z"}, "message": "Auto merge of #21282 - Aatch:init-memzero, r=alexcrichton\n\nLLVM gets overwhelmed when presented with a zeroinitializer for a large\r\ntype. In unoptimised builds, it generates a long sequence of stores to\r\nmemory. In optmised builds, it manages to generate a standard memset of\r\nzero values, but takes a long time doing so.\r\n\r\nCall out to the `llvm.memset` function to zero out the memory instead.\r\n\r\nFixes #21264", "tree": {"sha": "3da57695cf99738e7df9b11dd924598f3f35ba61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da57695cf99738e7df9b11dd924598f3f35ba61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9", "html_url": "https://github.com/rust-lang/rust/commit/43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b87900d72cf53037119e3bac1506a9786ca508a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b87900d72cf53037119e3bac1506a9786ca508a", "html_url": "https://github.com/rust-lang/rust/commit/7b87900d72cf53037119e3bac1506a9786ca508a"}, {"sha": "25a4adc62f4a743b6696a248ef365aaaaee06362", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a4adc62f4a743b6696a248ef365aaaaee06362", "html_url": "https://github.com/rust-lang/rust/commit/25a4adc62f4a743b6696a248ef365aaaaee06362"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "6d0f7746cad7548dbac2dbf43937ac67a85a83c2", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9", "patch": "@@ -361,12 +361,11 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n         (_, \"init\") => {\n             let tp_ty = *substs.types.get(FnSpace, 0);\n-            let lltp_ty = type_of::arg_type_of(ccx, tp_ty);\n-            if return_type_is_void(ccx, tp_ty) {\n-                C_nil(ccx)\n-            } else {\n-                C_null(lltp_ty)\n+            if !return_type_is_void(ccx, tp_ty) {\n+                // Just zero out the stack slot. (See comment on base::memzero for explaination)\n+                zero_mem(bcx, llresult, tp_ty);\n             }\n+            C_nil(ccx)\n         }\n         // Effectively no-ops\n         (_, \"uninit\") | (_, \"forget\") => {"}, {"sha": "0534d0c054f44df52f7607be6c6f4ae5512177da", "filename": "src/test/run-pass/init-large-type.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9/src%2Ftest%2Frun-pass%2Finit-large-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9/src%2Ftest%2Frun-pass%2Finit-large-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-large-type.rs?ref=43f2c199e4e87d7ccd15658c52ad8dc5a1d54fb9", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Makes sure that zero-initializing large types is reasonably fast,\n+// Doing it incorrectly causes massive slowdown in LLVM during\n+// optimisation.\n+\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    pub fn init<T>() -> T;\n+}\n+\n+const SIZE: usize = 1024 * 1024;\n+\n+fn main() {\n+    let _memory: [u8; SIZE] = unsafe { init() };\n+}"}]}