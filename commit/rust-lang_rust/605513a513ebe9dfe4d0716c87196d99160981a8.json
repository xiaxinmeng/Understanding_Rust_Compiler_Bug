{"sha": "605513a513ebe9dfe4d0716c87196d99160981a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNTUxM2E1MTNlYmU5ZGZlNGQwNzE2Yzg3MTk2ZDk5MTYwOTgxYTg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-26T00:43:02Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-26T03:11:39Z"}, "message": "Don't sort a `Vec` before computing its `DepTrackingHash`\n\nPreviously, we sorted the vec prior to hashing, making the hash\nindependent of the original (command-line argument) order. However, the\noriginal vec was still always kept in the original order, so we were\nrelying on the rest of the compiler always working with it in an\n'order-independent' way.\n\nThis assumption was not being upheld by the `native_libraries` query -\nthe order of the entires in its result depends on the order of entries\nin `Options.libs`. This lead to an 'unstable fingerprint' ICE when the\n`-l` arguments were re-ordered.\n\nThis PR removes the sorting logic entirely. Re-ordering command-line\narguments (without adding/removing/changing any arguments) seems like a\nreally niche use case, and correctly optimizing for it would require\nadditional work. By always hashing arguments in their original order, we\ncan entirely avoid a cause of 'unstable fingerprint' errors.", "tree": {"sha": "7a5e56ec6335e43bc0aec79e43df5794c639cce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a5e56ec6335e43bc0aec79e43df5794c639cce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/605513a513ebe9dfe4d0716c87196d99160981a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmCtvGsACgkQtAh+UQ6Y\nsWQP7g//W5hYS6EDiQBv6Y6mOtQZHSJm5da0vwy/mVAcK5GXbVuPsnv4kT8FP1pA\nR/vwcJJA/tJucqDGfLiYVWcpPk29F2s1/GWbSBmJR3Y5Zm11TY2Ee0S4szO7foev\n18q+MO7MC7PgQa3YZo6T3c7f60qEML5TbOk4cX5R7zUy7R3jwDmxIwpUu0XEdSdC\nHIj6dhAsofRXcU8P/7mqjx1T8+YuAPeiZZrf5ACDdDbsijZ+D/jl1sEs/b7mjji8\nEfPiVS/A6OeL7zRfe1Y6xt66uebsAgjeh7uXT42yYw0e7PzqnyoPrzzC1cLT/XLw\n4tlL/r4JLDxtYgXFfJYgcE9fjJEkpu3cxd8tlt6pm1UkQTL9e57faQobOFRf+2yT\nnC58EPpzofrr5kmkLg1c2+qfbRIuw5ldlvivyE1S8NQmNcMKFcKSurdh3mSEHX2Y\nKE4u/ewDQKLae9a267VhDKYa/clMqhe7s92Iio+QdGEg2Mmf/z3/bNadQiM8xNZK\n6JGgJeo9HUs3r/xugjm07iSls3MO92OHcgfULLEIroZnkBy2loaYz+FbryGzVoeX\n8GcBDtZHnzm6vsH1iOOZoRVjmei6mAXanKOMgx2eUpIOQz17Bt4lKL0J+jpmr179\njzXzdGjGd3Aoyk5VQkTYqQlCn0NDSjLvBA3AXNf6wFfOUed4vdY=\n=fcrl\n-----END PGP SIGNATURE-----", "payload": "tree 7a5e56ec6335e43bc0aec79e43df5794c639cce7\nparent ff2c947c00f867b9f012e28ba88cecfbe556f904\nauthor Aaron Hill <aa1ronham@gmail.com> 1621989782 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1621998699 -0500\n\nDon't sort a `Vec` before computing its `DepTrackingHash`\n\nPreviously, we sorted the vec prior to hashing, making the hash\nindependent of the original (command-line argument) order. However, the\noriginal vec was still always kept in the original order, so we were\nrelying on the rest of the compiler always working with it in an\n'order-independent' way.\n\nThis assumption was not being upheld by the `native_libraries` query -\nthe order of the entires in its result depends on the order of entries\nin `Options.libs`. This lead to an 'unstable fingerprint' ICE when the\n`-l` arguments were re-ordered.\n\nThis PR removes the sorting logic entirely. Re-ordering command-line\narguments (without adding/removing/changing any arguments) seems like a\nreally niche use case, and correctly optimizing for it would require\nadditional work. By always hashing arguments in their original order, we\ncan entirely avoid a cause of 'unstable fingerprint' errors.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/605513a513ebe9dfe4d0716c87196d99160981a8", "html_url": "https://github.com/rust-lang/rust/commit/605513a513ebe9dfe4d0716c87196d99160981a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/605513a513ebe9dfe4d0716c87196d99160981a8/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2c947c00f867b9f012e28ba88cecfbe556f904", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2c947c00f867b9f012e28ba88cecfbe556f904", "html_url": "https://github.com/rust-lang/rust/commit/ff2c947c00f867b9f012e28ba88cecfbe556f904"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "5d8a6084f2e0b486809c8705314e423618cbeab3", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/605513a513ebe9dfe4d0716c87196d99160981a8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605513a513ebe9dfe4d0716c87196d99160981a8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=605513a513ebe9dfe4d0716c87196d99160981a8", "patch": "@@ -252,7 +252,8 @@ fn test_lints_tracking_hash_different_construction_order() {\n         (String::from(\"d\"), Level::Forbid),\n     ];\n \n-    assert_same_hash(&v1, &v2);\n+    // The hash should be order-dependent\n+    assert_different_hash(&v1, &v2);\n }\n \n #[test]\n@@ -491,9 +492,10 @@ fn test_native_libs_tracking_hash_different_order() {\n         },\n     ];\n \n-    assert_same_hash(&v1, &v2);\n-    assert_same_hash(&v1, &v3);\n-    assert_same_hash(&v2, &v3);\n+    // The hash should be order-dependent\n+    assert_different_hash(&v1, &v2);\n+    assert_different_hash(&v1, &v3);\n+    assert_different_hash(&v2, &v3);\n }\n \n #[test]"}, {"sha": "52f8b536f4aad7074be615dd90d79c155bb5d30e", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/605513a513ebe9dfe4d0716c87196d99160981a8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605513a513ebe9dfe4d0716c87196d99160981a8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=605513a513ebe9dfe4d0716c87196d99160981a8", "patch": "@@ -2427,22 +2427,6 @@ crate mod dep_tracking {\n         )+};\n     }\n \n-    macro_rules! impl_dep_tracking_hash_for_sortable_vec_of {\n-        ($($t:ty),+ $(,)?) => {$(\n-            impl DepTrackingHash for Vec<$t> {\n-                fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n-                    let mut elems: Vec<&$t> = self.iter().collect();\n-                    elems.sort();\n-                    Hash::hash(&elems.len(), hasher);\n-                    for (index, elem) in elems.iter().enumerate() {\n-                        Hash::hash(&index, hasher);\n-                        DepTrackingHash::hash(*elem, hasher, error_format);\n-                    }\n-                }\n-            }\n-        )+};\n-    }\n-\n     impl_dep_tracking_hash_via_hash!(\n         bool,\n         usize,\n@@ -2491,16 +2475,6 @@ crate mod dep_tracking {\n         TrimmedDefPaths,\n     );\n \n-    impl_dep_tracking_hash_for_sortable_vec_of!(\n-        String,\n-        PathBuf,\n-        (PathBuf, PathBuf),\n-        CrateType,\n-        NativeLib,\n-        (String, lint::Level),\n-        (String, u64)\n-    );\n-\n     impl<T1, T2> DepTrackingHash for (T1, T2)\n     where\n         T1: DepTrackingHash,\n@@ -2530,6 +2504,16 @@ crate mod dep_tracking {\n         }\n     }\n \n+    impl<T: DepTrackingHash> DepTrackingHash for Vec<T> {\n+        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n+            Hash::hash(&self.len(), hasher);\n+            for (index, elem) in self.iter().enumerate() {\n+                Hash::hash(&index, hasher);\n+                DepTrackingHash::hash(elem, hasher, error_format);\n+            }\n+        }\n+    }\n+\n     // This is a stable hash because BTreeMap is a sorted container\n     crate fn stable_hash(\n         sub_hashes: BTreeMap<&'static str, &dyn DepTrackingHash>,"}, {"sha": "57cde5f7c6e48609c0d9e1cc4621e151e8b3eb84", "filename": "src/test/incremental/link_order/auxiliary/my_lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/605513a513ebe9dfe4d0716c87196d99160981a8/src%2Ftest%2Fincremental%2Flink_order%2Fauxiliary%2Fmy_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605513a513ebe9dfe4d0716c87196d99160981a8/src%2Ftest%2Fincremental%2Flink_order%2Fauxiliary%2Fmy_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Flink_order%2Fauxiliary%2Fmy_lib.rs?ref=605513a513ebe9dfe4d0716c87196d99160981a8", "patch": "@@ -0,0 +1,3 @@\n+// no-prefer-dynamic\n+//[cfail1] compile-flags: -lbar -lfoo --crate-type lib\n+//[cfail2] compile-flags: -lfoo -lbar --crate-type lib"}, {"sha": "d211c295bc49fd340b88f61205a5b4ab262dfa1f", "filename": "src/test/incremental/link_order/main.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/605513a513ebe9dfe4d0716c87196d99160981a8/src%2Ftest%2Fincremental%2Flink_order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605513a513ebe9dfe4d0716c87196d99160981a8/src%2Ftest%2Fincremental%2Flink_order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Flink_order%2Fmain.rs?ref=605513a513ebe9dfe4d0716c87196d99160981a8", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:my_lib.rs\n+// error-pattern: error: linking with\n+// revisions:cfail1 cfail2\n+// compile-flags:-Z query-dep-graph\n+\n+// Tests that re-ordering the `-l` arguments used\n+// when compiling an external dependency does not lead to\n+// an 'unstable fingerprint' error.\n+\n+extern crate my_lib;\n+\n+fn main() {}"}]}