{"sha": "17a951c7bf8c302a964a611c6ee1d46c461c50a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YTk1MWM3YmY4YzMwMmE5NjRhNjExYzZlZTFkNDZjNDYxYzUwYTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-28T22:16:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-06T00:29:16Z"}, "message": "Remove unused upcalls\n\nThe main one removed is rust_upcall_reset_stack_limit (continuation of #10156),\nand this also removes the upcall_trace function. The was hidden behind a\n`-Z trace` flag, but if you attempt to use this now you'll get a linker error\nbecause there is no implementation of the 'upcall_trace' function. Due to this\nno longer working, I decided to remove it entirely from the compiler (I'm also a\nlittle unsure on what it did in the first place).", "tree": {"sha": "52deddf501dbdc9e698892e9233c959a74f06e53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52deddf501dbdc9e698892e9233c959a74f06e53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a951c7bf8c302a964a611c6ee1d46c461c50a3", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a951c7bf8c302a964a611c6ee1d46c461c50a3", "html_url": "https://github.com/rust-lang/rust/commit/17a951c7bf8c302a964a611c6ee1d46c461c50a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a951c7bf8c302a964a611c6ee1d46c461c50a3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b34ba242d7372b779bf50682b9401b61183828e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b34ba242d7372b779bf50682b9401b61183828e", "html_url": "https://github.com/rust-lang/rust/commit/6b34ba242d7372b779bf50682b9401b61183828e"}], "stats": {"total": 179, "additions": 46, "deletions": 133}, "files": [{"sha": "42b1a551805aff93816a3e76b94d20e74f68f1b7", "filename": "mk/llvm.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -37,7 +37,9 @@ endif\n # dependencies. In these cases, commit a change that touches\n # the stamp in the source dir.\n $$(LLVM_STAMP_$(1)): $(S)src/rustllvm/llvm-auto-clean-trigger\n+\t@$$(call E, make: cleaning llvm)\n \t$(Q)$(MAKE) clean-llvm\n+\t@$$(call E, make: done cleaning llvm)\n \ttouch $$@\n \n endef"}, {"sha": "1cb10d59e59c9f35f25136697bf24f69b3be5648", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -598,8 +598,8 @@ pub fn sanitize(s: &str) -> ~str {\n             ',' => result.push_str(\"$C$\"),\n \n             // '.' doesn't occur in types and functions, so reuse it\n-            // for ':'\n-            ':' => result.push_char('.'),\n+            // for ':' and '-'\n+            '-' | ':' => result.push_char('.'),\n \n             // These are legal symbols\n             'a' .. 'z'"}, {"sha": "730ceba12c786808231c70224556247abfcd1056", "filename": "src/librustc/back/upcall.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fupcall.rs?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -15,22 +15,10 @@ use middle::trans::type_::Type;\n use lib::llvm::{ModuleRef, ValueRef};\n \n pub struct Upcalls {\n-    trace: ValueRef,\n     rust_personality: ValueRef,\n-    reset_stack_limit: ValueRef\n }\n \n macro_rules! upcall (\n-    (fn $name:ident($($arg:expr),+) -> $ret:expr) => ({\n-        let fn_ty = Type::func([ $($arg),* ], &$ret);\n-        base::decl_cdecl_fn(llmod, ~\"upcall_\" + stringify!($name), fn_ty)\n-    });\n-    (nothrow fn $name:ident($($arg:expr),+) -> $ret:expr) => ({\n-        let fn_ty = Type::func([ $($arg),* ], &$ret);\n-        let decl = base::decl_cdecl_fn(llmod, ~\"upcall_\" + stringify!($name), fn_ty);\n-        base::set_no_unwind(decl);\n-        decl\n-    });\n     (nothrow fn $name:ident -> $ret:expr) => ({\n         let fn_ty = Type::func([], &$ret);\n         let decl = base::decl_cdecl_fn(llmod, ~\"upcall_\" + stringify!($name), fn_ty);\n@@ -39,13 +27,9 @@ macro_rules! upcall (\n     })\n )\n \n-pub fn declare_upcalls(targ_cfg: @session::config, llmod: ModuleRef) -> @Upcalls {\n-    let opaque_ptr = Type::i8().ptr_to();\n-    let int_ty = Type::int(targ_cfg.arch);\n-\n+pub fn declare_upcalls(_targ_cfg: @session::config,\n+                       llmod: ModuleRef) -> @Upcalls {\n     @Upcalls {\n-        trace: upcall!(fn trace(opaque_ptr, opaque_ptr, int_ty) -> Type::void()),\n         rust_personality: upcall!(nothrow fn rust_personality -> Type::i32()),\n-        reset_stack_limit: upcall!(nothrow fn reset_stack_limit -> Type::void())\n     }\n }"}, {"sha": "6a4755344eff45241c2d49c6c1296256aecca0ef", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -44,29 +44,28 @@ pub static time_llvm_passes:        uint = 1 <<  3;\n pub static trans_stats:             uint = 1 <<  4;\n pub static asm_comments:            uint = 1 <<  5;\n pub static no_verify:               uint = 1 <<  6;\n-pub static trace:                   uint = 1 <<  7;\n-pub static coherence:               uint = 1 <<  8;\n-pub static borrowck_stats:          uint = 1 <<  9;\n-pub static borrowck_note_pure:      uint = 1 << 10;\n-pub static borrowck_note_loan:      uint = 1 << 11;\n-pub static no_landing_pads:         uint = 1 << 12;\n-pub static debug_llvm:              uint = 1 << 13;\n-pub static count_type_sizes:        uint = 1 << 14;\n-pub static meta_stats:              uint = 1 << 15;\n-pub static no_opt:                  uint = 1 << 16;\n-pub static gc:                      uint = 1 << 17;\n-pub static debug_info:              uint = 1 << 18;\n-pub static extra_debug_info:        uint = 1 << 19;\n-pub static print_link_args:         uint = 1 << 20;\n-pub static no_debug_borrows:        uint = 1 << 21;\n-pub static lint_llvm:               uint = 1 << 22;\n-pub static print_llvm_passes:       uint = 1 << 23;\n-pub static no_vectorize_loops:      uint = 1 << 24;\n-pub static no_vectorize_slp:        uint = 1 << 25;\n-pub static no_prepopulate_passes:   uint = 1 << 26;\n-pub static use_softfp:              uint = 1 << 27;\n-pub static gen_crate_map:           uint = 1 << 28;\n-pub static prefer_dynamic:          uint = 1 << 29;\n+pub static coherence:               uint = 1 <<  7;\n+pub static borrowck_stats:          uint = 1 <<  8;\n+pub static borrowck_note_pure:      uint = 1 <<  9;\n+pub static borrowck_note_loan:      uint = 1 << 10;\n+pub static no_landing_pads:         uint = 1 << 11;\n+pub static debug_llvm:              uint = 1 << 12;\n+pub static count_type_sizes:        uint = 1 << 13;\n+pub static meta_stats:              uint = 1 << 14;\n+pub static no_opt:                  uint = 1 << 15;\n+pub static gc:                      uint = 1 << 16;\n+pub static debug_info:              uint = 1 << 17;\n+pub static extra_debug_info:        uint = 1 << 18;\n+pub static print_link_args:         uint = 1 << 19;\n+pub static no_debug_borrows:        uint = 1 << 20;\n+pub static lint_llvm:               uint = 1 << 21;\n+pub static print_llvm_passes:       uint = 1 << 22;\n+pub static no_vectorize_loops:      uint = 1 << 23;\n+pub static no_vectorize_slp:        uint = 1 << 24;\n+pub static no_prepopulate_passes:   uint = 1 << 25;\n+pub static use_softfp:              uint = 1 << 26;\n+pub static gen_crate_map:           uint = 1 << 27;\n+pub static prefer_dynamic:          uint = 1 << 28;\n \n pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n     ~[(\"verbose\", \"in general, enable more debug printouts\", verbose),\n@@ -78,7 +77,6 @@ pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n      (\"trans-stats\", \"gather trans statistics\", trans_stats),\n      (\"asm-comments\", \"generate comments into the assembly (may change behavior)\", asm_comments),\n      (\"no-verify\", \"skip LLVM verification\", no_verify),\n-     (\"trace\", \"emit trace logs\", trace),\n      (\"coherence\", \"perform coherence checking\", coherence),\n      (\"borrowck-stats\", \"gather borrowck statistics\",  borrowck_stats),\n      (\"borrowck-note-pure\", \"note where purity is req'd\",\n@@ -308,7 +306,6 @@ impl Session_ {\n     pub fn asm_comments(&self) -> bool { self.debugging_opt(asm_comments) }\n     pub fn no_verify(&self) -> bool { self.debugging_opt(no_verify) }\n     pub fn lint_llvm(&self) -> bool { self.debugging_opt(lint_llvm) }\n-    pub fn trace(&self) -> bool { self.debugging_opt(trace) }\n     pub fn coherence(&self) -> bool { self.debugging_opt(coherence) }\n     pub fn borrowck_stats(&self) -> bool { self.debugging_opt(borrowck_stats) }\n     pub fn borrowck_note_pure(&self) -> bool {"}, {"sha": "72b9fc83c4ab881fa8ee23db287b3451abff79fa", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 14, "deletions": 48, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -1018,11 +1018,6 @@ pub fn get_landing_pad(bcx: @mut Block) -> BasicBlockRef {\n     // The landing pad block is a cleanup\n     SetCleanup(pad_bcx, llretval);\n \n-    // Because we may have unwound across a stack boundary, we must call into\n-    // the runtime to figure out which stack segment we are on and place the\n-    // stack limit back into the TLS.\n-    Call(pad_bcx, bcx.ccx().upcalls.reset_stack_limit, [], []);\n-\n     // We store the retval in a function-central alloca, so that calls to\n     // Resume can find it.\n     match bcx.fcx.personality {\n@@ -1097,28 +1092,6 @@ pub fn load_if_immediate(cx: @mut Block, v: ValueRef, t: ty::t) -> ValueRef {\n     return v;\n }\n \n-pub fn trans_trace(bcx: @mut Block, sp_opt: Option<Span>, trace_str: @str) {\n-    if !bcx.sess().trace() { return; }\n-    let _icx = push_ctxt(\"trans_trace\");\n-    add_comment(bcx, trace_str);\n-    let V_trace_str = C_cstr(bcx.ccx(), trace_str);\n-    let (V_filename, V_line) = match sp_opt {\n-      Some(sp) => {\n-        let sess = bcx.sess();\n-        let loc = sess.parse_sess.cm.lookup_char_pos(sp.lo);\n-        (C_cstr(bcx.ccx(), loc.file.name), loc.line as int)\n-      }\n-      None => {\n-        (C_cstr(bcx.ccx(), @\"<runtime>\"), 0)\n-      }\n-    };\n-    let ccx = bcx.ccx();\n-    let V_trace_str = PointerCast(bcx, V_trace_str, Type::i8p());\n-    let V_filename = PointerCast(bcx, V_filename, Type::i8p());\n-    let args = ~[V_trace_str, V_filename, C_int(ccx, V_line)];\n-    Call(bcx, ccx.upcalls.trace, args, []);\n-}\n-\n pub fn ignore_lhs(_bcx: @mut Block, local: &ast::Local) -> bool {\n     match local.pat.node {\n         ast::PatWild => true, _ => false\n@@ -1313,12 +1286,6 @@ pub fn cleanup_and_leave(bcx: @mut Block,\n     loop {\n         debug!(\"cleanup_and_leave: leaving {}\", cur.to_str());\n \n-        if bcx.sess().trace() {\n-            trans_trace(\n-                bcx, None,\n-                (format!(\"cleanup_and_leave({})\", cur.to_str())).to_managed());\n-        }\n-\n         let mut cur_scope = cur.scope;\n         loop {\n             cur_scope = match cur_scope {\n@@ -1387,12 +1354,6 @@ pub fn cleanup_block(bcx: @mut Block, upto: Option<BasicBlockRef>) -> @mut Block\n     loop {\n         debug!(\"cleanup_block: {}\", cur.to_str());\n \n-        if bcx.sess().trace() {\n-            trans_trace(\n-                bcx, None,\n-                (format!(\"cleanup_block({})\", cur.to_str())).to_managed());\n-        }\n-\n         let mut cur_scope = cur.scope;\n         loop {\n             cur_scope = match cur_scope {\n@@ -2961,6 +2922,11 @@ pub fn create_module_map(ccx: &mut CrateContext) -> (ValueRef, uint) {\n     return (map, keys.len())\n }\n \n+pub fn symname(sess: session::Session, name: &str,\n+               hash: &str, vers: &str) -> ~str {\n+    let elt = path_name(sess.ident_of(name));\n+    link::exported_name(sess, ~[elt], hash, vers)\n+}\n \n pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n                       llmod: ModuleRef) -> ValueRef {\n@@ -2969,13 +2935,14 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     let mut n_subcrates = 1;\n     let cstore = sess.cstore;\n     while cstore::have_crate_data(cstore, n_subcrates) { n_subcrates += 1; }\n-    let mapname = if *sess.building_library && !sess.gen_crate_map() {\n-        format!(\"{}_{}_{}\", mapmeta.name, mapmeta.vers, mapmeta.extras_hash)\n+    let is_top = !*sess.building_library || sess.gen_crate_map();\n+    let sym_name = if is_top {\n+        ~\"_rust_crate_map_toplevel\"\n     } else {\n-        ~\"toplevel\"\n+        symname(sess, \"_rust_crate_map_\" + mapmeta.name, mapmeta.extras_hash,\n+                mapmeta.vers)\n     };\n \n-    let sym_name = ~\"_rust_crate_map_\" + mapname;\n     let slicetype = Type::struct_([int_type, int_type], false);\n     let maptype = Type::struct_([\n         Type::i32(),        // version\n@@ -2990,7 +2957,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     });\n     // On windows we'd like to export the toplevel cratemap\n     // such that we can find it from libstd.\n-    if targ_cfg.os == OsWin32 && \"toplevel\" == mapname {\n+    if targ_cfg.os == OsWin32 && is_top {\n         lib::llvm::SetLinkage(map, lib::llvm::DLLExportLinkage);\n     } else {\n         lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n@@ -3005,10 +2972,9 @@ pub fn fill_crate_map(ccx: @mut CrateContext, map: ValueRef) {\n     let cstore = ccx.sess.cstore;\n     while cstore::have_crate_data(cstore, i) {\n         let cdata = cstore::get_crate_data(cstore, i);\n-        let nm = format!(\"_rust_crate_map_{}_{}_{}\",\n-                      cdata.name,\n-                      cstore::get_crate_vers(cstore, i),\n-                      cstore::get_crate_hash(cstore, i));\n+        let nm = symname(ccx.sess, format!(\"_rust_crate_map_{}\", cdata.name),\n+                         cstore::get_crate_hash(cstore, i),\n+                         cstore::get_crate_vers(cstore, i));\n         let cr = nm.with_c_str(|buf| {\n             unsafe {\n                 llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type.to_ref(), buf)"}, {"sha": "2c3a9e040c95949846c2cb3ec15b3e4349f8b577", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -567,8 +567,6 @@ fn trans_to_datum_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n fn trans_rvalue_datum_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n     let _icx = push_ctxt(\"trans_rvalue_datum_unadjusted\");\n \n-    trace_span!(bcx, expr.span, shorten(bcx.expr_to_str(expr)));\n-\n     match expr.node {\n         ast::ExprPath(_) | ast::ExprSelf => {\n             return trans_def_datum_unadjusted(bcx, expr, bcx.def(expr.id));\n@@ -625,8 +623,6 @@ fn trans_rvalue_stmt_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> @mut Block\n         return bcx;\n     }\n \n-    trace_span!(bcx, expr.span, shorten(bcx.expr_to_str(expr)));\n-\n     match expr.node {\n         ast::ExprBreak(label_opt) => {\n             return controlflow::trans_break(bcx, label_opt);\n@@ -676,8 +672,6 @@ fn trans_rvalue_dps_unadjusted(bcx: @mut Block, expr: &ast::Expr,\n     let _icx = push_ctxt(\"trans_rvalue_dps_unadjusted\");\n     let tcx = bcx.tcx();\n \n-    trace_span!(bcx, expr.span, shorten(bcx.expr_to_str(expr)));\n-\n     match expr.node {\n         ast::ExprParen(e) => {\n             return trans_rvalue_dps_unadjusted(bcx, e, dest);\n@@ -895,8 +889,6 @@ fn trans_lvalue_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n     debug!(\"trans_lvalue(expr={})\", bcx.expr_to_str(expr));\n     let _indenter = indenter();\n \n-    trace_span!(bcx, expr.span, shorten(bcx.expr_to_str(expr)));\n-\n     return match expr.node {\n         ast::ExprParen(e) => {\n             trans_lvalue_unadjusted(bcx, e)"}, {"sha": "938484fd44cebfb3cf925086efabc4a8d5fcb25b", "filename": "src/librustc/middle/trans/macros.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmacros.rs?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -29,25 +29,3 @@ macro_rules! unpack_result(\n         }\n     )\n )\n-\n-macro_rules! trace_span(\n-    ($bcx: ident, $sp: expr, $str: expr) => (\n-        {\n-            let bcx = $bcx;\n-            if bcx.sess().trace() {\n-                trans_trace(bcx, Some($sp), $str);\n-            }\n-        }\n-    )\n-)\n-\n-macro_rules! trace(\n-    ($bcx: ident, $str: expr) => (\n-        {\n-            let bcx = $bcx;\n-            if bcx.sess().trace() {\n-                trans_trace(bcx, None, $str);\n-            }\n-        }\n-    )\n-)"}, {"sha": "2da2da80fdd6a9a144f69514dc852dbca0cd9a94", "filename": "src/librustc/middle/trans/write_guard.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -114,13 +114,6 @@ fn root(datum: &Datum,\n     debug!(\"write_guard::root(root_key={:?}, root_info={:?}, datum={:?})\",\n            root_key, root_info, datum.to_str(bcx.ccx()));\n \n-    if bcx.sess().trace() {\n-        trans_trace(\n-            bcx, None,\n-            (format!(\"preserving until end of scope {}\",\n-                  root_info.scope)).to_managed());\n-    }\n-\n     // First, root the datum. Note that we must zero this value,\n     // because sometimes we root on one path but not another.\n     // See e.g. #4904."}, {"sha": "eac6ff795c40778683e42b0c6ab6f6adaceb391d", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -1 +1 @@\n-Subproject commit 9e85884132d277efeb507d0aeaa160ba201d054f\n+Subproject commit eac6ff795c40778683e42b0c6ab6f6adaceb391d"}, {"sha": "18b71fbb1790812b0110244dbf36a66881174b19", "filename": "src/rt/rust_upcall.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Frt%2Frust_upcall.c", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Frt%2Frust_upcall.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.c?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -51,7 +51,7 @@ struct s_rust_personality_args {\n     struct _Unwind_Context *context;\n };\n \n-void\n+static void\n upcall_s_rust_personality(struct s_rust_personality_args *args) {\n     args->retval = PERSONALITY_FUNC(args->version,\n                                     args->actions,\n@@ -78,6 +78,7 @@ upcall_rust_personality(int version,\n     return args.retval;\n }\n \n+// NOTE: remove after stage0\n // Landing pads need to call this to insert the\n // correct limit into TLS.\n // NB: This must run on the Rust stack because it"}, {"sha": "bae0ad8fbc6c198e1e5ba0e426d9d317d70acf38", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/17a951c7bf8c302a964a611c6ee1d46c461c50a3/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=17a951c7bf8c302a964a611c6ee1d46c461c50a3", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2013-11-19\n+2013-12-05"}]}