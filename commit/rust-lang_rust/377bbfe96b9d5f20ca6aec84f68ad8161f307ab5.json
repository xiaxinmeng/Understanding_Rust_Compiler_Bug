{"sha": "377bbfe96b9d5f20ca6aec84f68ad8161f307ab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3N2JiZmU5NmI5ZDVmMjBjYTZhZWM4NGY2OGFkODE2MWYzMDdhYjU=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-02T15:45:01Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-02T15:45:01Z"}, "message": "Add a new alternative", "tree": {"sha": "d22d842cc48ee9a5849518985e5d6535e193393d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22d842cc48ee9a5849518985e5d6535e193393d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/377bbfe96b9d5f20ca6aec84f68ad8161f307ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/377bbfe96b9d5f20ca6aec84f68ad8161f307ab5", "html_url": "https://github.com/rust-lang/rust/commit/377bbfe96b9d5f20ca6aec84f68ad8161f307ab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/377bbfe96b9d5f20ca6aec84f68ad8161f307ab5/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2413b52b886bc9ba4db6c5bc5eb0712c6e4f554a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2413b52b886bc9ba4db6c5bc5eb0712c6e4f554a", "html_url": "https://github.com/rust-lang/rust/commit/2413b52b886bc9ba4db6c5bc5eb0712c6e4f554a"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "5bd35ae1ac25c1a0d3d3fe4b978506ad5b8bfbad", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/377bbfe96b9d5f20ca6aec84f68ad8161f307ab5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/377bbfe96b9d5f20ca6aec84f68ad8161f307ab5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=377bbfe96b9d5f20ca6aec84f68ad8161f307ab5", "patch": "@@ -346,6 +346,29 @@ extern \"rust-intrinsic\" {\n     /// assert_eq!(b\"Rust\", [82, 117, 116, 116]);\n     ///\n     ///\n+    /// // Turning a Vec<&T> into a Vec<Option<&T>>\n+    /// let store = [0, 1, 2, 3];\n+    /// let v_orig = store.iter().collect::<Vec<&i32>>();\n+    /// // Using transmute; Undefined Behavior\n+    /// let v_transmuted = mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n+    ///     v_orig);\n+    /// // The suggested, safe way\n+    /// let v_collected = v_orig.into_iter()\n+    ///                         .map(|r| Some(r))\n+    ///                         .collect::<Vec<Option<&i32>>>();\n+    /// // The no-copy, unsafe way, still using transmute, but not UB\n+    /// let v_no_copy = Vec::from_raw_parts(v_orig.as_mut_ptr(),\n+    ///                                     v_orig.len(),\n+    ///                                     v_orig.capacity());\n+    /// mem::forget(v_orig);\n+    /// // This is equivalent to the original, but safer, and reuses the same\n+    /// // Vec internals. Therefore the new inner type must have the exact same\n+    /// // size, and the same or lesser alignment, as the old type.\n+    /// // The same caveats exist for this method as transmute, for the original\n+    /// // inner type (`&i32`) to the converted inner type (`Option<&i32>`), so\n+    /// // read the nomicon page linked above.\n+    ///\n+    ///\n     /// // Copying an `&mut T` to reslice:\n     /// fn split_at_mut_transmute<T>(slice: &mut [T], index: usize)\n     ///                              -> (&mut [T], &mut [T]) {"}]}