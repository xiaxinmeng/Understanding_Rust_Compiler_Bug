{"sha": "bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMmYwOGMyMmZhODlkYmJjY2NjNTZhMDQyMzFjZmI2M2E4MDEzMmU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-26T18:17:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-02T17:08:59Z"}, "message": "Bless tests.", "tree": {"sha": "d718c094cb51f42862ccba56050c2421fb1e6b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d718c094cb51f42862ccba56050c2421fb1e6b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "html_url": "https://github.com/rust-lang/rust/commit/bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa2bc4f40005c7b318ec91dac3222141bf8e9833", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2bc4f40005c7b318ec91dac3222141bf8e9833", "html_url": "https://github.com/rust-lang/rust/commit/fa2bc4f40005c7b318ec91dac3222141bf8e9833"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "46b128c08fef959a989826852a1d1c3bcb700124", "filename": "src/test/ui/coherence/coherence_inherent.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr?ref=bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "patch": "@@ -5,8 +5,10 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use Lib::TheTrait;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use Lib::TheTrait;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "af0ef3b693262217f7581a2aaa07979df1e8bbbd", "filename": "src/test/ui/coherence/coherence_inherent_cc.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr?ref=bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "patch": "@@ -5,8 +5,10 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use coherence_inherent_cc_lib::TheTrait;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use coherence_inherent_cc_lib::TheTrait;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0e9b63d6370d6738d2d3c51d9cdff0baea1077a9", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "patch": "@@ -23,9 +23,11 @@ LL |         ().clone()\n    |            ^^^^^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use std::clone::Clone;`\n    = note: this error originates in the macro `::bar::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use std::clone::Clone;\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "77ab6e589e07c00f7011a7bf38a5d21d6a34d79e", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "patch": "@@ -11,9 +11,11 @@ LL |     pub macro m() { ().f() }\n    |                        ^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use foo::T;`\n    = note: this error originates in the macro `::baz::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use foo::T;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0ccf69dc0607615580af4d1ee77df8d12710ff69", "filename": "src/test/ui/issues/issue-10465.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr?ref=bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "patch": "@@ -5,8 +5,10 @@ LL |             b.foo();\n    |               ^^^ method not found in `&B`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use a::A;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |         use a::A;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "eb4e43aaec35b4814876287c9268e0500e23c1dc", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "patch": "@@ -8,8 +8,10 @@ LL |         x.foobar();\n    |           ^^^^^^ method not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use crate::foo::foobar::Foobar;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use crate::foo::foobar::Foobar;\n+   |\n \n error[E0599]: no method named `bar` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:28:7"}, {"sha": "e4662b430dccc7bdd9131fc4996955c95b5fde11", "filename": "src/test/ui/rust-2021/future-prelude-collision-shadow.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr?ref=bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "patch": "@@ -15,9 +15,6 @@ LL |     fn try_into(self) -> Result<T, Self::Error>;\n    |        the method is available for `Rc<u8>` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n-           candidate #1: `use crate::m::TryIntoU32;`\n-           candidate #2: `use std::convert::TryInto;`\n help: consider wrapping the receiver expression with the appropriate type\n    |\n LL |         let _: u32 = Box::new(3u8).try_into().unwrap();\n@@ -34,6 +31,12 @@ help: consider wrapping the receiver expression with the appropriate type\n    |\n LL |         let _: u32 = Rc::new(3u8).try_into().unwrap();\n    |                      ++++++++   +\n+help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n+   |\n+LL |     use crate::m::TryIntoU32;\n+   |\n+LL |     use std::convert::TryInto;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "7faede4e6d0a9ac40af902e954e3191861237f2b", "filename": "src/test/ui/underscore-imports/shadow.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd2f08c22fa89dbbcccc56a04231cfb63a80132e/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr?ref=bd2f08c22fa89dbbcccc56a04231cfb63a80132e", "patch": "@@ -5,8 +5,10 @@ LL |         x.deref();\n    |           ^^^^^ method not found in `&()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use std::ops::Deref;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use std::ops::Deref;\n+   |\n \n error: aborting due to previous error\n "}]}