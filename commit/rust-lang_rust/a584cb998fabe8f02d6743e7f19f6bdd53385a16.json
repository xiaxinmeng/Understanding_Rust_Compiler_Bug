{"sha": "a584cb998fabe8f02d6743e7f19f6bdd53385a16", "node_id": "C_kwDOAAsO6NoAKGE1ODRjYjk5OGZhYmU4ZjAyZDY3NDNlN2YxOWY2YmRkNTMzODVhMTY", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-04-11T01:02:11Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-04-11T01:02:11Z"}, "message": "Infer types of nested RPITs", "tree": {"sha": "fade5bff992f932a7a394ce8bdd58c519b51129e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fade5bff992f932a7a394ce8bdd58c519b51129e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a584cb998fabe8f02d6743e7f19f6bdd53385a16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a584cb998fabe8f02d6743e7f19f6bdd53385a16", "html_url": "https://github.com/rust-lang/rust/commit/a584cb998fabe8f02d6743e7f19f6bdd53385a16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a584cb998fabe8f02d6743e7f19f6bdd53385a16/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44cf8ef49ad3db5e82f18a89b20e925353389121", "url": "https://api.github.com/repos/rust-lang/rust/commits/44cf8ef49ad3db5e82f18a89b20e925353389121", "html_url": "https://github.com/rust-lang/rust/commit/44cf8ef49ad3db5e82f18a89b20e925353389121"}], "stats": {"total": 139, "additions": 105, "deletions": 34}, "files": [{"sha": "873936b5b761092c5e540bfc2243310777fc525d", "filename": "crates/hir-def/src/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Fhir-def%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Fhir-def%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flayout.rs?ref=a584cb998fabe8f02d6743e7f19f6bdd53385a16", "patch": "@@ -92,6 +92,7 @@ pub enum LayoutError {\n     SizeOverflow,\n     TargetLayoutNotAvailable,\n     HasPlaceholder,\n+    HasErrorType,\n     NotImplemented,\n     Unknown,\n }"}, {"sha": "d90ca77b55c0d469013dab5e7b4d33d16a5bcbad", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 55, "deletions": 31, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=a584cb998fabe8f02d6743e7f19f6bdd53385a16", "patch": "@@ -33,7 +33,7 @@ use hir_def::{\n     TraitId, TypeAliasId, VariantId,\n };\n use hir_expand::name::{name, Name};\n-use la_arena::ArenaMap;\n+use la_arena::{ArenaMap, Entry};\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::{always, never};\n \n@@ -676,36 +676,16 @@ impl<'a> InferenceContext<'a> {\n         let return_ty = if let Some(rpits) = self.db.return_type_impl_traits(func) {\n             // RPIT opaque types use substitution of their parent function.\n             let fn_placeholders = TyBuilder::placeholder_subst(self.db, func);\n-            fold_tys(\n-                return_ty,\n-                |ty, _| {\n-                    let opaque_ty_id = match ty.kind(Interner) {\n-                        TyKind::OpaqueType(opaque_ty_id, _) => *opaque_ty_id,\n-                        _ => return ty,\n-                    };\n-                    let idx = match self.db.lookup_intern_impl_trait_id(opaque_ty_id.into()) {\n-                        ImplTraitId::ReturnTypeImplTrait(_, idx) => idx,\n-                        _ => unreachable!(),\n-                    };\n-                    let bounds = (*rpits).map_ref(|rpits| {\n-                        rpits.impl_traits[idx].bounds.map_ref(|it| it.into_iter())\n-                    });\n-                    let var = self.table.new_type_var();\n-                    let var_subst = Substitution::from1(Interner, var.clone());\n-                    for bound in bounds {\n-                        let predicate =\n-                            bound.map(|it| it.cloned()).substitute(Interner, &fn_placeholders);\n-                        let (var_predicate, binders) = predicate\n-                            .substitute(Interner, &var_subst)\n-                            .into_value_and_skipped_binders();\n-                        always!(binders.is_empty(Interner)); // quantified where clauses not yet handled\n-                        self.push_obligation(var_predicate.cast(Interner));\n-                    }\n-                    self.result.type_of_rpit.insert(idx, var.clone());\n-                    var\n-                },\n-                DebruijnIndex::INNERMOST,\n-            )\n+            let result =\n+                self.insert_inference_vars_for_rpit(return_ty, rpits.clone(), fn_placeholders);\n+            let rpits = rpits.skip_binders();\n+            for (id, _) in rpits.impl_traits.iter() {\n+                if let Entry::Vacant(e) = self.result.type_of_rpit.entry(id) {\n+                    never!(\"Missed RPIT in `insert_inference_vars_for_rpit`\");\n+                    e.insert(TyKind::Error.intern(Interner));\n+                }\n+            }\n+            result\n         } else {\n             return_ty\n         };\n@@ -714,6 +694,50 @@ impl<'a> InferenceContext<'a> {\n         self.return_coercion = Some(CoerceMany::new(self.return_ty.clone()));\n     }\n \n+    fn insert_inference_vars_for_rpit<T>(\n+        &mut self,\n+        t: T,\n+        rpits: Arc<chalk_ir::Binders<crate::ReturnTypeImplTraits>>,\n+        fn_placeholders: Substitution,\n+    ) -> T\n+    where\n+        T: crate::HasInterner<Interner = Interner> + crate::TypeFoldable<Interner>,\n+    {\n+        fold_tys(\n+            t,\n+            |ty, _| {\n+                let opaque_ty_id = match ty.kind(Interner) {\n+                    TyKind::OpaqueType(opaque_ty_id, _) => *opaque_ty_id,\n+                    _ => return ty,\n+                };\n+                let idx = match self.db.lookup_intern_impl_trait_id(opaque_ty_id.into()) {\n+                    ImplTraitId::ReturnTypeImplTrait(_, idx) => idx,\n+                    _ => unreachable!(),\n+                };\n+                let bounds = (*rpits)\n+                    .map_ref(|rpits| rpits.impl_traits[idx].bounds.map_ref(|it| it.into_iter()));\n+                let var = self.table.new_type_var();\n+                let var_subst = Substitution::from1(Interner, var.clone());\n+                for bound in bounds {\n+                    let predicate =\n+                        bound.map(|it| it.cloned()).substitute(Interner, &fn_placeholders);\n+                    let (var_predicate, binders) =\n+                        predicate.substitute(Interner, &var_subst).into_value_and_skipped_binders();\n+                    always!(binders.is_empty(Interner)); // quantified where clauses not yet handled\n+                    let var_predicate = self.insert_inference_vars_for_rpit(\n+                        var_predicate,\n+                        rpits.clone(),\n+                        fn_placeholders.clone(),\n+                    );\n+                    self.push_obligation(var_predicate.cast(Interner));\n+                }\n+                self.result.type_of_rpit.insert(idx, var.clone());\n+                var\n+            },\n+            DebruijnIndex::INNERMOST,\n+        )\n+    }\n+\n     fn infer_body(&mut self) {\n         match self.return_coercion {\n             Some(_) => self.infer_return(self.body.body_expr),"}, {"sha": "23cad5e6fd38ae96472c8a352ac7e511d9f2ec82", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=a584cb998fabe8f02d6743e7f19f6bdd53385a16", "patch": "@@ -245,8 +245,8 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Lay\n         TyKind::Generator(_, _) | TyKind::GeneratorWitness(_, _) => {\n             return Err(LayoutError::NotImplemented)\n         }\n+        TyKind::Error => return Err(LayoutError::HasErrorType),\n         TyKind::AssociatedType(_, _)\n-        | TyKind::Error\n         | TyKind::Alias(_)\n         | TyKind::Placeholder(_)\n         | TyKind::BoundVar(_)"}, {"sha": "a0ffab551802a080b0a886471ff0771cde1e853a", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=a584cb998fabe8f02d6743e7f19f6bdd53385a16", "patch": "@@ -232,6 +232,45 @@ fn return_position_impl_trait() {\n         fn foo() -> (impl T, impl T, impl T) { (2i64, 5i32, 7i32) }\n         foo()\n     }\n+    size_and_align_expr! {\n+        minicore: iterators;\n+        stmts: []\n+        trait Tr {}\n+        impl Tr for i32 {}\n+        fn foo() -> impl Iterator<Item = impl Tr> {\n+            [1, 2, 3].into_iter()\n+        }\n+        let mut iter = foo();\n+        let item = iter.next();\n+        (iter, item)\n+    }\n+    size_and_align_expr! {\n+        minicore: future;\n+        stmts: []\n+        use core::{future::Future, task::{Poll, Context}, pin::pin};\n+        use std::{task::Wake, sync::Arc};\n+        trait Tr {}\n+        impl Tr for i32 {}\n+        async fn f() -> impl Tr {\n+            2\n+        }\n+        fn unwrap_fut<T>(inp: impl Future<Output = T>) -> Poll<T> {\n+            // In a normal test we could use `loop {}` or `panic!()` here,\n+            // but rustc actually runs this code.\n+            let pinned = pin!(inp);\n+            struct EmptyWaker;\n+            impl Wake for EmptyWaker {\n+                fn wake(self: Arc<Self>) {\n+                }\n+            }\n+            let waker = Arc::new(EmptyWaker).into();\n+            let mut context = Context::from_waker(&waker);\n+            let x = pinned.poll(&mut context);\n+            x\n+        }\n+        let x = unwrap_fut(f());\n+        x\n+    }\n     size_and_align_expr! {\n         struct Foo<T>(T, T, (T, T));\n         trait T {}"}, {"sha": "308dc5892e5eed0245da4c99872bc7fa0e63346a", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a584cb998fabe8f02d6743e7f19f6bdd53385a16/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=a584cb998fabe8f02d6743e7f19f6bdd53385a16", "patch": "@@ -891,12 +891,19 @@ pub mod iter {\n                     self\n                 }\n             }\n-            pub struct IntoIter<T, const N: usize>([T; N]);\n+            struct IndexRange {\n+                start: usize,\n+                end: usize,\n+            }\n+            pub struct IntoIter<T, const N: usize> {\n+                data: [T; N],\n+                range: IndexRange,\n+            }\n             impl<T, const N: usize> IntoIterator for [T; N] {\n                 type Item = T;\n                 type IntoIter = IntoIter<T, N>;\n                 fn into_iter(self) -> I {\n-                    IntoIter(self)\n+                    IntoIter { data: self, range: IndexRange { start: 0, end: self.len() } }\n                 }\n             }\n             impl<T, const N: usize> Iterator for IntoIter<T, N> {"}]}