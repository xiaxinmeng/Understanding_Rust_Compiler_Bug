{"sha": "75fe84f4fc764e0684e7fdafbe6139cc92082a44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZmU4NGY0ZmM3NjRlMDY4NGU3ZmRhZmJlNjEzOWNjOTIwODJhNDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-16T11:15:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-16T11:15:56Z"}, "message": "factor getting the discriminant layout to a new method", "tree": {"sha": "5d01931d62d54525f8edb351f3804842006679a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d01931d62d54525f8edb351f3804842006679a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75fe84f4fc764e0684e7fdafbe6139cc92082a44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75fe84f4fc764e0684e7fdafbe6139cc92082a44", "html_url": "https://github.com/rust-lang/rust/commit/75fe84f4fc764e0684e7fdafbe6139cc92082a44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75fe84f4fc764e0684e7fdafbe6139cc92082a44/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b73f1a51dcd1011129dc5c5c55a7577134410dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b73f1a51dcd1011129dc5c5c55a7577134410dbc", "html_url": "https://github.com/rust-lang/rust/commit/b73f1a51dcd1011129dc5c5c55a7577134410dbc"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "e52feea1624c11e3b5f1912f8a199e0105483ccc", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75fe84f4fc764e0684e7fdafbe6139cc92082a44/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fe84f4fc764e0684e7fdafbe6139cc92082a44/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=75fe84f4fc764e0684e7fdafbe6139cc92082a44", "patch": "@@ -127,6 +127,7 @@ impl IntegerExt for Integer {\n \n pub trait PrimitiveExt {\n     fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;\n+    fn to_int_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;\n }\n \n impl PrimitiveExt for Primitive {\n@@ -138,6 +139,16 @@ impl PrimitiveExt for Primitive {\n             Pointer => tcx.mk_mut_ptr(tcx.mk_unit()),\n         }\n     }\n+\n+    /// Return an *integer* type matching this primitive.\n+    /// Useful in particular when dealing with enum discriminants.\n+    fn to_int_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+        match *self {\n+            Int(i, signed) => i.to_ty(tcx, signed),\n+            Pointer => tcx.types.usize,\n+            Float(..) => bug!(\"floats do not have an int type\"),\n+        }\n+    }\n }\n \n /// The first half of a fat pointer."}, {"sha": "94fbd4ac7d7f36c24428e357fb49def80b4473b5", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75fe84f4fc764e0684e7fdafbe6139cc92082a44/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fe84f4fc764e0684e7fdafbe6139cc92082a44/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=75fe84f4fc764e0684e7fdafbe6139cc92082a44", "patch": "@@ -5,7 +5,7 @@ use std::convert::TryInto;\n \n use rustc::{mir, ty};\n use rustc::ty::layout::{\n-    self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, VariantIdx,\n+    self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, PrimitiveExt, VariantIdx,\n };\n \n use rustc::mir::interpret::{\n@@ -687,13 +687,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         (dataful_variant.as_u32() as u128, dataful_variant)\n                     },\n                     Ok(raw_discr) => {\n-                        // FIXME: WTF, some discriminants don't have integer type.\n-                        use layout::Primitive;\n-                        let discr_layout = self.layout_of(match discr_layout.value {\n-                            Primitive::Int(int, signed) => int.to_ty(*self.tcx, signed),\n-                            Primitive::Pointer => self.tcx.types.usize,\n-                            Primitive::Float(..) => bug!(\"there are no float discriminants\"),\n-                        })?;\n+                        let discr_layout = self.layout_of(discr_layout.value.to_int_ty(*self.tcx))?;\n                         let discr_val = ImmTy::from_uint(raw_discr, discr_layout);\n                         // We need to use machine arithmetic.\n                         let niche_start_val = ImmTy::from_uint(niche_start, discr_layout);"}, {"sha": "9a3d70144a586da644455d48e618818998af4d52", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75fe84f4fc764e0684e7fdafbe6139cc92082a44/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fe84f4fc764e0684e7fdafbe6139cc92082a44/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=75fe84f4fc764e0684e7fdafbe6139cc92082a44", "patch": "@@ -9,7 +9,7 @@ use rustc::mir;\n use rustc::mir::interpret::truncate;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{\n-    self, Size, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx, IntegerExt\n+    self, Size, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx, PrimitiveExt\n };\n use rustc::ty::TypeFoldable;\n \n@@ -1060,14 +1060,7 @@ where\n                     variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len(),\n                 );\n                 if variant_index != dataful_variant {\n-                    // FIXME: WTF, some discriminants don't have integer type.\n-                    use layout::Primitive;\n-                    let discr_layout = self.layout_of(match discr_layout.value {\n-                        Primitive::Int(int, signed) => int.to_ty(*self.tcx, signed),\n-                        Primitive::Pointer => self.tcx.types.usize,\n-                        Primitive::Float(..) => bug!(\"there are no float discriminants\"),\n-                    })?;\n-\n+                    let discr_layout = self.layout_of(discr_layout.value.to_int_ty(*self.tcx))?;\n                     // We need to use machine arithmetic.\n                     let variants_start = niche_variants.start().as_u32();\n                     let variants_start_val = ImmTy::from_uint(variants_start, discr_layout);"}]}