{"sha": "a9976d89ed721184a95a24f109a65916f2905793", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5OTc2ZDg5ZWQ3MjExODRhOTVhMjRmMTA5YTY1OTE2ZjI5MDU3OTM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-26T20:17:35Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-29T23:37:42Z"}, "message": "rustc: move mir::SourceScopeLocalData to a field of SourceScopeData.", "tree": {"sha": "ff92db76afe5c9978396520864e5846ebfed5975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff92db76afe5c9978396520864e5846ebfed5975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9976d89ed721184a95a24f109a65916f2905793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9976d89ed721184a95a24f109a65916f2905793", "html_url": "https://github.com/rust-lang/rust/commit/a9976d89ed721184a95a24f109a65916f2905793", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9976d89ed721184a95a24f109a65916f2905793/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d85fcf52363f1237b877ea5b7b5583cd833894", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d85fcf52363f1237b877ea5b7b5583cd833894", "html_url": "https://github.com/rust-lang/rust/commit/78d85fcf52363f1237b877ea5b7b5583cd833894"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "da0cadd5cf2420326aeafcab49f461ad633ab46d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -104,10 +104,6 @@ pub struct Body<'tcx> {\n     /// and used for debuginfo. Indexed by a `SourceScope`.\n     pub source_scopes: IndexVec<SourceScope, SourceScopeData>,\n \n-    /// Crate-local information for each source scope, that can't (and\n-    /// needn't) be tracked across crates.\n-    pub source_scope_local_data: IndexVec<SourceScope, ClearCrossCrate<SourceScopeLocalData>>,\n-\n     /// The yield type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n \n@@ -167,7 +163,6 @@ impl<'tcx> Body<'tcx> {\n     pub fn new(\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n         source_scopes: IndexVec<SourceScope, SourceScopeData>,\n-        source_scope_local_data: IndexVec<SourceScope, ClearCrossCrate<SourceScopeLocalData>>,\n         local_decls: LocalDecls<'tcx>,\n         user_type_annotations: CanonicalUserTypeAnnotations<'tcx>,\n         arg_count: usize,\n@@ -188,7 +183,6 @@ impl<'tcx> Body<'tcx> {\n             phase: MirPhase::Build,\n             basic_blocks,\n             source_scopes,\n-            source_scope_local_data,\n             yield_ty: None,\n             generator_drop: None,\n             generator_layout: None,\n@@ -2034,6 +2028,10 @@ rustc_index::newtype_index! {\n pub struct SourceScopeData {\n     pub span: Span,\n     pub parent_scope: Option<SourceScope>,\n+\n+    /// Crate-local information for this source scope, that can't (and\n+    /// needn't) be tracked across crates.\n+    pub local_data: ClearCrossCrate<SourceScopeLocalData>,\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "145593f1c4d4adc839b6cb96aac54b6420a25e57", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -317,6 +317,7 @@ macro_rules! make_mir_visitor {\n                 let SourceScopeData {\n                     span,\n                     parent_scope,\n+                    local_data: _,\n                 } = scope_data;\n \n                 self.visit_span(span);"}, {"sha": "3a783f674e9ae6c75f758e87f6c86422a47388a0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -301,7 +301,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n             mbcx.report_conflicting_borrow(location, (&place, span), bk, &borrow);\n \n         let scope = mbcx.body.source_info(location).scope;\n-        let lint_root = match &mbcx.body.source_scope_local_data[scope] {\n+        let lint_root = match &mbcx.body.source_scopes[scope].local_data {\n             ClearCrossCrate::Set(data) => data.lint_root,\n             _ => id,\n         };\n@@ -338,7 +338,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let used_mut = mbcx.used_mut;\n     for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {\n         let local_decl = &mbcx.body.local_decls[local];\n-        let lint_root = match &mbcx.body.source_scope_local_data[local_decl.source_info.scope] {\n+        let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {\n             ClearCrossCrate::Set(data) => data.lint_root,\n             _ => continue,\n         };"}, {"sha": "eb9b401f27208abc5352e5e7c1e749a01e5f2da2", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -309,7 +309,6 @@ struct Builder<'a, 'tcx> {\n     /// The vector of all scopes that we have created thus far;\n     /// we track this for debuginfo later.\n     source_scopes: IndexVec<SourceScope, SourceScopeData>,\n-    source_scope_local_data: IndexVec<SourceScope, ClearCrossCrate<SourceScopeLocalData>>,\n     source_scope: SourceScope,\n \n     /// The guard-context: each time we build the guard expression for\n@@ -704,7 +703,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block_context: BlockContext::new(),\n             source_scopes: IndexVec::new(),\n             source_scope: OUTERMOST_SOURCE_SCOPE,\n-            source_scope_local_data: IndexVec::new(),\n             guard_context: vec![],\n             push_unsafe_count: 0,\n             unpushed_unsafe: safety,\n@@ -741,7 +739,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         Body::new(\n             self.cfg.basic_blocks,\n             self.source_scopes,\n-            self.source_scope_local_data,\n             self.local_decls,\n             self.canonical_user_type_annotations,\n             self.arg_count,\n@@ -942,7 +939,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.hir.root_lint_level\n         );\n         let parent_root = tcx.maybe_lint_level_root_bounded(\n-            self.source_scope_local_data[original_source_scope]\n+            self.source_scopes[original_source_scope]\n+                .local_data\n                 .as_ref()\n                 .assert_crate_local()\n                 .lint_root,"}, {"sha": "00a30af806a895959311e09c3d994621d797ca6f", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -436,7 +436,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // We estimate the true lint roots here to avoid creating a lot of source scopes.\n \n             let parent_root = tcx.maybe_lint_level_root_bounded(\n-                self.source_scope_local_data[source_scope]\n+                self.source_scopes[source_scope]\n+                    .local_data\n                     .as_ref()\n                     .assert_crate_local()\n                     .lint_root,\n@@ -657,23 +658,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let parent = self.source_scope;\n         debug!(\"new_source_scope({:?}, {:?}, {:?}) - parent({:?})={:?}\",\n                span, lint_level, safety,\n-               parent, self.source_scope_local_data.get(parent));\n-        let scope = self.source_scopes.push(SourceScopeData {\n-            span,\n-            parent_scope: Some(parent),\n-        });\n+               parent, self.source_scopes.get(parent));\n         let scope_local_data = SourceScopeLocalData {\n             lint_root: if let LintLevel::Explicit(lint_root) = lint_level {\n                 lint_root\n             } else {\n-                self.source_scope_local_data[parent].as_ref().assert_crate_local().lint_root\n+                self.source_scopes[parent].local_data.as_ref().assert_crate_local().lint_root\n             },\n             safety: safety.unwrap_or_else(|| {\n-                self.source_scope_local_data[parent].as_ref().assert_crate_local().safety\n+                self.source_scopes[parent].local_data.as_ref().assert_crate_local().safety\n             })\n         };\n-        self.source_scope_local_data.push(ClearCrossCrate::Set(scope_local_data));\n-        scope\n+        self.source_scopes.push(SourceScopeData {\n+            span,\n+            parent_scope: Some(parent),\n+            local_data: ClearCrossCrate::Set(scope_local_data),\n+        })\n     }\n \n     /// Given a span and the current source scope, make a SourceInfo."}, {"sha": "dc62cbefe3442c406bf589c2fab8ec9dfc119af9", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -849,7 +849,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 } else {\n                     block.terminator().source_info\n                 };\n-                match &body.source_scope_local_data[source_info.scope] {\n+                match &body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n                     mir::ClearCrossCrate::Clear => None,\n                 }"}, {"sha": "708686fdcf9f1ab4df308cce7b4c5790ca4d2983", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -248,10 +248,8 @@ fn new_body<'tcx>(\n     Body::new(\n         basic_blocks,\n         IndexVec::from_elem_n(\n-            SourceScopeData { span, parent_scope: None }, 1\n-        ),\n-        IndexVec::from_elem_n(\n-            ClearCrossCrate::Clear, 1\n+            SourceScopeData { span, parent_scope: None, local_data: ClearCrossCrate::Clear },\n+            1,\n         ),\n         local_decls,\n         IndexVec::new(),"}, {"sha": "d12d21aee6abe24053c760343efe517d7c2eb77e", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -214,7 +214,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if context.is_borrow() {\n                 if util::is_disaligned(self.tcx, self.body, self.param_env, place) {\n                     let source_info = self.source_info;\n-                    let lint_root = self.body.source_scope_local_data[source_info.scope]\n+                    let lint_root = self.body.source_scopes[source_info.scope]\n+                        .local_data\n                         .as_ref()\n                         .assert_crate_local()\n                         .lint_root;\n@@ -343,7 +344,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn register_violations(&mut self,\n                            violations: &[UnsafetyViolation],\n                            unsafe_blocks: &[(hir::HirId, bool)]) {\n-        let safety = self.body.source_scope_local_data[self.source_info.scope]\n+        let safety = self.body.source_scopes[self.source_info.scope]\n+            .local_data\n             .as_ref()\n             .assert_crate_local()\n             .safety;"}, {"sha": "f9a012d400c47e3500ae3c80e1b67a8b62c7b583", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue, Local, UnOp,\n     StatementKind, Statement, LocalKind, TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo,\n-    BinOp, SourceScope, SourceScopeLocalData, LocalDecl, BasicBlock, RETURN_PLACE,\n+    BinOp, SourceScope, SourceScopeData, LocalDecl, BasicBlock, RETURN_PLACE,\n };\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n@@ -77,8 +77,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         let dummy_body =\n             &Body::new(\n                 body.basic_blocks().clone(),\n-                Default::default(),\n-                body.source_scope_local_data.clone(),\n+                body.source_scopes.clone(),\n                 body.local_decls.clone(),\n                 Default::default(),\n                 body.arg_count,\n@@ -254,7 +253,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     param_env: ParamEnv<'tcx>,\n     // FIXME(eddyb) avoid cloning these two fields more than once,\n     // by accessing them through `ecx` instead.\n-    source_scope_local_data: IndexVec<SourceScope, ClearCrossCrate<SourceScopeLocalData>>,\n+    source_scopes: IndexVec<SourceScope, SourceScopeData>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     ret: Option<OpTy<'tcx, ()>>,\n }\n@@ -325,7 +324,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             can_const_prop,\n             // FIXME(eddyb) avoid cloning these two fields more than once,\n             // by accessing them through `ecx` instead.\n-            source_scope_local_data: body.source_scope_local_data.clone(),\n+            source_scopes: body.source_scopes.clone(),\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n             ret: ret.map(Into::into),\n@@ -362,9 +361,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     {\n         self.ecx.tcx.span = source_info.span;\n         // FIXME(eddyb) move this to the `Panic(_)` error case, so that\n-        // `f(self)` is always called, and that the only difference when\n-        // `source_scope_local_data` is missing, is that the lint isn't emitted.\n-        let lint_root = match &self.source_scope_local_data[source_info.scope] {\n+        // `f(self)` is always called, and that the only difference when the\n+        // scope's `local_data` is missing, is that the lint isn't emitted.\n+        let lint_root = match &self.source_scopes[source_info.scope].local_data {\n             ClearCrossCrate::Set(data) => data.lint_root,\n             ClearCrossCrate::Clear => return None,\n         };\n@@ -489,7 +488,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     let right_size = r.layout.size;\n                     let r_bits = r.to_scalar().and_then(|r| r.to_bits(right_size));\n                     if r_bits.ok().map_or(false, |b| b >= left_bits as u128) {\n-                        let lint_root = match &self.source_scope_local_data[source_info.scope] {\n+                        let lint_root = match &self.source_scopes[source_info.scope].local_data {\n                             ClearCrossCrate::Set(data) => data.lint_root,\n                             ClearCrossCrate::Clear => return None,\n                         };"}, {"sha": "ebfadd0cfd3ed61064bad8cf213644b782a663b0", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -388,8 +388,7 @@ impl Inliner<'tcx> {\n                 let mut local_map = IndexVec::with_capacity(callee_body.local_decls.len());\n                 let mut scope_map = IndexVec::with_capacity(callee_body.source_scopes.len());\n \n-                for (callee_idx, scope) in callee_body.source_scopes.iter_enumerated() {\n-                    let mut scope = scope.clone();\n+                for mut scope in callee_body.source_scopes.iter().cloned() {\n                     if scope.parent_scope.is_none() {\n                         scope.parent_scope = Some(callsite.location.scope);\n                         // FIXME(eddyb) is this really needed?\n@@ -404,9 +403,6 @@ impl Inliner<'tcx> {\n \n                     let idx = caller_body.source_scopes.push(scope);\n                     scope_map.push(idx);\n-\n-                    let local_data = callee_body.source_scope_local_data[callee_idx].clone();\n-                    assert_eq!(idx, caller_body.source_scope_local_data.push(local_data));\n                 }\n \n                 for loc in callee_body.vars_and_temps_iter() {"}, {"sha": "591f3ca44009d4aa4bf004f3c1ba5d4f73b7f0d7", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9976d89ed721184a95a24f109a65916f2905793/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=a9976d89ed721184a95a24f109a65916f2905793", "patch": "@@ -1081,7 +1081,6 @@ pub fn promote_candidates<'tcx>(\n                 // FIXME: maybe try to filter this to avoid blowing up\n                 // memory usage?\n                 body.source_scopes.clone(),\n-                body.source_scope_local_data.clone(),\n                 initial_locals,\n                 IndexVec::new(),\n                 0,"}]}