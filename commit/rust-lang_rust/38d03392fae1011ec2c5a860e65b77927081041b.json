{"sha": "38d03392fae1011ec2c5a860e65b77927081041b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZDAzMzkyZmFlMTAxMWVjMmM1YTg2MGU2NWI3NzkyNzA4MTA0MWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-23T18:12:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-24T18:05:13Z"}, "message": "Clarify pattern matching", "tree": {"sha": "ece7ddcb39c2d3d3d31c62b372f446b9ee8b67aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece7ddcb39c2d3d3d31c62b372f446b9ee8b67aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38d03392fae1011ec2c5a860e65b77927081041b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38d03392fae1011ec2c5a860e65b77927081041b", "html_url": "https://github.com/rust-lang/rust/commit/38d03392fae1011ec2c5a860e65b77927081041b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38d03392fae1011ec2c5a860e65b77927081041b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc00ddc95debb5e6ea962074cc4213d40664ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc00ddc95debb5e6ea962074cc4213d40664ddc", "html_url": "https://github.com/rust-lang/rust/commit/fbc00ddc95debb5e6ea962074cc4213d40664ddc"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "7f30b8b99538b8951c84a9ea84fe7203723c9343", "filename": "src/eval_context.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/38d03392fae1011ec2c5a860e65b77927081041b/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d03392fae1011ec2c5a860e65b77927081041b/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=38d03392fae1011ec2c5a860e65b77927081041b", "patch": "@@ -676,21 +676,26 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                 // Check alignment and non-NULLness.\n                 let (_, align) = self.size_and_align_of_dst(ty, val)?;\n-                if ptr.is_ptr() {\n-                    let ptr = ptr.to_ptr()?;\n-                    if !ptr.points_to_zst() { // assume ZST pointer to be always fully alignd (and anyway ZST pointers are going to disappear soon)\n-                        self.memory.check_align(ptr, align, 0)?;\n+                match ptr {\n+                    PrimVal::Ptr(ptr) => {\n+                        if !ptr.points_to_zst() { // assume ZST pointer to be always fully alignd (and anyway ZST pointers are going to disappear soon)\n+                            self.memory.check_align(ptr, align, 0)?;\n+                        }\n                     }\n-                } else {\n-                    let v = (ptr.to_u128()? % (1 << self.memory.pointer_size())) as u64;\n-                    if v == 0 {\n-                        return Err(EvalError::InvalidNullPointerUsage);\n+                    PrimVal::Bytes(bytes) => {\n+                        let v = ((bytes as u128) % (1 << self.memory.pointer_size())) as u64;\n+                        if v == 0 {\n+                            return Err(EvalError::InvalidNullPointerUsage);\n+                        }\n+                        if v % align != 0 {\n+                            return Err(EvalError::AlignmentCheckFailed {\n+                                has: v % align,\n+                                required: align,\n+                            });\n+                        }\n                     }\n-                    if v % align != 0 {\n-                        return Err(EvalError::AlignmentCheckFailed {\n-                            has: v % align,\n-                            required: align,\n-                        });\n+                    PrimVal::Undef => {\n+                        return Err(EvalError::ReadUndefBytes);\n                     }\n                 }\n "}]}