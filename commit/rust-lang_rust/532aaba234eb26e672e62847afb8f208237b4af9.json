{"sha": "532aaba234eb26e672e62847afb8f208237b4af9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMmFhYmEyMzRlYjI2ZTY3MmU2Mjg0N2FmYjhmMjA4MjM3YjRhZjk=", "commit": {"author": {"name": "funkill2", "email": "funkill2@gmail.com", "date": "2019-07-01T21:51:18Z"}, "committer": {"name": "funkill2", "email": "funkill2@gmail.com", "date": "2019-07-01T21:51:18Z"}, "message": "inline snapshots", "tree": {"sha": "a99393783a02dafbf98067bc956fba79b527afcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a99393783a02dafbf98067bc956fba79b527afcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/532aaba234eb26e672e62847afb8f208237b4af9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEncutfLmVortz0Rb+kgKyQy+G5IcFAl0agFYACgkQkgKyQy+G\n5IcOJRAAsSABq74zZHYb83vRK/0CuGjEZtORyJX+BnwNqp3LLwm2vfuBC78wmzxn\nT/ifxhuFwfGby8jK8YWaBX8LGSB+U2PqZlSfj99yZ5tyoJGROIBIgk//iZFn+TO8\n5VeiOIP2JxruBoJvb68qStLOsRt35+aCc1pdM1x7MuwwQj2vSD3pWhdK8OLRa8LZ\n+nSz5sC6NHFbpFnYyV4BVfeEOAyiHa/1mUfN/ZYziO8jQy0opjfX+2P+jAiTODNr\n+cdAxgnCxNOKCnKGSqjVsygeO3dH1iqpBJqLnMoBn/DTnaK4/Vx1E5A27Bpne9wl\nHHd6TOrjdASOS+x6mz0jTAOqn/0I9vEOtk3IjbZ4rwMk44RmucE4jO7xGXccxy8T\nT0TxBXVjJ6xKTU8efiiBazO3NQ2U5OgwdHB8ZOzRROlcWL00u/GY8GddKVS+7U4h\nW7XG5L3x9mX+kARezCSssVcZ+kCtLC5QzRPojp1Ojb8P7X1MHfWK9YexDMyOE8uJ\n+1yDgr2nOCxN1KTwtBzV4LKRedGkJydZ+AjXNxRdXa+AIorSMjrLZqa0CI7f0PrH\nS2dm6xVayAOFZ0Dg1LSjkTfgdoMZtWAUgMlX7ZUatWTeJUEvCiMhekjYosv3zW5S\nmKK9Ea5Qc1oWabzK9zV+3MSQPLdq1ybwqzDUY4RfIBoHbN1RmlM=\n=6XT4\n-----END PGP SIGNATURE-----", "payload": "tree a99393783a02dafbf98067bc956fba79b527afcf\nparent f06e3efbb1e8cfc2b5b3bd9d8c163a5a64e05128\nauthor funkill2 <funkill2@gmail.com> 1562017878 +0300\ncommitter funkill2 <funkill2@gmail.com> 1562017878 +0300\n\ninline snapshots\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/532aaba234eb26e672e62847afb8f208237b4af9", "html_url": "https://github.com/rust-lang/rust/commit/532aaba234eb26e672e62847afb8f208237b4af9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/532aaba234eb26e672e62847afb8f208237b4af9/comments", "author": {"login": "funkill", "id": 4323287, "node_id": "MDQ6VXNlcjQzMjMyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4323287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkill", "html_url": "https://github.com/funkill", "followers_url": "https://api.github.com/users/funkill/followers", "following_url": "https://api.github.com/users/funkill/following{/other_user}", "gists_url": "https://api.github.com/users/funkill/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkill/subscriptions", "organizations_url": "https://api.github.com/users/funkill/orgs", "repos_url": "https://api.github.com/users/funkill/repos", "events_url": "https://api.github.com/users/funkill/events{/privacy}", "received_events_url": "https://api.github.com/users/funkill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "funkill", "id": 4323287, "node_id": "MDQ6VXNlcjQzMjMyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4323287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkill", "html_url": "https://github.com/funkill", "followers_url": "https://api.github.com/users/funkill/followers", "following_url": "https://api.github.com/users/funkill/following{/other_user}", "gists_url": "https://api.github.com/users/funkill/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkill/subscriptions", "organizations_url": "https://api.github.com/users/funkill/orgs", "repos_url": "https://api.github.com/users/funkill/repos", "events_url": "https://api.github.com/users/funkill/events{/privacy}", "received_events_url": "https://api.github.com/users/funkill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f06e3efbb1e8cfc2b5b3bd9d8c163a5a64e05128", "url": "https://api.github.com/repos/rust-lang/rust/commits/f06e3efbb1e8cfc2b5b3bd9d8c163a5a64e05128", "html_url": "https://github.com/rust-lang/rust/commit/f06e3efbb1e8cfc2b5b3bd9d8c163a5a64e05128"}], "stats": {"total": 523, "additions": 366, "deletions": 157}, "files": [{"sha": "a41cab35979529f40b316820ef7dc6eb29b768f8", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 366, "deletions": 157, "changes": 523, "blob_url": "https://github.com/rust-lang/rust/blob/532aaba234eb26e672e62847afb8f208237b4af9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532aaba234eb26e672e62847afb8f208237b4af9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=532aaba234eb26e672e62847afb8f208237b4af9", "patch": "@@ -74,10 +74,11 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n mod tests {\n     use test_utils::covers;\n \n-    use crate::completion::{CompletionKind, check_completion, do_completion};\n+    use crate::completion::{CompletionKind, do_completion, CompletionItem};\n+    use insta::assert_debug_snapshot_matches;\n \n-    fn check_reference_completion(code: &str, expected_completions: &str) {\n-        check_completion(code, expected_completions, CompletionKind::Reference);\n+    fn do_reference_completion(code: &str) -> Vec<CompletionItem> {\n+        do_completion(code, CompletionKind::Reference)\n     }\n \n     #[test]\n@@ -115,227 +116,435 @@ mod tests {\n \n     #[test]\n     fn completes_mod_with_docs() {\n-        check_reference_completion(\n-            \"mod_with_docs\",\n-            r\"\n-            use self::my<|>;\n-\n-            /// Some simple\n-            /// docs describing `mod my`.\n-            mod my {\n-                struct Bar;\n-            }\n-            \",\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                r\"\n+                use self::my<|>;\n+\n+                /// Some simple\n+                /// docs describing `mod my`.\n+                mod my {\n+                    struct Bar;\n+                }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"my\",\n+        source_range: [27; 29),\n+        delete: [27; 29),\n+        insert: \"my\",\n+        kind: Module,\n+        documentation: Documentation(\n+            \"Some simple\\ndocs describing `mod my`.\",\n+        ),\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_use_item_starting_with_self() {\n-        check_reference_completion(\n-            \"use_item_starting_with_self\",\n-            r\"\n-            use self::m::<|>;\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                r\"\n+                use self::m::<|>;\n \n-            mod m {\n-                struct Bar;\n-            }\n-            \",\n+                mod m {\n+                    struct Bar;\n+                }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"Bar\",\n+        source_range: [30; 30),\n+        delete: [30; 30),\n+        insert: \"Bar\",\n+        kind: Struct,\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_use_item_starting_with_crate() {\n-        check_reference_completion(\n-            \"use_item_starting_with_crate\",\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-            struct Spam;\n-            //- /foo.rs\n-            use crate::Sp<|>\n-            \",\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                mod foo;\n+                struct Spam;\n+                //- /foo.rs\n+                use crate::Sp<|>\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"Spam\",\n+        source_range: [11; 13),\n+        delete: [11; 13),\n+        insert: \"Spam\",\n+        kind: Struct,\n+    },\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [11; 13),\n+        delete: [11; 13),\n+        insert: \"foo\",\n+        kind: Module,\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_nested_use_tree() {\n-        check_reference_completion(\n-            \"nested_use_tree\",\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-            struct Spam;\n-            //- /foo.rs\n-            use crate::{Sp<|>};\n-            \",\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                mod foo;\n+                struct Spam;\n+                //- /foo.rs\n+                use crate::{Sp<|>};\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"Spam\",\n+        source_range: [12; 14),\n+        delete: [12; 14),\n+        insert: \"Spam\",\n+        kind: Struct,\n+    },\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [12; 14),\n+        delete: [12; 14),\n+        insert: \"foo\",\n+        kind: Module,\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_deeply_nested_use_tree() {\n-        check_reference_completion(\n-            \"deeply_nested_use_tree\",\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-            pub mod bar {\n-                pub mod baz {\n-                    pub struct Spam;\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                mod foo;\n+                pub mod bar {\n+                    pub mod baz {\n+                        pub struct Spam;\n+                    }\n                 }\n-            }\n-            //- /foo.rs\n-            use crate::{bar::{baz::Sp<|>}};\n-            \",\n+                //- /foo.rs\n+                use crate::{bar::{baz::Sp<|>}};\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"Spam\",\n+        source_range: [23; 25),\n+        delete: [23; 25),\n+        insert: \"Spam\",\n+        kind: Struct,\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_enum_variant() {\n-        check_reference_completion(\n-            \"enum_variant\",\n-            \"\n-            //- /lib.rs\n-            /// An enum\n-            enum E {\n-                /// Foo Variant\n-                Foo,\n-                /// Bar Variant with i32\n-                Bar(i32)\n-            }\n-            fn foo() { let _ = E::<|> }\n-            \",\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                /// An enum\n+                enum E {\n+                    /// Foo Variant\n+                    Foo,\n+                    /// Bar Variant with i32\n+                    Bar(i32)\n+                }\n+                fn foo() { let _ = E::<|> }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"Bar\",\n+        source_range: [116; 116),\n+        delete: [116; 116),\n+        insert: \"Bar\",\n+        kind: EnumVariant,\n+        detail: \"(i32)\",\n+        documentation: Documentation(\n+            \"Bar Variant with i32\",\n+        ),\n+    },\n+    CompletionItem {\n+        label: \"Foo\",\n+        source_range: [116; 116),\n+        delete: [116; 116),\n+        insert: \"Foo\",\n+        kind: EnumVariant,\n+        detail: \"()\",\n+        documentation: Documentation(\n+            \"Foo Variant\",\n+        ),\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_enum_variant_with_details() {\n-        check_reference_completion(\n-            \"enum_variant_with_details\",\n-            \"\n-            //- /lib.rs\n-            struct S { field: u32 }\n-            /// An enum\n-            enum E {\n-                /// Foo Variant (empty)\n-                Foo,\n-                /// Bar Variant with i32 and u32\n-                Bar(i32, u32),\n-                ///\n-                S(S),\n-            }\n-            fn foo() { let _ = E::<|> }\n-            \",\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                struct S { field: u32 }\n+                /// An enum\n+                enum E {\n+                    /// Foo Variant (empty)\n+                    Foo,\n+                    /// Bar Variant with i32 and u32\n+                    Bar(i32, u32),\n+                    ///\n+                    S(S),\n+                }\n+                fn foo() { let _ = E::<|> }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"Bar\",\n+        source_range: [180; 180),\n+        delete: [180; 180),\n+        insert: \"Bar\",\n+        kind: EnumVariant,\n+        detail: \"(i32, u32)\",\n+        documentation: Documentation(\n+            \"Bar Variant with i32 and u32\",\n+        ),\n+    },\n+    CompletionItem {\n+        label: \"Foo\",\n+        source_range: [180; 180),\n+        delete: [180; 180),\n+        insert: \"Foo\",\n+        kind: EnumVariant,\n+        detail: \"()\",\n+        documentation: Documentation(\n+            \"Foo Variant (empty)\",\n+        ),\n+    },\n+    CompletionItem {\n+        label: \"S\",\n+        source_range: [180; 180),\n+        delete: [180; 180),\n+        insert: \"S\",\n+        kind: EnumVariant,\n+        detail: \"(S)\",\n+        documentation: Documentation(\n+            \"\",\n+        ),\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_struct_associated_method() {\n-        check_reference_completion(\n-            \"struct_associated_method\",\n-            \"\n-            //- /lib.rs\n-            /// A Struct\n-            struct S;\n-\n-            impl S {\n-                /// An associated method\n-                fn m() { }\n-            }\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                /// A Struct\n+                struct S;\n+\n+                impl S {\n+                    /// An associated method\n+                    fn m() { }\n+                }\n \n-            fn foo() { let _ = S::<|> }\n-            \",\n+                fn foo() { let _ = S::<|> }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"m\",\n+        source_range: [100; 100),\n+        delete: [100; 100),\n+        insert: \"m()$0\",\n+        kind: Function,\n+        detail: \"fn m()\",\n+        documentation: Documentation(\n+            \"An associated method\",\n+        ),\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_struct_associated_const() {\n-        check_reference_completion(\n-            \"struct_associated_const\",\n-            \"\n-            //- /lib.rs\n-            /// A Struct\n-            struct S;\n-\n-            impl S {\n-                /// An associated const\n-                const C: i32 = 42;\n-            }\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                /// A Struct\n+                struct S;\n+\n+                impl S {\n+                    /// An associated const\n+                    const C: i32 = 42;\n+                }\n \n-            fn foo() { let _ = S::<|> }\n-            \",\n+                fn foo() { let _ = S::<|> }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"C\",\n+        source_range: [107; 107),\n+        delete: [107; 107),\n+        insert: \"C\",\n+        kind: Const,\n+        detail: \"const C: i32 = 42;\",\n+        documentation: Documentation(\n+            \"An associated const\",\n+        ),\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_struct_associated_type() {\n-        check_reference_completion(\n-            \"struct_associated_type\",\n-            \"\n-            //- /lib.rs\n-            /// A Struct\n-            struct S;\n-\n-            impl S {\n-                /// An associated type\n-                type T = i32;\n-            }\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                /// A Struct\n+                struct S;\n+\n+                impl S {\n+                    /// An associated type\n+                    type T = i32;\n+                }\n \n-            fn foo() { let _ = S::<|> }\n-            \",\n+                fn foo() { let _ = S::<|> }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"T\",\n+        source_range: [101; 101),\n+        delete: [101; 101),\n+        insert: \"T\",\n+        kind: TypeAlias,\n+        detail: \"type T = i32;\",\n+        documentation: Documentation(\n+            \"An associated type\",\n+        ),\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_enum_associated_method() {\n-        check_reference_completion(\n-            \"enum_associated_method\",\n-            \"\n-            //- /lib.rs\n-            /// An enum\n-            enum S {};\n-\n-            impl S {\n-                /// An associated method\n-                fn m() { }\n-            }\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                /// An enum\n+                enum S {};\n+\n+                impl S {\n+                    /// An associated method\n+                    fn m() { }\n+                }\n \n-            fn foo() { let _ = S::<|> }\n-            \",\n+                fn foo() { let _ = S::<|> }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"m\",\n+        source_range: [100; 100),\n+        delete: [100; 100),\n+        insert: \"m()$0\",\n+        kind: Function,\n+        detail: \"fn m()\",\n+        documentation: Documentation(\n+            \"An associated method\",\n+        ),\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_union_associated_method() {\n-        check_reference_completion(\n-            \"union_associated_method\",\n-            \"\n-            //- /lib.rs\n-            /// A union\n-            union U {};\n-\n-            impl U {\n-                /// An associated method\n-                fn m() { }\n-            }\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                /// A union\n+                union U {};\n+\n+                impl U {\n+                    /// An associated method\n+                    fn m() { }\n+                }\n \n-            fn foo() { let _ = U::<|> }\n-            \",\n+                fn foo() { let _ = U::<|> }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"m\",\n+        source_range: [101; 101),\n+        delete: [101; 101),\n+        insert: \"m()$0\",\n+        kind: Function,\n+        detail: \"fn m()\",\n+        documentation: Documentation(\n+            \"An associated method\",\n+        ),\n+    },\n+]\"###\n         );\n     }\n \n     #[test]\n     fn completes_use_paths_across_crates() {\n-        check_reference_completion(\n-            \"completes_use_paths_across_crates\",\n-            \"\n-            //- /main.rs\n-            use foo::<|>;\n-\n-            //- /foo/lib.rs\n-            pub mod bar {\n-                pub struct S;\n-            }\n-            \",\n+        assert_debug_snapshot_matches!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                use foo::<|>;\n+\n+                //- /foo/lib.rs\n+                pub mod bar {\n+                    pub struct S;\n+                }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"bar\",\n+        source_range: [9; 9),\n+        delete: [9; 9),\n+        insert: \"bar\",\n+        kind: Module,\n+    },\n+]\"###\n         );\n     }\n }"}]}