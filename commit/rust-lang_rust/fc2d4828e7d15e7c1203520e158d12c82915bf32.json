{"sha": "fc2d4828e7d15e7c1203520e158d12c82915bf32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMmQ0ODI4ZTdkMTVlN2MxMjAzNTIwZTE1OGQxMmM4MjkxNWJmMzI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-15T01:13:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-15T01:14:09Z"}, "message": "Finish the fold drivers in fold.rs.", "tree": {"sha": "496dbb2b601ee9401a44a00367fdc2e1f383bae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496dbb2b601ee9401a44a00367fdc2e1f383bae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2d4828e7d15e7c1203520e158d12c82915bf32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2d4828e7d15e7c1203520e158d12c82915bf32", "html_url": "https://github.com/rust-lang/rust/commit/fc2d4828e7d15e7c1203520e158d12c82915bf32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2d4828e7d15e7c1203520e158d12c82915bf32/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5826a2e3de12c3cbbd2bf09f3a9c6bda3c99f456", "url": "https://api.github.com/repos/rust-lang/rust/commits/5826a2e3de12c3cbbd2bf09f3a9c6bda3c99f456", "html_url": "https://github.com/rust-lang/rust/commit/5826a2e3de12c3cbbd2bf09f3a9c6bda3c99f456"}], "stats": {"total": 122, "additions": 110, "deletions": 12}, "files": [{"sha": "1d3646f451db5508cd3fadf0337d2f4e0563ed38", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2d4828e7d15e7c1203520e158d12c82915bf32/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2d4828e7d15e7c1203520e158d12c82915bf32/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=fc2d4828e7d15e7c1203520e158d12c82915bf32", "patch": "@@ -77,7 +77,7 @@ tag stmt_ {\n type decl = spanned[decl_];\n tag decl_ {\n     decl_local(ident, option[@ty], option[@expr]);\n-    decl_item(name, @item);\n+    decl_item(ident, @item);\n }\n \n type expr = spanned[expr_];"}, {"sha": "bb0000a7aa12e74020d4b51604137ff00c2e8ed0", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 109, "deletions": 11, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/fc2d4828e7d15e7c1203520e158d12c82915bf32/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2d4828e7d15e7c1203520e158d12c82915bf32/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=fc2d4828e7d15e7c1203520e158d12c82915bf32", "patch": "@@ -11,6 +11,7 @@ import util.common.ty_mach;\n import front.ast;\n import front.ast.ident;\n import front.ast.name;\n+import front.ast.path;\n import front.ast.ty;\n import front.ast.expr;\n import front.ast.lval;\n@@ -38,6 +39,11 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp) -> @ty)                fold_ty_char,\n      (fn(&ENV e, &span sp) -> @ty)                fold_ty_str,\n      (fn(&ENV e, &span sp, @ty t) -> @ty)         fold_ty_box,\n+     (fn(&ENV e, &span sp, @ty t) -> @ty)         fold_ty_vec,\n+\n+     (fn(&ENV e, &span sp,\n+         vec[tup(bool, @ty)] elts) -> @ty)        fold_ty_tup,\n+\n      (fn(&ENV e, &span sp, ast.path p,\n          &option[referent] r) -> @ty)             fold_ty_path,\n \n@@ -94,7 +100,7 @@ type ast_fold[ENV] =\n          &option[@expr]) -> @decl)                fold_decl_local,\n \n      (fn(&ENV e, &span sp,\n-         &name name, @item item) -> @decl)        fold_decl_item,\n+         ident ident, @item item) -> @decl)        fold_decl_item,\n \n \n      // Stmt folds.\n@@ -136,6 +142,7 @@ type ast_fold[ENV] =\n      (fn(&ENV e, @ast.crate c) -> ENV) update_env_for_crate,\n      (fn(&ENV e, @item i) -> ENV) update_env_for_item,\n      (fn(&ENV e, @stmt s) -> ENV) update_env_for_stmt,\n+     (fn(&ENV e, @decl i) -> ENV) update_env_for_decl,\n      (fn(&ENV e, @lval l) -> ENV) update_env_for_lval,\n      (fn(&ENV e, @expr x) -> ENV) update_env_for_expr,\n      (fn(&ENV e, @ty t) -> ENV) update_env_for_ty,\n@@ -147,19 +154,94 @@ type ast_fold[ENV] =\n \n //// Fold drivers.\n \n-// FIXME: Finish these.\n-\n-fn fold_expr_name[ENV](&ENV env, ast_fold[ENV] fld, &name n,\n-                  &option[referent] r) -> tup(name,option[referent]) {\n-    ret tup(n,r);\n+fn fold_name[ENV](&ENV env, ast_fold[ENV] fld, &name n) -> name {\n+    let vec[@ast.ty] tys_ = vec();\n+    for (@ast.ty t in n.node.types) {\n+        append[@ast.ty](tys_, fold_ty(env, fld, t));\n+    }\n+    let ast.name_ n_ = rec(ident=n.node.ident, types=tys_);\n+    ret fld.fold_name(env, n.span, n_);\n }\n \n fn fold_ty[ENV](&ENV env, ast_fold[ENV] fld, @ty t) -> @ty {\n-    ret t;\n+    let ENV env_ = fld.update_env_for_ty(env, t);\n+\n+    if (!fld.keep_going(env_)) {\n+        ret t;\n+    }\n+\n+    alt (t.node) {\n+        case (ast.ty_nil) { ret fld.fold_ty_nil(env_, t.span); }\n+        case (ast.ty_bool) { ret fld.fold_ty_bool(env_, t.span); }\n+        case (ast.ty_int) { ret fld.fold_ty_int(env_, t.span); }\n+        case (ast.ty_uint) { ret fld.fold_ty_uint(env_, t.span); }\n+\n+        case (ast.ty_machine(?m)) {\n+            ret fld.fold_ty_machine(env_, t.span, m);\n+        }\n+\n+        case (ast.ty_char) { ret fld.fold_ty_char(env_, t.span); }\n+        case (ast.ty_str) { ret fld.fold_ty_str(env_, t.span); }\n+\n+        case (ast.ty_box(?ty)) {\n+            auto ty_ = fold_ty(env, fld, ty);\n+            ret fld.fold_ty_box(env_, t.span, ty_);\n+        }\n+\n+        case (ast.ty_vec(?ty)) {\n+            auto ty_ = fold_ty(env, fld, ty);\n+            ret fld.fold_ty_vec(env_, t.span, ty_);\n+        }\n+\n+        case (ast.ty_tup(?elts)) {\n+            let vec[tup(bool, @ty)] elts_ = vec();\n+            for (tup(bool, @ty) elt in elts) {\n+                elts_ += tup(elt._0, fold_ty(env, fld, elt._1));\n+            }\n+            ret fld.fold_ty_tup(env_, t.span, elts);\n+        }\n+\n+        case (ast.ty_path(?pth, ?ref_opt)) {\n+            let vec[ast.name] path = vec();\n+            for (ast.name n in pth) {\n+                path += fold_name(env, fld, n);\n+            }\n+            ret fld.fold_ty_path(env_, t.span, path, ref_opt);\n+        }\n+    }\n }\n \n fn fold_decl[ENV](&ENV env, ast_fold[ENV] fld, @decl d) -> @decl {\n-    ret d;\n+    let ENV env_ = fld.update_env_for_decl(env, d);\n+\n+    if (!fld.keep_going(env_)) {\n+        ret d;\n+    }\n+\n+    alt (d.node) {\n+        case (ast.decl_local(?id, ?ty_opt, ?expr_opt)) {\n+            auto ty_opt_ = none[@ast.ty];\n+            auto expr_opt_ = none[@ast.expr];\n+            alt (ty_opt) {\n+                case (some[@ast.ty](?t)) {\n+                    ty_opt_ = some[@ast.ty](fold_ty(env, fld, t));\n+                }\n+            }\n+            alt (expr_opt) {\n+                case (some[@ast.expr](?e)) {\n+                    expr_opt_ = some[@ast.expr](fold_expr(env, fld, e));\n+                }\n+            }\n+            ret fld.fold_decl_local(env_, d.span, id, ty_opt_, expr_opt_);\n+        }\n+\n+        case (ast.decl_item(?id, ?item)) {\n+            auto item_ = fold_item(env_, fld, item);\n+            ret fld.fold_decl_item(env_, d.span, id, item_);\n+        }\n+    }\n+\n+    fail;\n }\n \n fn fold_lval[ENV](&ENV env, ast_fold[ENV] fld, @lval lv) -> @lval {\n@@ -182,6 +264,7 @@ fn fold_lval[ENV](&ENV env, ast_fold[ENV] fld, @lval lv) -> @lval {\n         }\n \n         case (ast.lval_name(?n, ?r)) {\n+            auto n_ = fold_name(env_, fld, n);\n             ret fld.fold_lval_name(env_, lv.span, n, r);\n         }\n     }\n@@ -424,7 +507,6 @@ fn identity_fold_name[ENV](&ENV env, &span sp, ast.name_ n) -> name {\n     ret respan(sp, n);\n }\n \n-\n // Type identities.\n \n fn identity_fold_ty_nil[ENV](&ENV env, &span sp) -> @ty {\n@@ -460,6 +542,15 @@ fn identity_fold_ty_box[ENV](&ENV env, &span sp, @ty t) -> @ty {\n     ret @respan(sp, ast.ty_box(t));\n }\n \n+fn identity_fold_ty_vec[ENV](&ENV env, &span sp, @ty t) -> @ty {\n+    ret @respan(sp, ast.ty_vec(t));\n+}\n+\n+fn identity_fold_ty_tup[ENV](&ENV env, &span sp, vec[tup(bool,@ty)] elts)\n+    -> @ty {\n+    ret @respan(sp, ast.ty_tup(elts));\n+}\n+\n fn identity_fold_ty_path[ENV](&ENV env, &span sp, ast.path p,\n                         &option[referent] r) -> @ty {\n     ret @respan(sp, ast.ty_path(p, r));\n@@ -549,8 +640,8 @@ fn identity_fold_decl_local[ENV](&ENV e, &span sp,\n }\n \n fn identity_fold_decl_item[ENV](&ENV e, &span sp,\n-                                &name n, @item i) -> @decl {\n-    ret @respan(sp, ast.decl_item(n, i));\n+                                ident id, @item i) -> @decl {\n+    ret @respan(sp, ast.decl_item(id, i));\n }\n \n \n@@ -627,6 +718,10 @@ fn identity_update_env_for_stmt[ENV](&ENV e, @stmt s) -> ENV {\n     ret e;\n }\n \n+fn identity_update_env_for_decl[ENV](&ENV e, @decl d) -> ENV {\n+    ret e;\n+}\n+\n fn identity_update_env_for_lval[ENV](&ENV e, @lval l) -> ENV {\n     ret e;\n }\n@@ -660,6 +755,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_ty_char    = bind identity_fold_ty_char[ENV](_,_),\n          fold_ty_str     = bind identity_fold_ty_str[ENV](_,_),\n          fold_ty_box     = bind identity_fold_ty_box[ENV](_,_,_),\n+         fold_ty_vec     = bind identity_fold_ty_vec[ENV](_,_,_),\n+         fold_ty_tup     = bind identity_fold_ty_tup[ENV](_,_,_),\n          fold_ty_path    = bind identity_fold_ty_path[ENV](_,_,_,_),\n \n          fold_expr_vec    = bind identity_fold_expr_vec[ENV](_,_,_),\n@@ -698,6 +795,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          update_env_for_crate = bind identity_update_env_for_crate[ENV](_,_),\n          update_env_for_item = bind identity_update_env_for_item[ENV](_,_),\n          update_env_for_stmt = bind identity_update_env_for_stmt[ENV](_,_),\n+         update_env_for_decl = bind identity_update_env_for_decl[ENV](_,_),\n          update_env_for_lval = bind identity_update_env_for_lval[ENV](_,_),\n          update_env_for_expr = bind identity_update_env_for_expr[ENV](_,_),\n          update_env_for_ty = bind identity_update_env_for_ty[ENV](_,_),"}]}