{"sha": "28b6373b1d4f6fd58f3435da2551021034c4a9d4", "node_id": "C_kwDOAAsO6NoAKDI4YjYzNzNiMWQ0ZjZmZDU4ZjM0MzVkYTI1NTEwMjEwMzRjNGE5ZDQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-03T03:16:31Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-10T03:27:41Z"}, "message": "Fall back when relating two opaques by substs in MIR typeck", "tree": {"sha": "54a364db3965d69f2ddf228625ea434b9488da6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a364db3965d69f2ddf228625ea434b9488da6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28b6373b1d4f6fd58f3435da2551021034c4a9d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28b6373b1d4f6fd58f3435da2551021034c4a9d4", "html_url": "https://github.com/rust-lang/rust/commit/28b6373b1d4f6fd58f3435da2551021034c4a9d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28b6373b1d4f6fd58f3435da2551021034c4a9d4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a6cae28e7013ff0e640026a8e46f315426829d", "url": "https://api.github.com/repos/rust-lang/rust/commits/34a6cae28e7013ff0e640026a8e46f315426829d", "html_url": "https://github.com/rust-lang/rust/commit/34a6cae28e7013ff0e640026a8e46f315426829d"}], "stats": {"total": 119, "additions": 95, "deletions": 24}, "files": [{"sha": "324aef9c01f6ee32f905ab8349f83c28f37154ba", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/28b6373b1d4f6fd58f3435da2551021034c4a9d4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b6373b1d4f6fd58f3435da2551021034c4a9d4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=28b6373b1d4f6fd58f3435da2551021034c4a9d4", "patch": "@@ -396,6 +396,32 @@ where\n \n         generalizer.relate(value, value)\n     }\n+\n+    fn relate_opaques(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n+        let (a, b) = if self.a_is_expected() { (a, b) } else { (b, a) };\n+        let mut generalize = |ty, ty_is_expected| {\n+            let var = self.infcx.next_ty_var_id_in_universe(\n+                TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                    span: self.delegate.span(),\n+                },\n+                ty::UniverseIndex::ROOT,\n+            );\n+            if ty_is_expected {\n+                self.relate_ty_var((ty, var))\n+            } else {\n+                self.relate_ty_var((var, ty))\n+            }\n+        };\n+        let (a, b) = match (a.kind(), b.kind()) {\n+            (&ty::Opaque(..), _) => (a, generalize(b, false)?),\n+            (_, &ty::Opaque(..)) => (generalize(a, true)?, b),\n+            _ => unreachable!(),\n+        };\n+        self.delegate.register_opaque_type(a, b, true)?;\n+        trace!(a = ?a.kind(), b = ?b.kind(), \"opaque type instantiated\");\n+        Ok(a)\n+    }\n }\n \n /// When we instantiate an inference variable with a value in\n@@ -572,32 +598,12 @@ where\n             (&ty::Infer(ty::TyVar(vid)), _) => self.relate_ty_var((vid, b)),\n \n             (&ty::Opaque(a_def_id, _), &ty::Opaque(b_def_id, _)) if a_def_id == b_def_id => {\n-                self.infcx.super_combine_tys(self, a, b)\n+                infcx.commit_if_ok(|_| infcx.super_combine_tys(self, a, b)).or_else(|err| {\n+                    if a_def_id.is_local() { self.relate_opaques(a, b) } else { Err(err) }\n+                })\n             }\n             (&ty::Opaque(did, ..), _) | (_, &ty::Opaque(did, ..)) if did.is_local() => {\n-                let (a, b) = if self.a_is_expected() { (a, b) } else { (b, a) };\n-                let mut generalize = |ty, ty_is_expected| {\n-                    let var = infcx.next_ty_var_id_in_universe(\n-                        TypeVariableOrigin {\n-                            kind: TypeVariableOriginKind::MiscVariable,\n-                            span: self.delegate.span(),\n-                        },\n-                        ty::UniverseIndex::ROOT,\n-                    );\n-                    if ty_is_expected {\n-                        self.relate_ty_var((ty, var))\n-                    } else {\n-                        self.relate_ty_var((var, ty))\n-                    }\n-                };\n-                let (a, b) = match (a.kind(), b.kind()) {\n-                    (&ty::Opaque(..), _) => (a, generalize(b, false)?),\n-                    (_, &ty::Opaque(..)) => (generalize(a, true)?, b),\n-                    _ => unreachable!(),\n-                };\n-                self.delegate.register_opaque_type(a, b, true)?;\n-                trace!(a = ?a.kind(), b = ?b.kind(), \"opaque type instantiated\");\n-                Ok(a)\n+                self.relate_opaques(a, b)\n             }\n \n             (&ty::Projection(projection_ty), _)"}, {"sha": "cf059af19251222073da1fde308739b074571543", "filename": "src/test/ui/impl-trait/issue-100075-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28b6373b1d4f6fd58f3435da2551021034c4a9d4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b6373b1d4f6fd58f3435da2551021034c4a9d4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075-2.rs?ref=28b6373b1d4f6fd58f3435da2551021034c4a9d4", "patch": "@@ -0,0 +1,8 @@\n+fn opaque<T>(t: T) -> impl Sized {\n+    //~^ ERROR cannot resolve opaque type\n+    //~| WARNING function cannot return without recursing\n+    opaque(Some(t))\n+}\n+\n+#[allow(dead_code)]\n+fn main() {}"}, {"sha": "5a1f1a97d04e4b4f62ea35c8cfe79ee6cb671821", "filename": "src/test/ui/impl-trait/issue-100075-2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28b6373b1d4f6fd58f3435da2551021034c4a9d4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28b6373b1d4f6fd58f3435da2551021034c4a9d4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075-2.stderr?ref=28b6373b1d4f6fd58f3435da2551021034c4a9d4", "patch": "@@ -0,0 +1,24 @@\n+warning: function cannot return without recursing\n+  --> $DIR/issue-100075-2.rs:1:1\n+   |\n+LL | fn opaque<T>(t: T) -> impl Sized {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+...\n+LL |     opaque(Some(t))\n+   |     --------------- recursive call site\n+   |\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/issue-100075-2.rs:1:23\n+   |\n+LL | fn opaque<T>(t: T) -> impl Sized {\n+   |                       ^^^^^^^^^^ recursive opaque type\n+...\n+LL |     opaque(Some(t))\n+   |     --------------- returning here with type `impl Sized`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "ea30abb4855f319114ad8e4588a3d9412c362572", "filename": "src/test/ui/impl-trait/issue-100075.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/28b6373b1d4f6fd58f3435da2551021034c4a9d4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b6373b1d4f6fd58f3435da2551021034c4a9d4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075.rs?ref=28b6373b1d4f6fd58f3435da2551021034c4a9d4", "patch": "@@ -0,0 +1,21 @@\n+trait Marker {}\n+impl<T> Marker for T {}\n+\n+fn maybe<T>(\n+    _t: T,\n+) -> Option<\n+    //removing the line below makes it compile\n+    &'static T,\n+> {\n+    None\n+}\n+\n+fn _g<T>(t: &'static T) -> &'static impl Marker {\n+    //~^ ERROR cannot resolve opaque type\n+    if let Some(t) = maybe(t) {\n+        return _g(t);\n+    }\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "267ecfdaed1242fc40fa1e44f8f9682d84069617", "filename": "src/test/ui/impl-trait/issue-100075.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28b6373b1d4f6fd58f3435da2551021034c4a9d4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28b6373b1d4f6fd58f3435da2551021034c4a9d4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075.stderr?ref=28b6373b1d4f6fd58f3435da2551021034c4a9d4", "patch": "@@ -0,0 +1,12 @@\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/issue-100075.rs:13:37\n+   |\n+LL | fn _g<T>(t: &'static T) -> &'static impl Marker {\n+   |                                     ^^^^^^^^^^^ recursive opaque type\n+...\n+LL |         return _g(t);\n+   |                ----- returning here with type `&impl Marker`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0720`."}]}