{"sha": "9b502a4765b80f4ffaaf23ede63d8a823ad93272", "node_id": "C_kwDOAAsO6NoAKDliNTAyYTQ3NjViODBmNGZmYWFmMjNlZGU2M2Q4YTgyM2FkOTMyNzI", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-14T03:04:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-14T03:04:35Z"}, "message": "Rollup merge of #106762 - WaffleLapkin:atomicptr+as_mut_ptr, r=m-ou-se\n\nAdd `AtomicPtr::as_mut_ptr`\n\nSee https://github.com/rust-lang/rust/issues/66893#issuecomment-720125447\n\nr? thomcc", "tree": {"sha": "6a612ed18d7667bf8e500c0c510edcb2458535d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a612ed18d7667bf8e500c0c510edcb2458535d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b502a4765b80f4ffaaf23ede63d8a823ad93272", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwhvDCRBK7hj4Ov3rIwAAeJEIAEHcHwAgAULO0GytJm0yqEh7\ntiygH06QtZhy4cJgrqZ7Zjp8ygIrmMc+UKq4VAzuGtYpiH1SF9tJsNfnULsqszTS\nq7kRtL+3uD6eXVBY0puNHp7t12foM/EJTI8snkHtcBcKKpV676bllWolEDIOFi9R\n52THfWdJkX9RpIj5UsF49xQ5XXB/951McCsA2FY/SfK6Qh2k9fSniTo9EcqB+kUH\nr137OZBQSQBucVl9t96VaRnm1etEBSE2cjJBmYYzW16tbgQ5IhUGiXWiQMNjEfZg\n9oOmfubnnYA7I8W/2scuzepabJTL8EWDfo/e7+amZUgLK7BPSxRvSWCtKTktfP8=\n=PuEE\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a612ed18d7667bf8e500c0c510edcb2458535d3\nparent 6486b021053fe143f5f81585b42c3f57acd18c43\nparent 22b4c688956de0925f7a10a79cb0e1ca35f55425\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673665475 +0900\ncommitter GitHub <noreply@github.com> 1673665475 +0900\n\nRollup merge of #106762 - WaffleLapkin:atomicptr+as_mut_ptr, r=m-ou-se\n\nAdd `AtomicPtr::as_mut_ptr`\n\nSee https://github.com/rust-lang/rust/issues/66893#issuecomment-720125447\n\nr? thomcc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b502a4765b80f4ffaaf23ede63d8a823ad93272", "html_url": "https://github.com/rust-lang/rust/commit/9b502a4765b80f4ffaaf23ede63d8a823ad93272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b502a4765b80f4ffaaf23ede63d8a823ad93272/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6486b021053fe143f5f81585b42c3f57acd18c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/6486b021053fe143f5f81585b42c3f57acd18c43", "html_url": "https://github.com/rust-lang/rust/commit/6486b021053fe143f5f81585b42c3f57acd18c43"}, {"sha": "22b4c688956de0925f7a10a79cb0e1ca35f55425", "url": "https://api.github.com/repos/rust-lang/rust/commits/22b4c688956de0925f7a10a79cb0e1ca35f55425", "html_url": "https://github.com/rust-lang/rust/commit/22b4c688956de0925f7a10a79cb0e1ca35f55425"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "14367eb09bc75e0e00c13ec9a4025638df8630f0", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9b502a4765b80f4ffaaf23ede63d8a823ad93272/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b502a4765b80f4ffaaf23ede63d8a823ad93272/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=9b502a4765b80f4ffaaf23ede63d8a823ad93272", "patch": "@@ -1786,6 +1786,42 @@ impl<T> AtomicPtr<T> {\n         // SAFETY: data races are prevented by atomic intrinsics.\n         unsafe { atomic_xor(self.p.get(), core::ptr::invalid_mut(val), order).cast() }\n     }\n+\n+    /// Returns a mutable pointer to the underlying pointer.\n+    ///\n+    /// Doing non-atomic reads and writes on the resulting integer can be a data race.\n+    /// This method is mostly useful for FFI, where the function signature may use\n+    /// `*mut *mut T` instead of `&AtomicPtr<T>`.\n+    ///\n+    /// Returning an `*mut` pointer from a shared reference to this atomic is safe because the\n+    /// atomic types work with interior mutability. All modifications of an atomic change the value\n+    /// through a shared reference, and can do so safely as long as they use atomic operations. Any\n+    /// use of the returned raw pointer requires an `unsafe` block and still has to uphold the same\n+    /// restriction: operations on it must be atomic.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore (extern-declaration)\n+    /// #![feature(atomic_mut_ptr)]\n+    //// use std::sync::atomic::AtomicPtr;\n+    ///\n+    /// extern \"C\" {\n+    ///     fn my_atomic_op(arg: *mut *mut u32);\n+    /// }\n+    ///\n+    /// let mut value = 17;\n+    /// let atomic = AtomicPtr::new(&mut value);\n+    ///\n+    /// // SAFETY: Safe as long as `my_atomic_op` is atomic.\n+    /// unsafe {\n+    ///     my_atomic_op(atomic.as_mut_ptr());\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n+    pub fn as_mut_ptr(&self) -> *mut *mut T {\n+        self.p.get()\n+    }\n }\n \n #[cfg(target_has_atomic_load_store = \"8\")]\n@@ -2678,9 +2714,9 @@ macro_rules! atomic_int {\n             #[doc = concat!(\"    fn my_atomic_op(arg: *mut \", stringify!($int_type), \");\")]\n             /// }\n             ///\n-            #[doc = concat!(\"let mut atomic = \", stringify!($atomic_type), \"::new(1);\")]\n+            #[doc = concat!(\"let atomic = \", stringify!($atomic_type), \"::new(1);\")]\n             ///\n-            // SAFETY: Safe as long as `my_atomic_op` is atomic.\n+            /// // SAFETY: Safe as long as `my_atomic_op` is atomic.\n             /// unsafe {\n             ///     my_atomic_op(atomic.as_mut_ptr());\n             /// }"}]}