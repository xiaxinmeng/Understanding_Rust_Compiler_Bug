{"sha": "47f0c15f67e334338b82deef1e812f157a54dcf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZjBjMTVmNjdlMzM0MzM4YjgyZGVlZjFlODEyZjE1N2E1NGRjZjI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-24T14:31:43Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-06T18:00:36Z"}, "message": "Symbol optimizations", "tree": {"sha": "3fb5e01254bb74e30627dfca8370999204974bc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb5e01254bb74e30627dfca8370999204974bc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47f0c15f67e334338b82deef1e812f157a54dcf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47f0c15f67e334338b82deef1e812f157a54dcf2", "html_url": "https://github.com/rust-lang/rust/commit/47f0c15f67e334338b82deef1e812f157a54dcf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47f0c15f67e334338b82deef1e812f157a54dcf2/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "624e8aad325925b43ee5a1fe1774055fdbd82397", "url": "https://api.github.com/repos/rust-lang/rust/commits/624e8aad325925b43ee5a1fe1774055fdbd82397", "html_url": "https://github.com/rust-lang/rust/commit/624e8aad325925b43ee5a1fe1774055fdbd82397"}], "stats": {"total": 149, "additions": 67, "deletions": 82}, "files": [{"sha": "c5b01461c1c00b077a97a914f262e4f9e49190b0", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 53, "deletions": 59, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=47f0c15f67e334338b82deef1e812f157a54dcf2", "patch": "@@ -250,12 +250,8 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     fn check_attribute(&mut self, cx: &LateContext<'tcx>, attr: &'tcx Attribute) {\n         if let Some(items) = &attr.meta_item_list() {\n             if let Some(ident) = attr.ident() {\n-                let ident = &*ident.as_str();\n-                match ident {\n-                    \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                        check_clippy_lint_names(cx, ident, items);\n-                    },\n-                    _ => {},\n+                if is_lint_level(ident.name) {\n+                    check_clippy_lint_names(cx, ident.name, items);\n                 }\n                 if items.is_empty() || !attr.has_name(sym::deprecated) {\n                     return;\n@@ -288,60 +284,54 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                         return;\n                     }\n                     if let Some(lint_list) = &attr.meta_item_list() {\n-                        if let Some(ident) = attr.ident() {\n-                            match &*ident.as_str() {\n-                                \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                                    // permit `unused_imports`, `deprecated`, `unreachable_pub`,\n-                                    // `clippy::wildcard_imports`, and `clippy::enum_glob_use` for `use` items\n-                                    // and `unused_imports` for `extern crate` items with `macro_use`\n-                                    for lint in lint_list {\n-                                        match item.kind {\n-                                            ItemKind::Use(..) => {\n-                                                if is_word(lint, sym!(unused_imports))\n-                                                    || is_word(lint, sym::deprecated)\n-                                                    || is_word(lint, sym!(unreachable_pub))\n-                                                    || is_word(lint, sym!(unused))\n-                                                    || extract_clippy_lint(lint)\n-                                                        .map_or(false, |s| s == \"wildcard_imports\")\n-                                                    || extract_clippy_lint(lint).map_or(false, |s| s == \"enum_glob_use\")\n-                                                {\n-                                                    return;\n-                                                }\n-                                            },\n-                                            ItemKind::ExternCrate(..) => {\n-                                                if is_word(lint, sym!(unused_imports)) && skip_unused_imports {\n-                                                    return;\n-                                                }\n-                                                if is_word(lint, sym!(unused_extern_crates)) {\n-                                                    return;\n-                                                }\n-                                            },\n-                                            _ => {},\n+                        if attr.ident().map_or(false, |ident| is_lint_level(ident.name)) {\n+                            // permit `unused_imports`, `deprecated`, `unreachable_pub`,\n+                            // `clippy::wildcard_imports`, and `clippy::enum_glob_use` for `use` items\n+                            // and `unused_imports` for `extern crate` items with `macro_use`\n+                            for lint in lint_list {\n+                                match item.kind {\n+                                    ItemKind::Use(..) => {\n+                                        if is_word(lint, sym!(unused_imports))\n+                                            || is_word(lint, sym::deprecated)\n+                                            || is_word(lint, sym!(unreachable_pub))\n+                                            || is_word(lint, sym!(unused))\n+                                            || extract_clippy_lint(lint).map_or(false, |s| s == \"wildcard_imports\")\n+                                            || extract_clippy_lint(lint).map_or(false, |s| s == \"enum_glob_use\")\n+                                        {\n+                                            return;\n+                                        }\n+                                    },\n+                                    ItemKind::ExternCrate(..) => {\n+                                        if is_word(lint, sym!(unused_imports)) && skip_unused_imports {\n+                                            return;\n                                         }\n-                                    }\n-                                    let line_span = first_line_of_span(cx, attr.span);\n-\n-                                    if let Some(mut sugg) = snippet_opt(cx, line_span) {\n-                                        if sugg.contains(\"#[\") {\n-                                            span_lint_and_then(\n-                                                cx,\n-                                                USELESS_ATTRIBUTE,\n+                                        if is_word(lint, sym!(unused_extern_crates)) {\n+                                            return;\n+                                        }\n+                                    },\n+                                    _ => {},\n+                                }\n+                            }\n+                            let line_span = first_line_of_span(cx, attr.span);\n+\n+                            if let Some(mut sugg) = snippet_opt(cx, line_span) {\n+                                if sugg.contains(\"#[\") {\n+                                    span_lint_and_then(\n+                                        cx,\n+                                        USELESS_ATTRIBUTE,\n+                                        line_span,\n+                                        \"useless lint attribute\",\n+                                        |diag| {\n+                                            sugg = sugg.replacen(\"#[\", \"#![\", 1);\n+                                            diag.span_suggestion(\n                                                 line_span,\n-                                                \"useless lint attribute\",\n-                                                |diag| {\n-                                                    sugg = sugg.replacen(\"#[\", \"#![\", 1);\n-                                                    diag.span_suggestion(\n-                                                        line_span,\n-                                                        \"if you just forgot a `!`, use\",\n-                                                        sugg,\n-                                                        Applicability::MaybeIncorrect,\n-                                                    );\n-                                                },\n+                                                \"if you just forgot a `!`, use\",\n+                                                sugg,\n+                                                Applicability::MaybeIncorrect,\n                                             );\n-                                        }\n-                                    }\n-                                },\n-                                _ => {},\n+                                        },\n+                                    );\n+                                }\n                             }\n                         }\n                     }\n@@ -379,10 +369,10 @@ fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n     None\n }\n \n-fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n+fn check_clippy_lint_names(cx: &LateContext<'_>, name: Symbol, items: &[NestedMetaItem]) {\n     for lint in items {\n         if let Some(lint_name) = extract_clippy_lint(lint) {\n-            if lint_name == \"restriction\" && ident != \"allow\" {\n+            if lint_name == \"restriction\" && name != sym::allow {\n                 span_lint_and_help(\n                     cx,\n                     BLANKET_CLIPPY_RESTRICTION_LINTS,\n@@ -647,3 +637,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n         }\n     }\n }\n+\n+fn is_lint_level(symbol: Symbol) -> bool {\n+    matches!(symbol, sym::allow | sym::warn | sym::deny | sym::forbid)\n+}"}, {"sha": "249ee27330bf92537e7686b922fd109ff649ccee", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=47f0c15f67e334338b82deef1e812f157a54dcf2", "patch": "@@ -1,9 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{attr_by_name, in_macro, match_path_ast};\n+use clippy_utils::{in_macro, match_path_ast};\n use rustc_ast::ast::{AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n use std::convert::TryInto;\n \n@@ -138,7 +138,7 @@ impl EarlyLintPass for ExcessiveBools {\n         }\n         match &item.kind {\n             ItemKind::Struct(variant_data, _) => {\n-                if attr_by_name(&item.attrs, \"repr\").is_some() {\n+                if item.attrs.iter().any(|attr| attr.has_name(sym::repr)) {\n                     return;\n                 }\n "}, {"sha": "9ea8e2eaa2a79eb7aef8694bb12bf62741210289", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=47f0c15f67e334338b82deef1e812f157a54dcf2", "patch": "@@ -8,13 +8,13 @@ use rustc_middle::{\n     lint::in_external_macro,\n     ty::{self, Ty},\n };\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n use clippy_utils::attrs::is_proc_macro;\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_must_use_ty;\n-use clippy_utils::{attr_by_name, match_def_path, must_use_attr, return_ty, trait_ref_of_method};\n+use clippy_utils::{match_def_path, must_use_attr, return_ty, trait_ref_of_method};\n \n use super::{DOUBLE_MUST_USE, MUST_USE_CANDIDATE, MUST_USE_UNIT};\n \n@@ -27,7 +27,7 @@ pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             return;\n-        } else if is_public && !is_proc_macro(cx.sess(), attrs) && attr_by_name(attrs, \"no_mangle\").is_none() {\n+        } else if is_public && !is_proc_macro(cx.sess(), attrs) && !attrs.iter().any(|a| a.has_name(sym::no_mangle)) {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,"}, {"sha": "c506d52e7462a09f5417bff79058ee9372b1581c", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=47f0c15f67e334338b82deef1e812f157a54dcf2", "patch": "@@ -9,7 +9,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{edition::Edition, Span};\n+use rustc_span::{edition::Edition, sym, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `#[macro_use] use...`.\n@@ -110,9 +110,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             if cx.sess().opts.edition >= Edition::Edition2018;\n             if let hir::ItemKind::Use(path, _kind) = &item.kind;\n             let attrs = cx.tcx.hir().attrs(item.hir_id());\n-            if let Some(mac_attr) = attrs\n-                .iter()\n-                .find(|attr| attr.ident().map(|s| s.to_string()) == Some(\"macro_use\".to_string()));\n+            if let Some(mac_attr) = attrs.iter().find(|attr| attr.has_name(sym::macro_use));\n             if let Res::Def(DefKind::Mod, id) = path.res;\n             then {\n                 for kid in cx.tcx.item_children(id).iter() {"}, {"sha": "800172f4cf3dcdd3ee8a51363444b396c60b4040", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=47f0c15f67e334338b82deef1e812f157a54dcf2", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{BlockCheckMode, UnsafeSource};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{kw, sym};\n use std::borrow::Cow;\n \n use super::OR_FUN_CALL;\n@@ -38,8 +38,8 @@ pub(super) fn check<'tcx>(\n             if !or_has_args;\n             if name == \"unwrap_or\";\n             if let hir::ExprKind::Path(ref qpath) = fun.kind;\n-            let path = &*last_path_segment(qpath).ident.as_str();\n-            if [\"default\", \"new\"].contains(&path);\n+            let path = last_path_segment(qpath).ident.name;\n+            if matches!(path, kw::Default | sym::new);\n             let arg_ty = cx.typeck_results().expr_ty(arg);\n             if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n             if implements_trait(cx, arg_ty, default_trait_id, &[]);"}, {"sha": "b6f518661bdb1b4efbf38ef9fb0868909a4b92cd", "filename": "clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=47f0c15f67e334338b82deef1e812f157a54dcf2", "patch": "@@ -4,6 +4,7 @@ use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `option_env!(...).unwrap()` and\n@@ -37,8 +38,7 @@ impl EarlyLintPass for OptionEnvUnwrap {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if_chain! {\n             if let ExprKind::MethodCall(path_segment, args, _) = &expr.kind;\n-            let method_name = path_segment.ident.as_str();\n-            if method_name == \"expect\" || method_name == \"unwrap\";\n+            if matches!(path_segment.ident.name, sym::expect | sym::unwrap);\n             if let ExprKind::Call(caller, _) = &args[0].kind;\n             if is_direct_expn_of(caller.span, \"option_env\").is_some();\n             then {"}, {"sha": "6088cd323c4b110c69e0856fb9450724b043709a", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f0c15f67e334338b82deef1e812f157a54dcf2/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=47f0c15f67e334338b82deef1e812f157a54dcf2", "patch": "@@ -1203,16 +1203,9 @@ pub fn parent_node_is_if_expr(expr: &Expr<'_>, cx: &LateContext<'_>) -> bool {\n     )\n }\n \n-// Finds the attribute with the given name, if any\n-pub fn attr_by_name<'a>(attrs: &'a [Attribute], name: &'_ str) -> Option<&'a Attribute> {\n-    attrs\n-        .iter()\n-        .find(|attr| attr.ident().map_or(false, |ident| ident.as_str() == name))\n-}\n-\n // Finds the `#[must_use]` attribute, if any\n pub fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n-    attr_by_name(attrs, \"must_use\")\n+    attrs.iter().find(|a| a.has_name(sym::must_use))\n }\n \n // check if expr is calling method or function with #[must_use] attribute"}]}