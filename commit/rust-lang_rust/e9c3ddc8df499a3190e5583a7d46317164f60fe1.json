{"sha": "e9c3ddc8df499a3190e5583a7d46317164f60fe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YzNkZGM4ZGY0OTlhMzE5MGU1NTgzYTdkNDYzMTcxNjRmNjBmZTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T07:15:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-07T07:15:26Z"}, "message": "Rollup merge of #69680 - petrochenkov:nont4, r=Centril\n\nrustc_expand: Factor out `Annotatable::into_tokens` to a separate method\n\nMinor refactoring salvaged from https://github.com/rust-lang/rust/pull/69594.\nr? @Centril", "tree": {"sha": "9c9a8beac240f7a7d7e2fe18369a34ee85c8e138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c9a8beac240f7a7d7e2fe18369a34ee85c8e138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9c3ddc8df499a3190e5583a7d46317164f60fe1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeY0oOCRBK7hj4Ov3rIwAAdHIIAIh56+G1COrNdeIh0jkh6qM0\nAwX7YLA9Im8wtWJ8Vs8aiHsB6FCe2SXeHYeWerXIGyNZLJgxXMAQy9kwTExHXI5M\nc/0gdPFG+BrdYtbPcWRgM479RJoBqLIOCBGErybEIY1zscSbhCml7RnebtYlENpQ\nSKZtCZP82uFfzMNUhJep2INMBSC15ASBBR9XgzJZg7JVGM0o+UNGw+pU2HjlAMgG\nbafxHAn71mK/EUg15fdEe7IuquK73fioJpfyzq5xp95OeMg5zGzQdG1CDAWZOr/n\nE+MajXy+oRKLZSpAUdp8UR8OR409e0htX85q48HXWjwHTzXMmEtTCq2Wmpwa+LE=\n=L5/G\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c9a8beac240f7a7d7e2fe18369a34ee85c8e138\nparent 5d1433b1f401d6b2a43a5728924c3725014b8cdc\nparent 2d0c5b4337ff24ef12b3ed7242a6bbf9f7567ce1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583565326 +0100\ncommitter GitHub <noreply@github.com> 1583565326 +0100\n\nRollup merge of #69680 - petrochenkov:nont4, r=Centril\n\nrustc_expand: Factor out `Annotatable::into_tokens` to a separate method\n\nMinor refactoring salvaged from https://github.com/rust-lang/rust/pull/69594.\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c3ddc8df499a3190e5583a7d46317164f60fe1", "html_url": "https://github.com/rust-lang/rust/commit/e9c3ddc8df499a3190e5583a7d46317164f60fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9c3ddc8df499a3190e5583a7d46317164f60fe1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d1433b1f401d6b2a43a5728924c3725014b8cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1433b1f401d6b2a43a5728924c3725014b8cdc", "html_url": "https://github.com/rust-lang/rust/commit/5d1433b1f401d6b2a43a5728924c3725014b8cdc"}, {"sha": "2d0c5b4337ff24ef12b3ed7242a6bbf9f7567ce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0c5b4337ff24ef12b3ed7242a6bbf9f7567ce1", "html_url": "https://github.com/rust-lang/rust/commit/2d0c5b4337ff24ef12b3ed7242a6bbf9f7567ce1"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "f15e626c2783b0593cd596de1bf4aad828bcea4e", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e9c3ddc8df499a3190e5583a7d46317164f60fe1/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c3ddc8df499a3190e5583a7d46317164f60fe1/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=e9c3ddc8df499a3190e5583a7d46317164f60fe1", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::ast::{self, Attribute, Name, NodeId, PatKind};\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n-use rustc_ast::tokenstream::{self, TokenStream};\n+use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_attr::{self as attr, Deprecation, HasAttrs, Stability};\n use rustc_data_structures::fx::FxHashMap;\n@@ -118,6 +118,31 @@ impl Annotatable {\n         }\n     }\n \n+    crate fn into_tokens(self) -> TokenStream {\n+        // `Annotatable` can be converted into tokens directly, but we\n+        // are packing it into a nonterminal as a piece of AST to make\n+        // the produced token stream look nicer in pretty-printed form.\n+        let nt = match self {\n+            Annotatable::Item(item) => token::NtItem(item),\n+            Annotatable::TraitItem(item) | Annotatable::ImplItem(item) => {\n+                token::NtItem(P(item.and_then(ast::AssocItem::into_item)))\n+            }\n+            Annotatable::ForeignItem(item) => {\n+                token::NtItem(P(item.and_then(ast::ForeignItem::into_item)))\n+            }\n+            Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n+            Annotatable::Expr(expr) => token::NtExpr(expr),\n+            Annotatable::Arm(..)\n+            | Annotatable::Field(..)\n+            | Annotatable::FieldPat(..)\n+            | Annotatable::GenericParam(..)\n+            | Annotatable::Param(..)\n+            | Annotatable::StructField(..)\n+            | Annotatable::Variant(..) => panic!(\"unexpected annotatable\"),\n+        };\n+        TokenTree::token(token::Interpolated(Lrc::new(nt)), DUMMY_SP).into()\n+    }\n+\n     pub fn expect_item(self) -> P<ast::Item> {\n         match self {\n             Annotatable::Item(i) => i,"}, {"sha": "effa89e8bfb21736080ffc31e8ddd41d2ea19205", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e9c3ddc8df499a3190e5583a7d46317164f60fe1/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c3ddc8df499a3190e5583a7d46317164f60fe1/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=e9c3ddc8df499a3190e5583a7d46317164f60fe1", "patch": "@@ -10,12 +10,11 @@ use rustc_ast::ast::{ItemKind, MacArgs, MacStmtStyle, StmtKind};\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n-use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::util::map_in_place::MapInPlace;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::Features;\n use rustc_parse::configure;\n@@ -668,38 +667,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 SyntaxExtensionKind::Attr(expander) => {\n                     self.gate_proc_macro_input(&item);\n                     self.gate_proc_macro_attr_item(span, &item);\n-                    // `Annotatable` can be converted into tokens directly, but we are packing it\n-                    // into a nonterminal as a piece of AST to make the produced token stream\n-                    // look nicer in pretty-printed form. This may be no longer necessary.\n-                    let item_tok = TokenTree::token(\n-                        token::Interpolated(Lrc::new(match item {\n-                            Annotatable::Item(item) => token::NtItem(item),\n-                            Annotatable::TraitItem(item) | Annotatable::ImplItem(item) => {\n-                                token::NtItem(P(item.and_then(ast::AssocItem::into_item)))\n-                            }\n-                            Annotatable::ForeignItem(item) => {\n-                                token::NtItem(P(item.and_then(ast::ForeignItem::into_item)))\n-                            }\n-                            Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n-                            Annotatable::Expr(expr) => token::NtExpr(expr),\n-                            Annotatable::Arm(..)\n-                            | Annotatable::Field(..)\n-                            | Annotatable::FieldPat(..)\n-                            | Annotatable::GenericParam(..)\n-                            | Annotatable::Param(..)\n-                            | Annotatable::StructField(..)\n-                            | Annotatable::Variant(..) => panic!(\"unexpected annotatable\"),\n-                        })),\n-                        DUMMY_SP,\n-                    )\n-                    .into();\n-                    let item = attr.unwrap_normal_item();\n-                    if let MacArgs::Eq(..) = item.args {\n+                    let tokens = item.into_tokens();\n+                    let attr_item = attr.unwrap_normal_item();\n+                    if let MacArgs::Eq(..) = attr_item.args {\n                         self.cx.span_err(span, \"key-value macro attributes are not supported\");\n                     }\n                     let tok_result =\n-                        expander.expand(self.cx, span, item.args.inner_tokens(), item_tok);\n-                    self.parse_ast_fragment(tok_result, fragment_kind, &item.path, span)\n+                        expander.expand(self.cx, span, attr_item.args.inner_tokens(), tokens);\n+                    self.parse_ast_fragment(tok_result, fragment_kind, &attr_item.path, span)\n                 }\n                 SyntaxExtensionKind::LegacyAttr(expander) => {\n                     match validate_attr::parse_meta(self.cx.parse_sess, &attr) {"}]}