{"sha": "12080dc3a3ebee0e343d528ca15835ac2d4c75c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMDgwZGMzYTNlYmVlMGUzNDNkNTI4Y2ExNTgzNWFjMmQ0Yzc1Yzc=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-21T11:54:49Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-21T11:54:49Z"}, "message": "rustc_parse: remove unneccessary wrapping of return value in fn mk_range() which would always return Ok(..)", "tree": {"sha": "85c445da72b09c5670aaf017393927cf65a0cae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85c445da72b09c5670aaf017393927cf65a0cae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12080dc3a3ebee0e343d528ca15835ac2d4c75c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12080dc3a3ebee0e343d528ca15835ac2d4c75c7", "html_url": "https://github.com/rust-lang/rust/commit/12080dc3a3ebee0e343d528ca15835ac2d4c75c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12080dc3a3ebee0e343d528ca15835ac2d4c75c7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb649bdb1c5f176c48a692a4271489dd3fe5ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb649bdb1c5f176c48a692a4271489dd3fe5ef3", "html_url": "https://github.com/rust-lang/rust/commit/4cb649bdb1c5f176c48a692a4271489dd3fe5ef3"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "34b4d3200a9d8bdcceacdd2f00b5ef5416384144", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12080dc3a3ebee0e343d528ca15835ac2d4c75c7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12080dc3a3ebee0e343d528ca15835ac2d4c75c7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=12080dc3a3ebee0e343d528ca15835ac2d4c75c7", "patch": "@@ -426,7 +426,7 @@ impl<'a> Parser<'a> {\n         let span = self.mk_expr_sp(&lhs, lhs.span, rhs_span);\n         let limits =\n             if op == AssocOp::DotDot { RangeLimits::HalfOpen } else { RangeLimits::Closed };\n-        Ok(self.mk_expr(span, self.mk_range(Some(lhs), rhs, limits)?, AttrVec::new()))\n+        Ok(self.mk_expr(span, self.mk_range(Some(lhs), rhs, limits), AttrVec::new()))\n     }\n \n     fn is_at_start_of_range_notation_rhs(&self) -> bool {\n@@ -474,7 +474,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 (lo, None)\n             };\n-            Ok(this.mk_expr(span, this.mk_range(None, opt_end, limits)?, attrs.into()))\n+            Ok(this.mk_expr(span, this.mk_range(None, opt_end, limits), attrs.into()))\n         })\n     }\n \n@@ -2396,12 +2396,12 @@ impl<'a> Parser<'a> {\n         start: Option<P<Expr>>,\n         end: Option<P<Expr>>,\n         limits: RangeLimits,\n-    ) -> PResult<'a, ExprKind> {\n+    ) -> ExprKind {\n         if end.is_none() && limits == RangeLimits::Closed {\n             self.error_inclusive_range_with_no_end(self.prev_token.span);\n-            Ok(ExprKind::Err)\n+            ExprKind::Err\n         } else {\n-            Ok(ExprKind::Range(start, end, limits))\n+            ExprKind::Range(start, end, limits)\n         }\n     }\n "}]}