{"sha": "46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZDRiYmJhZTRlNTJiNzljMjMxMzZiOTI2YzFlM2IxZjE4N2NlNGI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-17T05:14:59Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-22T16:01:12Z"}, "message": "Simplify the AST representation of ty param bounds\n\nChange ast::ty_param_bound so that all ty param bounds are represented\nas traits, with no special cases for Copy/Send/Owned/Const.\ntypeck::collect generates the special cases.\n\nA consequence of this is that code using the #[no_core] attribute\ncan't use the Copy kind/trait. Probably not a big deal?\n\nAs a side effect, any user-defined traits that happen to be called\nCopy, etc. in the same module override the built-in Copy trait.\n\nr=nmatsakis\n\nCloses #2284", "tree": {"sha": "781fb02e8c6acd62d3cbad5c71bd1404e60d2a31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/781fb02e8c6acd62d3cbad5c71bd1404e60d2a31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "html_url": "https://github.com/rust-lang/rust/commit/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c05fe642efa726dc6cde624b40b638741724ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c05fe642efa726dc6cde624b40b638741724ee", "html_url": "https://github.com/rust-lang/rust/commit/42c05fe642efa726dc6cde624b40b638741724ee"}], "stats": {"total": 122, "additions": 57, "deletions": 65}, "files": [{"sha": "a3d2fe96b5dcbf37f2c61d6a57ed29939c1da37b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -123,13 +123,11 @@ const crate_node_id: node_id = 0;\n \n #[auto_serialize]\n #[auto_deserialize]\n-enum ty_param_bound {\n-    bound_copy,\n-    bound_send,\n-    bound_const,\n-    bound_owned,\n-    bound_trait(@Ty),\n-}\n+// The AST represents all type param bounds as types.\n+// typeck::collect::compute_bounds matches these against\n+// the \"special\" built-in traits (see middle::lang_items) and\n+// detects Copy, Send, Owned, and Const.\n+enum ty_param_bound = @Ty;\n \n #[auto_serialize]\n #[auto_deserialize]"}, {"sha": "47e61c26f38d2c4b5c7e442ece0b47b94898fb39", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -227,7 +227,7 @@ priv impl ext_ctxt {\n         path: @ast::path,\n         bounds: @~[ast::ty_param_bound]\n     ) -> ast::ty_param {\n-        let bound = ast::bound_trait(@{\n+        let bound = ast::ty_param_bound(@{\n             id: self.next_id(),\n             node: ast::ty_path(path, self.next_id()),\n             span: span,\n@@ -366,7 +366,7 @@ fn mk_impl(\n     let mut trait_tps = vec::append(\n         ~[ty_param],\n          do tps.map |tp| {\n-            let t_bound = ast::bound_trait(@{\n+            let t_bound = ast::ty_param_bound(@{\n                 id: cx.next_id(),\n                 node: ast::ty_path(path, cx.next_id()),\n                 span: span,"}, {"sha": "311928dd4e0c71bf64280639739ca02d9adda0fb", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -131,10 +131,7 @@ fn fold_fn_decl(decl: ast::fn_decl, fld: ast_fold) -> ast::fn_decl {\n }\n \n fn fold_ty_param_bound(tpb: ty_param_bound, fld: ast_fold) -> ty_param_bound {\n-    match tpb {\n-      bound_copy | bound_send | bound_const | bound_owned => tpb,\n-      bound_trait(ty) => bound_trait(fld.fold_ty(ty))\n-    }\n+    ty_param_bound(fld.fold_ty(*tpb))\n }\n \n fn fold_ty_param(tp: ty_param, fld: ast_fold) -> ty_param {"}, {"sha": "925da063ca62d24cfa1f73b38b046b8316f58012", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -24,8 +24,7 @@ use obsolete::{\n };\n use ast::{_mod, add, arg, arm, attribute,\n              bind_by_ref, bind_by_implicit_ref, bind_by_value, bind_by_move,\n-             bitand, bitor, bitxor, blk, blk_check_mode, bound_const,\n-             bound_copy, bound_send, bound_trait, bound_owned, box, by_copy,\n+             bitand, bitor, bitxor, blk, blk_check_mode, box, by_copy,\n              by_move, by_ref, by_val, capture_clause,\n              capture_item, cdir_dir_mod, cdir_src_mod, cdir_view_item,\n              class_immutable, class_mutable,\n@@ -2295,19 +2294,20 @@ impl Parser {\n         return spanned(lo, hi, bloc);\n     }\n \n+    fn mk_ty_path(i: ident) -> @Ty {\n+        @{id: self.get_id(), node: ty_path(\n+            ident_to_path(copy self.last_span, i),\n+            self.get_id()), span: self.last_span}\n+    }\n+\n     fn parse_optional_ty_param_bounds() -> @~[ty_param_bound] {\n         let mut bounds = ~[];\n         if self.eat(token::COLON) {\n             while is_ident(self.token) {\n                 if is_ident(self.token) {\n-                    // XXX: temporary until kinds become traits\n                     let maybe_bound = match self.token {\n                       token::IDENT(copy sid, _) => {\n                         match *self.id_to_str(sid) {\n-                          ~\"Send\" => Some(bound_send),\n-                          ~\"Copy\" => Some(bound_copy),\n-                          ~\"Const\" => Some(bound_const),\n-                          ~\"Owned\" => Some(bound_owned),\n \n                           ~\"send\"\n                           | ~\"copy\"\n@@ -2317,7 +2317,7 @@ impl Parser {\n                                           ObsoleteLowerCaseKindBounds);\n                             // Bogus value, but doesn't matter, since\n                             // is an error\n-                            Some(bound_send)\n+                            Some(ty_param_bound(self.mk_ty_path(sid)))\n                           }\n \n                           _ => None\n@@ -2332,11 +2332,11 @@ impl Parser {\n                             bounds.push(bound);\n                         }\n                         None => {\n-                            bounds.push(bound_trait(self.parse_ty(false)));\n+                            bounds.push(ty_param_bound(self.parse_ty(false)));\n                         }\n                     }\n                 } else {\n-                    bounds.push(bound_trait(self.parse_ty(false)));\n+                    bounds.push(ty_param_bound(self.parse_ty(false)));\n                 }\n             }\n         }"}, {"sha": "909f59552d4b7ab383c7fff268a1d67cc967d8e7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -1704,17 +1704,11 @@ fn print_arg_mode(s: ps, m: ast::mode) {\n }\n \n fn print_bounds(s: ps, bounds: @~[ast::ty_param_bound]) {\n-    if vec::len(*bounds) > 0u {\n+    if bounds.is_not_empty() {\n         word(s.s, ~\":\");\n         for vec::each(*bounds) |bound| {\n             nbsp(s);\n-            match *bound {\n-              ast::bound_copy => word(s.s, ~\"Copy\"),\n-              ast::bound_send => word(s.s, ~\"Send\"),\n-              ast::bound_const => word(s.s, ~\"Const\"),\n-              ast::bound_owned => word(s.s, ~\"Owned\"),\n-              ast::bound_trait(t) => print_type(s, t)\n-            }\n+            print_type(s, **bound);\n         }\n     }\n }"}, {"sha": "b45af2d4ae8721eb81f593f260ccec6732d80037", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -264,10 +264,7 @@ fn visit_foreign_item<E>(ni: @foreign_item, e: E, v: vt<E>) {\n \n fn visit_ty_param_bounds<E>(bounds: @~[ty_param_bound], e: E, v: vt<E>) {\n     for vec::each(*bounds) |bound| {\n-        match *bound {\n-          bound_trait(t) => v.visit_ty(t, e, v),\n-          bound_copy | bound_send | bound_const | bound_owned => ()\n-        }\n+        v.visit_ty(**bound, e, v)\n     }\n }\n "}, {"sha": "3d2cd6a621cd540a8844257e94aa603a0c73d9d3", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -9,9 +9,9 @@ use middle::pat_util::{pat_bindings};\n use syntax::ast::{_mod, add, arm};\n use syntax::ast::{bind_by_ref, bind_by_implicit_ref, bind_by_value};\n use syntax::ast::{bitand, bitor, bitxor};\n-use syntax::ast::{blk, bound_const, bound_copy, bound_owned, bound_send};\n-use syntax::ast::{bound_trait, binding_mode, capture_clause, class_ctor};\n-use syntax::ast::{class_dtor, crate, crate_num, decl_item};\n+use syntax::ast::{binding_mode, blk,\n+                     capture_clause, class_ctor, class_dtor};\n+use syntax::ast::{crate, crate_num, decl_item};\n use syntax::ast::{def, def_arg, def_binding, def_class, def_const, def_fn};\n use syntax::ast::{def_foreign_mod, def_id, def_label, def_local, def_mod};\n use syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n@@ -39,6 +39,7 @@ use syntax::ast::{trait_ref, tuple_variant_kind, Ty, ty_bool, ty_char};\n use syntax::ast::{ty_f, ty_f32, ty_f64, ty_float, ty_i, ty_i16, ty_i32};\n use syntax::ast::{ty_i64, ty_i8, ty_int, ty_param, ty_path, ty_str, ty_u};\n use syntax::ast::{ty_u16, ty_u32, ty_u64, ty_u8, ty_uint, type_value_ns};\n+use syntax::ast::{ty_param_bound};\n use syntax::ast::{variant, view_item, view_item_export, view_item_import};\n use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n use syntax::ast::{view_path_simple, visibility, anonymous, named};\n@@ -3764,14 +3765,7 @@ impl Resolver {\n                                visitor: ResolveVisitor) {\n         for type_parameters.each |type_parameter| {\n             for type_parameter.bounds.each |bound| {\n-                match *bound {\n-                    bound_copy | bound_send | bound_const | bound_owned => {\n-                        // Nothing to do.\n-                    }\n-                    bound_trait(trait_type) => {\n-                        self.resolve_type(trait_type, visitor);\n-                    }\n-                }\n+                self.resolve_type(**bound, visitor);\n             }\n         }\n     }\n@@ -4088,7 +4082,7 @@ impl Resolver {\n                 let mut result_def = None;\n \n                 // First, check to see whether the name is a primitive type.\n-                if path.idents.len() == 1u {\n+                if path.idents.len() == 1 {\n                     let name = path.idents.last();\n \n                     match self.primitive_type_table"}, {"sha": "e12104a21dadad1a71da87609ae84764e2b86e14", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -707,28 +707,41 @@ fn ty_of_foreign_item(ccx: @crate_ctxt, it: @ast::foreign_item)\n     }\n }\n \n+// Translate the AST's notion of ty param bounds (which are just newtyped Tys)\n+// to ty's notion of ty param bounds, which can either be user-defined traits,\n+// or one of the four built-in traits (formerly known as kinds): Const, Copy,\n+// Owned, and Send.\n fn compute_bounds(ccx: @crate_ctxt,\n                   ast_bounds: @~[ast::ty_param_bound]) -> ty::param_bounds {\n     @do vec::flat_map(*ast_bounds) |b| {\n-        match *b {\n-          ast::bound_send => ~[ty::bound_send],\n-          ast::bound_copy => ~[ty::bound_copy],\n-          ast::bound_const => ~[ty::bound_const],\n-          ast::bound_owned => ~[ty::bound_owned],\n-          ast::bound_trait(t) => {\n-            let ity = ast_ty_to_ty(ccx, empty_rscope, t);\n-            match ty::get(ity).sty {\n-              ty::ty_trait(*) => {\n-                ~[ty::bound_trait(ity)]\n-              }\n-              _ => {\n+        let li = &ccx.tcx.lang_items;\n+        let ity = ast_ty_to_ty(ccx, empty_rscope, **b);\n+        match ty::get(ity).sty {\n+            ty::ty_trait(did, _, _) => {\n+                let d = Some(did);\n+                if d == li.send_trait {\n+                    ~[ty::bound_send]\n+                }\n+                else if d == li.copy_trait {\n+                    ~[ty::bound_copy]\n+                }\n+                else if d == li.const_trait {\n+                    ~[ty::bound_const]\n+                }\n+                else if d == li.owned_trait {\n+                    ~[ty::bound_owned]\n+                }\n+                else {\n+                    // Must be a user-defined trait\n+                    ~[ty::bound_trait(ity)]\n+                }\n+            }\n+            _ => {\n                 ccx.tcx.sess.span_err(\n-                    t.span, ~\"type parameter bounds must be \\\n-                              trait types\");\n+                    (*b).span, ~\"type parameter bounds must be \\\n+                                 trait types\");\n                 ~[]\n-              }\n             }\n-          }\n         }\n     }\n }"}, {"sha": "f5bd208f00f0a8dc5f76911635c33ce071f0a792", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -5,7 +5,7 @@\n \n extern mod core;\n \n-fn last<T: Copy>(v: ~[const T]) -> core::Option<T> {\n+fn last<T>(v: ~[const &T]) -> core::Option<T> {\n     fail;\n }\n "}, {"sha": "c2c4c03fb8f671ee360b6affba1716161cfeae4c", "filename": "src/test/run-pass/issue-2284.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Ftest%2Frun-pass%2Fissue-2284.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d4bbbae4e52b79c23136b926c1e3b1f187ce4b/src%2Ftest%2Frun-pass%2Fissue-2284.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2284.rs?ref=46d4bbbae4e52b79c23136b926c1e3b1f187ce4b", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test\n trait Send {\n     fn f();\n }"}]}