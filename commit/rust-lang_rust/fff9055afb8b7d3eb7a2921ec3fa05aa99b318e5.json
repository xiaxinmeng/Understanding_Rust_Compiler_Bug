{"sha": "fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5", "node_id": "C_kwDOAAsO6NoAKGZmZjkwNTVhZmI4YjdkM2ViN2EyOTIxZWMzZmEwNWFhOTliMzE4ZTU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-16T00:14:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-16T00:14:22Z"}, "message": "Rollup merge of #90892 - RalfJung:miri-partial-ptr-copy, r=oli-obk\n\nfix ICE on Miri/CTFE copy of half a pointer\n\nFixes https://github.com/rust-lang/miri/issues/1910\nr? `````@oli-obk`````", "tree": {"sha": "9d0836de069d673769e8419f6bab732ff02b7384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d0836de069d673769e8419f6bab732ff02b7384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhkvffCRBK7hj4Ov3rIwAANQcIAJeApv/ZVSghsWWLbXPm0fEM\ncqJp/3uT2WjGi2jXRtcuhjxZphAqjN9DCGZHg4R4u7TMSPze56R/WgwifkhscBb5\nz1radXAK/h9kLARigruW0YxNEZPn0RpH1nkVQFHVOk9cS/1boa/pGcVKDTCCvzoT\n/aYHgV84kPvwJj+eVNW2JBxPnBN2rn4UlK4jn88He+Rb64rmXrsSd9fUGXRV/De+\nhEq3PNBajNk+Hr+3Z98IdJ0mZfaOuTlVvwhKcpTot/SLh0R31S73JiYi2hu5i9kw\nBZploQCYdWQdXGP6QbKmolCqNuy1+0bxWoyjGCwZF0/wE/y3/bUkByHzEmck3uE=\n=dpQp\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d0836de069d673769e8419f6bab732ff02b7384\nparent fb96ecc37a99def7236a683b1f39369e701ed765\nparent 94ca0b392df7c0f551c136394bf3456bee041357\nauthor Yuki Okushi <jtitor@2k36.org> 1637021662 +0900\ncommitter GitHub <noreply@github.com> 1637021662 +0900\n\nRollup merge of #90892 - RalfJung:miri-partial-ptr-copy, r=oli-obk\n\nfix ICE on Miri/CTFE copy of half a pointer\n\nFixes https://github.com/rust-lang/miri/issues/1910\nr? `````@oli-obk`````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5", "html_url": "https://github.com/rust-lang/rust/commit/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb96ecc37a99def7236a683b1f39369e701ed765", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb96ecc37a99def7236a683b1f39369e701ed765", "html_url": "https://github.com/rust-lang/rust/commit/fb96ecc37a99def7236a683b1f39369e701ed765"}, {"sha": "94ca0b392df7c0f551c136394bf3456bee041357", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ca0b392df7c0f551c136394bf3456bee041357", "html_url": "https://github.com/rust-lang/rust/commit/94ca0b392df7c0f551c136394bf3456bee041357"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "4aa3c83cc024366bebdd71dd4332dd5976704057", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5", "patch": "@@ -1057,20 +1057,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Some(dest_ptr) => dest_ptr,\n         };\n \n+        // This checks relocation edges on the src, which needs to happen before\n+        // `prepare_relocation_copy`.\n+        let src_bytes = src_alloc\n+            .get_bytes_with_uninit_and_ptr(&tcx, src_range)\n+            .map_err(|e| e.to_interp_error(src_alloc_id))?\n+            .as_ptr(); // raw ptr, so we can also get a ptr to the destination allocation\n         // first copy the relocations to a temporary buffer, because\n         // `get_bytes_mut` will clear the relocations, which is correct,\n         // since we don't want to keep any relocations at the target.\n-        // (`get_bytes_with_uninit_and_ptr` below checks that there are no\n-        // relocations overlapping the edges; those would not be handled correctly).\n         let relocations =\n             src_alloc.prepare_relocation_copy(self, src_range, dest_offset, num_copies);\n         // Prepare a copy of the initialization mask.\n         let compressed = src_alloc.compress_uninit_range(src_range);\n-        // This checks relocation edges on the src.\n-        let src_bytes = src_alloc\n-            .get_bytes_with_uninit_and_ptr(&tcx, src_range)\n-            .map_err(|e| e.to_interp_error(src_alloc_id))?\n-            .as_ptr(); // raw ptr, so we can also get a ptr to the destination allocation\n \n         // Destination alloc preparations and access hooks.\n         let (dest_alloc, extra) = self.get_raw_mut(dest_alloc_id)?;"}, {"sha": "20efa145dbe1e9e10ea180f8037348c3f3733eee", "filename": "src/test/ui/consts/issue-miri-1910.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.rs?ref=fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern unable to turn pointer into raw bytes\n+#![feature(const_ptr_read)]\n+#![feature(const_ptr_offset)]\n+\n+const C: () = unsafe {\n+    let foo = Some(&42 as *const i32);\n+    let one_and_a_half_pointers = std::mem::size_of::<*const i32>()/2*3;\n+    (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n+};\n+\n+fn main() {\n+}"}, {"sha": "e2f4ef635887c4273bb6c7c22944aa3df656f370", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=fff9055afb8b7d3eb7a2921ec3fa05aa99b318e5", "patch": "@@ -0,0 +1,26 @@\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL |           copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |           |\n+   |           unable to turn pointer into raw bytes\n+   |           inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |           inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |           inside `C` at $DIR/issue-miri-1910.rs:8:5\n+   |\n+  ::: $DIR/issue-miri-1910.rs:5:1\n+   |\n+LL | / const C: () = unsafe {\n+LL | |     let foo = Some(&42 as *const i32);\n+LL | |     let one_and_a_half_pointers = std::mem::size_of::<*const i32>()/2*3;\n+LL | |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to previous error\n+"}]}