{"sha": "2b85817af8bc4bdfbb155f15367c3ebee09eb743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiODU4MTdhZjhiYzRiZGZiYjE1NWYxNTM2N2MzZWJlZTA5ZWI3NDM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-27T23:27:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-27T23:27:47Z"}, "message": "Convert various functions in std to take lambda blocks", "tree": {"sha": "d26f857850b2ff7873f9b19bef660d81ebda6d7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d26f857850b2ff7873f9b19bef660d81ebda6d7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b85817af8bc4bdfbb155f15367c3ebee09eb743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b85817af8bc4bdfbb155f15367c3ebee09eb743", "html_url": "https://github.com/rust-lang/rust/commit/2b85817af8bc4bdfbb155f15367c3ebee09eb743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b85817af8bc4bdfbb155f15367c3ebee09eb743/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf2624106c36d2dd37ff357bc1eb48586719d015", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2624106c36d2dd37ff357bc1eb48586719d015", "html_url": "https://github.com/rust-lang/rust/commit/cf2624106c36d2dd37ff357bc1eb48586719d015"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "1126a13d44931a5681727e7a260b5552163a0420", "filename": "src/lib/fun_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b85817af8bc4bdfbb155f15367c3ebee09eb743/src%2Flib%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b85817af8bc4bdfbb155f15367c3ebee09eb743/src%2Flib%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffun_treemap.rs?ref=2b85817af8bc4bdfbb155f15367c3ebee09eb743", "patch": "@@ -84,7 +84,7 @@ Function: traverse\n \n Visit all pairs in the map in order.\n */\n-fn traverse<K, V>(m: treemap<K, V>, f: fn(K, V)) {\n+fn traverse<K, V>(m: treemap<K, V>, f: block(K, V)) {\n     alt *m {\n       empty. { }\n       node(@k, @v, _, _) {"}, {"sha": "84fff4992f01da2930c6acb419d255037265ee83", "filename": "src/lib/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b85817af8bc4bdfbb155f15367c3ebee09eb743/src%2Flib%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b85817af8bc4bdfbb155f15367c3ebee09eb743/src%2Flib%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftreemap.rs?ref=2b85817af8bc4bdfbb155f15367c3ebee09eb743", "patch": "@@ -83,7 +83,7 @@ Function: traverse\n \n Visit all pairs in the map in order.\n */\n-fn traverse<K, V>(m: treemap<K, V>, f: fn@(K, V)) {\n+fn traverse<K, V>(m: treemap<K, V>, f: block(K, V)) {\n     alt *m {\n       empty. { }\n       node(k, v, _, _) {"}, {"sha": "3763a13a37a1138cf42ee6131eed61244b9ec65a", "filename": "src/lib/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b85817af8bc4bdfbb155f15367c3ebee09eb743/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b85817af8bc4bdfbb155f15367c3ebee09eb743/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=2b85817af8bc4bdfbb155f15367c3ebee09eb743", "patch": "@@ -48,7 +48,7 @@ Type: init_op\n \n A function used to initialize the elements of a vector.\n */\n-type init_op<T> = fn@(uint) -> T;\n+type init_op<T> = block(uint) -> T;\n \n /*\n Function: init_fn\n@@ -327,7 +327,7 @@ v - The vector to grow\n n - The number of elements to add\n init_fn - A function to call to retreive each appended element's value\n */\n-fn grow_fn<T>(&v: [T], n: uint, init_fn: fn(uint) -> T) {\n+fn grow_fn<T>(&v: [T], n: uint, init_fn: block(uint) -> T) {\n     reserve(v, next_power_of_two(len(v) + n));\n     let i: uint = 0u;\n     while i < n { v += [init_fn(i)]; i += 1u; }\n@@ -513,7 +513,7 @@ Function: position_pred\n \n Find the first index for which the value matches some predicate\n */\n-fn position_pred<T>(f: fn(T) -> bool, v: [T]) -> option::t<uint> {\n+fn position_pred<T>(f: block(T) -> bool, v: [T]) -> option::t<uint> {\n     let i: uint = 0u;\n     while i < len(v) { if f(v[i]) { ret some::<uint>(i); } i += 1u; }\n     ret none;"}]}