{"sha": "8eedd823178229589183f5bdca5d054e36b702ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZWRkODIzMTc4MjI5NTg5MTgzZjViZGNhNWQwNTRlMzZiNzAyZWE=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-09-24T03:22:37Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-09-24T14:43:31Z"}, "message": "ci: backport GHA workflows", "tree": {"sha": "8455f017fa210895134056ce8cce3cb45575024f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8455f017fa210895134056ce8cce3cb45575024f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eedd823178229589183f5bdca5d054e36b702ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eedd823178229589183f5bdca5d054e36b702ea", "html_url": "https://github.com/rust-lang/rust/commit/8eedd823178229589183f5bdca5d054e36b702ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eedd823178229589183f5bdca5d054e36b702ea/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a220b70a375ae722c7d6c1c069fbf6298b6260", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a220b70a375ae722c7d6c1c069fbf6298b6260", "html_url": "https://github.com/rust-lang/rust/commit/d6a220b70a375ae722c7d6c1c069fbf6298b6260"}], "stats": {"total": 376, "additions": 376, "deletions": 0}, "files": [{"sha": "5bb92df3e04329867d1ed8bc6449f84ed4efb5d5", "filename": ".editorconfig", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8eedd823178229589183f5bdca5d054e36b702ea/.editorconfig", "raw_url": "https://github.com/rust-lang/rust/raw/8eedd823178229589183f5bdca5d054e36b702ea/.editorconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.editorconfig?ref=8eedd823178229589183f5bdca5d054e36b702ea", "patch": "@@ -0,0 +1,26 @@\n+root = true\n+\n+[*]\n+charset = utf-8\n+end_of_line = lf\n+indent_size = 2\n+indent_style = space\n+trim_trailing_whitespace = true\n+insert_final_newline = true\n+\n+[*.md]\n+trim_trailing_whitespace = false\n+\n+[*.rs]\n+indent_size = 4\n+\n+[tests/**/*.rs]\n+charset = utf-8\n+end_of_line = unset\n+indent_size = unset\n+indent_style = unset\n+trim_trailing_whitespace = unset\n+insert_final_newline = unset\n+\n+[appveyor.yml]\n+end_of_line = unset"}, {"sha": "6dafb483cd60e818b02be632ad591003873e0adc", "filename": ".github/workflows/integration.yml", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Fintegration.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Fintegration.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fintegration.yml?ref=8eedd823178229589183f5bdca5d054e36b702ea", "patch": "@@ -0,0 +1,84 @@\n+name: integration\n+on: [push, pull_request]\n+\n+jobs:\n+  integration-tests:\n+    runs-on: ubuntu-latest\n+    name: ${{ matrix.integration }}\n+    strategy:\n+      # https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions#usage-limits\n+      # There's a limit of 60 concurrent jobs across all repos in the rust-lang organization.\n+      # In order to prevent overusing too much of that 60 limit, we throttle the\n+      # number of rustfmt jobs that will run concurrently.\n+      max-parallel: 4\n+      fail-fast: false\n+      matrix:\n+        integration: [\n+          bitflags,\n+          error-chain,\n+          log,\n+          mdbook,\n+          packed_simd,\n+          rust-semverver,\n+          tempdir,\n+          futures-rs,\n+          rust-clippy,\n+          failure,\n+        ]\n+        include:\n+          # Allowed Failures\n+          # Actions doesn't yet support explicitly marking matrix legs as allowed failures\n+          # https://github.community/t5/GitHub-Actions/continue-on-error-allow-failure-UI-indication/td-p/37033\n+          # https://github.community/t5/GitHub-Actions/Why-a-matrix-step-will-be-canceled-if-another-one-failed/td-p/30920\n+          # Instead, leverage `continue-on-error`\n+          # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error\n+          #\n+          # Failing due to breaking changes in rustfmt 2.0 where empty\n+          # match blocks have trailing commas removed\n+          # https://github.com/rust-lang/rustfmt/pull/4226\n+          - integration: chalk\n+            allow-failure: true\n+          - integration: crater\n+            allow-failure: true\n+          - integration: glob\n+            allow-failure: true\n+          - integration: stdsimd\n+            allow-failure: true\n+          # Using old rustfmt configuration option\n+          - integration: rand\n+            allow-failure: true\n+          # Keep this as an allowed failure as it's fragile to breaking changes of rustc.\n+          - integration: rust-clippy\n+            allow-failure: true\n+          # Using old rustfmt configuration option\n+          - integration: packed_simd\n+            allow-failure: true\n+          # calebcartwright (2019-12-24)\n+          # Keeping this as an allowed failure since it was flagged as such in the TravisCI config, even though\n+          # it appears to have been passing for quite some time.\n+          # Original comment was: temporal build failure due to breaking changes in the nightly compiler\n+          - integration: rust-semverver\n+            allow-failure: true\n+          # Can be moved back to include section after https://github.com/rust-lang-nursery/failure/pull/298 is merged\n+          - integration: failure\n+            allow-failure: true\n+\n+    steps:\n+    - name: checkout\n+      uses: actions/checkout@v2\n+\n+      # Run build\n+    - name: setup\n+      uses: actions-rs/toolchain@v1\n+      with:\n+        toolchain: nightly-x86_64-unknown-linux-gnu\n+        target: x86_64-unknown-linux-gnu\n+        override: true\n+        profile: minimal\n+        default: true\n+    - name: run integration tests\n+      env:\n+        INTEGRATION: ${{ matrix.integration }}\n+        TARGET: x86_64-unknown-linux-gnu\n+      run: ./ci/integration.sh\n+      continue-on-error: ${{ matrix.allow-failure == true }}"}, {"sha": "efdce8ce1551053d6c661d302843bb2567e4b2cd", "filename": ".github/workflows/linux.yml", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Flinux.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Flinux.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Flinux.yml?ref=8eedd823178229589183f5bdca5d054e36b702ea", "patch": "@@ -0,0 +1,50 @@\n+name: linux\n+on: [push, pull_request]\n+\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+    name: (${{ matrix.target }}, ${{ matrix.channel }}, ${{ matrix.cfg-release-channel }})\n+    strategy:\n+      # https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions#usage-limits\n+      # There's a limit of 60 concurrent jobs across all repos in the rust-lang organization.\n+      # In order to prevent overusing too much of that 60 limit, we throttle the\n+      # number of rustfmt jobs that will run concurrently.\n+      max-parallel: 1\n+      fail-fast: false\n+      matrix:\n+        target: [\n+          x86_64-unknown-linux-gnu,\n+        ]\n+        channel: [ nightly ]\n+        cfg-release-channel: [\n+          beta,\n+          nightly,\n+        ]\n+\n+    env:\n+      CFG_RELEASE_CHANNEL: ${{ matrix.cfg-release-channel }}\n+      CFG_RELEASE: ${{ matrix.cfg-release-channel }}\n+\n+    steps:\n+    - name: checkout\n+      uses: actions/checkout@v2\n+\n+      # Run build\n+    - name: setup\n+      uses: actions-rs/toolchain@v1\n+      with:\n+        toolchain: ${{ matrix.channel }}-${{ matrix.target }}\n+        target: ${{ matrix.target }}\n+        override: true\n+        profile: minimal\n+        default: true\n+\n+    - name: build\n+      run: |\n+        rustc -Vv\n+        cargo -V\n+        cargo build\n+\n+    - name: test\n+      run: cargo test"}, {"sha": "f9285100ab2b0ac8231193151b51fdb0e4985dfd", "filename": ".github/workflows/mac.yml", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Fmac.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Fmac.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmac.yml?ref=8eedd823178229589183f5bdca5d054e36b702ea", "patch": "@@ -0,0 +1,43 @@\n+name: mac\n+on: [push, pull_request]\n+\n+jobs:\n+  test:\n+    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources\n+    # macOS Catalina 10.15\n+    runs-on: macos-latest\n+    name: (${{ matrix.target }}, ${{ matrix.channel }})\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        target: [\n+          x86_64-apple-darwin,\n+        ]\n+        channel: [ nightly ]\n+\n+    env:\n+      CFG_RELEASE_CHANNEL: nightly\n+      CFG_RELEASE: nightly\n+\n+    steps:\n+    - name: checkout\n+      uses: actions/checkout@v2\n+\n+      # Run build\n+    - name: setup\n+      uses: actions-rs/toolchain@v1\n+      with:\n+        toolchain: ${{ matrix.channel }}-${{ matrix.target }}\n+        target: ${{ matrix.target }}\n+        override: true\n+        profile: minimal\n+        default: true\n+\n+    - name: build\n+      run: |\n+        rustc -Vv\n+        cargo -V\n+        cargo build\n+\n+    - name: test\n+      run: cargo test"}, {"sha": "7401d45d6d551a7c24b2b30a0e9c58c0c85f1e92", "filename": ".github/workflows/upload-assets.yml", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Fupload-assets.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Fupload-assets.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fupload-assets.yml?ref=8eedd823178229589183f5bdca5d054e36b702ea", "patch": "@@ -0,0 +1,75 @@\n+name: upload\n+\n+on:\n+  release:\n+    types: [created]\n+\n+jobs:\n+  build-release:\n+    name: build-release\n+    strategy:\n+      matrix:\n+        build: [linux, macos, windows-gnu, windows-msvc]\n+        include:\n+          - build: linux\n+            os: ubuntu-latest\n+            rust: nightly\n+          - build: macos\n+            os: macos-latest\n+            rust: nightly\n+          - build: windows-gnu\n+            os: windows-latest\n+            rust: nightly-x86_64-gnu\n+          - build: windows-msvc\n+            os: windows-latest\n+            rust: nightly-x86_64-msvc\n+    runs-on: ${{ matrix.os }}\n+    steps:\n+      - uses: actions/checkout@v2\n+\n+      - name: Install Rust\n+        uses: actions-rs/toolchain@v1\n+        with:\n+          profile: minimal\n+          toolchain: ${{ matrix.rust }}\n+          override: true\n+\n+      - name: Install cargo-make\n+        uses: actions-rs/cargo@v1\n+        with:\n+          command: build\n+          args: --release\n+\n+      - name: Build release binaries\n+        uses: actions-rs/cargo@v1\n+        with:\n+          command: make\n+          args: release\n+\n+      - name: Build archive\n+        shell: bash\n+        run: |\n+          staging=\"rustfmt_${{ matrix.build }}_${{ github.event.release.tag_name }}\"\n+          mkdir -p \"$staging\"\n+\n+          cp {README.md,Configurations.md,CHANGELOG.md,LICENSE-MIT,LICENSE-APACHE} \"$staging/\"\n+\n+          if [ \"${{ matrix.os }}\" = \"windows-latest\" ]; then\n+            cp \"target/release/{rustfmt.exe,cargo-fmt.exe,rustfmt-format-diff.exe,git-rustfmt.exe}\" \"$staging/\"\n+            7z a \"$staging.zip\" \"$staging\"\n+            echo \"::set-env name=ASSET::$staging.zip\"\n+          else\n+            cp \"target/release/{rustfmt,cargo-fmt,rustfmt-format-diff,git-rustfmt} \"$staging/\"\n+            tar czf \"$staging.tar.gz\" \"$staging\"\n+            echo \"::set-env name=ASSET::$staging.tar.gz\"\n+          fi\n+\n+      - name: Upload Release Asset\n+        uses: actions/upload-release-asset@v1\n+        env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+        with:\n+          upload_url: ${{ github.event.release.upload_url }}\n+          asset_path: ${{ env.ASSET }}\n+          asset_name: ${{ env.ASSET }}\n+          asset_content_type: application/octet-stream"}, {"sha": "c9ee428d63be63cdbf8091721bd9e74d2dc08976", "filename": ".github/workflows/windows.yml", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Fwindows.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8eedd823178229589183f5bdca5d054e36b702ea/.github%2Fworkflows%2Fwindows.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fwindows.yml?ref=8eedd823178229589183f5bdca5d054e36b702ea", "patch": "@@ -0,0 +1,98 @@\n+name: windows\n+on: [push, pull_request]\n+\n+jobs:\n+  test:\n+    runs-on: windows-latest\n+    name: (${{ matrix.target }}, ${{ matrix.channel }})\n+    strategy:\n+      # https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions#usage-limits\n+      # There's a limit of 60 concurrent jobs across all repos in the rust-lang organization.\n+      # In order to prevent overusing too much of that 60 limit, we throttle the\n+      # number of rustfmt jobs that will run concurrently.\n+      max-parallel: 1\n+      fail-fast: false\n+      matrix:\n+        target: [\n+          i686-pc-windows-gnu,\n+          i686-pc-windows-msvc,\n+          x86_64-pc-windows-gnu,\n+          x86_64-pc-windows-msvc,\n+        ]\n+        channel: [ nightly ]\n+        include:\n+          - channel: nightly\n+            target: i686-pc-windows-gnu\n+            mingw-7z-path: mingw\n+\n+    env:\n+      CFG_RELEASE_CHANNEL: nightly\n+      CFG_RELEASE: nightly\n+\n+    steps:\n+    # The Windows runners have autocrlf enabled by default\n+    # which causes failures for some of rustfmt's line-ending sensitive tests\n+    - name: disable git eol translation\n+      run: git config --global core.autocrlf false\n+    - name: checkout\n+      uses: actions/checkout@v2\n+\n+    # The Windows runners do not (yet) have a proper msys/mingw environment\n+    # pre-configured like AppVeyor does, though they will likely be added in the future.\n+    # https://github.com/actions/virtual-environments/issues/30\n+    #\n+    # In the interim, this ensures mingw32 is installed and available on the PATH\n+    # for the i686-pc-windows-gnu target. This approach is used because it's common in\n+    # other rust projects and there are issues/limitations with the msys2 chocolatey nuget\n+    # package and numworks/setup-msys2 action.\n+    # https://github.com/rust-lang/rust/blob/master/src/ci/scripts/install-mingw.sh#L59\n+    # https://github.com/rust-lang/rustup/blob/master/appveyor.yml\n+    #\n+    # Use GitHub Actions cache support to avoid downloading the .7z file every time\n+    # to be cognizant of the AWS egress cost impacts\n+    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy\n+    - name: cache mingw.7z\n+      id: cache-mingw\n+      with:\n+        path: ${{ matrix.mingw-7z-path }}\n+        key: ${{ matrix.channel }}-${{ matrix.target }}-mingw\n+      uses: actions/cache@v1\n+      if: matrix.target == 'i686-pc-windows-gnu' && matrix.channel == 'nightly'\n+    - name: download mingw.7z\n+      run: |\n+        # Disable the download progress bar which can cause perf issues\n+        $ProgressPreference = \"SilentlyContinue\"\n+        md -Force ${{ matrix.mingw-7z-path }}\n+        Invoke-WebRequest https://ci-mirrors.rust-lang.org/rustc/i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z -OutFile ${{ matrix.mingw-7z-path }}/mingw.7z\n+      if: matrix.target == 'i686-pc-windows-gnu' && matrix.channel == 'nightly' && steps.cache-mingw.outputs.cache-hit != 'true'\n+      shell: powershell\n+    - name: install mingw32\n+      run: |\n+        7z x -y ${{ matrix.mingw-7z-path }}/mingw.7z -oC:\\msys64 | Out-Null\n+        echo ::add-path::C:\\msys64\\mingw32\\bin\n+      if: matrix.target == 'i686-pc-windows-gnu' && matrix.channel == 'nightly'\n+      shell: powershell\n+\n+      # Run build\n+    - name: setup\n+      uses: actions-rs/toolchain@v1\n+      with:\n+        toolchain: ${{ matrix.channel }}-${{ matrix.target }}\n+        target: ${{ matrix.target }}\n+        override: true\n+        profile: minimal\n+        default: true\n+\n+    - name: cargo-make\n+      run: cargo install --force cargo-make\n+\n+    - name: build\n+      run: |\n+        rustc -Vv\n+        cargo -V\n+        cargo build\n+      shell: cmd\n+\n+    - name: test\n+      run: cargo test\n+      shell: cmd"}]}