{"sha": "c8eb2059dae70b99576352ded93592e6462daafc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZWIyMDU5ZGFlNzBiOTk1NzYzNTJkZWQ5MzU5MmU2NDYyZGFhZmM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-02T18:26:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-02T18:26:55Z"}, "message": "Rollup merge of #76739 - davidtwco:issue-75323-non-static-lifetime-in-anonconst, r=varkor\n\nresolve: prohibit anon const non-static lifetimes\n\nFixes #75323, fixes #74447 and fixes #73375.\n\nThis PR prohibits non-static lifetimes in anonymous constants when only the `min_const_generics` feature is enabled. ~~To do so, `to_region_vid`'s `bug!` had to be changed into a delayed bug, which unfortunately required providing it a `TyCtxt`.~~\n\n---\n~~While I am happy with how the implementation of the error turned out in `rustc_passes::check_const`,  emitting an error wasn't sufficient to avoid hitting the ICE later. I also tried implementing the error in `rustc_mir::transform::check_consts::validation` and that worked, but it didn't silence the ICE either. To silence the ICE, I changed it to a delayed bug which worked but was more invasive that I would have liked, and required I return an incorrect lifetime. It's possible that this check should be implemented earlier in the compiler to make the invasive changes unnecessary, but I wasn't sure where that would be and wanted to get some feedback first.~~\nThe approach taken by this PR has been changed to implement the error in name resolution, which ended up being much simpler.\n\ncc @rust-lang/wg-const-eval\nr? @lcnr", "tree": {"sha": "7e705b1fa74738b3e4aa9ef58a8e75cc6c7c28f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e705b1fa74738b3e4aa9ef58a8e75cc6c7c28f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8eb2059dae70b99576352ded93592e6462daafc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfd3DvCRBK7hj4Ov3rIwAAdHIIAA56nY86UUas3Xgnu31y+dUj\n3SqQwpeG0Gf6oh4BVvN14A29s/L1vsYegqDjV3Q1esyLFW7l9SJUBgbWv++82L3c\nPSBwbetDlYNfFP4xb0WMOgcJ0xKfe4H6NDzOFBsHYWNaUrYq6x8BesI+xHTgVB4F\nlrHfdd9nZ+/8MQ5+f2EU0sL+BYU0VV6IjDlaOJM+yjtR9NJ7MEUXllaiU2D7vk2H\nFlQVD1s10Ixkka5sP3ORJF7eTWy5qT+GHpyBQDdYOyrEq7PGXjgkwFCpBkJg8PsS\nxJfHr+IeB59U2lFawSvYikZX7wKrLPlUp1SwO0CaNxcVv4zvszKvV9vCYFwlDUA=\n=3QYX\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e705b1fa74738b3e4aa9ef58a8e75cc6c7c28f7\nparent 17c9b710b535f2a35b0a1e6270ca5bf31a0ba188\nparent eacfb2b265fc108a0b024e6afacaf3f28fd0235e\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601663215 +0200\ncommitter GitHub <noreply@github.com> 1601663215 +0200\n\nRollup merge of #76739 - davidtwco:issue-75323-non-static-lifetime-in-anonconst, r=varkor\n\nresolve: prohibit anon const non-static lifetimes\n\nFixes #75323, fixes #74447 and fixes #73375.\n\nThis PR prohibits non-static lifetimes in anonymous constants when only the `min_const_generics` feature is enabled. ~~To do so, `to_region_vid`'s `bug!` had to be changed into a delayed bug, which unfortunately required providing it a `TyCtxt`.~~\n\n---\n~~While I am happy with how the implementation of the error turned out in `rustc_passes::check_const`,  emitting an error wasn't sufficient to avoid hitting the ICE later. I also tried implementing the error in `rustc_mir::transform::check_consts::validation` and that worked, but it didn't silence the ICE either. To silence the ICE, I changed it to a delayed bug which worked but was more invasive that I would have liked, and required I return an incorrect lifetime. It's possible that this check should be implemented earlier in the compiler to make the invasive changes unnecessary, but I wasn't sure where that would be and wanted to get some feedback first.~~\nThe approach taken by this PR has been changed to implement the error in name resolution, which ended up being much simpler.\n\ncc @rust-lang/wg-const-eval\nr? @lcnr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8eb2059dae70b99576352ded93592e6462daafc", "html_url": "https://github.com/rust-lang/rust/commit/c8eb2059dae70b99576352ded93592e6462daafc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8eb2059dae70b99576352ded93592e6462daafc/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c9b710b535f2a35b0a1e6270ca5bf31a0ba188", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c9b710b535f2a35b0a1e6270ca5bf31a0ba188", "html_url": "https://github.com/rust-lang/rust/commit/17c9b710b535f2a35b0a1e6270ca5bf31a0ba188"}, {"sha": "eacfb2b265fc108a0b024e6afacaf3f28fd0235e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eacfb2b265fc108a0b024e6afacaf3f28fd0235e", "html_url": "https://github.com/rust-lang/rust/commit/eacfb2b265fc108a0b024e6afacaf3f28fd0235e"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "521ea7ad184f979bcc4c48cbd98e35d7fc15c0e3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c8eb2059dae70b99576352ded93592e6462daafc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8eb2059dae70b99576352ded93592e6462daafc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=c8eb2059dae70b99576352ded93592e6462daafc", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::def::{self, CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::config::nightly_options;\n+use rustc_session::parse::feature_err;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n@@ -1599,4 +1600,32 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             _ => {}\n         }\n     }\n+\n+    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics` so\n+    /// this function will emit an error if `min_const_generics` is enabled, the body identified by\n+    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n+    crate fn maybe_emit_forbidden_non_static_lifetime_error(\n+        &self,\n+        body_id: hir::BodyId,\n+        lifetime_ref: &'tcx hir::Lifetime,\n+    ) {\n+        let is_anon_const = matches!(\n+            self.tcx.def_kind(self.tcx.hir().body_owner_def_id(body_id)),\n+            hir::def::DefKind::AnonConst\n+        );\n+        let is_allowed_lifetime = matches!(\n+            lifetime_ref.name,\n+            hir::LifetimeName::Implicit | hir::LifetimeName::Static | hir::LifetimeName::Underscore\n+        );\n+\n+        if self.tcx.features().min_const_generics && is_anon_const && !is_allowed_lifetime {\n+            feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::const_generics,\n+                lifetime_ref.span,\n+                \"a non-static lifetime is not allowed in a `const`\",\n+            )\n+            .emit();\n+        }\n+    }\n }"}, {"sha": "072fb509b192a8e130ba328edabfd5092007fc11", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8eb2059dae70b99576352ded93592e6462daafc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8eb2059dae70b99576352ded93592e6462daafc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=c8eb2059dae70b99576352ded93592e6462daafc", "patch": "@@ -1777,6 +1777,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let result = loop {\n             match *scope {\n                 Scope::Body { id, s } => {\n+                    // Non-static lifetimes are prohibited in anonymous constants under\n+                    // `min_const_generics`.\n+                    self.maybe_emit_forbidden_non_static_lifetime_error(id, lifetime_ref);\n+\n                     outermost_body = Some(id);\n                     scope = s;\n                 }"}, {"sha": "02944e2bff2f5e6c64961c54d81c15f2cd4f04a6", "filename": "src/test/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c8eb2059dae70b99576352ded93592e6462daafc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8eb2059dae70b99576352ded93592e6462daafc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs?ref=c8eb2059dae70b99576352ded93592e6462daafc", "patch": "@@ -0,0 +1,27 @@\n+#![feature(min_const_generics)]\n+\n+// This test checks that non-static lifetimes are prohibited under `min_const_generics`. It\n+// currently emits an error with `min_const_generics`. This will ICE under `const_generics`.\n+\n+fn test<const N: usize>() {}\n+\n+fn issue_75323_and_74447_1<'a>() -> &'a () {\n+    test::<{ let _: &'a (); 3 },>();\n+   //~^ ERROR a non-static lifetime is not allowed in a `const`\n+    &()\n+}\n+\n+fn issue_75323_and_74447_2() {\n+    test::<{ let _: &(); 3 },>();\n+}\n+\n+fn issue_75323_and_74447_3() {\n+    test::<{ let _: &'static (); 3 },>();\n+}\n+\n+fn issue_73375<'a>() {\n+    [(); (|_: &'a u8| (), 0).1];\n+    //~^ ERROR a non-static lifetime is not allowed in a `const`\n+}\n+\n+fn main() {}"}, {"sha": "cdfd491e39541bcf34742c12824e39f90b02c1ca", "filename": "src/test/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c8eb2059dae70b99576352ded93592e6462daafc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8eb2059dae70b99576352ded93592e6462daafc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr?ref=c8eb2059dae70b99576352ded93592e6462daafc", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/forbid-non-static-lifetimes.rs:9:22\n+   |\n+LL |     test::<{ let _: &'a (); 3 },>();\n+   |                      ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/forbid-non-static-lifetimes.rs:23:16\n+   |\n+LL |     [(); (|_: &'a u8| (), 0).1];\n+   |                ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}