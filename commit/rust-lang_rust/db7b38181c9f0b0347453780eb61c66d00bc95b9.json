{"sha": "db7b38181c9f0b0347453780eb61c66d00bc95b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiN2IzODE4MWM5ZjBiMDM0NzQ1Mzc4MGViNjFjNjZkMDBiYzk1Yjk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-04T23:49:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-04T23:49:41Z"}, "message": "Rollup merge of #71845 - steveklabnik:add-const-examples, r=dtolnay\n\nAdd const examples\n\nI only added them to `std::f32` to get feedback on this approach before adding the other constants.\n\nWhen looking at https://github.com/rust-lang/rust/pull/68952, I found the docs a little confusing. Unless you're intimately aware of what's going on here, I don't think it's super clear what is deprecated and what you're supposed to do instead. I think short examples really clarify what's meant here, so that's what I did.", "tree": {"sha": "50911ff3b8cea0deb6ac976813905a76f7f28e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50911ff3b8cea0deb6ac976813905a76f7f28e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db7b38181c9f0b0347453780eb61c66d00bc95b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesKoVCRBK7hj4Ov3rIwAAdHIIADv51BbcLPChmOn4zA6eFBur\nKZkHcR8kBj3n25CBZVY05LgWidW6omGT+pQuGQtPOdEeYA7sPVxAdvAAv51JAqn3\n+puC1u4yYavvcLTTpw+Hu2CKgw6cwrO8YkH18FgKWzHy3Ul5jwbYe9Uqa+U+gpxB\naSj0tn8wYqFH7OkkO6o+qjpGsJfPQ0TPRtJtFvXnQXnQNbLZ+Gon0jf7/5Z7lTBQ\nMn2m5/RvC7jxvvyud9El/3nbwUR6UBIAV86F4PCg7OHojZ9b2E0j0gpEjYEcaP0/\n6Zlty56+nQ79ESCDKUmMLVKYZSro5MiNYY7QGc59zwo1wXzr1VlIiP9HtkmTjzw=\n=7FBt\n-----END PGP SIGNATURE-----\n", "payload": "tree 50911ff3b8cea0deb6ac976813905a76f7f28e78\nparent 04776b15a782697311058183b04f67132fd0df0d\nparent 55e37f9f02af4eec5c52413e3219bef838beadab\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588636181 +0200\ncommitter GitHub <noreply@github.com> 1588636181 +0200\n\nRollup merge of #71845 - steveklabnik:add-const-examples, r=dtolnay\n\nAdd const examples\n\nI only added them to `std::f32` to get feedback on this approach before adding the other constants.\n\nWhen looking at https://github.com/rust-lang/rust/pull/68952, I found the docs a little confusing. Unless you're intimately aware of what's going on here, I don't think it's super clear what is deprecated and what you're supposed to do instead. I think short examples really clarify what's meant here, so that's what I did.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db7b38181c9f0b0347453780eb61c66d00bc95b9", "html_url": "https://github.com/rust-lang/rust/commit/db7b38181c9f0b0347453780eb61c66d00bc95b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db7b38181c9f0b0347453780eb61c66d00bc95b9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04776b15a782697311058183b04f67132fd0df0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/04776b15a782697311058183b04f67132fd0df0d", "html_url": "https://github.com/rust-lang/rust/commit/04776b15a782697311058183b04f67132fd0df0d"}, {"sha": "55e37f9f02af4eec5c52413e3219bef838beadab", "url": "https://api.github.com/repos/rust-lang/rust/commits/55e37f9f02af4eec5c52413e3219bef838beadab", "html_url": "https://github.com/rust-lang/rust/commit/55e37f9f02af4eec5c52413e3219bef838beadab"}], "stats": {"total": 320, "additions": 318, "deletions": 2}, "files": [{"sha": "4483940c9a771867adced94fd9c54e0c441e35c5", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/db7b38181c9f0b0347453780eb61c66d00bc95b9/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7b38181c9f0b0347453780eb61c66d00bc95b9/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=db7b38181c9f0b0347453780eb61c66d00bc95b9", "patch": "@@ -18,15 +18,46 @@ use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f32`.\n /// Use [`f32::RADIX`](../../std/primitive.f32.html#associatedconstant.RADIX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let r = std::f32::RADIX;\n+///\n+/// // intended way\n+/// let r = f32::RADIX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n /// Use [`f32::MANTISSA_DIGITS`](../../std/primitive.f32.html#associatedconstant.MANTISSA_DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f32::MANTISSA_DIGITS;\n+///\n+/// // intended way\n+/// let d = f32::MANTISSA_DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n+\n /// Approximate number of significant digits in base 10.\n /// Use [`f32::DIGITS`](../../std/primitive.f32.html#associatedconstant.DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f32::DIGITS;\n+///\n+/// // intended way\n+/// let d = f32::DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = f32::DIGITS;\n \n@@ -36,50 +67,166 @@ pub const DIGITS: u32 = f32::DIGITS;\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let e = std::f32::EPSILON;\n+///\n+/// // intended way\n+/// let e = f32::EPSILON;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n /// Use [`f32::MIN`](../../std/primitive.f32.html#associatedconstant.MIN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN;\n+///\n+/// // intended way\n+/// let min = f32::MIN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f32 = f32::MIN;\n+\n /// Smallest positive normal `f32` value.\n /// Use [`f32::MIN_POSITIVE`](../../std/primitive.f32.html#associatedconstant.MIN_POSITIVE) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN_POSITIVE;\n+///\n+/// // intended way\n+/// let min = f32::MIN_POSITIVE;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n+\n /// Largest finite `f32` value.\n /// Use [`f32::MAX`](../../std/primitive.f32.html#associatedconstant.MAX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f32::MAX;\n+///\n+/// // intended way\n+/// let max = f32::MAX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n /// Use [`f32::MIN_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN_EXP;\n+///\n+/// // intended way\n+/// let min = f32::MIN_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_EXP: i32 = f32::MIN_EXP;\n+\n /// Maximum possible power of 2 exponent.\n /// Use [`f32::MAX_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f32::MAX_EXP;\n+///\n+/// // intended way\n+/// let max = f32::MAX_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n /// Use [`f32::MIN_10_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN_10_EXP;\n+///\n+/// // intended way\n+/// let min = f32::MIN_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n+\n /// Maximum possible power of 10 exponent.\n /// Use [`f32::MAX_10_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f32::MAX_10_EXP;\n+///\n+/// // intended way\n+/// let max = f32::MAX_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n /// Use [`f32::NAN`](../../std/primitive.f32.html#associatedconstant.NAN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let nan = std::f32::NAN;\n+///\n+/// // intended way\n+/// let nan = f32::NAN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NAN: f32 = f32::NAN;\n+\n /// Infinity (\u221e).\n /// Use [`f32::INFINITY`](../../std/primitive.f32.html#associatedconstant.INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let inf = std::f32::INFINITY;\n+///\n+/// // intended way\n+/// let inf = f32::INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f32 = f32::INFINITY;\n+\n /// Negative infinity (\u2212\u221e).\n /// Use [`f32::NEG_INFINITY`](../../std/primitive.f32.html#associatedconstant.NEG_INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let ninf = std::f32::NEG_INFINITY;\n+///\n+/// // intended way\n+/// let ninf = f32::NEG_INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f32 = f32::NEG_INFINITY;\n "}, {"sha": "df45e588369fe915942bcb54905457c060941d83", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/db7b38181c9f0b0347453780eb61c66d00bc95b9/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7b38181c9f0b0347453780eb61c66d00bc95b9/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=db7b38181c9f0b0347453780eb61c66d00bc95b9", "patch": "@@ -18,15 +18,46 @@ use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f64`.\n /// Use [`f64::RADIX`](../../std/primitive.f64.html#associatedconstant.RADIX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let r = std::f64::RADIX;\n+///\n+/// // intended way\n+/// let r = f64::RADIX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n /// Use [`f64::MANTISSA_DIGITS`](../../std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f64::MANTISSA_DIGITS;\n+///\n+/// // intended way\n+/// let d = f64::MANTISSA_DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n+\n /// Approximate number of significant digits in base 10.\n /// Use [`f64::DIGITS`](../../std/primitive.f64.html#associatedconstant.DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f64::DIGITS;\n+///\n+/// // intended way\n+/// let d = f64::DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = f64::DIGITS;\n \n@@ -36,50 +67,166 @@ pub const DIGITS: u32 = f64::DIGITS;\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let e = std::f64::EPSILON;\n+///\n+/// // intended way\n+/// let e = f64::EPSILON;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n /// Use [`f64::MIN`](../../std/primitive.f64.html#associatedconstant.MIN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f64::MIN;\n+///\n+/// // intended way\n+/// let min = f64::MIN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f64 = f64::MIN;\n+\n /// Smallest positive normal `f64` value.\n /// Use [`f64::MIN_POSITIVE`](../../std/primitive.f64.html#associatedconstant.MIN_POSITIVE) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f64::MIN_POSITIVE;\n+///\n+/// // intended way\n+/// let min = f64::MIN_POSITIVE;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n+\n /// Largest finite `f64` value.\n /// Use [`f64::MAX`](../../std/primitive.f64.html#associatedconstant.MAX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f64::MAX;\n+///\n+/// // intended way\n+/// let max = f64::MAX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n /// Use [`f64::MIN_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f64::MIN_EXP;\n+///\n+/// // intended way\n+/// let min = f64::MIN_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_EXP: i32 = f64::MIN_EXP;\n+\n /// Maximum possible power of 2 exponent.\n /// Use [`f64::MAX_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f64::MAX_EXP;\n+///\n+/// // intended way\n+/// let max = f64::MAX_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n /// Use [`f64::MIN_10_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f64::MIN_10_EXP;\n+///\n+/// // intended way\n+/// let min = f64::MIN_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n+\n /// Maximum possible power of 10 exponent.\n /// Use [`f64::MAX_10_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f64::MAX_10_EXP;\n+///\n+/// // intended way\n+/// let max = f64::MAX_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n /// Use [`f64::NAN`](../../std/primitive.f64.html#associatedconstant.NAN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let nan = std::f64::NAN;\n+///\n+/// // intended way\n+/// let nan = f64::NAN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NAN: f64 = f64::NAN;\n+\n /// Infinity (\u221e).\n /// Use [`f64::INFINITY`](../../std/primitive.f64.html#associatedconstant.INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let inf = std::f64::INFINITY;\n+///\n+/// // intended way\n+/// let inf = f64::INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f64 = f64::INFINITY;\n+\n /// Negative infinity (\u2212\u221e).\n /// Use [`f64::NEG_INFINITY`](../../std/primitive.f64.html#associatedconstant.NEG_INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let ninf = std::f64::NEG_INFINITY;\n+///\n+/// // intended way\n+/// let ninf = f64::NEG_INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f64 = f64::NEG_INFINITY;\n "}, {"sha": "ffd30b03f2109c677692713e06c203351aa89b09", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/db7b38181c9f0b0347453780eb61c66d00bc95b9/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7b38181c9f0b0347453780eb61c66d00bc95b9/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=db7b38181c9f0b0347453780eb61c66d00bc95b9", "patch": "@@ -12,14 +12,36 @@ macro_rules! int_module {\n     ($T:ident, #[$attr:meta]) => (\n         doc_comment! {\n             concat!(\"The smallest value that can be represented by this integer type.\n-Use [`\", stringify!($T), \"::MIN\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MIN) instead.\"),\n+Use [`\", stringify!($T), \"::MIN\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MIN) instead.\n+\n+# Examples\n+\n+```rust\n+// deprecated way\n+let min = std::\", stringify!($T), \"::MIN;\n+\n+// intended way\n+let min = \", stringify!($T), \"::MIN;\n+```\n+\"),\n             #[$attr]\n             pub const MIN: $T = $T::MIN;\n         }\n \n         doc_comment! {\n             concat!(\"The largest value that can be represented by this integer type.\n-Use [`\", stringify!($T), \"::MAX\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MAX) instead.\"),\n+Use [`\", stringify!($T), \"::MAX\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MAX) instead.\n+\n+# Examples\n+\n+```rust\n+// deprecated way\n+let max = std::\", stringify!($T), \"::MAX;\n+\n+// intended way\n+let max = \", stringify!($T), \"::MAX;\n+```\n+\"),\n             #[$attr]\n             pub const MAX: $T = $T::MAX;\n         }"}]}