{"sha": "e1a2961273bdf7ef24c81f22fe86041a20812365", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYTI5NjEyNzNiZGY3ZWYyNGM4MWYyMmZlODYwNDFhMjA4MTIzNjU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T14:57:14Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T15:23:40Z"}, "message": "Rename Visibility -> RawVisibility", "tree": {"sha": "1b2e3e4e76b121a43a6fc3fb1112668089c44abc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b2e3e4e76b121a43a6fc3fb1112668089c44abc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a2961273bdf7ef24c81f22fe86041a20812365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a2961273bdf7ef24c81f22fe86041a20812365", "html_url": "https://github.com/rust-lang/rust/commit/e1a2961273bdf7ef24c81f22fe86041a20812365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a2961273bdf7ef24c81f22fe86041a20812365/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04e8eaa14b11c432d43ad95f3766f8649da30347", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e8eaa14b11c432d43ad95f3766f8649da30347", "html_url": "https://github.com/rust-lang/rust/commit/04e8eaa14b11c432d43ad95f3766f8649da30347"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "6bc0a8486ba6b91a2fdc0faa2a2efb136acc9c1a", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=e1a2961273bdf7ef24c81f22fe86041a20812365", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     generics::GenericParams,\n     lang_item::{LangItemTarget, LangItems},\n     nameres::{raw::RawItems, CrateDefMap},\n-    visibility::Visibility,\n+    visibility::RawVisibility,\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n     GenericDefId, ImplId, ImplLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n     TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc, VisibilityDefId,\n@@ -91,8 +91,8 @@ pub trait DefDatabase: InternDatabase + AstDatabase {\n     #[salsa::invoke(Attrs::attrs_query)]\n     fn attrs(&self, def: AttrDefId) -> Attrs;\n \n-    #[salsa::invoke(Visibility::visibility_query)]\n-    fn visibility(&self, def: VisibilityDefId) -> Visibility;\n+    #[salsa::invoke(RawVisibility::visibility_query)]\n+    fn visibility(&self, def: VisibilityDefId) -> RawVisibility;\n \n     #[salsa::invoke(LangItems::module_lang_items_query)]\n     fn module_lang_items(&self, module: ModuleId) -> Option<Arc<LangItems>>;"}, {"sha": "f4678d145f5fdf3c9393f2485e7ab29ec8cd6ff8", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e1a2961273bdf7ef24c81f22fe86041a20812365", "patch": "@@ -743,7 +743,7 @@ where\n         name: Name,\n         declaration: AstId<ast::Module>,\n         definition: Option<FileId>,\n-        visibility: &crate::visibility::Visibility,\n+        visibility: &crate::visibility::RawVisibility,\n     ) -> LocalModuleId {\n         let vis = self\n             .def_collector"}, {"sha": "8a6256eee07887068960d8df010f89ca8af48445", "filename": "crates/ra_hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=e1a2961273bdf7ef24c81f22fe86041a20812365", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     nameres::{BuiltinShadowMode, CrateDefMap},\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n-    visibility::{ResolvedVisibility, Visibility},\n+    visibility::{RawVisibility, ResolvedVisibility},\n     AdtId, CrateId, EnumVariantId, LocalModuleId, ModuleDefId, ModuleId,\n };\n \n@@ -71,10 +71,10 @@ impl CrateDefMap {\n         &self,\n         db: &impl DefDatabase,\n         original_module: LocalModuleId,\n-        visibility: &Visibility,\n+        visibility: &RawVisibility,\n     ) -> Option<ResolvedVisibility> {\n         match visibility {\n-            Visibility::Module(path) => {\n+            RawVisibility::Module(path) => {\n                 let (result, remaining) =\n                     self.resolve_path(db, original_module, &path, BuiltinShadowMode::Module);\n                 if remaining.is_some() {\n@@ -89,7 +89,7 @@ impl CrateDefMap {\n                     }\n                 }\n             }\n-            Visibility::Public => Some(ResolvedVisibility::Public),\n+            RawVisibility::Public => Some(ResolvedVisibility::Public),\n         }\n     }\n "}, {"sha": "fac1169efacf24315a99b8795658dfd4740697ff", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=e1a2961273bdf7ef24c81f22fe86041a20812365", "patch": "@@ -22,7 +22,7 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, path::ModPath, visibility::Visibility, FileAstId, HirFileId,\n+    attr::Attrs, db::DefDatabase, path::ModPath, visibility::RawVisibility, FileAstId, HirFileId,\n     InFile,\n };\n \n@@ -127,12 +127,12 @@ impl_arena_id!(Module);\n pub(super) enum ModuleData {\n     Declaration {\n         name: Name,\n-        visibility: Visibility,\n+        visibility: RawVisibility,\n         ast_id: FileAstId<ast::Module>,\n     },\n     Definition {\n         name: Name,\n-        visibility: Visibility,\n+        visibility: RawVisibility,\n         ast_id: FileAstId<ast::Module>,\n         items: Vec<RawItem>,\n     },\n@@ -150,7 +150,7 @@ pub struct ImportData {\n     pub(super) is_prelude: bool,\n     pub(super) is_extern_crate: bool,\n     pub(super) is_macro_use: bool,\n-    pub(super) visibility: Visibility,\n+    pub(super) visibility: RawVisibility,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -161,7 +161,7 @@ impl_arena_id!(Def);\n pub(super) struct DefData {\n     pub(super) name: Name,\n     pub(super) kind: DefKind,\n-    pub(super) visibility: Visibility,\n+    pub(super) visibility: RawVisibility,\n }\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n@@ -232,7 +232,7 @@ impl RawItemsCollector {\n \n     fn add_item(&mut self, current_module: Option<Module>, item: ast::ModuleItem) {\n         let attrs = self.parse_attrs(&item);\n-        let visibility = Visibility::from_ast_with_hygiene(item.visibility(), &self.hygiene);\n+        let visibility = RawVisibility::from_ast_with_hygiene(item.visibility(), &self.hygiene);\n         let (kind, name) = match item {\n             ast::ModuleItem::Module(module) => {\n                 self.add_module(current_module, module);\n@@ -292,7 +292,7 @@ impl RawItemsCollector {\n             None => return,\n         };\n         let attrs = self.parse_attrs(&module);\n-        let visibility = Visibility::from_ast_with_hygiene(module.visibility(), &self.hygiene);\n+        let visibility = RawVisibility::from_ast_with_hygiene(module.visibility(), &self.hygiene);\n \n         let ast_id = self.source_ast_id_map.ast_id(&module);\n         if module.has_semi() {\n@@ -320,7 +320,7 @@ impl RawItemsCollector {\n         // FIXME: cfg_attr\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n         let attrs = self.parse_attrs(&use_item);\n-        let visibility = Visibility::from_ast_with_hygiene(use_item.visibility(), &self.hygiene);\n+        let visibility = RawVisibility::from_ast_with_hygiene(use_item.visibility(), &self.hygiene);\n \n         let mut buf = Vec::new();\n         ModPath::expand_use_item(\n@@ -352,7 +352,7 @@ impl RawItemsCollector {\n         if let Some(name_ref) = extern_crate.name_ref() {\n             let path = ModPath::from_name_ref(&name_ref);\n             let visibility =\n-                Visibility::from_ast_with_hygiene(extern_crate.visibility(), &self.hygiene);\n+                RawVisibility::from_ast_with_hygiene(extern_crate.visibility(), &self.hygiene);\n             let alias = extern_crate.alias().and_then(|a| a.name()).map(|it| it.as_name());\n             let attrs = self.parse_attrs(&extern_crate);\n             // FIXME: cfg_attr"}, {"sha": "8e7a83ffefbebf5685a2ee415298d239b87941de", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=e1a2961273bdf7ef24c81f22fe86041a20812365", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     nameres::CrateDefMap,\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n-    visibility::{ResolvedVisibility, Visibility},\n+    visibility::{RawVisibility, ResolvedVisibility},\n     AdtId, AssocContainerId, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId,\n     FunctionId, GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId,\n     StaticId, StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n@@ -235,17 +235,17 @@ impl Resolver {\n     pub fn resolve_visibility(\n         &self,\n         db: &impl DefDatabase,\n-        visibility: &Visibility,\n+        visibility: &RawVisibility,\n     ) -> Option<ResolvedVisibility> {\n         match visibility {\n-            Visibility::Module(_) => {\n+            RawVisibility::Module(_) => {\n                 let (item_map, module) = match self.module() {\n                     Some(it) => it,\n                     None => return None,\n                 };\n                 item_map.resolve_visibility(db, module, visibility)\n             }\n-            Visibility::Public => Some(ResolvedVisibility::Public),\n+            RawVisibility::Public => Some(ResolvedVisibility::Public),\n         }\n     }\n "}, {"sha": "b11e9bc52a17300828bd215349323dab7b1f8bb6", "filename": "crates/ra_hir_def/src/visibility.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a2961273bdf7ef24c81f22fe86041a20812365/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs?ref=e1a2961273bdf7ef24c81f22fe86041a20812365", "patch": "@@ -16,7 +16,7 @@ use crate::{\n \n /// Visibility of an item, not yet resolved.\n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub enum Visibility {\n+pub enum RawVisibility {\n     // FIXME: We could avoid the allocation in many cases by special-casing\n     // pub(crate), pub(super) and private. Alternatively, `ModPath` could be\n     // made to contain an Arc<[Segment]> instead of a Vec?\n@@ -27,16 +27,16 @@ pub enum Visibility {\n     Public,\n }\n \n-impl Visibility {\n-    pub(crate) fn visibility_query(db: &impl DefDatabase, def: VisibilityDefId) -> Visibility {\n+impl RawVisibility {\n+    pub(crate) fn visibility_query(db: &impl DefDatabase, def: VisibilityDefId) -> RawVisibility {\n         match def {\n             VisibilityDefId::ModuleId(module) => {\n                 let def_map = db.crate_def_map(module.krate);\n                 let src = match def_map[module.local_id].declaration_source(db) {\n                     Some(it) => it,\n-                    None => return Visibility::private(),\n+                    None => return RawVisibility::private(),\n                 };\n-                Visibility::from_ast(db, src.map(|it| it.visibility()))\n+                RawVisibility::from_ast(db, src.map(|it| it.visibility()))\n             }\n             VisibilityDefId::StructFieldId(it) => {\n                 let src = it.parent.child_source(db);\n@@ -49,9 +49,9 @@ impl Visibility {\n                     Either::Right(record) => record.visibility(),\n                 });\n                 if vis_node.value.is_none() && is_enum {\n-                    Visibility::Public\n+                    RawVisibility::Public\n                 } else {\n-                    Visibility::from_ast(db, vis_node)\n+                    RawVisibility::from_ast(db, vis_node)\n                 }\n             }\n             VisibilityDefId::AdtId(it) => match it {\n@@ -67,41 +67,41 @@ impl Visibility {\n         }\n     }\n \n-    fn private() -> Visibility {\n+    fn private() -> RawVisibility {\n         let path = ModPath { kind: PathKind::Super(0), segments: Vec::new() };\n-        Visibility::Module(Arc::new(path))\n+        RawVisibility::Module(Arc::new(path))\n     }\n \n-    fn from_ast(db: &impl DefDatabase, node: InFile<Option<ast::Visibility>>) -> Visibility {\n+    fn from_ast(db: &impl DefDatabase, node: InFile<Option<ast::Visibility>>) -> RawVisibility {\n         Self::from_ast_with_hygiene(node.value, &Hygiene::new(db, node.file_id))\n     }\n \n     pub(crate) fn from_ast_with_hygiene(\n         node: Option<ast::Visibility>,\n         hygiene: &Hygiene,\n-    ) -> Visibility {\n+    ) -> RawVisibility {\n         let node = match node {\n-            None => return Visibility::private(),\n+            None => return RawVisibility::private(),\n             Some(node) => node,\n         };\n         match node.kind() {\n             ast::VisibilityKind::In(path) => {\n                 let path = ModPath::from_src(path, hygiene);\n                 let path = match path {\n-                    None => return Visibility::private(),\n+                    None => return RawVisibility::private(),\n                     Some(path) => path,\n                 };\n-                Visibility::Module(Arc::new(path))\n+                RawVisibility::Module(Arc::new(path))\n             }\n             ast::VisibilityKind::PubCrate => {\n                 let path = ModPath { kind: PathKind::Crate, segments: Vec::new() };\n-                Visibility::Module(Arc::new(path))\n+                RawVisibility::Module(Arc::new(path))\n             }\n             ast::VisibilityKind::PubSuper => {\n                 let path = ModPath { kind: PathKind::Super(1), segments: Vec::new() };\n-                Visibility::Module(Arc::new(path))\n+                RawVisibility::Module(Arc::new(path))\n             }\n-            ast::VisibilityKind::Pub => Visibility::Public,\n+            ast::VisibilityKind::Pub => RawVisibility::Public,\n         }\n     }\n \n@@ -156,11 +156,11 @@ impl ResolvedVisibility {\n     }\n }\n \n-fn visibility_from_loc<T>(node: T, db: &impl DefDatabase) -> Visibility\n+fn visibility_from_loc<T>(node: T, db: &impl DefDatabase) -> RawVisibility\n where\n     T: HasSource,\n     T::Value: ast::VisibilityOwner,\n {\n     let src = node.source(db);\n-    Visibility::from_ast(db, src.map(|n| n.visibility()))\n+    RawVisibility::from_ast(db, src.map(|n| n.visibility()))\n }"}]}