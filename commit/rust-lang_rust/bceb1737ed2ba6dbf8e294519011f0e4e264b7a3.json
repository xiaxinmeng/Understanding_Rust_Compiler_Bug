{"sha": "bceb1737ed2ba6dbf8e294519011f0e4e264b7a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZWIxNzM3ZWQyYmE2ZGJmOGUyOTQ1MTkwMTFmMGU0ZTI2NGI3YTM=", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2021-01-07T18:27:03Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2021-01-07T18:45:20Z"}, "message": "Apply suggestions from code review & other minor nits\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>", "tree": {"sha": "f27739ebb4eeadd3ff614c3dddca5fa05e298fdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f27739ebb4eeadd3ff614c3dddca5fa05e298fdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bceb1737ed2ba6dbf8e294519011f0e4e264b7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bceb1737ed2ba6dbf8e294519011f0e4e264b7a3", "html_url": "https://github.com/rust-lang/rust/commit/bceb1737ed2ba6dbf8e294519011f0e4e264b7a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bceb1737ed2ba6dbf8e294519011f0e4e264b7a3/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0311fe98e026579cd3581b7655e9ff84d4376682", "url": "https://api.github.com/repos/rust-lang/rust/commits/0311fe98e026579cd3581b7655e9ff84d4376682", "html_url": "https://github.com/rust-lang/rust/commit/0311fe98e026579cd3581b7655e9ff84d4376682"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "1fedd26a1ef2f125e01e282b35027eaee9b31d8f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bceb1737ed2ba6dbf8e294519011f0e4e264b7a3/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceb1737ed2ba6dbf8e294519011f0e4e264b7a3/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=bceb1737ed2ba6dbf8e294519011f0e4e264b7a3", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // moving them back to their correct locations.\n         'exported_macros: for def in krate.exported_macros {\n             // The `def` of a macro in `exported_macros` should correspond to either:\n-            //  - a `#[macro-export] macro_rules!` macro,\n+            //  - a `#[macro_export] macro_rules!` macro,\n             //  - a built-in `derive` (or attribute) macro such as the ones in `::core`,\n             //  - a `pub macro`.\n             // Only the last two need to be fixed, thus:\n@@ -84,17 +84,18 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 continue 'exported_macros;\n             }\n             let tcx = self.cx.tcx;\n-            /* Because of #77828 we cannot do the simpler:\n-            let macro_parent_module = tcx.def_path(tcx.parent_module(def.hir_id).to_def_id());\n-            // and instead have to do: */\n-            let macro_parent_module = tcx.def_path({\n+            // Note: this is not the same as `.parent_module()`. Indeed, the latter looks\n+            // for the closest module _ancestor_, which is not necessarily a direct parent\n+            // (since a direct parent isn't necessarily a module, c.f. #77828).\n+            let macro_parent_def_id = {\n                 use rustc_middle::ty::DefIdTree;\n                 tcx.parent(tcx.hir().local_def_id(def.hir_id).to_def_id()).unwrap()\n-            });\n+            };\n+            let macro_parent_path = tcx.def_path(macro_parent_def_id);\n             // HACK: rustdoc has no way to lookup `doctree::Module`s by their HirId. Instead,\n             // lookup the module by its name, by looking at each path segment one at a time.\n             let mut cur_mod = &mut top_level_module;\n-            for path_segment in macro_parent_module.data {\n+            for path_segment in macro_parent_path.data {\n                 // Path segments may refer to a module (in which case they belong to the type\n                 // namespace), which is _necessary_ for the macro to be accessible outside it\n                 // (no \"associated macros\" as of yet). Else we bail with an outer `continue`.\n@@ -108,6 +109,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     None => continue 'exported_macros,\n                 }\n             }\n+            let cur_mod_def_id = tcx.hir().local_def_id(cur_mod.id).to_def_id();\n+            assert_eq!(cur_mod_def_id, macro_parent_def_id);\n             cur_mod.macros.push((def, None));\n         }\n         self.cx.renderinfo.get_mut().exact_paths = self.exact_paths;"}]}