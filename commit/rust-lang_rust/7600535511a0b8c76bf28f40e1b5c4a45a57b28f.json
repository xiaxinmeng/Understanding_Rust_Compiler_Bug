{"sha": "7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "node_id": "C_kwDOAAsO6NoAKDc2MDA1MzU1MTFhMGI4Yzc2YmYyOGY0MGUxYjVjNGE0NWE1N2IyOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-01T00:25:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-01T00:25:30Z"}, "message": "Auto merge of #9743 - smoelius:improve-needless-lifetimes, r=Alexendoo\n\nImprove `needless_lifetimes`\n\nThis PR makes the following improvements to `needless_lifetimes`.\n\n* It fixes the following false negative, where `foo` is flagged but `bar` is not:\n  ```rust\n    fn foo<'a>(x: &'a u8, y: &'_ u8) {}\n\n    fn bar<'a>(x: &'a u8, y: &'_ u8, z: &'_ u8) {}\n  ```\n* It flags more cases, generally. Previously, `needless_borrow` required *all* lifetimes to be used only once. With the changes, individual lifetimes are flagged for being used only once, even if not all lifetimes are.\n* Finally, it tries to produce more clear error messages.\n\nchangelog: fix `needless_lifetimes` false negative involving functions with multiple unnamed lifetimes\nchangelog: in `needless_lifetimes`, flag individual lifetimes used only once, rather than require all lifetimes to be used only once\nchangelog: in `needless_lifetimes`, emit \"replace with `'_`\" warnings only when applicable, and point to a generic argument", "tree": {"sha": "fb9dd7a6040a14fb0c9894b6f3c3e99d1daa71cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb9dd7a6040a14fb0c9894b6f3c3e99d1daa71cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "html_url": "https://github.com/rust-lang/rust/commit/7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d338c1efd7840fa96c5eaeaa5785094efdab07", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d338c1efd7840fa96c5eaeaa5785094efdab07", "html_url": "https://github.com/rust-lang/rust/commit/37d338c1efd7840fa96c5eaeaa5785094efdab07"}, {"sha": "c0d928561c3b88b294ddffaf8f8179f672babcda", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d928561c3b88b294ddffaf8f8179f672babcda", "html_url": "https://github.com/rust-lang/rust/commit/c0d928561c3b88b294ddffaf8f8179f672babcda"}], "stats": {"total": 670, "additions": 457, "deletions": 213}, "files": [{"sha": "939bdbcdc7cd7e245b733bed959c419f0b336f76", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -481,7 +481,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n     }\n }\n \n-fn implements_ord<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+fn implements_ord(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n     cx.tcx\n         .get_diagnostic_item(sym::Ord)"}, {"sha": "86e7bc2e6d1971e6dae95b4b452ebc63e84a9dd4", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -1232,8 +1232,8 @@ fn is_mixed_projection_predicate<'tcx>(\n     }\n }\n \n-fn referent_used_exactly_once<'a, 'tcx>(\n-    cx: &'a LateContext<'tcx>,\n+fn referent_used_exactly_once<'tcx>(\n+    cx: &LateContext<'tcx>,\n     possible_borrowers: &mut Vec<(LocalDefId, PossibleBorrowerMap<'tcx, 'tcx>)>,\n     reference: &Expr<'tcx>,\n ) -> bool {"}, {"sha": "cecec520a6d7ce79c87e8cae365de0f5c082d16e", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -336,8 +336,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n }\n \n-fn lint_for_missing_headers<'tcx>(\n-    cx: &LateContext<'tcx>,\n+fn lint_for_missing_headers(\n+    cx: &LateContext<'_>,\n     def_id: LocalDefId,\n     span: impl Into<MultiSpan> + Copy,\n     sig: &hir::FnSig<'_>,\n@@ -467,7 +467,7 @@ struct DocHeaders {\n     panics: bool,\n }\n \n-fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &'a [Attribute]) -> DocHeaders {\n+fn check_attrs(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &[Attribute]) -> DocHeaders {\n     use pulldown_cmark::{BrokenLink, CowStr, Options};\n     /// We don't want the parser to choke on intra doc links. Since we don't\n     /// actually care about rendering them, just pretend that all broken links are"}, {"sha": "15d693a117a3cc4af0c5e3755ff4cfad5b0053b9", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n     }\n }\n \n-fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n+fn lint_impl_body(cx: &LateContext<'_>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n     use rustc_hir::intravisit::{self, Visitor};\n     use rustc_hir::{Expr, ImplItemKind};\n "}, {"sha": "c7c3b3f6b94c4326312d39ca29920f548462eb71", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -66,8 +66,8 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         use rustc_span::BytePos;\n \n-        fn suggestion<'tcx>(\n-            cx: &LateContext<'tcx>,\n+        fn suggestion(\n+            cx: &LateContext<'_>,\n             diag: &mut Diagnostic,\n             generics_span: Span,\n             generics_suggestion_span: Span,"}, {"sha": "0d5099bde6de015b5aa069e5bdeb6611afd9d471", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -207,8 +207,8 @@ impl SliceLintInformation {\n     }\n }\n \n-fn filter_lintable_slices<'a, 'tcx>(\n-    cx: &'a LateContext<'tcx>,\n+fn filter_lintable_slices<'tcx>(\n+    cx: &LateContext<'tcx>,\n     slice_lint_info: FxIndexMap<hir::HirId, SliceLintInformation>,\n     max_suggested_slice: u64,\n     scope: &'tcx hir::Expr<'tcx>,"}, {"sha": "4cd7dff4cfd762c95352f230beb6b8b3f0652458", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -171,11 +171,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n \n /// Returns a tuple of options with the start and end (exclusive) values of\n /// the range. If the start or end is not constant, None is returned.\n-fn to_const_range<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    range: higher::Range<'_>,\n-    array_size: u128,\n-) -> (Option<u128>, Option<u128>) {\n+fn to_const_range(cx: &LateContext<'_>, range: higher::Range<'_>, array_size: u128) -> (Option<u128>, Option<u128>) {\n     let s = range\n         .start\n         .map(|expr| constant(cx, cx.typeck_results(), expr).map(|(c, _)| c));"}, {"sha": "6ea637412d5b1b47eb655871a0ab252d135cd0e9", "filename": "clippy_lints/src/invalid_upcast_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(InvalidUpcastComparisons => [INVALID_UPCAST_COMPARISONS]);\n \n-fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_>, expr: &'a Expr<'_>) -> Option<(FullInt, FullInt)> {\n+fn numeric_cast_precast_bounds(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<(FullInt, FullInt)> {\n     if let ExprKind::Cast(cast_exp, _) = expr.kind {\n         let pre_cast_ty = cx.typeck_results().expr_ty(cast_exp);\n         let cast_ty = cx.typeck_results().expr_ty(expr);"}, {"sha": "be14f6eb6691a2ceee717e13bef73b864b58b001", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 88, "deletions": 43, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::trait_ref_of_method;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::intravisit::nested_filter::{self as hir_nested_filter, NestedFilter};\n@@ -151,6 +151,7 @@ fn check_fn_inner<'tcx>(\n         .params\n         .iter()\n         .filter(|param| matches!(param.kind, GenericParamKind::Type { .. }));\n+\n     for typ in types {\n         for pred in generics.bounds_for_param(cx.tcx.hir().local_def_id(typ.hir_id)) {\n             if pred.origin == PredicateOrigin::WhereClause {\n@@ -187,15 +188,30 @@ fn check_fn_inner<'tcx>(\n             }\n         }\n     }\n-    if could_use_elision(cx, decl, body, trait_sig, generics.params) {\n-        span_lint(\n+\n+    if let Some(elidable_lts) = could_use_elision(cx, decl, body, trait_sig, generics.params) {\n+        let lts = elidable_lts\n+            .iter()\n+            // In principle, the result of the call to `Node::ident` could be `unwrap`ped, as `DefId` should refer to a\n+            // `Node::GenericParam`.\n+            .filter_map(|&(def_id, _)| cx.tcx.hir().get_by_def_id(def_id).ident())\n+            .map(|ident| ident.to_string())\n+            .collect::<Vec<_>>()\n+            .join(\", \");\n+\n+        span_lint_and_then(\n             cx,\n             NEEDLESS_LIFETIMES,\n             span.with_hi(decl.output.span().hi()),\n-            \"explicit lifetimes given in parameter types where they could be elided \\\n-             (or replaced with `'_` if needed by type declaration)\",\n+            &format!(\"the following explicit lifetimes could be elided: {lts}\"),\n+            |diag| {\n+                if let Some(span) = elidable_lts.iter().find_map(|&(_, span)| span) {\n+                    diag.span_help(span, \"replace with `'_` in generic arguments such as here\");\n+                }\n+            },\n         );\n     }\n+\n     if report_extra_lifetimes {\n         self::report_extra_lifetimes(cx, decl, generics);\n     }\n@@ -226,7 +242,7 @@ fn could_use_elision<'tcx>(\n     body: Option<BodyId>,\n     trait_sig: Option<&[Ident]>,\n     named_generics: &'tcx [GenericParam<'_>],\n-) -> bool {\n+) -> Option<Vec<(LocalDefId, Option<Span>)>> {\n     // There are two scenarios where elision works:\n     // * no output references, all input references have different LT\n     // * output references, exactly one input reference with same LT\n@@ -253,15 +269,15 @@ fn could_use_elision<'tcx>(\n     }\n \n     if input_visitor.abort() || output_visitor.abort() {\n-        return false;\n+        return None;\n     }\n \n     let input_lts = input_visitor.lts;\n     let output_lts = output_visitor.lts;\n \n     if let Some(trait_sig) = trait_sig {\n         if explicit_self_type(cx, func, trait_sig.first().copied()) {\n-            return false;\n+            return None;\n         }\n     }\n \n@@ -270,22 +286,22 @@ fn could_use_elision<'tcx>(\n \n         let first_ident = body.params.first().and_then(|param| param.pat.simple_ident());\n         if explicit_self_type(cx, func, first_ident) {\n-            return false;\n+            return None;\n         }\n \n         let mut checker = BodyLifetimeChecker {\n             lifetimes_used_in_body: false,\n         };\n         checker.visit_expr(body.value);\n         if checker.lifetimes_used_in_body {\n-            return false;\n+            return None;\n         }\n     }\n \n     // check for lifetimes from higher scopes\n     for lt in input_lts.iter().chain(output_lts.iter()) {\n         if !allowed_lts.contains(lt) {\n-            return false;\n+            return None;\n         }\n     }\n \n@@ -301,48 +317,45 @@ fn could_use_elision<'tcx>(\n         for lt in input_visitor.nested_elision_site_lts {\n             if let RefLt::Named(def_id) = lt {\n                 if allowed_lts.contains(&cx.tcx.item_name(def_id.to_def_id())) {\n-                    return false;\n+                    return None;\n                 }\n             }\n         }\n         for lt in output_visitor.nested_elision_site_lts {\n             if let RefLt::Named(def_id) = lt {\n                 if allowed_lts.contains(&cx.tcx.item_name(def_id.to_def_id())) {\n-                    return false;\n+                    return None;\n                 }\n             }\n         }\n     }\n \n-    // no input lifetimes? easy case!\n-    if input_lts.is_empty() {\n-        false\n-    } else if output_lts.is_empty() {\n-        // no output lifetimes, check distinctness of input lifetimes\n+    // A lifetime can be newly elided if:\n+    // - It occurs only once among the inputs.\n+    // - If there are multiple input lifetimes, then the newly elided lifetime does not occur among the\n+    //   outputs (because eliding such an lifetime would create an ambiguity).\n+    let elidable_lts = named_lifetime_occurrences(&input_lts)\n+        .into_iter()\n+        .filter_map(|(def_id, occurrences)| {\n+            if occurrences == 1 && (input_lts.len() == 1 || !output_lts.contains(&RefLt::Named(def_id))) {\n+                Some((\n+                    def_id,\n+                    input_visitor\n+                        .lifetime_generic_arg_spans\n+                        .get(&def_id)\n+                        .or_else(|| output_visitor.lifetime_generic_arg_spans.get(&def_id))\n+                        .copied(),\n+                ))\n+            } else {\n+                None\n+            }\n+        })\n+        .collect::<Vec<_>>();\n \n-        // only unnamed and static, ok\n-        let unnamed_and_static = input_lts.iter().all(|lt| *lt == RefLt::Unnamed || *lt == RefLt::Static);\n-        if unnamed_and_static {\n-            return false;\n-        }\n-        // we have no output reference, so we only need all distinct lifetimes\n-        input_lts.len() == unique_lifetimes(&input_lts)\n+    if elidable_lts.is_empty() {\n+        None\n     } else {\n-        // we have output references, so we need one input reference,\n-        // and all output lifetimes must be the same\n-        if unique_lifetimes(&output_lts) > 1 {\n-            return false;\n-        }\n-        if input_lts.len() == 1 {\n-            match (&input_lts[0], &output_lts[0]) {\n-                (&RefLt::Named(n1), &RefLt::Named(n2)) if n1 == n2 => true,\n-                (&RefLt::Named(_), &RefLt::Unnamed) => true,\n-                _ => false, /* already elided, different named lifetimes\n-                             * or something static going on */\n-            }\n-        } else {\n-            false\n-        }\n+        Some(elidable_lts)\n     }\n }\n \n@@ -358,10 +371,24 @@ fn allowed_lts_from(tcx: TyCtxt<'_>, named_generics: &[GenericParam<'_>]) -> FxH\n     allowed_lts\n }\n \n-/// Number of unique lifetimes in the given vector.\n+/// Number of times each named lifetime occurs in the given slice. Returns a vector to preserve\n+/// relative order.\n #[must_use]\n-fn unique_lifetimes(lts: &[RefLt]) -> usize {\n-    lts.iter().collect::<FxHashSet<_>>().len()\n+fn named_lifetime_occurrences(lts: &[RefLt]) -> Vec<(LocalDefId, usize)> {\n+    let mut occurrences = Vec::new();\n+    for lt in lts {\n+        if let &RefLt::Named(curr_def_id) = lt {\n+            if let Some(pair) = occurrences\n+                .iter_mut()\n+                .find(|(prev_def_id, _)| *prev_def_id == curr_def_id)\n+            {\n+                pair.1 += 1;\n+            } else {\n+                occurrences.push((curr_def_id, 1));\n+            }\n+        }\n+    }\n+    occurrences\n }\n \n const CLOSURE_TRAIT_BOUNDS: [LangItem; 3] = [LangItem::Fn, LangItem::FnMut, LangItem::FnOnce];\n@@ -370,6 +397,7 @@ const CLOSURE_TRAIT_BOUNDS: [LangItem; 3] = [LangItem::Fn, LangItem::FnMut, Lang\n struct RefVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     lts: Vec<RefLt>,\n+    lifetime_generic_arg_spans: FxHashMap<LocalDefId, Span>,\n     nested_elision_site_lts: Vec<RefLt>,\n     unelided_trait_object_lifetime: bool,\n }\n@@ -379,6 +407,7 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n         Self {\n             cx,\n             lts: Vec::new(),\n+            lifetime_generic_arg_spans: FxHashMap::default(),\n             nested_elision_site_lts: Vec::new(),\n             unelided_trait_object_lifetime: false,\n         }\n@@ -472,6 +501,22 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n             _ => walk_ty(self, ty),\n         }\n     }\n+\n+    fn visit_generic_arg(&mut self, generic_arg: &'tcx GenericArg<'tcx>) {\n+        if let GenericArg::Lifetime(l) = generic_arg\n+            && let LifetimeName::Param(def_id, _) = l.name\n+        {\n+            self.lifetime_generic_arg_spans.entry(def_id).or_insert(l.span);\n+        }\n+        // Replace with `walk_generic_arg` if/when https://github.com/rust-lang/rust/pull/103692 lands.\n+        // walk_generic_arg(self, generic_arg);\n+        match generic_arg {\n+            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n+            GenericArg::Type(ty) => self.visit_ty(ty),\n+            GenericArg::Const(ct) => self.visit_anon_const(&ct.value),\n+            GenericArg::Infer(inf) => self.visit_infer(inf),\n+        }\n+    }\n }\n \n /// Are any lifetimes mentioned in the `where` clause? If so, we don't try to"}, {"sha": "72ae2b39162d55e46984612702499dd71061047d", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -52,8 +52,8 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n     None\n }\n \n-fn check_for_mutation<'tcx>(\n-    cx: &LateContext<'tcx>,\n+fn check_for_mutation(\n+    cx: &LateContext<'_>,\n     body: &Expr<'_>,\n     bound_id_start: Option<HirId>,\n     bound_id_end: Option<HirId>,"}, {"sha": "59195d1ae4e0a5854865b83243de49155df97f83", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -119,7 +119,7 @@ fn is_unit_expression(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n /// semicolons, which causes problems when generating a suggestion. Given an\n /// expression that evaluates to '()' or '!', recursively remove useless braces\n /// and semi-colons until is suitable for including in the suggestion template\n-fn reduce_unit_expression<'a>(cx: &LateContext<'_>, expr: &'a hir::Expr<'_>) -> Option<Span> {\n+fn reduce_unit_expression(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Span> {\n     if !is_unit_expression(cx, expr) {\n         return None;\n     }"}, {"sha": "d521a529e0d6463f12486033c3351d9218a67817", "filename": "clippy_lints/src/matches/manual_filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -62,7 +62,7 @@ fn peels_blocks_incl_unsafe<'a>(expr: &'a Expr<'a>) -> &'a Expr<'a> {\n //    <expr>\n // }\n // Returns true if <expr> resolves to `Some(x)`, `false` otherwise\n-fn is_some_expr<'tcx>(cx: &LateContext<'_>, target: HirId, ctxt: SyntaxContext, expr: &'tcx Expr<'_>) -> bool {\n+fn is_some_expr(cx: &LateContext<'_>, target: HirId, ctxt: SyntaxContext, expr: &Expr<'_>) -> bool {\n     if let Some(inner_expr) = peels_blocks_incl_unsafe_opt(expr) {\n         // there can be not statements in the block as they would be removed when switching to `.filter`\n         if let ExprKind::Call(callee, [arg]) = inner_expr.kind {"}, {"sha": "f587c69f7302d41ab7f10d3040e8d37ef9209dfd", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -83,8 +83,8 @@ fn set_diagnostic<'tcx>(diag: &mut Diagnostic, cx: &LateContext<'tcx>, expr: &'t\n \n /// If the expression is an `ExprKind::Match`, check if the scrutinee has a significant drop that\n /// may have a surprising lifetime.\n-fn has_significant_drop_in_scrutinee<'tcx, 'a>(\n-    cx: &'a LateContext<'tcx>,\n+fn has_significant_drop_in_scrutinee<'tcx>(\n+    cx: &LateContext<'tcx>,\n     scrutinee: &'tcx Expr<'tcx>,\n     source: MatchSource,\n ) -> Option<(Vec<FoundSigDrop>, &'static str)> {\n@@ -377,7 +377,7 @@ impl<'a, 'tcx> ArmSigDropHelper<'a, 'tcx> {\n     }\n }\n \n-fn has_significant_drop_in_arms<'tcx, 'a>(cx: &'a LateContext<'tcx>, arms: &'tcx [Arm<'_>]) -> FxHashSet<Span> {\n+fn has_significant_drop_in_arms<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) -> FxHashSet<Span> {\n     let mut helper = ArmSigDropHelper::new(cx);\n     for arm in arms {\n         helper.visit_expr(arm.body);"}, {"sha": "19b49c44d5704d316e09239e40ea91141c906b61", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -153,7 +153,7 @@ fn pat_in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'a>, pat: &Pat<'_>) ->\n }\n \n /// Returns `true` if the given type is an enum we know won't be expanded in the future\n-fn in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'_>) -> bool {\n+fn in_candidate_enum(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n     // list of candidate `Enum`s we know will never get any more members\n     let candidates = [sym::Cow, sym::Option, sym::Result];\n "}, {"sha": "27a05337a290f2c6cce4ee0635e44672ef71e5df", "filename": "clippy_lints/src/methods/chars_cmp_with_unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -9,8 +9,8 @@ use rustc_lint::LateContext;\n use rustc_lint::Lint;\n \n /// Wrapper fn for `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints with `unwrap()`.\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n     info: &crate::methods::BinaryExprInfo<'_>,\n     chain_methods: &[&str],\n     lint: &'static Lint,"}, {"sha": "2efff4c3c5497b9d361b3b375b04c29e1ecdc331", "filename": "clippy_lints/src/methods/chars_last_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -4,7 +4,7 @@ use rustc_lint::LateContext;\n use super::CHARS_LAST_CMP;\n \n /// Checks for the `CHARS_LAST_CMP` lint.\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n     if chars_cmp::check(cx, info, &[\"chars\", \"last\"], CHARS_LAST_CMP, \"ends_with\") {\n         true\n     } else {"}, {"sha": "5b8713f7d79035d92803413ae6b509c98d5f4fe9", "filename": "clippy_lints/src/methods/chars_last_cmp_with_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp_with_unwrap.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -4,7 +4,7 @@ use rustc_lint::LateContext;\n use super::CHARS_LAST_CMP;\n \n /// Checks for the `CHARS_LAST_CMP` lint with `unwrap()`.\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n     if chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"last\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\") {\n         true\n     } else {"}, {"sha": "b631fecab9729e4de4c6ed853aa9928ed1eb175a", "filename": "clippy_lints/src/methods/chars_next_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -3,6 +3,6 @@ use rustc_lint::LateContext;\n use super::CHARS_NEXT_CMP;\n \n /// Checks for the `CHARS_NEXT_CMP` lint.\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n     crate::methods::chars_cmp::check(cx, info, &[\"chars\", \"next\"], CHARS_NEXT_CMP, \"starts_with\")\n }"}, {"sha": "caf21d3ff3bcb8a055ed5072be1c6fba88ca579a", "filename": "clippy_lints/src/methods/chars_next_cmp_with_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -3,6 +3,6 @@ use rustc_lint::LateContext;\n use super::CHARS_NEXT_CMP;\n \n /// Checks for the `CHARS_NEXT_CMP` lint with `unwrap()`.\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n     crate::methods::chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"next\", \"unwrap\"], CHARS_NEXT_CMP, \"starts_with\")\n }"}, {"sha": "f888c58a72de93a605f3193e5dbfc5907d86ef24", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -17,7 +17,7 @@ use super::MANUAL_FILTER_MAP;\n use super::MANUAL_FIND_MAP;\n use super::OPTION_FILTER_MAP;\n \n-fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Symbol) -> bool {\n+fn is_method(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_name: Symbol) -> bool {\n     match &expr.kind {\n         hir::ExprKind::Path(QPath::TypeRelative(_, mname)) => mname.ident.name == method_name,\n         hir::ExprKind::Path(QPath::Resolved(_, segments)) => {\n@@ -46,7 +46,7 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n     }\n }\n \n-fn is_option_filter_map<'tcx>(cx: &LateContext<'tcx>, filter_arg: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) -> bool {\n+fn is_option_filter_map(cx: &LateContext<'_>, filter_arg: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) -> bool {\n     is_method(cx, map_arg, sym::unwrap) && is_method(cx, filter_arg, sym!(is_some))\n }\n \n@@ -66,8 +66,8 @@ fn is_filter_some_map_unwrap(\n \n /// lint use of `filter().map()` or `find().map()` for `Iterators`\n #[allow(clippy::too_many_arguments)]\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n     expr: &hir::Expr<'_>,\n     filter_recv: &hir::Expr<'_>,\n     filter_arg: &hir::Expr<'_>,"}, {"sha": "3a8b8cbff47e1fdfb751e949e4e0ffad3b356f34", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -12,8 +12,8 @@ use rustc_span::symbol::{sym, Symbol};\n use super::INEFFICIENT_TO_STRING;\n \n /// Checks for the `INEFFICIENT_TO_STRING` lint\n-pub fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n+pub fn check(\n+    cx: &LateContext<'_>,\n     expr: &hir::Expr<'_>,\n     method_name: Symbol,\n     receiver: &hir::Expr<'_>,"}, {"sha": "c830958d5c80e58865bd1c93b9091fdbd5e5f239", "filename": "clippy_lints/src/methods/iter_nth_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -10,7 +10,7 @@ use rustc_span::sym;\n \n use super::ITER_NTH_ZERO;\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n     if_chain! {\n         if is_trait_method(cx, expr, sym::Iterator);\n         if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), arg);"}, {"sha": "70abe4891d9857e8ccee90b8abfc8065a744b941", "filename": "clippy_lints/src/methods/iter_on_single_or_empty_collections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fiter_on_single_or_empty_collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fiter_on_single_or_empty_collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_on_single_or_empty_collections.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -25,7 +25,7 @@ impl IterType {\n     }\n }\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, method_name: &str, recv: &Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: &str, recv: &Expr<'_>) {\n     let item = match recv.kind {\n         ExprKind::Array([]) => None,\n         ExprKind::Array([e]) => Some(e),"}, {"sha": "a7284c64497766b2b404b2377c5d0317b074d5d0", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -67,7 +67,7 @@ enum MinMax {\n     Max,\n }\n \n-fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<MinMax> {\n+fn is_min_or_max(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<MinMax> {\n     // `T::max_value()` `T::min_value()` inherent methods\n     if_chain! {\n         if let hir::ExprKind::Call(func, args) = &expr.kind;"}, {"sha": "6bc783c6d505af108a508067f772a9fefcda5103", "filename": "clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -15,11 +15,11 @@ use rustc_span::{sym, Span};\n \n use super::MAP_CLONE;\n \n-pub(super) fn check<'tcx>(\n+pub(super) fn check(\n     cx: &LateContext<'_>,\n     e: &hir::Expr<'_>,\n     recv: &hir::Expr<'_>,\n-    arg: &'tcx hir::Expr<'_>,\n+    arg: &hir::Expr<'_>,\n     msrv: Option<RustcVersion>,\n ) {\n     if_chain! {"}, {"sha": "b773b3e423f407c78e8e1c68b959a205c0d87b41", "filename": "clippy_lints/src/methods/map_err_ignore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -6,7 +6,7 @@ use rustc_span::sym;\n \n use super::MAP_ERR_IGNORE;\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'_>, e: &Expr<'_>, arg: &'tcx Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, arg: &Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n         && is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Result)"}, {"sha": "e6eb64bcbde64ad0abd70e444e806a30ee51777d", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -13,8 +13,8 @@ use rustc_span::sym;\n use super::OPTION_AS_REF_DEREF;\n \n /// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n     expr: &hir::Expr<'_>,\n     as_ref_recv: &hir::Expr<'_>,\n     map_arg: &hir::Expr<'_>,"}, {"sha": "2ac0786b37b1e73fd431cd3267c30b0992bed0b3", "filename": "clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -8,7 +8,7 @@ use rustc_span::sym;\n \n use super::SUSPICIOUS_MAP;\n \n-pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, count_recv: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) {\n+pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, count_recv: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) {\n     if_chain! {\n         if is_trait_method(cx, count_recv, sym::Iterator);\n         let closure = expr_or_init(cx, map_arg);"}, {"sha": "321fa4b7f9996681000b59321216a3474766df11", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -218,7 +218,7 @@ enum StopEarly {\n     Stop,\n }\n \n-fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr<'_>) -> StopEarly {\n+fn check_expr<'tcx>(vis: &mut ReadVisitor<'_, 'tcx>, expr: &'tcx Expr<'_>) -> StopEarly {\n     if expr.hir_id == vis.last_expr.hir_id {\n         return StopEarly::KeepGoing;\n     }\n@@ -265,7 +265,7 @@ fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr<'_>) -\n     StopEarly::KeepGoing\n }\n \n-fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt<'_>) -> StopEarly {\n+fn check_stmt<'tcx>(vis: &mut ReadVisitor<'_, 'tcx>, stmt: &'tcx Stmt<'_>) -> StopEarly {\n     match stmt.kind {\n         StmtKind::Expr(expr) | StmtKind::Semi(expr) => check_expr(vis, expr),\n         // If the declaration is of a local variable, check its initializer"}, {"sha": "551b6ed1227f37a6bdac6364133a44df5195f7d2", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -137,7 +137,7 @@ impl MutableKeyType {\n         }\n     }\n \n-    fn check_sig<'tcx>(&self, cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n+    fn check_sig(&self, cx: &LateContext<'_>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n         let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         for (hir_ty, ty) in iter::zip(decl.inputs, fn_sig.inputs().skip_binder()) {"}, {"sha": "38a75034cd314857f0c1489a1def0cdaf5db7007", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -287,7 +287,7 @@ const DROP_ELSE_BLOCK_MSG: &str = \"consider dropping the `else` clause\";\n \n const DROP_CONTINUE_EXPRESSION_MSG: &str = \"consider dropping the `continue` expression\";\n \n-fn emit_warning<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str, typ: LintType) {\n+fn emit_warning(cx: &EarlyContext<'_>, data: &LintData<'_>, header: &str, typ: LintType) {\n     // snip    is the whole *help* message that appears after the warning.\n     // message is the warning message.\n     // expr    is the expression which the lint warning message refers to.\n@@ -313,7 +313,7 @@ fn emit_warning<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str,\n     );\n }\n \n-fn suggestion_snippet_for_continue_inside_if<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>) -> String {\n+fn suggestion_snippet_for_continue_inside_if(cx: &EarlyContext<'_>, data: &LintData<'_>) -> String {\n     let cond_code = snippet(cx, data.if_cond.span, \"..\");\n \n     let continue_code = snippet_block(cx, data.if_block.span, \"..\", Some(data.if_expr.span));\n@@ -327,7 +327,7 @@ fn suggestion_snippet_for_continue_inside_if<'a>(cx: &EarlyContext<'_>, data: &'\n     )\n }\n \n-fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>) -> String {\n+fn suggestion_snippet_for_continue_inside_else(cx: &EarlyContext<'_>, data: &LintData<'_>) -> String {\n     let cond_code = snippet(cx, data.if_cond.span, \"..\");\n \n     // Region B\n@@ -361,7 +361,7 @@ fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data:\n     )\n }\n \n-fn check_and_warn<'a>(cx: &EarlyContext<'_>, expr: &'a ast::Expr) {\n+fn check_and_warn(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     if_chain! {\n         if let ast::ExprKind::Loop(loop_block, ..) = &expr.kind;\n         if let Some(last_stmt) = loop_block.stmts.last();"}, {"sha": "7de00c53f73bcbf27f6d397dbd0aad9def432be5", "filename": "clippy_lints/src/operators/op_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fop_ref.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -199,7 +199,7 @@ fn in_impl<'tcx>(\n     }\n }\n \n-fn are_equal<'tcx>(cx: &LateContext<'tcx>, middle_ty: Ty<'_>, hir_ty: &rustc_hir::Ty<'_>) -> bool {\n+fn are_equal(cx: &LateContext<'_>, middle_ty: Ty<'_>, hir_ty: &rustc_hir::Ty<'_>) -> bool {\n     if_chain! {\n         if let ty::Adt(adt_def, _) = middle_ty.kind();\n         if let Some(local_did) = adt_def.did().as_local();"}, {"sha": "97b5a4ce36413f4820b209a68f45c3beeb26db54", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -130,7 +130,7 @@ enum DerefPossible {\n     Impossible,\n }\n \n-fn apply_lint<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'_>, deref_possible: DerefPossible) -> bool {\n+fn apply_lint(cx: &LateContext<'_>, pat: &Pat<'_>, deref_possible: DerefPossible) -> bool {\n     let maybe_mismatch = find_first_mismatch(cx, pat);\n     if let Some((span, mutability, level)) = maybe_mismatch {\n         span_lint_and_help(\n@@ -163,7 +163,7 @@ enum Level {\n     Lower,\n }\n \n-fn find_first_mismatch<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'_>) -> Option<(Span, Mutability, Level)> {\n+fn find_first_mismatch(cx: &LateContext<'_>, pat: &Pat<'_>) -> Option<(Span, Mutability, Level)> {\n     let mut result = None;\n     pat.walk(|p| {\n         if result.is_some() {"}, {"sha": "47b8891e12302b4e4ef6f9526f1b012307158d4d", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -105,17 +105,17 @@ fn expr_as_ptr_offset_call<'tcx>(\n }\n \n // Is the type of the expression a usize?\n-fn is_expr_ty_usize<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+fn is_expr_ty_usize(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     cx.typeck_results().expr_ty(expr) == cx.tcx.types.usize\n }\n \n // Is the type of the expression a raw pointer?\n-fn is_expr_ty_raw_ptr<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+fn is_expr_ty_raw_ptr(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     cx.typeck_results().expr_ty(expr).is_unsafe_ptr()\n }\n \n-fn build_suggestion<'tcx>(\n-    cx: &LateContext<'tcx>,\n+fn build_suggestion(\n+    cx: &LateContext<'_>,\n     method: Method,\n     receiver_expr: &Expr<'_>,\n     cast_lhs_expr: &Expr<'_>,"}, {"sha": "8cc8d5ea62951ce70b2c7f9eb8b5b2f4f7451d96", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -105,8 +105,8 @@ impl EarlyLintPass for RedundantClosureCall {\n \n impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n-        fn count_closure_usage<'a, 'tcx>(\n-            cx: &'a LateContext<'tcx>,\n+        fn count_closure_usage<'tcx>(\n+            cx: &LateContext<'tcx>,\n             block: &'tcx hir::Block<'_>,\n             path: &'tcx hir::Path<'tcx>,\n         ) -> usize {"}, {"sha": "a2109038a05782900e88d1d751b7aa5244040aca", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -168,7 +168,7 @@ impl SlowVectorInit {\n         };\n     }\n \n-    fn emit_lint<'tcx>(cx: &LateContext<'tcx>, slow_fill: &Expr<'_>, vec_alloc: &VecAllocation<'_>, msg: &str) {\n+    fn emit_lint(cx: &LateContext<'_>, slow_fill: &Expr<'_>, vec_alloc: &VecAllocation<'_>, msg: &str) {\n         let len_expr = Sugg::hir(cx, vec_alloc.len_expr, \"len\");\n \n         span_lint_and_then(cx, SLOW_VECTOR_INITIALIZATION, slow_fill.span, msg, |diag| {"}, {"sha": "1aebb8b3104ba611482d1f86c9b4e5f2a0b00fc8", "filename": "clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -256,7 +256,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n     }\n }\n \n-pub(super) fn is_lint_ref_type<'tcx>(cx: &LateContext<'tcx>, ty: &hir::Ty<'_>) -> bool {\n+pub(super) fn is_lint_ref_type(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     if let TyKind::Rptr(\n         _,\n         MutTy {"}, {"sha": "16b160b6fd27ef688b888d8e9fbd9cee5d2da35b", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -72,8 +72,8 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///    |\n ///    = help: consider using `f64::NAN` if you would like a constant representing NaN\n /// ```\n-pub fn span_lint_and_help<'a, T: LintContext>(\n-    cx: &'a T,\n+pub fn span_lint_and_help<T: LintContext>(\n+    cx: &T,\n     lint: &'static Lint,\n     span: impl Into<MultiSpan>,\n     msg: &str,\n@@ -114,8 +114,8 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n /// 10 |     forget(&SomeStruct);\n ///    |            ^^^^^^^^^^^\n /// ```\n-pub fn span_lint_and_note<'a, T: LintContext>(\n-    cx: &'a T,\n+pub fn span_lint_and_note<T: LintContext>(\n+    cx: &T,\n     lint: &'static Lint,\n     span: impl Into<MultiSpan>,\n     msg: &str,\n@@ -192,8 +192,8 @@ pub fn span_lint_hir_and_then(\n ///     = note: `-D fold-any` implied by `-D warnings`\n /// ```\n #[cfg_attr(feature = \"internal\", allow(clippy::collapsible_span_lint_calls))]\n-pub fn span_lint_and_sugg<'a, T: LintContext>(\n-    cx: &'a T,\n+pub fn span_lint_and_sugg<T: LintContext>(\n+    cx: &T,\n     lint: &'static Lint,\n     sp: Span,\n     msg: &str,"}, {"sha": "f7d3c91777ea6538860ea52a83060b9b64314f40", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -994,7 +994,7 @@ impl std::ops::BitOrAssign for CaptureKind {\n /// Note as this will walk up to parent expressions until the capture can be determined it should\n /// only be used while making a closure somewhere a value is consumed. e.g. a block, match arm, or\n /// function argument (other than a receiver).\n-pub fn capture_local_usage<'tcx>(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind {\n+pub fn capture_local_usage(cx: &LateContext<'_>, e: &Expr<'_>) -> CaptureKind {\n     fn pat_capture_kind(cx: &LateContext<'_>, pat: &Pat<'_>) -> CaptureKind {\n         let mut capture = CaptureKind::Ref(Mutability::Not);\n         pat.each_binding_or_first(&mut |_, id, span, _| match cx\n@@ -1852,7 +1852,7 @@ pub fn match_any_def_paths(cx: &LateContext<'_>, did: DefId, paths: &[&[&str]])\n }\n \n /// Checks if the given `DefId` matches the path.\n-pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {\n+pub fn match_def_path(cx: &LateContext<'_>, did: DefId, syms: &[&str]) -> bool {\n     // We should probably move to Symbols in Clippy as well rather than interning every time.\n     let path = cx.get_def_path(did);\n     syms.iter().map(|x| Symbol::intern(x)).eq(path.iter().copied())"}, {"sha": "65722f142aa69c4c8b5055e325b32b60ff3adb17", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -18,7 +18,7 @@ use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n-pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<RustcVersion>) -> McfResult {\n+pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: Option<RustcVersion>) -> McfResult {\n     let def_id = body.source.def_id();\n     let mut current = def_id;\n     loop {\n@@ -276,9 +276,9 @@ fn check_place<'tcx>(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &B\n     Ok(())\n }\n \n-fn check_terminator<'a, 'tcx>(\n+fn check_terminator<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: &'a Body<'tcx>,\n+    body: &Body<'tcx>,\n     terminator: &Terminator<'tcx>,\n     msrv: Option<RustcVersion>,\n ) -> McfResult {"}, {"sha": "45181d3c7a8e982de7586433c86e0233b3c59a7c", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -801,7 +801,7 @@ pub struct DerefClosure {\n /// Returns `None` if no such use cases have been triggered in closure body\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n-pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'_>) -> Option<DerefClosure> {\n+pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Option<DerefClosure> {\n     if let hir::ExprKind::Closure(&Closure { fn_decl, body, .. }) = closure.kind {\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)"}, {"sha": "1f26c7f4db65778f29be10a4d075ee83d24d6bb5", "filename": "tests/ui/crashes/ice-2774.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fcrashes%2Fice-2774.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fcrashes%2Fice-2774.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2774.stderr?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -1,4 +1,4 @@\n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a\n   --> $DIR/ice-2774.rs:15:1\n    |\n LL | pub fn add_barfoos_to_foos<'a>(bars: &HashSet<&'a Bar>) {"}, {"sha": "875d5ab4f21cabe8126bf60a396d4e0ad86cc66f", "filename": "tests/ui/crashes/needless_lifetimes_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -1,4 +1,4 @@\n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a\n   --> $DIR/needless_lifetimes_impl_trait.rs:15:5\n    |\n LL |     fn baz<'a>(&'a self) -> impl Foo + 'a {"}, {"sha": "fd553aa4538ada4d783a00fda912b0f3d46e9e5b", "filename": "tests/ui/issue_4266.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fissue_4266.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fissue_4266.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.stderr?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -1,12 +1,12 @@\n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a\n   --> $DIR/issue_4266.rs:4:1\n    |\n LL | async fn sink1<'a>(_: &'a str) {} // lint\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a\n   --> $DIR/issue_4266.rs:8:1\n    |\n LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {"}, {"sha": "7de15330594702cafa4baef7a41f4e058095caa1", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused)]\n+#![allow(unused, clippy::needless_lifetimes)]\n #![warn(clippy::mut_from_ref)]\n \n struct Foo;"}, {"sha": "2efc936752ef9071c7ce814128d1d9b91b87b97c", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 86, "deletions": 10, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -29,11 +29,20 @@ fn multiple_in_and_out_1<'a>(x: &'a u8, _y: &'a u8) -> &'a u8 {\n     x\n }\n \n-// No error; multiple input refs.\n-fn multiple_in_and_out_2<'a, 'b>(x: &'a u8, _y: &'b u8) -> &'a u8 {\n+// Error; multiple input refs, but the output lifetime is not elided, i.e., the following is valid:\n+//   fn multiple_in_and_out_2a<'a>(x: &'a u8, _y: &u8) -> &'a u8\n+//                                                ^^^\n+fn multiple_in_and_out_2a<'a, 'b>(x: &'a u8, _y: &'b u8) -> &'a u8 {\n     x\n }\n \n+// Error; multiple input refs, but the output lifetime is not elided, i.e., the following is valid:\n+//   fn multiple_in_and_out_2b<'b>(_x: &u8, y: &'b u8) -> &'b u8\n+//                                     ^^^\n+fn multiple_in_and_out_2b<'a, 'b>(_x: &'a u8, y: &'b u8) -> &'b u8 {\n+    y\n+}\n+\n // No error; multiple input refs\n async fn func<'a>(args: &[&'a str]) -> Option<&'a str> {\n     args.get(0).cloned()\n@@ -44,11 +53,20 @@ fn in_static_and_out<'a>(x: &'a u8, _y: &'static u8) -> &'a u8 {\n     x\n }\n \n-// No error.\n-fn deep_reference_1<'a, 'b>(x: &'a u8, _y: &'b u8) -> Result<&'a u8, ()> {\n+// Error; multiple input refs, but the output lifetime is not elided, i.e., the following is valid:\n+//   fn deep_reference_1a<'a>(x: &'a u8, _y: &u8) -> Result<&'a u8, ()>\n+//                                           ^^^\n+fn deep_reference_1a<'a, 'b>(x: &'a u8, _y: &'b u8) -> Result<&'a u8, ()> {\n     Ok(x)\n }\n \n+// Error; multiple input refs, but the output lifetime is not elided, i.e., the following is valid:\n+//   fn deep_reference_1b<'b>(_x: &u8, y: &'b u8) -> Result<&'b u8, ()>\n+//                                ^^^\n+fn deep_reference_1b<'a, 'b>(_x: &'a u8, y: &'b u8) -> Result<&'b u8, ()> {\n+    Ok(y)\n+}\n+\n // No error; two input refs.\n fn deep_reference_2<'a>(x: Result<&'a u8, &'a u8>) -> &'a u8 {\n     x.unwrap()\n@@ -129,11 +147,20 @@ impl X {\n         &self.x\n     }\n \n-    // No error; multiple input refs.\n-    fn self_and_in_out<'s, 't>(&'s self, _x: &'t u8) -> &'s u8 {\n+    // Error; multiple input refs, but the output lifetime is not elided, i.e., the following is valid:\n+    //   fn self_and_in_out_1<'s>(&'s self, _x: &u8) -> &'s u8\n+    //                                          ^^^\n+    fn self_and_in_out_1<'s, 't>(&'s self, _x: &'t u8) -> &'s u8 {\n         &self.x\n     }\n \n+    // Error; multiple input refs, but the output lifetime is not elided, i.e., the following is valid:\n+    //   fn self_and_in_out_2<'t>(&self, x: &'t u8) -> &'t u8\n+    //                            ^^^^^\n+    fn self_and_in_out_2<'s, 't>(&'s self, x: &'t u8) -> &'t u8 {\n+        x\n+    }\n+\n     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n \n     // No error; same lifetimes on two params.\n@@ -167,8 +194,19 @@ fn struct_with_lt3<'a>(_foo: &Foo<'a>) -> &'a str {\n     unimplemented!()\n }\n \n-// No warning; two input lifetimes.\n-fn struct_with_lt4<'a, 'b>(_foo: &'a Foo<'b>) -> &'a str {\n+// Warning; two input lifetimes, but the output lifetime is not elided, i.e., the following is\n+// valid:\n+//   fn struct_with_lt4a<'a>(_foo: &'a Foo<'_>) -> &'a str\n+//                                         ^^\n+fn struct_with_lt4a<'a, 'b>(_foo: &'a Foo<'b>) -> &'a str {\n+    unimplemented!()\n+}\n+\n+// Warning; two input lifetimes, but the output lifetime is not elided, i.e., the following is\n+// valid:\n+//   fn struct_with_lt4b<'b>(_foo: &Foo<'b>) -> &'b str\n+//                                 ^^^^\n+fn struct_with_lt4b<'a, 'b>(_foo: &'a Foo<'b>) -> &'b str {\n     unimplemented!()\n }\n \n@@ -203,8 +241,19 @@ fn alias_with_lt3<'a>(_foo: &FooAlias<'a>) -> &'a str {\n     unimplemented!()\n }\n \n-// No warning; two input lifetimes.\n-fn alias_with_lt4<'a, 'b>(_foo: &'a FooAlias<'b>) -> &'a str {\n+// Warning; two input lifetimes, but the output lifetime is not elided, i.e., the following is\n+// valid:\n+//   fn alias_with_lt4a<'a>(_foo: &'a FooAlias<'_>) -> &'a str\n+//                                             ^^\n+fn alias_with_lt4a<'a, 'b>(_foo: &'a FooAlias<'b>) -> &'a str {\n+    unimplemented!()\n+}\n+\n+// Warning; two input lifetimes, but the output lifetime is not elided, i.e., the following is\n+// valid:\n+//   fn alias_with_lt4b<'b>(_foo: &FooAlias<'b>) -> &'b str\n+//                                ^^^^^^^^^\n+fn alias_with_lt4b<'a, 'b>(_foo: &'a FooAlias<'b>) -> &'b str {\n     unimplemented!()\n }\n \n@@ -419,4 +468,31 @@ mod issue7296 {\n     }\n }\n \n+mod pr_9743_false_negative_fix {\n+    #![allow(unused)]\n+\n+    fn foo<'a>(x: &'a u8, y: &'_ u8) {}\n+\n+    fn bar<'a>(x: &'a u8, y: &'_ u8, z: &'_ u8) {}\n+}\n+\n+mod pr_9743_output_lifetime_checks {\n+    #![allow(unused)]\n+\n+    // lint: only one input\n+    fn one_input<'a>(x: &'a u8) -> &'a u8 {\n+        unimplemented!()\n+    }\n+\n+    // lint: multiple inputs, output would not be elided\n+    fn multiple_inputs_output_not_elided<'a, 'b>(x: &'a u8, y: &'b u8, z: &'b u8) -> &'b u8 {\n+        unimplemented!()\n+    }\n+\n+    // don't lint: multiple inputs, output would be elided (which would create an ambiguity)\n+    fn multiple_inputs_output_would_be_elided<'a, 'b>(x: &'a u8, y: &'b u8, z: &'b u8) -> &'a u8 {\n+        unimplemented!()\n+    }\n+}\n+\n fn main() {}"}, {"sha": "5a7cf13c86dded256b80b69b5dbb75aa51e85318", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 186, "deletions": 60, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -1,190 +1,316 @@\n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a, 'b\n   --> $DIR/needless_lifetimes.rs:11:1\n    |\n LL | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a, 'b\n   --> $DIR/needless_lifetimes.rs:13:1\n    |\n LL | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a\n   --> $DIR/needless_lifetimes.rs:23:1\n    |\n LL | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:57:1\n+error: the following explicit lifetimes could be elided: 'b\n+  --> $DIR/needless_lifetimes.rs:35:1\n+   |\n+LL | fn multiple_in_and_out_2a<'a, 'b>(x: &'a u8, _y: &'b u8) -> &'a u8 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:42:1\n+   |\n+LL | fn multiple_in_and_out_2b<'a, 'b>(_x: &'a u8, y: &'b u8) -> &'b u8 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 'b\n+  --> $DIR/needless_lifetimes.rs:59:1\n+   |\n+LL | fn deep_reference_1a<'a, 'b>(x: &'a u8, _y: &'b u8) -> Result<&'a u8, ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:66:1\n+   |\n+LL | fn deep_reference_1b<'a, 'b>(_x: &'a u8, y: &'b u8) -> Result<&'b u8, ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:75:1\n    |\n LL | fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:62:1\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:80:1\n    |\n LL | fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:74:1\n+error: the following explicit lifetimes could be elided: 'a, 'b\n+  --> $DIR/needless_lifetimes.rs:92:1\n    |\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace with `'_` in generic arguments such as here\n+  --> $DIR/needless_lifetimes.rs:92:37\n+   |\n+LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n+   |                                     ^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:98:1\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:116:1\n    |\n LL | fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace with `'_` in generic arguments such as here\n+  --> $DIR/needless_lifetimes.rs:116:32\n+   |\n+LL | fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n+   |                                ^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:128:5\n+error: the following explicit lifetimes could be elided: 's\n+  --> $DIR/needless_lifetimes.rs:146:5\n    |\n LL |     fn self_and_out<'s>(&'s self) -> &'s u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:137:5\n+error: the following explicit lifetimes could be elided: 't\n+  --> $DIR/needless_lifetimes.rs:153:5\n+   |\n+LL |     fn self_and_in_out_1<'s, 't>(&'s self, _x: &'t u8) -> &'s u8 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 's\n+  --> $DIR/needless_lifetimes.rs:160:5\n+   |\n+LL |     fn self_and_in_out_2<'s, 't>(&'s self, x: &'t u8) -> &'t u8 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 's, 't\n+  --> $DIR/needless_lifetimes.rs:164:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:156:1\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:183:1\n    |\n LL | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace with `'_` in generic arguments such as here\n+  --> $DIR/needless_lifetimes.rs:183:33\n+   |\n+LL | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n+   |                                 ^^\n+\n+error: the following explicit lifetimes could be elided: 'b\n+  --> $DIR/needless_lifetimes.rs:201:1\n+   |\n+LL | fn struct_with_lt4a<'a, 'b>(_foo: &'a Foo<'b>) -> &'a str {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace with `'_` in generic arguments such as here\n+  --> $DIR/needless_lifetimes.rs:201:43\n+   |\n+LL | fn struct_with_lt4a<'a, 'b>(_foo: &'a Foo<'b>) -> &'a str {\n+   |                                           ^^\n+\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:209:1\n+   |\n+LL | fn struct_with_lt4b<'a, 'b>(_foo: &'a Foo<'b>) -> &'b str {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:186:1\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:224:1\n    |\n LL | fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:192:1\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:230:1\n    |\n LL | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace with `'_` in generic arguments such as here\n+  --> $DIR/needless_lifetimes.rs:230:37\n+   |\n+LL | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n+   |                                     ^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:211:1\n+error: the following explicit lifetimes could be elided: 'b\n+  --> $DIR/needless_lifetimes.rs:248:1\n+   |\n+LL | fn alias_with_lt4a<'a, 'b>(_foo: &'a FooAlias<'b>) -> &'a str {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace with `'_` in generic arguments such as here\n+  --> $DIR/needless_lifetimes.rs:248:47\n+   |\n+LL | fn alias_with_lt4a<'a, 'b>(_foo: &'a FooAlias<'b>) -> &'a str {\n+   |                                               ^^\n+\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:256:1\n+   |\n+LL | fn alias_with_lt4b<'a, 'b>(_foo: &'a FooAlias<'b>) -> &'b str {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:260:1\n    |\n LL | fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:219:1\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:268:1\n    |\n LL | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:255:1\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:304:1\n    |\n LL | fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace with `'_` in generic arguments such as here\n+  --> $DIR/needless_lifetimes.rs:304:47\n+   |\n+LL | fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n+   |                                               ^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:262:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:311:9\n    |\n LL |         fn needless_lt<'a>(x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:266:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:315:9\n    |\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:279:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:328:9\n    |\n LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:311:5\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:360:5\n    |\n LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:320:5\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:369:5\n    |\n LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:332:5\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:381:5\n    |\n LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:347:5\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:396:5\n    |\n LL |     fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:360:5\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:409:5\n    |\n LL |     fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:363:5\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:412:5\n    |\n LL |     fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:385:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:434:9\n    |\n LL |         fn implicit<'a>(&'a self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:388:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:437:9\n    |\n LL |         fn implicit_mut<'a>(&'a mut self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:399:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:448:9\n    |\n LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:405:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:454:9\n    |\n LL |         fn implicit<'a>(&'a self) -> &'a ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:406:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:455:9\n    |\n LL |         fn implicit_provided<'a>(&'a self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:415:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:464:9\n    |\n LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:416:9\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:465:9\n    |\n LL |         fn lifetime_elsewhere_provided<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 31 previous errors\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:474:5\n+   |\n+LL |     fn foo<'a>(x: &'a u8, y: &'_ u8) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:476:5\n+   |\n+LL |     fn bar<'a>(x: &'a u8, y: &'_ u8, z: &'_ u8) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:483:5\n+   |\n+LL |     fn one_input<'a>(x: &'a u8) -> &'a u8 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the following explicit lifetimes could be elided: 'a\n+  --> $DIR/needless_lifetimes.rs:488:5\n+   |\n+LL |     fn multiple_inputs_output_not_elided<'a, 'b>(x: &'a u8, y: &'b u8, z: &'b u8) -> &'b u8 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 45 previous errors\n "}, {"sha": "1cbacf0feab543bdf3df61bc270965713d747d76", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code, clippy::borrow_as_ptr)]\n+#![allow(dead_code, clippy::borrow_as_ptr, clippy::needless_lifetimes)]\n \n extern crate core;\n "}, {"sha": "c0af011d33d06a3f912914df7623a0f4df39766a", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -3,6 +3,7 @@\n #![deny(clippy::trivially_copy_pass_by_ref)]\n #![allow(\n     clippy::disallowed_names,\n+    clippy::needless_lifetimes,\n     clippy::redundant_field_names,\n     clippy::uninlined_format_args\n )]"}, {"sha": "8c5cfa8a0f17c83844d31b9cb4a486b5cf572f88", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7600535511a0b8c76bf28f40e1b5c4a45a57b28f/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=7600535511a0b8c76bf28f40e1b5c4a45a57b28f", "patch": "@@ -1,5 +1,5 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:11\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |           ^^^^ help: consider passing by value instead: `u32`\n@@ -11,103 +11,103 @@ LL | #![deny(clippy::trivially_copy_pass_by_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:20\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:29\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:12\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:22\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:31\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:40\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:61:35\n+  --> $DIR/trivially_copy_pass_by_ref.rs:62:35\n    |\n LL |     fn bad_issue7518(self, other: &Self) {}\n    |                                   ^^^^^ help: consider passing by value instead: `Self`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:73:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:74:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:73:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:74:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:73:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:74:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:77:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:78:34\n    |\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:109:21\n+  --> $DIR/trivially_copy_pass_by_ref.rs:110:21\n    |\n LL |     fn foo_never(x: &i32) {\n    |                     ^^^^ help: consider passing by value instead: `i32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:114:15\n+  --> $DIR/trivially_copy_pass_by_ref.rs:115:15\n    |\n LL |     fn foo(x: &i32) {\n    |               ^^^^ help: consider passing by value instead: `i32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:141:37\n+  --> $DIR/trivially_copy_pass_by_ref.rs:142:37\n    |\n LL | fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {\n    |                                     ^^^^^^^ help: consider passing by value instead: `u32`"}]}