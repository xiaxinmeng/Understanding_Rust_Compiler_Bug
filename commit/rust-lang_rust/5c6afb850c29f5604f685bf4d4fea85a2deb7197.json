{"sha": "5c6afb850c29f5604f685bf4d4fea85a2deb7197", "node_id": "C_kwDOAAsO6NoAKDVjNmFmYjg1MGMyOWY1NjA0ZjY4NWJmNGQ0ZmVhODVhMmRlYjcxOTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T21:21:20Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:34:44Z"}, "message": "ProjectionTy.item_def_id -> ProjectionTy.def_id", "tree": {"sha": "b89915de1c6af256c67a1c2fe1fbdba8cb68cf70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89915de1c6af256c67a1c2fe1fbdba8cb68cf70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c6afb850c29f5604f685bf4d4fea85a2deb7197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6afb850c29f5604f685bf4d4fea85a2deb7197", "html_url": "https://github.com/rust-lang/rust/commit/5c6afb850c29f5604f685bf4d4fea85a2deb7197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c6afb850c29f5604f685bf4d4fea85a2deb7197/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "html_url": "https://github.com/rust-lang/rust/commit/7f3af726065d9eaabf93d87f22d97f60cca7a5f1"}], "stats": {"total": 350, "additions": 164, "deletions": 186}, "files": [{"sha": "7a8d1d8d9fad68434f7ace538072b031878570ba", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -235,7 +235,7 @@ fn push_debuginfo_type_name<'tcx>(\n                 let projection_bounds: SmallVec<[_; 4]> = trait_data\n                     .projection_bounds()\n                     .map(|bound| {\n-                        let ExistentialProjection { item_def_id, term, .. } =\n+                        let ExistentialProjection { def_id: item_def_id, term, .. } =\n                             tcx.erase_late_bound_regions(bound);\n                         // FIXME(associated_const_equality): allow for consts here\n                         (item_def_id, term.ty().unwrap())"}, {"sha": "5c78f63020d26d4a274ec66b47205c39967321ac", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n             | ty::Opaque(ty::OpaqueTy { def_id, substs })\n-            | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n+            | ty::Projection(ty::ProjectionTy { def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),"}, {"sha": "7c6b8a2455036d536c56b54f9882615d6d1808c9", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -1146,10 +1146,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             debug!(?substs_trait_ref_and_assoc_item);\n \n-            ty::ProjectionTy {\n-                item_def_id: assoc_item.def_id,\n-                substs: substs_trait_ref_and_assoc_item,\n-            }\n+            ty::ProjectionTy { def_id: assoc_item.def_id, substs: substs_trait_ref_and_assoc_item }\n         });\n \n         if !speculative {\n@@ -1195,7 +1192,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // the \"projection predicate\" for:\n                 //\n                 // `<T as Iterator>::Item = u32`\n-                let assoc_item_def_id = projection_ty.skip_binder().item_def_id;\n+                let assoc_item_def_id = projection_ty.skip_binder().def_id;\n                 let def_kind = tcx.def_kind(assoc_item_def_id);\n                 match (def_kind, term.unpack()) {\n                     (hir::def::DefKind::AssocTy, ty::TermKind::Ty(_))"}, {"sha": "1d720aa5d376d2c8f3956cd66e7466644318fb92", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -572,9 +572,9 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if let ty::Projection(proj) = ty.kind()\n-            && self.tcx().def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+            && self.tcx().def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n         {\n-            if let Some((ty, _)) = self.types.get(&proj.item_def_id) {\n+            if let Some((ty, _)) = self.types.get(&proj.def_id) {\n                 return *ty;\n             }\n             //FIXME(RPITIT): Deny nested RPITIT in substs too\n@@ -586,9 +586,9 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n                 span: self.span,\n                 kind: TypeVariableOriginKind::MiscVariable,\n             });\n-            self.types.insert(proj.item_def_id, (infer_ty, proj.substs));\n+            self.types.insert(proj.def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n-            for (pred, pred_span) in self.tcx().bound_explicit_item_bounds(proj.item_def_id).subst_iter_copied(self.tcx(), proj.substs) {\n+            for (pred, pred_span) in self.tcx().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.tcx(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n                     &ObligationCause::misc(self.span, self.body_id),\n@@ -601,7 +601,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n                     ObligationCause::new(\n                         self.span,\n                         self.body_id,\n-                        ObligationCauseCode::BindingObligation(proj.item_def_id, pred_span),\n+                        ObligationCauseCode::BindingObligation(proj.def_id, pred_span),\n                     ),\n                     self.param_env,\n                     pred,\n@@ -1735,7 +1735,7 @@ pub fn check_type_bounds<'tcx>(\n         let mut predicates = param_env.caller_bounds().iter().collect::<Vec<_>>();\n         match impl_ty_value.kind() {\n             ty::Projection(proj)\n-                if proj.item_def_id == trait_ty.def_id && proj.substs == rebased_substs =>\n+                if proj.def_id == trait_ty.def_id && proj.substs == rebased_substs =>\n             {\n                 // Don't include this predicate if the projected type is\n                 // exactly the same as the projection. This can occur in\n@@ -1747,7 +1747,7 @@ pub fn check_type_bounds<'tcx>(\n                 ty::Binder::bind_with_vars(\n                     ty::ProjectionPredicate {\n                         projection_ty: ty::ProjectionTy {\n-                            item_def_id: trait_ty.def_id,\n+                            def_id: trait_ty.def_id,\n                             substs: rebased_substs,\n                         },\n                         term: impl_ty_value.into(),"}, {"sha": "1c7b83f99a87354ee5d19dfce0633ee5da8e1782", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -352,11 +352,7 @@ fn bounds_from_generic_predicates<'tcx>(\n         // insert the associated types where they correspond, but for now let's be \"lazy\" and\n         // propose this instead of the following valid resugaring:\n         // `T: Trait, Trait::Assoc = K` \u2192 `T: Trait<Assoc = K>`\n-        where_clauses.push(format!(\n-            \"{} = {}\",\n-            tcx.def_path_str(p.projection_ty.item_def_id),\n-            p.term,\n-        ));\n+        where_clauses.push(format!(\"{} = {}\", tcx.def_path_str(p.projection_ty.def_id), p.term,));\n     }\n     let where_clauses = if where_clauses.is_empty() {\n         String::new()"}, {"sha": "c0dbae81371035671a3aa8330ee42911985e95e7", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -759,7 +759,7 @@ impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n-            ty::Projection(p) if p.item_def_id == self.gat => {\n+            ty::Projection(p) if p.def_id == self.gat => {\n                 for (idx, subst) in p.substs.iter().enumerate() {\n                     match subst.unpack() {\n                         GenericArgKind::Lifetime(lt) if !lt.is_late_bound() => {\n@@ -1593,11 +1593,11 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n         for arg in fn_output.walk() {\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n                 && let ty::Projection(proj) = ty.kind()\n-                && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n-                && tcx.impl_trait_in_trait_parent(proj.item_def_id) == fn_def_id.to_def_id()\n+                && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n+                && tcx.impl_trait_in_trait_parent(proj.def_id) == fn_def_id.to_def_id()\n             {\n-                let span = tcx.def_span(proj.item_def_id);\n-                let bounds = wfcx.tcx().explicit_item_bounds(proj.item_def_id);\n+                let span = tcx.def_span(proj.def_id);\n+                let bounds = wfcx.tcx().explicit_item_bounds(proj.def_id);\n                 let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n                     let bound = ty::EarlyBinder(bound).subst(tcx, proj.substs);\n                     let normalized_bound = wfcx.normalize(span, None, bound);"}, {"sha": "617de63b1bdfb57587c9dfa9aa1b61c12f61c468", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -413,7 +413,7 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             //   supertrait).\n             if let ty::Projection(projection) = ty.kind() {\n                 projection.substs == trait_identity_substs\n-                    && tcx.associated_item(projection.item_def_id).container_id(tcx) == def_id\n+                    && tcx.associated_item(projection.def_id).container_id(tcx) == def_id\n             } else {\n                 false\n             }"}, {"sha": "43bc71ea1e4fa77ad9121998cc39c505ebe439f9", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -69,7 +69,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             // as a precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n             // but it can't hurt to be safe ^^\n             if let ty::Projection(projection) = ty.kind() {\n-                let generics = tcx.generics_of(projection.item_def_id);\n+                let generics = tcx.generics_of(projection.def_id);\n \n                 let arg_index = segment\n                     .args"}, {"sha": "3d29470ee66c57d02ccbb70f39d141eeae6afc15", "filename": "compiler/rustc_hir_analysis/src/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -202,7 +202,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                 debug!(\"Projection\");\n                 check_explicit_predicates(\n                     tcx,\n-                    tcx.parent(obj.item_def_id),\n+                    tcx.parent(obj.def_id),\n                     obj.substs,\n                     required_predicates,\n                     explicit_map,"}, {"sha": "b51b740d08e2e7a2e87f7bb578205bbcc430237c", "filename": "compiler/rustc_hir_analysis/src/outlives/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -90,7 +90,7 @@ pub(crate) fn insert_outlives_predicate<'tcx>(\n                         // ```\n                         //\n                         // Here we want to add an explicit `where <T as Iterator>::Item: 'a`.\n-                        let ty: Ty<'tcx> = tcx.mk_projection(proj_ty.item_def_id, proj_ty.substs);\n+                        let ty: Ty<'tcx> = tcx.mk_projection(proj_ty.def_id, proj_ty.substs);\n                         required_predicates\n                             .entry(ty::OutlivesPredicate(ty.into(), outlived_region))\n                             .or_insert(span);"}, {"sha": "9f8baa55bed67ea32268560280ddb1b36fea703d", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -110,12 +110,13 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n \n         #[instrument(level = \"trace\", skip(self), ret)]\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            match t.kind() {\n-                ty::Opaque(def_id, substs) => self.visit_opaque(*def_id, substs),\n+                // FIXME(alias): merge these\n+                match t.kind() {\n+                ty::Opaque(ty::OpaqueTy { def_id, substs }) => self.visit_opaque(*def_id, substs),\n                 ty::Projection(proj)\n-                    if self.tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+                    if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n                 {\n-                    self.visit_opaque(proj.item_def_id, proj.substs)\n+                    self.visit_opaque(proj.def_id, proj.substs)\n                 }\n                 _ => t.super_visit_with(self),\n             }\n@@ -167,7 +168,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n                 }\n             }\n             ty::PredicateKind::Clause(ty::Clause::Projection(ty::ProjectionPredicate {\n-                projection_ty: ty::ProjectionTy { substs, item_def_id: _ },\n+                projection_ty: ty::ProjectionTy { substs, def_id: _ },\n                 term,\n             })) => {\n                 for subst in &substs[1..] {"}, {"sha": "5d89e47e6e017b2a2bec1f73ffda1d6e3fe77db5", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -684,10 +684,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n             ty::Projection(proj)\n-                if self.tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n             {\n                 self.tcx\n-                    .bound_explicit_item_bounds(proj.item_def_id)\n+                    .bound_explicit_item_bounds(proj.def_id)\n                     .subst_iter_copied(self.tcx, proj.substs)\n                     .find_map(|(p, s)| get_future_output(p, s))?\n             }\n@@ -743,11 +743,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // The `Future` trait has only one associated item, `Output`,\n         // so check that this is what we see.\n         let output_assoc_item = self.tcx.associated_item_def_ids(future_trait)[0];\n-        if output_assoc_item != predicate.projection_ty.item_def_id {\n+        if output_assoc_item != predicate.projection_ty.def_id {\n             span_bug!(\n                 cause_span,\n                 \"projecting associated item `{:?}` from future, which is not Output `{:?}`\",\n-                predicate.projection_ty.item_def_id,\n+                predicate.projection_ty.def_id,\n                 output_assoc_item,\n             );\n         }"}, {"sha": "bed3fc1c53aace1e1a4dc6d6e682877ceaee1cb8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -177,7 +177,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                     self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                         if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n-                        && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                        && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()\n                         // args tuple will always be substs[1]\n                         && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n                         {\n@@ -194,7 +194,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Dynamic(data, _, ty::Dyn) => {\n                     data.iter().find_map(|pred| {\n                         if let ty::ExistentialPredicate::Projection(proj) = pred.skip_binder()\n-                        && Some(proj.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                        && Some(proj.def_id) == self.tcx.lang_items().fn_once_output()\n                         // for existential projection, substs are shifted over by 1\n                         && let ty::Tuple(args) = proj.substs.type_at(0).kind()\n                         {\n@@ -212,7 +212,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let def_id = self.tcx.generics_of(self.body_id.owner).type_param(&param, self.tcx).def_id;\n                     self.tcx.predicates_of(self.body_id.owner).predicates.iter().find_map(|(pred, _)| {\n                         if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n-                        && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                        && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()\n                         && proj.projection_ty.self_ty() == found\n                         // args tuple will always be substs[1]\n                         && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()"}, {"sha": "5451f41d943256160ec6bc3a95da5ac52e1c4f16", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -559,7 +559,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                                 let quiet_projection_ty = ty::ProjectionTy {\n                                     substs: substs_with_infer_self,\n-                                    item_def_id: projection_ty.item_def_id,\n+                                    def_id: projection_ty.def_id,\n                                 };\n \n                                 let term = pred.skip_binder().term;\n@@ -2269,7 +2269,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             t.def_id() == info.def_id\n                         }\n                         ty::PredicateKind::Clause(ty::Clause::Projection(p)) => {\n-                            p.projection_ty.item_def_id == info.def_id\n+                            p.projection_ty.def_id == info.def_id\n                         }\n                         _ => false,\n                     }"}, {"sha": "1f2768f9884af10c31fffb83e4ab8fac90acbe64", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -419,8 +419,8 @@ impl<'tcx> ToTrace<'tcx> for ty::ProjectionTy<'tcx> {\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        let a_ty = tcx.mk_projection(a.item_def_id, a.substs);\n-        let b_ty = tcx.mk_projection(b.item_def_id, b.substs);\n+        let a_ty = tcx.mk_projection(a.def_id, a.substs);\n+        let b_ty = tcx.mk_projection(b.def_id, b.substs);\n         TypeTrace {\n             cause: cause.clone(),\n             values: Terms(ExpectedFound::new(a_is_expected, a_ty.into(), b_ty.into())),"}, {"sha": "615452d019de404c7952b744d98c2c8b58471ee6", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -342,9 +342,9 @@ impl<'tcx> InferCtxt<'tcx> {\n         let (def_id, substs) = match *ty.kind() {\n             ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n             ty::Projection(data)\n-                if self.tcx.def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+                if self.tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder =>\n             {\n-                (data.item_def_id, data.substs)\n+                (data.def_id, data.substs)\n             }\n             _ => return None,\n         };\n@@ -358,7 +358,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     .kind()\n                     .map_bound(|kind| match kind {\n                         ty::PredicateKind::Clause(ty::Clause::Projection(projection_predicate))\n-                            if projection_predicate.projection_ty.item_def_id == item_def_id =>\n+                            if projection_predicate.projection_ty.def_id == item_def_id =>\n                         {\n                             projection_predicate.term.ty()\n                         }\n@@ -1743,11 +1743,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 )\n                             }\n                             (true, ty::Projection(proj))\n-                                if self.tcx.def_kind(proj.item_def_id)\n+                                if self.tcx.def_kind(proj.def_id)\n                                     == DefKind::ImplTraitPlaceholder =>\n                             {\n                                 let sm = self.tcx.sess.source_map();\n-                                let pos = sm.lookup_char_pos(self.tcx.def_span(proj.item_def_id).lo());\n+                                let pos = sm.lookup_char_pos(self.tcx.def_span(proj.def_id).lo());\n                                 format!(\n                                     \" (trait associated opaque type at <{}:{}:{}>)\",\n                                     sm.filename_for_diagnostics(&pos.file.name),"}, {"sha": "7cac038927c749b0d5a7396b38ace5350b642dc5", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -509,7 +509,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     (\n                         hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: last_bounds, .. }),\n                         hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: exp_bounds, .. }),\n-                    ) if iter::zip(*last_bounds, *exp_bounds).all(|(left, right)| {\n+                    ) if std::iter::zip(*last_bounds, *exp_bounds).all(|(left, right)| {\n                         match (left, right) {\n                             (\n                                 hir::GenericBound::Trait(tl, ml),"}, {"sha": "25edfd0928a2160d78eb7583d2cc72fff6e580e3", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -490,10 +490,10 @@ where\n             }\n \n             ty::Projection(proj)\n-                if self.tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n             {\n                 // Skip lifetime paramters that are not captures.\n-                let variances = self.tcx.variances_of(proj.item_def_id);\n+                let variances = self.tcx.variances_of(proj.def_id);\n \n                 for (v, s) in std::iter::zip(variances, proj.substs.iter()) {\n                     if *v != ty::Variance::Bivariant {\n@@ -568,7 +568,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     // FIXME(RPITIT): Don't replace RPITITs with inference vars.\n                     ty::Projection(projection_ty)\n                         if !projection_ty.has_escaping_bound_vars()\n-                            && tcx.def_kind(projection_ty.item_def_id)\n+                            && tcx.def_kind(projection_ty.def_id)\n                                 != DefKind::ImplTraitPlaceholder =>\n                     {\n                         self.infer_projection(\n@@ -588,7 +588,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     }\n                     // FIXME(RPITIT): This can go away when we move to associated types\n                     ty::Projection(proj)\n-                        if def_id.to_def_id() == proj.item_def_id && substs == proj.substs =>\n+                        if def_id.to_def_id() == proj.def_id && substs == proj.substs =>\n                     {\n                         hidden_ty\n                     }"}, {"sha": "c496b040edbbe1249f70ed48e1f907cd6ad4dcd6", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -355,11 +355,11 @@ where\n             origin,\n             region,\n             GenericKind::Projection(projection_ty),\n-            projection_ty.item_def_id,\n+            projection_ty.def_id,\n             projection_ty.substs,\n             false,\n             |ty| match ty.kind() {\n-                ty::Projection(projection_ty) => (projection_ty.item_def_id, projection_ty.substs),\n+                ty::Projection(projection_ty) => (projection_ty.def_id, projection_ty.substs),\n                 _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n             },\n         );"}, {"sha": "136da4a3cb12a110eaaffd96606370628219f855", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -178,7 +178,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n             ),\n             Component::Projection(projection_ty) => self.projection_opaque_bounds(\n                 GenericKind::Projection(projection_ty),\n-                projection_ty.item_def_id,\n+                projection_ty.def_id,\n                 projection_ty.substs,\n                 visited,\n             ),"}, {"sha": "d81e09fcb5d0594008a8730721e156bd3d392251", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -21,7 +21,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         recursion_depth: usize,\n         obligations: &mut Vec<PredicateObligation<'tcx>>,\n     ) -> Ty<'tcx> {\n-        let def_id = projection_ty.item_def_id;\n+        let def_id = projection_ty.def_id;\n         let ty_var = self.next_ty_var(TypeVariableOrigin {\n             kind: TypeVariableOriginKind::NormalizeProjectionType,\n             span: self.tcx.def_span(def_id),"}, {"sha": "7b0d0a9cb5291becf63b1276704f92090e374698", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -773,7 +773,7 @@ impl<'tcx> GenericKind<'tcx> {\n     pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => p.to_ty(tcx),\n-            GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),\n+            GenericKind::Projection(ref p) => tcx.mk_projection(p.def_id, p.substs),\n             GenericKind::Opaque(def_id, substs) => tcx.mk_opaque(def_id, substs),\n         }\n     }"}, {"sha": "8f0bd3a9abe5e29ac32a3a754f3516790bd9a4c6", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -259,8 +259,7 @@ impl<'tcx> Elaborator<'tcx> {\n                             Component::Projection(projection) => {\n                                 // We might end up here if we have `Foo<<Bar as Baz>::Assoc>: 'a`.\n                                 // With this, we can deduce that `<Bar as Baz>::Assoc: 'a`.\n-                                let ty =\n-                                    tcx.mk_projection(projection.item_def_id, projection.substs);\n+                                let ty = tcx.mk_projection(projection.def_id, projection.substs);\n                                 Some(ty::PredicateKind::Clause(ty::Clause::TypeOutlives(\n                                     ty::OutlivesPredicate(ty, r_min),\n                                 )))"}, {"sha": "f745e8201a8598f7ec1627c1d16b5b6f0f7112fa", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n             let Some(proj_term) = proj.term.ty() else { continue };\n \n             let proj_ty =\n-                cx.tcx.mk_projection(proj.projection_ty.item_def_id, proj.projection_ty.substs);\n+                cx.tcx.mk_projection(proj.projection_ty.def_id, proj.projection_ty.substs);\n             // For every instance of the projection type in the bounds,\n             // replace them with the term we're assigning to the associated\n             // type in our opaque type.\n@@ -97,7 +97,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n             // with `impl Send: OtherTrait`.\n             for (assoc_pred, assoc_pred_span) in cx\n                 .tcx\n-                .bound_explicit_item_bounds(proj.projection_ty.item_def_id)\n+                .bound_explicit_item_bounds(proj.projection_ty.def_id)\n                 .subst_iter_copied(cx.tcx, &proj.projection_ty.substs)\n             {\n                 let assoc_pred = assoc_pred.fold_with(proj_replacer);"}, {"sha": "4c22cd65002b393649750f93a8970c07de54f059", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -1112,7 +1112,7 @@ fn should_encode_trait_impl_trait_tys<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) ->\n     tcx.fn_sig(trait_item_def_id).skip_binder().output().walk().any(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Projection(data) = ty.kind()\n-            && tcx.def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder\n+            && tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder\n         {\n             true\n         } else {"}, {"sha": "938eb664da9516a58c92c9329ca730095d35216b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -2599,7 +2599,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             substs.len(),\n             \"wrong number of generic parameters for {item_def_id:?}: {substs:?}\",\n         );\n-        self.mk_ty(Projection(ProjectionTy { item_def_id, substs }))\n+        self.mk_ty(Projection(ProjectionTy { def_id: item_def_id, substs }))\n     }\n \n     #[inline]"}, {"sha": "32bc53203c1c3b4ddf72654f282eab2372e19188", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -443,7 +443,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         diag.note(\"an associated type was expected, but a different one was found\");\n                     }\n                     (ty::Param(p), ty::Projection(proj)) | (ty::Projection(proj), ty::Param(p))\n-                        if self.def_kind(proj.item_def_id) != DefKind::ImplTraitPlaceholder =>\n+                        if self.def_kind(proj.def_id) != DefKind::ImplTraitPlaceholder =>\n                     {\n                         let generics = self.generics_of(body_owner_def_id);\n                         let p_span = self.def_span(generics.type_param(p, self).def_id);\n@@ -466,7 +466,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                             let (trait_ref, assoc_substs) = proj.trait_ref_and_own_substs(self);\n                             let path =\n                                 self.def_path_str_with_substs(trait_ref.def_id, trait_ref.substs);\n-                            let item_name = self.item_name(proj.item_def_id);\n+                            let item_name = self.item_name(proj.def_id);\n                             let item_args = self.format_generic_args(assoc_substs);\n \n                             let path = if path.ends_with('>') {\n@@ -553,7 +553,7 @@ impl<T> Trait<T> for X {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n                     }\n-                    (ty::Projection(proj_ty), _) if self.def_kind(proj_ty.item_def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (ty::Projection(proj_ty), _) if self.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n                         self.expected_projection(\n                             diag,\n                             proj_ty,\n@@ -562,7 +562,7 @@ impl<T> Trait<T> for X {\n                             cause.code(),\n                         );\n                     }\n-                    (_, ty::Projection(proj_ty)) if self.def_kind(proj_ty.item_def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (_, ty::Projection(proj_ty)) if self.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n                         let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,\n@@ -627,7 +627,7 @@ impl<T> Trait<T> for X {\n         proj_ty: &ty::ProjectionTy<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> bool {\n-        let assoc = self.associated_item(proj_ty.item_def_id);\n+        let assoc = self.associated_item(proj_ty.def_id);\n         let (trait_ref, assoc_substs) = proj_ty.trait_ref_and_own_substs(self);\n         if let Some(item) = self.hir().get_if_local(body_owner_def_id) {\n             if let Some(hir_generics) = item.generics() {\n@@ -703,7 +703,7 @@ impl<T> Trait<T> for X {\n         );\n         let impl_comparison =\n             matches!(cause_code, ObligationCauseCode::CompareImplItemObligation { .. });\n-        let assoc = self.associated_item(proj_ty.item_def_id);\n+        let assoc = self.associated_item(proj_ty.def_id);\n         if !callable_scope || impl_comparison {\n             // We do not want to suggest calling functions when the reason of the\n             // type error is a comparison of an `impl` with its `trait` or when the\n@@ -716,7 +716,7 @@ impl<T> Trait<T> for X {\n                 diag,\n                 assoc.container_id(self),\n                 current_method_ident,\n-                proj_ty.item_def_id,\n+                proj_ty.def_id,\n                 values.expected,\n             );\n             // Possibly suggest constraining the associated type to conform to the\n@@ -778,7 +778,7 @@ fn foo(&self) -> Self::T { String::new() }\n         proj_ty: &ty::ProjectionTy<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> bool {\n-        let assoc = self.associated_item(proj_ty.item_def_id);\n+        let assoc = self.associated_item(proj_ty.def_id);\n         if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *proj_ty.self_ty().kind() {\n             let opaque_local_def_id = def_id.as_local();\n             let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n@@ -828,7 +828,7 @@ fn foo(&self) -> Self::T { String::new() }\n             .filter_map(|(_, item)| {\n                 let method = self.fn_sig(item.def_id);\n                 match *method.output().skip_binder().kind() {\n-                    ty::Projection(ty::ProjectionTy { item_def_id, .. })\n+                    ty::Projection(ty::ProjectionTy { def_id: item_def_id, .. })\n                         if item_def_id == proj_ty_item_def_id =>\n                     {\n                         Some(("}, {"sha": "5e173df2eb6f8bf3523c1fa796c74e0f56417af4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -1046,7 +1046,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n     /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.\n     pub fn projection_def_id(&self) -> DefId {\n         // Ok to skip binder since trait `DefId` does not care about regions.\n-        self.skip_binder().projection_ty.item_def_id\n+        self.skip_binder().projection_ty.def_id\n     }\n }\n "}, {"sha": "37735fbb1651aa3e980dd48d58e44c339c8f4309", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -720,9 +720,9 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Projection(ref data) => {\n                 if !(self.should_print_verbose() || NO_QUERIES.with(|q| q.get()))\n-                    && self.tcx().def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder\n+                    && self.tcx().def_kind(data.def_id) == DefKind::ImplTraitPlaceholder\n                 {\n-                    return self.pretty_print_opaque_impl_type(data.item_def_id, data.substs);\n+                    return self.pretty_print_opaque_impl_type(data.def_id, data.substs);\n                 } else {\n                     p!(print(data))\n                 }\n@@ -1022,7 +1022,7 @@ pub trait PrettyPrinter<'tcx>:\n                         // unless we can find out what generator return type it comes from.\n                         let term = if let Some(ty) = term.skip_binder().ty()\n                             && let ty::Projection(proj) = ty.kind()\n-                            && let Some(assoc) = tcx.opt_associated_item(proj.item_def_id)\n+                            && let Some(assoc) = tcx.opt_associated_item(proj.def_id)\n                             && assoc.trait_container(tcx) == tcx.lang_items().gen_trait()\n                             && assoc.name == rustc_span::sym::Return\n                         {\n@@ -2655,7 +2655,7 @@ define_print_and_forward_display! {\n     }\n \n     ty::ExistentialProjection<'tcx> {\n-        let name = cx.tcx().associated_item(self.item_def_id).name;\n+        let name = cx.tcx().associated_item(self.def_id).name;\n         p!(write(\"{} = \", name), print(self.term))\n     }\n \n@@ -2743,7 +2743,7 @@ define_print_and_forward_display! {\n     }\n \n     ty::ProjectionTy<'tcx> {\n-        p!(print_def_path(self.item_def_id, self.substs));\n+        p!(print_def_path(self.def_id, self.substs));\n     }\n \n     ty::ClosureKind {"}, {"sha": "0c5e6e1564947432fbecc073da832833722ca2fa", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -276,15 +276,11 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {\n         a: ty::ProjectionTy<'tcx>,\n         b: ty::ProjectionTy<'tcx>,\n     ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {\n-        if a.item_def_id != b.item_def_id {\n-            Err(TypeError::ProjectionMismatched(expected_found(\n-                relation,\n-                a.item_def_id,\n-                b.item_def_id,\n-            )))\n+        if a.def_id != b.def_id {\n+            Err(TypeError::ProjectionMismatched(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let substs = relation.relate(a.substs, b.substs)?;\n-            Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })\n+            Ok(ty::ProjectionTy { def_id: a.def_id, substs: &substs })\n         }\n     }\n }\n@@ -295,12 +291,8 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {\n         a: ty::ExistentialProjection<'tcx>,\n         b: ty::ExistentialProjection<'tcx>,\n     ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {\n-        if a.item_def_id != b.item_def_id {\n-            Err(TypeError::ProjectionMismatched(expected_found(\n-                relation,\n-                a.item_def_id,\n-                b.item_def_id,\n-            )))\n+        if a.def_id != b.def_id {\n+            Err(TypeError::ProjectionMismatched(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let term = relation.relate_with_variance(\n                 ty::Invariant,\n@@ -314,7 +306,7 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {\n                 a.substs,\n                 b.substs,\n             )?;\n-            Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })\n+            Ok(ty::ExistentialProjection { def_id: a.def_id, substs, term })\n         }\n     }\n }\n@@ -561,7 +553,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         // these two are already handled downstream in case of lazy normalization\n         (&ty::Projection(a_data), &ty::Projection(b_data)) => {\n             let projection_ty = relation.relate(a_data, b_data)?;\n-            Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))\n+            Ok(tcx.mk_projection(projection_ty.def_id, projection_ty.substs))\n         }\n \n         ("}, {"sha": "6d63c5ee9389eb5101dc49a177e239c3214f6126", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -693,7 +693,7 @@ impl<'tcx> ExistentialPredicate<'tcx> {\n         match (*self, *other) {\n             (Trait(_), Trait(_)) => Ordering::Equal,\n             (Projection(ref a), Projection(ref b)) => {\n-                tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))\n+                tcx.def_path_hash(a.def_id).cmp(&tcx.def_path_hash(b.def_id))\n             }\n             (AutoTrait(ref a), AutoTrait(ref b)) => {\n                 tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))\n@@ -1152,15 +1152,15 @@ pub struct ProjectionTy<'tcx> {\n     /// Note that this is not the `DefId` of the `TraitRef` containing this\n     /// associated type, which is in `tcx.associated_item(item_def_id).container`,\n     /// aka. `tcx.parent(item_def_id).unwrap()`.\n-    pub item_def_id: DefId,\n+    pub def_id: DefId,\n }\n \n impl<'tcx> ProjectionTy<'tcx> {\n     pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {\n-        match tcx.def_kind(self.item_def_id) {\n-            DefKind::AssocTy | DefKind::AssocConst => tcx.parent(self.item_def_id),\n+        match tcx.def_kind(self.def_id) {\n+            DefKind::AssocTy | DefKind::AssocConst => tcx.parent(self.def_id),\n             DefKind::ImplTraitPlaceholder => {\n-                tcx.parent(tcx.impl_trait_in_trait_parent(self.item_def_id))\n+                tcx.parent(tcx.impl_trait_in_trait_parent(self.def_id))\n             }\n             kind => bug!(\"unexpected DefKind in ProjectionTy: {kind:?}\"),\n         }\n@@ -1173,7 +1173,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {\n-        let def_id = tcx.parent(self.item_def_id);\n+        let def_id = tcx.parent(self.def_id);\n         assert_eq!(tcx.def_kind(def_id), DefKind::Trait);\n         let trait_generics = tcx.generics_of(def_id);\n         (\n@@ -1415,7 +1415,7 @@ impl From<BoundVar> for BoundTy {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct ExistentialProjection<'tcx> {\n-    pub item_def_id: DefId,\n+    pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n     pub term: Term<'tcx>,\n }\n@@ -1428,7 +1428,7 @@ impl<'tcx> ExistentialProjection<'tcx> {\n     /// then this function would return an `exists T. T: Iterator` existential trait\n     /// reference.\n     pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {\n-        let def_id = tcx.parent(self.item_def_id);\n+        let def_id = tcx.parent(self.def_id);\n         let subst_count = tcx.generics_of(def_id).count() - 1;\n         let substs = tcx.intern_substs(&self.substs[..subst_count]);\n         ty::ExistentialTraitRef { def_id, substs }\n@@ -1444,7 +1444,7 @@ impl<'tcx> ExistentialProjection<'tcx> {\n \n         ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {\n-                item_def_id: self.item_def_id,\n+                def_id: self.def_id,\n                 substs: tcx.mk_substs_trait(self_ty, self.substs),\n             },\n             term: self.term,\n@@ -1459,7 +1459,7 @@ impl<'tcx> ExistentialProjection<'tcx> {\n         projection_predicate.projection_ty.substs.type_at(0);\n \n         Self {\n-            item_def_id: projection_predicate.projection_ty.item_def_id,\n+            def_id: projection_predicate.projection_ty.def_id,\n             substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),\n             term: projection_predicate.term,\n         }\n@@ -1476,7 +1476,7 @@ impl<'tcx> PolyExistentialProjection<'tcx> {\n     }\n \n     pub fn item_def_id(&self) -> DefId {\n-        self.skip_binder().item_def_id\n+        self.skip_binder().def_id\n     }\n }\n "}, {"sha": "d077b2852ba9d272d96e93f8daa6b767a8ad0579", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -123,13 +123,13 @@ where\n         projection: ty::ProjectionTy<'tcx>,\n     ) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n-        let (trait_ref, assoc_substs) = if tcx.def_kind(projection.item_def_id)\n+        let (trait_ref, assoc_substs) = if tcx.def_kind(projection.def_id)\n             != DefKind::ImplTraitPlaceholder\n         {\n             projection.trait_ref_and_own_substs(tcx)\n         } else {\n             // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n-            let def_id = tcx.impl_trait_in_trait_parent(projection.item_def_id);\n+            let def_id = tcx.impl_trait_in_trait_parent(projection.def_id);\n             let trait_generics = tcx.generics_of(def_id);\n             (\n                 ty::TraitRef { def_id, substs: projection.substs.truncate_to(tcx, trait_generics) },"}, {"sha": "e957829054a4c1c6ab8866e4df529ab868eb3edf", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -217,7 +217,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n             | ty::Opaque(ty::OpaqueTy { def_id, substs })\n-            | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n+            | ty::Projection(ty::ProjectionTy { def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n "}, {"sha": "dddc7b7513a5b15a4c4b54bc6f7a1f93786ddf8e", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -240,7 +240,7 @@ fn encode_predicate<'tcx>(\n             s.push_str(&encode_substs(tcx, trait_ref.substs, dict, options));\n         }\n         ty::ExistentialPredicate::Projection(projection) => {\n-            let name = encode_ty_name(tcx, projection.item_def_id);\n+            let name = encode_ty_name(tcx, projection.def_id);\n             let _ = write!(s, \"u{}{}\", name.len(), &name);\n             s.push_str(&encode_substs(tcx, projection.substs, dict, options));\n             match projection.term.unpack() {"}, {"sha": "c24b83060db403ecf6e0c7a3ad19278d6be6aa6c", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -440,7 +440,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n             | ty::Opaque(ty::OpaqueTy { def_id, substs })\n-            | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n+            | ty::Projection(ty::ProjectionTy { def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;\n@@ -544,7 +544,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                         cx = cx.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n                     }\n                     ty::ExistentialPredicate::Projection(projection) => {\n-                        let name = cx.tcx.associated_item(projection.item_def_id).name;\n+                        let name = cx.tcx.associated_item(projection.def_id).name;\n                         cx.push(\"p\");\n                         cx.push_ident(name.as_str());\n                         cx = match projection.term.unpack() {"}, {"sha": "82477ec6c440cb9be09844baba5bfc7fae214f0b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -1634,8 +1634,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let normalized_ty = ocx.normalize(\n                     &obligation.cause,\n                     obligation.param_env,\n-                    self.tcx\n-                        .mk_projection(data.projection_ty.item_def_id, data.projection_ty.substs),\n+                    self.tcx.mk_projection(data.projection_ty.def_id, data.projection_ty.substs),\n                 );\n \n                 debug!(?obligation.cause, ?obligation.param_env);\n@@ -1686,10 +1685,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let secondary_span = match predicate.kind().skip_binder() {\n                 ty::PredicateKind::Clause(ty::Clause::Projection(proj)) => self\n                     .tcx\n-                    .opt_associated_item(proj.projection_ty.item_def_id)\n+                    .opt_associated_item(proj.projection_ty.def_id)\n                     .and_then(|trait_assoc_item| {\n                         self.tcx\n-                            .trait_of_item(proj.projection_ty.item_def_id)\n+                            .trait_of_item(proj.projection_ty.def_id)\n                             .map(|id| (trait_assoc_item, id))\n                     })\n                     .and_then(|(trait_assoc_item, id)| {\n@@ -1745,7 +1744,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let trait_def_id = pred.projection_ty.trait_def_id(self.tcx);\n         let self_ty = pred.projection_ty.self_ty();\n \n-        if Some(pred.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output() {\n+        if Some(pred.projection_ty.def_id) == self.tcx.lang_items().fn_once_output() {\n             Some(format!(\n                 \"expected `{self_ty}` to be a {fn_kind} that returns `{expected_ty}`, but it returns `{normalized_ty}`\",\n                 fn_kind = self_ty.prefix_string(self.tcx)"}, {"sha": "c685a652b3ab9d4b24c1d276db168a890861a5da", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -858,7 +858,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                 self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                     if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n-                    && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()\n                     // args tuple will always be substs[1]\n                     && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n                     {\n@@ -875,7 +875,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ty::Dynamic(data, _, ty::Dyn) => {\n                 data.iter().find_map(|pred| {\n                     if let ty::ExistentialPredicate::Projection(proj) = pred.skip_binder()\n-                    && Some(proj.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    && Some(proj.def_id) == self.tcx.lang_items().fn_once_output()\n                     // for existential projection, substs are shifted over by 1\n                     && let ty::Tuple(args) = proj.substs.type_at(0).kind()\n                     {\n@@ -892,7 +892,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ty::Param(_) => {\n                 obligation.param_env.caller_bounds().iter().find_map(|pred| {\n                     if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n-                    && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()\n                     && proj.projection_ty.self_ty() == found\n                     // args tuple will always be substs[1]\n                     && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n@@ -3248,7 +3248,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // This corresponds to `<ExprTy as Iterator>::Item = _`.\n                 let trait_ref = ty::Binder::dummy(ty::PredicateKind::Clause(\n                     ty::Clause::Projection(ty::ProjectionPredicate {\n-                        projection_ty: ty::ProjectionTy { substs, item_def_id: proj.item_def_id },\n+                        projection_ty: ty::ProjectionTy { substs, def_id: proj.def_id },\n                         term: ty_var.into(),\n                     }),\n                 ));\n@@ -3263,7 +3263,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if ocx.select_where_possible().is_empty() {\n                     // `ty_var` now holds the type that `Item` is for `ExprTy`.\n                     let ty_var = self.resolve_vars_if_possible(ty_var);\n-                    assocs_in_this_method.push(Some((span, (proj.item_def_id, ty_var))));\n+                    assocs_in_this_method.push(Some((span, (proj.def_id, ty_var))));\n                 } else {\n                     // `<ExprTy as Iterator>` didn't select, so likely we've\n                     // reached the end of the iterator chain, like the originating"}, {"sha": "4cfcd74f33776634f812349436c23c19fe7d27ce", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -589,7 +589,7 @@ fn object_ty_for_trait<'tcx>(\n             let pred = obligation.predicate.to_opt_poly_projection_pred()?;\n             Some(pred.map_bound(|p| {\n                 ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n-                    item_def_id: p.projection_ty.item_def_id,\n+                    def_id: p.projection_ty.def_id,\n                     substs: p.projection_ty.substs,\n                     term: p.term,\n                 })\n@@ -795,7 +795,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n                     }\n                 }\n                 ty::Projection(ref data)\n-                    if self.tcx.def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+                    if self.tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder =>\n                 {\n                     // We'll deny these later in their own pass\n                     ControlFlow::CONTINUE\n@@ -862,9 +862,9 @@ pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     ty.skip_binder().walk().find_map(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Projection(proj) = ty.kind()\n-            && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+            && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n         {\n-            Some(MethodViolationCode::ReferencesImplTraitInTrait(tcx.def_span(proj.item_def_id)))\n+            Some(MethodViolationCode::ReferencesImplTraitInTrait(tcx.def_span(proj.def_id)))\n         } else {\n             None\n         }"}, {"sha": "a2f813dc88e43504ee774a4c7600472fa5fa8273", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -1189,10 +1189,9 @@ fn normalize_to_error<'a, 'tcx>(\n         predicate: trait_ref.without_const().to_predicate(selcx.tcx()),\n     };\n     let tcx = selcx.infcx.tcx;\n-    let def_id = projection_ty.item_def_id;\n     let new_value = selcx.infcx.next_ty_var(TypeVariableOrigin {\n         kind: TypeVariableOriginKind::NormalizeProjectionType,\n-        span: tcx.def_span(def_id),\n+        span: tcx.def_span(projection_ty.def_id),\n     });\n     Normalized { value: new_value, obligations: vec![trait_obligation] }\n }\n@@ -1270,7 +1269,7 @@ fn project<'cx, 'tcx>(\n             // need to investigate whether or not this is fine.\n             selcx\n                 .tcx()\n-                .mk_projection(obligation.predicate.item_def_id, obligation.predicate.substs)\n+                .mk_projection(obligation.predicate.def_id, obligation.predicate.substs)\n                 .into(),\n         )),\n         // Error occurred while trying to processing impls.\n@@ -1290,13 +1289,12 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n     candidate_set: &mut ProjectionCandidateSet<'tcx>,\n ) {\n     let tcx = selcx.tcx();\n-    if tcx.def_kind(obligation.predicate.item_def_id) == DefKind::ImplTraitPlaceholder {\n-        let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.item_def_id);\n+    if tcx.def_kind(obligation.predicate.def_id) == DefKind::ImplTraitPlaceholder {\n+        let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n         // If we are trying to project an RPITIT with trait's default `Self` parameter,\n         // then we must be within a default trait body.\n         if obligation.predicate.self_ty()\n-            == ty::InternalSubsts::identity_for_item(tcx, obligation.predicate.item_def_id)\n-                .type_at(0)\n+            == ty::InternalSubsts::identity_for_item(tcx, obligation.predicate.def_id).type_at(0)\n             && tcx.associated_item(trait_fn_def_id).defaultness(tcx).has_value()\n         {\n             candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n@@ -1377,7 +1375,7 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        ty::Projection(ref data) => tcx.bound_item_bounds(data.item_def_id).subst(tcx, data.substs),\n+        ty::Projection(ref data) => tcx.bound_item_bounds(data.def_id).subst(tcx, data.substs),\n         ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n             tcx.bound_item_bounds(def_id).subst(tcx, substs)\n         }\n@@ -1432,7 +1430,7 @@ fn assemble_candidates_from_object_ty<'cx, 'tcx>(\n     };\n     let env_predicates = data\n         .projection_bounds()\n-        .filter(|bound| bound.item_def_id() == obligation.predicate.item_def_id)\n+        .filter(|bound| bound.item_def_id() == obligation.predicate.def_id)\n         .map(|p| p.with_self_ty(tcx, object_ty).to_predicate(tcx));\n \n     assemble_candidates_from_predicates(\n@@ -1464,7 +1462,7 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n             predicate.kind().skip_binder()\n         {\n             let data = bound_predicate.rebind(data);\n-            if data.projection_def_id() != obligation.predicate.item_def_id {\n+            if data.projection_def_id() != obligation.predicate.def_id {\n                 continue;\n             }\n \n@@ -1505,7 +1503,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n     candidate_set: &mut ProjectionCandidateSet<'tcx>,\n ) {\n     // Can't assemble candidate from impl for RPITIT\n-    if selcx.tcx().def_kind(obligation.predicate.item_def_id) == DefKind::ImplTraitPlaceholder {\n+    if selcx.tcx().def_kind(obligation.predicate.def_id) == DefKind::ImplTraitPlaceholder {\n         return;\n     }\n \n@@ -1557,7 +1555,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // NOTE: This should be kept in sync with the similar code in\n                 // `rustc_ty_utils::instance::resolve_associated_item()`.\n                 let node_item =\n-                    assoc_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)\n+                    assoc_def(selcx, impl_data.impl_def_id, obligation.predicate.def_id)\n                         .map_err(|ErrorGuaranteed { .. }| ())?;\n \n                 if node_item.is_final() {\n@@ -1790,7 +1788,7 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Trait) => Progress {\n             term: selcx\n                 .tcx()\n-                .mk_opaque(obligation.predicate.item_def_id, obligation.predicate.substs)\n+                .mk_opaque(obligation.predicate.def_id, obligation.predicate.substs)\n                 .into(),\n             obligations: vec![],\n         },\n@@ -1862,7 +1860,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n         gen_sig,\n     )\n     .map_bound(|(trait_ref, yield_ty, return_ty)| {\n-        let name = tcx.associated_item(obligation.predicate.item_def_id).name;\n+        let name = tcx.associated_item(obligation.predicate.def_id).name;\n         let ty = if name == sym::Return {\n             return_ty\n         } else if name == sym::Yield {\n@@ -1874,7 +1872,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n         ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {\n                 substs: trait_ref.substs,\n-                item_def_id: obligation.predicate.item_def_id,\n+                def_id: obligation.predicate.def_id,\n             },\n             term: ty.into(),\n         }\n@@ -1911,12 +1909,12 @@ fn confirm_future_candidate<'cx, 'tcx>(\n         gen_sig,\n     )\n     .map_bound(|(trait_ref, return_ty)| {\n-        debug_assert_eq!(tcx.associated_item(obligation.predicate.item_def_id).name, sym::Output);\n+        debug_assert_eq!(tcx.associated_item(obligation.predicate.def_id).name, sym::Output);\n \n         ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {\n                 substs: trait_ref.substs,\n-                item_def_id: obligation.predicate.item_def_id,\n+                def_id: obligation.predicate.def_id,\n             },\n             term: return_ty.into(),\n         }\n@@ -1936,7 +1934,7 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n     let self_ty = obligation.predicate.self_ty();\n     let substs = tcx.mk_substs([self_ty.into()].iter());\n     let lang_items = tcx.lang_items();\n-    let item_def_id = obligation.predicate.item_def_id;\n+    let item_def_id = obligation.predicate.def_id;\n     let trait_def_id = tcx.trait_of_item(item_def_id).unwrap();\n     let (term, obligations) = if lang_items.discriminant_kind_trait() == Some(trait_def_id) {\n         let discriminant_def_id = tcx.require_lang_item(LangItem::Discriminant, None);\n@@ -1970,8 +1968,10 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n         bug!(\"unexpected builtin trait with associated type: {:?}\", obligation.predicate);\n     };\n \n-    let predicate =\n-        ty::ProjectionPredicate { projection_ty: ty::ProjectionTy { substs, item_def_id }, term };\n+    let predicate = ty::ProjectionPredicate {\n+        projection_ty: ty::ProjectionTy { substs, def_id: item_def_id },\n+        term,\n+    };\n \n     confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)\n         .with_addl_obligations(obligations)\n@@ -2040,10 +2040,7 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n         flag,\n     )\n     .map_bound(|(trait_ref, ret_type)| ty::ProjectionPredicate {\n-        projection_ty: ty::ProjectionTy {\n-            substs: trait_ref.substs,\n-            item_def_id: fn_once_output_def_id,\n-        },\n+        projection_ty: ty::ProjectionTy { substs: trait_ref.substs, def_id: fn_once_output_def_id },\n         term: ret_type.into(),\n     });\n \n@@ -2124,7 +2121,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     let tcx = selcx.tcx();\n \n     let ImplSourceUserDefinedData { impl_def_id, substs, mut nested } = impl_impl_source;\n-    let assoc_item_id = obligation.predicate.item_def_id;\n+    let assoc_item_id = obligation.predicate.def_id;\n     let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n \n     let param_env = obligation.param_env;\n@@ -2224,7 +2221,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     let tcx = selcx.tcx();\n     let mut obligations = data.nested;\n \n-    let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.item_def_id);\n+    let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n     let Ok(leaf_def) = assoc_def(selcx, data.impl_def_id, trait_fn_def_id) else {\n         return Progress { term: tcx.ty_error().into(), obligations };\n     };\n@@ -2235,9 +2232,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     // Use the default `impl Trait` for the trait, e.g., for a default trait body\n     if leaf_def.item.container == ty::AssocItemContainer::TraitContainer {\n         return Progress {\n-            term: tcx\n-                .mk_opaque(obligation.predicate.item_def_id, obligation.predicate.substs)\n-                .into(),\n+            term: tcx.mk_opaque(obligation.predicate.def_id, obligation.predicate.substs).into(),\n             obligations,\n         };\n     }\n@@ -2304,7 +2299,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         obligation.recursion_depth + 1,\n         tcx.bound_trait_impl_trait_tys(impl_fn_def_id)\n             .map_bound(|tys| {\n-                tys.map_or_else(|_| tcx.ty_error(), |tys| tys[&obligation.predicate.item_def_id])\n+                tys.map_or_else(|_| tcx.ty_error(), |tys| tys[&obligation.predicate.def_id])\n             })\n             .subst(tcx, impl_fn_substs),\n         &mut obligations,\n@@ -2322,7 +2317,7 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n ) {\n     let tcx = selcx.tcx();\n     let own = tcx\n-        .predicates_of(obligation.predicate.item_def_id)\n+        .predicates_of(obligation.predicate.def_id)\n         .instantiate_own(tcx, obligation.predicate.substs);\n     for (predicate, span) in std::iter::zip(own.predicates, own.spans) {\n         let normalized = normalize_with_depth_to(\n@@ -2345,13 +2340,13 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n             ObligationCause::new(\n                 obligation.cause.span,\n                 obligation.cause.body_id,\n-                super::ItemObligation(obligation.predicate.item_def_id),\n+                super::ItemObligation(obligation.predicate.def_id),\n             )\n         } else {\n             ObligationCause::new(\n                 obligation.cause.span,\n                 obligation.cause.body_id,\n-                super::BindingObligation(obligation.predicate.item_def_id, span),\n+                super::BindingObligation(obligation.predicate.def_id, span),\n             )\n         };\n         nested.push(Obligation::with_depth("}, {"sha": "509a4c01727645b67f25a85c70c144277c1022e9", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -537,7 +537,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self,\n                 param_env,\n                 ty::ProjectionTy {\n-                    item_def_id: tcx.lang_items().deref_target()?,\n+                    def_id: tcx.lang_items().deref_target()?,\n                     substs: trait_ref.substs,\n                 },\n                 cause.clone(),"}, {"sha": "cfc77a1a1d520cdc6a84f388be5008b2c3f4395e", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -155,7 +155,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n-            ty::Projection(proj) => (proj.item_def_id, proj.substs),\n+            ty::Projection(proj) => (proj.def_id, proj.substs),\n             ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };"}, {"sha": "e279d6bfdbc28c796b76183c2889d89cae6cc999", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -1595,7 +1595,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n         let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n-            ty::Projection(ref data) => (data.item_def_id, data.substs),\n+            ty::Projection(ref data) => (data.def_id, data.substs),\n             ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n             _ => {\n                 span_bug!(\n@@ -1745,7 +1745,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             });\n \n         if is_match {\n-            let generics = self.tcx().generics_of(obligation.predicate.item_def_id);\n+            let generics = self.tcx().generics_of(obligation.predicate.def_id);\n             // FIXME(generic-associated-types): Addresses aggressive inference in #92917.\n             // If this type is a GAT, and of the GAT substs resolve to something new,\n             // that means that we must have newly inferred something about the GAT."}, {"sha": "e1a1f84841514c168360c2010e95eaf5293e6bef", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -236,7 +236,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n             // `traits-assoc-type-in-supertrait-bad.rs`.\n             if let Some(ty::Projection(projection_ty)) = proj.term.ty().map(|ty| ty.kind())\n                 && let Some(&impl_item_id) =\n-                    tcx.impl_item_implementor_ids(impl_def_id).get(&projection_ty.item_def_id)\n+                    tcx.impl_item_implementor_ids(impl_def_id).get(&projection_ty.def_id)\n                 && let Some(impl_item_span) = items\n                     .iter()\n                     .find(|item| item.id.owner_id.to_def_id() == impl_item_id)\n@@ -249,9 +249,9 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n             // An associated item obligation born out of the `trait` failed to be met. An example\n             // can be seen in `ui/associated-types/point-at-type-on-obligation-failure-2.rs`.\n             debug!(\"extended_cause_with_original_assoc_item_obligation trait proj {:?}\", pred);\n-            if let ty::Projection(ty::ProjectionTy { item_def_id, .. }) = *pred.self_ty().kind()\n+            if let ty::Projection(ty::ProjectionTy { def_id, .. }) = *pred.self_ty().kind()\n                 && let Some(&impl_item_id) =\n-                    tcx.impl_item_implementor_ids(impl_def_id).get(&item_def_id)\n+                    tcx.impl_item_implementor_ids(impl_def_id).get(&def_id)\n                 && let Some(impl_item_span) = items\n                     .iter()\n                     .find(|item| item.id.owner_id.to_def_id() == impl_item_id)\n@@ -392,7 +392,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         //     `i32: Copy`\n         // ]\n         // Projection types do not require const predicates.\n-        let obligations = self.nominal_obligations_without_const(data.item_def_id, data.substs);\n+        let obligations = self.nominal_obligations_without_const(data.def_id, data.substs);\n         self.out.extend(obligations);\n \n         let tcx = self.tcx();"}, {"sha": "96e895ff2a6e77713c7bd55855cfa69e98e28d19", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> LowerInto<'tcx, SubstsRef<'tcx>> for &chalk_ir::Substitution<RustInte\n impl<'tcx> LowerInto<'tcx, chalk_ir::AliasTy<RustInterner<'tcx>>> for ty::ProjectionTy<'tcx> {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::AliasTy<RustInterner<'tcx>> {\n         chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n-            associated_ty_id: chalk_ir::AssocTypeId(self.item_def_id),\n+            associated_ty_id: chalk_ir::AssocTypeId(self.def_id),\n             substitution: self.substs.lower_into(interner),\n         })\n     }\n@@ -448,7 +448,7 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n             }),\n             TyKind::AssociatedType(assoc_ty, substitution) => ty::Projection(ty::ProjectionTy {\n                 substs: substitution.lower_into(interner),\n-                item_def_id: assoc_ty.0,\n+                def_id: assoc_ty.0,\n             }),\n             TyKind::Foreign(def_id) => ty::Foreign(def_id.0),\n             TyKind::Error => return interner.tcx.ty_error(),\n@@ -458,7 +458,7 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n             }),\n             TyKind::Alias(alias_ty) => match alias_ty {\n                 chalk_ir::AliasTy::Projection(projection) => ty::Projection(ty::ProjectionTy {\n-                    item_def_id: projection.associated_ty_id.0,\n+                    def_id: projection.associated_ty_id.0,\n                     substs: projection.substitution.lower_into(interner),\n                 }),\n                 chalk_ir::AliasTy::Opaque(opaque) => ty::Opaque(ty::OpaqueTy {\n@@ -690,7 +690,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n                     binders.clone(),\n                     chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq {\n                         alias: chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n-                            associated_ty_id: chalk_ir::AssocTypeId(predicate.item_def_id),\n+                            associated_ty_id: chalk_ir::AssocTypeId(predicate.def_id),\n                             substitution: interner\n                                 .tcx\n                                 .mk_substs_trait(self_ty, predicate.substs)\n@@ -846,7 +846,7 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>\n         let (trait_ref, own_substs) = self.projection_ty.trait_ref_and_own_substs(interner.tcx);\n         chalk_solve::rust_ir::AliasEqBound {\n             trait_bound: trait_ref.lower_into(interner),\n-            associated_ty_id: chalk_ir::AssocTypeId(self.projection_ty.item_def_id),\n+            associated_ty_id: chalk_ir::AssocTypeId(self.projection_ty.def_id),\n             parameters: own_substs.iter().map(|arg| arg.lower_into(interner)).collect(),\n             value: self.term.ty().unwrap().lower_into(interner),\n         }"}, {"sha": "8303d8de08716104a5bc23d38dfbe9e2a72a7441", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -170,8 +170,7 @@ pub enum TyKind<I: Interner> {\n     /// A tuple type. For example, `(i32, bool)`.\n     Tuple(I::ListTy),\n \n-    /// The projection of an associated type. For example,\n-    /// `<T as Trait<..>>::N`.\n+    /// A projection or opaque type. Both of these types\n     Projection(I::ProjectionTy),\n \n     /// Opaque (`impl Trait`) type found in a return type."}, {"sha": "d128b5f79acbc33711a42d7621c37a8838b33f3f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -418,10 +418,10 @@ fn clean_projection<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    if cx.tcx.def_kind(ty.skip_binder().item_def_id) == DefKind::ImplTraitPlaceholder {\n+    if cx.tcx.def_kind(ty.skip_binder().def_id) == DefKind::ImplTraitPlaceholder {\n         let bounds = cx\n             .tcx\n-            .explicit_item_bounds(ty.skip_binder().item_def_id)\n+            .explicit_item_bounds(ty.skip_binder().def_id)\n             .iter()\n             .map(|(bound, _)| EarlyBinder(*bound).subst(cx.tcx, ty.skip_binder().substs))\n             .collect::<Vec<_>>();\n@@ -456,8 +456,8 @@ fn projection_to_path_segment<'tcx>(\n     ty: ty::Binder<'tcx, ty::ProjectionTy<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n ) -> PathSegment {\n-    let item = cx.tcx.associated_item(ty.skip_binder().item_def_id);\n-    let generics = cx.tcx.generics_of(ty.skip_binder().item_def_id);\n+    let item = cx.tcx.associated_item(ty.skip_binder().def_id);\n+    let generics = cx.tcx.generics_of(ty.skip_binder().def_id);\n     PathSegment {\n         name: item.name,\n         args: GenericArgs::AngleBracketed {"}, {"sha": "ad5a1b2beb70c854c5eed46bdaf386523e3578ad", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -1330,7 +1330,7 @@ fn replace_types<'tcx>(\n                     && let Some(term_ty) = projection_predicate.term.ty()\n                     && let ty::Param(term_param_ty) = term_ty.kind()\n                 {\n-                    let item_def_id = projection_predicate.projection_ty.item_def_id;\n+                    let item_def_id = projection_predicate.projection_ty.def_id;\n                     let assoc_item = cx.tcx.associated_item(item_def_id);\n                     let projection = cx.tcx\n                         .mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(new_ty, []));"}, {"sha": "982f99c2716399366dd5b7db65e451d5af5e8bc4", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -493,7 +493,7 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n                 .filter_by_name_unhygienic(is_empty)\n                 .any(|item| is_is_empty(cx, item))\n         }),\n-        ty::Projection(ref proj) => has_is_empty_impl(cx, proj.item_def_id),\n+        ty::Projection(ref proj) => has_is_empty_impl(cx, proj.def_id),\n         ty::Adt(id, _) => has_is_empty_impl(cx, id.did()),\n         ty::Array(..) | ty::Slice(..) | ty::Str => true,\n         _ => false,"}, {"sha": "f4d3ef3b742509f40debe7616bb272b7f295f274", "filename": "src/tools/clippy/clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -151,7 +151,7 @@ fn iterates_same_ty<'tcx>(cx: &LateContext<'tcx>, iter_ty: Ty<'tcx>, collect_ty:\n         && let Some(into_iter_item_proj) = make_projection(cx.tcx, into_iter_trait, item, [collect_ty])\n         && let Ok(into_iter_item_ty) = cx.tcx.try_normalize_erasing_regions(\n             cx.param_env,\n-            cx.tcx.mk_projection(into_iter_item_proj.item_def_id, into_iter_item_proj.substs)\n+            cx.tcx.mk_projection(into_iter_item_proj.def_id, into_iter_item_proj.substs)\n         )\n     {\n         iter_item_ty == into_iter_item_ty"}, {"sha": "11e41d1958ce6431b7d8def6c7590733dd3282d3", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6afb850c29f5604f685bf4d4fea85a2deb7197/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=5c6afb850c29f5604f685bf4d4fea85a2deb7197", "patch": "@@ -685,7 +685,7 @@ fn sig_from_bounds<'tcx>(\n                 inputs = Some(i);\n             },\n             PredicateKind::Clause(ty::Clause::Projection(p))\n-                if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output()\n+                if Some(p.projection_ty.def_id) == lang_items.fn_once_output()\n                     && p.projection_ty.self_ty() == ty =>\n             {\n                 if output.is_some() {\n@@ -708,7 +708,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n \n     for (pred, _) in cx\n         .tcx\n-        .bound_explicit_item_bounds(ty.item_def_id)\n+        .bound_explicit_item_bounds(ty.def_id)\n         .subst_iter_copied(cx.tcx, ty.substs)\n     {\n         match pred.kind().skip_binder() {\n@@ -726,7 +726,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n                 inputs = Some(i);\n             },\n             PredicateKind::Clause(ty::Clause::Projection(p))\n-                if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output() =>\n+                if Some(p.projection_ty.def_id) == lang_items.fn_once_output() =>\n             {\n                 if output.is_some() {\n                     // Multiple different fn trait impls. Is this even allowed?\n@@ -1041,7 +1041,7 @@ pub fn make_projection<'tcx>(\n \n         Some(ProjectionTy {\n             substs,\n-            item_def_id: assoc_item.def_id,\n+            def_id: assoc_item.def_id,\n         })\n     }\n     helper(\n@@ -1081,7 +1081,7 @@ pub fn make_normalized_projection<'tcx>(\n             );\n             return None;\n         }\n-        match tcx.try_normalize_erasing_regions(param_env, tcx.mk_projection(ty.item_def_id, ty.substs)) {\n+        match tcx.try_normalize_erasing_regions(param_env, tcx.mk_projection(ty.def_id, ty.substs)) {\n             Ok(ty) => Some(ty),\n             Err(e) => {\n                 debug_assert!(false, \"failed to normalize type `{ty}`: {e:#?}\");"}]}