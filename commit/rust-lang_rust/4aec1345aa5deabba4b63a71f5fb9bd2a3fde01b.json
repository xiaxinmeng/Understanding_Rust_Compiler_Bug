{"sha": "4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b", "node_id": "C_kwDOAAsO6NoAKDRhZWMxMzQ1YWE1ZGVhYmJhNGI2M2E3MWY1ZmI5YmQyYTNmZGUwMWI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-03T00:36:32Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-05T22:16:15Z"}, "message": "Split and inline `TypeFreshener::fold_ty`.", "tree": {"sha": "783fbdad0969bff62f8899ec2610e8441d16b1a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/783fbdad0969bff62f8899ec2610e8441d16b1a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b", "html_url": "https://github.com/rust-lang/rust/commit/4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb8e6819aa59c215a2974454d0cbeca34830321a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb8e6819aa59c215a2974454d0cbeca34830321a", "html_url": "https://github.com/rust-lang/rust/commit/fb8e6819aa59c215a2974454d0cbeca34830321a"}], "stats": {"total": 129, "additions": 61, "deletions": 68}, "files": [{"sha": "2355234637c40790013f90ef4a521190aa2cee7c", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 61, "deletions": 68, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=4aec1345aa5deabba4b63a71f5fb9bd2a3fde01b", "patch": "@@ -140,79 +140,21 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n         }\n     }\n \n+    #[inline]\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         if !t.needs_infer() && !t.has_erasable_regions() {\n-            return t;\n-        }\n-\n-        let tcx = self.infcx.tcx;\n-\n-        match *t.kind() {\n-            ty::Infer(ty::TyVar(v)) => {\n-                let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();\n-                self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)\n-            }\n+            t\n+        } else {\n+            match *t.kind() {\n+                ty::Infer(v) => self.fold_infer_ty(v).unwrap_or(t),\n \n-            ty::Infer(ty::IntVar(v)) => self.freshen_ty(\n-                self.infcx\n-                    .inner\n-                    .borrow_mut()\n-                    .int_unification_table()\n-                    .probe_value(v)\n-                    .map(|v| v.to_type(tcx)),\n-                ty::IntVar(v),\n-                ty::FreshIntTy,\n-            ),\n+                // This code is hot enough that a non-debug assertion here makes a noticeable\n+                // difference on benchmarks like `wg-grammar`.\n+                #[cfg(debug_assertions)]\n+                ty::Placeholder(..) | ty::Bound(..) => bug!(\"unexpected type {:?}\", t),\n \n-            ty::Infer(ty::FloatVar(v)) => self.freshen_ty(\n-                self.infcx\n-                    .inner\n-                    .borrow_mut()\n-                    .float_unification_table()\n-                    .probe_value(v)\n-                    .map(|v| v.to_type(tcx)),\n-                ty::FloatVar(v),\n-                ty::FreshFloatTy,\n-            ),\n-\n-            ty::Infer(ty::FreshTy(ct) | ty::FreshIntTy(ct) | ty::FreshFloatTy(ct)) => {\n-                if ct >= self.ty_freshen_count {\n-                    bug!(\n-                        \"Encountered a freshend type with id {} \\\n-                          but our counter is only at {}\",\n-                        ct,\n-                        self.ty_freshen_count\n-                    );\n-                }\n-                t\n+                _ => t.super_fold_with(self),\n             }\n-\n-            ty::Generator(..)\n-            | ty::Bool\n-            | ty::Char\n-            | ty::Int(..)\n-            | ty::Uint(..)\n-            | ty::Float(..)\n-            | ty::Adt(..)\n-            | ty::Str\n-            | ty::Error(_)\n-            | ty::Array(..)\n-            | ty::Slice(..)\n-            | ty::RawPtr(..)\n-            | ty::Ref(..)\n-            | ty::FnDef(..)\n-            | ty::FnPtr(_)\n-            | ty::Dynamic(..)\n-            | ty::Never\n-            | ty::Tuple(..)\n-            | ty::Alias(..)\n-            | ty::Foreign(..)\n-            | ty::Param(..)\n-            | ty::Closure(..)\n-            | ty::GeneratorWitnessMIR(..)\n-            | ty::GeneratorWitness(..) => t.super_fold_with(self),\n-\n-            ty::Placeholder(..) | ty::Bound(..) => bug!(\"unexpected type {:?}\", t),\n         }\n     }\n \n@@ -253,3 +195,54 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n         }\n     }\n }\n+\n+impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n+    // This is separate from `fold_ty` to keep that method small and inlinable.\n+    #[inline(never)]\n+    fn fold_infer_ty(&mut self, v: ty::InferTy) -> Option<Ty<'tcx>> {\n+        match v {\n+            ty::TyVar(v) => {\n+                let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();\n+                Some(self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy))\n+            }\n+\n+            ty::IntVar(v) => Some(\n+                self.freshen_ty(\n+                    self.infcx\n+                        .inner\n+                        .borrow_mut()\n+                        .int_unification_table()\n+                        .probe_value(v)\n+                        .map(|v| v.to_type(self.infcx.tcx)),\n+                    ty::IntVar(v),\n+                    ty::FreshIntTy,\n+                ),\n+            ),\n+\n+            ty::FloatVar(v) => Some(\n+                self.freshen_ty(\n+                    self.infcx\n+                        .inner\n+                        .borrow_mut()\n+                        .float_unification_table()\n+                        .probe_value(v)\n+                        .map(|v| v.to_type(self.infcx.tcx)),\n+                    ty::FloatVar(v),\n+                    ty::FreshFloatTy,\n+                ),\n+            ),\n+\n+            ty::FreshTy(ct) | ty::FreshIntTy(ct) | ty::FreshFloatTy(ct) => {\n+                if ct >= self.ty_freshen_count {\n+                    bug!(\n+                        \"Encountered a freshend type with id {} \\\n+                          but our counter is only at {}\",\n+                        ct,\n+                        self.ty_freshen_count\n+                    );\n+                }\n+                None\n+            }\n+        }\n+    }\n+}"}]}