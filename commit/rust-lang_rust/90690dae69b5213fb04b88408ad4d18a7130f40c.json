{"sha": "90690dae69b5213fb04b88408ad4d18a7130f40c", "node_id": "C_kwDOAAsO6NoAKDkwNjkwZGFlNjliNTIxM2ZiMDRiODg0MDhhZDRkMThhNzEzMGY0MGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-08T10:09:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-08T10:09:01Z"}, "message": "Rollup merge of #91638 - scottmcm:less-inband-2-of-28, r=petrochenkov\n\nRemove `in_band_lifetimes` from `rustc_mir_transform`\n\nLike #91580, this was inspired by the conversation in #44524 about possibly removing the feature from the compiler.  This crate is a heavy `'tcx` user, so is a nice case study.\n\nr? ``@petrochenkov``\n\nThree interesting ones:\n\nThis one had the `'tcx` declared on the function, despite the trait taking a `'tcx`:\n```diff\n-impl Visitor<'_> for UsedLocals {\n+impl<'tcx> Visitor<'tcx> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n```\n\nThis one use in-band for one, and underscore for the other:\n```diff\n-pub fn remove_dead_blocks(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n+pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n```\n\nA spurious name, since there's no single-use-lifetime warning:\n```diff\n-pub fn run_passes(tcx: TyCtxt<'tcx>, body: &'mir mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n+pub fn run_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n```", "tree": {"sha": "43163e2561ad030d7717fdc6aaf6967da69e216c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43163e2561ad030d7717fdc6aaf6967da69e216c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90690dae69b5213fb04b88408ad4d18a7130f40c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsIQ9CRBK7hj4Ov3rIwAAVpAIAA2u+Hvh2xn+NBHxVsI/AbaZ\nExGuFJuL7CWVNmKPRGeJ+STaPAq9wNIZ1hTxxmROyfSnkb9anGuj3JwEEYUr6na/\n9gc0KkxI6IxUyztwhBw/Tn8oQevzfvvB8jlUV49Gt4Q6qvRzmUFrNxYJgE1WMacv\n206aJsi7shft09qucfZClinMEU8YJDbNcyf8cgSPuZ85D1H1QHLB419nO2fyFgwk\nhaLhw+DtySlzRJ8GEw6S7Fqui2Eg1I6PjuvRW6mvHbq4IPxomSAotMOBJVylrCV9\nR3/uOuKuw3pSo0pjZ4kAdgmecm7ge6duQWKiD025Z2Q3ZSgLoDoZV2TG3isWrV0=\n=HMyU\n-----END PGP SIGNATURE-----\n", "payload": "tree 43163e2561ad030d7717fdc6aaf6967da69e216c\nparent 4a76541cba8427b3c0296361a3b4873486172a54\nparent a1249240610fd78d255b170482ee5c106d1208b4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638958141 +0100\ncommitter GitHub <noreply@github.com> 1638958141 +0100\n\nRollup merge of #91638 - scottmcm:less-inband-2-of-28, r=petrochenkov\n\nRemove `in_band_lifetimes` from `rustc_mir_transform`\n\nLike #91580, this was inspired by the conversation in #44524 about possibly removing the feature from the compiler.  This crate is a heavy `'tcx` user, so is a nice case study.\n\nr? ``@petrochenkov``\n\nThree interesting ones:\n\nThis one had the `'tcx` declared on the function, despite the trait taking a `'tcx`:\n```diff\n-impl Visitor<'_> for UsedLocals {\n+impl<'tcx> Visitor<'tcx> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n```\n\nThis one use in-band for one, and underscore for the other:\n```diff\n-pub fn remove_dead_blocks(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n+pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n```\n\nA spurious name, since there's no single-use-lifetime warning:\n```diff\n-pub fn run_passes(tcx: TyCtxt<'tcx>, body: &'mir mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n+pub fn run_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90690dae69b5213fb04b88408ad4d18a7130f40c", "html_url": "https://github.com/rust-lang/rust/commit/90690dae69b5213fb04b88408ad4d18a7130f40c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90690dae69b5213fb04b88408ad4d18a7130f40c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a76541cba8427b3c0296361a3b4873486172a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a76541cba8427b3c0296361a3b4873486172a54", "html_url": "https://github.com/rust-lang/rust/commit/4a76541cba8427b3c0296361a3b4873486172a54"}, {"sha": "a1249240610fd78d255b170482ee5c106d1208b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1249240610fd78d255b170482ee5c106d1208b4", "html_url": "https://github.com/rust-lang/rust/commit/a1249240610fd78d255b170482ee5c106d1208b4"}], "stats": {"total": 236, "additions": 117, "deletions": 119}, "files": [{"sha": "28a5a22dd9d5d1558acf329222a4366d26462e47", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -34,7 +34,7 @@ fn is_stable(place: PlaceRef<'_>) -> bool {\n }\n \n /// Determine whether this type may be a reference (or box), and thus needs retagging.\n-fn may_be_reference(ty: Ty<'tcx>) -> bool {\n+fn may_be_reference(ty: Ty<'_>) -> bool {\n     match ty.kind() {\n         // Primitive types that are not references\n         ty::Bool"}, {"sha": "a19a3c8b1d50609b4712eee6683bd8090507da79", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -23,7 +23,7 @@ struct ConstMutationChecker<'a, 'tcx> {\n     target_local: Option<Local>,\n }\n \n-impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n+impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n     fn is_const_item(&self, local: Local) -> Option<DefId> {\n         if let Some(box LocalInfo::ConstRef { def_id }) = self.body.local_decls[local].local_info {\n             Some(def_id)\n@@ -95,7 +95,7 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for ConstMutationChecker<'_, 'tcx> {\n     fn visit_statement(&mut self, stmt: &Statement<'tcx>, loc: Location) {\n         if let StatementKind::Assign(box (lhs, _)) = &stmt.kind {\n             // Check for assignment to fields of a constant"}, {"sha": "c6661e9c74e9b0a51d280474fce5aa991c1a118f", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -66,7 +66,7 @@ fn builtin_derive_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for PackedRefChecker<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         // Make sure we know where in the MIR we are.\n         self.source_info = terminator.source_info;"}, {"sha": "2dda19badd7c15afd23480b45e53986bd66fab1a", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         self.source_info = terminator.source_info;\n         match terminator.kind {\n@@ -244,7 +244,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n+impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n     fn require_unsafe(&mut self, kind: UnsafetyViolationKind, details: UnsafetyViolationDetails) {\n         // Violations can turn out to be `UnsafeFn` during analysis, but they should not start out as such.\n         assert_ne!(kind, UnsafetyViolationKind::UnsafeFn);\n@@ -397,7 +397,7 @@ struct UnusedUnsafeVisitor<'a> {\n     unsafe_blocks: &'a mut Vec<(hir::HirId, bool)>,\n }\n \n-impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n+impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {"}, {"sha": "839d94167fecdfbc90717b6849c745c781c211af", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -89,7 +89,7 @@ fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Consta\n     eligable_locals\n }\n \n-impl<'tcx> Visitor<'tcx> for LocalUseVisitor {\n+impl Visitor<'_> for LocalUseVisitor {\n     fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n         if context.is_mutating_use() {\n             self.local_mutating_uses[*local] = self.local_mutating_uses[*local].saturating_add(1);"}, {"sha": "905173b0457191022d8288a3bbdf012ecf7b2742", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> MirPass<'tcx> for ConstGoto {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for ConstGotoOptimizationFinder<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for ConstGotoOptimizationFinder<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         let _: Option<_> = try {\n             let target = terminator.kind.as_goto()?;"}, {"sha": "e897e89982c0d8ad0518acdfdc405d5527c360f5", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -171,7 +171,7 @@ struct ConstPropMachine<'mir, 'tcx> {\n     can_const_prop: IndexVec<Local, ConstPropMode>,\n }\n \n-impl<'mir, 'tcx> ConstPropMachine<'mir, 'tcx> {\n+impl ConstPropMachine<'_, '_> {\n     fn new(\n         only_propagate_inside_block_locals: BitSet<Local>,\n         can_const_prop: IndexVec<Local, ConstPropMode>,\n@@ -308,14 +308,14 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     }\n \n     #[inline(always)]\n-    fn stack(\n+    fn stack<'a>(\n         ecx: &'a InterpCx<'mir, 'tcx, Self>,\n     ) -> &'a [Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>] {\n         &ecx.machine.stack\n     }\n \n     #[inline(always)]\n-    fn stack_mut(\n+    fn stack_mut<'a>(\n         ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n     ) -> &'a mut Vec<Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>> {\n         &mut ecx.machine.stack\n@@ -336,7 +336,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     source_info: Option<SourceInfo>,\n }\n \n-impl<'mir, 'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'mir, 'tcx> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'_, 'tcx> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n     #[inline]\n@@ -345,21 +345,21 @@ impl<'mir, 'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'mir, 'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx> HasDataLayout for ConstPropagator<'mir, 'tcx> {\n+impl HasDataLayout for ConstPropagator<'_, '_> {\n     #[inline]\n     fn data_layout(&self) -> &TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }\n \n-impl<'mir, 'tcx> ty::layout::HasTyCtxt<'tcx> for ConstPropagator<'mir, 'tcx> {\n+impl<'tcx> ty::layout::HasTyCtxt<'tcx> for ConstPropagator<'_, 'tcx> {\n     #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }\n \n-impl<'mir, 'tcx> ty::layout::HasParamEnv<'tcx> for ConstPropagator<'mir, 'tcx> {\n+impl<'tcx> ty::layout::HasParamEnv<'tcx> for ConstPropagator<'_, 'tcx> {\n     #[inline]\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n@@ -971,7 +971,7 @@ struct CanConstProp {\n \n impl CanConstProp {\n     /// Returns true if `local` can be propagated\n-    fn check(\n+    fn check<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n         body: &Body<'tcx>,\n@@ -1019,7 +1019,7 @@ impl CanConstProp {\n     }\n }\n \n-impl<'tcx> Visitor<'tcx> for CanConstProp {\n+impl Visitor<'_> for CanConstProp {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n@@ -1079,7 +1079,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n     }\n }\n \n-impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n+impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "588103ca43dd0fdc5e058f747c1f502c5ae74134", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -629,7 +629,7 @@ impl UsedExpressions {\n }\n \n /// Generates the MIR pass `CoverageSpan`-specific spanview dump file.\n-pub(super) fn dump_coverage_spanview(\n+pub(super) fn dump_coverage_spanview<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n     basic_coverage_blocks: &CoverageGraph,\n@@ -651,7 +651,7 @@ pub(super) fn dump_coverage_spanview(\n }\n \n /// Converts the computed `BasicCoverageBlockData`s into `SpanViewable`s.\n-fn span_viewables(\n+fn span_viewables<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n     basic_coverage_blocks: &CoverageGraph,\n@@ -670,7 +670,7 @@ fn span_viewables(\n }\n \n /// Generates the MIR pass coverage-specific graphviz dump file.\n-pub(super) fn dump_coverage_graphviz(\n+pub(super) fn dump_coverage_graphviz<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n     pass_name: &str,\n@@ -750,7 +750,7 @@ pub(super) fn dump_coverage_graphviz(\n         .expect(\"Unexpected error writing BasicCoverageBlock graphviz DOT file\");\n }\n \n-fn bcb_to_string_sections(\n+fn bcb_to_string_sections<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n     debug_counters: &DebugCounters,\n@@ -817,7 +817,7 @@ fn bcb_to_string_sections(\n \n /// Returns a simple string representation of a `TerminatorKind` variant, independent of any\n /// values it might hold.\n-pub(super) fn term_type(kind: &TerminatorKind<'tcx>) -> &'static str {\n+pub(super) fn term_type(kind: &TerminatorKind<'_>) -> &'static str {\n     match kind {\n         TerminatorKind::Goto { .. } => \"Goto\",\n         TerminatorKind::SwitchInt { .. } => \"SwitchInt\","}, {"sha": "a25402a1ff9f54674fc6a985a1e8f7bf4d224b8c", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -27,7 +27,7 @@ pub(super) struct CoverageGraph {\n }\n \n impl CoverageGraph {\n-    pub fn from_mir(mir_body: &mir::Body<'tcx>) -> Self {\n+    pub fn from_mir(mir_body: &mir::Body<'_>) -> Self {\n         let (bcbs, bb_to_bcb) = Self::compute_basic_coverage_blocks(mir_body);\n \n         // Pre-transform MIR `BasicBlock` successors and predecessors into the BasicCoverageBlock\n@@ -74,7 +74,7 @@ impl CoverageGraph {\n     }\n \n     fn compute_basic_coverage_blocks(\n-        mir_body: &mir::Body<'tcx>,\n+        mir_body: &mir::Body<'_>,\n     ) -> (\n         IndexVec<BasicCoverageBlock, BasicCoverageBlockData>,\n         IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n@@ -267,7 +267,7 @@ impl graph::WithSuccessors for CoverageGraph {\n     }\n }\n \n-impl graph::GraphPredecessors<'graph> for CoverageGraph {\n+impl<'graph> graph::GraphPredecessors<'graph> for CoverageGraph {\n     type Item = BasicCoverageBlock;\n     type Iter = std::iter::Copied<std::slice::Iter<'graph, BasicCoverageBlock>>;\n }"}, {"sha": "b009e2fd0e4ade6889dd9c653e9951586c1355d2", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -443,7 +443,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n }\n \n fn inject_edge_counter_basic_block(\n-    mir_body: &mut mir::Body<'tcx>,\n+    mir_body: &mut mir::Body<'_>,\n     from_bb: BasicBlock,\n     to_bb: BasicBlock,\n ) -> BasicBlock {\n@@ -466,7 +466,7 @@ fn inject_edge_counter_basic_block(\n }\n \n fn inject_statement(\n-    mir_body: &mut mir::Body<'tcx>,\n+    mir_body: &mut mir::Body<'_>,\n     counter_kind: CoverageKind,\n     bb: BasicBlock,\n     some_code_region: Option<CodeRegion>,\n@@ -488,7 +488,7 @@ fn inject_statement(\n }\n \n // Non-code expressions are injected into the coverage map, without generating executable code.\n-fn inject_intermediate_expression(mir_body: &mut mir::Body<'tcx>, expression: CoverageKind) {\n+fn inject_intermediate_expression(mir_body: &mut mir::Body<'_>, expression: CoverageKind) {\n     debug_assert!(matches!(expression, CoverageKind::Expression { .. }));\n     debug!(\"  injecting non-code expression {:?}\", expression);\n     let inject_in_bb = mir::START_BLOCK;"}, {"sha": "1721fb5cde0e899e04c5acb82684c7803ed1d6d1", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -137,7 +137,7 @@ fn coverageinfo<'tcx>(tcx: TyCtxt<'tcx>, instance_def: ty::InstanceDef<'tcx>) ->\n     coverage_visitor.info\n }\n \n-fn covered_file_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<Symbol> {\n+fn covered_file_name(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     if tcx.is_mir_available(def_id) {\n         let body = mir_body(tcx, def_id);\n         for bb_data in body.basic_blocks().iter() {"}, {"sha": "146cabf3508806c167ef755b825d2e2cafbd3fb2", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -21,7 +21,7 @@ pub(super) enum CoverageStatement {\n }\n \n impl CoverageStatement {\n-    pub fn format(&self, tcx: TyCtxt<'tcx>, mir_body: &'a mir::Body<'tcx>) -> String {\n+    pub fn format<'tcx>(&self, tcx: TyCtxt<'tcx>, mir_body: &mir::Body<'tcx>) -> String {\n         match *self {\n             Self::Statement(bb, span, stmt_index) => {\n                 let stmt = &mir_body[bb].statements[stmt_index];\n@@ -86,7 +86,7 @@ impl CoverageSpan {\n     }\n \n     pub fn for_statement(\n-        statement: &Statement<'tcx>,\n+        statement: &Statement<'_>,\n         span: Span,\n         expn_span: Span,\n         bcb: BasicCoverageBlock,\n@@ -151,18 +151,18 @@ impl CoverageSpan {\n         self.bcb == other.bcb\n     }\n \n-    pub fn format(&self, tcx: TyCtxt<'tcx>, mir_body: &'a mir::Body<'tcx>) -> String {\n+    pub fn format<'tcx>(&self, tcx: TyCtxt<'tcx>, mir_body: &mir::Body<'tcx>) -> String {\n         format!(\n             \"{}\\n    {}\",\n             source_range_no_file(tcx, &self.span),\n             self.format_coverage_statements(tcx, mir_body).replace(\"\\n\", \"\\n    \"),\n         )\n     }\n \n-    pub fn format_coverage_statements(\n+    pub fn format_coverage_statements<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        mir_body: &'a mir::Body<'tcx>,\n+        mir_body: &mir::Body<'tcx>,\n     ) -> String {\n         let mut sorted_coverage_statements = self.coverage_statements.clone();\n         sorted_coverage_statements.sort_unstable_by_key(|covstmt| match *covstmt {\n@@ -803,7 +803,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n \n /// If the MIR `Statement` has a span contributive to computing coverage spans,\n /// return it; otherwise return `None`.\n-pub(super) fn filtered_statement_span(statement: &'a Statement<'tcx>) -> Option<Span> {\n+pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span> {\n     match statement.kind {\n         // These statements have spans that are often outside the scope of the executed source code\n         // for their parent `BasicBlock`.\n@@ -847,7 +847,7 @@ pub(super) fn filtered_statement_span(statement: &'a Statement<'tcx>) -> Option<\n \n /// If the MIR `Terminator` has a span contributive to computing coverage spans,\n /// return it; otherwise return `None`.\n-pub(super) fn filtered_terminator_span(terminator: &'a Terminator<'tcx>) -> Option<Span> {\n+pub(super) fn filtered_terminator_span(terminator: &Terminator<'_>) -> Option<Span> {\n     match terminator.kind {\n         // These terminators have spans that don't positively contribute to computing a reasonable\n         // span of actually executed source code. (For example, SwitchInt terminators extracted from"}, {"sha": "b9c79d4cf2db80f2984713bab2e63a7eadb6e09d", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> MockBlocks<'tcx> {\n     }\n }\n \n-fn debug_basic_blocks(mir_body: &Body<'tcx>) -> String {\n+fn debug_basic_blocks<'tcx>(mir_body: &Body<'tcx>) -> String {\n     format!(\n         \"{:?}\",\n         mir_body\n@@ -273,7 +273,7 @@ fn print_coverage_graphviz(\n }\n \n /// Create a mock `Body` with a simple flow.\n-fn goto_switchint() -> Body<'a> {\n+fn goto_switchint<'a>() -> Body<'a> {\n     let mut blocks = MockBlocks::new();\n     let start = blocks.call(None);\n     let goto = blocks.goto(Some(start));\n@@ -363,7 +363,7 @@ fn test_covgraph_goto_switchint() {\n }\n \n /// Create a mock `Body` with a loop.\n-fn switchint_then_loop_else_return() -> Body<'a> {\n+fn switchint_then_loop_else_return<'a>() -> Body<'a> {\n     let mut blocks = MockBlocks::new();\n     let start = blocks.call(None);\n     let switchint = blocks.switchint(Some(start));\n@@ -449,7 +449,7 @@ fn test_covgraph_switchint_then_loop_else_return() {\n }\n \n /// Create a mock `Body` with nested loops.\n-fn switchint_loop_then_inner_loop_else_break() -> Body<'a> {\n+fn switchint_loop_then_inner_loop_else_break<'a>() -> Body<'a> {\n     let mut blocks = MockBlocks::new();\n     let start = blocks.call(None);\n     let switchint = blocks.switchint(Some(start));"}, {"sha": "d1977ed49fe15df8de83d198ae05b8fadc918464", "filename": "compiler/rustc_mir_transform/src/deduplicate_blocks.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> MutVisitor<'tcx> for OptApplier<'tcx> {\n     }\n }\n \n-fn find_duplicates<'a, 'tcx>(body: &'a Body<'tcx>) -> FxHashMap<BasicBlock, BasicBlock> {\n+fn find_duplicates(body: &Body<'_>) -> FxHashMap<BasicBlock, BasicBlock> {\n     let mut duplicates = FxHashMap::default();\n \n     let bbs_to_go_through =\n@@ -102,17 +102,17 @@ struct BasicBlockHashable<'tcx, 'a> {\n     basic_block_data: &'a BasicBlockData<'tcx>,\n }\n \n-impl<'tcx, 'a> Hash for BasicBlockHashable<'tcx, 'a> {\n+impl Hash for BasicBlockHashable<'_, '_> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         hash_statements(state, self.basic_block_data.statements.iter());\n         // Note that since we only hash the kind, we lose span information if we deduplicate the blocks\n         self.basic_block_data.terminator().kind.hash(state);\n     }\n }\n \n-impl<'tcx, 'a> Eq for BasicBlockHashable<'tcx, 'a> {}\n+impl Eq for BasicBlockHashable<'_, '_> {}\n \n-impl<'tcx, 'a> PartialEq for BasicBlockHashable<'tcx, 'a> {\n+impl PartialEq for BasicBlockHashable<'_, '_> {\n     fn eq(&self, other: &Self) -> bool {\n         self.basic_block_data.statements.len() == other.basic_block_data.statements.len()\n             && &self.basic_block_data.terminator().kind == &other.basic_block_data.terminator().kind\n@@ -132,7 +132,7 @@ fn hash_statements<'a, 'tcx, H: Hasher>(\n     }\n }\n \n-fn statement_hash<'tcx, H: Hasher>(hasher: &mut H, stmt: &StatementKind<'tcx>) {\n+fn statement_hash<H: Hasher>(hasher: &mut H, stmt: &StatementKind<'_>) {\n     match stmt {\n         StatementKind::Assign(box (place, rvalue)) => {\n             place.hash(hasher);\n@@ -142,14 +142,14 @@ fn statement_hash<'tcx, H: Hasher>(hasher: &mut H, stmt: &StatementKind<'tcx>) {\n     };\n }\n \n-fn rvalue_hash<H: Hasher>(hasher: &mut H, rvalue: &Rvalue<'tcx>) {\n+fn rvalue_hash<H: Hasher>(hasher: &mut H, rvalue: &Rvalue<'_>) {\n     match rvalue {\n         Rvalue::Use(op) => operand_hash(hasher, op),\n         x => x.hash(hasher),\n     };\n }\n \n-fn operand_hash<H: Hasher>(hasher: &mut H, operand: &Operand<'tcx>) {\n+fn operand_hash<H: Hasher>(hasher: &mut H, operand: &Operand<'_>) {\n     match operand {\n         Operand::Constant(box Constant { user_ty: _, literal, span: _ }) => literal.hash(hasher),\n         x => x.hash(hasher),\n@@ -168,7 +168,7 @@ fn statement_eq<'tcx>(lhs: &StatementKind<'tcx>, rhs: &StatementKind<'tcx>) -> b\n     res\n }\n \n-fn rvalue_eq(lhs: &Rvalue<'tcx>, rhs: &Rvalue<'tcx>) -> bool {\n+fn rvalue_eq<'tcx>(lhs: &Rvalue<'tcx>, rhs: &Rvalue<'tcx>) -> bool {\n     let res = match (lhs, rhs) {\n         (Rvalue::Use(op1), Rvalue::Use(op2)) => operand_eq(op1, op2),\n         (x, y) => x == y,\n@@ -177,7 +177,7 @@ fn rvalue_eq(lhs: &Rvalue<'tcx>, rhs: &Rvalue<'tcx>) -> bool {\n     res\n }\n \n-fn operand_eq(lhs: &Operand<'tcx>, rhs: &Operand<'tcx>) -> bool {\n+fn operand_eq<'tcx>(lhs: &Operand<'tcx>, rhs: &Operand<'tcx>) -> bool {\n     let res = match (lhs, rhs) {\n         (\n             Operand::Constant(box Constant { user_ty: _, literal, span: _ }),"}, {"sha": "2b382468be0f5d01c00fa61a740b60683063947a", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -241,7 +241,7 @@ struct Replacements<'tcx> {\n     kill: BitSet<Local>,\n }\n \n-impl Replacements<'tcx> {\n+impl<'tcx> Replacements<'tcx> {\n     fn new(locals: usize) -> Self {\n         Self { map: IndexVec::from_elem_n(None, locals), kill: BitSet::new_empty(locals) }\n     }\n@@ -298,7 +298,7 @@ struct Replacer<'tcx> {\n }\n \n impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -372,7 +372,7 @@ struct Conflicts<'a> {\n     unified_locals: InPlaceUnificationTable<UnifyLocal>,\n }\n \n-impl Conflicts<'a> {\n+impl<'a> Conflicts<'a> {\n     fn build<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         body: &'_ Body<'tcx>,\n@@ -820,10 +820,7 @@ struct CandidateAssignment<'tcx> {\n /// comment) and also throw out assignments that involve a local that has its address taken or is\n /// otherwise ineligible (eg. locals used as array indices are ignored because we cannot propagate\n /// arbitrary places into array indices).\n-fn find_candidates<'a, 'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    body: &'a Body<'tcx>,\n-) -> Vec<CandidateAssignment<'tcx>> {\n+fn find_candidates<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> Vec<CandidateAssignment<'tcx>> {\n     let mut visitor = FindAssignments {\n         tcx,\n         body,\n@@ -843,7 +840,7 @@ struct FindAssignments<'a, 'tcx> {\n     locals_used_as_array_index: BitSet<Local>,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for FindAssignments<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for FindAssignments<'_, 'tcx> {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         if let StatementKind::Assign(box (\n             dest,"}, {"sha": "ac88060f0d349de5d45afa87e5a7678dc984da5f", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -167,7 +167,7 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n     }\n }\n \n-fn is_switch<'tcx>(terminator: &Terminator<'tcx>) -> bool {\n+fn is_switch(terminator: &Terminator<'_>) -> bool {\n     matches!(terminator.kind, TerminatorKind::SwitchInt { .. })\n }\n \n@@ -208,7 +208,7 @@ struct OptimizationInfo<'tcx> {\n     second_switch_info: SwitchDiscriminantInfo<'tcx>,\n }\n \n-impl<'a, 'tcx> Helper<'a, 'tcx> {\n+impl<'tcx> Helper<'_, 'tcx> {\n     pub fn go(\n         &self,\n         bb: &BasicBlockData<'tcx>,"}, {"sha": "d346dfb1772199b3659a3962a7355fb056e357cb", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -149,13 +149,13 @@ struct Elaborator<'a, 'b, 'tcx> {\n     ctxt: &'a mut ElaborateDropsCtxt<'b, 'tcx>,\n }\n \n-impl<'a, 'b, 'tcx> fmt::Debug for Elaborator<'a, 'b, 'tcx> {\n+impl fmt::Debug for Elaborator<'_, '_, '_> {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }\n \n-impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n+impl<'a, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, '_, 'tcx> {\n     type Path = MovePathIndex;\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx> {"}, {"sha": "05834b443d0d9d0552d4b2e78fd6a6dabde1c7ff", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -27,7 +27,7 @@ struct FunctionItemRefChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n     /// Emits a lint for function reference arguments bound by `fmt::Pointer` or passed to\n     /// `transmute`. This only handles arguments in calls outside macro expansions to avoid double\n     /// counting function references formatted as pointers by macros.\n@@ -92,7 +92,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n+impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n     /// Emits a lint for function reference arguments bound by `fmt::Pointer` in calls to the\n     /// function defined by `def_id` with the substitutions `substs_ref`.\n     fn check_bound_args("}, {"sha": "6220cee8d21627170426bfc7fbdfd4ffffae4e06", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -233,7 +233,7 @@ struct TransformVisitor<'tcx> {\n     new_ret_local: Local,\n }\n \n-impl TransformVisitor<'tcx> {\n+impl<'tcx> TransformVisitor<'tcx> {\n     // Make a GeneratorState variant assignment. `core::ops::GeneratorState` only has single\n     // element tuple variants, so we can just write to the downcasted first field and then set the\n     // discriminant to the appropriate variant.\n@@ -295,7 +295,7 @@ impl TransformVisitor<'tcx> {\n     }\n }\n \n-impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n+impl<'tcx> MutVisitor<'tcx> for TransformVisitor<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -446,7 +446,7 @@ struct LivenessInfo {\n     storage_liveness: IndexVec<BasicBlock, Option<BitSet<Local>>>,\n }\n \n-fn locals_live_across_suspend_points(\n+fn locals_live_across_suspend_points<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     always_live_locals: &storage::AlwaysLiveLocals,\n@@ -613,7 +613,7 @@ impl ops::Deref for GeneratorSavedLocals {\n /// time. Generates a bitset for every local of all the other locals that may be\n /// StorageLive simultaneously with that local. This is used in the layout\n /// computation; see `GeneratorLayout` for more.\n-fn compute_storage_conflicts(\n+fn compute_storage_conflicts<'mir, 'tcx>(\n     body: &'mir Body<'tcx>,\n     saved_locals: &GeneratorSavedLocals,\n     always_live_locals: storage::AlwaysLiveLocals,\n@@ -672,7 +672,9 @@ struct StorageConflictVisitor<'mir, 'tcx, 's> {\n     local_conflicts: BitMatrix<Local, Local>,\n }\n \n-impl rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx> for StorageConflictVisitor<'mir, 'tcx, '_> {\n+impl<'mir, 'tcx> rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx>\n+    for StorageConflictVisitor<'mir, 'tcx, '_>\n+{\n     type FlowState = BitSet<Local>;\n \n     fn visit_statement_before_primary_effect(\n@@ -694,7 +696,7 @@ impl rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx> for StorageConflictVisitor<'\n     }\n }\n \n-impl<'body, 'tcx, 's> StorageConflictVisitor<'body, 'tcx, 's> {\n+impl StorageConflictVisitor<'_, '_, '_> {\n     fn apply_state(&mut self, flow_state: &BitSet<Local>, loc: Location) {\n         // Ignore unreachable blocks.\n         if self.body.basic_blocks()[loc.block].terminator().kind == TerminatorKind::Unreachable {\n@@ -1398,7 +1400,7 @@ impl EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n         self.saved_locals.get(place.local)\n     }\n \n-    fn check_assigned_place(&mut self, place: Place<'tcx>, f: impl FnOnce(&mut Self)) {\n+    fn check_assigned_place(&mut self, place: Place<'_>, f: impl FnOnce(&mut Self)) {\n         if let Some(assigned_local) = self.saved_local_for_direct_place(place) {\n             assert!(self.assigned_local.is_none(), \"`check_assigned_place` must not recurse\");\n \n@@ -1409,7 +1411,7 @@ impl EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n     }\n }\n \n-impl Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n+impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n     fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n         let lhs = match self.assigned_local {\n             Some(l) => l,"}, {"sha": "558b1ce082e40ca25151d7c7d40d4e31cde5050b", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> MirPass<'tcx> for Inline {\n     }\n }\n \n-fn inline(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n+fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n     let def_id = body.source.def_id();\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n \n@@ -95,7 +95,7 @@ struct Inliner<'tcx> {\n     changed: bool,\n }\n \n-impl Inliner<'tcx> {\n+impl<'tcx> Inliner<'tcx> {\n     fn process_blocks(&mut self, caller_body: &mut Body<'tcx>, blocks: Range<BasicBlock>) {\n         for bb in blocks {\n             let bb_data = &caller_body[bb];\n@@ -786,7 +786,7 @@ struct Integrator<'a, 'tcx> {\n     always_live_locals: BitSet<Local>,\n }\n \n-impl<'a, 'tcx> Integrator<'a, 'tcx> {\n+impl Integrator<'_, '_> {\n     fn map_local(&self, local: Local) -> Local {\n         let new = if local == RETURN_PLACE {\n             self.destination.local\n@@ -815,7 +815,7 @@ impl<'a, 'tcx> Integrator<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n+impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "747e760a18b92e8a88f6717614288d495e260612", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -10,7 +10,7 @@ use rustc_session::Limit;\n // FIXME: check whether it is cheaper to precompute the entire call graph instead of invoking\n // this query riddiculously often.\n #[instrument(level = \"debug\", skip(tcx, root, target))]\n-crate fn mir_callgraph_reachable(\n+crate fn mir_callgraph_reachable<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (root, target): (ty::Instance<'tcx>, LocalDefId),\n ) -> bool {\n@@ -33,7 +33,7 @@ crate fn mir_callgraph_reachable(\n         level = \"debug\",\n         skip(tcx, param_env, target, stack, seen, recursion_limiter, caller, recursion_limit)\n     )]\n-    fn process(\n+    fn process<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         caller: ty::Instance<'tcx>,"}, {"sha": "792ac68671efb1f47c8ce0bad49d8d9b8c7c15f7", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -38,7 +38,7 @@ struct InstCombineContext<'tcx, 'a> {\n     local_decls: &'a LocalDecls<'tcx>,\n }\n \n-impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n+impl<'tcx> InstCombineContext<'tcx, '_> {\n     fn should_combine(&self, source_info: &SourceInfo, rvalue: &Rvalue<'tcx>) -> bool {\n         self.tcx.consider_optimizing(|| {\n             format!(\"InstCombine - Rvalue: {:?} SourceInfo: {:?}\", rvalue, source_info)"}, {"sha": "0e7488aa98eee5eac87603a03d1183a6683d23d2", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -1,7 +1,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n@@ -150,7 +149,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n         tcx: TyCtxt<'tcx>,\n         set: &'a mut FxHashSet<LocalDefId>,\n     }\n-    impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> {\n+    impl<'tcx> Visitor<'tcx> for GatherCtors<'_, 'tcx> {\n         fn visit_variant_data(\n             &mut self,\n             v: &'tcx hir::VariantData<'tcx>,\n@@ -243,7 +242,7 @@ fn mir_const<'tcx>(\n }\n \n /// Compute the main MIR body and the list of MIR bodies of the promoteds.\n-fn mir_promoted(\n+fn mir_promoted<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {"}, {"sha": "4c4497ad629da7c2d4428f0f5223e57863bba5ed", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n     }\n }\n \n-fn resolve_rust_intrinsic(\n+fn resolve_rust_intrinsic<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     func_ty: Ty<'tcx>,\n ) -> Option<(Symbol, SubstsRef<'tcx>)> {\n@@ -148,7 +148,7 @@ fn resolve_rust_intrinsic(\n     None\n }\n \n-fn validate_simd_shuffle(tcx: TyCtxt<'tcx>, args: &[Operand<'tcx>], span: Span) {\n+fn validate_simd_shuffle<'tcx>(tcx: TyCtxt<'tcx>, args: &[Operand<'tcx>], span: Span) {\n     match &args[2] {\n         Operand::Constant(_) => {} // all good\n         _ => {"}, {"sha": "e4ac57ac92508bd6d626321541823b127c32f7d2", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -85,7 +85,7 @@ struct Patcher<'a, 'tcx> {\n     statement_idx: usize,\n }\n \n-impl<'a, 'tcx> Patcher<'a, 'tcx> {\n+impl<'tcx> Patcher<'_, 'tcx> {\n     fn patch_expand_statement(\n         &mut self,\n         statement: &mut Statement<'tcx>,"}, {"sha": "797f7ee2685b83ed424d0d87d39b1a6fdd9b6819", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -165,7 +165,7 @@ struct RenameToReturnPlace<'tcx> {\n }\n \n /// Replaces all uses of `self.to_rename` with `_0`.\n-impl MutVisitor<'tcx> for RenameToReturnPlace<'tcx> {\n+impl<'tcx> MutVisitor<'tcx> for RenameToReturnPlace<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -221,7 +221,7 @@ impl IsReturnPlaceRead {\n     }\n }\n \n-impl Visitor<'tcx> for IsReturnPlaceRead {\n+impl<'tcx> Visitor<'tcx> for IsReturnPlaceRead {\n     fn visit_local(&mut self, &l: &Local, ctxt: PlaceContext, _: Location) {\n         if l == mir::RETURN_PLACE && ctxt.is_use() && !ctxt.is_place_assignment() {\n             self.0 = true;"}, {"sha": "8725eae870917856985ed83b281d416351183b9c", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -28,7 +28,7 @@ pub trait MirLint<'tcx> {\n #[derive(Debug, Clone)]\n pub struct Lint<T>(pub T);\n \n-impl<T> MirPass<'tcx> for Lint<T>\n+impl<'tcx, T> MirPass<'tcx> for Lint<T>\n where\n     T: MirLint<'tcx>,\n {\n@@ -51,7 +51,7 @@ where\n \n pub struct WithMinOptLevel<T>(pub u32, pub T);\n \n-impl<T> MirPass<'tcx> for WithMinOptLevel<T>\n+impl<'tcx, T> MirPass<'tcx> for WithMinOptLevel<T>\n where\n     T: MirPass<'tcx>,\n {\n@@ -72,7 +72,7 @@ where\n     }\n }\n \n-pub fn run_passes(tcx: TyCtxt<'tcx>, body: &'mir mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n+pub fn run_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n     let start_phase = body.phase;\n     let mut cnt = 0;\n \n@@ -119,11 +119,11 @@ pub fn run_passes(tcx: TyCtxt<'tcx>, body: &'mir mut Body<'tcx>, passes: &[&dyn\n     }\n }\n \n-pub fn validate_body(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, when: String) {\n+pub fn validate_body<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, when: String) {\n     validate::Validator { when, mir_phase: body.phase }.run_pass(tcx, body);\n }\n \n-pub fn dump_mir(\n+pub fn dump_mir<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     phase: MirPhase,"}, {"sha": "fc5ac97e3e1dc47485b257909ac22752702b58d7", "filename": "compiler/rustc_mir_transform/src/remove_uninit_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> MirPass<'tcx> for RemoveUninitDrops {\n     }\n }\n \n-fn is_needs_drop_and_init(\n+fn is_needs_drop_and_init<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     maybe_inits: &BitSet<MovePathIndex>,\n@@ -158,7 +158,7 @@ fn is_needs_drop_and_init(\n     }\n }\n \n-fn variant_needs_drop(\n+fn variant_needs_drop<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     substs: SubstsRef<'tcx>,"}, {"sha": "80c87cafea1016afe42477322df728e3dba090be", "filename": "compiler/rustc_mir_transform/src/required_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -12,7 +12,7 @@ impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for RequiredConstsVisitor<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for RequiredConstsVisitor<'_, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n         if let Some(ct) = constant.literal.const_for_ty() {\n             if let ConstKind::Unevaluated(_) = ct.val {"}, {"sha": "612fce71f9167a1bf88df39dc130c0fdf6ceaf30", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> MirPass<'tcx> for SeparateConstSwitch {\n }\n \n /// Returns the amount of blocks that were duplicated\n-pub fn separate_const_switch<'tcx>(body: &mut Body<'tcx>) -> usize {\n+pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n     let mut new_blocks: SmallVec<[(BasicBlock, BasicBlock); 6]> = SmallVec::new();\n     let predecessors = body.predecessors();\n     'block_iter: for (block_id, block) in body.basic_blocks().iter_enumerated() {"}, {"sha": "d0039380361444119504ce6cecd8601cb196a797", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -247,7 +247,7 @@ pub struct DropShimElaborator<'a, 'tcx> {\n     pub param_env: ty::ParamEnv<'tcx>,\n }\n \n-impl<'a, 'tcx> fmt::Debug for DropShimElaborator<'a, 'tcx> {\n+impl fmt::Debug for DropShimElaborator<'_, '_> {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         Ok(())\n     }\n@@ -337,7 +337,7 @@ struct CloneShimBuilder<'tcx> {\n     sig: ty::FnSig<'tcx>,\n }\n \n-impl CloneShimBuilder<'tcx> {\n+impl<'tcx> CloneShimBuilder<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -> Self {\n         // we must subst the self_ty because it's\n         // otherwise going to be TySelf and we can't index"}, {"sha": "7992124bacd43d924c7252578a435bf510d94bac", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -47,7 +47,7 @@ impl SimplifyCfg {\n     }\n }\n \n-pub fn simplify_cfg(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n+pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     CfgSimplifier::new(body).simplify();\n     remove_dead_blocks(tcx, body);\n \n@@ -262,7 +262,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn remove_dead_blocks(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n+pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let reachable = traversal::reachable_as_bitset(body);\n     let num_blocks = body.basic_blocks().len();\n     if num_blocks == reachable.count() {\n@@ -454,7 +454,7 @@ impl UsedLocals {\n     }\n \n     /// Updates the use counts to reflect the removal of given statement.\n-    fn statement_removed(&mut self, statement: &Statement<'tcx>) {\n+    fn statement_removed(&mut self, statement: &Statement<'_>) {\n         self.increment = false;\n \n         // The location of the statement is irrelevant.\n@@ -463,7 +463,7 @@ impl UsedLocals {\n     }\n \n     /// Visits a left-hand side of an assignment.\n-    fn visit_lhs(&mut self, place: &Place<'tcx>, location: Location) {\n+    fn visit_lhs(&mut self, place: &Place<'_>, location: Location) {\n         if place.is_indirect() {\n             // A use, not a definition.\n             self.visit_place(place, PlaceContext::MutatingUse(MutatingUseContext::Store), location);\n@@ -480,7 +480,7 @@ impl UsedLocals {\n     }\n }\n \n-impl Visitor<'_> for UsedLocals {\n+impl<'tcx> Visitor<'tcx> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n             StatementKind::LlvmInlineAsm(..)\n@@ -518,7 +518,7 @@ impl Visitor<'_> for UsedLocals {\n }\n \n /// Removes unused definitions. Updates the used locals to reflect the changes made.\n-fn remove_unused_definitions<'a, 'tcx>(used_locals: &'a mut UsedLocals, body: &mut Body<'tcx>) {\n+fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>) {\n     // The use counts are updated as we remove the statements. A local might become unused\n     // during the retain operation, leading to a temporary inconsistency (storage statements or\n     // definitions referencing the local might remain). For correctness it is crucial that this"}, {"sha": "da683a33651d69c4e5f41cf3961d68398da5c3b5", "filename": "compiler/rustc_mir_transform/src/simplify_comparison_integral.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -148,7 +148,7 @@ struct OptimizationFinder<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n }\n \n-impl<'a, 'tcx> OptimizationFinder<'a, 'tcx> {\n+impl<'tcx> OptimizationFinder<'_, 'tcx> {\n     fn find_optimizations(&self) -> Vec<OptimizationInfo<'tcx>> {\n         self.body\n             .basic_blocks()"}, {"sha": "7761d4006d3dbd06f4cea316e70ef823360603e9", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -102,7 +102,7 @@ fn get_arm_identity_info<'a, 'tcx>(\n \n     type StmtIter<'a, 'tcx> = Peekable<Enumerate<Iter<'a, Statement<'tcx>>>>;\n \n-    fn is_storage_stmt<'tcx>(stmt: &Statement<'tcx>) -> bool {\n+    fn is_storage_stmt(stmt: &Statement<'_>) -> bool {\n         matches!(stmt.kind, StatementKind::StorageLive(_) | StatementKind::StorageDead(_))\n     }\n \n@@ -122,8 +122,8 @@ fn get_arm_identity_info<'a, 'tcx>(\n \n     /// Eats consecutive `StorageLive` and `StorageDead` Statements.\n     /// The iterator `stmt_iter` is not advanced if none were found.\n-    fn try_eat_storage_stmts<'a, 'tcx>(\n-        stmt_iter: &mut StmtIter<'a, 'tcx>,\n+    fn try_eat_storage_stmts(\n+        stmt_iter: &mut StmtIter<'_, '_>,\n         storage_live_stmts: &mut Vec<(usize, Local)>,\n         storage_dead_stmts: &mut Vec<(usize, Local)>,\n     ) {\n@@ -136,7 +136,7 @@ fn get_arm_identity_info<'a, 'tcx>(\n         })\n     }\n \n-    fn is_tmp_storage_stmt<'tcx>(stmt: &Statement<'tcx>) -> bool {\n+    fn is_tmp_storage_stmt(stmt: &Statement<'_>) -> bool {\n         use rustc_middle::mir::StatementKind::Assign;\n         if let Assign(box (place, Rvalue::Use(Operand::Copy(p) | Operand::Move(p)))) = &stmt.kind {\n             place.as_local().is_some() && p.as_local().is_some()\n@@ -147,8 +147,8 @@ fn get_arm_identity_info<'a, 'tcx>(\n \n     /// Eats consecutive `Assign` Statements.\n     // The iterator `stmt_iter` is not advanced if none were found.\n-    fn try_eat_assign_tmp_stmts<'a, 'tcx>(\n-        stmt_iter: &mut StmtIter<'a, 'tcx>,\n+    fn try_eat_assign_tmp_stmts(\n+        stmt_iter: &mut StmtIter<'_, '_>,\n         tmp_assigns: &mut Vec<(Local, Local)>,\n         nop_stmts: &mut Vec<usize>,\n     ) {\n@@ -163,9 +163,9 @@ fn get_arm_identity_info<'a, 'tcx>(\n         })\n     }\n \n-    fn find_storage_live_dead_stmts_for_local<'tcx>(\n+    fn find_storage_live_dead_stmts_for_local(\n         local: Local,\n-        stmts: &[Statement<'tcx>],\n+        stmts: &[Statement<'_>],\n     ) -> Option<(usize, usize)> {\n         trace!(\"looking for {:?}\", local);\n         let mut storage_live_stmt = None;\n@@ -452,14 +452,14 @@ struct LocalUseCounter {\n }\n \n impl LocalUseCounter {\n-    fn get_local_uses<'tcx>(body: &Body<'tcx>) -> IndexVec<Local, usize> {\n+    fn get_local_uses(body: &Body<'_>) -> IndexVec<Local, usize> {\n         let mut counter = LocalUseCounter { local_uses: IndexVec::from_elem(0, &body.local_decls) };\n         counter.visit_body(body);\n         counter.local_uses\n     }\n }\n \n-impl<'tcx> Visitor<'tcx> for LocalUseCounter {\n+impl Visitor<'_> for LocalUseCounter {\n     fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n         if context.is_storage_marker()\n             || context == PlaceContext::NonUse(NonUseContext::VarDebugInfo)\n@@ -510,7 +510,7 @@ fn match_set_variant_field<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, Local\n /// ```rust\n /// discriminant(_LOCAL_TO_SET) = VAR_IDX;\n /// ```\n-fn match_set_discr<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, VariantIdx)> {\n+fn match_set_discr(stmt: &Statement<'_>) -> Option<(Local, VariantIdx)> {\n     match &stmt.kind {\n         StatementKind::SetDiscriminant { place, variant_index } => {\n             Some((place.as_local()?, *variant_index))\n@@ -588,7 +588,7 @@ struct SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n+impl<'tcx> SimplifyBranchSameOptimizationFinder<'_, 'tcx> {\n     fn find(&self) -> Vec<SimplifyBranchSameOptimization> {\n         self.body\n             .basic_blocks()"}, {"sha": "9e755ab141a489e5860075e21887648b93bce2a5", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90690dae69b5213fb04b88408ad4d18a7130f40c/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=90690dae69b5213fb04b88408ad4d18a7130f40c", "patch": "@@ -64,7 +64,7 @@ impl MirPass<'_> for UnreachablePropagation {\n     }\n }\n \n-fn remove_successors<F>(\n+fn remove_successors<'tcx, F>(\n     terminator_kind: &TerminatorKind<'tcx>,\n     predicate: F,\n ) -> Option<TerminatorKind<'tcx>>"}]}