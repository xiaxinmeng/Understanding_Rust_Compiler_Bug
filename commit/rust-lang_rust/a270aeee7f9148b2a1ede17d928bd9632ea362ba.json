{"sha": "a270aeee7f9148b2a1ede17d928bd9632ea362ba", "node_id": "C_kwDOAAsO6NoAKGEyNzBhZWVlN2Y5MTQ4YjJhMWVkZTE3ZDkyOGJkOTYzMmVhMzYyYmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-14T09:31:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-14T09:31:04Z"}, "message": "Rollup merge of #103644 - catlee:catlee/option-question-mark-docs, r=workingjubilee\n\nAdd docs for question mark operator for Option\n\nAs a beginner learning rust, it took me a while to figure out what `?` was doing with Options. I think the documentation of this could be improved.\n\nI've used the question mark documentation from the `Result` type as a template here, and tried to come up with a simple example as well.", "tree": {"sha": "3c9fa9e846936d9bac491a51016652516a4861f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9fa9e846936d9bac491a51016652516a4861f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a270aeee7f9148b2a1ede17d928bd9632ea362ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmZfYCRBK7hj4Ov3rIwAAWGkIAEA8LIdgKQ8k/nQux4tKJlEA\nhfK+Kng17PqZd6Xt57S5J6d1KGFJHr8fNkXzC8ggS5b6Xeb3WEAj1DvKKGVUGbku\nH22XvZLnb0NNVV/yqRYp5BsV7K6TkVpicQZ7Erl6LAHv3M5Ox5sb7AW/LhBM648d\nPBpza5Yjvw7wSh1atB+i7IohrkQKXi13OhnpOyfMRt7GvL5shlfWHuvGuwjJSTOR\nqsLTdVyFd9TMRHa1kumVc01CNufWjHnUngUH5Q/RiXhrRA55M0E2lJFC96ujwgLY\nuZ8v7BpoJ80XjM9uOiBpR1/VA3kyisIgp2DPYljIeW+vkrekjH2evTjbeCLoroQ=\n=ykvC\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c9fa9e846936d9bac491a51016652516a4861f2\nparent 309c469eece74cd9b83328d18302f1a177d0df7f\nparent e0fd37dcf79c8624092ccd0e1463cd239074ec83\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671010264 +0100\ncommitter GitHub <noreply@github.com> 1671010264 +0100\n\nRollup merge of #103644 - catlee:catlee/option-question-mark-docs, r=workingjubilee\n\nAdd docs for question mark operator for Option\n\nAs a beginner learning rust, it took me a while to figure out what `?` was doing with Options. I think the documentation of this could be improved.\n\nI've used the question mark documentation from the `Result` type as a template here, and tried to come up with a simple example as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a270aeee7f9148b2a1ede17d928bd9632ea362ba", "html_url": "https://github.com/rust-lang/rust/commit/a270aeee7f9148b2a1ede17d928bd9632ea362ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a270aeee7f9148b2a1ede17d928bd9632ea362ba/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309c469eece74cd9b83328d18302f1a177d0df7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/309c469eece74cd9b83328d18302f1a177d0df7f", "html_url": "https://github.com/rust-lang/rust/commit/309c469eece74cd9b83328d18302f1a177d0df7f"}, {"sha": "e0fd37dcf79c8624092ccd0e1463cd239074ec83", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0fd37dcf79c8624092ccd0e1463cd239074ec83", "html_url": "https://github.com/rust-lang/rust/commit/e0fd37dcf79c8624092ccd0e1463cd239074ec83"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "39462dca4ff3ea46b1f7c8ecf7216eb9b34b624a", "filename": "library/core/src/option.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a270aeee7f9148b2a1ede17d928bd9632ea362ba/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a270aeee7f9148b2a1ede17d928bd9632ea362ba/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=a270aeee7f9148b2a1ede17d928bd9632ea362ba", "patch": "@@ -72,6 +72,50 @@\n //! }\n //! ```\n //!\n+//! # The question mark operator, `?`\n+//!\n+//! Similar to the [`Result`] type, when writing code that calls many functions that return the\n+//! [`Option`] type, handling `Some`/`None` can be tedious. The question mark\n+//! operator, [`?`], hides some of the boilerplate of propagating values\n+//! up the call stack.\n+//!\n+//! It replaces this:\n+//!\n+//! ```\n+//! # #![allow(dead_code)]\n+//! fn add_last_numbers(stack: &mut Vec<i32>) -> Option<i32> {\n+//!     let a = stack.pop();\n+//!     let b = stack.pop();\n+//!\n+//!     match (a, b) {\n+//!         (Some(x), Some(y)) => Some(x + y),\n+//!         _ => None,\n+//!     }\n+//! }\n+//!\n+//! ```\n+//!\n+//! With this:\n+//!\n+//! ```\n+//! # #![allow(dead_code)]\n+//! fn add_last_numbers(stack: &mut Vec<i32>) -> Option<i32> {\n+//!     Some(stack.pop()? + stack.pop()?)\n+//! }\n+//! ```\n+//!\n+//! *It's much nicer!*\n+//!\n+//! Ending the expression with [`?`] will result in the [`Some`]'s unwrapped value, unless the\n+//! result is [`None`], in which case [`None`] is returned early from the enclosing function.\n+//!\n+//! [`?`] can be used in functions that return [`Option`] because of the\n+//! early return of [`None`] that it provides.\n+//!\n+//! [`?`]: crate::ops::Try\n+//! [`Some`]: Some\n+//! [`None`]: None\n+//!\n //! # Representation\n //!\n //! Rust guarantees to optimize the following types `T` such that"}, {"sha": "f00c40f35d584765176c7c46a708d993bb240326", "filename": "library/core/src/result.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a270aeee7f9148b2a1ede17d928bd9632ea362ba/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a270aeee7f9148b2a1ede17d928bd9632ea362ba/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=a270aeee7f9148b2a1ede17d928bd9632ea362ba", "patch": "@@ -209,11 +209,10 @@\n //!\n //! *It's much nicer!*\n //!\n-//! Ending the expression with [`?`] will result in the unwrapped\n-//! success ([`Ok`]) value, unless the result is [`Err`], in which case\n-//! [`Err`] is returned early from the enclosing function.\n+//! Ending the expression with [`?`] will result in the [`Ok`]'s unwrapped value, unless the result\n+//! is [`Err`], in which case [`Err`] is returned early from the enclosing function.\n //!\n-//! [`?`] can only be used in functions that return [`Result`] because of the\n+//! [`?`] can be used in functions that return [`Result`] because of the\n //! early return of [`Err`] that it provides.\n //!\n //! [`expect`]: Result::expect"}]}