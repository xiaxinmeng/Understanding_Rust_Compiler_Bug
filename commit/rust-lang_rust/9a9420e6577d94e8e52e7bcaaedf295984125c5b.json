{"sha": "9a9420e6577d94e8e52e7bcaaedf295984125c5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOTQyMGU2NTc3ZDk0ZThlNTJlN2JjYWFlZGYyOTU5ODQxMjVjNWI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-27T23:59:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-27T23:59:14Z"}, "message": "Rollup merge of #41523 - estebank:moved, r=arielb1\n\nPoint at variable moved by closure\n\nFix #41482, #31752.", "tree": {"sha": "a4ccd14045a0e390836f237dc65e400f307ccec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ccd14045a0e390836f237dc65e400f307ccec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a9420e6577d94e8e52e7bcaaedf295984125c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9420e6577d94e8e52e7bcaaedf295984125c5b", "html_url": "https://github.com/rust-lang/rust/commit/9a9420e6577d94e8e52e7bcaaedf295984125c5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a9420e6577d94e8e52e7bcaaedf295984125c5b/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35227db6e669cebb59b7fe09cccf4e41276752d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/35227db6e669cebb59b7fe09cccf4e41276752d3", "html_url": "https://github.com/rust-lang/rust/commit/35227db6e669cebb59b7fe09cccf4e41276752d3"}, {"sha": "1ca1483113936b0f23b612f82bb84881435c483b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca1483113936b0f23b612f82bb84881435c483b", "html_url": "https://github.com/rust-lang/rust/commit/1ca1483113936b0f23b612f82bb84881435c483b"}], "stats": {"total": 83, "additions": 63, "deletions": 20}, "files": [{"sha": "ebe2de584095461acf5e9fcdaac5734e479c3738", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=9a9420e6577d94e8e52e7bcaaedf295984125c5b", "patch": "@@ -11,6 +11,7 @@\n use borrowck::BorrowckCtxt;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n+use rustc::middle::mem_categorization::NoteClosureEnv;\n use rustc::middle::mem_categorization::InteriorOffsetKind as Kind;\n use rustc::ty;\n use syntax::ast;\n@@ -71,10 +72,12 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         let mut err = report_cannot_move_out_of(bccx, error.move_from.clone());\n         let mut is_first_note = true;\n         for move_to in &error.move_to_places {\n-            err = note_move_destination(err, move_to.span,\n-                                  move_to.name, is_first_note);\n+            err = note_move_destination(err, move_to.span, move_to.name, is_first_note);\n             is_first_note = false;\n         }\n+        if let NoteClosureEnv(upvar_id) = error.move_from.note {\n+            err.span_label(bccx.tcx.hir.span(upvar_id.var_id), &\"captured outer variable\");\n+        }\n         err.emit();\n     }\n }"}, {"sha": "9244c12347d952280cf449b80b14ce821fb49ef8", "filename": "src/test/ui/borrowck/borrowck-in-static.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs?ref=9a9420e6577d94e8e52e7bcaaedf295984125c5b", "patch": "@@ -11,7 +11,7 @@\n // check that borrowck looks inside consts/statics\n \n static FN : &'static (Fn() -> (Box<Fn()->Box<i32>>) + Sync) = &|| {\n-    let x = Box::new(0);\n+    let x = Box::new(0); //~ NOTE moved\n     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n };\n ", "previous_filename": "src/test/compile-fail/borrowck/borrowck-in-static.rs"}, {"sha": "6083a82b1b6de29eb926114b8b6a37a58b31884c", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=9a9420e6577d94e8e52e7bcaaedf295984125c5b", "patch": "@@ -0,0 +1,10 @@\n+error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n+  --> $DIR/borrowck-in-static.rs:15:17\n+   |\n+14 |     let x = Box::new(0); //~ NOTE moved\n+   |         - captured outer variable\n+15 |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+   |                 ^ cannot move out of captured outer variable in an `Fn` closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "9c89c26de006a4a49ccd27c484391cf46190c8b1", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs?ref=9a9420e6577d94e8e52e7bcaaedf295984125c5b", "patch": "@@ -16,7 +16,7 @@ fn call<F>(f: F) where F : Fn() {\n }\n \n fn main() {\n-    let y = vec![format!(\"World\")];\n+    let y = vec![format!(\"World\")];  //~ NOTE moved\n     call(|| {\n         y.into_iter();\n         //~^ ERROR cannot move out of captured outer variable in an `Fn` closure", "previous_filename": "src/test/compile-fail/unboxed-closures-move-upvar-from-non-once-ref-closure.rs"}, {"sha": "dbfcb2e0c2f95fbef0c71d52e7ed596c37c334eb", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=9a9420e6577d94e8e52e7bcaaedf295984125c5b", "patch": "@@ -0,0 +1,11 @@\n+error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n+  --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n+   |\n+19 |     let y = vec![format!(\"World\")];  //~ NOTE moved\n+   |         - captured outer variable\n+20 |     call(|| {\n+21 |         y.into_iter();\n+   |         ^ cannot move out of captured outer variable in an `Fn` closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "29fea052b06c2f0c447dde602dbf40d001f0a33c", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs?ref=9a9420e6577d94e8e52e7bcaaedf295984125c5b", "patch": "@@ -21,8 +21,11 @@ struct Test<'a> {\n fn call<F>(mut f: F) where F: FnMut(Fn) {\n     f(Box::new(|| {\n     //~^ ERROR: cannot borrow `f` as mutable more than once\n+    //~| NOTE first mutable borrow occurs here\n+    //~| NOTE second mutable borrow occurs here\n         f((Box::new(|| {})))\n     }));\n+    //~^ NOTE first borrow ends here\n }\n \n fn test1() {\n@@ -32,15 +35,21 @@ fn test1() {\n }\n \n fn test2<F>(f: &F) where F: FnMut() {\n-    (*f)(); //~ ERROR: cannot borrow immutable borrowed content `*f` as mutable\n+    //~^ NOTE use `&mut F` here to make mutable\n+    (*f)();\n+    //~^ ERROR cannot borrow immutable borrowed content `*f` as mutable\n+    //~| NOTE cannot borrow as mutable\n }\n \n fn test3<F>(f: &mut F) where F: FnMut() {\n     (*f)();\n }\n \n fn test4(f: &Test) {\n-    f.f.call_mut(()) //~ ERROR: cannot borrow immutable `Box` content `*f.f` as mutable\n+    //~^ NOTE use `&mut Test` here to make mutable\n+    f.f.call_mut(())\n+    //~^ ERROR: cannot borrow immutable `Box` content `*f.f` as mutable\n+    //~| NOTE cannot borrow as mutable\n }\n \n fn test5(f: &mut Test) {\n@@ -57,10 +66,14 @@ fn test6() {\n fn test7() {\n     fn foo<F>(_: F) where F: FnMut(Box<FnMut(isize)>, isize) {}\n     let mut f = |g: Box<FnMut(isize)>, b: isize| {};\n+    //~^ NOTE moved\n     f(Box::new(|a| {\n+    //~^ NOTE borrow of `f` occurs here\n         foo(f);\n         //~^ ERROR cannot move `f` into closure because it is borrowed\n         //~| ERROR cannot move out of captured outer variable in an `FnMut` closure\n+        //~| NOTE move into closure occurs here\n+        //~| NOTE cannot move out of captured outer variable in an `FnMut` closure\n     }), 3);\n }\n "}, {"sha": "4ece8bc6af10fb06867356f608244c382ff823a5", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a9420e6577d94e8e52e7bcaaedf295984125c5b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=9a9420e6577d94e8e52e7bcaaedf295984125c5b", "patch": "@@ -5,40 +5,46 @@ error[E0499]: cannot borrow `f` as mutable more than once at a time\n    |     -          ^^ second mutable borrow occurs here\n    |     |\n    |     first mutable borrow occurs here\n-23 |     //~^ ERROR: cannot borrow `f` as mutable more than once\n-24 |         f((Box::new(|| {})))\n+...\n+26 |         f((Box::new(|| {})))\n    |         - borrow occurs due to use of `f` in closure\n-25 |     }));\n+27 |     }));\n    |       - first borrow ends here\n \n error: cannot borrow immutable borrowed content `*f` as mutable\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:35:5\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:39:5\n    |\n-34 | fn test2<F>(f: &F) where F: FnMut() {\n+37 | fn test2<F>(f: &F) where F: FnMut() {\n    |                -- use `&mut F` here to make mutable\n-35 |     (*f)(); //~ ERROR: cannot borrow immutable borrowed content `*f` as mutable\n+38 |     //~^ NOTE use `&mut F` here to make mutable\n+39 |     (*f)();\n    |     ^^^^ cannot borrow as mutable\n \n error: cannot borrow immutable `Box` content `*f.f` as mutable\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:43:5\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:50:5\n    |\n-42 | fn test4(f: &Test) {\n+48 | fn test4(f: &Test) {\n    |             ----- use `&mut Test` here to make mutable\n-43 |     f.f.call_mut(()) //~ ERROR: cannot borrow immutable `Box` content `*f.f` as mutable\n+49 |     //~^ NOTE use `&mut Test` here to make mutable\n+50 |     f.f.call_mut(())\n    |     ^^^ cannot borrow as mutable\n \n error[E0504]: cannot move `f` into closure because it is borrowed\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:61:13\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:72:13\n    |\n-60 |     f(Box::new(|a| {\n+70 |     f(Box::new(|a| {\n    |     - borrow of `f` occurs here\n-61 |         foo(f);\n+71 |     //~^ NOTE borrow of `f` occurs here\n+72 |         foo(f);\n    |             ^ move into closure occurs here\n \n error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:61:13\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:72:13\n    |\n-61 |         foo(f);\n+68 |     let mut f = |g: Box<FnMut(isize)>, b: isize| {};\n+   |         ----- captured outer variable\n+...\n+72 |         foo(f);\n    |             ^ cannot move out of captured outer variable in an `FnMut` closure\n \n error: aborting due to 5 previous errors"}]}