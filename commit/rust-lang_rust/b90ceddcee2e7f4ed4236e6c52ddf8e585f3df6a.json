{"sha": "b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MGNlZGRjZWUyZTdmNGVkNDIzNmU2YzUyZGRmOGU1ODVmM2RmNmE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-23T23:09:23Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-26T04:29:30Z"}, "message": "Refactor `ensure_complete_parse`.", "tree": {"sha": "583c922fd2e8b1678f08b4a8872a533edde65f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/583c922fd2e8b1678f08b4a8872a533edde65f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a", "html_url": "https://github.com/rust-lang/rust/commit/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8467b62d572eabedf50c09b52f177e87160e96", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8467b62d572eabedf50c09b52f177e87160e96", "html_url": "https://github.com/rust-lang/rust/commit/4a8467b62d572eabedf50c09b52f177e87160e96"}], "stats": {"total": 76, "additions": 31, "deletions": 45}, "files": [{"sha": "62339695807a7b5abdfb4b274659dc160faf574d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast::{Block, Crate, Ident, Mac_, PatKind};\n-use ast::{MacStmtStyle, StmtKind, ItemKind};\n+use ast::{Name, MacStmtStyle, StmtKind, ItemKind};\n use ast;\n use ext::hygiene::Mark;\n use ext::placeholders::{placeholder, PlaceholderExpander};\n@@ -299,10 +299,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         attr::mark_used(&attr);\n+        let name = intern(&attr.name());\n         self.cx.bt_push(ExpnInfo {\n             call_site: attr.span,\n             callee: NameAndSpan {\n-                format: MacroAttribute(intern(&attr.name())),\n+                format: MacroAttribute(name),\n                 span: Some(attr.span),\n                 allow_internal_unstable: false,\n             }\n@@ -325,7 +326,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let item_toks = TokenStream::from_tts(tts_for_item(&item, &self.cx.parse_sess));\n \n                 let tok_result = mac.expand(self.cx, attr.span, attr_toks, item_toks);\n-                self.parse_expansion(tok_result, kind, attr.span)\n+                self.parse_expansion(tok_result, kind, name, attr.span)\n             }\n             _ => unreachable!(),\n         }\n@@ -424,7 +425,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n                 let toks = TokenStream::from_tts(marked_tts);\n                 let tok_result = expandfun.expand(self.cx, span, toks);\n-                Some(self.parse_expansion(tok_result, kind, span))\n+                Some(self.parse_expansion(tok_result, kind, extname, span))\n             }\n         };\n \n@@ -443,7 +444,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         })\n     }\n \n-    fn parse_expansion(&mut self, toks: TokenStream, kind: ExpansionKind, span: Span) -> Expansion {\n+    fn parse_expansion(&mut self, toks: TokenStream, kind: ExpansionKind, name: Name, span: Span)\n+                       -> Expansion {\n         let mut parser = self.cx.new_parser_from_tts(&toks.to_tts());\n         let expansion = match parser.parse_expansion(kind, false) {\n             Ok(expansion) => expansion,\n@@ -452,13 +454,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 return kind.dummy(span);\n             }\n         };\n-        parser.ensure_complete_parse(kind == ExpansionKind::Expr, |parser| {\n-            let msg = format!(\"macro expansion ignores token `{}` and any following\",\n-                              parser.this_token_to_string());\n-            parser.diagnostic().struct_span_err(parser.span, &msg)\n-                .span_note(span, \"caused by the macro expansion here\")\n-                .emit();\n-        });\n+        parser.ensure_complete_parse(name, kind.name(), span);\n         // FIXME better span info\n         expansion.fold_with(&mut ChangeSpan { span: span })\n     }"}, {"sha": "d222de2dd36c6c4cc8739960c0277108d26d430a", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a", "patch": "@@ -39,32 +39,19 @@ pub struct ParserAnyMacro<'a> {\n }\n \n impl<'a> ParserAnyMacro<'a> {\n-    /// Make sure we don't have any tokens left to parse, so we don't\n-    /// silently drop anything. `allow_semi` is so that \"optional\"\n-    /// semicolons at the end of normal expressions aren't complained\n-    /// about e.g. the semicolon in `macro_rules! kapow { () => {\n-    /// panic!(); } }` doesn't get picked up by .parse_expr(), but it's\n-    /// allowed to be there.\n-    fn ensure_complete_parse(&mut self, allow_semi: bool, context: &str) {\n+    pub fn make(mut self: Box<ParserAnyMacro<'a>>, kind: ExpansionKind) -> Expansion {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser } = *self;\n-        parser.ensure_complete_parse(allow_semi, |parser| {\n-            let token_str = parser.this_token_to_string();\n-            let msg = format!(\"macro expansion ignores token `{}` and any \\\n-                               following\",\n-                              token_str);\n-            let span = parser.span;\n-            let mut err = parser.diagnostic().struct_span_err(span, &msg);\n-            let msg = format!(\"caused by the macro expansion here; the usage \\\n-                               of `{}!` is likely invalid in {} context\",\n-                               macro_ident, context);\n-            err.span_note(site_span, &msg)\n-               .emit();\n-        });\n-    }\n+        let expansion = panictry!(parser.parse_expansion(kind, true));\n \n-    pub fn make(mut self: Box<ParserAnyMacro<'a>>, kind: ExpansionKind) -> Expansion {\n-        let expansion = panictry!(self.parser.parse_expansion(kind, true));\n-        self.ensure_complete_parse(kind == ExpansionKind::Expr, kind.name());\n+        // We allow semicolons at the end of expressions -- e.g. the semicolon in\n+        // `macro_rules! m { () => { panic!(); } }` isn't parsed by `.parse_expr()`,\n+        // but `m!()` is allowed in expression positions (c.f. issue #34706).\n+        if kind == ExpansionKind::Expr && parser.token == token::Semi {\n+            parser.bump();\n+        }\n+\n+        // Make sure we don't have any tokens left to parse so we don't silently drop anything.\n+        parser.ensure_complete_parse(macro_ident.name, kind.name(), site_span);\n         expansion\n     }\n }"}, {"sha": "410ecf068b99578e86cea8d9519282f25e4f3cfe", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b90ceddcee2e7f4ed4236e6c52ddf8e585f3df6a", "patch": "@@ -6172,14 +6172,17 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn ensure_complete_parse<F>(&mut self, allow_semi: bool, on_err: F)\n-        where F: FnOnce(&Parser)\n-    {\n-        if allow_semi && self.token == token::Semi {\n-            self.bump();\n-        }\n-        if self.token != token::Eof {\n-            on_err(self);\n-        }\n+    pub fn ensure_complete_parse(&mut self, macro_name: ast::Name, kind_name: &str, span: Span) {\n+        if self.token == token::Eof {\n+            return\n+        }\n+\n+        let msg = format!(\"macro expansion ignores token `{}` and any following\",\n+                          self.this_token_to_string());\n+        let mut err = self.diagnostic().struct_span_err(self.span, &msg);\n+        let msg = format!(\"caused by the macro expansion here; the usage \\\n+                           of `{}!` is likely invalid in {} context\",\n+                           macro_name, kind_name);\n+        err.span_note(span, &msg).emit();\n     }\n }"}]}