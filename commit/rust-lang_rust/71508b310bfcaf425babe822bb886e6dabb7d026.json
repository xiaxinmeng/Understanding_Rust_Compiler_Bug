{"sha": "71508b310bfcaf425babe822bb886e6dabb7d026", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNTA4YjMxMGJmY2FmNDI1YmFiZTgyMmJiODg2ZTZkYWJiN2QwMjY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-12-26T20:18:20Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-12-26T20:18:20Z"}, "message": "Merge pull request #728 from marcusklaas/typed-mut-self\n\nformat typed mut self", "tree": {"sha": "4fa835e1f20d68f8dfed9f0f950d741a4a857016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fa835e1f20d68f8dfed9f0f950d741a4a857016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71508b310bfcaf425babe822bb886e6dabb7d026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71508b310bfcaf425babe822bb886e6dabb7d026", "html_url": "https://github.com/rust-lang/rust/commit/71508b310bfcaf425babe822bb886e6dabb7d026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71508b310bfcaf425babe822bb886e6dabb7d026/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "856bf043d146d65abcf7611382c3880ea0e06fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/856bf043d146d65abcf7611382c3880ea0e06fc6", "html_url": "https://github.com/rust-lang/rust/commit/856bf043d146d65abcf7611382c3880ea0e06fc6"}, {"sha": "2069abcca4e4d07e1b17e35584d1917cc704cded", "url": "https://api.github.com/repos/rust-lang/rust/commits/2069abcca4e4d07e1b17e35584d1917cc704cded", "html_url": "https://github.com/rust-lang/rust/commit/2069abcca4e4d07e1b17e35584d1917cc704cded"}], "stats": {"total": 136, "additions": 80, "deletions": 56}, "files": [{"sha": "12f879eb59c696e9d6252343483ba47a4a01df32", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71508b310bfcaf425babe822bb886e6dabb7d026/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71508b310bfcaf425babe822bb886e6dabb7d026/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=71508b310bfcaf425babe822bb886e6dabb7d026", "patch": "@@ -27,7 +27,6 @@ use config::BlockIndentStyle;\n \n use syntax::{ast, ptr};\n use syntax::codemap::{mk_sp, Span};\n-use syntax::print::pprust;\n \n pub fn rewrite_chain(mut expr: &ast::Expr,\n                      context: &RewriteContext,\n@@ -233,7 +232,9 @@ fn rewrite_method_call(method_name: ast::Ident,\n     let (lo, type_str) = if types.is_empty() {\n         (args[0].span.hi, String::new())\n     } else {\n-        let type_list = types.iter().map(|ty| pprust::ty_to_string(ty)).collect::<Vec<_>>();\n+        let type_list: Vec<_> = try_opt!(types.iter()\n+                                              .map(|ty| ty.rewrite(context, width, offset))\n+                                              .collect());\n \n         (types.last().unwrap().span.hi,\n          format!(\"::<{}>\", type_list.join(\", \")))"}, {"sha": "9882278c543a6e78474e12aa18823f6093fdf1ab", "filename": "src/items.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/71508b310bfcaf425babe822bb886e6dabb7d026/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71508b310bfcaf425babe822bb886e6dabb7d026/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=71508b310bfcaf425babe822bb886e6dabb7d026", "patch": "@@ -23,7 +23,6 @@ use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, Struct\n \n use syntax::{ast, abi};\n use syntax::codemap::{Span, BytePos, mk_sp};\n-use syntax::print::pprust;\n use syntax::parse::token;\n \n // Statements of the form\n@@ -901,56 +900,68 @@ impl Rewrite for ast::FunctionRetTy {\n impl Rewrite for ast::Arg {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         if is_named_arg(self) {\n-            if let ast::Ty_::TyInfer = self.ty.node {\n-                wrap_str(pprust::pat_to_string(&self.pat),\n-                         context.config.max_width,\n-                         width,\n-                         offset)\n-            } else {\n-                let mut result = pprust::pat_to_string(&self.pat);\n+            let mut result = try_opt!(self.pat.rewrite(context, width, offset));\n+\n+            if self.ty.node != ast::Ty_::TyInfer {\n                 result.push_str(\": \");\n                 let max_width = try_opt!(width.checked_sub(result.len()));\n                 let ty_str = try_opt!(self.ty.rewrite(context, max_width, offset + result.len()));\n                 result.push_str(&ty_str);\n-                Some(result)\n             }\n+\n+            Some(result)\n         } else {\n             self.ty.rewrite(context, width, offset)\n         }\n     }\n }\n \n-fn rewrite_explicit_self(explicit_self: &ast::ExplicitSelf, args: &[ast::Arg]) -> Option<String> {\n+fn rewrite_explicit_self(explicit_self: &ast::ExplicitSelf,\n+                         args: &[ast::Arg],\n+                         context: &RewriteContext)\n+                         -> Option<String> {\n     match explicit_self.node {\n         ast::ExplicitSelf_::SelfRegion(lt, m, _) => {\n             let mut_str = format_mutability(m);\n             match lt {\n-                Some(ref l) => Some(format!(\"&{} {}self\", pprust::lifetime_to_string(l), mut_str)),\n+                Some(ref l) => {\n+                    let lifetime_str = try_opt!(l.rewrite(context,\n+                                                          usize::max_value(),\n+                                                          Indent::empty()));\n+                    Some(format!(\"&{} {}self\", lifetime_str, mut_str))\n+                }\n                 None => Some(format!(\"&{}self\", mut_str)),\n             }\n         }\n         ast::ExplicitSelf_::SelfExplicit(ref ty, _) => {\n-            Some(format!(\"self: {}\", pprust::ty_to_string(ty)))\n+            assert!(!args.is_empty(), \"&[ast::Arg] shouldn't be empty.\");\n+\n+            let mutability = explicit_self_mutability(&args[0]);\n+            let type_str = try_opt!(ty.rewrite(context, usize::max_value(), Indent::empty()));\n+\n+            Some(format!(\"{}self: {}\", format_mutability(mutability), type_str))\n         }\n         ast::ExplicitSelf_::SelfValue(_) => {\n-            assert!(args.len() >= 1, \"&[ast::Arg] shouldn't be empty.\");\n+            assert!(!args.is_empty(), \"&[ast::Arg] shouldn't be empty.\");\n \n-            // this hacky solution caused by absence of `Mutability` in `SelfValue`.\n-            let mut_str = {\n-                if let ast::Pat_::PatIdent(ast::BindingMode::BindByValue(mutability), _, _) =\n-                       args[0].pat.node {\n-                    format_mutability(mutability)\n-                } else {\n-                    panic!(\"there is a bug or change in structure of AST, aborting.\");\n-                }\n-            };\n+            let mutability = explicit_self_mutability(&args[0]);\n \n-            Some(format!(\"{}self\", mut_str))\n+            Some(format!(\"{}self\", format_mutability(mutability)))\n         }\n         _ => None,\n     }\n }\n \n+// Hacky solution caused by absence of `Mutability` in `SelfValue` and\n+// `SelfExplicit` variants of `ast::ExplicitSelf_`.\n+fn explicit_self_mutability(arg: &ast::Arg) -> ast::Mutability {\n+    if let ast::Pat_::PatIdent(ast::BindingMode::BindByValue(mutability), _, _) = arg.pat.node {\n+        mutability\n+    } else {\n+        unreachable!()\n+    }\n+}\n+\n pub fn span_lo_for_arg(arg: &ast::Arg) -> BytePos {\n     if is_named_arg(arg) {\n         arg.pat.span.lo\n@@ -1229,7 +1240,7 @@ fn rewrite_args(context: &RewriteContext,\n     // FIXME: the comment for the self argument is dropped. This is blocked\n     // on rust issue #27522.\n     let min_args = explicit_self.and_then(|explicit_self| {\n-                                    rewrite_explicit_self(explicit_self, args)\n+                                    rewrite_explicit_self(explicit_self, args, context)\n                                 })\n                                 .map(|self_str| {\n                                     arg_item_strs[0] = self_str;"}, {"sha": "911bf925293c79fd403eec09354f592f51c39427", "filename": "src/types.rs", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/71508b310bfcaf425babe822bb886e6dabb7d026/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71508b310bfcaf425babe822bb886e6dabb7d026/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=71508b310bfcaf425babe822bb886e6dabb7d026", "patch": "@@ -135,12 +135,7 @@ impl<'a> SegmentParam<'a> {\n impl<'a> Rewrite for SegmentParam<'a> {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match *self {\n-            SegmentParam::LifeTime(ref lt) => {\n-                wrap_str(pprust::lifetime_to_string(lt),\n-                         context.config.max_width,\n-                         width,\n-                         offset)\n-            }\n+            SegmentParam::LifeTime(ref lt) => lt.rewrite(context, width, offset),\n             SegmentParam::Type(ref ty) => ty.rewrite(context, width, offset),\n             SegmentParam::Binding(ref binding) => {\n                 let mut result = format!(\"{} = \", binding.ident);\n@@ -332,12 +327,7 @@ impl Rewrite for ast::WherePredicate {\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate { ref lifetime,\n                                                                              ref bounds,\n                                                                              .. }) => {\n-                format!(\"{}: {}\",\n-                        pprust::lifetime_to_string(lifetime),\n-                        bounds.iter()\n-                              .map(pprust::lifetime_to_string)\n-                              .collect::<Vec<_>>()\n-                              .join(\" + \"))\n+                try_opt!(rewrite_bounded_lifetime(lifetime, bounds.iter(), context, width, offset))\n             }\n             ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { ref path, ref ty, .. }) => {\n                 let ty_str = try_opt!(ty.rewrite(context, width, offset));\n@@ -360,18 +350,27 @@ impl Rewrite for ast::WherePredicate {\n \n impl Rewrite for ast::LifetimeDef {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n-        let result = if self.bounds.is_empty() {\n-            pprust::lifetime_to_string(&self.lifetime)\n-        } else {\n-            format!(\"{}: {}\",\n-                    pprust::lifetime_to_string(&self.lifetime),\n-                    self.bounds\n-                        .iter()\n-                        .map(pprust::lifetime_to_string)\n-                        .collect::<Vec<_>>()\n-                        .join(\" + \"))\n-        };\n+        rewrite_bounded_lifetime(&self.lifetime, self.bounds.iter(), context, width, offset)\n+    }\n+}\n+\n+fn rewrite_bounded_lifetime<'b, I>(lt: &ast::Lifetime,\n+                                   bounds: I,\n+                                   context: &RewriteContext,\n+                                   width: usize,\n+                                   offset: Indent)\n+                                   -> Option<String>\n+    where I: ExactSizeIterator<Item = &'b ast::Lifetime>\n+{\n+    let result = try_opt!(lt.rewrite(context, width, offset));\n \n+    if bounds.len() == 0 {\n+        Some(result)\n+    } else {\n+        let appendix: Vec<_> = try_opt!(bounds.into_iter()\n+                                              .map(|b| b.rewrite(context, width, offset))\n+                                              .collect());\n+        let result = format!(\"{}: {}\", result, appendix.join(\" + \"));\n         wrap_str(result, context.config.max_width, width, offset)\n     }\n }\n@@ -386,16 +385,20 @@ impl Rewrite for ast::TyParamBound {\n                 let budget = try_opt!(width.checked_sub(1));\n                 Some(format!(\"?{}\", try_opt!(tref.rewrite(context, budget, offset + 1))))\n             }\n-            ast::TyParamBound::RegionTyParamBound(ref l) => {\n-                wrap_str(pprust::lifetime_to_string(l),\n-                         context.config.max_width,\n-                         width,\n-                         offset)\n-            }\n+            ast::TyParamBound::RegionTyParamBound(ref l) => l.rewrite(context, width, offset),\n         }\n     }\n }\n \n+impl Rewrite for ast::Lifetime {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n+        wrap_str(pprust::lifetime_to_string(self),\n+                 context.config.max_width,\n+                 width,\n+                 offset)\n+    }\n+}\n+\n impl Rewrite for ast::TyParamBounds {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         let strs: Vec<_> = try_opt!(self.iter()\n@@ -483,7 +486,10 @@ impl Rewrite for ast::Ty {\n                 let mut_len = mut_str.len();\n                 Some(match *lifetime {\n                     Some(ref lifetime) => {\n-                        let lt_str = pprust::lifetime_to_string(lifetime);\n+                        let lt_budget = try_opt!(width.checked_sub(2 + mut_len));\n+                        let lt_str = try_opt!(lifetime.rewrite(context,\n+                                                               lt_budget,\n+                                                               offset + 2 + mut_len));\n                         let lt_len = lt_str.len();\n                         let budget = try_opt!(width.checked_sub(2 + mut_len + lt_len));\n                         format!(\"&{} {}{}\","}, {"sha": "016350ca6d63d60d37f916aeb88d5ad34118cd1e", "filename": "tests/source/impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71508b310bfcaf425babe822bb886e6dabb7d026/tests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71508b310bfcaf425babe822bb886e6dabb7d026/tests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimpls.rs?ref=71508b310bfcaf425babe822bb886e6dabb7d026", "patch": "@@ -58,3 +58,5 @@ impl Blah {\n     fn boop() {}\n     add_fun!();\n }\n+\n+impl X { fn do_parse(  mut  self : X ) {} }"}, {"sha": "9f12a6fd7ffc1fb061a07c6292239978bb3acfab", "filename": "tests/target/impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71508b310bfcaf425babe822bb886e6dabb7d026/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71508b310bfcaf425babe822bb886e6dabb7d026/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=71508b310bfcaf425babe822bb886e6dabb7d026", "patch": "@@ -72,3 +72,7 @@ impl Blah {\n     fn boop() {}\n     add_fun!();\n }\n+\n+impl X {\n+    fn do_parse(mut self: X) {}\n+}"}]}