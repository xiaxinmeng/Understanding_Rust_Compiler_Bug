{"sha": "436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "node_id": "C_kwDOAAsO6NoAKDQzNmFmZGYxZmVhYjFhOTI4NTM4ZTgzNjBhYjZiZmQzZTFmZWYyYWI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-21T11:44:50Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-27T18:52:47Z"}, "message": "Don't skip all directories when tidy-checking", "tree": {"sha": "96201d3aa2f8fb110959f1f8df70f0d60fac9b14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96201d3aa2f8fb110959f1f8df70f0d60fac9b14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "html_url": "https://github.com/rust-lang/rust/commit/436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd19135b044cd21a9c3ae7ae87620bf41a208066", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd19135b044cd21a9c3ae7ae87620bf41a208066", "html_url": "https://github.com/rust-lang/rust/commit/dd19135b044cd21a9c3ae7ae87620bf41a208066"}], "stats": {"total": 132, "additions": 76, "deletions": 56}, "files": [{"sha": "0aebfc4aad2c8d0af1276c3c47f0065495aa952e", "filename": "src/tools/replace-version-placeholder/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let version_str = version_str.trim();\n     walk::walk(\n         &root_path,\n-        |path| {\n+        |path, _is_dir| {\n             walk::filter_dirs(path)\n                 // We exempt these as they require the placeholder\n                 // for their operation"}, {"sha": "fdc411c892530ce3e14886c6b9bc48e87e0165b8", "filename": "src/tools/tidy/src/alphabetical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -95,7 +95,7 @@ fn check_section<'a>(\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    walk(path, filter_dirs, &mut |entry, contents| {\n+    walk(path, |path, _is_dir| filter_dirs(path), &mut |entry, contents| {\n         let file = &entry.path().display();\n \n         let mut lines = contents.lines().enumerate().peekable();"}, {"sha": "7e5b4d810ba9325c1733b052804495acaccaf856", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -103,36 +103,40 @@ mod os_impl {\n \n         // FIXME: we don't need to look at all binaries, only files that have been modified in this branch\n         // (e.g. using `git ls-files`).\n-        walk_no_read(&[path], |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n-            let file = entry.path();\n-            let extension = file.extension();\n-            let scripts = [\"py\", \"sh\", \"ps1\"];\n-            if scripts.into_iter().any(|e| extension == Some(OsStr::new(e))) {\n-                return;\n-            }\n-\n-            if t!(is_executable(&file), file) {\n-                let rel_path = file.strip_prefix(path).unwrap();\n-                let git_friendly_path = rel_path.to_str().unwrap().replace(\"\\\\\", \"/\");\n-\n-                if ALLOWED.contains(&git_friendly_path.as_str()) {\n+        walk_no_read(\n+            &[path],\n+            |path, _is_dir| filter_dirs(path) || path.ends_with(\"src/etc\"),\n+            &mut |entry| {\n+                let file = entry.path();\n+                let extension = file.extension();\n+                let scripts = [\"py\", \"sh\", \"ps1\"];\n+                if scripts.into_iter().any(|e| extension == Some(OsStr::new(e))) {\n                     return;\n                 }\n \n-                let output = Command::new(\"git\")\n-                    .arg(\"ls-files\")\n-                    .arg(&git_friendly_path)\n-                    .current_dir(path)\n-                    .stderr(Stdio::null())\n-                    .output()\n-                    .unwrap_or_else(|e| {\n-                        panic!(\"could not run git ls-files: {e}\");\n-                    });\n-                let path_bytes = rel_path.as_os_str().as_bytes();\n-                if output.status.success() && output.stdout.starts_with(path_bytes) {\n-                    tidy_error!(bad, \"binary checked into source: {}\", file.display());\n+                if t!(is_executable(&file), file) {\n+                    let rel_path = file.strip_prefix(path).unwrap();\n+                    let git_friendly_path = rel_path.to_str().unwrap().replace(\"\\\\\", \"/\");\n+\n+                    if ALLOWED.contains(&git_friendly_path.as_str()) {\n+                        return;\n+                    }\n+\n+                    let output = Command::new(\"git\")\n+                        .arg(\"ls-files\")\n+                        .arg(&git_friendly_path)\n+                        .current_dir(path)\n+                        .stderr(Stdio::null())\n+                        .output()\n+                        .unwrap_or_else(|e| {\n+                            panic!(\"could not run git ls-files: {e}\");\n+                        });\n+                    let path_bytes = rel_path.as_os_str().as_bytes();\n+                    if output.status.success() && output.stdout.starts_with(path_bytes) {\n+                        tidy_error!(bad, \"binary checked into source: {}\", file.display());\n+                    }\n                 }\n-            }\n-        })\n+            },\n+        )\n     }\n }"}, {"sha": "582014d5059d1550c3d36b63a312c7386130d557", "filename": "src/tools/tidy/src/debug_artifacts.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -6,11 +6,21 @@ use std::path::Path;\n const GRAPHVIZ_POSTFLOW_MSG: &str = \"`borrowck_graphviz_postflow` attribute in test\";\n \n pub fn check(test_dir: &Path, bad: &mut bool) {\n-    walk(test_dir, |path| filter_dirs(path) || filter_not_rust(path), &mut |entry, contents| {\n-        for (i, line) in contents.lines().enumerate() {\n-            if line.contains(\"borrowck_graphviz_postflow\") {\n-                tidy_error!(bad, \"{}:{}: {}\", entry.path().display(), i + 1, GRAPHVIZ_POSTFLOW_MSG);\n+    walk(\n+        test_dir,\n+        |path, _is_dir| filter_dirs(path) || filter_not_rust(path),\n+        &mut |entry, contents| {\n+            for (i, line) in contents.lines().enumerate() {\n+                if line.contains(\"borrowck_graphviz_postflow\") {\n+                    tidy_error!(\n+                        bad,\n+                        \"{}:{}: {}\",\n+                        entry.path().display(),\n+                        i + 1,\n+                        GRAPHVIZ_POSTFLOW_MSG\n+                    );\n+                }\n             }\n-        }\n-    });\n+        },\n+    );\n }"}, {"sha": "f28f677e0ff22fff13656cec2973b8b26aed1c57", "filename": "src/tools/tidy/src/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -9,7 +9,7 @@ fn is_edition_2021(mut line: &str) -> bool {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    walk(path, |path| filter_dirs(path), &mut |entry, contents| {\n+    walk(path, |path, _is_dir| filter_dirs(path), &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap();\n         if filename != \"Cargo.toml\" {"}, {"sha": "417ace58c325deda7bfa7a0526f5774e1afc86eb", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -129,7 +129,7 @@ fn check_error_codes_docs(\n \n     let mut no_longer_emitted_codes = Vec::new();\n \n-    walk(&docs_path, |_| false, &mut |entry, contents| {\n+    walk(&docs_path, |_, _| false, &mut |entry, contents| {\n         let path = entry.path();\n \n         // Error if the file isn't markdown.\n@@ -321,7 +321,7 @@ fn check_error_codes_used(\n \n     let mut found_codes = Vec::new();\n \n-    walk_many(search_paths, filter_dirs, &mut |entry, contents| {\n+    walk_many(search_paths, |path, _is_dir| filter_dirs(path), &mut |entry, contents| {\n         let path = entry.path();\n \n         // Return early if we aren't looking at a source file."}, {"sha": "2fd4c797b43f19502398f2c16ddaa97822049098", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -102,7 +102,7 @@ pub fn check(\n             &tests_path.join(\"rustdoc-ui\"),\n             &tests_path.join(\"rustdoc\"),\n         ],\n-        |path| {\n+        |path, _is_dir| {\n             filter_dirs(path)\n                 || filter_not_rust(path)\n                 || path.file_name() == Some(OsStr::new(\"features.rs\"))\n@@ -478,7 +478,7 @@ fn map_lib_features(\n ) {\n     walk(\n         base_src_path,\n-        |path| filter_dirs(path) || path.ends_with(\"tests\"),\n+        |path, _is_dir| filter_dirs(path) || path.ends_with(\"tests\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();"}, {"sha": "2f6918510e8bf0a9d92e51b603037f7018fc1e93", "filename": "src/tools/tidy/src/mir_opt_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -11,7 +11,7 @@ fn check_unused_files(path: &Path, bless: bool, bad: &mut bool) {\n \n     walk_no_read(\n         &[&path.join(\"mir-opt\")],\n-        |path| path.file_name() == Some(\"README.md\".as_ref()),\n+        |path, _is_dir| path.file_name() == Some(\"README.md\".as_ref()),\n         &mut |file| {\n             let filepath = file.path();\n             if filepath.extension() == Some(\"rs\".as_ref()) {"}, {"sha": "d40c4ad0711cff175a1521fb0dccca463a8f6455", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -67,7 +67,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     // Sanity check that the complex parsing here works.\n     let mut saw_target_arch = false;\n     let mut saw_cfg_bang = false;\n-    walk(path, filter_dirs, &mut |entry, contents| {\n+    walk(path, |path, _is_dir| filter_dirs(path), &mut |entry, contents| {\n         let file = entry.path();\n         let filestr = file.to_string_lossy().replace(\"\\\\\", \"/\");\n         if !filestr.ends_with(\".rs\") {"}, {"sha": "91776bc989e1d36235f02b69c2b029922f074cc7", "filename": "src/tools/tidy/src/rustdoc_gui_tests.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -5,10 +5,7 @@ use std::path::Path;\n pub fn check(path: &Path, bad: &mut bool) {\n     crate::walk::walk(\n         &path.join(\"rustdoc-gui\"),\n-        |p| {\n-            // If there is no extension, it's very likely a folder and we want to go into it.\n-            p.extension().map(|e| e != \"goml\").unwrap_or(false)\n-        },\n+        |p, is_dir| !is_dir && p.extension().map_or(true, |e| e != \"goml\"),\n         &mut |entry, content| {\n             for line in content.lines() {\n                 if !line.starts_with(\"// \") {"}, {"sha": "a2012db903a1891d36e4f98ca9db104a30a6b0e4", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -227,7 +227,7 @@ fn is_unexplained_ignore(extension: &str, line: &str) -> bool {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    fn skip(path: &Path) -> bool {\n+    fn skip(path: &Path, is_dir: bool) -> bool {\n         if path.file_name().map_or(false, |name| name.to_string_lossy().starts_with(\".#\")) {\n             // vim or emacs temporary file\n             return true;\n@@ -237,8 +237,15 @@ pub fn check(path: &Path, bad: &mut bool) {\n             return true;\n         }\n \n+        // Don't check extensions for directories\n+        if is_dir {\n+            return false;\n+        }\n+\n         let extensions = [\"rs\", \"py\", \"js\", \"sh\", \"c\", \"cpp\", \"h\", \"md\", \"css\", \"ftl\", \"goml\"];\n-        if extensions.iter().all(|e| path.extension() != Some(OsStr::new(e))) {\n+\n+        // NB: don't skip paths without extensions (or else we'll skip all directories and will only check top level files)\n+        if path.extension().map_or(true, |ext| !extensions.iter().any(|e| ext == OsStr::new(e))) {\n             return true;\n         }\n "}, {"sha": "de022be289480893fc955e3a7125eab7bcbc4734", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -37,7 +37,7 @@ struct RevisionInfo<'a> {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    crate::walk::walk(path, filter_not_rust, &mut |entry, content| {\n+    crate::walk::walk(path, |path, _is_dir| filter_not_rust(path), &mut |entry, content| {\n         let file = entry.path().display();\n         let mut header_map = BTreeMap::new();\n         iter_header(content, &mut |cfg, directive| {"}, {"sha": "20b8a2c3b24d47ca8cc90b6486c100d09c99a396", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -51,7 +51,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     check_entries(&path, bad);\n     let (ui, ui_fulldeps) = (path.join(\"ui\"), path.join(\"ui-fulldeps\"));\n     let paths = [ui.as_path(), ui_fulldeps.as_path()];\n-    crate::walk::walk_no_read(&paths, |_| false, &mut |entry| {\n+    crate::walk::walk_no_read(&paths, |_, _| false, &mut |entry| {\n         let file_path = entry.path();\n         if let Some(ext) = file_path.extension() {\n             if ext == \"stderr\" || ext == \"stdout\" {"}, {"sha": "0a5dad8878943cac855dcf48a41cdf7513eb738b", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -20,9 +20,9 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n             && !(path.starts_with(&core_tests) || path.starts_with(&core_benches))\n     };\n \n-    let skip = move |path: &Path| {\n+    let skip = move |path: &Path, is_dir| {\n         let file_name = path.file_name().unwrap_or_default();\n-        if path.is_dir() {\n+        if is_dir {\n             filter_dirs(path)\n                 || path.ends_with(\"src/doc\")\n                 || (file_name == \"tests\" || file_name == \"benches\") && !is_core(path)"}, {"sha": "95a35801d7db40da5326a24504206ab00e1a0bc8", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436afdf1feab1a928538e8360ab6bfd3e1fef2ab/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=436afdf1feab1a928538e8360ab6bfd3e1fef2ab", "patch": "@@ -41,15 +41,15 @@ pub fn filter_not_rust(path: &Path) -> bool {\n \n pub fn walk(\n     path: &Path,\n-    skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n+    skip: impl Clone + Send + Sync + 'static + Fn(&Path, bool) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n     walk_many(&[path], skip, f);\n }\n \n pub fn walk_many(\n     paths: &[&Path],\n-    skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n+    skip: impl Clone + Send + Sync + 'static + Fn(&Path, bool) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n     let mut contents = Vec::new();\n@@ -67,14 +67,16 @@ pub fn walk_many(\n \n pub(crate) fn walk_no_read(\n     paths: &[&Path],\n-    skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n+    skip: impl Send + Sync + 'static + Fn(&Path, bool) -> bool,\n     f: &mut dyn FnMut(&DirEntry),\n ) {\n     let mut walker = ignore::WalkBuilder::new(paths[0]);\n     for path in &paths[1..] {\n         walker.add(path);\n     }\n-    let walker = walker.filter_entry(move |e| !skip(e.path()));\n+    let walker = walker.filter_entry(move |e| {\n+        !skip(e.path(), e.file_type().map(|ft| ft.is_dir()).unwrap_or(false))\n+    });\n     for entry in walker.build() {\n         if let Ok(entry) = entry {\n             if entry.file_type().map_or(true, |kind| kind.is_dir() || kind.is_symlink()) {"}]}