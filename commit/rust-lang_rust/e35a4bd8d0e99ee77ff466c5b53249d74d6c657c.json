{"sha": "e35a4bd8d0e99ee77ff466c5b53249d74d6c657c", "node_id": "C_kwDOAAsO6NoAKGUzNWE0YmQ4ZDBlOTllZTc3ZmY0NjZjNWI1MzI0OWQ3NGQ2YzY1N2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-05T10:26:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-05T10:26:03Z"}, "message": "Rollup merge of #92182 - nnethercote:label-more-build-steps, r=Mark-Simulacrum\n\nLabel more build steps\n\nSome small improvements.\n\nr? ```@Mark-Simulacrum```", "tree": {"sha": "285fdbad618bac361031646cf4a7227712811a6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285fdbad618bac361031646cf4a7227712811a6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1XI8CRBK7hj4Ov3rIwAAp6YIAJGWN3rC1TcqH9PkNpOPDHsw\n2Nsbkpb024vxzDadR3OK+1+r00xdXrq1jTSj6w6T75ySVXA7wimZuyC0pMYyPHiy\nYn3k0iGmOx8bdGWY3VQ2Y7JrmYz6VNm/b29XIxiKm3ajkQDJi5gch5m4YKeDHNl/\nDJMwSj6lCkLRlX+BlImPcxNDMt5OBdozLN3stTEmcr9M4lW6H0MwVlL1niZH9eX3\nY1bvuj/X0h/4z4l/PzDdL3yUUHXS2EcnS5mSxBYGUI/8TRezHs2pTJsf/e99skOq\ntR2lDGLfTdUmKXLT2ZaXg9G2NXF0YLNctXVonzE68eKHXCmvTXPMUWLaOynGQgI=\n=tqnB\n-----END PGP SIGNATURE-----\n", "payload": "tree 285fdbad618bac361031646cf4a7227712811a6f\nparent b03c504742d086df063bfa105a1186bbc01a4b0e\nparent 2e74ca18e43cbaa11300f24cfa0571d7c44d175e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641378363 +0100\ncommitter GitHub <noreply@github.com> 1641378363 +0100\n\nRollup merge of #92182 - nnethercote:label-more-build-steps, r=Mark-Simulacrum\n\nLabel more build steps\n\nSome small improvements.\n\nr? ```@Mark-Simulacrum```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c", "html_url": "https://github.com/rust-lang/rust/commit/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b03c504742d086df063bfa105a1186bbc01a4b0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b03c504742d086df063bfa105a1186bbc01a4b0e", "html_url": "https://github.com/rust-lang/rust/commit/b03c504742d086df063bfa105a1186bbc01a4b0e"}, {"sha": "2e74ca18e43cbaa11300f24cfa0571d7c44d175e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e74ca18e43cbaa11300f24cfa0571d7c44d175e", "html_url": "https://github.com/rust-lang/rust/commit/2e74ca18e43cbaa11300f24cfa0571d7c44d175e"}], "stats": {"total": 37, "additions": 13, "deletions": 24}, "files": [{"sha": "5235a6b8180533ea4269aa35ef423fdeb65637eb", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=e35a4bd8d0e99ee77ff466c5b53249d74d6c657c", "patch": "@@ -974,6 +974,7 @@ def bootstrap_binary(self):\n \n     def build_bootstrap(self):\n         \"\"\"Build bootstrap\"\"\"\n+        print(\"Building rustbuild\")\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)\n@@ -1133,7 +1134,7 @@ def update_submodules(self):\n             recorded_submodules[data[3]] = data[2]\n         for module in filtered_submodules:\n             self.update_submodule(module[0], module[1], recorded_submodules)\n-        print(\"Submodules updated in %.2f seconds\" % (time() - start_time))\n+        print(\"  Submodules updated in %.2f seconds\" % (time() - start_time))\n \n     def set_dist_environment(self, url):\n         \"\"\"Set download URL for normal environment\"\"\""}, {"sha": "9180c5f03af6810974234c15d830d8d9881fe148", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35a4bd8d0e99ee77ff466c5b53249d74d6c657c/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=e35a4bd8d0e99ee77ff466c5b53249d74d6c657c", "patch": "@@ -401,26 +401,19 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                     \"\\n\n Arguments:\n     This subcommand accepts a number of paths to directories to the crates\n-    and/or artifacts to compile. For example:\n-\n-        ./x.py build library/core\n-        ./x.py build library/core library/proc_macro\n-        ./x.py build library/std --stage 1\n-\n-    If no arguments are passed then the complete artifacts for that stage are\n-    also compiled.\n+    and/or artifacts to compile. For example, for a quick build of a usable\n+    compiler:\n \n-        ./x.py build\n-        ./x.py build --stage 1\n+        ./x.py build --stage 1 library/std\n \n-    For a quick build of a usable compiler, you can pass:\n+    This will build a compiler and standard library from the local source code.\n+    Once this is done, build/$ARCH/stage1 contains a usable compiler.\n \n-        ./x.py build --stage 1 library/test\n+    If no arguments are passed then the default artifacts for that stage are\n+    compiled. For example:\n \n-    This will first build everything once (like `--stage 0` without further\n-    arguments would), and then use the compiler built in stage 0 to build\n-    library/test and its dependencies.\n-    Once this is done, build/$ARCH/stage1 contains a usable compiler.\",\n+        ./x.py build --stage 0\n+        ./x.py build \",\n                 );\n             }\n             \"check\" | \"c\" => {\n@@ -430,14 +423,9 @@ Arguments:\n     This subcommand accepts a number of paths to directories to the crates\n     and/or artifacts to compile. For example:\n \n-        ./x.py check library/core\n-        ./x.py check library/core library/proc_macro\n+        ./x.py check library/std\n \n-    If no arguments are passed then the complete artifacts are compiled: std, test, and rustc. Note\n-    also that since we use `cargo check`, by default this will automatically enable incremental\n-    compilation, so there's no need to pass it separately, though it won't hurt. We also completely\n-    ignore the stage passed, as there's no way to compile in non-stage 0 without actually building\n-    the compiler.\",\n+    If no arguments are passed then many artifacts are checked.\",\n                 );\n             }\n             \"clippy\" => {"}]}