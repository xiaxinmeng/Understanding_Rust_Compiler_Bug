{"sha": "0c13a9c020b1a70ad3d33b4de706567d46955e5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMTNhOWMwMjBiMWE3MGFkM2QzM2I0ZGU3MDY1NjdkNDY5NTVlNWQ=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-12-06T20:30:07Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-12-06T20:30:07Z"}, "message": "smarter E0390", "tree": {"sha": "fb42f8f1f05302c985d5b10372b596c9d08228f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb42f8f1f05302c985d5b10372b596c9d08228f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c13a9c020b1a70ad3d33b4de706567d46955e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c13a9c020b1a70ad3d33b4de706567d46955e5d", "html_url": "https://github.com/rust-lang/rust/commit/0c13a9c020b1a70ad3d33b4de706567d46955e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c13a9c020b1a70ad3d33b4de706567d46955e5d/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5957f208a5def92a5ee85e71b01f75904c1ba4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/5957f208a5def92a5ee85e71b01f75904c1ba4ff", "html_url": "https://github.com/rust-lang/rust/commit/5957f208a5def92a5ee85e71b01f75904c1ba4ff"}], "stats": {"total": 155, "additions": 148, "deletions": 7}, "files": [{"sha": "7a13160d09858a621a11c0d1cc5985a832435f14", "filename": "compiler/rustc_error_codes/src/error_codes/E0390.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c13a9c020b1a70ad3d33b4de706567d46955e5d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0390.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c13a9c020b1a70ad3d33b4de706567d46955e5d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0390.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0390.md?ref=0c13a9c020b1a70ad3d33b4de706567d46955e5d", "patch": "@@ -1,4 +1,4 @@\n-A method was implemented on a primitive type.\n+A method or constant was implemented on a primitive type.\n \n Erroneous code example:\n \n@@ -12,7 +12,8 @@ impl *mut Foo {}\n //        `#[lang = \"mut_ptr\"]` is allowed for the `*mut T` primitive\n ```\n \n-This isn't allowed, but using a trait to implement a method is a good solution.\n+This isn't allowed, but using a trait to implement a method or constant\n+is a good solution.\n Example:\n \n ```"}, {"sha": "05f387883f14cdfa8e31be763378e21cba88b502", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0c13a9c020b1a70ad3d33b4de706567d46955e5d/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c13a9c020b1a70ad3d33b4de706567d46955e5d/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=0c13a9c020b1a70ad3d33b4de706567d46955e5d", "patch": "@@ -44,8 +44,8 @@ struct InherentCollect<'tcx> {\n \n impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        let ty = match item.kind {\n-            hir::ItemKind::Impl { of_trait: None, ref self_ty, .. } => self_ty,\n+        let (ty, assoc_items) = match item.kind {\n+            hir::ItemKind::Impl { of_trait: None, ref self_ty, items, .. } => (self_ty, items),\n             _ => return,\n         };\n \n@@ -70,6 +70,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"bool\",\n                     \"bool\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Char => {\n@@ -80,6 +81,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"char\",\n                     \"char\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Str => {\n@@ -90,6 +92,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"str\",\n                     \"str\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Slice(slice_item) if slice_item == self.tcx.types.u8 => {\n@@ -100,6 +103,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"slice_u8\",\n                     \"[u8]\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Slice(_) => {\n@@ -110,6 +114,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"slice\",\n                     \"[T]\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Array(_, _) => {\n@@ -120,6 +125,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"array\",\n                     \"[T; N]\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::RawPtr(ty::TypeAndMut { ty: inner, mutbl: hir::Mutability::Not })\n@@ -132,6 +138,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"const_slice_ptr\",\n                     \"*const [T]\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::RawPtr(ty::TypeAndMut { ty: inner, mutbl: hir::Mutability::Mut })\n@@ -144,6 +151,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"mut_slice_ptr\",\n                     \"*mut [T]\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Not }) => {\n@@ -154,6 +162,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"const_ptr\",\n                     \"*const T\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Mut }) => {\n@@ -164,6 +173,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"mut_ptr\",\n                     \"*mut T\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Int(ast::IntTy::I8) => {\n@@ -174,6 +184,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"i8\",\n                     \"i8\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Int(ast::IntTy::I16) => {\n@@ -184,6 +195,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"i16\",\n                     \"i16\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Int(ast::IntTy::I32) => {\n@@ -194,6 +206,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"i32\",\n                     \"i32\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Int(ast::IntTy::I64) => {\n@@ -204,6 +217,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"i64\",\n                     \"i64\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Int(ast::IntTy::I128) => {\n@@ -214,6 +228,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"i128\",\n                     \"i128\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Int(ast::IntTy::Isize) => {\n@@ -224,6 +239,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"isize\",\n                     \"isize\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Uint(ast::UintTy::U8) => {\n@@ -234,6 +250,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"u8\",\n                     \"u8\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Uint(ast::UintTy::U16) => {\n@@ -244,6 +261,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"u16\",\n                     \"u16\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Uint(ast::UintTy::U32) => {\n@@ -254,6 +272,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"u32\",\n                     \"u32\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Uint(ast::UintTy::U64) => {\n@@ -264,6 +283,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"u64\",\n                     \"u64\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Uint(ast::UintTy::U128) => {\n@@ -274,6 +294,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"u128\",\n                     \"u128\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Uint(ast::UintTy::Usize) => {\n@@ -284,6 +305,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"usize\",\n                     \"usize\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Float(ast::FloatTy::F32) => {\n@@ -294,6 +316,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"f32\",\n                     \"f32\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Float(ast::FloatTy::F64) => {\n@@ -304,6 +327,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"f64\",\n                     \"f64\",\n                     item.span,\n+                    assoc_items,\n                 );\n             }\n             ty::Error(_) => {}\n@@ -369,6 +393,7 @@ impl InherentCollect<'tcx> {\n         lang: &str,\n         ty: &str,\n         span: Span,\n+        assoc_items: &[hir::ImplItemRef<'_>],\n     ) {\n         match (lang_def_id, lang_def_id2) {\n             (Some(lang_def_id), _) if lang_def_id == impl_def_id.to_def_id() => {\n@@ -387,7 +412,34 @@ impl InherentCollect<'tcx> {\n                     lang,\n                     ty\n                 )\n-                .span_help(span, \"consider using a trait to implement these methods\")\n+                .span_help(\n+                    span,\n+                    &format!(\"consider using a trait{}\", {\n+                        if assoc_items.len() == 0 {\n+                            String::new()\n+                        } else {\n+                            let plural = assoc_items.len() > 1;\n+                            format!(\n+                                \" to implement {} {}{}\",\n+                                if plural { \"these\" } else { \"this\" },\n+                                {\n+                                    let item_types = assoc_items.iter().map(|x| x.kind);\n+                                    if item_types.clone().all(|x| x == hir::AssocItemKind::Const) {\n+                                        \"constant\"\n+                                    } else if item_types\n+                                        .clone()\n+                                        .all(|x| matches! {x, hir::AssocItemKind::Fn{ .. } })\n+                                    {\n+                                        \"method\"\n+                                    } else {\n+                                        \"associated item\"\n+                                    }\n+                                },\n+                                if plural { \"s\" } else { \"\" }\n+                            )\n+                        }\n+                    }),\n+                )\n                 .emit();\n             }\n         }"}, {"sha": "414ec20ae803db0328abca9ec4b5d257b8076e40", "filename": "src/test/ui/error-codes/E0390.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c13a9c020b1a70ad3d33b4de706567d46955e5d/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c13a9c020b1a70ad3d33b4de706567d46955e5d/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr?ref=0c13a9c020b1a70ad3d33b4de706567d46955e5d", "patch": "@@ -4,7 +4,7 @@ error[E0390]: only a single inherent implementation marked with `#[lang = \"mut_p\n LL | impl *mut Foo {}\n    | ^^^^^^^^^^^^^^^^\n    |\n-help: consider using a trait to implement these methods\n+help: consider using a trait\n   --> $DIR/E0390.rs:5:1\n    |\n LL | impl *mut Foo {}"}, {"sha": "cbd4d7ae904fdc72918dde26458231cac6ae05bc", "filename": "src/test/ui/kinds-of-primitive-impl.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0c13a9c020b1a70ad3d33b4de706567d46955e5d/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c13a9c020b1a70ad3d33b4de706567d46955e5d/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.rs?ref=0c13a9c020b1a70ad3d33b4de706567d46955e5d", "patch": "@@ -0,0 +1,23 @@\n+// ignore-tidy-linelength\n+\n+\n+impl u8 {\n+//~^ error: only a single inherent implementation marked with `#[lang = \"u8\"]` is allowed for the `u8` primitive\n+    pub const B: u8 = 0;\n+}\n+\n+impl str {\n+//~^ error: only a single inherent implementation marked with `#[lang = \"str\"]` is allowed for the `str` primitive\n+    fn foo() {}\n+    fn bar(self) {}\n+}\n+\n+impl char {\n+//~^ error: only a single inherent implementation marked with `#[lang = \"char\"]` is allowed for the `char` primitive\n+    pub const B: u8 = 0;\n+    pub const C: u8 = 0;\n+    fn foo() {}\n+    fn bar(self) {}\n+}\n+\n+fn main() {}"}, {"sha": "14aed00c005e66325e9ea78908e4da60656dad78", "filename": "src/test/ui/kinds-of-primitive-impl.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0c13a9c020b1a70ad3d33b4de706567d46955e5d/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c13a9c020b1a70ad3d33b4de706567d46955e5d/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr?ref=0c13a9c020b1a70ad3d33b4de706567d46955e5d", "patch": "@@ -0,0 +1,65 @@\n+error[E0390]: only a single inherent implementation marked with `#[lang = \"u8\"]` is allowed for the `u8` primitive\n+  --> $DIR/kinds-of-primitive-impl.rs:4:1\n+   |\n+LL | / impl u8 {\n+LL | |\n+LL | |     pub const B: u8 = 0;\n+LL | | }\n+   | |_^\n+   |\n+help: consider using a trait to implement this constant\n+  --> $DIR/kinds-of-primitive-impl.rs:4:1\n+   |\n+LL | / impl u8 {\n+LL | |\n+LL | |     pub const B: u8 = 0;\n+LL | | }\n+   | |_^\n+\n+error[E0390]: only a single inherent implementation marked with `#[lang = \"str\"]` is allowed for the `str` primitive\n+  --> $DIR/kinds-of-primitive-impl.rs:9:1\n+   |\n+LL | / impl str {\n+LL | |\n+LL | |     fn foo() {}\n+LL | |     fn bar(self) {}\n+LL | | }\n+   | |_^\n+   |\n+help: consider using a trait to implement these methods\n+  --> $DIR/kinds-of-primitive-impl.rs:9:1\n+   |\n+LL | / impl str {\n+LL | |\n+LL | |     fn foo() {}\n+LL | |     fn bar(self) {}\n+LL | | }\n+   | |_^\n+\n+error[E0390]: only a single inherent implementation marked with `#[lang = \"char\"]` is allowed for the `char` primitive\n+  --> $DIR/kinds-of-primitive-impl.rs:15:1\n+   |\n+LL | / impl char {\n+LL | |\n+LL | |     pub const B: u8 = 0;\n+LL | |     pub const C: u8 = 0;\n+LL | |     fn foo() {}\n+LL | |     fn bar(self) {}\n+LL | | }\n+   | |_^\n+   |\n+help: consider using a trait to implement these associated items\n+  --> $DIR/kinds-of-primitive-impl.rs:15:1\n+   |\n+LL | / impl char {\n+LL | |\n+LL | |     pub const B: u8 = 0;\n+LL | |     pub const C: u8 = 0;\n+LL | |     fn foo() {}\n+LL | |     fn bar(self) {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0390`."}, {"sha": "0daae91956d32137fe40ee76975d6ad5cc1b4ce0", "filename": "src/test/ui/single-primitive-inherent-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c13a9c020b1a70ad3d33b4de706567d46955e5d/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c13a9c020b1a70ad3d33b4de706567d46955e5d/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.stderr?ref=0c13a9c020b1a70ad3d33b4de706567d46955e5d", "patch": "@@ -6,7 +6,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-help: consider using a trait to implement these methods\n+help: consider using a trait\n   --> $DIR/single-primitive-inherent-impl.rs:11:1\n    |\n LL | / impl str {"}]}