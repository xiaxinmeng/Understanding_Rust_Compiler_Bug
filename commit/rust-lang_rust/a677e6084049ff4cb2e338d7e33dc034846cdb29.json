{"sha": "a677e6084049ff4cb2e338d7e33dc034846cdb29", "node_id": "C_kwDOAAsO6NoAKGE2NzdlNjA4NDA0OWZmNGNiMmUzMzhkN2UzM2RjMDM0ODQ2Y2RiMjk", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-01-14T19:28:04Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-02-18T23:55:31Z"}, "message": "Collections: improve the documentation of drain members", "tree": {"sha": "f211dc507059180d426f024719e9577a2e753ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f211dc507059180d426f024719e9577a2e753ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a677e6084049ff4cb2e338d7e33dc034846cdb29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a677e6084049ff4cb2e338d7e33dc034846cdb29", "html_url": "https://github.com/rust-lang/rust/commit/a677e6084049ff4cb2e338d7e33dc034846cdb29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a677e6084049ff4cb2e338d7e33dc034846cdb29/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feac2ecf1cae1dd0f56bed1cecc6e109c64b3d4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/feac2ecf1cae1dd0f56bed1cecc6e109c64b3d4f", "html_url": "https://github.com/rust-lang/rust/commit/feac2ecf1cae1dd0f56bed1cecc6e109c64b3d4f"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "e18cd8cd46427ac7c70d9b9500e86751a9c4cace", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=a677e6084049ff4cb2e338d7e33dc034846cdb29", "patch": "@@ -746,9 +746,12 @@ impl<T: Ord> BinaryHeap<T> {\n         self.rebuild_tail(start);\n     }\n \n-    /// Returns an iterator which retrieves elements in heap order.\n-    /// The retrieved elements are removed from the original heap.\n-    /// The remaining elements will be removed on drop in heap order.\n+    /// Clears the binary heap, returning an iterator over the removed elements\n+    /// in heap order. If the iterator is dropped before being fully consumed,\n+    /// it drops the remaining elements in heap order.\n+    ///\n+    /// The returned iterator keeps a mutable borrow on the heap to optimize\n+    /// its implementation.\n     ///\n     /// Note:\n     /// * `.drain_sorted()` is *O*(*n* \\* log(*n*)); much slower than `.drain()`.\n@@ -1158,9 +1161,12 @@ impl<T> BinaryHeap<T> {\n         self.len() == 0\n     }\n \n-    /// Clears the binary heap, returning an iterator over the removed elements.\n+    /// Clears the binary heap, returning an iterator over the removed elements\n+    /// in arbitrary order. If the iterator is dropped before being fully\n+    /// consumed, it drops the remaining elements in arbitrary order.\n     ///\n-    /// The elements are removed in arbitrary order.\n+    /// The returned iterator keeps a mutable borrow on the heap to optimize\n+    /// its implementation.\n     ///\n     /// # Examples\n     ///"}, {"sha": "7139a0fb94d76752372e8af27767274028bf30f4", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=a677e6084049ff4cb2e338d7e33dc034846cdb29", "patch": "@@ -1215,21 +1215,25 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         unsafe { IterMut::new(ring, tail, head, PhantomData) }\n     }\n \n-    /// Creates a draining iterator that removes the specified range in the\n-    /// deque and yields the removed items.\n+    /// Removes the specified range from the deque in bulk, returning all\n+    /// removed elements as an iterator. If the iterator is dropped before\n+    /// being fully consumed, it drops the remaining removed elements.\n     ///\n-    /// Note 1: The element range is removed even if the iterator is not\n-    /// consumed until the end.\n+    /// The returned iterator keeps a mutable borrow on the queue to optimize\n+    /// its implementation.\n     ///\n-    /// Note 2: It is unspecified how many elements are removed from the deque,\n-    /// if the `Drain` value is not dropped, but the borrow it holds expires\n-    /// (e.g., due to `mem::forget`).\n     ///\n     /// # Panics\n     ///\n     /// Panics if the starting point is greater than the end point or if\n     /// the end point is greater than the length of the deque.\n     ///\n+    /// # Leaking\n+    ///\n+    /// If the returned iterator goes out of scope without being dropped (due to\n+    /// [`mem::forget`], for example), the deque may have lost and leaked\n+    /// elements arbitrarily, including elements outside the range.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1240,7 +1244,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// assert_eq!(drained, [3]);\n     /// assert_eq!(deque, [1, 2]);\n     ///\n-    /// // A full range clears all contents\n+    /// // A full range clears all contents, like `clear()` does\n     /// deque.drain(..);\n     /// assert!(deque.is_empty());\n     /// ```"}, {"sha": "716bb4983a651f2cb581862d21ad92f4e62e69c6", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=a677e6084049ff4cb2e338d7e33dc034846cdb29", "patch": "@@ -1628,17 +1628,24 @@ impl String {\n         self.vec.clear()\n     }\n \n-    /// Creates a draining iterator that removes the specified range in the `String`\n-    /// and yields the removed `chars`.\n+    /// Removes the specified range from the string in bulk, returning all\n+    /// removed characters as an iterator.\n     ///\n-    /// Note: The element range is removed even if the iterator is not\n-    /// consumed until the end.\n+    /// The returned iterator keeps a mutable borrow on the string to optimize\n+    /// its implementation.\n     ///\n     /// # Panics\n     ///\n     /// Panics if the starting point or end point do not lie on a [`char`]\n     /// boundary, or if they're out of bounds.\n     ///\n+    /// # Leaking\n+    ///\n+    /// If the returned iterator goes out of scope without being dropped (due to\n+    /// [`core::mem::forget`], for example), the string may still contain a copy\n+    /// of any drained characters, or may have lost characters arbitrarily,\n+    /// including characters outside the range.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1652,7 +1659,7 @@ impl String {\n     /// assert_eq!(t, \"\u03b1 is alpha, \");\n     /// assert_eq!(s, \"\u03b2 is beta\");\n     ///\n-    /// // A full range clears the string\n+    /// // A full range clears the string, like `clear()` does\n     /// s.drain(..);\n     /// assert_eq!(s, \"\");\n     /// ```"}, {"sha": "c29aa0fec5b87faf7e74488a1352d5e83c9b2bf7", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a677e6084049ff4cb2e338d7e33dc034846cdb29", "patch": "@@ -1799,19 +1799,24 @@ impl<T, A: Allocator> Vec<T, A> {\n         self.len += count;\n     }\n \n-    /// Creates a draining iterator that removes the specified range in the vector\n-    /// and yields the removed items.\n+    /// Removes the specified range from the vector in bulk, returning all\n+    /// removed elements as an iterator. If the iterator is dropped before\n+    /// being fully consumed, it drops the remaining removed elements.\n     ///\n-    /// When the iterator **is** dropped, all elements in the range are removed\n-    /// from the vector, even if the iterator was not fully consumed. If the\n-    /// iterator **is not** dropped (with [`mem::forget`] for example), it is\n-    /// unspecified how many elements are removed.\n+    /// The returned iterator keeps a mutable borrow on the vector to optimize\n+    /// its implementation.\n     ///\n     /// # Panics\n     ///\n     /// Panics if the starting point is greater than the end point or if\n     /// the end point is greater than the length of the vector.\n     ///\n+    /// # Leaking\n+    ///\n+    /// If the returned iterator goes out of scope without being dropped (due to\n+    /// [`mem::forget`], for example), the vector may have lost and leaked\n+    /// elements arbitrarily, including elements outside the range.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1820,7 +1825,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert_eq!(v, &[1]);\n     /// assert_eq!(u, &[2, 3]);\n     ///\n-    /// // A full range clears the vector\n+    /// // A full range clears the vector, like `clear()` does\n     /// v.drain(..);\n     /// assert_eq!(v, &[]);\n     /// ```"}, {"sha": "c9d91d2c03bf5790409ab0d64e5755154d5a71d4", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=a677e6084049ff4cb2e338d7e33dc034846cdb29", "patch": "@@ -547,6 +547,10 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// Clears the map, returning all key-value pairs as an iterator. Keeps the\n     /// allocated memory for reuse.\n     ///\n+    /// If the returned iterator is dropped before being fully consumed, it\n+    /// drops the remaining key-value pairs. The returned iterator keeps a\n+    /// mutable borrow on the vector to optimize its implementation.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "200667ae390697c390bc9f466c5933035eb4baff", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e6084049ff4cb2e338d7e33dc034846cdb29/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=a677e6084049ff4cb2e338d7e33dc034846cdb29", "patch": "@@ -227,7 +227,12 @@ impl<T, S> HashSet<T, S> {\n         self.base.is_empty()\n     }\n \n-    /// Clears the set, returning all elements in an iterator.\n+    /// Clears the set, returning all elements as an iterator. Keeps the\n+    /// allocated memory for reuse.\n+    ///\n+    /// If the returned iterator is dropped before being fully consumed, it\n+    /// drops the remaining elements. The returned iterator keeps a mutable\n+    /// borrow on the vector to optimize its implementation.\n     ///\n     /// # Examples\n     ///"}]}