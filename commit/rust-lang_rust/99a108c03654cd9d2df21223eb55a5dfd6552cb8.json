{"sha": "99a108c03654cd9d2df21223eb55a5dfd6552cb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YTEwOGMwMzY1NGNkOWQyZGYyMTIyM2ViNTVhNWRmZDY1NTJjYjg=", "commit": {"author": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-21T11:03:01Z"}, "committer": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-26T11:26:39Z"}, "message": "Fixes compilation errors and adds proposed improvements", "tree": {"sha": "db3d4edc8b0fc76e92a707e587883245d77986d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db3d4edc8b0fc76e92a707e587883245d77986d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99a108c03654cd9d2df21223eb55a5dfd6552cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99a108c03654cd9d2df21223eb55a5dfd6552cb8", "html_url": "https://github.com/rust-lang/rust/commit/99a108c03654cd9d2df21223eb55a5dfd6552cb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99a108c03654cd9d2df21223eb55a5dfd6552cb8/comments", "author": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "011c9eac357ea4a02a4e4f821d0cb1e043b0227d", "url": "https://api.github.com/repos/rust-lang/rust/commits/011c9eac357ea4a02a4e4f821d0cb1e043b0227d", "html_url": "https://github.com/rust-lang/rust/commit/011c9eac357ea4a02a4e4f821d0cb1e043b0227d"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "ccb648cd92988cabe9eda4be887ae38618e28ae0", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99a108c03654cd9d2df21223eb55a5dfd6552cb8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a108c03654cd9d2df21223eb55a5dfd6552cb8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=99a108c03654cd9d2df21223eb55a5dfd6552cb8", "patch": "@@ -195,7 +195,6 @@ use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem,StartFnLangItem};\n-use rustc::middle::trans::TransItem;\n use rustc::traits;\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt};\n@@ -1001,7 +1000,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n             debug!(\"RootCollector::push_if_root: found root def_id={:?}\", def_id);\n \n             let instance = Instance::mono(self.tcx, def_id);\n-            self.output.push(create_fn_trans_item(instance));\n+            self.output.push(create_fn_mono_item(instance));\n \n             self.push_extra_entry_roots(def_id);\n         }\n@@ -1041,7 +1040,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n             self.tcx.mk_substs(iter::once(Kind::from(main_ret_ty)))\n         ).unwrap();\n \n-        self.output.push(create_fn_trans_item(start_instance));\n+        self.output.push(create_fn_mono_item(start_instance));\n     }\n }\n "}, {"sha": "1a4849ac199a097f9da29c1c6da9905d24297c4f", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99a108c03654cd9d2df21223eb55a5dfd6552cb8/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a108c03654cd9d2df21223eb55a5dfd6552cb8/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=99a108c03654cd9d2df21223eb55a5dfd6552cb8", "patch": "@@ -106,8 +106,7 @@ use monomorphize::collector::InliningMap;\n use rustc::dep_graph::WorkProductId;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n-use rustc::middle::lang_items::StartFnLangItem;\n-use rustc::middle::trans::{Linkage, Visibility};\n+use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::{self, TyCtxt, InstanceDef};\n use rustc::ty::item_path::characteristic_def_id_of_type;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -313,11 +312,9 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     MonoItem::Fn(ref instance) => {\n                         let visibility = match instance.def {\n                             InstanceDef::Item(def_id) => {\n-                                let start_def_id = tcx.lang_items().require(StartFnLangItem);\n-\n                                 // If we encounter the lang start item, we set the visibility to\n                                 // default.\n-                                if start_def_id == Ok(def_id) {\n+                                if tcx.lang_items().start_fn() == Some(def_id) {\n                                     Visibility::Default\n                                 } else if def_id.is_local() {\n                                     if tcx.is_exported_symbol(def_id) {"}, {"sha": "5eeaa542b41dd0d634509bf652751c9cc669955c", "filename": "src/libstd/termination.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99a108c03654cd9d2df21223eb55a5dfd6552cb8/src%2Flibstd%2Ftermination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a108c03654cd9d2df21223eb55a5dfd6552cb8/src%2Flibstd%2Ftermination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftermination.rs?ref=99a108c03654cd9d2df21223eb55a5dfd6552cb8", "patch": "@@ -21,6 +21,8 @@ use libc;\n /// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n #[cfg_attr(not(stage0), lang = \"termination\")]\n #[unstable(feature = \"termination_trait\", issue = \"0\")]\n+#[rustc_on_unimplemented =\n+  \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system."}]}