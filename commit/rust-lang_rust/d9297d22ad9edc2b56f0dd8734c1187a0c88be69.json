{"sha": "d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "node_id": "C_kwDOAAsO6NoAKGQ5Mjk3ZDIyYWQ5ZWRjMmI1NmYwZGQ4NzM0YzExODdhMGM4OGJlNjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T07:30:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T07:30:11Z"}, "message": "Auto merge of #102314 - TaKO8Ki:add-label-to-struct-enum-union-ident, r=estebank\n\nAdd a label to struct/enum/union ident name\n\nBased on https://github.com/rust-lang/rust/pull/94996#discussion_r831694150\ncc: `@estebank`", "tree": {"sha": "43ccf3f558de015c0e929f643b3811a267c51594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43ccf3f558de015c0e929f643b3811a267c51594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "html_url": "https://github.com/rust-lang/rust/commit/d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0b511daa91469dd251e736fb8914d2360ac0ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0b511daa91469dd251e736fb8914d2360ac0ec", "html_url": "https://github.com/rust-lang/rust/commit/de0b511daa91469dd251e736fb8914d2360ac0ec"}, {"sha": "5d05908c70dde1f39fa15f1b13fff67c13303c98", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d05908c70dde1f39fa15f1b13fff67c13303c98", "html_url": "https://github.com/rust-lang/rust/commit/5d05908c70dde1f39fa15f1b13fff67c13303c98"}], "stats": {"total": 117, "additions": 96, "deletions": 21}, "files": [{"sha": "6c4cfcf6ddf4cc95ffd1d5fa74e66edb0ae6fccf", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1291,12 +1291,10 @@ impl<'a> Parser<'a> {\n     /// Parses an enum declaration.\n     fn parse_item_enum(&mut self) -> PResult<'a, ItemInfo> {\n         if self.token.is_keyword(kw::Struct) {\n-            let mut err = self.struct_span_err(\n-                self.prev_token.span.to(self.token.span),\n-                \"`enum` and `struct` are mutually exclusive\",\n-            );\n+            let span = self.prev_token.span.to(self.token.span);\n+            let mut err = self.struct_span_err(span, \"`enum` and `struct` are mutually exclusive\");\n             err.span_suggestion(\n-                self.prev_token.span.to(self.token.span),\n+                span,\n                 \"replace `enum struct` with\",\n                 \"enum\",\n                 Applicability::MachineApplicable,\n@@ -1320,7 +1318,8 @@ impl<'a> Parser<'a> {\n             (vec![], false)\n         } else {\n             self.parse_delim_comma_seq(Delimiter::Brace, |p| p.parse_enum_variant()).map_err(\n-                |e| {\n+                |mut e| {\n+                    e.span_label(id.span, \"while parsing this enum\");\n                     self.recover_stmt();\n                     e\n                 },\n@@ -1347,7 +1346,8 @@ impl<'a> Parser<'a> {\n \n                 let struct_def = if this.check(&token::OpenDelim(Delimiter::Brace)) {\n                     // Parse a struct variant.\n-                    let (fields, recovered) = this.parse_record_struct_body(\"struct\", false)?;\n+                    let (fields, recovered) =\n+                        this.parse_record_struct_body(\"struct\", ident.span, false)?;\n                     VariantData::Struct(fields, recovered)\n                 } else if this.check(&token::OpenDelim(Delimiter::Parenthesis)) {\n                     VariantData::Tuple(this.parse_tuple_struct_body()?, DUMMY_NODE_ID)\n@@ -1401,17 +1401,23 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                let (fields, recovered) =\n-                    self.parse_record_struct_body(\"struct\", generics.where_clause.has_where_token)?;\n+                let (fields, recovered) = self.parse_record_struct_body(\n+                    \"struct\",\n+                    class_name.span,\n+                    generics.where_clause.has_where_token,\n+                )?;\n                 VariantData::Struct(fields, recovered)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if self.eat(&token::Semi) {\n             VariantData::Unit(DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(Delimiter::Brace) {\n-            let (fields, recovered) =\n-                self.parse_record_struct_body(\"struct\", generics.where_clause.has_where_token)?;\n+            let (fields, recovered) = self.parse_record_struct_body(\n+                \"struct\",\n+                class_name.span,\n+                generics.where_clause.has_where_token,\n+            )?;\n             VariantData::Struct(fields, recovered)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(Delimiter::Parenthesis) {\n@@ -1440,12 +1446,18 @@ impl<'a> Parser<'a> {\n \n         let vdata = if self.token.is_keyword(kw::Where) {\n             generics.where_clause = self.parse_where_clause()?;\n-            let (fields, recovered) =\n-                self.parse_record_struct_body(\"union\", generics.where_clause.has_where_token)?;\n+            let (fields, recovered) = self.parse_record_struct_body(\n+                \"union\",\n+                class_name.span,\n+                generics.where_clause.has_where_token,\n+            )?;\n             VariantData::Struct(fields, recovered)\n         } else if self.token == token::OpenDelim(Delimiter::Brace) {\n-            let (fields, recovered) =\n-                self.parse_record_struct_body(\"union\", generics.where_clause.has_where_token)?;\n+            let (fields, recovered) = self.parse_record_struct_body(\n+                \"union\",\n+                class_name.span,\n+                generics.where_clause.has_where_token,\n+            )?;\n             VariantData::Struct(fields, recovered)\n         } else {\n             let token_str = super::token_descr(&self.token);\n@@ -1461,6 +1473,7 @@ impl<'a> Parser<'a> {\n     fn parse_record_struct_body(\n         &mut self,\n         adt_ty: &str,\n+        ident_span: Span,\n         parsed_where: bool,\n     ) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n         let mut fields = Vec::new();\n@@ -1475,6 +1488,7 @@ impl<'a> Parser<'a> {\n                 match field {\n                     Ok(field) => fields.push(field),\n                     Err(mut err) => {\n+                        err.span_label(ident_span, format!(\"while parsing this {adt_ty}\"));\n                         err.emit();\n                         break;\n                     }"}, {"sha": "6bd8f671d73932575c346098551b71941200c09f", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -46,7 +46,9 @@ error: expected identifier, found keyword `await`\n   --> $DIR/2018-edition-error-in-non-macro-position.rs:13:14\n    |\n LL | struct Foo { await: () }\n-   |              ^^^^^ expected identifier, found keyword\n+   |        ---   ^^^^^ expected identifier, found keyword\n+   |        |\n+   |        while parsing this struct\n    |\n help: escape `await` to use it as an identifier\n    |"}, {"sha": "92b5133b74dd6bf80a0533d6cbcb2428d985d202", "filename": "src/test/ui/parser/doc-before-struct-rbrace-1.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-struct-rbrace-1.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,9 @@\n error[E0585]: found a documentation comment that doesn't document anything\n   --> $DIR/doc-before-struct-rbrace-1.rs:3:5\n    |\n+LL | struct X {\n+   |        - while parsing this struct\n+LL |     a: u8,\n LL |     /// document\n    |     ^^^^^^^^^^^^\n    |"}, {"sha": "e9583f55b8efbc350e9e2493c8bf3fe6574a8f7b", "filename": "src/test/ui/parser/fn-field-parse-error-ice.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -7,6 +7,8 @@ LL |     inner : dyn fn ()\n error: functions are not allowed in struct definitions\n   --> $DIR/fn-field-parse-error-ice.rs:4:17\n    |\n+LL | struct Baz {\n+   |        --- while parsing this struct\n LL |     inner : dyn fn ()\n    |                 ^^\n    |"}, {"sha": "8af887050023c60fef945b7a1fc23b93246f2322", "filename": "src/test/ui/parser/issues/issue-101540.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-101540.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-101540.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-101540.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,8 @@\n error: structs are not allowed in struct definitions\n   --> $DIR/issue-101540.rs:2:5\n    |\n+LL | struct S1 {\n+   |        -- while parsing this struct\n LL |     struct S2 {\n    |     ^^^^^^^^^\n    |"}, {"sha": "1a6e4cfd2b203332ba41f47df6b67aafdd27e83e", "filename": "src/test/ui/parser/issues/issue-48636.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-48636.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-48636.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-48636.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,8 @@\n error[E0585]: found a documentation comment that doesn't document anything\n   --> $DIR/issue-48636.rs:7:5\n    |\n+LL | struct S {\n+   |        - while parsing this struct\n LL |     x: u8\n    |          - help: missing comma here: `,`\n LL |     /// The ID of the parent core"}, {"sha": "adabb68593c090524cf070a4220b7e6053317984", "filename": "src/test/ui/parser/issues/issue-68000-unicode-ident-after-missing-comma.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -7,6 +7,8 @@ LL |     pub bar: Vec<i32>\u00f6\n error: expected `:`, found `}`\n   --> $DIR/issue-68000-unicode-ident-after-missing-comma.rs:4:1\n    |\n+LL | pub struct Foo {\n+   |            --- while parsing this struct\n LL |     pub bar: Vec<i32>\u00f6\n    |                       - expected `:`\n LL |"}, {"sha": "b1f8674fbdf386609c4c9c70e622286e96dd8ef1", "filename": "src/test/ui/parser/macro/issue-37113.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,8 @@\n error: expected identifier, found `String`\n   --> $DIR/issue-37113.rs:4:16\n    |\n+LL |         enum SomeEnum {\n+   |              -------- while parsing this enum\n LL |             $( $t, )*\n    |                ^^ expected identifier\n ..."}, {"sha": "ad1e90e43ec4ebd9717632dcb87318ae071089b8", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -10,6 +10,9 @@ LL | fn main() {}\n error: expected identifier, found keyword `trait`\n   --> $DIR/missing-close-brace-in-struct.rs:4:1\n    |\n+LL | pub(crate) struct Bar<T> {\n+   |                   --- while parsing this struct\n+...\n LL | trait T {\n    | ^^^^^ expected identifier, found keyword\n "}, {"sha": "6d8b0c3fccde3fbf0ff213fdef1306208c05e6e8", "filename": "src/test/ui/parser/missing-closing-angle-bracket-struct-field-ty.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-struct-field-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-struct-field-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-struct-field-ty.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,9 @@\n error: expected one of `>`, a const expression, lifetime, or type, found `}`\n   --> $DIR/missing-closing-angle-bracket-struct-field-ty.rs:9:1\n    |\n+LL | pub struct Foo {\n+   |            --- while parsing this struct\n+...\n LL |     c: Arc<Mutex<usize>>,\n    |                          - expected one of `>`, a const expression, lifetime, or type\n LL | }"}, {"sha": "7634bca921c86fed116b41ecab2fc8d1341ef913", "filename": "src/test/ui/parser/recover-enum2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,8 @@\n error: expected type, found `{`\n   --> $DIR/recover-enum2.rs:6:18\n    |\n+LL |         Var3 {\n+   |         ---- while parsing this struct\n LL |             abc: {},\n    |                  ^ expected type\n "}, {"sha": "3cf4847488c05e995780a13e6c9cff0f94a5eb6b", "filename": "src/test/ui/parser/recover-field-semi.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Frecover-field-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Frecover-field-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-field-semi.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,20 +1,26 @@\n error: struct fields are separated by `,`\n   --> $DIR/recover-field-semi.rs:2:13\n    |\n+LL | struct Foo {\n+   |        --- while parsing this struct\n LL |     foo: i32;\n    |             ^ help: replace `;` with `,`\n \n error: union fields are separated by `,`\n   --> $DIR/recover-field-semi.rs:7:13\n    |\n+LL | union Bar {\n+   |       --- while parsing this union\n LL |     foo: i32;\n    |             ^ help: replace `;` with `,`\n \n error: struct fields are separated by `,`\n   --> $DIR/recover-field-semi.rs:12:19\n    |\n LL |     Qux { foo: i32; }\n-   |                   ^ help: replace `;` with `,`\n+   |     ---           ^ help: replace `;` with `,`\n+   |     |\n+   |     while parsing this struct\n \n error: unions cannot have zero fields\n   --> $DIR/recover-field-semi.rs:6:1"}, {"sha": "9f6fb06caa34d88e0eaa4b6ee1572ba07f43b77d", "filename": "src/test/ui/parser/recover-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Frecover-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Frecover-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-struct.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,8 @@\n error: expected `:`, found `Bad`\n   --> $DIR/recover-struct.rs:4:9\n    |\n+LL |     struct Test {\n+   |            ---- while parsing this struct\n LL |         Very\n    |             - expected `:`\n LL |         Bad"}, {"sha": "78c67866fb0f19801323a0c26527926563918cdd", "filename": "src/test/ui/parser/recovered-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -2,7 +2,9 @@ error: expected `:`, found `,`\n   --> $DIR/recovered-struct-variant.rs:2:10\n    |\n LL |     A { a, b: usize }\n-   |          ^ expected `:`\n+   |     -    ^ expected `:`\n+   |     |\n+   |     while parsing this struct\n \n error: aborting due to previous error\n "}, {"sha": "8f7ca356798e248cfefc50da286be20a380bb544", "filename": "src/test/ui/parser/removed-syntax-enum-newtype.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-enum-newtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-enum-newtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-enum-newtype.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -2,7 +2,9 @@ error: expected one of `<`, `where`, or `{`, found `=`\n   --> $DIR/removed-syntax-enum-newtype.rs:1:8\n    |\n LL | enum e = isize;\n-   |        ^ expected one of `<`, `where`, or `{`\n+   |      - ^ expected one of `<`, `where`, or `{`\n+   |      |\n+   |      while parsing this enum\n \n error: aborting due to previous error\n "}, {"sha": "ab3d2056581b64e6ab078e02576e71d6a0da2c52", "filename": "src/test/ui/parser/removed-syntax-field-let.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,8 @@\n error: expected identifier, found keyword `let`\n   --> $DIR/removed-syntax-field-let.rs:2:5\n    |\n+LL | struct S {\n+   |        - while parsing this struct\n LL |     let foo: (),\n    |     ^^^ expected identifier, found keyword\n "}, {"sha": "532d4fb2b61f0b3159d7ef43bd7857ffdde6aa70", "filename": "src/test/ui/parser/removed-syntax-field-semicolon.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-semicolon.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,8 @@\n error: struct fields are separated by `,`\n   --> $DIR/removed-syntax-field-semicolon.rs:2:12\n    |\n+LL | struct S {\n+   |        - while parsing this struct\n LL |     bar: ();\n    |            ^ help: replace `;` with `,`\n "}, {"sha": "f40642f300cdfce0051db31715d9481de5c07b3a", "filename": "src/test/ui/pattern/issue-66270-pat-struct-parser-recovery.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fpattern%2Fissue-66270-pat-struct-parser-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fpattern%2Fissue-66270-pat-struct-parser-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-66270-pat-struct-parser-recovery.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,8 @@\n error: expected type, found `0`\n   --> $DIR/issue-66270-pat-struct-parser-recovery.rs:4:22\n    |\n+LL | struct Bug {\n+   |        --- while parsing this struct\n LL |     incorrect_field: 0,\n    |                      ^ expected type\n "}, {"sha": "241f99b28c24bcb553daf0c4bdb0c48ea9a61dd2", "filename": "src/test/ui/proc-macro/derive-bad.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -2,7 +2,10 @@ error: expected `:`, found `}`\n   --> $DIR/derive-bad.rs:6:10\n    |\n LL | #[derive(A)]\n-   |          ^ expected `:`\n+   |          ^\n+   |          |\n+   |          expected `:`\n+   |          while parsing this struct\n    |\n    = note: this error originates in the derive macro `A` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b47328f34e6ebda21e4aa96ca1273e22019e8df8", "filename": "src/test/ui/pub/pub-restricted-error.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,8 @@\n error: expected identifier, found `(`\n   --> $DIR/pub-restricted-error.rs:4:16\n    |\n+LL | struct Foo {\n+   |        --- while parsing this struct\n LL |     pub(crate) () foo: usize,\n    |                ^ expected identifier\n "}, {"sha": "472365c6ed739288a7c1378ee095dc8be11b4ef0", "filename": "src/test/ui/structs/struct-fn-in-definition.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -1,6 +1,9 @@\n error: functions are not allowed in struct definitions\n   --> $DIR/struct-fn-in-definition.rs:9:5\n    |\n+LL | struct S {\n+   |        - while parsing this struct\n+...\n LL |     fn foo() {}\n    |     ^^^^^^^^^^^\n    |\n@@ -10,6 +13,9 @@ LL |     fn foo() {}\n error: functions are not allowed in union definitions\n   --> $DIR/struct-fn-in-definition.rs:18:5\n    |\n+LL | union U {\n+   |       - while parsing this union\n+...\n LL |     fn foo() {}\n    |     ^^^^^^^^^^^\n    |\n@@ -19,6 +25,9 @@ LL |     fn foo() {}\n error: functions are not allowed in enum definitions\n   --> $DIR/struct-fn-in-definition.rs:27:5\n    |\n+LL | enum E {\n+   |      - while parsing this enum\n+...\n LL |     fn foo() {}\n    |     ^^^^^^^^^^^\n    |"}, {"sha": "4dd514480da404b9a18e2b2f8b008a93bd33987d", "filename": "src/test/ui/suggestions/struct-field-type-including-single-colon.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-field-type-including-single-colon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-field-type-including-single-colon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-field-type-including-single-colon.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -12,6 +12,8 @@ LL |     a: foo::A,\n error: expected `,`, or `}`, found `:`\n   --> $DIR/struct-field-type-including-single-colon.rs:9:11\n    |\n+LL | struct Foo {\n+   |        --- while parsing this struct\n LL |     a: foo:A,\n    |           ^\n \n@@ -29,6 +31,8 @@ LL |     b: foo::bar::B,\n error: expected `,`, or `}`, found `:`\n   --> $DIR/struct-field-type-including-single-colon.rs:15:16\n    |\n+LL | struct Bar {\n+   |        --- while parsing this struct\n LL |     b: foo::bar:B,\n    |                ^\n "}, {"sha": "fc7c23a225240456d7582b380d55975e9bde164e", "filename": "src/test/ui/typeck/issue-69378-ice-on-invalid-type-node-after-recovery.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Ftypeck%2Fissue-69378-ice-on-invalid-type-node-after-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9297d22ad9edc2b56f0dd8734c1187a0c88be69/src%2Ftest%2Fui%2Ftypeck%2Fissue-69378-ice-on-invalid-type-node-after-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-69378-ice-on-invalid-type-node-after-recovery.stderr?ref=d9297d22ad9edc2b56f0dd8734c1187a0c88be69", "patch": "@@ -2,7 +2,9 @@ error: expected identifier, found `0`\n   --> $DIR/issue-69378-ice-on-invalid-type-node-after-recovery.rs:3:14\n    |\n LL | struct Foo { 0: u8 }\n-   |              ^ expected identifier\n+   |        ---   ^ expected identifier\n+   |        |\n+   |        while parsing this struct\n \n error: aborting due to previous error\n "}]}