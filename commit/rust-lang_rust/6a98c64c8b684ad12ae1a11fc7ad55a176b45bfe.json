{"sha": "6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe", "node_id": "C_kwDOAAsO6NoAKDZhOThjNjRjOGI2ODRhZDEyYWUxYTExZmM3YWQ1NWExNzZiNDViZmU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-12-06T01:33:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-06T01:33:20Z"}, "message": "final tweaks", "tree": {"sha": "d91c3833a11b9294bb30636a361d4f7859984d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d91c3833a11b9294bb30636a361d4f7859984d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhrWhgCRBK7hj4Ov3rIwAAaA0IAI960634IyqKfWgRY+FgVhh8\nda/5F2O2y3xVLnXOD3631kY6gLOiDv5k/H3PAkITkUZkHpmi7PClE/cb725cKQlE\n+SQ1388sOAM+lC7069N9vs65/R4CFbq5Ej+zmKaCmT3cq3H2RZ5seNGVik8xX4ts\nLRQPlof25XLr0dbba7cSG0DkZpltVhB9KTZ7OlNte9vgkuIAwLQJXxx37BMCCMov\nspEawLcXN0yLiqfoiLqzPaCV4+G+E4yUZd2Bsh6Zja81NGlVzqHteDJ56kubnsYl\nWrXEA3Q5bRlYVyuCSXWhJvLEoXfHpBnP+oDxmvbzYggbrBNtHfXW3eHTk5M3d1I=\n=QgIi\n-----END PGP SIGNATURE-----\n", "payload": "tree d91c3833a11b9294bb30636a361d4f7859984d61\nparent b0a463334c866ed479609adce1ee30911bf30cea\nauthor Ralf Jung <post@ralfj.de> 1638754400 -0500\ncommitter GitHub <noreply@github.com> 1638754400 -0500\n\nfinal tweaks"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe", "html_url": "https://github.com/rust-lang/rust/commit/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0a463334c866ed479609adce1ee30911bf30cea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a463334c866ed479609adce1ee30911bf30cea", "html_url": "https://github.com/rust-lang/rust/commit/b0a463334c866ed479609adce1ee30911bf30cea"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "6f4169e950a94cf4a6c960e4e90683e67f4445d1", "filename": "src/intptrcast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe", "patch": "@@ -108,9 +108,9 @@ impl<'mir, 'tcx> GlobalState {\n \n                 // Remember next base address.  Leave a gap of at least 1 to avoid two zero-sized allocations\n                 // having the same base address, and to avoid ambiguous provenance for the address between two\n-                // allocations.\n-                let bytes = size.bytes().checked_add(1).unwrap();\n-                global_state.next_base_addr = base_addr.checked_add(bytes).unwrap();\n+                // allocations (also see https://github.com/rust-lang/unsafe-code-guidelines/issues/313).\n+                let size_plus_1 = size.bytes().checked_add(1).unwrap();\n+                global_state.next_base_addr = base_addr.checked_add(size_plus_1).unwrap();\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n                 global_state.int_to_ptr_map.push((base_addr, alloc_id));"}, {"sha": "509965fe4fa97d7d0f735451b1bd8e0f6e3c21a5", "filename": "tests/run-pass/adjacent-allocs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe/tests%2Frun-pass%2Fadjacent-allocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe/tests%2Frun-pass%2Fadjacent-allocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fadjacent-allocs.rs?ref=6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe", "patch": "@@ -16,6 +16,7 @@ fn main() {\n \n         let iptr = ptr as usize;\n         let zst = (iptr + 8) as *const ();\n+        // This is a ZST ptr just at the end of `n`, so it should be valid to deref.\n         unsafe { *zst }\n     }\n }"}]}