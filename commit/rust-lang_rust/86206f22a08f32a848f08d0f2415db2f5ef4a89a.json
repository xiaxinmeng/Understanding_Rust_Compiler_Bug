{"sha": "86206f22a08f32a848f08d0f2415db2f5ef4a89a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MjA2ZjIyYTA4ZjMyYTg0OGYwOGQwZjI0MTVkYjJmNWVmNGE4OWE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-09T22:49:51Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-14T06:52:25Z"}, "message": "rustc: move the MIR pass infrastructure and list to rustc_mir.", "tree": {"sha": "52ac0d4f0975c742f7bd7d747e057720527f32bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ac0d4f0975c742f7bd7d747e057720527f32bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86206f22a08f32a848f08d0f2415db2f5ef4a89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86206f22a08f32a848f08d0f2415db2f5ef4a89a", "html_url": "https://github.com/rust-lang/rust/commit/86206f22a08f32a848f08d0f2415db2f5ef4a89a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86206f22a08f32a848f08d0f2415db2f5ef4a89a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b53f0a6620c3451a10573ea5c5a51b4c18088ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b53f0a6620c3451a10573ea5c5a51b4c18088ec", "html_url": "https://github.com/rust-lang/rust/commit/9b53f0a6620c3451a10573ea5c5a51b4c18088ec"}], "stats": {"total": 416, "additions": 201, "deletions": 215}, "files": [{"sha": "339c270e3aad0bc8f27f5f53b7ccdb3db822cb9e", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 1, "deletions": 113, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -13,13 +13,10 @@\n use hir;\n use hir::def_id::DefId;\n use hir::map::DefPathData;\n-use mir::{Mir, Promoted};\n+use mir::Promoted;\n use ty::TyCtxt;\n-use std::rc::Rc;\n use syntax::ast::NodeId;\n \n-use std::borrow::Cow;\n-\n /// Where a specific Mir comes from.\n #[derive(Debug, Copy, Clone)]\n pub enum MirSource {\n@@ -79,112 +76,3 @@ impl<'a, 'gcx, 'tcx> MirSource {\n         }\n     }\n }\n-\n-/// Generates a default name for the pass based on the name of the\n-/// type `T`.\n-pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n-    let name = unsafe { ::std::intrinsics::type_name::<T>() };\n-    if let Some(tail) = name.rfind(\":\") {\n-        Cow::from(&name[tail+1..])\n-    } else {\n-        Cow::from(name)\n-    }\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub struct MirSuite(pub usize);\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub struct MirPassIndex(pub usize);\n-\n-/// A pass hook is invoked both before and after each pass executes.\n-/// This is primarily used to dump MIR for debugging.\n-///\n-/// You can tell whether this is before or after by inspecting the\n-/// `mir` parameter -- before the pass executes, it will be `None` (in\n-/// which case you can inspect the MIR from previous pass by executing\n-/// `mir_cx.read_previous_mir()`); after the pass executes, it will be\n-/// `Some()` with the result of the pass (in which case the output\n-/// from the previous pass is most likely stolen, so you would not\n-/// want to try and access it). If the pass is interprocedural, then\n-/// the hook will be invoked once per output.\n-pub trait PassHook {\n-    fn on_mir_pass<'a, 'tcx: 'a>(&self,\n-                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 suite: MirSuite,\n-                                 pass_num: MirPassIndex,\n-                                 pass_name: &str,\n-                                 source: MirSource,\n-                                 mir: &Mir<'tcx>,\n-                                 is_after: bool);\n-}\n-\n-/// The full suite of types that identifies a particular\n-/// application of a pass to a def-id.\n-pub type PassId = (MirSuite, MirPassIndex, DefId);\n-\n-/// A streamlined trait that you can implement to create a pass; the\n-/// pass will be named after the type, and it will consist of a main\n-/// loop that goes over each available MIR and applies `run_pass`.\n-pub trait MirPass {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n-        default_name::<Self>()\n-    }\n-\n-    fn run_pass<'a, 'tcx>(&self,\n-                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          source: MirSource,\n-                          mir: &mut Mir<'tcx>);\n-}\n-\n-/// A manager for MIR passes.\n-///\n-/// FIXME(#41712) -- it is unclear whether we should have this struct.\n-#[derive(Clone)]\n-pub struct Passes {\n-    pass_hooks: Vec<Rc<PassHook>>,\n-    suites: Vec<Vec<Rc<MirPass>>>,\n-}\n-\n-/// The number of \"pass suites\" that we have:\n-///\n-/// - ready for constant evaluation\n-/// - unopt\n-/// - optimized\n-pub const MIR_SUITES: usize = 3;\n-\n-/// Run the passes we need to do constant qualification and evaluation.\n-pub const MIR_CONST: MirSuite = MirSuite(0);\n-\n-/// Run the passes we need to consider the MIR validated and ready for borrowck etc.\n-pub const MIR_VALIDATED: MirSuite = MirSuite(1);\n-\n-/// Run the passes we need to consider the MIR *optimized*.\n-pub const MIR_OPTIMIZED: MirSuite = MirSuite(2);\n-\n-impl<'a, 'tcx> Passes {\n-    pub fn new() -> Passes {\n-        Passes {\n-            pass_hooks: Vec::new(),\n-            suites: (0..MIR_SUITES).map(|_| Vec::new()).collect(),\n-        }\n-    }\n-\n-    /// Pushes a built-in pass.\n-    pub fn push_pass<T: MirPass + 'static>(&mut self, suite: MirSuite, pass: T) {\n-        self.suites[suite.0].push(Rc::new(pass));\n-    }\n-\n-    /// Pushes a pass hook.\n-    pub fn push_hook<T: PassHook + 'static>(&mut self, hook: T) {\n-        self.pass_hooks.push(Rc::new(hook));\n-    }\n-\n-    pub fn passes(&self, suite: MirSuite) -> &[Rc<MirPass>] {\n-        &self.suites[suite.0]\n-    }\n-\n-    pub fn hooks(&self) -> &[Rc<PassHook>] {\n-        &self.pass_hooks\n-    }\n-}"}, {"sha": "193c36736077e6c54548f5b64ae252bd3e7baa97", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -31,7 +31,6 @@ use middle::lang_items;\n use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use middle::stability;\n use mir::Mir;\n-use mir::transform::Passes;\n use ty::subst::{Kind, Substs};\n use ty::ReprOptions;\n use traits;\n@@ -882,8 +881,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub maps: maps::Maps<'tcx>,\n \n-    pub mir_passes: Rc<Passes>,\n-\n     // Records the free variables refrenced by every closure\n     // expression. Do not track deps for this, just recompute it from\n     // scratch every time.\n@@ -1055,7 +1052,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   cstore: &'tcx CrateStore,\n                                   local_providers: ty::maps::Providers<'tcx>,\n                                   extern_providers: ty::maps::Providers<'tcx>,\n-                                  mir_passes: Rc<Passes>,\n                                   arenas: &'tcx GlobalArenas<'tcx>,\n                                   arena: &'tcx DroplessArena,\n                                   resolutions: ty::Resolutions,\n@@ -1172,7 +1168,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir,\n             def_path_hash_to_def_id,\n             maps: maps::Maps::new(providers),\n-            mir_passes,\n             rcache: RefCell::new(FxHashMap()),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),"}, {"sha": "b7b64c9761a8e091eceb964b95fc16f88f0a23c1", "filename": "src/librustc/ty/maps/keys.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -11,7 +11,6 @@\n //! Defines the set of legal keys that can be used in queries.\n \n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n-use mir::transform::{MirSuite, MirPassIndex};\n use ty::{self, Ty, TyCtxt};\n use ty::subst::Substs;\n use ty::fast_reject::SimplifiedType;\n@@ -116,24 +115,6 @@ impl<'tcx> Key for (DefId, &'tcx Substs<'tcx>) {\n     }\n }\n \n-impl Key for (MirSuite, DefId) {\n-    fn map_crate(&self) -> CrateNum {\n-        self.1.map_crate()\n-    }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n-        self.1.default_span(tcx)\n-    }\n-}\n-\n-impl Key for (MirSuite, MirPassIndex, DefId) {\n-    fn map_crate(&self) -> CrateNum {\n-        self.2.map_crate()\n-    }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n-        self.2.default_span(tcx)\n-    }\n-}\n-\n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     fn map_crate(&self) -> CrateNum {\n         self.1.def_id().krate"}, {"sha": "f7c03fde222e83ae6aa936d7d799b40ea22481bb", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -22,7 +22,6 @@ use rustc::lint;\n use rustc::middle::{self, stability, reachable};\n use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::mir::transform::{MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED, Passes};\n use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n use rustc::traits;\n use rustc::util::common::{ErrorReported, time};\n@@ -989,63 +988,12 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     // FIXME(eddyb) get rid of this once we replace const_eval with miri.\n     rustc_const_eval::provide(&mut extern_providers);\n \n-    // Setup the MIR passes that we want to run.\n-    let mut passes = Passes::new();\n-    passes.push_hook(mir::transform::dump_mir::DumpMir);\n-\n-    // Remove all `EndRegion` statements that are not involved in borrows.\n-    passes.push_pass(MIR_CONST, mir::transform::clean_end_regions::CleanEndRegions);\n-\n-    // What we need to do constant evaluation.\n-    passes.push_pass(MIR_CONST, mir::transform::simplify::SimplifyCfg::new(\"initial\"));\n-    passes.push_pass(MIR_CONST, mir::transform::type_check::TypeckMir);\n-    passes.push_pass(MIR_CONST, mir::transform::rustc_peek::SanityCheck);\n-\n-    // We compute \"constant qualifications\" between MIR_CONST and MIR_VALIDATED.\n-\n-    // What we need to run borrowck etc.\n-\n-    passes.push_pass(MIR_VALIDATED, mir::transform::qualify_consts::QualifyAndPromoteConstants);\n-    passes.push_pass(MIR_VALIDATED, mir::transform::simplify::SimplifyCfg::new(\"qualify-consts\"));\n-\n-    // borrowck runs between MIR_VALIDATED and MIR_OPTIMIZED.\n-\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n-    passes.push_pass(MIR_OPTIMIZED,\n-                     mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n-\n-    // These next passes must be executed together\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::CriticalCallEdges);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::elaborate_drops::ElaborateDrops);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n-    // AddValidation needs to run after ElaborateDrops and before EraseRegions, and it needs\n-    // an AllCallEdges pass right before it.\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::AllCallEdges);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_validation::AddValidation);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n-    // No lifetime analysis based on borrowing can be done from here on out.\n-\n-    // From here on out, regions are gone.\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::erase_regions::EraseRegions);\n-\n-    // Optimizations begin.\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::inline::Inline);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::instcombine::InstCombine);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::deaggregator::Deaggregator);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::copy_prop::CopyPropagation);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyLocals);\n-\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::generator::StateTransform);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::CriticalCallEdges);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::dump_mir::Marker(\"PreTrans\"));\n-\n     let (tx, rx) = mpsc::channel();\n \n     TyCtxt::create_and_enter(sess,\n                              cstore,\n                              local_providers,\n                              extern_providers,\n-                             Rc::new(passes),\n                              arenas,\n                              arena,\n                              resolutions,"}, {"sha": "9e02065145d275f1027839ebc18faf2581ed5965", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -28,7 +28,6 @@ use rustc::infer::{self, InferOk, InferResult};\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc_metadata::cstore::CStore;\n use rustc::hir::map as hir_map;\n-use rustc::mir::transform::Passes;\n use rustc::session::{self, config};\n use rustc::session::config::{OutputFilenames, OutputTypes};\n use rustc_trans_utils::trans_crate::TransCrate;\n@@ -151,7 +150,6 @@ fn test_env<F>(source_string: &str,\n                              &*cstore,\n                              ty::maps::Providers::default(),\n                              ty::maps::Providers::default(),\n-                             Rc::new(Passes::new()),\n                              &arenas,\n                              &arena,\n                              resolutions,"}, {"sha": "32ef3eafefccc7e4269f4946981512d2e775e5b0", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -20,6 +20,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]\n #![feature(const_fn)]\n+#![feature(core_intrinsics)]\n #![feature(i128_type)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(placement_in_syntax)]"}, {"sha": "3f4cc3c1486b2ba108da2c490532101f43ca53a6", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -10,8 +10,9 @@\n \n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use transform::MirPass;\n \n #[derive(PartialEq)]\n pub enum AddCallGuards {"}, {"sha": "aeb61e8c8842cf36664915b48c09334ac11cd4ef", "filename": "src/librustc_mir/transform/add_validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -17,8 +17,9 @@\n use rustc::ty::{self, TyCtxt, RegionKind};\n use rustc::hir;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::middle::region;\n+use transform::MirPass;\n \n pub struct AddValidation;\n "}, {"sha": "1096d26213b42d678d01da67920a2af10b94a8b8", "filename": "src/librustc_mir/transform/clean_end_regions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -22,10 +22,11 @@\n use rustc_data_structures::fx::FxHashSet;\n \n use rustc::middle::region;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::mir::{BasicBlock, Location, Mir, Rvalue, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, Visitor, TyContext};\n use rustc::ty::{Ty, RegionKind, TyCtxt};\n+use transform::MirPass;\n \n pub struct CleanEndRegions;\n "}, {"sha": "bc7da12ddc1899232c4974a7abba177d90ce06cc", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -30,9 +30,10 @@\n //! future.\n \n use rustc::mir::{Constant, Local, LocalKind, Location, Lvalue, Mir, Operand, Rvalue, StatementKind};\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n+use transform::MirPass;\n use util::def_use::DefUseAnalysis;\n \n pub struct CopyPropagation;"}, {"sha": "d74a5971f9f469cf8a5768f60da631092f811151", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -10,8 +10,9 @@\n \n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc_data_structures::indexed_vec::Idx;\n+use transform::MirPass;\n \n pub struct Deaggregator;\n "}, {"sha": "056690981525725b24b8ee092f37650cdb288c7d", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -16,9 +16,10 @@ use std::fs::File;\n use std::io;\n \n use rustc::mir::Mir;\n-use rustc::mir::transform::{MirPass, MirPassIndex, MirSource, MirSuite, PassHook};\n+use rustc::mir::transform::MirSource;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n+use transform::{MirPass, MirPassIndex, MirSuite, PassHook};\n use util as mir_util;\n \n pub struct Marker(pub &'static str);"}, {"sha": "a900a0146abc98b0afc1ee12b5763d262e4bdf11", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -17,11 +17,12 @@ use dataflow::MoveDataParamEnv;\n use dataflow;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::middle::const_val::ConstVal;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n+use transform::MirPass;\n use util::patch::MirPatch;\n use util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};\n use util::elaborate_drops::{DropElaborator, DropStyle, DropFlagMode};"}, {"sha": "85193487ee3ec4bf437f416125a060146f4f1195", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -18,7 +18,8 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, TyContext};\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n+use transform::MirPass;\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "e1adc4fab1d66d3ca6f9b9ff8a4fa1f02438eba3", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -63,7 +63,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::mir::visit::{LvalueContext, Visitor, MutVisitor};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, GeneratorInterior};\n use rustc::ty::subst::{Kind, Substs};\n@@ -76,6 +76,7 @@ use std::collections::HashMap;\n use std::borrow::Cow;\n use std::iter::once;\n use std::mem;\n+use transform::MirPass;\n use transform::simplify;\n use transform::no_landing_pads::no_landing_pads;\n use dataflow::{self, MaybeStorageLive, state_for_location};"}, {"sha": "2e973ec4a92ff5a232246c3bacacaa77fc1cac17", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -16,12 +16,13 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::mir::visit::*;\n use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst::{Subst,Substs};\n \n use std::collections::VecDeque;\n+use transform::MirPass;\n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n \n use syntax::{attr};"}, {"sha": "083185cc93f9dc2c0093fcb60c899fd4f4d54d03", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -11,12 +11,13 @@\n //! Performs various peephole optimizations.\n \n use rustc::mir::{Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue, Local};\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::mir::visit::{MutVisitor, Visitor};\n use rustc::ty::TyCtxt;\n use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n+use transform::MirPass;\n \n pub struct InstCombine;\n "}, {"sha": "590c60694921f2cb76af302626a09c01741e9e4f", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 163, "deletions": 6, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -11,14 +11,14 @@\n use build;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::mir::Mir;\n-use rustc::mir::transform::{MirPassIndex, MirSuite, MirSource,\n-                            MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED};\n+use rustc::mir::transform::MirSource;\n use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n use rustc::ty::steal::Steal;\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::util::nodemap::DefIdSet;\n+use std::borrow::Cow;\n use std::rc::Rc;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -144,17 +144,174 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     tcx.alloc_mir(mir)\n }\n \n+/// Generates a default name for the pass based on the name of the\n+/// type `T`.\n+pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n+    let name = unsafe { ::std::intrinsics::type_name::<T>() };\n+    if let Some(tail) = name.rfind(\":\") {\n+        Cow::from(&name[tail+1..])\n+    } else {\n+        Cow::from(name)\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub struct MirSuite(pub usize);\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub struct MirPassIndex(pub usize);\n+\n+/// A pass hook is invoked both before and after each pass executes.\n+/// This is primarily used to dump MIR for debugging.\n+///\n+/// You can tell whether this is before or after by inspecting the\n+/// `mir` parameter -- before the pass executes, it will be `None` (in\n+/// which case you can inspect the MIR from previous pass by executing\n+/// `mir_cx.read_previous_mir()`); after the pass executes, it will be\n+/// `Some()` with the result of the pass (in which case the output\n+/// from the previous pass is most likely stolen, so you would not\n+/// want to try and access it). If the pass is interprocedural, then\n+/// the hook will be invoked once per output.\n+pub trait PassHook {\n+    fn on_mir_pass<'a, 'tcx: 'a>(&self,\n+                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                 suite: MirSuite,\n+                                 pass_num: MirPassIndex,\n+                                 pass_name: &str,\n+                                 source: MirSource,\n+                                 mir: &Mir<'tcx>,\n+                                 is_after: bool);\n+}\n+\n+/// The full suite of types that identifies a particular\n+/// application of a pass to a def-id.\n+pub type PassId = (MirSuite, MirPassIndex, DefId);\n+\n+/// A streamlined trait that you can implement to create a pass; the\n+/// pass will be named after the type, and it will consist of a main\n+/// loop that goes over each available MIR and applies `run_pass`.\n+pub trait MirPass {\n+    fn name<'a>(&'a self) -> Cow<'a, str> {\n+        default_name::<Self>()\n+    }\n+\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          source: MirSource,\n+                          mir: &mut Mir<'tcx>);\n+}\n+\n+/// A manager for MIR passes.\n+///\n+/// FIXME(#41712) -- it is unclear whether we should have this struct.\n+#[derive(Clone)]\n+pub struct Passes {\n+    pass_hooks: Vec<Rc<PassHook>>,\n+    suites: Vec<Vec<Rc<MirPass>>>,\n+}\n+\n+/// The number of \"pass suites\" that we have:\n+///\n+/// - ready for constant evaluation\n+/// - unopt\n+/// - optimized\n+pub const MIR_SUITES: usize = 3;\n+\n+/// Run the passes we need to do constant qualification and evaluation.\n+pub const MIR_CONST: MirSuite = MirSuite(0);\n+\n+/// Run the passes we need to consider the MIR validated and ready for borrowck etc.\n+pub const MIR_VALIDATED: MirSuite = MirSuite(1);\n+\n+/// Run the passes we need to consider the MIR *optimized*.\n+pub const MIR_OPTIMIZED: MirSuite = MirSuite(2);\n+\n+impl<'a, 'tcx> Passes {\n+    pub fn new() -> Passes {\n+        Passes {\n+            pass_hooks: Vec::new(),\n+            suites: (0..MIR_SUITES).map(|_| Vec::new()).collect(),\n+        }\n+    }\n+\n+    /// Pushes a built-in pass.\n+    pub fn push_pass<T: MirPass + 'static>(&mut self, suite: MirSuite, pass: T) {\n+        self.suites[suite.0].push(Rc::new(pass));\n+    }\n+\n+    /// Pushes a pass hook.\n+    pub fn push_hook<T: PassHook + 'static>(&mut self, hook: T) {\n+        self.pass_hooks.push(Rc::new(hook));\n+    }\n+\n+    pub fn passes(&self, suite: MirSuite) -> &[Rc<MirPass>] {\n+        &self.suites[suite.0]\n+    }\n+\n+    pub fn hooks(&self) -> &[Rc<PassHook>] {\n+        &self.pass_hooks\n+    }\n+}\n+\n fn run_suite<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        source: MirSource,\n                        suite: MirSuite,\n                        mir: &mut Mir<'tcx>)\n {\n-    let passes = tcx.mir_passes.passes(suite);\n+    // Setup the MIR passes that we want to run.\n+    let mut passes = Passes::new();\n+    passes.push_hook(dump_mir::DumpMir);\n+\n+    // Remove all `EndRegion` statements that are not involved in borrows.\n+    passes.push_pass(MIR_CONST, clean_end_regions::CleanEndRegions);\n+\n+    // What we need to do constant evaluation.\n+    passes.push_pass(MIR_CONST, simplify::SimplifyCfg::new(\"initial\"));\n+    passes.push_pass(MIR_CONST, type_check::TypeckMir);\n+    passes.push_pass(MIR_CONST, rustc_peek::SanityCheck);\n+\n+    // We compute \"constant qualifications\" between MIR_CONST and MIR_VALIDATED.\n+\n+    // What we need to run borrowck etc.\n+\n+    passes.push_pass(MIR_VALIDATED, qualify_consts::QualifyAndPromoteConstants);\n+    passes.push_pass(MIR_VALIDATED, simplify::SimplifyCfg::new(\"qualify-consts\"));\n+\n+    // borrowck runs between MIR_VALIDATED and MIR_OPTIMIZED.\n+\n+    passes.push_pass(MIR_OPTIMIZED, no_landing_pads::NoLandingPads);\n+    passes.push_pass(MIR_OPTIMIZED,\n+                     simplify_branches::SimplifyBranches::new(\"initial\"));\n+\n+    // These next passes must be executed together\n+    passes.push_pass(MIR_OPTIMIZED, add_call_guards::CriticalCallEdges);\n+    passes.push_pass(MIR_OPTIMIZED, elaborate_drops::ElaborateDrops);\n+    passes.push_pass(MIR_OPTIMIZED, no_landing_pads::NoLandingPads);\n+    // AddValidation needs to run after ElaborateDrops and before EraseRegions, and it needs\n+    // an AllCallEdges pass right before it.\n+    passes.push_pass(MIR_OPTIMIZED, add_call_guards::AllCallEdges);\n+    passes.push_pass(MIR_OPTIMIZED, add_validation::AddValidation);\n+    passes.push_pass(MIR_OPTIMIZED, simplify::SimplifyCfg::new(\"elaborate-drops\"));\n+    // No lifetime analysis based on borrowing can be done from here on out.\n+\n+    // From here on out, regions are gone.\n+    passes.push_pass(MIR_OPTIMIZED, erase_regions::EraseRegions);\n+\n+    // Optimizations begin.\n+    passes.push_pass(MIR_OPTIMIZED, inline::Inline);\n+    passes.push_pass(MIR_OPTIMIZED, instcombine::InstCombine);\n+    passes.push_pass(MIR_OPTIMIZED, deaggregator::Deaggregator);\n+    passes.push_pass(MIR_OPTIMIZED, copy_prop::CopyPropagation);\n+    passes.push_pass(MIR_OPTIMIZED, simplify::SimplifyLocals);\n+\n+    passes.push_pass(MIR_OPTIMIZED, generator::StateTransform);\n+    passes.push_pass(MIR_OPTIMIZED, add_call_guards::CriticalCallEdges);\n+    passes.push_pass(MIR_OPTIMIZED, dump_mir::Marker(\"PreTrans\"));\n \n-    for (pass, index) in passes.iter().zip(0..) {\n+    for (index, pass) in passes.passes(suite).iter().enumerate() {\n         let pass_num = MirPassIndex(index);\n \n-        for hook in tcx.mir_passes.hooks() {\n+        for hook in passes.hooks() {\n             hook.on_mir_pass(tcx, suite, pass_num, &pass.name(), source, &mir, false);\n         }\n \n@@ -168,7 +325,7 @@ fn run_suite<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             assert!(promoted_mir.promoted.is_empty());\n         }\n \n-        for hook in tcx.mir_passes.hooks() {\n+        for hook in passes.hooks() {\n             hook.on_mir_pass(tcx, suite, pass_num, &pass.name(), source, &mir, true);\n         }\n     }"}, {"sha": "60f902361d9d87872300d1085545b17d0c2b746f", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -14,7 +14,8 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n+use transform::MirPass;\n \n pub struct NoLandingPads;\n "}, {"sha": "059d64b4676b82d7dcedd920bc48c58df0fb013c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -26,7 +26,7 @@ use rustc::ty::cast::CastTy;\n use rustc::ty::maps::Providers;\n use rustc::mir::*;\n use rustc::mir::traversal::ReversePostorder;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::middle::lang_items;\n use syntax::abi::Abi;\n@@ -38,6 +38,7 @@ use std::fmt;\n use std::rc::Rc;\n use std::usize;\n \n+use transform::MirPass;\n use super::promote_consts::{self, Candidate, TempState};\n \n bitflags! {"}, {"sha": "c14587d30874b85e0964d5015e8b4da75f7e429d", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -14,9 +14,10 @@ use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{self, Mir, Location};\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n+use transform::MirPass;\n \n use dataflow::do_dataflow;\n use dataflow::MoveDataParamEnv;"}, {"sha": "d63a693443bc10e8c14adb5374468607b84a66de", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -41,9 +41,10 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::mir::visit::{MutVisitor, Visitor, LvalueContext};\n use std::borrow::Cow;\n+use transform::MirPass;\n \n pub struct SimplifyCfg { label: String }\n "}, {"sha": "208509fb3687452c2510e6b4ab237973d74fb2f3", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -12,8 +12,9 @@\n \n use rustc::ty::{self, TyCtxt};\n use rustc::middle::const_val::ConstVal;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::mir::*;\n+use transform::MirPass;\n \n use std::borrow::Cow;\n "}, {"sha": "9d6df524699778ebb839de65900e639d22d94f24", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -18,11 +18,12 @@ use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::tcx::LvalueTy;\n-use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::mir::visit::Visitor;\n use std::fmt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n+use transform::MirPass;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "39bd7e1ab825e207006d4b5e554c7f0347235cc0", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86206f22a08f32a848f08d0f2415db2f5ef4a89a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=86206f22a08f32a848f08d0f2415db2f5ef4a89a", "patch": "@@ -11,7 +11,7 @@\n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::*;\n-use rustc::mir::transform::{MirSuite, MirPassIndex, MirSource};\n+use rustc::mir::transform::MirSource;\n use rustc::ty::TyCtxt;\n use rustc::ty::item_path;\n use rustc_data_structures::fx::FxHashMap;\n@@ -20,6 +20,7 @@ use std::fmt::Display;\n use std::fs;\n use std::io::{self, Write};\n use std::path::{PathBuf, Path};\n+use transform::{MirSuite, MirPassIndex};\n use super::graphviz::write_mir_fn_graphviz;\n \n const INDENT: &'static str = \"    \";"}]}