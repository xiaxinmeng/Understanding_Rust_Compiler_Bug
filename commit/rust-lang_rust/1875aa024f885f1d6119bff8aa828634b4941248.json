{"sha": "1875aa024f885f1d6119bff8aa828634b4941248", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzVhYTAyNGY4ODVmMWQ2MTE5YmZmOGFhODI4NjM0YjQ5NDEyNDg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-17T19:43:51Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-17T19:43:51Z"}, "message": "Merge #280\n\n280: Fixed cast expression parsing in ra_syntax. r=matklad a=ruabmbua\n\nFixes #279 \r\nRelated to https://github.com/rust-analyzer/rust-analyzer/pull/273\r\n\r\nThe cast expression expected any type via types::type_() function,\r\nbut the language spec does only allow TypeNoBounds (types without direct extra bounds\r\nvia `+`).\r\n\r\n**Example:**\r\n\r\n```rust\r\nfn test() {\r\n\t6i8 as i32 + 5;\r\n}\r\n```\r\n\r\nThis fails, because the types::type_() function which should parse the type after the\r\nas keyword is greedy, and takes the plus sign after path types as extra type bounds.\r\n\r\nMy proposed fix is to replace the not implemented `type_no_plus()` just calls (`type_()`)\r\nfunction, which is used at several places. The replacement is `type_with_bounds_cond(p: &mut Parser, allow_bounds: bool)`, which passes the condition to relevant sub-parsers.\r\n\r\nThis function is then called by `type_()` and the new public `type_no_bounds()`.\n\nCo-authored-by: Roland Ruckerbauer <roland.rucky@gmail.com>", "tree": {"sha": "273bdffe892f2eeef1850e2d3f7b1ca9ed228285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/273bdffe892f2eeef1850e2d3f7b1ca9ed228285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1875aa024f885f1d6119bff8aa828634b4941248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1875aa024f885f1d6119bff8aa828634b4941248", "html_url": "https://github.com/rust-lang/rust/commit/1875aa024f885f1d6119bff8aa828634b4941248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1875aa024f885f1d6119bff8aa828634b4941248/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "8d42deeac354d1f8297d6c4d52b2707fb8d7a771", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d42deeac354d1f8297d6c4d52b2707fb8d7a771", "html_url": "https://github.com/rust-lang/rust/commit/8d42deeac354d1f8297d6c4d52b2707fb8d7a771"}, {"sha": "d0f1334226fc25a8c00ecccd64c0021e4aef9ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f1334226fc25a8c00ecccd64c0021e4aef9ca5", "html_url": "https://github.com/rust-lang/rust/commit/d0f1334226fc25a8c00ecccd64c0021e4aef9ca5"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "a9449c7bf8353b1e3dd3c929f46354b4bd085a9d", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1875aa024f885f1d6119bff8aa828634b4941248/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1875aa024f885f1d6119bff8aa828634b4941248/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=1875aa024f885f1d6119bff8aa828634b4941248", "patch": "@@ -368,12 +368,16 @@ fn try_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n // test cast_expr\n // fn foo() {\n //     82 as i32;\n+//     81 as i8 + 1;\n+//     79 as i16 - 1;\n // }\n fn cast_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(AS_KW));\n     let m = lhs.precede(p);\n     p.bump();\n-    types::type_(p);\n+    // Use type_no_bounds(), because cast expressions are not\n+    // allowed to have bounds.\n+    types::type_no_bounds(p);\n     m.complete(p, CAST_EXPR)\n }\n "}, {"sha": "811d399d4ee12d95d6e63c7609cf2eee7ce5daf1", "filename": "crates/ra_syntax/src/grammar/types.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1875aa024f885f1d6119bff8aa828634b4941248/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1875aa024f885f1d6119bff8aa828634b4941248/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs?ref=1875aa024f885f1d6119bff8aa828634b4941248", "patch": "@@ -11,6 +11,14 @@ pub(super) const TYPE_FIRST: TokenSet = token_set_union![\n const TYPE_RECOVERY_SET: TokenSet = token_set![R_PAREN, COMMA];\n \n pub(super) fn type_(p: &mut Parser) {\n+    type_with_bounds_cond(p, true);\n+}\n+\n+pub(super) fn type_no_bounds(p: &mut Parser) {\n+    type_with_bounds_cond(p, false);\n+}\n+\n+fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n     match p.current() {\n         L_PAREN => paren_or_tuple_type(p),\n         EXCL => never_type(p),\n@@ -22,8 +30,9 @@ pub(super) fn type_(p: &mut Parser) {\n         FOR_KW => for_type(p),\n         IMPL_KW => impl_trait_type(p),\n         DYN_KW => dyn_trait_type(p),\n-        L_ANGLE => path_type(p),\n-        _ if paths::is_path_start(p) => path_type(p),\n+        // Some path types are not allowed to have bounds (no plus)\n+        L_ANGLE => path_type_(p, allow_bounds),\n+        _ if paths::is_path_start(p) => path_type_(p, allow_bounds),\n         _ => {\n             p.err_recover(\"expected type\", TYPE_RECOVERY_SET);\n         }\n@@ -35,10 +44,6 @@ pub(super) fn ascription(p: &mut Parser) {\n     type_(p)\n }\n \n-fn type_no_plus(p: &mut Parser) {\n-    type_(p);\n-}\n-\n fn paren_or_tuple_type(p: &mut Parser) {\n     assert!(p.at(L_PAREN));\n     let m = p.start();\n@@ -101,7 +106,7 @@ fn pointer_type(p: &mut Parser) {\n         }\n     };\n \n-    type_no_plus(p);\n+    type_no_bounds(p);\n     m.complete(p, POINTER_TYPE);\n }\n \n@@ -147,7 +152,7 @@ fn reference_type(p: &mut Parser) {\n     p.bump();\n     p.eat(LIFETIME);\n     p.eat(MUT_KW);\n-    type_no_plus(p);\n+    type_no_bounds(p);\n     m.complete(p, REFERENCE_TYPE);\n }\n "}, {"sha": "b571a58608f73fcea11f2034a82274e6e6b8bd4e", "filename": "crates/ra_syntax/tests/data/parser/inline/0079_cast_expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1875aa024f885f1d6119bff8aa828634b4941248/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0079_cast_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1875aa024f885f1d6119bff8aa828634b4941248/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0079_cast_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0079_cast_expr.rs?ref=1875aa024f885f1d6119bff8aa828634b4941248", "patch": "@@ -1,3 +1,5 @@\n fn foo() {\n     82 as i32;\n+    81 as i8 + 1;\n+    79 as i16 - 1;\n }"}, {"sha": "cb56aef0ba30b7afeed0686b9573ffe08aab79b7", "filename": "crates/ra_syntax/tests/data/parser/inline/0079_cast_expr.txt", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1875aa024f885f1d6119bff8aa828634b4941248/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0079_cast_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1875aa024f885f1d6119bff8aa828634b4941248/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0079_cast_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0079_cast_expr.txt?ref=1875aa024f885f1d6119bff8aa828634b4941248", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 28)\n-  FN_DEF@[0; 27)\n+SOURCE_FILE@[0; 65)\n+  FN_DEF@[0; 64)\n     FN_KW@[0; 2)\n     WHITESPACE@[2; 3)\n     NAME@[3; 6)\n@@ -8,7 +8,7 @@ SOURCE_FILE@[0; 28)\n       L_PAREN@[6; 7)\n       R_PAREN@[7; 8)\n     WHITESPACE@[8; 9)\n-    BLOCK@[9; 27)\n+    BLOCK@[9; 64)\n       L_CURLY@[9; 10)\n       WHITESPACE@[10; 15)\n       EXPR_STMT@[15; 25)\n@@ -24,6 +24,46 @@ SOURCE_FILE@[0; 28)\n                 NAME_REF@[21; 24)\n                   IDENT@[21; 24) \"i32\"\n         SEMI@[24; 25)\n-      WHITESPACE@[25; 26)\n-      R_CURLY@[26; 27)\n-  WHITESPACE@[27; 28)\n+      WHITESPACE@[25; 30)\n+      EXPR_STMT@[30; 43)\n+        BIN_EXPR@[30; 42)\n+          CAST_EXPR@[30; 38)\n+            LITERAL@[30; 32)\n+              INT_NUMBER@[30; 32) \"81\"\n+            WHITESPACE@[32; 33)\n+            AS_KW@[33; 35)\n+            WHITESPACE@[35; 36)\n+            PATH_TYPE@[36; 38)\n+              PATH@[36; 38)\n+                PATH_SEGMENT@[36; 38)\n+                  NAME_REF@[36; 38)\n+                    IDENT@[36; 38) \"i8\"\n+          WHITESPACE@[38; 39)\n+          PLUS@[39; 40)\n+          WHITESPACE@[40; 41)\n+          LITERAL@[41; 42)\n+            INT_NUMBER@[41; 42) \"1\"\n+        SEMI@[42; 43)\n+      WHITESPACE@[43; 48)\n+      EXPR_STMT@[48; 62)\n+        BIN_EXPR@[48; 61)\n+          CAST_EXPR@[48; 57)\n+            LITERAL@[48; 50)\n+              INT_NUMBER@[48; 50) \"79\"\n+            WHITESPACE@[50; 51)\n+            AS_KW@[51; 53)\n+            WHITESPACE@[53; 54)\n+            PATH_TYPE@[54; 57)\n+              PATH@[54; 57)\n+                PATH_SEGMENT@[54; 57)\n+                  NAME_REF@[54; 57)\n+                    IDENT@[54; 57) \"i16\"\n+          WHITESPACE@[57; 58)\n+          MINUS@[58; 59)\n+          WHITESPACE@[59; 60)\n+          LITERAL@[60; 61)\n+            INT_NUMBER@[60; 61) \"1\"\n+        SEMI@[61; 62)\n+      WHITESPACE@[62; 63)\n+      R_CURLY@[63; 64)\n+  WHITESPACE@[64; 65)"}]}