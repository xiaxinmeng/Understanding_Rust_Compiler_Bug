{"sha": "a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MmMzNjBhMzBmOWE4MTYwZTRmNDAzNDBjZWNjOWIxY2U5NzljZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-20T05:34:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-20T05:34:22Z"}, "message": "Auto merge of #87141 - spastorino:remove_impl_trait_in_bindings, r=oli-obk\n\nRemove impl trait in bindings\n\nCloses #86729\n\nr? `@oli-obk`", "tree": {"sha": "4790248c6db5f17be54ef0d785e5fa4260f0bf05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4790248c6db5f17be54ef0d785e5fa4260f0bf05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "html_url": "https://github.com/rust-lang/rust/commit/a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "html_url": "https://github.com/rust-lang/rust/commit/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0"}, {"sha": "3e857f5743295bf81380e45467372ab45f322e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e857f5743295bf81380e45467372ab45f322e1c", "html_url": "https://github.com/rust-lang/rust/commit/3e857f5743295bf81380e45467372ab45f322e1c"}], "stats": {"total": 2486, "additions": 536, "deletions": 1950}, "files": [{"sha": "9f9d41c3f3d9e8f816d7ad0a99eae3c4abfc2dd9", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -343,9 +343,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // opaque type Foo1: Trait\n                 let ty = self.lower_ty(\n                     ty,\n-                    ImplTraitContext::OtherOpaqueTy {\n+                    ImplTraitContext::TypeAliasesOpaqueTy {\n                         capturable_lifetimes: &mut FxHashSet::default(),\n-                        origin: hir::OpaqueTyOrigin::TyAlias,\n                     },\n                 );\n                 let generics = self.lower_generics(gen, ImplTraitContext::disallowed());\n@@ -484,17 +483,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         body: Option<&Expr>,\n     ) -> (&'hir hir::Ty<'hir>, hir::BodyId) {\n-        let mut capturable_lifetimes;\n-        let itctx = if self.sess.features_untracked().impl_trait_in_bindings {\n-            capturable_lifetimes = FxHashSet::default();\n-            ImplTraitContext::OtherOpaqueTy {\n-                capturable_lifetimes: &mut capturable_lifetimes,\n-                origin: hir::OpaqueTyOrigin::Misc,\n-            }\n-        } else {\n-            ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n-        };\n-        let ty = self.lower_ty(ty, itctx);\n+        let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Binding));\n         (ty, self.lower_const_body(span, body))\n     }\n \n@@ -926,9 +915,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     Some(ty) => {\n                         let ty = self.lower_ty(\n                             ty,\n-                            ImplTraitContext::OtherOpaqueTy {\n+                            ImplTraitContext::TypeAliasesOpaqueTy {\n                                 capturable_lifetimes: &mut FxHashSet::default(),\n-                                origin: hir::OpaqueTyOrigin::TyAlias,\n                             },\n                         );\n                         hir::ImplItemKind::TyAlias(ty)"}, {"sha": "d4caba924160088c892f4e487b172ef809bd3a51", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 21, "deletions": 43, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -264,8 +264,8 @@ enum ImplTraitContext<'b, 'a> {\n         /// Origin: Either OpaqueTyOrigin::FnReturn or OpaqueTyOrigin::AsyncFn,\n         origin: hir::OpaqueTyOrigin,\n     },\n-    /// Impl trait in type aliases, consts and statics.\n-    OtherOpaqueTy {\n+    /// Impl trait in type aliases.\n+    TypeAliasesOpaqueTy {\n         /// Set of lifetimes that this opaque type can capture, if it uses\n         /// them. This includes lifetimes bound since we entered this context.\n         /// For example:\n@@ -280,8 +280,6 @@ enum ImplTraitContext<'b, 'a> {\n         // FIXME(impl_trait): but `required_region_bounds` will ICE later\n         // anyway.\n         capturable_lifetimes: &'b mut FxHashSet<hir::LifetimeName>,\n-        /// Origin: Either OpaqueTyOrigin::Misc or OpaqueTyOrigin::Binding,\n-        origin: hir::OpaqueTyOrigin,\n     },\n     /// `impl Trait` is not accepted in this position.\n     Disallowed(ImplTraitPosition),\n@@ -310,8 +308,8 @@ impl<'a> ImplTraitContext<'_, 'a> {\n             ReturnPositionOpaqueTy { fn_def_id, origin } => {\n                 ReturnPositionOpaqueTy { fn_def_id: *fn_def_id, origin: *origin }\n             }\n-            OtherOpaqueTy { capturable_lifetimes, origin } => {\n-                OtherOpaqueTy { capturable_lifetimes, origin: *origin }\n+            TypeAliasesOpaqueTy { capturable_lifetimes } => {\n+                TypeAliasesOpaqueTy { capturable_lifetimes }\n             }\n             Disallowed(pos) => Disallowed(*pos),\n         }\n@@ -1126,7 +1124,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //\n                     //     fn foo() -> impl Iterator<Item = impl Debug>\n                     ImplTraitContext::ReturnPositionOpaqueTy { .. }\n-                    | ImplTraitContext::OtherOpaqueTy { .. } => (true, itctx),\n+                    | ImplTraitContext::TypeAliasesOpaqueTy { .. } => (true, itctx),\n \n                     // We are in the argument position, but within a dyn type:\n                     //\n@@ -1150,9 +1148,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         capturable_lifetimes = FxHashSet::default();\n                         (\n                             true,\n-                            ImplTraitContext::OtherOpaqueTy {\n+                            ImplTraitContext::TypeAliasesOpaqueTy {\n                                 capturable_lifetimes: &mut capturable_lifetimes,\n-                                origin: hir::OpaqueTyOrigin::Misc,\n                             },\n                         )\n                     }\n@@ -1416,18 +1413,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             None,\n                             |this| this.lower_param_bounds(bounds, itctx),\n                         ),\n-                    ImplTraitContext::OtherOpaqueTy { ref capturable_lifetimes, origin } => {\n+                    ImplTraitContext::TypeAliasesOpaqueTy { ref capturable_lifetimes } => {\n                         // Reset capturable lifetimes, any nested impl trait\n                         // types will inherit lifetimes from this opaque type,\n                         // so don't need to capture them again.\n-                        let nested_itctx = ImplTraitContext::OtherOpaqueTy {\n+                        let nested_itctx = ImplTraitContext::TypeAliasesOpaqueTy {\n                             capturable_lifetimes: &mut FxHashSet::default(),\n-                            origin,\n                         };\n                         self.lower_opaque_impl_trait(\n                             span,\n                             None,\n-                            origin,\n+                            hir::OpaqueTyOrigin::TyAlias,\n                             def_node_id,\n                             Some(capturable_lifetimes),\n                             |this| this.lower_param_bounds(bounds, nested_itctx),\n@@ -1464,25 +1460,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             }),\n                         ))\n                     }\n-                    ImplTraitContext::Disallowed(pos) => {\n-                        let allowed_in = if self.sess.features_untracked().impl_trait_in_bindings {\n-                            \"bindings or function and inherent method return types\"\n-                        } else {\n-                            \"function and inherent method return types\"\n-                        };\n+                    ImplTraitContext::Disallowed(_) => {\n                         let mut err = struct_span_err!(\n                             self.sess,\n                             t.span,\n                             E0562,\n                             \"`impl Trait` not allowed outside of {}\",\n-                            allowed_in,\n+                            \"function and method return types\",\n                         );\n-                        if pos == ImplTraitPosition::Binding && self.sess.is_nightly_build() {\n-                            err.help(\n-                                \"add `#![feature(impl_trait_in_bindings)]` to the crate \\\n-                                   attributes to enable\",\n-                            );\n-                        }\n                         err.emit();\n                         hir::TyKind::Err\n                     }\n@@ -1767,21 +1752,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_local(&mut self, l: &Local) -> hir::Local<'hir> {\n-        let ty = l.ty.as_ref().map(|t| {\n-            let mut capturable_lifetimes;\n-            self.lower_ty(\n-                t,\n-                if self.sess.features_untracked().impl_trait_in_bindings {\n-                    capturable_lifetimes = FxHashSet::default();\n-                    ImplTraitContext::OtherOpaqueTy {\n-                        capturable_lifetimes: &mut capturable_lifetimes,\n-                        origin: hir::OpaqueTyOrigin::Binding,\n-                    }\n-                } else {\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n-                },\n-            )\n-        });\n+        let ty = l\n+            .ty\n+            .as_ref()\n+            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n         let init = l.init.as_ref().map(|e| self.lower_expr(e));\n         let hir_id = self.lower_node_id(l.id);\n         self.lower_attrs(hir_id, &l.attrs);\n@@ -2332,13 +2306,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 )),\n                 _ => None,\n             });\n-            if let ImplTraitContext::OtherOpaqueTy { ref mut capturable_lifetimes, .. } = itctx {\n+            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes, .. } =\n+                itctx\n+            {\n                 capturable_lifetimes.extend(lt_def_names.clone());\n             }\n \n             let res = this.lower_trait_ref(&p.trait_ref, itctx.reborrow());\n \n-            if let ImplTraitContext::OtherOpaqueTy { ref mut capturable_lifetimes, .. } = itctx {\n+            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes, .. } =\n+                itctx\n+            {\n                 for param in lt_def_names {\n                     capturable_lifetimes.remove(&param);\n                 }"}, {"sha": "a3e40daf6bf6dccaaf22787394abd7b157a5f6e5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -455,9 +455,6 @@ declare_features! (\n     /// Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n-    (incomplete, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n-\n     /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n "}, {"sha": "29f4423ec85ac05e7bd7c728fe902087abe00a23", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -148,6 +148,10 @@ declare_features! (\n     (removed, const_raw_ptr_to_usize_cast, \"1.55.0\", Some(51910), None,\n      Some(\"at compile-time, pointers do not have an integer value, so these casts cannot be properly supported\")),\n \n+    /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n+    (removed, impl_trait_in_bindings, \"1.55.0\", Some(63065), None,\n+     Some(\"the implementation was not maintainable, the feature may get reintroduced once the current refactorings are done\")),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n     // -------------------------------------------------------------------------"}, {"sha": "5c7d10560ca912da95b02ab2dc8af82af75a885a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -2264,18 +2264,14 @@ pub struct OpaqueTy<'hir> {\n }\n \n /// From whence the opaque type came.\n-#[derive(Copy, Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum OpaqueTyOrigin {\n     /// `-> impl Trait`\n     FnReturn,\n     /// `async fn`\n     AsyncFn,\n-    /// `let _: impl Trait = ...`\n-    Binding,\n     /// type aliases: `type Foo = impl Trait;`\n     TyAlias,\n-    /// Impl trait consts, statics, bounds.\n-    Misc,\n }\n \n /// The various kinds of types recognized by the compiler."}, {"sha": "9a718102cf11d8d225cab04a461eadd1ac2bebae", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -491,11 +491,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             span\n         };\n \n-        let is_named_and_not_impl_trait = |ty: Ty<'_>| {\n-            &ty.to_string() != \"_\" &&\n-                // FIXME: Remove this check after `impl_trait_in_bindings` is stabilized. #63527\n-                (!ty.is_impl_trait() || self.tcx.features().impl_trait_in_bindings)\n-        };\n+        let is_named_and_not_impl_trait =\n+            |ty: Ty<'_>| &ty.to_string() != \"_\" && !ty.is_impl_trait();\n \n         let ty_msg = match (local_visitor.found_node_ty, local_visitor.found_exact_method_call) {\n             (_, Some(_)) => String::new(),"}, {"sha": "2e2578df01146aca4fce8335ac4dc3bd10e58be3", "filename": "compiler/rustc_mir/src/borrow_check/member_constraints.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmember_constraints.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,5 +1,4 @@\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::MemberConstraint;\n use rustc_middle::ty::{self, Ty};\n@@ -32,9 +31,6 @@ where\n crate struct NllMemberConstraint<'tcx> {\n     next_constraint: Option<NllMemberConstraintIndex>,\n \n-    /// The opaque type whose hidden type is being inferred. (Used in error reporting.)\n-    crate opaque_type_def_id: DefId,\n-\n     /// The span where the hidden type was instantiated.\n     crate definition_span: Span,\n \n@@ -91,7 +87,6 @@ impl<'tcx> MemberConstraintSet<'tcx, ty::RegionVid> {\n         let constraint_index = self.constraints.push(NllMemberConstraint {\n             next_constraint,\n             member_region_vid,\n-            opaque_type_def_id: m_c.opaque_type_def_id,\n             definition_span: m_c.definition_span,\n             hidden_ty: m_c.hidden_ty,\n             start_index,"}, {"sha": "c40e6bf1ec33b8f6b4cae993d9828ce6910a0cc1", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -551,7 +551,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         polonius_output: Option<Rc<PoloniusOutput>>,\n     ) -> (Option<ClosureRegionRequirements<'tcx>>, RegionErrors<'tcx>) {\n         let mir_def_id = body.source.def_id();\n-        self.propagate_constraints(body, infcx.tcx);\n+        self.propagate_constraints(body);\n \n         let mut errors_buffer = RegionErrors::new();\n \n@@ -599,7 +599,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// for each region variable until all the constraints are\n     /// satisfied. Note that some values may grow **too** large to be\n     /// feasible, but we check this later.\n-    fn propagate_constraints(&mut self, _body: &Body<'tcx>, tcx: TyCtxt<'tcx>) {\n+    fn propagate_constraints(&mut self, _body: &Body<'tcx>) {\n         debug!(\"propagate_constraints()\");\n \n         debug!(\"propagate_constraints: constraints={:#?}\", {\n@@ -617,7 +617,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // own.\n         let constraint_sccs = self.constraint_sccs.clone();\n         for scc in constraint_sccs.all_sccs() {\n-            self.compute_value_for_scc(scc, tcx);\n+            self.compute_value_for_scc(scc);\n         }\n \n         // Sort the applied member constraints so we can binary search\n@@ -629,7 +629,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// computed, by unioning the values of its successors.\n     /// Assumes that all successors have been computed already\n     /// (which is assured by iterating over SCCs in dependency order).\n-    fn compute_value_for_scc(&mut self, scc_a: ConstraintSccIndex, tcx: TyCtxt<'tcx>) {\n+    fn compute_value_for_scc(&mut self, scc_a: ConstraintSccIndex) {\n         let constraint_sccs = self.constraint_sccs.clone();\n \n         // Walk each SCC `B` such that `A: B`...\n@@ -652,12 +652,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Now take member constraints into account.\n         let member_constraints = self.member_constraints.clone();\n         for m_c_i in member_constraints.indices(scc_a) {\n-            self.apply_member_constraint(\n-                tcx,\n-                scc_a,\n-                m_c_i,\n-                member_constraints.choice_regions(m_c_i),\n-            );\n+            self.apply_member_constraint(scc_a, m_c_i, member_constraints.choice_regions(m_c_i));\n         }\n \n         debug!(\n@@ -680,31 +675,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// If we make any changes, returns true, else false.\n     fn apply_member_constraint(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n         scc: ConstraintSccIndex,\n         member_constraint_index: NllMemberConstraintIndex,\n         choice_regions: &[ty::RegionVid],\n     ) -> bool {\n         debug!(\"apply_member_constraint(scc={:?}, choice_regions={:#?})\", scc, choice_regions,);\n \n-        if let Some(uh_oh) =\n-            choice_regions.iter().find(|&&r| !self.universal_regions.is_universal_region(r))\n-        {\n-            // FIXME(#61773): This case can only occur with\n-            // `impl_trait_in_bindings`, I believe, and we are just\n-            // opting not to handle it for now. See #61773 for\n-            // details.\n-            tcx.sess.delay_span_bug(\n-                self.member_constraints[member_constraint_index].definition_span,\n-                &format!(\n-                    \"member constraint for `{:?}` has an option region `{:?}` \\\n-                     that is not a universal region\",\n-                    self.member_constraints[member_constraint_index].opaque_type_def_id, uh_oh,\n-                ),\n-            );\n-            return false;\n-        }\n-\n         // Create a mutable vector of the options. We'll try to winnow\n         // them down.\n         let mut choice_regions: Vec<ty::RegionVid> = choice_regions.to_vec();"}, {"sha": "37e0643228acc5c386ab545922bf0d82a43e46ae", "filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -122,7 +122,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if let Err(terr) = self.eq_opaque_type_and_type(\n             mir_output_ty,\n             normalized_output_ty,\n-            mir_def_id,\n             Locations::All(output_span),\n             ConstraintCategory::BoringNoLocation,\n         ) {\n@@ -145,7 +144,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             if let Err(err) = self.eq_opaque_type_and_type(\n                 mir_output_ty,\n                 user_provided_output_ty,\n-                mir_def_id,\n                 Locations::All(output_span),\n                 ConstraintCategory::BoringNoLocation,\n             ) {"}, {"sha": "aa3ff98f7ff9f7439683a81da5ae9e6ae3cee89a", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 36, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1119,6 +1119,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         )\n     }\n \n+    /// Try to relate `sub <: sup`\n     fn sub_types(\n         &mut self,\n         sub: Ty<'tcx>,\n@@ -1129,32 +1130,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.relate_types(sub, ty::Variance::Covariant, sup, locations, category)\n     }\n \n-    /// Try to relate `sub <: sup`; if this fails, instantiate opaque\n-    /// variables in `sub` with their inferred definitions and try\n-    /// again. This is used for opaque types in places (e.g., `let x:\n-    /// impl Foo = ..`).\n-    fn sub_types_or_anon(\n-        &mut self,\n-        sub: Ty<'tcx>,\n-        sup: Ty<'tcx>,\n-        locations: Locations,\n-        category: ConstraintCategory,\n-    ) -> Fallible<()> {\n-        if let Err(terr) = self.sub_types(sub, sup, locations, category) {\n-            if let ty::Opaque(..) = sup.kind() {\n-                // When you have `let x: impl Foo = ...` in a closure,\n-                // the resulting inferend values are stored with the\n-                // def-id of the base function.\n-                let parent_def_id =\n-                    self.tcx().closure_base_def_id(self.body.source.def_id()).expect_local();\n-                return self.eq_opaque_type_and_type(sub, sup, parent_def_id, locations, category);\n-            } else {\n-                return Err(terr);\n-            }\n-        }\n-        Ok(())\n-    }\n-\n     fn eq_types(\n         &mut self,\n         a: Ty<'tcx>,\n@@ -1207,7 +1182,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     }\n \n     /// Equates a type `anon_ty` that may contain opaque types whose\n-    /// values are to be inferred by the MIR with def-id `anon_owner_def_id`.\n+    /// values are to be inferred by the MIR.\n     ///\n     /// The type `revealed_ty` contains the same type as `anon_ty`, but with the\n     /// hidden types for impl traits revealed.\n@@ -1235,12 +1210,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     ///   generics of `foo`). Note that `anon_ty` is not just the opaque type,\n     ///   but the entire return type (which may contain opaque types within it).\n     /// * `revealed_ty` would be `Box<(T, u32)>`\n-    /// * `anon_owner_def_id` would be the def-id of `foo`\n     fn eq_opaque_type_and_type(\n         &mut self,\n         revealed_ty: Ty<'tcx>,\n         anon_ty: Ty<'tcx>,\n-        anon_owner_def_id: LocalDefId,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n@@ -1270,12 +1243,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let tcx = infcx.tcx;\n         let param_env = self.param_env;\n         let body = self.body;\n+        let mir_def_id = body.source.def_id().expect_local();\n \n         // the \"concrete opaque types\" maps\n-        let concrete_opaque_types = &tcx.typeck(anon_owner_def_id).concrete_opaque_types;\n+        let concrete_opaque_types = &tcx.typeck(mir_def_id).concrete_opaque_types;\n         let mut opaque_type_values = VecMap::new();\n \n-        debug!(\"eq_opaque_type_and_type: mir_def_id={:?}\", body.source.def_id());\n+        debug!(\"eq_opaque_type_and_type: mir_def_id={:?}\", mir_def_id);\n         let opaque_type_map = self.fully_perform_op(\n             locations,\n             category,\n@@ -1293,7 +1267,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     // any generic parameters.)\n                     let (output_ty, opaque_type_map) =\n                         obligations.add(infcx.instantiate_opaque_types(\n-                            anon_owner_def_id,\n+                            mir_def_id,\n                             dummy_body_id,\n                             param_env,\n                             anon_ty,\n@@ -1489,7 +1463,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 let rv_ty = rv.ty(body, tcx);\n                 let rv_ty = self.normalize(rv_ty, location);\n                 if let Err(terr) =\n-                    self.sub_types_or_anon(rv_ty, place_ty, location.to_locations(), category)\n+                    self.sub_types(rv_ty, place_ty, location.to_locations(), category)\n                 {\n                     span_mirbug!(\n                         self,\n@@ -1776,9 +1750,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 let locations = term_location.to_locations();\n \n-                if let Err(terr) =\n-                    self.sub_types_or_anon(sig.output(), dest_ty, locations, category)\n-                {\n+                if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations, category) {\n                     span_mirbug!(\n                         self,\n                         term,"}, {"sha": "926bd830da0ac470afcf1d1661569da560b1b789", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -133,9 +133,6 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     traits::NonStructuralMatchTy::Generator => {\n                         \"generators cannot be used in patterns\".to_string()\n                     }\n-                    traits::NonStructuralMatchTy::Closure => {\n-                        \"closures cannot be used in patterns\".to_string()\n-                    }\n                     traits::NonStructuralMatchTy::Param => {\n                         bug!(\"use of a constant whose type is a parameter inside a pattern\")\n                     }"}, {"sha": "39013a317fd9c494af6c94439bea66dbc5df7ad4", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -402,9 +402,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             // These opaque type inherit all lifetime parameters from their\n             // parent, so we have to check them all.\n-            hir::OpaqueTyOrigin::Binding\n-            | hir::OpaqueTyOrigin::TyAlias\n-            | hir::OpaqueTyOrigin::Misc => 0,\n+            hir::OpaqueTyOrigin::TyAlias => 0,\n         };\n \n         let span = tcx.def_span(def_id);\n@@ -996,7 +994,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                                     may_define_opaque_type(tcx, self.parent_def_id, opaque_hir_id),\n                                     origin,\n                                 ),\n-                                _ => (def_scope_default(), hir::OpaqueTyOrigin::Misc),\n+                                _ => (def_scope_default(), hir::OpaqueTyOrigin::TyAlias),\n                             };\n                         if in_definition_scope {\n                             let opaque_type_key ="}, {"sha": "a6323a65aadbce9c4a451c13fc5049422a34eb9c", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -19,7 +19,6 @@ pub enum NonStructuralMatchTy<'tcx> {\n     Opaque,\n     Generator,\n     Projection,\n-    Closure,\n }\n \n /// This method traverses the structure of `ty`, trying to find an\n@@ -155,9 +154,6 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n             ty::Generator(..) | ty::GeneratorWitness(..) => {\n                 return ControlFlow::Break(NonStructuralMatchTy::Generator);\n             }\n-            ty::Closure(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Closure);\n-            }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n                 // `*const _`/`*mut _`, so skip `super_visit_with`.\n@@ -198,7 +194,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 // First check all contained types and then tell the caller to continue searching.\n                 return ty.super_visit_with(self);\n             }\n-            ty::Infer(_) | ty::Placeholder(_) | ty::Bound(..) => {\n+            ty::Closure(..) | ty::Infer(_) | ty::Placeholder(_) | ty::Bound(..) => {\n                 bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n             }\n             ty::Error(_) => {"}, {"sha": "b5db3331d044781bca42a36d6956cd2d9ed2d39e", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -221,9 +221,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         fcx.resume_yield_tys = Some((resume_ty, yield_ty));\n     }\n \n-    let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id).to_def_id()).expect_local();\n-    let outer_hir_id = hir.local_def_id_to_hir_id(outer_def_id);\n-    GatherLocalsVisitor::new(&fcx, outer_hir_id).visit_body(body);\n+    GatherLocalsVisitor::new(&fcx).visit_body(body);\n \n     // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n     // (as it's created inside the body itself, not passed in from outside).\n@@ -665,13 +663,9 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) -> Result<(), ErrorReported> {\n-    if let Err(partially_expanded_type) = tcx.try_expand_impl_trait_type(def_id.to_def_id(), substs)\n-    {\n+    if tcx.try_expand_impl_trait_type(def_id.to_def_id(), substs).is_err() {\n         match origin {\n             hir::OpaqueTyOrigin::AsyncFn => async_opaque_type_cycle_error(tcx, span),\n-            hir::OpaqueTyOrigin::Binding => {\n-                binding_opaque_type_cycle_error(tcx, def_id, span, partially_expanded_type)\n-            }\n             _ => opaque_type_cycle_error(tcx, def_id, span),\n         }\n         Err(ErrorReported)\n@@ -704,8 +698,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         // Checked when type checking the function containing them.\n         hir::OpaqueTyOrigin::FnReturn | hir::OpaqueTyOrigin::AsyncFn => return,\n         // Can have different predicates to their defining use\n-        hir::OpaqueTyOrigin::Binding | hir::OpaqueTyOrigin::Misc | hir::OpaqueTyOrigin::TyAlias => {\n-        }\n+        hir::OpaqueTyOrigin::TyAlias => {}\n     }\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "4ebfd7fd21200aad744e75699ed87959f78439e7", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -4,21 +4,20 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::Ty;\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n pub(super) struct GatherLocalsVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n-    parent_id: hir::HirId,\n     // parameters are special cases of patterns, but we want to handle them as\n     // *distinct* cases. so track when we are hitting a pattern *within* an fn\n     // parameter.\n     outermost_fn_param_pat: Option<Span>,\n }\n \n impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n-    pub(super) fn new(fcx: &'a FnCtxt<'a, 'tcx>, parent_id: hir::HirId) -> Self {\n-        Self { fcx, parent_id, outermost_fn_param_pat: None }\n+    pub(super) fn new(fcx: &'a FnCtxt<'a, 'tcx>) -> Self {\n+        Self { fcx, outermost_fn_param_pat: None }\n     }\n \n     fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n@@ -57,26 +56,15 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n             Some(ref ty) => {\n                 let o_ty = self.fcx.to_ty(&ty);\n \n-                let revealed_ty = self.fcx.instantiate_opaque_types_from_value(\n-                    self.parent_id,\n-                    o_ty,\n-                    ty.span,\n-                    Some(sym::impl_trait_in_bindings),\n-                );\n-\n-                let c_ty =\n-                    self.fcx.inh.infcx.canonicalize_user_type_annotation(UserType::Ty(revealed_ty));\n-                debug!(\n-                    \"visit_local: ty.hir_id={:?} o_ty={:?} revealed_ty={:?} c_ty={:?}\",\n-                    ty.hir_id, o_ty, revealed_ty, c_ty\n-                );\n+                let c_ty = self.fcx.inh.infcx.canonicalize_user_type_annotation(UserType::Ty(o_ty));\n+                debug!(\"visit_local: ty.hir_id={:?} o_ty={:?} c_ty={:?}\", ty.hir_id, o_ty, c_ty);\n                 self.fcx\n                     .typeck_results\n                     .borrow_mut()\n                     .user_provided_types_mut()\n                     .insert(ty.hir_id, c_ty);\n \n-                Some(LocalTy { decl_ty: o_ty, revealed_ty })\n+                Some(LocalTy { decl_ty: o_ty, revealed_ty: o_ty })\n             }\n             None => None,\n         };"}, {"sha": "d30b057e26fe369b403258cd34610e97fc4d8680", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 71, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -118,9 +118,9 @@ use rustc_middle::ty::{self, Ty, TyCtxt, UserType};\n use rustc_session::config;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n+use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n-use rustc_span::{source_map::DUMMY_SP, sym};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n@@ -441,19 +441,12 @@ fn typeck_with_fallback<'tcx>(\n             let expected_type = fcx.normalize_associated_types_in(body.value.span, expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n \n-            let revealed_ty = fcx.instantiate_opaque_types_from_value(\n-                id,\n-                expected_type,\n-                body.value.span,\n-                Some(sym::impl_trait_in_bindings),\n-            );\n-\n             // Gather locals in statics (because of block expressions).\n-            GatherLocalsVisitor::new(&fcx, id).visit_body(body);\n+            GatherLocalsVisitor::new(&fcx).visit_body(body);\n \n-            fcx.check_expr_coercable_to_type(&body.value, revealed_ty, None);\n+            fcx.check_expr_coercable_to_type(&body.value, expected_type, None);\n \n-            fcx.write_ty(id, revealed_ty);\n+            fcx.write_ty(id, expected_type);\n \n             fcx\n         };\n@@ -573,66 +566,6 @@ fn get_owner_return_paths(\n         })\n }\n \n-/// Emit an error for recursive opaque types in a `let` binding.\n-fn binding_opaque_type_cycle_error(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: LocalDefId,\n-    span: Span,\n-    partially_expanded_type: Ty<'tcx>,\n-) {\n-    let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n-    err.span_label(span, \"cannot resolve opaque type\");\n-    // Find the owner that declared this `impl Trait` type.\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let mut prev_hir_id = hir_id;\n-    let mut hir_id = tcx.hir().get_parent_node(hir_id);\n-    while let Some(node) = tcx.hir().find(hir_id) {\n-        match node {\n-            hir::Node::Local(hir::Local {\n-                pat,\n-                init: None,\n-                ty: Some(ty),\n-                source: hir::LocalSource::Normal,\n-                ..\n-            }) => {\n-                err.span_label(pat.span, \"this binding might not have a concrete type\");\n-                err.span_suggestion_verbose(\n-                    ty.span.shrink_to_hi(),\n-                    \"set the binding to a value for a concrete type to be resolved\",\n-                    \" = /* value */\".to_string(),\n-                    Applicability::HasPlaceholders,\n-                );\n-            }\n-            hir::Node::Local(hir::Local {\n-                init: Some(expr),\n-                source: hir::LocalSource::Normal,\n-                ..\n-            }) => {\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                let typeck_results =\n-                    tcx.typeck(tcx.hir().local_def_id(tcx.hir().get_parent_item(hir_id)));\n-                if let Some(ty) = typeck_results.node_type_opt(expr.hir_id) {\n-                    err.span_label(\n-                        expr.span,\n-                        &format!(\n-                            \"this is of type `{}`, which doesn't constrain \\\n-                             `{}` enough to arrive to a concrete type\",\n-                            ty, partially_expanded_type\n-                        ),\n-                    );\n-                }\n-            }\n-            _ => {}\n-        }\n-        if prev_hir_id == hir_id {\n-            break;\n-        }\n-        prev_hir_id = hir_id;\n-        hir_id = tcx.hir().get_parent_node(hir_id);\n-    }\n-    err.emit();\n-}\n-\n // Forbid defining intrinsics in Rust code,\n // as they must always be defined by the compiler.\n fn fn_maybe_err(tcx: TyCtxt<'_>, sp: Span, abi: Abi) {"}, {"sha": "935bcc9f32e2bb16a5b1be3587f398ef79433064", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -521,8 +521,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             let mut skip_add = false;\n \n             if let ty::Opaque(definition_ty_def_id, _substs) = *definition_ty.kind() {\n-                if let hir::OpaqueTyOrigin::Misc | hir::OpaqueTyOrigin::TyAlias = opaque_defn.origin\n-                {\n+                if opaque_defn.origin == hir::OpaqueTyOrigin::TyAlias {\n                     if opaque_type_key.def_id == definition_ty_def_id {\n                         debug!(\n                             \"skipping adding concrete definition for opaque type {:?} {:?}\","}, {"sha": "15469cb0066c50ec60112fb493d8e0a32653d224", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -356,9 +356,6 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n                     tcx.mk_adt(def, substs)\n                 }\n-                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::Binding, .. }) => {\n-                    let_position_impl_trait_type(tcx, def_id)\n-                }\n                 ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: None, .. }) => {\n                     find_opaque_ty_constraints(tcx, def_id)\n                 }\n@@ -696,60 +693,6 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n }\n \n-/// Retrieve the inferred concrete type for let position impl trait.\n-///\n-/// This is different to other kinds of impl trait because:\n-///\n-/// 1. We know which function contains the defining use (the function that\n-///    contains the let statement)\n-/// 2. We do not currently allow (free) lifetimes in the return type. `let`\n-///    statements in some statically unreachable code are removed from the MIR\n-///    by the time we borrow check, and it's not clear how we should handle\n-///    those.\n-fn let_position_impl_trait_type(tcx: TyCtxt<'_>, opaque_ty_id: LocalDefId) -> Ty<'_> {\n-    let scope = tcx.hir().get_defining_scope(tcx.hir().local_def_id_to_hir_id(opaque_ty_id));\n-    let scope_def_id = tcx.hir().local_def_id(scope);\n-\n-    let opaque_ty_def_id = opaque_ty_id.to_def_id();\n-\n-    let owner_typeck_results = tcx.typeck(scope_def_id);\n-    let concrete_ty = owner_typeck_results\n-        .concrete_opaque_types\n-        .get_by(|(key, _)| key.def_id == opaque_ty_def_id)\n-        .map(|concrete_ty| *concrete_ty)\n-        .unwrap_or_else(|| {\n-            tcx.sess.delay_span_bug(\n-                DUMMY_SP,\n-                &format!(\n-                    \"owner {:?} has no opaque type for {:?} in its typeck results\",\n-                    scope_def_id, opaque_ty_id\n-                ),\n-            );\n-            if let Some(ErrorReported) = owner_typeck_results.tainted_by_errors {\n-                // Some error in the owner fn prevented us from populating the\n-                // `concrete_opaque_types` table.\n-                tcx.ty_error()\n-            } else {\n-                // We failed to resolve the opaque type or it resolves to\n-                // itself. Return the non-revealed type, which should result in\n-                // E0720.\n-                tcx.mk_opaque(\n-                    opaque_ty_def_id,\n-                    InternalSubsts::identity_for_item(tcx, opaque_ty_def_id),\n-                )\n-            }\n-        });\n-    debug!(\"concrete_ty = {:?}\", concrete_ty);\n-    if concrete_ty.has_erased_regions() {\n-        // FIXME(impl_trait_in_bindings) Handle this case.\n-        tcx.sess.span_fatal(\n-            tcx.hir().span(tcx.hir().local_def_id_to_hir_id(opaque_ty_id)),\n-            \"lifetimes in impl Trait types in bindings are not currently supported\",\n-        );\n-    }\n-    concrete_ty\n-}\n-\n fn infer_placeholder_type<'a>(\n     tcx: TyCtxt<'a>,\n     def_id: LocalDefId,"}, {"sha": "5c6aa912c1b24ec3ff7c7e95887aadf6f2d4c860", "filename": "src/doc/unstable-book/src/language-features/impl-trait-in-bindings.md", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fimpl-trait-in-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fimpl-trait-in-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fimpl-trait-in-bindings.md?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,28 +0,0 @@\n-# `impl_trait_in_bindings`\n-\n-The tracking issue for this feature is: [#63065]\n-\n-[#63065]: https://github.com/rust-lang/rust/issues/63065\n-\n-------------------------\n-\n-The `impl_trait_in_bindings` feature gate lets you use `impl Trait` syntax in\n-`let`, `static`, and `const` bindings.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(impl_trait_in_bindings)]\n-\n-use std::fmt::Debug;\n-\n-fn main() {\n-    let a: impl Debug + Clone = 42;\n-    let b = a.clone();\n-    println!(\"{:?}\", b); // prints `42`\n-}\n-```\n-\n-Note however that because the types of `a` and `b` are opaque in the above\n-example, calling inherent methods or methods outside of the specified traits\n-(e.g., `a.abs()` or `b.abs()`) is not allowed, and yields an error."}, {"sha": "bffa5150fe1ce80bde0a549cdf3fe230c03319f4", "filename": "src/test/ui/associated-type-bounds/duplicate.full_tait.stderr", "status": "modified", "additions": 61, "deletions": 141, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -7,566 +7,486 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:6:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:11:36\n+  --> $DIR/duplicate.rs:10:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n+  --> $DIR/duplicate.rs:12:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:15:39\n+  --> $DIR/duplicate.rs:14:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:45\n+  --> $DIR/duplicate.rs:16:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:19:45\n+  --> $DIR/duplicate.rs:18:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:21:48\n+  --> $DIR/duplicate.rs:20:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:24:34\n+  --> $DIR/duplicate.rs:23:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:26:34\n+  --> $DIR/duplicate.rs:25:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:28:37\n+  --> $DIR/duplicate.rs:27:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:43\n+  --> $DIR/duplicate.rs:29:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:32:43\n+  --> $DIR/duplicate.rs:31:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:34:46\n+  --> $DIR/duplicate.rs:33:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:37:35\n+  --> $DIR/duplicate.rs:36:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:39:35\n+  --> $DIR/duplicate.rs:38:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:41:38\n+  --> $DIR/duplicate.rs:40:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:44\n+  --> $DIR/duplicate.rs:42:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:45:44\n+  --> $DIR/duplicate.rs:44:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:47\n+  --> $DIR/duplicate.rs:46:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:50:32\n+  --> $DIR/duplicate.rs:49:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:52:32\n+  --> $DIR/duplicate.rs:51:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:54:35\n+  --> $DIR/duplicate.rs:53:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:56:43\n+  --> $DIR/duplicate.rs:55:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:58:43\n+  --> $DIR/duplicate.rs:57:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:60:46\n+  --> $DIR/duplicate.rs:59:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:66:40\n+  --> $DIR/duplicate.rs:65:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:68:40\n+  --> $DIR/duplicate.rs:67:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:70:43\n+  --> $DIR/duplicate.rs:69:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:73:39\n-   |\n-LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-   |                           ----------  ^^^^^^^^^^ re-bound here\n-   |                           |\n-   |                           `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:75:39\n-   |\n-LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-   |                           ----------  ^^^^^^^^^^ re-bound here\n-   |                           |\n-   |                           `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:42\n-   |\n-LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-   |                           -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                           |\n-   |                           `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:79:40\n-   |\n-LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:40\n-   |\n-LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:83:43\n-   |\n-LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:86:46\n-   |\n-LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:88:46\n-   |\n-LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:49\n-   |\n-LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:35\n+  --> $DIR/duplicate.rs:72:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:35\n+  --> $DIR/duplicate.rs:74:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:97:38\n+  --> $DIR/duplicate.rs:76:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:44\n+  --> $DIR/duplicate.rs:78:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:44\n+  --> $DIR/duplicate.rs:80:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:47\n+  --> $DIR/duplicate.rs:82:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:36\n+  --> $DIR/duplicate.rs:85:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:36\n+  --> $DIR/duplicate.rs:87:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:39\n+  --> $DIR/duplicate.rs:89:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:40\n+  --> $DIR/duplicate.rs:91:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:40\n+  --> $DIR/duplicate.rs:93:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:43\n+  --> $DIR/duplicate.rs:95:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:36\n+  --> $DIR/duplicate.rs:98:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:121:36\n+  --> $DIR/duplicate.rs:100:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:39\n+  --> $DIR/duplicate.rs:102:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:34\n+  --> $DIR/duplicate.rs:104:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:34\n+  --> $DIR/duplicate.rs:106:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:37\n+  --> $DIR/duplicate.rs:108:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:131:45\n+  --> $DIR/duplicate.rs:110:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:45\n+  --> $DIR/duplicate.rs:112:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:48\n+  --> $DIR/duplicate.rs:114:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:46\n+  --> $DIR/duplicate.rs:116:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:46\n+  --> $DIR/duplicate.rs:116:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:46\n+  --> $DIR/duplicate.rs:119:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:46\n+  --> $DIR/duplicate.rs:119:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:49\n+  --> $DIR/duplicate.rs:122:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:49\n+  --> $DIR/duplicate.rs:122:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:153:40\n+  --> $DIR/duplicate.rs:132:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:155:44\n+  --> $DIR/duplicate.rs:134:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:43\n+  --> $DIR/duplicate.rs:136:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:146:43\n+  --> $DIR/duplicate.rs:125:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:148:43\n+  --> $DIR/duplicate.rs:127:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:150:46\n+  --> $DIR/duplicate.rs:129:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error: aborting due to 69 previous errors; 2 warnings emitted\n+error: aborting due to 60 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "06bfac588de0060374fc515e9a26b7860c3d0938", "filename": "src/test/ui/associated-type-bounds/duplicate.min_tait.stderr", "status": "modified", "additions": 61, "deletions": 142, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,564 +1,483 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:6:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:11:36\n+  --> $DIR/duplicate.rs:10:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n+  --> $DIR/duplicate.rs:12:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:15:39\n+  --> $DIR/duplicate.rs:14:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:45\n+  --> $DIR/duplicate.rs:16:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:19:45\n+  --> $DIR/duplicate.rs:18:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:21:48\n+  --> $DIR/duplicate.rs:20:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:24:34\n+  --> $DIR/duplicate.rs:23:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:26:34\n+  --> $DIR/duplicate.rs:25:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:28:37\n+  --> $DIR/duplicate.rs:27:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:43\n+  --> $DIR/duplicate.rs:29:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:32:43\n+  --> $DIR/duplicate.rs:31:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:34:46\n+  --> $DIR/duplicate.rs:33:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:37:35\n+  --> $DIR/duplicate.rs:36:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:39:35\n+  --> $DIR/duplicate.rs:38:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:41:38\n+  --> $DIR/duplicate.rs:40:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:44\n+  --> $DIR/duplicate.rs:42:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:45:44\n+  --> $DIR/duplicate.rs:44:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:47\n+  --> $DIR/duplicate.rs:46:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:50:32\n+  --> $DIR/duplicate.rs:49:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:52:32\n+  --> $DIR/duplicate.rs:51:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:54:35\n+  --> $DIR/duplicate.rs:53:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:56:43\n+  --> $DIR/duplicate.rs:55:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:58:43\n+  --> $DIR/duplicate.rs:57:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:60:46\n+  --> $DIR/duplicate.rs:59:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:66:40\n+  --> $DIR/duplicate.rs:65:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:68:40\n+  --> $DIR/duplicate.rs:67:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:70:43\n+  --> $DIR/duplicate.rs:69:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:73:39\n-   |\n-LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-   |                           ----------  ^^^^^^^^^^ re-bound here\n-   |                           |\n-   |                           `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:75:39\n-   |\n-LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-   |                           ----------  ^^^^^^^^^^ re-bound here\n-   |                           |\n-   |                           `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:42\n-   |\n-LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-   |                           -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                           |\n-   |                           `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:79:40\n-   |\n-LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:40\n-   |\n-LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:83:43\n-   |\n-LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:86:46\n-   |\n-LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:88:46\n-   |\n-LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:49\n-   |\n-LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:35\n+  --> $DIR/duplicate.rs:72:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:35\n+  --> $DIR/duplicate.rs:74:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:97:38\n+  --> $DIR/duplicate.rs:76:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:44\n+  --> $DIR/duplicate.rs:78:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:44\n+  --> $DIR/duplicate.rs:80:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:47\n+  --> $DIR/duplicate.rs:82:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:36\n+  --> $DIR/duplicate.rs:85:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:36\n+  --> $DIR/duplicate.rs:87:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:39\n+  --> $DIR/duplicate.rs:89:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:40\n+  --> $DIR/duplicate.rs:91:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:40\n+  --> $DIR/duplicate.rs:93:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:43\n+  --> $DIR/duplicate.rs:95:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:36\n+  --> $DIR/duplicate.rs:98:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:121:36\n+  --> $DIR/duplicate.rs:100:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:39\n+  --> $DIR/duplicate.rs:102:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:34\n+  --> $DIR/duplicate.rs:104:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:34\n+  --> $DIR/duplicate.rs:106:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:37\n+  --> $DIR/duplicate.rs:108:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:131:45\n+  --> $DIR/duplicate.rs:110:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:45\n+  --> $DIR/duplicate.rs:112:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:48\n+  --> $DIR/duplicate.rs:114:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:46\n+  --> $DIR/duplicate.rs:116:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:46\n+  --> $DIR/duplicate.rs:116:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:46\n+  --> $DIR/duplicate.rs:119:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:46\n+  --> $DIR/duplicate.rs:119:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:49\n+  --> $DIR/duplicate.rs:122:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:49\n+  --> $DIR/duplicate.rs:122:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:153:40\n+  --> $DIR/duplicate.rs:132:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:155:44\n+  --> $DIR/duplicate.rs:134:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:43\n+  --> $DIR/duplicate.rs:136:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:146:43\n+  --> $DIR/duplicate.rs:125:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:148:43\n+  --> $DIR/duplicate.rs:127:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:150:46\n+  --> $DIR/duplicate.rs:129:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error: aborting due to 69 previous errors; 1 warning emitted\n+error: aborting due to 60 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "0d7804ef1a7d5feb499b3f52cb99a04138588ccc", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -3,7 +3,6 @@\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-#![feature(impl_trait_in_bindings)] //~ WARN the feature `impl_trait_in_bindings` is incomplete\n #![feature(untagged_unions)]\n \n use std::iter;\n@@ -70,26 +69,6 @@ fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n-const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-\n-fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-\n type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;"}, {"sha": "b7869e22b4a14c585a0596f60f0104284743cbb9", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,69 +0,0 @@\n-// run-pass\n-\n-#![feature(associated_type_bounds)]\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARNING `impl_trait_in_bindings` is incomplete\n-#![allow(non_upper_case_globals)]\n-\n-use std::ops::Add;\n-\n-trait Tr1 { type As1; fn mk(&self) -> Self::As1; }\n-trait Tr2<'a> { fn tr2(self) -> &'a Self; }\n-\n-fn assert_copy<T: Copy>(x: T) { let _x = x; let _x = x; }\n-fn assert_static<T: 'static>(_: T) {}\n-fn assert_forall_tr2<T: for<'a> Tr2<'a>>(_: T) {}\n-\n-#[derive(Copy, Clone)]\n-struct S1;\n-#[derive(Copy, Clone)]\n-struct S2;\n-impl Tr1 for S1 { type As1 = S2; fn mk(&self) -> Self::As1 { S2 } }\n-\n-const cdef_et1: &dyn Tr1<As1: Copy> = &S1;\n-const sdef_et1: &dyn Tr1<As1: Copy> = &S1;\n-pub fn use_et1() { assert_copy(cdef_et1.mk()); assert_copy(sdef_et1.mk()); }\n-\n-const cdef_et2: &(dyn Tr1<As1: 'static> + Sync) = &S1;\n-static sdef_et2: &(dyn Tr1<As1: 'static> + Sync) = &S1;\n-pub fn use_et2() { assert_static(cdef_et2.mk()); assert_static(sdef_et2.mk()); }\n-\n-const cdef_et3: &dyn Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>> = {\n-    struct A;\n-    impl Tr1 for A {\n-        type As1 = core::ops::Range<u8>;\n-        fn mk(&self) -> Self::As1 { 0..10 }\n-    }\n-    &A\n-};\n-pub fn use_et3() {\n-    let _0 = cdef_et3.mk().clone();\n-    let mut s = 0u8;\n-    for _1 in _0 {\n-        let _2 = _1 + 1u8;\n-        s += _2.into();\n-    }\n-    assert_eq!(s, (0..10).map(|x| x + 1).sum());\n-}\n-\n-const cdef_et4: &(dyn Tr1<As1: for<'a> Tr2<'a>> + Sync) = {\n-    #[derive(Copy, Clone)]\n-    struct A;\n-    impl Tr1 for A {\n-        type As1 = A;\n-        fn mk(&self) -> A { A }\n-    }\n-    impl<'a> Tr2<'a> for A {\n-        fn tr2(self) -> &'a Self { &A }\n-    }\n-    &A\n-};\n-static sdef_et4: &(dyn Tr1<As1: for<'a> Tr2<'a>> + Sync) = cdef_et4;\n-pub fn use_et4() { assert_forall_tr2(cdef_et4.mk()); assert_forall_tr2(sdef_et4.mk()); }\n-\n-fn main() {\n-    let _ = use_et1();\n-    let _ = use_et2();\n-    let _ = use_et3();\n-    let _ = use_et4();\n-}"}, {"sha": "3637f9558be7bd2d5483e218f6fe517e31458000", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dyn-lcsit.rs:4:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "5364f25f89a1154061fc7b9b51183e3b03dfeada", "filename": "src/test/ui/associated-type-bounds/lcsit.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,78 +0,0 @@\n-// run-pass\n-\n-#![feature(associated_type_bounds)]\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARNING `impl_trait_in_bindings` is incomplete\n-#![allow(non_upper_case_globals)]\n-\n-use std::ops::Add;\n-\n-trait Tr1 { type As1; fn mk(&self) -> Self::As1; }\n-trait Tr2<'a> { fn tr2(self) -> &'a Self; }\n-\n-fn assert_copy<T: Copy>(x: T) { let _x = x; let _x = x; }\n-fn assert_static<T: 'static>(_: T) {}\n-fn assert_forall_tr2<T: for<'a> Tr2<'a>>(_: T) {}\n-\n-#[derive(Copy, Clone)]\n-struct S1;\n-#[derive(Copy, Clone)]\n-struct S2;\n-impl Tr1 for S1 { type As1 = S2; fn mk(&self) -> Self::As1 { S2 } }\n-\n-const cdef_et1: impl Copy + Tr1<As1: Copy> = {\n-    let x: impl Copy + Tr1<As1: Copy> = S1;\n-    x\n-};\n-static sdef_et1: impl Copy + Tr1<As1: Copy> = cdef_et1;\n-pub fn use_et1() { assert_copy(cdef_et1.mk()); assert_copy(sdef_et1.mk()); }\n-\n-const cdef_et2: impl Tr1<As1: 'static> = {\n-    let x: impl Tr1<As1: 'static> = S1;\n-    x\n-};\n-static sdef_et2: impl Tr1<As1: 'static> = cdef_et2;\n-pub fn use_et2() { assert_static(cdef_et2.mk()); assert_static(sdef_et2.mk()); }\n-\n-const cdef_et3: impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>> = {\n-    struct A;\n-    impl Tr1 for A {\n-        type As1 = core::ops::Range<u8>;\n-        fn mk(&self) -> Self::As1 { 0..10 }\n-    }\n-    let x: impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>> = A;\n-    x\n-};\n-pub fn use_et3() {\n-    let _0 = cdef_et3.mk().clone();\n-    let mut s = 0u8;\n-    for _1 in _0 {\n-        let _2 = _1 + 1u8;\n-        s += _2.into();\n-    }\n-    assert_eq!(s, (0..10).map(|x| x + 1).sum());\n-}\n-\n-const cdef_et4: impl Copy + Tr1<As1: for<'a> Tr2<'a>> = {\n-    #[derive(Copy, Clone)]\n-    struct A;\n-    impl Tr1 for A {\n-        type As1 = A;\n-        fn mk(&self) -> A { A }\n-    }\n-    impl<'a> Tr2<'a> for A {\n-        fn tr2(self) -> &'a Self { &A }\n-    }\n-    let x: impl Copy + Tr1<As1: for<'a> Tr2<'a>> = A;\n-    x\n-};\n-\n-static sdef_et4: impl Copy + Tr1<As1: for<'a> Tr2<'a>> = cdef_et4;\n-pub fn use_et4() { assert_forall_tr2(cdef_et4.mk()); assert_forall_tr2(sdef_et4.mk()); }\n-\n-fn main() {\n-    let _ = use_et1();\n-    let _ = use_et2();\n-    let _ = use_et3();\n-    let _ = use_et4();\n-}"}, {"sha": "11ff03db361470de371cb4713209bc7eb70f8dce", "filename": "src/test/ui/associated-type-bounds/lcsit.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lcsit.rs:4:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "d8553815b75de11cbd209aa915e947983cfd9426", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,12 +1,14 @@\n #![feature(imported_main)]\n-#![feature(min_type_alias_impl_trait, impl_trait_in_bindings)]\n+#![feature(min_type_alias_impl_trait)]\n #![allow(incomplete_features)]\n //~^^^ ERROR `main` function not found in crate\n pub mod foo {\n     type MainFn = impl Fn();\n+    //~^ ERROR could not find defining uses\n \n     fn bar() {}\n     pub const BAR: MainFn = bar;\n+    //~^ ERROR mismatched types [E0308]\n }\n \n use foo::BAR as main;"}, {"sha": "c4c0afc5687c1aa99bf4e6ee112a91836846401d", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -2,7 +2,7 @@ error[E0601]: `main` function not found in crate `imported_main_const_fn_item_ty\n   --> $DIR/imported_main_const_fn_item_type_forbidden.rs:1:1\n    |\n LL | / #![feature(imported_main)]\n-LL | | #![feature(min_type_alias_impl_trait, impl_trait_in_bindings)]\n+LL | | #![feature(min_type_alias_impl_trait)]\n LL | | #![allow(incomplete_features)]\n LL | |\n ...  |\n@@ -12,6 +12,25 @@ LL | | use foo::BAR as main;\n    |       |\n    |       non-function item at `crate::main` is found\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/imported_main_const_fn_item_type_forbidden.rs:10:29\n+   |\n+LL |     type MainFn = impl Fn();\n+   |                   --------- the expected opaque type\n+...\n+LL |     pub const BAR: MainFn = bar;\n+   |                             ^^^ expected opaque type, found fn item\n+   |\n+   = note: expected opaque type `impl Fn<()>`\n+                  found fn item `fn() {bar}`\n+\n+error: could not find defining uses\n+  --> $DIR/imported_main_const_fn_item_type_forbidden.rs:6:19\n+   |\n+LL |     type MainFn = impl Fn();\n+   |                   ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0601`.\n+Some errors have detailed explanations: E0308, E0601.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "1e48996acb83346f9cd4390423146d6b2601a428", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -57,20 +57,20 @@ fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n \n const _cdef: impl Tr1<As1: Copy> = S1;\n //~^ ERROR associated type bounds are unstable\n-//~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n+//~| ERROR `impl Trait` not allowed outside of function and method return types [E0562]\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // const _cdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n static _sdef: impl Tr1<As1: Copy> = S1;\n //~^ ERROR associated type bounds are unstable\n-//~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n+//~| ERROR `impl Trait` not allowed outside of function and method return types [E0562]\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // static _sdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n fn main() {\n     let _: impl Tr1<As1: Copy> = S1;\n     //~^ ERROR associated type bounds are unstable\n-    //~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n+    //~| ERROR `impl Trait` not allowed outside of function and method return types [E0562]\n     // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n     // let _: &dyn Tr1<As1: Copy> = &S1;\n }"}, {"sha": "2dacb94bcc07a7dad743f01c0b6674f888abec0a", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -115,29 +115,23 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:58:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:64:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:71:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is not satisfied\n   --> $DIR/feature-gate-associated_type_bounds.rs:15:28"}, {"sha": "39cc64f11a7e38817b3b9851239a5c08a7ef1799", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_bindings.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,11 +0,0 @@\n-const FOO: impl Copy = 42;\n-//~^ ERROR `impl Trait` not allowed\n-\n-static BAR: impl Copy = 42;\n-//~^ ERROR `impl Trait` not allowed\n-\n-fn main() {\n-    let foo = impl Copy = 42;\n-//~^ ERROR expected expression, found keyword `impl`\n-    let foo: impl Copy = 42;\n-}"}, {"sha": "bd648b40590ef7549cd191c0b2f47675b64fd64c", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_bindings.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,25 +0,0 @@\n-error: expected expression, found keyword `impl`\n-  --> $DIR/feature-gate-impl_trait_in_bindings.rs:8:15\n-   |\n-LL |     let foo = impl Copy = 42;\n-   |               ^^^^ expected expression\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-impl_trait_in_bindings.rs:1:12\n-   |\n-LL | const FOO: impl Copy = 42;\n-   |            ^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-impl_trait_in_bindings.rs:4:13\n-   |\n-LL | static BAR: impl Copy = 42;\n-   |             ^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0562`."}, {"sha": "07857289aaeb55a34488bdbd049e110f80153a62", "filename": "src/test/ui/feature-gates/feature-gate-min_type_alias_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -106,7 +106,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:23:18\n    |\n LL |     type Assoc = impl Debug;"}, {"sha": "4fb1cd2aae1d311c7bd1b9b7d846a0ca153f1db2", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -31,7 +31,7 @@ type Foo4 = impl Debug;\n \n fn define4() {\n     let y: Foo4 = 42;\n-    //~^ ERROR not permitted here\n+    //~^ ERROR mismatched types [E0308]\n }\n \n fn main() {}"}, {"sha": "10409d5fc4badabbe492f53fbf79ef4454fc730a", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -45,14 +45,19 @@ LL |     define3(42)\n    = note: expected opaque type `impl Debug`\n                      found type `{integer}`\n \n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:33:12\n+error[E0308]: mismatched types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:33:19\n    |\n+LL | type Foo4 = impl Debug;\n+   |             ---------- the expected opaque type\n+...\n LL |     let y: Foo4 = 42;\n-   |            ^^^^\n+   |            ----   ^^ expected opaque type, found integer\n+   |            |\n+   |            expected due to this\n    |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n \n error: could not find defining uses\n   --> $DIR/feature-gate-type_alias_impl_trait.rs:5:12"}, {"sha": "bf647d089833a69dd7da2e15ca3beda47261afc3", "filename": "src/test/ui/generator/layout-error.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,26 +1,18 @@\n error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:25:17\n+  --> $DIR/layout-error.rs:24:17\n    |\n LL |         let a = Foo;\n    |                 ^^^ not found in this scope\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/layout-error.rs:8:32\n    |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/layout-error.rs:8:56\n-   |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^\n-   |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "ed31c260cbc0f95a04698f6eff880c3935206994", "filename": "src/test/ui/generator/layout-error.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,40 +1,19 @@\n error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:25:17\n+  --> $DIR/layout-error.rs:24:17\n    |\n LL |         let a = Foo;\n    |                 ^^^ not found in this scope\n \n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/layout-error.rs:31:27\n+  --> $DIR/layout-error.rs:30:27\n    |\n LL |     Task::spawn(&POOL, || cb());\n    |                           ^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/layout-error.rs:30:28\n-   |\n-LL |     static POOL: Task<F> = Task::new();\n-   |                            ^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/layout-error.rs:31:24\n-   |\n-LL |     Task::spawn(&POOL, || cb());\n-   |                        ^^^^^^^ expected `[type error]`, got `impl Future`\n-   |\n-note: previous use here\n-  --> $DIR/layout-error.rs:30:5\n-   |\n-LL |     static POOL: Task<F> = Task::new();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0425, E0658.\n For more information about an error, try `rustc --explain E0425`."}, {"sha": "a5efc3899dd4d8538ab889764e1890ef1a1241c3", "filename": "src/test/ui/generator/layout-error.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -5,9 +5,8 @@\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n use std::future::Future;\n \n pub struct Task<F: Future>(F);\n@@ -27,7 +26,6 @@ fn main() {\n \n     type F = impl Future;\n     // Check that statics are inhabited computes they layout.\n-    static POOL: Task<F> = Task::new(); //[min_tait]~ ERROR not permitted here\n+    static POOL: Task<F> = Task::new();\n     Task::spawn(&POOL, || cb()); //[min_tait]~ ERROR type alias impl trait is not permitted here\n-    //[min_tait]~^ ERROR concrete type differs from previous\n }"}, {"sha": "1e609e8388277042708681aac897eecfa3fd5cd1", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/metadata-sufficient-for-layout.rs:10:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/metadata-sufficient-for-layout.rs:10:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/metadata-sufficient-for-layout.rs:29:1\n+  --> $DIR/metadata-sufficient-for-layout.rs:28:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "52d42fd59a003a1fa8c807241cdc131ce705a043", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.min_tait.stderr", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,24 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/metadata-sufficient-for-layout.rs:22:23\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/metadata-sufficient-for-layout.rs:28:1\n    |\n-LL | static A: Option<F> = None;\n-   |                       ^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/metadata-sufficient-for-layout.rs:25:1\n-   |\n-LL | fn f() -> F { metadata_sufficient_for_layout::g() }\n-   | ^^^^^^^^^^^ expected `[type error]`, got `impl Generator`\n-   |\n-note: previous use here\n-  --> $DIR/metadata-sufficient-for-layout.rs:22:1\n-   |\n-LL | static A: Option<F> = None;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn main() {}\n+   | ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "c01354569f07d408a6aca5cb0fd9024b2df33475", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -7,9 +7,8 @@\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n #![feature(generator_trait)]\n \n extern crate metadata_sufficient_for_layout;\n@@ -20,10 +19,10 @@ type F = impl Generator<(), Yield = (), Return = ()>;\n \n // Static queries the layout of the generator.\n static A: Option<F> = None;\n-//[min_tait]~^ ERROR not permitted here\n \n-fn f() -> F { metadata_sufficient_for_layout::g() }\n-//[min_tait]~^ ERROR concrete type differs\n+fn f() -> F {\n+    metadata_sufficient_for_layout::g()\n+}\n \n #[rustc_error]\n-fn main() {} //[full_tait]~ ERROR\n+fn main() {} //~ ERROR"}, {"sha": "6a97f28ff552b3a76c5f4743b8d980dcddaf97b1", "filename": "src/test/ui/impl-trait/binding-without-value.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,9 +0,0 @@\n-#![allow(incomplete_features)]\n-#![feature(impl_trait_in_bindings)]\n-\n-fn foo() {\n-    let _ : impl Copy;\n-    //~^ ERROR cannot resolve opaque type\n-}\n-\n-fn main() {}"}, {"sha": "0d2faeaf85d10be60785746009a2de1eed8ac1ce", "filename": "src/test/ui/impl-trait/binding-without-value.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,16 +0,0 @@\n-error[E0720]: cannot resolve opaque type\n-  --> $DIR/binding-without-value.rs:5:13\n-   |\n-LL |     let _ : impl Copy;\n-   |         -   ^^^^^^^^^ cannot resolve opaque type\n-   |         |\n-   |         this binding might not have a concrete type\n-   |\n-help: set the binding to a value for a concrete type to be resolved\n-   |\n-LL |     let _ : impl Copy = /* value */;\n-   |                       ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0720`."}, {"sha": "d1f42be077dc82a78b0a3e734b829c981acab5ca", "filename": "src/test/ui/impl-trait/bindings-opaque.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,17 +0,0 @@\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-const FOO: impl Copy = 42;\n-\n-static BAR: impl Copy = 42;\n-\n-fn main() {\n-    let foo: impl Copy = 42;\n-\n-    let _ = FOO.count_ones();\n-//~^ ERROR no method\n-    let _ = BAR.count_ones();\n-//~^ ERROR no method\n-    let _ = foo.count_ones();\n-//~^ ERROR no method\n-}"}, {"sha": "170bd4612349a0f2968f8177998c7308ec02fee5", "filename": "src/test/ui/impl-trait/bindings-opaque.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,30 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bindings-opaque.rs:1:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error[E0599]: no method named `count_ones` found for opaque type `impl Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:11:17\n-   |\n-LL |     let _ = FOO.count_ones();\n-   |                 ^^^^^^^^^^ method not found in `impl Copy`\n-\n-error[E0599]: no method named `count_ones` found for opaque type `impl Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:13:17\n-   |\n-LL |     let _ = BAR.count_ones();\n-   |                 ^^^^^^^^^^ method not found in `impl Copy`\n-\n-error[E0599]: no method named `count_ones` found for opaque type `impl Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:15:17\n-   |\n-LL |     let _ = foo.count_ones();\n-   |                 ^^^^^^^^^^ method not found in `impl Copy`\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "fd79ba68fbddb08df24e971c9ba3ba259367f4ac", "filename": "src/test/ui/impl-trait/bindings.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,30 +0,0 @@\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-fn a<T: Clone>(x: T) {\n-    const foo: impl Clone = x;\n-    //~^ ERROR attempt to use a non-constant value in a constant\n-}\n-\n-fn b<T: Clone>(x: T) {\n-    let _ = move || {\n-        const foo: impl Clone = x;\n-        //~^ ERROR attempt to use a non-constant value in a constant\n-    };\n-}\n-\n-trait Foo<T: Clone> {\n-    fn a(x: T) {\n-        const foo: impl Clone = x;\n-        //~^ ERROR attempt to use a non-constant value in a constant\n-    }\n-}\n-\n-impl<T: Clone> Foo<T> for i32 {\n-    fn a(x: T) {\n-        const foo: impl Clone = x;\n-        //~^ ERROR attempt to use a non-constant value in a constant\n-    }\n-}\n-\n-fn main() { }"}, {"sha": "4da49f4dc7db167fbee93f1f5fa6f7faa6f30709", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,44 +0,0 @@\n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/bindings.rs:5:29\n-   |\n-LL |     const foo: impl Clone = x;\n-   |     ---------               ^ non-constant value\n-   |     |\n-   |     help: consider using `let` instead of `const`: `let foo`\n-\n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/bindings.rs:11:33\n-   |\n-LL |         const foo: impl Clone = x;\n-   |         ---------               ^ non-constant value\n-   |         |\n-   |         help: consider using `let` instead of `const`: `let foo`\n-\n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/bindings.rs:18:33\n-   |\n-LL |         const foo: impl Clone = x;\n-   |         ---------               ^ non-constant value\n-   |         |\n-   |         help: consider using `let` instead of `const`: `let foo`\n-\n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/bindings.rs:25:33\n-   |\n-LL |         const foo: impl Clone = x;\n-   |         ---------               ^ non-constant value\n-   |         |\n-   |         help: consider using `let` instead of `const`: `let foo`\n-\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bindings.rs:1:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0435`."}, {"sha": "8ec06e534d14336bd569ab85a615539a542475b3", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,15 +1,14 @@\n // edition:2018\n \n-#![feature(impl_trait_in_bindings)]\n-//~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n-\n // See issue 60414\n \n // Reduction to `impl Trait`\n \n struct Foo<T>(T);\n \n-trait FooLike { type Output; }\n+trait FooLike {\n+    type Output;\n+}\n \n impl<T> FooLike for Foo<T> {\n     type Output = T;\n@@ -23,7 +22,7 @@ mod impl_trait {\n     }\n \n     /// `T::Assoc` can't be normalized any further here.\n-    fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n+    fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n         //~^ ERROR: type mismatch\n         Foo(())\n     }\n@@ -39,9 +38,9 @@ mod lifetimes {\n     }\n \n     /// Missing bound constraining `Assoc`, `T::Assoc` can't be normalized further.\n-    fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-    //~^ ERROR: type mismatch\n-    //~^^ ERROR `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+    fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n+        //~^ ERROR: type mismatch\n+        //~^^ ERROR `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n         Foo(())\n     }\n }"}, {"sha": "611543a19260b05863eb6a5fb51a12422a45d3a4", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,45 +1,36 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bound-normalization-fail.rs:3:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:26:32\n+  --> $DIR/bound-normalization-fail.rs:25:32\n    |\n-LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n+LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |\n    = note: expected associated type `<T as impl_trait::Trait>::Assoc`\n                          found type `()`\n help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    |\n-LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n+LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n    |                         ^^^^^^^^^^^^\n \n error[E0760]: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:42:41\n+  --> $DIR/bound-normalization-fail.rs:41:41\n    |\n-LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:42:41\n+  --> $DIR/bound-normalization-fail.rs:41:41\n    |\n-LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n+LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |\n    = note: expected associated type `<T as lifetimes::Trait<'static>>::Assoc`\n                          found type `()`\n help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    |\n-LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n+LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n    |                                 ^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0271, E0760.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "ef3cb7401128e3a4c303afdaf84759458745daa0", "filename": "src/test/ui/impl-trait/bound-normalization-pass.default.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.default.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bound-normalization-pass.rs:8:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "4218bc5206596b84d0e9b4f5c988fe5e8079dab0", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -5,16 +5,16 @@\n //-^ To make this the regression test for #75962.\n \n #![feature(min_type_alias_impl_trait)]\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n \n // See issue 60414\n \n // Reduction to `impl Trait`\n \n struct Foo<T>(T);\n \n-trait FooLike { type Output; }\n+trait FooLike {\n+    type Output;\n+}\n \n impl<T> FooLike for Foo<T> {\n     type Output = T;\n@@ -28,7 +28,7 @@ mod impl_trait {\n     }\n \n     /// `T::Assoc` should be normalized to `()` here.\n-    fn foo_pass<T: Trait<Assoc=()>>() -> impl FooLike<Output=T::Assoc> {\n+    fn foo_pass<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n         Foo(())\n     }\n }\n@@ -45,40 +45,20 @@ mod lifetimes {\n     /// Like above.\n     ///\n     /// FIXME(#51525) -- the shorter notation `T::Assoc` winds up referencing `'static` here\n-    fn foo2_pass<'a, T: Trait<'a, Assoc=()> + 'a>(\n-    ) -> impl FooLike<Output=<T as Trait<'a>>::Assoc> + 'a {\n+    fn foo2_pass<'a, T: Trait<'a, Assoc = ()> + 'a>()\n+    -> impl FooLike<Output = <T as Trait<'a>>::Assoc> + 'a {\n         Foo(())\n     }\n \n     /// Normalization to type containing bound region.\n     ///\n     /// FIXME(#51525) -- the shorter notation `T::Assoc` winds up referencing `'static` here\n-    fn foo2_pass2<'a, T: Trait<'a, Assoc=&'a ()> + 'a>(\n-    ) -> impl FooLike<Output=<T as Trait<'a>>::Assoc> + 'a {\n+    fn foo2_pass2<'a, T: Trait<'a, Assoc = &'a ()> + 'a>()\n+    -> impl FooLike<Output = <T as Trait<'a>>::Assoc> + 'a {\n         Foo(&())\n     }\n }\n \n-// Reduction using `impl Trait` in bindings\n-\n-mod impl_trait_in_bindings {\n-    struct Foo;\n-\n-    trait FooLike { type Output; }\n-\n-    impl FooLike for Foo {\n-        type Output = u32;\n-    }\n-\n-    trait Trait {\n-        type Assoc;\n-    }\n-\n-    fn foo<T: Trait<Assoc=u32>>() {\n-        let _: impl FooLike<Output=T::Assoc> = Foo;\n-    }\n-}\n-\n // The same applied to `type Foo = impl Bar`s\n \n mod opaque_types {"}, {"sha": "ef3cb7401128e3a4c303afdaf84759458745daa0", "filename": "src/test/ui/impl-trait/bound-normalization-pass.sa.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.sa.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.sa.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.sa.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bound-normalization-pass.rs:8:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "fd8fe5f48dfa23aa1a2a1a050e6b84e43f53b896", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings-issue-73003.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-const _: impl Fn() = ||();\n-\n-fn main() {}"}, {"sha": "715671c8add834eee7f379d64fb6d6317ee70320", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings-issue-73003.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/impl-trait-in-bindings-issue-73003.rs:3:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c7fae45d5ca2cf70d1b527ec13e63ebfe7164ddb", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,49 +0,0 @@\n-// run-pass\n-\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-use std::fmt::Debug;\n-\n-const FOO: impl Debug + Clone + PartialEq<i32> = 42;\n-\n-static BAR: impl Debug + Clone + PartialEq<i32> = 42;\n-\n-fn a<T: Clone>(x: T) {\n-    let y: impl Clone = x;\n-    let _ = y.clone();\n-}\n-\n-fn b<T: Clone>(x: T) {\n-    let f = move || {\n-        let y: impl Clone = x;\n-        let _ = y.clone();\n-    };\n-    f();\n-}\n-\n-trait Foo<T: Clone> {\n-    fn a(x: T) {\n-        let y: impl Clone = x;\n-        let _ = y.clone();\n-    }\n-}\n-\n-impl<T: Clone> Foo<T> for i32 {\n-    fn a(x: T) {\n-        let y: impl Clone = x;\n-        let _ = y.clone();\n-    }\n-}\n-\n-fn main() {\n-    let foo: impl Debug + Clone + PartialEq<i32> = 42;\n-\n-    assert_eq!(FOO.clone(), 42);\n-    assert_eq!(BAR.clone(), 42);\n-    assert_eq!(foo.clone(), 42);\n-\n-    a(42);\n-    b(42);\n-    i32::a(42);\n-}"}, {"sha": "bf739d4722f6823e4e7fcf6754b57a4586480b50", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/impl-trait-in-bindings.rs:3:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e0c71d1ac9a61cb59081935d61c13f4d6a02a858", "filename": "src/test/ui/impl-trait/issue-57200.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,15 +0,0 @@\n-// Regression test for #57200\n-// FIXME: The error is temporary hack, we'll revisit here at some point.\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-fn bug<'a, 'b, T>()\n-where\n-    'a: 'b,\n-{\n-    let f: impl Fn(&'a T) -> &'b T = |x| x;\n-    //~^ ERROR: lifetimes in impl Trait types in bindings are not currently supported\n-}\n-\n-fn main() {}"}, {"sha": "b44f332d58ccdc9f9cde8ec280a8cfac0e49f4c2", "filename": "src/test/ui/impl-trait/issue-57200.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,8 +0,0 @@\n-error: lifetimes in impl Trait types in bindings are not currently supported\n-  --> $DIR/issue-57200.rs:11:12\n-   |\n-LL |     let f: impl Fn(&'a T) -> &'b T = |x| x;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "c1a98d8897bfbd075373d1ddfad1ae2fa86a95a6", "filename": "src/test/ui/impl-trait/issue-57201.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,15 +0,0 @@\n-// Regression test for #57201\n-// FIXME: The error is temporary hack, we'll revisit here at some point.\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-fn bug<'a, 'b, T>()\n-where\n-    'a: 'b,\n-{\n-    let f: &impl Fn(&'a T) -> &'b T = &|x| x;\n-    //~^ ERROR: lifetimes in impl Trait types in bindings are not currently supported\n-}\n-\n-fn main() {}"}, {"sha": "462b17bf45e2f71e63789debb4ccd800950daac4", "filename": "src/test/ui/impl-trait/issue-57201.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,8 +0,0 @@\n-error: lifetimes in impl Trait types in bindings are not currently supported\n-  --> $DIR/issue-57201.rs:11:13\n-   |\n-LL |     let f: &impl Fn(&'a T) -> &'b T = &|x| x;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2ef86f03d340c60892feeee1d5099ed85f4a0dfa", "filename": "src/test/ui/impl-trait/issue-60473.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,15 +0,0 @@\n-// Regression test for #60473\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-struct A<'a>(&'a ());\n-\n-trait Trait<T> {}\n-\n-impl<T> Trait<T> for () {}\n-\n-fn main() {\n-    let x: impl Trait<A> = ();\n-    //~^ ERROR: missing lifetime specifier\n-}"}, {"sha": "367b5db5d2dceefe43b8a7ca83b44eb497cba621", "filename": "src/test/ui/impl-trait/issue-60473.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,15 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-60473.rs:13:23\n-   |\n-LL |     let x: impl Trait<A> = ();\n-   |                       ^ expected named lifetime parameter\n-   |\n-help: consider introducing a named lifetime parameter\n-   |\n-LL | fn main<'a>() {\n-LL |     let x: impl Trait<A<'a>> = ();\n-   |\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "efa67558bd7c17446cb3054042e076e05523aecb", "filename": "src/test/ui/impl-trait/issue-67166.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,11 +0,0 @@\n-// Regression test for #67166\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-pub fn run() {\n-    let _foo: Box<impl Copy + '_> = Box::new(());\n-    //~^ ERROR: missing lifetime specifier\n-}\n-\n-fn main() {}"}, {"sha": "14c78684e3e2fb48898b30e551dfaad751b20287", "filename": "src/test/ui/impl-trait/issue-67166.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,15 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-67166.rs:7:31\n-   |\n-LL |     let _foo: Box<impl Copy + '_> = Box::new(());\n-   |                               ^^ expected named lifetime parameter\n-   |\n-help: consider introducing a named lifetime parameter\n-   |\n-LL | pub fn run<'a>() {\n-LL |     let _foo: Box<impl Copy + 'a> = Box::new(());\n-   |\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "b270f88b6886e3282f927c13de8e2704b071fe8c", "filename": "src/test/ui/impl-trait/issue-69840.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,16 +0,0 @@\n-// check-pass\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-struct A<'a>(&'a ());\n-\n-trait Trait<T> {}\n-\n-impl<T> Trait<T> for () {}\n-\n-pub fn foo<'a>() {\n-    let _x: impl Trait<A<'a>> = ();\n-}\n-\n-fn main() {}"}, {"sha": "1f4e3f78afa45e23d368ccd218d967cb9aa86b71", "filename": "src/test/ui/impl-trait/issues/issue-70877.full_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-  --> $DIR/issue-70877.rs:11:12\n+  --> $DIR/issue-70877.rs:10:12\n    |\n LL | type FooRet = impl std::fmt::Debug;\n    |               -------------------- the found opaque type"}, {"sha": "1f4e3f78afa45e23d368ccd218d967cb9aa86b71", "filename": "src/test/ui/impl-trait/issues/issue-70877.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-  --> $DIR/issue-70877.rs:11:12\n+  --> $DIR/issue-70877.rs:10:12\n    |\n LL | type FooRet = impl std::fmt::Debug;\n    |               -------------------- the found opaque type"}, {"sha": "29aa705ef9d4df21dba80e04e00137f90d19f638", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-#![feature(impl_trait_in_bindings)]\n #![allow(incomplete_features)]\n \n type FooArg<'a> = &'a dyn ToString;"}, {"sha": "f7dbef9e3ff02ad797b0f86e7d64281c01622ffb", "filename": "src/test/ui/impl-trait/issues/issue-78721.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,15 +0,0 @@\n-// edition:2018\n-\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-struct Bug {\n-    V1: [(); {\n-        let f: impl core::future::Future<Output = u8> = async { 1 };\n-        //~^ ERROR `async` blocks are not allowed in constants\n-        //~| ERROR destructors cannot be evaluated at compile-time\n-        1\n-    }],\n-}\n-\n-fn main() {}"}, {"sha": "d5712dd92002c0f1b584726134194ea706a48387", "filename": "src/test/ui/impl-trait/issues/issue-78721.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,31 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78721.rs:3:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error[E0658]: `async` blocks are not allowed in constants\n-  --> $DIR/issue-78721.rs:8:57\n-   |\n-LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n-   |                                                         ^^^^^^^^^^^\n-   |\n-   = note: see issue #85368 <https://github.com/rust-lang/rust/issues/85368> for more information\n-   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/issue-78721.rs:8:13\n-   |\n-LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n-   |             ^ constants cannot evaluate destructors\n-...\n-LL |     }],\n-   |     - value is dropped here\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-Some errors have detailed explanations: E0493, E0658.\n-For more information about an error, try `rustc --explain E0493`."}, {"sha": "728644f7579917960b8b85791bd759baafcb9730", "filename": "src/test/ui/impl-trait/issues/issue-78722.full_tait.stderr", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -7,33 +7,26 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78722.rs:7:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error[E0658]: `async` blocks are not allowed in constants\n-  --> $DIR/issue-78722.rs:17:20\n+error[E0308]: mismatched types\n+  --> $DIR/issue-78722.rs:15:20\n    |\n+LL | type F = impl core::future::Future<Output = u8>;\n+   |          -------------------------------------- the expected opaque type\n+...\n LL |         let f: F = async { 1 };\n-   |                    ^^^^^^^^^^^\n+   |                -   ^^^^^^^^^^^ expected opaque type, found a different opaque type\n+   |                |\n+   |                expected due to this\n+   | \n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n-   = note: see issue #85368 <https://github.com/rust-lang/rust/issues/85368> for more information\n-   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/issue-78722.rs:17:13\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n    |\n-LL |         let f: F = async { 1 };\n-   |             ^ constants cannot evaluate destructors\n-...\n-LL |     }],\n-   |     - value is dropped here\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:8:10>)\n+              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n-Some errors have detailed explanations: E0493, E0658.\n-For more information about an error, try `rustc --explain E0493`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "221b23ae3d2adf08de38f81dad208f370fc77277", "filename": "src/test/ui/impl-trait/issues/issue-78722.min_tait.stderr", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,31 +1,23 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78722.rs:7:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error[E0658]: `async` blocks are not allowed in constants\n-  --> $DIR/issue-78722.rs:17:20\n+error[E0308]: mismatched types\n+  --> $DIR/issue-78722.rs:15:20\n    |\n+LL | type F = impl core::future::Future<Output = u8>;\n+   |          -------------------------------------- the expected opaque type\n+...\n LL |         let f: F = async { 1 };\n-   |                    ^^^^^^^^^^^\n+   |                -   ^^^^^^^^^^^ expected opaque type, found a different opaque type\n+   |                |\n+   |                expected due to this\n+   | \n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n-   = note: see issue #85368 <https://github.com/rust-lang/rust/issues/85368> for more information\n-   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/issue-78722.rs:17:13\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n    |\n-LL |         let f: F = async { 1 };\n-   |             ^ constants cannot evaluate destructors\n-...\n-LL |     }],\n-   |     - value is dropped here\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:8:10>)\n+              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0493, E0658.\n-For more information about an error, try `rustc --explain E0493`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "480b55eed21e2046c1c9e0b14b4f43cac489b38c", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -4,8 +4,6 @@\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n \n type F = impl core::future::Future<Output = u8>;\n \n@@ -15,8 +13,7 @@ struct Bug {\n             async {}\n         }\n         let f: F = async { 1 };\n-        //~^ ERROR `async` blocks are not allowed in constants\n-        //~| ERROR destructors cannot be evaluated at compile-time\n+        //~^ ERROR mismatched types [E0308]\n         1\n     }],\n }"}, {"sha": "773cd0b81cc53ff6a2960ebee538d402a094ce3b", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,8 +1,8 @@\n struct Foo<T = impl Copy>(T);\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // should not cause ICE\n fn x() -> Foo {"}, {"sha": "d44dcf1f7fa2377c70220369bcab8dc95cb071de", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n    |\n LL | struct Foo<T = impl Copy>(T);\n    |                ^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n    |\n LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;"}, {"sha": "59c7e4d5f4e92b8aa0a8867f5e04120567f9a026", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -34,13 +34,13 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  |         nested `impl Trait` here\n    |                                  outer `impl Trait`\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/nested_impl_trait.rs:8:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/nested_impl_trait.rs:25:42\n    |\n LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {"}, {"sha": "4605e76ac96d28a44cb50f3563daee0b2be0d873", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -13,61 +13,61 @@ fn in_adt_in_parameters(_: Vec<impl Debug>) { panic!() }\n \n // Disallowed\n fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n //~^^ ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n //~| ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n \n // Allowed\n@@ -80,22 +80,22 @@ fn in_impl_Trait_in_return() -> impl IntoIterator<Item = impl IntoIterator> {\n \n // Disallowed\n struct InBraceStructField { x: impl Debug }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n struct InAdtInBraceStructField { x: Vec<impl Debug> }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n struct InTupleStructField(impl Debug);\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n enum InEnum {\n     InBraceVariant { x: impl Debug },\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n     InTupleVariant(impl Debug),\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n }\n \n // Allowed\n@@ -106,7 +106,7 @@ trait InTraitDefnParameters {\n // Disallowed\n trait InTraitDefnReturn {\n     fn in_return() -> impl Debug;\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n }\n \n // Allowed and disallowed in trait impls\n@@ -123,7 +123,7 @@ impl DummyTrait for () {\n     // Allowed\n \n     fn in_trait_impl_return() -> impl Debug { () }\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n }\n \n // Allowed\n@@ -136,10 +136,10 @@ impl DummyType {\n // Disallowed\n extern \"C\" {\n     fn in_foreign_parameters(_: impl Debug);\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n     fn in_foreign_return() -> impl Debug;\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n }\n \n // Allowed\n@@ -155,96 +155,96 @@ type InTypeAlias<R> = impl Debug;\n //~^ ERROR `impl Trait` in type aliases is unstable\n \n type InReturnInTypeAlias<R> = fn() -> impl Debug;\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n //~| ERROR `impl Trait` in type aliases is unstable\n \n // Disallowed in impl headers\n impl PartialEq<impl Debug> for () {\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n }\n \n // Disallowed in impl headers\n impl PartialEq<()> for impl Debug {\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n }\n \n // Disallowed in inherent impls\n impl impl Debug {\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n }\n \n // Disallowed in inherent impls\n struct InInherentImplAdt<T> { t: T }\n impl InInherentImplAdt<impl Debug> {\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n }\n \n // Disallowed in where clauses\n fn in_fn_where_clause()\n     where impl Debug: Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n {\n }\n \n // Disallowed in where clauses\n fn in_adt_in_fn_where_clause()\n     where Vec<impl Debug>: Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n {\n }\n \n // Disallowed\n fn in_trait_parameter_in_fn_where_clause<T>()\n     where T: PartialEq<impl Debug>\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n {\n }\n \n // Disallowed\n fn in_Fn_parameter_in_fn_where_clause<T>()\n     where T: Fn(impl Debug)\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n {\n }\n \n // Disallowed\n fn in_Fn_return_in_fn_where_clause<T>()\n     where T: Fn() -> impl Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n {\n }\n \n // Disallowed\n struct InStructGenericParamDefault<T = impl Debug>(T);\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n trait InTraitGenericParamDefault<T = impl Debug> {}\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n impl <T = impl Debug> T {}\n //~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n //~| WARNING this was previously accepted by the compiler but is being phased out\n-//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~| ERROR `impl Trait` not allowed outside of function and method return types\n \n // Disallowed\n fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n //~| WARNING this was previously accepted by the compiler but is being phased out\n-//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~| ERROR `impl Trait` not allowed outside of function and method return types\n \n fn main() {\n     let _in_local_variable: impl Fn() = || {};\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n }"}, {"sha": "93a3de61ccf8aeb2f79a8ccfb5aeb9a164cc9a11", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 41, "deletions": 43, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -43,249 +43,247 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:15:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:19:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:23:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:27:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:31:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:35:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:39:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:43:57\n    |\n LL | fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:52:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:61:59\n    |\n LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n    |                                                           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:65:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:69:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:82:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:86:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:90:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:95:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:97:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:108:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:125:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:138:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:141:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:157:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:162:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:167:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:172:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:178:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:184:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:191:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:198:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:205:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:212:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:218:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:222:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:226:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:230:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:234:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:240:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:246:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:248:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };"}, {"sha": "7beb2db3969c8c1d055de34781f76ceb2eced49e", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,17 +0,0 @@\n-// edition:2018\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-use std::io::Error;\n-\n-fn make_unit() -> Result<(), Error> {\n-    Ok(())\n-}\n-\n-fn main() {\n-    let fut = async {\n-        make_unit()?;\n-\n-        Ok(()) //~ ERROR type annotations needed\n-    };\n-}"}, {"sha": "8e632fbc1de1ba0a70fdc27390c66c0a9a6663ef", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,21 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:2:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error[E0282]: type annotations needed for `impl Future`\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:15:9\n-   |\n-LL |     let fut = async {\n-   |         --- consider giving `fut` the explicit type `impl Future`, where the type parameter `E` is specified\n-...\n-LL |         Ok(())\n-   |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "63a28d997e11a04be36bc02d32df4544a2fc00f8", "filename": "src/test/ui/issues/issue-47715.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,22 +1,22 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/issue-47715.rs:9:37\n    |\n LL | struct Container<T: Iterable<Item = impl Foo>> {\n    |                                     ^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/issue-47715.rs:14:30\n    |\n LL | enum Enum<T: Iterable<Item = impl Foo>> {\n    |                              ^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/issue-47715.rs:19:32\n    |\n LL | union Union<T: Iterable<Item = impl Foo> + Copy> {\n    |                                ^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/issue-47715.rs:24:30\n    |\n LL | type Type<T: Iterable<Item = impl Foo>> = T;"}, {"sha": "543d15fadc6be78762074d7186b385c7aee5db45", "filename": "src/test/ui/mir/issue-75053.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -7,15 +7,11 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-75053.rs:52:15\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-75053.rs:49:1\n    |\n-LL |     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n-   |               ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "d75996bf0b3ae3615b4c9bdab12390bdcd4ba889", "filename": "src/test/ui/mir/issue-75053.in_bindings.stderr", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fmir%2Fissue-75053.in_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fmir%2Fissue-75053.in_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.in_bindings.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,24 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+error[E0557]: feature has been removed\n   --> $DIR/issue-75053.rs:7:34\n    |\n LL | #![cfg_attr(in_bindings, feature(impl_trait_in_bindings))]\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^ feature has been removed\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = note: removed due to being incomplete and unstable\n \n-error[E0282]: type annotations needed\n-  --> $DIR/issue-75053.rs:52:38\n-   |\n-LL |     type O;\n-   |     ------- `<Self as MyIndex<T>>::O` defined here\n-...\n-LL |     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n-   |                                      ^^^^^^^^^^-------------\n-   |                                      |\n-   |                                      this method call resolves to `<Self as MyIndex<T>>::O`\n-   |                                      cannot infer type for type parameter `T`\n-\n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0557`."}, {"sha": "c533275c99a79554657bdf219d9e567b90c8fc79", "filename": "src/test/ui/mir/issue-75053.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-75053.rs:52:15\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-75053.rs:49:1\n    |\n-LL |     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n-   |               ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b71f84dd9c24ef730bd79afb21a5324ab194e4e7", "filename": "src/test/ui/mir/issue-75053.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,11 +1,9 @@\n // compile-flags: -Z mir-opt-level=3\n \n-// revisions: min_tait full_tait in_bindings\n+// revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-#![cfg_attr(in_bindings, feature(impl_trait_in_bindings))]\n-//[in_bindings]~^ WARN incomplete\n \n use std::marker::PhantomData;\n \n@@ -49,7 +47,6 @@ impl<T: MyFrom<Phantom2<DummyT<U>>>, U> MyIndex<Phantom1<T>> for Scope<U> {\n \n #[rustc_error]\n fn main() {\n+    //~^ ERROR\n     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n-    //[min_tait,full_tait]~^ ERROR not permitted here\n-    //[in_bindings]~^^ ERROR type annotations needed\n }"}, {"sha": "65f27cf78f12030517ec0ccb73b4a3be40fdd48f", "filename": "src/test/ui/pattern/issue-71042-opaquely-typed-constant-used-in-pattern.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,10 +0,0 @@\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-fn main() {\n-    const C: impl Copy = 0;\n-    match C {\n-        C | //~ ERROR: `impl Copy` cannot be used in patterns\n-        _ => {}\n-    }\n-}"}, {"sha": "62dc856be821fdbe804167f76d83423c35f444c0", "filename": "src/test/ui/pattern/issue-71042-opaquely-typed-constant-used-in-pattern.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,8 +0,0 @@\n-error: `impl Copy` cannot be used in patterns\n-  --> $DIR/issue-71042-opaquely-typed-constant-used-in-pattern.rs:7:9\n-   |\n-LL |         C |\n-   |         ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a8dd6a93d3dbfd5a34887e76d4bf96c1c0fd8715", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,18 +1,10 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-53096.rs:4:32\n    |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53096.rs:4:56\n-   |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^\n-   |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n error: fatal error triggered by #[rustc_error]\n@@ -21,5 +13,5 @@ error: fatal error triggered by #[rustc_error]\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "4210d0c1cb17a460b703bea2e368bb75849e999b", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-53096.rs:10:19\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-53096.rs:14:1\n    |\n-LL | const BAZR: Foo = bar();\n-   |                   ^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL | fn main() {}\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "7bb0066b7ef4209ad9202b29490d8c0e66c63391", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,14 +1,14 @@\n #![feature(const_impl_trait, const_fn_fn_ptr_basics, rustc_attrs)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Foo = impl Fn() -> usize;\n-const fn bar() -> Foo { || 0usize }\n+const fn bar() -> Foo {\n+    || 0usize\n+}\n const BAZR: Foo = bar();\n-//[min_tait]~^ ERROR not permitted here\n \n #[rustc_error]\n-fn main() {} //[full_tait]~ ERROR\n+fn main() {} //~ ERROR"}, {"sha": "b23fed5dadfe77e1eabe97dcdd05deed81d22ba6", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,25 +1,17 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-53678-generator-and-const-fn.rs:4:32\n    |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:4:56\n-   |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^\n-   |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:23:1\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:22:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "fabba2183531f9c81d5fd1ecfd3d04782b886e98", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:20:36\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:22:1\n    |\n-LL | const FOO: GenOnce<usize, usize> = const_generator(10, 100);\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL | fn main() {}\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a8215c41826f8f0d4c89a35c503e1b3b0b7ef1b5", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,9 +1,8 @@\n #![feature(const_impl_trait, generators, generator_trait, rustc_attrs)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n use std::ops::Generator;\n \n@@ -17,7 +16,7 @@ const fn const_generator<Y, R>(yielding: Y, returning: R) -> GenOnce<Y, R> {\n     }\n }\n \n-const FOO: GenOnce<usize, usize> = const_generator(10, 100); //[min_tait]~ ERROR not permitted here\n+const FOO: GenOnce<usize, usize> = const_generator(10, 100);\n \n #[rustc_error]\n-fn main() {} //[full_tait]~ ERROR\n+fn main() {} //~ ERROR"}, {"sha": "4906ea9c2e261a6c0d58560992398052c880c7b0", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -8,13 +8,13 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-60371.rs:14:37\n+  --> $DIR/issue-60371.rs:14:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n-   |                                     ^^^^^\n+   |                                        ^\n    |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:17"}, {"sha": "9d3f366ad810a34b431a2c0d56c22e64ed461d1f", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-60407.rs:3:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60407.rs:3:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-60407.rs:12:1\n+  --> $DIR/issue-60407.rs:11:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "1a3ceafa3e29405bf287ff3c19184db6ad45e115", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.min_tait.stderr", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,24 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-60407.rs:9:39\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-60407.rs:11:1\n    |\n-LL | static mut TEST: Option<Debuggable> = None;\n-   |                                       ^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-60407.rs:16:1\n-   |\n-LL | fn foo() -> Debuggable {\n-   | ^^^^^^^^^^^^^^^^^^^^^^ expected `[type error]`, got `u32`\n-   |\n-note: previous use here\n-  --> $DIR/issue-60407.rs:9:1\n-   |\n-LL | static mut TEST: Option<Debuggable> = None;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "3c6b873b4ca5a23d255f67f2c0124023678b3ae0", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,18 +1,18 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Debuggable = impl core::fmt::Debug;\n \n-static mut TEST: Option<Debuggable> = None; //[min_tait]~ ERROR not permitted here\n+static mut TEST: Option<Debuggable> = None;\n \n #[rustc_error]\n-fn main() { //[full_tait]~ ERROR\n+fn main() {\n+    //~^ ERROR\n     unsafe { TEST = Some(foo()) }\n }\n \n-fn foo() -> Debuggable { //[min_tait]~ ERROR concrete type differs\n+fn foo() -> Debuggable {\n     0u32\n }"}, {"sha": "ee26789d204f1309e6417d43167eddd432b66d98", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:19:1\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:18:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "d37be640e0b04a6844a3ed1a824f7689e518a3d3", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -2,9 +2,8 @@\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type T = impl Sized;\n // The concrete type referred by impl-trait-type-alias(`T`) is guaranteed\n@@ -16,7 +15,8 @@ type T = impl Sized;\n fn take(_: fn() -> T) {}\n \n #[rustc_error]\n-fn main() { //[full_tait]~ ERROR fatal error triggered by #[rustc_error]\n+fn main() {\n+    //[full_tait]~^ ERROR fatal error triggered by #[rustc_error]\n     take(|| {});\n     //[min_tait]~^ ERROR not permitted here\n     take(|| {});"}, {"sha": "0c37399df8dd21fa70195fd42074bfc09447cfcd", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,23 +0,0 @@\n-#![feature(min_type_alias_impl_trait)]\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-//~^ ERROR: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-//~| ERROR: the type `&'<empty> str` does not fulfill the required lifetime\n-//~| ERROR: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-\n-trait Output<'a> {}\n-\n-impl<'a> Output<'a> for &'a str {}\n-\n-fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n-    //~^ ERROR: concrete type differs from previous defining opaque type use\n-    let out: OpaqueOutputImpl<'a> = arg;\n-    arg\n-}\n-\n-fn main() {\n-    let s = String::from(\"wassup\");\n-    cool_fn(&s);\n-}"}, {"sha": "233c996340d844fe57b47485af643d0308d3a703", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr?ref=c9aa2595d9ba2313bbfcc8e0244231baa9c5d9e0", "patch": "@@ -1,60 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: hidden type `&'<empty> str` captures lifetime smaller than the function body\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-85113.rs:14:1\n-   |\n-LL | fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&'<empty> str`, got `&'a str`\n-   |\n-note: previous use here\n-  --> $DIR/issue-85113.rs:14:1\n-   |\n-LL | fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0477]: the type `&'<empty> str` does not fulfill the required lifetime\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: type must outlive the lifetime `'a` as defined on the item at 5:23\n-  --> $DIR/issue-85113.rs:5:23\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                       ^^\n-\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: first, the lifetime cannot outlive the empty lifetime...\n-note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the item at 5:23...\n-  --> $DIR/issue-85113.rs:5:23\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                       ^^\n-note: ...so that the types are compatible\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `Output<'a>`\n-              found `Output<'_>`\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0477, E0495, E0700.\n-For more information about an error, try `rustc --explain E0477`."}, {"sha": "faddecb21766446bb7bd398efc2aec7a9ae8a4e7", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/no_inferrable_concrete_type.rs:6:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/no_inferrable_concrete_type.rs:6:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:10:12\n+  --> $DIR/no_inferrable_concrete_type.rs:9:12\n    |\n LL | type Foo = impl Copy;\n    |            ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "3194bd7610712d77379be1be3f246e591f743677", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,18 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/no_inferrable_concrete_type.rs:16:12\n-   |\n-LL |     let _: Foo = std::mem::transmute(0u8);\n-   |            ^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:10:12\n+  --> $DIR/no_inferrable_concrete_type.rs:9:12\n    |\n LL | type Foo = impl Copy;\n    |            ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "409eec7250fd0464bf0475966bb41db7718cff76", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -3,15 +3,16 @@\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Foo = impl Copy; //~ could not find defining uses\n \n // make compiler happy about using 'Foo'\n-fn bar(x: Foo) -> Foo { x }\n+fn bar(x: Foo) -> Foo {\n+    x\n+}\n \n fn main() {\n-    let _: Foo = std::mem::transmute(0u8); //[min_tait]~ ERROR not permitted here\n+    let _: Foo = std::mem::transmute(0u8);\n }"}, {"sha": "d5a4fa52dfb7b81fd6ab5498ab20201c884e64bd", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/structural-match-no-leak.rs:4:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/structural-match-no-leak.rs:4:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:19:9\n+  --> $DIR/structural-match-no-leak.rs:18:9\n    |\n LL |         LEAK_FREE => (),\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "b7caf8ed2986896cab867d5b85b1332a90dc2317", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/structural-match-no-leak.rs:15:24\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match-no-leak.rs:18:9\n    |\n-LL | const LEAK_FREE: Bar = leak_free();\n-   |                        ^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL |         LEAK_FREE => (),\n+   |         ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e2b10e7355fbb820a339b0805ff9c88d87e929e3", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,9 +1,8 @@\n #![feature(const_impl_trait)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Bar = impl Send;\n \n@@ -12,12 +11,12 @@ type Bar = impl Send;\n const fn leak_free() -> Bar {\n     7i32\n }\n-const LEAK_FREE: Bar = leak_free(); //[min_tait]~ ERROR not permitted here\n+const LEAK_FREE: Bar = leak_free();\n \n fn leak_free_test() {\n     match todo!() {\n         LEAK_FREE => (),\n-        //[full_tait]~^ `impl Send` cannot be used in patterns\n+        //~^ `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }"}, {"sha": "d394c99df80293c1f9df69d145479ddb0445892d", "filename": "src/test/ui/type-alias-impl-trait/structural-match.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/structural-match.rs:4:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/structural-match.rs:4:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:20:9\n+  --> $DIR/structural-match.rs:19:9\n    |\n LL |         VALUE => (),\n    |         ^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "f63b1fb23df7e67003203de2aa1a56ff22d5f8c0", "filename": "src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/structural-match.rs:16:20\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match.rs:19:9\n    |\n-LL | const VALUE: Foo = value();\n-   |                    ^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL |         VALUE => (),\n+   |         ^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "aed9334b3cc86825b00004ca5d1bf0fcaa1ed8ae", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,9 +1,8 @@\n #![feature(const_impl_trait)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Foo = impl Send;\n \n@@ -13,12 +12,12 @@ struct A;\n const fn value() -> Foo {\n     A\n }\n-const VALUE: Foo = value(); //[min_tait]~ ERROR not permitted here\n+const VALUE: Foo = value();\n \n fn test() {\n     match todo!() {\n         VALUE => (),\n-        //[full_tait]~^ `impl Send` cannot be used in patterns\n+        //~^ `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }"}, {"sha": "6f817757cc4b3c3d798167cc2d4b5bb6d7de647a", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.full_tait.stderr", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,19 +1,30 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-const.rs:5:32\n+  --> $DIR/type-alias-impl-trait-const.rs:3:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-const.rs:11:12\n+error[E0308]: mismatched types\n+  --> $DIR/type-alias-impl-trait-const.rs:13:19\n    |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub type Foo = impl Debug;\n+   |                ---------- the expected opaque type\n+...\n+LL | const _FOO: Foo = 5;\n+   |                   ^ expected opaque type, found integer\n    |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n \n-warning: 2 warnings emitted\n+error: could not find defining uses\n+  --> $DIR/type-alias-impl-trait-const.rs:10:16\n+   |\n+LL | pub type Foo = impl Debug;\n+   |                ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ce98318333b01687b81b9a35ec187501aa95d572", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.min_tait.stderr", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,11 +1,21 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-const.rs:11:12\n+error[E0308]: mismatched types\n+  --> $DIR/type-alias-impl-trait-const.rs:13:19\n    |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub type Foo = impl Debug;\n+   |                ---------- the expected opaque type\n+...\n+LL | const _FOO: Foo = 5;\n+   |                   ^ expected opaque type, found integer\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n \n-warning: 1 warning emitted\n+error: could not find defining uses\n+  --> $DIR/type-alias-impl-trait-const.rs:10:16\n+   |\n+LL | pub type Foo = impl Debug;\n+   |                ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "751512c5dfc03b58561a6b33b3c9ffee5b7e827e", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72c360a30f9a8160e4f40340cecc9b1ce979cd7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs?ref=a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "patch": "@@ -1,23 +1,16 @@\n-// check-pass\n-\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-// Currently, the `type_alias_impl_trait` feature implicitly\n-// depends on `impl_trait_in_bindings` in order to work properly.\n-// Specifically, this line requires `impl_trait_in_bindings` to be enabled:\n-// https://github.com/rust-lang/rust/blob/481068a707679257e2a738b40987246e0420e787/compiler/rustc_typeck/check/mod.rs#L856\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n \n // Ensures that `const` items can constrain an opaque `impl Trait`.\n \n use std::fmt::Debug;\n \n pub type Foo = impl Debug;\n+//~^ ERROR could not find defining uses\n \n const _FOO: Foo = 5;\n+//~^ ERROR mismatched types [E0308]\n \n-fn main() {\n-}\n+fn main() {}"}]}