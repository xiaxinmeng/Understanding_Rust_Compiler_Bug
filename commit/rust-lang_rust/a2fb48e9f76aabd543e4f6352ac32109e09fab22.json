{"sha": "a2fb48e9f76aabd543e4f6352ac32109e09fab22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZmI0OGU5Zjc2YWFiZDU0M2U0ZjYzNTJhYzMyMTA5ZTA5ZmFiMjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-21T00:56:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-21T00:56:08Z"}, "message": "Auto merge of #31761 - Amanieu:volatile, r=alexcrichton\n\nTracking issue: #31756\nRFC: rust-lang/rfcs#1467\n\nI've made these unstable for now. Should they be stabilized straight away since we've had plenty of experience with people using the unstable intrinsics?", "tree": {"sha": "eab0306c3ac87aa48fa4d8c2bbab528b377014c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eab0306c3ac87aa48fa4d8c2bbab528b377014c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2fb48e9f76aabd543e4f6352ac32109e09fab22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fb48e9f76aabd543e4f6352ac32109e09fab22", "html_url": "https://github.com/rust-lang/rust/commit/a2fb48e9f76aabd543e4f6352ac32109e09fab22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2fb48e9f76aabd543e4f6352ac32109e09fab22/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c894ff6b1249fc59ce583054011cf5966c6fcc97", "url": "https://api.github.com/repos/rust-lang/rust/commits/c894ff6b1249fc59ce583054011cf5966c6fcc97", "html_url": "https://github.com/rust-lang/rust/commit/c894ff6b1249fc59ce583054011cf5966c6fcc97"}, {"sha": "3b67e467b26d54111da36c7af62fbfdbf611ebe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b67e467b26d54111da36c7af62fbfdbf611ebe3", "html_url": "https://github.com/rust-lang/rust/commit/3b67e467b26d54111da36c7af62fbfdbf611ebe3"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "f871857dab632e5fadcdb4f0fe5bfd779dfde81a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a2fb48e9f76aabd543e4f6352ac32109e09fab22/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2fb48e9f76aabd543e4f6352ac32109e09fab22/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a2fb48e9f76aabd543e4f6352ac32109e09fab22", "patch": "@@ -161,6 +161,54 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n     intrinsics::move_val_init(&mut *dst, src)\n }\n \n+/// Performs a volatile read of the value from `src` without moving it. This\n+/// leaves the memory in `src` unchanged.\n+///\n+/// Volatile operations are intended to act on I/O memory, and are guaranteed\n+/// to not be elided or reordered by the compiler across other volatile\n+/// operations. See the LLVM documentation on [[volatile]].\n+///\n+/// [volatile]: http://llvm.org/docs/LangRef.html#volatile-memory-accesses\n+///\n+/// # Safety\n+///\n+/// Beyond accepting a raw pointer, this is unsafe because it semantically\n+/// moves the value out of `src` without preventing further usage of `src`.\n+/// If `T` is not `Copy`, then care must be taken to ensure that the value at\n+/// `src` is not used before the data is overwritten again (e.g. with `write`,\n+/// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n+/// because it will attempt to drop the value previously at `*src`.\n+#[inline]\n+#[unstable(feature = \"volatile\", reason = \"recently added\", issue = \"31756\")]\n+pub unsafe fn read_volatile<T>(src: *const T) -> T {\n+    intrinsics::volatile_load(src)\n+}\n+\n+/// Performs a volatile write of a memory location with the given value without\n+/// reading or dropping the old value.\n+///\n+/// Volatile operations are intended to act on I/O memory, and are guaranteed\n+/// to not be elided or reordered by the compiler across other volatile\n+/// operations. See the LLVM documentation on [[volatile]].\n+///\n+/// [volatile]: http://llvm.org/docs/LangRef.html#volatile-memory-accesses\n+///\n+/// # Safety\n+///\n+/// This operation is marked unsafe because it accepts a raw pointer.\n+///\n+/// It does not drop the contents of `dst`. This is safe, but it could leak\n+/// allocations or resources, so care must be taken not to overwrite an object\n+/// that should be dropped.\n+///\n+/// This is appropriate for initializing uninitialized memory, or overwriting\n+/// memory that has previously been `read` from.\n+#[inline]\n+#[unstable(feature = \"volatile\", reason = \"recently added\", issue = \"31756\")]\n+pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n+    intrinsics::volatile_store(dst, src);\n+}\n+\n #[lang = \"const_ptr\"]\n impl<T: ?Sized> *const T {\n     /// Returns true if the pointer is null."}, {"sha": "4d0d7672101c36c4377fe04f5e806abb7ba0cb25", "filename": "src/test/run-make/volatile-intrinsics/main.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2fb48e9f76aabd543e4f6352ac32109e09fab22/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2fb48e9f76aabd543e4f6352ac32109e09fab22/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs?ref=a2fb48e9f76aabd543e4f6352ac32109e09fab22", "patch": "@@ -8,14 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core_intrinsics)]\n+#![feature(core_intrinsics, volatile)]\n \n use std::intrinsics::{volatile_load, volatile_store};\n+use std::ptr::{read_volatile, write_volatile};\n \n pub fn main() {\n     unsafe {\n         let mut i : isize = 1;\n         volatile_store(&mut i, 2);\n         assert_eq!(volatile_load(&i), 2);\n     }\n+    unsafe {\n+        let mut i : isize = 1;\n+        write_volatile(&mut i, 2);\n+        assert_eq!(read_volatile(&i), 2);\n+    }\n }"}]}