{"sha": "d75338e6301ea842bc3dd92e3793626b20346aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NTMzOGU2MzAxZWE4NDJiYzNkZDkyZTM3OTM2MjZiMjAzNDZhYWY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-01T18:20:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-01T18:20:14Z"}, "message": "Rollup merge of #65902 - gilescope:issue62570, r=estebank\n\nMake ItemContext available for better diagnositcs\n\nFix #62570", "tree": {"sha": "0c9c12126d0750a551a8d6d36e30e7f331408345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c9c12126d0750a551a8d6d36e30e7f331408345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75338e6301ea842bc3dd92e3793626b20346aaf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdvHdeCRBK7hj4Ov3rIwAAdHIIACtQT20qXOXOjCWrBTSgtsD9\nt4WtO/IoJTGbti4BdzKDNLrQuMb5w7tt71ERHxQ006NRtNvLwa6xlY6HVNnNkFmc\nNqbBd11DaWiRcR1JfZvjwPsM3kQTYggdH9m/2vTfj2/02ximsdquPi5bIqAJc/2r\n1c2QuydrquTRwTX4h4ndHlKViHtHnP6LWe38nvY+/lhPEGeaiwKSLb9TNg+6DvYX\n/LxMrg7s/LfauSdc5xfAtjlCI9aTuA7kzvyilTV/qgqOJGyR34AmZlSSRhcoaIN0\nYkZJ9eaDQ2CE+PQgsH3A6PRbDT53ctYigvkb2kcVRGAgcCL4wb7mK/EZJH9vsq0=\n=1cvT\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c9c12126d0750a551a8d6d36e30e7f331408345\nparent 48a9f59ae7e1444ee38fb5afa849daacfb7d02e7\nparent d7869ec02281be58ed3857b545f258b81a6adb09\nauthor Tyler Mandry <tmandry@gmail.com> 1572632414 -0700\ncommitter GitHub <noreply@github.com> 1572632414 -0700\n\nRollup merge of #65902 - gilescope:issue62570, r=estebank\n\nMake ItemContext available for better diagnositcs\n\nFix #62570\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75338e6301ea842bc3dd92e3793626b20346aaf", "html_url": "https://github.com/rust-lang/rust/commit/d75338e6301ea842bc3dd92e3793626b20346aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75338e6301ea842bc3dd92e3793626b20346aaf/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a9f59ae7e1444ee38fb5afa849daacfb7d02e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a9f59ae7e1444ee38fb5afa849daacfb7d02e7", "html_url": "https://github.com/rust-lang/rust/commit/48a9f59ae7e1444ee38fb5afa849daacfb7d02e7"}, {"sha": "d7869ec02281be58ed3857b545f258b81a6adb09", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7869ec02281be58ed3857b545f258b81a6adb09", "html_url": "https://github.com/rust-lang/rust/commit/d7869ec02281be58ed3857b545f258b81a6adb09"}], "stats": {"total": 168, "additions": 166, "deletions": 2}, "files": [{"sha": "e8f35f8cf245025925decf4771c869b8213923d6", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=d75338e6301ea842bc3dd92e3793626b20346aaf", "patch": "@@ -5,7 +5,7 @@\n /// extracting those success or failure values from an existing instance and\n /// creating a new instance from a success or failure value.\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[rustc_on_unimplemented(\n+#[cfg_attr(bootstrap, rustc_on_unimplemented(\n    on(all(\n        any(from_method=\"from_error\", from_method=\"from_ok\"),\n        from_desugaring=\"QuestionMark\"),\n@@ -17,7 +17,20 @@\n       message=\"the `?` operator can only be applied to values \\\n                that implement `{Try}`\",\n       label=\"the `?` operator cannot be applied to type `{Self}`\")\n-)]\n+))]\n+#[cfg_attr(not(bootstrap), rustc_on_unimplemented(\n+on(all(\n+any(from_method=\"from_error\", from_method=\"from_ok\"),\n+from_desugaring=\"QuestionMark\"),\n+message=\"the `?` operator can only be used in {ItemContext} \\\n+               that returns `Result` or `Option` \\\n+               (or another type that implements `{Try}`)\",\n+label=\"cannot use the `?` operator in {ItemContext} that returns `{Self}`\"),\n+on(all(from_method=\"into_result\", from_desugaring=\"QuestionMark\"),\n+message=\"the `?` operator can only be applied to values \\\n+               that implement `{Try}`\",\n+label=\"the `?` operator cannot be applied to type `{Self}`\")\n+))]\n #[doc(alias = \"?\")]\n pub trait Try {\n     /// The type of this value when viewed as successful."}, {"sha": "c91dc21f84d0212ccdde08b0fda679af840cb4c6", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d75338e6301ea842bc3dd92e3793626b20346aaf", "patch": "@@ -353,6 +353,52 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn describe_generator(&self, body_id: hir::BodyId) -> Option<&'static str> {\n+        self.tcx.hir().body(body_id).generator_kind.map(|gen_kind| {\n+            match gen_kind {\n+                hir::GeneratorKind::Gen => \"a generator\",\n+                hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block) => \"an async block\",\n+                hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Fn) => \"an async function\",\n+                hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Closure) => \"an async closure\",\n+            }\n+        })\n+    }\n+\n+    /// Used to set on_unimplemented's `ItemContext`\n+    /// to be the enclosing (async) block/function/closure\n+    fn describe_enclosure(&self, hir_id: hir::HirId) -> Option<&'static str> {\n+        let hir = &self.tcx.hir();\n+        let node = hir.find(hir_id)?;\n+        if let hir::Node::Item(\n+            hir::Item{kind: hir::ItemKind::Fn(_ ,fn_header ,_ , body_id), .. }) = &node {\n+            self.describe_generator(*body_id).or_else(||\n+                Some(if let hir::FnHeader{ asyncness: hir::IsAsync::Async, .. } = fn_header {\n+                    \"an async function\"\n+                } else {\n+                    \"a function\"\n+                })\n+            )\n+        } else if let hir::Node::Expr(hir::Expr {\n+            kind: hir::ExprKind::Closure(_is_move, _, body_id, _, gen_movability), .. }) = &node {\n+            self.describe_generator(*body_id).or_else(||\n+                Some(if gen_movability.is_some() {\n+                    \"an async closure\"\n+                } else {\n+                    \"a closure\"\n+                })\n+            )\n+        } else if let hir::Node::Expr(hir::Expr { .. }) = &node {\n+            let parent_hid = hir.get_parent_node(hir_id);\n+            if parent_hid != hir_id {\n+                return self.describe_enclosure(parent_hid);\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn on_unimplemented_note(\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -363,6 +409,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let trait_ref = *trait_ref.skip_binder();\n \n         let mut flags = vec![];\n+        flags.push((sym::item_context,\n+            self.describe_enclosure(obligation.cause.body_id).map(|s|s.to_owned())));\n+\n         match obligation.cause.code {\n             ObligationCauseCode::BuiltinDerivedObligation(..) |\n             ObligationCauseCode::ImplDerivedObligation(..) => {}"}, {"sha": "b39c00a56e349ad13c5933b9f6e55c9f69d1b176", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=d75338e6301ea842bc3dd92e3793626b20346aaf", "patch": "@@ -248,6 +248,8 @@ impl<'tcx> OnUnimplementedFormatString {\n                     Position::ArgumentNamed(s) if s == sym::from_method => (),\n                     // `{from_desugaring}` is allowed\n                     Position::ArgumentNamed(s) if s == sym::from_desugaring => (),\n+                    // `{ItemContext}` is allowed\n+                    Position::ArgumentNamed(s) if s == sym::item_context => (),\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => match generics.params.iter().find(|param| {\n                         param.name == s\n@@ -296,6 +298,7 @@ impl<'tcx> OnUnimplementedFormatString {\n \n         let s = self.0.as_str();\n         let parser = Parser::new(&s, None, vec![], false);\n+        let item_context = (options.get(&sym::item_context)).unwrap_or(&empty_string);\n         parser.map(|p|\n             match p {\n                 Piece::String(s) => s,\n@@ -311,6 +314,8 @@ impl<'tcx> OnUnimplementedFormatString {\n                             } else if s == sym::from_desugaring || s == sym::from_method {\n                                 // don't break messages using these two arguments incorrectly\n                                 &empty_string\n+                            } else if s == sym::item_context {\n+                                &item_context\n                             } else {\n                                 bug!(\"broken on_unimplemented {:?} for {:?}: \\\n                                       no argument matching {:?}\","}, {"sha": "57131ffe18cb3a36238f2e84962d8e089c422f97", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=d75338e6301ea842bc3dd92e3793626b20346aaf", "patch": "@@ -370,6 +370,7 @@ symbols! {\n         issue_5723_bootstrap,\n         issue_tracker_base_url,\n         item,\n+        item_context: \"ItemContext\",\n         item_like_imports,\n         iter,\n         Iterator,"}, {"sha": "51ac522017cb3fe7b932c3e6b6f6bffd8246e840", "filename": "src/test/ui/async-await/try-on-option-in-async.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.rs?ref=d75338e6301ea842bc3dd92e3793626b20346aaf", "patch": "@@ -0,0 +1,27 @@\n+#![feature(try_trait, async_closure)]\n+// edition:2018\n+fn main() {}\n+\n+async fn an_async_block() -> u32 {\n+    async {\n+        let x: Option<u32> = None;\n+        x?; //~ ERROR the `?` operator\n+        22\n+    }.await\n+}\n+\n+async fn async_closure_containing_fn() -> u32 {\n+    let async_closure = async || {\n+        let x: Option<u32> = None;\n+        x?; //~ ERROR the `?` operator\n+        22_u32\n+    };\n+\n+    async_closure().await\n+}\n+\n+async fn an_async_function() -> u32 {\n+    let x: Option<u32> = None;\n+    x?; //~ ERROR the `?` operator\n+    22\n+}"}, {"sha": "7d31f60efdc6a0425a69f07dc989c116e2d9e690", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=d75338e6301ea842bc3dd92e3793626b20346aaf", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option-in-async.rs:8:9\n+   |\n+LL |         x?;\n+   |         ^^ cannot use the `?` operator in an async block that returns `{integer}`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `{integer}`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option-in-async.rs:16:9\n+   |\n+LL |         x?;\n+   |         ^^ cannot use the `?` operator in an async closure that returns `u32`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `u32`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option-in-async.rs:25:5\n+   |\n+LL |     x?;\n+   |     ^^ cannot use the `?` operator in an async function that returns `u32`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `u32`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "65d5e29ec2f135c238938eb479a63ee465493692", "filename": "src/test/ui/try-on-option-diagnostics.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.rs?ref=d75338e6301ea842bc3dd92e3793626b20346aaf", "patch": "@@ -0,0 +1,18 @@\n+#![feature(try_trait)]\n+// edition:2018\n+fn main() {}\n+\n+fn a_function() -> u32 {\n+    let x: Option<u32> = None;\n+    x?; //~ ERROR the `?` operator\n+    22\n+}\n+\n+fn a_closure() -> u32 {\n+    let a_closure = || {\n+        let x: Option<u32> = None;\n+        x?; //~ ERROR the `?` operator\n+        22\n+    };\n+    a_closure()\n+}"}, {"sha": "4dd515e1b5a454b726706f3a3f0655ab64c9e22e", "filename": "src/test/ui/try-on-option-diagnostics.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d75338e6301ea842bc3dd92e3793626b20346aaf/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr?ref=d75338e6301ea842bc3dd92e3793626b20346aaf", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option-diagnostics.rs:7:5\n+   |\n+LL |     x?;\n+   |     ^^ cannot use the `?` operator in a function that returns `u32`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `u32`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option-diagnostics.rs:14:9\n+   |\n+LL |         x?;\n+   |         ^^ cannot use the `?` operator in a closure that returns `{integer}`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `{integer}`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}