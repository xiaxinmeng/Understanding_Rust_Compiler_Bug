{"sha": "f810314bc6ad252430c29636c8ba00acfa81a737", "node_id": "C_kwDOAAsO6NoAKGY4MTAzMTRiYzZhZDI1MjQzMGMyOTYzNmM4YmEwMGFjZmE4MWE3Mzc", "commit": {"author": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2022-02-20T08:53:18Z"}, "committer": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2022-02-20T08:53:18Z"}, "message": "solarish current_exe using libc call directly", "tree": {"sha": "3a64dd65576db242d92ee08e1e1d292ab59289f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a64dd65576db242d92ee08e1e1d292ab59289f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f810314bc6ad252430c29636c8ba00acfa81a737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f810314bc6ad252430c29636c8ba00acfa81a737", "html_url": "https://github.com/rust-lang/rust/commit/f810314bc6ad252430c29636c8ba00acfa81a737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f810314bc6ad252430c29636c8ba00acfa81a737/comments", "author": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6fe969541d14ad8ba286c47416e6d3f58a1c9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6fe969541d14ad8ba286c47416e6d3f58a1c9a4", "html_url": "https://github.com/rust-lang/rust/commit/a6fe969541d14ad8ba286c47416e6d3f58a1c9a4"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "0b6cdb923bd6a11d367d048bbb4d7db7d4a66e76", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f810314bc6ad252430c29636c8ba00acfa81a737/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f810314bc6ad252430c29636c8ba00acfa81a737/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=f810314bc6ad252430c29636c8ba00acfa81a737", "patch": "@@ -384,11 +384,8 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     if let Ok(path) = crate::fs::read_link(\"/proc/self/path/a.out\") {\n         Ok(path)\n     } else {\n-        extern \"C\" {\n-            fn getexecname() -> *const c_char;\n-        }\n         unsafe {\n-            let path = getexecname();\n+            let path = libc::getexecname();\n             if path.is_null() {\n                 Err(io::Error::last_os_error())\n             } else {"}]}