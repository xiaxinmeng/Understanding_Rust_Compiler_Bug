{"sha": "4f86b8e7323b6b50315c3298e6f809d92a4c4c4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmODZiOGU3MzIzYjZiNTAzMTVjMzI5OGU2ZjgwOWQ5MmE0YzRjNGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-16T13:09:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-16T13:09:55Z"}, "message": "Auto merge of #31675 - pitdicker:fs_metadata, r=alexcrichton\n\nBecause we no longer use `GetFileAttributesExW` FileAttr is never created directly from `WIN32_FILE_ATTRIBUTE_DATA` anymore. So we should no longer store FileAttr's attributes in that c struct.\n\nr? @alexcrichton\nIs this what you had in mind?", "tree": {"sha": "129a7bc6dcb0cb1477b22ee47ebc92b74fb4a5da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/129a7bc6dcb0cb1477b22ee47ebc92b74fb4a5da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f86b8e7323b6b50315c3298e6f809d92a4c4c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f86b8e7323b6b50315c3298e6f809d92a4c4c4f", "html_url": "https://github.com/rust-lang/rust/commit/4f86b8e7323b6b50315c3298e6f809d92a4c4c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f86b8e7323b6b50315c3298e6f809d92a4c4c4f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8018280d6f96e3a73317b1266ee2d65ba4780cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8018280d6f96e3a73317b1266ee2d65ba4780cdf", "html_url": "https://github.com/rust-lang/rust/commit/8018280d6f96e3a73317b1266ee2d65ba4780cdf"}, {"sha": "44e31b91ad05ba0bdb6db5c6f75451ba60160d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e31b91ad05ba0bdb6db5c6f75451ba60160d84", "html_url": "https://github.com/rust-lang/rust/commit/44e31b91ad05ba0bdb6db5c6f75451ba60160d84"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "95fb1e7c60052c27d2355153a9178a11a6d40cd7", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4f86b8e7323b6b50315c3298e6f809d92a4c4c4f/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f86b8e7323b6b50315c3298e6f809d92a4c4c4f/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=4f86b8e7323b6b50315c3298e6f809d92a4c4c4f", "patch": "@@ -30,7 +30,11 @@ pub struct File { handle: Handle }\n \n #[derive(Clone)]\n pub struct FileAttr {\n-    data: c::WIN32_FILE_ATTRIBUTE_DATA,\n+    attributes: c::DWORD,\n+    creation_time: c::FILETIME,\n+    last_access_time: c::FILETIME,\n+    last_write_time: c::FILETIME,\n+    file_size: u64,\n     reparse_tag: c::DWORD,\n }\n \n@@ -142,14 +146,11 @@ impl DirEntry {\n \n     pub fn metadata(&self) -> io::Result<FileAttr> {\n         Ok(FileAttr {\n-            data: c::WIN32_FILE_ATTRIBUTE_DATA {\n-                dwFileAttributes: self.data.dwFileAttributes,\n-                ftCreationTime: self.data.ftCreationTime,\n-                ftLastAccessTime: self.data.ftLastAccessTime,\n-                ftLastWriteTime: self.data.ftLastWriteTime,\n-                nFileSizeHigh: self.data.nFileSizeHigh,\n-                nFileSizeLow: self.data.nFileSizeLow,\n-            },\n+            attributes: self.data.dwFileAttributes,\n+            creation_time: self.data.ftCreationTime,\n+            last_access_time: self.data.ftLastAccessTime,\n+            last_write_time: self.data.ftLastWriteTime,\n+            file_size: ((self.data.nFileSizeHigh as u64) << 32) | (self.data.nFileSizeLow as u64),\n             reparse_tag: if self.data.dwFileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n                     // reserved unless this is a reparse point\n                     self.data.dwReserved0\n@@ -290,14 +291,11 @@ impl File {\n             try!(cvt(c::GetFileInformationByHandle(self.handle.raw(),\n                                                    &mut info)));\n             let mut attr = FileAttr {\n-                data: c::WIN32_FILE_ATTRIBUTE_DATA {\n-                    dwFileAttributes: info.dwFileAttributes,\n-                    ftCreationTime: info.ftCreationTime,\n-                    ftLastAccessTime: info.ftLastAccessTime,\n-                    ftLastWriteTime: info.ftLastWriteTime,\n-                    nFileSizeHigh: info.nFileSizeHigh,\n-                    nFileSizeLow: info.nFileSizeLow,\n-                },\n+                attributes: info.dwFileAttributes,\n+                creation_time: info.ftCreationTime,\n+                last_access_time: info.ftLastAccessTime,\n+                last_write_time: info.ftLastWriteTime,\n+                file_size: ((info.nFileSizeHigh as u64) << 32) | (info.nFileSizeLow as u64),\n                 reparse_tag: 0,\n             };\n             if attr.is_reparse_point() {\n@@ -420,45 +418,45 @@ impl fmt::Debug for File {\n \n impl FileAttr {\n     pub fn size(&self) -> u64 {\n-        ((self.data.nFileSizeHigh as u64) << 32) | (self.data.nFileSizeLow as u64)\n+        self.file_size\n     }\n \n     pub fn perm(&self) -> FilePermissions {\n-        FilePermissions { attrs: self.data.dwFileAttributes }\n+        FilePermissions { attrs: self.attributes }\n     }\n \n-    pub fn attrs(&self) -> u32 { self.data.dwFileAttributes as u32 }\n+    pub fn attrs(&self) -> u32 { self.attributes as u32 }\n \n     pub fn file_type(&self) -> FileType {\n-        FileType::new(self.data.dwFileAttributes, self.reparse_tag)\n+        FileType::new(self.attributes, self.reparse_tag)\n     }\n \n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(self.data.ftLastWriteTime))\n+        Ok(SystemTime::from(self.last_write_time))\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(self.data.ftLastAccessTime))\n+        Ok(SystemTime::from(self.last_access_time))\n     }\n \n     pub fn created(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from(self.data.ftCreationTime))\n+        Ok(SystemTime::from(self.creation_time))\n     }\n \n     pub fn modified_u64(&self) -> u64 {\n-        to_u64(&self.data.ftLastWriteTime)\n+        to_u64(&self.last_write_time)\n     }\n \n     pub fn accessed_u64(&self) -> u64 {\n-        to_u64(&self.data.ftLastAccessTime)\n+        to_u64(&self.last_access_time)\n     }\n \n     pub fn created_u64(&self) -> u64 {\n-        to_u64(&self.data.ftCreationTime)\n+        to_u64(&self.creation_time)\n     }\n \n     fn is_reparse_point(&self) -> bool {\n-        self.data.dwFileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0\n+        self.attributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0\n     }\n }\n "}]}