{"sha": "382143abd871d9b2c73df08ffd2928c44f314ab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MjE0M2FiZDg3MWQ5YjJjNzNkZjA4ZmZkMjkyOGM0NGYzMTRhYjM=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-03-02T00:07:01Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-03-02T00:07:01Z"}, "message": "doc/rust.md: Demonstrate the `f::<T>()` syntax more often\n\nThe \"Generic functions\" subsection mentions that generic functions are\ninstantiated based on context, so let's also mention right away (with a\nlink to the #paths section) that an explicit form is available.\n\nThis also adds an example to the function call expression section that\nexplicitly instantiates a generic function.", "tree": {"sha": "c531788e4dd219aac9546cdec8eb2103d0f7e331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c531788e4dd219aac9546cdec8eb2103d0f7e331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/382143abd871d9b2c73df08ffd2928c44f314ab3", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/382143abd871d9b2c73df08ffd2928c44f314ab3", "html_url": "https://github.com/rust-lang/rust/commit/382143abd871d9b2c73df08ffd2928c44f314ab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/382143abd871d9b2c73df08ffd2928c44f314ab3/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab8ec242bc34dceb8aded6ec71ddf17e5966d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab8ec242bc34dceb8aded6ec71ddf17e5966d86", "html_url": "https://github.com/rust-lang/rust/commit/cab8ec242bc34dceb8aded6ec71ddf17e5966d86"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "862358859e5c4f39afdcb11a527212bd642291b2", "filename": "doc/rust.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/382143abd871d9b2c73df08ffd2928c44f314ab3/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/382143abd871d9b2c73df08ffd2928c44f314ab3/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=382143abd871d9b2c73df08ffd2928c44f314ab3", "patch": "@@ -908,6 +908,11 @@ function defined above on `[1, 2]` will instantiate type parameter `T`\n with `int`, and require the closure parameter to have type\n `fn(int)`.\n \n+The type parameters can also be explicitly supplied in a trailing\n+[path](#paths) component after the function name. This might be necessary\n+if there is not sufficient context to determine the type parameters. For\n+example, `sys::size_of::<u32>() == 4`.\n+\n Since a parameter type is opaque to the generic function, the set of\n operations that can be performed on it is limited. Values of parameter\n type can always be moved, but they can only be copied when the\n@@ -2040,12 +2045,14 @@ an optional reference slot to serve as the function's output, bound to the\n `lval` on the right hand side of the call. If the function eventually returns,\n then the expression completes.\n \n-An example of a call expression:\n+Some examples of call expressions:\n \n ~~~~\n # fn add(x: int, y: int) -> int { 0 }\n+# use core::from_str::FromStr::from_str;\n \n let x: int = add(1, 2);\n+let pi = from_str::<f32>(\"3.14\");\n ~~~~\n \n ### Lambda expressions"}]}