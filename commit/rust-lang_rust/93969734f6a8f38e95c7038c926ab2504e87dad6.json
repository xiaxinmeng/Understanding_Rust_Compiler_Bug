{"sha": "93969734f6a8f38e95c7038c926ab2504e87dad6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOTY5NzM0ZjZhOGYzOGU5NWM3MDM4YzkyNmFiMjUwNGU4N2RhZDY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-08T13:16:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-08T13:16:16Z"}, "message": "Add missing links", "tree": {"sha": "811f00346cafb580245e2f2ce049cefbc2f83ea0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/811f00346cafb580245e2f2ce049cefbc2f83ea0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93969734f6a8f38e95c7038c926ab2504e87dad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93969734f6a8f38e95c7038c926ab2504e87dad6", "html_url": "https://github.com/rust-lang/rust/commit/93969734f6a8f38e95c7038c926ab2504e87dad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93969734f6a8f38e95c7038c926ab2504e87dad6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b193de98af5b8c6e2b50908ea64323b9095a1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b193de98af5b8c6e2b50908ea64323b9095a1a4", "html_url": "https://github.com/rust-lang/rust/commit/1b193de98af5b8c6e2b50908ea64323b9095a1a4"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "65aacb23bd76813511c1381d85f73b17b1a1a344", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93969734f6a8f38e95c7038c926ab2504e87dad6/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93969734f6a8f38e95c7038c926ab2504e87dad6/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=93969734f6a8f38e95c7038c926ab2504e87dad6", "patch": "@@ -83,9 +83,12 @@ pub type Result = result::Result<(), Error>;\n /// some other means.\n ///\n /// An important thing to remember is that the type `fmt::Error` should not be\n-/// confused with `std::io::Error` or `std::error::Error`, which you may also\n+/// confused with [`std::io::Error`] or [`std::error::Error`], which you may also\n /// have in scope.\n ///\n+/// [`std::io::Error`]: ../../std/io/struct.Error.html\n+/// [`std::error::Error`]: ../../std/error/trait.Error.html\n+///\n /// # Examples\n ///\n /// ```rust"}, {"sha": "33d11ebb35022b2ad411e2de6d76fc8ac9077900", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93969734f6a8f38e95c7038c926ab2504e87dad6/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93969734f6a8f38e95c7038c926ab2504e87dad6/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=93969734f6a8f38e95c7038c926ab2504e87dad6", "patch": "@@ -997,9 +997,9 @@ pub trait Write {\n     ///\n     /// Calls to `write` are not guaranteed to block waiting for data to be\n     /// written, and a write which would otherwise block can be indicated through\n-    /// an `Err` variant.\n+    /// an [`Err`] variant.\n     ///\n-    /// If the return value is `Ok(n)` then it must be guaranteed that\n+    /// If the return value is [`Ok(n)`] then it must be guaranteed that\n     /// `0 <= n <= buf.len()`. A return value of `0` typically means that the\n     /// underlying object is no longer able to accept bytes and will likely not\n     /// be able to in the future as well, or that the buffer provided is empty.\n@@ -1013,9 +1013,13 @@ pub trait Write {\n     /// It is **not** considered an error if the entire buffer could not be\n     /// written to this writer.\n     ///\n-    /// An error of the `ErrorKind::Interrupted` kind is non-fatal and the\n+    /// An error of the [`ErrorKind::Interrupted`] kind is non-fatal and the\n     /// write operation should be retried if there is nothing else to do.\n     ///\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Ok(n)`]:  ../../std/result/enum.Result.html#variant.Ok\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1061,17 +1065,20 @@ pub trait Write {\n \n     /// Attempts to write an entire buffer into this write.\n     ///\n-    /// This method will continuously call `write` until there is no more data\n-    /// to be written or an error of non-`ErrorKind::Interrupted` kind is\n+    /// This method will continuously call [`write`] until there is no more data\n+    /// to be written or an error of non-[`ErrorKind::Interrupted`] kind is\n     /// returned. This method will not return until the entire buffer has been\n     /// successfully written or such an error occurs. The first error that is\n-    /// not of `ErrorKind::Interrupted` kind generated from this method will be\n+    /// not of [`ErrorKind::Interrupted`] kind generated from this method will be\n     /// returned.\n     ///\n     /// # Errors\n     ///\n     /// This function will return the first error of\n-    /// non-`ErrorKind::Interrupted` kind that `write` returns.\n+    /// non-[`ErrorKind::Interrupted`] kind that [`write`] returns.\n+    ///\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    /// [`write`]: #tymethod.write\n     ///\n     /// # Examples\n     ///"}]}