{"sha": "d10fe26f39983c782f1a37a447f2c10c2ef561ba", "node_id": "C_kwDOAAsO6NoAKGQxMGZlMjZmMzk5ODNjNzgyZjFhMzdhNDQ3ZjJjMTBjMmVmNTYxYmE", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-10T10:37:57Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-10T03:08:22Z"}, "message": "Point at capture points for non-`'static` reference crossing a `yield` point\n\n```\nerror[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n  --> $DIR/issue-72312.rs:10:24\n   |\nLL |     pub async fn start(&self) {\n   |                        ^^^^^ this data with an anonymous lifetime `'_`...\n...\nLL |         require_static(async move {\n   |         -------------- ...is required to live as long as `'static` here...\nLL |             &self;\n   |             ----- ...and is captured here\n   |\nnote: `'static` lifetime requirement introduced by this trait bound\n  --> $DIR/issue-72312.rs:2:22\n   |\nLL | fn require_static<T: 'static>(val: T) -> T {\n   |                      ^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0759`.\n```\n\nFix #72312.", "tree": {"sha": "9cf5786605414d8b28f45f43321674c00f49804b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf5786605414d8b28f45f43321674c00f49804b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d10fe26f39983c782f1a37a447f2c10c2ef561ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d10fe26f39983c782f1a37a447f2c10c2ef561ba", "html_url": "https://github.com/rust-lang/rust/commit/d10fe26f39983c782f1a37a447f2c10c2ef561ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d10fe26f39983c782f1a37a447f2c10c2ef561ba/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "html_url": "https://github.com/rust-lang/rust/commit/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38"}], "stats": {"total": 235, "additions": 212, "deletions": 23}, "files": [{"sha": "881ebed602946183340e4f233db6960bb1d1f7c3", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -368,6 +368,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n                 error_region,\n                 cause.clone(),\n                 placeholder_region,\n+                vec![],\n             ),\n         ),\n         (Some(error_region), _) => NiceRegionError::new("}, {"sha": "c3f2213229a010bfcda0c02782e3657e3de24313", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -384,6 +384,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         sub_r,\n                         sup_origin,\n                         sup_r,\n+                        _,\n                     ) => {\n                         if sub_r.is_placeholder() {\n                             self.report_placeholder_failure(sub_origin, sub_r, sup_r).emit();\n@@ -464,7 +465,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         errors.sort_by_key(|u| match *u {\n             RegionResolutionError::ConcreteFailure(ref sro, _, _) => sro.span(),\n             RegionResolutionError::GenericBoundFailure(ref sro, _, _) => sro.span(),\n-            RegionResolutionError::SubSupConflict(_, ref rvo, _, _, _, _) => rvo.span(),\n+            RegionResolutionError::SubSupConflict(_, ref rvo, _, _, _, _, _) => rvo.span(),\n             RegionResolutionError::UpperBoundUniverseConflict(_, ref rvo, _, _, _) => rvo.span(),\n         });\n         errors"}, {"sha": "fd295b743420ca799acf2e12dc03e5ffb57ea79b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -67,7 +67,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n     pub fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {\n         match (&self.error, self.regions) {\n             (Some(ConcreteFailure(origin, sub, sup)), None) => Some((origin.span(), sub, sup)),\n-            (Some(SubSupConflict(_, _, origin, sub, _, sup)), None) => {\n+            (Some(SubSupConflict(_, _, origin, sub, _, sup, _)), None) => {\n                 Some((origin.span(), sub, sup))\n             }\n             (None, Some((span, sub, sup))) => Some((span, sub, sup)),"}, {"sha": "1a4a28038218941a4cf85351e5d62c95ff161dd6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -34,6 +34,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n@@ -49,6 +50,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 _,\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n@@ -64,6 +66,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 _,\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n@@ -79,6 +82,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 _,\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sup_placeholder @ ty::RePlaceholder(_),\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,"}, {"sha": "c7ba5087b8cbca6a7726195d94d9ba6a9b741454", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -23,16 +23,17 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     pub(super) fn try_report_static_impl_trait(&self) -> Option<ErrorReported> {\n         debug!(\"try_report_static_impl_trait(error={:?})\", self.error);\n         let tcx = self.tcx();\n-        let (var_origin, sub_origin, sub_r, sup_origin, sup_r) = match self.error.as_ref()? {\n+        let (var_origin, sub_origin, sub_r, sup_origin, sup_r, spans) = match self.error.as_ref()? {\n             RegionResolutionError::SubSupConflict(\n                 _,\n                 var_origin,\n                 sub_origin,\n                 sub_r,\n                 sup_origin,\n                 sup_r,\n+                spans,\n             ) if **sub_r == RegionKind::ReStatic => {\n-                (var_origin, sub_origin, sub_r, sup_origin, sup_r)\n+                (var_origin, sub_origin, sub_r, sup_origin, sup_r, spans)\n             }\n             RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(box TypeTrace { cause, .. }),\n@@ -123,15 +124,31 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             param_name,\n             lifetime,\n         );\n-        err.span_label(param.param_ty_span, &format!(\"this data with {}...\", lifetime));\n+\n+        let (mention_capture, capture_point) = if sup_origin.span().overlaps(param.param_ty_span) {\n+            // Account for `async fn` like in `async-await/issues/issue-62097.rs`.\n+            // The desugaring of `async `fn`s causes `sup_origin` and `param` to point at the same\n+            // place (but with different `ctxt`, hence `overlaps` instead of `==` above).\n+            //\n+            // This avoids the following:\n+            //\n+            // LL |     pub async fn run_dummy_fn(&self) {\n+            //    |                               ^^^^^\n+            //    |                               |\n+            //    |                               this data with an anonymous lifetime `'_`...\n+            //    |                               ...is captured here...\n+            (false, sup_origin.span())\n+        } else {\n+            (true, param.param_ty_span)\n+        };\n+        err.span_label(capture_point, &format!(\"this data with {}...\", lifetime));\n+\n         debug!(\"try_report_static_impl_trait: param_info={:?}\", param);\n \n         // We try to make the output have fewer overlapping spans if possible.\n         if (sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()))\n             && sup_origin.span() != return_sp\n         {\n-            // FIXME: account for `async fn` like in `async-await/issues/issue-62097.rs`\n-\n             // Customize the spans and labels depending on their relative order so\n             // that split sentences flow correctly.\n             if sup_origin.span().overlaps(return_sp) && sp == sup_origin.span() {\n@@ -152,29 +169,61 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 //    |           ----                               ^\n                 err.span_label(\n                     sup_origin.span(),\n-                    \"...is captured here, requiring it to live as long as `'static`\",\n+                    &format!(\n+                        \"...is captured here, requiring it to live as long as `'static`{}\",\n+                        if spans.is_empty() { \"\" } else { \"...\" },\n+                    ),\n                 );\n             } else {\n-                err.span_label(sup_origin.span(), \"...is captured here...\");\n-                if return_sp < sup_origin.span() {\n+                if return_sp < sup_origin.span() && mention_capture {\n+                    err.span_label(sup_origin.span(), \"...is captured here...\");\n                     err.span_note(\n                         return_sp,\n                         \"...and is required to live as long as `'static` here\",\n                     );\n                 } else {\n                     err.span_label(\n                         return_sp,\n-                        \"...and is required to live as long as `'static` here\",\n+                        &format!(\n+                            \"...is required to live as long as `'static` here{}\",\n+                            if spans.is_empty() { \"\" } else { \"...\" },\n+                        ),\n                     );\n+                    if mention_capture {\n+                        let span = sup_origin.span();\n+                        let msg = if spans.iter().any(|sp| *sp > span) {\n+                            \"...is captured here...\"\n+                        } else {\n+                            \"...and is captured here\"\n+                        };\n+                        err.span_label(span, msg);\n+                    }\n                 }\n             }\n         } else {\n             err.span_label(\n                 return_sp,\n-                \"...is captured and required to live as long as `'static` here\",\n+                &format!(\n+                    \"...is captured and required to live as long as `'static` here{}\",\n+                    if spans.is_empty() { \"\" } else { \"...\" },\n+                ),\n             );\n         }\n \n+        for span in spans {\n+            let msg =\n+                format!(\"...and is captured here{}\", if mention_capture { \" too\" } else { \"\" });\n+            if span.overlaps(return_sp) {\n+                err.span_note(*span, &msg);\n+            } else {\n+                err.span_label(*span, &msg);\n+            }\n+        }\n+\n+        if let SubregionOrigin::RelateParamBound(_, _, Some(bound)) = sub_origin {\n+            err.span_note(*bound, \"`'static` lifetime requirement introduced by this trait bound\");\n+        }\n+\n         let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);\n \n         let mut override_error_code = None;"}, {"sha": "452ca5eeabd493e35894bcedb6926e98701ef71f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -28,6 +28,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             _sub,\n             sup_origin,\n             _sup,\n+            _,\n         ) = error.clone()\n         {\n             if let (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) = (&sup_origin, &sub_origin) {"}, {"sha": "14f6c72bb1ce9672f42a0e68c5940a133ab83511", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n use rustc_middle::ty::{ReLateBound, RePlaceholder, ReVar};\n use rustc_middle::ty::{Region, RegionVid};\n+use rustc_span::Span;\n use std::fmt;\n \n /// This function performs lexical region resolution given a complete\n@@ -96,6 +97,7 @@ pub enum RegionResolutionError<'tcx> {\n         Region<'tcx>,\n         SubregionOrigin<'tcx>,\n         Region<'tcx>,\n+        Vec<Span>,\n     ),\n \n     /// Indicates a `'b: 'a` constraint where `'a` is in a universe that\n@@ -144,8 +146,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         let graph = self.construct_graph();\n         self.expand_givens(&graph);\n         self.expansion(&mut var_data);\n-        self.collect_errors(&mut var_data, errors);\n-        self.collect_var_errors(&var_data, &graph, errors);\n+        let captures = self.collect_errors(&mut var_data, errors);\n+        self.collect_var_errors(&var_data, &graph, errors, captures);\n         var_data\n     }\n \n@@ -443,9 +445,16 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         &self,\n         var_data: &mut LexicalRegionResolutions<'tcx>,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n-    ) {\n+    ) -> Vec<Span> {\n+        let mut captures = vec![];\n+\n         for (constraint, origin) in &self.data.constraints {\n             debug!(?constraint, ?origin);\n+            if let (Constraint::VarSubVar(_, _), SubregionOrigin::DataBorrowed(_, sp)) =\n+                (constraint, origin)\n+            {\n+                captures.push(*sp);\n+            }\n             match *constraint {\n                 Constraint::RegSubVar(..) | Constraint::VarSubVar(..) => {\n                     // Expansion will ensure that these constraints hold. Ignore.\n@@ -515,6 +524,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 sub,\n             ));\n         }\n+        captures\n     }\n \n     /// Go over the variables that were declared to be error variables\n@@ -524,6 +534,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         var_data: &LexicalRegionResolutions<'tcx>,\n         graph: &RegionGraph<'tcx>,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n+        captures: Vec<Span>,\n     ) {\n         debug!(\"collect_var_errors, var_data = {:#?}\", var_data.values);\n \n@@ -567,7 +578,13 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     // if this rule starts to create problems we'll\n                     // have to revisit this portion of the code and\n                     // think hard about it. =) -- nikomatsakis\n-                    self.collect_error_for_expanding_node(graph, &mut dup_vec, node_vid, errors);\n+                    self.collect_error_for_expanding_node(\n+                        graph,\n+                        &mut dup_vec,\n+                        node_vid,\n+                        errors,\n+                        &captures,\n+                    );\n                 }\n             }\n         }\n@@ -621,6 +638,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         dup_vec: &mut IndexVec<RegionVid, Option<RegionVid>>,\n         node_idx: RegionVid,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n+        captures: &[Span],\n     ) {\n         // Errors in expanding nodes result from a lower-bound that is\n         // not contained by an upper-bound.\n@@ -667,13 +685,19 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                          sup: {:?}\",\n                         origin, node_idx, lower_bound.region, upper_bound.region\n                     );\n+\n+                    let mut capture_spans: Vec<Span> = captures.iter().cloned().collect();\n+                    // Below, one span expects `&Span` and the other `&mut Span`, hence the dupes.\n+                    capture_spans.sort_by_key(|span| (span.lo(), span.hi()));\n+                    capture_spans.dedup_by_key(|span| (span.lo(), span.hi()));\n                     errors.push(RegionResolutionError::SubSupConflict(\n                         node_idx,\n                         origin,\n                         lower_bound.origin.clone(),\n                         lower_bound.region,\n                         upper_bound.origin.clone(),\n                         upper_bound.region,\n+                        capture_spans,\n                     ));\n                     return;\n                 }"}, {"sha": "bb329a4a0c2646c97b3399e6bd7e0d5e29621189", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -2,12 +2,20 @@ error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'\n   --> $DIR/issue-62097.rs:12:31\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ^^^^^\n-   |                               |\n-   |                               this data with an anonymous lifetime `'_`...\n-   |                               ...is captured here...\n+   |                               ^^^^^ this data with an anonymous lifetime `'_`...\n LL |         foo(|| self.bar()).await;\n-   |         --- ...and is required to live as long as `'static` here\n+   |         --- ...is required to live as long as `'static` here...\n+   |\n+note: ...and is captured here\n+  --> $DIR/issue-62097.rs:13:9\n+   |\n+LL |         foo(|| self.bar()).await;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `'static` lifetime requirement introduced by this trait bound\n+  --> $DIR/issue-62097.rs:4:19\n+   |\n+LL |     F: FnOnce() + 'static\n+   |                   ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d33685e02f188dbe3e240223336198782c622b69", "filename": "src/test/ui/async-await/issues/issue-72312.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+fn require_static<T: 'static>(val: T) -> T {\n+    //~^ NOTE 'static` lifetime requirement introduced by this trait bound\n+    val\n+}\n+\n+struct Problem;\n+\n+impl Problem {\n+    pub async fn start(&self) { //~ ERROR E0759\n+        //~^ NOTE this data with an anonymous lifetime `'_`\n+        //~| NOTE in this expansion of desugaring of `async` block or function\n+        require_static(async move { //~ NOTE ...is required to live as long as `'static` here\n+            &self; //~ NOTE ...and is captured here\n+        });\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ee5ee6f0f93c3045ff3c3977ad68ca041d716ce6", "filename": "src/test/ui/async-await/issues/issue-72312.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -0,0 +1,20 @@\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/issue-72312.rs:10:24\n+   |\n+LL |     pub async fn start(&self) {\n+   |                        ^^^^^ this data with an anonymous lifetime `'_`...\n+...\n+LL |         require_static(async move {\n+   |         -------------- ...is required to live as long as `'static` here...\n+LL |             &self;\n+   |             ----- ...and is captured here\n+   |\n+note: `'static` lifetime requirement introduced by this trait bound\n+  --> $DIR/issue-72312.rs:2:22\n+   |\n+LL | fn require_static<T: 'static>(val: T) -> T {\n+   |                      ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "95698fd1e1a801c63c8abf56fd732be0cacf4002", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -29,4 +29,22 @@ fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     y.get_b() // ERROR\n }\n \n+fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    <_ as Bar>::get_b(x) // ERROR\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+}\n+\n+fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+}\n+\n+fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    let y = x as &dyn Bar<'_, '_>;\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+    y.get_b(); // ERROR\n+    let z = y;\n+    z.get_b() // ERROR\n+}\n+\n fn main() {}"}, {"sha": "04560ea4e297aca3c7ece6ae8346ddd8bc7c4b4d", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d10fe26f39983c782f1a37a447f2c10c2ef561ba/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=d10fe26f39983c782f1a37a447f2c10c2ef561ba", "patch": "@@ -39,9 +39,53 @@ LL |     let y = x as &dyn Bar<'_, '_>;\n    |             ...is captured here...\n LL |\n LL |     y.get_b() // ERROR\n-   |     --------- ...and is required to live as long as `'static` here\n+   |     --------- ...is required to live as long as `'static` here...\n+   |\n+note: ...and is captured here too\n+  --> $DIR/type-checking-test-4.rs:29:5\n+   |\n+LL |     y.get_b() // ERROR\n+   |     ^\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:33:5\n+   |\n+LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     <_ as Bar>::get_b(x) // ERROR\n+   |     ^^^^^^^^^^^^^^^^^ ...is captured here, requiring it to live as long as `'static`\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:38:15\n+   |\n+LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+   |     ----------^^---------------- ...is captured and required to live as long as `'static` here\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:43:27\n+   |\n+LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     let y = x as &dyn Bar<'_, '_>;\n+   |             -             ^^\n+   |             |\n+   |             ...is captured here...\n+LL |\n+LL |     y.get_b(); // ERROR\n+   |     - ...and is captured here too\n+LL |     let z = y;\n+LL |     z.get_b() // ERROR\n+   |     --------- ...is required to live as long as `'static` here...\n+   |\n+note: ...and is captured here too\n+  --> $DIR/type-checking-test-4.rs:47:5\n+   |\n+LL |     z.get_b() // ERROR\n+   |     ^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0308, E0759.\n For more information about an error, try `rustc --explain E0308`."}]}