{"sha": "7531a08eed84a86e96d1cffdd002654507819873", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MzFhMDhlZWQ4NGE4NmU5NmQxY2ZmZGQwMDI2NTQ1MDc4MTk4NzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-07T13:23:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-07T13:23:32Z"}, "message": "Auto merge of #4788 - Manishearth:rustup, r=flip1995\n\nRustup to rustc 1.40.0-nightly (50f8aadd 2019-11-07)\n\nchangelog: Deprecate [`into_iter_on_array`] lint\n\nr? @phansch @oli-obk", "tree": {"sha": "a8cc1c95a1b4116125a0ceeda2d517276df1f9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8cc1c95a1b4116125a0ceeda2d517276df1f9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7531a08eed84a86e96d1cffdd002654507819873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7531a08eed84a86e96d1cffdd002654507819873", "html_url": "https://github.com/rust-lang/rust/commit/7531a08eed84a86e96d1cffdd002654507819873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7531a08eed84a86e96d1cffdd002654507819873/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a3796379e59a09d7de7b8e441f4a166737e568", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a3796379e59a09d7de7b8e441f4a166737e568", "html_url": "https://github.com/rust-lang/rust/commit/43a3796379e59a09d7de7b8e441f4a166737e568"}, {"sha": "08fd397c2c8db452692dc71ce7b4d3c47417ff09", "url": "https://api.github.com/repos/rust-lang/rust/commits/08fd397c2c8db452692dc71ce7b4d3c47417ff09", "html_url": "https://github.com/rust-lang/rust/commit/08fd397c2c8db452692dc71ce7b4d3c47417ff09"}], "stats": {"total": 290, "additions": 124, "deletions": 166}, "files": [{"sha": "41b8b4199ec5d3203997092d991919072572244a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 332 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 331 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "fac75cffeba6facee676ca726443594f747f0d81", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use std::f64::consts as f64;\n-use syntax::ast::{FloatTy, LitKind};\n+use syntax::ast::{FloatTy, LitFloatType, LitKind};\n use syntax::symbol;\n \n declare_clippy_lint! {\n@@ -62,9 +62,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ApproxConstant {\n \n fn check_lit(cx: &LateContext<'_, '_>, lit: &LitKind, e: &Expr) {\n     match *lit {\n-        LitKind::Float(s, FloatTy::F32) => check_known_consts(cx, e, s, \"f32\"),\n-        LitKind::Float(s, FloatTy::F64) => check_known_consts(cx, e, s, \"f64\"),\n-        LitKind::FloatUnsuffixed(s) => check_known_consts(cx, e, s, \"f{32, 64}\"),\n+        LitKind::Float(s, LitFloatType::Suffixed(fty)) => match fty {\n+            FloatTy::F32 => check_known_consts(cx, e, s, \"f32\"),\n+            FloatTy::F64 => check_known_consts(cx, e, s, \"f64\"),\n+        },\n+        LitKind::Float(s, LitFloatType::Unsuffixed) => check_known_consts(cx, e, s, \"f{32, 64}\"),\n         _ => (),\n     }\n }"}, {"sha": "06df8504def993703ac3bd76a20d37c9f943400a", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -15,7 +15,7 @@ use rustc::ty;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use semver::Version;\n-use syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n+use syntax::ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use syntax::source_map::Span;\n use syntax_pos::symbol::Symbol;\n \n@@ -417,11 +417,14 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n     }\n \n     for attr in attrs {\n-        if attr.is_sugared_doc {\n-            return;\n-        }\n+        let attr_item = if let AttrKind::Normal(ref attr) = attr.kind {\n+            attr\n+        } else {\n+            continue;\n+        };\n+\n         if attr.style == AttrStyle::Outer {\n-            if attr.tokens.is_empty() || !is_present_in_source(cx, attr.span) {\n+            if attr_item.tokens.is_empty() || !is_present_in_source(cx, attr.span) {\n                 return;\n             }\n "}, {"sha": "fc5c8b2e379de9b04b050651a2e4b0fc3507f34e", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -161,9 +161,11 @@ pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n         LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n-        LitKind::Float(ref is, FloatTy::F32) => Constant::F32(is.as_str().parse().unwrap()),\n-        LitKind::Float(ref is, FloatTy::F64) => Constant::F64(is.as_str().parse().unwrap()),\n-        LitKind::FloatUnsuffixed(ref is) => match ty.expect(\"type of float is known\").kind {\n+        LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {\n+            FloatTy::F32 => Constant::F32(is.as_str().parse().unwrap()),\n+            FloatTy::F64 => Constant::F64(is.as_str().parse().unwrap()),\n+        },\n+        LitKind::Float(ref is, LitFloatType::Unsuffixed) => match ty.expect(\"type of float is known\").kind {\n             ty::Float(FloatTy::F32) => Constant::F32(is.as_str().parse().unwrap()),\n             ty::Float(FloatTy::F64) => Constant::F64(is.as_str().parse().unwrap()),\n             _ => bug!(),"}, {"sha": "2ac5dca8c2ee23ae2c5e7fd458668f4d3d5d7951", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -130,3 +130,12 @@ declare_deprecated_lint! {\n     pub UNUSED_COLLECT,\n     \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been uplifted to rustc and is now called\n+    /// `array_into_iter`.\n+    pub INTO_ITER_ON_ARRAY,\n+    \"this lint has been uplifted to rustc and is now called `array_into_iter`\"\n+}"}, {"sha": "aca4d176724ff793156e6e73d4392d05a800498c", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -6,7 +6,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashSet;\n use std::ops::Range;\n-use syntax::ast::Attribute;\n+use syntax::ast::{AttrKind, Attribute};\n use syntax::source_map::{BytePos, Span};\n use syntax_pos::Pos;\n use url::Url;\n@@ -247,13 +247,11 @@ pub fn check_attrs<'a>(cx: &LateContext<'_, '_>, valid_idents: &FxHashSet<String\n     let mut spans = vec![];\n \n     for attr in attrs {\n-        if attr.is_sugared_doc {\n-            if let Some(ref current) = attr.value_str() {\n-                let current = current.to_string();\n-                let (current, current_spans) = strip_doc_comment_decoration(&current, attr.span);\n-                spans.extend_from_slice(&current_spans);\n-                doc.push_str(&current);\n-            }\n+        if let AttrKind::DocComment(ref comment) = attr.kind {\n+            let comment = comment.to_string();\n+            let (comment, current_spans) = strip_doc_comment_decoration(&comment, attr.span);\n+            spans.extend_from_slice(&current_spans);\n+            doc.push_str(&comment);\n         } else if attr.check_name(sym!(doc)) {\n             // ignore mix of sugared and non-sugared doc\n             return true; // don't trigger the safety check"}, {"sha": "8027a736c6b45ac9562dcb487986856c4886ac8c", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n             let ty = cx.tables.expr_ty(expr);\n             if let ty::Float(fty) = ty.kind;\n             if let hir::ExprKind::Lit(ref lit) = expr.kind;\n-            if let LitKind::Float(sym, _) | LitKind::FloatUnsuffixed(sym) = lit.node;\n+            if let LitKind::Float(sym, _) = lit.node;\n             if let Some(sugg) = Self::check(sym, fty);\n             then {\n                 span_lint_and_sugg("}, {"sha": "1bd117dae943951f7d4d6b254f81352168ff9236", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -430,6 +430,10 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         \"clippy::unused_collect\",\n         \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\",\n     );\n+    store.register_removed(\n+        \"clippy::into_iter_on_array\",\n+        \"this lint has been uplifted to rustc and is now called `array_into_iter`\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -584,7 +588,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &methods::FLAT_MAP_IDENTITY,\n         &methods::GET_UNWRAP,\n         &methods::INEFFICIENT_TO_STRING,\n-        &methods::INTO_ITER_ON_ARRAY,\n         &methods::INTO_ITER_ON_REF,\n         &methods::ITER_CLONED_COLLECT,\n         &methods::ITER_NTH,\n@@ -1142,7 +1145,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n-        LintId::of(&methods::INTO_ITER_ON_ARRAY),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n         LintId::of(&methods::ITER_NTH),\n@@ -1481,7 +1483,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(&methods::CLONE_DOUBLE_REF),\n-        LintId::of(&methods::INTO_ITER_ON_ARRAY),\n         LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n         LintId::of(&minmax::MIN_MAX),"}, {"sha": "c526858a7a2dfcee7f28cf983ad7b212a3703b69", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -373,7 +373,7 @@ impl LiteralDigitGrouping {\n                     }\n                 }\n             },\n-            LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => {\n+            LitKind::Float(..) => {\n                 // Lint floating-point literals.\n                 if_chain! {\n                     if let Some(src) = snippet_opt(cx, lit.span);"}, {"sha": "5e51b6b75d839019bd383af3b4f573ff938aef11", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::{Crate, Expr, ExprKind, QPath};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n+use syntax::ast::AttrKind;\n use syntax::symbol::sym;\n \n use crate::utils::{is_entrypoint_fn, snippet, span_help_and_lint};\n@@ -34,7 +35,13 @@ impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n impl LateLintPass<'_, '_> for MainRecursion {\n     fn check_crate(&mut self, _: &LateContext<'_, '_>, krate: &Crate) {\n-        self.has_no_std_attr = krate.attrs.iter().any(|attr| attr.path == sym::no_std);\n+        self.has_no_std_attr = krate.attrs.iter().any(|attr| {\n+            if let AttrKind::Normal(ref attr) = attr.kind {\n+                attr.path == sym::no_std\n+            } else {\n+                false\n+            }\n+        });\n     }\n \n     fn check_expr_post(&mut self, cx: &LateContext<'_, '_>, expr: &Expr) {"}, {"sha": "c71324ea4725433ae529aa5d42c23bb73c07c707", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -968,34 +968,6 @@ declare_clippy_lint! {\n     \"using `filter_map` when a more succinct alternative exists\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `into_iter` calls on types which should be replaced by `iter` or\n-    /// `iter_mut`.\n-    ///\n-    /// **Why is this bad?** Arrays and `PathBuf` do not yet have an `into_iter` method which move out\n-    /// their content into an iterator. Auto-referencing resolves the `into_iter` call to its reference\n-    /// instead, like `<&[T; N] as IntoIterator>::into_iter`, which just iterates over item references\n-    /// like calling `iter` would. Furthermore, when the standard library actually\n-    /// [implements the `into_iter` method](https://github.com/rust-lang/rust/issues/25725) which moves\n-    /// the content out of the array, the original use of `into_iter` got inferred with the wrong type\n-    /// and the code will be broken.\n-    ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    ///\n-    /// ```rust\n-    /// let _ = [1, 2, 3].into_iter().map(|x| *x).collect::<Vec<u32>>();\n-    /// ```\n-    /// Could be written as:\n-    /// ```rust\n-    /// let _ = [1, 2, 3].iter().map(|x| *x).collect::<Vec<u32>>();\n-    /// ```\n-    pub INTO_ITER_ON_ARRAY,\n-    correctness,\n-    \"using `.into_iter()` on an array\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `into_iter` calls on references which should be replaced by `iter`\n     /// or `iter_mut`.\n@@ -1133,7 +1105,6 @@ declare_lint_pass!(Methods => [\n     USELESS_ASREF,\n     UNNECESSARY_FOLD,\n     UNNECESSARY_FILTER_MAP,\n-    INTO_ITER_ON_ARRAY,\n     INTO_ITER_ON_REF,\n     SUSPICIOUS_MAP,\n     UNINIT_ASSUMED_INIT,\n@@ -2786,16 +2757,8 @@ fn lint_asref(cx: &LateContext<'_, '_>, expr: &hir::Expr, call_name: &str, as_re\n     }\n }\n \n-fn ty_has_iter_method(\n-    cx: &LateContext<'_, '_>,\n-    self_ref_ty: Ty<'_>,\n-) -> Option<(&'static Lint, &'static str, &'static str)> {\n+fn ty_has_iter_method(cx: &LateContext<'_, '_>, self_ref_ty: Ty<'_>) -> Option<(&'static str, &'static str)> {\n     has_iter_method(cx, self_ref_ty).map(|ty_name| {\n-        let lint = if ty_name == \"array\" || ty_name == \"PathBuf\" {\n-            INTO_ITER_ON_ARRAY\n-        } else {\n-            INTO_ITER_ON_REF\n-        };\n         let mutbl = match self_ref_ty.kind {\n             ty::Ref(_, _, mutbl) => mutbl,\n             _ => unreachable!(),\n@@ -2804,18 +2767,18 @@ fn ty_has_iter_method(\n             hir::MutImmutable => \"iter\",\n             hir::MutMutable => \"iter_mut\",\n         };\n-        (lint, ty_name, method_name)\n+        (ty_name, method_name)\n     })\n }\n \n fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr, self_ref_ty: Ty<'_>, method_span: Span) {\n     if !match_trait_method(cx, expr, &paths::INTO_ITERATOR) {\n         return;\n     }\n-    if let Some((lint, kind, method_name)) = ty_has_iter_method(cx, self_ref_ty) {\n+    if let Some((kind, method_name)) = ty_has_iter_method(cx, self_ref_ty) {\n         span_lint_and_sugg(\n             cx,\n-            lint,\n+            INTO_ITER_ON_REF,\n             method_span,\n             &format!(\n                 \"this .into_iter() call is equivalent to .{}() and will not move the {}\","}, {"sha": "d756980b354d08dabc82183d4cefa20229b578e0", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -482,8 +482,8 @@ impl MiscEarlyLints {\n \n         if let LitKind::Int(value, lit_int_type) = lit.kind {\n             let suffix = match lit_int_type {\n-                LitIntType::Signed(ty) => ty.ty_to_string(),\n-                LitIntType::Unsigned(ty) => ty.ty_to_string(),\n+                LitIntType::Signed(ty) => ty.name_str(),\n+                LitIntType::Unsigned(ty) => ty.name_str(),\n                 LitIntType::Unsuffixed => \"\",\n             };\n \n@@ -543,8 +543,8 @@ impl MiscEarlyLints {\n                     },\n                 );\n             }\n-        } else if let LitKind::Float(_, float_ty) = lit.kind {\n-            let suffix = float_ty.ty_to_string();\n+        } else if let LitKind::Float(_, LitFloatType::Suffixed(float_ty)) = lit.kind {\n+            let suffix = float_ty.name_str();\n             let maybe_last_sep_idx = lit_snip.len() - suffix.len() - 1;\n             if lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n                 span_lint_and_sugg("}, {"sha": "a0bcba17d5565fde0c037c4dcb80694478fb9511", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -90,7 +90,7 @@ impl EarlyLintPass for Precedence {\n                 if let Some(slf) = args.first() {\n                     if let ExprKind::Lit(ref lit) = slf.kind {\n                         match lit.kind {\n-                            LitKind::Int(..) | LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => {\n+                            LitKind::Int(..) | LitKind::Float(..) => {\n                                 let mut applicability = Applicability::MachineApplicable;\n                                 span_lint_and_sugg(\n                                     cx,"}, {"sha": "788d02ecb0aa76bf46d3c25fc1481fdcc8984372", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             |db| {\n                                 let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                 let arg = if let ty::Int(_) = from_ty.kind {\n-                                    arg.as_ty(ast::UintTy::U32)\n+                                    arg.as_ty(ast::UintTy::U32.name_str())\n                                 } else {\n                                     arg\n                                 };"}, {"sha": "62da724ffd9e26e2f73655fd8f00b75526762a11", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -15,7 +15,7 @@ use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n-use syntax::ast::{FloatTy, IntTy, LitIntType, LitKind, UintTy};\n+use syntax::ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use syntax::errors::DiagnosticBuilder;\n use syntax::source_map::Span;\n use syntax::symbol::{sym, Symbol};\n@@ -1186,7 +1186,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n                     }\n                 }\n                 match lit.node {\n-                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::FloatUnsuffixed(_) => {},\n+                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => {},\n                     _ => {\n                         if cast_from.kind == cast_to.kind && !in_external_macro(cx.sess(), expr.span) {\n                             span_lint("}, {"sha": "19dbae2eabd97da29e4e6ddfe1ef90383f41325c", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -57,6 +57,11 @@ pub fn get_attr<'a>(\n     name: &'static str,\n ) -> impl Iterator<Item = &'a ast::Attribute> {\n     attrs.iter().filter(move |attr| {\n+        let attr = if let ast::AttrKind::Normal(ref attr) = attr.kind {\n+            attr\n+        } else {\n+            return false;\n+        };\n         let attr_segments = &attr.path.segments;\n         if attr_segments.len() == 2 && attr_segments[0].ident.to_string() == \"clippy\" {\n             if let Some(deprecation_status) ="}, {"sha": "f3fc0487b265489dd5410f8890fd655c0ebf400d", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -9,7 +9,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::session::Session;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashMap;\n-use syntax::ast::{Attribute, LitKind};\n+use syntax::ast::{Attribute, LitFloatType, LitKind};\n \n declare_clippy_lint! {\n     /// **What it does:** Generates clippy code that detects the offending pattern\n@@ -288,10 +288,14 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     LitKind::Byte(b) => println!(\"    if let LitKind::Byte({}) = {}.node;\", b, lit_pat),\n                     // FIXME: also check int type\n                     LitKind::Int(i, _) => println!(\"    if let LitKind::Int({}, _) = {}.node;\", i, lit_pat),\n-                    LitKind::Float(..) => println!(\"    if let LitKind::Float(..) = {}.node;\", lit_pat),\n-                    LitKind::FloatUnsuffixed(_) => {\n-                        println!(\"    if let LitKind::FloatUnsuffixed(_) = {}.node;\", lit_pat)\n-                    },\n+                    LitKind::Float(_, LitFloatType::Suffixed(_)) => println!(\n+                        \"    if let LitKind::Float(_, LitFloatType::Suffixed(_)) = {}.node;\",\n+                        lit_pat\n+                    ),\n+                    LitKind::Float(_, LitFloatType::Unsuffixed) => println!(\n+                        \"    if let LitKind::Float(_, LitFloatType::Unsuffixed) = {}.node;\",\n+                        lit_pat\n+                    ),\n                     LitKind::ByteStr(ref vec) => {\n                         let vec_pat = self.next(\"vec\");\n                         println!(\"    if let LitKind::ByteStr(ref {}) = {}.node;\", vec_pat, lit_pat);"}, {"sha": "35cbeae39889334bea2a760bc426f8330c6ad505", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 332] = [\n+pub const ALL_LINTS: [Lint; 331] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -812,13 +812,6 @@ pub const ALL_LINTS: [Lint; 332] = [\n         deprecation: None,\n         module: \"integer_division\",\n     },\n-    Lint {\n-        name: \"into_iter_on_array\",\n-        group: \"correctness\",\n-        desc: \"using `.into_iter()` on an array\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"into_iter_on_ref\",\n         group: \"style\","}, {"sha": "91d43758ab0a9d74ed2fafc68d71d08b40972f28", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -5,5 +5,6 @@\n #[warn(clippy::misaligned_transmute)]\n #[warn(clippy::unused_collect)]\n #[warn(clippy::invalid_ref)]\n+#[warn(clippy::into_iter_on_array)]\n \n fn main() {}"}, {"sha": "d353b26e5376dcee02c4790b5664182964c4f69f", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -42,11 +42,17 @@ error: lint `clippy::invalid_ref` has been removed: `superseded by rustc lint `i\n LL | #[warn(clippy::invalid_ref)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::into_iter_on_array` has been removed: `this lint has been uplifted to rustc and is now called `array_into_iter``\n+  --> $DIR/deprecated.rs:8:8\n+   |\n+LL | #[warn(clippy::into_iter_on_array)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "ec5ff1aeeef48950a0d5680061db67cf7443f35c", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -31,7 +31,7 @@ impl Unrelated {\n     clippy::cognitive_complexity,\n     clippy::similar_names\n )]\n-#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n@@ -102,9 +102,6 @@ fn main() {\n     let out_vec = vec![1, 2, 3];\n     for _v in out_vec {}\n \n-    let array = [1, 2, 3];\n-    for _v in &array {}\n-\n     for _v in &vec {} // these are fine\n     for _v in &mut vec {} // these are fine\n "}, {"sha": "2f42ea3ca417e280f9b3ec2b8e73e6093035e899", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -31,7 +31,7 @@ impl Unrelated {\n     clippy::cognitive_complexity,\n     clippy::similar_names\n )]\n-#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n@@ -102,9 +102,6 @@ fn main() {\n     let out_vec = vec![1, 2, 3];\n     for _v in out_vec.into_iter() {}\n \n-    let array = [1, 2, 3];\n-    for _v in array.into_iter() {}\n-\n     for _v in &vec {} // these are fine\n     for _v in &mut vec {} // these are fine\n "}, {"sha": "485ba1ee7b3aacdc7b3e76c5955b9ca4bd1130fc", "filename": "tests/ui/for_loop_fixable.stderr", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -77,64 +77,58 @@ LL |     for _v in out_vec.into_iter() {}\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:106:15\n-   |\n-LL |     for _v in array.into_iter() {}\n-   |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n-\n-error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:111:15\n+  --> $DIR/for_loop_fixable.rs:108:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:115:15\n+  --> $DIR/for_loop_fixable.rs:112:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:120:15\n+  --> $DIR/for_loop_fixable.rs:117:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:123:15\n+  --> $DIR/for_loop_fixable.rs:120:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:126:15\n+  --> $DIR/for_loop_fixable.rs:123:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:129:15\n+  --> $DIR/for_loop_fixable.rs:126:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:132:15\n+  --> $DIR/for_loop_fixable.rs:129:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:135:15\n+  --> $DIR/for_loop_fixable.rs:132:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:138:15\n+  --> $DIR/for_loop_fixable.rs:135:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "20a93a222829953bdbc7f8e2f69c66aa37b36cf6", "filename": "tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -17,7 +17,7 @@\n     unused,\n     dead_code\n )]\n-#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     for i in 5..5 {\n         println!(\"{}\", i);"}, {"sha": "c30d23de3f86921a891dbce97af00cea427cb71d", "filename": "tests/ui/into_iter_on_ref.fixed", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Finto_iter_on_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Finto_iter_on_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.fixed?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n #![allow(clippy::useless_vec)]\n #![warn(clippy::into_iter_on_ref)]\n-#![deny(clippy::into_iter_on_array)]\n \n struct X;\n use std::collections::*;\n@@ -10,9 +9,7 @@ fn main() {\n     for _ in &[1, 2, 3] {}\n     for _ in vec![X, X] {}\n     for _ in &vec![X, X] {}\n-    for _ in [1, 2, 3].iter() {} //~ ERROR equivalent to .iter()\n \n-    let _ = [1, 2, 3].iter(); //~ ERROR equivalent to .iter()\n     let _ = vec![1, 2, 3].into_iter();\n     let _ = (&vec![1, 2, 3]).iter(); //~ WARN equivalent to .iter()\n     let _ = vec![1, 2, 3].into_boxed_slice().iter(); //~ WARN equivalent to .iter()"}, {"sha": "94bc1689619a297b84116d0efebcc14c7e74f5e1", "filename": "tests/ui/into_iter_on_ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.rs?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n #![allow(clippy::useless_vec)]\n #![warn(clippy::into_iter_on_ref)]\n-#![deny(clippy::into_iter_on_array)]\n \n struct X;\n use std::collections::*;\n@@ -10,9 +9,7 @@ fn main() {\n     for _ in &[1, 2, 3] {}\n     for _ in vec![X, X] {}\n     for _ in &vec![X, X] {}\n-    for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n \n-    let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n     let _ = vec![1, 2, 3].into_iter();\n     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()"}, {"sha": "a5be50f64052712254ac02bcb2cb5187d6c4eb21", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 27, "deletions": 45, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7531a08eed84a86e96d1cffdd002654507819873/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=7531a08eed84a86e96d1cffdd002654507819873", "patch": "@@ -1,178 +1,160 @@\n-error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:13:24\n-   |\n-LL |     for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n-   |                        ^^^^^^^^^ help: call directly: `iter`\n-   |\n-note: lint level defined here\n-  --> $DIR/into_iter_on_ref.rs:4:9\n-   |\n-LL | #![deny(clippy::into_iter_on_array)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:15:23\n-   |\n-LL |     let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n-   |                       ^^^^^^^^^ help: call directly: `iter`\n-\n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:17:30\n+  --> $DIR/into_iter_on_ref.rs:14:30\n    |\n LL |     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n    |                              ^^^^^^^^^ help: call directly: `iter`\n    |\n    = note: `-D clippy::into-iter-on-ref` implied by `-D warnings`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:18:46\n+  --> $DIR/into_iter_on_ref.rs:15:46\n    |\n LL |     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()\n    |                                              ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:19:41\n+  --> $DIR/into_iter_on_ref.rs:16:41\n    |\n LL |     let _ = std::rc::Rc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:20:44\n+  --> $DIR/into_iter_on_ref.rs:17:44\n    |\n LL |     let _ = std::sync::Arc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:22:32\n+  --> $DIR/into_iter_on_ref.rs:19:32\n    |\n LL |     let _ = (&&&&&&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:23:36\n+  --> $DIR/into_iter_on_ref.rs:20:36\n    |\n LL |     let _ = (&&&&mut &&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                    ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:24:40\n+  --> $DIR/into_iter_on_ref.rs:21:40\n    |\n LL |     let _ = (&mut &mut &mut [1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter_mut()\n    |                                        ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:26:24\n+  --> $DIR/into_iter_on_ref.rs:23:24\n    |\n LL |     let _ = (&Some(4)).into_iter(); //~ WARN equivalent to .iter()\n    |                        ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:27:28\n+  --> $DIR/into_iter_on_ref.rs:24:28\n    |\n LL |     let _ = (&mut Some(5)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                            ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:28:32\n+  --> $DIR/into_iter_on_ref.rs:25:32\n    |\n LL |     let _ = (&Ok::<_, i32>(6)).into_iter(); //~ WARN equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:29:37\n+  --> $DIR/into_iter_on_ref.rs:26:37\n    |\n LL |     let _ = (&mut Err::<i32, _>(7)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                     ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:30:34\n+  --> $DIR/into_iter_on_ref.rs:27:34\n    |\n LL |     let _ = (&Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                  ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:31:38\n+  --> $DIR/into_iter_on_ref.rs:28:38\n    |\n LL |     let _ = (&mut Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                      ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:32:44\n+  --> $DIR/into_iter_on_ref.rs:29:44\n    |\n LL |     let _ = (&BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:33:48\n+  --> $DIR/into_iter_on_ref.rs:30:48\n    |\n LL |     let _ = (&mut BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                                ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:34:39\n+  --> $DIR/into_iter_on_ref.rs:31:39\n    |\n LL |     let _ = (&VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:35:43\n+  --> $DIR/into_iter_on_ref.rs:32:43\n    |\n LL |     let _ = (&mut VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                           ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:36:41\n+  --> $DIR/into_iter_on_ref.rs:33:41\n    |\n LL |     let _ = (&LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:37:45\n+  --> $DIR/into_iter_on_ref.rs:34:45\n    |\n LL |     let _ = (&mut LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                             ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:38:43\n+  --> $DIR/into_iter_on_ref.rs:35:43\n    |\n LL |     let _ = (&HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:39:47\n+  --> $DIR/into_iter_on_ref.rs:36:47\n    |\n LL |     let _ = (&mut HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                               ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeSet\n-  --> $DIR/into_iter_on_ref.rs:41:39\n+  --> $DIR/into_iter_on_ref.rs:38:39\n    |\n LL |     let _ = (&BTreeSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BinaryHeap\n-  --> $DIR/into_iter_on_ref.rs:42:41\n+  --> $DIR/into_iter_on_ref.rs:39:41\n    |\n LL |     let _ = (&BinaryHeap::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashSet\n-  --> $DIR/into_iter_on_ref.rs:43:38\n+  --> $DIR/into_iter_on_ref.rs:40:38\n    |\n LL |     let _ = (&HashSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                      ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Path\n-  --> $DIR/into_iter_on_ref.rs:44:43\n+  --> $DIR/into_iter_on_ref.rs:41:43\n    |\n LL |     let _ = std::path::Path::new(\"12/34\").into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the PathBuf\n-  --> $DIR/into_iter_on_ref.rs:45:47\n+  --> $DIR/into_iter_on_ref.rs:42:47\n    |\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n    |                                               ^^^^^^^^^ help: call directly: `iter`\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 26 previous errors\n "}]}