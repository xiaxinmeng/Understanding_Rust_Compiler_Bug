{"sha": "49ee49296b65f3d807142f3326bee71dd7e13290", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZWU0OTI5NmI2NWYzZDgwNzE0MmYzMzI2YmVlNzFkZDdlMTMyOTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-11T06:46:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-12T04:44:07Z"}, "message": "Move std::rt::io to std::io", "tree": {"sha": "b3380df09c8a10473820969a62f5775832255fda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3380df09c8a10473820969a62f5775832255fda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ee49296b65f3d807142f3326bee71dd7e13290", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ee49296b65f3d807142f3326bee71dd7e13290", "html_url": "https://github.com/rust-lang/rust/commit/49ee49296b65f3d807142f3326bee71dd7e13290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ee49296b65f3d807142f3326bee71dd7e13290/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b4683d79d4b74f53808470cd2f98b23a0af9b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4683d79d4b74f53808470cd2f98b23a0af9b93", "html_url": "https://github.com/rust-lang/rust/commit/8b4683d79d4b74f53808470cd2f98b23a0af9b93"}], "stats": {"total": 679, "additions": 345, "deletions": 334}, "files": [{"sha": "5f805b39f238bed8c725cd8590c7d9dbfcbcc5e7", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -2839,12 +2839,12 @@ you just have to import it with an `use` statement.\n For example, it re-exports `println` which is defined in `std::io::println`:\n \n ~~~\n-use puts = std::rt::io::stdio::println;\n+use puts = std::io::stdio::println;\n \n fn main() {\n     println(\"println is imported per default.\");\n     puts(\"Doesn't hinder you from importing it under an different name yourself.\");\n-    ::std::rt::io::stdio::println(\"Or from not using the automatic import.\");\n+    ::std::io::stdio::println(\"Or from not using the automatic import.\");\n }\n ~~~\n "}, {"sha": "15bddfc80221c8379fc587fa75a40f27149fddc1", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -17,7 +17,7 @@ extern mod extra;\n \n use std::os;\n use std::rt;\n-use std::rt::io::fs;\n+use std::io::fs;\n \n use extra::getopts;\n use extra::getopts::groups::{optopt, optflag, reqopt};"}, {"sha": "6be92b12535f5b34b967fcb3ecf1e075a793460f", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::rt::io::buffered::BufferedReader;\n-use std::rt::io::File;\n+use std::io::buffered::BufferedReader;\n+use std::io::File;\n \n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n "}, {"sha": "c63436a2c55bd8ee358b79027e4647e1bfb38e5e", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -103,8 +103,8 @@ pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n }\n \n fn iter_header(testfile: &Path, it: &fn(&str) -> bool) -> bool {\n-    use std::rt::io::buffered::BufferedReader;\n-    use std::rt::io::File;\n+    use std::io::buffered::BufferedReader;\n+    use std::io::File;\n \n     let mut rdr = BufferedReader::new(File::open(testfile).unwrap());\n     loop {"}, {"sha": "e107c53018def877537133aa788db673c66ca74b", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -11,7 +11,7 @@\n use std::os;\n use std::run;\n use std::str;\n-use std::rt::io::process::ProcessExit;\n+use std::io::process::ProcessExit;\n \n #[cfg(target_os = \"win32\")]\n fn target_env(lib_path: &str, prog: &str) -> ~[(~str,~str)] {"}, {"sha": "33bd62632095f18da4c7d2c5cdbfcfa6e804fc96", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -8,30 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use common::mode_run_pass;\n-use common::mode_run_fail;\n+use common::config;\n use common::mode_compile_fail;\n use common::mode_pretty;\n-use common::config;\n+use common::mode_run_fail;\n+use common::mode_run_pass;\n use errors;\n-use header::load_props;\n use header::TestProps;\n+use header::load_props;\n use procsrv;\n-use util;\n use util::logv;\n+use util;\n \n-use std::rt::io;\n-use std::rt::io::fs;\n-use std::rt::io::File;\n-use std::rt::io::process;\n-use std::rt::io::process::ProcessExit;\n+use std::io::File;\n+use std::io::fs;\n+use std::io::net::ip::{Ipv4Addr, SocketAddr};\n+use std::io::net::tcp;\n+use std::io::process::ProcessExit;\n+use std::io::process;\n+use std::io::timer;\n+use std::io;\n use std::os;\n use std::str;\n-use std::vec;\n-use std::rt::io::net::tcp;\n-use std::rt::io::net::ip::{Ipv4Addr, SocketAddr};\n use std::task;\n-use std::rt::io::timer;\n+use std::vec;\n \n use extra::test::MetricMap;\n "}, {"sha": "0abe4dae606b808395696d2202de9d5dcd6cea04", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -56,8 +56,8 @@ def scrub(b):\n d.write(\"extern mod extra;\\n\")\n d.write(\"extern mod run_pass_stage2;\\n\")\n d.write(\"use run_pass_stage2::*;\\n\")\n-d.write(\"use std::rt::io;\\n\");\n-d.write(\"use std::rt::io::Writer;\\n\");\n+d.write(\"use std::io;\\n\");\n+d.write(\"use std::io::Writer;\\n\");\n d.write(\"fn main() {\\n\");\n d.write(\"    let mut out = io::stdout();\\n\");\n i = 0"}, {"sha": "c249a8c09f29b0695506d8bfd843b5dcc6eaf044", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -97,7 +97,7 @@ pub mod reader {\n     use std::cast::transmute;\n     use std::int;\n     use std::option::{None, Option, Some};\n-    use std::rt::io::extensions::u64_from_be_bytes;\n+    use std::io::extensions::u64_from_be_bytes;\n \n     // ebml reading\n \n@@ -608,10 +608,10 @@ pub mod writer {\n \n     use std::cast;\n     use std::clone::Clone;\n-    use std::rt::io;\n-    use std::rt::io::{Writer, Seek};\n-    use std::rt::io::mem::MemWriter;\n-    use std::rt::io::extensions::u64_to_be_bytes;\n+    use std::io;\n+    use std::io::{Writer, Seek};\n+    use std::io::mem::MemWriter;\n+    use std::io::extensions::u64_to_be_bytes;\n \n     // ebml writing\n     pub struct Encoder {\n@@ -961,8 +961,8 @@ mod tests {\n     use serialize::Encodable;\n     use serialize;\n \n-    use std::rt::io::Decorator;\n-    use std::rt::io::mem::MemWriter;\n+    use std::io::Decorator;\n+    use std::io::mem::MemWriter;\n     use std::option::{None, Option, Some};\n \n     #[test]"}, {"sha": "d371d7bbdb3aafba22167d81dceef19e2da86b01", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -24,8 +24,8 @@\n  */\n \n use std::{os, path};\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n use std::path::is_sep;\n \n use sort;"}, {"sha": "7370dfafba9c8df1dd1175204b0b8b24b943c591", "filename": "src/libextra/json.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -20,9 +20,9 @@ use std::char;\n use std::cast::transmute;\n use std::f64;\n use std::hashmap::HashMap;\n-use std::rt::io;\n-use std::rt::io::Decorator;\n-use std::rt::io::mem::MemWriter;\n+use std::io;\n+use std::io::Decorator;\n+use std::io::mem::MemWriter;\n use std::num;\n use std::str;\n use std::to_str;\n@@ -1311,7 +1311,7 @@ mod tests {\n \n     use super::*;\n \n-    use std::rt::io;\n+    use std::io;\n     use serialize::Decodable;\n     use treemap::TreeMap;\n \n@@ -1483,8 +1483,8 @@ mod tests {\n     }\n \n     fn with_str_writer(f: &fn(@mut io::Writer)) -> ~str {\n-        use std::rt::io::mem::MemWriter;\n-        use std::rt::io::Decorator;\n+        use std::io::mem::MemWriter;\n+        use std::io::Decorator;\n         use std::str;\n \n         let m = @mut MemWriter::new();"}, {"sha": "44c399c89da4c681477415194e87ac3592546a40", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -13,7 +13,7 @@\n use sort;\n use std::cmp;\n use std::hashmap;\n-use std::rt::io;\n+use std::io;\n use std::num;\n \n // NB: this can probably be rewritten in terms of num::Num\n@@ -388,7 +388,7 @@ mod tests {\n     use stats::Summary;\n     use stats::write_5_number_summary;\n     use stats::write_boxplot;\n-    use std::rt::io;\n+    use std::io;\n     use std::str;\n \n     fn check(samples: &[f64], summ: &Summary) {\n@@ -942,8 +942,8 @@ mod tests {\n     #[test]\n     fn test_boxplot_nonpositive() {\n         fn t(s: &Summary, expected: ~str) {\n-            use std::rt::io::mem::MemWriter;\n-            use std::rt::io::Decorator;\n+            use std::io::mem::MemWriter;\n+            use std::io::Decorator;\n             let mut m = MemWriter::new();\n             write_boxplot(&mut m as &mut io::Writer, s, 30);\n             let out = str::from_utf8_owned(m.inner());"}, {"sha": "5bcba2957230407023652b6559fe22ebc257cc78", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -14,8 +14,8 @@\n use std::os;\n use std::rand::Rng;\n use std::rand;\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n \n /// A wrapper for a path to temporary directory implementing automatic\n /// scope-pased deletion."}, {"sha": "05c6a366807369bdfd5a0969476ab21134ca4459", "filename": "src/libextra/term.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -13,7 +13,7 @@\n #[allow(missing_doc)];\n \n \n-use std::rt::io;\n+use std::io;\n \n #[cfg(not(target_os = \"win32\"))] use std::os;\n #[cfg(not(target_os = \"win32\"))] use terminfo::*;"}, {"sha": "17ea165c7e542d613863b9d319af9c2dbb309e0f", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -15,7 +15,7 @@\n \n use std::{vec, str};\n use std::hashmap::HashMap;\n-use std::rt::io;\n+use std::io;\n use super::super::TermInfo;\n \n // These are the orders ncurses uses in its compiled format (as of 5.9). Not sure if portable."}, {"sha": "3754849b3eaf0a19ecca5d3a46f34bbb2bc4fc47", "filename": "src/libextra/terminfo/searcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fsearcher.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -13,8 +13,8 @@\n \n use std::{os, str};\n use std::os::getenv;\n-use std::rt::io;\n-use std::rt::io::File;\n+use std::io;\n+use std::io::File;\n \n /// Return path to database entry for `term`\n pub fn get_dbpath_for_term(term: &str) -> Option<~Path> {"}, {"sha": "14fee38dada2c6971d623247ad88a3d871091718", "filename": "src/libextra/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -30,8 +30,8 @@ use treemap::TreeMap;\n \n use std::clone::Clone;\n use std::comm::{stream, SharedChan, GenericPort, GenericChan};\n-use std::rt::io;\n-use std::rt::io::File;\n+use std::io;\n+use std::io::File;\n use std::task;\n use std::to_str::ToStr;\n use std::f64;\n@@ -655,9 +655,9 @@ pub fn run_tests_console(opts: &TestOpts,\n \n #[test]\n fn should_sort_failures_before_printing_them() {\n-    use std::rt::io;\n-    use std::rt::io::Decorator;\n-    use std::rt::io::mem::MemWriter;\n+    use std::io;\n+    use std::io::Decorator;\n+    use std::io::mem::MemWriter;\n     use std::str;\n     fn dummy() {}\n "}, {"sha": "901daba84ed51331a2b3daf4c8fcc0464ef79993", "filename": "src/libextra/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -10,8 +10,8 @@\n \n #[allow(missing_doc)];\n \n-use std::rt::io::Reader;\n-use std::rt::io::mem::BufReader;\n+use std::io::Reader;\n+use std::io::mem::BufReader;\n use std::num;\n use std::str;\n "}, {"sha": "7570d26901c95e097611db1426171d4a0e078b81", "filename": "src/libextra/url.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -12,8 +12,8 @@\n \n #[allow(missing_doc)];\n \n-use std::rt::io::{Reader, Seek};\n-use std::rt::io::mem::BufReader;\n+use std::io::{Reader, Seek};\n+use std::io::mem::BufReader;\n use std::cmp::Eq;\n use std::hashmap::HashMap;\n use std::to_bytes;"}, {"sha": "62a15a922fa35927aa2eadb57d5c24d4412de223", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -522,8 +522,8 @@ mod test {\n     use std::str;\n     use std::rand;\n     use std::num::Zero;\n-    use std::rt::io::Decorator;\n-    use std::rt::io::mem::MemWriter;\n+    use std::io::Decorator;\n+    use std::io::mem::MemWriter;\n \n     #[test]\n     fn test_new_nil() {"}, {"sha": "89e50f53ab464c175a2ffd2abeccccd637eaeda0", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -18,9 +18,9 @@ use treemap::TreeMap;\n use std::cell::Cell;\n use std::comm::{PortOne, oneshot};\n use std::{str, task};\n-use std::rt::io;\n-use std::rt::io::{File, Decorator};\n-use std::rt::io::mem::MemWriter;\n+use std::io;\n+use std::io::{File, Decorator};\n+use std::io::mem::MemWriter;\n \n /**\n *\n@@ -479,7 +479,7 @@ impl<'self, T:Send +\n #[test]\n fn test() {\n     use std::{os, run};\n-    use std::rt::io::fs;\n+    use std::io::fs;\n     use std::str::from_utf8_owned;\n \n     // Create a path to a new file 'filename' in the directory in which"}, {"sha": "01b257cd8b35c343ed6f99ce07a56e5d2373fb7b", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -31,7 +31,7 @@ use std::ptr;\n use std::run;\n use std::str;\n use std::vec;\n-use std::rt::io::fs;\n+use std::io::fs;\n use syntax::abi;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name, path_pretty_name};\n@@ -968,7 +968,7 @@ pub fn link_binary(sess: Session,\n }\n \n fn is_writeable(p: &Path) -> bool {\n-    use std::rt::io;\n+    use std::io;\n \n     !p.exists() ||\n         (match io::result(|| p.stat()) {"}, {"sha": "f920b8debf1013092b7d9de175ac9c58f9114fc6", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -26,9 +26,9 @@ use util::common::time;\n use util::ppaux;\n \n use std::hashmap::{HashMap,HashSet};\n-use std::rt::io;\n-use std::rt::io::fs;\n-use std::rt::io::mem::MemReader;\n+use std::io;\n+use std::io::fs;\n+use std::io::mem::MemReader;\n use std::os;\n use std::vec;\n use extra::getopts::groups::{optopt, optmulti, optflag, optflagopt};"}, {"sha": "f67de4456034b211dfd0d772f91724ab401b2072", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -34,8 +34,8 @@ use driver::session;\n use middle::lint;\n \n use std::comm;\n-use std::rt::io;\n-use std::rt::io::Reader;\n+use std::io;\n+use std::io::Reader;\n use std::num;\n use std::os;\n use std::result;"}, {"sha": "0680968703f9462870708430edb5e4cedbb57af3", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -27,8 +27,8 @@ use middle::astencode::vtable_decoder_helpers;\n \n use std::at_vec;\n use std::u64;\n-use std::rt::io;\n-use std::rt::io::extensions::u64_from_be_bytes;\n+use std::io;\n+use std::io::extensions::u64_from_be_bytes;\n use std::option;\n use std::str;\n use std::vec;"}, {"sha": "be45bf81867fc3e5759797adab0739e36777475c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -22,8 +22,8 @@ use middle::typeck;\n use middle;\n \n use std::hashmap::{HashMap, HashSet};\n-use std::rt::io::{Writer, Seek, Decorator};\n-use std::rt::io::mem::MemWriter;\n+use std::io::{Writer, Seek, Decorator};\n+use std::io::mem::MemWriter;\n use std::str;\n use std::vec;\n "}, {"sha": "237c50ab294107e08f5455b3d1cd497be5be69db", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -11,8 +11,8 @@\n \n use std::option;\n use std::os;\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n use std::hashmap::HashSet;\n \n pub enum FileMatch { FileMatches, FileDoesntMatch }"}, {"sha": "391b894460034cbe1a2d97aa41f9025b87d634e0", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -25,7 +25,7 @@ use syntax::attr::AttrMetaMethods;\n \n use std::c_str::ToCStr;\n use std::cast;\n-use std::rt::io;\n+use std::io;\n use std::num;\n use std::option;\n use std::os::consts::{macos, freebsd, linux, android, win32};"}, {"sha": "49afb29488d9d620f72f2c253a641bf63fd7d590", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -11,9 +11,9 @@\n // Type encoding\n \n use std::hashmap::HashMap;\n-use std::rt::io;\n-use std::rt::io::{Decorator, Writer, Seek};\n-use std::rt::io::mem::MemWriter;\n+use std::io;\n+use std::io::{Decorator, Writer, Seek};\n+use std::io::mem::MemWriter;\n use std::str;\n use std::fmt;\n "}, {"sha": "97d46cd3a0b1756ac143816b702f1378eb12cdb7", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -38,7 +38,7 @@ use syntax;\n use std::at_vec;\n use std::libc;\n use std::cast;\n-use std::rt::io::Seek;\n+use std::io::Seek;\n \n use extra::ebml::reader;\n use extra::ebml;\n@@ -1344,8 +1344,8 @@ fn mk_ctxt() -> @fake_ext_ctxt {\n \n #[cfg(test)]\n fn roundtrip(in_item: Option<@ast::item>) {\n-    use std::rt::io::Decorator;\n-    use std::rt::io::mem::MemWriter;\n+    use std::io::Decorator;\n+    use std::io::mem::MemWriter;\n \n     let in_item = in_item.unwrap();\n     let wr = @mut MemWriter::new();"}, {"sha": "6b46da06211271012d9f53804087ead05e233169", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -18,7 +18,7 @@\n \n \n use std::cast;\n-use std::rt::io;\n+use std::io;\n use std::uint;\n use std::vec;\n use std::hashmap::HashMap;"}, {"sha": "05c154c5c8d53bb454a944b905615a99f0dc26c3", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -111,7 +111,7 @@ use middle::moves;\n \n use std::cast::transmute;\n use std::hashmap::HashMap;\n-use std::rt::io;\n+use std::io;\n use std::str;\n use std::to_str;\n use std::uint;"}, {"sha": "ee2aaee240ec8370761adcea226792caefc4e25b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -17,7 +17,7 @@\n \n use std::fmt;\n use std::local_data;\n-use std::rt::io;\n+use std::io;\n \n use syntax::ast;\n use syntax::ast_util;"}, {"sha": "e4081df5c3c19217087902b6c0092631690a3377", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::fmt;\n-use std::rt::io;\n+use std::io;\n \n #[deriving(Clone)]\n pub struct Layout {"}, {"sha": "c07befea18feb2d1a2e6326fa78bf876559b2b9a", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -24,7 +24,7 @@\n \n use std::fmt;\n use std::libc;\n-use std::rt::io;\n+use std::io;\n use std::vec;\n \n /// A unit struct which has the `fmt::Default` trait implemented. When"}, {"sha": "1b514f10af0497242599b92f141cbcea9989346e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -39,10 +39,10 @@ use std::comm;\n use std::fmt;\n use std::hashmap::{HashMap, HashSet};\n use std::local_data;\n-use std::rt::io::buffered::BufferedWriter;\n-use std::rt::io;\n-use std::rt::io::fs;\n-use std::rt::io::File;\n+use std::io::buffered::BufferedWriter;\n+use std::io;\n+use std::io::fs;\n+use std::io::File;\n use std::os;\n use std::str;\n use std::task;"}, {"sha": "12a79aa545e80e3063adce8ccde8f0140f182cee", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -26,10 +26,10 @@ extern mod extra;\n \n use std::cell::Cell;\n use std::local_data;\n-use std::rt::io;\n-use std::rt::io::File;\n-use std::rt::io::mem::MemWriter;\n-use std::rt::io::Decorator;\n+use std::io;\n+use std::io::File;\n+use std::io::mem::MemWriter;\n+use std::io::Decorator;\n use std::str;\n use extra::getopts;\n use extra::getopts::groups;"}, {"sha": "02817fd91e525ef3949a63fcf43ed1b0b75df03e", "filename": "src/librustpkg/conditions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fconditions.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -10,10 +10,10 @@\n \n // Useful conditions\n \n-pub use std::path::Path;\n pub use package_id::PkgId;\n-pub use std::rt::io::FileStat;\n-pub use std::rt::io::process::ProcessExit;\n+pub use std::io::FileStat;\n+pub use std::io::process::ProcessExit;\n+pub use std::path::Path;\n \n condition! {\n     pub bad_path: (Path, ~str) -> Path;"}, {"sha": "23fa1bdebd55c6e10736e68886a42290de16267a", "filename": "src/librustpkg/installed_packages.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Finstalled_packages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Finstalled_packages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Finstalled_packages.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -13,8 +13,8 @@\n use rustc::metadata::filesearch::rust_path;\n use path_util::*;\n use std::os;\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n \n pub fn list_installed_packages(f: &fn(&PkgId) -> bool) -> bool  {\n     let workspaces = rust_path();"}, {"sha": "5e9d06f533bb30268787f1c626bab0860f04325a", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -26,10 +26,10 @@ extern mod rustc;\n extern mod syntax;\n \n use std::{os, result, run, str, task};\n-use std::rt::io::process;\n+use std::io::process;\n use std::hashmap::HashSet;\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n pub use std::path::Path;\n \n use extra::workcache;"}, {"sha": "ae9e0e62661f88bb812271fb96f529b796757cc6", "filename": "src/librustpkg/messages.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fmessages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fmessages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fmessages.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use extra::term;\n-use std::rt::io;\n+use std::io;\n \n pub fn note(msg: &str) {\n     pretty_message(msg, \"note: \", term::color::GREEN,"}, {"sha": "f27ca9e0a18180af8b14abb9158a8d6a50738438", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -12,8 +12,8 @@ extern mod extra;\n \n use target::*;\n use package_id::PkgId;\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n use std::os;\n use context::*;\n use crate::Crate;"}, {"sha": "bce41e5a49fe0560fd04103a87402cf574a79b75", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -19,8 +19,8 @@ use rustc::driver::driver::host_triple;\n use std::libc;\n use std::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n use std::os;\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n use messages::*;\n \n pub fn default_workspace() -> Path {"}, {"sha": "702a849e4addd027ede7c93a1634186a5e24c3be", "filename": "src/librustpkg/source_control.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fsource_control.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fsource_control.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsource_control.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -12,7 +12,7 @@\n \n use std::{run, str};\n use std::run::{ProcessOutput, ProcessOptions, Process};\n-use std::rt::io::fs;\n+use std::io::fs;\n use extra::tempfile::TempDir;\n use version::*;\n use path_util::chmod_read_only;"}, {"sha": "02d2f9095090ab0b8c7815b2fe5f4db9b68cb84e", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -12,11 +12,11 @@\n \n use context::{BuildContext, Context, RustcFlags};\n use std::{os, run, str, task};\n-use std::rt::io;\n-use std::rt::io::fs;\n-use std::rt::io::File;\n-use std::rt::io::process;\n-use std::rt::io::process::ProcessExit;\n+use std::io;\n+use std::io::fs;\n+use std::io::File;\n+use std::io::process;\n+use std::io::process::ProcessExit;\n use extra::arc::Arc;\n use extra::arc::RWArc;\n use extra::tempfile::TempDir;"}, {"sha": "4a107de55a59f590ef043807bd4a0b5791cc4797", "filename": "src/librustpkg/testsuite/pass/src/fancy-lib/pkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -12,7 +12,7 @@ extern mod rustpkg;\n extern mod rustc;\n \n use std::os;\n-use std::rt::io::File;\n+use std::io::File;\n use rustpkg::api;\n use rustpkg::version::NoVersion;\n "}, {"sha": "df94e166dc211de2f4d8605f66731574775640dc", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -10,8 +10,8 @@\n \n use std::libc;\n use std::os;\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n use extra::workcache;\n use rustc::driver::{driver, session};\n use extra::getopts::groups::getopts;"}, {"sha": "42f0aec6b74379e63e299a199ecd3e2915af4cba", "filename": "src/librustpkg/workcache_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fworkcache_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustpkg%2Fworkcache_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkcache_support.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::rt::io;\n-use std::rt::io::File;\n+use std::io;\n+use std::io::File;\n use extra::workcache;\n use sha1::{Digest, Sha1};\n "}, {"sha": "49782c62838f8a43c2b4c363bb65d5f3d238da97", "filename": "src/librustuv/addrinfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faddrinfo.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ai = std::rt::io::net::addrinfo;\n+use ai = std::io::net::addrinfo;\n use std::libc::c_int;\n use std::ptr::null;\n use std::rt::BlockedTask;\n@@ -186,7 +186,7 @@ pub fn accum_addrinfo(addr: &Addrinfo) -> ~[ai::Info] {\n \n #[cfg(test)]\n mod test {\n-    use std::rt::io::net::ip::{SocketAddr, Ipv4Addr};\n+    use std::io::net::ip::{SocketAddr, Ipv4Addr};\n     use super::*;\n     use super::super::local_loop;\n "}, {"sha": "984b9ee53c2102fa2fdc0cdc1471a00fc68aed1d", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -15,8 +15,8 @@ use std::cast;\n use std::libc::{c_int, c_char, c_void, size_t};\n use std::libc;\n use std::rt::BlockedTask;\n-use std::rt::io::{FileStat, IoError};\n-use std::rt::io;\n+use std::io::{FileStat, IoError};\n+use std::io;\n use std::rt::local::Local;\n use std::rt::rtio;\n use std::rt::sched::{Scheduler, SchedHandle};\n@@ -450,7 +450,7 @@ impl rtio::RtioFileStream for FileWatcher {\n mod test {\n     use std::libc::c_int;\n     use std::libc::{O_CREAT, O_RDWR, O_RDONLY, S_IWUSR, S_IRUSR};\n-    use std::rt::io;\n+    use std::io;\n     use std::str;\n     use std::vec;\n     use super::*;"}, {"sha": "e8ce8113033a9d8a4753ab84d3cd9f0fc33f69cc", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -61,7 +61,7 @@ use std::task;\n use std::unstable::finally::Finally;\n use std::vec;\n \n-use std::rt::io::IoError;\n+use std::io::IoError;\n \n pub use self::async::AsyncWatcher;\n pub use self::file::{FsRequest, FileWatcher};\n@@ -327,7 +327,7 @@ pub fn uv_error_to_io_error(uverr: UvError) -> IoError {\n     unsafe {\n         // Importing error constants\n         use uvll::*;\n-        use std::rt::io::*;\n+        use std::io::*;\n \n         // uv error descriptions are static\n         let c_desc = uvll::uv_strerror(*uverr);"}, {"sha": "01f2bfd648cd587250755df246e9d6160bd905fe", "filename": "src/librustuv/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fmacros.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -33,8 +33,8 @@ macro_rules! get_handle_to_current_scheduler(\n )\n \n pub fn dumb_println(args: &fmt::Arguments) {\n-    use std::rt::io::native::stdio::stderr;\n-    use std::rt::io::Writer;\n+    use std::io::native::stdio::stderr;\n+    use std::io::Writer;\n \n     let mut out = stderr();\n     fmt::writeln(&mut out as &mut Writer, args);"}, {"sha": "dc6fbcec3f2a466d2a1a5d2df3419b38b75e7ee9", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -13,8 +13,8 @@ use std::libc;\n use std::libc::{size_t, ssize_t, c_int, c_void, c_uint, c_char};\n use std::ptr;\n use std::rt::BlockedTask;\n-use std::rt::io::IoError;\n-use std::rt::io::net::ip::{Ipv4Addr, Ipv6Addr, SocketAddr, IpAddr};\n+use std::io::IoError;\n+use std::io::net::ip::{Ipv4Addr, Ipv6Addr, SocketAddr, IpAddr};\n use std::rt::local::Local;\n use std::rt::rtio;\n use std::rt::sched::{Scheduler, SchedHandle};"}, {"sha": "0c1e53082f7a484fc8dbf286315815847d912de0", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -11,7 +11,7 @@\n use std::c_str::CString;\n use std::libc;\n use std::rt::BlockedTask;\n-use std::rt::io::IoError;\n+use std::io::IoError;\n use std::rt::local::Local;\n use std::rt::rtio::{RtioPipe, RtioUnixListener, RtioUnixAcceptor};\n use std::rt::sched::{Scheduler, SchedHandle};"}, {"sha": "c537ee582cb8d950b67cd7c1ab1235c50a2f2dfe", "filename": "src/librustuv/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fprocess.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -12,8 +12,8 @@ use std::libc::c_int;\n use std::libc;\n use std::ptr;\n use std::rt::BlockedTask;\n-use std::rt::io::IoError;\n-use std::rt::io::process::*;\n+use std::io::IoError;\n+use std::io::process::*;\n use std::rt::local::Local;\n use std::rt::rtio::RtioProcess;\n use std::rt::sched::{Scheduler, SchedHandle};"}, {"sha": "10c2bc3be0569c44f35a42db79fd000fe152f37e", "filename": "src/librustuv/signal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fsignal.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::libc::c_int;\n-use std::rt::io::signal::Signum;\n+use std::io::signal::Signum;\n use std::rt::sched::{SchedHandle, Scheduler};\n use std::comm::{SharedChan, SendDeferred};\n use std::rt::local::Local;\n@@ -78,7 +78,7 @@ mod test {\n     use super::*;\n     use std::cell::Cell;\n     use super::super::local_loop;\n-    use std::rt::io::signal;\n+    use std::io::signal;\n     use std::comm::{SharedChan, stream};\n \n     #[test]"}, {"sha": "c7c09f3480e20b943d428ac814785b9fc74d1b48", "filename": "src/librustuv/tty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftty.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::libc;\n-use std::rt::io::IoError;\n+use std::io::IoError;\n use std::rt::local::Local;\n use std::rt::rtio::RtioTTY;\n use std::rt::sched::{Scheduler, SchedHandle};"}, {"sha": "6f9dbc8ec9095ad6b1db3e7e1629ccf682ecacb1", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -13,21 +13,21 @@ use std::comm::SharedChan;\n use std::libc::c_int;\n use std::libc;\n use std::path::Path;\n-use std::rt::io::IoError;\n-use std::rt::io::net::ip::SocketAddr;\n-use std::rt::io::process::ProcessConfig;\n-use std::rt::io;\n+use std::io::IoError;\n+use std::io::net::ip::SocketAddr;\n+use std::io::process::ProcessConfig;\n+use std::io;\n use std::rt::local::Local;\n use std::rt::rtio::*;\n use std::rt::sched::{Scheduler, SchedHandle};\n use std::rt::task::Task;\n use std::libc::{O_CREAT, O_APPEND, O_TRUNC, O_RDWR, O_RDONLY, O_WRONLY,\n                 S_IRUSR, S_IWUSR};\n-use std::rt::io::{FileMode, FileAccess, Open, Append, Truncate, Read, Write,\n+use std::io::{FileMode, FileAccess, Open, Append, Truncate, Read, Write,\n                   ReadWrite, FileStat};\n-use std::rt::io::signal::Signum;\n+use std::io::signal::Signum;\n use std::util;\n-use ai = std::rt::io::net::addrinfo;\n+use ai = std::io::net::addrinfo;\n \n #[cfg(test)] use std::unstable::run_in_bare_thread;\n "}, {"sha": "a48b8578116dec80d7e7b82c621a21a94f8e8b61", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -220,7 +220,7 @@ currently implemented are:\n \n ```rust\n format!      // described above\n-write!       // first argument is a &mut rt::io::Writer, the destination\n+write!       // first argument is a &mut io::Writer, the destination\n writeln!     // same as write but appends a newline\n print!       // the format string is printed to the standard output\n println!     // same as print but appends a newline\n@@ -236,7 +236,7 @@ strings and instead directly write the output. Under the hood, this function is\n actually invoking the `write` function defined in this module. Example usage is:\n \n ```rust\n-use std::rt::io;\n+use std::io;\n \n let mut w = io::mem::MemWriter::new();\n write!(&mut w as &mut io::Writer, \"Hello {}!\", \"world\");\n@@ -462,9 +462,9 @@ use prelude::*;\n \n use cast;\n use char::Char;\n-use rt::io::Decorator;\n-use rt::io::mem::MemWriter;\n-use rt::io;\n+use io::Decorator;\n+use io::mem::MemWriter;\n+use io;\n use str;\n use repr;\n use util;"}, {"sha": "c9a85e6d25e13b93c5b9485c2002492376cc4b22", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -29,7 +29,7 @@\n use container::Container;\n use iter::Iterator;\n use option::{Some, None};\n-use rt::io::Writer;\n+use io::Writer;\n use str::OwnedStr;\n use to_bytes::IterBytes;\n use vec::ImmutableVector;"}, {"sha": "4932f392090f1a4c9b88e242499de10d89e5fa64", "filename": "src/libstd/io/buffered.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -349,6 +349,7 @@ impl<S: Stream> Decorator<S> for BufferedStream<S> {\n mod test {\n     use prelude::*;\n     use super::*;\n+    use io;\n     use super::super::mem::{MemReader, MemWriter};\n \n     #[test]\n@@ -427,11 +428,11 @@ mod test {\n         use rt;\n         struct S;\n \n-        impl rt::io::Writer for S {\n+        impl io::Writer for S {\n             fn write(&mut self, _: &[u8]) {}\n         }\n \n-        impl rt::io::Reader for S {\n+        impl io::Reader for S {\n             fn read(&mut self, _: &mut [u8]) -> Option<uint> { None }\n             fn eof(&mut self) -> bool { true }\n         }", "previous_filename": "src/libstd/rt/io/buffered.rs"}, {"sha": "98dbec27fb9612fea2dd0e7e42bc544589b794a2", "filename": "src/libstd/io/comm_adapters.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "previous_filename": "src/libstd/rt/io/comm_adapters.rs"}, {"sha": "ebda2618dcf54f1f7cee8894c574d0cfc8a1f102", "filename": "src/libstd/io/extensions.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -15,7 +15,7 @@\n \n use iter::Iterator;\n use option::Option;\n-use rt::io::{Reader, Decorator};\n+use io::{Reader, Decorator};\n \n /// An iterator that reads a single byte on each iteration,\n /// until `.read_byte()` returns `None`.\n@@ -139,8 +139,9 @@ pub fn u64_from_be_bytes(data: &[u8],\n #[cfg(test)]\n mod test {\n     use option::{None, Option, Some};\n-    use rt::io::mem::{MemReader, MemWriter};\n-    use rt::io::{Reader, io_error, placeholder_error};\n+    use io::mem::{MemReader, MemWriter};\n+    use io::{Reader, io_error, placeholder_error};\n+    use vec::ImmutableVector;\n \n     struct InitialZeroByteReader {\n         count: int,", "previous_filename": "src/libstd/rt/io/extensions.rs"}, {"sha": "8a5aa171eb805d55c7dcb00f284580acf242313e", "filename": "src/libstd/io/flate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fflate.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "previous_filename": "src/libstd/rt/io/flate.rs"}, {"sha": "d5514eb14d3da1aaf6dda86d6e385a676020e4b4", "filename": "src/libstd/io/fs.rs", "status": "renamed", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -17,7 +17,7 @@ At the top-level of the module are a set of freestanding functions, associated\n with various filesystem operations. They all operate on a `Path` object.\n \n All operations in this module, including those as part of `File` et al\n-block the task during execution. Most will raise `std::rt::io::io_error`\n+block the task during execution. Most will raise `std::io::io_error`\n conditions in the event of failure.\n \n Also included in this module is an implementation block on the `Path` object\n@@ -27,7 +27,7 @@ particular bits of it, etc.\n \n # Example\n \n-    use std::rt::io::{File, fs};\n+    use std::io::{File, fs};\n \n     let path = Path::new(\"foo.txt\");\n \n@@ -46,17 +46,18 @@ particular bits of it, etc.\n */\n \n use c_str::ToCStr;\n+use clone::Clone;\n use iter::Iterator;\n use super::{Reader, Writer, Seek};\n use super::{SeekStyle, Read, Write, Open, IoError, Truncate,\n             FileMode, FileAccess, FileStat, io_error, FilePermission};\n use rt::rtio::{RtioFileStream, IoFactory, with_local_io};\n-use rt::io;\n+use io;\n use option::{Some, None, Option};\n use result::{Ok, Err, Result};\n use path;\n use path::{Path, GenericPath};\n-use vec::OwnedVector;\n+use vec::{OwnedVector, ImmutableVector};\n \n /// Unconstrained file access type that exposes read and write operations\n ///\n@@ -92,7 +93,7 @@ impl File {\n     ///\n     /// # Example\n     ///\n-    ///     use std::rt::io::{File, io_error, Open, ReadWrite};\n+    ///     use std::io::{File, io_error, Open, ReadWrite};\n     ///\n     ///     let p = Path::new(\"/some/file/path.txt\");\n     ///\n@@ -111,7 +112,7 @@ impl File {\n     ///\n     /// `FileMode` and `FileAccess` provide information about the permissions\n     /// context in which a given stream is created. More information about them\n-    /// can be found in `std::rt::io`'s docs. If a file is opened with `Write`\n+    /// can be found in `std::io`'s docs. If a file is opened with `Write`\n     /// or `ReadWrite` access, then it will be created it it does not already\n     /// exist.\n     ///\n@@ -154,7 +155,7 @@ impl File {\n     ///\n     /// # Example\n     ///\n-    ///     use std::rt::io::File;\n+    ///     use std::io::File;\n     ///\n     ///     let contents = File::open(&Path::new(\"foo.txt\")).read_to_end();\n     pub fn open(path: &Path) -> Option<File> {\n@@ -169,7 +170,7 @@ impl File {\n     ///\n     /// # Example\n     ///\n-    ///     use std::rt::io::File;\n+    ///     use std::io::File;\n     ///\n     ///     let mut f = File::create(&Path::new(\"foo.txt\"));\n     ///     f.write(bytes!(\"This is a sample file\"));\n@@ -226,7 +227,7 @@ impl File {\n ///\n /// # Example\n ///\n-///     use std::rt::io::fs;\n+///     use std::io::fs;\n ///\n ///     let p = Path::new(\"/some/file/path.txt\");\n ///     fs::unlink(&p);\n@@ -256,8 +257,8 @@ pub fn unlink(path: &Path) {\n ///\n /// # Example\n ///\n-///     use std::rt::io;\n-///     use std::rt::io::fs;\n+///     use std::io;\n+///     use std::io::fs;\n ///\n ///     let p = Path::new(\"/some/file/path.txt\");\n ///     match io::result(|| fs::stat(&p)) {\n@@ -318,7 +319,7 @@ pub fn lstat(path: &Path) -> FileStat {\n ///\n /// # Example\n ///\n-///     use std::rt::io::fs;\n+///     use std::io::fs;\n ///\n ///     fs::rename(&Path::new(\"foo\"), &Path::new(\"bar\"));\n ///     // Oh boy, nothing was raised!\n@@ -342,7 +343,7 @@ pub fn rename(from: &Path, to: &Path) {\n ///\n /// # Example\n ///\n-///     use std::rt::io::fs;\n+///     use std::io::fs;\n ///\n ///     fs::copy(&Path::new(\"foo.txt\"), &Path::new(\"bar.txt\"));\n ///     // Oh boy, nothing was raised!\n@@ -388,8 +389,8 @@ pub fn copy(from: &Path, to: &Path) {\n ///\n /// # Example\n ///\n-///     use std::rt::io;\n-///     use std::rt::io::fs;\n+///     use std::io;\n+///     use std::io::fs;\n ///\n ///     fs::chmod(&Path::new(\"file.txt\"), io::UserFile);\n ///     fs::chmod(&Path::new(\"file.txt\"), io::UserRead | io::UserWrite);\n@@ -453,7 +454,7 @@ pub fn readlink(path: &Path) -> Option<Path> {\n /// # Example\n ///\n ///     use std::libc::S_IRWXU;\n-///     use std::rt::io::fs;\n+///     use std::io::fs;\n ///\n ///     let p = Path::new(\"/some/dir\");\n ///     fs::mkdir(&p, S_IRWXU as int);\n@@ -474,7 +475,7 @@ pub fn mkdir(path: &Path, mode: FilePermission) {\n ///\n /// # Example\n ///\n-///     use std::rt::io::fs;\n+///     use std::io::fs;\n ///\n ///     let p = Path::new(\"/some/dir\");\n ///     fs::rmdir(&p);\n@@ -495,7 +496,7 @@ pub fn rmdir(path: &Path) {\n ///\n /// # Example\n ///\n-///     use std::rt::io::fs;\n+///     use std::io::fs;\n ///\n ///     // one possible implementation of fs::walk_dir only visiting files\n ///     fn visit_dirs(dir: &Path, cb: &fn(&Path)) {\n@@ -716,8 +717,8 @@ impl path::Path {\n #[cfg(test)]\n mod test {\n     use prelude::*;\n-    use rt::io::{SeekSet, SeekCur, SeekEnd, io_error, Read, Open, ReadWrite};\n-    use rt::io;\n+    use io::{SeekSet, SeekCur, SeekEnd, io_error, Read, Open, ReadWrite};\n+    use io;\n     use str;\n     use super::{File, rmdir, mkdir, readdir, rmdir_recursive, mkdir_recursive,\n                 copy, unlink, stat, symlink, link, readlink, chmod,", "previous_filename": "src/libstd/rt/io/fs.rs"}, {"sha": "e754d9be85e2337913efc777562b276d71452cab", "filename": "src/libstd/io/mem.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -226,7 +226,7 @@ pub fn with_mem_writer(writeFn:&fn(&mut MemWriter)) -> ~[u8] {\n mod test {\n     use prelude::*;\n     use super::*;\n-    use rt::io::*;\n+    use io::*;\n \n     #[test]\n     fn test_mem_writer() {", "previous_filename": "src/libstd/rt/io/mem.rs"}, {"sha": "8858d0a14adf2122f3643dd781338d0bdb377326", "filename": "src/libstd/io/mod.rs", "status": "renamed", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -19,8 +19,6 @@ file, TCP, UDP, Unix domain sockets.\n Readers and Writers may be composed to add capabilities like string\n parsing, encoding, and compression.\n \n-This will likely live in std::io, not std::rt::io.\n-\n # Examples\n \n Some examples of obvious things you might want to do\n@@ -240,16 +238,20 @@ Out of scope\n \n */\n \n+#[allow(missing_doc)];\n+\n use cast;\n+use container::Container;\n use int;\n-use path::Path;\n-use str::{StrSlice, OwnedStr};\n+use iter::Iterator;\n use option::{Option, Some, None};\n+use path::Path;\n use result::{Ok, Err, Result};\n-use iter::Iterator;\n+use str::{StrSlice, OwnedStr};\n use to_str::ToStr;\n use uint;\n use unstable::finally::Finally;\n+use vec::{OwnedVector, MutableVector};\n use vec;\n \n // Reexports", "previous_filename": "src/libstd/rt/io/mod.rs"}, {"sha": "0f1a64edb607286660fe8d863e4dd5dcaaffcd6e", "filename": "src/libstd/io/native/file.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Ffile.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -229,7 +229,7 @@ mod tests {\n     use libc;\n     use os;\n     use prelude::*;\n-    use rt::io::{io_error, SeekSet};\n+    use io::{io_error, SeekSet};\n     use super::*;\n \n     #[ignore(cfg(target_os = \"freebsd\"))] // hmm, maybe pipes have a tiny buffer\n@@ -714,8 +714,8 @@ mod old_os {\n \n     #[test]\n     fn test_path_is_dir() {\n-        use rt::io::fs::{mkdir_recursive};\n-        use rt::io::{File, UserRWX};\n+        use io::fs::{mkdir_recursive};\n+        use io::{File, UserRWX};\n \n         assert!((path_is_dir(&Path::new(\".\"))));\n         assert!((!path_is_dir(&Path::new(\"test/stdtest/fs.rs\"))));\n@@ -742,8 +742,8 @@ mod old_os {\n \n     #[test]\n     fn test_path_exists() {\n-        use rt::io::fs::mkdir_recursive;\n-        use rt::io::UserRWX;\n+        use io::fs::mkdir_recursive;\n+        use io::UserRWX;\n \n         assert!((path_exists(&Path::new(\".\"))));\n         assert!((!path_exists(&Path::new(", "previous_filename": "src/libstd/rt/io/native/file.rs"}, {"sha": "de03ac1c07d509a66df7a9fa8f3fc466e10c3683", "filename": "src/libstd/io/native/process.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -14,7 +14,7 @@ use libc;\n use os;\n use prelude::*;\n use ptr;\n-use rt::io;\n+use io;\n use super::file;\n \n /**", "previous_filename": "src/libstd/rt/io/native/process.rs"}, {"sha": "68748ab49a3ea61e7a8bfa625fb77a000352d629", "filename": "src/libstd/io/native/stdio.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnative%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnative%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Fstdio.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -10,7 +10,7 @@\n \n use libc;\n use option::Option;\n-use rt::io::{Reader, Writer};\n+use io::{Reader, Writer};\n use super::file;\n \n /// Creates a new handle to the stdin of this process", "previous_filename": "src/libstd/rt/io/native/stdio.rs"}, {"sha": "7e2d1fc5e834970bb79796dc9bfe59abfb51001a", "filename": "src/libstd/io/net/addrinfo.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -19,9 +19,10 @@ getaddrinfo()\n \n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use rt::io::{io_error};\n-use rt::io::net::ip::{SocketAddr, IpAddr};\n+use io::{io_error};\n+use io::net::ip::{SocketAddr, IpAddr};\n use rt::rtio::{IoFactory, with_local_io};\n+use vec::ImmutableVector;\n \n /// Hints to the types of sockets that are desired when looking up hosts\n pub enum SocketType {\n@@ -110,7 +111,7 @@ fn lookup(hostname: Option<&str>, servname: Option<&str>,\n #[cfg(test)]\n mod test {\n     use option::Some;\n-    use rt::io::net::ip::Ipv4Addr;\n+    use io::net::ip::Ipv4Addr;\n     use super::*;\n \n     #[test]", "previous_filename": "src/libstd/rt/io/net/addrinfo.rs"}, {"sha": "07240a4a509032cc04a6b8f49d1742011c8d2a58", "filename": "src/libstd/io/net/ip.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use vec::MutableCloneableVector;\n-use to_str::ToStr;\n+use container::Container;\n use from_str::FromStr;\n use option::{Option, None, Some};\n-\n+use to_str::ToStr;\n+use vec::{MutableCloneableVector, ImmutableVector};\n \n pub type Port = u16;\n ", "previous_filename": "src/libstd/rt/io/net/ip.rs"}, {"sha": "cf109167089d40ca6581ce6bdade64927d65dfc0", "filename": "src/libstd/io/net/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fmod.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "previous_filename": "src/libstd/rt/io/net/mod.rs"}, {"sha": "a59d652d739cdf507d4f2a9d1a87aaa1dfb28313", "filename": "src/libstd/io/net/tcp.rs", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -10,9 +10,9 @@\n \n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use rt::io::net::ip::SocketAddr;\n-use rt::io::{Reader, Writer, Listener, Acceptor};\n-use rt::io::{io_error, EndOfFile};\n+use io::net::ip::SocketAddr;\n+use io::{Reader, Writer, Listener, Acceptor};\n+use io::{io_error, EndOfFile};\n use rt::rtio::{IoFactory, with_local_io,\n                RtioSocket, RtioTcpListener, RtioTcpAcceptor, RtioTcpStream};\n \n@@ -41,7 +41,7 @@ impl TcpStream {\n         match self.obj.peer_name() {\n             Ok(pn) => Some(pn),\n             Err(ioerr) => {\n-                rtdebug!(\"failed to get peer name: {:?}\", ioerr);\n+                debug!(\"failed to get peer name: {:?}\", ioerr);\n                 io_error::cond.raise(ioerr);\n                 None\n             }\n@@ -52,7 +52,7 @@ impl TcpStream {\n         match self.obj.socket_name() {\n             Ok(sn) => Some(sn),\n             Err(ioerr) => {\n-                rtdebug!(\"failed to get socket name: {:?}\", ioerr);\n+                debug!(\"failed to get socket name: {:?}\", ioerr);\n                 io_error::cond.raise(ioerr);\n                 None\n             }\n@@ -107,7 +107,7 @@ impl TcpListener {\n         match self.obj.socket_name() {\n             Ok(sn) => Some(sn),\n             Err(ioerr) => {\n-                rtdebug!(\"failed to get socket name: {:?}\", ioerr);\n+                debug!(\"failed to get socket name: {:?}\", ioerr);\n                 io_error::cond.raise(ioerr);\n                 None\n             }\n@@ -148,8 +148,8 @@ mod test {\n     use super::*;\n     use cell::Cell;\n     use rt::test::*;\n-    use rt::io::net::ip::{Ipv4Addr, SocketAddr};\n-    use rt::io::*;\n+    use io::net::ip::{Ipv4Addr, SocketAddr};\n+    use io::*;\n     use prelude::*;\n     use rt::comm::oneshot;\n \n@@ -514,7 +514,7 @@ mod test {\n                         let mut buf = [0];\n                         stream.read(buf);\n                         assert!(buf[0] == i as u8);\n-                        rtdebug!(\"read\");\n+                        debug!(\"read\");\n                     }\n                 }\n             }\n@@ -526,11 +526,11 @@ mod test {\n                 if i == MAX { return }\n \n                 do spawntask {\n-                    rtdebug!(\"connecting\");\n+                    debug!(\"connecting\");\n                     let mut stream = TcpStream::connect(addr);\n                     // Connect again before writing\n                     connect(i + 1, addr);\n-                    rtdebug!(\"writing\");\n+                    debug!(\"writing\");\n                     stream.write([i as u8]);\n                 }\n             }\n@@ -556,7 +556,7 @@ mod test {\n                         let mut buf = [0];\n                         stream.read(buf);\n                         assert!(buf[0] == i as u8);\n-                        rtdebug!(\"read\");\n+                        debug!(\"read\");\n                     }\n                 }\n             }\n@@ -568,11 +568,11 @@ mod test {\n                 if i == MAX { return }\n \n                 do spawntask {\n-                    rtdebug!(\"connecting\");\n+                    debug!(\"connecting\");\n                     let mut stream = TcpStream::connect(addr);\n                     // Connect again before writing\n                     connect(i + 1, addr);\n-                    rtdebug!(\"writing\");\n+                    debug!(\"writing\");\n                     stream.write([i as u8]);\n                 }\n             }\n@@ -598,7 +598,7 @@ mod test {\n                         let mut buf = [0];\n                         stream.read(buf);\n                         assert!(buf[0] == 99);\n-                        rtdebug!(\"read\");\n+                        debug!(\"read\");\n                     }\n                 }\n             }\n@@ -610,11 +610,11 @@ mod test {\n                 if i == MAX { return }\n \n                 do spawntask_later {\n-                    rtdebug!(\"connecting\");\n+                    debug!(\"connecting\");\n                     let mut stream = TcpStream::connect(addr);\n                     // Connect again before writing\n                     connect(i + 1, addr);\n-                    rtdebug!(\"writing\");\n+                    debug!(\"writing\");\n                     stream.write([99]);\n                 }\n             }\n@@ -639,7 +639,7 @@ mod test {\n                         let mut buf = [0];\n                         stream.read(buf);\n                         assert!(buf[0] == 99);\n-                        rtdebug!(\"read\");\n+                        debug!(\"read\");\n                     }\n                 }\n             }\n@@ -651,11 +651,11 @@ mod test {\n                 if i == MAX { return }\n \n                 do spawntask_later {\n-                    rtdebug!(\"connecting\");\n+                    debug!(\"connecting\");\n                     let mut stream = TcpStream::connect(addr);\n                     // Connect again before writing\n                     connect(i + 1, addr);\n-                    rtdebug!(\"writing\");\n+                    debug!(\"writing\");\n                     stream.write([99]);\n                 }\n             }", "previous_filename": "src/libstd/rt/io/net/tcp.rs"}, {"sha": "1a2245ac442f74c5bfdf3d78f5e814aee52bd19c", "filename": "src/libstd/io/net/udp.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -10,9 +10,9 @@\n \n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use rt::io::net::ip::SocketAddr;\n-use rt::io::{Reader, Writer};\n-use rt::io::{io_error, EndOfFile};\n+use io::net::ip::SocketAddr;\n+use io::{Reader, Writer};\n+use io::{io_error, EndOfFile};\n use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, with_local_io};\n \n pub struct UdpSocket {\n@@ -60,7 +60,7 @@ impl UdpSocket {\n         match self.obj.socket_name() {\n             Ok(sn) => Some(sn),\n             Err(ioerr) => {\n-                rtdebug!(\"failed to get socket name: {:?}\", ioerr);\n+                debug!(\"failed to get socket name: {:?}\", ioerr);\n                 io_error::cond.raise(ioerr);\n                 None\n             }\n@@ -106,8 +106,8 @@ impl Writer for UdpStream {\n mod test {\n     use super::*;\n     use rt::test::*;\n-    use rt::io::net::ip::{Ipv4Addr, SocketAddr};\n-    use rt::io::*;\n+    use io::net::ip::{Ipv4Addr, SocketAddr};\n+    use io::*;\n     use option::{Some, None};\n     use rt::comm::oneshot;\n     use cell::Cell;", "previous_filename": "src/libstd/rt/io/net/udp.rs"}, {"sha": "c6b4a2f2a4268e984e63a51d7af1d8c03262c964", "filename": "src/libstd/io/net/unix.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -27,8 +27,8 @@ use prelude::*;\n use c_str::ToCStr;\n use rt::rtio::{IoFactory, RtioUnixListener, with_local_io};\n use rt::rtio::{RtioUnixAcceptor, RtioPipe};\n-use rt::io::pipe::PipeStream;\n-use rt::io::{io_error, Listener, Acceptor, Reader, Writer};\n+use io::pipe::PipeStream;\n+use io::{io_error, Listener, Acceptor, Reader, Writer};\n \n /// A stream which communicates over a named pipe.\n pub struct UnixStream {\n@@ -52,7 +52,7 @@ impl UnixStream {\n     ///\n     /// # Example\n     ///\n-    ///     use std::rt::io::net::unix::UnixStream;\n+    ///     use std::io::net::unix::UnixStream;\n     ///\n     ///     let server = Path(\"path/to/my/socket\");\n     ///     let mut stream = UnixStream::connect(&server);\n@@ -98,7 +98,7 @@ impl UnixListener {\n     ///\n     /// # Example\n     ///\n-    ///     use std::rt::io::net::unix::UnixListener;\n+    ///     use std::io::net::unix::UnixListener;\n     ///\n     ///     let server = Path(\"path/to/my/socket\");\n     ///     let mut stream = UnixListener::bind(&server);\n@@ -154,7 +154,7 @@ mod tests {\n     use super::*;\n     use cell::Cell;\n     use rt::test::*;\n-    use rt::io::*;\n+    use io::*;\n     use rt::comm::oneshot;\n \n     fn smalltest(server: ~fn(UnixStream), client: ~fn(UnixStream)) {", "previous_filename": "src/libstd/rt/io/net/unix.rs"}, {"sha": "5938252571f515927f18123e335806c7ad93c2c5", "filename": "src/libstd/io/option.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Foption.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "previous_filename": "src/libstd/rt/io/option.rs"}, {"sha": "edbc6fa42852f15450453da685d6eb6c245d9702", "filename": "src/libstd/io/pipe.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -15,8 +15,8 @@\n \n use prelude::*;\n use super::{Reader, Writer};\n-use rt::io::{io_error, EndOfFile};\n-use rt::io::native::file;\n+use io::{io_error, EndOfFile};\n+use io::native::file;\n use rt::rtio::{RtioPipe, with_local_io};\n \n pub struct PipeStream {\n@@ -34,7 +34,7 @@ impl PipeStream {\n     /// # Example\n     ///\n     ///     use std::libc;\n-    ///     use std::rt::io::pipe;\n+    ///     use std::io::pipe;\n     ///\n     ///     let mut pipe = PipeStream::open(libc::STDERR_FILENO);\n     ///     pipe.write(bytes!(\"Hello, stderr!\"));", "previous_filename": "src/libstd/rt/io/pipe.rs"}, {"sha": "3941003d1c09467542fe103c24156ae74284212b", "filename": "src/libstd/io/process.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -14,8 +14,8 @@ use prelude::*;\n use cell::Cell;\n \n use libc;\n-use rt::io;\n-use rt::io::io_error;\n+use io;\n+use io::io_error;\n use rt::rtio::{RtioProcess, IoFactory, with_local_io};\n \n use fmt;", "previous_filename": "src/libstd/rt/io/process.rs"}, {"sha": "1310152d05fce340f1ddb27a469a11de72d52fc7", "filename": "src/libstd/io/signal.rs", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -19,12 +19,13 @@ definitions for a number of signals.\n \n */\n \n-use container::{Map, MutableMap};\n+use clone::Clone;\n use comm::{Port, SharedChan, stream};\n+use container::{Map, MutableMap};\n use hashmap;\n+use io::io_error;\n use option::{Some, None};\n use result::{Err, Ok};\n-use rt::io::io_error;\n use rt::rtio::{IoFactory, RtioSignal, with_local_io};\n \n #[repr(int)]\n@@ -61,7 +62,7 @@ pub enum Signum {\n /// # Example\n ///\n /// ```rust\n-/// use std::rt::io::signal::{Listener, Interrupt};\n+/// use std::io::signal::{Listener, Interrupt};\n ///\n /// let mut listener = Listener::new();\n /// listener.register(signal::Interrupt);\n@@ -148,7 +149,7 @@ impl Listener {\n #[cfg(test)]\n mod test {\n     use libc;\n-    use rt::io::timer;\n+    use io::timer;\n     use super::{Listener, Interrupt};\n     use comm::{GenericPort, Peekable};\n \n@@ -207,7 +208,7 @@ mod test {\n     #[cfg(windows)]\n     #[test]\n     fn test_io_signal_invalid_signum() {\n-        use rt::io;\n+        use io;\n         use super::User1;\n         let mut s = Listener::new();\n         let mut called = false;", "previous_filename": "src/libstd/rt/io/signal.rs"}, {"sha": "302d7579873889e42466ca4236fcba79e868ba33", "filename": "src/libstd/io/stdio.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -18,7 +18,7 @@ about the stream or terminal that it is attached to.\n # Example\n \n ```rust\n-use std::rt::io;\n+use std::io;\n \n let mut out = io::stdout();\n out.write(bytes!(\"Hello, world!\"));\n@@ -30,7 +30,7 @@ use fmt;\n use libc;\n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use rt::io::buffered::LineBufferedWriter;\n+use io::buffered::LineBufferedWriter;\n use rt::rtio::{IoFactory, RtioTTY, RtioFileStream, with_local_io,\n                CloseAsynchronously};\n use super::{Reader, Writer, io_error, IoError, OtherIoError,", "previous_filename": "src/libstd/rt/io/stdio.rs"}, {"sha": "219f63026d20595f36cd2d18cfcc565ea3a1159a", "filename": "src/libstd/io/timer.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -19,7 +19,7 @@ and create ports which will receive notifications after a period of time.\n \n ```rust\n \n-use std::rt::io::Timer;\n+use std::io::Timer;\n \n let mut timer = Timer::new().unwrap();\n timer.sleep(10); // block the task for awhile\n@@ -41,7 +41,7 @@ loop {\n use comm::{Port, PortOne};\n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use rt::io::io_error;\n+use io::io_error;\n use rt::rtio::{IoFactory, RtioTimer, with_local_io};\n \n pub struct Timer {\n@@ -64,7 +64,7 @@ impl Timer {\n             match io.timer_init() {\n                 Ok(t) => Some(Timer { obj: t }),\n                 Err(ioerr) => {\n-                    rtdebug!(\"Timer::init: failed to init: {:?}\", ioerr);\n+                    debug!(\"Timer::init: failed to init: {:?}\", ioerr);\n                     io_error::cond.raise(ioerr);\n                     None\n                 }", "previous_filename": "src/libstd/rt/io/timer.rs"}, {"sha": "e0908dcb290b259857e6b6e604881367fa5dea2e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -21,7 +21,7 @@\n //! boxes (`owned`), and unsafe and borrowed pointers (`ptr`, `borrowed`).\n //! Additionally, `std` provides pervasive types (`option` and `result`),\n //! task creation and communication primitives (`task`, `comm`), platform\n-//! abstractions (`os` and `path`), basic I/O abstractions (`rt::io`), common\n+//! abstractions (`os` and `path`), basic I/O abstractions (`io`), common\n //! traits (`kinds`, `ops`, `cmp`, `num`, `to_str`), and complete bindings\n //! to the C standard library (`libc`).\n //!\n@@ -68,7 +68,7 @@\n #[allow(cstack)]; // NOTE: remove after the next snapshot.\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print\n-// things and all of the std::rt::io tests have an I/O interface to run on top\n+// things and all of the std::io tests have an I/O interface to run on top\n // of\n #[cfg(test)] extern mod rustuv(vers = \"0.9-pre\");\n \n@@ -179,6 +179,7 @@ pub mod local_data;\n pub mod libc;\n pub mod c_str;\n pub mod os;\n+pub mod io;\n pub mod path;\n pub mod rand;\n pub mod run;\n@@ -225,6 +226,7 @@ mod std {\n     pub use logging;\n     pub use option;\n     pub use os;\n+    pub use io;\n     pub use rt;\n     pub use str;\n     pub use to_bytes;"}, {"sha": "213cf5dc07cd54d682b10c4e6b3d5e4eb6cbff9e", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -388,7 +388,7 @@ pub fn self_exe_path() -> Option<Path> {\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     fn load_self() -> Option<~[u8]> {\n-        use std::rt::io;\n+        use std::io;\n \n         match io::result(|| io::fs::readlink(&Path::new(\"/proc/self/exe\"))) {\n             Ok(Some(path)) => Some(path.as_vec().to_owned()),\n@@ -1447,8 +1447,8 @@ mod tests {\n         use result::{Ok, Err};\n         use os::*;\n         use libc::*;\n-        use rt::io;\n-        use rt::io::fs;\n+        use io;\n+        use io::fs;\n \n         #[cfg(unix)]\n         fn lseek_(fd: c_int, size: uint) {"}, {"sha": "d3797cf8099bf0bbac3173906c2f7f0a5be090a9", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -40,7 +40,7 @@ pub use result::{Result, Ok, Err};\n // Reexported functions\n pub use from_str::from_str;\n pub use iter::range;\n-pub use rt::io::stdio::{print, println};\n+pub use io::stdio::{print, println};\n \n // Reexported types and traits\n \n@@ -67,7 +67,7 @@ pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Primitive, Int, Float, ToStrRadix, ToPrimitive, FromPrimitive};\n pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n pub use ptr::RawPtr;\n-pub use rt::io::{Writer, Reader, Seek};\n+pub use io::{Writer, Reader, Seek};\n pub use send_str::{SendStr, SendStrOwned, SendStrStatic, IntoSendStr};\n pub use str::{Str, StrVector, StrSlice, OwnedStr};\n pub use to_bytes::IterBytes;"}, {"sha": "60fc1e0c6bc294384543b5a35e6dde169f7b8ab0", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -17,7 +17,7 @@ use ops::Drop;\n #[cfg(unix)]\n use rand::reader::ReaderRng;\n #[cfg(unix)]\n-use rt::io::File;\n+use io::File;\n \n #[cfg(windows)]\n use cast;"}, {"sha": "4beabb8bf6aa461c30b7323aff314e847a69256e", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -11,7 +11,7 @@\n //! A wrapper around any Reader to treat it as an RNG.\n \n use option::{Some, None};\n-use rt::io::Reader;\n+use io::Reader;\n \n use rand::Rng;\n \n@@ -24,7 +24,7 @@ use rand::Rng;\n ///\n /// ```rust\n /// use std::rand::{reader, Rng};\n-/// use std::rt::io::mem;\n+/// use std::io::mem;\n ///\n /// fn main() {\n ///     let mut rng = reader::ReaderRng::new(mem::MemReader::new(~[1,2,3,4,5,6,7,8]));\n@@ -77,7 +77,7 @@ impl<R: Reader> Rng for ReaderRng<R> {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use rt::io::mem::MemReader;\n+    use io::mem::MemReader;\n     use cast;\n \n     #[test]"}, {"sha": "3f8da64b3d6d347656cce3d8fa39ebcced56ad7d", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -19,7 +19,7 @@ More runtime type reflection\n use cast::transmute;\n use char;\n use container::Container;\n-use rt::io;\n+use io;\n use iter::Iterator;\n use libc::c_void;\n use option::{Some, None};\n@@ -621,8 +621,8 @@ pub fn write_repr<T>(writer: &mut io::Writer, object: &T) {\n \n pub fn repr_to_str<T>(t: &T) -> ~str {\n     use str;\n-    use rt::io;\n-    use rt::io::Decorator;\n+    use io;\n+    use io::Decorator;\n \n     let mut result = io::mem::MemWriter::new();\n     write_repr(&mut result as &mut io::Writer, t);\n@@ -637,7 +637,7 @@ fn test_repr() {\n     use prelude::*;\n     use str;\n     use str::Str;\n-    use rt::io::Decorator;\n+    use io::Decorator;\n     use util::swap;\n     use char::is_alphabetic;\n "}, {"sha": "55a6280a1f4684d2ae8c39afead7bce6d45b5ef9", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -12,9 +12,9 @@ use fmt;\n use from_str::from_str;\n use libc::exit;\n use option::{Some, None, Option};\n-use rt::io;\n-use rt::io::stdio::StdWriter;\n-use rt::io::buffered::LineBufferedWriter;\n+use io;\n+use io::stdio::StdWriter;\n+use io::buffered::LineBufferedWriter;\n use rt::crate_map::{ModEntry, CrateMap, iter_crate_map, get_crate_map};\n use str::StrSlice;\n use u32;"}, {"sha": "c90aafff20cc43f8c1ded93ce24d896cf38faef5", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -116,8 +116,10 @@ mod kill;\n /// The coroutine task scheduler, built on the `io` event loop.\n pub mod sched;\n \n-/// Synchronous I/O.\n-pub mod io;\n+#[cfg(stage0)]\n+pub mod io {\n+    pub use io::stdio;\n+}\n \n /// The EventLoop and internal synchronous I/O interface.\n pub mod rtio;"}, {"sha": "ca1fd413a5628d397a58e8cdae13e73bb6e308cc", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -8,21 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use c_str::CString;\n+use comm::{SharedChan, PortOne, Port};\n+use libc::c_int;\n use libc;\n use option::*;\n+use path::Path;\n use result::*;\n-use comm::{SharedChan, PortOne, Port};\n-use libc::c_int;\n-use c_str::CString;\n \n-use ai = rt::io::net::addrinfo;\n-use rt::io::IoError;\n-use rt::io::signal::Signum;\n-use super::io::process::{ProcessConfig, ProcessExit};\n-use super::io::net::ip::{IpAddr, SocketAddr};\n-use path::Path;\n-use super::io::{SeekStyle};\n-use super::io::{FileMode, FileAccess, FileStat, FilePermission};\n+use ai = io::net::addrinfo;\n+use io::IoError;\n+use io::net::ip::{IpAddr, SocketAddr};\n+use io::process::{ProcessConfig, ProcessExit};\n+use io::signal::Signum;\n+use io::{FileMode, FileAccess, FileStat, FilePermission};\n+use io::{SeekStyle};\n \n pub trait Callback {\n     fn call(&mut self);\n@@ -78,7 +78,7 @@ pub enum CloseBehavior {\n pub fn with_local_io<T>(f: &fn(&mut IoFactory) -> Option<T>) -> Option<T> {\n     use rt::sched::Scheduler;\n     use rt::local::Local;\n-    use rt::io::{io_error, standard_error, IoUnavailable};\n+    use io::{io_error, standard_error, IoUnavailable};\n \n     unsafe {\n         let sched: *mut Scheduler = Local::unsafe_borrow();"}, {"sha": "26cd405efe2e4015eba4eace08e303b10a7508b5", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -1133,7 +1133,7 @@ mod test {\n \n     #[test]\n     fn test_io_callback() {\n-        use rt::io::timer;\n+        use io::timer;\n \n         // This is a regression test that when there are no schedulable tasks\n         // in the work queue, but we are performing I/O, that once we do put"}, {"sha": "e73d15abb6c7684943195136a3e515f0d0439bca", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -29,7 +29,7 @@ use rt::borrowck;\n use rt::context::Context;\n use rt::context;\n use rt::env;\n-use rt::io::Writer;\n+use io::Writer;\n use rt::kill::Death;\n use rt::local::Local;\n use rt::logging::StdErrLogger;"}, {"sha": "19ab36a6ac4d97fb51c02256c43d58d2818deb41", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::io::net::ip::{SocketAddr, Ipv4Addr, Ipv6Addr};\n+use io::net::ip::{SocketAddr, Ipv4Addr, Ipv6Addr};\n \n use cell::Cell;\n use clone::Clone;"}, {"sha": "42546cb3c6a99448c5755c1b7bb9e233dc274d16", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -68,8 +68,8 @@ pub fn default_sched_threads() -> uint {\n }\n \n pub fn dumb_println(args: &fmt::Arguments) {\n-    use rt::io::native::stdio::stderr;\n-    use rt::io::{Writer, io_error, ResourceUnavailable};\n+    use io::native::stdio::stderr;\n+    use io::{Writer, io_error, ResourceUnavailable};\n     use rt::task::Task;\n     use rt::local::Local;\n "}, {"sha": "3bc56d2653a21028f1835fb3b32c4284bfa70819", "filename": "src/libstd/run.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -14,13 +14,13 @@\n \n use cell::Cell;\n use comm::{stream, SharedChan};\n+use io::Reader;\n+use io::process::ProcessExit;\n+use io::process;\n+use io;\n use libc::{pid_t, c_int};\n use libc;\n use prelude::*;\n-use rt::io::process;\n-use rt::io::process::ProcessExit;\n-use rt::io;\n-use rt::io::Reader;\n use task;\n \n /**\n@@ -335,8 +335,8 @@ mod tests {\n     use str;\n     use task::spawn;\n     use unstable::running_on_valgrind;\n-    use rt::io::native::file;\n-    use rt::io::{Writer, Reader};\n+    use io::native::file;\n+    use io::{Writer, Reader};\n \n     #[test]\n     #[cfg(not(target_os=\"android\"))] // FIXME(#10380)"}, {"sha": "8b424c53be0b8aa9513b571c7669ac5b144c2818", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -358,8 +358,8 @@ pub trait ToBytes {\n \n impl<A:IterBytes> ToBytes for A {\n     fn to_bytes(&self, lsb0: bool) -> ~[u8] {\n-        use rt::io::mem;\n-        use rt::io::Writer;\n+        use io::mem;\n+        use io::Writer;\n \n         do mem::with_mem_writer |wr| {\n             do self.iter_bytes(lsb0) |bytes| {"}, {"sha": "0565399bdf4d692a2cf92868229ba7df4daaad5f", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -11,7 +11,7 @@\n use codemap::{Pos, Span};\n use codemap;\n \n-use std::rt::io;\n+use std::io;\n use std::local_data;\n use extra::term;\n "}, {"sha": "b70cb59caaf3b19f8cd3780a3db286ccd95d9d7d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -945,10 +945,10 @@ pub fn std_macros() -> @str {\n         format_args!(|args| { ::std::fmt::writeln($dst, args) }, $($arg)*)\n     ))\n     macro_rules! print (\n-        ($($arg:tt)*) => (format_args!(::std::rt::io::stdio::print_args, $($arg)*))\n+        ($($arg:tt)*) => (format_args!(::std::io::stdio::print_args, $($arg)*))\n     )\n     macro_rules! println (\n-        ($($arg:tt)*) => (format_args!(::std::rt::io::stdio::println_args, $($arg)*))\n+        ($($arg:tt)*) => (format_args!(::std::io::stdio::println_args, $($arg)*))\n     )\n \n     macro_rules! local_data_key (\n@@ -1436,7 +1436,7 @@ mod test {\n     }\n \n     fn fake_print_crate(crate: &ast::Crate) {\n-        let out = @mut std::rt::io::stderr() as @mut std::rt::io::Writer;\n+        let out = @mut std::io::stderr() as @mut std::io::Writer;\n         let s = pprust::rust_printer(out, get_ident_interner());\n         pprust::print_crate_(s, crate);\n     }"}, {"sha": "5a37e0a5ab319bb27f825a078be99e45abf295cf", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -19,8 +19,8 @@ use parse;\n use parse::token::{get_ident_interner};\n use print::pprust;\n \n-use std::rt::io;\n-use std::rt::io::File;\n+use std::io;\n+use std::io::File;\n use std::str;\n \n // These macros all relate to the file system; they either return"}, {"sha": "4d8a6e08d0d07e57924257f77fb495bc59fb1b81", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -18,7 +18,7 @@ use parse::lexer;\n use parse::token;\n use parse::token::{get_ident_interner};\n \n-use std::rt::io;\n+use std::io;\n use std::str;\n use std::uint;\n "}, {"sha": "0e9a529f950b2d55820225777a978693e0db726e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -19,8 +19,8 @@ use parse::attr::parser_attr;\n use parse::lexer::reader;\n use parse::parser::Parser;\n \n-use std::rt::io;\n-use std::rt::io::File;\n+use std::io;\n+use std::io::File;\n use std::str;\n \n pub mod lexer;\n@@ -332,9 +332,9 @@ mod test {\n     use super::*;\n     use extra::serialize::Encodable;\n     use extra;\n-    use std::rt::io;\n-    use std::rt::io::Decorator;\n-    use std::rt::io::mem::MemWriter;\n+    use std::io;\n+    use std::io::Decorator;\n+    use std::io::mem::MemWriter;\n     use std::str;\n     use codemap::{Span, BytePos, Spanned};\n     use opt_vec;"}, {"sha": "9eae40e4c718431a2145cb60d95555fb91542fa4", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -61,7 +61,7 @@\n  * avoid combining it with other lines and making matters even worse.\n  */\n \n-use std::rt::io;\n+use std::io;\n use std::vec;\n \n #[deriving(Clone, Eq)]"}, {"sha": "9c4803474d9d2e4b37e3fb2913b8c2024237910e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -29,9 +29,9 @@ use print::pprust;\n \n use std::char;\n use std::str;\n-use std::rt::io;\n-use std::rt::io::Decorator;\n-use std::rt::io::mem::MemWriter;\n+use std::io;\n+use std::io::Decorator;\n+use std::io::mem::MemWriter;\n \n // The @ps is stored here to prevent recursive type.\n pub enum ann_node<'self> {"}, {"sha": "4f1e267257538607958f606ba288f1a986120106", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -21,7 +21,7 @@ use std::rand;\n use std::str;\n use std::util;\n use std::vec;\n-use std::rt::io::File;\n+use std::io::File;\n \n macro_rules! bench (\n     ($argv:expr, $id:ident) => (maybe_run_test($argv, stringify!($id).to_owned(), $id))\n@@ -70,7 +70,7 @@ fn shift_push() {\n }\n \n fn read_line() {\n-    use std::rt::io::buffered::BufferedReader;\n+    use std::io::buffered::BufferedReader;\n \n     let mut path = Path::new(env!(\"CFG_SRC_DIR\"));\n     path.push(\"src/test/bench/shootout-k-nucleotide.data\");"}, {"sha": "098512e9549153b02d2fee1fb631ee49032f8182", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -18,8 +18,8 @@\n extern mod extra;\n \n use std::int;\n-use std::rt::io;\n-use std::rt::io::File;\n+use std::io;\n+use std::io::File;\n use std::os;\n use std::rand::Rng;\n use std::rand;"}, {"sha": "0937c71f91f4c0b5d180d75aab387b225b463ce4", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -22,7 +22,7 @@ use std::comm;\n use std::hashmap::HashMap;\n use std::option;\n use std::os;\n-use std::rt::io;\n+use std::io;\n use std::str;\n use std::task;\n use std::util;\n@@ -153,10 +153,10 @@ fn make_sequence_processor(sz: uint,\n \n // given a FASTA file on stdin, process sequence THREE\n fn main() {\n-    use std::rt::io::Reader;\n-    use std::rt::io::native::stdio;\n-    use std::rt::io::mem::MemReader;\n-    use std::rt::io::buffered::BufferedReader;\n+    use std::io::Reader;\n+    use std::io::native::stdio;\n+    use std::io::mem::MemReader;\n+    use std::io::buffered::BufferedReader;\n \n     let rdr = if os::getenv(\"RUST_BENCH\").is_some() {\n         let foo = include_bin!(\"shootout-k-nucleotide.data\");"}, {"sha": "8b0b106b732f3dd4abdaef2fe39b2b2499c331b9", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -14,9 +14,9 @@\n \n extern mod extra;\n \n-use std::rt::io;\n-use std::rt::io::stdio::StdReader;\n-use std::rt::io::buffered::BufferedReader;\n+use std::io;\n+use std::io::stdio::StdReader;\n+use std::io::buffered::BufferedReader;\n use std::os;\n use std::uint;\n use std::unstable::intrinsics::cttz16;"}, {"sha": "4a224fd52c9d99ff9fdd3153b58897bc52810906", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -18,7 +18,7 @@\n use std::libc;\n use std::run;\n use std::str;\n-use std::rt::io;\n+use std::io;\n \n #[test]\n fn test_destroy_once() {"}, {"sha": "5812800259b860bc8c5d9c30a678b6d0131f2dce", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -17,8 +17,8 @@\n \n extern mod extra;\n \n-use std::rt::io::mem::MemWriter;\n-use std::rt::io::Decorator;\n+use std::io::mem::MemWriter;\n+use std::io::Decorator;\n use std::rand::{random, Rand};\n use extra::serialize::{Encodable, Decodable};\n use extra::ebml;"}, {"sha": "8e516f748ffd44f19998ede5d5deade316f737e3", "filename": "src/test/run-pass/glob-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fglob-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fglob-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglob-std.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -16,7 +16,7 @@ use extra::glob::glob;\n use extra::tempfile::TempDir;\n use std::unstable::finally::Finally;\n use std::{os, unstable};\n-use std::rt::io;\n+use std::io;\n \n pub fn main() {\n     fn mk_file(path: &str, directory: bool) {"}, {"sha": "04958936fbe2de16faf3a44b7f4cae564fbe33b8", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -14,10 +14,10 @@\n #[deny(warnings)];\n \n use std::fmt;\n-use std::rt::io::Decorator;\n-use std::rt::io::mem::MemWriter;\n-use std::rt::io;\n-use std::rt::io::Writer;\n+use std::io::Decorator;\n+use std::io::mem::MemWriter;\n+use std::io;\n+use std::io::Writer;\n use std::str;\n \n struct A;"}, {"sha": "5208995a0c7cf1e555c018962dfa54405c5ce82d", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -16,7 +16,7 @@\n \n extern mod extra;\n \n-use std::rt::io;\n+use std::io;\n use std::to_str;\n \n enum square {"}, {"sha": "6fb66cd3b1580a2f49f750fb84616fc2ef90cb38", "filename": "src/test/run-pass/issue-4333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4333.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::rt::io;\n+use std::io;\n \n pub fn main() {\n     let stdout = &mut io::stdout() as &mut io::Writer;"}, {"sha": "f9169618c2a3b3c41ecb68beaed91ceff2527a2d", "filename": "src/test/run-pass/issue-8398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8398.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::rt::io;\n+use std::io;\n \n fn foo(a: &mut io::Writer) {\n     a.write([])"}, {"sha": "d20f2bfef3bad4e420ea4dede3b5876f1eb7ac5f", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -17,8 +17,8 @@ extern mod extra;\n use extra::tempfile::TempDir;\n use std::os;\n use std::libc;\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n \n fn rename_directory() {\n     unsafe {"}, {"sha": "00f565324ecda46b31faf6bd0f63638bd5434147", "filename": "src/test/run-pass/rtio-processes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frtio-processes.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -23,9 +23,9 @@\n //\n // See #9341\n \n-use std::rt::io;\n-use std::rt::io::process;\n-use std::rt::io::process::{Process, ProcessConfig, CreatePipe, Ignored};\n+use std::io;\n+use std::io::process;\n+use std::io::process::{Process, ProcessConfig, CreatePipe, Ignored};\n use std::str;\n \n #[test]"}, {"sha": "3773ff5b263b94bdfd265f51cb87dcd4378316f7", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n \n use std::{os, run};\n-use std::rt::io::process;\n+use std::io::process;\n \n fn main() {\n     let args = os::args();"}, {"sha": "b186a6828106285ff19ce4f31d8a06a985392618", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -13,7 +13,7 @@\n extern mod extra;\n \n use extra::tempfile;\n-use std::rt::io::File;\n+use std::io::File;\n \n pub fn main() {\n     let dir = tempfile::TempDir::new_in(&Path::new(\".\"), \"\").unwrap();"}, {"sha": "0a2905099efd27a8ca6dd8fb6922c2e5fbd64a07", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ee49296b65f3d807142f3326bee71dd7e13290/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=49ee49296b65f3d807142f3326bee71dd7e13290", "patch": "@@ -24,8 +24,8 @@ use extra::tempfile::TempDir;\n use std::os;\n use std::task;\n use std::cell::Cell;\n-use std::rt::io;\n-use std::rt::io::fs;\n+use std::io;\n+use std::io::fs;\n \n fn test_tempdir() {\n     let path = {"}]}