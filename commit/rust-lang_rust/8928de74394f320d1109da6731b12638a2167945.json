{"sha": "8928de74394f320d1109da6731b12638a2167945", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MjhkZTc0Mzk0ZjMyMGQxMTA5ZGE2NzMxYjEyNjM4YTIxNjc5NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-19T09:40:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-19T09:40:36Z"}, "message": "Auto merge of #52972 - RalfJung:from_raw_parts_align, r=alexcrichton\n\ndebug_assert to ensure that from_raw_parts is only used properly aligned\n\nThis does not help nearly as much as I would hope because everybody uses the distributed libstd which is compiled without debug assertions. For this reason, I am not sure if this is even worth it. OTOH, this would have caught the misalignment fixed by https://github.com/rust-lang/rust/issues/42789 *if* there had been any tests actually using ZSTs with alignment >1 (we have a CI runner which has debug assertions in libstd enabled), and it seems to currently [fail in the rg testsuite](https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8403/job/v7dfdcgn8ay5j6sb). So maybe it is worth it, after all.\n\nI have seen the attribute `#[rustc_inherit_overflow_checks]` in some places, does that make it so that the *caller's* debug status is relevant? Is there a similar attribute for `debug_assert!`? That could even subsume `rustc_inherit_overflow_checks`: Something like `rustc_inherit_debug_flag` could affect *all* places that change the generated code depending on whether we are in debug or release mode. In fact, given that we have to keep around the MIR for generic functions anyway, is there ever a reason *not* to handle the debug flag that way? I guess currently we apply debug flags like `cfg` so this is dropped early during the MIR pipeline?\n\nEDIT: I learned from @eddyb that because of how `debug_assert!` works, this is not realistic. Well, we could still have it for the rustc CI runs and then maybe, eventually, when libstd gets compiled client-side and there is both a debug and a release build... then this will also benefit users.^^", "tree": {"sha": "61910bae0095a09ecba3eee2331e8abbe7bae010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61910bae0095a09ecba3eee2331e8abbe7bae010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8928de74394f320d1109da6731b12638a2167945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8928de74394f320d1109da6731b12638a2167945", "html_url": "https://github.com/rust-lang/rust/commit/8928de74394f320d1109da6731b12638a2167945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8928de74394f320d1109da6731b12638a2167945/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9fe312b98d5a6b194c4ad1a17dcf258ba9941ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9fe312b98d5a6b194c4ad1a17dcf258ba9941ea", "html_url": "https://github.com/rust-lang/rust/commit/a9fe312b98d5a6b194c4ad1a17dcf258ba9941ea"}, {"sha": "1001b2beee595db76ae9d612134271e4a971fed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1001b2beee595db76ae9d612134271e4a971fed8", "html_url": "https://github.com/rust-lang/rust/commit/1001b2beee595db76ae9d612134271e4a971fed8"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "b1701e4a65451aa82205f0c1af1211ef3e007ae2", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8928de74394f320d1109da6731b12638a2167945/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8928de74394f320d1109da6731b12638a2167945/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=8928de74394f320d1109da6731b12638a2167945", "patch": "@@ -46,6 +46,8 @@ matrix:\n     # slow to run.\n \n     # OSX builders running tests, these run the full test suite.\n+    # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n+    # runners that run `//ignore-debug` tests.\n     #\n     # Note that the compiler is compiled to target 10.8 here because the Xcode\n     # version that we're using, 8.2, cannot compile LLVM for OSX 10.7."}, {"sha": "a3960556d3412f404286d1440e64b1a0d37c294c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8928de74394f320d1109da6731b12638a2167945/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8928de74394f320d1109da6731b12638a2167945/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=8928de74394f320d1109da6731b12638a2167945", "patch": "@@ -1785,6 +1785,7 @@ impl<T> [T] {\n             (self, &[], &[])\n         } else {\n             let (left, rest) = self.split_at(offset);\n+            // now `rest` is definitely aligned, so `from_raw_parts_mut` below is okay\n             let (us_len, ts_len) = rest.align_to_offsets::<U>();\n             (left,\n              from_raw_parts(rest.as_ptr() as *const U, us_len),\n@@ -1837,6 +1838,7 @@ impl<T> [T] {\n             (self, &mut [], &mut [])\n         } else {\n             let (left, rest) = self.split_at_mut(offset);\n+            // now `rest` is definitely aligned, so `from_raw_parts_mut` below is okay\n             let (us_len, ts_len) = rest.align_to_offsets::<U>();\n             let mut_ptr = rest.as_mut_ptr();\n             (left,\n@@ -3878,6 +3880,7 @@ unsafe impl<'a, T> TrustedRandomAccess for ExactChunksMut<'a, T> {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n+    debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n     Repr { raw: FatPtr { data, len } }.rust\n }\n \n@@ -3891,6 +3894,7 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n+    debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n     Repr { raw: FatPtr { data, len} }.rust_mut\n }\n "}, {"sha": "b087ec81f59c67004ef049027eb2aafad792368a", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8928de74394f320d1109da6731b12638a2167945/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8928de74394f320d1109da6731b12638a2167945/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=8928de74394f320d1109da6731b12638a2167945", "patch": "@@ -986,3 +986,17 @@ fn test_align_to_non_trivial() {\n     assert_eq!(aligned.len(), 4);\n     assert_eq!(prefix.len() + suffix.len(), 2);\n }\n+\n+#[test]\n+fn test_align_to_empty_mid() {\n+    use core::mem;\n+\n+    // Make sure that we do not create empty unaligned slices for the mid part, even when the\n+    // overall slice is too short to contain an aligned address.\n+    let bytes = [1, 2, 3, 4, 5, 6, 7];\n+    type Chunk = u32;\n+    for offset in 0..4 {\n+        let (_, mid, _) = unsafe { bytes[offset..offset+1].align_to::<Chunk>() };\n+        assert_eq!(mid.as_ptr() as usize % mem::align_of::<Chunk>(), 0);\n+    }\n+}"}, {"sha": "c44637376d7aa2df0e5e22fe7dfe23a8f7ec6b9c", "filename": "src/test/codegen/vec-clear.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8928de74394f320d1109da6731b12638a2167945/src%2Ftest%2Fcodegen%2Fvec-clear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8928de74394f320d1109da6731b12638a2167945/src%2Ftest%2Fcodegen%2Fvec-clear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-clear.rs?ref=8928de74394f320d1109da6731b12638a2167945", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-debug: the debug assertions get in the way\n // compile-flags: -O\n \n #![crate_type = \"lib\"]"}, {"sha": "05cbf0534441160dcc2073b578be070d768ee55a", "filename": "src/test/codegen/vec-iter-collect-len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8928de74394f320d1109da6731b12638a2167945/src%2Ftest%2Fcodegen%2Fvec-iter-collect-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8928de74394f320d1109da6731b12638a2167945/src%2Ftest%2Fcodegen%2Fvec-iter-collect-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-iter-collect-len.rs?ref=8928de74394f320d1109da6731b12638a2167945", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-debug: the debug assertions get in the way\n // no-system-llvm\n // compile-flags: -O\n #![crate_type=\"lib\"]"}, {"sha": "6bef01fd4ea2dc9e2975114095cabfcf2c86f09e", "filename": "src/test/codegen/vec-optimizes-away.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8928de74394f320d1109da6731b12638a2167945/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8928de74394f320d1109da6731b12638a2167945/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs?ref=8928de74394f320d1109da6731b12638a2167945", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n+// ignore-debug: the debug assertions get in the way\n // no-system-llvm\n // compile-flags: -O\n #![crate_type=\"lib\"]"}, {"sha": "352480543c7e381529f8266e37b47c9cc7a8227e", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8928de74394f320d1109da6731b12638a2167945/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8928de74394f320d1109da6731b12638a2167945/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=8928de74394f320d1109da6731b12638a2167945", "patch": "@@ -33,7 +33,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"ripgrep\",\n         repo: \"https://github.com/BurntSushi/ripgrep\",\n-        sha: \"b65bb37b14655e1a89c7cd19c8b011ef3e312791\",\n+        sha: \"ad9befbc1d3b5c695e7f6b6734ee1b8e683edd41\",\n         lock: None,\n         packages: &[],\n     },"}, {"sha": "3fd67366a8ca4aaac7c0cc18e64ce7612c5e0a87", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8928de74394f320d1109da6731b12638a2167945/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8928de74394f320d1109da6731b12638a2167945/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=8928de74394f320d1109da6731b12638a2167945", "patch": "@@ -615,12 +615,14 @@ impl Config {\n                     common::DebugInfoLldb => name == \"lldb\",\n                     common::Pretty => name == \"pretty\",\n                     _ => false,\n-                } || (self.target != self.host && name == \"cross-compile\") ||\n+                } ||\n+                (self.target != self.host && name == \"cross-compile\") ||\n                 match self.compare_mode {\n                     Some(CompareMode::Nll) => name == \"compare-mode-nll\",\n                     Some(CompareMode::Polonius) => name == \"compare-mode-polonius\",\n                     None => false,\n-                }\n+                } ||\n+                (cfg!(debug_assertions) && name == \"debug\")\n         } else {\n             false\n         }"}]}