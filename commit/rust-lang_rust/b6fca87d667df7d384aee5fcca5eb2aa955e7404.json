{"sha": "b6fca87d667df7d384aee5fcca5eb2aa955e7404", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZmNhODdkNjY3ZGY3ZDM4NGFlZTVmY2NhNWViMmFhOTU1ZTc0MDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T15:48:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T15:48:07Z"}, "message": "Auto merge of #1334 - KrishnaSannasi:track-dealloc, r=RalfJung\n\nadd deallocation tracking\n\nfixes #1314", "tree": {"sha": "62361f64f39c7fa858a1d25886a09843051d18df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62361f64f39c7fa858a1d25886a09843051d18df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6fca87d667df7d384aee5fcca5eb2aa955e7404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fca87d667df7d384aee5fcca5eb2aa955e7404", "html_url": "https://github.com/rust-lang/rust/commit/b6fca87d667df7d384aee5fcca5eb2aa955e7404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6fca87d667df7d384aee5fcca5eb2aa955e7404/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4eceba7d35817494623429a8c43c47cb885c0c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4eceba7d35817494623429a8c43c47cb885c0c2", "html_url": "https://github.com/rust-lang/rust/commit/e4eceba7d35817494623429a8c43c47cb885c0c2"}, {"sha": "b77968e8bd2bc556d0bd3cfb9f7d2521a6896199", "url": "https://api.github.com/repos/rust-lang/rust/commits/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199", "html_url": "https://github.com/rust-lang/rust/commit/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "a86de4a5551900819a1cb9023a1afa939a8aca39", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6fca87d667df7d384aee5fcca5eb2aa955e7404/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b6fca87d667df7d384aee5fcca5eb2aa955e7404/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b6fca87d667df7d384aee5fcca5eb2aa955e7404", "patch": "@@ -192,7 +192,8 @@ Miri adds its own set of `-Z` flags:\n   for cryptographic use!  Do not generate secret keys in Miri or perform other\n   kinds of cryptographic operations that rely on proper random numbers.\n * `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n-  being allocated.  This helps in debugging memory leaks.\n+  being allocated or freed.  This helps in debugging memory leaks and\n+  use after free bugs.\n * `-Zmiri-track-pointer-tag=<tag>` shows a backtrace when the given pointer tag\n   is popped from a borrow stack (which is where the tag becomes invalid and any\n   future use of it will error).  This helps you in finding out why UB is"}, {"sha": "8c7bb8a47c638ae13df3942c8988c215471fbbd7", "filename": "src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6fca87d667df7d384aee5fcca5eb2aa955e7404/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fca87d667df7d384aee5fcca5eb2aa955e7404/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=b6fca87d667df7d384aee5fcca5eb2aa955e7404", "patch": "@@ -42,6 +42,7 @@ impl MachineStopType for TerminationInfo {}\n pub enum NonHaltingDiagnostic {\n     PoppedTrackedPointerTag(Item),\n     CreatedAlloc(AllocId),\n+    FreedAlloc(AllocId),\n }\n \n /// Emit a custom diagnostic without going through the miri-engine machinery\n@@ -191,6 +192,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         format!(\"popped tracked tag for item {:?}\", item),\n                     CreatedAlloc(AllocId(id)) =>\n                         format!(\"created allocation with id {}\", id),\n+                    FreedAlloc(AllocId(id)) =>\n+                        format!(\"freed allocation with id {}\", id),\n                 };\n                 report_msg(this, \"tracking was triggered\", msg, vec![], false);\n             }"}, {"sha": "5cf42df8268b9cbc10f3c638d9dbfe67210ad738", "filename": "src/machine.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6fca87d667df7d384aee5fcca5eb2aa955e7404/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fca87d667df7d384aee5fcca5eb2aa955e7404/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b6fca87d667df7d384aee5fcca5eb2aa955e7404", "patch": "@@ -116,7 +116,7 @@ pub struct MemoryExtra {\n     pub(crate) rng: RefCell<StdRng>,\n \n     /// An allocation ID to report when it is being allocated\n-    /// (helps for debugging memory leaks).\n+    /// (helps for debugging memory leaks and use after free bugs).\n     tracked_alloc_id: Option<AllocId>,\n \n     /// Controls whether alignment of memory accesses is being checked.\n@@ -466,6 +466,18 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         (Cow::Owned(alloc), base_tag)\n     }\n \n+    #[inline(always)]\n+    fn before_deallocation(\n+        memory_extra: &mut Self::MemoryExtra,\n+        id: AllocId,\n+    ) -> InterpResult<'tcx> {\n+        if Some(id) == memory_extra.tracked_alloc_id {\n+            register_diagnostic(NonHaltingDiagnostic::FreedAlloc(id));\n+        }\n+        \n+        Ok(())\n+    }\n+\n     #[inline(always)]\n     fn tag_global_base_pointer(memory_extra: &MemoryExtra, id: AllocId) -> Self::PointerTag {\n         if let Some(stacked_borrows) = &memory_extra.stacked_borrows {"}]}