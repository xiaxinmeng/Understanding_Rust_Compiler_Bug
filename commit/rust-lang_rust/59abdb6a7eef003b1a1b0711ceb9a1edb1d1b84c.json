{"sha": "59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YWJkYjZhN2VlZjAwM2IxYTFiMDcxMWNlYjlhMWVkYjFkMWI4NGM=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2020-07-28T04:25:36Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2020-12-10T20:31:52Z"}, "message": "Mark `-1` as an available niche for file descriptors\n\nBased on discussion from https://internals.rust-lang.org/t/can-the-standard-library-shrink-option-file/12768,\nthe file descriptor -1 is chosen based on the POSIX API designs that use it as a sentinel to report errors.\nA bigger niche could've been chosen, particularly on Linux, but would not necessarily be portable.\n\nThis PR also adds a test case to ensure that the -1 niche\n(which is kind of hacky and has no obvious test case) works correctly.\nIt requires the \"upper\" bound, which is actually -1, to be expressed in two's complement.", "tree": {"sha": "6b6a7ec3769332eae8d899a0987a7c2b7d9437f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b6a7ec3769332eae8d899a0987a7c2b7d9437f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c", "html_url": "https://github.com/rust-lang/rust/commit/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d32c320d7eee56706486fef6be778495303afe9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32c320d7eee56706486fef6be778495303afe9e", "html_url": "https://github.com/rust-lang/rust/commit/d32c320d7eee56706486fef6be778495303afe9e"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "0eeaa68d55a7d69f742198830fe5bcd42df6c4ab", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c", "patch": "@@ -12,6 +12,11 @@ use crate::sys_common::AsInner;\n use libc::{c_int, c_void};\n \n #[derive(Debug)]\n+#[rustc_layout_scalar_valid_range_start(0)]\n+// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n+// 32-bit c_int. Below is -2, in two's complement, but that only works out\n+// because c_int is 32 bits.\n+#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n pub struct FileDesc {\n     fd: c_int,\n }\n@@ -63,7 +68,8 @@ const fn max_iov() -> usize {\n \n impl FileDesc {\n     pub fn new(fd: c_int) -> FileDesc {\n-        FileDesc { fd }\n+        assert_ne!(fd, -1);\n+        unsafe { FileDesc { fd } }\n     }\n \n     pub fn raw(&self) -> c_int {"}, {"sha": "0716cee21c6626a71670081e752d2abdddc11775", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c", "patch": "@@ -15,12 +15,19 @@\n // padding and overall computed sizes can be quite different.\n \n #![feature(start)]\n+#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n use std::num::NonZeroU32;\n \n pub enum MyOption<T> { None, Some(T) }\n \n+#[rustc_layout_scalar_valid_range_start(0)]\n+#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+pub struct MyNotNegativeOne {\n+  _i: i32,\n+}\n+\n impl<T> Default for MyOption<T> {\n     fn default() -> Self { MyOption::None }\n }\n@@ -77,17 +84,18 @@ fn start(_: isize, _: *const *const u8) -> isize {\n     let _a: MyOption<bool> = Default::default();\n     let _b: MyOption<char> = Default::default();\n     let _c: MyOption<std::cmp::Ordering> = Default::default();\n-    let _b: MyOption<MyOption<u8>> = Default::default();\n+    let _d: MyOption<MyOption<u8>> = Default::default();\n     let _e: Enum4<(), char, (), ()> = Enum4::One(());\n     let _f: Enum4<(), (), bool, ()> = Enum4::One(());\n     let _g: Enum4<(), (), (), MyOption<u8>> = Enum4::One(());\n+    let _h: MyOption<MyNotNegativeOne> = Default::default();\n \n     // Unions do not currently participate in niche filling.\n-    let _h: MyOption<Union2<NonZeroU32, u32>> = Default::default();\n+    let _i: MyOption<Union2<NonZeroU32, u32>> = Default::default();\n \n     // ...even when theoretically possible.\n-    let _i: MyOption<Union1<NonZeroU32>> = Default::default();\n-    let _j: MyOption<Union2<NonZeroU32, NonZeroU32>> = Default::default();\n+    let _j: MyOption<Union1<NonZeroU32>> = Default::default();\n+    let _k: MyOption<Union2<NonZeroU32, NonZeroU32>> = Default::default();\n \n     0\n }"}, {"sha": "d1753c26ca83b5949d99b7fbc2318bd05648eec8", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=59abdb6a7eef003b1a1b0711ceb9a1edb1d1b84c", "patch": "@@ -43,6 +43,12 @@ print-type-size     variant `Three`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n print-type-size     variant `Four`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n+print-type-size type: `MyNotNegativeOne`: 4 bytes, alignment: 4 bytes\n+print-type-size     field `._i`: 4 bytes\n+print-type-size type: `MyOption<MyNotNegativeOne>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Some`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size type: `MyOption<char>`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes"}]}