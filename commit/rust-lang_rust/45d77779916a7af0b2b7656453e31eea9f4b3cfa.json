{"sha": "45d77779916a7af0b2b7656453e31eea9f4b3cfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZDc3Nzc5OTE2YTdhZjBiMmI3NjU2NDUzZTMxZWVhOWY0YjNjZmE=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2011-10-28T00:45:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T21:44:39Z"}, "message": "Change behavior of float::nonpositive/nonnegative\n\nRather than being defined as !positive and !negative, these should act the\nsame as negative and positive (respectively).  The only effect of this change\nshould be that all four functions will now return false for NaN.", "tree": {"sha": "1bcad742782d3a0d9da41fcacae7c566d74d21f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bcad742782d3a0d9da41fcacae7c566d74d21f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45d77779916a7af0b2b7656453e31eea9f4b3cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45d77779916a7af0b2b7656453e31eea9f4b3cfa", "html_url": "https://github.com/rust-lang/rust/commit/45d77779916a7af0b2b7656453e31eea9f4b3cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45d77779916a7af0b2b7656453e31eea9f4b3cfa/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000b2fe9a6b18cab1deee9579e8740d7c37a67b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/000b2fe9a6b18cab1deee9579e8740d7c37a67b4", "html_url": "https://github.com/rust-lang/rust/commit/000b2fe9a6b18cab1deee9579e8740d7c37a67b4"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "c7053486ccb5ab9fa3c9950278428a718893fadb", "filename": "src/lib/float.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/45d77779916a7af0b2b7656453e31eea9f4b3cfa/src%2Flib%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d77779916a7af0b2b7656453e31eea9f4b3cfa/src%2Flib%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffloat.rs?ref=45d77779916a7af0b2b7656453e31eea9f4b3cfa", "patch": "@@ -259,17 +259,39 @@ pure fn ge(x: float, y: float) -> bool { ret x >= y; }\n /* Predicate: gt */\n pure fn gt(x: float, y: float) -> bool { ret x > y; }\n \n-/* Predicate: positive */\n+/*\n+Predicate: positive\n+\n+Returns true if `x` is a positive number, including +0.0 and +Infinity.\n+ */\n pure fn positive(x: float) -> bool { ret x > 0. || (1./x) == infinity(); }\n \n-/* Predicate: negative */\n+/*\n+Predicate: negative\n+\n+Returns true if `x` is a negative number, including -0.0 and -Infinity.\n+ */\n pure fn negative(x: float) -> bool { ret x < 0. || (1./x) == neg_infinity(); }\n \n-/* Predicate: nonpositive */\n-pure fn nonpositive(x: float) -> bool { ret !positive(x); }\n+/*\n+Predicate: nonpositive\n+\n+Returns true if `x` is a negative number, including -0.0 and -Infinity.\n+(This is the same as `float::negative`.)\n+*/\n+pure fn nonpositive(x: float) -> bool {\n+  ret x < 0. || (1./x) == neg_infinity();\n+}\n \n-/* Predicate: nonnegative */\n-pure fn nonnegative(x: float) -> bool { ret !negative(x); }\n+/*\n+Predicate: nonnegative\n+\n+Returns true if `x` is a positive number, including +0.0 and +Infinity.\n+(This is the same as `float::positive`.)\n+*/\n+pure fn nonnegative(x: float) -> bool {\n+  ret x > 0. || (1./x) == infinity();\n+}\n \n //\n // Local Variables:"}, {"sha": "d9de78b60090a574fe0fb68b3173d618a6f02f09", "filename": "src/test/stdtest/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45d77779916a7af0b2b7656453e31eea9f4b3cfa/src%2Ftest%2Fstdtest%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d77779916a7af0b2b7656453e31eea9f4b3cfa/src%2Ftest%2Fstdtest%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffloat.rs?ref=45d77779916a7af0b2b7656453e31eea9f4b3cfa", "patch": "@@ -47,7 +47,7 @@ fn test_nonpositive() {\n   assert(float::nonpositive(-1.));\n   assert(float::nonpositive(float::neg_infinity()));\n   assert(float::nonpositive(1./float::neg_infinity()));\n-  // TODO: assert(!float::nonpositive(float::NaN()));\n+  assert(!float::nonpositive(float::NaN()));\n }\n \n #[test]\n@@ -58,5 +58,5 @@ fn test_nonnegative() {\n   assert(!float::nonnegative(-1.));\n   assert(!float::nonnegative(float::neg_infinity()));\n   assert(!float::nonnegative(1./float::neg_infinity()));\n-  // TODO: assert(!float::nonnegative(float::NaN()));\n+  assert(!float::nonnegative(float::NaN()));\n }"}]}