{"sha": "e2a7e9451881d3b9d1eba7336c657d56558f812e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYTdlOTQ1MTg4MWQzYjlkMWViYTczMzZjNjU3ZDU2NTU4ZjgxMmU=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-20T10:50:40Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-20T13:33:00Z"}, "message": "Ensure that the parser tests pass or fail correctly", "tree": {"sha": "471a6d5d816c447444460ef2251078010838e43c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/471a6d5d816c447444460ef2251078010838e43c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2a7e9451881d3b9d1eba7336c657d56558f812e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a7e9451881d3b9d1eba7336c657d56558f812e", "html_url": "https://github.com/rust-lang/rust/commit/e2a7e9451881d3b9d1eba7336c657d56558f812e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2a7e9451881d3b9d1eba7336c657d56558f812e/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346456f59ff5eaa653cf8a4b7e0c6672ef1f0566", "url": "https://api.github.com/repos/rust-lang/rust/commits/346456f59ff5eaa653cf8a4b7e0c6672ef1f0566", "html_url": "https://github.com/rust-lang/rust/commit/346456f59ff5eaa653cf8a4b7e0c6672ef1f0566"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "539c4435b2408653611d1acd3f6a08785195e097", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e2a7e9451881d3b9d1eba7336c657d56558f812e/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2a7e9451881d3b9d1eba7336c657d56558f812e/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=e2a7e9451881d3b9d1eba7336c657d56558f812e", "patch": "@@ -16,18 +16,36 @@ use ra_syntax::{\n \n #[test]\n fn lexer_tests() {\n-    dir_tests(&[\"lexer\"], |text| {\n+    dir_tests(&[\"lexer\"], |text, _| {\n         let tokens = ra_syntax::tokenize(text);\n         dump_tokens(&tokens, text)\n     })\n }\n \n #[test]\n fn parser_tests() {\n-    dir_tests(&[\"parser/inline\", \"parser/ok\", \"parser/err\"], |text| {\n+    dir_tests(&[\"parser/inline\", \"parser/ok\"], |text, path| {\n         let file = SourceFileNode::parse(text);\n+        let errors = file.errors();\n+        assert_eq!(\n+            &*errors,\n+            &[] as &[ra_syntax::SyntaxError],\n+            \"There should be no errors in the file {:?}\",\n+            path.display()\n+        );\n         dump_tree(file.syntax())\n-    })\n+    });\n+    dir_tests(&[\"parser/err\"], |text, path| {\n+        let file = SourceFileNode::parse(text);\n+        let errors = file.errors();\n+        assert_ne!(\n+            &*errors,\n+            &[] as &[ra_syntax::SyntaxError],\n+            \"There should be errors in the file {:?}\",\n+            path.display()\n+        );\n+        dump_tree(file.syntax())\n+    });\n }\n \n #[test]\n@@ -42,7 +60,6 @@ fn parser_fuzz_tests() {\n #[test]\n fn self_hosting_parsing() {\n     use std::ffi::OsStr;\n-    let empty_vec = vec![];\n     let dir = project_dir().join(\"crates\");\n     let mut count = 0;\n     for entry in walkdir::WalkDir::new(dir)\n@@ -68,7 +85,8 @@ fn self_hosting_parsing() {\n         let node = SourceFileNode::parse(&text);\n         let errors = node.errors();\n         assert_eq!(\n-            errors, empty_vec,\n+            &*errors,\n+            &[],\n             \"There should be no errors in the file {:?}\",\n             entry\n         );\n@@ -95,12 +113,12 @@ fn read_text(path: &Path) -> String {\n         .replace(\"\\r\\n\", \"\\n\")\n }\n \n-pub fn dir_tests<F>(paths: &[&str], f: F)\n+fn dir_tests<F>(paths: &[&str], f: F)\n where\n-    F: Fn(&str) -> String,\n+    F: Fn(&str, &Path) -> String,\n {\n     for (path, input_code) in collect_tests(paths) {\n-        let parse_tree = f(&input_code);\n+        let parse_tree = f(&input_code, &path);\n         let path = path.with_extension(\"txt\");\n         if !path.exists() {\n             println!(\"\\nfile: {}\", path.display());"}]}