{"sha": "6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "node_id": "C_kwDOAAsO6NoAKDZjMTc2MDFhMmU2ZmE1NWU1ZDJlYzcyODQzNTliZWU5MzFjMGM2MWE", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-08T03:26:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-08T03:26:11Z"}, "message": "Rollup merge of #89025 - ricobbe:raw-dylib-link-ordinal, r=michaelwoerister\n\nImplement `#[link_ordinal(n)]`\n\nAllows the use of `#[link_ordinal(n)]` with `#[link(kind = \"raw-dylib\")]`, allowing Rust to link against DLLs that export symbols by ordinal rather than by name.  As long as the ordinal matches, the name of the function in Rust is not required to match the name of the corresponding function in the exporting DLL.\n\nPart of #58713.", "tree": {"sha": "cb4a16d19fd744ee5bf6bd608b59b5b1c822044b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb4a16d19fd744ee5bf6bd608b59b5b1c822044b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhX7pUCRBK7hj4Ov3rIwAAGPwIADBYSsYBl3D4HBjhGoNUkShE\n7+AO+CNnesT84ydeyauGh+StobYWUAe+7cDxuLIC8Z4ywgXjrYkwsV+CLcRzMZFl\n89m3mbYurnDDbQ+A4h1oIlAxx/3T4OPET7VS6eddABxAxO7KxWNR9qZsj3lmaDuk\nXKpJk2TwjPaqWDIyNvC8IeqbXNRcUBgPnuzkgZ1s4tlHWN9Ht4y0XdLsB/52Uatv\ngHlyJMsNCj3EvrNgLlcTcDLkAa+j0o1MrFX+nkZJASZemQVv7nA2z5HM+qTTPR7a\nw52kr4A4KvTknjrZblneFGNVmLeRhF8piZR0g6y/GYOk/uvpzWurm63HYr7zoVQ=\n=zcGt\n-----END PGP SIGNATURE-----\n", "payload": "tree cb4a16d19fd744ee5bf6bd608b59b5b1c822044b\nparent 2b6d7f75f7f5ac0bce2265b0e33256356441ccba\nparent 142f6c0b078ceef1dc817c418f628d350551f6e4\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633663571 -0700\ncommitter GitHub <noreply@github.com> 1633663571 -0700\n\nRollup merge of #89025 - ricobbe:raw-dylib-link-ordinal, r=michaelwoerister\n\nImplement `#[link_ordinal(n)]`\n\nAllows the use of `#[link_ordinal(n)]` with `#[link(kind = \"raw-dylib\")]`, allowing Rust to link against DLLs that export symbols by ordinal rather than by name.  As long as the ordinal matches, the name of the function in Rust is not required to match the name of the corresponding function in the exporting DLL.\n\nPart of #58713.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "html_url": "https://github.com/rust-lang/rust/commit/6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b6d7f75f7f5ac0bce2265b0e33256356441ccba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b6d7f75f7f5ac0bce2265b0e33256356441ccba", "html_url": "https://github.com/rust-lang/rust/commit/2b6d7f75f7f5ac0bce2265b0e33256356441ccba"}, {"sha": "142f6c0b078ceef1dc817c418f628d350551f6e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/142f6c0b078ceef1dc817c418f628d350551f6e4", "html_url": "https://github.com/rust-lang/rust/commit/142f6c0b078ceef1dc817c418f628d350551f6e4"}], "stats": {"total": 224, "additions": 201, "deletions": 23}, "files": [{"sha": "2fb5a0f9faf8269492f5d4b45ed0b949d389ee2a", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -163,13 +163,13 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n         // All import names are Rust identifiers and therefore cannot contain \\0 characters.\n         // FIXME: when support for #[link_name] implemented, ensure that import.name values don't\n         // have any \\0 characters\n-        let import_name_vector: Vec<CString> = dll_imports\n+        let import_name_and_ordinal_vector: Vec<(CString, Option<u16>)> = dll_imports\n             .iter()\n             .map(|import: &DllImport| {\n                 if self.config.sess.target.arch == \"x86\" {\n-                    LlvmArchiveBuilder::i686_decorated_name(import)\n+                    (LlvmArchiveBuilder::i686_decorated_name(import), import.ordinal)\n                 } else {\n-                    CString::new(import.name.to_string()).unwrap()\n+                    (CString::new(import.name.to_string()).unwrap(), import.ordinal)\n                 }\n             })\n             .collect();\n@@ -184,9 +184,9 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             dll_imports.iter().map(|import| import.name.to_string()).collect::<Vec<_>>().join(\", \"),\n         );\n \n-        let ffi_exports: Vec<LLVMRustCOFFShortExport> = import_name_vector\n+        let ffi_exports: Vec<LLVMRustCOFFShortExport> = import_name_and_ordinal_vector\n             .iter()\n-            .map(|name_z| LLVMRustCOFFShortExport::from_name(name_z.as_ptr()))\n+            .map(|(name_z, ordinal)| LLVMRustCOFFShortExport::new(name_z.as_ptr(), *ordinal))\n             .collect();\n         let result = unsafe {\n             crate::llvm::LLVMRustWriteImportLibrary("}, {"sha": "63eca00de2a4fdff3a2ecb946970114ebb556ee2", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -34,11 +34,18 @@ pub enum LLVMRustResult {\n #[repr(C)]\n pub struct LLVMRustCOFFShortExport {\n     pub name: *const c_char,\n+    pub ordinal_present: bool,\n+    // value of `ordinal` only important when `ordinal_present` is true\n+    pub ordinal: u16,\n }\n \n impl LLVMRustCOFFShortExport {\n-    pub fn from_name(name: *const c_char) -> LLVMRustCOFFShortExport {\n-        LLVMRustCOFFShortExport { name }\n+    pub fn new(name: *const c_char, ordinal: Option<u16>) -> LLVMRustCOFFShortExport {\n+        LLVMRustCOFFShortExport {\n+            name,\n+            ordinal_present: ordinal.is_some(),\n+            ordinal: ordinal.unwrap_or(0),\n+        }\n     }\n }\n "}, {"sha": "b7b0524e2a38867091a878f27b093f220d7142ce", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -1753,10 +1753,11 @@ LLVMRustBuildMaxNum(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS) {\n }\n \n // This struct contains all necessary info about a symbol exported from a DLL.\n-// At the moment, it's just the symbol's name, but we use a separate struct to\n-// make it easier to add other information like ordinal later.\n struct LLVMRustCOFFShortExport {\n   const char* name;\n+  bool ordinal_present;\n+  // The value of `ordinal` is only meaningful if `ordinal_present` is true.\n+  uint16_t ordinal;\n };\n \n // Machine must be a COFF machine type, as defined in PE specs.\n@@ -1772,13 +1773,15 @@ extern \"C\" LLVMRustResult LLVMRustWriteImportLibrary(\n   ConvertedExports.reserve(NumExports);\n \n   for (size_t i = 0; i < NumExports; ++i) {\n+    bool ordinal_present = Exports[i].ordinal_present;\n+    uint16_t ordinal = ordinal_present ? Exports[i].ordinal : 0;\n     ConvertedExports.push_back(llvm::object::COFFShortExport{\n       Exports[i].name,  // Name\n       std::string{},    // ExtName\n       std::string{},    // SymbolName\n       std::string{},    // AliasTarget\n-      0,                // Ordinal\n-      false,            // Noname\n+      ordinal,          // Ordinal\n+      ordinal_present,  // Noname\n       false,            // Data\n       false,            // Private\n       false             // Constant"}, {"sha": "a744676590066f87a39026599e95ad7ef5ed9712", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -433,6 +433,12 @@ impl Collector<'tcx> {\n                 }\n             }\n         };\n-        DllImport { name: item.ident.name, ordinal: None, calling_convention, span: item.span }\n+\n+        DllImport {\n+            name: item.ident.name,\n+            ordinal: self.tcx.codegen_fn_attrs(item.id.def_id).link_ordinal,\n+            calling_convention,\n+            span: item.span,\n+        }\n     }\n }"}, {"sha": "b054d21adaa139354d5c3ba05fe70d18fd19e1d7", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -22,7 +22,7 @@ pub struct CodegenFnAttrs {\n     /// imported function has in the dynamic library. Note that this must not\n     /// be set when `link_name` is set. This is for foreign items with the\n     /// \"raw-dylib\" kind.\n-    pub link_ordinal: Option<usize>,\n+    pub link_ordinal: Option<u16>,\n     /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n     /// features (only enabled features are supported right now).\n     pub target_features: Vec<Symbol>,"}, {"sha": "df7f2aea9c3ac08ec51b1dc406ff1065d8a091ea", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -2861,6 +2861,14 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::link_name) {\n             codegen_fn_attrs.link_name = attr.value_str();\n         } else if attr.has_name(sym::link_ordinal) {\n+            if link_ordinal_span.is_some() {\n+                tcx.sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"multiple `link_ordinal` attributes on a single definition\",\n+                    )\n+                    .emit();\n+            }\n             link_ordinal_span = Some(attr.span);\n             if let ordinal @ Some(_) = check_link_ordinal(tcx, attr) {\n                 codegen_fn_attrs.link_ordinal = ordinal;\n@@ -3156,22 +3164,41 @@ fn should_inherit_track_caller(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     false\n }\n \n-fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<usize> {\n+fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<u16> {\n     use rustc_ast::{Lit, LitIntType, LitKind};\n     let meta_item_list = attr.meta_item_list();\n     let meta_item_list: Option<&[ast::NestedMetaItem]> = meta_item_list.as_ref().map(Vec::as_ref);\n     let sole_meta_list = match meta_item_list {\n         Some([item]) => item.literal(),\n+        Some(_) => {\n+            tcx.sess\n+                .struct_span_err(attr.span, \"incorrect number of arguments to `#[link_ordinal]`\")\n+                .note(\"the attribute requires exactly one argument\")\n+                .emit();\n+            return None;\n+        }\n         _ => None,\n     };\n     if let Some(Lit { kind: LitKind::Int(ordinal, LitIntType::Unsuffixed), .. }) = sole_meta_list {\n-        if *ordinal <= usize::MAX as u128 {\n-            Some(*ordinal as usize)\n+        // According to the table at https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#import-header,\n+        // the ordinal must fit into 16 bits.  Similarly, the Ordinal field in COFFShortExport (defined\n+        // in llvm/include/llvm/Object/COFFImportFile.h), which we use to communicate import information\n+        // to LLVM for `#[link(kind = \"raw-dylib\"_])`, is also defined to be uint16_t.\n+        //\n+        // FIXME: should we allow an ordinal of 0?  The MSVC toolchain has inconsistent support for this:\n+        // both LINK.EXE and LIB.EXE signal errors and abort when given a .DEF file that specifies\n+        // a zero ordinal.  However, llvm-dlltool is perfectly happy to generate an import library\n+        // for such a .DEF file, and MSVC's LINK.EXE is also perfectly happy to consume an import\n+        // library produced by LLVM with an ordinal of 0, and it generates an .EXE.  (I don't know yet\n+        // if the resulting EXE runs, as I haven't yet built the necessary DLL -- see earlier comment\n+        // about LINK.EXE failing.)\n+        if *ordinal <= u16::MAX as u128 {\n+            Some(*ordinal as u16)\n         } else {\n             let msg = format!(\"ordinal value in `link_ordinal` is too large: `{}`\", &ordinal);\n             tcx.sess\n                 .struct_span_err(attr.span, &msg)\n-                .note(\"the value may not exceed `usize::MAX`\")\n+                .note(\"the value may not exceed `u16::MAX`\")\n                 .emit();\n             None\n         }"}, {"sha": "04b257d063204d6c044d3f71c7ff53529fde583e", "filename": "src/test/run-make/raw-dylib-link-ordinal/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,18 @@\n+# Test the behavior of #[link(.., kind = \"raw-dylib\")] and #[link_ordinal] on windows-msvc\n+\n+# only-windows-msvc\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/exporter.obj,exporter.c)\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n+\t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/output.txt output.txt\n+else\n+\t$(DIFF) output.txt \"$(TMPDIR)\"/output.txt\n+endif"}, {"sha": "4059ede11fc96ec7363aefdc0209442030390d80", "filename": "src/test/run-make/raw-dylib-link-ordinal/driver.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fdriver.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,5 @@\n+extern crate raw_dylib_test;\n+\n+fn main() {\n+    raw_dylib_test::library_function();\n+}"}, {"sha": "a9dd6da6616f9ac078294e295a7924f4617d118a", "filename": "src/test/run-make/raw-dylib-link-ordinal/exporter.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.c", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.c?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,5 @@\n+#include <stdio.h>\n+\n+void exported_function() {\n+    printf(\"exported_function\\n\");\n+}"}, {"sha": "1a4b4c941b65d05f6d3c693d0a7dada240403d05", "filename": "src/test/run-make/raw-dylib-link-ordinal/exporter.def", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.def", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.def?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,3 @@\n+LIBRARY exporter\n+EXPORTS\n+    exported_function @13 NONAME"}, {"sha": "20609caa5be21129353c77f56d2a7f6915783247", "filename": "src/test/run-make/raw-dylib-link-ordinal/lib.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Flib.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,13 @@\n+#![feature(raw_dylib)]\n+\n+#[link(name = \"exporter\", kind = \"raw-dylib\")]\n+extern {\n+    #[link_ordinal(13)]\n+    fn imported_function();\n+}\n+\n+pub fn library_function() {\n+    unsafe {\n+        imported_function();\n+    }\n+}"}, {"sha": "2d0ed60f2166788133ef9ec72e76c831c34b8ead", "filename": "src/test/run-make/raw-dylib-link-ordinal/output.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Foutput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Foutput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Foutput.txt?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1 @@\n+exported_function"}, {"sha": "c391ccd1c822766543bd273b475c76602ab14f1b", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-missing-argument.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,11 @@\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {\n+    #[link_ordinal()]\n+    //~^ ERROR incorrect number of arguments to `#[link_ordinal]`\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "8e9edfb9d20ac6553d60646237ce26dccc1e4d78", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-missing-argument.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.stderr?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/link-ordinal-missing-argument.rs:1:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: incorrect number of arguments to `#[link_ordinal]`\n+  --> $DIR/link-ordinal-missing-argument.rs:6:5\n+   |\n+LL |     #[link_ordinal()]\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the attribute requires exactly one argument\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "987412126771778a502f7a747337f9aa86f700dc", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-multiple.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,13 @@\n+// only-windows-msvc\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+extern \"C\" {\n+    #[link_ordinal(1)]\n+    #[link_ordinal(2)]\n+    //~^ ERROR multiple `link_ordinal` attributes on a single definition\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "a79fb2de94402c377ba484aa13caab3ac71376b9", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-multiple.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.stderr?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/link-ordinal-multiple.rs:2:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: multiple `link_ordinal` attributes on a single definition\n+  --> $DIR/link-ordinal-multiple.rs:8:5\n+   |\n+LL |     #[link_ordinal(2)]\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "b6089d27e7ab731e2e15429d498b361fdb6a9765", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -3,8 +3,8 @@\n \n #[link(name = \"foo\")]\n extern \"C\" {\n-    #[link_ordinal(18446744073709551616)]\n-    //~^ ERROR ordinal value in `link_ordinal` is too large: `18446744073709551616`\n+    #[link_ordinal(72436)]\n+    //~^ ERROR ordinal value in `link_ordinal` is too large: `72436`\n     fn foo();\n }\n "}, {"sha": "bbe985fa10ada35d30e2c687603a89df52f51c43", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -7,13 +7,13 @@ LL | #![feature(raw_dylib)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n \n-error: ordinal value in `link_ordinal` is too large: `18446744073709551616`\n+error: ordinal value in `link_ordinal` is too large: `72436`\n   --> $DIR/link-ordinal-too-large.rs:6:5\n    |\n-LL |     #[link_ordinal(18446744073709551616)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[link_ordinal(72436)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the value may not exceed `usize::MAX`\n+   = note: the value may not exceed `u16::MAX`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "93286c616c5ac55ada64fc3ddc75dbf3cb5e58fc", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-many-arguments.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.rs?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,11 @@\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {\n+    #[link_ordinal(3, 4)]\n+    //~^ ERROR incorrect number of arguments to `#[link_ordinal]`\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "484c85a0f422a9bada710f70b6531bc6e213a8b8", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-many-arguments.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c17601a2e6fa55e5d2ec7284359bee931c0c61a/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.stderr?ref=6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/link-ordinal-too-many-arguments.rs:1:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: incorrect number of arguments to `#[link_ordinal]`\n+  --> $DIR/link-ordinal-too-many-arguments.rs:6:5\n+   |\n+LL |     #[link_ordinal(3, 4)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the attribute requires exactly one argument\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}