{"sha": "c091b5c84caccab856f0b604b4dbc88c319fe92f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOTFiNWM4NGNhY2NhYjg1NmYwYjYwNGI0ZGJjODhjMzE5ZmU5MmY=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-28T15:43:57Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-06T10:25:18Z"}, "message": "Remove a useless feature gateing\n\nWith the planned lazy TAIT system, this will not really make sense anymore anyway.", "tree": {"sha": "2f771b5746aeb0cfe23114bd9d801deda5c110ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f771b5746aeb0cfe23114bd9d801deda5c110ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c091b5c84caccab856f0b604b4dbc88c319fe92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c091b5c84caccab856f0b604b4dbc88c319fe92f", "html_url": "https://github.com/rust-lang/rust/commit/c091b5c84caccab856f0b604b4dbc88c319fe92f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c091b5c84caccab856f0b604b4dbc88c319fe92f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a30b548919715737817d8b66ee7867503188bbca", "url": "https://api.github.com/repos/rust-lang/rust/commits/a30b548919715737817d8b66ee7867503188bbca", "html_url": "https://github.com/rust-lang/rust/commit/a30b548919715737817d8b66ee7867503188bbca"}], "stats": {"total": 105, "additions": 5, "deletions": 100}, "files": [{"sha": "558dd5691bbc1a308c2833d6c8a418f7a52d7053", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 63, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c091b5c84caccab856f0b604b4dbc88c319fe92f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c091b5c84caccab856f0b604b4dbc88c319fe92f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=c091b5c84caccab856f0b604b4dbc88c319fe92f", "patch": "@@ -94,69 +94,8 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     let declared_ret_ty = fn_sig.output();\n \n-    let feature = match tcx.hir().get(fn_id) {\n-        // TAIT usage in function return position.\n-        // Example:\n-        //\n-        // ```rust\n-        // type Foo = impl Debug;\n-        // fn bar() -> Foo { 42 }\n-        // ```\n-        Node::Item(hir::Item { kind: ItemKind::Fn(..), .. }) |\n-        // TAIT usage in associated function return position.\n-        //\n-        // Example with a free type alias:\n-        //\n-        // ```rust\n-        // type Foo = impl Debug;\n-        // impl SomeTrait for SomeType {\n-        //     fn bar() -> Foo { 42 }\n-        // }\n-        // ```\n-        //\n-        // Example with an associated TAIT:\n-        //\n-        // ```rust\n-        // impl SomeTrait for SomeType {\n-        //     type Foo = impl Debug;\n-        //     fn bar() -> Self::Foo { 42 }\n-        // }\n-        // ```\n-        Node::ImplItem(hir::ImplItem {\n-            kind: hir::ImplItemKind::Fn(..), ..\n-        }) => None,\n-        // Forbid TAIT in trait declarations for now.\n-        // Examples:\n-        //\n-        // ```rust\n-        // type Foo = impl Debug;\n-        // trait Bar {\n-        //     fn bar() -> Foo;\n-        // }\n-        // trait Bop {\n-        //     type Bop: PartialEq<Foo>;\n-        // }\n-        // ```\n-        Node::TraitItem(hir::TraitItem {\n-            kind: hir::TraitItemKind::Fn(..),\n-            ..\n-        }) |\n-        // Forbid TAIT in closure return position for now.\n-        // Example:\n-        //\n-        // ```rust\n-        // type Foo = impl Debug;\n-        // let x = |y| -> Foo { 42 + y };\n-        // ```\n-        Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => Some(sym::type_alias_impl_trait),\n-        node => bug!(\"Item being checked wasn't a function/closure: {:?}\", node),\n-    };\n-    let revealed_ret_ty = fcx.instantiate_opaque_types_from_value(\n-        fn_id,\n-        declared_ret_ty,\n-        decl.output.span(),\n-        feature,\n-    );\n+    let revealed_ret_ty =\n+        fcx.instantiate_opaque_types_from_value(fn_id, declared_ret_ty, decl.output.span());\n     debug!(\"check_fn: declared_ret_ty: {}, revealed_ret_ty: {}\", declared_ret_ty, revealed_ret_ty);\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(revealed_ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());"}, {"sha": "b59ddc43c37ccd0f5731b68a3be02157acb8b802", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c091b5c84caccab856f0b604b4dbc88c319fe92f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c091b5c84caccab856f0b604b4dbc88c319fe92f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=c091b5c84caccab856f0b604b4dbc88c319fe92f", "patch": "@@ -29,12 +29,11 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_session::lint::builtin::BARE_TRAIT_OBJECTS;\n-use rustc_session::parse::feature_err;\n use rustc_span::edition::Edition;\n+use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n-use rustc_span::{hygiene::DesugaringKind, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n@@ -368,7 +367,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         parent_id: hir::HirId,\n         value: T,\n         value_span: Span,\n-        feature: Option<Symbol>,\n     ) -> T {\n         let parent_def_id = self.tcx.hir().local_def_id(parent_id);\n         debug!(\n@@ -388,19 +386,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut infcx = self.infcx.inner.borrow_mut();\n \n         for (ty, decl) in opaque_type_map {\n-            if let Some(feature) = feature {\n-                if let hir::OpaqueTyOrigin::TyAlias = decl.origin {\n-                    if !self.tcx.features().enabled(feature) {\n-                        feature_err(\n-                            &self.tcx.sess.parse_sess,\n-                            feature,\n-                            value_span,\n-                            \"type alias impl trait is not permitted here\",\n-                        )\n-                        .emit();\n-                    }\n-                }\n-            }\n             let _ = infcx.opaque_types.insert(ty, decl);\n             let _ = infcx.opaque_types_vars.insert(decl.concrete_ty, decl.opaque_type);\n         }"}, {"sha": "29301767d3d69154655835995456a6e6abd86910", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c091b5c84caccab856f0b604b4dbc88c319fe92f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c091b5c84caccab856f0b604b4dbc88c319fe92f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=c091b5c84caccab856f0b604b4dbc88c319fe92f", "patch": "@@ -11,7 +11,6 @@ impl Bug for &() {\n     //~^ ERROR the trait bound `(): Bug` is not satisfied\n \n     const FUN: fn() -> Self::Item = || ();\n-    //~^ ERROR type alias impl trait is not permitted here\n }\n \n fn main() {}"}, {"sha": "1e29ccd24b9a63a8382ebd94c2ffa7c6b0f9dc57", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c091b5c84caccab856f0b604b4dbc88c319fe92f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c091b5c84caccab856f0b604b4dbc88c319fe92f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=c091b5c84caccab856f0b604b4dbc88c319fe92f", "patch": "@@ -7,15 +7,6 @@ LL |     type Item = impl Bug;\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-60371.rs:13:40\n-   |\n-LL |     const FUN: fn() -> Self::Item = || ();\n-   |                                        ^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:17\n    |\n@@ -25,7 +16,7 @@ LL |     type Item = impl Bug;\n    = help: the following implementations were found:\n              <&() as Bug>\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0658.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "72c22827f624bc039e2ca161767b7d7734f1daa0", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c091b5c84caccab856f0b604b4dbc88c319fe92f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c091b5c84caccab856f0b604b4dbc88c319fe92f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs?ref=c091b5c84caccab856f0b604b4dbc88c319fe92f", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -Zsave-analysis\n+// check-pass\n \n #![feature(type_alias_impl_trait, rustc_attrs)]\n \n@@ -11,9 +12,7 @@ type T = impl Sized;\n \n fn take(_: fn() -> T) {}\n \n-#[rustc_error]\n fn main() {\n-    //~^ ERROR fatal error triggered by #[rustc_error]\n     take(|| {});\n     take(|| {});\n }"}, {"sha": "f3683f2bf96075822fe70b9e42ac9cd542fb994f", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a30b548919715737817d8b66ee7867503188bbca/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a30b548919715737817d8b66ee7867503188bbca/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.stderr?ref=a30b548919715737817d8b66ee7867503188bbca", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:15:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}]}