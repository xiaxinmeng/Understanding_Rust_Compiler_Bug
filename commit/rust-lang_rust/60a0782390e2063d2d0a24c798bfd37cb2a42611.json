{"sha": "60a0782390e2063d2d0a24c798bfd37cb2a42611", "node_id": "C_kwDOAAsO6NoAKDYwYTA3ODIzOTBlMjA2M2QyZDBhMjRjNzk4YmZkMzdjYjJhNDI2MTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-26T22:03:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-13T15:29:01Z"}, "message": "fix and extend dropck documentation", "tree": {"sha": "d462120b180613cc447cc1e557f9b4264b51ebf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d462120b180613cc447cc1e557f9b4264b51ebf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a0782390e2063d2d0a24c798bfd37cb2a42611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a0782390e2063d2d0a24c798bfd37cb2a42611", "html_url": "https://github.com/rust-lang/rust/commit/60a0782390e2063d2d0a24c798bfd37cb2a42611", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a0782390e2063d2d0a24c798bfd37cb2a42611/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d91939bb7130a8e6c092a290b7d37f654e3c23c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d91939bb7130a8e6c092a290b7d37f654e3c23c", "html_url": "https://github.com/rust-lang/rust/commit/2d91939bb7130a8e6c092a290b7d37f654e3c23c"}], "stats": {"total": 82, "additions": 71, "deletions": 11}, "files": [{"sha": "de285c99cb1f95376ef0921af457c4a51de29501", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/60a0782390e2063d2d0a24c798bfd37cb2a42611/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a0782390e2063d2d0a24c798bfd37cb2a42611/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=60a0782390e2063d2d0a24c798bfd37cb2a42611", "patch": "@@ -668,24 +668,17 @@ impl<T: ?Sized> !Sync for *mut T {}\n ///\n /// ## Ownership and the drop check\n ///\n-/// Adding a field of type `PhantomData<T>` indicates that your\n-/// type owns data of type `T`. This in turn implies that when your\n-/// type is dropped, it may drop one or more instances of the type\n-/// `T`. This has bearing on the Rust compiler's [drop check]\n-/// analysis.\n-///\n-/// If your struct does not in fact *own* the data of type `T`, it is\n-/// better to use a reference type, like `PhantomData<&'a T>`\n-/// (ideally) or `PhantomData<*const T>` (if no lifetime applies), so\n-/// as not to indicate ownership.\n+/// Adding a field of type `PhantomData<T>` indicates that your type *owns* data of type `T`. This\n+/// in turn has effects on the Rust compiler's [drop check] analysis, but that only matters in very\n+/// specific circumstances. For the exact rules, see the [drop check] documentation.\n ///\n /// ## Layout\n ///\n /// For all `T`, the following are guaranteed:\n /// * `size_of::<PhantomData<T>>() == 0`\n /// * `align_of::<PhantomData<T>>() == 1`\n ///\n-/// [drop check]: ../../nomicon/dropck.html\n+/// [drop check]: Drop#drop-check\n #[lang = \"phantom_data\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T: ?Sized>;"}, {"sha": "804d2c775fc02683b286ada5f7a51c18f45411d4", "filename": "library/core/src/ops/drop.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/60a0782390e2063d2d0a24c798bfd37cb2a42611/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a0782390e2063d2d0a24c798bfd37cb2a42611/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs?ref=60a0782390e2063d2d0a24c798bfd37cb2a42611", "patch": "@@ -132,6 +132,73 @@\n /// are `Copy` get implicitly duplicated by the compiler, making it very\n /// hard to predict when, and how often destructors will be executed. As such,\n /// these types cannot have destructors.\n+///\n+/// ## Drop check\n+///\n+/// Dropping interacts with the borrow checker in subtle ways: when a type `T` is being implicitly\n+/// dropped as some variable of this type goes out of scope, the borrow checker needs to ensure that\n+/// calling `T`'s destructor at this moment is safe. In particular, it also needs to be safe to\n+/// recursively drop all the fields of `T`. For example, it is crucial that code like the following\n+/// is being rejected:\n+///\n+/// ```compile_fail,E0597\n+/// use std::cell::Cell;\n+///\n+/// struct S<'a>(Cell<Option<&'a S<'a>>>, Box<i32>);\n+/// impl Drop for S<'_> {\n+///     fn drop(&mut self) {\n+///         if let Some(r) = self.0.get() {\n+///             // Print the contents of the `Box` in `r`.\n+///             println!(\"{}\", r.1);\n+///         }\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     // Set up two `S` that point to each other.\n+///     let s1 = S(Cell::new(None), Box::new(42));\n+///     let s2 = S(Cell::new(Some(&s1)), Box::new(42));\n+///     s1.0.set(Some(&s2));\n+///     // Now they both get dropped. But whichever is the 2nd one\n+///     // to be dropped will access the `Box` in the first one,\n+///     // which is a use-after-free!\n+/// }\n+/// ```\n+///\n+/// The Nomicon discusses the need for [drop check in more detail][drop check].\n+///\n+/// To reject such code, the \"drop check\" analysis determines which types and lifetimes need to\n+/// still be live when `T` gets dropped:\n+/// - If `T` has no drop glue, then trivially nothing is required to be live. This is the case if\n+///   neither `T` nor any of its (recursive) fields have a destructor (`impl Drop`). [`PhantomData`]\n+///   and [`ManuallyDrop`] are considered to never have a destructor, no matter their field type.\n+/// - If `T` has drop glue, then, for all types `U` that are *owned* by any field of `T`,\n+///   recursively add the types and lifetimes that need to be live when `U` gets dropped. The set of\n+///   owned types is determined by recursively traversing `T`:\n+///   - Recursively descend through `PhantomData`, `Box`, tuples, and arrays (including arrays of\n+///     length 0).\n+///   - Stop at reference and raw pointer types as well as function pointers and function items;\n+///     they do not own anything.\n+///   - Stop at non-composite types (type parameters that remain generic in the current context and\n+///     base types such as integers and `bool`); these types are owned.\n+///   - When hitting an ADT with `impl Drop`, stop there; this type is owned.\n+///   - When hitting an ADT without `impl Drop`, recursively descend to its fields. (For an `enum`,\n+///     consider all fields of all variants.)\n+/// - Furthermore, if `T` implements `Drop`, then all generic (lifetime and type) parameters of `T`\n+///   must be live.\n+///\n+/// In the above example, the last clause implies that `'a` must be live when `S<'a>` is dropped,\n+/// and hence the example is rejected. If we remove the `impl Drop`, the liveness requirement\n+/// disappears and the example is accepted.\n+///\n+/// There exists an unstable way for a type to opt-out of the last clause; this is called \"drop\n+/// check eyepatch\" or `may_dangle`. For more details on this nightly-only feature, see the\n+/// [discussion in the Nomicon][nomicon].\n+///\n+/// [`ManuallyDrop`]: crate::mem::ManuallyDrop\n+/// [`PhantomData`]: crate::marker::PhantomData\n+/// [drop check]: ../../nomicon/dropck.html\n+/// [nomicon]: ../../nomicon/phantom-data.html#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle\n #[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[const_trait]"}]}