{"sha": "a00f2bcf5c8d98852d6cfda2468185eda41ff2ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMGYyYmNmNWM4ZDk4ODUyZDZjZmRhMjQ2ODE4NWVkYTQxZmYyYmE=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-24T15:32:43Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:28:50Z"}, "message": "Try to fix problem", "tree": {"sha": "a7c0b17cfd197671524f0cdc4d3ab79714cb18b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c0b17cfd197671524f0cdc4d3ab79714cb18b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWO1IACgkQAn35M4hi\nrd06ahAAqWBh1dFkNTrb3LvINWj7jXzYbWSjwLubGHvvBXKsWnhJmu/Hh0tugRmM\nLdc3IwIoAqgJUqxiCliwOjL1wVEsqkZG1kEaAorVYxaC9U4iwzx6KS3oDyVpCU2x\naeT5vk4EpdAORXsoH5K4DW1k4vRaPHirpSQi0SfxcD36R6SkkHKYdOCpMpoznU01\ntm7XxvYJ48tmn60vAEBp5pQqoTtQNT0/XdNS1thBe3xhGkHH7dA3alcgrfO2sV/+\npRYSAB23ItFtTYsrOV+4pJEC8r62sZTDko00JsBZSGinB7/BscsZ2ZDGJ7eJYIXW\nCOQS+x9x/5Ygl1AR+0kDKRs2hFjNd2TV9FfxzBbfSf+GauLWekVoKsQrmkNzX8H/\n3FHTkzsXzZViz9OxyjRHc4wWWTjX4N4KgE+LqVFKCA59+5MV8+/MXnOq5ovKLXye\nPK++hgWyjXl3LKNqyRjr9PosZZZySnxprnnW1M+y+cLADmVToEgFMSgLjm+Kvc0G\nYFsQcBTj1ZkRMi82cvwQfwUmwxbRGbxI6UKYTYdcFpZWGUTJ+Je33fg6h/fm9TLe\nAkYzGW5adKn6x870VSu1yN0GMJIXxFceFanMhwtxKkM5zdayrdpFNHGF6lZcslYE\ndMxwNsAkN4MpDZ9AjnpGtFm+My2MPhI17UQb514jtCl3FOzf9VI=\n=2nBI\n-----END PGP SIGNATURE-----", "payload": "tree a7c0b17cfd197671524f0cdc4d3ab79714cb18b8\nparent 779eef2dae8b2f01af1dc7c8c677388fa7ba1742\nauthor Deadbeef <ent3rm4n@gmail.com> 1627140763 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846930 +0000\n\nTry to fix problem\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba", "html_url": "https://github.com/rust-lang/rust/commit/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779eef2dae8b2f01af1dc7c8c677388fa7ba1742", "url": "https://api.github.com/repos/rust-lang/rust/commits/779eef2dae8b2f01af1dc7c8c677388fa7ba1742", "html_url": "https://github.com/rust-lang/rust/commit/779eef2dae8b2f01af1dc7c8c677388fa7ba1742"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "86dcb9c9c1b7a1c134698ccf1d20a15363adf932", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=a00f2bcf5c8d98852d6cfda2468185eda41ff2ba", "patch": "@@ -1084,11 +1084,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         span_mirbug!(\n                             self,\n                             user_annotation,\n-                            \"bad user type AscribeUserType({:?}, {:?} {:?}): {:?}\",\n+                            \"bad user type AscribeUserType({:?}, {:?} {:?}, type_of={:?}): {:?}\",\n                             inferred_ty,\n                             def_id,\n                             user_substs,\n-                            terr\n+                            self.tcx().type_of(def_id),\n+                            terr,\n                         );\n                     }\n                 }"}, {"sha": "f4a0cc6767f09416a311d4600f88750c3417cc1c", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00f2bcf5c8d98852d6cfda2468185eda41ff2ba/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=a00f2bcf5c8d98852d6cfda2468185eda41ff2ba", "patch": "@@ -6,7 +6,9 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArg, Subst, UserSelfTy, UserSubsts};\n-use rustc_middle::ty::{self, FnSig, Lift, PolyFnSig, Ty, TyCtxt, TypeFoldable, Variance};\n+use rustc_middle::ty::{\n+    self, FnSig, Lift, PolyFnSig, PredicateKind, Ty, TyCtxt, TypeFoldable, Variance,\n+};\n use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Predicate, ToPredicate};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n@@ -85,7 +87,16 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         Ok(())\n     }\n \n-    fn prove_predicate(&mut self, predicate: Predicate<'tcx>) {\n+    fn prove_predicate(&mut self, mut predicate: Predicate<'tcx>) {\n+        if let PredicateKind::Trait(mut tr) = predicate.kind().skip_binder() {\n+            if let hir::Constness::Const = tr.constness {\n+                // FIXME check if we actually want to prove const predicates inside AscribeUserType\n+                tr.constness = hir::Constness::NotConst;\n+                predicate =\n+                    predicate.kind().rebind(PredicateKind::Trait(tr)).to_predicate(self.tcx());\n+            }\n+        }\n+\n         self.fulfill_cx.register_predicate_obligation(\n             self.infcx,\n             Obligation::new(ObligationCause::dummy(), self.param_env, predicate),\n@@ -126,6 +137,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         // outlives\" error messages.\n         let instantiated_predicates =\n             self.tcx().predicates_of(def_id).instantiate(self.tcx(), substs);\n+        debug!(?instantiated_predicates.predicates);\n         for instantiated_predicate in instantiated_predicates.predicates {\n             let instantiated_predicate = self.normalize(instantiated_predicate);\n             self.prove_predicate(instantiated_predicate);"}]}