{"sha": "5965948ba12550e03701ebf860d5c10af12f3efc", "node_id": "C_kwDOAAsO6NoAKDU5NjU5NDhiYTEyNTUwZTAzNzAxZWJmODYwZDVjMTBhZjEyZjNlZmM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-25T10:47:09Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-22T19:39:03Z"}, "message": "Remove a back compat warning", "tree": {"sha": "61c8408f7b687107554e6a82bb8e011bdcd4cdaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c8408f7b687107554e6a82bb8e011bdcd4cdaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5965948ba12550e03701ebf860d5c10af12f3efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5965948ba12550e03701ebf860d5c10af12f3efc", "html_url": "https://github.com/rust-lang/rust/commit/5965948ba12550e03701ebf860d5c10af12f3efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5965948ba12550e03701ebf860d5c10af12f3efc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b869e84e581612f4a30a4bca63bd9e90e9a17003", "url": "https://api.github.com/repos/rust-lang/rust/commits/b869e84e581612f4a30a4bca63bd9e90e9a17003", "html_url": "https://github.com/rust-lang/rust/commit/b869e84e581612f4a30a4bca63bd9e90e9a17003"}], "stats": {"total": 42, "additions": 12, "deletions": 30}, "files": [{"sha": "da58492ccf27c6bbe76c4ff327fd2cfaaaa3e1bd", "filename": "compiler/rustc_interface/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5965948ba12550e03701ebf860d5c10af12f3efc/compiler%2Frustc_interface%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5965948ba12550e03701ebf860d5c10af12f3efc/compiler%2Frustc_interface%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Flocales%2Fen-US.ftl?ref=5965948ba12550e03701ebf860d5c10af12f3efc", "patch": "@@ -11,10 +11,6 @@ interface_mixed_bin_crate =\n interface_mixed_proc_macro_crate =\n     cannot mix `proc-macro` crate type with others\n \n-interface_proc_macro_doc_without_arg =\n-    Trying to document proc macro crate without passing '--crate-type proc-macro to rustdoc\n-    .warn = The generated documentation may be incorrect\n-\n interface_error_writing_dependencies =\n     error writing dependencies to `{$path}`: {$error}\n "}, {"sha": "0eedee250269e4cfc0481b57996b558574142430", "filename": "compiler/rustc_interface/src/errors.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5965948ba12550e03701ebf860d5c10af12f3efc/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5965948ba12550e03701ebf860d5c10af12f3efc/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs?ref=5965948ba12550e03701ebf860d5c10af12f3efc", "patch": "@@ -31,10 +31,6 @@ pub struct MixedBinCrate;\n #[diag(interface_mixed_proc_macro_crate)]\n pub struct MixedProcMacroCrate;\n \n-#[derive(Diagnostic)]\n-#[diag(interface_proc_macro_doc_without_arg)]\n-pub struct ProcMacroDocWithoutArg;\n-\n #[derive(Diagnostic)]\n #[diag(interface_error_writing_dependencies)]\n pub struct ErrorWritingDependencies<'a> {"}, {"sha": "81c1d665ef0726a60e8061b64673444f2f134792", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5965948ba12550e03701ebf860d5c10af12f3efc/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5965948ba12550e03701ebf860d5c10af12f3efc/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=5965948ba12550e03701ebf860d5c10af12f3efc", "patch": "@@ -287,28 +287,18 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n         sess.emit_warning(errors::ProcMacroCratePanicAbort);\n     }\n \n-    // For backwards compatibility, we don't try to run proc macro injection\n-    // if rustdoc is run on a proc macro crate without '--crate-type proc-macro' being\n-    // specified. This should only affect users who manually invoke 'rustdoc', as\n-    // 'cargo doc' will automatically pass the proper '--crate-type' flags.\n-    // However, we do emit a warning, to let such users know that they should\n-    // start passing '--crate-type proc-macro'\n-    if has_proc_macro_decls && sess.opts.actually_rustdoc && !is_proc_macro_crate {\n-        sess.emit_warning(errors::ProcMacroDocWithoutArg);\n-    } else {\n-        krate = sess.time(\"maybe_create_a_macro_crate\", || {\n-            let is_test_crate = sess.opts.test;\n-            rustc_builtin_macros::proc_macro_harness::inject(\n-                sess,\n-                resolver,\n-                krate,\n-                is_proc_macro_crate,\n-                has_proc_macro_decls,\n-                is_test_crate,\n-                sess.diagnostic(),\n-            )\n-        });\n-    }\n+    krate = sess.time(\"maybe_create_a_macro_crate\", || {\n+        let is_test_crate = sess.opts.test;\n+        rustc_builtin_macros::proc_macro_harness::inject(\n+            sess,\n+            resolver,\n+            krate,\n+            is_proc_macro_crate,\n+            has_proc_macro_decls,\n+            is_test_crate,\n+            sess.diagnostic(),\n+        )\n+    });\n \n     // Done with macro expansion!\n "}]}