{"sha": "eead9e61905a7770fba06bf6ade142b8b8bc23f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYWQ5ZTYxOTA1YTc3NzBmYmEwNmJmNmFkZTE0MmI4YjhiYzIzZjY=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-06-25T01:57:00Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-06-25T21:36:16Z"}, "message": "make macros hygienic", "tree": {"sha": "17986cfcf851f2847f276e04daaac6bca64abcfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17986cfcf851f2847f276e04daaac6bca64abcfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eead9e61905a7770fba06bf6ade142b8b8bc23f6", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eead9e61905a7770fba06bf6ade142b8b8bc23f6", "html_url": "https://github.com/rust-lang/rust/commit/eead9e61905a7770fba06bf6ade142b8b8bc23f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eead9e61905a7770fba06bf6ade142b8b8bc23f6/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c7bbe735444fd49130647ba15dd1dc3cf593fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c7bbe735444fd49130647ba15dd1dc3cf593fb", "html_url": "https://github.com/rust-lang/rust/commit/43c7bbe735444fd49130647ba15dd1dc3cf593fb"}], "stats": {"total": 127, "additions": 65, "deletions": 62}, "files": [{"sha": "6caa936636a710528017b09d81a4ab008fb3c3a5", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 65, "deletions": 62, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/eead9e61905a7770fba06bf6ade142b8b8bc23f6/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead9e61905a7770fba06bf6ade142b8b8bc23f6/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=eead9e61905a7770fba06bf6ade142b8b8bc23f6", "patch": "@@ -130,37 +130,39 @@ impl IsaacRng {\n         macro_rules! ind (($x:expr) => {\n             self.mem[(($x >> 2) as uint & ((RAND_SIZE - 1) as uint))]\n         });\n-        macro_rules! rngstepp(\n-            ($j:expr, $shift:expr) => {{\n-                let base = $j;\n-                let mix = a << $shift as uint;\n-\n-                let x = self.mem[base  + mr_offset];\n-                a = (a ^ mix) + self.mem[base + m2_offset];\n-                let y = ind!(x) + a + b;\n-                self.mem[base + mr_offset] = y;\n-\n-                b = ind!(y >> RAND_SIZE_LEN as uint) + x;\n-                self.rsl[base + mr_offset] = b;\n-            }}\n-        );\n-        macro_rules! rngstepn(\n-            ($j:expr, $shift:expr) => {{\n-                let base = $j;\n-                let mix = a >> $shift as uint;\n-\n-                let x = self.mem[base  + mr_offset];\n-                a = (a ^ mix) + self.mem[base + m2_offset];\n-                let y = ind!(x) + a + b;\n-                self.mem[base + mr_offset] = y;\n-\n-                b = ind!(y >> RAND_SIZE_LEN as uint) + x;\n-                self.rsl[base + mr_offset] = b;\n-            }}\n-        );\n \n         let r = [(0, MIDPOINT), (MIDPOINT, 0)];\n         for &(mr_offset, m2_offset) in r.iter() {\n+\n+            macro_rules! rngstepp(\n+                ($j:expr, $shift:expr) => {{\n+                        let base = $j;\n+                        let mix = a << $shift as uint;\n+\n+                        let x = self.mem[base  + mr_offset];\n+                        a = (a ^ mix) + self.mem[base + m2_offset];\n+                        let y = ind!(x) + a + b;\n+                        self.mem[base + mr_offset] = y;\n+\n+                        b = ind!(y >> RAND_SIZE_LEN as uint) + x;\n+                        self.rsl[base + mr_offset] = b;\n+                    }}\n+                );\n+            macro_rules! rngstepn(\n+                ($j:expr, $shift:expr) => {{\n+                        let base = $j;\n+                        let mix = a >> $shift as uint;\n+\n+                        let x = self.mem[base  + mr_offset];\n+                        a = (a ^ mix) + self.mem[base + m2_offset];\n+                        let y = ind!(x) + a + b;\n+                        self.mem[base + mr_offset] = y;\n+\n+                        b = ind!(y >> RAND_SIZE_LEN as uint) + x;\n+                        self.rsl[base + mr_offset] = b;\n+                    }}\n+                );\n+\n             for i in range_step(0u, MIDPOINT, 4) {\n                 rngstepp!(i + 0, 13);\n                 rngstepn!(i + 1, 6);\n@@ -349,43 +351,44 @@ impl Isaac64Rng {\n                 *self.mem.unsafe_ref(($x as uint >> 3) & (RAND_SIZE_64 - 1))\n             }\n         );\n-        macro_rules! rngstepp(\n-            ($j:expr, $shift:expr) => {{\n-                let base = base + $j;\n-                let mix = a ^ (a << $shift as uint);\n-                let mix = if $j == 0 {!mix} else {mix};\n-\n-                unsafe {\n-                    let x = *self.mem.unsafe_ref(base + mr_offset);\n-                    a = mix + *self.mem.unsafe_ref(base + m2_offset);\n-                    let y = ind!(x) + a + b;\n-                    self.mem.unsafe_set(base + mr_offset, y);\n-\n-                    b = ind!(y >> RAND_SIZE_64_LEN) + x;\n-                    self.rsl.unsafe_set(base + mr_offset, b);\n-                }\n-            }}\n-        );\n-        macro_rules! rngstepn(\n-            ($j:expr, $shift:expr) => {{\n-                let base = base + $j;\n-                let mix = a ^ (a >> $shift as uint);\n-                let mix = if $j == 0 {!mix} else {mix};\n-\n-                unsafe {\n-                    let x = *self.mem.unsafe_ref(base + mr_offset);\n-                    a = mix + *self.mem.unsafe_ref(base + m2_offset);\n-                    let y = ind!(x) + a + b;\n-                    self.mem.unsafe_set(base + mr_offset, y);\n-\n-                    b = ind!(y >> RAND_SIZE_64_LEN) + x;\n-                    self.rsl.unsafe_set(base + mr_offset, b);\n-                }\n-            }}\n-        );\n \n         for &(mr_offset, m2_offset) in MP_VEC.iter() {\n             for base in range(0, MIDPOINT / 4).map(|i| i * 4) {\n+\n+                macro_rules! rngstepp(\n+                    ($j:expr, $shift:expr) => {{\n+                            let base = base + $j;\n+                            let mix = a ^ (a << $shift as uint);\n+                            let mix = if $j == 0 {!mix} else {mix};\n+\n+                            unsafe {\n+                                let x = *self.mem.unsafe_ref(base + mr_offset);\n+                                a = mix + *self.mem.unsafe_ref(base + m2_offset);\n+                                let y = ind!(x) + a + b;\n+                                self.mem.unsafe_set(base + mr_offset, y);\n+\n+                                b = ind!(y >> RAND_SIZE_64_LEN) + x;\n+                                self.rsl.unsafe_set(base + mr_offset, b);\n+                            }\n+                        }}\n+                    );\n+                macro_rules! rngstepn(\n+                    ($j:expr, $shift:expr) => {{\n+                            let base = base + $j;\n+                            let mix = a ^ (a >> $shift as uint);\n+                            let mix = if $j == 0 {!mix} else {mix};\n+\n+                            unsafe {\n+                                let x = *self.mem.unsafe_ref(base + mr_offset);\n+                                a = mix + *self.mem.unsafe_ref(base + m2_offset);\n+                                let y = ind!(x) + a + b;\n+                                self.mem.unsafe_set(base + mr_offset, y);\n+\n+                                b = ind!(y >> RAND_SIZE_64_LEN) + x;\n+                                self.rsl.unsafe_set(base + mr_offset, b);\n+                            }\n+                        }}\n+                    );\n                 rngstepp!(0, 21);\n                 rngstepn!(1, 5);\n                 rngstepp!(2, 12);"}]}