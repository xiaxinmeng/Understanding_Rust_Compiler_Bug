{"sha": "1d103cf087c574f66279490ffef8c76178aea5cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTAzY2YwODdjNTc0ZjY2Mjc5NDkwZmZlZjhjNzYxNzhhZWE1Y2M=", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-01-15T00:02:08Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-01-17T07:38:08Z"}, "message": "Use \u2018index\u2019 terminology for arena consistently", "tree": {"sha": "8c1fbb02902eb1f77500eb2f328da8c17f06510e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1fbb02902eb1f77500eb2f328da8c17f06510e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d103cf087c574f66279490ffef8c76178aea5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmAD6WIACgkQ94j36ZAT\nYAOy5Q//V898G/od019Oi+v120aOO0J8dIYX/loD6aTj4XIUNReMUeKO7gGwUuVs\nGArDddgu2WhqblzEJQ8zITqbK3cicn/sDT3F93kAGozPqW0UEt3wIL0FqMzBqyJ5\n+zfzwfIKWsDmzGFXe8v/BMPmwUEbAp7lODu3XLzEDjw9kH+zor1ORbmci8Ksvtg3\nSU0bGlnkQq+0VCuaaGhCUNTfY+Fh2GiSWemYafEVOzovEtiHxHf0uJhvpzY4TXPj\n/XGDutvdqzLh3JwIICkN+mIyP1JoN3ctEZcd+ZpQBLUZvmKosop/QuQZP/dTr8kg\nUgO6VF7MlwkkOVkx/LlHR6PwVxnszFo7JhCCbYh4nfky1MGRSB7WWOSaRZaDmInT\nSn/yJaP3LKCFK2v6DtIr1P41NwZhf1AUeCFu77+OMa54MEZnMBNSHgRmqhliW60t\nRAkAH/uaCgjnWUacVUNWBrIoUUb5TRLd7p/foKcTCKp34tbaTIQmGYl8TMxVI0JW\nKmzuJY28iyU8Pvdceg7NYar5cjlAki7OJ70khG1o5cXu5dW3cwu1Ep72XEmIEHdU\nBDGDOBDuhfaCBRK6Oadlp3JxjKRnqY9myysdLH7oUGhVLiC9+VEMmEgB5XSvkzo9\nyi+UlCvSsbxjSAyNNTBBdC0Irte8QCM88r8Cb9ReSD+eXN3efEQ=\n=xXMQ\n-----END PGP SIGNATURE-----", "payload": "tree 8c1fbb02902eb1f77500eb2f328da8c17f06510e\nparent 3224ecea8734f850eda474c136ae4dcb7e1aa3f1\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1610668928 +1100\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1610869088 +1100\n\nUse \u2018index\u2019 terminology for arena consistently\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d103cf087c574f66279490ffef8c76178aea5cc", "html_url": "https://github.com/rust-lang/rust/commit/1d103cf087c574f66279490ffef8c76178aea5cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d103cf087c574f66279490ffef8c76178aea5cc/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3224ecea8734f850eda474c136ae4dcb7e1aa3f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3224ecea8734f850eda474c136ae4dcb7e1aa3f1", "html_url": "https://github.com/rust-lang/rust/commit/3224ecea8734f850eda474c136ae4dcb7e1aa3f1"}], "stats": {"total": 109, "additions": 56, "deletions": 53}, "files": [{"sha": "5be838f4a7d842ae7fb45011eebadae56e5ea011", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d103cf087c574f66279490ffef8c76178aea5cc/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d103cf087c574f66279490ffef8c76178aea5cc/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=1d103cf087c574f66279490ffef8c76178aea5cc", "patch": "@@ -13,7 +13,7 @@\n //! See also a neighboring `body` module.\n \n use hir_expand::name::Name;\n-use la_arena::{Idx, RawId};\n+use la_arena::{Idx, RawIdx};\n use syntax::ast::RangeOp;\n \n use crate::{\n@@ -24,7 +24,7 @@ use crate::{\n \n pub type ExprId = Idx<Expr>;\n pub(crate) fn dummy_expr_id() -> ExprId {\n-    ExprId::from_raw(RawId::from(!0))\n+    ExprId::from_raw(RawIdx::from(!0))\n }\n \n pub type PatId = Idx<Pat>;"}, {"sha": "9a433b61c8ee61084403e86057d1cb42bc6462c5", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d103cf087c574f66279490ffef8c76178aea5cc/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d103cf087c574f66279490ffef8c76178aea5cc/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=1d103cf087c574f66279490ffef8c76178aea5cc", "patch": "@@ -20,7 +20,7 @@ use hir_expand::{\n     name::{name, AsName, Name},\n     HirFileId, InFile,\n };\n-use la_arena::{Arena, Idx, RawId};\n+use la_arena::{Arena, Idx, RawIdx};\n use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n use syntax::{ast, match_ast};"}, {"sha": "5e71ca42c471f64ea56b5f52ed20c2b4377f767f", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d103cf087c574f66279490ffef8c76178aea5cc/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d103cf087c574f66279490ffef8c76178aea5cc/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=1d103cf087c574f66279490ffef8c76178aea5cc", "patch": "@@ -683,12 +683,12 @@ impl Ctx {\n     }\n \n     fn next_field_idx(&self) -> Idx<Field> {\n-        Idx::from_raw(RawId::from(\n+        Idx::from_raw(RawIdx::from(\n             self.tree.data.as_ref().map_or(0, |data| data.fields.len() as u32),\n         ))\n     }\n     fn next_variant_idx(&self) -> Idx<Variant> {\n-        Idx::from_raw(RawId::from(\n+        Idx::from_raw(RawIdx::from(\n             self.tree.data.as_ref().map_or(0, |data| data.variants.len() as u32),\n         ))\n     }"}, {"sha": "6e6ceb8e47495b28495e3670ad39620fa1b89b4c", "filename": "crates/hir_def/src/trace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d103cf087c574f66279490ffef8c76178aea5cc/crates%2Fhir_def%2Fsrc%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d103cf087c574f66279490ffef8c76178aea5cc/crates%2Fhir_def%2Fsrc%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftrace.rs?ref=1d103cf087c574f66279490ffef8c76178aea5cc", "patch": "@@ -9,7 +9,7 @@\n //! absolute offsets. The `Trace` structure (inspired, at least in name, by\n //! Kotlin's `BindingTrace`) allows use the same code to compute both\n //! projections.\n-use la_arena::{Arena, ArenaMap, Idx, RawId};\n+use la_arena::{Arena, ArenaMap, Idx, RawIdx};\n \n pub(crate) struct Trace<T, V> {\n     arena: Option<Arena<T>>,\n@@ -30,7 +30,7 @@ impl<T, V> Trace<T, V> {\n         let id = if let Some(arena) = &mut self.arena {\n             arena.alloc(data())\n         } else {\n-            let id = Idx::<T>::from_raw(RawId::from(self.len));\n+            let id = Idx::<T>::from_raw(RawIdx::from(self.len));\n             self.len += 1;\n             id\n         };"}, {"sha": "230a502910ebf31c7a029b83dcfd1ace725306d0", "filename": "lib/arena/src/lib.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1d103cf087c574f66279490ffef8c76178aea5cc/lib%2Farena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d103cf087c574f66279490ffef8c76178aea5cc/lib%2Farena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Farena%2Fsrc%2Flib.rs?ref=1d103cf087c574f66279490ffef8c76178aea5cc", "patch": "@@ -1,4 +1,4 @@\n-//! Yet another ID-based arena.\n+//! Yet another index-based arena.\n \n #![warn(missing_docs)]\n \n@@ -13,37 +13,37 @@ use std::{\n mod map;\n pub use map::ArenaMap;\n \n-/// The raw ID of a value in an arena.\n+/// The raw index of a value in an arena.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct RawId(u32);\n+pub struct RawIdx(u32);\n \n-impl From<RawId> for u32 {\n-    fn from(raw: RawId) -> u32 {\n+impl From<RawIdx> for u32 {\n+    fn from(raw: RawIdx) -> u32 {\n         raw.0\n     }\n }\n \n-impl From<u32> for RawId {\n-    fn from(id: u32) -> RawId {\n-        RawId(id)\n+impl From<u32> for RawIdx {\n+    fn from(idx: u32) -> RawIdx {\n+        RawIdx(idx)\n     }\n }\n \n-impl fmt::Debug for RawId {\n+impl fmt::Debug for RawIdx {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n-impl fmt::Display for RawId {\n+impl fmt::Display for RawIdx {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n-/// The ID of a value allocated in an arena that holds `T`s.\n+/// The index of a value allocated in an arena that holds `T`s.\n pub struct Idx<T> {\n-    raw: RawId,\n+    raw: RawIdx,\n     _ty: PhantomData<fn() -> T>,\n }\n \n@@ -78,18 +78,18 @@ impl<T> fmt::Debug for Idx<T> {\n }\n \n impl<T> Idx<T> {\n-    /// Creates a new ID from a [`RawId`].\n-    pub fn from_raw(raw: RawId) -> Self {\n+    /// Creates a new index from a [`RawIdx`].\n+    pub fn from_raw(raw: RawIdx) -> Self {\n         Idx { raw, _ty: PhantomData }\n     }\n \n-    /// Converts this ID into the underlying [`RawId`].\n-    pub fn into_raw(self) -> RawId {\n+    /// Converts this index into the underlying [`RawIdx`].\n+    pub fn into_raw(self) -> RawIdx {\n         self.raw\n     }\n }\n \n-/// Yet another ID-based arena.\n+/// Yet another index-based arena.\n #[derive(Clone, PartialEq, Eq)]\n pub struct Arena<T> {\n     data: Vec<T>,\n@@ -161,37 +161,37 @@ impl<T> Arena<T> {\n         self.data.is_empty()\n     }\n \n-    /// Allocates a new value on the arena, returning the value\u2019s ID.\n+    /// Allocates a new value on the arena, returning the value\u2019s index.\n     ///\n     /// ```\n     /// let mut arena = la_arena::Arena::new();\n-    /// let id = arena.alloc(50);\n+    /// let idx = arena.alloc(50);\n     ///\n-    /// assert_eq!(arena[id], 50);\n+    /// assert_eq!(arena[idx], 50);\n     /// ```\n     pub fn alloc(&mut self, value: T) -> Idx<T> {\n-        let id = RawId(self.data.len() as u32);\n+        let idx = RawIdx(self.data.len() as u32);\n         self.data.push(value);\n-        Idx::from_raw(id)\n+        Idx::from_raw(idx)\n     }\n \n     /// Returns an iterator over the arena\u2019s elements.\n     ///\n     /// ```\n     /// let mut arena = la_arena::Arena::new();\n-    /// let id1 = arena.alloc(20);\n-    /// let id2 = arena.alloc(40);\n-    /// let id3 = arena.alloc(60);\n+    /// let idx1 = arena.alloc(20);\n+    /// let idx2 = arena.alloc(40);\n+    /// let idx3 = arena.alloc(60);\n     ///\n     /// let mut iterator = arena.iter();\n-    /// assert_eq!(iterator.next(), Some((id1, &20)));\n-    /// assert_eq!(iterator.next(), Some((id2, &40)));\n-    /// assert_eq!(iterator.next(), Some((id3, &60)));\n+    /// assert_eq!(iterator.next(), Some((idx1, &20)));\n+    /// assert_eq!(iterator.next(), Some((idx2, &40)));\n+    /// assert_eq!(iterator.next(), Some((idx3, &60)));\n     /// ```\n     pub fn iter(\n         &self,\n     ) -> impl Iterator<Item = (Idx<T>, &T)> + ExactSizeIterator + DoubleEndedIterator {\n-        self.data.iter().enumerate().map(|(idx, value)| (Idx::from_raw(RawId(idx as u32)), value))\n+        self.data.iter().enumerate().map(|(idx, value)| (Idx::from_raw(RawIdx(idx as u32)), value))\n     }\n \n     /// Reallocates the arena to make it take up as little space as possible."}, {"sha": "d8acfe0518d09adcd4f2fba679f728393db07e85", "filename": "lib/arena/src/map.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1d103cf087c574f66279490ffef8c76178aea5cc/lib%2Farena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d103cf087c574f66279490ffef8c76178aea5cc/lib%2Farena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Farena%2Fsrc%2Fmap.rs?ref=1d103cf087c574f66279490ffef8c76178aea5cc", "patch": "@@ -2,30 +2,33 @@ use std::marker::PhantomData;\n \n use crate::Idx;\n \n-/// A map from arena IDs to some other type. Space requirement is O(highest ID).\n+/// A map from arena indexes to some other type.\n+/// Space requirement is O(highest index).\n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct ArenaMap<ID, V> {\n+pub struct ArenaMap<IDX, V> {\n     v: Vec<Option<V>>,\n-    _ty: PhantomData<ID>,\n+    _ty: PhantomData<IDX>,\n }\n \n impl<T, V> ArenaMap<Idx<T>, V> {\n-    /// Inserts a value associated with a given arena ID into the map.\n-    pub fn insert(&mut self, id: Idx<T>, t: V) {\n-        let idx = Self::to_idx(id);\n+    /// Inserts a value associated with a given arena index into the map.\n+    pub fn insert(&mut self, idx: Idx<T>, t: V) {\n+        let idx = Self::to_idx(idx);\n \n         self.v.resize_with((idx + 1).max(self.v.len()), || None);\n         self.v[idx] = Some(t);\n     }\n \n-    /// Returns a reference to the value associated with the provided ID if it is present.\n-    pub fn get(&self, id: Idx<T>) -> Option<&V> {\n-        self.v.get(Self::to_idx(id)).and_then(|it| it.as_ref())\n+    /// Returns a reference to the value associated with the provided index\n+    /// if it is present.\n+    pub fn get(&self, idx: Idx<T>) -> Option<&V> {\n+        self.v.get(Self::to_idx(idx)).and_then(|it| it.as_ref())\n     }\n \n-    /// Returns a mutable reference to the value associated with the provided ID if it is present.\n-    pub fn get_mut(&mut self, id: Idx<T>) -> Option<&mut V> {\n-        self.v.get_mut(Self::to_idx(id)).and_then(|it| it.as_mut())\n+    /// Returns a mutable reference to the value associated with the provided index\n+    /// if it is present.\n+    pub fn get_mut(&mut self, idx: Idx<T>) -> Option<&mut V> {\n+        self.v.get_mut(Self::to_idx(idx)).and_then(|it| it.as_mut())\n     }\n \n     /// Returns an iterator over the values in the map.\n@@ -38,13 +41,13 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n         self.v.iter_mut().filter_map(|o| o.as_mut())\n     }\n \n-    /// Returns an iterator over the arena IDs and values in the map.\n+    /// Returns an iterator over the arena indexes and values in the map.\n     pub fn iter(&self) -> impl Iterator<Item = (Idx<T>, &V)> {\n         self.v.iter().enumerate().filter_map(|(idx, o)| Some((Self::from_idx(idx), o.as_ref()?)))\n     }\n \n-    fn to_idx(id: Idx<T>) -> usize {\n-        u32::from(id.into_raw()) as usize\n+    fn to_idx(idx: Idx<T>) -> usize {\n+        u32::from(idx.into_raw()) as usize\n     }\n \n     fn from_idx(idx: usize) -> Idx<T> {\n@@ -54,8 +57,8 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n \n impl<T, V> std::ops::Index<Idx<V>> for ArenaMap<Idx<V>, T> {\n     type Output = T;\n-    fn index(&self, id: Idx<V>) -> &T {\n-        self.v[Self::to_idx(id)].as_ref().unwrap()\n+    fn index(&self, idx: Idx<V>) -> &T {\n+        self.v[Self::to_idx(idx)].as_ref().unwrap()\n     }\n }\n "}]}