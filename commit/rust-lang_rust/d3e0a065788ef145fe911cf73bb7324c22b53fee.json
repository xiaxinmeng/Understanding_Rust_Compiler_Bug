{"sha": "d3e0a065788ef145fe911cf73bb7324c22b53fee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZTBhMDY1Nzg4ZWYxNDVmZTkxMWNmNzNiYjczMjRjMjJiNTNmZWU=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2012-09-18T10:28:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T21:01:53Z"}, "message": "V2: now with more locks!", "tree": {"sha": "b8c32522ae1e647b5810c7259a6e0233ab457b9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8c32522ae1e647b5810c7259a6e0233ab457b9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e0a065788ef145fe911cf73bb7324c22b53fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e0a065788ef145fe911cf73bb7324c22b53fee", "html_url": "https://github.com/rust-lang/rust/commit/d3e0a065788ef145fe911cf73bb7324c22b53fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e0a065788ef145fe911cf73bb7324c22b53fee/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68e755b1c26db09cf8e121bbbea2075f6116e279", "url": "https://api.github.com/repos/rust-lang/rust/commits/68e755b1c26db09cf8e121bbbea2075f6116e279", "html_url": "https://github.com/rust-lang/rust/commit/68e755b1c26db09cf8e121bbbea2075f6116e279"}], "stats": {"total": 76, "additions": 43, "deletions": 33}, "files": [{"sha": "021f595cb3243a7549286d77c387d03ebb243f7d", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=d3e0a065788ef145fe911cf73bb7324c22b53fee", "patch": "@@ -1661,8 +1661,8 @@ extern mod rustrt {\n \n     fn rust_get_sched_id() -> sched_id;\n     fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n-    fn rust_max_sched_threads() -> libc::size_t;\n     fn rust_sched_threads() -> libc::size_t;\n+    fn rust_sched_current_nonlazy_threads() -> libc::size_t;\n     fn rust_num_threads() -> libc::uintptr_t;\n \n     fn get_task_id() -> task_id;\n@@ -2436,7 +2436,7 @@ fn test_sched_thread_per_core() {\n \n     do spawn_sched(ThreadPerCore) {\n         let cores = rustrt::rust_num_threads();\n-        let reported_threads = rustrt::rust_max_sched_threads();\n+        let reported_threads = rustrt::rust_sched_threads();\n         assert(cores as uint == reported_threads as uint);\n         chan.send(());\n     }\n@@ -2449,9 +2449,9 @@ fn test_spawn_thread_on_demand() {\n     let (chan, port) = pipes::stream();\n \n     do spawn_sched(ManualThreads(2)) {\n-        let max_threads = rustrt::rust_max_sched_threads();\n+        let max_threads = rustrt::rust_sched_threads();\n         assert(max_threads as int == 2);\n-        let running_threads = rustrt::rust_sched_threads();\n+        let running_threads = rustrt::rust_sched_current_nonlazy_threads();\n         assert(running_threads as int == 1);\n \n         let (chan2, port2) = pipes::stream();\n@@ -2460,7 +2460,7 @@ fn test_spawn_thread_on_demand() {\n             chan2.send(());\n         }\n \n-        let running_threads2 = rustrt::rust_sched_threads();\n+        let running_threads2 = rustrt::rust_sched_current_nonlazy_threads();\n         assert(running_threads2 as int == 2);\n \n         port2.recv();"}, {"sha": "54e9c9bf7e56cdfe2a8d76772bf2efd95dec6bf1", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=d3e0a065788ef145fe911cf73bb7324c22b53fee", "patch": "@@ -26,7 +26,7 @@ export run_tests_console;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    fn rust_max_sched_threads() -> libc::size_t;\n+    fn rust_sched_threads() -> libc::size_t;\n }\n \n // The name of a test. By convention this follows the rules for rust\n@@ -327,7 +327,7 @@ const sched_overcommit : uint = 1u;\n const sched_overcommit : uint = 4u;\n \n fn get_concurrency() -> uint {\n-    let threads = rustrt::rust_max_sched_threads() as uint;\n+    let threads = rustrt::rust_sched_threads() as uint;\n     if threads == 1u { 1u }\n     else { threads * sched_overcommit }\n }"}, {"sha": "8829089822c727e772e8318b9b7edc198c0c46d3", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d3e0a065788ef145fe911cf73bb7324c22b53fee", "patch": "@@ -627,13 +627,13 @@ start_task(rust_task *target, fn_env_pair *f) {\n }\n \n extern \"C\" CDECL size_t\n-rust_sched_threads() {\n+rust_sched_current_nonlazy_threads() {\n     rust_task *task = rust_get_current_task();\n     return task->sched->number_of_threads();\n }\n \n extern \"C\" CDECL size_t\n-rust_max_sched_threads() {\n+rust_sched_threads() {\n     rust_task *task = rust_get_current_task();\n     return task->sched->max_number_of_threads();\n }"}, {"sha": "9bb311a8908a9564b6f69245492843f3661a5234", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=d3e0a065788ef145fe911cf73bb7324c22b53fee", "patch": "@@ -23,6 +23,7 @@ rust_scheduler::rust_scheduler(rust_kernel *kernel,\n     id(id)\n {\n     // Create the first thread\n+    scoped_lock with(lock);\n     threads.push(create_task_thread(0));\n }\n \n@@ -34,6 +35,7 @@ void rust_scheduler::delete_this() {\n \n rust_sched_launcher *\n rust_scheduler::create_task_thread(int id) {\n+    lock.must_have_lock();\n     live_threads++;\n     rust_sched_launcher *thread = launchfac->create(this, id, killed);\n     KLOG(kernel, kern, \"created task thread: \" PTR\n@@ -50,6 +52,7 @@ rust_scheduler::destroy_task_thread(rust_sched_launcher *thread) {\n \n void\n rust_scheduler::destroy_task_threads() {\n+    scoped_lock with(lock);\n     for(size_t i = 0; i < threads.size(); ++i) {\n         destroy_task_thread(threads[i]);\n     }\n@@ -58,6 +61,7 @@ rust_scheduler::destroy_task_threads() {\n void\n rust_scheduler::start_task_threads()\n {\n+    scoped_lock with(lock);\n     for(size_t i = 0; i < threads.size(); ++i) {\n         rust_sched_launcher *thread = threads[i];\n         thread->start();\n@@ -67,6 +71,7 @@ rust_scheduler::start_task_threads()\n void\n rust_scheduler::join_task_threads()\n {\n+    scoped_lock with(lock);\n     for(size_t i = 0; i < threads.size(); ++i) {\n         rust_sched_launcher *thread = threads[i];\n         thread->join();\n@@ -75,8 +80,16 @@ rust_scheduler::join_task_threads()\n \n void\n rust_scheduler::kill_all_tasks() {\n-    for(size_t i = 0; i < threads.size(); ++i) {\n-        rust_sched_launcher *thread = threads[i];\n+    array_list<rust_sched_launcher *> copied_threads;\n+    {\n+        scoped_lock with(lock);\n+        killed = true;\n+        for (size_t i = 0; i < threads.size(); ++i) {\n+            copied_threads.push(threads[i]);\n+        }\n+    }\n+    for(size_t i = 0; i < copied_threads.size(); ++i) {\n+        rust_sched_launcher *thread = copied_threads[i];\n         thread->get_loop()->kill_all_tasks();\n     }\n }\n@@ -88,26 +101,16 @@ rust_scheduler::create_task(rust_task *spawner, const char *name) {\n         scoped_lock with(lock);\n         live_tasks++;\n \n-        // Find unoccupied thread\n-        for (thread_no = 0; thread_no < threads.size(); ++thread_no) {\n-            if (threads[thread_no]->get_loop()->number_of_live_tasks() == 0)\n-                break;\n-        }\n-\n-        if (thread_no == threads.size()) {\n-            if (threads.size() < max_num_threads) {\n-                // Else create new thread\n-                thread_no = threads.size();\n-                rust_sched_launcher *thread = create_task_thread(thread_no);\n-                thread->start();\n-                threads.push(thread);\n-            } else {\n-                // Or use round robin allocation\n-                thread_no = cur_thread++;\n-                if (cur_thread >= max_num_threads)\n-                    cur_thread = 0;\n-            }\n+        if (cur_thread < threads.size()) {\n+            thread_no = cur_thread;\n+        } else {\n+            assert(threads.size() < max_num_threads);\n+            thread_no = threads.size();\n+            rust_sched_launcher *thread = create_task_thread(thread_no);\n+            thread->start();\n+            threads.push(thread);\n         }\n+        cur_thread = (thread_no + 1) % max_num_threads;\n     }\n     KLOG(kernel, kern, \"Creating task %s, on thread %d.\", name, thread_no);\n     kernel->register_task();\n@@ -135,6 +138,12 @@ void\n rust_scheduler::exit() {\n     // Take a copy of the number of threads. After the last thread exits this\n     // scheduler will get destroyed, and our fields will cease to exist.\n+    //\n+    // This is also the reason we can't use the lock here (as in the other\n+    // cases when accessing `threads`), after the loop the lock won't exist\n+    // anymore. This is safe because this method is only called when all the\n+    // task are dead, so there is no chance of a task trying to create new\n+    // threads.\n     size_t current_num_threads = threads.size();\n     for(size_t i = 0; i < current_num_threads; ++i) {\n         threads[i]->get_loop()->exit();\n@@ -148,6 +157,7 @@ rust_scheduler::max_number_of_threads() {\n \n size_t\n rust_scheduler::number_of_threads() {\n+    scoped_lock with(lock);\n     return threads.size();\n }\n "}, {"sha": "14116394b3d359f9688a322cefb4a9c47db6e065", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=d3e0a065788ef145fe911cf73bb7324c22b53fee", "patch": "@@ -30,7 +30,6 @@ rand_new_seeded\n rand_next\n rand_seed\n rust_get_sched_id\n-rust_max_sched_threads\n rust_new_sched\n rust_new_task_in_sched\n rust_num_threads\n@@ -49,6 +48,7 @@ rust_port_size\n rust_process_wait\n rust_ptr_eq\n rust_run_program\n+rust_sched_current_nonlazy_threads\n rust_sched_threads\n rust_set_exit_status\n rust_start"}, {"sha": "da4cfd0b471446630165cb24f9d8b72ea23776bd", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0a065788ef145fe911cf73bb7324c22b53fee/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=d3e0a065788ef145fe911cf73bb7324c22b53fee", "patch": "@@ -8,15 +8,15 @@ extern mod rustrt {\n     fn last_os_error() -> ~str;\n     fn rust_getcwd() -> ~str;\n     fn get_task_id() -> libc::intptr_t;\n-    fn rust_max_sched_threads();\n+    fn rust_sched_threads();\n     fn rust_get_task();\n }\n \n fn calllink01() { rustrt::rust_get_sched_id(); }\n fn calllink02() { rustrt::last_os_error(); }\n fn calllink03() { rustrt::rust_getcwd(); }\n fn calllink08() { rustrt::get_task_id(); }\n-fn calllink09() { rustrt::rust_max_sched_threads(); }\n+fn calllink09() { rustrt::rust_sched_threads(); }\n fn calllink10() { rustrt::rust_get_task(); }\n \n fn runtest(f: fn~(), frame_backoff: u32) {"}]}