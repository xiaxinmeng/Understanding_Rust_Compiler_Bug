{"sha": "17c5d389f5a0534d41105ada08f38640d61d5154", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YzVkMzg5ZjVhMDUzNGQ0MTEwNWFkYTA4ZjM4NjQwZDYxZDUxNTQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-09-20T05:55:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-20T05:55:25Z"}, "message": "Merge pull request #1166 from sinkuu/fix_775\n\nFix #775: Off-by-one overrun in deeply nested function call", "tree": {"sha": "85a4fd19680bbd8dc0a182a10aa66e9d4d7aac68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85a4fd19680bbd8dc0a182a10aa66e9d4d7aac68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17c5d389f5a0534d41105ada08f38640d61d5154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17c5d389f5a0534d41105ada08f38640d61d5154", "html_url": "https://github.com/rust-lang/rust/commit/17c5d389f5a0534d41105ada08f38640d61d5154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17c5d389f5a0534d41105ada08f38640d61d5154/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ff7e8345716ebff936c27d7e597c978fa1d0677", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff7e8345716ebff936c27d7e597c978fa1d0677", "html_url": "https://github.com/rust-lang/rust/commit/3ff7e8345716ebff936c27d7e597c978fa1d0677"}, {"sha": "2dfa96bc9aaf02bcf69999e52ce4a229638504aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfa96bc9aaf02bcf69999e52ce4a229638504aa", "html_url": "https://github.com/rust-lang/rust/commit/2dfa96bc9aaf02bcf69999e52ce4a229638504aa"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "ce1eb5dc053f3f757d8712187f4c3ca77016d380", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17c5d389f5a0534d41105ada08f38640d61d5154/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c5d389f5a0534d41105ada08f38640d61d5154/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=17c5d389f5a0534d41105ada08f38640d61d5154", "patch": "@@ -303,16 +303,16 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n                             -> Option<String>\n     where I: Iterator<Item = &'a ast::Expr>\n {\n-    // 2 for brackets;\n+    // 1 = [\n     let offset = offset + 1;\n     let inner_context = &RewriteContext { block_indent: offset, ..*context };\n+    // 2 for brackets\n     let max_item_width = try_opt!(width.checked_sub(2));\n     let items = itemize_list(context.codemap,\n                              expr_iter,\n                              \"]\",\n                              |item| item.span.lo,\n                              |item| item.span.hi,\n-                             // 1 = [\n                              |item| item.rewrite(inner_context, max_item_width, offset),\n                              span.lo,\n                              span.hi)\n@@ -1753,20 +1753,15 @@ pub fn rewrite_tuple<'a, I>(context: &RewriteContext,\n     }\n \n     let list_lo = context.codemap.span_after(span, \"(\");\n+    let budget = try_opt!(width.checked_sub(2));\n     let items = itemize_list(context.codemap,\n                              items,\n                              \")\",\n                              |item| item.span().lo,\n                              |item| item.span().hi,\n-                             |item| {\n-                                 let inner_width = try_opt!(context.config\n-                                     .max_width\n-                                     .checked_sub(indent.width() + 1));\n-                                 item.rewrite(&aligned, inner_width, indent)\n-                             },\n+                             |item| item.rewrite(&aligned, budget, indent),\n                              list_lo,\n                              span.hi - BytePos(1));\n-    let budget = try_opt!(width.checked_sub(2));\n     let list_str = try_opt!(format_item_list(items, budget, indent, context.config));\n \n     Some(format!(\"({})\", list_str))"}, {"sha": "d47777734bb109477cf53db47b129247fbfb6a45", "filename": "tests/source/tuple.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17c5d389f5a0534d41105ada08f38640d61d5154/tests%2Fsource%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c5d389f5a0534d41105ada08f38640d61d5154/tests%2Fsource%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftuple.rs?ref=17c5d389f5a0534d41105ada08f38640d61d5154", "patch": "@@ -32,3 +32,13 @@ fn issue550() {\n     self.visitor.visit_volume(self.level.sector_id(sector), (floor_y,\n     if is_sky_flat(ceil_tex) {from_wad_height(self.height_range.1)} else {ceil_y}));\n }\n+\n+fn issue775() {\n+    if indent {\n+        let a = mk_object(&[(\"a\".to_string(), Boolean(true)),\n+                            (\"b\".to_string(),\n+                             Array(vec![mk_object(&[(\"c\".to_string(),\n+                                                     String(\"\\x0c\\r\".to_string()))]),\n+                                        mk_object(&[(\"d\".to_string(), String(\"\".to_string()))])]))]);\n+    }\n+}"}, {"sha": "2d3b52da72a4dfefc36ad838d5d9a500f366eb81", "filename": "tests/target/tuple.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17c5d389f5a0534d41105ada08f38640d61d5154/tests%2Ftarget%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c5d389f5a0534d41105ada08f38640d61d5154/tests%2Ftarget%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftuple.rs?ref=17c5d389f5a0534d41105ada08f38640d61d5154", "patch": "@@ -37,3 +37,14 @@ fn issue550() {\n                                    ceil_y\n                                }));\n }\n+\n+fn issue775() {\n+    if indent {\n+        let a = mk_object(&[(\"a\".to_string(), Boolean(true)),\n+                            (\"b\".to_string(),\n+                             Array(vec![mk_object(&[(\"c\".to_string(),\n+                                                     String(\"\\x0c\\r\".to_string()))]),\n+                                        mk_object(&[(\"d\".to_string(),\n+                                                     String(\"\".to_string()))])]))]);\n+    }\n+}"}]}