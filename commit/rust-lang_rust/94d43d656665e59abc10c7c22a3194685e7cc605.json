{"sha": "94d43d656665e59abc10c7c22a3194685e7cc605", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZDQzZDY1NjY2NWU1OWFiYzEwYzdjMjJhMzE5NDY4NWU3Y2M2MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-22T08:55:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-22T08:55:18Z"}, "message": "Auto merge of #68098 - ssomers:btreemap_gdb_pretty_print, r=Mark-Simulacrum\n\nTest gdb pretty printing more and fix overzealous type substitution\n\nAdresses a problem concerning printing BTreeMap / BTreeSet data in gdb: when the key or value type name contains substring \"LeafNode\", and the map has multiple nodes (e.g. more than 11 elements), printing causes an exception. E.g.\n\n```\nrustc -g - <<EOF\n    use std::collections::BTreeMap;\n\n    struct MyLeafNode(i8);\n\n    fn main() {\n        let m: BTreeMap<i8, MyLeafNode> = (0..12).map(|i| (i, MyLeafNode(i))).collect();\n        assert!(!m.is_empty());\n    }\nEOF\n```\n\n```\n$ rust-gdb rust_out\n(gdb) b 7\n(gdb) r\n(gdb) p m\n$1 = BTreeMap<i8, rust_out::MyLeafNode>(len: 12)Python Exception <class 'gdb.error'> No type named alloc::collections::btree::node::InternalNode<i8, rust_out::MyInternalNode>.:\nuse std::collections::BTreeMap;\n```\n\nThe code was written in #56144 by @tromey (and later touched upon by @RalfJung in #57045, but I think that had nothing to do with the issues in this PR).", "tree": {"sha": "ecc6e7f514029edf6c64bf174fcef1224a6581a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecc6e7f514029edf6c64bf174fcef1224a6581a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d43d656665e59abc10c7c22a3194685e7cc605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d43d656665e59abc10c7c22a3194685e7cc605", "html_url": "https://github.com/rust-lang/rust/commit/94d43d656665e59abc10c7c22a3194685e7cc605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d43d656665e59abc10c7c22a3194685e7cc605/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5574b1df577f737373b42cbf364b6cab2dfa5960", "url": "https://api.github.com/repos/rust-lang/rust/commits/5574b1df577f737373b42cbf364b6cab2dfa5960", "html_url": "https://github.com/rust-lang/rust/commit/5574b1df577f737373b42cbf364b6cab2dfa5960"}, {"sha": "d8a136fa10edb5614b1a2f311d1aa05c206a65d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a136fa10edb5614b1a2f311d1aa05c206a65d5", "html_url": "https://github.com/rust-lang/rust/commit/d8a136fa10edb5614b1a2f311d1aa05c206a65d5"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "51dfc3fff3f92e3c162d8ae933c6e304d82f6128", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94d43d656665e59abc10c7c22a3194685e7cc605/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/94d43d656665e59abc10c7c22a3194685e7cc605/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=94d43d656665e59abc10c7c22a3194685e7cc605", "patch": "@@ -335,7 +335,7 @@ def children(self):\n def children_of_node(boxed_node, height, want_values):\n     node_ptr = boxed_node['ptr']['pointer']\n     if height > 0:\n-        type_name = str(node_ptr.type.target()).replace('LeafNode', 'InternalNode')\n+        type_name = str(node_ptr.type.target()).replace('LeafNode', 'InternalNode', 1)\n         node_type = gdb.lookup_type(type_name)\n         node_ptr = node_ptr.cast(node_type.pointer())\n         leaf = node_ptr['data']"}, {"sha": "1da2042b2224ac5e3d93185ed5dd9c01c70123cf", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94d43d656665e59abc10c7c22a3194685e7cc605/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d43d656665e59abc10c7c22a3194685e7cc605/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=94d43d656665e59abc10c7c22a3194685e7cc605", "patch": "@@ -26,17 +26,22 @@\n // gdb-command: print empty_btree_map\n // gdb-check:$4 = BTreeMap<i32, u32>(len: 0)\n \n+// gdb-command: print nasty_btree_map\n+// gdb-check:$5 = BTreeMap<i32, pretty_std_collections::MyLeafNode>(len: 1) = {[1] = pretty_std_collections::MyLeafNode (11)}\n+\n // gdb-command: print vec_deque\n-// gdb-check:$5 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n+// gdb-check:$6 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n \n // gdb-command: print vec_deque2\n-// gdb-check:$6 = VecDeque<i32>(len: 7, cap: 8) = {2, 3, 4, 5, 6, 7, 8}\n+// gdb-check:$7 = VecDeque<i32>(len: 7, cap: 8) = {2, 3, 4, 5, 6, 7, 8}\n \n #![allow(unused_variables)]\n use std::collections::BTreeMap;\n use std::collections::BTreeSet;\n use std::collections::VecDeque;\n \n+struct MyLeafNode(i32); // helps to ensure we don't blindly replace substring \"LeafNode\"\n+\n fn main() {\n     // BTreeSet\n     let mut btree_set = BTreeSet::new();\n@@ -54,6 +59,9 @@ fn main() {\n \n     let mut empty_btree_map: BTreeMap<i32, u32> = BTreeMap::new();\n \n+    let mut nasty_btree_map: BTreeMap<i32, MyLeafNode> = BTreeMap::new();\n+    nasty_btree_map.insert(1, MyLeafNode(11));\n+\n     // VecDeque\n     let mut vec_deque = VecDeque::new();\n     vec_deque.push_back(5);"}]}