{"sha": "6d3a423094c77b25b20afe3a812a67f03080cc3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkM2E0MjMwOTRjNzdiMjViMjBhZmUzYTgxMmE2N2YwMzA4MGNjM2Q=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-19T09:21:23Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-19T14:57:13Z"}, "message": "add log_err to rustc", "tree": {"sha": "a2293502572a511ba35253830574632105b0b40d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2293502572a511ba35253830574632105b0b40d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3a423094c77b25b20afe3a812a67f03080cc3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3a423094c77b25b20afe3a812a67f03080cc3d", "html_url": "https://github.com/rust-lang/rust/commit/6d3a423094c77b25b20afe3a812a67f03080cc3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3a423094c77b25b20afe3a812a67f03080cc3d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "html_url": "https://github.com/rust-lang/rust/commit/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "2ecd49922bc192ee398051f8569346b94f58174c", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -289,7 +289,7 @@ tag expr_ {\n     expr_ret(option.t[@expr], ann);\n     expr_put(option.t[@expr], ann);\n     expr_be(@expr, ann);\n-    expr_log(@expr, ann);\n+    expr_log(int, @expr, ann);\n     expr_check_expr(@expr, ann);\n     expr_port(ann);\n     expr_chan(@expr, ann);"}, {"sha": "8d4c464d5c98ccb6ec34c585b3b56d67b46382d2", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -152,6 +152,7 @@ fn keyword_table() -> std.map.hashmap[str, token.token] {\n     keywords.insert(\"const\", token.CONST);\n \n     keywords.insert(\"log\", token.LOG);\n+    keywords.insert(\"log_err\", token.LOG_ERR);\n     keywords.insert(\"spawn\", token.SPAWN);\n     keywords.insert(\"thread\", token.THREAD);\n     keywords.insert(\"yield\", token.YIELD);"}, {"sha": "2c21c957f75d69ba045f38d7ea0c3cb488949282", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -810,7 +810,14 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n             p.bump();\n             auto e = parse_expr(p);\n             auto hi = e.span.hi;\n-            ex = ast.expr_log(e, ast.ann_none);\n+            ex = ast.expr_log(1, e, ast.ann_none);\n+        }\n+\n+        case (token.LOG_ERR) {\n+            p.bump();\n+            auto e = parse_expr(p);\n+            auto hi = e.span.hi;\n+            ex = ast.expr_log(0, e, ast.ann_none);\n         }\n \n         case (token.CHECK) {\n@@ -1669,7 +1676,7 @@ fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n                 case (ast.expr_ret(_,_))        { ret true; }\n                 case (ast.expr_put(_,_))        { ret true; }\n                 case (ast.expr_be(_,_))         { ret true; }\n-                case (ast.expr_log(_,_))        { ret true; }\n+                case (ast.expr_log(_,_,_))        { ret true; }\n                 case (ast.expr_check_expr(_,_)) { ret true; }\n             }\n         }"}, {"sha": "078467b5d0e2561a7dbab221496e0575ffbe3866", "filename": "src/comp/front/token.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Ffront%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Ffront%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftoken.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -119,6 +119,7 @@ tag token {\n \n     /* Magic runtime services */\n     LOG;\n+    LOG_ERR;\n     SPAWN;\n     BIND;\n     THREAD;\n@@ -291,6 +292,7 @@ fn to_str(token t) -> str {\n \n         /* Magic runtime services */\n         case (LOG) { ret \"log\"; }\n+        case (LOG_ERR) { ret \"log_err\"; }\n         case (SPAWN) { ret \"spawn\"; }\n         case (BIND) { ret \"bind\"; }\n         case (THREAD) { ret \"thread\"; }"}, {"sha": "6f1d6493e04c8547e5f2fe6a5eaf2d3a5091deb1", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -193,7 +193,7 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp,\n          @expr e, ann a) -> @expr)                fold_expr_be,\n \n-     (fn(&ENV e, &span sp,\n+     (fn(&ENV e, &span sp, int lvl,\n          @expr e, ann a) -> @expr)                fold_expr_log,\n \n      (fn(&ENV e, &span sp,\n@@ -793,10 +793,10 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_be(env_, e.span, ee, t2);\n         }\n \n-        case (ast.expr_log(?x, ?t)) {\n+        case (ast.expr_log(?l, ?x, ?t)) {\n             auto ee = fold_expr(env_, fld, x);\n             auto t2 = fld.fold_ann(env_, t);\n-            ret fld.fold_expr_log(env_, e.span, ee, t2);\n+            ret fld.fold_expr_log(env_, e.span, l, ee, t2);\n         }\n \n         case (ast.expr_check_expr(?x, ?t)) {\n@@ -1378,9 +1378,9 @@ fn identity_fold_expr_be[ENV](&ENV env, &span sp, @expr x, ann a) -> @expr {\n     ret @respan(sp, ast.expr_be(x, a));\n }\n \n-fn identity_fold_expr_log[ENV](&ENV e, &span sp, @expr x,\n+fn identity_fold_expr_log[ENV](&ENV e, &span sp, int lvl, @expr x,\n                                ann a) -> @expr {\n-    ret @respan(sp, ast.expr_log(x, a));\n+    ret @respan(sp, ast.expr_log(lvl, x, a));\n }\n \n fn identity_fold_expr_check_expr[ENV](&ENV e, &span sp, @expr x, ann a)\n@@ -1679,7 +1679,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_ret    = bind identity_fold_expr_ret[ENV](_,_,_,_),\n          fold_expr_put    = bind identity_fold_expr_put[ENV](_,_,_,_),\n          fold_expr_be     = bind identity_fold_expr_be[ENV](_,_,_,_),\n-         fold_expr_log    = bind identity_fold_expr_log[ENV](_,_,_,_),\n+         fold_expr_log    = bind identity_fold_expr_log[ENV](_,_,_,_,_),\n          fold_expr_check_expr\n          = bind identity_fold_expr_check_expr[ENV](_,_,_,_),\n          fold_expr_port   = bind identity_fold_expr_port[ENV](_,_,_),"}, {"sha": "802b3d69fa75b989fdd7dbb728fc1dae684abe1a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -4901,8 +4901,8 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_fail(cx, e.span, \"explicit failure\");\n         }\n \n-        case (ast.expr_log(?a, _)) {\n-            ret trans_log(cx, a);\n+        case (ast.expr_log(?lvl, ?a, _)) {\n+            ret trans_log(lvl, cx, a);\n         }\n \n         case (ast.expr_check_expr(?a, _)) {\n@@ -4989,7 +4989,7 @@ fn load_if_immediate(@block_ctxt cx, ValueRef v, @ty.t t) -> ValueRef {\n     ret v;\n }\n \n-fn trans_log(@block_ctxt cx, @ast.expr e) -> result {\n+fn trans_log(int lvl, @block_ctxt cx, @ast.expr e) -> result {\n     auto lcx = cx.fcx.lcx;\n     auto modname = _str.connect(lcx.module_path, \".\");\n     auto global;\n@@ -5008,7 +5008,7 @@ fn trans_log(@block_ctxt cx, @ast.expr e) -> result {\n     auto log_cx = new_sub_block_ctxt(cx, \"log\");\n     auto after_cx = new_sub_block_ctxt(cx, \"after\");\n     auto load = cx.build.Load(global);\n-    auto test = cx.build.ICmp(lib.llvm.LLVMIntSGE, load, C_int(1));\n+    auto test = cx.build.ICmp(lib.llvm.LLVMIntSGE, load, C_int(lvl));\n     cx.build.CondBr(test, log_cx.llbb, after_cx.llbb);\n \n     auto sub = trans_expr(log_cx, e);\n@@ -5032,27 +5032,28 @@ fn trans_log(@block_ctxt cx, @ast.expr e) -> result {\n         if (is32bit) {\n             trans_upcall(sub.bcx,\n                          \"upcall_log_float\",\n-                         vec(sub.val)).bcx.build.Br(after_cx.llbb);\n+                         vec(C_int(lvl), sub.val)).bcx.build.Br(after_cx.llbb);\n         } else {\n             auto tmp = alloca(sub.bcx, tr);\n             sub.bcx.build.Store(sub.val, tmp);\n             auto v = vp2i(sub.bcx, tmp);\n             trans_upcall(sub.bcx,\n                          \"upcall_log_double\",\n-                         vec(v)).bcx.build.Br(after_cx.llbb);\n+                         vec(C_int(lvl), v)).bcx.build.Br(after_cx.llbb);\n         }\n     } else {\n         alt (e_ty.struct) {\n             case (ty.ty_str) {\n                 auto v = vp2i(sub.bcx, sub.val);\n                 trans_upcall(sub.bcx,\n                              \"upcall_log_str\",\n-                             vec(v)).bcx.build.Br(after_cx.llbb);\n+                             vec(C_int(lvl), v)).bcx.build.Br(after_cx.llbb);\n             }\n             case (_) {\n+                auto v = vec(C_int(lvl), sub.val);\n                 trans_upcall(sub.bcx,\n                              \"upcall_log_int\",\n-                             vec(sub.val)).bcx.build.Br(after_cx.llbb);\n+                             v).bcx.build.Br(after_cx.llbb);\n             }\n         }\n     }"}, {"sha": "7da1a3d79d95c60e10ce83ecd0c6ed83bcb189fb", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -913,7 +913,7 @@ fn expr_ann(@ast.expr expr) -> option.t[ast.ann] {\n         case (ast.expr_fail(_))               { ret none[ast.ann]; }\n         case (ast.expr_break(_))              { ret none[ast.ann]; }\n         case (ast.expr_cont(_))               { ret none[ast.ann]; }\n-        case (ast.expr_log(_,_))              { ret none[ast.ann]; }\n+        case (ast.expr_log(_,_,_))            { ret none[ast.ann]; }\n         case (ast.expr_check_expr(_,_))       { ret none[ast.ann]; }\n         case (ast.expr_ret(_,_))              { ret none[ast.ann]; }\n         case (ast.expr_put(_,_))              { ret none[ast.ann]; }"}, {"sha": "4357fb4c27cd415d993be415f624ebec706243bc", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -1382,7 +1382,7 @@ mod Pushdown {\n             }\n             /* FIXME: should this check the type annotations? */\n             case (ast.expr_fail(_))  { e_1 = e.node; } \n-            case (ast.expr_log(_,_)) { e_1 = e.node; } \n+            case (ast.expr_log(_,_,_)) { e_1 = e.node; } \n             case (ast.expr_break(_)) { e_1 = e.node; }\n             case (ast.expr_cont(_))  { e_1 = e.node; }\n             case (ast.expr_ret(_,_)) { e_1 = e.node; }\n@@ -1905,10 +1905,10 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                                                     boring_ann()));\n         }\n \n-        case (ast.expr_log(?e,_)) {\n+        case (ast.expr_log(_,?e,_)) {\n             auto expr_t = check_expr(fcx, e);\n             ret @fold.respan[ast.expr_]\n-                (expr.span, ast.expr_log(expr_t, boring_ann()));\n+                (expr.span, ast.expr_log(_, expr_t, boring_ann()));\n         }\n \n         case (ast.expr_check_expr(?e, _)) {"}, {"sha": "108943ddf51ff5f725d719acd66d570bdd909bb2", "filename": "src/comp/middle/typestate_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -384,7 +384,7 @@ fn expr_ann(&expr e) -> ann {\n     case (ast.expr_be(_,?a)) {\n       ret a;\n     }\n-    case (ast.expr_log(_,?a)) {\n+    case (ast.expr_log(_,_,?a)) {\n       ret a;\n     }\n     case (ast.expr_check_expr(_,?a)) {\n@@ -784,7 +784,7 @@ fn find_pre_post_expr(&_fn_info_map fm, &fn_info enclosing, &expr e) -> () {\n             // Otherwise, variable is global, so it must be initialized\n             set_pre_and_post(a, res);\n         }\n-        case(expr_log(?arg, ?a)) {\n+        case(expr_log(_, ?arg, ?a)) {\n             find_pre_post_expr(fm, enclosing, *arg);\n             set_pre_and_post(a, expr_pp(*arg));\n         }\n@@ -1099,7 +1099,7 @@ fn find_pre_post_state_expr(&_fn_info_map fm, &fn_info enclosing,\n     case (expr_path(_,_,?a)) {\n       ret pure_exp(a, pres);\n     }\n-    case (expr_log(?e,?a)) {\n+    case (expr_log(_,?e,?a)) {\n         changed = find_pre_post_state_expr(fm, enclosing, pres, e);\n         changed = extend_prestate_ann(a, pres) || changed;\n         changed = extend_poststate_ann(a, expr_poststate(*e)) || changed;"}, {"sha": "470ecefdc1c5e1f3ce26124997594023dd6ead56", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a423094c77b25b20afe3a812a67f03080cc3d/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=6d3a423094c77b25b20afe3a812a67f03080cc3d", "patch": "@@ -647,8 +647,11 @@ impure fn print_expr(ps s, &@ast.expr expr) {\n             wrd1(s, \"be\");\n             print_expr(s, result);\n         }\n-        case (ast.expr_log(?expr,_)) {\n-            wrd1(s, \"log\");\n+        case (ast.expr_log(?lvl,?expr,_)) {\n+            alt (lvl) {\n+                case (1) {wrd1(s, \"log\");}\n+                case (0) {wrd1(s, \"log_err\");}\n+            }\n             print_expr(s, expr);\n         }\n         case (ast.expr_check_expr(?expr,_)) {"}]}