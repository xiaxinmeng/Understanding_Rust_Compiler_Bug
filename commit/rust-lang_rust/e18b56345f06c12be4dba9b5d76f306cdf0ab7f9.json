{"sha": "e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOGI1NjM0NWYwNmMxMmJlNGRiYTliNWQ3NmYzMDZjZGYwYWI3Zjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T01:04:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T01:04:54Z"}, "message": "Auto merge of #75033 - Manishearth:rollup-d8afil1, r=Manishearth\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #74602 (Clarify the doc for MaybeUninit::zeroed on incorrect use)\n - #74720 (Clean up E0728 explanation)\n - #74992 (fix rustdoc generic param order)\n - #75015 (Add Vec::spare_capacity_mut)\n - #75022 (Use a slice pattern instead of rchunks_exact(_).next())\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "80be2e591c7eea519d4bb3041578297e02514f15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80be2e591c7eea519d4bb3041578297e02514f15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "html_url": "https://github.com/rust-lang/rust/commit/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef872f9619ed78a349c1407ebac719a980209ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef872f9619ed78a349c1407ebac719a980209ee", "html_url": "https://github.com/rust-lang/rust/commit/5ef872f9619ed78a349c1407ebac719a980209ee"}, {"sha": "82147885bbd373f5f6803bdbc497debb90ca915e", "url": "https://api.github.com/repos/rust-lang/rust/commits/82147885bbd373f5f6803bdbc497debb90ca915e", "html_url": "https://github.com/rust-lang/rust/commit/82147885bbd373f5f6803bdbc497debb90ca915e"}], "stats": {"total": 100, "additions": 63, "deletions": 37}, "files": [{"sha": "786d1b6ba82f2fd894965c5d3a0b650ee944f53d", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "patch": "@@ -65,7 +65,7 @@ use core::hash::{Hash, Hasher};\n use core::intrinsics::{arith_offset, assume};\n use core::iter::{FromIterator, FusedIterator, TrustedLen};\n use core::marker::PhantomData;\n-use core::mem::{self, ManuallyDrop};\n+use core::mem::{self, ManuallyDrop, MaybeUninit};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{self, Index, IndexMut, RangeBounds};\n use core::ptr::{self, NonNull};\n@@ -1523,6 +1523,47 @@ impl<T> Vec<T> {\n     {\n         Box::leak(self.into_boxed_slice())\n     }\n+\n+    /// Returns the remaining spare capacity of the vector as a slice of\n+    /// `MaybeUninit<T>`.\n+    ///\n+    /// The returned slice can be used to fill the vector with data (e.g. by\n+    /// reading from a file) before marking the data as initialized using the\n+    /// [`set_len`] method.\n+    ///\n+    /// [`set_len`]: #method.set_len\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_spare_capacity, maybe_uninit_extra)]\n+    ///\n+    /// // Allocate vector big enough for 10 elements.\n+    /// let mut v = Vec::with_capacity(10);\n+    ///\n+    /// // Fill in the first 3 elements.\n+    /// let uninit = v.spare_capacity_mut();\n+    /// uninit[0].write(0);\n+    /// uninit[1].write(1);\n+    /// uninit[2].write(2);\n+    ///\n+    /// // Mark the first 3 elements of the vector as being initialized.\n+    /// unsafe {\n+    ///     v.set_len(3);\n+    /// }\n+    ///\n+    /// assert_eq!(&v, &[0, 1, 2]);\n+    /// ```\n+    #[unstable(feature = \"vec_spare_capacity\", issue = \"75017\")]\n+    #[inline]\n+    pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {\n+        unsafe {\n+            slice::from_raw_parts_mut(\n+                self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,\n+                self.buf.capacity() - self.len,\n+            )\n+        }\n+    }\n }\n \n impl<T: Clone> Vec<T> {"}, {"sha": "cf721b01ce3c681c4090e4ba9d718604158de9fd", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "patch": "@@ -336,8 +336,8 @@ impl<T> MaybeUninit<T> {\n     /// assert_eq!(x, (0, false));\n     /// ```\n     ///\n-    /// *Incorrect* usage of this function: initializing a struct with zero, where some fields\n-    /// cannot hold 0 as a valid value.\n+    /// *Incorrect* usage of this function: calling `x.zeroed().assume_init()`\n+    /// when `0` is not a valid bit-pattern for the type:\n     ///\n     /// ```rust,no_run\n     /// use std::mem::MaybeUninit;"}, {"sha": "f4968a4f00e38f4da4ea6376faeff7c039d5f63f", "filename": "src/librustc_error_codes/error_codes/E0728.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0728.md", "raw_url": "https://github.com/rust-lang/rust/raw/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0728.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0728.md?ref=e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "patch": "@@ -1,6 +1,6 @@\n-[`await`] has been used outside [`async`] function or block.\n+[`await`] has been used outside [`async`] function or [`async`] block.\n \n-Erroneous code examples:\n+Erroneous code example:\n \n ```edition2018,compile_fail,E0728\n # use std::pin::Pin;\n@@ -33,7 +33,7 @@ fn foo() {\n \n [`await`] is used to suspend the current computation until the given\n future is ready to produce a value. So it is legal only within\n-an [`async`] context, like an `async fn` or an `async` block.\n+an [`async`] context, like an `async` function or an `async` block.\n \n ```edition2018\n # use std::pin::Pin;"}, {"sha": "fc00050f405182d1eddb93558a470572ed294e4b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "patch": "@@ -637,7 +637,7 @@ impl EmbargoVisitor<'tcx> {\n         &mut self,\n         segments: &[hir::PathSegment<'_>],\n     ) {\n-        if let Some([module, segment]) = segments.rchunks_exact(2).next() {\n+        if let [.., module, segment] = segments {\n             if let Some(item) = module\n                 .res\n                 .and_then(|res| res.mod_def_id())"}, {"sha": "9c44d27447db8614445e2073acb3a640db25f426", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "patch": "@@ -480,6 +480,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 .clean(self.cx)\n                 .params;\n \n+        debug!(\n+            \"param_env_to_generics({:?}): generic_params={:?}\",\n+            param_env_def_id, generic_params\n+        );\n+\n         let mut has_sized = FxHashSet::default();\n         let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n         let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();"}, {"sha": "5b048372624a4a9ff399d552cac939cc5350804f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "patch": "@@ -716,11 +716,11 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         // Bounds in the type_params and lifetimes fields are repeated in the\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n-        let stripped_typarams = gens\n+        let stripped_params = gens\n             .params\n             .iter()\n             .filter_map(|param| match param.kind {\n-                ty::GenericParamDefKind::Lifetime => None,\n+                ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n                 ty::GenericParamDefKind::Type { synthetic, .. } => {\n                     if param.name == kw::SelfUpper {\n                         assert_eq!(param.index, 0);\n@@ -732,7 +732,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                     }\n                     Some(param.clean(cx))\n                 }\n-                ty::GenericParamDefKind::Const { .. } => None,\n+                ty::GenericParamDefKind::Const { .. } => Some(param.clean(cx)),\n             })\n             .collect::<Vec<GenericParamDef>>();\n \n@@ -844,8 +844,10 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n \n         // Run through the type parameters again and insert a ?Sized\n         // unbound for any we didn't find to be Sized.\n-        for tp in &stripped_typarams {\n-            if !sized_params.contains(&tp.name) {\n+        for tp in &stripped_params {\n+            if matches!(tp.kind, types::GenericParamDefKind::Type { .. })\n+                && !sized_params.contains(&tp.name)\n+            {\n                 where_predicates.push(WP::BoundPredicate {\n                     ty: Type::Generic(tp.name.clone()),\n                     bounds: vec![GenericBound::maybe_sized(cx)],\n@@ -858,16 +860,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         // and instead see `where T: Foo + Bar + Sized + 'a`\n \n         Generics {\n-            params: gens\n-                .params\n-                .iter()\n-                .flat_map(|param| match param.kind {\n-                    ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n-                    ty::GenericParamDefKind::Type { .. } => None,\n-                    ty::GenericParamDefKind::Const { .. } => Some(param.clean(cx)),\n-                })\n-                .chain(simplify::ty_params(stripped_typarams).into_iter())\n-                .collect(),\n+            params: stripped_params,\n             where_predicates: simplify::where_clauses(cx, where_predicates),\n         }\n     }"}, {"sha": "990189f6ea04dd54da709737eaa198fdab113635", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "patch": "@@ -12,7 +12,6 @@\n //! bounds by special casing scenarios such as these. Fun!\n \n use std::collections::BTreeMap;\n-use std::mem;\n \n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n@@ -118,18 +117,6 @@ pub fn merge_bounds(\n     })\n }\n \n-pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericParamDef> {\n-    for param in &mut params {\n-        match param.kind {\n-            clean::GenericParamDefKind::Type { ref mut bounds, .. } => {\n-                *bounds = mem::take(bounds);\n-            }\n-            _ => panic!(\"expected only type parameters\"),\n-        }\n-    }\n-    params\n-}\n-\n fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId, trait_: DefId) -> bool {\n     if child == trait_ {\n         return true;"}, {"sha": "03f5bb2ca4374784065e047691780d914f9b4720", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18b56345f06c12be4dba9b5d76f306cdf0ab7f9/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=e18b56345f06c12be4dba9b5d76f306cdf0ab7f9", "patch": "@@ -11,8 +11,8 @@ pub enum Order {\n }\n \n // @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n-// @has foo/struct.VSet.html '//h3[@id=\"impl-Send\"]/code' 'impl<const ORDER: Order, T> Send for VSet<T, ORDER>'\n-// @has foo/struct.VSet.html '//h3[@id=\"impl-Sync\"]/code' 'impl<const ORDER: Order, T> Sync for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//h3[@id=\"impl-Send\"]/code' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//h3[@id=\"impl-Sync\"]/code' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }"}]}