{"sha": "428050712f3e4eb70d556926acf6933347067155", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODA1MDcxMmYzZTRlYjcwZDU1NjkyNmFjZjY5MzMzNDcwNjcxNTU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-08-05T19:09:50Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-08-05T19:09:50Z"}, "message": "Rollup merge of #27539 - steveklabnik:gh26746, r=brson\n\n1. mention them in the function chapter\r\n2. mention their coercion to closures in the closures chapter\r\n\r\nFixes #26746", "tree": {"sha": "1670a9884961433cfe8cfbe87ba0816716564c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1670a9884961433cfe8cfbe87ba0816716564c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428050712f3e4eb70d556926acf6933347067155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428050712f3e4eb70d556926acf6933347067155", "html_url": "https://github.com/rust-lang/rust/commit/428050712f3e4eb70d556926acf6933347067155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428050712f3e4eb70d556926acf6933347067155/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43451bc4ee80efa0fa82bbb7dc0354b0c8cf9f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/43451bc4ee80efa0fa82bbb7dc0354b0c8cf9f3b", "html_url": "https://github.com/rust-lang/rust/commit/43451bc4ee80efa0fa82bbb7dc0354b0c8cf9f3b"}, {"sha": "e4c229b9fdb283c733fa8b157aa6d2eeab8eb5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c229b9fdb283c733fa8b157aa6d2eeab8eb5f3", "html_url": "https://github.com/rust-lang/rust/commit/e4c229b9fdb283c733fa8b157aa6d2eeab8eb5f3"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "161c4ce90b2408614e80601fb45de3be3f7569dd", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/428050712f3e4eb70d556926acf6933347067155/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/428050712f3e4eb70d556926acf6933347067155/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=428050712f3e4eb70d556926acf6933347067155", "patch": "@@ -316,6 +316,35 @@ assert_eq!(3, answer);\n Now we take a trait object, a `&Fn`. And we have to make a reference\n to our closure when we pass it to `call_with_one`, so we use `&||`.\n \n+# Function pointers and closures\n+\n+A function pointer is kind of like a closure that has no environment. As such,\n+you can pass a function pointer to any function expecting a closure argument,\n+and it will work:\n+\n+```rust\n+fn call_with_one(some_closure: &Fn(i32) -> i32) -> i32 {\n+    some_closure(1)\n+}\n+\n+fn add_one(i: i32) -> i32 {\n+    i + 1\n+}\n+\n+let f = add_one;\n+\n+let answer = call_with_one(&f);\n+\n+assert_eq!(2, answer);\n+```\n+\n+In this example, we don\u2019t strictly need the intermediate variable `f`,\n+the name of the function works just fine too:\n+\n+```ignore\n+let answer = call_with_one(&add_one);\n+```\n+\n # Returning closures\n \n It\u2019s very common for functional-style code to return closures in various"}, {"sha": "5b29965efc60b70cca0f2acec994226c16275b89", "filename": "src/doc/trpl/functions.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/428050712f3e4eb70d556926acf6933347067155/src%2Fdoc%2Ftrpl%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/428050712f3e4eb70d556926acf6933347067155/src%2Fdoc%2Ftrpl%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ffunctions.md?ref=428050712f3e4eb70d556926acf6933347067155", "patch": "@@ -227,3 +227,34 @@ as any type:\n let x: i32 = diverges();\n let x: String = diverges();\n ```\n+\n+## Function pointers\n+\n+We can also create variable bindings which point to functions:\n+\n+```rust\n+let f: fn(i32) -> i32;\n+```\n+\n+`f` is a variable binding which points to a function that takes an `i32` as\n+an argument and returns an `i32`. For example:\n+\n+```rust\n+fn plus_one(i: i32) -> i32 {\n+    i + 1\n+}\n+\n+// without type inference\n+let f: fn(i32) -> i32 = plus_one;\n+\n+// with type inference\n+let f = plus_one;\n+```\n+\n+We can then use `f` to call the function:\n+\n+```rust\n+# fn plus_one(i: i32) -> i32 { i + 1 }\n+# let f = plus_one;\n+let six = f(5);\n+```"}]}