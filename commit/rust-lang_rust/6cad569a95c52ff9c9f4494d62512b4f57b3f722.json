{"sha": "6cad569a95c52ff9c9f4494d62512b4f57b3f722", "node_id": "C_kwDOAAsO6NoAKDZjYWQ1NjlhOTVjNTJmZjljOWY0NDk0ZDYyNTEyYjRmNTdiM2Y3MjI", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-06-08T12:23:07Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-06-09T09:00:38Z"}, "message": "thir: wrap hir id of vars into local var id", "tree": {"sha": "cce333a2b6c211e1458d8edf8020febd5db91dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cce333a2b6c211e1458d8edf8020febd5db91dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cad569a95c52ff9c9f4494d62512b4f57b3f722", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmKhtrYACgkQPNdIZH7v\nY1lV+w/9H/S1MT0XtYdzSYoDzBcepu12U34wXyyt+EcjgnwLNFzcAuCIJyKhDnPU\n+ikMxVc5QV6rJGkpTcnMqXdzX3wFAe/4tqyO2J9/6Xh1+F0VVy2pQJUDvP/Nw+Hz\nwQyFSrIU557E8wlyXHo5nKhvaU7byta4xhIZ9fff55Fm4Hq8ysg0Hvt5ln2UeRY9\nQCRz8WnYFL8UIpeCGXoPlOLbZIdo2Pgyp9iQOZOqEvb9na/pLkT5cWRvwBAmIihn\nsAHBhj7VaTJzAyzBQoUt6nAw2BbwjBIma7xMrcDdUZCqCHXZlcoSOJxrn2RqGIF3\n3b9d5mQ3L/Pr7NTUuPYrtav/d8SG6OV5n65DY/l2C0MRTqA4xTbMfLeR5hH86QNy\nJ8AVyC1EEuFzgT2F6iXRbFgIpPcrs5eW01Yxel3+/Re5hzEj6y/qGEzYdD5zf9s/\n7fm84FWrcYG/YKQf9FZ6Y5ZGKqF+oaIh86sjthv1Dryebl4bQhxnMJuI+h+PKCPT\n0AF6iBdda5h4Np6JlQcDJrgRHK1ZUdgomx3yqpzY+NjD1Pbfh+3OAmpjUFazdpuF\nFNduYRdQvZCIOKuDXNi674WMCJ3g3L/Ii4FBR53/rWqGbkOq2qLHuwM9YHU8rQNa\n8MkuRYgMU/7I6uXe5y0FqCh2qK6o7roCOEdfFRBHczHUlQlOBOM=\n=pDGl\n-----END PGP SIGNATURE-----", "payload": "tree cce333a2b6c211e1458d8edf8020febd5db91dae\nparent 14947924dfc5f317b564c771f7b98e73d05565e1\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1654690987 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1654765238 +0800\n\nthir: wrap hir id of vars into local var id\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cad569a95c52ff9c9f4494d62512b4f57b3f722", "html_url": "https://github.com/rust-lang/rust/commit/6cad569a95c52ff9c9f4494d62512b4f57b3f722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cad569a95c52ff9c9f4494d62512b4f57b3f722/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14947924dfc5f317b564c771f7b98e73d05565e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/14947924dfc5f317b564c771f7b98e73d05565e1", "html_url": "https://github.com/rust-lang/rust/commit/14947924dfc5f317b564c771f7b98e73d05565e1"}], "stats": {"total": 91, "additions": 53, "deletions": 38}, "files": [{"sha": "120d09ee353824f0b764e4e2993ebc4bebf8b33c", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=6cad569a95c52ff9c9f4494d62512b4f57b3f722", "patch": "@@ -191,6 +191,20 @@ pub enum StmtKind<'tcx> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n \n+#[derive(\n+    Clone,\n+    Debug,\n+    Copy,\n+    PartialEq,\n+    Eq,\n+    Hash,\n+    HashStable,\n+    TyEncodable,\n+    TyDecodable,\n+    TypeFoldable\n+)]\n+pub struct LocalVarId(pub hir::HirId);\n+\n /// A THIR expression.\n #[derive(Clone, Debug, HashStable)]\n pub struct Expr<'tcx> {\n@@ -332,15 +346,15 @@ pub enum ExprKind<'tcx> {\n     },\n     /// A local variable.\n     VarRef {\n-        id: hir::HirId,\n+        id: LocalVarId,\n     },\n     /// Used to represent upvars mentioned in a closure/generator\n     UpvarRef {\n         /// DefId of the closure/generator\n         closure_def_id: DefId,\n \n         /// HirId of the root variable\n-        var_hir_id: hir::HirId,\n+        var_hir_id: LocalVarId,\n     },\n     /// A borrow, e.g. `&arg`.\n     Borrow {\n@@ -596,7 +610,7 @@ pub enum PatKind<'tcx> {\n         mutability: Mutability,\n         name: Symbol,\n         mode: BindingMode,\n-        var: hir::HirId,\n+        var: LocalVarId,\n         ty: Ty<'tcx>,\n         subpattern: Option<Pat<'tcx>>,\n         /// Is this the leftmost occurrence of the binding, i.e., is `var` the"}, {"sha": "e77f5931dd65dafb022bdafa3ff254d3be46ff22", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=6cad569a95c52ff9c9f4494d62512b4f57b3f722", "patch": "@@ -3,8 +3,7 @@\n use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::HirId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::hir::place::Projection as HirProjection;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n@@ -57,7 +56,7 @@ pub(crate) enum PlaceBase {\n     /// figure out that it is captured until all the `Field` projections are applied.\n     Upvar {\n         /// HirId of the upvar\n-        var_hir_id: HirId,\n+        var_hir_id: LocalVarId,\n         /// DefId of the closure\n         closure_def_id: DefId,\n         /// The trait closure implements, `Fn`, `FnMut`, `FnOnce`\n@@ -151,12 +150,12 @@ fn is_ancestor_or_same_capture(\n /// `ty::MinCaptureList` of the root variable `var_hir_id`.\n fn compute_capture_idx<'tcx>(\n     closure_min_captures: &ty::RootVariableMinCaptureList<'tcx>,\n-    var_hir_id: HirId,\n+    var_hir_id: LocalVarId,\n     root_var_idx: usize,\n ) -> usize {\n     let mut res = 0;\n     for (var_id, capture_list) in closure_min_captures {\n-        if *var_id == var_hir_id {\n+        if *var_id == var_hir_id.0 {\n             res += root_var_idx;\n             break;\n         } else {\n@@ -176,12 +175,12 @@ fn compute_capture_idx<'tcx>(\n /// Returns None, when the ancestor is not found.\n fn find_capture_matching_projections<'a, 'tcx>(\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n-    var_hir_id: HirId,\n+    var_hir_id: LocalVarId,\n     closure_def_id: DefId,\n     projections: &[PlaceElem<'tcx>],\n ) -> Option<(usize, &'a ty::CapturedPlace<'tcx>)> {\n     let closure_min_captures = typeck_results.closure_min_captures.get(&closure_def_id)?;\n-    let root_variable_min_captures = closure_min_captures.get(&var_hir_id)?;\n+    let root_variable_min_captures = closure_min_captures.get(&var_hir_id.0)?;\n \n     let hir_projections = convert_to_hir_projections_and_truncate_for_capture(projections);\n \n@@ -500,8 +499,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 source_info,\n             ),\n             ExprKind::UpvarRef { closure_def_id, var_hir_id } => {\n-                let upvar_id = ty::UpvarId::new(var_hir_id, closure_def_id.expect_local());\n-                this.lower_captured_upvar(block, upvar_id)\n+                this.lower_captured_upvar(block, closure_def_id.expect_local(), var_hir_id)\n             }\n \n             ExprKind::VarRef { id } => {\n@@ -627,11 +625,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn lower_captured_upvar(\n         &mut self,\n         block: BasicBlock,\n-        upvar_id: ty::UpvarId,\n+        closure_expr_id: LocalDefId,\n+        var_hir_id: LocalVarId,\n     ) -> BlockAnd<PlaceBuilder<'tcx>> {\n-        let closure_ty = self\n-            .typeck_results\n-            .node_type(self.tcx.hir().local_def_id_to_hir_id(upvar_id.closure_expr_id));\n+        let closure_ty =\n+            self.typeck_results.node_type(self.tcx.hir().local_def_id_to_hir_id(closure_expr_id));\n \n         let closure_kind = if let ty::Closure(_, closure_substs) = closure_ty.kind() {\n             self.infcx.closure_kind(closure_substs).unwrap()\n@@ -641,8 +639,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         };\n \n         block.and(PlaceBuilder::from(PlaceBase::Upvar {\n-            var_hir_id: upvar_id.var_path.hir_id,\n-            closure_def_id: upvar_id.closure_expr_id.to_def_id(),\n+            var_hir_id,\n+            closure_def_id: closure_expr_id.to_def_id(),\n             closure_kind,\n         }))\n     }"}, {"sha": "dc1860cb11297fdf94d56b3e7d4a65f6e46c467d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=6cad569a95c52ff9c9f4494d62512b4f57b3f722", "patch": "@@ -14,7 +14,6 @@ use rustc_data_structures::{\n     fx::{FxHashSet, FxIndexMap, FxIndexSet},\n     stack::ensure_sufficient_stack,\n };\n-use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n@@ -690,7 +689,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub(crate) fn storage_live_binding(\n         &mut self,\n         block: BasicBlock,\n-        var: HirId,\n+        var: LocalVarId,\n         span: Span,\n         for_guard: ForGuard,\n         schedule_drop: bool,\n@@ -700,20 +699,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.push(block, Statement { source_info, kind: StatementKind::StorageLive(local_id) });\n         // Altough there is almost always scope for given variable in corner cases\n         // like #92893 we might get variable with no scope.\n-        if let Some(region_scope) = self.region_scope_tree.var_scope(var.local_id) && schedule_drop{\n+        if let Some(region_scope) = self.region_scope_tree.var_scope(var.0.local_id) && schedule_drop{\n             self.schedule_drop(span, region_scope, local_id, DropKind::Storage);\n         }\n         Place::from(local_id)\n     }\n \n     pub(crate) fn schedule_drop_for_binding(\n         &mut self,\n-        var: HirId,\n+        var: LocalVarId,\n         span: Span,\n         for_guard: ForGuard,\n     ) {\n         let local_id = self.var_local_id(var, for_guard);\n-        if let Some(region_scope) = self.region_scope_tree.var_scope(var.local_id) {\n+        if let Some(region_scope) = self.region_scope_tree.var_scope(var.0.local_id) {\n             self.schedule_drop(span, region_scope, local_id, DropKind::Value);\n         }\n     }\n@@ -730,7 +729,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             Mutability,\n             Symbol,\n             BindingMode,\n-            HirId,\n+            LocalVarId,\n             Span,\n             Ty<'tcx>,\n             UserTypeProjections,\n@@ -917,7 +916,7 @@ fn traverse_candidate<'pat, 'tcx: 'pat, C, T, I>(\n struct Binding<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n-    var_id: HirId,\n+    var_id: LocalVarId,\n     binding_mode: BindingMode,\n }\n \n@@ -2184,7 +2183,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mutability: Mutability,\n         name: Symbol,\n         mode: BindingMode,\n-        var_id: HirId,\n+        var_id: LocalVarId,\n         var_ty: Ty<'tcx>,\n         user_ty: UserTypeProjections,\n         has_guard: ArmHasGuard,"}, {"sha": "793066e43c3c79f4804a2426c67c2b87f1761be9", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=6cad569a95c52ff9c9f4494d62512b4f57b3f722", "patch": "@@ -4,19 +4,20 @@ use crate::build::scope::DropKind;\n use crate::thir::constant::parse_float;\n use crate::thir::pattern::pat_from_hir;\n use rustc_ast as ast;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{GeneratorKind, HirIdMap, Node};\n+use rustc_hir::{GeneratorKind, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::Allocation;\n use rustc_middle::mir::interpret::{ConstValue, LitToConstError, LitToConstInput, Scalar};\n use rustc_middle::mir::*;\n-use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, PatKind, Thir};\n+use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, LocalVarId, PatKind, Thir};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n use rustc_span::symbol::sym;\n@@ -445,7 +446,7 @@ struct Builder<'a, 'tcx> {\n \n     /// Maps `HirId`s of variable bindings to the `Local`s created for them.\n     /// (A match binding can have two locals; the 2nd is for the arm's guard.)\n-    var_indices: HirIdMap<LocalsForNode>,\n+    var_indices: FxHashMap<LocalVarId, LocalsForNode>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     canonical_user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,\n     upvar_mutbls: Vec<Mutability>,\n@@ -455,11 +456,11 @@ struct Builder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n-    fn is_bound_var_in_guard(&self, id: hir::HirId) -> bool {\n+    fn is_bound_var_in_guard(&self, id: LocalVarId) -> bool {\n         self.guard_context.iter().any(|frame| frame.locals.iter().any(|local| local.id == id))\n     }\n \n-    fn var_local_id(&self, id: hir::HirId, for_guard: ForGuard) -> Local {\n+    fn var_local_id(&self, id: LocalVarId, for_guard: ForGuard) -> Local {\n         self.var_indices[&id].local_id(for_guard)\n     }\n }\n@@ -543,11 +544,11 @@ enum LocalsForNode {\n \n #[derive(Debug)]\n struct GuardFrameLocal {\n-    id: hir::HirId,\n+    id: LocalVarId,\n }\n \n impl GuardFrameLocal {\n-    fn new(id: hir::HirId, _binding_mode: BindingMode) -> Self {\n+    fn new(id: LocalVarId, _binding_mode: BindingMode) -> Self {\n         GuardFrameLocal { id }\n     }\n }"}, {"sha": "fb2f5861c6f03a67903601505d531d3d395b7e01", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=6cad569a95c52ff9c9f4494d62512b4f57b3f722", "patch": "@@ -903,9 +903,12 @@ impl<'tcx> Cx<'tcx> {\n         );\n \n         if is_upvar {\n-            ExprKind::UpvarRef { closure_def_id: self.body_owner, var_hir_id }\n+            ExprKind::UpvarRef {\n+                closure_def_id: self.body_owner,\n+                var_hir_id: LocalVarId(var_hir_id),\n+            }\n         } else {\n-            ExprKind::VarRef { id: var_hir_id }\n+            ExprKind::VarRef { id: LocalVarId(var_hir_id) }\n         }\n     }\n "}, {"sha": "417cf0f89c4128f79eefb837ffca046e9a2a0226", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cad569a95c52ff9c9f4494d62512b4f57b3f722/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=6cad569a95c52ff9c9f4494d62512b4f57b3f722", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::mir::interpret::{get_slice_bytes, ConstValue};\n use rustc_middle::mir::interpret::{ErrorHandled, LitToConstError, LitToConstInput};\n use rustc_middle::mir::{self, UserTypeProjection};\n use rustc_middle::mir::{BorrowKind, Field, Mutability};\n-use rustc_middle::thir::{Ascription, BindingMode, FieldPat, Pat, PatKind, PatRange};\n+use rustc_middle::thir::{Ascription, BindingMode, FieldPat, LocalVarId, Pat, PatKind, PatRange};\n use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use rustc_middle::ty::{self, AdtDef, ConstKind, DefIdTree, Region, Ty, TyCtxt, UserType};\n@@ -288,7 +288,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     mutability,\n                     mode,\n                     name: ident.name,\n-                    var: id,\n+                    var: LocalVarId(id),\n                     ty: var_ty,\n                     subpattern: self.lower_opt_pattern(sub),\n                     is_primary: id == pat.hir_id,\n@@ -664,7 +664,7 @@ macro_rules! ClonePatternFoldableImpls {\n }\n \n ClonePatternFoldableImpls! { <'tcx>\n-    Span, Field, Mutability, Symbol, hir::HirId, usize, ty::Const<'tcx>,\n+    Span, Field, Mutability, Symbol, LocalVarId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode, AdtDef<'tcx>,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n     UserTypeProjection, CanonicalUserTypeAnnotation<'tcx>"}]}