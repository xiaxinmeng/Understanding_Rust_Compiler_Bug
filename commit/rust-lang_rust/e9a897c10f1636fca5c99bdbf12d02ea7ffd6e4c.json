{"sha": "e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YTg5N2MxMGYxNjM2ZmNhNWM5OWJkYmYxMmQwMmVhN2ZmZDZlNGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-25T07:50:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-28T18:50:13Z"}, "message": "rustbuild: Add steps for linking a sysroot\n\nWhen cross compiling for a new host, we can't actually run the host compiler to\ngenerate its own libs. In theory, however, all stage2 compilers (for any host)\nwill produce the same libraries, so we just require the build compiler to\nproduce the necessary host libraries and then we link those into place.", "tree": {"sha": "dc2b9334ecbded0cd6543e1cee46d7c8352cbf5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc2b9334ecbded0cd6543e1cee46d7c8352cbf5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c", "html_url": "https://github.com/rust-lang/rust/commit/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06773878f325e3ad180afe7abcb50e5a8bb411b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/06773878f325e3ad180afe7abcb50e5a8bb411b9", "html_url": "https://github.com/rust-lang/rust/commit/06773878f325e3ad180afe7abcb50e5a8bb411b9"}], "stats": {"total": 94, "additions": 88, "deletions": 6}, "files": [{"sha": "3be4199352ca1e5da0f4e8e75680fded2a903803", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c", "patch": "@@ -58,6 +58,30 @@ pub fn std<'a>(build: &'a Build, stage: u32, target: &str,\n     }\n \n     build.run(&mut cargo);\n+    std_link(build, stage, target, compiler, host);\n+}\n+\n+/// Link all libstd rlibs/dylibs into the sysroot location.\n+///\n+/// Links those artifacts generated in the given `stage` for `target` produced\n+/// by `compiler` into `host`'s sysroot.\n+pub fn std_link(build: &Build,\n+                stage: u32,\n+                target: &str,\n+                compiler: &Compiler,\n+                host: &str) {\n+    let libdir = build.sysroot_libdir(stage, host, target);\n+    let out_dir = build.cargo_out(stage, compiler.host, true, target);\n+\n+    // If we're linking one compiler host's output into another, then we weren't\n+    // called from the `std` method above. In that case we clean out what's\n+    // already there and then also link compiler-rt into place.\n+    if host != compiler.host {\n+        let _ = fs::remove_dir_all(&libdir);\n+        t!(fs::create_dir_all(&libdir));\n+        t!(fs::hard_link(&build.compiler_rt_built.borrow()[target],\n+                         libdir.join(staticlib(\"compiler-rt\", target))));\n+    }\n     add_to_sysroot(&out_dir, &libdir);\n }\n \n@@ -150,8 +174,21 @@ pub fn rustc<'a>(build: &'a Build, stage: u32, target: &str,\n     }\n     build.run(&mut cargo);\n \n-    let sysroot_libdir = build.sysroot_libdir(stage, host, target);\n-    add_to_sysroot(&out_dir, &sysroot_libdir);\n+    rustc_link(build, stage, target, compiler, compiler.host);\n+}\n+\n+/// Link all librustc rlibs/dylibs into the sysroot location.\n+///\n+/// Links those artifacts generated in the given `stage` for `target` produced\n+/// by `compiler` into `host`'s sysroot.\n+pub fn rustc_link(build: &Build,\n+                  stage: u32,\n+                  target: &str,\n+                  compiler: &Compiler,\n+                  host: &str) {\n+    let libdir = build.sysroot_libdir(stage, host, target);\n+    let out_dir = build.cargo_out(stage, compiler.host, false, target);\n+    add_to_sysroot(&out_dir, &libdir);\n }\n \n /// Cargo's output path for the standard library in a given stage, compiled"}, {"sha": "4a77aeb97861f283bc2f22103625785e809fa7b0", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c", "patch": "@@ -146,6 +146,14 @@ impl Build {\n                 Librustc { stage, compiler } => {\n                     compile::rustc(self, stage, target.target, &compiler);\n                 }\n+                LibstdLink { stage, compiler, host } => {\n+                    compile::std_link(self, stage, target.target,\n+                                      &compiler, host);\n+                }\n+                LibrustcLink { stage, compiler, host } => {\n+                    compile::rustc_link(self, stage, target.target,\n+                                        &compiler, host);\n+                }\n                 Rustc { stage: 0 } => {\n                     assert!(target.target == self.config.build,\n                             \"only have one stage0 compiler\");"}, {"sha": "49d418580a0b489c4a7c076e91ffafcf9739b5af", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=e9a897c10f1636fca5c99bdbf12d02ea7ffd6e4c", "patch": "@@ -32,6 +32,19 @@ macro_rules! targets {\n             (libstd, Libstd { stage: u32, compiler: Compiler<'a> }),\n             (librustc, Librustc { stage: u32, compiler: Compiler<'a> }),\n \n+            // Links the standard library/librustc produced by the compiler\n+            // provided into the host's directory also provided.\n+            (libstd_link, LibstdLink {\n+                stage: u32,\n+                compiler: Compiler<'a>,\n+                host: &'a str\n+            }),\n+            (librustc_link, LibrustcLink {\n+                stage: u32,\n+                compiler: Compiler<'a>,\n+                host: &'a str\n+            }),\n+\n             // Steps for long-running native builds. Ideally these wouldn't\n             // actually exist and would be part of build scripts, but for now\n             // these are here.\n@@ -107,13 +120,25 @@ fn top_level(build: &Build) -> Vec<Step> {\n                 continue\n             }\n             let host = t.target(host);\n-            targets.push(host.librustc(stage, t.compiler(stage)));\n+            if host.target == build.config.build {\n+                targets.push(host.librustc(stage, host.compiler(stage)));\n+            } else {\n+                targets.push(host.librustc_link(stage, t.compiler(stage),\n+                                                host.target));\n+            }\n             for target in build.config.target.iter() {\n                 if !build.flags.target.contains(target) {\n                     continue\n                 }\n-                targets.push(host.target(target)\n-                                 .libstd(stage, t.compiler(stage)));\n+\n+                if host.target == build.config.build {\n+                    targets.push(host.target(target)\n+                                     .libstd(stage, host.compiler(stage)));\n+                } else {\n+                    targets.push(host.target(target)\n+                                     .libstd_link(stage, t.compiler(stage),\n+                                                  host.target));\n+                }\n             }\n         }\n     }\n@@ -128,10 +153,14 @@ fn add_steps<'a>(build: &'a Build,\n                  target: &Step<'a>,\n                  targets: &mut Vec<Step<'a>>) {\n     for step in build.flags.step.iter() {\n-        let compiler = host.compiler(stage);\n+        let compiler = host.target(&build.config.build).compiler(stage);\n         match &step[..] {\n             \"libstd\" => targets.push(target.libstd(stage, compiler)),\n             \"librustc\" => targets.push(target.librustc(stage, compiler)),\n+            \"libstd-link\" => targets.push(target.libstd_link(stage, compiler,\n+                                                             host.target)),\n+            \"librustc-link\" => targets.push(target.librustc_link(stage, compiler,\n+                                                                 host.target)),\n             \"rustc\" => targets.push(host.rustc(stage)),\n             \"llvm\" => targets.push(target.llvm(())),\n             \"compiler-rt\" => targets.push(target.compiler_rt(())),\n@@ -179,6 +208,14 @@ impl<'a> Step<'a> {\n                 vec![self.compiler_rt(()),\n                      self.rustc(compiler.stage).target(compiler.host)]\n             }\n+            Source::LibrustcLink { stage, compiler, host } => {\n+                vec![self.librustc(stage, compiler),\n+                     self.libstd_link(stage, compiler, host)]\n+            }\n+            Source::LibstdLink { stage, compiler, host } => {\n+                vec![self.libstd(stage, compiler),\n+                     self.target(host).rustc(stage)]\n+            }\n             Source::CompilerRt { _dummy } => {\n                 vec![self.llvm(()).target(&build.config.build)]\n             }"}]}