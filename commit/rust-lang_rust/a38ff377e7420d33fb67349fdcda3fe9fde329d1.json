{"sha": "a38ff377e7420d33fb67349fdcda3fe9fde329d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOGZmMzc3ZTc0MjBkMzNmYjY3MzQ5ZmRjZGEzZmU5ZmRlMzI5ZDE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-10-19T14:09:07Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T11:18:55Z"}, "message": "Improve `conservative_is_uninhabited` comment", "tree": {"sha": "fa3add91b54d408104dabf8819f69e95ef7e8bdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa3add91b54d408104dabf8819f69e95ef7e8bdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a38ff377e7420d33fb67349fdcda3fe9fde329d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a38ff377e7420d33fb67349fdcda3fe9fde329d1", "html_url": "https://github.com/rust-lang/rust/commit/a38ff377e7420d33fb67349fdcda3fe9fde329d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a38ff377e7420d33fb67349fdcda3fe9fde329d1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1", "html_url": "https://github.com/rust-lang/rust/commit/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "3dab7f4dd777be65fbb3bcc1e68bcbb33713f19d", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff377e7420d33fb67349fdcda3fe9fde329d1/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff377e7420d33fb67349fdcda3fe9fde329d1/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=a38ff377e7420d33fb67349fdcda3fe9fde329d1", "patch": "@@ -1543,10 +1543,14 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    /// Checks whether a type is definitely uninhabited. This is\n+    /// conservative: for some types that are uninhabited we return `false`,\n+    /// but we only return `true` for types that are definitely uninhabited.\n+    /// `ty.conservative_is_uninhabited` implies that any value of type `ty`\n+    /// will be `Abi::Uninhabited`.\n     pub fn conservative_is_uninhabited(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        // Checks whether a type is definitely uninhabited. This is\n-        // conservative: for some types that are uninhabited we return `false`,\n-        // but we only return `true` for types that are definitely uninhabited.\n+        // FIXME(varkor): we can make this less conversative by substituting concrete\n+        // type arguments.\n         match self.sty {\n             ty::Never => true,\n             ty::Adt(def, _) if def.is_union() => {"}]}