{"sha": "a26837c47872066b8bfb4e455fcf75fc573e862f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNjgzN2M0Nzg3MjA2NmI4YmZiNGU0NTVmY2Y3NWZjNTczZTg2MmY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T18:54:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T18:54:36Z"}, "message": "rustc: \"import\" -> \"use\"", "tree": {"sha": "d599c4ebf2df9b66176f881e8e4c64a87475ca47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d599c4ebf2df9b66176f881e8e4c64a87475ca47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a26837c47872066b8bfb4e455fcf75fc573e862f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a26837c47872066b8bfb4e455fcf75fc573e862f", "html_url": "https://github.com/rust-lang/rust/commit/a26837c47872066b8bfb4e455fcf75fc573e862f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a26837c47872066b8bfb4e455fcf75fc573e862f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff18acc8221a0157d94cd714b448b6a596fad40", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff18acc8221a0157d94cd714b448b6a596fad40", "html_url": "https://github.com/rust-lang/rust/commit/8ff18acc8221a0157d94cd714b448b6a596fad40"}], "stats": {"total": 1802, "additions": 901, "deletions": 901}, "files": [{"sha": "e6380fd1be67ae2567262b542e7aca52684b9d2a", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,21 +1,21 @@\n-import libc::{c_int, c_uint, c_char};\n-import driver::session;\n-import session::session;\n-import lib::llvm::llvm;\n-import syntax::attr;\n-import middle::ty;\n-import metadata::{encoder, cstore};\n-import middle::trans::common::crate_ctxt;\n-import metadata::common::link_meta;\n-import std::map::hashmap;\n-import std::sha1::sha1;\n-import syntax::ast;\n-import syntax::print::pprust;\n-import lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False,\n+use libc::{c_int, c_uint, c_char};\n+use driver::session;\n+use session::session;\n+use lib::llvm::llvm;\n+use syntax::attr;\n+use middle::ty;\n+use metadata::{encoder, cstore};\n+use middle::trans::common::crate_ctxt;\n+use metadata::common::link_meta;\n+use std::map::hashmap;\n+use std::sha1::sha1;\n+use syntax::ast;\n+use syntax::print::pprust;\n+use lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False,\n         PassManagerRef, FileType};\n-import metadata::filesearch;\n-import syntax::ast_map::{path, path_mod, path_name};\n-import io::{Writer, WriterUtil};\n+use metadata::filesearch;\n+use syntax::ast_map::{path, path_mod, path_name};\n+use io::{Writer, WriterUtil};\n \n enum output_type {\n     output_type_none,"}, {"sha": "b77a667f7d35bb39d3d4a173442556c926e521ff", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,8 +1,8 @@\n-import std::map;\n-import std::map::hashmap;\n-import metadata::cstore;\n-import driver::session;\n-import metadata::filesearch;\n+use std::map;\n+use std::map::hashmap;\n+use metadata::cstore;\n+use driver::session;\n+use metadata::filesearch;\n \n export get_rpath_flags;\n "}, {"sha": "8f6e48574b5f31c2807bd496d91b7c6719efb8d2", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,11 +1,11 @@\n \n-import driver::session;\n-import middle::trans::base;\n-import middle::trans::common::{T_fn, T_i1, T_i8, T_i32,\n+use driver::session;\n+use middle::trans::base;\n+use middle::trans::common::{T_fn, T_i1, T_i8, T_i32,\n                                T_int, T_nil,\n                                T_opaque_vec, T_ptr, T_unique_ptr,\n                                T_size_t, T_void, T_vec2};\n-import lib::llvm::{type_names, ModuleRef, ValueRef, TypeRef};\n+use lib::llvm::{type_names, ModuleRef, ValueRef, TypeRef};\n \n type upcalls =\n     {_fail: ValueRef,"}, {"sha": "8d4b50f9ac480e2e6d27e1b96d3c0d2fcf311104", "filename": "src/rustc/back/x86.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fx86.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import driver::session;\n-import session::sess_os_to_meta_os;\n-import metadata::loader::meta_section_name;\n+use driver::session;\n+use session::sess_os_to_meta_os;\n+use metadata::loader::meta_section_name;\n \n fn get_target_strs(target_os: session::os) -> target_strs::t {\n     return {"}, {"sha": "ec2f5b184905be93019c0dfc1f00218b2bf52387", "filename": "src/rustc/back/x86_64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fx86_64.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import driver::session;\n-import session::sess_os_to_meta_os;\n-import metadata::loader::meta_section_name;\n+use driver::session;\n+use session::sess_os_to_meta_os;\n+use metadata::loader::meta_section_name;\n \n fn get_target_strs(target_os: session::os) -> target_strs::t {\n     return {"}, {"sha": "cbe6345a9f19f2bcaab7481731b0172e8cfc9799", "filename": "src/rustc/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,4 +1,4 @@\n-import syntax::diagnostic;\n+use syntax::diagnostic;\n export diagnostic;\n \n export driver;"}, {"sha": "345678bb6613db37828a85f2826e2c0e6975fbdd", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,20 +1,20 @@\n // -*- rust -*-\n-import metadata::{creader, cstore, filesearch};\n-import session::{session, session_, OptLevel, No, Less, Default, Aggressive};\n-import syntax::parse;\n-import syntax::{ast, codemap};\n-import syntax::attr;\n-import middle::{trans, freevars, kind, ty, typeck, lint};\n-import syntax::print::{pp, pprust};\n-import util::ppaux;\n-import back::link;\n-import result::{Ok, Err};\n-import std::getopts;\n-import io::WriterUtil;\n-import getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n-import back::{x86, x86_64};\n-import std::map::hashmap;\n-import lib::llvm::llvm;\n+use metadata::{creader, cstore, filesearch};\n+use session::{session, session_, OptLevel, No, Less, Default, Aggressive};\n+use syntax::parse;\n+use syntax::{ast, codemap};\n+use syntax::attr;\n+use middle::{trans, freevars, kind, ty, typeck, lint};\n+use syntax::print::{pp, pprust};\n+use util::ppaux;\n+use back::link;\n+use result::{Ok, Err};\n+use std::getopts;\n+use io::WriterUtil;\n+use getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n+use back::{x86, x86_64};\n+use std::map::hashmap;\n+use lib::llvm::llvm;\n \n enum pp_mode {ppm_normal, ppm_expanded, ppm_typed, ppm_identified,\n               ppm_expanded_identified }"}, {"sha": "c6b8bc2d7b986856385fa4dbee8fdfa8a98f9551", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -6,18 +6,18 @@ use std(vers = \"0.4\");\n use rustc(vers = \"0.4\");\n use syntax(vers = \"0.4\");\n \n-import core::*;\n+use core::*;\n \n // -*- rust -*-\n-import result::{Ok, Err};\n-import std::getopts;\n-import std::map::hashmap;\n-import getopts::{opt_present};\n-import rustc::driver::driver::*;\n-import syntax::codemap;\n-import syntax::diagnostic;\n-import rustc::driver::session;\n-import rustc::middle::lint;\n+use result::{Ok, Err};\n+use std::getopts;\n+use std::map::hashmap;\n+use getopts::{opt_present};\n+use rustc::driver::driver::*;\n+use syntax::codemap;\n+use syntax::diagnostic;\n+use rustc::driver::session;\n+use rustc::middle::lint;\n \n fn version(argv0: ~str) {\n     let mut vers = ~\"unknown version\";"}, {"sha": "290c6e946544e0753af67dcfd4f88e662a7a4c8f", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,13 +1,13 @@\n \n-import syntax::{ast, codemap};\n-import syntax::ast::node_id;\n-import codemap::span;\n-import syntax::ast::{int_ty, uint_ty, float_ty};\n-import syntax::parse::parse_sess;\n-import metadata::filesearch;\n-import back::target_strs;\n-import back::link;\n-import middle::lint;\n+use syntax::{ast, codemap};\n+use syntax::ast::node_id;\n+use codemap::span;\n+use syntax::ast::{int_ty, uint_ty, float_ty};\n+use syntax::parse::parse_sess;\n+use metadata::filesearch;\n+use back::target_strs;\n+use back::link;\n+use middle::lint;\n \n \n enum os { os_win32, os_macos, os_linux, os_freebsd, }"}, {"sha": "79b9baa77ddc2e38359c67e7503d9fac901bcffe", "filename": "src/rustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fconfig.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,4 +1,4 @@\n-import syntax::{ast, fold, attr};\n+use syntax::{ast, fold, attr};\n \n export strip_unconfigured_items;\n export metas_in_cfg;"}, {"sha": "e68a98f4ff54390bc2ea54521f88003319fbb3ba", "filename": "src/rustc/front/core_inject.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fcore_inject.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,8 +1,8 @@\n-import driver::session::session;\n-import syntax::codemap;\n-import syntax::ast;\n-import syntax::ast_util::*;\n-import syntax::attr;\n+use driver::session::session;\n+use syntax::codemap;\n+use syntax::ast;\n+use syntax::ast_util::*;\n+use syntax::attr;\n \n export maybe_inject_libcore_ref;\n "}, {"sha": "cc184543b009cc6a266ffd92eae12ff265b0e72d", "filename": "src/rustc/front/intrinsic_inject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic_inject.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import driver::session::session;\n-import syntax::parse;\n-import syntax::ast;\n+use driver::session::session;\n+use syntax::parse;\n+use syntax::ast;\n \n export inject_intrinsic;\n "}, {"sha": "62fed099e40d3c925b0e97e4402ca4da038cab2f", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,15 +1,15 @@\n // Code that generates a test runner to run all the tests in a crate\n \n-import syntax::{ast, ast_util};\n-import syntax::ast_util::*;\n+use syntax::{ast, ast_util};\n+use syntax::ast_util::*;\n //import syntax::ast_util::dummy_sp;\n-import syntax::fold;\n-import syntax::print::pprust;\n-import syntax::codemap::span;\n-import driver::session;\n-import session::session;\n-import syntax::attr;\n-import dvec::DVec;\n+use syntax::fold;\n+use syntax::print::pprust;\n+use syntax::codemap::span;\n+use driver::session;\n+use session::session;\n+use syntax::attr;\n+use dvec::DVec;\n \n export modify_for_testing;\n "}, {"sha": "6da8a9d57c983e005ec093103e266de31a70ea3f", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import std::map::hashmap;\n+use std::map::hashmap;\n \n-import libc::{c_char, c_int, c_uint, c_longlong, c_ulonglong};\n+use libc::{c_char, c_int, c_uint, c_longlong, c_ulonglong};\n \n type Opcode = u32;\n type Bool = c_uint;"}, {"sha": "df02a8640dc35d51a64da8a570830dfc9f67a805", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,16 +1,16 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n-import syntax::diagnostic::span_handler;\n-import syntax::{ast, ast_util};\n-import syntax::attr;\n-import syntax::visit;\n-import syntax::codemap::span;\n-import std::map::{hashmap, int_hash};\n-import syntax::print::pprust;\n-import filesearch::filesearch;\n-import common::*;\n-import dvec::DVec;\n-import syntax::parse::token::ident_interner;\n+use syntax::diagnostic::span_handler;\n+use syntax::{ast, ast_util};\n+use syntax::attr;\n+use syntax::visit;\n+use syntax::codemap::span;\n+use std::map::{hashmap, int_hash};\n+use syntax::print::pprust;\n+use filesearch::filesearch;\n+use common::*;\n+use dvec::DVec;\n+use syntax::parse::token::ident_interner;\n \n export read_crates;\n "}, {"sha": "69fc8b81b231dfc4ec8b3e2ca5babb192c5839c8", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,17 +1,17 @@\n // Searching for information from the cstore\n \n-import std::{ebml};\n-import syntax::ast;\n-import syntax::ast_util;\n-import syntax::ast_map;\n-import middle::ty;\n-import option::{Some, None};\n-import syntax::diagnostic::span_handler;\n-import syntax::diagnostic::expect;\n-import ast_util::dummy_sp;\n-import common::*;\n-import std::map::hashmap;\n-import dvec::DVec;\n+use std::{ebml};\n+use syntax::ast;\n+use syntax::ast_util;\n+use syntax::ast_map;\n+use middle::ty;\n+use option::{Some, None};\n+use syntax::diagnostic::span_handler;\n+use syntax::diagnostic::expect;\n+use ast_util::dummy_sp;\n+use common::*;\n+use std::map::hashmap;\n+use dvec::DVec;\n \n export class_dtor;\n export get_symbol;"}, {"sha": "ce20569116d298f1e0637780e4f5368130490f5c", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,11 +1,11 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-import std::map;\n-import std::map::hashmap;\n-import syntax::{ast, attr};\n-import syntax::ast_util::new_def_hash;\n-import syntax::parse::token::ident_interner;\n+use std::map;\n+use std::map::hashmap;\n+use syntax::{ast, attr};\n+use syntax::ast_util::new_def_hash;\n+use syntax::parse::token::ident_interner;\n \n export cstore;\n export cnum_map;"}, {"sha": "d9ecc114062b04174a7af89739113e5c2a801d32", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,21 +1,21 @@\n // Decoding metadata from a single crate's metadata\n \n-import std::{ebml, map};\n-import std::map::{hashmap, str_hash};\n-import io::WriterUtil;\n-import dvec::DVec;\n-import syntax::{ast, ast_util};\n-import syntax::attr;\n-import middle::ty;\n-import syntax::ast_map;\n-import tydecode::{parse_ty_data, parse_def_id, parse_bounds_data,\n+use std::{ebml, map};\n+use std::map::{hashmap, str_hash};\n+use io::WriterUtil;\n+use dvec::DVec;\n+use syntax::{ast, ast_util};\n+use syntax::attr;\n+use middle::ty;\n+use syntax::ast_map;\n+use tydecode::{parse_ty_data, parse_def_id, parse_bounds_data,\n         parse_ident};\n-import syntax::print::pprust;\n-import cmd=cstore::crate_metadata;\n-import util::ppaux::ty_to_str;\n-import syntax::diagnostic::span_handler;\n-import common::*;\n-import syntax::parse::token::ident_interner;\n+use syntax::print::pprust;\n+use cmd=cstore::crate_metadata;\n+use util::ppaux::ty_to_str;\n+use syntax::diagnostic::span_handler;\n+use common::*;\n+use syntax::parse::token::ident_interner;\n \n \n export class_dtor;"}, {"sha": "3d114ce4c6bab2a17b68220048c9a1baeb26bc8e", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,26 +1,26 @@\n // Metadata encoding\n \n-import util::ppaux::ty_to_str;\n-\n-import std::{ebml, map};\n-import std::map::hashmap;\n-import io::WriterUtil;\n-import ebml::Writer;\n-import syntax::ast::*;\n-import syntax::print::pprust;\n-import syntax::{ast_util, visit};\n-import syntax::ast_util::*;\n-import common::*;\n-import middle::ty;\n-import middle::ty::node_id_to_type;\n-import middle::resolve;\n-import syntax::ast_map;\n-import syntax::attr;\n-import std::serialization::serializer;\n-import std::ebml::serializer;\n-import str::to_bytes;\n-import syntax::ast;\n-import syntax::diagnostic::span_handler;\n+use util::ppaux::ty_to_str;\n+\n+use std::{ebml, map};\n+use std::map::hashmap;\n+use io::WriterUtil;\n+use ebml::Writer;\n+use syntax::ast::*;\n+use syntax::print::pprust;\n+use syntax::{ast_util, visit};\n+use syntax::ast_util::*;\n+use common::*;\n+use middle::ty;\n+use middle::ty::node_id_to_type;\n+use middle::resolve;\n+use syntax::ast_map;\n+use syntax::attr;\n+use std::serialization::serializer;\n+use std::ebml::serializer;\n+use str::to_bytes;\n+use syntax::ast;\n+use syntax::diagnostic::span_handler;\n \n export encode_parms;\n export encode_metadata;"}, {"sha": "26363806da02be2344ca76c91ff329cd65b7ec49", "filename": "src/rustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ffilesearch.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -2,7 +2,7 @@\n // FIXME (#2658): I'm not happy how this module turned out. Should\n // probably just be folded into cstore.\n \n-import result::Result;\n+use result::Result;\n export filesearch;\n export mk_filesearch;\n export pick;"}, {"sha": "c6f53377f1f18fb5a10f449972e172b8d6ddbde2", "filename": "src/rustc/metadata/loader.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Floader.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,13 +1,13 @@\n //! Finds crate binaries and loads their metadata\n \n-import syntax::diagnostic::span_handler;\n-import syntax::{ast, attr};\n-import syntax::print::pprust;\n-import syntax::codemap::span;\n-import lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n-import filesearch::filesearch;\n-import io::WriterUtil;\n-import syntax::parse::token::ident_interner;\n+use syntax::diagnostic::span_handler;\n+use syntax::{ast, attr};\n+use syntax::print::pprust;\n+use syntax::codemap::span;\n+use lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n+use filesearch::filesearch;\n+use io::WriterUtil;\n+use syntax::parse::token::ident_interner;\n \n export os;\n export os_macos, os_win32, os_linux, os_freebsd;"}, {"sha": "163bb5db81bb866298259b39c49824897b56022a", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -3,12 +3,12 @@\n // tjc note: Would be great to have a `match check` macro equivalent\n // for some of these\n \n-import syntax::ast;\n-import syntax::ast::*;\n-import syntax::ast_util;\n-import syntax::ast_util::respan;\n-import middle::ty;\n-import std::map::hashmap;\n+use syntax::ast;\n+use syntax::ast::*;\n+use syntax::ast_util;\n+use syntax::ast_util::respan;\n+use middle::ty;\n+use std::map::hashmap;\n \n export parse_ty_data, parse_def_id, parse_ident;\n export parse_bounds_data;"}, {"sha": "42a258e836f059980644f78de5f43a4fbebd1d71", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,12 +1,12 @@\n // Type encoding\n \n-import io::WriterUtil;\n-import std::map::hashmap;\n-import syntax::ast::*;\n-import syntax::diagnostic::span_handler;\n-import middle::ty;\n-import middle::ty::vid;\n-import syntax::print::pprust::*;\n+use io::WriterUtil;\n+use std::map::hashmap;\n+use syntax::ast::*;\n+use syntax::diagnostic::span_handler;\n+use middle::ty;\n+use middle::ty::vid;\n+use syntax::print::pprust::*;\n \n export ctxt;\n export ty_abbrev;"}, {"sha": "08dd70f757be94627a39218ddaf37d52d40dce08", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,45 +1,45 @@\n-import util::ppaux::ty_to_str;\n-\n-import syntax::ast;\n-import syntax::fold;\n-import syntax::fold::*;\n-import syntax::visit;\n-import syntax::ast_map;\n-import syntax::ast_util;\n-import syntax::codemap::span;\n-import std::ebml;\n-import std::ebml::Writer;\n-import std::ebml::get_doc;\n-import std::map::hashmap;\n-import std::serialization::serializer;\n-import std::serialization::deserializer;\n-import std::serialization::serializer_helpers;\n-import std::serialization::deserializer_helpers;\n-import std::prettyprint::serializer;\n-import middle::{ty, typeck};\n-import middle::typeck::{method_origin, method_map_entry,\n+use util::ppaux::ty_to_str;\n+\n+use syntax::ast;\n+use syntax::fold;\n+use syntax::fold::*;\n+use syntax::visit;\n+use syntax::ast_map;\n+use syntax::ast_util;\n+use syntax::codemap::span;\n+use std::ebml;\n+use std::ebml::Writer;\n+use std::ebml::get_doc;\n+use std::map::hashmap;\n+use std::serialization::serializer;\n+use std::serialization::deserializer;\n+use std::serialization::serializer_helpers;\n+use std::serialization::deserializer_helpers;\n+use std::prettyprint::serializer;\n+use middle::{ty, typeck};\n+use middle::typeck::{method_origin, method_map_entry,\n                         serialize_method_map_entry,\n                         deserialize_method_map_entry,\n                         vtable_res,\n                         vtable_origin};\n-import driver::session::session;\n-import middle::freevars::{freevar_entry,\n+use driver::session::session;\n+use middle::freevars::{freevar_entry,\n                           serialize_freevar_entry,\n                           deserialize_freevar_entry};\n-import c = metadata::common;\n-import e = metadata::encoder;\n-import cstore = metadata::cstore;\n-import metadata::encoder;\n-import metadata::decoder;\n-import metadata::tyencode;\n-import metadata::tydecode;\n+use c = metadata::common;\n+use e = metadata::encoder;\n+use cstore = metadata::cstore;\n+use metadata::encoder;\n+use metadata::decoder;\n+use metadata::tyencode;\n+use metadata::tydecode;\n \n \n // used in testing:\n-import syntax::diagnostic;\n-import syntax::codemap;\n-import syntax::parse;\n-import syntax::print::pprust;\n+use syntax::diagnostic;\n+use syntax::codemap;\n+use syntax::parse;\n+use syntax::print::pprust;\n \n export maps;\n export encode_inlined_item;"}, {"sha": "c567935194198415f2215aac9b54d5981764261e", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -214,23 +214,23 @@ Borrowck results in two maps.\n   given a memory location and not used as immediates.\n  */\n \n-import syntax::ast;\n-import syntax::ast::{mutability, m_mutbl, m_imm, m_const};\n-import syntax::visit;\n-import syntax::ast_util;\n-import syntax::ast_map;\n-import syntax::codemap::span;\n-import util::ppaux::{ty_to_str, region_to_str, explain_region};\n-import std::map::{int_hash, hashmap, set};\n-import std::list;\n-import std::list::{list, cons, nil};\n-import result::{Result, Ok, Err};\n-import syntax::print::pprust;\n-import util::common::indenter;\n-import ty::to_str;\n-import driver::session::session;\n-import dvec::DVec;\n-import mem_categorization::*;\n+use syntax::ast;\n+use syntax::ast::{mutability, m_mutbl, m_imm, m_const};\n+use syntax::visit;\n+use syntax::ast_util;\n+use syntax::ast_map;\n+use syntax::codemap::span;\n+use util::ppaux::{ty_to_str, region_to_str, explain_region};\n+use std::map::{int_hash, hashmap, set};\n+use std::list;\n+use std::list::{list, cons, nil};\n+use result::{Result, Ok, Err};\n+use syntax::print::pprust;\n+use util::common::indenter;\n+use ty::to_str;\n+use driver::session::session;\n+use dvec::DVec;\n+use mem_categorization::*;\n \n export check_crate, root_map, mutbl_map;\n "}, {"sha": "906efa43a4a386e7d9815c8c649f1009ba8f6c07", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -7,7 +7,7 @@\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves to dnot affect things loaned out in any way\n \n-import dvec::DVec;\n+use dvec::DVec;\n \n export check_loans;\n "}, {"sha": "ef01e254c860ef656fe6bdaa59a00c6cec398677", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -6,9 +6,9 @@\n // their associated scopes.  In phase two, checking loans, we will then make\n // sure that all of these loans are honored.\n \n-import mem_categorization::{opt_deref_kind};\n-import preserve::{preserve_condition, pc_ok, pc_if_pure};\n-import ty::ty_region;\n+use mem_categorization::{opt_deref_kind};\n+use preserve::{preserve_condition, pc_ok, pc_if_pure};\n+use ty::ty_region;\n \n export gather_loans;\n "}, {"sha": "353022214c59c0112db2e1c223a6cda785cb2aa8", "filename": "src/rustc/middle/borrowck/loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -3,7 +3,7 @@\n // of the scope S, presuming that the returned set of loans `Ls` are honored.\n \n export public_methods;\n-import result::{Result, Ok, Err};\n+use result::{Result, Ok, Err};\n \n impl borrowck_ctxt {\n     fn loan(cmt: cmt,"}, {"sha": "3a0f67c66b829c6e744a3cd6fc75e4dd9c60d354", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,8 +1,8 @@\n-import syntax::{ast, ast_util};\n-import driver::session::session;\n-import syntax::codemap::span;\n-import std::map;\n-import std::map::hashmap;\n+use syntax::{ast, ast_util};\n+use driver::session::session;\n+use syntax::codemap::span;\n+use std::map;\n+use std::map::hashmap;\n \n export capture_mode;\n export capture_var;"}, {"sha": "660a502df26cf8f9a393e4d9a030775a12c49609", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,16 +1,16 @@\n-import syntax::ast::*;\n-import syntax::ast_util::{variant_def_ids, dummy_sp, unguarded_pat};\n-import const_eval::{eval_const_expr, const_val, const_int, const_bool,\n+use syntax::ast::*;\n+use syntax::ast_util::{variant_def_ids, dummy_sp, unguarded_pat};\n+use const_eval::{eval_const_expr, const_val, const_int, const_bool,\n                     compare_const_vals};\n-import syntax::codemap::span;\n-import syntax::print::pprust::pat_to_str;\n-import util::ppaux::ty_to_str;\n-import pat_util::*;\n-import syntax::visit;\n-import driver::session::session;\n-import middle::ty;\n-import middle::ty::*;\n-import std::map::hashmap;\n+use syntax::codemap::span;\n+use syntax::print::pprust::pat_to_str;\n+use util::ppaux::ty_to_str;\n+use pat_util::*;\n+use syntax::visit;\n+use driver::session::session;\n+use middle::ty;\n+use middle::ty::*;\n+use std::map::hashmap;\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) {\n     visit::visit_crate(*crate, (), visit::mk_vt(@{"}, {"sha": "b0c410211c1118a4a31282bdc658d8c4313a860c", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,8 +1,8 @@\n-import syntax::ast::*;\n-import syntax::{visit, ast_util, ast_map};\n-import driver::session::session;\n-import std::map::hashmap;\n-import dvec::DVec;\n+use syntax::ast::*;\n+use syntax::{visit, ast_util, ast_map};\n+use driver::session::session;\n+use std::map::hashmap;\n+use dvec::DVec;\n \n fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,\n                def_map: resolve::DefMap,"}, {"sha": "79f8cf24da07de468546c865c9981ad73d9c50e2", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import syntax::ast::*;\n-import syntax::visit;\n-import driver::session::session;\n+use syntax::ast::*;\n+use syntax::visit;\n+use driver::session::session;\n \n type ctx = {in_loop: bool, can_ret: bool};\n "}, {"sha": "90bfbc4117b51d3526d2d9eb539167e6797a2af7", "filename": "src/rustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fconst_eval.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,5 +1,5 @@\n-import syntax::{ast,ast_util,visit};\n-import ast::*;\n+use syntax::{ast,ast_util,visit};\n+use ast::*;\n \n //\n // This pass classifies expressions by their constant-ness."}, {"sha": "59d97e0351a889f57a6922eedc13f2d8a5cd1a46", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,12 +1,12 @@\n // A pass that annotates for each loops and functions with the free\n // variables that they contain.\n \n-import syntax::print::pprust::path_to_str;\n-import std::map::*;\n-import option::*;\n-import syntax::{ast, ast_util, visit};\n-import syntax::ast::{serialize_span, deserialize_span};\n-import syntax::codemap::span;\n+use syntax::print::pprust::path_to_str;\n+use std::map::*;\n+use option::*;\n+use syntax::{ast, ast_util, visit};\n+use syntax::ast::{serialize_span, deserialize_span};\n+use syntax::codemap::span;\n \n export annotate_freevars;\n export freevar_map;"}, {"sha": "3fc02702ab4630b43dff3dd87213734f13f384c7", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,13 +1,13 @@\n-import syntax::{visit, ast_util};\n-import syntax::ast::*;\n-import syntax::codemap::span;\n-import ty::{kind, kind_copyable, kind_noncopyable, kind_const};\n-import driver::session::session;\n-import std::map::hashmap;\n-import util::ppaux::{ty_to_str, tys_to_str};\n-import syntax::print::pprust::expr_to_str;\n-import freevars::freevar_entry;\n-import lint::{non_implicitly_copyable_typarams,implicit_copies};\n+use syntax::{visit, ast_util};\n+use syntax::ast::*;\n+use syntax::codemap::span;\n+use ty::{kind, kind_copyable, kind_noncopyable, kind_const};\n+use driver::session::session;\n+use std::map::hashmap;\n+use util::ppaux::{ty_to_str, tys_to_str};\n+use syntax::print::pprust::expr_to_str;\n+use freevars::freevar_entry;\n+use lint::{non_implicitly_copyable_typarams,implicit_copies};\n \n // Kind analysis pass.\n //"}, {"sha": "55f7113de089ba9d4c0e8d3337bd0b6528ebbf2a", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -9,18 +9,18 @@\n //\n // * Functions called by the compiler itself.\n \n-import driver::session::session;\n-import metadata::csearch::{each_path, get_item_attrs};\n-import metadata::cstore::{iter_crate_data};\n-import metadata::decoder::{dl_def, dl_field, dl_impl};\n-import syntax::ast::{crate, def_id, def_ty, lit_str, meta_item, meta_list};\n-import syntax::ast::{meta_name_value, meta_word};\n-import syntax::ast_util::{local_def};\n-import syntax::visit::{default_simple_visitor, mk_simple_visitor};\n-import syntax::visit::{visit_crate, visit_item};\n-\n-import std::map::{hashmap, str_hash};\n-import str_eq = str::eq;\n+use driver::session::session;\n+use metadata::csearch::{each_path, get_item_attrs};\n+use metadata::cstore::{iter_crate_data};\n+use metadata::decoder::{dl_def, dl_field, dl_impl};\n+use syntax::ast::{crate, def_id, def_ty, lit_str, meta_item, meta_list};\n+use syntax::ast::{meta_name_value, meta_word};\n+use syntax::ast_util::{local_def};\n+use syntax::visit::{default_simple_visitor, mk_simple_visitor};\n+use syntax::visit::{visit_crate, visit_item};\n+\n+use std::map::{hashmap, str_hash};\n+use str_eq = str::eq;\n \n struct LanguageItems {\n     mut const_trait: Option<def_id>;"}, {"sha": "5acf215547763265cd765cf848798e1e9c48b127", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,16 +1,16 @@\n-import driver::session;\n-import driver::session::session;\n-import middle::ty;\n-import syntax::{ast, ast_util, visit};\n-import syntax::attr;\n-import syntax::codemap::span;\n-import std::map::{map,hashmap,int_hash,hash_from_strs};\n-import std::smallintmap::{map,smallintmap};\n-import io::WriterUtil;\n-import util::ppaux::{ty_to_str};\n-import middle::pat_util::{pat_bindings};\n-import syntax::ast_util::{path_to_ident};\n-import syntax::print::pprust::{expr_to_str, mode_to_str, pat_to_str};\n+use driver::session;\n+use driver::session::session;\n+use middle::ty;\n+use syntax::{ast, ast_util, visit};\n+use syntax::attr;\n+use syntax::codemap::span;\n+use std::map::{map,hashmap,int_hash,hash_from_strs};\n+use std::smallintmap::{map,smallintmap};\n+use io::WriterUtil;\n+use util::ppaux::{ty_to_str};\n+use middle::pat_util::{pat_bindings};\n+use syntax::ast_util::{path_to_ident};\n+use syntax::print::pprust::{expr_to_str, mode_to_str, pat_to_str};\n export lint, ctypes, unused_imports, while_true, path_statement, old_vecs;\n export unrecognized_lint, non_implicitly_copyable_typarams;\n export vecs_implicitly_copyable, implicit_copies;"}, {"sha": "e90e43352477f9aa4c08957fe15fb121b8f961d3", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -100,16 +100,16 @@\n  * - `self_var`: a variable representing 'self'\n  */\n \n-import dvec::DVec;\n-import std::map::{hashmap, int_hash, str_hash, uint_hash};\n-import syntax::{visit, ast_util};\n-import syntax::print::pprust::{expr_to_str};\n-import visit::vt;\n-import syntax::codemap::span;\n-import syntax::ast::*;\n-import driver::session::session;\n-import io::WriterUtil;\n-import capture::{cap_move, cap_drop, cap_copy, cap_ref};\n+use dvec::DVec;\n+use std::map::{hashmap, int_hash, str_hash, uint_hash};\n+use syntax::{visit, ast_util};\n+use syntax::print::pprust::{expr_to_str};\n+use visit::vt;\n+use syntax::codemap::span;\n+use syntax::ast::*;\n+use driver::session::session;\n+use io::WriterUtil;\n+use capture::{cap_move, cap_drop, cap_copy, cap_ref};\n \n export check_crate;\n export last_use_map;"}, {"sha": "99d0e6372e093f19af90d4357635743a8f8dbe6a", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -36,12 +36,12 @@\n  * then an index to jump forward to the relevant item.\n  */\n \n-import syntax::ast;\n-import syntax::ast::{m_imm, m_const, m_mutbl};\n-import syntax::codemap::span;\n-import syntax::print::pprust;\n-import util::ppaux::{ty_to_str, region_to_str};\n-import util::common::indenter;\n+use syntax::ast;\n+use syntax::ast::{m_imm, m_const, m_mutbl};\n+use syntax::codemap::span;\n+use syntax::print::pprust;\n+use util::ppaux::{ty_to_str, region_to_str};\n+use util::common::indenter;\n \n enum categorization {\n     cat_rvalue,                     // result of eval'ing some misc expr"}, {"sha": "6c52204f12d80ffee80b15fbe0ffdbfc4396566a", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,10 +1,10 @@\n-import syntax::ast::*;\n-import syntax::ast_util;\n-import syntax::ast_util::{path_to_ident, respan, walk_pat};\n-import syntax::fold;\n-import syntax::fold::*;\n-import syntax::codemap::span;\n-import std::map::hashmap;\n+use syntax::ast::*;\n+use syntax::ast_util;\n+use syntax::ast_util::{path_to_ident, respan, walk_pat};\n+use syntax::fold;\n+use syntax::fold::*;\n+use syntax::codemap::span;\n+use std::map::hashmap;\n \n export pat_binding_ids, pat_bindings, pat_id_map;\n export pat_is_variant;"}, {"sha": "e5f6a13693521cbad8e24012bdb2a19783d426aa", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -7,20 +7,20 @@ region parameterized.\n \n */\n \n-import driver::session::session;\n-import middle::ty;\n-import syntax::{ast, visit};\n-import syntax::codemap::span;\n-import syntax::print::pprust;\n-import syntax::ast_util::new_def_hash;\n-import syntax::ast_map;\n-import dvec::DVec;\n-import metadata::csearch;\n-import ty::{region_variance, rv_covariant, rv_invariant, rv_contravariant};\n-\n-import std::list;\n-import std::list::list;\n-import std::map::{hashmap, int_hash};\n+use driver::session::session;\n+use middle::ty;\n+use syntax::{ast, visit};\n+use syntax::codemap::span;\n+use syntax::print::pprust;\n+use syntax::ast_util::new_def_hash;\n+use syntax::ast_map;\n+use dvec::DVec;\n+use metadata::csearch;\n+use ty::{region_variance, rv_covariant, rv_invariant, rv_contravariant};\n+\n+use std::list;\n+use std::list::list;\n+use std::map::{hashmap, int_hash};\n \n type parent = Option<ast::node_id>;\n "}, {"sha": "25fbe1b99ad18b25d281bd9bd24a1c8a7419506c", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,67 +1,67 @@\n-import driver::session::session;\n-import metadata::csearch::{each_path, get_method_names_if_trait};\n-import metadata::cstore::find_use_stmt_cnum;\n-import metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n-import middle::lang_items::LanguageItems;\n-import middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n-import middle::pat_util::{pat_bindings};\n-import syntax::ast::{_mod, add, arm};\n-import syntax::ast::{bind_by_ref, bind_by_implicit_ref, bind_by_value};\n-import syntax::ast::{bitand, bitor, bitxor};\n-import syntax::ast::{blk, bound_const, bound_copy, bound_owned, bound_send};\n-import syntax::ast::{bound_trait, binding_mode,\n+use driver::session::session;\n+use metadata::csearch::{each_path, get_method_names_if_trait};\n+use metadata::cstore::find_use_stmt_cnum;\n+use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n+use middle::lang_items::LanguageItems;\n+use middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n+use middle::pat_util::{pat_bindings};\n+use syntax::ast::{_mod, add, arm};\n+use syntax::ast::{bind_by_ref, bind_by_implicit_ref, bind_by_value};\n+use syntax::ast::{bitand, bitor, bitxor};\n+use syntax::ast::{blk, bound_const, bound_copy, bound_owned, bound_send};\n+use syntax::ast::{bound_trait, binding_mode,\n                      capture_clause, class_ctor, class_dtor};\n-import syntax::ast::{crate, crate_num, decl_item};\n-import syntax::ast::{def, def_arg, def_binding, def_class, def_const, def_fn};\n-import syntax::ast::{def_foreign_mod, def_id, def_label, def_local, def_mod};\n-import syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n-import syntax::ast::{def_typaram_binder, def_static_method};\n-import syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n-import syntax::ast::{expr_binary, expr_cast, expr_field, expr_fn};\n-import syntax::ast::{expr_fn_block, expr_index, expr_path};\n-import syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n-import syntax::ast::{def_upvar, def_use, def_variant, div, eq};\n-import syntax::ast::{enum_variant_kind, expr, expr_again, expr_assign_op};\n-import syntax::ast::{expr_binary, expr_break, expr_cast, expr_field, expr_fn};\n-import syntax::ast::{expr_fn_block, expr_index, expr_loop};\n-import syntax::ast::{expr_path, expr_struct, expr_unary, fn_decl};\n-import syntax::ast::{foreign_item, foreign_item_const, foreign_item_fn, ge};\n-import syntax::ast::{gt, ident, impure_fn, inherited, item, item_class};\n-import syntax::ast::{item_const, item_enum, item_fn, item_foreign_mod};\n-import syntax::ast::{item_impl, item_mac, item_mod, item_trait, item_ty, le};\n-import syntax::ast::{local, local_crate, lt, method, module_ns, mul, ne, neg};\n-import syntax::ast::{node_id, pat, pat_enum, pat_ident, path, prim_ty};\n-import syntax::ast::{pat_box, pat_lit, pat_range, pat_rec, pat_struct};\n-import syntax::ast::{pat_tup, pat_uniq, pat_wild, private, provided, public};\n-import syntax::ast::{required, rem, self_ty_, shl, shr, stmt_decl};\n-import syntax::ast::{struct_field, struct_variant_kind, sty_static, subtract};\n-import syntax::ast::{trait_ref, tuple_variant_kind, ty, ty_bool, ty_char};\n-import syntax::ast::{ty_f, ty_f32, ty_f64, ty_float, ty_i, ty_i16, ty_i32};\n-import syntax::ast::{ty_i64, ty_i8, ty_int, ty_param, ty_path, ty_str, ty_u};\n-import syntax::ast::{ty_u16, ty_u32, ty_u64, ty_u8, ty_uint, type_value_ns};\n-import syntax::ast::{variant, view_item, view_item_export, view_item_import};\n-import syntax::ast::{view_item_use, view_path_glob, view_path_list};\n-import syntax::ast::{view_path_simple, visibility, anonymous, named};\n-import syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n-import syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n-import syntax::attr::{attr_metas, contains_name};\n-import syntax::print::pprust::{pat_to_str, path_to_str};\n-import syntax::codemap::span;\n-import syntax::visit::{default_visitor, fk_method, mk_vt, visit_block};\n-import syntax::visit::{visit_crate, visit_expr, visit_expr_opt, visit_fn};\n-import syntax::visit::{visit_foreign_item, visit_item, visit_method_helper};\n-import syntax::visit::{visit_mod, visit_ty, vt};\n-\n-import box::ptr_eq;\n-import dvec::DVec;\n-import option::{get, is_some};\n-import str::{connect, split_str};\n-import vec::pop;\n-import syntax::parse::token::ident_interner;\n-\n-import std::list::{cons, list, nil};\n-import std::map::{hashmap, int_hash, uint_hash};\n-import str_eq = str::eq;\n+use syntax::ast::{crate, crate_num, decl_item};\n+use syntax::ast::{def, def_arg, def_binding, def_class, def_const, def_fn};\n+use syntax::ast::{def_foreign_mod, def_id, def_label, def_local, def_mod};\n+use syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n+use syntax::ast::{def_typaram_binder, def_static_method};\n+use syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n+use syntax::ast::{expr_binary, expr_cast, expr_field, expr_fn};\n+use syntax::ast::{expr_fn_block, expr_index, expr_path};\n+use syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n+use syntax::ast::{def_upvar, def_use, def_variant, div, eq};\n+use syntax::ast::{enum_variant_kind, expr, expr_again, expr_assign_op};\n+use syntax::ast::{expr_binary, expr_break, expr_cast, expr_field, expr_fn};\n+use syntax::ast::{expr_fn_block, expr_index, expr_loop};\n+use syntax::ast::{expr_path, expr_struct, expr_unary, fn_decl};\n+use syntax::ast::{foreign_item, foreign_item_const, foreign_item_fn, ge};\n+use syntax::ast::{gt, ident, impure_fn, inherited, item, item_class};\n+use syntax::ast::{item_const, item_enum, item_fn, item_foreign_mod};\n+use syntax::ast::{item_impl, item_mac, item_mod, item_trait, item_ty, le};\n+use syntax::ast::{local, local_crate, lt, method, module_ns, mul, ne, neg};\n+use syntax::ast::{node_id, pat, pat_enum, pat_ident, path, prim_ty};\n+use syntax::ast::{pat_box, pat_lit, pat_range, pat_rec, pat_struct};\n+use syntax::ast::{pat_tup, pat_uniq, pat_wild, private, provided, public};\n+use syntax::ast::{required, rem, self_ty_, shl, shr, stmt_decl};\n+use syntax::ast::{struct_field, struct_variant_kind, sty_static, subtract};\n+use syntax::ast::{trait_ref, tuple_variant_kind, ty, ty_bool, ty_char};\n+use syntax::ast::{ty_f, ty_f32, ty_f64, ty_float, ty_i, ty_i16, ty_i32};\n+use syntax::ast::{ty_i64, ty_i8, ty_int, ty_param, ty_path, ty_str, ty_u};\n+use syntax::ast::{ty_u16, ty_u32, ty_u64, ty_u8, ty_uint, type_value_ns};\n+use syntax::ast::{variant, view_item, view_item_export, view_item_import};\n+use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n+use syntax::ast::{view_path_simple, visibility, anonymous, named};\n+use syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n+use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n+use syntax::attr::{attr_metas, contains_name};\n+use syntax::print::pprust::{pat_to_str, path_to_str};\n+use syntax::codemap::span;\n+use syntax::visit::{default_visitor, fk_method, mk_vt, visit_block};\n+use syntax::visit::{visit_crate, visit_expr, visit_expr_opt, visit_fn};\n+use syntax::visit::{visit_foreign_item, visit_item, visit_method_helper};\n+use syntax::visit::{visit_mod, visit_ty, vt};\n+\n+use box::ptr_eq;\n+use dvec::DVec;\n+use option::{get, is_some};\n+use str::{connect, split_str};\n+use vec::pop;\n+use syntax::parse::token::ident_interner;\n+\n+use std::list::{cons, list, nil};\n+use std::map::{hashmap, int_hash, uint_hash};\n+use str_eq = str::eq;\n \n // Definition mapping\n type DefMap = hashmap<node_id,def>;"}, {"sha": "8b88479257838832007bd2f87feb33d017c8f1cd", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,21 +1,21 @@\n-import driver::session::session;\n-import lib::llvm::llvm;\n-import lib::llvm::{ValueRef, BasicBlockRef};\n-import pat_util::*;\n-import build::*;\n-import base::*;\n-import syntax::ast;\n-import syntax::ast_util;\n-import syntax::ast_util::{dummy_sp, path_to_ident};\n-import syntax::ast::def_id;\n-import syntax::codemap::span;\n-import syntax::print::pprust::pat_to_str;\n-import middle::resolve::DefMap;\n-import back::abi;\n-import std::map::hashmap;\n-import dvec::DVec;\n-\n-import common::*;\n+use driver::session::session;\n+use lib::llvm::llvm;\n+use lib::llvm::{ValueRef, BasicBlockRef};\n+use pat_util::*;\n+use build::*;\n+use base::*;\n+use syntax::ast;\n+use syntax::ast_util;\n+use syntax::ast_util::{dummy_sp, path_to_ident};\n+use syntax::ast::def_id;\n+use syntax::codemap::span;\n+use syntax::print::pprust::pat_to_str;\n+use middle::resolve::DefMap;\n+use back::abi;\n+use std::map::hashmap;\n+use dvec::DVec;\n+\n+use common::*;\n \n // An option identifying a branch (either a literal, a enum variant or a\n // range)"}, {"sha": "836948aff023931b2df0b2cd3446d886a5f56515", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -13,46 +13,46 @@\n //     but many TypeRefs correspond to one ty::t; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n-import libc::{c_uint, c_ulonglong};\n-import std::{map, time, list};\n-import std::map::hashmap;\n-import std::map::{int_hash, str_hash};\n-import driver::session;\n-import session::session;\n-import syntax::attr;\n-import back::{link, abi, upcall};\n-import syntax::{ast, ast_util, codemap, ast_map};\n-import ast_util::{local_def, path_to_ident};\n-import syntax::visit;\n-import syntax::codemap::span;\n-import syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n-import pat_util::*;\n-import visit::vt;\n-import util::common::is_main_name;\n-import lib::llvm::{llvm, mk_target_data, mk_type_names};\n-import lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n-import lib::llvm::{True, False};\n-import link::{mangle_internal_name_by_type_only,\n+use libc::{c_uint, c_ulonglong};\n+use std::{map, time, list};\n+use std::map::hashmap;\n+use std::map::{int_hash, str_hash};\n+use driver::session;\n+use session::session;\n+use syntax::attr;\n+use back::{link, abi, upcall};\n+use syntax::{ast, ast_util, codemap, ast_map};\n+use ast_util::{local_def, path_to_ident};\n+use syntax::visit;\n+use syntax::codemap::span;\n+use syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n+use pat_util::*;\n+use visit::vt;\n+use util::common::is_main_name;\n+use lib::llvm::{llvm, mk_target_data, mk_type_names};\n+use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n+use lib::llvm::{True, False};\n+use link::{mangle_internal_name_by_type_only,\n               mangle_internal_name_by_seq,\n               mangle_internal_name_by_path,\n               mangle_internal_name_by_path_and_seq,\n               mangle_exported_name};\n-import metadata::{csearch, cstore, decoder, encoder};\n-import metadata::common::link_meta;\n-import util::ppaux;\n-import util::ppaux::{ty_to_str, ty_to_short_str};\n-import syntax::diagnostic::expect;\n-\n-import build::*;\n-import shape::*;\n-import type_of::*;\n-import common::*;\n-import common::result;\n-import syntax::ast_map::{path, path_mod, path_name};\n-import syntax::parse::token::special_idents;\n-\n-import std::smallintmap;\n-import option::{is_none, is_some};\n+use metadata::{csearch, cstore, decoder, encoder};\n+use metadata::common::link_meta;\n+use util::ppaux;\n+use util::ppaux::{ty_to_str, ty_to_short_str};\n+use syntax::diagnostic::expect;\n+\n+use build::*;\n+use shape::*;\n+use type_of::*;\n+use common::*;\n+use common::result;\n+use syntax::ast_map::{path, path_mod, path_name};\n+use syntax::parse::token::special_idents;\n+\n+use std::smallintmap;\n+use option::{is_none, is_some};\n \n // Destinations\n "}, {"sha": "12b8f58117d1cca8f99c99206ba0d4dc18f1f180", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,13 +1,13 @@\n-import std::map::{hashmap, str_hash};\n-import libc::{c_uint, c_int};\n-import lib::llvm::llvm;\n-import syntax::codemap;\n-import codemap::span;\n-import lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n-import lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False,\n+use std::map::{hashmap, str_hash};\n+use libc::{c_uint, c_int};\n+use lib::llvm::llvm;\n+use syntax::codemap;\n+use codemap::span;\n+use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n+use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False,\n         CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n-import common::*;\n-import driver::session::session;\n+use common::*;\n+use driver::session::session;\n \n fn B(cx: block) -> BuilderRef {\n     let b = cx.fcx.ccx.builder.B;"}, {"sha": "4e46286894d34df09109a2b0a5415cd8c88fab0c", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,22 +1,22 @@\n-import libc::c_uint;\n-import syntax::ast;\n-import syntax::ast_util;\n-import lib::llvm::llvm;\n-import lib::llvm::{ValueRef, TypeRef};\n-import common::*;\n-import build::*;\n-import base::*;\n-import type_of::*;\n-import back::abi;\n-import syntax::codemap::span;\n-import syntax::print::pprust::expr_to_str;\n-import back::link::{\n+use libc::c_uint;\n+use syntax::ast;\n+use syntax::ast_util;\n+use lib::llvm::llvm;\n+use lib::llvm::{ValueRef, TypeRef};\n+use common::*;\n+use build::*;\n+use base::*;\n+use type_of::*;\n+use back::abi;\n+use syntax::codemap::span;\n+use syntax::print::pprust::expr_to_str;\n+use back::link::{\n     mangle_internal_name_by_path,\n     mangle_internal_name_by_path_and_seq};\n-import util::ppaux::ty_to_str;\n-import syntax::ast_map::{path, path_mod, path_name};\n-import driver::session::session;\n-import std::map::hashmap;\n+use util::ppaux::ty_to_str;\n+use syntax::ast_map::{path, path_mod, path_name};\n+use driver::session::session;\n+use std::map::hashmap;\n \n // ___Good to know (tm)__________________________________________________\n //"}, {"sha": "71e1ba8ac16c0c43aaa69bd052b8454067ff5d9d", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -3,25 +3,25 @@\n \n */\n \n-import libc::c_uint;\n-import vec::unsafe::to_ptr;\n-import std::map::{hashmap,set};\n-import syntax::{ast, ast_map};\n-import driver::session;\n-import session::session;\n-import middle::ty;\n-import back::{link, abi, upcall};\n-import syntax::codemap::span;\n-import lib::llvm::{llvm, target_data, type_names, associate_type,\n+use libc::c_uint;\n+use vec::unsafe::to_ptr;\n+use std::map::{hashmap,set};\n+use syntax::{ast, ast_map};\n+use driver::session;\n+use session::session;\n+use middle::ty;\n+use back::{link, abi, upcall};\n+use syntax::codemap::span;\n+use lib::llvm::{llvm, target_data, type_names, associate_type,\n                    name_has_type};\n-import lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n-import lib::llvm::{True, False, Bool};\n-import metadata::{csearch};\n-import metadata::common::link_meta;\n-import syntax::ast_map::path;\n-import util::ppaux::ty_to_str;\n-import syntax::parse::token::ident_interner;\n-import syntax::ast::ident;\n+use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n+use lib::llvm::{True, False, Bool};\n+use metadata::{csearch};\n+use metadata::common::link_meta;\n+use syntax::ast_map::path;\n+use util::ppaux::ty_to_str;\n+use syntax::parse::token::ident_interner;\n+use syntax::ast::ident;\n \n type namegen = fn@(~str) -> ident;\n fn new_namegen(intr: ident_interner) -> namegen {"}, {"sha": "ec3e55fb2ae4638ff6453b3929e5e24d558b249d", "filename": "src/rustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import common::*;\n-import syntax::{ast, ast_util, codemap, ast_map};\n-import base::get_insn_ctxt;\n+use common::*;\n+use syntax::{ast, ast_util, codemap, ast_map};\n+use base::get_insn_ctxt;\n \n fn const_lit(cx: @crate_ctxt, e: @ast::expr, lit: ast::lit)\n     -> ValueRef {"}, {"sha": "2e5b06f0a5531583d07fcb55b1b5bb15d774f2e3", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,18 +1,18 @@\n-import std::map;\n-import std::map::hashmap;\n-import lib::llvm::llvm;\n-import lib::llvm::ValueRef;\n-import trans::common::*;\n-import trans::base;\n-import trans::build::B;\n-import middle::ty;\n-import syntax::{ast, codemap, ast_util, ast_map};\n-import syntax::parse::token::ident_interner;\n-import codemap::span;\n-import ast::ty;\n-import pat_util::*;\n-import util::ppaux::ty_to_str;\n-import driver::session::session;\n+use std::map;\n+use std::map::hashmap;\n+use lib::llvm::llvm;\n+use lib::llvm::ValueRef;\n+use trans::common::*;\n+use trans::base;\n+use trans::build::B;\n+use middle::ty;\n+use syntax::{ast, codemap, ast_util, ast_map};\n+use syntax::parse::token::ident_interner;\n+use codemap::span;\n+use ast::ty;\n+use pat_util::*;\n+use util::ppaux::ty_to_str;\n+use driver::session::session;\n \n export create_local_var;\n export create_function;"}, {"sha": "504aea892141c09723593a33bbd6b346aaa6c041", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,22 +1,22 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n-import driver::session::{session, arch_x86_64};\n-import syntax::codemap::span;\n-import libc::c_uint;\n-import syntax::{attr, ast_map};\n-import lib::llvm::{ llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double,\n+use driver::session::{session, arch_x86_64};\n+use syntax::codemap::span;\n+use libc::c_uint;\n+use syntax::{attr, ast_map};\n+use lib::llvm::{ llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double,\n     Struct, Array, ModuleRef, CallConv, Attribute,\n     StructRetAttribute, ByValAttribute,\n     SequentiallyConsistent, Acquire, Release, Xchg };\n-import syntax::{ast, ast_util};\n-import back::{link, abi};\n-import common::*;\n-import build::*;\n-import base::*;\n-import type_of::*;\n-import std::map::hashmap;\n-import util::ppaux::ty_to_str;\n+use syntax::{ast, ast_util};\n+use back::{link, abi};\n+use common::*;\n+use build::*;\n+use base::*;\n+use type_of::*;\n+use std::map::hashmap;\n+use util::ppaux::ty_to_str;\n \n export link_name, trans_foreign_mod, register_foreign_fn, trans_foreign_fn,\n        trans_intrinsic;"}, {"sha": "af5dcfe3f6ba0d5f54fc618ce0ff67d26af72d5a", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,22 +1,22 @@\n-import libc::c_uint;\n-import base::*;\n-import common::*;\n-import type_of::*;\n-import build::*;\n-import driver::session::session;\n-import syntax::{ast, ast_map};\n-import ast_map::{path, path_mod, path_name, node_id_to_str};\n-import driver::session::expect;\n-import syntax::ast_util::local_def;\n-import metadata::csearch;\n-import back::{link, abi};\n-import lib::llvm::llvm;\n-import lib::llvm::{ValueRef, TypeRef};\n-import lib::llvm::llvm::LLVMGetParam;\n-import std::map::hashmap;\n-import util::ppaux::{ty_to_str, tys_to_str};\n-\n-import syntax::print::pprust::expr_to_str;\n+use libc::c_uint;\n+use base::*;\n+use common::*;\n+use type_of::*;\n+use build::*;\n+use driver::session::session;\n+use syntax::{ast, ast_map};\n+use ast_map::{path, path_mod, path_name, node_id_to_str};\n+use driver::session::expect;\n+use syntax::ast_util::local_def;\n+use metadata::csearch;\n+use back::{link, abi};\n+use lib::llvm::llvm;\n+use lib::llvm::{ValueRef, TypeRef};\n+use lib::llvm::llvm::LLVMGetParam;\n+use std::map::hashmap;\n+use util::ppaux::{ty_to_str, tys_to_str};\n+\n+use syntax::print::pprust::expr_to_str;\n \n /**\n The main \"translation\" pass for methods.  Generates code"}, {"sha": "1885d8cdb22f47d5dfd2ed5c6b786b06d8fdba6b", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -5,13 +5,13 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-import syntax::ast::*;\n-import syntax::{visit, ast_util, ast_map};\n-import syntax::ast_util::def_id_of_def;\n-import syntax::attr;\n-import syntax::print::pprust::expr_to_str;\n-import std::map::hashmap;\n-import driver::session::*;\n+use syntax::ast::*;\n+use syntax::{visit, ast_util, ast_map};\n+use syntax::ast_util::def_id_of_def;\n+use syntax::attr;\n+use syntax::print::pprust::expr_to_str;\n+use std::map::hashmap;\n+use driver::session::*;\n \n export map, find_reachable;\n "}, {"sha": "786d5eec5cbfb482b8dcf5114b3717fab02a9b5f", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,14 +1,14 @@\n-import std::map::{hashmap,str_hash};\n-import driver::session::session;\n-import lib::llvm::{TypeRef, ValueRef};\n-import syntax::ast;\n-import back::abi;\n-import common::*;\n-import build::*;\n-import base::*;\n-import type_of::*;\n-import ast::def_id;\n-import util::ppaux::ty_to_str;\n+use std::map::{hashmap,str_hash};\n+use driver::session::session;\n+use lib::llvm::{TypeRef, ValueRef};\n+use syntax::ast;\n+use back::abi;\n+use common::*;\n+use build::*;\n+use base::*;\n+use type_of::*;\n+use ast::def_id;\n+use util::ppaux::ty_to_str;\n \n enum reflector = {\n     visitor_val: ValueRef,"}, {"sha": "0ff538b3f90ae9d52134a70271e5e45dc7a750fb", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,26 +1,26 @@\n // A \"shape\" is a compact encoding of a type that is used by interpreted glue.\n // This substitutes for the runtime tags used by e.g. MLs.\n \n-import lib::llvm::llvm;\n-import lib::llvm::{True, False, ModuleRef, TypeRef, ValueRef};\n-import driver::session;\n-import driver::session::session;\n-import trans::base;\n-import middle::trans::common::*;\n-import back::abi;\n-import middle::ty;\n-import middle::ty::field;\n-import syntax::ast;\n-import syntax::ast_util::{dummy_sp, new_def_hash};\n-import syntax::util::interner;\n-import util::ppaux::ty_to_str;\n-import syntax::codemap::span;\n-import dvec::DVec;\n-\n-import std::map::hashmap;\n-import option::is_some;\n-\n-import ty_ctxt = middle::ty::ctxt;\n+use lib::llvm::llvm;\n+use lib::llvm::{True, False, ModuleRef, TypeRef, ValueRef};\n+use driver::session;\n+use driver::session::session;\n+use trans::base;\n+use middle::trans::common::*;\n+use back::abi;\n+use middle::ty;\n+use middle::ty::field;\n+use syntax::ast;\n+use syntax::ast_util::{dummy_sp, new_def_hash};\n+use syntax::util::interner;\n+use util::ppaux::ty_to_str;\n+use syntax::codemap::span;\n+use dvec::DVec;\n+\n+use std::map::hashmap;\n+use option::is_some;\n+\n+use ty_ctxt = middle::ty::ctxt;\n \n type nominal_id = @{did: ast::def_id, parent_id: Option<ast::def_id>,\n                     tps: ~[ty::t]};"}, {"sha": "0473c62c99c17f6b9f70f5c9c9b93f33972185a1", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,16 +1,16 @@\n-import syntax::ast;\n-import driver::session::session;\n-import lib::llvm::{ValueRef, TypeRef};\n-import back::abi;\n-import base::{call_memmove,\n+use syntax::ast;\n+use driver::session::session;\n+use lib::llvm::{ValueRef, TypeRef};\n+use back::abi;\n+use base::{call_memmove,\n               INIT, copy_val, load_if_immediate, get_tydesc,\n               sub_block, do_spill_noroot,\n               dest, non_gc_box_cast, move_val, lval_owned};\n-import syntax::codemap::span;\n-import shape::llsize_of;\n-import build::*;\n-import common::*;\n-import util::ppaux::ty_to_str;\n+use syntax::codemap::span;\n+use shape::llsize_of;\n+use build::*;\n+use common::*;\n+use util::ppaux::ty_to_str;\n \n // Boxed vector types are in some sense currently a \"shorthand\" for a box\n // containing an unboxed vector. This expands a boxed vector type into such an"}, {"sha": "2a4322eb2150aa494e2dfba957117ad9e3684218", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,9 +1,9 @@\n-import common::*;\n-import lib::llvm::{TypeRef};\n-import syntax::ast;\n-import lib::llvm::llvm;\n-import driver::session::session;\n-import std::map::hashmap;\n+use common::*;\n+use lib::llvm::{TypeRef};\n+use syntax::ast;\n+use lib::llvm::llvm;\n+use driver::session::session;\n+use std::map::hashmap;\n \n export type_of;\n export type_of_dtor;"}, {"sha": "3a09b2f0fdc53388d0362c096f31874e4aa1a52a", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -17,14 +17,14 @@\n // much information, but have the disadvantage of being very\n // invasive.)\n \n-import std::map::hashmap;\n-import std::list;\n-import std::list::{list, cons, nil};\n-import driver::session::session;\n-import metadata::csearch;\n-import syntax::ast::*, syntax::ast_util, syntax::visit;\n-import syntax::ast_map;\n-import common::*;\n+use std::map::hashmap;\n+use std::list;\n+use std::list::{list, cons, nil};\n+use driver::session::session;\n+use metadata::csearch;\n+use syntax::ast::*, syntax::ast_util, syntax::visit;\n+use syntax::ast_map;\n+use common::*;\n \n type type_uses = uint; // Bitmask\n const use_repr: uint = 1u; // Dependency on size/alignment and take/drop glue"}, {"sha": "cd6710f274c95949530740e93e00d73c4b1d5505", "filename": "src/rustc/middle/trans/uniq.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,9 +1,9 @@\n-import syntax::ast;\n-import lib::llvm::ValueRef;\n-import common::*;\n-import build::*;\n-import base::*;\n-import shape::llsize_of;\n+use syntax::ast;\n+use lib::llvm::ValueRef;\n+use common::*;\n+use build::*;\n+use base::*;\n+use shape::llsize_of;\n \n export make_free_glue, autoderef, duplicate;\n "}, {"sha": "a8dbbcab2b83e12cfeb2fdb5a8a04cd9053f4a60", "filename": "src/rustc/middle/tstate/annotate.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fannotate.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,11 +1,11 @@\n \n-import syntax::ast::*;\n-import syntax::visit;\n-import syntax::codemap::span;\n-import syntax::print::pprust::stmt_to_str;\n-import aux::{num_constraints, get_fn_info, crate_ctxt, add_node};\n-import ann::empty_ann;\n-import pat_util::pat_binding_ids;\n+use syntax::ast::*;\n+use syntax::visit;\n+use syntax::codemap::span;\n+use syntax::print::pprust::stmt_to_str;\n+use aux::{num_constraints, get_fn_info, crate_ctxt, add_node};\n+use ann::empty_ann;\n+use pat_util::pat_binding_ids;\n \n fn collect_ids_expr(e: @expr, rs: @mut ~[node_id]) { vec::push(*rs, e.id); }\n "}, {"sha": "849d44166927df1b013d7891436656692484c26d", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,23 +1,23 @@\n-import option::*;\n-import pat_util::*;\n-import syntax::ast::*;\n-import syntax::ast_util::*;\n-import syntax::{visit, codemap};\n-import codemap::span;\n-import std::map::{hashmap, int_hash};\n-import syntax::print::pprust::path_to_str;\n-import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n+use option::*;\n+use pat_util::*;\n+use syntax::ast::*;\n+use syntax::ast_util::*;\n+use syntax::{visit, codemap};\n+use codemap::span;\n+use std::map::{hashmap, int_hash};\n+use syntax::print::pprust::path_to_str;\n+use tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n                      poststate, precond, postcond,\n                      set_prestate, set_poststate, set_in_poststate_,\n                      extend_prestate, extend_poststate, set_precondition,\n                      set_postcondition, ts_ann,\n                      clear_in_postcond,\n                      clear_in_poststate_};\n-import driver::session::session;\n-import dvec::{dvec, extensions};\n-import tritv::{trit, tfalse, ttrue, dont_care, t};\n+use driver::session::session;\n+use dvec::{dvec, extensions};\n+use tritv::{trit, tfalse, ttrue, dont_care, t};\n \n-import syntax::print::pprust::{constr_args_to_str, lit_to_str};\n+use syntax::print::pprust::{constr_args_to_str, lit_to_str};\n \n // Used to communicate which operands should be invalidated\n // to helper functions"}, {"sha": "b0b99fcf96c69bbd7dbc00689c40a1c4e8ecf1be", "filename": "src/rustc/middle/tstate/ck.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,22 +1,22 @@\n \n-import syntax::ast;\n-import ast::{stmt, fn_ident, node_id, crate, return_val, noreturn, expr};\n-import syntax::{visit, print};\n-import syntax::codemap::span;\n-import middle::ty;\n-import tstate::ann::{precond, prestate,\n+use syntax::ast;\n+use ast::{stmt, fn_ident, node_id, crate, return_val, noreturn, expr};\n+use syntax::{visit, print};\n+use syntax::codemap::span;\n+use middle::ty;\n+use tstate::ann::{precond, prestate,\n                      implies, ann_precond, ann_prestate};\n-import aux::*;\n-\n-import util::ppaux::ty_to_str;\n-import bitvectors::*;\n-import annotate::annotate_crate;\n-import collect_locals::mk_f_to_fn_info;\n-import pre_post_conditions::fn_pre_post;\n-import states::find_pre_post_state_fn;\n-import syntax::print::pprust::expr_to_str;\n-import driver::session::session;\n-import std::map::hashmap;\n+use aux::*;\n+\n+use util::ppaux::ty_to_str;\n+use bitvectors::*;\n+use annotate::annotate_crate;\n+use collect_locals::mk_f_to_fn_info;\n+use pre_post_conditions::fn_pre_post;\n+use states::find_pre_post_state_fn;\n+use syntax::print::pprust::expr_to_str;\n+use driver::session::session;\n+use std::map::hashmap;\n \n fn check_states_expr(e: @expr, fcx: fn_ctxt, v: visit::vt<fn_ctxt>) {\n     visit::visit_expr(e, fcx, v);"}, {"sha": "3a1a54b7946d091de3fdb67ca437b5e1b6b10842", "filename": "src/rustc/middle/tstate/collect_locals.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,14 +1,14 @@\n-import option::*;\n-import pat_util::*;\n-import syntax::ast::*;\n-import syntax::ast_util::*;\n-import syntax::visit;\n-import syntax::codemap::span;\n-import syntax::ast_util::respan;\n-import driver::session::session;\n-import aux::*;\n-import std::map::hashmap;\n-import dvec::{dvec, extensions};\n+use option::*;\n+use pat_util::*;\n+use syntax::ast::*;\n+use syntax::ast_util::*;\n+use syntax::visit;\n+use syntax::codemap::span;\n+use syntax::ast_util::respan;\n+use driver::session::session;\n+use aux::*;\n+use std::map::hashmap;\n+use dvec::{dvec, extensions};\n \n type ctxt = {cs: @mut ~[sp_constr], tcx: ty::ctxt};\n "}, {"sha": "5314a0a3d54cd5f69f3b3894a610a241d011bd1c", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,19 +1,19 @@\n-import tstate::ann::*;\n-import aux::*;\n-import bitvectors::{bit_num, seq_preconds, seq_postconds,\n+use tstate::ann::*;\n+use aux::*;\n+use bitvectors::{bit_num, seq_preconds, seq_postconds,\n                     intersect_states,\n                     relax_precond_block, gen};\n-import tritv::*;\n-\n-import pat_util::*;\n-import syntax::ast::*;\n-import syntax::ast_util::*;\n-import syntax::print::pprust::{expr_to_str, stmt_to_str};\n-import syntax::visit;\n-import util::common::{field_exprs, has_nonlocal_exits};\n-import syntax::codemap::span;\n-import driver::session::session;\n-import std::map::hashmap;\n+use tritv::*;\n+\n+use pat_util::*;\n+use syntax::ast::*;\n+use syntax::ast_util::*;\n+use syntax::print::pprust::{expr_to_str, stmt_to_str};\n+use syntax::visit;\n+use util::common::{field_exprs, has_nonlocal_exits};\n+use syntax::codemap::span;\n+use driver::session::session;\n+use std::map::hashmap;\n \n fn find_pre_post_mod(_m: _mod) -> _mod {\n     debug!(\"implement find_pre_post_mod!\");"}, {"sha": "369f328a72b5f3bc06f5bdeba1ed4d5ebcf73b53", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,18 +1,18 @@\n-import ann::*;\n-import aux::*;\n-import tritv::*;\n-\n-import syntax::print::pprust::block_to_str;\n-import bitvectors::*;\n-import pat_util::*;\n-import syntax::ast::*;\n-import syntax::ast_util::*;\n-import syntax::print::pprust::{expr_to_str, stmt_to_str};\n-import syntax::codemap::span;\n-import middle::ty::{expr_ty, type_is_bot};\n-import util::common::{field_exprs, has_nonlocal_exits, may_break};\n-import driver::session::session;\n-import std::map::hashmap;\n+use ann::*;\n+use aux::*;\n+use tritv::*;\n+\n+use syntax::print::pprust::block_to_str;\n+use bitvectors::*;\n+use pat_util::*;\n+use syntax::ast::*;\n+use syntax::ast_util::*;\n+use syntax::print::pprust::{expr_to_str, stmt_to_str};\n+use syntax::codemap::span;\n+use middle::ty::{expr_ty, type_is_bot};\n+use util::common::{field_exprs, has_nonlocal_exits, may_break};\n+use driver::session::session;\n+use std::map::hashmap;\n \n fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n     match t {"}, {"sha": "f473244eda8bb32d3e63d88a44188608ec732a06", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,23 +1,23 @@\n // #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n-import std::{map, smallintmap};\n-import result::Result;\n-import std::map::hashmap;\n-import driver::session;\n-import session::session;\n-import syntax::{ast, ast_map};\n-import syntax::ast_util;\n-import syntax::ast_util::{is_local, local_def, new_def_hash};\n-import syntax::codemap::span;\n-import metadata::csearch;\n-import util::ppaux::{region_to_str, explain_region, vstore_to_str};\n-import middle::lint;\n-import middle::lint::{get_lint_level, allow};\n-import syntax::ast::*;\n-import syntax::print::pprust::*;\n-import util::ppaux::{ty_to_str, proto_ty_to_str, tys_to_str};\n-import std::serialization::{serialize_Option,\n+use std::{map, smallintmap};\n+use result::Result;\n+use std::map::hashmap;\n+use driver::session;\n+use session::session;\n+use syntax::{ast, ast_map};\n+use syntax::ast_util;\n+use syntax::ast_util::{is_local, local_def, new_def_hash};\n+use syntax::codemap::span;\n+use metadata::csearch;\n+use util::ppaux::{region_to_str, explain_region, vstore_to_str};\n+use middle::lint;\n+use middle::lint::{get_lint_level, allow};\n+use syntax::ast::*;\n+use syntax::print::pprust::*;\n+use util::ppaux::{ty_to_str, proto_ty_to_str, tys_to_str};\n+use std::serialization::{serialize_Option,\n                             deserialize_Option};\n \n export tv_vid, tvi_vid, region_vid, vid;"}, {"sha": "9a838d4bc24bba749d2b9c758ad31c233d81995c", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -38,33 +38,33 @@ independently:\n \n */\n \n-import result::Result;\n-import syntax::{ast, ast_util, ast_map};\n-import ast::spanned;\n-import ast::{required, provided};\n-import syntax::ast_map::node_id_to_str;\n-import syntax::ast_util::{local_def, respan, split_trait_methods};\n-import syntax::visit;\n-import metadata::csearch;\n-import driver::session::session;\n-import util::common::may_break;\n-import syntax::codemap::span;\n-import pat_util::{pat_is_variant, pat_id_map};\n-import middle::ty;\n-import middle::ty::{arg, field, node_type_table, mk_nil,\n+use result::Result;\n+use syntax::{ast, ast_util, ast_map};\n+use ast::spanned;\n+use ast::{required, provided};\n+use syntax::ast_map::node_id_to_str;\n+use syntax::ast_util::{local_def, respan, split_trait_methods};\n+use syntax::visit;\n+use metadata::csearch;\n+use driver::session::session;\n+use util::common::may_break;\n+use syntax::codemap::span;\n+use pat_util::{pat_is_variant, pat_id_map};\n+use middle::ty;\n+use middle::ty::{arg, field, node_type_table, mk_nil,\n                     ty_param_bounds_and_ty, lookup_public_fields,\n                     vstore_uniq};\n-import std::smallintmap;\n-import std::map;\n-import std::map::{hashmap, int_hash};\n-import std::serialization::{serialize_uint, deserialize_uint};\n-import vec::each;\n-import syntax::print::pprust::*;\n-import util::ppaux::{ty_to_str, tys_to_str, region_to_str,\n+use std::smallintmap;\n+use std::map;\n+use std::map::{hashmap, int_hash};\n+use std::serialization::{serialize_uint, deserialize_uint};\n+use vec::each;\n+use syntax::print::pprust::*;\n+use util::ppaux::{ty_to_str, tys_to_str, region_to_str,\n                      bound_region_to_str, vstore_to_str};\n-import util::common::{indent, indenter};\n-import std::list;\n-import list::{list, nil, cons};\n+use util::common::{indent, indenter};\n+use std::list;\n+use list::{list, nil, cons};\n \n export check_crate;\n export infer;"}, {"sha": "df0b2e1c221a33ed6ddc6c7ad1ae3eacd4c4d798", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -42,9 +42,9 @@\n  * an rptr (`&r.T`) use the region `r` that appears in the rptr.\n  */\n \n-import check::fn_ctxt;\n-import rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n-import rscope::{in_binding_rscope, region_scope, type_rscope};\n+use check::fn_ctxt;\n+use rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n+use rscope::{in_binding_rscope, region_scope, type_rscope};\n \n trait ast_conv {\n     fn tcx() -> ty::ctxt;"}, {"sha": "b56a8efa606376a4892ceab5b42a8801eef5df7b", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -66,18 +66,18 @@ type parameter).\n \n */\n \n-import astconv::{ast_conv, ast_path_to_ty, ast_ty_to_ty};\n-import astconv::{ast_region_to_region};\n-import middle::ty::{tv_vid, vid};\n-import regionmanip::{replace_bound_regions_in_fn_ty};\n-import rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n-import rscope::{in_binding_rscope, region_scope, type_rscope,\n+use astconv::{ast_conv, ast_path_to_ty, ast_ty_to_ty};\n+use astconv::{ast_region_to_region};\n+use middle::ty::{tv_vid, vid};\n+use regionmanip::{replace_bound_regions_in_fn_ty};\n+use rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n+use rscope::{in_binding_rscope, region_scope, type_rscope,\n                 bound_self_region};\n-import syntax::ast::ty_i;\n-import typeck::infer::{resolve_type, force_tvar};\n-import result::{Result, Ok, Err};\n+use syntax::ast::ty_i;\n+use typeck::infer::{resolve_type, force_tvar};\n+use result::{Result, Ok, Err};\n \n-import std::map::{str_hash, uint_hash};\n+use std::map::{str_hash, uint_hash};\n \n type self_info = {\n     self_ty: ty::t,"}, {"sha": "31202da4500ec611f6ccfab8209a4d63a78e4fdd", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,4 +1,4 @@\n-import syntax::print::pprust;\n+use syntax::print::pprust;\n \n fn check_alt(fcx: @fn_ctxt,\n              expr: @ast::expr,"}, {"sha": "8575bc6906a2b42ab8ca27e1835ea970f3fbd21e", "filename": "src/rustc/middle/typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,4 +1,4 @@\n-import check::fn_ctxt;\n+use check::fn_ctxt;\n \n // Requires that the two types unify, and prints an error message if they\n // don't."}, {"sha": "994200b7f019c6417828068e255af81357f9b17c", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,15 +1,15 @@\n /* Code to handle method lookups (which can be quite complex) */\n \n-import coherence::get_base_type_def_id;\n-import middle::resolve::{Impl, MethodInfo};\n-import middle::ty::{mk_box, mk_rptr, mk_uniq};\n-import syntax::ast::{def_id,\n+use coherence::get_base_type_def_id;\n+use middle::resolve::{Impl, MethodInfo};\n+use middle::ty::{mk_box, mk_rptr, mk_uniq};\n+use syntax::ast::{def_id,\n                      sty_static, sty_box, sty_by_ref, sty_region, sty_uniq};\n-import syntax::ast::{sty_value, by_ref, by_copy};\n-import syntax::ast_map;\n-import syntax::ast_map::node_id_to_str;\n-import syntax::ast_util::{dummy_sp, new_def_hash};\n-import dvec::DVec;\n+use syntax::ast::{sty_value, by_ref, by_copy};\n+use syntax::ast_map;\n+use syntax::ast_map::node_id_to_str;\n+use syntax::ast_util::{dummy_sp, new_def_hash};\n+use dvec::DVec;\n \n enum method_lookup_mode {\n     subtyping_mode,"}, {"sha": "540a7e9a479fd57e847ffd651847dfef64f89821", "filename": "src/rustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -17,17 +17,17 @@ this point a bit better.\n \n */\n \n-import util::ppaux;\n-import ppaux::{note_and_explain_region, ty_to_str};\n-import syntax::print::pprust;\n-import infer::{resolve_and_force_all_but_regions, fres};\n-import syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n-import middle::freevars::get_freevars;\n-import middle::kind::check_owned;\n-import middle::pat_util::pat_bindings;\n-import middle::ty::{encl_region, proto_bare, proto_vstore, re_scope};\n-import middle::ty::{ty_fn_proto, vstore_box, vstore_fixed, vstore_slice};\n-import middle::ty::{vstore_uniq};\n+use util::ppaux;\n+use ppaux::{note_and_explain_region, ty_to_str};\n+use syntax::print::pprust;\n+use infer::{resolve_and_force_all_but_regions, fres};\n+use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n+use middle::freevars::get_freevars;\n+use middle::kind::check_owned;\n+use middle::pat_util::pat_bindings;\n+use middle::ty::{encl_region, proto_bare, proto_vstore, re_scope};\n+use middle::ty::{ty_fn_proto, vstore_box, vstore_fixed, vstore_slice};\n+use middle::ty::{vstore_uniq};\n \n enum rcx { rcx_({fcx: @fn_ctxt, mut errors_reported: uint}) }\n type rvt = visit::vt<@rcx>;"}, {"sha": "b0dd57890a9e33657baf8ebf6036ca2cfffdf5fd", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,7 +1,7 @@\n // #[warn(deprecated_mode)];\n // #[warn(deprecated_pattern)];\n \n-import syntax::print::pprust::{expr_to_str};\n+use syntax::print::pprust::{expr_to_str};\n \n // Helper functions related to manipulating region types.\n "}, {"sha": "7409ae738ea5354a945b2be7f9a79d9fc753fdca", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,9 +1,9 @@\n-import check::{fn_ctxt, impl_self_ty};\n-import infer::{resolve_type, resolve_and_force_all_but_regions,\n+use check::{fn_ctxt, impl_self_ty};\n+use infer::{resolve_type, resolve_and_force_all_but_regions,\n                fixup_err_to_str};\n-import ast_util::new_def_hash;\n-import syntax::print::pprust;\n-import result::{Result, Ok, Err};\n+use ast_util::new_def_hash;\n+use syntax::print::pprust;\n+use result::{Result, Ok, Err};\n \n // vtable resolution looks for places where trait bounds are\n // subsituted in and figures out which vtable is used. There is some"}, {"sha": "694b0ae03b89c69ec4d435054b314e8de0b59b54", "filename": "src/rustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -2,11 +2,11 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n-import check::{fn_ctxt, lookup_local};\n-import infer::{resolve_type, resolve_region, resolve_all, force_all};\n+use check::{fn_ctxt, lookup_local};\n+use infer::{resolve_type, resolve_region, resolve_all, force_all};\n export resolve_type_vars_in_fn;\n export resolve_type_vars_in_expr;\n-import result::{Result, Ok, Err};\n+use result::{Result, Ok, Err};\n \n fn resolve_type_vars_in_type(fcx: @fn_ctxt, sp: span, typ: ty::t)\n     -> Option<ty::t>"}, {"sha": "3820b9110f47754e316bbbbb70f1561cdf5d90a8", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -4,37 +4,37 @@\n // has at most one implementation for each type. Then we build a mapping from\n // each trait in the system to its implementations.\n \n-import metadata::csearch::{each_path, get_impl_traits, get_impls_for_mod};\n-import metadata::cstore::{cstore, iter_crate_data};\n-import metadata::decoder::{dl_def, dl_field, dl_impl};\n-import middle::resolve::{Impl, MethodInfo};\n-import middle::ty::{get, lookup_item_type, subst, t, ty_box};\n-import middle::ty::{ty_uniq, ty_ptr, ty_rptr, ty_enum};\n-import middle::ty::{ty_class, ty_nil, ty_bot, ty_bool, ty_int, ty_uint};\n-import middle::ty::{ty_float, ty_estr, ty_evec, ty_rec};\n-import middle::ty::{ty_fn, ty_trait, ty_tup, ty_var, ty_var_integral};\n-import middle::ty::{ty_param, ty_self, ty_type, ty_opaque_box};\n-import middle::ty::{ty_opaque_closure_ptr, ty_unboxed_vec, type_is_var};\n-import middle::typeck::infer::{infer_ctxt, can_mk_subty};\n-import middle::typeck::infer::{new_infer_ctxt, resolve_ivar, resolve_type};\n-import syntax::ast::{crate, def_id, def_mod};\n-import syntax::ast::{item, item_class, item_const, item_enum, item_fn};\n-import syntax::ast::{item_foreign_mod, item_impl, item_mac, item_mod};\n-import syntax::ast::{item_trait, item_ty, local_crate, method, node_id};\n-import syntax::ast::{trait_ref};\n-import syntax::ast_map::node_item;\n-import syntax::ast_util::{def_id_of_def, dummy_sp, new_def_hash};\n-import syntax::codemap::span;\n-import syntax::visit::{default_simple_visitor, default_visitor};\n-import syntax::visit::{mk_simple_visitor, mk_vt, visit_crate, visit_item};\n-import syntax::visit::{visit_mod};\n-import util::ppaux::ty_to_str;\n-\n-import dvec::DVec;\n-import result::Ok;\n-import std::map::{hashmap, int_hash};\n-import uint::range;\n-import vec::{len, push};\n+use metadata::csearch::{each_path, get_impl_traits, get_impls_for_mod};\n+use metadata::cstore::{cstore, iter_crate_data};\n+use metadata::decoder::{dl_def, dl_field, dl_impl};\n+use middle::resolve::{Impl, MethodInfo};\n+use middle::ty::{get, lookup_item_type, subst, t, ty_box};\n+use middle::ty::{ty_uniq, ty_ptr, ty_rptr, ty_enum};\n+use middle::ty::{ty_class, ty_nil, ty_bot, ty_bool, ty_int, ty_uint};\n+use middle::ty::{ty_float, ty_estr, ty_evec, ty_rec};\n+use middle::ty::{ty_fn, ty_trait, ty_tup, ty_var, ty_var_integral};\n+use middle::ty::{ty_param, ty_self, ty_type, ty_opaque_box};\n+use middle::ty::{ty_opaque_closure_ptr, ty_unboxed_vec, type_is_var};\n+use middle::typeck::infer::{infer_ctxt, can_mk_subty};\n+use middle::typeck::infer::{new_infer_ctxt, resolve_ivar, resolve_type};\n+use syntax::ast::{crate, def_id, def_mod};\n+use syntax::ast::{item, item_class, item_const, item_enum, item_fn};\n+use syntax::ast::{item_foreign_mod, item_impl, item_mac, item_mod};\n+use syntax::ast::{item_trait, item_ty, local_crate, method, node_id};\n+use syntax::ast::{trait_ref};\n+use syntax::ast_map::node_item;\n+use syntax::ast_util::{def_id_of_def, dummy_sp, new_def_hash};\n+use syntax::codemap::span;\n+use syntax::visit::{default_simple_visitor, default_visitor};\n+use syntax::visit::{mk_simple_visitor, mk_vt, visit_crate, visit_item};\n+use syntax::visit::{visit_mod};\n+use util::ppaux::ty_to_str;\n+\n+use dvec::DVec;\n+use result::Ok;\n+use std::map::{hashmap, int_hash};\n+use uint::range;\n+use vec::{len, push};\n \n fn get_base_type(inference_context: infer_ctxt, span: span, original_type: t)\n               -> Option<t> {"}, {"sha": "d3b407db13d820459da9f0628ae1749009952885", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -20,9 +20,9 @@ are represented as `ty_param()` instances.\n \n */\n \n-import astconv::{ast_conv, ty_of_fn_decl, ty_of_arg, ast_ty_to_ty};\n-import ast_util::trait_method_to_ty_method;\n-import rscope::*;\n+use astconv::{ast_conv, ty_of_fn_decl, ty_of_arg, ast_ty_to_ty};\n+use ast_util::trait_method_to_ty_method;\n+use rscope::*;\n \n fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n "}, {"sha": "c630ae432adc633129566a9313794039fcfc2e2b", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -246,39 +246,39 @@ section on \"Type Combining\" below for details.\n #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n-import std::smallintmap;\n-import std::smallintmap::smallintmap;\n-import std::map::hashmap;\n-import middle::ty;\n-import middle::ty::{tv_vid, tvi_vid, region_vid, vid,\n+use std::smallintmap;\n+use std::smallintmap::smallintmap;\n+use std::map::hashmap;\n+use middle::ty;\n+use middle::ty::{tv_vid, tvi_vid, region_vid, vid,\n                     ty_int, ty_uint, get, terr_fn};\n-import syntax::{ast, ast_util};\n-import syntax::ast::{ret_style, purity};\n-import util::ppaux::{ty_to_str, mt_to_str};\n-import result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n-import ty::{mk_fn, type_is_bot};\n-import check::regionmanip::{replace_bound_regions_in_fn_ty};\n-import driver::session::session;\n-import util::common::{indent, indenter};\n-import ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n-import ast::{m_const, m_imm, m_mutbl};\n-import dvec::DVec;\n-import region_var_bindings::{RegionVarBindings};\n-import ast_util::dummy_sp;\n-import cmp::Eq;\n+use syntax::{ast, ast_util};\n+use syntax::ast::{ret_style, purity};\n+use util::ppaux::{ty_to_str, mt_to_str};\n+use result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n+use ty::{mk_fn, type_is_bot};\n+use check::regionmanip::{replace_bound_regions_in_fn_ty};\n+use driver::session::session;\n+use util::common::{indent, indenter};\n+use ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n+use ast::{m_const, m_imm, m_mutbl};\n+use dvec::DVec;\n+use region_var_bindings::{RegionVarBindings};\n+use ast_util::dummy_sp;\n+use cmp::Eq;\n \n // From submodules:\n-import resolve::{resolve_nested_tvar, resolve_rvar, resolve_ivar, resolve_all,\n+use resolve::{resolve_nested_tvar, resolve_rvar, resolve_ivar, resolve_all,\n                  force_tvar, force_rvar, force_ivar, force_all, not_regions,\n                  resolve_and_force_all_but_regions, resolver};\n-import unify::{vals_and_bindings, root};\n-import integral::{int_ty_set, int_ty_set_all};\n-import combine::{combine_fields, eq_tys};\n-import assignment::Assign;\n-\n-import sub::Sub;\n-import lub::Lub;\n-import glb::Glb;\n+use unify::{vals_and_bindings, root};\n+use integral::{int_ty_set, int_ty_set_all};\n+use combine::{combine_fields, eq_tys};\n+use assignment::Assign;\n+\n+use sub::Sub;\n+use lub::Lub;\n+use glb::Glb;\n \n export infer_ctxt;\n export new_infer_ctxt;"}, {"sha": "6faee7ad411e341572c8f9aa2e9b7c4f88c7615a", "filename": "src/rustc/middle/typeck/infer/assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -48,8 +48,8 @@\n // A.  But this upper-bound might be stricter than what is truly\n // needed.\n \n-import to_str::to_str;\n-import combine::combine_fields;\n+use to_str::to_str;\n+use combine::combine_fields;\n \n fn to_ares(+c: cres<ty::t>) -> ares {\n     match c {"}, {"sha": "4585be3e74ac74537dedcb263d5873585f12c945", "filename": "src/rustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -44,7 +44,7 @@\n // terms of error reporting, although we do not do that properly right\n // now.\n \n-import to_str::to_str;\n+use to_str::to_str;\n \n trait combine {\n     fn infcx() -> infer_ctxt;"}, {"sha": "7ef0bf91943373b028deabe0685de49630967412", "filename": "src/rustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import combine::*;\n-import lattice::*;\n-import to_str::to_str;\n+use combine::*;\n+use lattice::*;\n+use to_str::to_str;\n \n enum Glb = combine_fields;  // \"greatest lower bound\" (common subtype)\n "}, {"sha": "fdab9f6a16948a20d19c4cad50639c4cef810af9", "filename": "src/rustc/middle/typeck/infer/integral.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -4,7 +4,7 @@ Code related to integral type inference.\n \n */\n \n-import to_str::to_str;\n+use to_str::to_str;\n \n // Bitvector to represent sets of integral types\n enum int_ty_set = uint;"}, {"sha": "482cd4d7703c49d4872b7f744e86d5c5591fc475", "filename": "src/rustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import combine::*;\n-import unify::*;\n-import to_str::to_str;\n+use combine::*;\n+use unify::*;\n+use to_str::to_str;\n \n // ______________________________________________________________________\n // Lattice operations on variables"}, {"sha": "21e2a9febecb806b8742cefd36ea68823c5d4b5e", "filename": "src/rustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import combine::*;\n-import lattice::*;\n-import to_str::to_str;\n+use combine::*;\n+use lattice::*;\n+use to_str::to_str;\n \n enum Lub = combine_fields;  // \"subtype\", \"subregion\" etc\n "}, {"sha": "c071429449185f44f08ac1673e0ae60017f435cb", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -305,18 +305,18 @@ because `&x` was created alone, but is relatable to `&A`.\n #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n-import dvec::DVec;\n-import result::Result;\n-import result::{Ok, Err};\n-import std::map::{hashmap, uint_hash};\n-import std::cell::{Cell, empty_cell};\n-import std::list::{list, nil, cons};\n-\n-import ty::{region, region_vid, hash_region};\n-import region::is_subregion_of;\n-import syntax::codemap;\n-import to_str::to_str;\n-import util::ppaux::note_and_explain_region;\n+use dvec::DVec;\n+use result::Result;\n+use result::{Ok, Err};\n+use std::map::{hashmap, uint_hash};\n+use std::cell::{Cell, empty_cell};\n+use std::list::{list, nil, cons};\n+\n+use ty::{region, region_vid, hash_region};\n+use region::is_subregion_of;\n+use syntax::codemap;\n+use to_str::to_str;\n+use util::ppaux::note_and_explain_region;\n \n export RegionVarBindings;\n export make_subregion;"}, {"sha": "7364b744527fd8d60b73cb0c8de9c824d717976e", "filename": "src/rustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -34,8 +34,8 @@\n // future).  If you want to resolve everything but one type, you are\n // probably better off writing `resolve_all - resolve_ivar`.\n \n-import integral::*;\n-import to_str::to_str;\n+use integral::*;\n+use to_str::to_str;\n \n const resolve_nested_tvar: uint = 0b00000001;\n const resolve_rvar: uint        = 0b00000010;"}, {"sha": "2363c2a825140775dffdd121e158ed26057c60e9", "filename": "src/rustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import combine::*;\n-import unify::*;\n-import to_str::to_str;\n+use combine::*;\n+use unify::*;\n+use to_str::to_str;\n \n enum Sub = combine_fields;  // \"subtype\", \"subregion\" etc\n "}, {"sha": "f66685d766b72fefa08d22e01c7fc85f4b31094c", "filename": "src/rustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,5 +1,5 @@\n-import integral::{int_ty_set};\n-import unify::{var_value, redirect, root};\n+use integral::{int_ty_set};\n+use unify::{var_value, redirect, root};\n \n trait to_str {\n     fn to_str(cx: infer_ctxt) -> ~str;"}, {"sha": "690c6d8d8d09b3ac94061cec6ddb3d695b880cc2", "filename": "src/rustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,6 +1,6 @@\n-import combine::combine;\n-import integral::*;\n-import to_str::to_str;\n+use combine::combine;\n+use integral::*;\n+use to_str::to_str;\n \n enum var_value<V:copy, T:copy> {\n     redirect(V),"}, {"sha": "32864a2d51f05e196f0f68188c6d8ecd0d66179f", "filename": "src/rustc/middle/typeck/rscope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,5 +1,5 @@\n-import result::Result;\n-import syntax::parse::token::special_idents;\n+use result::Result;\n+use syntax::parse::token::special_idents;\n \n trait region_scope {\n     fn anon_region(span: span) -> Result<ty::region, ~str>;"}, {"sha": "7cef04c3e5830c58e294c48b3e54466612cc9207", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,9 +1,9 @@\n-import std::map::hashmap;\n-import syntax::ast;\n-import ast::{ty, pat};\n-import syntax::codemap::{span};\n-import syntax::visit;\n-import syntax::print;\n+use std::map::hashmap;\n+use syntax::ast;\n+use ast::{ty, pat};\n+use syntax::codemap::{span};\n+use syntax::visit;\n+use syntax::print;\n \n fn indent<R>(op: fn() -> R) -> R {\n     // Use in conjunction with the log post-processor like `src/etc/indenter`"}, {"sha": "2b452f1d8b11a13145373358b6c396a5e0047c9f", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26837c47872066b8bfb4e455fcf75fc573e862f/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=a26837c47872066b8bfb4e455fcf75fc573e862f", "patch": "@@ -1,25 +1,25 @@\n-import std::map::hashmap;\n-import middle::ty;\n-import middle::ty::{arg, canon_mode};\n-import middle::ty::{bound_region, br_anon, br_named, br_self, br_cap_avoid};\n-import middle::ty::{ck_block, ck_box, ck_uniq, ctxt, field, method};\n-import middle::ty::{mt, t};\n-import middle::ty::{re_bound, re_free, re_scope, re_var, re_static, region};\n-import middle::ty::{ty_bool, ty_bot, ty_box, ty_class, ty_enum};\n-import middle::ty::{ty_estr, ty_evec, ty_float, ty_fn, ty_trait, ty_int};\n-import middle::ty::{ty_nil, ty_opaque_box, ty_opaque_closure_ptr, ty_param};\n-import middle::ty::{ty_ptr, ty_rec, ty_rptr, ty_self, ty_tup};\n-import middle::ty::{ty_type, ty_uniq, ty_uint, ty_var, ty_var_integral};\n-import middle::ty::{ty_unboxed_vec, vid};\n-import metadata::encoder;\n-import syntax::codemap;\n-import syntax::codemap::span;\n-import syntax::print::pprust;\n-import syntax::print::pprust::{path_to_str, proto_to_str,\n+use std::map::hashmap;\n+use middle::ty;\n+use middle::ty::{arg, canon_mode};\n+use middle::ty::{bound_region, br_anon, br_named, br_self, br_cap_avoid};\n+use middle::ty::{ck_block, ck_box, ck_uniq, ctxt, field, method};\n+use middle::ty::{mt, t};\n+use middle::ty::{re_bound, re_free, re_scope, re_var, re_static, region};\n+use middle::ty::{ty_bool, ty_bot, ty_box, ty_class, ty_enum};\n+use middle::ty::{ty_estr, ty_evec, ty_float, ty_fn, ty_trait, ty_int};\n+use middle::ty::{ty_nil, ty_opaque_box, ty_opaque_closure_ptr, ty_param};\n+use middle::ty::{ty_ptr, ty_rec, ty_rptr, ty_self, ty_tup};\n+use middle::ty::{ty_type, ty_uniq, ty_uint, ty_var, ty_var_integral};\n+use middle::ty::{ty_unboxed_vec, vid};\n+use metadata::encoder;\n+use syntax::codemap;\n+use syntax::codemap::span;\n+use syntax::print::pprust;\n+use syntax::print::pprust::{path_to_str, proto_to_str,\n                                mode_to_str, purity_to_str};\n-import syntax::{ast, ast_util};\n-import syntax::ast_map;\n-import driver::session::session;\n+use syntax::{ast, ast_util};\n+use syntax::ast_map;\n+use driver::session::session;\n \n fn note_and_explain_region(cx: ctxt, prefix: ~str, region: ty::region) {\n     match explain_region_and_span(cx, region) {"}]}