{"sha": "daf497462844a55678e12545114bcc75d5ce8ebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZjQ5NzQ2Mjg0NGE1NTY3OGUxMjU0NTExNGJjYzc1ZDVjZThlYmM=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-14T16:35:11Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-17T06:17:46Z"}, "message": "std: win32 os::env() str parsing to str::raw::from_c_multistring + test", "tree": {"sha": "596ce8c72d88fc93f13399d417c74a79a277297c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596ce8c72d88fc93f13399d417c74a79a277297c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daf497462844a55678e12545114bcc75d5ce8ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daf497462844a55678e12545114bcc75d5ce8ebc", "html_url": "https://github.com/rust-lang/rust/commit/daf497462844a55678e12545114bcc75d5ce8ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daf497462844a55678e12545114bcc75d5ce8ebc/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b49fc4cf4eb7299a08d83ed8880d1002ecef9257", "url": "https://api.github.com/repos/rust-lang/rust/commits/b49fc4cf4eb7299a08d83ed8880d1002ecef9257", "html_url": "https://github.com/rust-lang/rust/commit/b49fc4cf4eb7299a08d83ed8880d1002ecef9257"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "af657274c670d3f7f6acdfd896a255ea4f947eac", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/daf497462844a55678e12545114bcc75d5ce8ebc/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf497462844a55678e12545114bcc75d5ce8ebc/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=daf497462844a55678e12545114bcc75d5ce8ebc", "patch": "@@ -196,16 +196,7 @@ pub fn env() -> ~[(~str,~str)] {\n             if (ch as uint == 0) {\n                 fail!(\"os::env() failure getting env string from OS: %s\", os::last_os_error());\n             }\n-            let mut curr_ptr: uint = ch as uint;\n-            let mut result = ~[];\n-            while(*(curr_ptr as *libc::c_char) != 0 as libc::c_char) {\n-                let env_pair = str::raw::from_c_str(\n-                    curr_ptr as *libc::c_char);\n-                result.push(env_pair);\n-                curr_ptr +=\n-                    libc::strlen(curr_ptr as *libc::c_char) as uint\n-                    + 1;\n-            }\n+            result = unsafe { str::raw::from_c_multistring(ch as *libc::c_char) };\n             FreeEnvironmentStringsA(ch);\n             result\n         }"}, {"sha": "84df2d2005da3985fdd2de0e281db6f6df343cda", "filename": "src/libstd/str.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/daf497462844a55678e12545114bcc75d5ce8ebc/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf497462844a55678e12545114bcc75d5ce8ebc/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=daf497462844a55678e12545114bcc75d5ce8ebc", "patch": "@@ -1091,6 +1091,25 @@ pub mod raw {\n         vec::raw::set_len(as_owned_vec(s), new_len)\n     }\n \n+    /// Parses a C \"multistring\", eg windows env values or\n+    /// the req->ptr result in a uv_fs_readdir() call\n+    #[inline]\n+    pub unsafe fn from_c_multistring(c: *libc::c_char) -> ~[~str] {\n+        #[fixed_stack_segment]; #[inline(never)];\n+\n+        let mut curr_ptr: uint = c as uint;\n+        let mut result = ~[];\n+        while(*(curr_ptr as *libc::c_char) != 0 as libc::c_char) {\n+            let env_pair = from_c_str(\n+                curr_ptr as *libc::c_char);\n+            result.push(env_pair);\n+            curr_ptr +=\n+                libc::strlen(curr_ptr as *libc::c_char) as uint\n+                + 1;\n+        }\n+        result\n+    }\n+\n     /// Sets the length of a string\n     ///\n     /// This will explicitly set the size of the string, without actually\n@@ -1106,6 +1125,24 @@ pub mod raw {\n         }\n     }\n \n+    #[test]\n+    fn test_str_multistring_parsing() {\n+        unsafe {\n+            let input = bytes!(\"zero\", \"\\x00\", \"one\", \"\\x00\", \"\\x00\");\n+            let ptr = vec::raw::to_ptr(input);\n+            let mut result = from_c_multistring(ptr as *libc::c_char);\n+            assert!(result.len() == 2);\n+            let mut ctr = 0;\n+            for x in result.iter() {\n+                match ctr {\n+                    0 => assert_eq!(x, &~\"zero\"),\n+                    1 => assert_eq!(x, &~\"one\"),\n+                    _ => fail!(\"shouldn't happen!\")\n+                }\n+                ctr += 1;\n+            }\n+        }\n+    }\n }\n \n /*"}]}