{"sha": "ef354d850e516e7005da050f0b5b8d3a5c2d7f45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMzU0ZDg1MGU1MTZlNzAwNWRhMDUwZjBiNWI4ZDNhNWMyZDdmNDU=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-09-04T06:35:06Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-09-04T17:33:00Z"}, "message": "Use {} for bitflags! definition and invocations\n\nThis looks nicer because it reflects Rust's other syntactic structures.", "tree": {"sha": "1212dfee9c8d0ab49492b506fbdb457da3dcc1e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1212dfee9c8d0ab49492b506fbdb457da3dcc1e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef354d850e516e7005da050f0b5b8d3a5c2d7f45", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef354d850e516e7005da050f0b5b8d3a5c2d7f45", "html_url": "https://github.com/rust-lang/rust/commit/ef354d850e516e7005da050f0b5b8d3a5c2d7f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef354d850e516e7005da050f0b5b8d3a5c2d7f45/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff72583891f67b9d739b76e914519631413ee56c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff72583891f67b9d739b76e914519631413ee56c", "html_url": "https://github.com/rust-lang/rust/commit/ff72583891f67b9d739b76e914519631413ee56c"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "3d1bc20cca49ecd0870bab4346977e0260b370b0", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ef354d850e516e7005da050f0b5b8d3a5c2d7f45/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef354d850e516e7005da050f0b5b8d3a5c2d7f45/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=ef354d850e516e7005da050f0b5b8d3a5c2d7f45", "patch": "@@ -22,7 +22,7 @@\n /// # Example\n ///\n /// ~~~rust\n-/// bitflags!(\n+/// bitflags! {\n ///     flags Flags: u32 {\n ///         static FlagA       = 0x00000001,\n ///         static FlagB       = 0x00000010,\n@@ -31,7 +31,7 @@\n ///                            | FlagB.bits\n ///                            | FlagC.bits,\n ///     }\n-/// )\n+/// }\n ///\n /// fn main() {\n ///     let e1 = FlagA | FlagC;\n@@ -48,12 +48,12 @@\n /// ~~~rust\n /// use std::fmt;\n ///\n-/// bitflags!(\n+/// bitflags! {\n ///     flags Flags: u32 {\n ///         static FlagA   = 0x00000001,\n ///         static FlagB   = 0x00000010,\n ///     }\n-/// )\n+/// }\n ///\n /// impl Flags {\n ///     pub fn clear(&mut self) {\n@@ -110,10 +110,10 @@\n /// - `insert`: inserts the specified flags in-place\n /// - `remove`: removes the specified flags in-place\n #[macro_export]\n-macro_rules! bitflags(\n+macro_rules! bitflags {\n     ($(#[$attr:meta])* flags $BitFlags:ident: $T:ty {\n         $($(#[$Flag_attr:meta])* static $Flag:ident = $value:expr),+\n-    }) => (\n+    }) => {\n         #[deriving(PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]\n         $(#[$attr])*\n         pub struct $BitFlags {\n@@ -216,26 +216,26 @@ macro_rules! bitflags(\n                 $BitFlags { bits: !self.bits } & $BitFlags::all()\n             }\n         }\n-    );\n+    };\n     ($(#[$attr:meta])* flags $BitFlags:ident: $T:ty {\n         $($(#[$Flag_attr:meta])* static $Flag:ident = $value:expr),+,\n-    }) => (\n-        bitflags!(\n+    }) => {\n+        bitflags! {\n             $(#[$attr])*\n             flags $BitFlags: u32 {\n                 $($(#[$Flag_attr])* static $Flag = $value),+\n             }\n-        )\n-    );\n-)\n+        }\n+    };\n+}\n \n #[cfg(test)]\n mod tests {\n     use hash;\n     use option::{Some, None};\n     use ops::{BitOr, BitAnd, Sub, Not};\n \n-    bitflags!(\n+    bitflags! {\n         #[doc = \"> The first principle is that you must not fool yourself \u2014 and\"]\n         #[doc = \"> you are the easiest person to fool.\"]\n         #[doc = \"> \"]\n@@ -252,7 +252,7 @@ mod tests {\n                                | FlagB.bits\n                                | FlagC.bits,\n         }\n-    )\n+    }\n \n     #[test]\n     fn test_bits(){"}, {"sha": "804d6c79d23d0763a12083db8f7c85d11a1d7bad", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ef354d850e516e7005da050f0b5b8d3a5c2d7f45/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef354d850e516e7005da050f0b5b8d3a5c2d7f45/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ef354d850e516e7005da050f0b5b8d3a5c2d7f45", "patch": "@@ -1794,9 +1794,9 @@ pub struct UnstableFileStat {\n     pub gen: u64,\n }\n \n-bitflags!(\n-    #[doc=\"A set of permissions for a file or directory is represented\n-by a set of flags which are or'd together.\"]\n+bitflags! {\n+    #[doc = \"A set of permissions for a file or directory is represented\"]\n+    #[doc = \"by a set of flags which are or'd together.\"]\n     flags FilePermission: u32 {\n         static UserRead     = 0o400,\n         static UserWrite    = 0o200,\n@@ -1812,23 +1812,23 @@ by a set of flags which are or'd together.\"]\n         static GroupRWX = GroupRead.bits | GroupWrite.bits | GroupExecute.bits,\n         static OtherRWX = OtherRead.bits | OtherWrite.bits | OtherExecute.bits,\n \n-        #[doc=\"Permissions for user owned files, equivalent to 0644 on\n-unix-like systems.\"]\n+        #[doc = \"Permissions for user owned files, equivalent to 0644 on\"]\n+        #[doc = \"unix-like systems.\"]\n         static UserFile = UserRead.bits | UserWrite.bits | GroupRead.bits | OtherRead.bits,\n \n-        #[doc=\"Permissions for user owned directories, equivalent to 0755 on\n-unix-like systems.\"]\n+        #[doc = \"Permissions for user owned directories, equivalent to 0755 on\"]\n+        #[doc = \"unix-like systems.\"]\n         static UserDir  = UserRWX.bits | GroupRead.bits | GroupExecute.bits |\n                    OtherRead.bits | OtherExecute.bits,\n \n-        #[doc=\"Permissions for user owned executables, equivalent to 0755\n-on unix-like systems.\"]\n+        #[doc = \"Permissions for user owned executables, equivalent to 0755\"]\n+        #[doc = \"on unix-like systems.\"]\n         static UserExec = UserDir.bits,\n \n-        #[doc=\"All possible permissions enabled.\"]\n-        static AllPermissions = UserRWX.bits | GroupRWX.bits | OtherRWX.bits\n+        #[doc = \"All possible permissions enabled.\"]\n+        static AllPermissions = UserRWX.bits | GroupRWX.bits | OtherRWX.bits,\n     }\n-)\n+}\n \n impl Default for FilePermission {\n     #[inline]"}, {"sha": "443b5713665b920dca2df1671bb25cf6f1ef7812", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef354d850e516e7005da050f0b5b8d3a5c2d7f45/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef354d850e516e7005da050f0b5b8d3a5c2d7f45/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ef354d850e516e7005da050f0b5b8d3a5c2d7f45", "patch": "@@ -281,7 +281,7 @@ mod std {\n     pub use fmt; // used for any formatting strings\n     pub use io; // used for println!()\n     pub use local_data; // used for local_data_key!()\n-    pub use option; // used for bitflags!()\n+    pub use option; // used for bitflags!{}\n     pub use rt; // used for fail!()\n     pub use vec; // used for vec![]\n "}]}