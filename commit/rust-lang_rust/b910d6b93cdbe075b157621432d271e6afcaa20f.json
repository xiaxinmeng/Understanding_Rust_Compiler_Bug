{"sha": "b910d6b93cdbe075b157621432d271e6afcaa20f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTBkNmI5M2NkYmUwNzViMTU3NjIxNDMyZDI3MWU2YWZjYWEyMGY=", "commit": {"author": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-03-17T00:45:03Z"}, "committer": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-03-17T06:49:37Z"}, "message": "Use associated consts for GenericRadix base and prefix", "tree": {"sha": "8829ebe74e689f4d1d5de64afedd48f5626102f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8829ebe74e689f4d1d5de64afedd48f5626102f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b910d6b93cdbe075b157621432d271e6afcaa20f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b910d6b93cdbe075b157621432d271e6afcaa20f", "html_url": "https://github.com/rust-lang/rust/commit/b910d6b93cdbe075b157621432d271e6afcaa20f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b910d6b93cdbe075b157621432d271e6afcaa20f/comments", "author": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55c984ee5db73db2379024951457d1139db57f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/55c984ee5db73db2379024951457d1139db57f24", "html_url": "https://github.com/rust-lang/rust/commit/55c984ee5db73db2379024951457d1139db57f24"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "6378358c2ddcf18528405e2a5e60801dbd8666b4", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b910d6b93cdbe075b157621432d271e6afcaa20f/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b910d6b93cdbe075b157621432d271e6afcaa20f/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=b910d6b93cdbe075b157621432d271e6afcaa20f", "patch": "@@ -49,15 +49,13 @@ doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n #[doc(hidden)]\n trait GenericRadix {\n     /// The number of digits.\n-    fn base(&self) -> u8;\n+    const BASE: u8;\n \n     /// A radix-specific prefix string.\n-    fn prefix(&self) -> &'static str {\n-        \"\"\n-    }\n+    const PREFIX: &'static str;\n \n     /// Converts an integer to corresponding radix digit.\n-    fn digit(&self, x: u8) -> u8;\n+    fn digit(x: u8) -> u8;\n \n     /// Format an integer using the radix using a formatter.\n     fn fmt_int<T: Int>(&self, mut x: T, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -67,14 +65,14 @@ trait GenericRadix {\n         let is_nonnegative = x >= zero;\n         let mut buf = [0; 128];\n         let mut curr = buf.len();\n-        let base = T::from_u8(self.base());\n+        let base = T::from_u8(Self::BASE);\n         if is_nonnegative {\n             // Accumulate each digit of the number from the least significant\n             // to the most significant figure.\n             for byte in buf.iter_mut().rev() {\n-                let n = x % base;              // Get the current place value.\n-                x = x / base;                  // Deaccumulate the number.\n-                *byte = self.digit(n.to_u8()); // Store the digit in the buffer.\n+                let n = x % base;               // Get the current place value.\n+                x = x / base;                   // Deaccumulate the number.\n+                *byte = Self::digit(n.to_u8()); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate.\n@@ -84,9 +82,9 @@ trait GenericRadix {\n         } else {\n             // Do the same as above, but accounting for two's complement.\n             for byte in buf.iter_mut().rev() {\n-                let n = zero - (x % base);     // Get the current place value.\n-                x = x / base;                  // Deaccumulate the number.\n-                *byte = self.digit(n.to_u8()); // Store the digit in the buffer.\n+                let n = zero - (x % base);      // Get the current place value.\n+                x = x / base;                   // Deaccumulate the number.\n+                *byte = Self::digit(n.to_u8()); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate.\n@@ -95,7 +93,7 @@ trait GenericRadix {\n             }\n         }\n         let buf = unsafe { str::from_utf8_unchecked(&buf[curr..]) };\n-        f.pad_integral(is_nonnegative, self.prefix(), buf)\n+        f.pad_integral(is_nonnegative, Self::PREFIX, buf)\n     }\n }\n \n@@ -122,12 +120,12 @@ struct UpperHex;\n macro_rules! radix {\n     ($T:ident, $base:expr, $prefix:expr, $($x:pat => $conv:expr),+) => {\n         impl GenericRadix for $T {\n-            fn base(&self) -> u8 { $base }\n-            fn prefix(&self) -> &'static str { $prefix }\n-            fn digit(&self, x: u8) -> u8 {\n+            const BASE: u8 = $base;\n+            const PREFIX: &'static str = $prefix;\n+            fn digit(x: u8) -> u8 {\n                 match x {\n                     $($x => $conv,)+\n-                    x => panic!(\"number not in the range 0..{}: {}\", self.base() - 1, x),\n+                    x => panic!(\"number not in the range 0..{}: {}\", Self::BASE - 1, x),\n                 }\n             }\n         }"}]}