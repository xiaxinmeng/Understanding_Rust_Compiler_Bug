{"sha": "5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMDIwNmExZTRlNTA0OWE0YTVkMzVlYTZmZWUxMGNiZDNmNDVhYTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-25T20:45:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-25T21:26:37Z"}, "message": "Rename insert_with functions to update, update_with_key", "tree": {"sha": "cb3ab8eb672fab2de50e58dd640e7df8e087b347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb3ab8eb672fab2de50e58dd640e7df8e087b347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0", "html_url": "https://github.com/rust-lang/rust/commit/5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4075e553ccc5be73c05332f15ef46f761b0817", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4075e553ccc5be73c05332f15ef46f761b0817", "html_url": "https://github.com/rust-lang/rust/commit/ff4075e553ccc5be73c05332f15ef46f761b0817"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "d68970679ad999d185ef0cfcea3db46e426974bf", "filename": "src/libstd/map.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0", "patch": "@@ -35,16 +35,16 @@ pub trait Map<K:Eq IterBytes Hash Copy, V: Copy> {\n      * If the map contains a value for the key, use the function\n      * to set a new value.\n      */\n-    fn insert_with_key(key: K, newval: V, ff: fn(K, V, V) -> V) -> bool;\n+    fn update_with_key(key: K, newval: V, ff: fn(K, V, V) -> V) -> bool;\n \n     /**\n      * Add a value to the map.\n      *\n-     * If the map contains a value for the key, use the function\n-     * to set a new value.  (Like insert_with_key, but with a function\n-     * of only values.)\n+     * If the map contains a value for the key, use the function to\n+     * set a new value.  (Like `insert_or_update_with_key`, but with a\n+     * function of only values.)\n      */\n-    fn insert_with(key: K, newval: V, ff: fn(V, V) -> V) -> bool;\n+    fn update(key: K, newval: V, ff: fn(V, V) -> V) -> bool;\n \n     /// Returns true if the map contains a value for the specified key\n     pure fn contains_key(key: K) -> bool;\n@@ -281,7 +281,7 @@ pub mod chained {\n             }\n         }\n \n-        fn insert_with_key(key: K, newval: V, ff: fn(K, V, V) -> V) -> bool {\n+        fn update_with_key(key: K, newval: V, ff: fn(K, V, V) -> V) -> bool {\n /*\n             match self.find(key) {\n                 None            => return self.insert(key, val),\n@@ -330,8 +330,8 @@ pub mod chained {\n             }\n         }\n \n-        fn insert_with(key: K, newval: V, ff: fn(V, V) -> V) -> bool {\n-            return self.insert_with_key(key, newval, |_k, v, v1| ff(v,v1));\n+        fn update(key: K, newval: V, ff: fn(V, V) -> V) -> bool {\n+            return self.update_with_key(key, newval, |_k, v, v1| ff(v,v1));\n         }\n \n         pure fn get(k: K) -> V {\n@@ -517,15 +517,15 @@ impl<K: Eq IterBytes Hash Copy, V: Copy> @Mut<LinearMap<K, V>>:\n         }\n     }\n \n-    fn insert_with_key(key: K, newval: V, ff: fn(K, V, V) -> V) -> bool {\n+    fn update_with_key(key: K, newval: V, ff: fn(K, V, V) -> V) -> bool {\n         match self.find(key) {\n             None            => return self.insert(key, newval),\n             Some(copy orig) => return self.insert(key, ff(key, orig, newval))\n         }\n     }\n \n-    fn insert_with(key: K, newval: V, ff: fn(V, V) -> V) -> bool {\n-        return self.insert_with_key(key, newval, |_k, v, v1| ff(v,v1));\n+    fn update(key: K, newval: V, ff: fn(V, V) -> V) -> bool {\n+        return self.update_with_key(key, newval, |_k, v, v1| ff(v,v1));\n     }\n \n     fn remove(key: K) -> bool {\n@@ -833,7 +833,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_insert_with_key() {\n+    fn test_update_with_key() {\n         let map = map::HashMap::<~str, uint>();\n \n         // given a new key, initialize it with this new count, given\n@@ -848,11 +848,11 @@ mod tests {\n \n         // count the number of several types of animal,\n         // adding in groups as we go\n-        map.insert_with(~\"cat\",      1, addMoreToCount_simple);\n-        map.insert_with_key(~\"mongoose\", 1, addMoreToCount);\n-        map.insert_with(~\"cat\",      7, addMoreToCount_simple);\n-        map.insert_with_key(~\"ferret\",   3, addMoreToCount);\n-        map.insert_with_key(~\"cat\",      2, addMoreToCount);\n+        map.update(~\"cat\",      1, addMoreToCount_simple);\n+        map.update_with_key(~\"mongoose\", 1, addMoreToCount);\n+        map.update(~\"cat\",      7, addMoreToCount_simple);\n+        map.update_with_key(~\"ferret\",   3, addMoreToCount);\n+        map.update_with_key(~\"cat\",      2, addMoreToCount);\n \n         // check the total counts\n         assert 10 == option::get(map.find(~\"cat\"));"}, {"sha": "3f9d308584d4521ca3877c2d503aa71876e8c728", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=5c0206a1e4e5049a4a5d35ea6fee10cbd3f45aa0", "patch": "@@ -103,15 +103,15 @@ impl<V: Copy> SmallIntMap<V>: map::Map<uint, V> {\n     pure fn find(key: uint) -> Option<V> { find(self, key) }\n     fn rehash() { fail }\n \n-    fn insert_with_key(key: uint, val: V, ff: fn(uint, V, V) -> V) -> bool {\n+    fn update_with_key(key: uint, val: V, ff: fn(uint, V, V) -> V) -> bool {\n         match self.find(key) {\n             None            => return self.insert(key, val),\n             Some(copy orig) => return self.insert(key, ff(key, orig, val)),\n         }\n     }\n \n-    fn insert_with(key: uint, newval: V, ff: fn(V, V) -> V) -> bool {\n-        return self.insert_with_key(key, newval, |_k, v, v1| ff(v,v1));\n+    fn update(key: uint, newval: V, ff: fn(V, V) -> V) -> bool {\n+        return self.update_with_key(key, newval, |_k, v, v1| ff(v,v1));\n     }\n \n     pure fn each(it: fn(key: uint, value: V) -> bool) {\n@@ -172,11 +172,11 @@ mod tests {\n         }\n \n         // count integers\n-        map.insert_with(3, 1, addMoreToCount_simple);\n-        map.insert_with_key(9, 1, addMoreToCount);\n-        map.insert_with(3, 7, addMoreToCount_simple);\n-        map.insert_with_key(5, 3, addMoreToCount);\n-        map.insert_with_key(3, 2, addMoreToCount);\n+        map.update(3, 1, addMoreToCount_simple);\n+        map.update_with_key(9, 1, addMoreToCount);\n+        map.update(3, 7, addMoreToCount_simple);\n+        map.update_with_key(5, 3, addMoreToCount);\n+        map.update_with_key(3, 2, addMoreToCount);\n \n         // check the total counts\n         assert 10 == option::get(map.find(3));"}]}