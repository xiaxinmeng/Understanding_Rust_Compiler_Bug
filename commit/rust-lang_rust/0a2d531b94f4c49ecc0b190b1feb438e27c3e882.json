{"sha": "0a2d531b94f4c49ecc0b190b1feb438e27c3e882", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMmQ1MzFiOTRmNGM0OWVjYzBiMTkwYjFmZWI0MzhlMjdjM2U4ODI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-31T19:42:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-31T19:42:06Z"}, "message": "Teach trans to drain fulfillment context. japaric encountered problems\ndue to this but we were not able to isolate a smaller test case.", "tree": {"sha": "567d9511b82c9ed2632f1ed80b2c51ab04dc6d50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/567d9511b82c9ed2632f1ed80b2c51ab04dc6d50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2d531b94f4c49ecc0b190b1feb438e27c3e882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2d531b94f4c49ecc0b190b1feb438e27c3e882", "html_url": "https://github.com/rust-lang/rust/commit/0a2d531b94f4c49ecc0b190b1feb438e27c3e882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2d531b94f4c49ecc0b190b1feb438e27c3e882/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67dab2af81ba64023c526dc96315863a9f7e9e40", "url": "https://api.github.com/repos/rust-lang/rust/commits/67dab2af81ba64023c526dc96315863a9f7e9e40", "html_url": "https://github.com/rust-lang/rust/commit/67dab2af81ba64023c526dc96315863a9f7e9e40"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "7c2585becea8cea23b2e96a1083ee0236777a8b8", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0a2d531b94f4c49ecc0b190b1feb438e27c3e882/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2d531b94f4c49ecc0b190b1feb438e27c3e882/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=0a2d531b94f4c49ecc0b190b1feb438e27c3e882", "patch": "@@ -954,28 +954,47 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     // Currently, we use a fulfillment context to completely resolve\n     // all nested obligations. This is because they can inform the\n-    // inference of the impl's type parameters. However, in principle,\n-    // we only need to do this until the impl's type parameters are\n-    // fully bound. It could be a slight optimization to stop\n-    // iterating early.\n+    // inference of the impl's type parameters.\n     let mut fulfill_cx = traits::FulfillmentContext::new();\n     let vtable = selection.map_move_nested(|predicate| {\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n     });\n-    match fulfill_cx.select_all_or_error(&infcx, &param_env, tcx) {\n+    let vtable = drain_fulfillment_cx(span, &infcx, &param_env, &mut fulfill_cx, &vtable);\n+\n+    info!(\"Cache miss: {}\", trait_ref.repr(ccx.tcx()));\n+    ccx.trait_cache().borrow_mut().insert(trait_ref,\n+                                          vtable.clone());\n+\n+    vtable\n+}\n+\n+pub fn drain_fulfillment_cx<'a,'tcx,T>(span: Span,\n+                                       infcx: &infer::InferCtxt<'a,'tcx>,\n+                                       param_env: &ty::ParameterEnvironment<'tcx>,\n+                                       fulfill_cx: &mut traits::FulfillmentContext<'tcx>,\n+                                       result: &T)\n+                                       -> T\n+    where T : TypeFoldable<'tcx> + Repr<'tcx>\n+{\n+    debug!(\"drain_fulfillment_cx(result={})\",\n+           result.repr(infcx.tcx));\n+\n+    // In principle, we only need to do this so long as `result`\n+    // contains unbound type parameters. It could be a slight\n+    // optimization to stop iterating early.\n+    match fulfill_cx.select_all_or_error(infcx, param_env, infcx.tcx) {\n         Ok(()) => { }\n         Err(errors) => {\n             if errors.iter().all(|e| e.is_overflow()) {\n                 // See Ok(None) case above.\n-                ccx.sess().span_fatal(\n+                infcx.tcx.sess.span_fatal(\n                     span,\n                     \"reached the recursion limit during monomorphization\");\n             } else {\n-                tcx.sess.span_bug(\n+                infcx.tcx.sess.span_bug(\n                     span,\n-                    format!(\"Encountered errors `{}` fulfilling `{}` during trans\",\n-                            errors.repr(tcx),\n-                            trait_ref.repr(tcx))[]);\n+                    format!(\"Encountered errors `{}` fulfilling during trans\",\n+                            errors.repr(infcx.tcx))[]);\n             }\n         }\n     }\n@@ -985,13 +1004,7 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // sort of overkill because we do not expect there to be any\n     // unbound type variables, hence no `TyFresh` types should ever be\n     // inserted.\n-    let vtable = vtable.fold_with(&mut infcx.freshener());\n-\n-    info!(\"Cache miss: {}\", trait_ref.repr(ccx.tcx()));\n-    ccx.trait_cache().borrow_mut().insert(trait_ref,\n-                                          vtable.clone());\n-\n-    vtable\n+    result.fold_with(&mut infcx.freshener())\n }\n \n // Key used to lookup values supplied for type parameters in an expr."}, {"sha": "fdcb232e125fda3e838cb28158e61b46cf3bbbdf", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a2d531b94f4c49ecc0b190b1feb438e27c3e882/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2d531b94f4c49ecc0b190b1feb438e27c3e882/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=0a2d531b94f4c49ecc0b190b1feb438e27c3e882", "patch": "@@ -31,6 +31,7 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{local_def, PostExpansionMethod};\n use syntax::attr;\n+use syntax::codemap::DUMMY_SP;\n use std::hash::{sip, Hash};\n \n pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n@@ -331,7 +332,11 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n            result.repr(tcx),\n            obligations.repr(tcx));\n \n-    assert_eq!(obligations.len(), 0); // TODO not good enough\n+    let mut fulfill_cx = traits::FulfillmentContext::new();\n+    for obligation in obligations.into_iter() {\n+        fulfill_cx.register_predicate_obligation(&infcx, obligation);\n+    }\n+    let result = drain_fulfillment_cx(DUMMY_SP, &infcx, &param_env, &mut fulfill_cx, &result);\n \n     result\n }"}]}