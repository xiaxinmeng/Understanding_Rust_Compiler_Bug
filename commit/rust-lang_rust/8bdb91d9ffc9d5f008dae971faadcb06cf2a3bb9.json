{"sha": "8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZGI5MWQ5ZmZjOWQ1ZjAwOGRhZTk3MWZhYWRjYjA2Y2YyYTNiYjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-26T01:50:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-26T01:50:16Z"}, "message": "Rollup merge of #60165 - Nemo157:pin-into-inner, r=cramertj\n\nAdd Pin::{into_inner,into_inner_unchecked}\n\nThese functions are useful for unsafe code that needs to temporarily pull smart pointers out of the `Pin`, e.g. [the change that inspired them](https://github.com/Nemo157/futures-rs/commit/b4361780faf764c7cb046ed75f863a6fcfd44800#diff-1a4e0ba4d1b539412ca576411ec6c7c2R258) is taking a `Pin<Box<dyn Future>>`, turning it into a `*mut dyn Future` via `Box::into_raw(unsafe { Pin::into_inner_unchecked(pin) })` then later dropping this via `drop(Pin::from(Box::from_raw(ptr)))`. This can be accomplished today via `{ let ptr = unsafe { Pin::get_unchecked_mut(pin.as_mut()) } as *mut dyn Future; mem::forget(pin); ptr }`, but this is far more complicated and loses out on the symmetry of using `Box::into_raw` and `Box::from_raw`.\n\nI'll extend the documentation on what guarantees `into_inner_unchecked` needs to uphold once I get some feedback on whether this API is wanted or not.\n\nr? @withoutboats", "tree": {"sha": "2311c0dfcf475c6e72daa5bab966096bbc41020d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2311c0dfcf475c6e72daa5bab966096bbc41020d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcwmPYCRBK7hj4Ov3rIwAAdHIIAIZfK/uIPeXUg69jWTCzFf4h\nH42+8gXm5Pycdr/ilnX6LjeGDjdFaKq2n0sDCAfStKcghX9cHj40CSC/wbaSUR8i\nEhFOWTMFuhLfzhBynMtegonE5i4Lib30Lfu6bx6ldxKyawlpcP4UFkm4UUeQBvY5\nBX1iIinbpPnPE9XLN0zYsGb1SH8Lr76jo6LduKhyup0xYhldKXjyNisDuGFJyspb\n/ForkutJLOTAVO/afO1qID9TjjmJQI4QFF81qBEjDY2JsBKU4RBj7HQJpW/K10NQ\nq+FKXFMThvmLWiqmc/K2ZyjRczYXi7k0BHzCXJ845aLoRdEGvbU4516j6a9/dbQ=\n=sD3F\n-----END PGP SIGNATURE-----\n", "payload": "tree 2311c0dfcf475c6e72daa5bab966096bbc41020d\nparent 878a7d6ea5ddbc5f813bd45dbb3633e4317ad2a9\nparent a0e0849a3b1710139d84be846a444c12297cfd2b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556243416 +0200\ncommitter GitHub <noreply@github.com> 1556243416 +0200\n\nRollup merge of #60165 - Nemo157:pin-into-inner, r=cramertj\n\nAdd Pin::{into_inner,into_inner_unchecked}\n\nThese functions are useful for unsafe code that needs to temporarily pull smart pointers out of the `Pin`, e.g. [the change that inspired them](https://github.com/Nemo157/futures-rs/commit/b4361780faf764c7cb046ed75f863a6fcfd44800#diff-1a4e0ba4d1b539412ca576411ec6c7c2R258) is taking a `Pin<Box<dyn Future>>`, turning it into a `*mut dyn Future` via `Box::into_raw(unsafe { Pin::into_inner_unchecked(pin) })` then later dropping this via `drop(Pin::from(Box::from_raw(ptr)))`. This can be accomplished today via `{ let ptr = unsafe { Pin::get_unchecked_mut(pin.as_mut()) } as *mut dyn Future; mem::forget(pin); ptr }`, but this is far more complicated and loses out on the symmetry of using `Box::into_raw` and `Box::from_raw`.\n\nI'll extend the documentation on what guarantees `into_inner_unchecked` needs to uphold once I get some feedback on whether this API is wanted or not.\n\nr? @withoutboats\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9", "html_url": "https://github.com/rust-lang/rust/commit/8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878a7d6ea5ddbc5f813bd45dbb3633e4317ad2a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/878a7d6ea5ddbc5f813bd45dbb3633e4317ad2a9", "html_url": "https://github.com/rust-lang/rust/commit/878a7d6ea5ddbc5f813bd45dbb3633e4317ad2a9"}, {"sha": "a0e0849a3b1710139d84be846a444c12297cfd2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e0849a3b1710139d84be846a444c12297cfd2b", "html_url": "https://github.com/rust-lang/rust/commit/a0e0849a3b1710139d84be846a444c12297cfd2b"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "e74ed9b7889cb31b311dfee52b40283d430f555e", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9", "patch": "@@ -349,6 +349,18 @@ where\n         // around pinning.\n         unsafe { Pin::new_unchecked(pointer) }\n     }\n+\n+    /// Unwraps this `Pin<P>` returning the underlying pointer.\n+    ///\n+    /// This requires that the data inside this `Pin` is [`Unpin`] so that we\n+    /// can ignore the pinning invariants when unwrapping it.\n+    ///\n+    /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n+    #[unstable(feature = \"pin_into_inner\", issue = \"60245\")]\n+    #[inline(always)]\n+    pub fn into_inner(pin: Pin<P>) -> P {\n+        pin.pointer\n+    }\n }\n \n impl<P: Deref> Pin<P> {\n@@ -434,6 +446,28 @@ impl<P: Deref> Pin<P> {\n     pub fn as_ref(self: &Pin<P>) -> Pin<&P::Target> {\n         unsafe { Pin::new_unchecked(&*self.pointer) }\n     }\n+\n+    /// Unwraps this `Pin<P>` returning the underlying pointer.\n+    ///\n+    /// # Safety\n+    ///\n+    /// This function is unsafe. You must guarantee that you will continue to\n+    /// treat the pointer `P` as pinned after you call this function, so that\n+    /// the invariants on the `Pin` type can be upheld. If the code using the\n+    /// resulting `P` does not continue to maintain the pinning invariants that\n+    /// is a violation of the API contract and may lead to undefined behavior in\n+    /// later (safe) operations.\n+    ///\n+    /// If the underlying data is [`Unpin`], [`Pin::into_inner`] should be used\n+    /// instead.\n+    ///\n+    /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n+    /// [`Pin::into_inner`]: #method.into_inner\n+    #[unstable(feature = \"pin_into_inner\", issue = \"60245\")]\n+    #[inline(always)]\n+    pub unsafe fn into_inner_unchecked(pin: Pin<P>) -> P {\n+        pin.pointer\n+    }\n }\n \n impl<P: DerefMut> Pin<P> {"}]}