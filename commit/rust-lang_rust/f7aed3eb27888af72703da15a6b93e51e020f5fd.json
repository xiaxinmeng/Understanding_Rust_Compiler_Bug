{"sha": "f7aed3eb27888af72703da15a6b93e51e020f5fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YWVkM2ViMjc4ODhhZjcyNzAzZGExNWE2YjkzZTUxZTAyMGY1ZmQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-04T20:23:14Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-04T23:28:21Z"}, "message": "Do not use casting for suggestion to add type to numeric literal", "tree": {"sha": "f5237c2b2517ca35afb122d599f38d331d23e21e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5237c2b2517ca35afb122d599f38d331d23e21e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7aed3eb27888af72703da15a6b93e51e020f5fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7aed3eb27888af72703da15a6b93e51e020f5fd", "html_url": "https://github.com/rust-lang/rust/commit/f7aed3eb27888af72703da15a6b93e51e020f5fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7aed3eb27888af72703da15a6b93e51e020f5fd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "html_url": "https://github.com/rust-lang/rust/commit/87242f3cc7e82e60b308598f9abd29eb3c0c3be7"}], "stats": {"total": 81, "additions": 59, "deletions": 22}, "files": [{"sha": "63b7f806bbaa0a3ba2220424b0396c2f60b4d360", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f7aed3eb27888af72703da15a6b93e51e020f5fd", "patch": "@@ -241,7 +241,7 @@ pub struct LifetimeDef {\n }\n \n /// A \"Path\" is essentially Rust's notion of a name; for instance:\n-/// std::cmp::PartialEq  .  It's represented as a sequence of identifiers,\n+/// `std::cmp::PartialEq`. It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Path {"}, {"sha": "15e16e59dd27c3a964f14d8fe94134c6fdb526c1", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f7aed3eb27888af72703da15a6b93e51e020f5fd", "patch": "@@ -215,20 +215,43 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             item_name,\n                             ty_string\n                         );\n-                        let snippet = tcx.sess.codemap().span_to_snippet(expr.span)\n-                            .unwrap_or(\"4\".to_string());\n                         let concrete_type = if actual.is_integral() {\n-                            \"u32\"\n+                            \"i32\"\n                         } else {\n                             \"f32\"\n                         };\n-                        err.span_suggestion(expr.span,\n-                                            &format!(\"you must specify a concrete type for \\\n-                                                      this numeric value, like `{}`\",\n-                                                     concrete_type),\n-                                            format!(\"({} as {})\",\n-                                                    snippet,\n-                                                    concrete_type));\n+                        match expr.node {\n+                            hir::ExprLit(_) => {  // numeric literal\n+                                let snippet = tcx.sess.codemap().span_to_snippet(expr.span)\n+                                    .unwrap_or(\"<numeric literal>\".to_string());\n+                                // FIXME: use the literal for missing snippet\n+\n+                                err.span_suggestion(expr.span,\n+                                                    &format!(\"you must specify a concrete type for \\\n+                                                              this numeric value, like `{}`\",\n+                                                             concrete_type),\n+                                                    format!(\"{}_{}\",\n+                                                            snippet,\n+                                                            concrete_type));\n+                            }\n+                            hir::ExprPath(ref qpath) => {  // local binding\n+                                if let &hir::QPath::Resolved(_, ref path) = &qpath {\n+                                    if let hir::def::Def::Local(node_id) = path.def {\n+                                        let span = tcx.hir.span(node_id);\n+                                        let snippet = tcx.sess.codemap().span_to_snippet(span)\n+                                            .unwrap();\n+                                        err.span_suggestion(span,\n+                                                            &format!(\"you must specify a type for \\\n+                                                                      this binding, like `{}`\",\n+                                                                     concrete_type),\n+                                                            format!(\"{}: {}\",\n+                                                                    snippet,\n+                                                                    concrete_type));\n+                                    }\n+                                }\n+                            }\n+                            _ => {}\n+                        }\n                         err.emit();\n                         return;\n                     } else {"}, {"sha": "defcbdfe03d053633ef88df88585af1d1529db87", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=f7aed3eb27888af72703da15a6b93e51e020f5fd", "patch": "@@ -4661,9 +4661,10 @@ x.powi(2);  // same error as above\n Because of this, you must give the numeric literal or binding a type:\n \n ```\n-let _ = (2.0 as f32).powi(2);\n+let _ = 2.0_f32.powi(2);\n let x: f32 = 2.0;\n let _ = x.powi(2);\n+let _ = (2.0 as f32).powi(2);\n ```\n \"##,\n }"}, {"sha": "373dff27f2e413694bc682684bcd0a07da5f33a1", "filename": "src/test/ui/issue-41652/issue_41652.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr?ref=f7aed3eb27888af72703da15a6b93e51e020f5fd", "patch": "@@ -3,10 +3,10 @@ error[E0689]: can't call method `f` on ambiguous numeric type `{integer}`\n    |\n 19 |         3.f()\n    |           ^\n-help: you must specify a concrete type for this numeric value, like `u32`\n+help: you must specify a concrete type for this numeric value, like `i32`\n    |\n-19 |         (3 as u32).f()\n-   |         ^^^^^^^^^^\n+19 |         3_i32.f()\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b9cad7e113dbf90aa10a4195dc0099a2a8182004", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=f7aed3eb27888af72703da15a6b93e51e020f5fd", "patch": "@@ -35,8 +35,8 @@ error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n    |     -------------------- in this macro invocation\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n-51 |           (2.0 as f32).powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n-   |           ^^^^^^^^^^^^\n+51 |           2.0_f32.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |           ^^^^^^^\n \n error[E0599]: no method named `fake` found for type `{integer}` in the current scope\n   --> $DIR/macro-backtrace-invalid-internals.rs:33:13\n@@ -75,8 +75,8 @@ error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n    |             ------------------- in this macro invocation\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n-57 |           (2.0 as f32).powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n-   |           ^^^^^^^^^^^^\n+57 |           2.0_f32.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |           ^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "fa5bafab8717e82bb018d1fc718cda78ea01e051", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs?ref=f7aed3eb27888af72703da15a6b93e51e020f5fd", "patch": "@@ -11,5 +11,8 @@\n fn main() {\n     let x = 2.0.powi(2);\n     //~^ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+    let y = 2.0;\n+    let x = y.powi(2);\n+    //~^ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n     println!(\"{:?}\", x);\n }"}, {"sha": "c2b292c642caf4cacfe1ec9f67ca3015d107c891", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7aed3eb27888af72703da15a6b93e51e020f5fd/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr?ref=f7aed3eb27888af72703da15a6b93e51e020f5fd", "patch": "@@ -5,8 +5,18 @@ error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n    |                 ^^^^\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n-12 |     let x = (2.0 as f32).powi(2);\n-   |             ^^^^^^^^^^^^\n+12 |     let x = 2.0_f32.powi(2);\n+   |             ^^^^^^^\n \n-error: aborting due to previous error\n+error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:15:15\n+   |\n+15 |     let x = y.powi(2);\n+   |               ^^^^\n+help: you must specify a type for this binding, like `f32`\n+   |\n+14 |     let y: f32 = 2.0;\n+   |         ^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}]}