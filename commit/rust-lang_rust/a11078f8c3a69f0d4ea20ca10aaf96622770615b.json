{"sha": "a11078f8c3a69f0d4ea20ca10aaf96622770615b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMTA3OGY4YzNhNjlmMGQ0ZWEyMGNhMTBhYWY5NjYyMjc3MDYxNWI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-11-19T10:12:40Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-11-19T13:03:21Z"}, "message": "Update documentation for literal suffixes.\n\nThis changes the stated grammar of literals to move all suffixes into\nthe generic literal production.", "tree": {"sha": "34f58343fa6fc066ca5578b1ce3daf7e7c48fc55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34f58343fa6fc066ca5578b1ce3daf7e7c48fc55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a11078f8c3a69f0d4ea20ca10aaf96622770615b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a11078f8c3a69f0d4ea20ca10aaf96622770615b", "html_url": "https://github.com/rust-lang/rust/commit/a11078f8c3a69f0d4ea20ca10aaf96622770615b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a11078f8c3a69f0d4ea20ca10aaf96622770615b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7586abf01b5c6fcbb60926c7cab7d3e5d133fa9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7586abf01b5c6fcbb60926c7cab7d3e5d133fa9a", "html_url": "https://github.com/rust-lang/rust/commit/7586abf01b5c6fcbb60926c7cab7d3e5d133fa9a"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "0b4a745f98716a2db538bae6aa1104dac41b1841", "filename": "src/doc/reference.md", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a11078f8c3a69f0d4ea20ca10aaf96622770615b/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/a11078f8c3a69f0d4ea20ca10aaf96622770615b/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=a11078f8c3a69f0d4ea20ca10aaf96622770615b", "patch": "@@ -216,9 +216,15 @@ rather than referring to it by name or some other evaluation rule. A literal is\n a form of constant expression, so is evaluated (primarily) at compile time.\n \n ```{.ebnf .gram}\n-literal : string_lit | char_lit | byte_string_lit | byte_lit | num_lit ;\n+lit_suffix : ident;\n+literal : [ string_lit | char_lit | byte_string_lit | byte_lit | num_lit ] lit_suffix ?;\n ```\n \n+The optional suffix is only used for certain numeric literals, but is\n+reserved for future extension, that is, the above gives the lexical\n+grammar, but a Rust parser will reject everything but the 12 special\n+cases mentioned in [Number literals](#number-literals) below.\n+\n #### Character and string literals\n \n ```{.ebnf .gram}\n@@ -371,27 +377,20 @@ b\"\\\\x52\"; br\"\\x52\";                  // \\x52\n #### Number literals\n \n ```{.ebnf .gram}\n-num_lit : nonzero_dec [ dec_digit | '_' ] * num_suffix ?\n-        | '0' [       [ dec_digit | '_' ] * num_suffix ?\n-              | 'b'   [ '1' | '0' | '_' ] + int_suffix ?\n-              | 'o'   [ oct_digit | '_' ] + int_suffix ?\n-              | 'x'   [ hex_digit | '_' ] + int_suffix ? ] ;\n-\n-num_suffix : int_suffix | float_suffix ;\n+num_lit : nonzero_dec [ dec_digit | '_' ] * float_suffix ?\n+        | '0' [       [ dec_digit | '_' ] * float_suffix ?\n+              | 'b'   [ '1' | '0' | '_' ] +\n+              | 'o'   [ oct_digit | '_' ] +\n+              | 'x'   [ hex_digit | '_' ] +  ] ;\n \n-int_suffix : 'u' int_suffix_size ?\n-           | 'i' int_suffix_size ? ;\n-int_suffix_size : [ '8' | \"16\" | \"32\" | \"64\" ] ;\n+float_suffix : [ exponent | '.' dec_lit exponent ? ] ? ;\n \n-float_suffix : [ exponent | '.' dec_lit exponent ? ] ? float_suffix_ty ? ;\n-float_suffix_ty : 'f' [ \"32\" | \"64\" ] ;\n exponent : ['E' | 'e'] ['-' | '+' ] ? dec_lit ;\n dec_lit : [ dec_digit | '_' ] + ;\n ```\n \n A _number literal_ is either an _integer literal_ or a _floating-point\n-literal_. The grammar for recognizing the two kinds of literals is mixed, as\n-they are differentiated by suffixes.\n+literal_. The grammar for recognizing the two kinds of literals is mixed.\n \n ##### Integer literals\n \n@@ -406,9 +405,9 @@ An _integer literal_ has one of four forms:\n * A _binary literal_ starts with the character sequence `U+0030` `U+0062`\n   (`0b`) and continues as any mixture of binary digits and underscores.\n \n-An integer literal may be followed (immediately, without any spaces) by an\n-_integer suffix_, which changes the type of the literal. There are two kinds of\n-integer literal suffix:\n+Like any literal, an integer literal may be followed (immediately,\n+without any spaces) by an _integer suffix_, which forcibly sets the\n+type of the literal. There are 10 valid values for an integer suffix:\n \n * The `i` and `u` suffixes give the literal type `int` or `uint`,\n   respectively.\n@@ -443,11 +442,9 @@ A _floating-point literal_ has one of two forms:\n * A single _decimal literal_ followed by an _exponent_.\n \n By default, a floating-point literal has a generic type, and, like integer\n-literals, the type must be uniquely determined from the context. A\n-floating-point literal may be followed (immediately, without any spaces) by a\n-_floating-point suffix_, which changes the type of the literal. There are two\n-floating-point suffixes: `f32`, and `f64` (the 32-bit and 64-bit floating point\n-types).\n+literals, the type must be uniquely determined from the context. There are two valid\n+_floating-point suffixes_, `f32` and `f64` (the 32-bit and 64-bit floating point\n+types), which explicitly determine the type of the literal.\n \n Examples of floating-point literals of various forms:\n "}]}