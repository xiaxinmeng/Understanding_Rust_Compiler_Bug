{"sha": "6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNzNhMTQyMzRjZjFjMWU3YmY3YTE1OTdmMWRiNGE1MThlMWM2YmI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-12T12:35:44Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-12T12:35:44Z"}, "message": "Remove fn special casing in const printing", "tree": {"sha": "f24a2ac2e9f2c927ffb29415e0690f3dcce6d836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f24a2ac2e9f2c927ffb29415e0690f3dcce6d836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb", "html_url": "https://github.com/rust-lang/rust/commit/6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b12117c5b82942769dc4daf4887a31f96c8183", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b12117c5b82942769dc4daf4887a31f96c8183", "html_url": "https://github.com/rust-lang/rust/commit/d0b12117c5b82942769dc4daf4887a31f96c8183"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "fdd1533e1302f05b29abf157963f4a689468da26", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb", "patch": "@@ -858,16 +858,23 @@ pub trait PrettyPrinter<'tcx>:\n \n         macro_rules! print_underscore {\n             () => {{\n-                p!(write(\"_\"));\n                 if print_ty {\n-                    p!(write(\": \"), print(ct.ty));\n+                    self = self.typed_value(\n+                        |mut this| {\n+                            write!(this, \"_\")?;\n+                            Ok(this)\n+                        },\n+                        |this| this.print_type(ct.ty),\n+                        \": \",\n+                    )?;\n+                } else {\n+                    write!(self, \"_\")?;\n                 }\n             }};\n         }\n \n-        match (ct.val, &ct.ty.kind) {\n-            (_, ty::FnDef(did, substs)) => p!(print_value_path(*did, substs)),\n-            (ty::ConstKind::Unevaluated(did, substs, promoted), _) => {\n+        match ct.val {\n+            ty::ConstKind::Unevaluated(did, substs, promoted) => {\n                 if let Some(promoted) = promoted {\n                     p!(print_value_path(did, substs));\n                     p!(write(\"::{:?}\", promoted));\n@@ -892,17 +899,25 @@ pub trait PrettyPrinter<'tcx>:\n                     }\n                 }\n             }\n-            (ty::ConstKind::Infer(..), _) => print_underscore!(),\n-            (ty::ConstKind::Param(ParamConst { name, .. }), _) => p!(write(\"{}\", name)),\n-            (ty::ConstKind::Value(value), _) => {\n+            ty::ConstKind::Infer(..) => print_underscore!(),\n+            ty::ConstKind::Param(ParamConst { name, .. }) => p!(write(\"{}\", name)),\n+            ty::ConstKind::Value(value) => {\n                 return self.pretty_print_const_value(value, ct.ty, print_ty);\n             }\n \n-            _ => {\n+            ty::ConstKind::Bound(..) | ty::ConstKind::Placeholder(_) => {\n                 // fallback\n-                p!(write(\"{:?}\", ct.val));\n                 if print_ty {\n-                    p!(write(\": \"), print(ct.ty));\n+                    self = self.typed_value(\n+                        |mut this| {\n+                            write!(this, \"{:?}\", ct.val)?;\n+                            Ok(this)\n+                        },\n+                        |this| this.print_type(ct.ty),\n+                        \": \",\n+                    )?;\n+                } else {\n+                    p!(write(\"{:?}\", ct.val));\n                 }\n             }\n         };"}, {"sha": "c1d7022d56b5f848d92e718162cb9fd4808ac301", "filename": "src/test/ui/const-generics/cannot-infer-const-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr?ref=6e73a14234cf1c1e7bf7a1597f1db4a518e1c6bb", "patch": "@@ -10,7 +10,7 @@ error[E0282]: type annotations needed\n   --> $DIR/cannot-infer-const-args.rs:9:5\n    |\n LL |     foo();\n-   |     ^^^ cannot infer type for fn item `fn() -> usize {foo::<_: usize>}`\n+   |     ^^^ cannot infer type for fn item `fn() -> usize {foo::<{_: usize}>}`\n \n error: aborting due to previous error\n "}]}