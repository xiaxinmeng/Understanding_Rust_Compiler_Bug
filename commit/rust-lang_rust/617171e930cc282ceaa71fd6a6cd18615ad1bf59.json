{"sha": "617171e930cc282ceaa71fd6a6cd18615ad1bf59", "node_id": "C_kwDOAAsO6NoAKDYxNzE3MWU5MzBjYzI4MmNlYWE3MWZkNmE2Y2QxODYxNWFkMWJmNTk", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-13T17:33:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-29T17:07:32Z"}, "message": "Remove cg_clif_build_sysroot", "tree": {"sha": "29a6b731084a2a4aad86ec53b4374470cb87a802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a6b731084a2a4aad86ec53b4374470cb87a802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/617171e930cc282ceaa71fd6a6cd18615ad1bf59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/617171e930cc282ceaa71fd6a6cd18615ad1bf59", "html_url": "https://github.com/rust-lang/rust/commit/617171e930cc282ceaa71fd6a6cd18615ad1bf59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/617171e930cc282ceaa71fd6a6cd18615ad1bf59/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "377f44d38c0ee788860df1f8edf02d7eefbe0160", "url": "https://api.github.com/repos/rust-lang/rust/commits/377f44d38c0ee788860df1f8edf02d7eefbe0160", "html_url": "https://github.com/rust-lang/rust/commit/377f44d38c0ee788860df1f8edf02d7eefbe0160"}], "stats": {"total": 149, "additions": 31, "deletions": 118}, "files": [{"sha": "ac27e77caa7a4e014d6aee4bb964cd58e23b35a3", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/617171e930cc282ceaa71fd6a6cd18615ad1bf59/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617171e930cc282ceaa71fd6a6cd18615ad1bf59/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=617171e930cc282ceaa71fd6a6cd18615ad1bf59", "patch": "@@ -1,4 +1,3 @@\n-use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n@@ -22,25 +21,21 @@ pub(crate) fn build_sysroot(\n     fs::create_dir_all(target_dir.join(\"lib\")).unwrap();\n \n     // Copy the backend\n-    for file in [\"cg_clif\", \"cg_clif_build_sysroot\"] {\n-        try_hard_link(\n-            cg_clif_build_dir.join(get_file_name(file, \"bin\")),\n-            target_dir.join(\"bin\").join(get_file_name(file, \"bin\")),\n-        );\n-    }\n-\n     let cg_clif_dylib = get_file_name(\"rustc_codegen_cranelift\", \"dylib\");\n+    let cg_clif_dylib_path = target_dir\n+        .join(if cfg!(windows) {\n+            // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n+            // binaries.\n+            \"bin\"\n+        } else {\n+            \"lib\"\n+        })\n+        .join(&cg_clif_dylib);\n+    try_hard_link(cg_clif_build_dir.join(cg_clif_dylib), &cg_clif_dylib_path);\n+\n     try_hard_link(\n-        cg_clif_build_dir.join(&cg_clif_dylib),\n-        target_dir\n-            .join(if cfg!(windows) {\n-                // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n-                // binaries.\n-                \"bin\"\n-            } else {\n-                \"lib\"\n-            })\n-            .join(cg_clif_dylib),\n+        cg_clif_build_dir.join(get_file_name(\"cg_clif\", \"bin\")),\n+        target_dir.join(\"bin\").join(get_file_name(\"cg_clif\", \"bin\")),\n     );\n \n     // Build and copy cargo wrapper\n@@ -117,7 +112,13 @@ pub(crate) fn build_sysroot(\n             }\n         }\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(channel, target_dir, host_triple, None);\n+            build_clif_sysroot_for_triple(\n+                channel,\n+                target_dir,\n+                host_triple,\n+                &cg_clif_dylib_path,\n+                None,\n+            );\n \n             if host_triple != target_triple {\n                 // When cross-compiling it is often necessary to manually pick the right linker\n@@ -126,7 +127,13 @@ pub(crate) fn build_sysroot(\n                 } else {\n                     None\n                 };\n-                build_clif_sysroot_for_triple(channel, target_dir, target_triple, linker);\n+                build_clif_sysroot_for_triple(\n+                    channel,\n+                    target_dir,\n+                    target_triple,\n+                    &cg_clif_dylib_path,\n+                    linker,\n+                );\n             }\n \n             // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n@@ -145,6 +152,7 @@ fn build_clif_sysroot_for_triple(\n     channel: &str,\n     target_dir: &Path,\n     triple: &str,\n+    cg_clif_dylib_path: &Path,\n     linker: Option<&str>,\n ) {\n     match fs::read_to_string(Path::new(\"build_sysroot\").join(\"rustc_version\")) {\n@@ -178,7 +186,8 @@ fn build_clif_sysroot_for_triple(\n     // Build sysroot\n     let mut build_cmd = Command::new(\"cargo\");\n     build_cmd.arg(\"build\").arg(\"--target\").arg(triple).current_dir(\"build_sysroot\");\n-    let mut rustflags = \"--clif -Zforce-unstable-if-unmarked\".to_string();\n+    let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n+    rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n     if channel == \"release\" {\n         build_cmd.arg(\"--release\");\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n@@ -188,10 +197,6 @@ fn build_clif_sysroot_for_triple(\n         write!(rustflags, \" -Clinker={}\", linker).unwrap();\n     }\n     build_cmd.env(\"RUSTFLAGS\", rustflags);\n-    build_cmd.env(\n-        \"RUSTC\",\n-        env::current_dir().unwrap().join(target_dir).join(\"bin\").join(\"cg_clif_build_sysroot\"),\n-    );\n     build_cmd.env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n     spawn_and_wait(build_cmd);\n "}, {"sha": "b897b7fbacfcdf54426583790ed5116d2450ddd6", "filename": "build_system/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/617171e930cc282ceaa71fd6a6cd18615ad1bf59/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617171e930cc282ceaa71fd6a6cd18615ad1bf59/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=617171e930cc282ceaa71fd6a6cd18615ad1bf59", "patch": "@@ -86,6 +86,7 @@ pub fn main() {\n             arg => arg_error!(\"Unexpected argument {}\", arg),\n         }\n     }\n+    target_dir = std::env::current_dir().unwrap().join(target_dir);\n \n     let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n         host_triple"}, {"sha": "bde4d71b9a33c4f385b9640410e68b0bff51d5e5", "filename": "src/bin/cg_clif_build_sysroot.rs", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/377f44d38c0ee788860df1f8edf02d7eefbe0160/src%2Fbin%2Fcg_clif_build_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/377f44d38c0ee788860df1f8edf02d7eefbe0160/src%2Fbin%2Fcg_clif_build_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif_build_sysroot.rs?ref=377f44d38c0ee788860df1f8edf02d7eefbe0160", "patch": "@@ -1,93 +0,0 @@\n-//! The only difference between this and cg_clif.rs is that this binary defaults to using cg_llvm\n-//! instead of cg_clif and requires `--clif` to use cg_clif and that this binary doesn't have JIT\n-//! support.\n-//! This is necessary as with Cargo `RUSTC` applies to both target crates and host crates. The host\n-//! crates must be built with cg_llvm as we are currently building a sysroot for cg_clif.\n-//! `RUSTFLAGS` however is only applied to target crates, so `--clif` would only be passed to the\n-//! target crates.\n-\n-#![feature(rustc_private)]\n-#![warn(rust_2018_idioms)]\n-#![warn(unused_lifetimes)]\n-#![warn(unreachable_pub)]\n-\n-extern crate rustc_driver;\n-extern crate rustc_interface;\n-extern crate rustc_session;\n-extern crate rustc_target;\n-\n-use std::path::PathBuf;\n-\n-use rustc_interface::interface;\n-use rustc_session::config::ErrorOutputType;\n-use rustc_session::early_error;\n-use rustc_target::spec::PanicStrategy;\n-\n-fn find_sysroot() -> String {\n-    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    match (home, toolchain) {\n-        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ => option_env!(\"RUST_SYSROOT\")\n-            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n-            .to_owned(),\n-    }\n-}\n-\n-pub struct CraneliftPassesCallbacks {\n-    use_clif: bool,\n-}\n-\n-impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n-    fn config(&mut self, config: &mut interface::Config) {\n-        if !self.use_clif {\n-            config.opts.maybe_sysroot = Some(PathBuf::from(find_sysroot()));\n-            return;\n-        }\n-\n-        config.opts.cg.panic = Some(PanicStrategy::Abort);\n-        config.opts.debugging_opts.panic_abort_tests = true;\n-        config.opts.maybe_sysroot =\n-            Some(std::env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_owned());\n-    }\n-}\n-\n-fn main() {\n-    rustc_driver::init_rustc_env_logger();\n-    rustc_driver::install_ice_hook();\n-    let exit_code = rustc_driver::catch_with_exit_code(|| {\n-        let mut use_clif = false;\n-\n-        let args = std::env::args_os()\n-            .enumerate()\n-            .map(|(i, arg)| {\n-                arg.into_string().unwrap_or_else(|arg| {\n-                    early_error(\n-                        ErrorOutputType::default(),\n-                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n-                    )\n-                })\n-            })\n-            .filter(|arg| {\n-                if arg == \"--clif\" {\n-                    use_clif = true;\n-                    false\n-                } else {\n-                    true\n-                }\n-            })\n-            .collect::<Vec<_>>();\n-\n-        let mut callbacks = CraneliftPassesCallbacks { use_clif };\n-\n-        let mut run_compiler = rustc_driver::RunCompiler::new(&args, &mut callbacks);\n-        if use_clif {\n-            run_compiler.set_make_codegen_backend(Some(Box::new(move |_| {\n-                Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend { config: None })\n-            })));\n-        }\n-        run_compiler.run()\n-    });\n-    std::process::exit(exit_code)\n-}"}]}