{"sha": "88c6109897417e7ab815ea1711f49545bff94601", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YzYxMDk4OTc0MTdlN2FiODE1ZWExNzExZjQ5NTQ1YmZmOTQ2MDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-18T16:06:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-18T16:06:52Z"}, "message": "Move PathKindUp", "tree": {"sha": "95155272d892e13a08666bbab3e67ec27d95c1e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95155272d892e13a08666bbab3e67ec27d95c1e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c6109897417e7ab815ea1711f49545bff94601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c6109897417e7ab815ea1711f49545bff94601", "html_url": "https://github.com/rust-lang/rust/commit/88c6109897417e7ab815ea1711f49545bff94601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c6109897417e7ab815ea1711f49545bff94601/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d043689735edc12388e22f49b2319362f3b003fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d043689735edc12388e22f49b2319362f3b003fa", "html_url": "https://github.com/rust-lang/rust/commit/d043689735edc12388e22f49b2319362f3b003fa"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "e38d924faa9260878a5fa67a5f7bbd05558905f3", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/88c6109897417e7ab815ea1711f49545bff94601/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c6109897417e7ab815ea1711f49545bff94601/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=88c6109897417e7ab815ea1711f49545bff94601", "patch": "@@ -18,6 +18,20 @@ pub struct ModPath {\n     pub segments: Vec<Name>,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum PathKind {\n+    Plain,\n+    /// `self::` is `Super(0)`\n+    Super(u8),\n+    Crate,\n+    /// Absolute path (::foo)\n+    Abs,\n+    /// Type based path like `<T>::foo`\n+    Type(Box<TypeRef>),\n+    /// `$crate` from macro expansion\n+    DollarCrate(CrateId),\n+}\n+\n impl ModPath {\n     pub fn from_src(path: ast::Path, hygiene: &Hygiene) -> Option<ModPath> {\n         lower::lower_path(path, hygiene).map(|it| it.mod_path)\n@@ -97,20 +111,6 @@ pub enum GenericArg {\n     // or lifetime...\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum PathKind {\n-    Plain,\n-    /// `self::` is `Super(0)`\n-    Super(u8),\n-    Crate,\n-    /// Absolute path (::foo)\n-    Abs,\n-    /// Type based path like `<T>::foo`\n-    Type(Box<TypeRef>),\n-    /// `$crate` from macro expansion\n-    DollarCrate(CrateId),\n-}\n-\n impl Path {\n     /// Converts an `ast::Path` to `Path`. Works with use trees.\n     /// DEPRECATED: It does not handle `$crate` from macro call."}]}