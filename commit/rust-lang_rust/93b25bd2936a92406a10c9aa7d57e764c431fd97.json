{"sha": "93b25bd2936a92406a10c9aa7d57e764c431fd97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYjI1YmQyOTM2YTkyNDA2YTEwYzlhYTdkNTdlNzY0YzQzMWZkOTc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-01T19:50:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-01T19:59:48Z"}, "message": "Make trait_map an Option.", "tree": {"sha": "25414768ee93e4c903509e56cf3955603480d00c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25414768ee93e4c903509e56cf3955603480d00c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93b25bd2936a92406a10c9aa7d57e764c431fd97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93b25bd2936a92406a10c9aa7d57e764c431fd97", "html_url": "https://github.com/rust-lang/rust/commit/93b25bd2936a92406a10c9aa7d57e764c431fd97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93b25bd2936a92406a10c9aa7d57e764c431fd97/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0839cd5e9ae41acf3694c01fd2a831c9019206ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/0839cd5e9ae41acf3694c01fd2a831c9019206ea", "html_url": "https://github.com/rust-lang/rust/commit/0839cd5e9ae41acf3694c01fd2a831c9019206ea"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "408d9b239216541f20f35e6543fca12b089733e0", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b25bd2936a92406a10c9aa7d57e764c431fd97/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b25bd2936a92406a10c9aa7d57e764c431fd97/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=93b25bd2936a92406a10c9aa7d57e764c431fd97", "patch": "@@ -1959,7 +1959,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 if ns == ValueNS {\n                     let item_name = path.last().unwrap().ident;\n                     let traits = self.traits_in_scope(item_name, ns);\n-                    self.r.trait_map.insert(id, traits);\n+                    self.r.trait_map.as_mut().unwrap().insert(id, traits);\n                 }\n \n                 if PrimTy::from_name(path[0].ident.name).is_some() {\n@@ -2435,12 +2435,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // the field name so that we can do some nice error reporting\n                 // later on in typeck.\n                 let traits = self.traits_in_scope(ident, ValueNS);\n-                self.r.trait_map.insert(expr.id, traits);\n+                self.r.trait_map.as_mut().unwrap().insert(expr.id, traits);\n             }\n             ExprKind::MethodCall(ref segment, ..) => {\n                 debug!(\"(recording candidate traits for expr) recording traits for {}\", expr.id);\n                 let traits = self.traits_in_scope(segment.ident, ValueNS);\n-                self.r.trait_map.insert(expr.id, traits);\n+                self.r.trait_map.as_mut().unwrap().insert(expr.id, traits);\n             }\n             _ => {\n                 // Nothing to do."}, {"sha": "86431b44fd680d0d1d18970aeb277fcbc9c3fff5", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93b25bd2936a92406a10c9aa7d57e764c431fd97/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b25bd2936a92406a10c9aa7d57e764c431fd97/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=93b25bd2936a92406a10c9aa7d57e764c431fd97", "patch": "@@ -909,9 +909,7 @@ pub struct Resolver<'a> {\n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     export_map: ExportMap<LocalDefId>,\n-    trait_map: NodeMap<Vec<TraitCandidate>>,\n-    #[cfg(debug_assertions)]\n-    took_trait_map: bool,\n+    trait_map: Option<NodeMap<Vec<TraitCandidate>>>,\n \n     /// A map from nodes to anonymous modules.\n     /// Anonymous modules are pseudo-modules that are implicitly created around items\n@@ -1141,12 +1139,7 @@ impl ResolverAstLowering for Resolver<'_> {\n     }\n \n     fn take_trait_map(&mut self) -> NodeMap<Vec<TraitCandidate>> {\n-        #[cfg(debug_assertions)]\n-        {\n-            debug_assert!(!self.took_trait_map);\n-            self.took_trait_map = true;\n-        }\n-        std::mem::take(&mut self.trait_map)\n+        std::mem::replace(&mut self.trait_map, None).unwrap()\n     }\n \n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {\n@@ -1293,9 +1286,7 @@ impl<'a> Resolver<'a> {\n             label_res_map: Default::default(),\n             extern_crate_map: Default::default(),\n             export_map: FxHashMap::default(),\n-            trait_map: Default::default(),\n-            #[cfg(debug_assertions)]\n-            took_trait_map: false,\n+            trait_map: Some(NodeMap::default()),\n             underscore_disambiguator: 0,\n             empty_module,\n             module_map,"}]}