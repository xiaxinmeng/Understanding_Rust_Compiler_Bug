{"sha": "9d9ccec3fc416965dabd1851369a10315754a922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOWNjZWMzZmM0MTY5NjVkYWJkMTg1MTM2OWExMDMxNTc1NGE5MjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-01T08:04:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T17:24:17Z"}, "message": "Inline two more methods", "tree": {"sha": "f594ed154bd8b4da0606bcf6fa7b3c90da137573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f594ed154bd8b4da0606bcf6fa7b3c90da137573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d9ccec3fc416965dabd1851369a10315754a922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9ccec3fc416965dabd1851369a10315754a922", "html_url": "https://github.com/rust-lang/rust/commit/9d9ccec3fc416965dabd1851369a10315754a922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d9ccec3fc416965dabd1851369a10315754a922/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d376f032e65cc02e9a082ab1e919f3798af4b9dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d376f032e65cc02e9a082ab1e919f3798af4b9dd", "html_url": "https://github.com/rust-lang/rust/commit/d376f032e65cc02e9a082ab1e919f3798af4b9dd"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "0347b2ccda9af64cf92dd6cf0c92d11f07bcaba6", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9d9ccec3fc416965dabd1851369a10315754a922/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9ccec3fc416965dabd1851369a10315754a922/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=9d9ccec3fc416965dabd1851369a10315754a922", "patch": "@@ -102,15 +102,15 @@ pub enum Action {\n }\n \n #[derive(PartialEq)]\n-pub struct Marker<T>(PhantomData<T>);\n+struct Marker<T>(PhantomData<T>);\n \n impl<T> Marker<T> {\n-    pub unsafe fn new() -> Self {\n+    unsafe fn new() -> Self {\n         Marker(PhantomData)\n     }\n }\n \n-pub enum YieldType<I, A> {\n+enum YieldType<I, A> {\n     Initial(I),\n     Accessor(Marker<A>),\n }\n@@ -174,16 +174,15 @@ impl BoxedResolver {\n         r.unwrap()\n     }\n \n-    pub fn complete(mut self) -> ResolverOutputs {\n-        // Tell the generator we want it to complete, consuming it and yielding a result\n-        let result = self.generator.as_mut().resume(Action::Complete);\n-        if let GeneratorState::Complete(r) = result { r } else { panic!() }\n-    }\n-\n-    fn initial_yield(\n-        value: Result<ast::Crate>,\n-    ) -> YieldType<Result<ast::Crate>, fn(&mut Resolver<'_>)> {\n-        YieldType::Initial(value)\n+    pub fn to_resolver_outputs(resolver: Rc<RefCell<BoxedResolver>>) -> ResolverOutputs {\n+        match Rc::try_unwrap(resolver) {\n+            Ok(resolver) => {\n+                // Tell the generator we want it to complete, consuming it and yielding a result\n+                let result = resolver.into_inner().generator.as_mut().resume(Action::Complete);\n+                if let GeneratorState::Complete(r) = result { r } else { panic!() }\n+            }\n+            Err(resolver) => resolver.borrow_mut().access(|resolver| resolver.clone_outputs()),\n+        }\n     }\n }\n \n@@ -221,11 +220,11 @@ pub fn configure_and_expand(\n         );\n         let mut resolver = match res {\n             Err(v) => {\n-                yield BoxedResolver::initial_yield(Err(v));\n+                yield YieldType::Initial(Err(v));\n                 panic!()\n             }\n             Ok((krate, resolver)) => {\n-                action = yield BoxedResolver::initial_yield(Ok(krate));\n+                action = yield YieldType::Initial(Ok(krate));\n                 resolver\n             }\n         };\n@@ -253,15 +252,6 @@ pub fn configure_and_expand(\n     result.map(|k| (k, resolver))\n }\n \n-impl BoxedResolver {\n-    pub fn to_resolver_outputs(resolver: Rc<RefCell<BoxedResolver>>) -> ResolverOutputs {\n-        match Rc::try_unwrap(resolver) {\n-            Ok(resolver) => resolver.into_inner().complete(),\n-            Err(resolver) => resolver.borrow_mut().access(|resolver| resolver.clone_outputs()),\n-        }\n-    }\n-}\n-\n pub fn register_plugins<'a>(\n     sess: &'a Session,\n     metadata_loader: &'a dyn MetadataLoader,"}]}