{"sha": "6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNWE5MWY3MGEzZjBiNDk2NmRmZDVlMDZkYmQ2OWI4N2YzNjNhZmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-01-31T12:12:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-01-31T12:12:25Z"}, "message": "rustup", "tree": {"sha": "825a23f890a7c0c1abbbf79afe7accb093049009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/825a23f890a7c0c1abbbf79afe7accb093049009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "html_url": "https://github.com/rust-lang/rust/commit/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcb87a70f88d5c22d71f4a714178d93ce0c49b02", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb87a70f88d5c22d71f4a714178d93ce0c49b02", "html_url": "https://github.com/rust-lang/rust/commit/bcb87a70f88d5c22d71f4a714178d93ce0c49b02"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "e9314ffced05675b5a2faba14584a7e136aabd4f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "patch": "@@ -1 +1 @@\n-0e190206e2ff0c13d64701d9b4145bf89a2d0cab\n+9b3242982202707be2485b1e4cf5f3b34466a38d"}, {"sha": "5de41387117161b89e0ff015418012f68d5d7bc6", "filename": "tests/compile-fail/dangling_pointers/dangling_pointer_addr_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs?ref=6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "patch": "@@ -1,13 +1,12 @@\n // Make sure we find these even with many checks disabled.\n // compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n-#![feature(raw_ref_macros)]\n use std::ptr;\n \n fn main() {\n     let p = {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let x = unsafe { ptr::raw_const!(*p) }; //~ ERROR dereferenced after this allocation got freed\n+    let x = unsafe { ptr::addr_of!(*p) }; //~ ERROR dereferenced after this allocation got freed\n     panic!(\"this should never print: {:?}\", x);\n }"}, {"sha": "f3466d5e7180c327714c85ffb801e1a64b9b9db8", "filename": "tests/compile-fail/extern_static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Fcompile-fail%2Fextern_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Fcompile-fail%2Fextern_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fextern_static.rs?ref=6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "patch": "@@ -1,10 +1,9 @@\n-#![feature(raw_ref_op)]\n //! Even referencing an unknown `extern static` already triggers an error.\n \n extern \"C\" {\n     static mut FOO: i32;\n }\n \n fn main() {\n-    let _val = unsafe { &raw const FOO }; //~ ERROR is not supported by Miri\n+    let _val = unsafe { std::ptr::addr_of!(FOO) }; //~ ERROR is not supported by Miri\n }"}, {"sha": "e33f3c8598f332b1f0f3eb046c02dafeb897b34b", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "patch": "@@ -1,6 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n-#![feature(raw_ref_macros)]\n use std::ptr;\n \n fn main() {\n@@ -9,6 +8,6 @@ fn main() {\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n         // The deref is UB even if we just put the result into a raw pointer.\n-        let _x = unsafe { ptr::raw_const!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+        let _x = unsafe { ptr::addr_of!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n     }\n }"}, {"sha": "df13787aad69820c43666b14328efb0dcc86b5db", "filename": "tests/run-pass/issue-73223.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Frun-pass%2Fissue-73223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Frun-pass%2Fissue-73223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-73223.rs?ref=6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "patch": "@@ -4,6 +4,7 @@ fn main() {\n     assert_eq!(state.rest(path), \"some/more\");\n }\n \n+#[allow(unused)]\n struct State {\n     prev: Option<usize>,\n     next: Option<usize>,"}, {"sha": "ba2f9b61b1f3051b21b0dd7dbac11687e0391f06", "filename": "tests/run-pass/many_shr_bor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Frun-pass%2Fmany_shr_bor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Frun-pass%2Fmany_shr_bor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmany_shr_bor.rs?ref=6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "patch": "@@ -1,6 +1,7 @@\n // Make sure validation can handle many overlapping shared borrows for different parts of a data structure\n use std::cell::RefCell;\n \n+#[allow(unused)]\n struct Test {\n     a: u32,\n     b: u32,"}, {"sha": "dd95d660d75ec4f83fd6b26968311496a734bec5", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unsize, coerce_unsized, raw_ref_op, raw_ref_macros)]\n+#![feature(unsize, coerce_unsized)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::Hash;\n@@ -45,10 +45,8 @@ fn test_basic() {\n     assert_eq!({x.a}, 42);\n     assert_eq!({x.b}, 99);\n     // but we *can* take a raw pointer!\n-    assert_eq!(unsafe { (&raw const x.a).read_unaligned() }, 42);\n-    assert_eq!(unsafe { ptr::raw_const!(x.a).read_unaligned() }, 42);\n-    assert_eq!(unsafe { (&raw const x.b).read_unaligned() }, 99);\n-    assert_eq!(unsafe { ptr::raw_const!(x.b).read_unaligned() }, 99);\n+    assert_eq!(unsafe { ptr::addr_of!(x.a).read_unaligned() }, 42);\n+    assert_eq!(unsafe { ptr::addr_of!(x.b).read_unaligned() }, 99);\n \n     x.b = 77;\n     assert_eq!({x.b}, 77);"}, {"sha": "f76d4e64c6c9a22cbddb8349a5123dc8863bc08b", "filename": "tests/run-pass/stacked-borrows/stacked-borrows.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs?ref=6f5a91f70a3f0b4966dfd5e06dbd69b87f363afd", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -Zmiri-track-raw-pointers\n-#![feature(raw_ref_macros)]\n use std::ptr;\n     \n // Test various stacked-borrows-related things.\n@@ -169,8 +168,8 @@ fn raw_ref_to_part() {\n     }\n \n     let it = Box::new(Whole { part: Part { _lame: 0 }, extra: 42 });\n-    let whole = ptr::raw_mut!(*Box::leak(it));\n-    let part = unsafe { ptr::raw_mut!((*whole).part) };\n+    let whole = ptr::addr_of_mut!(*Box::leak(it));\n+    let part = unsafe { ptr::addr_of_mut!((*whole).part) };\n     let typed = unsafe { &mut *(part as *mut Whole) };\n     assert!(typed.extra == 42);\n     drop(unsafe { Box::from_raw(whole) });"}]}