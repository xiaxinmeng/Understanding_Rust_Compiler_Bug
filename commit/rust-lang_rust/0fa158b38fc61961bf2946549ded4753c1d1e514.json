{"sha": "0fa158b38fc61961bf2946549ded4753c1d1e514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYTE1OGIzOGZjNjE5NjFiZjI5NDY1NDlkZWQ0NzUzYzFkMWU1MTQ=", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2021-03-18T18:16:21Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2021-03-18T18:16:21Z"}, "message": "Add simd_neg platform intrinsic", "tree": {"sha": "bd869ec145a238b9a114ee1f3c39beed7cda8a0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd869ec145a238b9a114ee1f3c39beed7cda8a0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fa158b38fc61961bf2946549ded4753c1d1e514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa158b38fc61961bf2946549ded4753c1d1e514", "html_url": "https://github.com/rust-lang/rust/commit/0fa158b38fc61961bf2946549ded4753c1d1e514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fa158b38fc61961bf2946549ded4753c1d1e514/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "146f5745606b48afca8e7d7702e363e88caa80e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/146f5745606b48afca8e7d7702e363e88caa80e1", "html_url": "https://github.com/rust-lang/rust/commit/146f5745606b48afca8e7d7702e363e88caa80e1"}], "stats": {"total": 77, "additions": 60, "deletions": 17}, "files": [{"sha": "86df71a0dfc913c6c4396767da458c8407f4eb9d", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fa158b38fc61961bf2946549ded4753c1d1e514/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa158b38fc61961bf2946549ded4753c1d1e514/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=0fa158b38fc61961bf2946549ded4753c1d1e514", "patch": "@@ -276,5 +276,6 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         // simd_bitmask\n         // simd_select\n         // simd_rem\n+        // simd_neg\n     }\n }"}, {"sha": "29edba869f44d547cf5ade8e722c5d22c8863f0f", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0fa158b38fc61961bf2946549ded4753c1d1e514/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa158b38fc61961bf2946549ded4753c1d1e514/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=0fa158b38fc61961bf2946549ded4753c1d1e514", "patch": "@@ -1628,7 +1628,7 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n             out_elem\n         );\n     }\n-    macro_rules! arith {\n+    macro_rules! arith_bin {\n         ($($name: ident: $($($p: ident),* => $call: ident),*;)*) => {\n             $(if name == sym::$name {\n                 match in_elem.kind() {\n@@ -1644,7 +1644,7 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n             })*\n         }\n     }\n-    arith! {\n+    arith_bin! {\n         simd_add: Uint, Int => add, Float => fadd;\n         simd_sub: Uint, Int => sub, Float => fsub;\n         simd_mul: Uint, Int => mul, Float => fmul;\n@@ -1659,6 +1659,25 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         simd_fmin: Float => minnum;\n \n     }\n+    macro_rules! arith_un {\n+        ($($name: ident: $($($p: ident),* => $call: ident),*;)*) => {\n+            $(if name == sym::$name {\n+                match in_elem.kind() {\n+                    $($(ty::$p(_))|* => {\n+                        return Ok(bx.$call(args[0].immediate()))\n+                    })*\n+                    _ => {},\n+                }\n+                require!(false,\n+                         \"unsupported operation on `{}` with element `{}`\",\n+                         in_ty,\n+                         in_elem)\n+            })*\n+        }\n+    }\n+    arith_un! {\n+        simd_neg: Int => neg, Float => fneg;\n+    }\n \n     if name == sym::simd_saturating_add || name == sym::simd_saturating_sub {\n         let lhs = args[0].immediate();"}, {"sha": "cd3dabb67950b0821a94845ef45ec87d92e5fbde", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fa158b38fc61961bf2946549ded4753c1d1e514/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa158b38fc61961bf2946549ded4753c1d1e514/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0fa158b38fc61961bf2946549ded4753c1d1e514", "patch": "@@ -1081,6 +1081,7 @@ symbols! {\n         simd_lt,\n         simd_mul,\n         simd_ne,\n+        simd_neg,\n         simd_or,\n         simd_reduce_add_ordered,\n         simd_reduce_add_unordered,"}, {"sha": "990ed5abdbfcb5dc091cf05ca6da54d676728963", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fa158b38fc61961bf2946549ded4753c1d1e514/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa158b38fc61961bf2946549ded4753c1d1e514/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=0fa158b38fc61961bf2946549ded4753c1d1e514", "patch": "@@ -398,6 +398,7 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         | sym::simd_fpow\n         | sym::simd_saturating_add\n         | sym::simd_saturating_sub => (1, vec![param(0), param(0)], param(0)),\n+        sym::simd_neg => (1, vec![param(0)], param(0)),\n         sym::simd_fsqrt\n         | sym::simd_fsin\n         | sym::simd_fcos"}, {"sha": "3576eed71ab5018e4eb0a150fb95148328c304c7", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fa158b38fc61961bf2946549ded4753c1d1e514/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa158b38fc61961bf2946549ded4753c1d1e514/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.rs?ref=0fa158b38fc61961bf2946549ded4753c1d1e514", "patch": "@@ -25,6 +25,8 @@ extern \"platform-intrinsic\" {\n     fn simd_and<T>(x: T, y: T) -> T;\n     fn simd_or<T>(x: T, y: T) -> T;\n     fn simd_xor<T>(x: T, y: T) -> T;\n+\n+    fn simd_neg<T>(x: T) -> T;\n }\n \n fn main() {\n@@ -60,6 +62,9 @@ fn main() {\n         simd_xor(x, x);\n         simd_xor(y, y);\n \n+        simd_neg(x);\n+        simd_neg(z);\n+\n \n         simd_add(0, 0);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n@@ -80,6 +85,9 @@ fn main() {\n         simd_xor(0, 0);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n \n+        simd_neg(0);\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n+\n \n         simd_shl(z, z);\n //~^ ERROR unsupported operation on `f32x4` with element `f32`"}, {"sha": "99c5196334324e7e632520a52a8a7e97d53c9ca6", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic.stderr", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0fa158b38fc61961bf2946549ded4753c1d1e514/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fa158b38fc61961bf2946549ded4753c1d1e514/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.stderr?ref=0fa158b38fc61961bf2946549ded4753c1d1e514", "patch": "@@ -1,87 +1,93 @@\n error[E0511]: invalid monomorphization of `simd_add` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:64:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:69:9\n    |\n LL |         simd_add(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_sub` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:66:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:71:9\n    |\n LL |         simd_sub(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_mul` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:68:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:73:9\n    |\n LL |         simd_mul(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_div` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:70:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:75:9\n    |\n LL |         simd_div(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shl` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:72:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:77:9\n    |\n LL |         simd_shl(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shr` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:74:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:79:9\n    |\n LL |         simd_shr(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_and` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:76:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:81:9\n    |\n LL |         simd_and(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_or` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:78:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:83:9\n    |\n LL |         simd_or(0, 0);\n    |         ^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_xor` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:80:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:85:9\n    |\n LL |         simd_xor(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n+error[E0511]: invalid monomorphization of `simd_neg` intrinsic: expected SIMD input type, found non-SIMD `i32`\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:88:9\n+   |\n+LL |         simd_neg(0);\n+   |         ^^^^^^^^^^^\n+\n error[E0511]: invalid monomorphization of `simd_shl` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:84:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:92:9\n    |\n LL |         simd_shl(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shr` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:86:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:94:9\n    |\n LL |         simd_shr(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_and` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:88:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:96:9\n    |\n LL |         simd_and(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_or` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:90:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:98:9\n    |\n LL |         simd_or(z, z);\n    |         ^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_xor` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:92:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:100:9\n    |\n LL |         simd_xor(z, z);\n    |         ^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n \n For more information about this error, try `rustc --explain E0511`."}, {"sha": "c507b8d31ecb4d5d7cbaf8fc0fed0b713eaa29ce", "filename": "src/test/ui/simd/simd-intrinsic-generic-arithmetic.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fa158b38fc61961bf2946549ded4753c1d1e514/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa158b38fc61961bf2946549ded4753c1d1e514/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-arithmetic.rs?ref=0fa158b38fc61961bf2946549ded4753c1d1e514", "patch": "@@ -45,6 +45,8 @@ extern \"platform-intrinsic\" {\n     fn simd_and<T>(x: T, y: T) -> T;\n     fn simd_or<T>(x: T, y: T) -> T;\n     fn simd_xor<T>(x: T, y: T) -> T;\n+\n+    fn simd_neg<T>(x: T) -> T;\n }\n \n fn main() {\n@@ -125,5 +127,10 @@ fn main() {\n         all_eq_!(simd_xor(y1, y2), U32::<4>([3, 1, 7, 1]));\n         all_eq_!(simd_xor(y2, y1), U32::<4>([3, 1, 7, 1]));\n \n+        all_eq!(simd_neg(x1), i32x4(-1, -2, -3, -4));\n+        all_eq!(simd_neg(x2), i32x4(-2, -3, -4, -5));\n+        all_eq!(simd_neg(z1), f32x4(-1.0, -2.0, -3.0, -4.0));\n+        all_eq!(simd_neg(z2), f32x4(-2.0, -3.0, -4.0, -5.0));\n+\n     }\n }"}]}