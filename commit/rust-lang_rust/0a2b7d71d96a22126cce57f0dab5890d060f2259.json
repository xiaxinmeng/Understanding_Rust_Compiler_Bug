{"sha": "0a2b7d71d96a22126cce57f0dab5890d060f2259", "node_id": "C_kwDOAAsO6NoAKDBhMmI3ZDcxZDk2YTIyMTI2Y2NlNTdmMGRhYjU4OTBkMDYwZjIyNTk", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-18T17:22:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-18T17:22:58Z"}, "message": "Rollup merge of #90895 - RalfJung:read-discriminant-valid, r=oli-obk\n\nrequire full validity when determining the discriminant of a value\n\nThis resolves (for now) the semantic question that came up in https://github.com/rust-lang/rust/pull/89764: arguably, reading the discriminant of a value is 'using' that value, so we are in our right to demand full validity. Reading a discriminant is somewhat special in that it works for values of *arbitrary* type; all the other primitive MIR operations work on specific types (e.g. `bool` or an integer) and basically implicitly require validity as part of just \"doing their job\".\n\nThe alternative would be to just require that the discriminant itself is valid, if any -- but then what do we do for types that do not have a discriminant, which kind of validity do we check? [This code](https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/compiler/rustc_codegen_ssa/src/mir/place.rs#L206-L215) means we have to at least reject uninhabited types, but I would rather not special case that.\n\nI don't think this can be tested in CTFE (since validity is not enforced there), I will add a compile-fail test to Miri:\n```rust\n#[allow(enum_intrinsics_non_enums)]\nfn main() {\n    let i = 2u8;\n    std::mem::discriminant(unsafe { &*(&i as *const _ as *const bool) }); // UB\n}\n```\n\n(I tried running the check even on the CTFE machines, but then it runs during ConstProp and that causes all sorts of problems. We could run it for ConstEval but not ConstProp, but that simply does not seem worth the effort currently.)\n\nr? ``@oli-obk``", "tree": {"sha": "2b031acb7ac22962694a56be1741b7561301479e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b031acb7ac22962694a56be1741b7561301479e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2b7d71d96a22126cce57f0dab5890d060f2259", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlovyCRBK7hj4Ov3rIwAAwIQIABkkyLHSspN3UP6mwJoiSYcy\na47OtXgnRZlQtgg/GaGXWgQB6YtH6rT6xmyRFmm2YWFNYi5sW1C6cPP3wQRSCHwB\nFx5yQC9Vw6NeSZwu6N8/KiTNjCrIZvYRYTubATln+2e6wZ4xAFbCwwGc/DL4BF5C\niYsPCeOXB+RkH7yEy/NC3wmfiOYVhI+LGJX5gMEns4E1xiGmqy/ZHeIM8YgxqUMH\nZY9MkPnB4j9F0cOchU7hsZRxhr6fnrTfPX0t2geg9h+h6X/4jsk5RnUWy6q3WPmp\nxPGAtXJGmcsUVlKALOkT6/dFAXwXXMeQEfiU55PDZmZwQBMDVNJ4Wa/k9ahAH6c=\n=8iJv\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b031acb7ac22962694a56be1741b7561301479e\nparent 47c1bd1bcc50b25d133f8be3d49825491c1df249\nparent 498ebc46baf1d6f588f3b241f779a42edecf79be\nauthor Yuki Okushi <jtitor@2k36.org> 1637256178 +0900\ncommitter GitHub <noreply@github.com> 1637256178 +0900\n\nRollup merge of #90895 - RalfJung:read-discriminant-valid, r=oli-obk\n\nrequire full validity when determining the discriminant of a value\n\nThis resolves (for now) the semantic question that came up in https://github.com/rust-lang/rust/pull/89764: arguably, reading the discriminant of a value is 'using' that value, so we are in our right to demand full validity. Reading a discriminant is somewhat special in that it works for values of *arbitrary* type; all the other primitive MIR operations work on specific types (e.g. `bool` or an integer) and basically implicitly require validity as part of just \"doing their job\".\n\nThe alternative would be to just require that the discriminant itself is valid, if any -- but then what do we do for types that do not have a discriminant, which kind of validity do we check? [This code](https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/compiler/rustc_codegen_ssa/src/mir/place.rs#L206-L215) means we have to at least reject uninhabited types, but I would rather not special case that.\n\nI don't think this can be tested in CTFE (since validity is not enforced there), I will add a compile-fail test to Miri:\n```rust\n#[allow(enum_intrinsics_non_enums)]\nfn main() {\n    let i = 2u8;\n    std::mem::discriminant(unsafe { &*(&i as *const _ as *const bool) }); // UB\n}\n```\n\n(I tried running the check even on the CTFE machines, but then it runs during ConstProp and that causes all sorts of problems. We could run it for ConstEval but not ConstProp, but that simply does not seem worth the effort currently.)\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2b7d71d96a22126cce57f0dab5890d060f2259", "html_url": "https://github.com/rust-lang/rust/commit/0a2b7d71d96a22126cce57f0dab5890d060f2259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2b7d71d96a22126cce57f0dab5890d060f2259/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c1bd1bcc50b25d133f8be3d49825491c1df249", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c1bd1bcc50b25d133f8be3d49825491c1df249", "html_url": "https://github.com/rust-lang/rust/commit/47c1bd1bcc50b25d133f8be3d49825491c1df249"}, {"sha": "498ebc46baf1d6f588f3b241f779a42edecf79be", "url": "https://api.github.com/repos/rust-lang/rust/commits/498ebc46baf1d6f588f3b241f779a42edecf79be", "html_url": "https://github.com/rust-lang/rust/commit/498ebc46baf1d6f588f3b241f779a42edecf79be"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "5e7bbc0113271bdc248421ce01b8b271169b6971", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a2b7d71d96a22126cce57f0dab5890d060f2259/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2b7d71d96a22126cce57f0dab5890d060f2259/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=0a2b7d71d96a22126cce57f0dab5890d060f2259", "patch": "@@ -265,6 +265,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             sym::discriminant_value => {\n                 let place = self.deref_operand(&args[0])?;\n+                if M::enforce_validity(self) {\n+                    // This is 'using' the value, so make sure the validity invariant is satisfied.\n+                    // (Also see https://github.com/rust-lang/rust/pull/89764.)\n+                    self.validate_operand(&place.into())?;\n+                }\n+\n                 let discr_val = self.read_discriminant(&place.into())?.0;\n                 self.write_scalar(discr_val, dest)?;\n             }"}, {"sha": "2759a7d9d268f75d752fa79aef435b64f588389d", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a2b7d71d96a22126cce57f0dab5890d060f2259/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2b7d71d96a22126cce57f0dab5890d060f2259/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=0a2b7d71d96a22126cce57f0dab5890d060f2259", "patch": "@@ -304,6 +304,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Discriminant(place) => {\n                 let op = self.eval_place_to_op(place, None)?;\n+                if M::enforce_validity(self) {\n+                    // This is 'using' the value, so make sure the validity invariant is satisfied.\n+                    // (Also see https://github.com/rust-lang/rust/pull/89764.)\n+                    self.validate_operand(&op)?;\n+                }\n+\n                 let discr_val = self.read_discriminant(&op)?.0;\n                 self.write_scalar(discr_val, &dest)?;\n             }"}]}