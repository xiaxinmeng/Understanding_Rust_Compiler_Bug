{"sha": "097e9e528f45eea89677cf9ac3634c7cee9988aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5N2U5ZTUyOGY0NWVlYTg5Njc3Y2Y5YWMzNjM0YzdjZWU5OTg4YWE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-03-29T01:47:50Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-03-30T21:54:06Z"}, "message": "Add `can_unwind` field to `FnAbi`\n\nThis is a pure refactoring with no behavior changes.", "tree": {"sha": "42cd2a6fd57ede486926df89cb6b3ec59df62e07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42cd2a6fd57ede486926df89cb6b3ec59df62e07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/097e9e528f45eea89677cf9ac3634c7cee9988aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/097e9e528f45eea89677cf9ac3634c7cee9988aa", "html_url": "https://github.com/rust-lang/rust/commit/097e9e528f45eea89677cf9ac3634c7cee9988aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/097e9e528f45eea89677cf9ac3634c7cee9988aa/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80ec3b3b1d11ed83754885efdd07037d256dbf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80ec3b3b1d11ed83754885efdd07037d256dbf2", "html_url": "https://github.com/rust-lang/rust/commit/a80ec3b3b1d11ed83754885efdd07037d256dbf2"}], "stats": {"total": 104, "additions": 60, "deletions": 44}, "files": [{"sha": "ac2bbd4b2aea4478267c627b8aa2cfcefe69d35c", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/097e9e528f45eea89677cf9ac3634c7cee9988aa/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097e9e528f45eea89677cf9ac3634c7cee9988aa/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=097e9e528f45eea89677cf9ac3634c7cee9988aa", "patch": "@@ -13,8 +13,6 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::config::{OptLevel, Sanitizer};\n use rustc_session::Session;\n-use rustc_target::abi::call::Conv;\n-use rustc_target::spec::PanicStrategy;\n \n use crate::abi::FnAbi;\n use crate::attributes;\n@@ -315,45 +313,7 @@ pub fn from_fn_attrs(\n     }\n     sanitize(cx, codegen_fn_attrs.flags, llfn);\n \n-    unwind(\n-        llfn,\n-        if cx.tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n-            // In panic=abort mode we assume nothing can unwind anywhere, so\n-            // optimize based on this!\n-            false\n-        } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::UNWIND) {\n-            // If a specific #[unwind] attribute is present, use that.\n-            true\n-        } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n-            // Special attribute for allocator functions, which can't unwind.\n-            false\n-        } else {\n-            if fn_abi.conv == Conv::Rust {\n-                // Any Rust method (or `extern \"Rust\" fn` or `extern\n-                // \"rust-call\" fn`) is explicitly allowed to unwind\n-                // (unless it has no-unwind attribute, handled above).\n-                true\n-            } else {\n-                // Anything else is either:\n-                //\n-                //  1. A foreign item using a non-Rust ABI (like `extern \"C\" { fn foo(); }`), or\n-                //\n-                //  2. A Rust item using a non-Rust ABI (like `extern \"C\" fn foo() { ... }`).\n-                //\n-                // Foreign items (case 1) are assumed to not unwind; it is\n-                // UB otherwise. (At least for now; see also\n-                // rust-lang/rust#63909 and Rust RFC 2753.)\n-                //\n-                // Items defined in Rust with non-Rust ABIs (case 2) are also\n-                // not supposed to unwind. Whether this should be enforced\n-                // (versus stating it is UB) and *how* it would be enforced\n-                // is currently under discussion; see rust-lang/rust#58794.\n-                //\n-                // In either case, we mark item as explicitly nounwind.\n-                false\n-            }\n-        },\n-    );\n+    unwind(llfn, fn_abi.can_unwind);\n \n     // Always annotate functions with the target-cpu they are compiled for.\n     // Without this, ThinLTO won't inline Rust functions into Clang generated"}, {"sha": "17c93922b0023a7191d5d192371e0ba4832e3fe2", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/097e9e528f45eea89677cf9ac3634c7cee9988aa/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097e9e528f45eea89677cf9ac3634c7cee9988aa/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=097e9e528f45eea89677cf9ac3634c7cee9988aa", "patch": "@@ -1,4 +1,5 @@\n use crate::ich::StableHashingContext;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n@@ -15,7 +16,7 @@ use rustc_target::abi::call::{\n     ArgAbi, ArgAttribute, ArgAttributes, Conv, FnAbi, PassMode, Reg, RegKind,\n };\n pub use rustc_target::abi::*;\n-use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec};\n+use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec, PanicStrategy};\n \n use std::cmp;\n use std::fmt;\n@@ -2368,11 +2369,55 @@ where\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n         caller_location: Option<Ty<'tcx>>,\n+        codegen_fn_attr_flags: CodegenFnAttrFlags,\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self;\n     fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi);\n }\n \n+fn fn_can_unwind(\n+    panic_strategy: PanicStrategy,\n+    codegen_fn_attr_flags: CodegenFnAttrFlags,\n+    call_conv: Conv,\n+) -> bool {\n+    if panic_strategy != PanicStrategy::Unwind {\n+        // In panic=abort mode we assume nothing can unwind anywhere, so\n+        // optimize based on this!\n+        false\n+    } else if codegen_fn_attr_flags.contains(CodegenFnAttrFlags::UNWIND) {\n+        // If a specific #[unwind] attribute is present, use that.\n+        true\n+    } else if codegen_fn_attr_flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n+        // Special attribute for allocator functions, which can't unwind.\n+        false\n+    } else {\n+        if call_conv == Conv::Rust {\n+            // Any Rust method (or `extern \"Rust\" fn` or `extern\n+            // \"rust-call\" fn`) is explicitly allowed to unwind\n+            // (unless it has no-unwind attribute, handled above).\n+            true\n+        } else {\n+            // Anything else is either:\n+            //\n+            //  1. A foreign item using a non-Rust ABI (like `extern \"C\" { fn foo(); }`), or\n+            //\n+            //  2. A Rust item using a non-Rust ABI (like `extern \"C\" fn foo() { ... }`).\n+            //\n+            // Foreign items (case 1) are assumed to not unwind; it is\n+            // UB otherwise. (At least for now; see also\n+            // rust-lang/rust#63909 and Rust RFC 2753.)\n+            //\n+            // Items defined in Rust with non-Rust ABIs (case 2) are also\n+            // not supposed to unwind. Whether this should be enforced\n+            // (versus stating it is UB) and *how* it would be enforced\n+            // is currently under discussion; see rust-lang/rust#58794.\n+            //\n+            // In either case, we mark item as explicitly nounwind.\n+            false\n+        }\n+    }\n+}\n+\n impl<'tcx, C> FnAbiExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n where\n     C: LayoutOf<Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n@@ -2382,7 +2427,12 @@ where\n         + HasParamEnv<'tcx>,\n {\n     fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n-        call::FnAbi::new_internal(cx, sig, extra_args, None, |ty, _| ArgAbi::new(cx.layout_of(ty)))\n+        // Assume that fn pointers may always unwind\n+        let codegen_fn_attr_flags = CodegenFnAttrFlags::UNWIND;\n+\n+        call::FnAbi::new_internal(cx, sig, extra_args, None, codegen_fn_attr_flags, |ty, _| {\n+            ArgAbi::new(cx.layout_of(ty))\n+        })\n     }\n \n     fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n@@ -2394,7 +2444,9 @@ where\n             None\n         };\n \n-        call::FnAbi::new_internal(cx, sig, extra_args, caller_location, |ty, arg_idx| {\n+        let attrs = cx.tcx().codegen_fn_attrs(instance.def_id()).flags;\n+\n+        call::FnAbi::new_internal(cx, sig, extra_args, caller_location, attrs, |ty, arg_idx| {\n             let mut layout = cx.layout_of(ty);\n             // Don't pass the vtable, it's not an argument of the virtual fn.\n             // Instead, pass just the data pointer, but give it the type `*const/mut dyn Trait`\n@@ -2450,6 +2502,7 @@ where\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n         caller_location: Option<Ty<'tcx>>,\n+        codegen_fn_attr_flags: CodegenFnAttrFlags,\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self {\n         debug!(\"FnAbi::new_internal({:?}, {:?})\", sig, extra_args);\n@@ -2639,6 +2692,7 @@ where\n             c_variadic: sig.c_variadic,\n             fixed_count: inputs.len(),\n             conv,\n+            can_unwind: fn_can_unwind(cx.tcx().sess.panic_strategy(), codegen_fn_attr_flags, conv),\n         };\n         fn_abi.adjust_for_abi(cx, sig.abi);\n         fn_abi"}, {"sha": "72768c31e3077444eb9f74f488718d07f8f3bb43", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097e9e528f45eea89677cf9ac3634c7cee9988aa/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097e9e528f45eea89677cf9ac3634c7cee9988aa/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=097e9e528f45eea89677cf9ac3634c7cee9988aa", "patch": "@@ -546,6 +546,8 @@ pub struct FnAbi<'a, Ty> {\n     pub fixed_count: usize,\n \n     pub conv: Conv,\n+\n+    pub can_unwind: bool,\n }\n \n impl<'a, Ty> FnAbi<'a, Ty> {"}]}