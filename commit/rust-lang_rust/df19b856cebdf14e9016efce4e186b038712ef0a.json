{"sha": "df19b856cebdf14e9016efce4e186b038712ef0a", "node_id": "C_kwDOAAsO6NoAKGRmMTliODU2Y2ViZGYxNGU5MDE2ZWZjZTRlMTg2YjAzODcxMmVmMGE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-27T12:51:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-27T12:57:06Z"}, "message": "rustup", "tree": {"sha": "3ac6850b56a7bdbbbee3b713668bbe7b3fce192c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac6850b56a7bdbbbee3b713668bbe7b3fce192c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df19b856cebdf14e9016efce4e186b038712ef0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df19b856cebdf14e9016efce4e186b038712ef0a", "html_url": "https://github.com/rust-lang/rust/commit/df19b856cebdf14e9016efce4e186b038712ef0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df19b856cebdf14e9016efce4e186b038712ef0a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a2252b7b321076d8cf314fa49dc5a4c9da133b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2252b7b321076d8cf314fa49dc5a4c9da133b4", "html_url": "https://github.com/rust-lang/rust/commit/3a2252b7b321076d8cf314fa49dc5a4c9da133b4"}], "stats": {"total": 76, "additions": 22, "deletions": 54}, "files": [{"sha": "9b8d986c67114d4ba87a9e154b31aa7616c6731c", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -1 +1 @@\n-e1b28cd2f16bd5b832183d7968cae3bb9213e78d\n+4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0"}, {"sha": "87f64db26d3acebdd94fb964c49c725053939d70", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -530,12 +530,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n \n         this.validate_atomic_rmw(place, atomic)?;\n \n-        this.buffered_atomic_rmw(\n-            val.to_scalar(),\n-            place,\n-            atomic,\n-            old.to_scalar(),\n-        )?;\n+        this.buffered_atomic_rmw(val.to_scalar(), place, atomic, old.to_scalar())?;\n         Ok(old)\n     }\n \n@@ -586,12 +581,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n \n         this.validate_atomic_rmw(place, atomic)?;\n \n-        this.buffered_atomic_rmw(\n-            new_val.to_scalar(),\n-            place,\n-            atomic,\n-            old.to_scalar(),\n-        )?;\n+        this.buffered_atomic_rmw(new_val.to_scalar(), place, atomic, old.to_scalar())?;\n \n         // Return the old value.\n         Ok(old)\n@@ -633,10 +623,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n             } else {\n                 true\n             };\n-        let res = Immediate::ScalarPair(\n-            old.to_scalar(),\n-            Scalar::from_bool(cmpxchg_success).into(),\n-        );\n+        let res = Immediate::ScalarPair(old.to_scalar(), Scalar::from_bool(cmpxchg_success));\n \n         // Update ptr depending on comparison.\n         // if successful, perform a full rw-atomic validation"}, {"sha": "5a5c2c211bc99773ed0e4f91de68159c4fa93dd7", "filename": "src/concurrency/weak_memory.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fweak_memory.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -77,9 +77,7 @@ use std::{\n     collections::VecDeque,\n };\n \n-use rustc_const_eval::interpret::{\n-    alloc_range, AllocRange, InterpResult, MPlaceTy, Scalar,\n-};\n+use rustc_const_eval::interpret::{alloc_range, AllocRange, InterpResult, MPlaceTy, Scalar};\n use rustc_data_structures::fx::FxHashMap;\n \n use crate::*;\n@@ -417,11 +415,7 @@ impl StoreElement {\n     /// buffer regardless of subsequent loads by the same thread; if the earliest load of another\n     /// thread doesn't happen before the current one, then no subsequent load by the other thread\n     /// can happen before the current one.\n-    fn load_impl(\n-        &self,\n-        index: VectorIdx,\n-        clocks: &ThreadClockSet,\n-    ) -> Scalar<Provenance> {\n+    fn load_impl(&self, index: VectorIdx, clocks: &ThreadClockSet) -> Scalar<Provenance> {\n         let _ = self.loads.borrow_mut().try_insert(index, clocks.clock[index]);\n         self.val\n     }"}, {"sha": "844bcb40d53539a5401cb4fa787be2e8c47c10cf", "filename": "src/shims/ffi_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fffi_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fffi_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fffi_support.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -13,7 +13,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Extract the scalar value from the result of reading a scalar from the machine,\n     /// and convert it to a `CArg`.\n     fn scalar_to_carg(\n-        k: ScalarMaybeUninit<Provenance>,\n+        k: Scalar<Provenance>,\n         arg_type: Ty<'tcx>,\n         cx: &impl HasDataLayout,\n     ) -> InterpResult<'tcx, CArg> {"}, {"sha": "1698477cbde8fe083c8798528d395fa32366d3af", "filename": "src/shims/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fsimd.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -396,11 +396,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let dest_len = u32::try_from(dest_len).unwrap();\n                 let bitmask_len = u32::try_from(bitmask_len).unwrap();\n \n-                let mask: u64 = this\n-                    .read_scalar(mask)?\n-                    .to_bits(mask.layout.size)?\n-                    .try_into()\n-                    .unwrap();\n+                let mask: u64 =\n+                    this.read_scalar(mask)?.to_bits(mask.layout.size)?.try_into().unwrap();\n                 for i in 0..dest_len {\n                     let mask = mask\n                         & 1u64"}, {"sha": "6ca09f3fcad133127beefba6b8d995c85f14f8b5", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -156,8 +156,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .unwrap(); // not a ZST, so we will get a result\n         for (offset, wchar) in u16_vec.into_iter().chain(iter::once(0x0000)).enumerate() {\n             let offset = u64::try_from(offset).unwrap();\n-            alloc\n-                .write_scalar(alloc_range(size2 * offset, size2), Scalar::from_u16(wchar).into())?;\n+            alloc.write_scalar(alloc_range(size2 * offset, size2), Scalar::from_u16(wchar))?;\n         }\n         Ok((true, string_length))\n     }"}, {"sha": "73464cdacb00226106865d7616a1dd53bcf6748c", "filename": "src/shims/unix/freebsd/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -26,10 +26,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"pthread_set_name_np\" => {\n                 let [thread, name] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let res = this.pthread_setname_np(\n-                    this.read_scalar(thread)?.check_init()?,\n-                    this.read_scalar(name)?.check_init()?,\n-                )?;\n+                let res =\n+                    this.pthread_setname_np(this.read_scalar(thread)?, this.read_scalar(name)?)?;\n                 this.write_scalar(res, dest)?;\n             }\n "}, {"sha": "afa0591a3c97fa4da51218a27b48c981b0f5745a", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -68,10 +68,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"pthread_setname_np\" => {\n                 let [thread, name] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let res = this.pthread_setname_np(\n-                    this.read_scalar(thread)?.check_init()?,\n-                    this.read_scalar(name)?.check_init()?,\n-                )?;\n+                let res =\n+                    this.pthread_setname_np(this.read_scalar(thread)?, this.read_scalar(name)?)?;\n                 this.write_scalar(res, dest)?;\n             }\n "}, {"sha": "9ad2ef47e094de7ef50d4e6f33bc39cb51e1484b", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -176,7 +176,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"pthread_setname_np\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let thread = this.pthread_self()?;\n-                this.pthread_setname_np(thread, this.read_scalar(name)?.check_init()?)?;\n+                this.pthread_setname_np(thread, this.read_scalar(name)?)?;\n             }\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work."}, {"sha": "0a4904f4bac7e4632612771251e1c31f867314d8", "filename": "src/shims/unix/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fsync.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -119,7 +119,7 @@ fn mutex_get_or_create_id<'mir, 'tcx: 'mir>(\n             .atomic_compare_exchange_scalar(\n                 &value_place,\n                 &ImmTy::from_uint(0u32, ecx.machine.layouts.u32),\n-                next_id.to_u32_scalar().into(),\n+                next_id.to_u32_scalar(),\n                 AtomicRwOrd::Relaxed,\n                 AtomicReadOrd::Relaxed,\n                 false,\n@@ -160,7 +160,7 @@ fn rwlock_get_or_create_id<'mir, 'tcx: 'mir>(\n             .atomic_compare_exchange_scalar(\n                 &value_place,\n                 &ImmTy::from_uint(0u32, ecx.machine.layouts.u32),\n-                next_id.to_u32_scalar().into(),\n+                next_id.to_u32_scalar(),\n                 AtomicRwOrd::Relaxed,\n                 AtomicReadOrd::Relaxed,\n                 false,\n@@ -243,7 +243,7 @@ fn cond_get_or_create_id<'mir, 'tcx: 'mir>(\n             .atomic_compare_exchange_scalar(\n                 &value_place,\n                 &ImmTy::from_uint(0u32, ecx.machine.layouts.u32),\n-                next_id.to_u32_scalar().into(),\n+                next_id.to_u32_scalar(),\n                 AtomicRwOrd::Relaxed,\n                 AtomicReadOrd::Relaxed,\n                 false,"}, {"sha": "5cbfecb889a23889a9f4805c4632405e57ef7b3c", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -112,7 +112,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Dlsym::SetThreadDescription => {\n                 let [handle, name] = check_arg_count(args)?;\n \n-                let handle = this.read_scalar(handle)?.check_init()?;\n+                let handle = this.read_scalar(handle)?;\n \n                 let name = this.read_wide_str(this.read_pointer(name)?)?;\n "}, {"sha": "69a6bd38d09e8f45cd5f4b3b90e53e2834d7ac21", "filename": "src/shims/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fhandle.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -158,7 +158,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn CloseHandle(&mut self, handle_op: &OpTy<'tcx, Provenance>) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n-        let handle = this.read_scalar(handle_op)?.check_init()?;\n+        let handle = this.read_scalar(handle_op)?;\n \n         match Handle::from_scalar(handle, this)? {\n             Some(Handle::Thread(thread)) =>"}, {"sha": "60645ee7d956631d476cfab1c11d04699f84b494", "filename": "src/shims/windows/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fsync.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -14,7 +14,7 @@ fn srwlock_get_or_create_id<'mir, 'tcx: 'mir>(\n             .atomic_compare_exchange_scalar(\n                 &value_place,\n                 &ImmTy::from_uint(0u32, ecx.machine.layouts.u32),\n-                next_id.to_u32_scalar().into(),\n+                next_id.to_u32_scalar(),\n                 AtomicRwOrd::Relaxed,\n                 AtomicReadOrd::Relaxed,\n                 false,"}, {"sha": "2b801ae3120336c4781932dad02084d92aeda78f", "filename": "src/shims/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df19b856cebdf14e9016efce4e186b038712ef0a/src%2Fshims%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fthread.rs?ref=df19b856cebdf14e9016efce4e186b038712ef0a", "patch": "@@ -20,14 +20,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         let security = this.read_pointer(security_op)?;\n-\n         // stacksize is ignored, but still needs to be a valid usize\n         this.read_scalar(stacksize_op)?.to_machine_usize(this)?;\n-\n         let start_routine = this.read_pointer(start_op)?;\n-\n         let func_arg = this.read_immediate(arg_op)?;\n-\n         let flags = this.read_scalar(flags_op)?.to_u32()?;\n \n         let thread = if this.ptr_is_null(this.read_pointer(thread_op)?)? {\n@@ -66,8 +62,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, u32> {\n         let this = self.eval_context_mut();\n \n-        let handle = this.read_scalar(handle_op)?.check_init()?;\n-\n+        let handle = this.read_scalar(handle_op)?;\n         let timeout = this.read_scalar(timeout_op)?.to_u32()?;\n \n         let thread = match Handle::from_scalar(handle, this)? {"}]}