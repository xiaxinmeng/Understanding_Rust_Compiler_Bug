{"sha": "95d652ebce010d3b090af81508e9cf3d7096d1e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZDY1MmViY2UwMTBkM2IwOTBhZjgxNTA4ZTljZjNkNzA5NmQxZTQ=", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-04-13T06:50:18Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-04-13T07:07:01Z"}, "message": "Consolidate search-related vars and functions.\n\nThis allows sharing across main.js and search.js without exporting too\nmany symbols into the global namespace.", "tree": {"sha": "812ffd96224b106f2bd48e727fabf9c8bbd859d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/812ffd96224b106f2bd48e727fabf9c8bbd859d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d652ebce010d3b090af81508e9cf3d7096d1e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d652ebce010d3b090af81508e9cf3d7096d1e4", "html_url": "https://github.com/rust-lang/rust/commit/95d652ebce010d3b090af81508e9cf3d7096d1e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d652ebce010d3b090af81508e9cf3d7096d1e4/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "276ee6f542ea2c144d115214abf7aa4a7b8c2445", "url": "https://api.github.com/repos/rust-lang/rust/commits/276ee6f542ea2c144d115214abf7aa4a7b8c2445", "html_url": "https://github.com/rust-lang/rust/commit/276ee6f542ea2c144d115214abf7aa4a7b8c2445"}], "stats": {"total": 342, "additions": 167, "deletions": 175}, "files": [{"sha": "cb7408502eba3f4cfa4cb73d49ef52db92ca6f98", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 128, "deletions": 138, "changes": 266, "blob_url": "https://github.com/rust-lang/rust/blob/95d652ebce010d3b090af81508e9cf3d7096d1e4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/95d652ebce010d3b090af81508e9cf3d7096d1e4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=95d652ebce010d3b090af81508e9cf3d7096d1e4", "patch": "@@ -80,10 +80,6 @@ function getSearchInput() {\n     return document.getElementsByClassName(\"search-input\")[0];\n }\n \n-function getSearchElement() {\n-    return document.getElementById(\"search\");\n-}\n-\n var THEME_PICKER_ELEMENT_ID = \"theme-picker\";\n var THEMES_ELEMENT_ID = \"theme-choices\";\n \n@@ -172,30 +168,123 @@ function hideThemeButtonState() {\n (function() {\n     \"use strict\";\n \n-    var disableShortcuts = getSettingValue(\"disable-shortcuts\") === \"true\";\n-    window.search_input = getSearchInput();\n-    var searchTimeout = null;\n-    var toggleAllDocsId = \"toggle-all-docs\";\n+    window.searchState = {\n+      loadingText: \"Loading search results...\",\n+      input: getSearchInput(),\n+      outputElement: function() {\n+        return document.getElementById(\"search\");\n+      },\n+      title: null,\n+      titleBeforeSearch: document.title,\n+      timeout: null,\n+      // On the search screen, so you remain on the last tab you opened.\n+      //\n+      // 0 for \"In Names\"\n+      // 1 for \"In Parameters\"\n+      // 2 for \"In Return Types\"\n+      currentTab: 0,\n+      mouseMovedAfterSearch: true,\n+      clearInputTimeout: function() {\n+        if (searchState.timeout !== null) {\n+            clearTimeout(searchState.timeout);\n+            searchState.timeout = null;\n+        }\n+      },\n+      showResults: function(search) {\n+        if (search === null || typeof search === 'undefined') {\n+            search = searchState.outputElement();\n+        }\n+        addClass(main, \"hidden\");\n+        removeClass(search, \"hidden\");\n+        searchState.mouseMovedAfterSearch = false;\n+        document.title = searchState.title;\n+      },\n+      hideResults: function(search) {\n+        if (search === null || typeof search === 'undefined') {\n+            search = searchState.outputElement();\n+        }\n+        addClass(search, \"hidden\");\n+        removeClass(main, \"hidden\");\n+        document.title = searchState.titleBeforeSearch;\n+        // We also remove the query parameter from the URL.\n+        if (searchState.browserSupportsHistoryApi()) {\n+            history.replaceState(\"\", window.currentCrate + \" - Rust\",\n+                getNakedUrl() + window.location.hash);\n+        }\n+      },\n+      getQueryStringParams: function() {\n+        var params = {};\n+        window.location.search.substring(1).split(\"&\").\n+            map(function(s) {\n+                var pair = s.split(\"=\");\n+                params[decodeURIComponent(pair[0])] =\n+                    typeof pair[1] === \"undefined\" ? null : decodeURIComponent(pair[1]);\n+            });\n+        return params;\n+      },\n+      putBackSearch: function(search_input) {\n+        var search = searchState.outputElement();\n+        if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n+            searchState.showResults(search);\n+            if (searchState.browserSupportsHistoryApi()) {\n+                var extra = \"?search=\" + encodeURIComponent(search_input.value);\n+                history.replaceState(search_input.value, \"\",\n+                    getNakedUrl() + extra + window.location.hash);\n+            }\n+            document.title = searchState.title;\n+        }\n+      },\n+      browserSupportsHistoryApi: function() {\n+          return window.history && typeof window.history.pushState === \"function\";\n+      },\n+      setupLoader: function() {\n+        function loadScript(url) {\n+            var script = document.createElement('script');\n+            script.src = url;\n+            document.head.append(script);\n+        }\n \n-    // On the search screen, so you remain on the last tab you opened.\n-    //\n-    // 0 for \"In Names\"\n-    // 1 for \"In Parameters\"\n-    // 2 for \"In Return Types\"\n-    window.currentTab = 0;\n+        var searchLoaded = false;\n+        function loadSearch() {\n+            if (!searchLoaded) {\n+                searchLoaded = true;\n+                loadScript(window.searchJS);\n+            }\n+        }\n \n-    window.mouseMovedAfterSearch = true;\n+        // `crates{version}.js` should always be loaded before this script, so we can use it safely.\n+        addSearchOptions(window.ALL_CRATES);\n+        addSidebarCrates(window.ALL_CRATES);\n \n-    var titleBeforeSearch = document.title;\n-    window.searchTitle = null;\n+        searchState.input.addEventListener(\"focus\", function() {\n+            searchState.input.origPlaceholder = searchState.input.placeholder;\n+            searchState.input.placeholder = \"Type your search here.\";\n+            loadSearch();\n+        });\n+        searchState.input.addEventListener(\"blur\", function() {\n+            searchState.input.placeholder = searchState.input.origPlaceholder;\n+        });\n+        searchState.input.removeAttribute('disabled');\n \n-    window.clearInputTimeout = function() {\n-        if (searchTimeout !== null) {\n-            clearTimeout(searchTimeout);\n-            searchTimeout = null;\n+        var crateSearchDropDown = document.getElementById(\"crate-search\");\n+        // `crateSearchDropDown` can be null in case there is only crate because in that case, the\n+        // crate filter dropdown is removed.\n+        if (crateSearchDropDown) {\n+            crateSearchDropDown.addEventListener(\"focus\", loadSearch);\n+        }\n+        var params = searchState.getQueryStringParams();\n+        if (params.search !== undefined) {\n+            loadSearch();\n         }\n+      },\n     };\n \n+    if (searchState.input) {\n+        searchState.input.onfocus = function() {\n+            searchState.putBackSearch(this);\n+        };\n+    }\n+\n     function getPageId() {\n         if (window.location.hash) {\n             var tmp = window.location.hash.replace(/^#/, \"\");\n@@ -237,61 +326,23 @@ function hideThemeButtonState() {\n         document.getElementsByTagName(\"body\")[0].style.marginTop = \"\";\n     }\n \n-    window.showSearchResults = function(search) {\n-        if (search === null || typeof search === 'undefined') {\n-            search = getSearchElement();\n-        }\n-        addClass(main, \"hidden\");\n-        removeClass(search, \"hidden\");\n-        mouseMovedAfterSearch = false;\n-        document.title = searchTitle;\n-    };\n-\n-    window.hideSearchResults = function(search) {\n-        if (search === null || typeof search === 'undefined') {\n-            search = getSearchElement();\n-        }\n-        addClass(search, \"hidden\");\n-        removeClass(main, \"hidden\");\n-        document.title = titleBeforeSearch;\n-        // We also remove the query parameter from the URL.\n-        if (browserSupportsHistoryApi()) {\n-            history.replaceState(\"\", window.currentCrate + \" - Rust\",\n-                getNakedUrl() + window.location.hash);\n-        }\n-    };\n-\n-    window.getQueryStringParams = function() {\n-        var params = {};\n-        window.location.search.substring(1).split(\"&\").\n-            map(function(s) {\n-                var pair = s.split(\"=\");\n-                params[decodeURIComponent(pair[0])] =\n-                    typeof pair[1] === \"undefined\" ? null : decodeURIComponent(pair[1]);\n-            });\n-        return params;\n-    };\n-\n-    window.browserSupportsHistoryApi = function() {\n-        return window.history && typeof window.history.pushState === \"function\";\n-    };\n-\n     function isHidden(elem) {\n         return elem.offsetHeight === 0;\n     }\n \n+    var toggleAllDocsId = \"toggle-all-docs\";\n     var main = document.getElementById(\"main\");\n     var savedHash = \"\";\n \n     function handleHashes(ev) {\n         var elem;\n-        var search = getSearchElement();\n+        var search = searchState.outputElement();\n         if (ev !== null && search && !hasClass(search, \"hidden\") && ev.newURL) {\n             // This block occurs when clicking on an element in the navbar while\n             // in a search.\n-            hideSearchResults(search);\n+            searchState.hideResults(search);\n             var hash = ev.newURL.slice(ev.newURL.indexOf(\"#\") + 1);\n-            if (browserSupportsHistoryApi()) {\n+            if (searchState.browserSupportsHistoryApi()) {\n                 // `window.location.search`` contains all the query parameters, not just `search`.\n                 history.replaceState(hash, \"\",\n                     getNakedUrl() + window.location.search + \"#\" + hash);\n@@ -432,18 +483,19 @@ function hideThemeButtonState() {\n \n     function handleEscape(ev) {\n         var help = getHelpElement(false);\n-        var search = getSearchElement();\n+        var search = searchState.outputElement();\n         if (hasClass(help, \"hidden\") === false) {\n             displayHelp(false, ev, help);\n         } else if (hasClass(search, \"hidden\") === false) {\n-            clearInputTimeout();\n+            searchState.clearInputTimeout();\n             ev.preventDefault();\n-            hideSearchResults(search);\n+            searchState.hideResults(search);\n         }\n         defocusSearchBar();\n         hideThemeButtonState();\n     }\n \n+    var disableShortcuts = getSettingValue(\"disable-shortcuts\") === \"true\";\n     function handleShortcut(ev) {\n         // Don't interfere with browser shortcuts\n         if (ev.ctrlKey || ev.altKey || ev.metaKey || disableShortcuts === true) {\n@@ -553,15 +605,17 @@ function hideThemeButtonState() {\n     document.addEventListener(\"keypress\", handleShortcut);\n     document.addEventListener(\"keydown\", handleShortcut);\n \n-    document.addEventListener(\"mousemove\", function() { mouseMovedAfterSearch = true; });\n+    document.addEventListener(\"mousemove\", function() {\n+      searchState.mouseMovedAfterSearch = true;\n+    });\n \n     var handleSourceHighlight = (function() {\n         var prev_line_id = 0;\n \n         var set_fragment = function(name) {\n             var x = window.scrollX,\n                 y = window.scrollY;\n-            if (browserSupportsHistoryApi()) {\n+            if (searchState.browserSupportsHistoryApi()) {\n                 history.replaceState(null, null, \"#\" + name);\n                 highlightSourceLines();\n             } else {\n@@ -1366,34 +1420,11 @@ function hideThemeButtonState() {\n         };\n     });\n \n-    window.putBackSearch = function(search_input) {\n-        var search = getSearchElement();\n-        if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n-            showSearchResults(search);\n-            if (browserSupportsHistoryApi()) {\n-                var extra = \"?search=\" + encodeURIComponent(search_input.value);\n-                history.replaceState(search_input.value, \"\",\n-                    getNakedUrl() + extra + window.location.hash);\n-            }\n-            document.title = searchTitle;\n-        }\n-    };\n-\n-    function getSearchLoadingText() {\n-        return \"Loading search results...\";\n-    }\n-\n-    if (search_input) {\n-        search_input.onfocus = function() {\n-            putBackSearch(this);\n-        };\n-    }\n-\n-    var params = getQueryStringParams();\n+    var params = searchState.getQueryStringParams();\n     if (params && params.search) {\n-        var search = getSearchElement();\n-        search.innerHTML = \"<h3 style=\\\"text-align: center;\\\">\" + getSearchLoadingText() + \"</h3>\";\n-        showSearchResults(search);\n+        var search = searchState.outputElement();\n+        search.innerHTML = \"<h3 style=\\\"text-align: center;\\\">\" + searchState.loadingText + \"</h3>\";\n+        searchState.showResults(search);\n     }\n \n     var sidebar_menu = document.getElementsByClassName(\"sidebar-menu\")[0];\n@@ -1509,55 +1540,14 @@ function hideThemeButtonState() {\n         container.appendChild(div_infos);\n \n         popup.appendChild(container);\n-        insertAfter(popup, getSearchElement());\n+        insertAfter(popup, searchState.outputElement());\n         // So that it's only built once and then it'll do nothing when called!\n         buildHelperPopup = function() {};\n     }\n \n-    function loadScript(url) {\n-        var script = document.createElement('script');\n-        script.src = url;\n-        document.head.append(script);\n-    }\n-\n-    function setupSearchLoader() {\n-        var searchLoaded = false;\n-        function loadSearch() {\n-            if (!searchLoaded) {\n-                searchLoaded = true;\n-                loadScript(window.searchJS);\n-            }\n-        }\n-\n-        // `crates{version}.js` should always be loaded before this script, so we can use it safely.\n-        addSearchOptions(window.ALL_CRATES);\n-        addSidebarCrates(window.ALL_CRATES);\n-\n-        search_input.addEventListener(\"focus\", function() {\n-            search_input.origPlaceholder = search_input.placeholder;\n-            search_input.placeholder = \"Type your search here.\";\n-            loadSearch();\n-        });\n-        search_input.addEventListener(\"blur\", function() {\n-            search_input.placeholder = search_input.origPlaceholder;\n-        });\n-        search_input.removeAttribute('disabled');\n-\n-        var crateSearchDropDown = document.getElementById(\"crate-search\");\n-        // `crateSearchDropDown` can be null in case there is only crate because in that case, the\n-        // crate filter dropdown is removed.\n-        if (crateSearchDropDown) {\n-            crateSearchDropDown.addEventListener(\"focus\", loadSearch);\n-        }\n-        var params = getQueryStringParams();\n-        if (params.search !== undefined) {\n-            loadSearch();\n-        }\n-    }\n-\n     onHashChange(null);\n     window.onhashchange = onHashChange;\n-    setupSearchLoader();\n+    searchState.setupLoader();\n }());\n \n function copy_path(but) {"}, {"sha": "b8afbd175c5198d8e7193c2d546d52d8ea7ff970", "filename": "src/librustdoc/html/static/search.js", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/95d652ebce010d3b090af81508e9cf3d7096d1e4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/95d652ebce010d3b090af81508e9cf3d7096d1e4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js?ref=95d652ebce010d3b090af81508e9cf3d7096d1e4", "patch": "@@ -39,7 +39,7 @@ var TY_KEYWORD = itemTypes.indexOf(\"keyword\");\n // In the search display, allows to switch between tabs.\n function printTab(nb) {\n     if (nb === 0 || nb === 1 || nb === 2) {\n-        currentTab = nb;\n+        searchState.currentTab = nb;\n     }\n     var nb_copy = nb;\n     onEachLazy(document.getElementById(\"titles\").childNodes, function(elem) {\n@@ -114,14 +114,14 @@ function initSearch(rawSearchIndex) {\n     var NO_TYPE_FILTER = -1;\n     var currentResults, index, searchIndex;\n     var ALIASES = {};\n-    var params = getQueryStringParams();\n+    var params = searchState.getQueryStringParams();\n \n     // Populate search bar with query string search term when provided,\n     // but only if the input bar is empty. This avoid the obnoxious issue\n     // where you start trying to do a search, and the index loads, and\n     // suddenly your search is gone!\n-    if (search_input.value === \"\") {\n-        search_input.value = params.search || \"\";\n+    if (searchState.input.value === \"\") {\n+        searchState.input.value = params.search || \"\";\n     }\n \n     /**\n@@ -898,12 +898,12 @@ function initSearch(rawSearchIndex) {\n             }\n             dst = dst[0];\n             if (window.location.pathname === dst.pathname) {\n-                hideSearchResults();\n+                searchState.hideResults();\n                 document.location.href = dst.href;\n             }\n         };\n         var mouseover_func = function(e) {\n-            if (mouseMovedAfterSearch) {\n+            if (searchState.mouseMovedAfterSearch) {\n                 var el = e.target;\n                 // to retrieve the real \"owner\" of the event.\n                 while (el.tagName !== \"TR\") {\n@@ -927,7 +927,7 @@ function initSearch(rawSearchIndex) {\n             });\n         });\n \n-        search_input.onkeydown = function(e) {\n+        searchState.input.onkeydown = function(e) {\n             // \"actives\" references the currently highlighted item in each search tab.\n             // Each array in \"actives\" represents a tab.\n             var actives = [[], [], []];\n@@ -940,6 +940,7 @@ function initSearch(rawSearchIndex) {\n                 current += 1;\n             });\n \n+            var currentTab = searchState.currentTab;\n             if (e.which === 38) { // up\n                 if (e.ctrlKey) { // Going through result tabs.\n                     printTab(currentTab > 0 ? currentTab - 1 : 2);\n@@ -1104,21 +1105,21 @@ function initSearch(rawSearchIndex) {\n     }\n \n     function makeTabHeader(tabNb, text, nbElems) {\n-        if (currentTab === tabNb) {\n+        if (searchState.currentTab === tabNb) {\n             return \"<button class=\\\"selected\\\">\" + text +\n                    \" <div class=\\\"count\\\">(\" + nbElems + \")</div></button>\";\n         }\n         return \"<button>\" + text + \" <div class=\\\"count\\\">(\" + nbElems + \")</div></button>\";\n     }\n \n     function showResults(results) {\n-        var search = getSearchElement();\n+        var search = searchState.outputElement();\n         if (results.others.length === 1\n             && getSettingValue(\"go-to-only-result\") === \"true\"\n             // By default, the search DOM element is \"empty\" (meaning it has no children not\n             // text content). Once a search has been run, it won't be empty, even if you press\n             // ESC or empty the search input (which also \"cancels\" the search).\n-            && (!search.firstChild || search.firstChild.innerText !== getSearchLoadingText()))\n+            && (!search.firstChild || search.firstChild.innerText !== searchState.loadingText))\n         {\n             var elem = document.createElement(\"a\");\n             elem.href = results.others[0].href;\n@@ -1128,7 +1129,7 @@ function initSearch(rawSearchIndex) {\n             elem.click();\n             return;\n         }\n-        var query = getQuery(search_input.value);\n+        var query = getQuery(searchState.input.value);\n \n         currentResults = query.id;\n \n@@ -1139,6 +1140,7 @@ function initSearch(rawSearchIndex) {\n         // Navigate to the relevant tab if the current tab is empty, like in case users search\n         // for \"-> String\". If they had selected another tab previously, they have to click on\n         // it again.\n+        var currentTab = searchState.currentTab;\n         if ((currentTab === 0 && ret_others[1] === 0) ||\n                 (currentTab === 1 && ret_in_args[1] === 0) ||\n                 (currentTab === 2 && ret_returned[1] === 0)) {\n@@ -1161,7 +1163,7 @@ function initSearch(rawSearchIndex) {\n             ret_others[0] + ret_in_args[0] + ret_returned[0] + \"</div>\";\n \n         search.innerHTML = output;\n-        showSearchResults(search);\n+        searchState.showResults(search);\n         initSearchNav();\n         var elems = document.getElementById(\"titles\").childNodes;\n         elems[0].onclick = function() { printTab(0); };\n@@ -1252,8 +1254,8 @@ function initSearch(rawSearchIndex) {\n     }\n \n     function search(e, forced) {\n-        var params = getQueryStringParams();\n-        var query = getQuery(search_input.value.trim());\n+        var params = searchState.getQueryStringParams();\n+        var query = getQuery(searchState.input.value.trim());\n \n         if (e) {\n             e.preventDefault();\n@@ -1264,17 +1266,17 @@ function initSearch(rawSearchIndex) {\n         }\n         if (forced !== true && query.id === currentResults) {\n             if (query.query.length > 0) {\n-                putBackSearch(search_input);\n+                searchState.putBackSearch(searchState.input);\n             }\n             return;\n         }\n \n         // Update document title to maintain a meaningful browser history\n-        searchTitle = \"Results for \" + query.query + \" - Rust\";\n+        searchState.title = \"Results for \" + query.query + \" - Rust\";\n \n         // Because searching is incremental by character, only the most\n         // recent search query is added to the browser history.\n-        if (browserSupportsHistoryApi()) {\n+        if (searchState.browserSupportsHistoryApi()) {\n             var newURL = getNakedUrl() + \"?search=\" + encodeURIComponent(query.raw) +\n                 window.location.hash;\n             if (!history.state && !params.search) {\n@@ -1408,37 +1410,37 @@ function initSearch(rawSearchIndex) {\n \n     function registerSearchEvents() {\n         var searchAfter500ms = function() {\n-            clearInputTimeout();\n-            if (search_input.value.length === 0) {\n-                if (browserSupportsHistoryApi()) {\n+            searchState.clearInputTimeout();\n+            if (searchState.input.value.length === 0) {\n+                if (searchState.browserSupportsHistoryApi()) {\n                     history.replaceState(\"\", window.currentCrate + \" - Rust\",\n                         getNakedUrl() + window.location.hash);\n                 }\n-                hideSearchResults();\n+                searchState.hideResults();\n             } else {\n-                searchTimeout = setTimeout(search, 500);\n+                searchState.timeout = setTimeout(search, 500);\n             }\n         };\n-        search_input.onkeyup = searchAfter500ms;\n-        search_input.oninput = searchAfter500ms;\n+        searchState.input.onkeyup = searchAfter500ms;\n+        searchState.input.oninput = searchAfter500ms;\n         document.getElementsByClassName(\"search-form\")[0].onsubmit = function(e) {\n             e.preventDefault();\n-            clearInputTimeout();\n+            searchState.clearInputTimeout();\n             search();\n         };\n-        search_input.onchange = function(e) {\n+        searchState.input.onchange = function(e) {\n             if (e.target !== document.activeElement) {\n                 // To prevent doing anything when it's from a blur event.\n                 return;\n             }\n             // Do NOT e.preventDefault() here. It will prevent pasting.\n-            clearInputTimeout();\n+            searchState.clearInputTimeout();\n             // zero-timeout necessary here because at the time of event handler execution the\n             // pasted content is not in the input field yet. Shouldn\u2019t make any difference for\n             // change, though.\n             setTimeout(search, 0);\n         };\n-        search_input.onpaste = search_input.onchange;\n+        searchState.input.onpaste = searchState.input.onchange;\n \n         var selectCrate = document.getElementById(\"crate-search\");\n         if (selectCrate) {\n@@ -1450,12 +1452,12 @@ function initSearch(rawSearchIndex) {\n \n         // Push and pop states are used to add search results to the browser\n         // history.\n-        if (browserSupportsHistoryApi()) {\n+        if (searchState.browserSupportsHistoryApi()) {\n             // Store the previous <title> so we can revert back to it later.\n             var previousTitle = document.title;\n \n             window.addEventListener(\"popstate\", function(e) {\n-                var params = getQueryStringParams();\n+                var params = searchState.getQueryStringParams();\n                 // Revert to the previous title manually since the History\n                 // API ignores the title parameter.\n                 document.title = previousTitle;\n@@ -1468,18 +1470,18 @@ function initSearch(rawSearchIndex) {\n                 // nothing there, which lets you really go back to a\n                 // previous state with nothing in the bar.\n                 if (params.search && params.search.length > 0) {\n-                    search_input.value = params.search;\n+                    searchState.input.value = params.search;\n                     // Some browsers fire \"onpopstate\" for every page load\n                     // (Chrome), while others fire the event only when actually\n                     // popping a state (Firefox), which is why search() is\n                     // called both here and at the end of the startSearch()\n                     // function.\n                     search(e);\n                 } else {\n-                    search_input.value = \"\";\n+                    searchState.input.value = \"\";\n                     // When browsing back from search results the main page\n                     // visibility must be reset.\n-                    hideSearchResults();\n+                    searchState.hideResults();\n                 }\n             });\n         }\n@@ -1491,9 +1493,9 @@ function initSearch(rawSearchIndex) {\n         // that try to sync state between the URL and the search input. To work around it,\n         // do a small amount of re-init on page show.\n         window.onpageshow = function(){\n-            var qSearch = getQueryStringParams().search;\n-            if (search_input.value === \"\" && qSearch) {\n-                search_input.value = qSearch;\n+            var qSearch = searchState.getQueryStringParams().search;\n+            if (searchState.input.value === \"\" && qSearch) {\n+                searchState.input.value = qSearch;\n             }\n             search();\n         };\n@@ -1502,7 +1504,7 @@ function initSearch(rawSearchIndex) {\n     index = buildIndex(rawSearchIndex);\n     registerSearchEvents();\n     // If there's a search term in the URL, execute the search now.\n-    if (getQueryStringParams().search) {\n+    if (searchState.getQueryStringParams().search) {\n         search();\n     }\n };"}]}