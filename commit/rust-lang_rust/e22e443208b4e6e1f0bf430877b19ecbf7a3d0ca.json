{"sha": "e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMmU0NDMyMDhiNGU2ZTFmMGJmNDMwODc3YjE5ZWNiZjdhM2QwY2E=", "commit": {"author": {"name": "sapir", "email": "yasapir@gmail.com", "date": "2019-12-31T23:20:34Z"}, "committer": {"name": "sapir", "email": "yasapir@gmail.com", "date": "2020-04-10T00:54:45Z"}, "message": "Try to fix warning for unused variables in or patterns, issue #67691", "tree": {"sha": "9128b95b15fa976f32f22501b4eeaaa984a965ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9128b95b15fa976f32f22501b4eeaaa984a965ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "html_url": "https://github.com/rust-lang/rust/commit/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/comments", "author": {"login": "sapir", "id": 896766, "node_id": "MDQ6VXNlcjg5Njc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/896766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sapir", "html_url": "https://github.com/sapir", "followers_url": "https://api.github.com/users/sapir/followers", "following_url": "https://api.github.com/users/sapir/following{/other_user}", "gists_url": "https://api.github.com/users/sapir/gists{/gist_id}", "starred_url": "https://api.github.com/users/sapir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sapir/subscriptions", "organizations_url": "https://api.github.com/users/sapir/orgs", "repos_url": "https://api.github.com/users/sapir/repos", "events_url": "https://api.github.com/users/sapir/events{/privacy}", "received_events_url": "https://api.github.com/users/sapir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sapir", "id": 896766, "node_id": "MDQ6VXNlcjg5Njc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/896766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sapir", "html_url": "https://github.com/sapir", "followers_url": "https://api.github.com/users/sapir/followers", "following_url": "https://api.github.com/users/sapir/following{/other_user}", "gists_url": "https://api.github.com/users/sapir/gists{/gist_id}", "starred_url": "https://api.github.com/users/sapir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sapir/subscriptions", "organizations_url": "https://api.github.com/users/sapir/orgs", "repos_url": "https://api.github.com/users/sapir/repos", "events_url": "https://api.github.com/users/sapir/events{/privacy}", "received_events_url": "https://api.github.com/users/sapir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c156af20d74b2e23c2b862110a5ed5fa8d65a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c156af20d74b2e23c2b862110a5ed5fa8d65a51", "html_url": "https://github.com/rust-lang/rust/commit/0c156af20d74b2e23c2b862110a5ed5fa8d65a51"}], "stats": {"total": 197, "additions": 140, "deletions": 57}, "files": [{"sha": "74a2d99789680660facf21b5108438540d5d613d", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 45, "deletions": 26, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "patch": "@@ -1492,28 +1492,33 @@ impl<'tcx> Liveness<'_, 'tcx> {\n     ) {\n         // In an or-pattern, only consider the variable; any later patterns must have the same\n         // bindings, and we also consider the first pattern to be the \"authoritative\" set of ids.\n-        // However, we should take the spans of variables with the same name from the later\n+        // However, we should take the ids and spans of variables with the same name from the later\n         // patterns so the suggestions to prefix with underscores will apply to those too.\n-        let mut vars: FxIndexMap<String, (LiveNode, Variable, HirId, Vec<Span>)> = <_>::default();\n+        let mut vars: FxIndexMap<String, (LiveNode, Variable, Vec<(HirId, Span)>)> = <_>::default();\n \n         pat.each_binding(|_, hir_id, pat_sp, ident| {\n             let ln = entry_ln.unwrap_or_else(|| self.live_node(hir_id, pat_sp));\n             let var = self.variable(hir_id, ident.span);\n+            let id_and_sp = (hir_id, pat_sp);\n             vars.entry(self.ir.variable_name(var))\n-                .and_modify(|(.., spans)| spans.push(ident.span))\n-                .or_insert_with(|| (ln, var, hir_id, vec![ident.span]));\n+                .and_modify(|(.., hir_ids_and_spans)| hir_ids_and_spans.push(id_and_sp))\n+                .or_insert_with(|| (ln, var, vec![id_and_sp]));\n         });\n \n-        for (_, (ln, var, id, spans)) in vars {\n+        for (_, (ln, var, hir_ids_and_spans)) in vars {\n             if self.used_on_entry(ln, var) {\n+                let id = hir_ids_and_spans[0].0;\n+                let spans = hir_ids_and_spans.into_iter().map(|(_, sp)| sp).collect();\n                 on_used_on_entry(spans, id, ln, var);\n             } else {\n-                self.report_unused(spans, id, ln, var);\n+                self.report_unused(hir_ids_and_spans, ln, var);\n             }\n         }\n     }\n \n-    fn report_unused(&self, spans: Vec<Span>, hir_id: HirId, ln: LiveNode, var: Variable) {\n+    fn report_unused(&self, hir_ids_and_spans: Vec<(HirId, Span)>, ln: LiveNode, var: Variable) {\n+        let first_hir_id = hir_ids_and_spans[0].0;\n+\n         if let Some(name) = self.should_warn(var).filter(|name| name != \"self\") {\n             // annoying: for parameters in funcs like `fn(x: i32)\n             // {ret}`, there is only one node, so asking about\n@@ -1524,8 +1529,8 @@ impl<'tcx> Liveness<'_, 'tcx> {\n             if is_assigned {\n                 self.ir.tcx.struct_span_lint_hir(\n                     lint::builtin::UNUSED_VARIABLES,\n-                    hir_id,\n-                    spans,\n+                    first_hir_id,\n+                    hir_ids_and_spans.into_iter().map(|(_, sp)| sp).collect::<Vec<_>>(),\n                     |lint| {\n                         lint.build(&format!(\"variable `{}` is assigned to, but never used\", name))\n                             .note(&format!(\"consider using `_{}` instead\", name))\n@@ -1535,31 +1540,45 @@ impl<'tcx> Liveness<'_, 'tcx> {\n             } else {\n                 self.ir.tcx.struct_span_lint_hir(\n                     lint::builtin::UNUSED_VARIABLES,\n-                    hir_id,\n-                    spans.clone(),\n+                    first_hir_id,\n+                    hir_ids_and_spans.iter().map(|(_, sp)| *sp).collect::<Vec<_>>(),\n                     |lint| {\n                         let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n-                        if self.ir.variable_is_shorthand(var) {\n-                            if let Node::Binding(pat) = self.ir.tcx.hir().get(hir_id) {\n-                                // Handle `ref` and `ref mut`.\n-                                let spans = spans\n-                                    .iter()\n-                                    .map(|_span| (pat.span, format!(\"{}: _\", name)))\n-                                    .collect();\n-\n-                                err.multipart_suggestion(\n-                                    \"try ignoring the field\",\n-                                    spans,\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n+\n+                        let (shorthands, non_shorthands): (Vec<_>, Vec<_>) =\n+                            hir_ids_and_spans.into_iter().partition(|(hir_id, span)| {\n+                                let var = self.variable(*hir_id, *span);\n+                                self.ir.variable_is_shorthand(var)\n+                            });\n+\n+                        let mut shorthands = shorthands\n+                            .into_iter()\n+                            .map(|(_, span)| (span, format!(\"{}: _\", name)))\n+                            .collect::<Vec<_>>();\n+\n+                        let non_shorthands = non_shorthands\n+                            .into_iter()\n+                            .map(|(_, span)| (span, format!(\"_{}\", name)))\n+                            .collect::<Vec<_>>();\n+\n+                        // If we have both shorthand and non-shorthand, prefer the \"try ignoring\n+                        // the field\" message.\n+                        if !shorthands.is_empty() {\n+                            shorthands.extend(non_shorthands);\n+\n+                            err.multipart_suggestion(\n+                                \"try ignoring the field\",\n+                                shorthands,\n+                                Applicability::MachineApplicable,\n+                            );\n                         } else {\n                             err.multipart_suggestion(\n                                 \"if this is intentional, prefix it with an underscore\",\n-                                spans.iter().map(|span| (*span, format!(\"_{}\", name))).collect(),\n+                                non_shorthands,\n                                 Applicability::MachineApplicable,\n                             );\n                         }\n+\n                         err.emit()\n                     },\n                 );"}, {"sha": "413a51d4e5dd7f0779605e068bc186bf61afd365", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "patch": "@@ -12,16 +12,16 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: unused variable: `mut_unused_var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:13\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:9\n    |\n LL |     let mut mut_unused_var = 1;\n-   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mut_unused_var`\n+   |         ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mut_unused_var`\n \n warning: unused variable: `var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:14\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:10\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n-   |              ^^^ help: if this is intentional, prefix it with an underscore: `_var`\n+   |          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_var`\n \n warning: unused variable: `unused_var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:19\n@@ -36,10 +36,10 @@ LL |     if let SoulHistory { corridors_of_light,\n    |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n \n warning: variable `hours_are_suns` is assigned to, but never used\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:30\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:26\n    |\n LL |                          mut hours_are_suns,\n-   |                              ^^^^^^^^^^^^^^\n+   |                          ^^^^^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n "}, {"sha": "c501aa25f135248b8cb1e795eb33d0afa0b18a06", "filename": "src/test/ui/lint/issue-54180-unused-ref-field.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr?ref=e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "patch": "@@ -1,10 +1,8 @@\n error: unused variable: `field`\n-  --> $DIR/issue-54180-unused-ref-field.rs:20:26\n+  --> $DIR/issue-54180-unused-ref-field.rs:20:22\n    |\n LL |         E::Variant { ref field } => (),\n-   |                      ----^^^^^\n-   |                      |\n-   |                      help: try ignoring the field: `field: _`\n+   |                      ^^^^^^^^^ help: try ignoring the field: `field: _`\n    |\n note: the lint level is defined here\n   --> $DIR/issue-54180-unused-ref-field.rs:3:9\n@@ -20,20 +18,16 @@ LL |     let _: i32 = points.iter().map(|Point { x, y }| y).sum();\n    |                                             ^ help: try ignoring the field: `x: _`\n \n error: unused variable: `f1`\n-  --> $DIR/issue-54180-unused-ref-field.rs:26:17\n+  --> $DIR/issue-54180-unused-ref-field.rs:26:13\n    |\n LL |     let S { ref f1 } = s;\n-   |             ----^^\n-   |             |\n-   |             help: try ignoring the field: `f1: _`\n+   |             ^^^^^^ help: try ignoring the field: `f1: _`\n \n error: unused variable: `x`\n-  --> $DIR/issue-54180-unused-ref-field.rs:32:28\n+  --> $DIR/issue-54180-unused-ref-field.rs:32:20\n    |\n LL |         Point { y, ref mut x } => y,\n-   |                    --------^\n-   |                    |\n-   |                    help: try ignoring the field: `x: _`\n+   |                    ^^^^^^^^^ help: try ignoring the field: `x: _`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "cfe3760620205eca435749f4df01e42e628e5e32", "filename": "src/test/ui/lint/issue-67691-unused-field-in-or-pattern.fixed", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.fixed?ref=e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "patch": "@@ -8,6 +8,11 @@ pub enum MyEnum {\n     B { i: i32, j: i32 },\n }\n \n+pub enum MixedEnum {\n+    A { i: i32 },\n+    B(i32),\n+}\n+\n pub fn no_ref(x: MyEnum) {\n     use MyEnum::*;\n \n@@ -52,10 +57,29 @@ pub fn inner_with_ref(x: Option<MyEnum>) {\n     }\n }\n \n+pub fn mixed_no_ref(x: MixedEnum) {\n+    match x {\n+        MixedEnum::A { i: _ } | MixedEnum::B(_i) => {\n+            println!(\"match\");\n+        }\n+    }\n+}\n+\n+pub fn mixed_with_ref(x: MixedEnum) {\n+    match x {\n+        MixedEnum::A { i: _ } | MixedEnum::B(_i) => {\n+            println!(\"match\");\n+        }\n+    }\n+}\n+\n pub fn main() {\n     no_ref(MyEnum::A { i: 1, j: 2 });\n     with_ref(MyEnum::A { i: 1, j: 2 });\n \n     inner_no_ref(Some(MyEnum::A { i: 1, j: 2 }));\n     inner_with_ref(Some(MyEnum::A { i: 1, j: 2 }));\n+\n+    mixed_no_ref(MixedEnum::B(5));\n+    mixed_with_ref(MixedEnum::B(5));\n }"}, {"sha": "4b19f85dfa477a6048b532bd34ffa9f4cb99fd6e", "filename": "src/test/ui/lint/issue-67691-unused-field-in-or-pattern.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.rs?ref=e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "patch": "@@ -8,6 +8,11 @@ pub enum MyEnum {\n     B { i: i32, j: i32 },\n }\n \n+pub enum MixedEnum {\n+    A { i: i32 },\n+    B(i32),\n+}\n+\n pub fn no_ref(x: MyEnum) {\n     use MyEnum::*;\n \n@@ -52,10 +57,29 @@ pub fn inner_with_ref(x: Option<MyEnum>) {\n     }\n }\n \n+pub fn mixed_no_ref(x: MixedEnum) {\n+    match x {\n+        MixedEnum::A { i } | MixedEnum::B(i) => { //~ ERROR unused variable\n+            println!(\"match\");\n+        }\n+    }\n+}\n+\n+pub fn mixed_with_ref(x: MixedEnum) {\n+    match x {\n+        MixedEnum::A { ref i } | MixedEnum::B(ref i) => { //~ ERROR unused variable\n+            println!(\"match\");\n+        }\n+    }\n+}\n+\n pub fn main() {\n     no_ref(MyEnum::A { i: 1, j: 2 });\n     with_ref(MyEnum::A { i: 1, j: 2 });\n \n     inner_no_ref(Some(MyEnum::A { i: 1, j: 2 }));\n     inner_with_ref(Some(MyEnum::A { i: 1, j: 2 }));\n+\n+    mixed_no_ref(MixedEnum::B(5));\n+    mixed_with_ref(MixedEnum::B(5));\n }"}, {"sha": "4e9d02abacd71c0d57bb3bd887e0a0c8a8818cc5", "filename": "src/test/ui/lint/issue-67691-unused-field-in-or-pattern.stderr", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.stderr?ref=e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "patch": "@@ -1,5 +1,5 @@\n error: unused variable: `j`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:15:16\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:20:16\n    |\n LL |         A { i, j } | B { i, j } => {\n    |                ^            ^\n@@ -16,7 +16,7 @@ LL |         A { i, j: _ } | B { i, j: _ } => {\n    |                ^^^^            ^^^^\n \n error: unused variable: `j`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:25:16\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:30:16\n    |\n LL |         A { i, ref j } | B { i, ref j } => {\n    |                ^^^^^            ^^^^^\n@@ -27,7 +27,7 @@ LL |         A { i, j: _ } | B { i, j: _ } => {\n    |                ^^^^            ^^^^\n \n error: unused variable: `j`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:35:21\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:40:21\n    |\n LL |         Some(A { i, j } | B { i, j }) => {\n    |                     ^            ^\n@@ -38,7 +38,7 @@ LL |         Some(A { i, j: _ } | B { i, j: _ }) => {\n    |                     ^^^^            ^^^^\n \n error: unused variable: `j`\n-  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:47:21\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:52:21\n    |\n LL |         Some(A { i, ref j } | B { i, ref j }) => {\n    |                     ^^^^^            ^^^^^\n@@ -48,5 +48,27 @@ help: try ignoring the field\n LL |         Some(A { i, j: _ } | B { i, j: _ }) => {\n    |                     ^^^^            ^^^^\n \n-error: aborting due to 5 previous errors\n+error: unused variable: `i`\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:62:24\n+   |\n+LL |         MixedEnum::A { i } | MixedEnum::B(i) => {\n+   |                        ^                  ^\n+   |\n+help: try ignoring the field\n+   |\n+LL |         MixedEnum::A { i: _ } | MixedEnum::B(_i) => {\n+   |                        ^^^^                  ^^\n+\n+error: unused variable: `i`\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:70:24\n+   |\n+LL |         MixedEnum::A { ref i } | MixedEnum::B(ref i) => {\n+   |                        ^^^^^                  ^^^^^\n+   |\n+help: try ignoring the field\n+   |\n+LL |         MixedEnum::A { i: _ } | MixedEnum::B(_i) => {\n+   |                        ^^^^                  ^^\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "e9d20cf981fbde4d80e2f043a67dbaebe31cdada", "filename": "src/test/ui/liveness/liveness-dead.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr?ref=e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "patch": "@@ -1,8 +1,8 @@\n error: value assigned to `x` is never read\n-  --> $DIR/liveness-dead.rs:9:13\n+  --> $DIR/liveness-dead.rs:9:9\n    |\n LL |     let mut x: isize = 3;\n-   |             ^\n+   |         ^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/liveness-dead.rs:2:9\n@@ -20,10 +20,10 @@ LL |     x = 4;\n    = help: maybe it is overwritten before being read?\n \n error: value passed to `x` is never read\n-  --> $DIR/liveness-dead.rs:20:11\n+  --> $DIR/liveness-dead.rs:20:7\n    |\n LL | fn f4(mut x: i32) {\n-   |           ^\n+   |       ^^^^^\n    |\n    = help: maybe it is overwritten before being read?\n "}, {"sha": "1ea84614393209867a0e2abf3d69de685fcf9935", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=e22e443208b4e6e1f0bf430877b19ecbf7a3d0ca", "patch": "@@ -44,10 +44,10 @@ LL |     let x = 3;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: variable `x` is assigned to, but never used\n-  --> $DIR/liveness-unused.rs:30:13\n+  --> $DIR/liveness-unused.rs:30:9\n    |\n LL |     let mut x = 3;\n-   |             ^\n+   |         ^^^^^\n    |\n    = note: consider using `_x` instead\n \n@@ -65,10 +65,10 @@ LL | #![deny(unused_assignments)]\n    = help: maybe it is overwritten before being read?\n \n error: variable `z` is assigned to, but never used\n-  --> $DIR/liveness-unused.rs:37:13\n+  --> $DIR/liveness-unused.rs:37:9\n    |\n LL |     let mut z = 3;\n-   |             ^\n+   |         ^^^^^\n    |\n    = note: consider using `_z` instead\n "}]}