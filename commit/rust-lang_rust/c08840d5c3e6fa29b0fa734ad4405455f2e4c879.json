{"sha": "c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODg0MGQ1YzNlNmZhMjliMGZhNzM0YWQ0NDA1NDU1ZjJlNGM4Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-22T15:54:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-22T15:54:10Z"}, "message": "Auto merge of #53586 - eddyb:top-lock, r=alexcrichton\n\nMove Cargo.{toml,lock} to the repository root directory.\n\nThis should give us back `src/` in errors, panics and debuginfo, for free.\n\nr? @Mark-Simulacrum @alexcrichton cc @michaelwoerister", "tree": {"sha": "2a0acd1d8a4e33869861b232ddc804c1c3082d08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a0acd1d8a4e33869861b232ddc804c1c3082d08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "html_url": "https://github.com/rust-lang/rust/commit/c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae6c9364108847393075b57a17fd7eaf3f37600", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae6c9364108847393075b57a17fd7eaf3f37600", "html_url": "https://github.com/rust-lang/rust/commit/dae6c9364108847393075b57a17fd7eaf3f37600"}, {"sha": "7c166f54b201dbefe27d4ab61dfdf640ac3a2722", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c166f54b201dbefe27d4ab61dfdf640ac3a2722", "html_url": "https://github.com/rust-lang/rust/commit/7c166f54b201dbefe27d4ab61dfdf640ac3a2722"}], "stats": {"total": 122, "additions": 70, "deletions": 52}, "files": [{"sha": "e04b1bdfefdd8e6f59e1ee621338483fd4bee538", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -494,16 +494,11 @@ the version in `Cargo.lock`, so the build can no longer continue.\n To resolve this, we need to update `Cargo.lock`. Luckily, cargo provides a\n command to do this easily.\n \n-First, go into the `src/` directory since that is where `Cargo.toml` is in\n-the rust repository. Then run, `cargo update -p rustfmt-nightly` to solve\n-the problem.\n-\n ```\n-$ cd src\n $ cargo update -p rustfmt-nightly\n ```\n \n-This should change the version listed in `src/Cargo.lock` to the new version you updated\n+This should change the version listed in `Cargo.lock` to the new version you updated\n the submodule to. Running `./x.py build` should work now.\n \n ## Writing Documentation"}, {"sha": "0dd693e7217e768af59c17ec1cfd2dd90c72d2ee", "filename": "Cargo.lock", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "previous_filename": "src/Cargo.lock"}, {"sha": "1e1d7a40967b34f629eb60e5f0d2f978b272aebd", "filename": "Cargo.toml", "status": "renamed", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -1,31 +1,31 @@\n [workspace]\n members = [\n-  \"bootstrap\",\n-  \"rustc\",\n-  \"libstd\",\n-  \"libtest\",\n-  \"librustc_codegen_llvm\",\n-  \"tools/cargotest\",\n-  \"tools/clippy\",\n-  \"tools/compiletest\",\n-  \"tools/error_index_generator\",\n-  \"tools/linkchecker\",\n-  \"tools/rustbook\",\n-  \"tools/unstable-book-gen\",\n-  \"tools/tidy\",\n-  \"tools/build-manifest\",\n-  \"tools/remote-test-client\",\n-  \"tools/remote-test-server\",\n-  \"tools/rust-installer\",\n-  \"tools/cargo\",\n-  \"tools/rustdoc\",\n-  \"tools/rls\",\n-  \"tools/rustfmt\",\n-  \"tools/miri\",\n-  \"tools/rustdoc-themes\",\n+  \"src/bootstrap\",\n+  \"src/rustc\",\n+  \"src/libstd\",\n+  \"src/libtest\",\n+  \"src/librustc_codegen_llvm\",\n+  \"src/tools/cargotest\",\n+  \"src/tools/clippy\",\n+  \"src/tools/compiletest\",\n+  \"src/tools/error_index_generator\",\n+  \"src/tools/linkchecker\",\n+  \"src/tools/rustbook\",\n+  \"src/tools/unstable-book-gen\",\n+  \"src/tools/tidy\",\n+  \"src/tools/build-manifest\",\n+  \"src/tools/remote-test-client\",\n+  \"src/tools/remote-test-server\",\n+  \"src/tools/rust-installer\",\n+  \"src/tools/cargo\",\n+  \"src/tools/rustdoc\",\n+  \"src/tools/rls\",\n+  \"src/tools/rustfmt\",\n+  \"src/tools/miri\",\n+  \"src/tools/rustdoc-themes\",\n ]\n exclude = [\n-  \"tools/rls/test_data\",\n+  \"src/tools/rls/test_data\",\n ]\n \n # Curiously, LLVM 7.0 will segfault if compiled with opt-level=3\n@@ -50,18 +50,18 @@ debug-assertions = false\n # so we use a `[patch]` here to override the github repository with our local\n # vendored copy.\n [patch.\"https://github.com/rust-lang/cargo\"]\n-cargo = { path = \"tools/cargo\" }\n+cargo = { path = \"src/tools/cargo\" }\n \n [patch.crates-io]\n # Similar to Cargo above we want the RLS to use a vendored version of `rustfmt`\n # that we're shipping as well (to ensure that the rustfmt in RLS and the\n # `rustfmt` executable are the same exact version).\n-rustfmt-nightly = { path = \"tools/rustfmt\" }\n+rustfmt-nightly = { path = \"src/tools/rustfmt\" }\n \n-# See comments in `tools/rustc-workspace-hack/README.md` for what's going on\n+# See comments in `src/tools/rustc-workspace-hack/README.md` for what's going on\n # here\n-rustc-workspace-hack = { path = 'tools/rustc-workspace-hack' }\n+rustc-workspace-hack = { path = 'src/tools/rustc-workspace-hack' }\n \n [patch.\"https://github.com/rust-lang-nursery/rust-clippy\"]\n-clippy_lints = { path = \"tools/clippy/clippy_lints\" }\n-rustc_tools_util = { path = \"tools/clippy/rustc_tools_util\" }\n+clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }\n+rustc_tools_util = { path = \"src/tools/clippy/rustc_tools_util\" }", "previous_filename": "src/Cargo.toml"}, {"sha": "d143dffb24be5239d59b47f08ec58c78119830a7", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -801,7 +801,7 @@ def bootstrap(help_triggered):\n                 registry = 'https://example.com'\n \n                 [source.vendored-sources]\n-                directory = '{}/src/vendor'\n+                directory = '{}/vendor'\n             \"\"\".format(build.rust_root))\n     else:\n         if os.path.exists('.cargo'):"}, {"sha": "cd8d5642b25707a261b1dad4f277a5db4414bedf", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -851,7 +851,7 @@ impl Step for Src {\n         t!(fs::create_dir_all(&dst_src));\n \n         let src_files = [\n-            \"src/Cargo.lock\",\n+            \"Cargo.lock\",\n         ];\n         // This is the reduced set of paths which will become the rust-src component\n         // (essentially libstd and all of its path dependencies)\n@@ -949,6 +949,8 @@ impl Step for PlainSourceTarball {\n             \"configure\",\n             \"x.py\",\n             \"config.toml.example\",\n+            \"Cargo.toml\",\n+            \"Cargo.lock\",\n         ];\n         let src_dirs = [\n             \"src\",\n@@ -992,7 +994,7 @@ impl Step for PlainSourceTarball {\n             // Vendor all Cargo dependencies\n             let mut cmd = Command::new(&builder.initial_cargo);\n             cmd.arg(\"vendor\")\n-               .current_dir(&plain_dst_src.join(\"src\"));\n+               .current_dir(&plain_dst_src);\n             builder.run(&mut cmd);\n         }\n "}, {"sha": "c50e6a270339f8354b63eaf6a8eef748e7e70bbb", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -1934,6 +1934,7 @@ impl Step for Distcheck {\n                 .arg(\"generate-lockfile\")\n                 .arg(\"--manifest-path\")\n                 .arg(&toml)\n+                .env(\"__CARGO_TEST_ROOT\", &dir)\n                 .current_dir(&dir),\n         );\n     }"}, {"sha": "4acc739db57bf1d020685bfcebbd3a45c0d0d75f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -260,8 +260,13 @@ pub fn prepare_tool_cargo(\n }\n \n macro_rules! tool {\n-    ($($name:ident, $path:expr, $tool_name:expr, $mode:expr\n-        $(,llvm_tools = $llvm:expr)* $(,is_external_tool = $external:expr)*;)+) => {\n+    ($(\n+        $name:ident, $path:expr, $tool_name:expr, $mode:expr\n+        $(,llvm_tools = $llvm:expr)*\n+        $(,is_external_tool = $external:expr)*\n+        $(,cargo_test_root = $cargo_test_root:expr)*\n+        ;\n+    )+) => {\n         #[derive(Copy, PartialEq, Eq, Clone)]\n         pub enum Tool {\n             $(\n@@ -283,6 +288,15 @@ macro_rules! tool {\n                     $(Tool::$name => false $(|| $llvm)*,)+\n                 }\n             }\n+\n+            /// Whether this tool requires may run Cargo for test crates,\n+            /// which currently needs setting the environment variable\n+            /// `__CARGO_TEST_ROOT` to separate it from the workspace.\n+            pub fn needs_cargo_test_root(&self) -> bool {\n+                match self {\n+                    $(Tool::$name => false $(|| $cargo_test_root)*,)+\n+                }\n+            }\n         }\n \n         impl<'a> Builder<'a> {\n@@ -358,8 +372,9 @@ tool!(\n     UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::ToolBootstrap;\n     Tidy, \"src/tools/tidy\", \"tidy\", Mode::ToolBootstrap;\n     Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::ToolBootstrap;\n-    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolBootstrap;\n-    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolBootstrap, llvm_tools = true;\n+    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolBootstrap, cargo_test_root = true;\n+    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolBootstrap,\n+        llvm_tools = true, cargo_test_root = true;\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolBootstrap;\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolBootstrap;\n     RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap,\n@@ -678,6 +693,11 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n+        // Set `__CARGO_TEST_ROOT` to the build directory if needed.\n+        if tool.needs_cargo_test_root() {\n+            cmd.env(\"__CARGO_TEST_ROOT\", &self.config.out);\n+        }\n+\n         add_lib_path(lib_paths, cmd);\n     }\n "}, {"sha": "cab7bda6c672153313c07ef41289ba6aec287a16", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -12,7 +12,7 @@ error[E0425]: cannot find value `no` in this scope\n 3 | no\n   | ^^ not found in this scope\n \n-thread '$DIR/failed-doctest-output.rs - OtherStruct (line 27)' panicked at 'couldn't compile the test', librustdoc/test.rs:323:13\n+thread '$DIR/failed-doctest-output.rs - OtherStruct (line 27)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:323:13\n note: Run with `RUST_BACKTRACE=1` for a backtrace.\n \n ---- $DIR/failed-doctest-output.rs - SomeStruct (line 21) stdout ----\n@@ -21,7 +21,7 @@ thread '$DIR/failed-doctest-output.rs - SomeStruct (line 21)' panicked at 'test\n thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:3:1\n note: Run with `RUST_BACKTRACE=1` for a backtrace.\n \n-', librustdoc/test.rs:358:17\n+', src/librustdoc/test.rs:358:17\n \n \n failures:"}, {"sha": "a40ae8894d5e795bcd335f63c721c0fa50f86972", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Check license of third-party deps by inspecting src/vendor\n+//! Check license of third-party deps by inspecting vendor\n \n use std::collections::{BTreeSet, HashSet, HashMap};\n use std::fs::File;\n@@ -203,7 +203,7 @@ impl<'a> From<CrateVersion<'a>> for Crate<'a> {\n /// Specifically, this checks that the license is correct.\n pub fn check(path: &Path, bad: &mut bool) {\n     // Check licences\n-    let path = path.join(\"vendor\");\n+    let path = path.join(\"../vendor\");\n     assert!(path.exists(), \"vendor directory missing\");\n     let mut saw_dir = false;\n     for dir in t!(path.read_dir()) {\n@@ -215,7 +215,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             dir.path()\n                 .to_str()\n                 .unwrap()\n-                .contains(&format!(\"src/vendor/{}\", exception))\n+                .contains(&format!(\"vendor/{}\", exception))\n         });\n         if is_exception {\n             continue;\n@@ -304,7 +304,7 @@ fn get_deps(path: &Path, cargo: &Path) -> Resolve {\n         .arg(\"--format-version\")\n         .arg(\"1\")\n         .arg(\"--manifest-path\")\n-        .arg(path.join(\"Cargo.toml\"))\n+        .arg(path.join(\"../Cargo.toml\"))\n         .output()\n         .expect(\"Unable to run `cargo metadata`\")\n         .stdout;"}, {"sha": "a78d2d4ee4e150ed51c85f9ac6870285444b702a", "filename": "src/tools/tidy/src/extdeps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -21,8 +21,8 @@ const WHITELISTED_SOURCES: &[&str] = &[\n \n /// check for external package sources\n pub fn check(path: &Path, bad: &mut bool) {\n-    // Cargo.lock of rust: src/Cargo.lock\n-    let path = path.join(\"Cargo.lock\");\n+    // Cargo.lock of rust (tidy runs inside src/)\n+    let path = path.join(\"../Cargo.lock\");\n \n     // open and read the whole file\n     let mut cargo_lock = String::new();"}, {"sha": "700103d35d88c0264422d8cc93ffdacaa036b019", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08840d5c3e6fa29b0fa734ad4405455f2e4c879/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=c08840d5c3e6fa29b0fa734ad4405455f2e4c879", "patch": "@@ -64,7 +64,6 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/librustc_data_structures/owning_ref\",\n         \"src/compiler-rt\",\n         \"src/liblibc\",\n-        \"src/vendor\",\n         \"src/rt/hoedown\",\n         \"src/tools/cargo\",\n         \"src/tools/clang\",\n@@ -78,6 +77,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/target\",\n         \"src/stdsimd\",\n         \"target\",\n+        \"vendor\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}