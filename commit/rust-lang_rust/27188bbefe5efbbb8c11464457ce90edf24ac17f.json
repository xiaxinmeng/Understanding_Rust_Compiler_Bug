{"sha": "27188bbefe5efbbb8c11464457ce90edf24ac17f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MTg4YmJlZmU1ZWZiYmI4YzExNDY0NDU3Y2U5MGVkZjI0YWMxN2Y=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-07-17T17:46:33Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-07-17T19:41:34Z"}, "message": "treat `for<'a> T: 'a` as `T: 'static`\n\ncloses #26217", "tree": {"sha": "17ad5b8fbce6b98774b3803bcc2baa6df0acf32c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17ad5b8fbce6b98774b3803bcc2baa6df0acf32c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27188bbefe5efbbb8c11464457ce90edf24ac17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27188bbefe5efbbb8c11464457ce90edf24ac17f", "html_url": "https://github.com/rust-lang/rust/commit/27188bbefe5efbbb8c11464457ce90edf24ac17f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27188bbefe5efbbb8c11464457ce90edf24ac17f/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "html_url": "https://github.com/rust-lang/rust/commit/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "e06333114f520bed4c9c98833988a8cac924aad3", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/27188bbefe5efbbb8c11464457ce90edf24ac17f/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27188bbefe5efbbb8c11464457ce90edf24ac17f/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=27188bbefe5efbbb8c11464457ce90edf24ac17f", "patch": "@@ -413,17 +413,33 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n         }\n \n         ty::Predicate::TypeOutlives(ref binder) => {\n-            // For now, we just check that there are no higher-ranked\n-            // regions.  If there are, we will call this obligation an\n-            // error. Eventually we should be able to support some\n-            // cases here, I imagine (e.g., `for<'a> int : 'a`).\n+            // Check if there are higher-ranked regions.\n             match selcx.tcx().no_late_bound_regions(binder) {\n+                // If there are, inspect the underlying type further.\n                 None => {\n-                    errors.push(\n-                        FulfillmentError::new(\n-                            obligation.clone(),\n-                            CodeSelectionError(Unimplemented)))\n+                    // Convert from `Binder<OutlivesPredicate<Ty, Region>>` to `Binder<Ty>`.\n+                    let binder = binder.map_bound_ref(|pred| pred.0);\n+\n+                    // Check if the type has any bound regions.\n+                    match selcx.tcx().no_late_bound_regions(&binder) {\n+                        // If so, this obligation is an error (for now). Eventually we should be\n+                        // able to support additional cases here, like `for<'a> &'a str: 'a`.\n+                        None => {\n+                            errors.push(\n+                                FulfillmentError::new(\n+                                    obligation.clone(),\n+                                    CodeSelectionError(Unimplemented)))\n+                        }\n+                        // Otherwise, we have something of the form `for<'a> T: 'a`, which\n+                        // we can treat as `T: 'static`.\n+                        Some(t_a) => {\n+                            register_region_obligation(t_a, ty::ReStatic,\n+                                                       obligation.cause.clone(),\n+                                                       region_obligations);\n+                        }\n+                    }\n                 }\n+                // If there aren't, register the obligation.\n                 Some(ty::OutlivesPredicate(t_a, r_b)) => {\n                     register_region_obligation(t_a, r_b,\n                                                obligation.cause.clone(),"}, {"sha": "06a8fe525889b9eebb864c9692f356878e2d716d", "filename": "src/test/compile-fail/issue-26217.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27188bbefe5efbbb8c11464457ce90edf24ac17f/src%2Ftest%2Fcompile-fail%2Fissue-26217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27188bbefe5efbbb8c11464457ce90edf24ac17f/src%2Ftest%2Fcompile-fail%2Fissue-26217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26217.rs?ref=27188bbefe5efbbb8c11464457ce90edf24ac17f", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<T>() where for<'a> T: 'a {}\n+\n+fn main<'a>() {\n+    foo::<&'a i32>();\n+    //~^ ERROR the type `&'a i32` does not fulfill the required lifetime\n+}"}, {"sha": "083f042fec265c692cc5a41dce157c410cd1ac61", "filename": "src/test/run-pass/hrtb-type-outlives.rs", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27188bbefe5efbbb8c11464457ce90edf24ac17f/src%2Ftest%2Frun-pass%2Fhrtb-type-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27188bbefe5efbbb8c11464457ce90edf24ac17f/src%2Ftest%2Frun-pass%2Fhrtb-type-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-type-outlives.rs?ref=27188bbefe5efbbb8c11464457ce90edf24ac17f", "patch": "@@ -34,10 +34,7 @@ impl<'a,X> Foo<&'a isize> for SomeStruct<X>\n }\n \n fn one() {\n-    // In fact there is no good reason for this to be an error, but\n-    // whatever, I'm mostly concerned it doesn't ICE right now:\n     want_foo::<SomeStruct<usize>>();\n-    //~^ ERROR requirement `for<'a> usize : 'a` is not satisfied\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -53,7 +50,6 @@ impl<'a,X:'a> Foo<&'a isize> for AnotherStruct<X>\n \n fn two() {\n     want_foo::<AnotherStruct<usize>>();\n-    //~^ ERROR requirement `for<'a> usize : 'a` is not satisfied\n }\n \n fn main() { }", "previous_filename": "src/test/compile-fail/hrtb-type-outlives.rs"}]}