{"sha": "9408c68c1da55f8a47cb21e761953db30aea3d39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MDhjNjhjMWRhNTVmOGE0N2NiMjFlNzYxOTUzZGIzMGFlYTNkMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-02T22:22:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-02T22:22:37Z"}, "message": "Auto merge of #6105 - bugadani:sus-char, r=ebroto\n\nLint for invisible Unicode characters other than ZWSP\n\nThis PR extends the existing `zero_width_space` lint to look for other invisible characters as well (in this case, `\\\\u{ad}` soft hyphen.\n\nI feel like this lint is the logical place to add the check, but I also realize the lint name is not particularly flexible, but I also understand that it shouldn't be renamed for compatibility reasons.\n\nOpen questions:\n - What other characters should trigger the lint?\n - What should be done with the lint name?\n - How to indicate the change in functionality?\n\nMotivation behind this PR: https://github.com/rust-lang/rust/issues/77417 - I managed to shoot myself in the foot by an invisible character pasted into my test case.\n\nchangelog: rename [`zero_width_space`] to [`invisible_characters`] and add SHY and WJ to the list.", "tree": {"sha": "16d6b2bc1de296ef13e000c7cf79cc8956aa8e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d6b2bc1de296ef13e000c7cf79cc8956aa8e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9408c68c1da55f8a47cb21e761953db30aea3d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9408c68c1da55f8a47cb21e761953db30aea3d39", "html_url": "https://github.com/rust-lang/rust/commit/9408c68c1da55f8a47cb21e761953db30aea3d39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9408c68c1da55f8a47cb21e761953db30aea3d39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1a7f20b4c5edff108a7c46e8641580bbf862362", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a7f20b4c5edff108a7c46e8641580bbf862362", "html_url": "https://github.com/rust-lang/rust/commit/a1a7f20b4c5edff108a7c46e8641580bbf862362"}, {"sha": "572e4c4837e5f955cdc3751b9ad63f0bfb86beac", "url": "https://api.github.com/repos/rust-lang/rust/commits/572e4c4837e5f955cdc3751b9ad63f0bfb86beac", "html_url": "https://github.com/rust-lang/rust/commit/572e4c4837e5f955cdc3751b9ad63f0bfb86beac"}], "stats": {"total": 74, "additions": 47, "deletions": 27}, "files": [{"sha": "617bf32f4639e776a534c337595ee1635c524ab9", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9408c68c1da55f8a47cb21e761953db30aea3d39/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9408c68c1da55f8a47cb21e761953db30aea3d39/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9408c68c1da55f8a47cb21e761953db30aea3d39", "patch": "@@ -1647,6 +1647,7 @@ Released 2018-09-13\n [`invalid_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_ref\n [`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons\n+[`invisible_characters`]: https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n@@ -1922,6 +1923,5 @@ Released 2018-09-13\n [`zero_divided_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_divided_by_zero\n [`zero_prefixed_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\n [`zero_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr\n-[`zero_width_space`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_width_space\n [`zst_offset`]: https://rust-lang.github.io/rust-clippy/master/index.html#zst_offset\n <!-- end autogenerated links to lint list -->"}, {"sha": "b58674e1a66a3ff84a2d5ae72a0c413461264a63", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9408c68c1da55f8a47cb21e761953db30aea3d39/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9408c68c1da55f8a47cb21e761953db30aea3d39/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9408c68c1da55f8a47cb21e761953db30aea3d39", "patch": "@@ -854,9 +854,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &types::UNIT_CMP,\n         &types::UNNECESSARY_CAST,\n         &types::VEC_BOX,\n+        &unicode::INVISIBLE_CHARACTERS,\n         &unicode::NON_ASCII_LITERAL,\n         &unicode::UNICODE_NOT_NFC,\n-        &unicode::ZERO_WIDTH_SPACE,\n         &unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n         &unnamed_address::FN_ADDRESS_COMPARISONS,\n         &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n@@ -1511,7 +1511,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n-        LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unicode::INVISIBLE_CHARACTERS),\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n@@ -1779,7 +1779,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::ABSURD_EXTREME_COMPARISONS),\n         LintId::of(&types::CAST_REF_TO_MUT),\n         LintId::of(&types::UNIT_CMP),\n-        LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unicode::INVISIBLE_CHARACTERS),\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n@@ -1910,6 +1910,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::for_loop_over_option\", \"clippy::for_loops_over_fallibles\");\n     ls.register_renamed(\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\");\n     ls.register_renamed(\"clippy::identity_conversion\", \"clippy::useless_conversion\");\n+    ls.register_renamed(\"clippy::zero_width_space\", \"clippy::invisible_characters\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "93d59cc7fcd178bf42c1fae30b8626206e29fa82", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9408c68c1da55f8a47cb21e761953db30aea3d39/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9408c68c1da55f8a47cb21e761953db30aea3d39/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=9408c68c1da55f8a47cb21e761953db30aea3d39", "patch": "@@ -8,18 +8,18 @@ use rustc_span::source_map::Span;\n use unicode_normalization::UnicodeNormalization;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the Unicode zero-width space in the code.\n+    /// **What it does:** Checks for invisible Unicode characters in the code.\n     ///\n     /// **Why is this bad?** Having an invisible character in the code makes for all\n     /// sorts of April fools, but otherwise is very much frowned upon.\n     ///\n     /// **Known problems:** None.\n     ///\n-    /// **Example:** You don't see it, but there may be a zero-width space\n-    /// somewhere in this text.\n-    pub ZERO_WIDTH_SPACE,\n+    /// **Example:** You don't see it, but there may be a zero-width space or soft hyphen\n+    /// some\u00adwhere in this text.\n+    pub INVISIBLE_CHARACTERS,\n     correctness,\n-    \"using a zero-width space in a string literal, which is confusing\"\n+    \"using an invisible character in a string literal, which is confusing\"\n }\n \n declare_clippy_lint! {\n@@ -63,7 +63,7 @@ declare_clippy_lint! {\n     \"using a Unicode literal not in NFC normal form (see [Unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\"\n }\n \n-declare_lint_pass!(Unicode => [ZERO_WIDTH_SPACE, NON_ASCII_LITERAL, UNICODE_NOT_NFC]);\n+declare_lint_pass!(Unicode => [INVISIBLE_CHARACTERS, NON_ASCII_LITERAL, UNICODE_NOT_NFC]);\n \n impl LateLintPass<'_> for Unicode {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n@@ -91,14 +91,17 @@ fn escape<T: Iterator<Item = char>>(s: T) -> String {\n \n fn check_str(cx: &LateContext<'_>, span: Span, id: HirId) {\n     let string = snippet(cx, span, \"\");\n-    if string.contains('\\u{200B}') {\n+    if string.chars().any(|c| ['\\u{200B}', '\\u{ad}', '\\u{2060}'].contains(&c)) {\n         span_lint_and_sugg(\n             cx,\n-            ZERO_WIDTH_SPACE,\n+            INVISIBLE_CHARACTERS,\n             span,\n-            \"zero-width space detected\",\n+            \"invisible character detected\",\n             \"consider replacing the string with\",\n-            string.replace(\"\\u{200B}\", \"\\\\u{200B}\"),\n+            string\n+                .replace(\"\\u{200B}\", \"\\\\u{200B}\")\n+                .replace(\"\\u{ad}\", \"\\\\u{AD}\")\n+                .replace(\"\\u{2060}\", \"\\\\u{2060}\"),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "26aaaf16fae6b245bd9f90a64c642e5a9851ef02", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9408c68c1da55f8a47cb21e761953db30aea3d39/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9408c68c1da55f8a47cb21e761953db30aea3d39/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=9408c68c1da55f8a47cb21e761953db30aea3d39", "patch": "@@ -969,6 +969,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"types\",\n     },\n+    Lint {\n+        name: \"invisible_characters\",\n+        group: \"correctness\",\n+        desc: \"using an invisible character in a string literal, which is confusing\",\n+        deprecation: None,\n+        module: \"unicode\",\n+    },\n     Lint {\n         name: \"items_after_statements\",\n         group: \"pedantic\",\n@@ -2810,13 +2817,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"misc\",\n     },\n-    Lint {\n-        name: \"zero_width_space\",\n-        group: \"correctness\",\n-        desc: \"using a zero-width space in a string literal, which is confusing\",\n-        deprecation: None,\n-        module: \"unicode\",\n-    },\n     Lint {\n         name: \"zst_offset\",\n         group: \"correctness\","}, {"sha": "1f596c312fe395783208b6ab34ffd8fab27d8204", "filename": "tests/ui/unicode.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9408c68c1da55f8a47cb21e761953db30aea3d39/tests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9408c68c1da55f8a47cb21e761953db30aea3d39/tests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.rs?ref=9408c68c1da55f8a47cb21e761953db30aea3d39", "patch": "@@ -1,7 +1,11 @@\n-#[warn(clippy::zero_width_space)]\n+#[warn(clippy::invisible_characters)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n     print!(\"This\\u{200B}is\\u{200B}fine\");\n+    print!(\"Here >\u00ad< is a SHY, and \u00adanother\");\n+    print!(\"This\\u{ad}is\\u{ad}fine\");\n+    print!(\"Here >\u2060< is a WJ, and \u2060another\");\n+    print!(\"This\\u{2060}is\\u{2060}fine\");\n }\n \n #[warn(clippy::unicode_not_nfc)]"}, {"sha": "3fca463c620b522659335917cf78e0a2a5baeb24", "filename": "tests/ui/unicode.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9408c68c1da55f8a47cb21e761953db30aea3d39/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9408c68c1da55f8a47cb21e761953db30aea3d39/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=9408c68c1da55f8a47cb21e761953db30aea3d39", "patch": "@@ -1,26 +1,38 @@\n-error: zero-width space detected\n+error: invisible character detected\n   --> $DIR/unicode.rs:3:12\n    |\n LL |     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{200B}< is a ZWS, and /u{200B}another\"`\n    |\n-   = note: `-D clippy::zero-width-space` implied by `-D warnings`\n+   = note: `-D clippy::invisible-characters` implied by `-D warnings`\n+\n+error: invisible character detected\n+  --> $DIR/unicode.rs:5:12\n+   |\n+LL |     print!(\"Here >\u00ad< is a SHY, and \u00adanother\");\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{AD}< is a SHY, and /u{AD}another\"`\n+\n+error: invisible character detected\n+  --> $DIR/unicode.rs:7:12\n+   |\n+LL |     print!(\"Here >\u2060< is a WJ, and \u2060another\");\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{2060}< is a WJ, and /u{2060}another\"`\n \n error: non-NFC Unicode sequence detected\n-  --> $DIR/unicode.rs:9:12\n+  --> $DIR/unicode.rs:13:12\n    |\n LL |     print!(\"\u0300a\u0300h?\");\n    |            ^^^^^ help: consider replacing the string with: `\"\u0300\u00e0h?\"`\n    |\n    = note: `-D clippy::unicode-not-nfc` implied by `-D warnings`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:15:12\n+  --> $DIR/unicode.rs:19:12\n    |\n LL |     print!(\"\u00dcben!\");\n    |            ^^^^^^^ help: consider replacing the string with: `\"/u{dc}ben!\"`\n    |\n    = note: `-D clippy::non-ascii-literal` implied by `-D warnings`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n "}]}