{"sha": "3327ecca422046699315122345c6c050ab73804b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMjdlY2NhNDIyMDQ2Njk5MzE1MTIyMzQ1YzZjMDUwYWI3MzgwNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-01T22:41:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-01T22:41:48Z"}, "message": "auto merge of #17595 : danburkert/rust/tuple-index-deserialization, r=alexcrichton\n\nCurrently `Decoder` implementations are not provided the tuple arity as\r\na parameter to `read_tuple`. This forces all encoder/decoder combos to\r\nserialize the arity along with the elements. Tuple-arity is always known\r\nstatically at the decode site, because it is part of the type of the\r\ntuple, so it could instead be provided as an argument to `read_tuple`,\r\nas it is to `read_struct`.\r\n\r\nThe upside to this is that serialized tuples could become smaller in\r\nencoder/decoder implementations which choose not to serialize type\r\n(arity) information. For example, @TyOverby's\r\n[binary-encode](https://github.com/TyOverby/binary-encode) format is\r\ncurrently forced to serialize the tuple-arity along with every tuple,\r\ndespite the information being statically known at the decode site.\r\n\r\nA downside to this change is that the tuple-arity of serialized tuples\r\ncan no longer be automatically checked during deserialization. However,\r\nfor formats which do serialize the tuple-arity, either explicitly (rbml)\r\nor implicitly (json), this check can be added to the `read_tuple` method.\r\n\r\nThe signature of `Deserialize::read_tuple` and\r\n`Deserialize::read_tuple_struct` are changed, and thus binary\r\nbackwards-compatibility is broken. This change does *not* force\r\nserialization formats to change, and thus does not break decoding values\r\nserialized prior to this change.\r\n\r\n[breaking-change]", "tree": {"sha": "7e89baf5784749a8c5f5e0578bfa7d4302ddfa2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e89baf5784749a8c5f5e0578bfa7d4302ddfa2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3327ecca422046699315122345c6c050ab73804b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3327ecca422046699315122345c6c050ab73804b", "html_url": "https://github.com/rust-lang/rust/commit/3327ecca422046699315122345c6c050ab73804b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3327ecca422046699315122345c6c050ab73804b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f90aead4ad52de1d2c50418da4d66320233d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f90aead4ad52de1d2c50418da4d66320233d8e", "html_url": "https://github.com/rust-lang/rust/commit/39f90aead4ad52de1d2c50418da4d66320233d8e"}, {"sha": "05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d", "html_url": "https://github.com/rust-lang/rust/commit/05f6bdaefc7e0b94ea0b1892e6fe5dc79cd2514d"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "1dfc0d970a91c585ffd58566a3d9aedf4d3b261f", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3327ecca422046699315122345c6c050ab73804b/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3327ecca422046699315122345c6c050ab73804b/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=3327ecca422046699315122345c6c050ab73804b", "patch": "@@ -558,9 +558,17 @@ pub mod reader {\n         }\n \n         fn read_tuple<T>(&mut self,\n-                         f: |&mut Decoder<'doc>, uint| -> DecodeResult<T>) -> DecodeResult<T> {\n+                         tuple_len: uint,\n+                         f: |&mut Decoder<'doc>| -> DecodeResult<T>) -> DecodeResult<T> {\n             debug!(\"read_tuple()\");\n-            self.read_seq(f)\n+            self.read_seq(|d, len| {\n+                if len == tuple_len {\n+                    f(d)\n+                } else {\n+                    Err(Expected(format!(\"Expected tuple of length `{}`, \\\n+                                          found tuple of length `{}`\", tuple_len, len)))\n+                }\n+            })\n         }\n \n         fn read_tuple_arg<T>(&mut self, idx: uint, f: |&mut Decoder<'doc>| -> DecodeResult<T>)\n@@ -571,10 +579,11 @@ pub mod reader {\n \n         fn read_tuple_struct<T>(&mut self,\n                                 name: &str,\n-                                f: |&mut Decoder<'doc>, uint| -> DecodeResult<T>)\n+                                len: uint,\n+                                f: |&mut Decoder<'doc>| -> DecodeResult<T>)\n                                 -> DecodeResult<T> {\n             debug!(\"read_tuple_struct(name={})\", name);\n-            self.read_tuple(f)\n+            self.read_tuple(len, f)\n         }\n \n         fn read_tuple_struct_arg<T>(&mut self,"}, {"sha": "06f934c075d1aaae2e0e4ea41d7addd485b22473", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3327ecca422046699315122345c6c050ab73804b/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3327ecca422046699315122345c6c050ab73804b/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=3327ecca422046699315122345c6c050ab73804b", "patch": "@@ -2153,9 +2153,18 @@ impl ::Decoder<DecoderError> for Decoder {\n         Ok(value)\n     }\n \n-    fn read_tuple<T>(&mut self, f: |&mut Decoder, uint| -> DecodeResult<T>) -> DecodeResult<T> {\n+    fn read_tuple<T>(&mut self,\n+                     tuple_len: uint,\n+                     f: |&mut Decoder| -> DecodeResult<T>)\n+                     -> DecodeResult<T> {\n         debug!(\"read_tuple()\");\n-        self.read_seq(f)\n+        self.read_seq(|d, len| {\n+            if len == tuple_len {\n+                f(d)\n+            } else {\n+                Err(ExpectedError(format!(\"Tuple{}\", tuple_len), format!(\"Tuple{}\", len)))\n+            }\n+        })\n     }\n \n     fn read_tuple_arg<T>(&mut self,\n@@ -2167,10 +2176,11 @@ impl ::Decoder<DecoderError> for Decoder {\n \n     fn read_tuple_struct<T>(&mut self,\n                             name: &str,\n-                            f: |&mut Decoder, uint| -> DecodeResult<T>)\n+                            len: uint,\n+                            f: |&mut Decoder| -> DecodeResult<T>)\n                             -> DecodeResult<T> {\n         debug!(\"read_tuple_struct(name={})\", name);\n-        self.read_tuple(f)\n+        self.read_tuple(len, f)\n     }\n \n     fn read_tuple_struct_arg<T>(&mut self,\n@@ -2872,6 +2882,25 @@ mod tests {\n         assert_eq!(v, vec![vec![3], vec![1, 2]]);\n     }\n \n+    #[test]\n+    fn test_decode_tuple() {\n+        let t: (uint, uint, uint) = super::decode(\"[1, 2, 3]\").unwrap();\n+        assert_eq!(t, (1u, 2, 3))\n+\n+        let t: (uint, string::String) = super::decode(\"[1, \\\"two\\\"]\").unwrap();\n+        assert_eq!(t, (1u, \"two\".to_string()));\n+    }\n+\n+    #[test]\n+    fn test_decode_tuple_malformed_types() {\n+        assert!(super::decode::<(uint, string::String)>(\"[1, 2]\").is_err());\n+    }\n+\n+    #[test]\n+    fn test_decode_tuple_malformed_length() {\n+        assert!(super::decode::<(uint, uint)>(\"[1, 2, 3]\").is_err());\n+    }\n+\n     #[test]\n     fn test_read_object() {\n         assert_eq!(from_str(\"{\"),       Err(SyntaxError(EOFWhileParsingObject, 1, 2)));"}, {"sha": "b7c37defbfa4e72702b6add27ff2e6fb6993dfb6", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3327ecca422046699315122345c6c050ab73804b/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3327ecca422046699315122345c6c050ab73804b/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=3327ecca422046699315122345c6c050ab73804b", "patch": "@@ -142,12 +142,13 @@ pub trait Decoder<E> {\n                             f: |&mut Self| -> Result<T, E>)\n                             -> Result<T, E>;\n \n-    fn read_tuple<T>(&mut self, f: |&mut Self, uint| -> Result<T, E>) -> Result<T, E>;\n+    fn read_tuple<T>(&mut self, len: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;\n     fn read_tuple_arg<T>(&mut self, a_idx: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;\n \n     fn read_tuple_struct<T>(&mut self,\n                             s_name: &str,\n-                            f: |&mut Self, uint| -> Result<T, E>)\n+                            len: uint,\n+                            f: |&mut Self| -> Result<T, E>)\n                             -> Result<T, E>;\n     fn read_tuple_struct_arg<T>(&mut self,\n                                 a_idx: uint,\n@@ -465,20 +466,24 @@ impl<E, D:Decoder<E>,T:Decodable<D, E>> Decodable<D, E> for Option<T> {\n \n macro_rules! peel(($name:ident, $($other:ident,)*) => (tuple!($($other,)*)))\n \n+/// Evaluates to the number of identifiers passed to it, for example: `count_idents!(a, b, c) == 3\n+macro_rules! count_idents {\n+    () => { 0u };\n+    ($_i:ident $(, $rest:ident)*) => { 1 + count_idents!($($rest),*) }\n+}\n+\n macro_rules! tuple (\n     () => ();\n     ( $($name:ident,)+ ) => (\n         impl<E, D:Decoder<E>,$($name:Decodable<D, E>),*> Decodable<D,E> for ($($name,)*) {\n             #[allow(non_snake_case)]\n             fn decode(d: &mut D) -> Result<($($name,)*), E> {\n-                d.read_tuple(|d, amt| {\n+                let len: uint = count_idents!($($name),*);\n+                d.read_tuple(len, |d| {\n                     let mut i = 0;\n                     let ret = ($(try!(d.read_tuple_arg({ i+=1; i-1 }, |d| -> Result<$name,E> {\n                         Decodable::decode(d)\n                     })),)*);\n-                    assert!(amt == i,\n-                            \"expected tuple of length `{}`, found tuple \\\n-                             of length `{}`\", i, amt);\n                     return Ok(ret);\n                 })\n             }"}]}