{"sha": "23d82761f7e4b273b2b299904279e45ced3e5a1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDgyNzYxZjdlNGIyNzNiMmIyOTk5MDQyNzllNDVjZWQzZTVhMWY=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-11-06T19:01:27Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2020-11-06T19:01:27Z"}, "message": "<[T]>::reverse: Fix pointer provenance rules", "tree": {"sha": "9f52baf25cd806c41258757b4cae5178f6c8b069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f52baf25cd806c41258757b4cae5178f6c8b069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d82761f7e4b273b2b299904279e45ced3e5a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d82761f7e4b273b2b299904279e45ced3e5a1f", "html_url": "https://github.com/rust-lang/rust/commit/23d82761f7e4b273b2b299904279e45ced3e5a1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d82761f7e4b273b2b299904279e45ced3e5a1f/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc06a36074f04c6a77b5834f2950011d49607898", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc06a36074f04c6a77b5834f2950011d49607898", "html_url": "https://github.com/rust-lang/rust/commit/dc06a36074f04c6a77b5834f2950011d49607898"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "de6b3ced52119a6e90003b66a75326d0795466a2", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23d82761f7e4b273b2b299904279e45ced3e5a1f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d82761f7e4b273b2b299904279e45ced3e5a1f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=23d82761f7e4b273b2b299904279e45ced3e5a1f", "patch": "@@ -605,8 +605,9 @@ impl<T> [T] {\n                 //     many bytes away from the end of `self`.\n                 //   - Any initialized memory is valid `usize`.\n                 unsafe {\n-                    let pa: *mut T = self.get_unchecked_mut(i);\n-                    let pb: *mut T = self.get_unchecked_mut(ln - i - chunk);\n+                    let ptr = self.as_mut_ptr();\n+                    let pa = ptr.add(i);\n+                    let pb = ptr.add(ln - i - chunk);\n                     let va = ptr::read_unaligned(pa as *mut usize);\n                     let vb = ptr::read_unaligned(pb as *mut usize);\n                     ptr::write_unaligned(pa as *mut usize, vb.swap_bytes());\n@@ -635,8 +636,9 @@ impl<T> [T] {\n                 // always respected, ensuring the `pb` pointer can be used\n                 // safely.\n                 unsafe {\n-                    let pa: *mut T = self.get_unchecked_mut(i);\n-                    let pb: *mut T = self.get_unchecked_mut(ln - i - chunk);\n+                    let ptr = self.as_mut_ptr();\n+                    let pa = ptr.add(i);\n+                    let pb = ptr.add(ln - i - chunk);\n                     let va = ptr::read_unaligned(pa as *mut u32);\n                     let vb = ptr::read_unaligned(pb as *mut u32);\n                     ptr::write_unaligned(pa as *mut u32, vb.rotate_left(16));\n@@ -654,8 +656,9 @@ impl<T> [T] {\n             // aligned, and can be read from and written to.\n             unsafe {\n                 // Unsafe swap to avoid the bounds check in safe swap.\n-                let pa: *mut T = self.get_unchecked_mut(i);\n-                let pb: *mut T = self.get_unchecked_mut(ln - i - 1);\n+                let ptr = self.as_mut_ptr();\n+                let pa = ptr.add(i);\n+                let pb = ptr.add(ln - i - 1);\n                 ptr::swap(pa, pb);\n             }\n             i += 1;"}]}