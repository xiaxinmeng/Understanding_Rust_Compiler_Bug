{"sha": "c3ab4f28d37c9577dc401a08a72f82b752d32e53", "node_id": "C_kwDOAAsO6NoAKGMzYWI0ZjI4ZDM3Yzk1NzdkYzQwMWEwOGE3MmY4MmI3NTJkMzJlNTM", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2023-05-15T10:05:10Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2023-05-15T10:05:10Z"}, "message": "Add CopyForDeref to custom MIR", "tree": {"sha": "5f1cec1803480a5ae840e48ea5a36cf73ce4b16a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f1cec1803480a5ae840e48ea5a36cf73ce4b16a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ab4f28d37c9577dc401a08a72f82b752d32e53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmRiA9YACgkQGBtJ+fOP\nM3QZngv/fpsEvObM8Y9vqT5OhqKojD2noN93WbF58njha4ww45R3RSqQj4gMrLgP\njRjlAa5UzTZmLuCuJu2cLo7NaJbLQ4WgT1Tp1KcHGZkxceYu+UsIudUi5tpmPYBg\nJJcZ8W7Po7rksXH8V2CPjXAdZ8jGzk/iXwwMWaJfIZRs/Q3P1EcGCLnBggiNtWLu\nFXXB1amCmhlpSrhCT8XiYNr6KK6iaC/PnwizsLQ61RcP0spbXW55UwzCXrrwMChb\nmnCabw/UxzRlN2FKSYxqtygXg6iphWnhXkiokcTAXKEz4x2EqP/PwXCe+QJ65/aH\nKNWbDSVrmizwd2GfoVw3RqRUlmS/M6uzJnSBqusdnDnz4iiVo5UEwAtmpe+3TqrY\nlKDyFbZBimfG6rHmc3KTN9oh9LoNmxYSOclZ3nCmqv2hNxneNZnWpQu0+92r/eqF\nanX3WVTKdCS8jqr4rgKWHQoqKkYyPC2dfUTbEQhSpU8LswFrmtDWOcGZCYlUFrN/\nev13s7Ao\n=bBo1\n-----END PGP SIGNATURE-----", "payload": "tree 5f1cec1803480a5ae840e48ea5a36cf73ce4b16a\nparent 0bcfd2d96efe7a2cb5205c3af1b9eea17423fe65\nauthor Andy Wang <cbeuw.andy@gmail.com> 1684145110 +0200\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1684145110 +0200\n\nAdd CopyForDeref to custom MIR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ab4f28d37c9577dc401a08a72f82b752d32e53", "html_url": "https://github.com/rust-lang/rust/commit/c3ab4f28d37c9577dc401a08a72f82b752d32e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ab4f28d37c9577dc401a08a72f82b752d32e53/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bcfd2d96efe7a2cb5205c3af1b9eea17423fe65", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcfd2d96efe7a2cb5205c3af1b9eea17423fe65", "html_url": "https://github.com/rust-lang/rust/commit/0bcfd2d96efe7a2cb5205c3af1b9eea17423fe65"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "b74422708ce5cbf9478317897d4e53a05a747097", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3ab4f28d37c9577dc401a08a72f82b752d32e53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ab4f28d37c9577dc401a08a72f82b752d32e53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=c3ab4f28d37c9577dc401a08a72f82b752d32e53", "patch": "@@ -154,6 +154,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                 Ok(Rvalue::BinaryOp(BinOp::Offset, Box::new((ptr, offset))))\n             },\n             @call(\"mir_len\", args) => Ok(Rvalue::Len(self.parse_place(args[0])?)),\n+            @call(\"mir_copy_for_deref\", args) => Ok(Rvalue::CopyForDeref(self.parse_place(args[0])?)),\n             ExprKind::Borrow { borrow_kind, arg } => Ok(\n                 Rvalue::Ref(self.tcx.lifetimes.re_erased, *borrow_kind, self.parse_place(*arg)?)\n             ),"}, {"sha": "b1a112849d8d8570b8fedf2305ec251c066820d8", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3ab4f28d37c9577dc401a08a72f82b752d32e53/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ab4f28d37c9577dc401a08a72f82b752d32e53/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=c3ab4f28d37c9577dc401a08a72f82b752d32e53", "patch": "@@ -279,6 +279,7 @@ define!(\"mir_storage_dead\", fn StorageDead<T>(local: T));\n define!(\"mir_deinit\", fn Deinit<T>(place: T));\n define!(\"mir_checked\", fn Checked<T>(binop: T) -> (T, bool));\n define!(\"mir_len\", fn Len<T>(place: T) -> usize);\n+define!(\"mir_copy_for_deref\", fn CopyForDeref<T>(place: T) -> T);\n define!(\"mir_retag\", fn Retag<T>(place: T));\n define!(\"mir_move\", fn Move<T>(place: T) -> T);\n define!(\"mir_static\", fn Static<T>(s: T) -> &'static T);"}, {"sha": "5233d0489c63f063c6016fb58f3683cb615e4b1c", "filename": "tests/mir-opt/building/custom/projections.copy_for_deref.built.after.mir", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3ab4f28d37c9577dc401a08a72f82b752d32e53/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c3ab4f28d37c9577dc401a08a72f82b752d32e53/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir?ref=c3ab4f28d37c9577dc401a08a72f82b752d32e53", "patch": "@@ -0,0 +1,12 @@\n+// MIR for `copy_for_deref` after built\n+\n+fn copy_for_deref(_1: (&i32, i32)) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:38: +0:41\n+    let mut _2: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _2 = deref_copy (_1.0: &i32);    // scope 0 at $DIR/projections.rs:+4:13: +4:37\n+        _0 = (*_2);                      // scope 0 at $DIR/projections.rs:+5:13: +5:24\n+        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n+    }\n+}"}, {"sha": "bd6db0e5c4c90faf8a2c0eadbb0287440881d6d7", "filename": "tests/mir-opt/building/custom/projections.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3ab4f28d37c9577dc401a08a72f82b752d32e53/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ab4f28d37c9577dc401a08a72f82b752d32e53/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs?ref=c3ab4f28d37c9577dc401a08a72f82b752d32e53", "patch": "@@ -71,6 +71,19 @@ fn simple_index(a: [i32; 10], b: &[i32]) -> i32 {\n     })\n }\n \n+// EMIT_MIR projections.copy_for_deref.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+fn copy_for_deref(x: (&i32, i32)) -> i32 {\n+    mir!(\n+        let temp: &i32;\n+        {\n+            temp = CopyForDeref(x.0);\n+            RET = *temp;\n+            Return()\n+        }\n+    )\n+}\n+\n fn main() {\n     assert_eq!(unions(U { a: 5 }), 5);\n     assert_eq!(tuples((5, 6)), (5, 6));\n@@ -82,4 +95,7 @@ fn main() {\n     assert_eq!(o, Some(10));\n \n     assert_eq!(simple_index([0; 10], &[0; 10]), 0);\n+\n+    let one = 1;\n+    assert_eq!(copy_for_deref((&one, one)), 1);\n }"}]}