{"sha": "ce486d538b909658f72d6016dae758f075089d3c", "node_id": "C_kwDOAAsO6NoAKGNlNDg2ZDUzOGI5MDk2NThmNzJkNjAxNmRhZTc1OGYwNzUwODlkM2M", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-11T19:38:43Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-11T19:38:43Z"}, "message": "Use `with_forced_trimmed_paths`", "tree": {"sha": "bd1acfadde5a9ff9847838d541ea7ca9c3bfa81c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd1acfadde5a9ff9847838d541ea7ca9c3bfa81c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce486d538b909658f72d6016dae758f075089d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce486d538b909658f72d6016dae758f075089d3c", "html_url": "https://github.com/rust-lang/rust/commit/ce486d538b909658f72d6016dae758f075089d3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce486d538b909658f72d6016dae758f075089d3c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9ffa379e2b6e0d8f4813c035daf6c567887c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9ffa379e2b6e0d8f4813c035daf6c567887c1e", "html_url": "https://github.com/rust-lang/rust/commit/8d9ffa379e2b6e0d8f4813c035daf6c567887c1e"}], "stats": {"total": 113, "additions": 64, "deletions": 49}, "files": [{"sha": "adc64463b3b7aefa64d91e30b90cf502295e036d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ce486d538b909658f72d6016dae758f075089d3c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce486d538b909658f72d6016dae758f075089d3c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ce486d538b909658f72d6016dae758f075089d3c", "patch": "@@ -2394,12 +2394,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 err.note(\"only the last element of a tuple may have a dynamically sized type\");\n             }\n             ObligationCauseCode::ProjectionWf(data) => {\n-                err.note(&format!(\"required so that the projection `{}` is well-formed\", data,));\n+                err.note(&format!(\"required so that the projection `{data}` is well-formed\"));\n             }\n             ObligationCauseCode::ReferenceOutlivesReferent(ref_ty) => {\n                 err.note(&format!(\n-                    \"required so that reference `{}` does not outlive its referent\",\n-                    ref_ty,\n+                    \"required so that reference `{ref_ty}` does not outlive its referent\"\n                 ));\n             }\n             ObligationCauseCode::ObjectTypeBound(object_ty, region) => {\n@@ -2859,7 +2858,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 if ty.references_error() {\n                                     String::new()\n                                 } else {\n-                                    format!(\"this tail expression is of type `{:?}`\", ty)\n+                                    let ty = with_forced_trimmed_paths!(self.ty_to_string(ty));\n+                                    format!(\"this tail expression is of type `{ty}`\")\n                                 },\n                             );\n                         }\n@@ -2962,9 +2962,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 ));\n                                 if ocx.select_where_possible().is_empty() {\n                                     // `ty_var` now holds the type that `Item` is for `ExprTy`.\n-                                    let assoc = self.tcx.def_path_str(proj.item_def_id);\n                                     let ty_var = self.resolve_vars_if_possible(ty_var);\n-                                    assocs_in_this_method.push(Some((span, (assoc, ty_var))));\n+                                    assocs_in_this_method\n+                                        .push(Some((span, (proj.item_def_id, ty_var))));\n                                 } else {\n                                     // `<ExprTy as Iterator>` didn't select, so likely we've\n                                     // reached the end of the iterator chain, like the originating\n@@ -2994,7 +2994,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         // We want the type before deref coercions, otherwise we talk about `&[_]`\n                         // instead of `Vec<_>`.\n                         if let Some(ty) = typeck_results.expr_ty_opt(expr) {\n-                            let ty = self.resolve_vars_if_possible(ty);\n+                            let ty = with_forced_trimmed_paths!(self.ty_to_string(ty));\n                             // Point at the root expression\n                             // vec![1, 2, 3].iter().map(mapper).sum<i32>()\n                             // ^^^^^^^^^^^^^\n@@ -3021,7 +3021,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                     }\n                                     span_labels.push((\n                                         span,\n-                                        format!(\"`{assoc}` is `{ty}` here\"),\n+                                        with_forced_trimmed_paths!(format!(\n+                                            \"`{}` is `{ty}` here\",\n+                                            self.tcx.def_path_str(assoc),\n+                                        )),\n                                     ));\n                                 }\n                                 break;\n@@ -3031,6 +3034,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             {\n                                 match (entry, prev_entry) {\n                                     (Some((span, (assoc, ty))), Some((_, (_, prev_ty)))) => {\n+                                        let ty_str =\n+                                            with_forced_trimmed_paths!(self.ty_to_string(ty));\n+\n+                                        let assoc = with_forced_trimmed_paths!(\n+                                            self.tcx.def_path_str(assoc)\n+                                        );\n                                         if ty != *prev_ty {\n                                             if type_diffs.iter().any(|diff| {\n                                                 let Sorts(expected_found) = diff else { return false; };\n@@ -3040,18 +3049,24 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                             }\n                                             span_labels.push((\n                                                 span,\n-                                                format!(\"`{assoc}` changed to `{ty}` here\"),\n+                                                format!(\"`{assoc}` changed to `{ty_str}` here\"),\n                                             ));\n                                         } else {\n                                             span_labels.push((\n                                                 span,\n-                                                format!(\"`{assoc}` remains `{ty}` here\"),\n+                                                format!(\"`{assoc}` remains `{ty_str}` here\"),\n                                             ));\n                                         }\n                                     }\n                                     (Some((span, (assoc, ty))), None) => {\n-                                        span_labels\n-                                            .push((span, format!(\"`{assoc}` is `{ty}` here\")));\n+                                        span_labels.push((\n+                                            span,\n+                                            with_forced_trimmed_paths!(format!(\n+                                                \"`{}` is `{}` here\",\n+                                                self.tcx.def_path_str(assoc),\n+                                                self.ty_to_string(ty),\n+                                            )),\n+                                        ));\n                                     }\n                                     (None, Some(_)) | (None, None) => {}\n                                 }\n@@ -3151,7 +3166,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n             ObligationCauseCode::OpaqueReturnType(expr_info) => {\n                 if let Some((expr_ty, expr_span)) = expr_info {\n-                    let expr_ty = self.resolve_vars_if_possible(expr_ty);\n+                    let expr_ty = with_forced_trimmed_paths!(self.ty_to_string(expr_ty));\n                     err.span_label(\n                         expr_span,\n                         format!(\"return type was inferred to be `{expr_ty}` here\"),"}, {"sha": "c7ed8e0de384ce5eb3655f8b9bc8e2f39e99429a", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr?ref=ce486d538b909658f72d6016dae758f075089d3c", "patch": "@@ -14,7 +14,7 @@ LL |       let p = Some(45).and_then({\n LL | |\n LL | |         |x| println!(\"doubling {}\", x);\n LL | |         Some(x * 2)\n-   | |         ----------- this tail expression is of type `std::option::Option<_>`\n+   | |         ----------- this tail expression is of type `Option<_>`\n LL | |\n LL | |     });\n    | |_____^ expected an `FnOnce<({integer},)>` closure, found `Option<_>`"}, {"sha": "a86da627b7edb057b96238ede6a82266d1336841", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=ce486d538b909658f72d6016dae758f075089d3c", "patch": "@@ -29,9 +29,9 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n    |                               ------ this expression has type `Vec<(_, _, _)>`\n ...\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-   |                                    ------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `()` here\n+   |                                    ------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Iterator::Item` changed to `()` here\n    |                                    |\n-   |                                    `std::iter::Iterator::Item` is `&(_, _, _)` here\n+   |                                    `Iterator::Item` is `&(_, _, _)` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "7dd135d91fb2f3576ff640bc58588c1d95449e78", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=ce486d538b909658f72d6016dae758f075089d3c", "patch": "@@ -14,7 +14,7 @@ note: the method call chain might not have had the expected associated types\n LL |     let x1: &[f64] = &v;\n    |                      -- this expression has type `&Vec<f64>`\n LL |     let x2: Vec<f64> = x1.into_iter().collect();\n-   |                           ^^^^^^^^^^^ `std::iter::Iterator::Item` is `&f64` here\n+   |                           ^^^^^^^^^^^ `Iterator::Item` is `&f64` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n@@ -38,7 +38,7 @@ LL |     let x1: &[f64] = &v;\n    |                      -- this expression has type `&Vec<f64>`\n ...\n LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n-   |                 ^^^^^^^^^^^ `std::iter::Iterator::Item` is `&f64` here\n+   |                 ^^^^^^^^^^^ `Iterator::Item` is `&f64` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "f8464c7ce766c0f00c9b326243bb63798ef986cd", "filename": "src/test/ui/iterators/invalid-iterator-chain.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr?ref=ce486d538b909658f72d6016dae758f075089d3c", "patch": "@@ -16,17 +16,17 @@ note: the method call chain might not have had the expected associated types\n LL |       let scores = vec![(0, 0)]\n    |                    ------------ this expression has type `Vec<({integer}, {integer})>`\n LL |           .iter()\n-   |            ------ `std::iter::Iterator::Item` is `&({integer}, {integer})` here\n+   |            ------ `Iterator::Item` is `&({integer}, {integer})` here\n LL |           .map(|(a, b)| {\n    |  __________^\n LL | |             a + b;\n LL | |         });\n-   | |__________^ `std::iter::Iterator::Item` changed to `()` here\n+   | |__________^ `Iterator::Item` changed to `()` here\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n+   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `()`\n   --> $DIR/invalid-iterator-chain.rs:10:9\n@@ -52,24 +52,24 @@ note: the method call chain might not have had the expected associated types\n LL |         vec![0, 1]\n    |         ---------- this expression has type `Vec<{integer}>`\n LL |             .iter()\n-   |              ------ `std::iter::Iterator::Item` is `&{integer}` here\n+   |              ------ `Iterator::Item` is `&{integer}` here\n LL |             .map(|x| x * 2)\n-   |              ^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `{integer}` here\n+   |              ^^^^^^^^^^^^^^ `Iterator::Item` changed to `{integer}` here\n LL |             .map(|x| x as f64)\n-   |              ----------------- `std::iter::Iterator::Item` changed to `f64` here\n+   |              ----------------- `Iterator::Item` changed to `f64` here\n LL |             .map(|x| x as i64)\n-   |              ----------------- `std::iter::Iterator::Item` changed to `i64` here\n+   |              ----------------- `Iterator::Item` changed to `i64` here\n LL |             .filter(|x| *x > 0)\n-   |              ------------------ `std::iter::Iterator::Item` remains `i64` here\n+   |              ------------------ `Iterator::Item` remains `i64` here\n LL |             .map(|x| { x + 1 })\n-   |              ------------------ `std::iter::Iterator::Item` remains `i64` here\n+   |              ------------------ `Iterator::Item` remains `i64` here\n LL |             .map(|x| { x; })\n-   |              ^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `()` here\n+   |              ^^^^^^^^^^^^^^^ `Iterator::Item` changed to `()` here\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n+   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `f64`\n   --> $DIR/invalid-iterator-chain.rs:22:9\n@@ -94,20 +94,20 @@ note: the method call chain might not have had the expected associated types\n LL |         vec![0, 1]\n    |         ---------- this expression has type `Vec<{integer}>`\n LL |             .iter()\n-   |              ------ `std::iter::Iterator::Item` is `&{integer}` here\n+   |              ------ `Iterator::Item` is `&{integer}` here\n LL |             .map(|x| x * 2)\n-   |              ^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `{integer}` here\n+   |              ^^^^^^^^^^^^^^ `Iterator::Item` changed to `{integer}` here\n LL |             .map(|x| x as f64)\n-   |              ^^^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `f64` here\n+   |              ^^^^^^^^^^^^^^^^^ `Iterator::Item` changed to `f64` here\n LL |             .filter(|x| *x > 0.0)\n-   |              -------------------- `std::iter::Iterator::Item` remains `f64` here\n+   |              -------------------- `Iterator::Item` remains `f64` here\n LL |             .map(|x| { x + 1.0 })\n-   |              -------------------- `std::iter::Iterator::Item` remains `f64` here\n+   |              -------------------- `Iterator::Item` remains `f64` here\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n+   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `()`\n   --> $DIR/invalid-iterator-chain.rs:30:20\n@@ -125,15 +125,15 @@ note: the method call chain might not have had the expected associated types\n   --> $DIR/invalid-iterator-chain.rs:30:38\n    |\n LL |     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>());\n-   |                    ---------- ------ ^^^^^^^^^^^^^^^ `std::iter::Iterator::Item` changed to `()` here\n+   |                    ---------- ------ ^^^^^^^^^^^^^^^ `Iterator::Item` changed to `()` here\n    |                    |          |\n-   |                    |          `std::iter::Iterator::Item` is `&{integer}` here\n+   |                    |          `Iterator::Item` is `&{integer}` here\n    |                    this expression has type `Vec<{integer}>`\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n+   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `&()`\n   --> $DIR/invalid-iterator-chain.rs:31:20\n@@ -151,14 +151,14 @@ note: the method call chain might not have had the expected associated types\n   --> $DIR/invalid-iterator-chain.rs:31:33\n    |\n LL |     println!(\"{}\", vec![(), ()].iter().sum::<i32>());\n-   |                    ------------ ^^^^^^ `std::iter::Iterator::Item` is `&()` here\n+   |                    ------------ ^^^^^^ `Iterator::Item` is `&()` here\n    |                    |\n    |                    this expression has type `Vec<()>`\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         S: Sum<Self::Item>,\n-   |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n+   |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`\n \n error[E0277]: a value of type `Vec<i32>` cannot be built from an iterator over elements of type `()`\n   --> $DIR/invalid-iterator-chain.rs:40:23\n@@ -176,23 +176,23 @@ note: the method call chain might not have had the expected associated types\n LL |       let a = vec![0];\n    |               ------- this expression has type `Vec<{integer}>`\n LL |       let b = a.into_iter();\n-   |                 ----------- `std::iter::Iterator::Item` is `{integer}` here\n+   |                 ----------- `Iterator::Item` is `{integer}` here\n LL |       let c = b.map(|x| x + 1);\n-   |                 -------------- `std::iter::Iterator::Item` remains `{integer}` here\n+   |                 -------------- `Iterator::Item` remains `{integer}` here\n LL |       let d = c.filter(|x| *x > 10 );\n-   |                 -------------------- `std::iter::Iterator::Item` remains `{integer}` here\n+   |                 -------------------- `Iterator::Item` remains `{integer}` here\n LL |       let e = d.map(|x| {\n    |  _______________^\n LL | |         x + 1;\n LL | |     });\n-   | |______^ `std::iter::Iterator::Item` changed to `()` here\n+   | |______^ `Iterator::Item` changed to `()` here\n LL |       let f = e.filter(|_| false);\n-   |                 ----------------- `std::iter::Iterator::Item` remains `()` here\n+   |                 ----------------- `Iterator::Item` remains `()` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2db1cc4b776905e8fdb3c0086602a1057a91e607", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=ce486d538b909658f72d6016dae758f075089d3c", "patch": "@@ -5,7 +5,7 @@ LL |     foo(panic!())\n    |     --- ^^^^^^^^\n    |     |   |\n    |     |   the trait `T` is not implemented for `()`\n-   |     |   this tail expression is of type `_`\n+   |     |   this tail expression is of type `()`\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`"}, {"sha": "c99f06da7a4d1ebe3547d1d0d496eb06fd29743d", "filename": "src/test/ui/on-unimplemented/sum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce486d538b909658f72d6016dae758f075089d3c/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr?ref=ce486d538b909658f72d6016dae758f075089d3c", "patch": "@@ -14,7 +14,7 @@ note: the method call chain might not have had the expected associated types\n   --> $DIR/sum.rs:4:18\n    |\n LL |     vec![(), ()].iter().sum::<i32>();\n-   |     ------------ ^^^^^^ `std::iter::Iterator::Item` is `&()` here\n+   |     ------------ ^^^^^^ `Iterator::Item` is `&()` here\n    |     |\n    |     this expression has type `Vec<()>`\n note: required by a bound in `std::iter::Iterator::sum`\n@@ -39,7 +39,7 @@ note: the method call chain might not have had the expected associated types\n   --> $DIR/sum.rs:7:18\n    |\n LL |     vec![(), ()].iter().product::<i32>();\n-   |     ------------ ^^^^^^ `std::iter::Iterator::Item` is `&()` here\n+   |     ------------ ^^^^^^ `Iterator::Item` is `&()` here\n    |     |\n    |     this expression has type `Vec<()>`\n note: required by a bound in `std::iter::Iterator::product`"}]}