{"sha": "ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOTZmZDc3ODc0YmI3OTY4YjdkODJiZWQ1YTQxMGQzOTQxYmM0Yzg=", "commit": {"author": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2017-06-12T19:21:53Z"}, "committer": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2017-06-15T19:42:37Z"}, "message": "Avoid allocations in Debug for os_str\n\nFixes #38879", "tree": {"sha": "57bf556685e5b2c29ef59dd13fb3b45177b66054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57bf556685e5b2c29ef59dd13fb3b45177b66054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "html_url": "https://github.com/rust-lang/rust/commit/ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/comments", "author": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea149b8571d538fc8bb2117e46161d442aef48a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea149b8571d538fc8bb2117e46161d442aef48a4", "html_url": "https://github.com/rust-lang/rust/commit/ea149b8571d538fc8bb2117e46161d442aef48a4"}], "stats": {"total": 152, "additions": 117, "deletions": 35}, "files": [{"sha": "f54d79c201f4869ae9fa01b0d499e89f97a85d3b", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use borrow::{Borrow, Cow};\n-use fmt::{self, Debug};\n+use fmt;\n use mem;\n use ops;\n use cmp;\n@@ -312,8 +312,8 @@ impl Default for OsString {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Debug for OsString {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+impl fmt::Debug for OsString {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }\n@@ -669,9 +669,15 @@ impl Hash for OsStr {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Debug for OsStr {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        self.inner.fmt(formatter)\n+impl fmt::Debug for OsStr {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&self.inner, formatter)\n+    }\n+}\n+\n+impl OsStr {\n+    pub(crate) fn display(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&self.inner, formatter)\n     }\n }\n "}, {"sha": "42a54ed6d754c9dfbcafd38641eff8ffc723252e", "filename": "src/libstd/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "patch": "@@ -2281,8 +2281,8 @@ impl AsRef<OsStr> for Path {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for Path {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        self.inner.fmt(formatter)\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&self.inner, formatter)\n     }\n }\n \n@@ -2314,14 +2314,14 @@ pub struct Display<'a> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> fmt::Debug for Display<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(&self.path.to_string_lossy(), f)\n+        fmt::Debug::fmt(&self.path, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> fmt::Display for Display<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&self.path.to_string_lossy(), f)\n+        self.path.inner.display(f)\n     }\n }\n "}, {"sha": "c54286353a92f9c9b60ac3656993e5b1e8455f7b", "filename": "src/libstd/sys/redox/os_str.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs?ref=ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "patch": "@@ -12,10 +12,11 @@\n /// a `Vec<u8>`/`[u8]`.\n \n use borrow::Cow;\n-use fmt::{self, Debug};\n+use fmt;\n use str;\n use mem;\n use sys_common::{AsInner, IntoInner};\n+use std_unicode::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]\n pub struct Buf {\n@@ -26,15 +27,27 @@ pub struct Slice {\n     pub inner: [u8]\n }\n \n-impl Debug for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        self.to_string_lossy().fmt(formatter)\n+impl fmt::Debug for Slice {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n     }\n }\n \n-impl Debug for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        self.as_slice().fmt(formatter)\n+impl fmt::Display for Slice {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n+    }\n+}\n+\n+impl fmt::Debug for Buf {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(self.as_slice(), formatter)\n+    }\n+}\n+\n+impl fmt::Display for Buf {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(self.as_slice(), formatter)\n     }\n }\n "}, {"sha": "777db17e3e164d322ef4cfe649093f07ca2a287c", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "patch": "@@ -12,10 +12,11 @@\n /// a `Vec<u8>`/`[u8]`.\n \n use borrow::Cow;\n-use fmt::{self, Debug};\n+use fmt;\n use str;\n use mem;\n use sys_common::{AsInner, IntoInner};\n+use std_unicode::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]\n pub struct Buf {\n@@ -26,15 +27,27 @@ pub struct Slice {\n     pub inner: [u8]\n }\n \n-impl Debug for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        self.to_string_lossy().fmt(formatter)\n+impl fmt::Debug for Slice {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n     }\n }\n \n-impl Debug for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        self.as_slice().fmt(formatter)\n+impl fmt::Display for Slice {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n+    }\n+}\n+\n+impl fmt::Debug for Buf {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(self.as_slice(), formatter)\n+    }\n+}\n+\n+impl fmt::Display for Buf {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(self.as_slice(), formatter)\n     }\n }\n "}, {"sha": "3eb4582718b517d9b83eda92eca5e1160b21bf41", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "patch": "@@ -12,7 +12,7 @@\n /// wrapper around the \"WTF-8\" encoding; see the `wtf8` module for more.\n \n use borrow::Cow;\n-use fmt::{self, Debug};\n+use fmt;\n use sys_common::wtf8::{Wtf8, Wtf8Buf};\n use mem;\n use sys_common::{AsInner, IntoInner};\n@@ -34,19 +34,31 @@ impl AsInner<Wtf8> for Buf {\n     }\n }\n \n-impl Debug for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        self.as_slice().fmt(formatter)\n+impl fmt::Debug for Buf {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(self.as_slice(), formatter)\n+    }\n+}\n+\n+impl fmt::Display for Buf {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(self.as_slice(), formatter)\n     }\n }\n \n pub struct Slice {\n     pub inner: Wtf8\n }\n \n-impl Debug for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        self.inner.fmt(formatter)\n+impl fmt::Debug for Slice {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&self.inner, formatter)\n+    }\n+}\n+\n+impl fmt::Display for Slice {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&self.inner, formatter)\n     }\n }\n "}, {"sha": "4e4a6e77d124205ee36d9236b4fce1d257bbd4b8", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac96fd77874bb7968b7d82bed5a410d3941bc4c8/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=ac96fd77874bb7968b7d82bed5a410d3941bc4c8", "patch": "@@ -39,7 +39,7 @@ use slice;\n use str;\n use sys_common::AsInner;\n \n-const UTF8_REPLACEMENT_CHARACTER: &'static [u8] = b\"\\xEF\\xBF\\xBD\";\n+const UTF8_REPLACEMENT_CHARACTER: &'static str = \"\\u{FFFD}\";\n \n /// A Unicode code point: from U+0000 to U+10FFFF.\n ///\n@@ -339,7 +339,7 @@ impl Wtf8Buf {\n                 Some((surrogate_pos, _)) => {\n                     pos = surrogate_pos + 3;\n                     self.bytes[surrogate_pos..pos]\n-                        .copy_from_slice(UTF8_REPLACEMENT_CHARACTER);\n+                        .copy_from_slice(UTF8_REPLACEMENT_CHARACTER.as_bytes());\n                 },\n                 None => return unsafe { String::from_utf8_unchecked(self.bytes) }\n             }\n@@ -438,6 +438,30 @@ impl fmt::Debug for Wtf8 {\n     }\n }\n \n+impl fmt::Display for Wtf8 {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        let wtf8_bytes = &self.bytes;\n+        let mut pos = 0;\n+        loop {\n+            match self.next_surrogate(pos) {\n+                Some((surrogate_pos, _)) => {\n+                    formatter.write_str(unsafe {\n+                        str::from_utf8_unchecked(&wtf8_bytes[pos .. surrogate_pos])\n+                    })?;\n+                    formatter.write_str(UTF8_REPLACEMENT_CHARACTER)?;\n+                    pos = surrogate_pos + 3;\n+                },\n+                None => {\n+                    formatter.write_str(unsafe {\n+                        str::from_utf8_unchecked(&wtf8_bytes[pos..])\n+                    })?;\n+                    return Ok(());\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl Wtf8 {\n     /// Creates a WTF-8 slice from a UTF-8 `&str` slice.\n     ///\n@@ -516,13 +540,13 @@ impl Wtf8 {\n         let wtf8_bytes = &self.bytes;\n         let mut utf8_bytes = Vec::with_capacity(self.len());\n         utf8_bytes.extend_from_slice(&wtf8_bytes[..surrogate_pos]);\n-        utf8_bytes.extend_from_slice(UTF8_REPLACEMENT_CHARACTER);\n+        utf8_bytes.extend_from_slice(UTF8_REPLACEMENT_CHARACTER.as_bytes());\n         let mut pos = surrogate_pos + 3;\n         loop {\n             match self.next_surrogate(pos) {\n                 Some((surrogate_pos, _)) => {\n                     utf8_bytes.extend_from_slice(&wtf8_bytes[pos .. surrogate_pos]);\n-                    utf8_bytes.extend_from_slice(UTF8_REPLACEMENT_CHARACTER);\n+                    utf8_bytes.extend_from_slice(UTF8_REPLACEMENT_CHARACTER.as_bytes());\n                     pos = surrogate_pos + 3;\n                 },\n                 None => {\n@@ -1200,6 +1224,20 @@ mod tests {\n         assert_eq!(string.to_string_lossy(), expected);\n     }\n \n+    #[test]\n+    fn wtf8_display() {\n+        fn d(b: &[u8]) -> String {\n+            format!(\"{}\", &unsafe { Wtf8::from_bytes_unchecked(b) })\n+        }\n+\n+        assert_eq!(\"\", d(\"\".as_bytes()));\n+        assert_eq!(\"a\u00e9 \ud83d\udca9\", d(\"a\u00e9 \ud83d\udca9\".as_bytes()));\n+\n+        let mut string = Wtf8Buf::from_str(\"a\u00e9 \ud83d\udca9\");\n+        string.push(CodePoint::from_u32(0xD800).unwrap());\n+        assert_eq!(\"a\u00e9 \ud83d\udca9\ufffd\", d(string.as_inner()));\n+    }\n+\n     #[test]\n     fn wtf8_encode_wide() {\n         let mut string = Wtf8Buf::from_str(\"a\u00e9 \");"}]}