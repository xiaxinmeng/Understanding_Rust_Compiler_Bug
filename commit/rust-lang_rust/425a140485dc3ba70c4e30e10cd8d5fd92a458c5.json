{"sha": "425a140485dc3ba70c4e30e10cd8d5fd92a458c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNWExNDA0ODVkYzNiYTcwYzRlMzBlMTBjZDhkNWZkOTJhNDU4YzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-30T22:40:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-02T22:16:07Z"}, "message": "libsyntax: De-`@mut` `quote_depth` in the parser", "tree": {"sha": "f570e95e025778143c9ba017c6c76a57f61b98d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f570e95e025778143c9ba017c6c76a57f61b98d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/425a140485dc3ba70c4e30e10cd8d5fd92a458c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/425a140485dc3ba70c4e30e10cd8d5fd92a458c5", "html_url": "https://github.com/rust-lang/rust/commit/425a140485dc3ba70c4e30e10cd8d5fd92a458c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/425a140485dc3ba70c4e30e10cd8d5fd92a458c5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f499d365ada01a23bd046bac9b1bef7ccdb9fa8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f499d365ada01a23bd046bac9b1bef7ccdb9fa8c", "html_url": "https://github.com/rust-lang/rust/commit/f499d365ada01a23bd046bac9b1bef7ccdb9fa8c"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0f0793e03b7767b8fd3a38b4c0bdf1dd4f4e1829", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/425a140485dc3ba70c4e30e10cd8d5fd92a458c5/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425a140485dc3ba70c4e30e10cd8d5fd92a458c5/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=425a140485dc3ba70c4e30e10cd8d5fd92a458c5", "patch": "@@ -590,7 +590,7 @@ fn expand_tts(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     let mut p = parse::new_parser_from_tts(cx.parse_sess(),\n                                            cx.cfg(),\n                                            tts.to_owned());\n-    *p.quote_depth += 1u;\n+    p.quote_depth += 1u;\n \n     let cx_expr = p.parse_expr();\n     if !p.eat(&token::COMMA) {"}, {"sha": "a14d25305fd5f221af22fa08c074354e89331aab", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/425a140485dc3ba70c4e30e10cd8d5fd92a458c5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425a140485dc3ba70c4e30e10cd8d5fd92a458c5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=425a140485dc3ba70c4e30e10cd8d5fd92a458c5", "patch": "@@ -448,9 +448,9 @@ pub fn parse_nt(p: &mut Parser, name: &str) -> nonterminal {\n       }\n       \"attr\" => token::nt_attr(@p.parse_attribute(false)),\n       \"tt\" => {\n-        *p.quote_depth += 1u; //but in theory, non-quoted tts might be useful\n+        p.quote_depth += 1u; //but in theory, non-quoted tts might be useful\n         let res = token::nt_tt(@p.parse_token_tree());\n-        *p.quote_depth -= 1u;\n+        p.quote_depth -= 1u;\n         res\n       }\n       \"matchers\" => token::nt_matchers(p.parse_matchers()),"}, {"sha": "a1f770a5fdef662bb48ce2e154974a41ba2b9be3", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/425a140485dc3ba70c4e30e10cd8d5fd92a458c5/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425a140485dc3ba70c4e30e10cd8d5fd92a458c5/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=425a140485dc3ba70c4e30e10cd8d5fd92a458c5", "patch": "@@ -175,7 +175,7 @@ pub fn parse_tts_from_source_str(\n         name,\n         source\n     );\n-    *p.quote_depth += 1u;\n+    p.quote_depth += 1u;\n     // right now this is re-creating the token trees from ... token trees.\n     maybe_aborted(p.parse_all_token_trees(),p)\n }"}, {"sha": "806da6988d89bee8f74b965d9b52f3f66792c2ed", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/425a140485dc3ba70c4e30e10cd8d5fd92a458c5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425a140485dc3ba70c4e30e10cd8d5fd92a458c5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=425a140485dc3ba70c4e30e10cd8d5fd92a458c5", "patch": "@@ -315,7 +315,7 @@ pub fn Parser(sess: @mut ParseSess,\n         buffer_end: @mut 0,\n         tokens_consumed: @mut 0,\n         restriction: @mut UNRESTRICTED,\n-        quote_depth: @mut 0,\n+        quote_depth: 0,\n         obsolete_set: @mut HashSet::new(),\n         mod_path_stack: @mut ~[],\n         open_braces: @mut ~[],\n@@ -340,7 +340,7 @@ pub struct Parser {\n     buffer_end: @mut int,\n     tokens_consumed: @mut uint,\n     restriction: @mut restriction,\n-    quote_depth: @mut uint, // not (yet) related to the quasiquoter\n+    quote_depth: uint, // not (yet) related to the quasiquoter\n     reader: @mut reader,\n     interner: @token::ident_interner,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n@@ -2097,7 +2097,7 @@ impl Parser {\n                                   token_str))\n               },\n               /* we ought to allow different depths of unquotation */\n-              token::DOLLAR if *p.quote_depth > 0u => {\n+              token::DOLLAR if p.quote_depth > 0u => {\n                 p.bump();\n                 let sp = *p.span;\n "}]}