{"sha": "1c2c4942a6a3a491274e907becf29f966a870a31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMmM0OTQyYTZhM2E0OTEyNzRlOTA3YmVjZjI5Zjk2NmE4NzBhMzE=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-06T05:14:31Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-06T05:14:31Z"}, "message": "Use byte literals in libdebug", "tree": {"sha": "73d2ffb02fe6485a6be6e88d8924070a3a5f4be4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73d2ffb02fe6485a6be6e88d8924070a3a5f4be4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c2c4942a6a3a491274e907becf29f966a870a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2c4942a6a3a491274e907becf29f966a870a31", "html_url": "https://github.com/rust-lang/rust/commit/1c2c4942a6a3a491274e907becf29f966a870a31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c2c4942a6a3a491274e907becf29f966a870a31/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45a569995e586ff749a76f8c5879d7daa922e34", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45a569995e586ff749a76f8c5879d7daa922e34", "html_url": "https://github.com/rust-lang/rust/commit/d45a569995e586ff749a76f8c5879d7daa922e34"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "b85097e6623dc9d83dd5f7061b61999bcb32e32c", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c2c4942a6a3a491274e907becf29f966a870a31/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2c4942a6a3a491274e907becf29f966a870a31/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=1c2c4942a6a3a491274e907becf29f966a870a31", "patch": "@@ -165,11 +165,11 @@ impl<'a> ReprVisitor<'a> {\n     }\n \n     pub fn write_escaped_slice(&mut self, slice: &str) -> bool {\n-        try!(self, self.writer.write(['\"' as u8]));\n+        try!(self, self.writer.write([b'\"']));\n         for ch in slice.chars() {\n             if !self.write_escaped_char(ch, true) { return false }\n         }\n-        try!(self, self.writer.write(['\"' as u8]));\n+        try!(self, self.writer.write([b'\"']));\n         true\n     }\n \n@@ -188,7 +188,7 @@ impl<'a> ReprVisitor<'a> {\n                            inner: *const TyDesc) -> bool {\n         let mut p = ptr as *const u8;\n         let (sz, al) = unsafe { ((*inner).size, (*inner).align) };\n-        try!(self, self.writer.write(['[' as u8]));\n+        try!(self, self.writer.write([b'[']));\n         let mut first = true;\n         let mut left = len;\n         // unit structs have 0 size, and don't loop forever.\n@@ -203,7 +203,7 @@ impl<'a> ReprVisitor<'a> {\n             p = align(unsafe { p.offset(sz as int) as uint }, al) as *const u8;\n             left -= dec;\n         }\n-        try!(self, self.writer.write([']' as u8]));\n+        try!(self, self.writer.write([b']']));\n         true\n     }\n \n@@ -263,9 +263,9 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_char(&mut self) -> bool {\n         self.get::<char>(|this, &ch| {\n-            try!(this, this.writer.write(['\\'' as u8]));\n+            try!(this, this.writer.write([b'\\'']));\n             if !this.write_escaped_char(ch, false) { return false }\n-            try!(this, this.writer.write(['\\'' as u8]));\n+            try!(this, this.writer.write([b'\\'']));\n             true\n         })\n     }\n@@ -310,7 +310,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n     }\n \n     fn visit_rptr(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        try!(self, self.writer.write(['&' as u8]));\n+        try!(self, self.writer.write([b'&']));\n         self.write_mut_qualifier(mtbl);\n         self.get::<*const u8>(|this, p| {\n             this.visit_ptr_inner(*p, inner)\n@@ -319,7 +319,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_evec_slice(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n         self.get::<raw::Slice<()>>(|this, s| {\n-            try!(this, this.writer.write(['&' as u8]));\n+            try!(this, this.writer.write([b'&']));\n             this.write_mut_qualifier(mtbl);\n             let size = unsafe {\n                 if (*inner).size == 0 { 1 } else { (*inner).size }\n@@ -338,7 +338,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_enter_rec(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool {\n-        try!(self, self.writer.write(['{' as u8]));\n+        try!(self, self.writer.write([b'{']));\n         true\n     }\n \n@@ -356,7 +356,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_leave_rec(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool {\n-        try!(self, self.writer.write(['}' as u8]));\n+        try!(self, self.writer.write([b'}']));\n         true\n     }\n \n@@ -365,9 +365,9 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n         try!(self, self.writer.write(name.as_bytes()));\n         if n_fields != 0 {\n             if named_fields {\n-                try!(self, self.writer.write(['{' as u8]));\n+                try!(self, self.writer.write([b'{']));\n             } else {\n-                try!(self, self.writer.write(['(' as u8]));\n+                try!(self, self.writer.write([b'(']));\n             }\n         }\n         true\n@@ -390,17 +390,17 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n                          _sz: uint, _align: uint) -> bool {\n         if n_fields != 0 {\n             if named_fields {\n-                try!(self, self.writer.write(['}' as u8]));\n+                try!(self, self.writer.write([b'}']));\n             } else {\n-                try!(self, self.writer.write([')' as u8]));\n+                try!(self, self.writer.write([b')']));\n             }\n         }\n         true\n     }\n \n     fn visit_enter_tup(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool {\n-        try!(self, self.writer.write(['(' as u8]));\n+        try!(self, self.writer.write([b'(']));\n         true\n     }\n \n@@ -415,9 +415,9 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n     fn visit_leave_tup(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool {\n         if _n_fields == 1 {\n-            try!(self, self.writer.write([',' as u8]));\n+            try!(self, self.writer.write([b',']));\n         }\n-        try!(self, self.writer.write([')' as u8]));\n+        try!(self, self.writer.write([b')']));\n         true\n     }\n \n@@ -455,7 +455,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n         if write {\n             try!(self, self.writer.write(name.as_bytes()));\n             if n_fields > 0 {\n-                try!(self, self.writer.write(['(' as u8]));\n+                try!(self, self.writer.write([b'(']));\n             }\n         }\n         true\n@@ -487,7 +487,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n         match self.var_stk[self.var_stk.len() - 1] {\n             Matched => {\n                 if n_fields > 0 {\n-                    try!(self, self.writer.write([')' as u8]));\n+                    try!(self, self.writer.write([b')']));\n                 }\n             }\n             _ => ()"}]}