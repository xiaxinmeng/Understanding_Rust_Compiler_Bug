{"sha": "4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNmRjN2Y5YmE5ZmU2MWUzOGQ3MzdiMjliZmU0OTBlODM1ZjY5MjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-14T06:51:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-14T06:51:18Z"}, "message": "Auto merge of #28396 - arielb1:misplaced-binding, r=eddyb\n\nTechnically a [breaking-change], but the broken code is useless,\r\nlike `i32<Param=()>`.\r\n\r\nFixes #24682\r\n\r\nr? @eddyb", "tree": {"sha": "fbf61d9eb18db63be05c2ddfc3fb4fbc75ab072b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf61d9eb18db63be05c2ddfc3fb4fbc75ab072b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "html_url": "https://github.com/rust-lang/rust/commit/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009f2cf7dd97d952b78bb68a95f661cecfb1562f", "url": "https://api.github.com/repos/rust-lang/rust/commits/009f2cf7dd97d952b78bb68a95f661cecfb1562f", "html_url": "https://github.com/rust-lang/rust/commit/009f2cf7dd97d952b78bb68a95f661cecfb1562f"}, {"sha": "5d4455510afe3b7f74e04d3125ef8536a63d9e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4455510afe3b7f74e04d3125ef8536a63d9e60", "html_url": "https://github.com/rust-lang/rust/commit/5d4455510afe3b7f74e04d3125ef8536a63d9e60"}], "stats": {"total": 99, "additions": 66, "deletions": 33}, "files": [{"sha": "9616b596c063827512e49afeabb8ff57239df46e", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "patch": "@@ -1895,6 +1895,7 @@ register_diagnostics! {\n     // E0006 // merged with E0005\n //  E0134,\n //  E0135,\n+    E0229, // associated type bindings are not allowed here\n     E0264, // unknown external lang item\n     E0278, // requirement is not satisfied\n     E0279, // requirement is not satisfied"}, {"sha": "3b837277203972d0a789f9e8abd5e9ce540237e0", "filename": "src/librustc/middle/astconv_util.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs?ref=4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "patch": "@@ -16,36 +16,40 @@\n \n use middle::def;\n use middle::ty::{self, Ty};\n-use rustc_front::hir as ast;\n \n-pub const NO_REGIONS: usize = 1;\n-pub const NO_TPS: usize = 2;\n+use syntax::codemap::Span;\n+use rustc_front::hir as ast;\n \n-pub fn check_path_args(tcx: &ty::ctxt, segments: &[ast::PathSegment], flags: usize) {\n+pub fn prohibit_type_params(tcx: &ty::ctxt, segments: &[ast::PathSegment]) {\n     for segment in segments {\n-        if (flags & NO_TPS) != 0 {\n-            for typ in segment.parameters.types() {\n-                span_err!(tcx.sess, typ.span, E0109,\n-                          \"type parameters are not allowed on this type\");\n-                break;\n-            }\n+        for typ in segment.parameters.types() {\n+            span_err!(tcx.sess, typ.span, E0109,\n+                      \"type parameters are not allowed on this type\");\n+            break;\n         }\n-\n-        if (flags & NO_REGIONS) != 0 {\n-            for lifetime in segment.parameters.lifetimes() {\n-                span_err!(tcx.sess, lifetime.span, E0110,\n-                          \"lifetime parameters are not allowed on this type\");\n-                break;\n-            }\n+        for lifetime in segment.parameters.lifetimes() {\n+            span_err!(tcx.sess, lifetime.span, E0110,\n+                      \"lifetime parameters are not allowed on this type\");\n+            break;\n+        }\n+        for binding in segment.parameters.bindings() {\n+            prohibit_projection(tcx, binding.span);\n+            break;\n         }\n     }\n }\n \n+pub fn prohibit_projection(tcx: &ty::ctxt, span: Span)\n+{\n+    span_err!(tcx.sess, span, E0229,\n+              \"associated type bindings are not allowed here\");\n+}\n+\n pub fn prim_ty_to_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n                            segments: &[ast::PathSegment],\n                            nty: ast::PrimTy)\n                            -> Ty<'tcx> {\n-    check_path_args(tcx, segments, NO_TPS | NO_REGIONS);\n+    prohibit_type_params(tcx, segments);\n     match nty {\n         ast::TyBool => tcx.types.bool,\n         ast::TyChar => tcx.types.char,"}, {"sha": "3883102fb2e47b39698a7bb24357098bebc868de", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "patch": "@@ -48,7 +48,7 @@\n //! case but `&a` in the second.  Basically, defaults that appear inside\n //! an rptr (`&r.T`) use the region `r` that appears in the rptr.\n \n-use middle::astconv_util::{prim_ty_to_ty, check_path_args, NO_TPS, NO_REGIONS};\n+use middle::astconv_util::{prim_ty_to_ty, prohibit_type_params, prohibit_projection};\n use middle::const_eval::{self, ConstVal};\n use middle::const_eval::EvalHint::UncheckedExprHint;\n use middle::def;\n@@ -1210,7 +1210,7 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n \n     debug!(\"associated_path_def_to_ty: {:?}::{}\", ty, assoc_name);\n \n-    check_path_args(tcx, slice::ref_slice(item_segment), NO_TPS | NO_REGIONS);\n+    prohibit_type_params(tcx, slice::ref_slice(item_segment));\n \n     // Find the type of the associated item, and the trait where the associated\n     // item is declared.\n@@ -1312,7 +1312,7 @@ fn qpath_to_ty<'tcx>(this: &AstConv<'tcx>,\n {\n     let tcx = this.tcx();\n \n-    check_path_args(tcx, slice::ref_slice(item_segment), NO_TPS | NO_REGIONS);\n+    prohibit_type_params(tcx, slice::ref_slice(item_segment));\n \n     let self_ty = if let Some(ty) = opt_self_ty {\n         ty\n@@ -1401,7 +1401,7 @@ fn base_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n                                                           base_segments.last().unwrap(),\n                                                           &mut projection_bounds);\n \n-            check_path_args(tcx, base_segments.split_last().unwrap().1, NO_TPS | NO_REGIONS);\n+            prohibit_type_params(tcx, base_segments.split_last().unwrap().1);\n             trait_ref_to_object_type(this,\n                                      rscope,\n                                      span,\n@@ -1410,7 +1410,7 @@ fn base_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n                                      &[])\n         }\n         def::DefTy(did, _) | def::DefStruct(did) => {\n-            check_path_args(tcx, base_segments.split_last().unwrap().1, NO_TPS | NO_REGIONS);\n+            prohibit_type_params(tcx, base_segments.split_last().unwrap().1);\n             ast_path_to_ty(this,\n                            rscope,\n                            span,\n@@ -1419,12 +1419,12 @@ fn base_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n                            base_segments.last().unwrap())\n         }\n         def::DefTyParam(space, index, _, name) => {\n-            check_path_args(tcx, base_segments, NO_TPS | NO_REGIONS);\n+            prohibit_type_params(tcx, base_segments);\n             tcx.mk_param(space, index, name)\n         }\n         def::DefSelfTy(_, Some((_, self_ty_id))) => {\n             // Self in impl (we know the concrete type).\n-            check_path_args(tcx, base_segments, NO_TPS | NO_REGIONS);\n+            prohibit_type_params(tcx, base_segments);\n             if let Some(&ty) = tcx.ast_ty_to_ty_cache.borrow().get(&self_ty_id) {\n                 if let Some(free_substs) = this.get_free_substs() {\n                     ty.subst(tcx, free_substs)\n@@ -1437,11 +1437,11 @@ fn base_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n         }\n         def::DefSelfTy(Some(_), None) => {\n             // Self in trait.\n-            check_path_args(tcx, base_segments, NO_TPS | NO_REGIONS);\n+            prohibit_type_params(tcx, base_segments);\n             tcx.mk_self_type()\n         }\n         def::DefAssociatedTy(trait_did, _) => {\n-            check_path_args(tcx, &base_segments[..base_segments.len()-2], NO_TPS | NO_REGIONS);\n+            prohibit_type_params(tcx, &base_segments[..base_segments.len()-2]);\n             qpath_to_ty(this,\n                         rscope,\n                         span,\n@@ -2185,8 +2185,7 @@ fn prohibit_projections<'tcx>(tcx: &ty::ctxt<'tcx>,\n                               bindings: &[ConvertedBinding<'tcx>])\n {\n     for binding in bindings.iter().take(1) {\n-        span_err!(tcx.sess, binding.span, E0229,\n-            \"associated type bindings are not allowed here\");\n+        prohibit_projection(tcx, binding.span);\n     }\n }\n "}, {"sha": "0185cea60cc72da8d962abef1e0a34db226ea274", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "patch": "@@ -83,7 +83,7 @@ use self::TupleArgumentsFlag::*;\n use astconv::{self, ast_region_to_region, ast_ty_to_ty, AstConv, PathParamMode};\n use check::_match::pat_ctxt;\n use fmt_macros::{Parser, Piece, Position};\n-use middle::astconv_util::{check_path_args, NO_TPS, NO_REGIONS};\n+use middle::astconv_util::prohibit_type_params;\n use middle::def;\n use middle::def_id::{DefId, LOCAL_CRATE};\n use middle::infer;\n@@ -4535,8 +4535,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     for (opt_space, segment) in segment_spaces.iter().zip(segments) {\n         match *opt_space {\n             None => {\n-                check_path_args(fcx.tcx(), slice::ref_slice(segment),\n-                                NO_TPS | NO_REGIONS);\n+                prohibit_type_params(fcx.tcx(), slice::ref_slice(segment));\n             }\n \n             Some(space) => {"}, {"sha": "4bbb33164d23eb6eb8bb07e958b3356fd0319941", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "patch": "@@ -3294,7 +3294,6 @@ register_diagnostics! {\n     E0226, // only a single explicit lifetime bound is permitted\n     E0227, // ambiguous lifetime bound, explicit lifetime bound required\n     E0228, // explicit lifetime bound required\n-    E0229, // associated type bindings are not allowed here\n     E0230, // there is no type parameter on trait\n     E0231, // only named substitution parameters are allowed\n //  E0233,"}, {"sha": "0e872f71df42490274695632ad3de09b10414cb5", "filename": "src/test/compile-fail/issue-24682.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Ftest%2Fcompile-fail%2Fissue-24682.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6dc7f9ba9fe61e38d737b29bfe490e835f6921/src%2Ftest%2Fcompile-fail%2Fissue-24682.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24682.rs?ref=4d6dc7f9ba9fe61e38d737b29bfe490e835f6921", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait A: Sized {\n+    type N;\n+    fn x() ->\n+        Self<\n+          N= //~ ERROR associated type bindings are not allowed here\n+          Self::N> {\n+        loop {}\n+    }\n+    fn y(&self) ->\n+        std\n+           <N=()> //~ ERROR associated type bindings are not allowed here\n+           ::option::Option<()>\n+    { None }\n+    fn z(&self) ->\n+        u32<N=()> //~ ERROR associated type bindings are not allowed here\n+    { 42 }\n+\n+}\n+\n+fn main() {\n+}"}]}