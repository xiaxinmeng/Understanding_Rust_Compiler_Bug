{"sha": "17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "node_id": "C_kwDOAAsO6NoAKDE3YjFhZmRiYjIzNGExY2RmNWRiOTJlYzg2MzljYmQyOTA5YWM2Mjk", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-11T11:52:23Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-02-24T19:54:36Z"}, "message": "resolve: Fix incorrect results of `opt_def_kind` query for some built-in macros\n\nPreviously it always returned `MacroKind::Bang` while some of those macros are actually attributes and derives", "tree": {"sha": "fcb6280ad85de534ce8e37067300d5223d0ad0bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcb6280ad85de534ce8e37067300d5223d0ad0bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "html_url": "https://github.com/rust-lang/rust/commit/17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b043faba34ccc053a4d0110634c323f6c03765e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b043faba34ccc053a4d0110634c323f6c03765e", "html_url": "https://github.com/rust-lang/rust/commit/4b043faba34ccc053a4d0110634c323f6c03765e"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "3ddc7fce1b770aee791d317d493e8778288f4521", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -444,8 +444,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ),\n             ItemKind::MacroDef(MacroDef { ref body, macro_rules }) => {\n                 let body = P(self.lower_mac_args(body));\n-\n-                hir::ItemKind::Macro(ast::MacroDef { body, macro_rules })\n+                let macro_kind = self.resolver.decl_macro_kind(self.resolver.local_def_id(id));\n+                hir::ItemKind::Macro(ast::MacroDef { body, macro_rules }, macro_kind)\n             }\n             ItemKind::MacCall(..) => {\n                 panic!(\"`TyMac` should have been expanded by now\")"}, {"sha": "0156c5016acd1cd3cc8366de1493b08d9ca593b9", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -61,7 +61,7 @@ use rustc_session::lint::LintBuffer;\n use rustc_session::parse::feature_err;\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n-use rustc_span::hygiene::ExpnId;\n+use rustc_span::hygiene::{ExpnId, MacroKind};\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -210,6 +210,8 @@ pub trait ResolverAstLowering {\n         expn_id: ExpnId,\n         span: Span,\n     ) -> LocalDefId;\n+\n+    fn decl_macro_kind(&self, def_id: LocalDefId) -> MacroKind;\n }\n \n /// Context of `impl Trait` in code, which determines whether it is allowed in an HIR subtree,"}, {"sha": "72c02932945ca063329ab10a3166aa0b03e17604", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -15,6 +15,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable_Generic;\n+use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{def_id::LocalDefId, BytePos, MultiSpan, Span, DUMMY_SP};\n@@ -2803,7 +2804,7 @@ pub enum ItemKind<'hir> {\n     /// A function declaration.\n     Fn(FnSig<'hir>, Generics<'hir>, BodyId),\n     /// A MBE macro definition (`macro_rules!` or `macro`).\n-    Macro(ast::MacroDef),\n+    Macro(ast::MacroDef, MacroKind),\n     /// A module.\n     Mod(Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`."}, {"sha": "1b40f3d390ee59dedaaa266035821931afb96594", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -575,7 +575,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             item.span,\n             item.hir_id(),\n         ),\n-        ItemKind::Macro(_) => {\n+        ItemKind::Macro(..) => {\n             visitor.visit_id(item.hir_id());\n         }\n         ItemKind::Mod(ref module) => {"}, {"sha": "b3042c61002c4fae7f129ea618ece77c66bffea3", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -570,7 +570,7 @@ impl<'a> State<'a> {\n                 self.end(); // need to close a box\n                 self.ann.nested(self, Nested::Body(body));\n             }\n-            hir::ItemKind::Macro(ref macro_def) => {\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n                 self.print_mac_def(macro_def, &item.ident, item.span, |state| {\n                     state.print_visibility(&item.vis)\n                 });"}, {"sha": "85b1b31ba84b1b3875e239fee8cc798749dc2ea9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -1406,7 +1406,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n                 EntryKind::Fn(self.lazy(data))\n             }\n-            hir::ItemKind::Macro(ref macro_def) => {\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n                 EntryKind::MacroDef(self.lazy(macro_def.clone()))\n             }\n             hir::ItemKind::Mod(ref m) => {"}, {"sha": "ec20e888333dae68e6776a84936b678a045dd192", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -14,7 +14,6 @@ use rustc_hir::*;\n use rustc_index::vec::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_span::def_id::StableCrateId;\n-use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n@@ -232,7 +231,7 @@ impl<'hir> Map<'hir> {\n                 ItemKind::Static(..) => DefKind::Static,\n                 ItemKind::Const(..) => DefKind::Const,\n                 ItemKind::Fn(..) => DefKind::Fn,\n-                ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),\n+                ItemKind::Macro(_, macro_kind) => DefKind::Macro(macro_kind),\n                 ItemKind::Mod(..) => DefKind::Mod,\n                 ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,\n                 ItemKind::TyAlias(..) => DefKind::TyAlias,"}, {"sha": "b545961245ad707b850bf17803c7744d9b5c4c61", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -1951,7 +1951,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         // Historically we've run more checks on non-exported than exported macros,\n         // so this lets us continue to run them while maintaining backwards compatibility.\n         // In the long run, the checks should be harmonized.\n-        if let ItemKind::Macro(ref macro_def) = item.kind {\n+        if let ItemKind::Macro(ref macro_def, _) = item.kind {\n             let def_id = item.def_id.to_def_id();\n             if macro_def.macro_rules && !self.tcx.has_attr(def_id, sym::macro_export) {\n                 check_non_exported_macro_for_invalid_attrs(self.tcx, item);"}, {"sha": "3dd9995fa0081e7dc1d320db14d7aa7f27778d69", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -564,7 +564,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             // privacy and mark them reachable.\n             DefKind::Macro(_) => {\n                 let item = self.tcx.hir().expect_item(def_id);\n-                if let hir::ItemKind::Macro(MacroDef { macro_rules: false, .. }) = item.kind {\n+                if let hir::ItemKind::Macro(MacroDef { macro_rules: false, .. }, _) = item.kind {\n                     if vis.is_accessible_from(module.to_def_id(), self.tcx) {\n                         self.update(def_id, level);\n                     }\n@@ -686,7 +686,7 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Macro(ref macro_def) => {\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n                 self.update_reachability_from_macro(item.def_id, macro_def);\n             }\n             hir::ItemKind::ForeignMod { items, .. } => {"}, {"sha": "2fb69e438c40336d142c60291dea563b51c621ec", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -990,6 +990,9 @@ pub struct Resolver<'a> {\n     crate_loader: CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n+    /// A small map keeping true kinds of built-in macros that appear to be fn-like on\n+    /// the surface (`macro` items in libcore), but are actually attributes or derives.\n+    builtin_macro_kinds: FxHashMap<LocalDefId, MacroKind>,\n     registered_attrs: FxHashSet<Ident>,\n     registered_tools: RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n@@ -1261,6 +1264,10 @@ impl ResolverAstLowering for Resolver<'_> {\n \n         def_id\n     }\n+\n+    fn decl_macro_kind(&self, def_id: LocalDefId) -> MacroKind {\n+        self.builtin_macro_kinds.get(&def_id).copied().unwrap_or(MacroKind::Bang)\n+    }\n }\n \n impl<'a> Resolver<'a> {\n@@ -1381,6 +1388,7 @@ impl<'a> Resolver<'a> {\n             crate_loader: CrateLoader::new(session, metadata_loader, crate_name),\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n+            builtin_macro_kinds: Default::default(),\n             registered_attrs,\n             registered_tools,\n             macro_use_prelude: FxHashMap::default(),"}, {"sha": "e34d3e605ecdf37653a3cdb3f28aa6b4c7d29005", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -1209,7 +1209,13 @@ impl<'a> Resolver<'a> {\n                 // while still taking everything else from the source code.\n                 // If we already loaded this builtin macro, give a better error message than 'no such builtin macro'.\n                 match mem::replace(builtin_macro, BuiltinMacroState::AlreadySeen(item.span)) {\n-                    BuiltinMacroState::NotYetSeen(ext) => result.kind = ext,\n+                    BuiltinMacroState::NotYetSeen(ext) => {\n+                        result.kind = ext;\n+                        if item.id != ast::DUMMY_NODE_ID {\n+                            self.builtin_macro_kinds\n+                                .insert(self.local_def_id(item.id), result.macro_kind());\n+                        }\n+                    }\n                     BuiltinMacroState::AlreadySeen(span) => {\n                         struct_span_err!(\n                             self.session,"}, {"sha": "8f50f44571953fb0b7a89ae8f2c6bbec6d00eab6", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -416,7 +416,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n \n                 Ok(sig)\n             }\n-            hir::ItemKind::Macro(_) => {\n+            hir::ItemKind::Macro(..) => {\n                 let mut text = \"macro\".to_owned();\n                 let name = self.ident.to_string();\n                 text.push_str(&name);"}, {"sha": "4a25b49eb2ddac6155263fca67094e5d9631c0ac", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -730,7 +730,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n         // These don't define types.\n         hir::ItemKind::ExternCrate(_)\n         | hir::ItemKind::Use(..)\n-        | hir::ItemKind::Macro(_)\n+        | hir::ItemKind::Macro(..)\n         | hir::ItemKind::Mod(_)\n         | hir::ItemKind::GlobalAsm(_) => {}\n         hir::ItemKind::ForeignMod { items, .. } => {"}, {"sha": "1e0c1e8f1f356b7624ec44056f70f14cad4e2181", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -1855,7 +1855,7 @@ fn clean_maybe_renamed_item(\n             ItemKind::Fn(ref sig, ref generics, body_id) => {\n                 clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n             }\n-            ItemKind::Macro(ref macro_def) => {\n+            ItemKind::Macro(ref macro_def, _) => {\n                 let ty_vis = cx.tcx.visibility(def_id).clean(cx);\n                 MacroItem(Macro {\n                     source: display_macro_source(cx, name, macro_def, def_id, ty_vis),"}, {"sha": "5ccc3dabe83b71c4693df1aff2b89f6edf7057dd", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -1164,7 +1164,7 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n \n     fn visit_item(&mut self, item: &'hir hir::Item<'_>) {\n         let name = match &item.kind {\n-            hir::ItemKind::Macro(ref macro_def) => {\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n                 // FIXME(#88038): Non exported macros have historically not been tested,\n                 // but we really ought to start testing them.\n                 let def_id = item.def_id.to_def_id();"}, {"sha": "1693034db0e82a49f0e3fc714064b5ec4c9856e6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n                 om.items.push((item, renamed))\n             }\n-            hir::ItemKind::Macro(ref macro_def) => {\n+            hir::ItemKind::Macro(ref macro_def, _) => {\n                 // `#[macro_export] macro_rules!` items are handled seperately in `visit()`,\n                 // above, since they need to be documented at the module top level. Accordingly,\n                 // we only want to handle macros if one of three conditions holds:"}, {"sha": "dc48ea3f4f99d77612cfcb3a4e48fab6dabf8f5a", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b1afdbb234a1cdf5db92ec8639cbd2909ac629/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "patch": "@@ -373,7 +373,7 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n             let item_ty = cx.tcx.type_of(did);\n             println!(\"function of type {:#?}\", item_ty);\n         },\n-        hir::ItemKind::Macro(ref macro_def) => {\n+        hir::ItemKind::Macro(ref macro_def, _) => {\n             if macro_def.macro_rules {\n                 println!(\"macro introduced by `macro_rules!`\");\n             } else {"}]}