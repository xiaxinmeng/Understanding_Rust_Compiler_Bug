{"sha": "dfa52457167d64449152ad51bfb640da2723199f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYTUyNDU3MTY3ZDY0NDQ5MTUyYWQ1MWJmYjY0MGRhMjcyMzE5OWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-08T05:08:13Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-08T14:00:00Z"}, "message": "Rollup merge of #33369 - nikomatsakis:graceful-empty-span, r=jntrnr\n\ndegrade gracefully with empty spans\n\nIn https://github.com/rust-lang/rust/pull/32756, we solved the final test failure, but digging more into it the handling of that scenario could be better. The error was caused by an empty span supplied by the parser representing EOF. This patch checks that we cope more gracefully with such spans:\n\nr? @jonathandturner", "tree": {"sha": "c751b728e8862a22aaf588edad8c4d8a107c810a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c751b728e8862a22aaf588edad8c4d8a107c810a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa52457167d64449152ad51bfb640da2723199f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXL0ZgAAoJEDu/TT4u95+YKHcP/1UuqmttIpBX90sP803Tnzz7\ntFi6Q60x4vRoPQXhl6/rzcEQmA1ZZO+hZmfhabvbFSa8IzaN8/FProChkeZ+HR0z\nHIDPtWMuOrKEwcAK91cg4w3c6FrnOWdW8bCeaxbp357/53MPiCLInBBgBdEoLL+M\nFUjmVmIAdgUwF7LpQzlYZqOl6PmlTui2UWUFeLu2B6V5BPL+IkCK+4Col94k1NWG\njQhIVuZzv72iC/6F2YbfEj7L51PT8KZ+4ug1Ug1RreQbnNMMeCkCAdF4Aa6s0T4/\n0olllIdvTvhJ15pUZzdX6jgeQygJh4Ue+BXUHETd23FSYSV67nGtcmKr8grcf5fH\nI1D4bVQ9Y4o2zMew5KciJOVxICGX6ZwVXV0ZTTdfyGnKXGekt0IiyXAZVNVB754r\n7R4DCJ2osDCbjH2Kvwc7O2qqH8zHJE/eBIU60V01qOeBb/0oBb18SG4H4CCgABe8\n7mdxy3IzGuK402+u1KeaVyqWzF5iF+NphblXNowo8Brp7UzhspUlUB0sATy4cvsr\nANOLySx3Dwma1SUUV0YrQxyQv9e2JnPndxh7Nfb5MDoYF57QZqM63R8hm1VVqTvw\nnjvjPvFsq1zXoOPJylLweD4LcE8KN30Kbs6hPwZsEZpxk0KDf10EAdxPZkAPOuFr\norQBeKZqcMuEpMzdfh+L\n=YRds\n-----END PGP SIGNATURE-----", "payload": "tree c751b728e8862a22aaf588edad8c4d8a107c810a\nparent 8e414e0e3f27d1917d11ee80de827698beb53891\nparent f030b5dbc29b20b964f2cc448d893998080b1a46\nauthor Manish Goregaokar <manishsmail@gmail.com> 1462684093 -0700\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1462716000 -0700\n\nRollup merge of #33369 - nikomatsakis:graceful-empty-span, r=jntrnr\n\ndegrade gracefully with empty spans\n\nIn https://github.com/rust-lang/rust/pull/32756, we solved the final test failure, but digging more into it the handling of that scenario could be better. The error was caused by an empty span supplied by the parser representing EOF. This patch checks that we cope more gracefully with such spans:\n\nr? @jonathandturner\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa52457167d64449152ad51bfb640da2723199f", "html_url": "https://github.com/rust-lang/rust/commit/dfa52457167d64449152ad51bfb640da2723199f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa52457167d64449152ad51bfb640da2723199f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e414e0e3f27d1917d11ee80de827698beb53891", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e414e0e3f27d1917d11ee80de827698beb53891", "html_url": "https://github.com/rust-lang/rust/commit/8e414e0e3f27d1917d11ee80de827698beb53891"}, {"sha": "f030b5dbc29b20b964f2cc448d893998080b1a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/f030b5dbc29b20b964f2cc448d893998080b1a46", "html_url": "https://github.com/rust-lang/rust/commit/f030b5dbc29b20b964f2cc448d893998080b1a46"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "237e6823e0f8752b6693fd8d90b4887c4479f25b", "filename": "src/libsyntax/errors/snippet/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfa52457167d64449152ad51bfb640da2723199f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa52457167d64449152ad51bfb640da2723199f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs?ref=dfa52457167d64449152ad51bfb640da2723199f", "patch": "@@ -376,11 +376,21 @@ impl FileInfo {\n         // Basically, although this loses information, multi-line spans just\n         // never look good.\n \n-        let (line, start_col, end_col) = if lines.len() == 1 {\n+        let (line, start_col, mut end_col) = if lines.len() == 1 {\n             (lines[0].line_index, lines[0].start_col, lines[0].end_col)\n         } else {\n             (lines[0].line_index, lines[0].start_col, CharPos(lines[0].start_col.0 + 1))\n         };\n+\n+        // Watch out for \"empty spans\". If we get a span like 6..6, we\n+        // want to just display a `^` at 6, so convert that to\n+        // 6..7. This is degenerate input, but it's best to degrade\n+        // gracefully -- and the parser likes to suply a span like\n+        // that for EOF, in particular.\n+        if start_col == end_col {\n+            end_col.0 += 1;\n+        }\n+\n         let index = self.ensure_source_line(line);\n         self.lines[index].push_annotation(start_col,\n                                           end_col,"}, {"sha": "5a888b488191ba0ea07b45b8e0f65796b796fc8b", "filename": "src/libsyntax/errors/snippet/test.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dfa52457167d64449152ad51bfb640da2723199f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa52457167d64449152ad51bfb640da2723199f/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs?ref=dfa52457167d64449152ad51bfb640da2723199f", "patch": "@@ -519,3 +519,41 @@ fn span_overlap_label3() {\n   |>            ----- bar\n \"#[1..]);\n }\n+\n+#[test]\n+fn span_empty() {\n+    // In one of the unit tests, we found that the parser sometimes\n+    // gives empty spans, and in particular it supplied an EOF span\n+    // like this one, which points at the very end. We want to\n+    // fallback gracefully in this case.\n+\n+    let file_text = r#\"\n+fn main() {\n+    struct Foo;\n+\n+    impl !Sync for Foo {}\n+\n+    unsafe impl Send for &'static Foo {\n+    // error: cross-crate traits with a default impl, like `core::marker::Send`,\n+    //        can only be implemented for a struct/enum type, not\n+    //        `&'static Foo`\n+}\"#;\n+\n+\n+    let cm = Rc::new(CodeMap::new());\n+    let foo = cm.new_filemap_and_lines(\"foo.rs\", file_text);\n+\n+    let mut rbrace_span = cm.span_substr(&foo, file_text, \"}\", 1);\n+    rbrace_span.lo = rbrace_span.hi;\n+\n+    let mut snippet = SnippetData::new(cm.clone(), Some(rbrace_span));\n+    snippet.push(rbrace_span, false, None);\n+    let lines = snippet.render_lines();\n+    let text: String = make_string(&lines);\n+    println!(\"r#\\\"\\n{}\\\"\", text);\n+    assert_eq!(text, &r#\"\n+  --> foo.rs:11:2\n+11 |> }\n+   |>  -\n+\"#[1..]);\n+}"}]}