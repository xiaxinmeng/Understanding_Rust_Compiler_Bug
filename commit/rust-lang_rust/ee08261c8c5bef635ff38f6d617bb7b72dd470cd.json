{"sha": "ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDgyNjFjOGM1YmVmNjM1ZmYzOGY2ZDYxN2JiN2I3MmRkNDcwY2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-28T22:19:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-28T22:19:55Z"}, "message": "Rollup merge of #60928 - TheSirC:fix/60229, r=eddyb\n\nChanges the type `mir::Mir` into `mir::Body`\n\nFixes part 1 of #60229 (previously attempted in #60242).\n\nI stumbled upon the issue and it seems that the previous attempt at solving it was not merged. This is a second try more up-to-date.\n\nThe commit should have changed comments as well.\nAt the time of writting, it passes the tidy and check tool.", "tree": {"sha": "a50a6ad4aa4fcb5655d41562fb9d867a04ad3e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a50a6ad4aa4fcb5655d41562fb9d867a04ad3e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7bQLCRBK7hj4Ov3rIwAAdHIIAB7yX3OUqwWxc8N1bm5R726A\njMvSBWRCWYkY6Kt8T012O/U+LlYtXX9aKFOMHxhi18BG5C1v5dTuINf2iiuhwPxG\nu6rbn6MouLNKAsV1/KtjOm7Hg9uV14MQ8zxgtcoz1UVEERBV07/IMuUTuwLJ6403\nKxQnGzFQYPAfQm8Mx7GoIVw42IhuZU3mzmEqFb9/bUCmTBxCdTeUyXV6NFsShYVG\n0/1vxZZoPBiIl0PYUMNOvFe0pP7sCxpz3K1/WsktVTeOCG7qNC2zWa1QViwXE/GJ\ndpn2fomNfJNoeMf3smXOxP5fe9Tud3sjEpN0kQUO8C/BoTZwwJfxk4IJecQu/cY=\n=2qzR\n-----END PGP SIGNATURE-----\n", "payload": "tree a50a6ad4aa4fcb5655d41562fb9d867a04ad3e9d\nparent e19a229c88e39bc00f5672ff6a539aabe69bb545\nparent 95013e612d3ffaee2b674da4a29308aaa7551726\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559081995 +0200\ncommitter GitHub <noreply@github.com> 1559081995 +0200\n\nRollup merge of #60928 - TheSirC:fix/60229, r=eddyb\n\nChanges the type `mir::Mir` into `mir::Body`\n\nFixes part 1 of #60229 (previously attempted in #60242).\n\nI stumbled upon the issue and it seems that the previous attempt at solving it was not merged. This is a second try more up-to-date.\n\nThe commit should have changed comments as well.\nAt the time of writting, it passes the tidy and check tool.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "html_url": "https://github.com/rust-lang/rust/commit/ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e19a229c88e39bc00f5672ff6a539aabe69bb545", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19a229c88e39bc00f5672ff6a539aabe69bb545", "html_url": "https://github.com/rust-lang/rust/commit/e19a229c88e39bc00f5672ff6a539aabe69bb545"}, {"sha": "95013e612d3ffaee2b674da4a29308aaa7551726", "url": "https://api.github.com/repos/rust-lang/rust/commits/95013e612d3ffaee2b674da4a29308aaa7551726", "html_url": "https://github.com/rust-lang/rust/commit/95013e612d3ffaee2b674da4a29308aaa7551726"}], "stats": {"total": 905, "additions": 458, "deletions": 447}, "files": [{"sha": "007013f8f8287f108d93e6a55fbf42c6ccf7a117", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::sync::{RwLock, MappedReadGuard, ReadGuard};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n use crate::ich::StableHashingContext;\n-use crate::mir::{Mir, BasicBlock};\n+use crate::mir::{Body, BasicBlock};\n \n use crate::rustc_serialize as serialize;\n \n@@ -47,7 +47,7 @@ impl Cache {\n \n     pub fn predecessors(\n         &self,\n-        mir: &Mir<'_>\n+        mir: &Body<'_>\n     ) -> MappedReadGuard<'_, IndexVec<BasicBlock, Vec<BasicBlock>>> {\n         if self.predecessors.borrow().is_none() {\n             *self.predecessors.borrow_mut() = Some(calculate_predecessors(mir));\n@@ -57,7 +57,7 @@ impl Cache {\n     }\n }\n \n-fn calculate_predecessors(mir: &Mir<'_>) -> IndexVec<BasicBlock, Vec<BasicBlock>> {\n+fn calculate_predecessors(mir: &Body<'_>) -> IndexVec<BasicBlock, Vec<BasicBlock>> {\n     let mut result = IndexVec::from_elem(vec![], mir.basic_blocks());\n     for (bb, data) in mir.basic_blocks().iter_enumerated() {\n         if let Some(ref term) = data.terminator {"}, {"sha": "7985af914ff93e314b9b7ccc8b251772a4a8fcdf", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -47,7 +47,7 @@ pub struct GlobalId<'tcx> {\n     /// For a promoted global, the `Instance` of the function they belong to.\n     pub instance: ty::Instance<'tcx>,\n \n-    /// The index for promoted globals within their function's `Mir`.\n+    /// The index for promoted globals within their function's `mir::Body`.\n     pub promoted: Option<mir::Promoted>,\n }\n "}, {"sha": "a703a396b023a9407f2ecfaef081d9283aeef15f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> HasLocalDecls<'tcx> for LocalDecls<'tcx> {\n     }\n }\n \n-impl<'tcx> HasLocalDecls<'tcx> for Mir<'tcx> {\n+impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n     fn local_decls(&self) -> &LocalDecls<'tcx> {\n         &self.local_decls\n     }\n@@ -86,7 +86,7 @@ impl MirPhase {\n \n /// Lowered representation of a single function.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct Mir<'tcx> {\n+pub struct Body<'tcx> {\n     /// List of basic blocks. References to basic block use a newtyped index type `BasicBlock`\n     /// that indexes into this vector.\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n@@ -107,15 +107,15 @@ pub struct Mir<'tcx> {\n     pub source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n \n     /// Rvalues promoted from this function, such as borrows of constants.\n-    /// Each of them is the Mir of a constant with the fn's type parameters\n+    /// Each of them is the Body of a constant with the fn's type parameters\n     /// in scope, but a separate set of locals.\n-    pub promoted: IndexVec<Promoted, Mir<'tcx>>,\n+    pub promoted: IndexVec<Promoted, Body<'tcx>>,\n \n     /// Yields type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n \n     /// Generator drop glue\n-    pub generator_drop: Option<Box<Mir<'tcx>>>,\n+    pub generator_drop: Option<Box<Body<'tcx>>>,\n \n     /// The layout of a generator. Produced by the state transformation.\n     pub generator_layout: Option<GeneratorLayout<'tcx>>,\n@@ -167,12 +167,12 @@ pub struct Mir<'tcx> {\n     cache: cache::Cache,\n }\n \n-impl<'tcx> Mir<'tcx> {\n+impl<'tcx> Body<'tcx> {\n     pub fn new(\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n         source_scopes: IndexVec<SourceScope, SourceScopeData>,\n         source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n-        promoted: IndexVec<Promoted, Mir<'tcx>>,\n+        promoted: IndexVec<Promoted, Body<'tcx>>,\n         yield_ty: Option<Ty<'tcx>>,\n         local_decls: LocalDecls<'tcx>,\n         user_type_annotations: CanonicalUserTypeAnnotations<'tcx>,\n@@ -189,7 +189,7 @@ impl<'tcx> Mir<'tcx> {\n             local_decls.len()\n         );\n \n-        Mir {\n+        Body {\n             phase: MirPhase::Build,\n             basic_blocks,\n             source_scopes,\n@@ -423,7 +423,7 @@ pub enum Safety {\n     ExplicitUnsafe(hir::HirId),\n }\n \n-impl_stable_hash_for!(struct Mir<'tcx> {\n+impl_stable_hash_for!(struct Body<'tcx> {\n     phase,\n     basic_blocks,\n     source_scopes,\n@@ -442,7 +442,7 @@ impl_stable_hash_for!(struct Mir<'tcx> {\n     cache\n });\n \n-impl<'tcx> Index<BasicBlock> for Mir<'tcx> {\n+impl<'tcx> Index<BasicBlock> for Body<'tcx> {\n     type Output = BasicBlockData<'tcx>;\n \n     #[inline]\n@@ -451,7 +451,7 @@ impl<'tcx> Index<BasicBlock> for Mir<'tcx> {\n     }\n }\n \n-impl<'tcx> IndexMut<BasicBlock> for Mir<'tcx> {\n+impl<'tcx> IndexMut<BasicBlock> for Body<'tcx> {\n     #[inline]\n     fn index_mut(&mut self, index: BasicBlock) -> &mut BasicBlockData<'tcx> {\n         &mut self.basic_blocks_mut()[index]\n@@ -599,7 +599,7 @@ newtype_index! {\n     }\n }\n \n-/// Classifies locals into categories. See `Mir::local_kind`.\n+/// Classifies locals into categories. See `Body::local_kind`.\n #[derive(PartialEq, Eq, Debug, HashStable)]\n pub enum LocalKind {\n     /// User-declared variable binding\n@@ -2828,23 +2828,23 @@ impl<'tcx> Display for Constant<'tcx> {\n     }\n }\n \n-impl<'tcx> graph::DirectedGraph for Mir<'tcx> {\n+impl<'tcx> graph::DirectedGraph for Body<'tcx> {\n     type Node = BasicBlock;\n }\n \n-impl<'tcx> graph::WithNumNodes for Mir<'tcx> {\n+impl<'tcx> graph::WithNumNodes for Body<'tcx> {\n     fn num_nodes(&self) -> usize {\n         self.basic_blocks.len()\n     }\n }\n \n-impl<'tcx> graph::WithStartNode for Mir<'tcx> {\n+impl<'tcx> graph::WithStartNode for Body<'tcx> {\n     fn start_node(&self) -> Self::Node {\n         START_BLOCK\n     }\n }\n \n-impl<'tcx> graph::WithPredecessors for Mir<'tcx> {\n+impl<'tcx> graph::WithPredecessors for Body<'tcx> {\n     fn predecessors<'graph>(\n         &'graph self,\n         node: Self::Node,\n@@ -2853,7 +2853,7 @@ impl<'tcx> graph::WithPredecessors for Mir<'tcx> {\n     }\n }\n \n-impl<'tcx> graph::WithSuccessors for Mir<'tcx> {\n+impl<'tcx> graph::WithSuccessors for Body<'tcx> {\n     fn successors<'graph>(\n         &'graph self,\n         node: Self::Node,\n@@ -2862,12 +2862,12 @@ impl<'tcx> graph::WithSuccessors for Mir<'tcx> {\n     }\n }\n \n-impl<'a, 'b> graph::GraphPredecessors<'b> for Mir<'a> {\n+impl<'a, 'b> graph::GraphPredecessors<'b> for Body<'a> {\n     type Item = BasicBlock;\n     type Iter = IntoIter<BasicBlock>;\n }\n \n-impl<'a, 'b> graph::GraphSuccessors<'b> for Mir<'a> {\n+impl<'a, 'b> graph::GraphSuccessors<'b> for Body<'a> {\n     type Item = BasicBlock;\n     type Iter = iter::Cloned<Successors<'b>>;\n }\n@@ -2906,7 +2906,7 @@ impl Location {\n     }\n \n     /// Returns `true` if `other` is earlier in the control flow graph than `self`.\n-    pub fn is_predecessor_of<'tcx>(&self, other: Location, mir: &Mir<'tcx>) -> bool {\n+    pub fn is_predecessor_of<'tcx>(&self, other: Location, mir: &Body<'tcx>) -> bool {\n         // If we are in the same block as the other location and are an earlier statement\n         // then we are a predecessor of `other`.\n         if self.block == other.block && self.statement_index < other.statement_index {\n@@ -3159,7 +3159,7 @@ CloneTypeFoldableAndLiftImpls! {\n }\n \n BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n+    impl<'tcx> TypeFoldable<'tcx> for Body<'tcx> {\n         phase,\n         basic_blocks,\n         source_scopes,"}, {"sha": "75d995d801d7853d6234fb2c551332fb18325fea", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -21,14 +21,14 @@ use super::*;\n /// A preorder traversal of this graph is either `A B D C` or `A C D B`\n #[derive(Clone)]\n pub struct Preorder<'a, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     visited: BitSet<BasicBlock>,\n     worklist: Vec<BasicBlock>,\n     root_is_start_block: bool,\n }\n \n impl<'a, 'tcx> Preorder<'a, 'tcx> {\n-    pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {\n+    pub fn new(mir: &'a Body<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {\n         let worklist = vec![root];\n \n         Preorder {\n@@ -40,7 +40,7 @@ impl<'a, 'tcx> Preorder<'a, 'tcx> {\n     }\n }\n \n-pub fn preorder<'a, 'tcx>(mir: &'a Mir<'tcx>) -> Preorder<'a, 'tcx> {\n+pub fn preorder<'a, 'tcx>(mir: &'a Body<'tcx>) -> Preorder<'a, 'tcx> {\n     Preorder::new(mir, START_BLOCK)\n }\n \n@@ -99,14 +99,14 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n ///\n /// A Postorder traversal of this graph is `D B C A` or `D C B A`\n pub struct Postorder<'a, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     visited: BitSet<BasicBlock>,\n     visit_stack: Vec<(BasicBlock, Successors<'a>)>,\n     root_is_start_block: bool,\n }\n \n impl<'a, 'tcx> Postorder<'a, 'tcx> {\n-    pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {\n+    pub fn new(mir: &'a Body<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {\n         let mut po = Postorder {\n             mir,\n             visited: BitSet::new_empty(mir.basic_blocks().len()),\n@@ -194,7 +194,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n     }\n }\n \n-pub fn postorder<'a, 'tcx>(mir: &'a Mir<'tcx>) -> Postorder<'a, 'tcx> {\n+pub fn postorder<'a, 'tcx>(mir: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {\n     Postorder::new(mir, START_BLOCK)\n }\n \n@@ -252,13 +252,13 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n /// to re-use the traversal\n #[derive(Clone)]\n pub struct ReversePostorder<'a, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     blocks: Vec<BasicBlock>,\n     idx: usize\n }\n \n impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {\n-    pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {\n+    pub fn new(mir: &'a Body<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {\n         let blocks : Vec<_> = Postorder::new(mir, root).map(|(bb, _)| bb).collect();\n \n         let len = blocks.len();\n@@ -276,7 +276,7 @@ impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {\n }\n \n \n-pub fn reverse_postorder<'a, 'tcx>(mir: &'a Mir<'tcx>) -> ReversePostorder<'a, 'tcx> {\n+pub fn reverse_postorder<'a, 'tcx>(mir: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {\n     ReversePostorder::new(mir, START_BLOCK)\n }\n "}, {"sha": "dd33fae0d6197ed509cd86a7d0d863bff3ad65a2", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -71,8 +71,8 @@ macro_rules! make_mir_visitor {\n             // Override these, and call `self.super_xxx` to revert back to the\n             // default behavior.\n \n-            fn visit_mir(&mut self, mir: & $($mutability)? Mir<'tcx>) {\n-                self.super_mir(mir);\n+            fn visit_body(&mut self, mir: & $($mutability)? Body<'tcx>) {\n+                self.super_body(mir);\n             }\n \n             fn visit_basic_block_data(&mut self,\n@@ -251,8 +251,8 @@ macro_rules! make_mir_visitor {\n             // The `super_xxx` methods comprise the default behavior and are\n             // not meant to be overridden.\n \n-            fn super_mir(&mut self,\n-                         mir: & $($mutability)? Mir<'tcx>) {\n+            fn super_body(&mut self,\n+                         mir: & $($mutability)? Body<'tcx>) {\n                 if let Some(yield_ty) = &$($mutability)? mir.yield_ty {\n                     self.visit_ty(yield_ty, TyContext::YieldTy(SourceInfo {\n                         span: mir.span,\n@@ -261,7 +261,7 @@ macro_rules! make_mir_visitor {\n                 }\n \n                 // for best performance, we want to use an iterator rather\n-                // than a for-loop, to avoid calling Mir::invalidate for\n+                // than a for-loop, to avoid calling `mir::Body::invalidate` for\n                 // each basic block.\n                 macro_rules! basic_blocks {\n                     (mut) => (mir.basic_blocks_mut().iter_enumerated_mut());\n@@ -825,7 +825,7 @@ macro_rules! make_mir_visitor {\n \n             // Convenience methods\n \n-            fn visit_location(&mut self, mir: & $($mutability)? Mir<'tcx>, location: Location) {\n+            fn visit_location(&mut self, mir: & $($mutability)? Body<'tcx>, location: Location) {\n                 let basic_block = & $($mutability)? mir[location.block];\n                 if basic_block.statements.len() == location.statement_index {\n                     if let Some(ref $($mutability)? terminator) = basic_block.terminator {"}, {"sha": "81aa8d434d37fa04e918f53c9a1b2aa69e5933b7", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -88,7 +88,7 @@ rustc_queries! {\n             desc { \"getting a list of all mir_keys\" }\n         }\n \n-        /// Maps DefId's that have an associated Mir to the result\n+        /// Maps DefId's that have an associated `mir::Body` to the result\n         /// of the MIR qualify_consts pass. The actual meaning of\n         /// the value isn't known except to the pass itself.\n         query mir_const_qualif(key: DefId) -> (u8, &'tcx BitSet<mir::Local>) {\n@@ -97,26 +97,26 @@ rustc_queries! {\n \n         /// Fetch the MIR for a given `DefId` right after it's built - this includes\n         /// unreachable code.\n-        query mir_built(_: DefId) -> &'tcx Steal<mir::Mir<'tcx>> {}\n+        query mir_built(_: DefId) -> &'tcx Steal<mir::Body<'tcx>> {}\n \n         /// Fetch the MIR for a given `DefId` up till the point where it is\n         /// ready for const evaluation.\n         ///\n         /// See the README for the `mir` module for details.\n-        query mir_const(_: DefId) -> &'tcx Steal<mir::Mir<'tcx>> {\n+        query mir_const(_: DefId) -> &'tcx Steal<mir::Body<'tcx>> {\n             no_hash\n         }\n \n-        query mir_validated(_: DefId) -> &'tcx Steal<mir::Mir<'tcx>> {\n+        query mir_validated(_: DefId) -> &'tcx Steal<mir::Body<'tcx>> {\n             no_hash\n         }\n \n         /// MIR after our optimization passes have run. This is MIR that is ready\n         /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n-        query optimized_mir(key: DefId) -> &'tcx mir::Mir<'tcx> {\n+        query optimized_mir(key: DefId) -> &'tcx mir::Body<'tcx> {\n             cache { key.is_local() }\n             load_cached(tcx, id) {\n-                let mir: Option<crate::mir::Mir<'tcx>> = tcx.queries.on_disk_cache\n+                let mir: Option<crate::mir::Body<'tcx>> = tcx.queries.on_disk_cache\n                                                             .try_load_query_result(tcx, id);\n                 mir.map(|x| tcx.alloc_mir(x))\n             }\n@@ -456,7 +456,7 @@ rustc_queries! {\n         /// in the case of closures, this will be redirected to the enclosing function.\n         query region_scope_tree(_: DefId) -> &'tcx region::ScopeTree {}\n \n-        query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::Mir<'tcx> {\n+        query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::Body<'tcx> {\n             no_force\n             desc { |tcx| \"generating MIR shim for `{}`\", tcx.def_path_str(key.def_id()) }\n         }"}, {"sha": "ff218911ffb8197afca886679b666f392fca5cf2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -23,7 +23,7 @@ use crate::middle::cstore::EncodedMetadata;\n use crate::middle::lang_items;\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n-use crate::mir::{self, Mir, interpret, ProjectionKind};\n+use crate::mir::{self, Body, interpret, ProjectionKind};\n use crate::mir::interpret::{ConstValue, Allocation, Scalar};\n use crate::ty::subst::{Kind, InternalSubsts, SubstsRef, Subst};\n use crate::ty::ReprOptions;\n@@ -103,8 +103,8 @@ pub struct GlobalArenas<'tcx> {\n     generics: TypedArena<ty::Generics>,\n     trait_def: TypedArena<ty::TraitDef>,\n     adt_def: TypedArena<ty::AdtDef>,\n-    steal_mir: TypedArena<Steal<Mir<'tcx>>>,\n-    mir: TypedArena<Mir<'tcx>>,\n+    steal_mir: TypedArena<Steal<Body<'tcx>>>,\n+    mir: TypedArena<Body<'tcx>>,\n     tables: TypedArena<ty::TypeckTables<'tcx>>,\n     /// miri allocations\n     const_allocs: TypedArena<interpret::Allocation>,\n@@ -1154,11 +1154,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.global_arenas.generics.alloc(generics)\n     }\n \n-    pub fn alloc_steal_mir(self, mir: Mir<'gcx>) -> &'gcx Steal<Mir<'gcx>> {\n+    pub fn alloc_steal_mir(self, mir: Body<'gcx>) -> &'gcx Steal<Body<'gcx>> {\n         self.global_arenas.steal_mir.alloc(Steal::new(mir))\n     }\n \n-    pub fn alloc_mir(self, mir: Mir<'gcx>) -> &'gcx Mir<'gcx> {\n+    pub fn alloc_mir(self, mir: Body<'gcx>) -> &'gcx Body<'gcx> {\n         self.global_arenas.mir.alloc(mir)\n     }\n "}, {"sha": "fa993325e271233e362d6c850626eb58f6e631f5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -19,7 +19,7 @@ use crate::ich::StableHashingContext;\n use crate::infer::canonical::Canonical;\n use crate::middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n-use crate::mir::Mir;\n+use crate::mir::Body;\n use crate::mir::interpret::{GlobalId, ErrorHandled};\n use crate::mir::GeneratorLayout;\n use crate::session::CrateDisambiguator;\n@@ -3002,7 +3002,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'gcx>)\n-                        -> &'gcx Mir<'gcx>\n+                        -> &'gcx Body<'gcx>\n     {\n         match instance {\n             ty::InstanceDef::Item(did) => {"}, {"sha": "711e59dbcc9d2752b3c35b9a1b7bbcdb36fdc787", "filename": "src/librustc/ty/steal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fty%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc%2Fty%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsteal.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -7,9 +7,9 @@ use rustc_data_structures::sync::{RwLock, ReadGuard, MappedReadGuard};\n /// optimization, but that'd be expensive. And yet we don't just want\n /// to mutate it in place, because that would spoil the idea that\n /// queries are these pure functions that produce an immutable value\n-/// (since if you did the query twice, you could observe the\n-/// mutations). So instead we have the query produce a `&'tcx\n-/// Steal<Mir<'tcx>>` (to be very specific). Now we can read from this\n+/// (since if you did the query twice, you could observe the mutations).\n+/// So instead we have the query produce a `&'tcx Steal<mir::Body<'tcx>>`\n+/// (to be very specific). Now we can read from this\n /// as much as we want (using `borrow()`), but you can also\n /// `steal()`. Once you steal, any further attempt to read will panic.\n /// Therefore, we know that -- assuming no ICE -- nobody is observing"}, {"sha": "8b3ed5b0c623a5533bf9ec0047c8cda51b2617e8", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -5,7 +5,7 @@ use super::utils::{DIB, span_start};\n use crate::llvm;\n use crate::llvm::debuginfo::{DIScope, DISubprogram};\n use crate::common::CodegenCx;\n-use rustc::mir::{Mir, SourceScope};\n+use rustc::mir::{Body, SourceScope};\n \n use libc::c_uint;\n \n@@ -20,7 +20,7 @@ use syntax_pos::BytePos;\n /// If debuginfo is disabled, the returned vector is empty.\n pub fn create_mir_scopes(\n     cx: &CodegenCx<'ll, '_>,\n-    mir: &Mir<'_>,\n+    mir: &Body<'_>,\n     debug_context: &FunctionDebugContext<&'ll DISubprogram>,\n ) -> IndexVec<SourceScope, MirDebugScope<&'ll DIScope>> {\n     let null_scope = MirDebugScope {\n@@ -55,7 +55,7 @@ pub fn create_mir_scopes(\n }\n \n fn make_mir_scope(cx: &CodegenCx<'ll, '_>,\n-                  mir: &Mir<'_>,\n+                  mir: &Body<'_>,\n                   has_variables: &BitSet<SourceScope>,\n                   debug_context: &FunctionDebugContextData<&'ll DISubprogram>,\n                   scope: SourceScope,"}, {"sha": "6fa594d44530004bbd7a1df51d0d4fb73db1795a", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -239,7 +239,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         instance: Instance<'tcx>,\n         sig: ty::FnSig<'tcx>,\n         llfn: &'ll Value,\n-        mir: &mir::Mir<'_>,\n+        mir: &mir::Body<'_>,\n     ) -> FunctionDebugContext<&'ll DISubprogram> {\n         if self.sess().opts.debuginfo == DebugInfo::None {\n             return FunctionDebugContext::DebugInfoDisabled;\n@@ -523,7 +523,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n     fn create_mir_scopes(\n         &self,\n-        mir: &mir::Mir<'_>,\n+        mir: &mir::Body<'_>,\n         debug_context: &mut FunctionDebugContext<&'ll DISubprogram>,\n     ) -> IndexVec<mir::SourceScope, MirDebugScope<&'ll DIScope>> {\n         create_scope_map::create_mir_scopes(self, mir, debug_context)"}, {"sha": "bb6a13ed15a52cdeb3f3485ac6c69b56825456e4", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -18,7 +18,7 @@ pub fn non_ssa_locals<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     let mir = fx.mir;\n     let mut analyzer = LocalAnalyzer::new(fx);\n \n-    analyzer.visit_mir(mir);\n+    analyzer.visit_body(mir);\n \n     for (index, ty) in mir.local_decls.iter().map(|l| l.ty).enumerate() {\n         let ty = fx.monomorphize(&ty);\n@@ -272,9 +272,9 @@ impl CleanupKind {\n     }\n }\n \n-pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n+pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Body<'tcx>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n     fn discover_masters<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,\n-                              mir: &mir::Mir<'tcx>) {\n+                              mir: &mir::Body<'tcx>) {\n         for (bb, data) in mir.basic_blocks().iter_enumerated() {\n             match data.terminator().kind {\n                 TerminatorKind::Goto { .. } |\n@@ -304,7 +304,7 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n     }\n \n     fn propagate<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,\n-                       mir: &mir::Mir<'tcx>) {\n+                       mir: &mir::Body<'tcx>) {\n         let mut funclet_succs = IndexVec::from_elem(None, mir.basic_blocks());\n \n         let mut set_successor = |funclet: mir::BasicBlock, succ| {"}, {"sha": "4a43201dedf3716979d9dbd9791664273f47822a", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n use rustc::ty::layout::{TyLayout, HasTyCtxt, FnTypeExt};\n-use rustc::mir::{self, Mir};\n+use rustc::mir::{self, Body};\n use rustc::session::config::DebugInfo;\n use rustc_mir::monomorphize::Instance;\n use rustc_target::abi::call::{FnType, PassMode, IgnoreMode};\n@@ -27,7 +27,7 @@ use self::operand::{OperandRef, OperandValue};\n pub struct FunctionCx<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> {\n     instance: Instance<'tcx>,\n \n-    mir: &'a mir::Mir<'tcx>,\n+    mir: &'a mir::Body<'tcx>,\n \n     debug_context: FunctionDebugContext<Bx::DIScope>,\n \n@@ -196,7 +196,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> LocalRef<'tcx, V> {\n pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n     llfn: Bx::Value,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     instance: Instance<'tcx>,\n     sig: ty::FnSig<'tcx>,\n ) {\n@@ -360,7 +360,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n }\n \n fn create_funclets<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     bx: &mut Bx,\n     cleanup_kinds: &IndexVec<mir::BasicBlock, CleanupKind>,\n     block_bxs: &IndexVec<mir::BasicBlock, Bx::BasicBlock>)"}, {"sha": "37b7a15e2ba5e3331ea4da590cf17d02bdee7e35", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -22,12 +22,12 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n         instance: Instance<'tcx>,\n         sig: ty::FnSig<'tcx>,\n         llfn: Self::Value,\n-        mir: &mir::Mir<'_>,\n+        mir: &mir::Body<'_>,\n     ) -> FunctionDebugContext<Self::DIScope>;\n \n     fn create_mir_scopes(\n         &self,\n-        mir: &mir::Mir<'_>,\n+        mir: &mir::Body<'_>,\n         debug_context: &mut FunctionDebugContext<Self::DIScope>,\n     ) -> IndexVec<mir::SourceScope, MirDebugScope<Self::DIScope>>;\n     fn extend_scope_to_file("}, {"sha": "10ff606b013a75e582296f04908e2bc5bd6c9644", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -18,7 +18,7 @@ use rustc::mir::interpret::AllocDecodingSession;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::codec::TyDecoder;\n-use rustc::mir::Mir;\n+use rustc::mir::Body;\n use rustc::util::captures::Captures;\n \n use std::io;\n@@ -887,7 +887,7 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn maybe_get_optimized_mir(&self,\n                                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    id: DefIndex)\n-                                   -> Option<Mir<'tcx>> {\n+                                   -> Option<Body<'tcx>> {\n         match self.is_proc_macro(id) {\n             true => None,\n             false => self.entry(id).mir.map(|mir| mir.decode((self, tcx))),"}, {"sha": "588682a2420a94b38437a7a6f8ad0e4b54db2dfb", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1026,7 +1026,7 @@ impl EncodeContext<'_, 'tcx> {\n         self.lazy_seq(param_names.iter().map(|ident| ident.name))\n     }\n \n-    fn encode_optimized_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Mir<'tcx>>> {\n+    fn encode_optimized_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Body<'tcx>>> {\n         debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n         if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n             let mir = self.tcx.optimized_mir(def_id);"}, {"sha": "2c3291a41d32b6f7f06effc94ed529e1b8de2d86", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -222,7 +222,7 @@ pub struct Entry<'tcx> {\n     pub predicates: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n     pub predicates_defined_on: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n \n-    pub mir: Option<Lazy<mir::Mir<'tcx>>>,\n+    pub mir: Option<Lazy<mir::Body<'tcx>>>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "d9d6fe0affb32ee82ed8b29b6a829f2f0e0bf381", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -5,7 +5,7 @@ use crate::dataflow::indexes::BorrowIndex;\n use crate::dataflow::move_paths::MoveData;\n use rustc::mir::traversal;\n use rustc::mir::visit::{PlaceContext, Visitor, NonUseContext, MutatingUseContext};\n-use rustc::mir::{self, Location, Mir, Local};\n+use rustc::mir::{self, Location, Body, Local};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -90,7 +90,7 @@ crate enum LocalsStateAtExit {\n impl LocalsStateAtExit {\n     fn build(\n         locals_are_invalidated_at_exit: bool,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         move_data: &MoveData<'tcx>\n     ) -> Self {\n         struct HasStorageDead(BitSet<Local>);\n@@ -107,7 +107,7 @@ impl LocalsStateAtExit {\n             LocalsStateAtExit::AllAreInvalidated\n         } else {\n             let mut has_storage_dead = HasStorageDead(BitSet::new_empty(mir.local_decls.len()));\n-            has_storage_dead.visit_mir(mir);\n+            has_storage_dead.visit_body(mir);\n             let mut has_storage_dead_or_moved = has_storage_dead.0;\n             for move_out in &move_data.moves {\n                 if let Some(index) = move_data.base_local(move_out.path) {\n@@ -123,7 +123,7 @@ impl LocalsStateAtExit {\n impl<'tcx> BorrowSet<'tcx> {\n     pub fn build(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         locals_are_invalidated_at_exit: bool,\n         move_data: &MoveData<'tcx>\n     ) -> Self {\n@@ -163,7 +163,7 @@ impl<'tcx> BorrowSet<'tcx> {\n \n struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n     location_map: FxHashMap<Location, BorrowIndex>,\n     activation_map: FxHashMap<Location, Vec<BorrowIndex>>,"}, {"sha": "feade0d2a4aeea4f8c992a8815a184f18804800e", "filename": "src/librustc_mir/borrow_check/location.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,4 +1,4 @@\n-use rustc::mir::{BasicBlock, Location, Mir};\n+use rustc::mir::{BasicBlock, Location, Body};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n /// Maps between a MIR Location, which identifies a particular\n@@ -30,7 +30,7 @@ crate enum RichLocation {\n }\n \n impl LocationTable {\n-    crate fn new(mir: &Mir<'_>) -> Self {\n+    crate fn new(mir: &Body<'_>) -> Self {\n         let mut num_points = 0;\n         let statements_before_block = mir.basic_blocks()\n             .iter()"}, {"sha": "82be2405701d516d971bc8ce1db456d4afd4a770", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -10,7 +10,9 @@ use rustc::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT};\n use rustc::middle::borrowck::SignalledError;\n use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{\n-    ClearCrossCrate, Local, Location, Mir, Mutability, Operand, Place, PlaceBase, Static, StaticKind\n+    ClearCrossCrate, Local, Location, Body, Mutability, Operand, Place, PlaceBase, Static,\n+\n+    StaticKind\n };\n use rustc::mir::{Field, Projection, ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind};\n@@ -118,7 +120,7 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> BorrowC\n     }\n \n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n-        let input_mir: &Mir<'_> = &input_mir.borrow();\n+        let input_mir: &Body<'_> = &input_mir.borrow();\n         do_mir_borrowck(&infcx, input_mir, def_id)\n     });\n     debug!(\"mir_borrowck done\");\n@@ -128,7 +130,7 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> BorrowC\n \n fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-    input_mir: &Mir<'gcx>,\n+    input_mir: &Body<'gcx>,\n     def_id: DefId,\n ) -> BorrowCheckResult<'gcx> {\n     debug!(\"do_mir_borrowck(def_id = {:?})\", def_id);\n@@ -175,7 +177,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     // requires first making our own copy of the MIR. This copy will\n     // be modified (in place) to contain non-lexical lifetimes. It\n     // will have a lifetime tied to the inference context.\n-    let mut mir: Mir<'tcx> = input_mir.clone();\n+    let mut mir: Body<'tcx> = input_mir.clone();\n     let free_regions = nll::replace_regions_in_mir(infcx, def_id, param_env, &mut mir);\n     let mir = &mir; // no further changes\n     let location_table = &LocationTable::new(mir);\n@@ -451,7 +453,7 @@ fn downgrade_if_error(diag: &mut Diagnostic) {\n \n pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n-    mir: &'cx Mir<'tcx>,\n+    mir: &'cx Body<'tcx>,\n     mir_def_id: DefId,\n     move_data: &'cx MoveData<'tcx>,\n \n@@ -537,7 +539,7 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     type FlowState = Flows<'cx, 'gcx, 'tcx>;\n \n-    fn mir(&self) -> &'cx Mir<'tcx> {\n+    fn mir(&self) -> &'cx Body<'tcx> {\n         self.mir\n     }\n "}, {"sha": "a292115707d8eee80957ffa28ec2af5d5262bacf", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir;\n use rustc::hir::Node;\n-use rustc::mir::{self, BindingForm, Constant, ClearCrossCrate, Local, Location, Mir};\n+use rustc::mir::{self, BindingForm, Constant, ClearCrossCrate, Local, Location, Body};\n use rustc::mir::{\n     Mutability, Operand, Place, PlaceBase, Projection, ProjectionElem, Static, StaticKind,\n };\n@@ -562,7 +562,7 @@ fn suggest_ampmut_self<'cx, 'gcx, 'tcx>(\n // by trying (3.), then (2.) and finally falling back on (1.).\n fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     local: Local,\n     local_decl: &mir::LocalDecl<'tcx>,\n     opt_ty_info: Option<Span>,"}, {"sha": "b485f37b78c2d8c5bfe35e6caf42b799c3e8cbc4", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -6,7 +6,7 @@ use crate::borrow_check::nll::region_infer::values::LivenessValues;\n use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n-use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, PlaceBase, Rvalue};\n+use rustc::mir::{BasicBlock, BasicBlockData, Location, Body, Place, PlaceBase, Rvalue};\n use rustc::mir::{SourceInfo, Statement, Terminator};\n use rustc::mir::UserTypeProjection;\n use rustc::ty::fold::TypeFoldable;\n@@ -18,7 +18,7 @@ pub(super) fn generate_constraints<'cx, 'gcx, 'tcx>(\n     liveness_constraints: &mut LivenessValues<RegionVid>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n ) {\n     let mut cg = ConstraintGeneration {"}, {"sha": "3921246b06d388a8d12fc206b2b5dc5d0696c750", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -5,12 +5,12 @@ use crate::borrow_check::nll::region_infer::{Cause, RegionInferenceContext};\n use crate::borrow_check::nll::ToRegionVid;\n use crate::util::liveness::{self, DefUse};\n use rustc::mir::visit::{MirVisitable, PlaceContext, Visitor};\n-use rustc::mir::{Local, Location, Mir};\n+use rustc::mir::{Local, Location, Body};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n \n crate fn find<'tcx>(\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     regioncx: &Rc<RegionInferenceContext<'tcx>>,\n     tcx: TyCtxt<'_, '_, 'tcx>,\n     region_vid: RegionVid,\n@@ -28,7 +28,7 @@ crate fn find<'tcx>(\n }\n \n struct UseFinder<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n-    mir: &'cx Mir<'tcx>,\n+    mir: &'cx Body<'tcx>,\n     regioncx: &'cx Rc<RegionInferenceContext<'tcx>>,\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     region_vid: RegionVid,\n@@ -100,7 +100,7 @@ impl<'cx, 'gcx, 'tcx> UseFinder<'cx, 'gcx, 'tcx> {\n }\n \n struct DefUseVisitor<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n-    mir: &'cx Mir<'tcx>,\n+    mir: &'cx Body<'tcx>,\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     region_vid: RegionVid,\n     def_use_result: Option<DefUseResult>,"}, {"sha": "60c46b36f5f06bca6e025bb0b5c8a9147f2ad954", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -6,7 +6,7 @@ use crate::borrow_check::nll::region_infer::{Cause, RegionName};\n use crate::borrow_check::nll::ConstraintDescription;\n use crate::borrow_check::{MirBorrowckCtxt, WriteKind};\n use rustc::mir::{\n-    CastKind, ConstraintCategory, FakeReadCause, Local, Location, Mir, Operand, Place, PlaceBase,\n+    CastKind, ConstraintCategory, FakeReadCause, Local, Location, Body, Operand, Place, PlaceBase,\n     Projection, ProjectionElem, Rvalue, Statement, StatementKind, TerminatorKind,\n };\n use rustc::ty::{self, TyCtxt};\n@@ -54,7 +54,7 @@ impl BorrowExplanation {\n     pub(in crate::borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx, 'tcx>(\n         &self,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         borrow_desc: &str,\n         borrow_span: Option<Span>,"}, {"sha": "017f4d48c120050d2d833539a246913634e15933", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -11,7 +11,7 @@ use crate::borrow_check::path_utils::*;\n use crate::dataflow::indexes::BorrowIndex;\n use rustc::ty::TyCtxt;\n use rustc::mir::visit::Visitor;\n-use rustc::mir::{BasicBlock, Location, Mir, Place, PlaceBase, Rvalue};\n+use rustc::mir::{BasicBlock, Location, Body, Place, PlaceBase, Rvalue};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::TerminatorKind;\n use rustc::mir::{Operand, BorrowKind};\n@@ -21,7 +21,7 @@ pub(super) fn generate_invalidates<'cx, 'gcx, 'tcx>(\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n ) {\n     if all_facts.is_none() {\n@@ -39,15 +39,15 @@ pub(super) fn generate_invalidates<'cx, 'gcx, 'tcx>(\n             mir,\n             dominators,\n         };\n-        ig.visit_mir(mir);\n+        ig.visit_body(mir);\n     }\n }\n \n struct InvalidationGenerator<'cx, 'tcx: 'cx, 'gcx: 'tcx> {\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     all_facts: &'cx mut AllFacts,\n     location_table: &'cx LocationTable,\n-    mir: &'cx Mir<'tcx>,\n+    mir: &'cx Body<'tcx>,\n     dominators: Dominators<BasicBlock>,\n     borrow_set: &'cx BorrowSet<'tcx>,\n }"}, {"sha": "0fb1705c8c294748864f778bd6bfa2521360de72", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -11,7 +11,7 @@ use crate::transform::MirSource;\n use crate::borrow_check::Upvar;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir};\n+use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Body};\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc_errors::Diagnostic;\n use std::fmt::Debug;\n@@ -50,7 +50,7 @@ pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'gcx, 'tcx>,\n     def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n-    mir: &mut Mir<'tcx>,\n+    mir: &mut Body<'tcx>,\n ) -> UniversalRegions<'tcx> {\n     debug!(\"replace_regions_in_mir(def_id={:?})\", def_id);\n \n@@ -73,7 +73,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'gcx, 'tcx>,\n     def_id: DefId,\n     universal_regions: UniversalRegions<'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     upvars: &[Upvar],\n     location_table: &LocationTable,\n     param_env: ty::ParamEnv<'gcx>,\n@@ -213,7 +213,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n fn dump_mir_results<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     source: MirSource<'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'_>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n ) {\n@@ -273,7 +273,7 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n \n fn dump_annotation<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     mir_def_id: DefId,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,"}, {"sha": "db43ea0558cc7b6b4a3f82c362421f1cb3c4de0b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n use rustc::infer::NLLRegionVariableOrigin;\n-use rustc::mir::{ConstraintCategory, Location, Mir};\n+use rustc::mir::{ConstraintCategory, Location, Body};\n use rustc::ty::{self, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::{Diagnostic, DiagnosticBuilder};\n@@ -62,7 +62,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// path to blame.\n     fn best_blame_constraint(\n         &self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         from_region: RegionVid,\n         target_test: impl Fn(RegionVid) -> bool,\n     ) -> (ConstraintCategory, bool, Span) {\n@@ -237,7 +237,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Here we would be invoked with `fr = 'a` and `outlived_fr = `'b`.\n     pub(super) fn report_error(\n         &self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir_def_id: DefId,\n@@ -357,7 +357,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// ```\n     fn report_fnmut_error(\n         &self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir_def_id: DefId,\n@@ -422,7 +422,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// ```\n     fn report_escaping_data_error(\n         &self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir_def_id: DefId,\n@@ -514,7 +514,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// ```\n     fn report_general_error(\n         &self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir_def_id: DefId,\n@@ -667,7 +667,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     crate fn free_region_constraint_info(\n         &self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         mir_def_id: DefId,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n@@ -724,7 +724,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     // Finds a good span to blame for the fact that `fr1` outlives `fr2`.\n     crate fn find_outlives_blame_span(\n         &self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         fr1: RegionVid,\n         fr2: RegionVid,\n     ) -> (ConstraintCategory, Span) {\n@@ -735,7 +735,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     fn retrieve_closure_constraint_info(\n         &self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         constraint: &OutlivesConstraint,\n     ) -> (ConstraintCategory, bool, Span) {\n         let loc = match constraint.locations {"}, {"sha": "25415039fc80a7b29f731dd2b2b9918f235b6b35", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -7,7 +7,7 @@ use rustc::hir;\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::mir::Mir;\n+use rustc::mir::Body;\n use rustc::ty::subst::{SubstsRef, UnpackedKind};\n use rustc::ty::{self, RegionKind, RegionVid, Ty, TyCtxt};\n use rustc::ty::print::RegionHighlightMode;\n@@ -152,7 +152,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     crate fn give_region_a_name(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         mir_def_id: DefId,\n         fr: RegionVid,\n@@ -332,7 +332,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn give_name_if_anonymous_region_appears_in_arguments(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n@@ -360,7 +360,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn give_name_if_we_can_match_hir_ty_from_argument(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         mir_def_id: DefId,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n@@ -406,7 +406,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn give_name_if_we_cannot_match_hir_ty(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n         counter: &mut usize,\n@@ -676,7 +676,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn give_name_if_anonymous_region_appears_in_output(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n@@ -736,7 +736,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn give_name_if_anonymous_region_appears_in_yield_ty(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,"}, {"sha": "c02a492c34100295380e27095bf8a16570957eec", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,7 +1,7 @@\n use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n use crate::borrow_check::nll::ToRegionVid;\n use crate::borrow_check::Upvar;\n-use rustc::mir::{Local, Mir};\n+use rustc::mir::{Local, Body};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax::source_map::Span;\n@@ -11,7 +11,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     crate fn get_var_name_and_span_for_region(\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         fr: RegionVid,\n     ) -> Option<(Option<Symbol>, Span)> {\n@@ -120,7 +120,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// declared.\n     crate fn get_argument_name_and_span_for_region(\n         &self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         argument_index: usize,\n     ) -> (Option<Symbol>, Span) {\n         let implicit_inputs = self.universal_regions.defining_ty.implicit_inputs();"}, {"sha": "4a00571feb11045c59749994892ca7e0fc16aeeb", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -13,7 +13,7 @@ use rustc::infer::region_constraints::{GenericKind, VarInfos, VerifyBound};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin, RegionVariableOrigin};\n use rustc::mir::{\n     ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements,\n-    ConstraintCategory, Local, Location, Mir,\n+    ConstraintCategory, Local, Location, Body,\n };\n use rustc::ty::{self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::{self, ErrorReported};\n@@ -185,7 +185,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         universal_regions: Rc<UniversalRegions<'tcx>>,\n         placeholder_indices: Rc<PlaceholderIndices>,\n         universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n-        _mir: &Mir<'tcx>,\n+        _mir: &Body<'tcx>,\n         outlives_constraints: ConstraintSet,\n         closure_bounds_mapping: FxHashMap<\n             Location,\n@@ -400,7 +400,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(super) fn solve<'gcx>(\n         &mut self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         mir_def_id: DefId,\n         errors_buffer: &mut Vec<Diagnostic>,\n@@ -416,7 +416,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn solve_inner<'gcx>(\n         &mut self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         mir_def_id: DefId,\n         errors_buffer: &mut Vec<Diagnostic>,\n@@ -468,7 +468,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// for each region variable until all the constraints are\n     /// satisfied. Note that some values may grow **too** large to be\n     /// feasible, but we check this later.\n-    fn propagate_constraints(&mut self, _mir: &Mir<'tcx>) {\n+    fn propagate_constraints(&mut self, _mir: &Body<'tcx>) {\n         debug!(\"propagate_constraints()\");\n \n         debug!(\"propagate_constraints: constraints={:#?}\", {\n@@ -581,7 +581,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn check_type_tests<'gcx>(\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         mir_def_id: DefId,\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n         errors_buffer: &mut Vec<Diagnostic>,\n@@ -725,7 +725,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn try_promote_type_test<'gcx>(\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         type_test: &TypeTest<'tcx>,\n         propagated_outlives_requirements: &mut Vec<ClosureOutlivesRequirement<'gcx>>,\n     ) -> bool {\n@@ -944,7 +944,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn eval_verify_bound(\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         generic_ty: Ty<'tcx>,\n         lower_bound: RegionVid,\n         verify_bound: &VerifyBound<'tcx>,\n@@ -977,7 +977,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn eval_if_eq(\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         generic_ty: Ty<'tcx>,\n         lower_bound: RegionVid,\n         test_ty: Ty<'tcx>,\n@@ -1037,7 +1037,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     // Evaluate whether `sup_region: sub_region @ point`.\n     fn eval_outlives(\n         &self,\n-        _mir: &Mir<'tcx>,\n+        _mir: &Body<'tcx>,\n         sup_region: RegionVid,\n         sub_region: RegionVid,\n     ) -> bool {\n@@ -1105,7 +1105,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn check_universal_regions<'gcx>(\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         mir_def_id: DefId,\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n@@ -1150,7 +1150,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn check_universal_region<'gcx>(\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         mir_def_id: DefId,\n         longer_fr: RegionVid,\n@@ -1216,7 +1216,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         longer_fr: RegionVid,\n         shorter_fr: RegionVid,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         upvars: &[Upvar],\n         mir_def_id: DefId,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n@@ -1282,7 +1282,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn check_bound_universal_region<'gcx>(\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         _mir_def_id: DefId,\n         longer_fr: RegionVid,\n         placeholder: ty::PlaceholderRegion,"}, {"sha": "8822d7bb373934b4fb3129ca492a41c854e399d7", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,4 +1,4 @@\n-use rustc::mir::{BasicBlock, Location, Mir};\n+use rustc::mir::{BasicBlock, Location, Body};\n use rustc::ty::{self, RegionVid};\n use rustc_data_structures::bit_set::{HybridBitSet, SparseBitMatrix};\n use rustc_data_structures::fx::FxHashMap;\n@@ -20,7 +20,7 @@ crate struct RegionValueElements {\n }\n \n impl RegionValueElements {\n-    crate fn new(mir: &Mir<'_>) -> Self {\n+    crate fn new(mir: &Body<'_>) -> Self {\n         let mut num_points = 0;\n         let statements_before_block: IndexVec<BasicBlock, usize> = mir.basic_blocks()\n             .iter()\n@@ -92,7 +92,7 @@ impl RegionValueElements {\n     /// Pushes all predecessors of `index` onto `stack`.\n     crate fn push_predecessors(\n         &self,\n-        mir: &Mir<'_>,\n+        mir: &Body<'_>,\n         index: PointIndex,\n         stack: &mut Vec<PointIndex>,\n     ) {"}, {"sha": "a3b142c2ffcc309fa7e4c398ce53d4a4de8dbc20", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,17 +1,17 @@\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n-use rustc::mir::{Location, Mir};\n+use rustc::mir::{Location, Body};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n \n /// Replaces all free regions appearing in the MIR with fresh\n /// inference variables, returning the number of variables created.\n-pub fn renumber_mir<'tcx>(infcx: &InferCtxt<'_, '_, 'tcx>, mir: &mut Mir<'tcx>) {\n+pub fn renumber_mir<'tcx>(infcx: &InferCtxt<'_, '_, 'tcx>, mir: &mut Body<'tcx>) {\n     debug!(\"renumber_mir()\");\n     debug!(\"renumber_mir: mir.arg_count={:?}\", mir.arg_count);\n \n     let mut visitor = NLLVisitor { infcx };\n-    visitor.visit_mir(mir);\n+    visitor.visit_body(mir);\n }\n \n /// Replaces all regions appearing in `value` with fresh inference\n@@ -47,12 +47,12 @@ impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n-    fn visit_mir(&mut self, mir: &mut Mir<'tcx>) {\n+    fn visit_body(&mut self, mir: &mut Body<'tcx>) {\n         for promoted in mir.promoted.iter_mut() {\n-            self.visit_mir(promoted);\n+            self.visit_body(promoted);\n         }\n \n-        self.super_mir(mir);\n+        self.super_body(mir);\n     }\n \n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, ty_context: TyContext) {"}, {"sha": "120088e1784d432d44407764847d557e33296c9e", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -20,7 +20,7 @@ use super::{Locations, TypeChecker};\n impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     pub(super) fn equate_inputs_and_outputs(\n         &mut self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         universal_regions: &UniversalRegions<'tcx>,\n         normalized_inputs_and_output: &[Ty<'tcx>],\n     ) {"}, {"sha": "e1a7b9babd48a7f16b08c5c4488335f0b3ce58a1", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,7 +1,7 @@\n use crate::borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n use crate::util::liveness::{categorize, DefUse};\n use rustc::mir::visit::{PlaceContext, Visitor};\n-use rustc::mir::{Local, Location, Mir};\n+use rustc::mir::{Local, Location, Body};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::vec_linked_list as vll;\n \n@@ -60,7 +60,7 @@ impl LocalUseMap {\n     crate fn build(\n         live_locals: &Vec<Local>,\n         elements: &RegionValueElements,\n-        mir: &Mir<'_>,\n+        mir: &Body<'_>,\n     ) -> Self {\n         let nones = IndexVec::from_elem_n(None, mir.local_decls.len());\n         let mut local_use_map = LocalUseMap {\n@@ -81,7 +81,7 @@ impl LocalUseMap {\n             elements,\n             locals_with_use_data,\n         }\n-        .visit_mir(mir);\n+        .visit_body(mir);\n \n         local_use_map\n     }"}, {"sha": "3cefab36e23516575649f6d14ebdef2c732f9644", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -7,7 +7,7 @@ use crate::borrow_check::nll::ToRegionVid;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::FlowAtLocation;\n use crate::dataflow::MaybeInitializedPlaces;\n-use rustc::mir::{Local, Mir};\n+use rustc::mir::{Local, Body};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use std::rc::Rc;\n@@ -27,7 +27,7 @@ mod trace;\n /// performed before\n pub(super) fn generate<'gcx, 'tcx>(\n     typeck: &mut TypeChecker<'_, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n@@ -77,7 +77,7 @@ pub(super) fn generate<'gcx, 'tcx>(\n fn compute_live_locals(\n     tcx: TyCtxt<'_, '_, 'tcx>,\n     free_regions: &FxHashSet<RegionVid>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n ) -> Vec<Local> {\n     let live_locals: Vec<Local> = mir\n         .local_decls"}, {"sha": "345780c4760eb45a642e45625d32993f29df5231", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -7,7 +7,7 @@ use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n use rustc::infer::canonical::QueryRegionConstraint;\n-use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Mir};\n+use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Body};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;\n@@ -32,7 +32,7 @@ use std::rc::Rc;\n /// this respects `#[may_dangle]` annotations).\n pub(super) fn trace(\n     typeck: &mut TypeChecker<'_, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n@@ -72,7 +72,7 @@ where\n     elements: &'me RegionValueElements,\n \n     /// MIR we are analyzing.\n-    mir: &'me Mir<'tcx>,\n+    mir: &'me Body<'tcx>,\n \n     /// Mapping to/from the various indices used for initialization tracking.\n     move_data: &'me MoveData<'tcx>,"}, {"sha": "ad3b2f985d7023cf0dae1d51fea3918b237e2203", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -112,7 +112,7 @@ mod relate_tys;\n pub(crate) fn type_check<'gcx, 'tcx>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n     param_env: ty::ParamEnv<'gcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     mir_def_id: DefId,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n@@ -179,7 +179,7 @@ fn type_check_internal<'a, 'gcx, 'tcx, R>(\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     mir_def_id: DefId,\n     param_env: ty::ParamEnv<'gcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n@@ -198,7 +198,7 @@ fn type_check_internal<'a, 'gcx, 'tcx, R>(\n     );\n     let errors_reported = {\n         let mut verifier = TypeVerifier::new(&mut checker, mir);\n-        verifier.visit_mir(mir);\n+        verifier.visit_body(mir);\n         verifier.errors_reported\n     };\n \n@@ -253,7 +253,7 @@ enum FieldAccessError {\n /// is a problem.\n struct TypeVerifier<'a, 'b: 'a, 'gcx: 'tcx, 'tcx: 'b> {\n     cx: &'a mut TypeChecker<'b, 'gcx, 'tcx>,\n-    mir: &'b Mir<'tcx>,\n+    mir: &'b Body<'tcx>,\n     last_span: Span,\n     mir_def_id: DefId,\n     errors_reported: bool,\n@@ -368,20 +368,20 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_mir(&mut self, mir: &Mir<'tcx>) {\n+    fn visit_body(&mut self, mir: &Body<'tcx>) {\n         self.sanitize_type(&\"return type\", mir.return_ty());\n         for local_decl in &mir.local_decls {\n             self.sanitize_type(local_decl, local_decl.ty);\n         }\n         if self.errors_reported {\n             return;\n         }\n-        self.super_mir(mir);\n+        self.super_body(mir);\n     }\n }\n \n impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n-    fn new(cx: &'a mut TypeChecker<'b, 'gcx, 'tcx>, mir: &'b Mir<'tcx>) -> Self {\n+    fn new(cx: &'a mut TypeChecker<'b, 'gcx, 'tcx>, mir: &'b Body<'tcx>) -> Self {\n         TypeVerifier {\n             mir,\n             mir_def_id: cx.mir_def_id,\n@@ -538,7 +538,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         })\n     }\n \n-    fn sanitize_promoted(&mut self, promoted_mir: &'b Mir<'tcx>, location: Location) {\n+    fn sanitize_promoted(&mut self, promoted_mir: &'b Body<'tcx>, location: Location) {\n         // Determine the constraints from the promoted MIR by running the type\n         // checker on the promoted MIR, then transfer the constraints back to\n         // the main MIR, changing the locations to the provided location.\n@@ -562,7 +562,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             &mut closure_bounds\n         );\n \n-        self.visit_mir(promoted_mir);\n+        self.visit_body(promoted_mir);\n \n         if !self.errors_reported {\n             // if verifier failed, don't do further checks to avoid ICEs\n@@ -969,7 +969,7 @@ impl Locations {\n     }\n \n     /// Gets a span representing the location.\n-    pub fn span(&self, mir: &Mir<'_>) -> Span {\n+    pub fn span(&self, mir: &Body<'_>) -> Span {\n         match self {\n             Locations::All(span) => *span,\n             Locations::Single(l) => mir.source_info(*l).span,\n@@ -980,7 +980,7 @@ impl Locations {\n impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn new(\n         infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-        mir: &'a Mir<'tcx>,\n+        mir: &'a Body<'tcx>,\n         mir_def_id: DefId,\n         param_env: ty::ParamEnv<'gcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n@@ -1317,7 +1317,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn check_stmt(&mut self, mir: &Mir<'tcx>, stmt: &Statement<'tcx>, location: Location) {\n+    fn check_stmt(&mut self, mir: &Body<'tcx>, stmt: &Statement<'tcx>, location: Location) {\n         debug!(\"check_stmt: {:?}\", stmt);\n         let tcx = self.tcx();\n         match stmt.kind {\n@@ -1456,7 +1456,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn check_terminator(\n         &mut self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         term: &Terminator<'tcx>,\n         term_location: Location,\n     ) {\n@@ -1618,7 +1618,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn check_call_dest(\n         &mut self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         term: &Terminator<'tcx>,\n         sig: &ty::FnSig<'tcx>,\n         destination: &Option<(Place<'tcx>, BasicBlock)>,\n@@ -1687,7 +1687,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn check_call_inputs(\n         &mut self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         term: &Terminator<'tcx>,\n         sig: &ty::FnSig<'tcx>,\n         args: &[Operand<'tcx>],\n@@ -1728,7 +1728,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn check_iscleanup(&mut self, mir: &Mir<'tcx>, block_data: &BasicBlockData<'tcx>) {\n+    fn check_iscleanup(&mut self, mir: &Body<'tcx>, block_data: &BasicBlockData<'tcx>) {\n         let is_cleanup = block_data.is_cleanup;\n         self.last_span = block_data.terminator().source_info.span;\n         match block_data.terminator().kind {\n@@ -1820,7 +1820,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn assert_iscleanup(\n         &mut self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         ctxt: &dyn fmt::Debug,\n         bb: BasicBlock,\n         iscleanuppad: bool,\n@@ -1836,7 +1836,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn check_local(&mut self, mir: &Mir<'tcx>, local: Local, local_decl: &LocalDecl<'tcx>) {\n+    fn check_local(&mut self, mir: &Body<'tcx>, local: Local, local_decl: &LocalDecl<'tcx>) {\n         match mir.local_kind(local) {\n             LocalKind::ReturnPointer | LocalKind::Arg => {\n                 // return values of normal functions are required to be\n@@ -1938,7 +1938,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn check_rvalue(&mut self, mir: &Mir<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {\n+    fn check_rvalue(&mut self, mir: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {\n         let tcx = self.tcx();\n \n         match rvalue {\n@@ -2274,7 +2274,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn check_aggregate_rvalue(\n         &mut self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         rvalue: &Rvalue<'tcx>,\n         aggregate_kind: &AggregateKind<'tcx>,\n         operands: &[Operand<'tcx>],\n@@ -2332,7 +2332,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     /// - `borrowed_place`: the place `P` being borrowed\n     fn add_reborrow_constraint(\n         &mut self,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         location: Location,\n         borrow_region: ty::Region<'tcx>,\n         borrowed_place: &Place<'tcx>,\n@@ -2621,7 +2621,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    fn typeck_mir(&mut self, mir: &Mir<'tcx>) {\n+    fn typeck_mir(&mut self, mir: &Body<'tcx>) {\n         self.last_span = mir.span;\n         debug!(\"run_on_mir: {:?}\", mir.span);\n "}, {"sha": "557d235c23f0555b8ced991aa4b5b93d61f7edef", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -2,7 +2,7 @@ use crate::borrow_check::borrow_set::{BorrowSet, BorrowData, TwoPhaseActivation}\n use crate::borrow_check::places_conflict;\n use crate::borrow_check::AccessDepth;\n use crate::dataflow::indexes::BorrowIndex;\n-use rustc::mir::{BasicBlock, Location, Mir, Place, PlaceBase};\n+use rustc::mir::{BasicBlock, Location, Body, Place, PlaceBase};\n use rustc::mir::{ProjectionElem, BorrowKind};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::graph::dominators::Dominators;\n@@ -25,7 +25,7 @@ pub(super) enum Control {\n pub(super) fn each_borrow_involving_path<'a, 'tcx, 'gcx: 'tcx, F, I, S> (\n     s: &mut S,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     _location: Location,\n     access_place: (AccessDepth, &Place<'tcx>),\n     borrow_set: &BorrowSet<'tcx>,"}, {"sha": "9306e88e9ae9c804704a2a015a31700566d86c22", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir;\n use rustc::mir::ProjectionElem;\n-use rustc::mir::{Mir, Place, PlaceBase, Mutability, Static, StaticKind};\n+use rustc::mir::{Body, Place, PlaceBase, Mutability, Static, StaticKind};\n use rustc::ty::{self, TyCtxt};\n use crate::borrow_check::borrow_set::LocalsStateAtExit;\n \n@@ -13,7 +13,7 @@ crate trait PlaceExt<'tcx> {\n     fn ignore_borrow(\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         locals_state_at_exit: &LocalsStateAtExit,\n         ) -> bool;\n }\n@@ -22,7 +22,7 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n     fn ignore_borrow(\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         locals_state_at_exit: &LocalsStateAtExit,\n     ) -> bool {\n         self.iterate(|place_base, place_projection| {"}, {"sha": "74da3f96653e4314612c044c4f3e1414528e1cbc", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -3,7 +3,7 @@ use crate::borrow_check::Overlap;\n use crate::borrow_check::{Deep, Shallow, AccessDepth};\n use rustc::hir;\n use rustc::mir::{\n-    BorrowKind, Mir, Place, PlaceBase, Projection, ProjectionElem, ProjectionsIter,\n+    BorrowKind, Body, Place, PlaceBase, Projection, ProjectionElem, ProjectionsIter,\n     StaticKind\n };\n use rustc::ty::{self, TyCtxt};\n@@ -26,7 +26,7 @@ crate enum PlaceConflictBias {\n /// dataflow).\n crate fn places_conflict<'gcx, 'tcx>(\n     tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     borrow_place: &Place<'tcx>,\n     access_place: &Place<'tcx>,\n     bias: PlaceConflictBias,\n@@ -48,7 +48,7 @@ crate fn places_conflict<'gcx, 'tcx>(\n /// order to make the conservative choice and preserve soundness.\n pub(super) fn borrow_conflicts_with_place<'gcx, 'tcx>(\n     tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     borrow_place: &Place<'tcx>,\n     borrow_kind: BorrowKind,\n     access_place: &Place<'tcx>,\n@@ -85,7 +85,7 @@ pub(super) fn borrow_conflicts_with_place<'gcx, 'tcx>(\n \n fn place_components_conflict<'gcx, 'tcx>(\n     tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     borrow_projections: (&PlaceBase<'tcx>, ProjectionsIter<'_, 'tcx>),\n     borrow_kind: BorrowKind,\n     access_projections: (&PlaceBase<'tcx>, ProjectionsIter<'_, 'tcx>),\n@@ -367,7 +367,7 @@ fn place_base_conflict<'a, 'gcx: 'tcx, 'tcx>(\n // between `elem1` and `elem2`.\n fn place_projection_conflict<'a, 'gcx: 'tcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     pi1: &Projection<'tcx>,\n     pi2: &Projection<'tcx>,\n     bias: PlaceConflictBias,"}, {"sha": "0e1abeba70dffb0a834faa654fcea54c746905bc", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -11,7 +11,7 @@ use super::MirBorrowckCtxt;\n \n use rustc::hir;\n use rustc::ty::{self, TyCtxt};\n-use rustc::mir::{Mir, Place, PlaceBase, ProjectionElem};\n+use rustc::mir::{Body, Place, PlaceBase, ProjectionElem};\n \n pub trait IsPrefixOf<'tcx> {\n     fn is_prefix_of(&self, other: &Place<'tcx>) -> bool;\n@@ -38,7 +38,7 @@ impl<'tcx> IsPrefixOf<'tcx> for Place<'tcx> {\n \n \n pub(super) struct Prefixes<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n-    mir: &'cx Mir<'tcx>,\n+    mir: &'cx Body<'tcx>,\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     kind: PrefixSet,\n     next: Option<&'cx Place<'tcx>>,"}, {"sha": "abfc2f9466c8ed74aca33687e7b421ec51aff0cc", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -34,7 +34,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 never_initialized_mut_locals: &mut never_initialized_mut_locals,\n                 mbcx: self,\n             };\n-            visitor.visit_mir(visitor.mbcx.mir);\n+            visitor.visit_body(visitor.mbcx.mir);\n         }\n \n         // Take the union of the existed `used_mut` set with those variables we've found were"}, {"sha": "5797f9c34786617d01d834d833da6768e8212f74", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -26,7 +26,7 @@ use syntax_pos::Span;\n use super::lints;\n \n /// Construct the MIR for a given `DefId`.\n-pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'tcx> {\n+pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Body<'tcx> {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n@@ -164,14 +164,14 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             build::construct_const(cx, body_id, return_ty, return_ty_span)\n         };\n \n-        // Convert the Mir to global types.\n+        // Convert the `mir::Body` to global types.\n         let mut globalizer = GlobalizeMir {\n             tcx,\n             span: mir.span\n         };\n-        globalizer.visit_mir(&mut mir);\n+        globalizer.visit_body(&mut mir);\n         let mir = unsafe {\n-            mem::transmute::<Mir<'_>, Mir<'tcx>>(mir)\n+            mem::transmute::<Body<'_>, Body<'tcx>>(mir)\n         };\n \n         mir_util::dump_mir(tcx, None, \"mir_map\", &0,\n@@ -236,22 +236,22 @@ impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> {\n fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      ctor_id: hir::HirId,\n                                      v: &'tcx hir::VariantData)\n-                                     -> Mir<'tcx>\n+                                     -> Body<'tcx>\n {\n     let span = tcx.hir().span_by_hir_id(ctor_id);\n     if let hir::VariantData::Tuple(ref fields, ctor_id) = *v {\n         tcx.infer_ctxt().enter(|infcx| {\n             let mut mir = shim::build_adt_ctor(&infcx, ctor_id, fields, span);\n \n-            // Convert the Mir to global types.\n+            // Convert the `mir::Body` to global types.\n             let tcx = infcx.tcx.global_tcx();\n             let mut globalizer = GlobalizeMir {\n                 tcx,\n                 span: mir.span\n             };\n-            globalizer.visit_mir(&mut mir);\n+            globalizer.visit_body(&mut mir);\n             let mir = unsafe {\n-                mem::transmute::<Mir<'_>, Mir<'tcx>>(mir)\n+                mem::transmute::<Body<'_>, Body<'tcx>>(mir)\n             };\n \n             mir_util::dump_mir(tcx, None, \"mir_map\", &0,\n@@ -628,7 +628,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                    yield_ty: Option<Ty<'gcx>>,\n                                    return_ty_span: Span,\n                                    body: &'gcx hir::Body)\n-                                   -> Mir<'tcx>\n+                                   -> Body<'tcx>\n     where A: Iterator<Item=ArgInfo<'gcx>>\n {\n     let arguments: Vec<_> = arguments.collect();\n@@ -748,7 +748,7 @@ fn construct_const<'a, 'gcx, 'tcx>(\n     body_id: hir::BodyId,\n     const_ty: Ty<'tcx>,\n     const_ty_span: Span,\n-) -> Mir<'tcx> {\n+) -> Body<'tcx> {\n     let tcx = hir.tcx();\n     let owner_id = tcx.hir().body_owner(body_id);\n     let span = tcx.hir().span(owner_id);\n@@ -787,7 +787,7 @@ fn construct_const<'a, 'gcx, 'tcx>(\n \n fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n                                    body_id: hir::BodyId)\n-                                   -> Mir<'tcx> {\n+                                   -> Body<'tcx> {\n     let owner_id = hir.tcx().hir().body_owner(body_id);\n     let span = hir.tcx().hir().span(owner_id);\n     let ty = hir.tcx().types.err;\n@@ -849,14 +849,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn finish(self,\n               yield_ty: Option<Ty<'tcx>>)\n-              -> Mir<'tcx> {\n+              -> Body<'tcx> {\n         for (index, block) in self.cfg.basic_blocks.iter().enumerate() {\n             if block.terminator.is_none() {\n                 span_bug!(self.fn_span, \"no terminator on block {:?}\", index);\n             }\n         }\n \n-        Mir::new(\n+        Body::new(\n             self.cfg.basic_blocks,\n             self.source_scopes,\n             ClearCrossCrate::Set(self.source_scope_local_data),"}, {"sha": "0637c7b0588827de149d11319a5176731e1fb8fc", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -55,7 +55,7 @@ pub(crate) fn mk_eval_cx<'a, 'mir, 'tcx>(\n pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     cid: GlobalId<'tcx>,\n-    mir: &'mir mir::Mir<'tcx>,\n+    mir: &'mir mir::Body<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n     let span = tcx.def_span(cid.instance.def_id());\n@@ -137,7 +137,7 @@ fn op_to_const<'tcx>(\n fn eval_body_using_ecx<'mir, 'tcx>(\n     ecx: &mut CompileTimeEvalContext<'_, 'mir, 'tcx>,\n     cid: GlobalId<'tcx>,\n-    mir: &'mir mir::Mir<'tcx>,\n+    mir: &'mir mir::Body<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n     debug!(\"eval_body_using_ecx: {:?}, {:?}\", cid, param_env);\n@@ -331,7 +331,7 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n         args: &[OpTy<'tcx>],\n         dest: Option<PlaceTy<'tcx>>,\n         ret: Option<mir::BasicBlock>,\n-    ) -> EvalResult<'tcx, Option<&'mir mir::Mir<'tcx>>> {\n+    ) -> EvalResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         debug!(\"eval_fn_call: {:?}\", instance);\n         // Only check non-glue functions\n         if let ty::InstanceDef::Item(def_id) = instance.def {"}, {"sha": "f9d88ab879596f916438b9d240730ad324ac80ba", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,4 +1,4 @@\n-use rustc::mir::{self, Mir, Location};\n+use rustc::mir::{self, Body, Location};\n use rustc::ty::{self, TyCtxt};\n use crate::util::elaborate_drops::DropFlagState;\n \n@@ -47,7 +47,7 @@ pub fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,\n //\n // FIXME: we have to do something for moving slice patterns.\n fn place_contents_drop_state_cannot_differ<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                                            mir: &Mir<'tcx>,\n+                                                            mir: &Body<'tcx>,\n                                                             place: &mir::Place<'tcx>) -> bool {\n     let ty = place.ty(mir, tcx).ty;\n     match ty.sty {\n@@ -74,7 +74,7 @@ fn place_contents_drop_state_cannot_differ<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx,\n \n pub(crate) fn on_lookup_result_bits<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n     lookup_result: LookupResult,\n     each_child: F)\n@@ -92,15 +92,15 @@ pub(crate) fn on_lookup_result_bits<'a, 'gcx, 'tcx, F>(\n \n pub(crate) fn on_all_children_bits<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n     move_path_index: MovePathIndex,\n     mut each_child: F)\n     where F: FnMut(MovePathIndex)\n {\n     fn is_terminal_path<'a, 'gcx, 'tcx>(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         move_data: &MoveData<'tcx>,\n         path: MovePathIndex) -> bool\n     {\n@@ -110,7 +110,7 @@ pub(crate) fn on_all_children_bits<'a, 'gcx, 'tcx, F>(\n \n     fn on_all_children_bits<'a, 'gcx, 'tcx, F>(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n+        mir: &Body<'tcx>,\n         move_data: &MoveData<'tcx>,\n         move_path_index: MovePathIndex,\n         each_child: &mut F)\n@@ -133,7 +133,7 @@ pub(crate) fn on_all_children_bits<'a, 'gcx, 'tcx, F>(\n \n pub(crate) fn on_all_drop_children_bits<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'gcx, 'tcx>,\n     path: MovePathIndex,\n     mut each_child: F)\n@@ -156,7 +156,7 @@ pub(crate) fn on_all_drop_children_bits<'a, 'gcx, 'tcx, F>(\n \n pub(crate) fn drop_flag_effects_for_function_entry<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'gcx, 'tcx>,\n     mut callback: F)\n     where F: FnMut(MovePathIndex, DropFlagState)\n@@ -173,7 +173,7 @@ pub(crate) fn drop_flag_effects_for_function_entry<'a, 'gcx, 'tcx, F>(\n \n pub(crate) fn drop_flag_effects_for_location<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'gcx, 'tcx>,\n     loc: Location,\n     mut callback: F)\n@@ -205,7 +205,7 @@ pub(crate) fn drop_flag_effects_for_location<'a, 'gcx, 'tcx, F>(\n \n pub(crate) fn for_location_inits<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n     loc: Location,\n     mut callback: F)"}, {"sha": "4965f1a585d482aad4e9d6f2b0569d047879ae39", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,7 +1,7 @@\n //! Hook into libgraphviz for rendering dataflow graphs for MIR.\n \n use rustc::hir::def_id::DefId;\n-use rustc::mir::{BasicBlock, Mir};\n+use rustc::mir::{BasicBlock, Body};\n \n use std::fs;\n use std::io;\n@@ -17,7 +17,7 @@ use super::DebugFormatted;\n pub trait MirWithFlowState<'tcx> {\n     type BD: BitDenotation<'tcx>;\n     fn def_id(&self) -> DefId;\n-    fn mir(&self) -> &Mir<'tcx>;\n+    fn mir(&self) -> &Body<'tcx>;\n     fn flow_state(&self) -> &DataflowState<'tcx, Self::BD>;\n }\n \n@@ -26,7 +26,7 @@ impl<'a, 'tcx, BD> MirWithFlowState<'tcx> for DataflowBuilder<'a, 'tcx, BD>\n {\n     type BD = BD;\n     fn def_id(&self) -> DefId { self.def_id }\n-    fn mir(&self) -> &Mir<'tcx> { self.flow_state.mir() }\n+    fn mir(&self) -> &Body<'tcx> { self.flow_state.mir() }\n     fn flow_state(&self) -> &DataflowState<'tcx, Self::BD> { &self.flow_state.flow_state }\n }\n \n@@ -59,7 +59,7 @@ pub type Node = BasicBlock;\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct Edge { source: BasicBlock, index: usize }\n \n-fn outgoing(mir: &Mir<'_>, bb: BasicBlock) -> Vec<Edge> {\n+fn outgoing(mir: &Body<'_>, bb: BasicBlock) -> Vec<Edge> {\n     (0..mir[bb].terminator().successors().count())\n         .map(|index| Edge { source: bb, index: index}).collect()\n }\n@@ -124,7 +124,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                          n: &Node,\n                                          w: &mut W,\n                                          block: BasicBlock,\n-                                         mir: &Mir<'_>) -> io::Result<()> {\n+                                         mir: &Body<'_>) -> io::Result<()> {\n         // Header rows\n         const HDRS: [&str; 4] = [\"ENTRY\", \"MIR\", \"BLOCK GENS\", \"BLOCK KILLS\"];\n         const HDR_FMT: &str = \"bgcolor=\\\"grey\\\"\";\n@@ -149,7 +149,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                             n: &Node,\n                                             w: &mut W,\n                                             block: BasicBlock,\n-                                            mir: &Mir<'_>)\n+                                            mir: &Body<'_>)\n                                             -> io::Result<()> {\n         let i = n.index();\n \n@@ -199,7 +199,7 @@ where MWF: MirWithFlowState<'tcx>,\n                                           n: &Node,\n                                           w: &mut W,\n                                           block: BasicBlock,\n-                                          mir: &Mir<'_>)\n+                                          mir: &Body<'_>)\n                                           -> io::Result<()> {\n         let i = n.index();\n "}, {"sha": "47af10a1c5023072d6431a02073a8514e6263d44", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -12,16 +12,16 @@ use crate::dataflow::BitDenotation;\n /// immovable generators.\n #[derive(Copy, Clone)]\n pub struct HaveBeenBorrowedLocals<'a, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n }\n \n impl<'a, 'tcx: 'a> HaveBeenBorrowedLocals<'a, 'tcx> {\n-    pub fn new(mir: &'a Mir<'tcx>)\n+    pub fn new(mir: &'a Body<'tcx>)\n                -> Self {\n         HaveBeenBorrowedLocals { mir }\n     }\n \n-    pub fn mir(&self) -> &Mir<'tcx> {\n+    pub fn mir(&self) -> &Body<'tcx> {\n         self.mir\n     }\n }"}, {"sha": "99051fb37f1488b9e91ada1e849971d2a75d4326", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,7 +1,7 @@\n use crate::borrow_check::borrow_set::{BorrowSet, BorrowData};\n use crate::borrow_check::place_ext::PlaceExt;\n \n-use rustc::mir::{self, Location, Place, PlaceBase, Mir};\n+use rustc::mir::{self, Location, Place, PlaceBase, Body};\n use rustc::ty::TyCtxt;\n use rustc::ty::RegionVid;\n \n@@ -31,7 +31,7 @@ newtype_index! {\n /// borrows in compact bitvectors.\n pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n \n     borrow_set: Rc<BorrowSet<'tcx>>,\n     borrows_out_of_scope_at_location: FxHashMap<Location, Vec<BorrowIndex>>,\n@@ -48,7 +48,7 @@ struct StackEntry {\n }\n \n fn precompute_borrows_out_of_scope<'tcx>(\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     regioncx: &Rc<RegionInferenceContext<'tcx>>,\n     borrows_out_of_scope_at_location: &mut FxHashMap<Location, Vec<BorrowIndex>>,\n     borrow_index: BorrowIndex,\n@@ -136,7 +136,7 @@ fn precompute_borrows_out_of_scope<'tcx>(\n impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     crate fn new(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        mir: &'a Mir<'tcx>,\n+        mir: &'a Body<'tcx>,\n         nonlexical_regioncx: Rc<RegionInferenceContext<'tcx>>,\n         borrow_set: &Rc<BorrowSet<'tcx>>,\n     ) -> Self {"}, {"sha": "4f3b180edd111812323a536db9e87da2cc3a7a09", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -3,7 +3,7 @@\n //! zero-sized structure.\n \n use rustc::ty::TyCtxt;\n-use rustc::mir::{self, Mir, Location};\n+use rustc::mir::{self, Body, Location};\n use rustc_data_structures::bit_set::{BitSet, BitSetOperator};\n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -65,13 +65,13 @@ pub(super) mod borrows;\n /// places that would require a dynamic drop-flag at that statement.\n pub struct MaybeInitializedPlaces<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx: 'tcx, 'tcx> MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-               mir: &'a Mir<'tcx>,\n+               mir: &'a Body<'tcx>,\n                mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>)\n                -> Self\n     {\n@@ -120,13 +120,13 @@ impl<'a, 'gcx, 'tcx> HasMoveData<'tcx> for MaybeInitializedPlaces<'a, 'gcx, 'tcx\n /// places that would require a dynamic drop-flag at that statement.\n pub struct MaybeUninitializedPlaces<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx, 'tcx> MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-               mir: &'a Mir<'tcx>,\n+               mir: &'a Body<'tcx>,\n                mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>)\n                -> Self\n     {\n@@ -174,13 +174,13 @@ impl<'a, 'gcx, 'tcx> HasMoveData<'tcx> for MaybeUninitializedPlaces<'a, 'gcx, 't\n /// that would require a dynamic drop-flag at that statement.\n pub struct DefinitelyInitializedPlaces<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx, 'tcx: 'a> DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-               mir: &'a Mir<'tcx>,\n+               mir: &'a Body<'tcx>,\n                mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>)\n                -> Self\n     {\n@@ -223,13 +223,13 @@ impl<'a, 'gcx, 'tcx: 'a> HasMoveData<'tcx> for DefinitelyInitializedPlaces<'a, '\n /// ```\n pub struct EverInitializedPlaces<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx: 'tcx, 'tcx: 'a> EverInitializedPlaces<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-               mir: &'a Mir<'tcx>,\n+               mir: &'a Body<'tcx>,\n                mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>)\n                -> Self\n     {"}, {"sha": "ab79d6cc947e8146279b67ac8f8de11148e8ed4c", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -5,16 +5,16 @@ use crate::dataflow::BitDenotation;\n \n #[derive(Copy, Clone)]\n pub struct MaybeStorageLive<'a, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n }\n \n impl<'a, 'tcx: 'a> MaybeStorageLive<'a, 'tcx> {\n-    pub fn new(mir: &'a Mir<'tcx>)\n+    pub fn new(mir: &'a Body<'tcx>)\n                -> Self {\n         MaybeStorageLive { mir }\n     }\n \n-    pub fn mir(&self) -> &Mir<'tcx> {\n+    pub fn mir(&self) -> &Body<'tcx> {\n         self.mir\n     }\n }"}, {"sha": "26bad0cb04d7061271f9b85deefd1b2bae33aff3", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::work_queue::WorkQueue;\n \n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TyCtxt};\n-use rustc::mir::{self, Mir, BasicBlock, BasicBlockData, Location, Statement, Terminator};\n+use rustc::mir::{self, Body, BasicBlock, BasicBlockData, Location, Statement, Terminator};\n use rustc::mir::traversal;\n use rustc::session::Session;\n \n@@ -122,7 +122,7 @@ pub struct MoveDataParamEnv<'gcx, 'tcx> {\n }\n \n pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                                 mir: &'a Mir<'tcx>,\n+                                                 mir: &'a Body<'tcx>,\n                                                  def_id: DefId,\n                                                  attributes: &[ast::Attribute],\n                                                  dead_unwinds: &BitSet<BasicBlock>,\n@@ -343,13 +343,13 @@ pub(crate) trait DataflowResultsConsumer<'a, 'tcx: 'a> {\n \n     // Delegated Hooks: Provide access to the MIR and process the flow state.\n \n-    fn mir(&self) -> &'a Mir<'tcx>;\n+    fn mir(&self) -> &'a Body<'tcx>;\n }\n \n pub fn state_for_location<'tcx, T: BitDenotation<'tcx>>(loc: Location,\n                                                         analysis: &T,\n                                                         result: &DataflowResults<'tcx, T>,\n-                                                        mir: &Mir<'tcx>)\n+                                                        mir: &Body<'tcx>)\n     -> BitSet<T::Idx> {\n     let mut on_entry = result.sets().on_entry_set_for(loc.block.index()).to_owned();\n     let mut kill_set = on_entry.to_hybrid();\n@@ -384,7 +384,7 @@ pub struct DataflowAnalysis<'a, 'tcx: 'a, O> where O: BitDenotation<'tcx>\n {\n     flow_state: DataflowState<'tcx, O>,\n     dead_unwinds: &'a BitSet<mir::BasicBlock>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n }\n \n impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation<'tcx>\n@@ -393,7 +393,7 @@ impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation<'tcx>\n         DataflowResults(self.flow_state)\n     }\n \n-    pub fn mir(&self) -> &'a Mir<'tcx> { self.mir }\n+    pub fn mir(&self) -> &'a Body<'tcx> { self.mir }\n }\n \n pub struct DataflowResults<'tcx, O>(pub(crate) DataflowState<'tcx, O>) where O: BitDenotation<'tcx>;\n@@ -697,7 +697,7 @@ pub trait BitDenotation<'tcx>: BitSetOperator {\n \n impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation<'tcx>\n {\n-    pub fn new(mir: &'a Mir<'tcx>,\n+    pub fn new(mir: &'a Body<'tcx>,\n                dead_unwinds: &'a BitSet<mir::BasicBlock>,\n                denotation: D) -> Self where D: InitialFlow {\n         let bits_per_block = denotation.bits_per_block();"}, {"sha": "816a269625399e7706a946a4658287c1c816c0f1", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -13,14 +13,14 @@ use super::{MoveError, InitIndex, Init, InitLocation, LookupResult, InitKind};\n use super::IllegalMoveOriginKind::*;\n \n struct MoveDataBuilder<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     data: MoveData<'tcx>,\n     errors: Vec<(Place<'tcx>, MoveError<'tcx>)>,\n }\n \n impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n-    fn new(mir: &'a Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n+    fn new(mir: &'a Body<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n         let mut move_paths = IndexVec::new();\n         let mut path_map = IndexVec::new();\n         let mut init_path_map = IndexVec::new();\n@@ -203,7 +203,7 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n }\n \n pub(super) fn gather_moves<'a, 'gcx, 'tcx>(\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>\n ) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n     let mut builder = MoveDataBuilder::new(mir, tcx);"}, {"sha": "0d20040d0d2d7d187fec366870ef3bc0129dcca9", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -138,7 +138,7 @@ impl<T> IndexMut<Location> for LocationMap<T> {\n }\n \n impl<T> LocationMap<T> where T: Default + Clone {\n-    fn new(mir: &Mir<'_>) -> Self {\n+    fn new(mir: &Body<'_>) -> Self {\n         LocationMap {\n             map: mir.basic_blocks().iter().map(|block| {\n                 vec![T::default(); block.statements.len()+1]\n@@ -205,7 +205,7 @@ impl fmt::Debug for Init {\n }\n \n impl Init {\n-    crate fn span<'gcx>(&self, mir: &Mir<'gcx>) -> Span {\n+    crate fn span<'gcx>(&self, mir: &Body<'gcx>) -> Span {\n         match self.location {\n             InitLocation::Argument(local) => mir.local_decls[local].source_info.span,\n             InitLocation::Statement(location) => mir.source_info(location).span,\n@@ -306,7 +306,7 @@ impl<'tcx> MoveError<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> MoveData<'tcx> {\n-    pub fn gather_moves(mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n+    pub fn gather_moves(mir: &Body<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                         -> Result<Self, (Self, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n         builder::gather_moves(mir, tcx)\n     }"}, {"sha": "80f64e85f9cf9201c11937dd66bbcfc24a8afaeb", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -44,7 +44,7 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     /// Whether this constant/function needs overflow checks.\n     check_overflow: bool,\n \n-    /// See field with the same name on `Mir`.\n+    /// See field with the same name on `mir::Body`.\n     control_flow_destroyed: Vec<(Span, String)>,\n }\n "}, {"sha": "d3cbd2bcc03a52e0cd688805be5ff89862494b08", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -53,7 +53,7 @@ pub struct Frame<'mir, 'tcx: 'mir, Tag=(), Extra=()> {\n     // Function and callsite information\n     ////////////////////////////////////////////////////////////////////////////////\n     /// The MIR for the function called on this frame.\n-    pub mir: &'mir mir::Mir<'tcx>,\n+    pub mir: &'mir mir::Body<'tcx>,\n \n     /// The def_id and substs of the current function.\n     pub instance: ty::Instance<'tcx>,\n@@ -244,7 +244,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n     }\n \n     #[inline(always)]\n-    pub(super) fn mir(&self) -> &'mir mir::Mir<'tcx> {\n+    pub(super) fn mir(&self) -> &'mir mir::Body<'tcx> {\n         self.frame().mir\n     }\n \n@@ -294,7 +294,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n     pub fn load_mir(\n         &self,\n         instance: ty::InstanceDef<'tcx>,\n-    ) -> EvalResult<'tcx, &'tcx mir::Mir<'tcx>> {\n+    ) -> EvalResult<'tcx, &'tcx mir::Body<'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         let did = instance.def_id();\n         if did.is_local()\n@@ -472,7 +472,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         span: source_map::Span,\n-        mir: &'mir mir::Mir<'tcx>,\n+        mir: &'mir mir::Body<'tcx>,\n         return_place: Option<PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,\n     ) -> EvalResult<'tcx> {"}, {"sha": "873c2d2ec6088b1e01e94947b7770e3b6cdecb55", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -117,7 +117,7 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         dest: Option<PlaceTy<'tcx, Self::PointerTag>>,\n         ret: Option<mir::BasicBlock>,\n-    ) -> EvalResult<'tcx, Option<&'mir mir::Mir<'tcx>>>;\n+    ) -> EvalResult<'tcx, Option<&'mir mir::Body<'tcx>>>;\n \n     /// Directly process an intrinsic without pushing a stack frame.\n     /// If this returns successfully, the engine will take care of jumping to the next block."}, {"sha": "cbfc89934718600c9337c4b40e0b81fab9bc4a6b", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -3,12 +3,12 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n-use rustc::mir::{self, Mir, TerminatorKind};\n+use rustc::mir::{self, Body, TerminatorKind};\n use rustc::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n use rustc::ty::subst::InternalSubsts;\n \n pub fn check(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-             mir: &Mir<'tcx>,\n+             mir: &Body<'tcx>,\n              def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n@@ -19,7 +19,7 @@ pub fn check(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         fn_kind: FnKind<'_>,\n-                                        mir: &Mir<'tcx>,\n+                                        mir: &Body<'tcx>,\n                                         def_id: DefId) {\n     if let FnKind::Closure(_) = fn_kind {\n         // closures can't recur, so they don't matter."}, {"sha": "c1131336f3636a08606c48c619eba604eaec4464", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -517,7 +517,7 @@ fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n struct MirNeighborCollector<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a mir::Mir<'tcx>,\n+    mir: &'a mir::Body<'tcx>,\n     output: &'a mut Vec<MonoItem<'tcx>>,\n     param_substs: SubstsRef<'tcx>,\n }\n@@ -1218,7 +1218,7 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         mir: &mir,\n         output,\n         param_substs: instance.substs,\n-    }.visit_mir(&mir);\n+    }.visit_body(&mir);\n     let param_env = ty::ParamEnv::reveal_all();\n     for i in 0..mir.promoted.len() {\n         use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "087f8779b6916fb896a82e47525dba45bf040694", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -28,7 +28,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n \n fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        instance: ty::InstanceDef<'tcx>)\n-                       -> &'tcx Mir<'tcx>\n+                       -> &'tcx Body<'tcx>\n {\n     debug!(\"make_shim({:?})\", instance);\n \n@@ -169,7 +169,7 @@ fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              def_id: DefId,\n                              ty: Option<Ty<'tcx>>)\n-                             -> Mir<'tcx>\n+                             -> Body<'tcx>\n {\n     debug!(\"build_drop_shim(def_id={:?}, ty={:?})\", def_id, ty);\n \n@@ -202,7 +202,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     block(&mut blocks, TerminatorKind::Goto { target: return_block });\n     block(&mut blocks, TerminatorKind::Return);\n \n-    let mut mir = Mir::new(\n+    let mut mir = Body::new(\n         blocks,\n         IndexVec::from_elem_n(\n             SourceScopeData { span: span, parent_scope: None }, 1\n@@ -256,7 +256,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n pub struct DropShimElaborator<'a, 'tcx: 'a> {\n-    pub mir: &'a Mir<'tcx>,\n+    pub mir: &'a Body<'tcx>,\n     pub patch: MirPatch<'tcx>,\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n@@ -272,7 +272,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n     type Path = ();\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx> { &mut self.patch }\n-    fn mir(&self) -> &'a Mir<'tcx> { self.mir }\n+    fn mir(&self) -> &'a Body<'tcx> { self.mir }\n     fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n     fn param_env(&self) -> ty::ParamEnv<'tcx> { self.param_env }\n \n@@ -309,7 +309,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               def_id: DefId,\n                               self_ty: Ty<'tcx>)\n-                              -> Mir<'tcx>\n+                              -> Body<'tcx>\n {\n     debug!(\"build_clone_shim(def_id={:?})\", def_id);\n \n@@ -371,8 +371,8 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn into_mir(self) -> Mir<'tcx> {\n-        Mir::new(\n+    fn into_mir(self) -> Body<'tcx> {\n+        Body::new(\n             self.blocks,\n             IndexVec::from_elem_n(\n                 SourceScopeData { span: self.span, parent_scope: None }, 1\n@@ -696,7 +696,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              rcvr_adjustment: Adjustment,\n                              call_kind: CallKind,\n                              untuple_args: Option<&[Ty<'tcx>]>)\n-                             -> Mir<'tcx>\n+                             -> Body<'tcx>\n {\n     debug!(\"build_call_shim(def_id={:?}, rcvr_adjustment={:?}, \\\n             call_kind={:?}, untuple_args={:?})\",\n@@ -821,7 +821,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         block(&mut blocks, vec![], TerminatorKind::Resume, true);\n     }\n \n-    let mut mir = Mir::new(\n+    let mut mir = Body::new(\n         blocks,\n         IndexVec::from_elem_n(\n             SourceScopeData { span: span, parent_scope: None }, 1\n@@ -846,7 +846,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n                                       ctor_id: hir::HirId,\n                                       fields: &[hir::StructField],\n                                       span: Span)\n-                                      -> Mir<'tcx>\n+                                      -> Body<'tcx>\n {\n     let tcx = infcx.tcx;\n     let gcx = tcx.global_tcx();\n@@ -900,7 +900,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n         is_cleanup: false\n     };\n \n-    Mir::new(\n+    Body::new(\n         IndexVec::from_elem_n(start_block, 1),\n         IndexVec::from_elem_n(\n             SourceScopeData { span: span, parent_scope: None }, 1"}, {"sha": "712e9b1fe25059021e4d0275d73bc2dd42d503ac", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -34,13 +34,13 @@ impl MirPass for AddCallGuards {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         self.add_call_guards(mir);\n     }\n }\n \n impl AddCallGuards {\n-    pub fn add_call_guards(&self, mir: &mut Mir<'_>) {\n+    pub fn add_call_guards(&self, mir: &mut Body<'_>) {\n         let pred_count: IndexVec<_, _> =\n             mir.predecessors().iter().map(|ps| ps.len()).collect();\n "}, {"sha": "f7a4bf759545cf9903cd22997e2d42226839ccea", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -43,7 +43,7 @@ impl MirPass for AddMovesForPackedDrops {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>)\n+                          mir: &mut Body<'tcx>)\n     {\n         debug!(\"add_moves_for_packed_drops({:?} @ {:?})\", src, mir.span);\n         add_moves_for_packed_drops(tcx, mir, src.def_id());\n@@ -52,7 +52,7 @@ impl MirPass for AddMovesForPackedDrops {\n \n pub fn add_moves_for_packed_drops<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &mut Mir<'tcx>,\n+    mir: &mut Body<'tcx>,\n     def_id: DefId)\n {\n     let patch = add_moves_for_packed_drops_patch(tcx, mir, def_id);\n@@ -61,7 +61,7 @@ pub fn add_moves_for_packed_drops<'a, 'tcx>(\n \n fn add_moves_for_packed_drops_patch<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     def_id: DefId)\n     -> MirPatch<'tcx>\n {\n@@ -92,7 +92,7 @@ fn add_moves_for_packed_drops_patch<'a, 'tcx>(\n \n fn add_move_for_packed_drop<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     patch: &mut MirPatch<'tcx>,\n     terminator: &Terminator<'tcx>,\n     loc: Location,"}, {"sha": "23319f7055183e2ceb3360705d560fa00a87c3b9", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -77,7 +77,7 @@ impl MirPass for AddRetag {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>)\n+                          mir: &mut Body<'tcx>)\n     {\n         if !tcx.sess.opts.debugging_opts.mir_emit_retag {\n             return;"}, {"sha": "8ec8a8fa12eeced2231e51515b8268f3e83397fc", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -19,7 +19,7 @@ use std::ops::Bound;\n use crate::util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     const_context: bool,\n     min_const_fn: bool,\n     source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n@@ -36,7 +36,7 @@ impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(\n         const_context: bool,\n         min_const_fn: bool,\n-        mir: &'a Mir<'tcx>,\n+        mir: &'a Body<'tcx>,\n         source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -538,7 +538,7 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     let mut checker = UnsafetyChecker::new(\n         const_context, min_const_fn,\n         mir, source_scope_local_data, tcx, param_env);\n-    checker.visit_mir(mir);\n+    checker.visit_body(mir);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);\n     UnsafetyCheckResult {"}, {"sha": "63a1b059d90178ed14e8f63a2d49cae988c30c9d", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -16,7 +16,7 @@\n //! [`FakeRead`]: rustc::mir::StatementKind::FakeRead\n //! [`Nop`]: rustc::mir::StatementKind::Nop\n \n-use rustc::mir::{BorrowKind, Rvalue, Location, Mir};\n+use rustc::mir::{BorrowKind, Rvalue, Location, Body};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n@@ -30,9 +30,9 @@ impl MirPass for CleanupNonCodegenStatements {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         let mut delete = DeleteNonCodegenStatements;\n-        delete.visit_mir(mir);\n+        delete.visit_body(mir);\n     }\n }\n "}, {"sha": "728ea41a9d8e9534d31535061a33e34266a59df6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -3,7 +3,7 @@\n \n use rustc::hir::def::DefKind;\n use rustc::mir::{\n-    AggregateKind, Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Local,\n+    AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue, Local,\n     NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp, ProjectionElem,\n     SourceScope, SourceScopeLocalData, LocalDecl, Promoted,\n@@ -33,7 +33,7 @@ impl MirPass for ConstProp {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           source: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         // will be evaluated by miri and produce its errors there\n         if source.promoted.is_some() {\n             return;\n@@ -63,7 +63,7 @@ impl MirPass for ConstProp {\n         // That would require an uniform one-def no-mutation analysis\n         // and RPO (or recursing when needing the value of a local).\n         let mut optimization_finder = ConstPropagator::new(mir, tcx, source);\n-        optimization_finder.visit_mir(mir);\n+        optimization_finder.visit_body(mir);\n \n         // put back the data we stole from `mir`\n         std::mem::replace(\n@@ -91,7 +91,7 @@ struct ConstPropagator<'a, 'mir, 'tcx:'a+'mir> {\n     param_env: ParamEnv<'tcx>,\n     source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n-    promoted: IndexVec<Promoted, Mir<'tcx>>,\n+    promoted: IndexVec<Promoted, Body<'tcx>>,\n }\n \n impl<'a, 'b, 'tcx> LayoutOf for ConstPropagator<'a, 'b, 'tcx> {\n@@ -119,7 +119,7 @@ impl<'a, 'b, 'tcx> HasTyCtxt<'tcx> for ConstPropagator<'a, 'b, 'tcx> {\n \n impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n     fn new(\n-        mir: &mut Mir<'tcx>,\n+        mir: &mut Body<'tcx>,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         source: MirSource<'tcx>,\n     ) -> ConstPropagator<'a, 'mir, 'tcx> {\n@@ -143,7 +143,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             can_const_prop,\n             places: IndexVec::from_elem(None, &mir.local_decls),\n             source_scope_local_data,\n-            //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_mir()` needs it\n+            //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: mir.local_decls.clone(),\n             promoted,\n         }\n@@ -569,7 +569,7 @@ struct CanConstProp {\n \n impl CanConstProp {\n     /// returns true if `local` can be propagated\n-    fn check(mir: &Mir<'_>) -> IndexVec<Local, bool> {\n+    fn check(mir: &Body<'_>) -> IndexVec<Local, bool> {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(true, &mir.local_decls),\n             found_assignment: IndexVec::from_elem(false, &mir.local_decls),\n@@ -586,7 +586,7 @@ impl CanConstProp {\n                 trace!(\"local {:?} can't be propagated because it's not a temporary\", local);\n             }\n         }\n-        cpv.visit_mir(mir);\n+        cpv.visit_body(mir);\n         cpv.can_const_prop\n     }\n }"}, {"sha": "c48d2d295711a495f59d94713a15566a64cfa755", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -20,7 +20,7 @@\n //! future.\n \n use rustc::mir::{\n-    Constant, Local, LocalKind, Location, Place, PlaceBase, Mir, Operand, Rvalue, StatementKind\n+    Constant, Local, LocalKind, Location, Place, PlaceBase, Body, Operand, Rvalue, StatementKind\n };\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n@@ -33,7 +33,7 @@ impl MirPass for CopyPropagation {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info.\n         if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n@@ -135,7 +135,7 @@ impl MirPass for CopyPropagation {\n }\n \n fn eliminate_self_assignments(\n-    mir: &mut Mir<'_>,\n+    mir: &mut Body<'_>,\n     def_use_analysis: &DefUseAnalysis,\n ) -> bool {\n     let mut changed = false;\n@@ -177,7 +177,7 @@ enum Action<'tcx> {\n }\n \n impl<'tcx> Action<'tcx> {\n-    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis, src_place: &Place<'tcx>)\n+    fn local_copy(mir: &Body<'tcx>, def_use_analysis: &DefUseAnalysis, src_place: &Place<'tcx>)\n                   -> Option<Action<'tcx>> {\n         // The source must be a local.\n         let src_local = if let Place::Base(PlaceBase::Local(local)) = *src_place {\n@@ -232,7 +232,7 @@ impl<'tcx> Action<'tcx> {\n     }\n \n     fn perform(self,\n-               mir: &mut Mir<'tcx>,\n+               mir: &mut Body<'tcx>,\n                def_use_analysis: &DefUseAnalysis,\n                dest_local: Local,\n                location: Location)"}, {"sha": "7da37f956cedd2fc23c0468acd17caaaac5514c3", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -10,7 +10,7 @@ impl MirPass for Deaggregator {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n         let local_decls = &*local_decls;\n         for bb in basic_blocks {"}, {"sha": "ebb65094a306df2681a4cfdef5dbb4e24fd29eff", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -5,7 +5,7 @@ use std::fmt;\n use std::fs::File;\n use std::io;\n \n-use rustc::mir::Mir;\n+use rustc::mir::Body;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n use crate::transform::{MirPass, MirSource};\n@@ -21,7 +21,7 @@ impl MirPass for Marker {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n-                          _mir: &mut Mir<'tcx>)\n+                          _mir: &mut Body<'tcx>)\n     {\n     }\n }\n@@ -42,7 +42,7 @@ pub fn on_mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              pass_num: &dyn fmt::Display,\n                              pass_name: &str,\n                              source: MirSource<'tcx>,\n-                             mir: &Mir<'tcx>,\n+                             mir: &Body<'tcx>,\n                              is_after: bool) {\n     if mir_util::dump_enabled(tcx, pass_name, source) {\n         mir_util::dump_mir(tcx,"}, {"sha": "c833af29c36f0ed1427be0ac03b7830649d52ee1", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -24,7 +24,7 @@ impl MirPass for ElaborateDrops {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>)\n+                          mir: &mut Body<'tcx>)\n     {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, mir.span);\n \n@@ -79,7 +79,7 @@ impl MirPass for ElaborateDrops {\n /// that can't drop anything.\n fn find_dead_unwinds<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     def_id: hir::def_id::DefId,\n     env: &MoveDataParamEnv<'tcx, 'tcx>)\n     -> BitSet<BasicBlock>\n@@ -143,7 +143,7 @@ struct InitializationData {\n impl InitializationData {\n     fn apply_location<'a,'tcx>(&mut self,\n                                tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                               mir: &Mir<'tcx>,\n+                               mir: &Body<'tcx>,\n                                env: &MoveDataParamEnv<'tcx, 'tcx>,\n                                loc: Location)\n     {\n@@ -186,7 +186,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n         &mut self.ctxt.patch\n     }\n \n-    fn mir(&self) -> &'a Mir<'tcx> {\n+    fn mir(&self) -> &'a Body<'tcx> {\n         self.ctxt.mir\n     }\n \n@@ -291,7 +291,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n \n struct ElaborateDropsCtxt<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     env: &'a MoveDataParamEnv<'tcx, 'tcx>,\n     flow_inits: DataflowResults<'tcx, MaybeInitializedPlaces<'a, 'tcx, 'tcx>>,\n     flow_uninits:  DataflowResults<'tcx, MaybeUninitializedPlaces<'a, 'tcx, 'tcx>>,"}, {"sha": "ffc5bba6d608660c4b10e4f6df4f448a314ec729", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -53,7 +53,7 @@ impl MirPass for EraseRegions {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n-        EraseRegionsVisitor::new(tcx).visit_mir(mir);\n+                          mir: &mut Body<'tcx>) {\n+        EraseRegionsVisitor::new(tcx).visit_body(mir);\n     }\n }"}, {"sha": "f36ede4e8d9cdcce31ae31210a718efafd986b2a", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n     }\n \n     // Create a statement which reads the discriminant into a temporary\n-    fn get_discr(&self, mir: &mut Mir<'tcx>) -> (Statement<'tcx>, Place<'tcx>) {\n+    fn get_discr(&self, mir: &mut Body<'tcx>) -> (Statement<'tcx>, Place<'tcx>) {\n         let temp_decl = LocalDecl::new_internal(self.tcx.types.isize, mir.span);\n         let local_decls_len = mir.local_decls.push(temp_decl);\n         let temp = Place::Base(PlaceBase::Local(local_decls_len));\n@@ -304,7 +304,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for TransformVisitor<'a, 'tcx> {\n fn make_generator_state_argument_indirect<'a, 'tcx>(\n                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 def_id: DefId,\n-                mir: &mut Mir<'tcx>) {\n+                mir: &mut Body<'tcx>) {\n     let gen_ty = mir.local_decls.raw[1].ty;\n \n     let region = ty::ReFree(ty::FreeRegion {\n@@ -323,12 +323,12 @@ fn make_generator_state_argument_indirect<'a, 'tcx>(\n     mir.local_decls.raw[1].ty = ref_gen_ty;\n \n     // Add a deref to accesses of the generator state\n-    DerefArgVisitor.visit_mir(mir);\n+    DerefArgVisitor.visit_body(mir);\n }\n \n fn make_generator_state_argument_pinned<'a, 'tcx>(\n                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                mir: &mut Mir<'tcx>) {\n+                mir: &mut Body<'tcx>) {\n     let ref_gen_ty = mir.local_decls.raw[1].ty;\n \n     let pin_did = tcx.lang_items().pin_type().unwrap();\n@@ -340,12 +340,12 @@ fn make_generator_state_argument_pinned<'a, 'tcx>(\n     mir.local_decls.raw[1].ty = pin_ref_gen_ty;\n \n     // Add the Pin field access to accesses of the generator state\n-    PinArgVisitor { ref_gen_ty }.visit_mir(mir);\n+    PinArgVisitor { ref_gen_ty }.visit_body(mir);\n }\n \n fn replace_result_variable<'tcx>(\n     ret_ty: Ty<'tcx>,\n-    mir: &mut Mir<'tcx>,\n+    mir: &mut Body<'tcx>,\n ) -> Local {\n     let source_info = source_info(mir);\n     let new_ret = LocalDecl {\n@@ -366,7 +366,7 @@ fn replace_result_variable<'tcx>(\n     RenameLocalVisitor {\n         from: RETURN_PLACE,\n         to: new_ret_local,\n-    }.visit_mir(mir);\n+    }.visit_body(mir);\n \n     new_ret_local\n }\n@@ -387,7 +387,7 @@ impl<'tcx> Visitor<'tcx> for StorageIgnored {\n \n fn locals_live_across_suspend_points(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     source: MirSource<'tcx>,\n     movable: bool,\n ) -> (\n@@ -408,7 +408,7 @@ fn locals_live_across_suspend_points(\n     // Find the MIR locals which do not use StorageLive/StorageDead statements.\n     // The storage of these locals are always live.\n     let mut ignored = StorageIgnored(BitSet::new_filled(mir.local_decls.len()));\n-    ignored.visit_mir(mir);\n+    ignored.visit_body(mir);\n \n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active).\n@@ -503,7 +503,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             upvars: &Vec<Ty<'tcx>>,\n                             interior: Ty<'tcx>,\n                             movable: bool,\n-                            mir: &mut Mir<'tcx>)\n+                            mir: &mut Body<'tcx>)\n     -> (FxHashMap<Local, (Ty<'tcx>, VariantIdx, usize)>,\n         GeneratorLayout<'tcx>,\n         FxHashMap<BasicBlock, liveness::LiveVarSet>)\n@@ -576,7 +576,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     (remap, layout, storage_liveness)\n }\n \n-fn insert_switch<'a, 'tcx>(mir: &mut Mir<'tcx>,\n+fn insert_switch<'a, 'tcx>(mir: &mut Body<'tcx>,\n                            cases: Vec<(usize, BasicBlock)>,\n                            transform: &TransformVisitor<'a, 'tcx>,\n                            default: TerminatorKind<'tcx>) {\n@@ -608,7 +608,7 @@ fn insert_switch<'a, 'tcx>(mir: &mut Mir<'tcx>,\n \n fn elaborate_generator_drops<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        def_id: DefId,\n-                                       mir: &mut Mir<'tcx>) {\n+                                       mir: &mut Body<'tcx>) {\n     use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n     use crate::util::patch::MirPatch;\n     use crate::shim::DropShimElaborator;\n@@ -663,8 +663,8 @@ fn create_generator_drop_shim<'a, 'tcx>(\n                 def_id: DefId,\n                 source: MirSource<'tcx>,\n                 gen_ty: Ty<'tcx>,\n-                mir: &Mir<'tcx>,\n-                drop_clean: BasicBlock) -> Mir<'tcx> {\n+                mir: &Body<'tcx>,\n+                drop_clean: BasicBlock) -> Body<'tcx> {\n     let mut mir = mir.clone();\n \n     let source_info = source_info(&mir);\n@@ -734,7 +734,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n     mir\n }\n \n-fn insert_term_block<'tcx>(mir: &mut Mir<'tcx>, kind: TerminatorKind<'tcx>) -> BasicBlock {\n+fn insert_term_block<'tcx>(mir: &mut Body<'tcx>, kind: TerminatorKind<'tcx>) -> BasicBlock {\n     let term_block = BasicBlock::new(mir.basic_blocks().len());\n     let source_info = source_info(mir);\n     mir.basic_blocks_mut().push(BasicBlockData {\n@@ -749,7 +749,7 @@ fn insert_term_block<'tcx>(mir: &mut Mir<'tcx>, kind: TerminatorKind<'tcx>) -> B\n }\n \n fn insert_panic_block<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                mir: &mut Mir<'tcx>,\n+                                mir: &mut Body<'tcx>,\n                                 message: AssertMessage<'tcx>) -> BasicBlock {\n     let assert_block = BasicBlock::new(mir.basic_blocks().len());\n     let term = TerminatorKind::Assert {\n@@ -783,7 +783,7 @@ fn create_generator_resume_function<'a, 'tcx>(\n         transform: TransformVisitor<'a, 'tcx>,\n         def_id: DefId,\n         source: MirSource<'tcx>,\n-        mir: &mut Mir<'tcx>) {\n+        mir: &mut Body<'tcx>) {\n     // Poison the generator when it unwinds\n     for block in mir.basic_blocks_mut() {\n         let source_info = block.terminator().source_info;\n@@ -821,14 +821,14 @@ fn create_generator_resume_function<'a, 'tcx>(\n     dump_mir(tcx, None, \"generator_resume\", &0, source, mir, |_, _| Ok(()) );\n }\n \n-fn source_info<'a, 'tcx>(mir: &Mir<'tcx>) -> SourceInfo {\n+fn source_info<'a, 'tcx>(mir: &Body<'tcx>) -> SourceInfo {\n     SourceInfo {\n         span: mir.span,\n         scope: OUTERMOST_SOURCE_SCOPE,\n     }\n }\n \n-fn insert_clean_drop<'a, 'tcx>(mir: &mut Mir<'tcx>) -> BasicBlock {\n+fn insert_clean_drop<'a, 'tcx>(mir: &mut Body<'tcx>) -> BasicBlock {\n     let return_block = insert_term_block(mir, TerminatorKind::Return);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n@@ -851,7 +851,7 @@ fn insert_clean_drop<'a, 'tcx>(mir: &mut Mir<'tcx>) -> BasicBlock {\n     drop_clean\n }\n \n-fn create_cases<'a, 'tcx, F>(mir: &mut Mir<'tcx>,\n+fn create_cases<'a, 'tcx, F>(mir: &mut Body<'tcx>,\n                           transform: &TransformVisitor<'a, 'tcx>,\n                           target: F) -> Vec<(usize, BasicBlock)>\n     where F: Fn(&SuspensionPoint) -> Option<BasicBlock> {\n@@ -895,7 +895,7 @@ impl MirPass for StateTransform {\n     fn run_pass<'a, 'tcx>(&self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     source: MirSource<'tcx>,\n-                    mir: &mut Mir<'tcx>) {\n+                    mir: &mut Body<'tcx>) {\n         let yield_ty = if let Some(yield_ty) = mir.yield_ty {\n             yield_ty\n         } else {\n@@ -959,7 +959,7 @@ impl MirPass for StateTransform {\n             new_ret_local,\n             discr_ty,\n         };\n-        transform.visit_mir(mir);\n+        transform.visit_body(mir);\n \n         // Update our MIR struct to reflect the changed we've made\n         mir.yield_ty = None;"}, {"sha": "0fac6868f57d3cd5900fbf51e5609a5b5d5325dd", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -41,7 +41,7 @@ impl MirPass for Inline {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           source: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n             Inliner { tcx, source }.run_pass(mir);\n         }\n@@ -54,7 +54,7 @@ struct Inliner<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Inliner<'a, 'tcx> {\n-    fn run_pass(&self, caller_mir: &mut Mir<'tcx>) {\n+    fn run_pass(&self, caller_mir: &mut Body<'tcx>) {\n         // Keep a queue of callsites to try inlining on. We take\n         // advantage of the fact that queries detect cycles here to\n         // allow us to try and fetch the fully optimized MIR of a\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n     fn get_valid_function_call(&self,\n                                bb: BasicBlock,\n                                bb_data: &BasicBlockData<'tcx>,\n-                               caller_mir: &Mir<'tcx>,\n+                               caller_mir: &Body<'tcx>,\n                                param_env: ParamEnv<'tcx>,\n     ) -> Option<CallSite<'tcx>> {\n         // Don't inline calls that are in cleanup blocks.\n@@ -204,7 +204,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n     fn consider_optimizing(&self,\n                            callsite: CallSite<'tcx>,\n-                           callee_mir: &Mir<'tcx>)\n+                           callee_mir: &Body<'tcx>)\n                            -> bool\n     {\n         debug!(\"consider_optimizing({:?})\", callsite);\n@@ -216,7 +216,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n     fn should_inline(&self,\n                      callsite: CallSite<'tcx>,\n-                     callee_mir: &Mir<'tcx>)\n+                     callee_mir: &Body<'tcx>)\n                      -> bool\n     {\n         debug!(\"should_inline({:?})\", callsite);\n@@ -394,8 +394,8 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n     fn inline_call(&self,\n                    callsite: CallSite<'tcx>,\n-                   caller_mir: &mut Mir<'tcx>,\n-                   mut callee_mir: Mir<'tcx>) -> bool {\n+                   caller_mir: &mut Body<'tcx>,\n+                   mut callee_mir: Body<'tcx>) -> bool {\n         let terminator = caller_mir[callsite.bb].terminator.take().unwrap();\n         match terminator.kind {\n             // FIXME: Handle inlining of diverging calls\n@@ -531,7 +531,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         &self,\n         args: Vec<Operand<'tcx>>,\n         callsite: &CallSite<'tcx>,\n-        caller_mir: &mut Mir<'tcx>,\n+        caller_mir: &mut Body<'tcx>,\n     ) -> Vec<Local> {\n         let tcx = self.tcx;\n \n@@ -601,7 +601,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         &self,\n         arg: Operand<'tcx>,\n         callsite: &CallSite<'tcx>,\n-        caller_mir: &mut Mir<'tcx>,\n+        caller_mir: &mut Body<'tcx>,\n     ) -> Local {\n         // FIXME: Analysis of the usage of the arguments to avoid\n         // unnecessary temporaries."}, {"sha": "1b92b1acac55d6e46eb11960f330305473cac2a7", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,6 +1,7 @@\n //! Performs various peephole optimizations.\n \n-use rustc::mir::{Constant, Location, Place, PlaceBase, Mir, Operand, ProjectionElem, Rvalue, Local};\n+use rustc::mir::{Constant, Location, Place, PlaceBase, Body, Operand, ProjectionElem, Rvalue,\n+    Local};\n use rustc::mir::visit::{MutVisitor, Visitor};\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -14,7 +15,7 @@ impl MirPass for InstCombine {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         // We only run when optimizing MIR (at any level).\n         if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n             return\n@@ -25,12 +26,12 @@ impl MirPass for InstCombine {\n         // `Place::ty()`).\n         let optimizations = {\n             let mut optimization_finder = OptimizationFinder::new(mir, tcx);\n-            optimization_finder.visit_mir(mir);\n+            optimization_finder.visit_body(mir);\n             optimization_finder.optimizations\n         };\n \n         // Then carry out those optimizations.\n-        MutVisitor::visit_mir(&mut InstCombineVisitor { optimizations }, mir);\n+        MutVisitor::visit_body(&mut InstCombineVisitor { optimizations }, mir);\n     }\n }\n \n@@ -63,13 +64,13 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n \n /// Finds optimization opportunities on the MIR.\n struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> {\n-    mir: &'b Mir<'tcx>,\n+    mir: &'b Body<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     optimizations: OptimizationList<'tcx>,\n }\n \n impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n-    fn new(mir: &'b Mir<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> OptimizationFinder<'b, 'a, 'tcx> {\n+    fn new(mir: &'b Body<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> OptimizationFinder<'b, 'a, 'tcx> {\n         OptimizationFinder {\n             mir,\n             tcx,"}, {"sha": "8c19637a955f158885aabacc815831111d391ec3", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -13,7 +13,7 @@ impl MirPass for Lower128Bit {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         let debugging_override = tcx.sess.opts.debugging_opts.lower_128bit_ops;\n         let target_default = tcx.sess.host.options.i128_lowering;\n         if !debugging_override.unwrap_or(target_default) {\n@@ -25,7 +25,7 @@ impl MirPass for Lower128Bit {\n }\n \n impl Lower128Bit {\n-    fn lower_128bit_ops<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx>) {\n+    fn lower_128bit_ops<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Body<'tcx>) {\n         let mut new_blocks = Vec::new();\n         let cur_len = mir.basic_blocks().len();\n "}, {"sha": "22b96a9db4750cfbc9033f1c8c8146ddcd7d4117", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,6 +1,6 @@\n use crate::build;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::mir::{Mir, MirPhase, Promoted};\n+use rustc::mir::{Body, MirPhase, Promoted};\n use rustc::ty::{TyCtxt, InstanceDef};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -95,12 +95,12 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n     tcx.arena.alloc(set)\n }\n \n-fn mir_built<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n+fn mir_built<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     let mir = build::mir_build(tcx, def_id);\n     tcx.alloc_steal_mir(mir)\n }\n \n-/// Where a specific Mir comes from.\n+/// Where a specific `mir::Body` comes from.\n #[derive(Debug, Copy, Clone)]\n pub struct MirSource<'tcx> {\n     pub instance: InstanceDef<'tcx>,\n@@ -145,19 +145,19 @@ pub trait MirPass {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           source: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>);\n+                          mir: &mut Body<'tcx>);\n }\n \n pub fn run_passes(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &mut Mir<'tcx>,\n+    mir: &mut Body<'tcx>,\n     instance: InstanceDef<'tcx>,\n     mir_phase: MirPhase,\n     passes: &[&dyn MirPass],\n ) {\n     let phase_index = mir_phase.phase_index();\n \n-    let run_passes = |mir: &mut Mir<'tcx>, promoted| {\n+    let run_passes = |mir: &mut Body<'tcx>, promoted| {\n         if mir.phase >= mir_phase {\n             return;\n         }\n@@ -196,7 +196,7 @@ pub fn run_passes(\n     }\n }\n \n-fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n+fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n@@ -210,7 +210,7 @@ fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n     tcx.alloc_steal_mir(mir)\n }\n \n-fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n+fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     if let hir::BodyOwnerKind::Const = tcx.hir().body_owner_kind_by_hir_id(hir_id) {\n         // Ensure that we compute the `mir_const_qualif` for constants at\n@@ -227,8 +227,8 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     tcx.alloc_steal_mir(mir)\n }\n \n-fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Mir<'tcx> {\n-    // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n+fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+    // `mir_borrowck` uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n     tcx.ensure().mir_borrowck(def_id);\n "}, {"sha": "719e22ca1502380b8139279c2afb6579d5f9aea3", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -12,14 +12,14 @@ impl MirPass for NoLandingPads {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         no_landing_pads(tcx, mir)\n     }\n }\n \n-pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx>) {\n+pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Body<'tcx>) {\n     if tcx.sess.no_landing_pads() {\n-        NoLandingPads.visit_mir(mir);\n+        NoLandingPads.visit_body(mir);\n     }\n }\n "}, {"sha": "4b95fbf4b7d2f500cb2a6b100e6eeef33c38d339", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -71,7 +71,7 @@ pub enum Candidate {\n struct TempCollector<'tcx> {\n     temps: IndexVec<Local, TempState>,\n     span: Span,\n-    mir: &'tcx Mir<'tcx>,\n+    mir: &'tcx Body<'tcx>,\n }\n \n impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n@@ -134,7 +134,7 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n     }\n }\n \n-pub fn collect_temps(mir: &Mir<'_>,\n+pub fn collect_temps(mir: &Body<'_>,\n                      rpo: &mut ReversePostorder<'_, '_>) -> IndexVec<Local, TempState> {\n     let mut collector = TempCollector {\n         temps: IndexVec::from_elem(TempState::Undefined, &mir.local_decls),\n@@ -149,8 +149,8 @@ pub fn collect_temps(mir: &Mir<'_>,\n \n struct Promoter<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    source: &'a mut Mir<'tcx>,\n-    promoted: Mir<'tcx>,\n+    source: &'a mut Body<'tcx>,\n+    promoted: Body<'tcx>,\n     temps: &'a mut IndexVec<Local, TempState>,\n \n     /// If true, all nested temps are also kept in the\n@@ -369,7 +369,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n     }\n }\n \n-pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n+pub fn promote_candidates<'a, 'tcx>(mir: &mut Body<'tcx>,\n                                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     mut temps: IndexVec<Local, TempState>,\n                                     candidates: Vec<Candidate>) {\n@@ -393,13 +393,13 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n         }\n \n \n-        // Declare return place local so that `Mir::new` doesn't complain.\n+        // Declare return place local so that `mir::Body::new` doesn't complain.\n         let initial_locals = iter::once(\n             LocalDecl::new_return_place(tcx.types.never, mir.span)\n         ).collect();\n \n         let promoter = Promoter {\n-            promoted: Mir::new(\n+            promoted: Body::new(\n                 IndexVec::new(),\n                 // FIXME: maybe try to filter this to avoid blowing up\n                 // memory usage?"}, {"sha": "a416792101f73d5d3ac57015b6b9ff93a1ecda2a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -113,7 +113,7 @@ struct ConstCx<'a, 'tcx> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     mode: Mode,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n \n     per_local: PerQualif<BitSet<Local>>,\n }\n@@ -619,7 +619,7 @@ impl Deref for Checker<'a, 'tcx> {\n impl<'a, 'tcx> Checker<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            def_id: DefId,\n-           mir: &'a Mir<'tcx>,\n+           mir: &'a Body<'tcx>,\n            mode: Mode)\n            -> Self {\n         assert!(def_id.is_local());\n@@ -1431,7 +1431,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mir = &tcx.mir_const(def_id).borrow();\n \n     if mir.return_ty().references_error() {\n-        tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: Mir had errors\");\n+        tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: MIR had errors\");\n         return (1 << IsNotPromotable::IDX, tcx.arena.alloc(BitSet::new_empty(0)));\n     }\n \n@@ -1444,10 +1444,10 @@ impl MirPass for QualifyAndPromoteConstants {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         if mir.return_ty().references_error() {\n-            tcx.sess.delay_span_bug(mir.span, \"QualifyAndPromoteConstants: Mir had errors\");\n+            tcx.sess.delay_span_bug(mir.span, \"QualifyAndPromoteConstants: MIR had errors\");\n             return;\n         }\n "}, {"sha": "4811380e238603bec257fef91a51a5595cf37ec4", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -11,7 +11,7 @@ type McfResult = Result<(), (Span, Cow<'static, str>)>;\n pub fn is_min_const_fn(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n ) -> McfResult {\n     let mut current = def_id;\n     loop {\n@@ -130,7 +130,7 @@ fn check_ty(\n \n fn check_rvalue(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     rvalue: &Rvalue<'tcx>,\n     span: Span,\n ) -> McfResult {\n@@ -210,7 +210,7 @@ fn check_rvalue(\n \n fn check_statement(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     statement: &Statement<'tcx>,\n ) -> McfResult {\n     let span = statement.source_info.span;\n@@ -250,7 +250,10 @@ fn check_operand(\n     }\n }\n \n-fn check_place(place: &Place<'tcx>, span: Span) -> McfResult {\n+fn check_place(\n+    place: &Place<'tcx>,\n+    span: Span,\n+) -> McfResult {\n     place.iterate(|place_base, place_projection| {\n         for proj in place_projection {\n             match proj.elem {\n@@ -277,7 +280,7 @@ fn check_place(place: &Place<'tcx>, span: Span) -> McfResult {\n \n fn check_terminator(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     terminator: &Terminator<'tcx>,\n ) -> McfResult {\n     let span = terminator.source_info.span;"}, {"sha": "42818a571151e1a25efb409ec527de390c8b6e8c", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -11,7 +11,7 @@ pub struct RemoveNoopLandingPads;\n \n pub fn remove_noop_landing_pads<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &mut Mir<'tcx>)\n+    mir: &mut Body<'tcx>)\n {\n     if tcx.sess.no_landing_pads() {\n         return\n@@ -25,7 +25,7 @@ impl MirPass for RemoveNoopLandingPads {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         remove_noop_landing_pads(tcx, mir);\n     }\n }\n@@ -34,7 +34,7 @@ impl RemoveNoopLandingPads {\n     fn is_nop_landing_pad(\n         &self,\n         bb: BasicBlock,\n-        mir: &Mir<'_>,\n+        mir: &Body<'_>,\n         nop_landing_pads: &BitSet<BasicBlock>,\n     ) -> bool {\n         for stmt in &mir[bb].statements {\n@@ -86,7 +86,7 @@ impl RemoveNoopLandingPads {\n         }\n     }\n \n-    fn remove_nop_landing_pads(&self, mir: &mut Mir<'_>) {\n+    fn remove_nop_landing_pads(&self, mir: &mut Body<'_>) {\n         // make sure there's a single resume block\n         let resume_block = {\n             let patch = MirPatch::new(mir);"}, {"sha": "2b3eb9e1edf307ce91a9bef2f3dbe70dee72ac10", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -5,7 +5,7 @@ use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt};\n use rustc::hir::def_id::DefId;\n-use rustc::mir::{self, Mir, Location};\n+use rustc::mir::{self, Body, Location};\n use rustc_data_structures::bit_set::BitSet;\n use crate::transform::{MirPass, MirSource};\n \n@@ -26,7 +26,7 @@ pub struct SanityCheck;\n \n impl MirPass for SanityCheck {\n     fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource<'tcx>, mir: &mut Mir<'tcx>) {\n+                          src: MirSource<'tcx>, mir: &mut Body<'tcx>) {\n         let def_id = src.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));\n@@ -85,7 +85,7 @@ impl MirPass for SanityCheck {\n /// expression form above, then that emits an error as well, but those\n /// errors are not intended to be used for unit tests.)\n pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                mir: &Mir<'tcx>,\n+                                                mir: &Body<'tcx>,\n                                                 def_id: DefId,\n                                                 _attributes: &[ast::Attribute],\n                                                 results: &DataflowResults<'tcx, O>)\n@@ -102,7 +102,7 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           mir: &Mir<'tcx>,\n+                           mir: &Body<'tcx>,\n                            results: &DataflowResults<'tcx, O>,\n                            bb: mir::BasicBlock) where\n     O: BitDenotation<'tcx, Idx=MovePathIndex> + HasMoveData<'tcx>"}, {"sha": "e7be238e850f22a70dfffa9eb72294c51691a9d0", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -44,7 +44,7 @@ impl SimplifyCfg {\n     }\n }\n \n-pub fn simplify_cfg(mir: &mut Mir<'_>) {\n+pub fn simplify_cfg(mir: &mut Body<'_>) {\n     CfgSimplifier::new(mir).simplify();\n     remove_dead_blocks(mir);\n \n@@ -60,7 +60,7 @@ impl MirPass for SimplifyCfg {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, mir);\n         simplify_cfg(mir);\n     }\n@@ -72,7 +72,7 @@ pub struct CfgSimplifier<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n-    pub fn new(mir: &'a mut Mir<'tcx>) -> Self {\n+    pub fn new(mir: &'a mut Body<'tcx>) -> Self {\n         let mut pred_count = IndexVec::from_elem(0u32, mir.basic_blocks());\n \n         // we can't use mir.predecessors() here because that counts\n@@ -263,7 +263,7 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn remove_dead_blocks(mir: &mut Mir<'_>) {\n+pub fn remove_dead_blocks(mir: &mut Body<'_>) {\n     let mut seen = BitSet::new_empty(mir.basic_blocks().len());\n     for (bb, _) in traversal::preorder(mir) {\n         seen.insert(bb.index());\n@@ -299,9 +299,9 @@ impl MirPass for SimplifyLocals {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         let mut marker = DeclMarker { locals: BitSet::new_empty(mir.local_decls.len()) };\n-        marker.visit_mir(mir);\n+        marker.visit_body(mir);\n         // Return pointer and arguments are always live\n         marker.locals.insert(RETURN_PLACE);\n         for arg in mir.args_iter() {\n@@ -317,7 +317,7 @@ impl MirPass for SimplifyLocals {\n \n         let map = make_local_map(&mut mir.local_decls, marker.locals);\n         // Update references to all vars and tmps now\n-        LocalUpdater { map }.visit_mir(mir);\n+        LocalUpdater { map }.visit_body(mir);\n         mir.local_decls.shrink_to_fit();\n     }\n }"}, {"sha": "53949bcfcd707737340477b2943aba88c9915a52", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -22,7 +22,7 @@ impl MirPass for SimplifyBranches {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         for block in mir.basic_blocks_mut() {\n             let terminator = block.terminator_mut();\n             terminator.kind = match terminator.kind {"}, {"sha": "ee1d2ca2a891ce1907e303fe7e730076d4ea97dd", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -40,18 +40,18 @@ impl MirPass for UniformArrayMoveOut {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         let mut patch = MirPatch::new(mir);\n         {\n             let mut visitor = UniformArrayMoveOutVisitor{mir, patch: &mut patch, tcx};\n-            visitor.visit_mir(mir);\n+            visitor.visit_body(mir);\n         }\n         patch.apply(mir);\n     }\n }\n \n struct UniformArrayMoveOutVisitor<'a, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n+    mir: &'a Body<'tcx>,\n     patch: &'a mut MirPatch<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n@@ -165,14 +165,14 @@ impl MirPass for RestoreSubsliceArrayMoveOut {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n-                          mir: &mut Mir<'tcx>) {\n+                          mir: &mut Body<'tcx>) {\n         let mut patch = MirPatch::new(mir);\n         {\n             let mut visitor = RestoreDataCollector {\n                 locals_use: IndexVec::from_elem(LocalUse::new(), &mir.local_decls),\n                 candidates: vec![],\n             };\n-            visitor.visit_mir(mir);\n+            visitor.visit_body(mir);\n \n             for candidate in &visitor.candidates {\n                 let statement = &mir[candidate.block].statements[candidate.statement_index];\n@@ -254,7 +254,7 @@ impl RestoreSubsliceArrayMoveOut {\n     }\n \n     fn try_get_item_source<'a, 'tcx>(local_use: &LocalUse,\n-                                     mir: &'a Mir<'tcx>) -> Option<(u32, &'a Place<'tcx>)> {\n+                                     mir: &'a Body<'tcx>) -> Option<(u32, &'a Place<'tcx>)> {\n         if let Some(location) = local_use.first_use {\n             let block = &mir[location.block];\n             if block.statements.len() > location.statement_index {"}, {"sha": "c8804dfbaf2619dd5f77099d85c14e713f4d3a13", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::mir::{Local, Location};\n-use rustc::mir::Mir;\n+use rustc::mir::Body;\n use rustc::mir::visit::PlaceContext;\n use rustc::mir::visit::Visitor;\n \n@@ -9,10 +9,10 @@ crate trait FindAssignments {\n     fn find_assignments(&self, local: Local) -> Vec<Location>;\n }\n \n-impl<'tcx> FindAssignments for Mir<'tcx>{\n+impl<'tcx> FindAssignments for Body<'tcx>{\n     fn find_assignments(&self, local: Local) -> Vec<Location>{\n             let mut visitor = FindLocalAssignmentVisitor{ needle: local, locations: vec![]};\n-            visitor.visit_mir(self);\n+            visitor.visit_body(self);\n             visitor.locations\n     }\n }"}, {"sha": "ba0190756c54277c43b1f0906d7b2ee5c87c4bc2", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -1,6 +1,6 @@\n //! Def-use analysis.\n \n-use rustc::mir::{Local, Location, Mir};\n+use rustc::mir::{Local, Location, Body};\n use rustc::mir::visit::{PlaceContext, MutVisitor, Visitor};\n use rustc_data_structures::indexed_vec::IndexVec;\n use std::mem;\n@@ -21,19 +21,19 @@ pub struct Use {\n }\n \n impl DefUseAnalysis {\n-    pub fn new(mir: &Mir<'_>) -> DefUseAnalysis {\n+    pub fn new(mir: &Body<'_>) -> DefUseAnalysis {\n         DefUseAnalysis {\n             info: IndexVec::from_elem_n(Info::new(), mir.local_decls.len()),\n         }\n     }\n \n-    pub fn analyze(&mut self, mir: &Mir<'_>) {\n+    pub fn analyze(&mut self, mir: &Body<'_>) {\n         self.clear();\n \n         let mut finder = DefUseFinder {\n             info: mem::replace(&mut self.info, IndexVec::new()),\n         };\n-        finder.visit_mir(mir);\n+        finder.visit_body(mir);\n         self.info = finder.info\n     }\n \n@@ -47,7 +47,7 @@ impl DefUseAnalysis {\n         &self.info[local]\n     }\n \n-    fn mutate_defs_and_uses<F>(&self, local: Local, mir: &mut Mir<'_>, mut callback: F)\n+    fn mutate_defs_and_uses<F>(&self, local: Local, mir: &mut Body<'_>, mut callback: F)\n                                where F: for<'a> FnMut(&'a mut Local,\n                                                       PlaceContext,\n                                                       Location) {\n@@ -61,7 +61,7 @@ impl DefUseAnalysis {\n     // FIXME(pcwalton): this should update the def-use chains.\n     pub fn replace_all_defs_and_uses_with(&self,\n                                           local: Local,\n-                                          mir: &mut Mir<'_>,\n+                                          mir: &mut Body<'_>,\n                                           new_local: Local) {\n         self.mutate_defs_and_uses(local, mir, |local, _, _| *local = new_local)\n     }\n@@ -123,7 +123,7 @@ struct MutateUseVisitor<F> {\n }\n \n impl<F> MutateUseVisitor<F> {\n-    fn new(query: Local, callback: F, _: &Mir<'_>)\n+    fn new(query: Local, callback: F, _: &Body<'_>)\n            -> MutateUseVisitor<F>\n            where F: for<'a> FnMut(&'a mut Local, PlaceContext, Location) {\n         MutateUseVisitor {"}, {"sha": "076ba60c6441c5da540fda8630424784236511de", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -74,7 +74,7 @@ pub trait DropElaborator<'a, 'tcx: 'a> : fmt::Debug {\n     type Path : Copy + fmt::Debug;\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx>;\n-    fn mir(&self) -> &'a Mir<'tcx>;\n+    fn mir(&self) -> &'a Body<'tcx>;\n     fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx>;\n     fn param_env(&self) -> ty::ParamEnv<'tcx>;\n "}, {"sha": "20d92da9ba330e86e6635e145fbf1f3b221e4edd", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -34,7 +34,7 @@ pub fn graphviz_safe_def_name(def_id: DefId) -> String {\n /// Write a graphviz DOT graph of the MIR.\n pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n                                       def_id: DefId,\n-                                      mir: &Mir<'_>,\n+                                      mir: &Body<'_>,\n                                       w: &mut W) -> io::Result<()>\n     where W: Write\n {\n@@ -68,7 +68,7 @@ pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n /// `init` and `fini` are callbacks for emitting additional rows of\n /// data (using HTML enclosed with `<tr>` in the emitted text).\n pub fn write_node_label<W: Write, INIT, FINI>(block: BasicBlock,\n-                                              mir: &Mir<'_>,\n+                                              mir: &Body<'_>,\n                                               w: &mut W,\n                                               num_cols: u32,\n                                               init: INIT,\n@@ -110,7 +110,7 @@ pub fn write_node_label<W: Write, INIT, FINI>(block: BasicBlock,\n }\n \n /// Write a graphviz DOT node for the given basic block.\n-fn write_node<W: Write>(block: BasicBlock, mir: &Mir<'_>, w: &mut W) -> io::Result<()> {\n+fn write_node<W: Write>(block: BasicBlock, mir: &Body<'_>, w: &mut W) -> io::Result<()> {\n     // Start a new node with the label to follow, in one of DOT's pseudo-HTML tables.\n     write!(w, r#\"    {} [shape=\"none\", label=<\"#, node(block))?;\n     write_node_label(block, mir, w, 1, |_| Ok(()), |_| Ok(()))?;\n@@ -119,7 +119,7 @@ fn write_node<W: Write>(block: BasicBlock, mir: &Mir<'_>, w: &mut W) -> io::Resu\n }\n \n /// Write graphviz DOT edges with labels between the given basic block and all of its successors.\n-fn write_edges<W: Write>(source: BasicBlock, mir: &Mir<'_>, w: &mut W) -> io::Result<()> {\n+fn write_edges<W: Write>(source: BasicBlock, mir: &Body<'_>, w: &mut W) -> io::Result<()> {\n     let terminator = mir[source].terminator();\n     let labels = terminator.kind.fmt_successor_labels();\n \n@@ -135,7 +135,7 @@ fn write_edges<W: Write>(source: BasicBlock, mir: &Mir<'_>, w: &mut W) -> io::Re\n /// all the variables and temporaries.\n fn write_graph_label<'a, 'gcx, 'tcx, W: Write>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                def_id: DefId,\n-                                               mir: &Mir<'_>,\n+                                               mir: &Body<'_>,\n                                                w: &mut W)\n                                                -> io::Result<()> {\n     write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.def_path_str(def_id)))?;"}, {"sha": "a3317d3956be43015ffbc99766df5c963fd0beda", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -57,7 +57,7 @@ pub struct LivenessResult {\n /// Computes which local variables are live within the given function\n /// `mir`, including drops.\n pub fn liveness_of_locals<'tcx>(\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n ) -> LivenessResult {\n     let num_live_vars = mir.local_decls.len();\n \n@@ -258,7 +258,7 @@ pub fn dump_mir<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pass_name: &str,\n     source: MirSource<'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     result: &LivenessResult,\n ) {\n     if !dump_enabled(tcx, pass_name, source) {\n@@ -276,7 +276,7 @@ fn dump_matched_mir_node<'a, 'tcx>(\n     pass_name: &str,\n     node_path: &str,\n     source: MirSource<'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     result: &LivenessResult,\n ) {\n     let mut file_path = PathBuf::new();\n@@ -297,7 +297,7 @@ fn dump_matched_mir_node<'a, 'tcx>(\n pub fn write_mir_fn<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     src: MirSource<'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     w: &mut dyn Write,\n     result: &LivenessResult,\n ) -> io::Result<()> {"}, {"sha": "974dda867bc9df5e7a7f0b5fef6dc6e337ee6e98", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -17,7 +17,7 @@ pub struct MirPatch<'tcx> {\n }\n \n impl<'tcx> MirPatch<'tcx> {\n-    pub fn new(mir: &Mir<'tcx>) -> Self {\n+    pub fn new(mir: &Body<'tcx>) -> Self {\n         let mut result = MirPatch {\n             patch_map: IndexVec::from_elem(None, mir.basic_blocks()),\n             new_blocks: vec![],\n@@ -75,7 +75,7 @@ impl<'tcx> MirPatch<'tcx> {\n         self.patch_map[bb].is_some()\n     }\n \n-    pub fn terminator_loc(&self, mir: &Mir<'tcx>, bb: BasicBlock) -> Location {\n+    pub fn terminator_loc(&self, mir: &Body<'tcx>, bb: BasicBlock) -> Location {\n         let offset = match bb.index().checked_sub(mir.basic_blocks().len()) {\n             Some(index) => self.new_blocks[index].statements.len(),\n             None => mir[bb].statements.len()\n@@ -127,7 +127,7 @@ impl<'tcx> MirPatch<'tcx> {\n         self.make_nop.push(loc);\n     }\n \n-    pub fn apply(self, mir: &mut Mir<'tcx>) {\n+    pub fn apply(self, mir: &mut Body<'tcx>) {\n         debug!(\"MirPatch: make nops at: {:?}\", self.make_nop);\n         for loc in self.make_nop {\n             mir.make_statement_nop(loc);\n@@ -177,7 +177,7 @@ impl<'tcx> MirPatch<'tcx> {\n         }\n     }\n \n-    pub fn source_info_for_location(&self, mir: &Mir<'_>, loc: Location) -> SourceInfo {\n+    pub fn source_info_for_location(&self, mir: &Body<'_>, loc: Location) -> SourceInfo {\n         let data = match loc.block.index().checked_sub(mir.basic_blocks().len()) {\n             Some(new) => &self.new_blocks[new],\n             None => &mir[loc.block]"}, {"sha": "aec8ce7ced6c7609ee3eb62a6dc4b439c6597d4d", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -68,7 +68,7 @@ pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n     pass_name: &str,\n     disambiguator: &dyn Display,\n     source: MirSource<'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     extra_data: F,\n ) where\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n@@ -124,7 +124,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     node_path: &str,\n     disambiguator: &dyn Display,\n     source: MirSource<'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     mut extra_data: F,\n ) where\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n@@ -282,7 +282,7 @@ pub fn write_mir_pretty<'a, 'gcx, 'tcx>(\n pub fn write_mir_fn<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     src: MirSource<'tcx>,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     extra_data: &mut F,\n     w: &mut dyn Write,\n ) -> io::Result<()>\n@@ -306,7 +306,7 @@ where\n pub fn write_basic_block<'cx, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     block: BasicBlock,\n-    mir: &Mir<'tcx>,\n+    mir: &Body<'tcx>,\n     extra_data: &mut F,\n     w: &mut dyn Write,\n ) -> io::Result<()>\n@@ -464,7 +464,7 @@ fn comment(tcx: TyCtxt<'_, '_, '_>, SourceInfo { span, scope }: SourceInfo) -> S\n /// Prints local variables in a scope tree.\n fn write_scope_tree(\n     tcx: TyCtxt<'_, '_, '_>,\n-    mir: &Mir<'_>,\n+    mir: &Body<'_>,\n     scope_tree: &FxHashMap<SourceScope, Vec<SourceScope>>,\n     w: &mut dyn Write,\n     parent: SourceScope,\n@@ -541,7 +541,7 @@ fn write_scope_tree(\n pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     src: MirSource<'tcx>,\n-    mir: &Mir<'_>,\n+    mir: &Body<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n     write_mir_sig(tcx, src, mir, w)?;\n@@ -572,7 +572,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n fn write_mir_sig(\n     tcx: TyCtxt<'_, '_, '_>,\n     src: MirSource<'tcx>,\n-    mir: &Mir<'_>,\n+    mir: &Body<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n     use rustc::hir::def::DefKind;\n@@ -629,7 +629,7 @@ fn write_mir_sig(\n     Ok(())\n }\n \n-fn write_user_type_annotations(mir: &Mir<'_>, w: &mut dyn Write) -> io::Result<()> {\n+fn write_user_type_annotations(mir: &Body<'_>, w: &mut dyn Write) -> io::Result<()> {\n     if !mir.user_type_annotations.is_empty() {\n         writeln!(w, \"| User Type Annotations\")?;\n     }"}, {"sha": "e2171a84e23002b154160472fa8d3dd7ec6eb447", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -727,6 +727,11 @@ impl SourceMap {\n         debug!(\"find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`\",\n                local_begin, local_end);\n \n+        if local_begin.sf.start_pos != local_end.sf.start_pos {\n+            debug!(\"find_width_of_character_at_span: begin and end are in different files\");\n+            return 1;\n+        }\n+\n         let start_index = local_begin.pos.to_usize();\n         let end_index = local_end.pos.to_usize();\n         debug!(\"find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`\","}, {"sha": "96c71b084b13e941688d9a7f99738fddcbaf7cbf", "filename": "src/test/run-pass/regions/regions-lub-ref-ref-rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Frun-pass%2Fregions%2Fregions-lub-ref-ref-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee08261c8c5bef635ff38f6d617bb7b72dd470cd/src%2Ftest%2Frun-pass%2Fregions%2Fregions-lub-ref-ref-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-lub-ref-ref-rc.rs?ref=ee08261c8c5bef635ff38f6d617bb7b72dd470cd", "patch": "@@ -11,16 +11,16 @@\n use std::rc::Rc;\n \n #[derive(Clone)]\n-enum CachedMir<'mir> {\n+enum Cached<'mir> {\n     Ref(&'mir String),\n     Owned(Rc<String>),\n }\n \n-impl<'mir> CachedMir<'mir> {\n+impl<'mir> Cached<'mir> {\n     fn get_ref<'a>(&'a self) -> &'a String {\n         match *self {\n-            CachedMir::Ref(r) => r,\n-            CachedMir::Owned(ref rc) => &rc,\n+            Cached::Ref(r) => r,\n+            Cached::Owned(ref rc) => &rc,\n         }\n     }\n }"}]}