{"sha": "9bb8077c1816853527fdb1bc6333e266d7ae80a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYjgwNzdjMTgxNjg1MzUyN2ZkYjFiYzYzMzNlMjY2ZDdhZTgwYTY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-05-26T14:39:55Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-05-26T14:39:55Z"}, "message": "Add documentation for libstd/bool.rs.\n\nThere was some before, but now we have a big header, as well as\nlots of individual bits of documentation.", "tree": {"sha": "4625095d27e16f886505b9c7ad69051102ba108d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4625095d27e16f886505b9c7ad69051102ba108d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bb8077c1816853527fdb1bc6333e266d7ae80a6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb8077c1816853527fdb1bc6333e266d7ae80a6", "html_url": "https://github.com/rust-lang/rust/commit/9bb8077c1816853527fdb1bc6333e266d7ae80a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bb8077c1816853527fdb1bc6333e266d7ae80a6/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ab1012f1f5786f550e511ba1302a22c85fcd71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ab1012f1f5786f550e511ba1302a22c85fcd71", "html_url": "https://github.com/rust-lang/rust/commit/b5ab1012f1f5786f550e511ba1302a22c85fcd71"}], "stats": {"total": 213, "additions": 194, "deletions": 19}, "files": [{"sha": "532e470e595b72bc65a16e4932a9df72f67bbdcc", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 194, "deletions": 19, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8077c1816853527fdb1bc6333e266d7ae80a6/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8077c1816853527fdb1bc6333e266d7ae80a6/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=9bb8077c1816853527fdb1bc6333e266d7ae80a6", "patch": "@@ -8,45 +8,190 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Boolean logic\n+/*!\n+\n+The `bool` module contains useful code to help work with boolean values.\n+\n+A quick summary:\n+\n+## Trait implementations for `bool`\n+\n+Implementations of the following traits:\n+\n+* `FromStr`\n+* `Ord`\n+* `TotalOrd`\n+* `Eq`\n+\n+## Various functions to compare `bool`s\n+\n+All of the standard comparison functions one would expect: `and`, `eq`, `or`,\n+and more.\n+\n+Also, a few conversion functions: `to_bit` and `to_str`.\n+\n+Finally, some inquries into the nature of truth: `is_true` and `is_false`.\n+\n+*/\n \n #[cfg(not(test))]\n use cmp::{Eq, Ord, TotalOrd, Ordering};\n use option::{None, Option, Some};\n use from_str::FromStr;\n \n-/// Negation / inverse\n+/**\n+* Negation of a boolean value.\n+*\n+* # Examples\n+* ~~~\n+* rusti> core::bool::not(true)\n+* false\n+* ~~~\n+* rusti> core::bool::not(false)\n+* true\n+* ~~~\n+*/\n pub fn not(v: bool) -> bool { !v }\n \n-/// Conjunction\n+/**\n+* Conjunction of two boolean values.\n+*\n+* # Examples\n+* ~~~\n+* rusti> core::bool::and(true, false)\n+* false\n+* ~~~\n+* rusti> core::bool::and(true, true)\n+* true\n+* ~~~\n+*/\n pub fn and(a: bool, b: bool) -> bool { a && b }\n \n-/// Disjunction\n+/**\n+* Disjunction of two boolean values.\n+*\n+* # Examples\n+* ~~~\n+* rusti> core::bool::or(true, false)\n+* true\n+* ~~~\n+* rusti> core::bool::or(false, false)\n+* false\n+* ~~~\n+*/\n pub fn or(a: bool, b: bool) -> bool { a || b }\n \n /**\n- * Exclusive or\n- *\n- * Identical to `or(and(a, not(b)), and(not(a), b))`\n- */\n+* An 'exclusive or' of two boolean values.\n+*\n+* 'exclusive or' is identical to `or(and(a, not(b)), and(not(a), b))`.\n+*\n+* # Examples\n+* ~~~\n+* rusti> core::bool::xor(true, false)\n+* true\n+* ~~~\n+* rusti> core::bool::xor(true, true)\n+* false\n+* ~~~\n+*/\n pub fn xor(a: bool, b: bool) -> bool { (a && !b) || (!a && b) }\n \n-/// Implication in the logic, i.e. from `a` follows `b`\n+/**\n+* Implication between two boolean values.\n+*\n+* Implication is often phrased as 'if a then b.'\n+*\n+* 'if a then b' is equivalent to `!a || b`.\n+*\n+* # Examples\n+* ~~~\n+* rusti> core::bool::implies(true, true)\n+* true\n+* ~~~\n+* rusti> core::bool::implies(true, false)\n+* false\n+* ~~~\n+*/\n pub fn implies(a: bool, b: bool) -> bool { !a || b }\n \n-/// true if truth values `a` and `b` are indistinguishable in the logic\n+/**\n+* Equality between two boolean values.\n+*\n+* Two booleans are equal if they have the same value.\n+*\n+* # Examples\n+* ~~~\n+* rusti> core::bool::eq(false, true)\n+* false\n+* ~~~\n+* rusti> core::bool::eq(false, false)\n+* true\n+* ~~~\n+*/\n pub fn eq(a: bool, b: bool) -> bool { a == b }\n \n-/// true if truth values `a` and `b` are distinguishable in the logic\n+/**\n+* Non-equality between two boolean values.\n+*\n+* Two booleans are not equal if they have different values.\n+*\n+* # Examples\n+* ~~~\n+* rusti> core::bool::ne(false, true)\n+* true\n+* ~~~\n+* rusti> core::bool::ne(false, false)\n+* false\n+* ~~~\n+*/\n pub fn ne(a: bool, b: bool) -> bool { a != b }\n \n-/// true if `v` represents truth in the logic\n+/**\n+* Is a given boolean value true?\n+*\n+* # Examples\n+* ~~~\n+* rusti> core::bool::is_true(true)\n+* true\n+* ~~~\n+* rusti> core::bool::is_true(false)\n+* false\n+* ~~~\n+*/\n pub fn is_true(v: bool) -> bool { v }\n \n-/// true if `v` represents falsehood in the logic\n+/**\n+* Is a given boolean value false?\n+*\n+* # Examples\n+* ~~~\n+* rusti> core::bool::is_false(false)\n+* true\n+* ~~~\n+* rusti> core::bool::is_false(true)\n+* false\n+* ~~~\n+*/\n pub fn is_false(v: bool) -> bool { !v }\n \n-/// Parse logic value from `s`\n+/**\n+* Parse a `bool` from a `str`.\n+*\n+* Yields an `Option<bool>`, because `str` may or may not actually be parseable.\n+*\n+* # Examples\n+* ~~~\n+* rusti> FromStr::from_str::<bool>(\"true\")\n+* Some(true)\n+* ~~~\n+* rusti> FromStr::from_str::<bool>(\"false\")\n+* Some(false)\n+* ~~~\n+* rusti> FromStr::from_str::<bool>(\"not even a boolean\")\n+* None\n+* ~~~\n+*/\n impl FromStr for bool {\n     fn from_str(s: &str) -> Option<bool> {\n         match s {\n@@ -57,19 +202,49 @@ impl FromStr for bool {\n     }\n }\n \n-/// Convert `v` into a string\n+/**\n+* Convert a `bool` to a `str`.\n+*\n+* # Examples\n+* ~~~\n+* rusti> std::bool::to_str(true)\n+* \"true\"\n+* ~~~\n+* rusti> std::bool::to_str(false)\n+* \"false\"\n+* ~~~\n+*/\n pub fn to_str(v: bool) -> ~str { if v { ~\"true\" } else { ~\"false\" } }\n \n /**\n- * Iterates over all truth values by passing them to `blk` in an unspecified\n- * order\n- */\n+* Iterates over all truth values, passing them to the given block.\n+*\n+* There are no guarantees about the order values will be given.\n+*\n+* # Examples\n+* ~~~\n+* do core::bool::all_values |x: bool| {\n+*     println(core::bool::to_str(x));\n+* }\n+* ~~~\n+*/\n pub fn all_values(blk: &fn(v: bool)) {\n     blk(true);\n     blk(false);\n }\n \n-/// converts truth value to an 8 bit byte\n+/**\n+* Convert a `bool` to a `u8`.\n+*\n+* # Examples\n+* ~~~\n+* rusti> std::bool::to_bit(true)\n+* 1\n+* ~~~\n+* rusti> std::bool::to_bit(false)\n+* 0\n+* ~~~\n+*/\n #[inline(always)]\n pub fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n "}]}