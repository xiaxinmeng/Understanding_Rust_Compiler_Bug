{"sha": "3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZTZmNDIyZjllZjEzYjkxNzFkYmVhYjBjNWM0MjdmNzI5Zjk5ODM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-04T13:15:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-04T13:58:10Z"}, "message": "remove id arena", "tree": {"sha": "25bc6aab1e4328e73446876b274e7dcaff7aa915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25bc6aab1e4328e73446876b274e7dcaff7aa915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "html_url": "https://github.com/rust-lang/rust/commit/3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "291d578938d7dc9b1f9bbd1174e444cc831531d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/291d578938d7dc9b1f9bbd1174e444cc831531d9", "html_url": "https://github.com/rust-lang/rust/commit/291d578938d7dc9b1f9bbd1174e444cc831531d9"}], "stats": {"total": 120, "additions": 26, "deletions": 94}, "files": [{"sha": "b060586884366d99d3c8891db687e74877bc6051", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "patch": "@@ -370,11 +370,6 @@ name = \"humansize\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"id-arena\"\n-version = \"2.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"idna\"\n version = \"0.1.5\"\n@@ -733,9 +728,9 @@ dependencies = [\n  \"arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.10.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"id-arena 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\",\n@@ -1534,7 +1529,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n \"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n \"checksum humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e\"\n-\"checksum id-arena 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a7250033feafee46a1cecd2c2616a64aec1d064f38c9ae2bdd297728542843e\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum im 12.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae9c7f9bb8aee47fc16d535a705f7867a9fc83bb822e5e1043bb98e77ffeed3c\"\n \"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\""}, {"sha": "a5eeb4118e0464c7eb56b69dc9bb1d02b29226ef", "filename": "crates/ra_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Flib.rs?ref=3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "patch": "@@ -33,7 +33,7 @@ impl fmt::Display for RawId {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct Arena<ID: ArenaId, T> {\n     data: Vec<T>,\n     _ty: PhantomData<ID>,"}, {"sha": "8c0cf4b866e2e90c9e7b32ab058b9499362bc2d1", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "patch": "@@ -11,9 +11,9 @@ relative-path = \"0.4.0\"\n salsa = \"0.9.0\"\n rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n-id-arena = \"2.0\"\n ena = \"0.11\"\n ra_syntax = { path = \"../ra_syntax\" }\n+ra_arena = { path = \"../ra_arena\" }\n ra_editor = { path = \"../ra_editor\" }\n ra_db = { path = \"../ra_db\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "d4f9d9cb904231c34bb6b28865517def9690639b", "filename": "crates/ra_hir/src/arena.rs", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/291d578938d7dc9b1f9bbd1174e444cc831531d9/crates%2Fra_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291d578938d7dc9b1f9bbd1174e444cc831531d9/crates%2Fra_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Farena.rs?ref=291d578938d7dc9b1f9bbd1174e444cc831531d9", "patch": "@@ -1,66 +0,0 @@\n-//! A simple id-based arena, similar to https://github.com/fitzgen/id-arena.\n-//! We use our own version for more compact id's and to allow inherent impls\n-//! on Ids.\n-\n-use std::{\n-    fmt,\n-    hash::{Hash, Hasher},\n-    marker::PhantomData,\n-};\n-\n-pub struct Id<T> {\n-    idx: u32,\n-    _ty: PhantomData<fn() -> T>,\n-}\n-\n-impl<T> fmt::Debug for Id<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"Id\").field(&self.idx).finish()\n-    }\n-}\n-impl<T> Copy for Id<T> {}\n-impl<T> Clone for Id<T> {\n-    fn clone(&self) -> Id<T> {\n-        *self\n-    }\n-}\n-\n-impl<T> PartialEq for Id<T> {\n-    fn eq(&self, other: &Id<T>) -> bool {\n-        self.idx == other.idx\n-    }\n-}\n-\n-impl<T> Eq for Id<T> {}\n-\n-impl<T> Hash for Id<T> {\n-    fn hash<H: Hasher>(&self, h: &mut H) {\n-        self.idx.hash(h);\n-    }\n-}\n-\n-#[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct ArenaBehavior<T> {\n-    _ty: PhantomData<T>,\n-}\n-\n-impl<T> id_arena::ArenaBehavior for ArenaBehavior<T> {\n-    type Id = Id<T>;\n-    fn new_arena_id() -> u32 {\n-        0\n-    }\n-    fn new_id(_arena_id: u32, index: usize) -> Id<T> {\n-        Id {\n-            idx: index as u32,\n-            _ty: PhantomData,\n-        }\n-    }\n-    fn index(id: Id<T>) -> usize {\n-        id.idx as usize\n-    }\n-    fn arena_id(_id: Id<T>) -> u32 {\n-        0\n-    }\n-}\n-\n-pub(crate) type Arena<T> = id_arena::Arena<T, ArenaBehavior<T>>;"}, {"sha": "42bfe4f3251670858528dcfd8a4b5ef02146d486", "filename": "crates/ra_hir/src/function/scope.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs?ref=3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "patch": "@@ -5,19 +5,19 @@ use ra_syntax::{\n     algo::generate,\n     ast::{self, ArgListOwner, LoopBodyOwner, NameOwner},\n };\n+use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_db::LocalSyntaxPtr;\n \n-use crate::{\n-    arena::{Arena, Id},\n-    Name, AsName,\n-};\n+use crate::{Name, AsName};\n \n-pub(crate) type ScopeId = Id<ScopeData>;\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct ScopeId(RawId);\n+impl_arena_id!(ScopeId);\n \n #[derive(Debug, PartialEq, Eq)]\n pub struct FnScopes {\n     pub self_param: Option<LocalSyntaxPtr>,\n-    scopes: Arena<ScopeData>,\n+    scopes: Arena<ScopeId, ScopeData>,\n     scope_for: FxHashMap<LocalSyntaxPtr, ScopeId>,\n }\n "}, {"sha": "66adacc7d4ace54f11dd43ba4d9892df7edf97bb", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "patch": "@@ -1,10 +1,8 @@\n use ra_db::{SourceRootId, LocationIntener, Cancelable, FileId};\n use ra_syntax::{SourceFileNode, SyntaxKind, SyntaxNode, SyntaxNodeRef, SourceFile, AstNode, ast};\n+use ra_arena::{Arena, RawId, impl_arena_id};\n \n-use crate::{\n-    HirDatabase, PerNs, ModuleId, Module, Def, Function, Struct, Enum,\n-    arena::{Arena, Id},\n-};\n+use crate::{HirDatabase, PerNs, ModuleId, Module, Def, Function, Struct, Enum};\n \n /// hir makes a heavy use of ids: integer (u32) handlers to various things. You\n /// can think of id as a pointer (but without a lifetime) or a file descriptor\n@@ -206,7 +204,9 @@ impl DefKind {\n \n /// Identifier of item within a specific file. This is stable over reparses, so\n /// it's OK to use it as a salsa key/value.\n-pub(crate) type SourceFileItemId = Id<SyntaxNode>;\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct SourceFileItemId(RawId);\n+impl_arena_id!(SourceFileItemId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct SourceItemId {\n@@ -219,7 +219,7 @@ pub struct SourceItemId {\n #[derive(Debug, PartialEq, Eq)]\n pub struct SourceFileItems {\n     file_id: HirFileId,\n-    arena: Arena<SyntaxNode>,\n+    arena: Arena<SourceFileItemId, SyntaxNode>,\n }\n \n impl SourceFileItems {"}, {"sha": "344b543b6e4d319dcac9b3bb7469ff3976ef846e", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "patch": "@@ -19,7 +19,6 @@ pub mod db;\n mod mock;\n mod query_definitions;\n mod path;\n-mod arena;\n pub mod source_binder;\n \n mod ids;"}, {"sha": "c70dc54dd946d07479cd48eda02b673db5b81dcb", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6f422f9ef13b9171dbeab0c5c427f729f9983/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=3fe6f422f9ef13b9171dbeab0c5c427f729f9983", "patch": "@@ -9,14 +9,14 @@ use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n     SyntaxNode,\n };\n+use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_db::{SourceRootId, FileId, Cancelable};\n use relative_path::RelativePathBuf;\n \n use crate::{\n     Def, DefKind, DefLoc, DefId,\n     Name, Path, PathKind, HirDatabase, SourceItemId, SourceFileItemId, Crate,\n     HirFileId,\n-    arena::{Arena, Id},\n };\n \n pub use self::nameres::{ModuleScope, Resolution, Namespace, PerNs};\n@@ -173,6 +173,14 @@ impl Module {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct ModuleId(RawId);\n+impl_arena_id!(ModuleId);\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct LinkId(RawId);\n+impl_arena_id!(LinkId);\n+\n /// Physically, rust source is organized as a set of files, but logically it is\n /// organized as a tree of modules. Usually, a single file corresponds to a\n /// single module, but it is not nessary the case.\n@@ -182,8 +190,8 @@ impl Module {\n /// always have one parent).\n #[derive(Default, Debug, PartialEq, Eq)]\n pub struct ModuleTree {\n-    mods: Arena<ModuleData>,\n-    links: Arena<LinkData>,\n+    mods: Arena<ModuleId, ModuleData>,\n+    links: Arena<LinkId, LinkData>,\n }\n \n impl ModuleTree {\n@@ -210,9 +218,6 @@ pub(crate) enum ModuleSourceNode {\n     Module(ast::ModuleNode),\n }\n \n-pub type ModuleId = Id<ModuleData>;\n-type LinkId = Id<LinkData>;\n-\n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub enum Problem {\n     UnresolvedModule {"}]}