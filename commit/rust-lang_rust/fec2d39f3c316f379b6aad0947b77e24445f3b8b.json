{"sha": "fec2d39f3c316f379b6aad0947b77e24445f3b8b", "node_id": "C_kwDOAAsO6NoAKGZlYzJkMzlmM2MzMTZmMzc5YjZhYWQwOTQ3Yjc3ZTI0NDQ1ZjNiOGI", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-12-01T09:23:42Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-12-01T09:23:42Z"}, "message": "simplify??", "tree": {"sha": "6c329f354be493f7152acbdb90ababf77944f1f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c329f354be493f7152acbdb90ababf77944f1f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec2d39f3c316f379b6aad0947b77e24445f3b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec2d39f3c316f379b6aad0947b77e24445f3b8b", "html_url": "https://github.com/rust-lang/rust/commit/fec2d39f3c316f379b6aad0947b77e24445f3b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec2d39f3c316f379b6aad0947b77e24445f3b8b/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1b2d258100477ec9d6e6f29fec767a91076cd00", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b2d258100477ec9d6e6f29fec767a91076cd00", "html_url": "https://github.com/rust-lang/rust/commit/a1b2d258100477ec9d6e6f29fec767a91076cd00"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "23fcd02b57a09461af2317a8a6a6765769a70659", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fec2d39f3c316f379b6aad0947b77e24445f3b8b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec2d39f3c316f379b6aad0947b77e24445f3b8b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=fec2d39f3c316f379b6aad0947b77e24445f3b8b", "patch": "@@ -15,8 +15,8 @@ use hir_def::{\n     },\n     expr::{ExprId, Pat, PatId},\n     path::{ModPath, Path, PathKind},\n-    resolver::{resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    AsMacroCall, DefWithBodyId, FieldId, FunctionId, LocalFieldId, VariantId,\n+    resolver::{resolver_for_scope, Resolver, TypeNs, ValueNs},\n+    AsMacroCall, DefWithBodyId, FieldId, FunctionId, LocalFieldId, ModuleDefId, VariantId,\n };\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{\n@@ -545,13 +545,13 @@ fn resolve_hir_path_(\n             }\n         }?;\n \n-        if let (Some(_), TypeNs::TraitId(trait_id)) = (&unresolved, &ty) {\n-            let resolver = trait_id.resolver(db.upcast());\n-            if let Some(module_def_id) = resolver\n-                .resolve_module_path_in_trait_assoc_items(db.upcast(), path.mod_path())\n-                .and_then(|ns| ns.take_types())\n+        // If we are in a TypeNs for a Trait, and we have an unresolved name, try to resolve it as a type\n+        // within the trait's associated types.\n+        if let (Some(unresolved), &TypeNs::TraitId(trait_id)) = (&unresolved, &ty) {\n+            if let Some(type_alias_id) =\n+                db.trait_data(trait_id).associated_type_by_name(&unresolved.name)\n             {\n-                return Some(PathResolution::Def(module_def_id.into()));\n+                return Some(PathResolution::Def(ModuleDefId::from(type_alias_id).into()));\n             }\n         }\n "}]}