{"sha": "a0ad4adf5977316494f8be2d549e6352c6a9b620", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYWQ0YWRmNTk3NzMxNjQ5NGY4YmUyZDU0OWU2MzUyYzZhOWI2MjA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-19T16:51:25Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-03T10:08:19Z"}, "message": "Change thread name", "tree": {"sha": "5e3697af8e424fb61f7f8e58264d0a9711bd2ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3697af8e424fb61f7f8e58264d0a9711bd2ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0ad4adf5977316494f8be2d549e6352c6a9b620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ad4adf5977316494f8be2d549e6352c6a9b620", "html_url": "https://github.com/rust-lang/rust/commit/a0ad4adf5977316494f8be2d549e6352c6a9b620", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0ad4adf5977316494f8be2d549e6352c6a9b620/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe3915a05deac257dade7cf0839e3150221c18a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe3915a05deac257dade7cf0839e3150221c18a", "html_url": "https://github.com/rust-lang/rust/commit/5fe3915a05deac257dade7cf0839e3150221c18a"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "3b910c276ee0c4fbf2c444d97ddbcf9e13824352", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a0ad4adf5977316494f8be2d549e6352c6a9b620/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ad4adf5977316494f8be2d549e6352c6a9b620/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a0ad4adf5977316494f8be2d549e6352c6a9b620", "patch": "@@ -88,7 +88,7 @@ pub fn run(input: &str,\n         config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n \n     let krate = panictry!(driver::phase_1_parse_input(&sess, &input));\n-    let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n+    let driver::ExpansionResult { hir_forest, .. } = {\n         phase_2_configure_and_expand(\n             &sess, &cstore, krate, None, \"rustdoc-test\", None, MakeGlobMap::No, |_| Ok(())\n         ).expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n@@ -183,8 +183,6 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n         name: driver::anon_src(),\n         input: test.to_owned(),\n     };\n-    let test = format!(\"Error in \\\"{}\\\" at line {}.\\n\",\n-                       filename, line_number);\n     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);\n \n     let sessopts = config::Options {\n@@ -265,22 +263,22 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n                     if count > 0 && !compile_fail {\n                         sess.fatal(\"aborting due to previous error(s)\")\n                     } else if count == 0 && compile_fail {\n-                        panic!(\"test compiled while it wasn't supposed to:\\n\\n{}\\n\", test)\n+                        panic!(\"test compiled while it wasn't supposed to\")\n                     }\n                     if count > 0 && error_codes.len() > 0 {\n                         let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n                         error_codes.retain(|err| !out.contains(err));\n                     }\n                 }\n                 Ok(()) if compile_fail => {\n-                    panic!(\"test compiled while it wasn't supposed to:\\n\\n{}\\n\", test)\n+                    panic!(\"test compiled while it wasn't supposed to\")\n                 }\n                 _ => {}\n             }\n         }\n         Err(_) => {\n             if !compile_fail {\n-                panic!(\"couldn't compile the test:\\n\\n{}\\n\", test);\n+                panic!(\"couldn't compile the test\");\n             }\n             if error_codes.len() > 0 {\n                 let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n@@ -290,7 +288,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     }\n \n     if error_codes.len() > 0 {\n-        panic!(\"Some expected error codes were not found: {:?}\\n\\n{}\\n\", error_codes, test);\n+        panic!(\"Some expected error codes were not found: {:?}\", error_codes);\n     }\n \n     if no_run { return }\n@@ -312,18 +310,17 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     cmd.env(var, &newpath);\n \n     match cmd.output() {\n-        Err(e) => panic!(\"couldn't run the test: {}{}\\n\\n{}\\n\", e,\n+        Err(e) => panic!(\"couldn't run the test: {}{}\", e,\n                         if e.kind() == io::ErrorKind::PermissionDenied {\n                             \" - maybe your tempdir is mounted with noexec?\"\n-                        } else { \"\" }, test),\n+                        } else { \"\" }),\n         Ok(out) => {\n             if should_panic && out.status.success() {\n-                panic!(\"test executable succeeded when it should have failed\\n\\n{}\\n\", test);\n+                panic!(\"test executable succeeded when it should have failed\");\n             } else if !should_panic && !out.status.success() {\n-                panic!(\"test executable failed:\\n{}\\n{}\\n\\n{}\\n\",\n+                panic!(\"test executable failed:\\n{}\\n{}\\n\",\n                        str::from_utf8(&out.stdout).unwrap_or(\"\"),\n-                       str::from_utf8(&out.stderr).unwrap_or(\"\"),\n-                       test);\n+                       str::from_utf8(&out.stderr).unwrap_or(\"\"));\n             }\n         }\n     }\n@@ -458,12 +455,8 @@ impl Collector {\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n                     original: String) {\n-        let name = if self.use_headers {\n-            let s = self.current_header.as_ref().map(|s| &**s).unwrap_or(\"\");\n-            format!(\"{}_{}\", s, self.cnt)\n-        } else {\n-            format!(\"{}_{}\", self.names.join(\"::\"), self.cnt)\n-        };\n+        let line_number = self.get_line_from_key(&format!(\"{}\\n{}\\n\", original, test));\n+        let name = format!(\"{} - line {}\", self.filename, line_number);\n         self.cnt += 1;\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n@@ -472,8 +465,6 @@ impl Collector {\n         let opts = self.opts.clone();\n         let maybe_sysroot = self.maybe_sysroot.clone();\n         debug!(\"Creating test {}: {}\", name, test);\n-        let line_number = self.get_line_from_key(&format!(\"{}\\n{}\\n\", original, test));\n-        let filename = self.filename.clone();\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n                 name: testing::DynTestName(name),"}]}