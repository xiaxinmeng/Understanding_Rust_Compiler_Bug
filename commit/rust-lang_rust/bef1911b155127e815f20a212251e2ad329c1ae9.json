{"sha": "bef1911b155127e815f20a212251e2ad329c1ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZjE5MTFiMTU1MTI3ZTgxNWYyMGEyMTIyNTFlMmFkMzI5YzFhZTk=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2016-10-14T22:14:29Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2016-10-28T01:35:57Z"}, "message": "tidy/features: fix checking of lang features\n\nRemoves the `STATUSES` static which duplicates truth from the pattern\nmatch in `collect_lang_features`.\n\nFixes existing duplicates by renaming:\n- never_type{,_impls} on `impl`s on `!`\n- concat_idents{,_macro} on `macro_rules! concat_idents`\n\nFixes #37013.", "tree": {"sha": "b7e9d9c78aae8e8f3a7a2dc11fa06a9db6cba10a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e9d9c78aae8e8f3a7a2dc11fa06a9db6cba10a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef1911b155127e815f20a212251e2ad329c1ae9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYEqt9AAoJEBwemMyOF7uJnYAQALD4+RTasgh4Ia+o0ExKP07x\ny8f8ZF65WDnhuMR073scZEn0kwSbcuX3j+GZemz73z/6loICoFX2GKfiDMI40FRL\nQEz2U1eAcmb6oFc4ygYERLnvjX+5WajMsez3ki9bi1Wx51HHdM3++7VUAx/hT1uS\nIWZHIJi6ArzA6u8E8GR4T9E/JkTgOF8Y8x3bT7qNUgoM37365Oi6AXdHCOQhyY4f\nseKFmdsHCObwzzdWh9tfqJlN/Y1nqndltenFk3VVTWvv2u2l7uM6UTPltuY+vN0w\nICFERHOiCAVhyS7sDHhJBp+As5fGrXybY59rAktPjj5sQu8GvzmyUeg8eth8sCLZ\ncSeWTdNGy9PW0fOFdHZXmORSOxWT+qgqO+MVfIrtrY35bqVidBNDs8jTqdOjGIms\nq+RuvjLQOjERMdE6iR6e4dgL6k1K9iiU8K1Egd3nbvqXTPbJR4B86SXKi9QOigos\nFb/zbbewSefLoI+lx8gevTOZSuPdgVGpvEbBgNKg74SZDavygs+R4BoJY7VACNfw\n7U7icduhCMvXcjH3HZBrza15q0uL19lvBpu43YsMmpmP0iHaqPzvy5VsE+DrFWBE\nlJxuKTGo68XG4Yah3g+Xtj7a0zjekCfr7p7Vj8WFXHxzJRPCoTQsJtY+qjFq02g7\nznUTrvHYAxpXibYJn9Y6\n=GyQB\n-----END PGP SIGNATURE-----", "payload": "tree b7e9d9c78aae8e8f3a7a2dc11fa06a9db6cba10a\nparent 7367db6fcc63c0de15b1aa58ee71d33aa3d0258b\nauthor Tamir Duberstein <tamird@gmail.com> 1476483269 -0400\ncommitter Tamir Duberstein <tamird@gmail.com> 1477618557 -0400\n\ntidy/features: fix checking of lang features\n\nRemoves the `STATUSES` static which duplicates truth from the pattern\nmatch in `collect_lang_features`.\n\nFixes existing duplicates by renaming:\n- never_type{,_impls} on `impl`s on `!`\n- concat_idents{,_macro} on `macro_rules! concat_idents`\n\nFixes #37013.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef1911b155127e815f20a212251e2ad329c1ae9", "html_url": "https://github.com/rust-lang/rust/commit/bef1911b155127e815f20a212251e2ad329c1ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef1911b155127e815f20a212251e2ad329c1ae9/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7367db6fcc63c0de15b1aa58ee71d33aa3d0258b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7367db6fcc63c0de15b1aa58ee71d33aa3d0258b", "html_url": "https://github.com/rust-lang/rust/commit/7367db6fcc63c0de15b1aa58ee71d33aa3d0258b"}], "stats": {"total": 129, "additions": 72, "deletions": 57}, "files": [{"sha": "e0f976e4161da2416cbb3389c5957c210c0e4eb7", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=bef1911b155127e815f20a212251e2ad329c1ae9", "patch": "@@ -706,24 +706,24 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[unstable(feature = \"never_type_impls\", issue = \"35121\")]\n     impl PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[unstable(feature = \"never_type_impls\", issue = \"35121\")]\n     impl Eq for ! {}\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[unstable(feature = \"never_type_impls\", issue = \"35121\")]\n     impl PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[unstable(feature = \"never_type_impls\", issue = \"35121\")]\n     impl Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}, {"sha": "2d75a8ec420b1cfa9252c8cd43d8b4a4c14a2016", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=bef1911b155127e815f20a212251e2ad329c1ae9", "patch": "@@ -1356,14 +1356,14 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[unstable(feature = \"never_type_impls\", issue = \"35121\")]\n impl Debug for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[unstable(feature = \"never_type_impls\", issue = \"35121\")]\n impl Display for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self"}, {"sha": "e6c3f549ec8e6c918fcc7a90606888939add4bdb", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=bef1911b155127e815f20a212251e2ad329c1ae9", "patch": "@@ -553,7 +553,7 @@ pub mod builtin {\n     /// For more information, see the documentation for [`std::concat_idents!`].\n     ///\n     /// [`std::concat_idents!`]: ../std/macro.concat_idents.html\n-    #[unstable(feature = \"concat_idents\", issue = \"29599\")]\n+    #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n     #[macro_export]\n     macro_rules! concat_idents {\n         ($($e:ident),*) => ({ /* compiler built-in */ })"}, {"sha": "0ce6b0a9431d4a8b56ef0caa9cee3dadf9c2cb3f", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=bef1911b155127e815f20a212251e2ad329c1ae9", "patch": "@@ -286,7 +286,7 @@ pub mod builtin {\n     /// // fn concat_idents!(new, fun, name) { } // not usable in this way!\n     /// # }\n     /// ```\n-    #[unstable(feature = \"concat_idents\", issue = \"29599\")]\n+    #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n     #[macro_export]\n     macro_rules! concat_idents {\n         ($($e:ident),*) => ({ /* compiler built-in */ })"}, {"sha": "4ef07f7e4b896dd5fc6f28475b901845115b1605", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 64, "deletions": 49, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef1911b155127e815f20a212251e2ad329c1ae9/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=bef1911b155127e815f20a212251e2ad329c1ae9", "patch": "@@ -18,27 +18,42 @@\n //! * Library features have at most one `since` value\n \n use std::collections::HashMap;\n+use std::fmt;\n use std::fs::File;\n use std::io::prelude::*;\n use std::path::Path;\n \n-const STATUSES: &'static [&'static str] = &[\n-    \"Active\", \"Deprecated\", \"Removed\", \"Accepted\",\n-];\n+#[derive(PartialEq)]\n+enum Status {\n+    Stable,\n+    Unstable,\n+}\n+\n+impl fmt::Display for Status {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let as_str = match *self {\n+            Status::Stable => \"stable\",\n+            Status::Unstable => \"unstable\",\n+        };\n+        fmt::Display::fmt(as_str, f)\n+    }\n+}\n+\n \n struct Feature {\n     name: String,\n+    level: Status,\n     since: String,\n-    status: String,\n }\n \n struct LibFeature {\n-    level: String,\n+    level: Status,\n     since: String,\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let features = collect_lang_features(&path.join(\"libsyntax/feature_gate.rs\"));\n+    assert!(!features.is_empty());\n     let mut lib_features = HashMap::<String, LibFeature>::new();\n \n     let mut contents = String::new();\n@@ -48,7 +63,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         let filename = file.file_name().unwrap().to_string_lossy();\n         if !filename.ends_with(\".rs\") || filename == \"features.rs\" ||\n            filename == \"diagnostic_list.rs\" {\n-            return\n+            return;\n         }\n \n         contents.truncate(0);\n@@ -60,24 +75,24 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 *bad = true;\n             };\n             let level = if line.contains(\"[unstable(\") {\n-                \"unstable\"\n+                Status::Unstable\n             } else if line.contains(\"[stable(\") {\n-                \"stable\"\n+                Status::Stable\n             } else {\n-                continue\n+                continue;\n             };\n             let feature_name = match find_attr_val(line, \"feature\") {\n                 Some(name) => name,\n                 None => {\n                     err(\"malformed stability attribute\");\n-                    continue\n+                    continue;\n                 }\n             };\n             let since = match find_attr_val(line, \"since\") {\n                 Some(name) => name,\n-                None if level == \"stable\" => {\n+                None if level == Status::Stable => {\n                     err(\"malformed stability attribute\");\n-                    continue\n+                    continue;\n                 }\n                 None => \"None\",\n             };\n@@ -92,27 +107,34 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 if s.since != since {\n                     err(\"different `since` than before\");\n                 }\n-                continue\n+                continue;\n             }\n-            lib_features.insert(feature_name.to_owned(), LibFeature {\n-                level: level.to_owned(),\n-                since: since.to_owned(),\n-            });\n+            lib_features.insert(feature_name.to_owned(),\n+                                LibFeature {\n+                                    level: level,\n+                                    since: since.to_owned(),\n+                                });\n         }\n     });\n \n     if *bad {\n-        return\n+        return;\n     }\n \n     let mut lines = Vec::new();\n     for feature in features {\n         lines.push(format!(\"{:<32} {:<8} {:<12} {:<8}\",\n-                           feature.name, \"lang\", feature.status, feature.since));\n+                           feature.name,\n+                           \"lang\",\n+                           feature.level,\n+                           feature.since));\n     }\n     for (name, feature) in lib_features {\n         lines.push(format!(\"{:<32} {:<8} {:<12} {:<8}\",\n-                           name, \"lib\", feature.level, feature.since));\n+                           name,\n+                           \"lib\",\n+                           feature.level,\n+                           feature.since));\n     }\n \n     lines.sort();\n@@ -122,39 +144,32 @@ pub fn check(path: &Path, bad: &mut bool) {\n }\n \n fn find_attr_val<'a>(line: &'a str, attr: &str) -> Option<&'a str> {\n-    line.find(attr).and_then(|i| {\n-        line[i..].find(\"\\\"\").map(|j| i + j + 1)\n-    }).and_then(|i| {\n-        line[i..].find(\"\\\"\").map(|j| (i, i + j))\n-    }).map(|(i, j)| {\n-        &line[i..j]\n-    })\n+    line.find(attr)\n+        .and_then(|i| line[i..].find('\"').map(|j| i + j + 1))\n+        .and_then(|i| line[i..].find('\"').map(|j| (i, i + j)))\n+        .map(|(i, j)| &line[i..j])\n }\n \n fn collect_lang_features(path: &Path) -> Vec<Feature> {\n     let mut contents = String::new();\n     t!(t!(File::open(path)).read_to_string(&mut contents));\n \n-    let mut features = Vec::new();\n-    for line in contents.lines().map(|l| l.trim()) {\n-        if !STATUSES.iter().any(|s| line.starts_with(&format!(\"({}\", s))) {\n-            continue\n-        }\n-        let mut parts = line.split(\",\");\n-        let status = match &parts.next().unwrap().trim().replace(\"(\", \"\")[..] {\n-            \"active\"   => \"unstable\",\n-            \"removed\"  => \"unstable\",\n-            \"accepted\" => \"stable\",\n-            s => panic!(\"unknown status: {}\", s),\n-        };\n-        let name = parts.next().unwrap().trim().to_owned();\n-        let since = parts.next().unwrap().trim().replace(\"\\\"\", \"\");\n-\n-        features.push(Feature {\n-            name: name,\n-            since: since,\n-            status: status.to_owned(),\n-        });\n-    }\n-    return features\n+    contents.lines()\n+        .filter_map(|line| {\n+            let mut parts = line.trim().split(\",\");\n+            let level = match parts.next().map(|l| l.trim().trim_left_matches('(')) {\n+                Some(\"active\") => Status::Unstable,\n+                Some(\"removed\") => Status::Unstable,\n+                Some(\"accepted\") => Status::Stable,\n+                _ => return None,\n+            };\n+            let name = parts.next().unwrap().trim();\n+            let since = parts.next().unwrap().trim().trim_matches('\"');\n+            Some(Feature {\n+                name: name.to_owned(),\n+                level: level,\n+                since: since.to_owned(),\n+            })\n+        })\n+        .collect()\n }"}]}