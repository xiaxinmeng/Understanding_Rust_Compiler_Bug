{"sha": "2553a9590c5980a0013789209f928ec065e44ca6", "node_id": "C_kwDOAAsO6NoAKDI1NTNhOTU5MGM1OTgwYTAwMTM3ODkyMDlmOTI4ZWMwNjVlNDRjYTY", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-09-25T23:43:52Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-11-05T22:56:38Z"}, "message": "Replace boxed iterator with vec collect", "tree": {"sha": "f39b2d9b865c73c8479b3eed448def02d9854202", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f39b2d9b865c73c8479b3eed448def02d9854202"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2553a9590c5980a0013789209f928ec065e44ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2553a9590c5980a0013789209f928ec065e44ca6", "html_url": "https://github.com/rust-lang/rust/commit/2553a9590c5980a0013789209f928ec065e44ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2553a9590c5980a0013789209f928ec065e44ca6/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef19b80f7145f99d2f91818c687781a0dc4004d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef19b80f7145f99d2f91818c687781a0dc4004d", "html_url": "https://github.com/rust-lang/rust/commit/cef19b80f7145f99d2f91818c687781a0dc4004d"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "237701b5e6fea0c6b2efd08d1cbc897d2f34e347", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2553a9590c5980a0013789209f928ec065e44ca6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2553a9590c5980a0013789209f928ec065e44ca6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=2553a9590c5980a0013789209f928ec065e44ca6", "patch": "@@ -13,7 +13,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{Expr, ExprKind, Node, QPath};\n+use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::{\n     type_variable::{TypeVariableOrigin, TypeVariableOriginKind},\n     RegionVariableOrigin,\n@@ -475,29 +475,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let mut applicability = Applicability::MachineApplicable;\n                         let args = if let Some((receiver, args)) = args {\n                             // The first arg is the same kind as the receiver\n-                            let it = if first_arg.is_some() {\n-                                Box::new(std::iter::once(receiver).chain(args.iter()))\n-                                    as Box<dyn Iterator<Item = &Expr<'_>>>\n+                            let explicit_args = if first_arg.is_some() {\n+                                std::iter::once(receiver).chain(args.iter()).collect::<Vec<_>>()\n                             } else {\n                                 // There is no `Self` kind to infer the arguments from\n                                 if has_unsuggestable_args {\n                                     applicability = Applicability::HasPlaceholders;\n                                 }\n-                                Box::new(args.iter()) as _\n+                                args.iter().collect()\n                             };\n                             format!(\n                                 \"({}{})\",\n                                 first_arg.unwrap_or(\"\"),\n-                                it.map(|arg| tcx\n-                                    .sess\n-                                    .source_map()\n-                                    .span_to_snippet(arg.span)\n-                                    .unwrap_or_else(|_| {\n-                                        applicability = Applicability::HasPlaceholders;\n-                                        \"_\".to_owned()\n-                                    }))\n-                                .collect::<Vec<_>>()\n-                                .join(\", \"),\n+                                explicit_args\n+                                    .iter()\n+                                    .map(|arg| tcx\n+                                        .sess\n+                                        .source_map()\n+                                        .span_to_snippet(arg.span)\n+                                        .unwrap_or_else(|_| {\n+                                            applicability = Applicability::HasPlaceholders;\n+                                            \"_\".to_owned()\n+                                        }))\n+                                    .collect::<Vec<_>>()\n+                                    .join(\", \"),\n                             )\n                         } else {\n                             applicability = Applicability::HasPlaceholders;"}]}