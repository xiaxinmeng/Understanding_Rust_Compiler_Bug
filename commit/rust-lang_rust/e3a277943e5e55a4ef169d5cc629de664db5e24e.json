{"sha": "e3a277943e5e55a4ef169d5cc629de664db5e24e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYTI3Nzk0M2U1ZTU1YTRlZjE2OWQ1Y2M2MjlkZTY2NGRiNWUyNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-25T11:56:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-25T11:56:56Z"}, "message": "Auto merge of #69440 - Dylan-DPC:rollup-hj4bo9l, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #69220 (Add documentation for the `-Zself-profile` flag)\n - #69391 (Add rustdoc aliases to `ptr::copy` and `ptr::copy_nonoverlapping`)\n - #69427 (Cleanup e0368 e0369)\n - #69433 (don't explicitly compare against true or false)\n - #69435 (Replace uses of Cell::get + Cell::set with Cell::replace.)\n - #69437 (no more codegen for miri_start_panic)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6d7c39a87ad9d60a40ec7ae4f1ec2a16c1d757cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d7c39a87ad9d60a40ec7ae4f1ec2a16c1d757cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a277943e5e55a4ef169d5cc629de664db5e24e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a277943e5e55a4ef169d5cc629de664db5e24e", "html_url": "https://github.com/rust-lang/rust/commit/e3a277943e5e55a4ef169d5cc629de664db5e24e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a277943e5e55a4ef169d5cc629de664db5e24e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b961754ecc425e11d6f5eaa67a01cd89b1d42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b961754ecc425e11d6f5eaa67a01cd89b1d42b", "html_url": "https://github.com/rust-lang/rust/commit/e9b961754ecc425e11d6f5eaa67a01cd89b1d42b"}, {"sha": "e238eb610f363176ce582009533764edb7a711db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e238eb610f363176ce582009533764edb7a711db", "html_url": "https://github.com/rust-lang/rust/commit/e238eb610f363176ce582009533764edb7a711db"}], "stats": {"total": 182, "additions": 150, "deletions": 32}, "files": [{"sha": "3ce18743be50801360ef737c510d6ebc0e86ba61", "filename": "src/doc/unstable-book/src/compiler-flags/self-profile-events.md", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile-events.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile-events.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile-events.md?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -0,0 +1,74 @@\n+# `self-profile-events`\n+\n+---------------------\n+\n+The `-Zself-profile-events` compiler flag controls what events are recorded by the self-profiler when it is enabled via the `-Zself-profile` flag.\n+\n+This flag takes a comma delimited list of event types to record.\n+\n+For example:\n+\n+```console\n+$ rustc -Zself-profile -Zself-profile-events=default,args\n+```\n+\n+## Event types\n+\n+- `query-provider`\n+  - Traces each query used internally by the compiler.\n+\n+- `generic-activity`\n+  - Traces other parts of the compiler not covered by the query system.\n+\n+- `query-cache-hit`\n+  - Adds tracing information that records when the in-memory query cache is \"hit\" and does not need to re-execute a query which has been cached.\n+  - Disabled by default because this significantly increases the trace file size.\n+\n+- `query-blocked`\n+  - Tracks time that a query tries to run but is blocked waiting on another thread executing the same query to finish executing.\n+  - Query blocking only occurs when the compiler is built with parallel mode support.\n+\n+- `incr-cache-load`\n+  - Tracks time that is spent loading and deserializing query results from the incremental compilation on-disk cache.\n+\n+- `query-keys`\n+  - Adds a serialized representation of each query's query key to the tracing data.\n+  - Disabled by default because this significantly increases the trace file size.\n+\n+- `function-args`\n+  - Adds additional tracing data to some `generic-activity` events.\n+  - Disabled by default for parity with `query-keys`.\n+\n+- `llvm`\n+  - Adds tracing information about LLVM passes and codegeneration.\n+  - Disabled by default because this only works when `-Znew-llvm-pass-manager` is enabled.\n+\n+## Event synonyms\n+\n+- `none`\n+  - Disables all events.\n+  Equivalent to the self-profiler being disabled.\n+\n+- `default`\n+  - The default set of events which stikes a balance between providing detailed tracing data and adding additional overhead to the compilation.\n+\n+- `args`\n+  - Equivalent to `query-keys` and `function-args`.\n+\n+- `all`\n+  - Enables all events.\n+\n+## Examples\n+\n+Enable the profiler and capture the default set of events (both invocations are equivalent):\n+\n+```console\n+$ rustc -Zself-profile\n+$ rustc -Zself-profile -Zself-profile-events=default\n+```\n+\n+Enable the profiler and capture the default events and their arguments:\n+\n+```console\n+$ rustc -Zself-profile -Zself-profile-events=default,args\n+```"}, {"sha": "6de1c774f7cd7d19255cfa60042d838663efca4e", "filename": "src/doc/unstable-book/src/compiler-flags/self-profile.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile.md?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -0,0 +1,47 @@\n+# `self-profile`\n+\n+--------------------\n+\n+The `-Zself-profile` compiler flag enables rustc's internal profiler.\n+When enabled, the compiler will output three binary files in the specified directory (or the current working directory if no directory is specified).\n+These files can be analyzed by using the tools in the [`measureme`] repository.\n+\n+To control the data recorded in the trace files, use the `-Zself-profile-events` flag.\n+\n+For example:\n+\n+First, run a compilation session and provide the `-Zself-profile` flag:\n+\n+```console\n+$ rustc --crate-name foo -Zself-profile`\n+```\n+\n+This will generate three files in the working directory such as:\n+\n+- `foo-1234.events`\n+- `foo-1234.string_data`\n+- `foo-1234.string_index`\n+\n+Where `foo` is the name of the crate and `1234` is the process id of the rustc process.\n+\n+To get a summary of where the compiler is spending its time:\n+\n+```console\n+$ ../measureme/target/release/summarize summarize foo-1234\n+```\n+\n+To generate a flamegraph of the same data:\n+\n+```console\n+$ ../measureme/target/release/inferno foo-1234\n+```\n+\n+To dump the event data in a Chromium-profiler compatible format:\n+\n+```console\n+$ ../measureme/target/release/crox foo-1234\n+```\n+\n+For more information, consult the [`measureme`] documentation.\n+\n+[`measureme`]: https://github.com/rust-lang/measureme.git"}, {"sha": "43f8cfc0c473fcadad0e4b9585ec9b47a60cee80", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -1515,6 +1515,7 @@ fn overlaps<T>(src: *const T, dst: *const T, count: usize) -> bool {\n /// ```\n ///\n /// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n+#[doc(alias = \"memcpy\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[inline]\n pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n@@ -1579,6 +1580,7 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n ///     dst\n /// }\n /// ```\n+#[doc(alias = \"memmove\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[inline]\n pub unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {"}, {"sha": "052603f6e5e60092f641ec6a348f658eea943e3e", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -598,7 +598,7 @@ impl AllocationDefinedness {\n     pub fn all_bytes_undef(&self) -> bool {\n         // The `ranges` are run-length encoded and of alternating definedness.\n         // So if `ranges.len() > 1` then the second block is a range of defined.\n-        self.initial == false && self.ranges.len() == 1\n+        !self.initial && self.ranges.len() == 1\n     }\n }\n "}, {"sha": "0726bf30d3b3485c18c6e3e50e5510606c43d578", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -64,8 +64,7 @@ thread_local! {\n /// calling the same query.\n pub fn with_no_queries<F: FnOnce() -> R, R>(f: F) -> R {\n     NO_QUERIES.with(|no_queries| {\n-        let old = no_queries.get();\n-        no_queries.set(true);\n+        let old = no_queries.replace(true);\n         let result = f();\n         no_queries.set(old);\n         result\n@@ -78,8 +77,7 @@ pub fn with_no_queries<F: FnOnce() -> R, R>(f: F) -> R {\n /// so this variable disables that check.\n pub fn with_forced_impl_filename_line<F: FnOnce() -> R, R>(f: F) -> R {\n     FORCE_IMPL_FILENAME_LINE.with(|force| {\n-        let old = force.get();\n-        force.set(true);\n+        let old = force.replace(true);\n         let result = f();\n         force.set(old);\n         result\n@@ -89,8 +87,7 @@ pub fn with_forced_impl_filename_line<F: FnOnce() -> R, R>(f: F) -> R {\n /// Adds the `crate::` prefix to paths where appropriate.\n pub fn with_crate_prefix<F: FnOnce() -> R, R>(f: F) -> R {\n     SHOULD_PREFIX_WITH_CRATE.with(|flag| {\n-        let old = flag.get();\n-        flag.set(true);\n+        let old = flag.replace(true);\n         let result = f();\n         flag.set(old);\n         result"}, {"sha": "a1b54607b809e02b855482dfb854834ac0160150", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -515,12 +515,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        // For normal codegen, this Miri-specific intrinsic is just a NOP.\n+        // For normal codegen, this Miri-specific intrinsic should never occur.\n         if intrinsic == Some(\"miri_start_panic\") {\n-            let target = destination.as_ref().unwrap().1;\n-            helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n-            helper.funclet_br(self, &mut bx, target);\n-            return;\n+            bug!(\"`miri_start_panic` should never end up in compiled code\");\n         }\n \n         // Emit a panic or a no-op for `panic_if_uninhabited`."}, {"sha": "7b9d93348213120a555931a5139a7c235c393338", "filename": "src/librustc_error_codes/error_codes/E0368.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0368.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0368.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0368.md?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -1,5 +1,7 @@\n-This error indicates that a binary assignment operator like `+=` or `^=` was\n-applied to a type that doesn't support it. For example:\n+A binary assignment operator like `+=` or `^=` was applied to a type that\n+doesn't support it.\n+\n+Erroneous code example:\n \n ```compile_fail,E0368\n let mut x = 12f32; // error: binary operation `<<` cannot be applied to"}, {"sha": "ab0f4b40843c1ce0a31a39df492586f03288dcc3", "filename": "src/librustc_error_codes/error_codes/E0369.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0369.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0369.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0369.md?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -1,4 +1,5 @@\n A binary operation was attempted on a type which doesn't support it.\n+\n Erroneous code example:\n \n ```compile_fail,E0369"}, {"sha": "65f060deb465d2cf14c44910da49546a4b61646b", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -730,8 +730,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     where\n         F: FnOnce(&Self) -> R,\n     {\n-        let flag = self.in_snapshot.get();\n-        self.in_snapshot.set(false);\n+        let flag = self.in_snapshot.replace(false);\n         let result = func(self);\n         self.in_snapshot.set(flag);\n         result\n@@ -740,8 +739,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {\n         debug!(\"start_snapshot()\");\n \n-        let in_snapshot = self.in_snapshot.get();\n-        self.in_snapshot.set(true);\n+        let in_snapshot = self.in_snapshot.replace(true);\n \n         let mut inner = self.inner.borrow_mut();\n         CombinedSnapshot {"}, {"sha": "0eb567da10356f88bf276416074ae4f8da3fcb1d", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -104,7 +104,7 @@ where\n     ) -> Self {\n         let bits_per_block = analysis.bits_per_block(body);\n \n-        let bottom_value_set = if A::BOTTOM_VALUE == true {\n+        let bottom_value_set = if A::BOTTOM_VALUE {\n             BitSet::new_filled(bits_per_block)\n         } else {\n             BitSet::new_empty(bits_per_block)"}, {"sha": "eccdac2fb9987b5dbc5d0f0f994bff909fd5380e", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -821,7 +821,7 @@ where\n         let bits_per_block = denotation.bits_per_block();\n         let num_blocks = body.basic_blocks().len();\n \n-        let on_entry = if D::BOTTOM_VALUE == true {\n+        let on_entry = if D::BOTTOM_VALUE {\n             vec![BitSet::new_filled(bits_per_block); num_blocks]\n         } else {\n             vec![BitSet::new_empty(bits_per_block); num_blocks]"}, {"sha": "5b2e5a9e454eafadad109ca74440cf7eb30d8c79", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -1171,13 +1171,13 @@ impl<'a> Parser<'a> {\n                 let comma_after_doc_seen = self.eat(&token::Comma);\n                 // `seen_comma` is always false, because we are inside doc block\n                 // condition is here to make code more readable\n-                if seen_comma == false && comma_after_doc_seen == true {\n+                if !seen_comma && comma_after_doc_seen {\n                     seen_comma = true;\n                 }\n                 if comma_after_doc_seen || self.token == token::CloseDelim(token::Brace) {\n                     err.emit();\n                 } else {\n-                    if seen_comma == false {\n+                    if !seen_comma {\n                         let sp = self.sess.source_map().next_point(previous_span);\n                         err.span_suggestion(\n                             sp,"}, {"sha": "fa1dc3f450a4b407b5d8b034a0e4809d794a45ef", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -444,7 +444,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 PathSource::Expr(Some(parent)) => {\n                     suggested = path_sep(err, &parent);\n                 }\n-                PathSource::Expr(None) if followed_by_brace == true => {\n+                PathSource::Expr(None) if followed_by_brace => {\n                     if let Some((sp, snippet)) = closing_brace {\n                         err.span_suggestion(\n                             sp,"}, {"sha": "cb6e028ab86ca2581c78dfdb1cf86f57ecae3599", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -495,7 +495,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(hir_id) => hir_id,\n                 None => return false,\n             };\n-            if self.tcx.has_typeck_tables(def_id) == false {\n+            if !self.tcx.has_typeck_tables(def_id) {\n                 return false;\n             }\n             let fn_sig = {\n@@ -512,7 +512,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Some(hir_id) => hir_id,\n                     None => return false,\n                 };\n-                if self.tcx.has_typeck_tables(def_id) == false {\n+                if !self.tcx.has_typeck_tables(def_id) {\n                     return false;\n                 }\n                 match self.tcx.typeck_tables_of(def_id).liberated_fn_sigs().get(hir_id) {"}, {"sha": "56f7b07cfc843f6d96b3c35ecd6816322bcb2afa", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -465,7 +465,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n                 }\n                 _ => true,\n             };\n-            return if is_allowed_tag == false {\n+            return if !is_allowed_tag {\n                 if is_start {\n                     Some(Event::Start(Tag::Paragraph))\n                 } else {\n@@ -671,7 +671,7 @@ impl LangString {\n                 \"\" => {}\n                 \"should_panic\" => {\n                     data.should_panic = true;\n-                    seen_rust_tags = seen_other_tags == false;\n+                    seen_rust_tags = !seen_other_tags;\n                 }\n                 \"no_run\" => {\n                     data.no_run = true;"}, {"sha": "bda220d88063549272442ef26b36da49ed78fee9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -4049,7 +4049,7 @@ fn get_next_url(used_links: &mut FxHashSet<String>, url: String) -> String {\n         return url;\n     }\n     let mut add = 1;\n-    while used_links.insert(format!(\"{}-{}\", url, add)) == false {\n+    while !used_links.insert(format!(\"{}-{}\", url, add)) {\n         add += 1;\n     }\n     format!(\"{}-{}\", url, add)"}, {"sha": "71cff637c12727f0cd5152b4413021190f355cf4", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -340,12 +340,12 @@ pub fn look_for_tests<'tcx>(\n \n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false);\n \n-    if check_missing_code == true && tests.found_tests == 0 {\n+    if check_missing_code && tests.found_tests == 0 {\n         let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n         cx.tcx.struct_span_lint_hir(lint::builtin::MISSING_DOC_CODE_EXAMPLES, hir_id, sp, |lint| {\n             lint.build(\"missing code example in this documentation\").emit()\n         });\n-    } else if check_missing_code == false\n+    } else if !check_missing_code\n         && tests.found_tests > 0\n         && !cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n     {"}, {"sha": "620f9f56a6ae8881ae50d3a674dade1807497adb", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a277943e5e55a4ef169d5cc629de664db5e24e/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=e3a277943e5e55a4ef169d5cc629de664db5e24e", "patch": "@@ -253,9 +253,9 @@ pub fn get_differences(against: &CssPath, other: &CssPath, v: &mut Vec<String>)\n                     break;\n                 }\n             }\n-            if found == false {\n+            if !found {\n                 v.push(format!(\"  Missing \\\"{}\\\" rule\", child.name));\n-            } else if found_working == false {\n+            } else if !found_working {\n                 v.extend(tmp.iter().cloned());\n             }\n         }"}]}