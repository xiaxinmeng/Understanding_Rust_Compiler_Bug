{"sha": "822acdd1703af1714cb084a76c10937713339f6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMmFjZGQxNzAzYWYxNzE0Y2IwODRhNzZjMTA5Mzc3MTMzMzlmNmQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-06T16:29:06Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-06T16:40:05Z"}, "message": "Make binding of fns with bounded type parameters work\n\nInterns non-static dicts to heap-allocated equivalents so that they no\nlonger have stack scope.\n\nCloses #1436", "tree": {"sha": "ba886f43420a5b2d0905887c89794a5116220e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba886f43420a5b2d0905887c89794a5116220e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/822acdd1703af1714cb084a76c10937713339f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/822acdd1703af1714cb084a76c10937713339f6d", "html_url": "https://github.com/rust-lang/rust/commit/822acdd1703af1714cb084a76c10937713339f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/822acdd1703af1714cb084a76c10937713339f6d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d23e2052e0187e57b2fe626e5354a77ced29d0cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23e2052e0187e57b2fe626e5354a77ced29d0cf", "html_url": "https://github.com/rust-lang/rust/commit/d23e2052e0187e57b2fe626e5354a77ced29d0cf"}], "stats": {"total": 87, "additions": 81, "deletions": 6}, "files": [{"sha": "a6bf286a2a83218d4abe5fe40d67c0c07b68c908", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/822acdd1703af1714cb084a76c10937713339f6d/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822acdd1703af1714cb084a76c10937713339f6d/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=822acdd1703af1714cb084a76c10937713339f6d", "patch": "@@ -2,7 +2,7 @@\n import driver::session;\n import middle::trans;\n import middle::trans_common::{T_fn, T_i1, T_i8, T_i32,\n-                              T_int, T_nil,\n+                              T_int, T_nil, T_dict,\n                               T_opaque_vec, T_ptr,\n                               T_size_t, T_void};\n import lib::llvm::type_names;\n@@ -20,6 +20,7 @@ type upcalls =\n      create_shared_type_desc: ValueRef,\n      free_shared_type_desc: ValueRef,\n      get_type_desc: ValueRef,\n+     intern_dict: ValueRef,\n      vec_grow: ValueRef,\n      vec_push: ValueRef,\n      cmp_type: ValueRef,\n@@ -76,6 +77,8 @@ fn declare_upcalls(targ_cfg: @session::config,\n                  size_t, size_t,\n                  T_ptr(T_ptr(tydesc_type)), int_t],\n                 T_ptr(tydesc_type)),\n+          intern_dict:\n+              d(\"intern_dict\", [size_t, T_ptr(T_dict())], T_ptr(T_dict())),\n           vec_grow:\n               dv(\"vec_grow\", [T_ptr(T_ptr(opaque_vec_t)), int_t]),\n           vec_push:"}, {"sha": "4a43b2ead875b3c7286b25e28cb7b348d170507c", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/822acdd1703af1714cb084a76c10937713339f6d/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822acdd1703af1714cb084a76c10937713339f6d/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=822acdd1703af1714cb084a76c10937713339f6d", "patch": "@@ -461,18 +461,24 @@ fn trans_bind_1(cx: @block_ctxt, outgoing_fty: ty::t,\n     let (outgoing_fty_real, lltydescs, param_bounds) = alt f_res.generic {\n       none. { (outgoing_fty, [], @[]) }\n       some(ginfo) {\n-        for bounds in *ginfo.param_bounds {\n+        let tds = [], orig = 0u;\n+        vec::iter2(ginfo.tydescs, *ginfo.param_bounds) {|td, bounds|\n+            tds += [td];\n             for bound in *bounds {\n                 alt bound {\n                   ty::bound_iface(_) {\n-                    fail \"FIXME[impl] binding bounded types not implemented\";\n+                    let dict = trans_impl::get_dict(\n+                        bcx, option::get(ginfo.origins)[orig]);\n+                    tds += [PointerCast(bcx, dict.val, val_ty(td))];\n+                    orig += 1u;\n+                    bcx = dict.bcx;\n                   }\n                   _ {}\n                 }\n             }\n         }\n         lazily_emit_all_generic_info_tydesc_glues(cx, ginfo);\n-        (ginfo.item_type, ginfo.tydescs, ginfo.param_bounds)\n+        (ginfo.item_type, tds, ginfo.param_bounds)\n       }\n     };\n "}, {"sha": "1f3f43953667cd9a4c837a092c94bbd46375119c", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/822acdd1703af1714cb084a76c10937713339f6d/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822acdd1703af1714cb084a76c10937713339f6d/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=822acdd1703af1714cb084a76c10937713339f6d", "patch": "@@ -143,9 +143,10 @@ fn dict_is_static(tcx: ty::ctxt, origin: typeck::dict_origin) -> bool {\n }\n \n fn get_dict(bcx: @block_ctxt, origin: typeck::dict_origin) -> result {\n+    let ccx = bcx_ccx(bcx);\n     alt origin {\n       typeck::dict_static(impl_did, tys, sub_origins) {\n-        if dict_is_static(bcx_tcx(bcx), origin) {\n+        if dict_is_static(ccx.tcx, origin) {\n             ret rslt(bcx, get_static_dict(bcx, origin));\n         }\n         let {bcx, ptrs} = get_dict_ptrs(bcx, origin);\n@@ -155,7 +156,10 @@ fn get_dict(bcx: @block_ctxt, origin: typeck::dict_origin) -> result {\n             Store(bcx, PointerCast(bcx, ptr, pty), GEPi(bcx, dict, [0, i]));\n             i += 1;\n         }\n-        rslt(bcx, PointerCast(bcx, dict, T_ptr(T_dict())))\n+        dict = Call(bcx, ccx.upcalls.intern_dict,\n+                    [C_uint(ccx, vec::len(ptrs)),\n+                     PointerCast(bcx, dict, T_ptr(T_dict()))]);\n+        rslt(bcx, dict)\n       }\n       typeck::dict_param(n_param, n_bound) {\n         rslt(bcx, option::get(bcx.fcx.lltyparams[n_param].dicts)[n_bound])"}, {"sha": "6fcb0fc699e43ce2cdd2e5eb6fe859f5ed617379", "filename": "src/rt/rust_crate_cache.cpp", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/822acdd1703af1714cb084a76c10937713339f6d/src%2Frt%2Frust_crate_cache.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/822acdd1703af1714cb084a76c10937713339f6d/src%2Frt%2Frust_crate_cache.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_cache.cpp?ref=822acdd1703af1714cb084a76c10937713339f6d", "patch": "@@ -45,8 +45,30 @@ rust_crate_cache::get_type_desc(size_t size,\n     return td;\n }\n \n+void**\n+rust_crate_cache::get_dict(size_t n_fields, void** dict) {\n+    rust_hashable_dict *found = NULL;\n+    uintptr_t key = 0;\n+    for (size_t i = 0; i < n_fields; ++i) key ^= (uintptr_t)dict[i];\n+    size_t keysz = sizeof(uintptr_t);\n+    HASH_FIND(hh, this->dicts, &key, keysz, found);\n+    if (found) { printf(\"found!\\n\"); return &(found->fields[0]); }\n+    printf(\"not found\\n\");\n+    size_t dictsz = n_fields * sizeof(void*);\n+    found = (rust_hashable_dict*)\n+        sched->kernel->malloc(keysz + sizeof(UT_hash_handle) + dictsz,\n+                              \"crate cache dict\");\n+    if (!found) return NULL;\n+    found->key = key;\n+    void** retptr = &(found->fields[0]);\n+    memcpy(retptr, dict, dictsz);\n+    HASH_ADD(hh, this->dicts, key, keysz, found);\n+    return retptr;\n+}\n+\n rust_crate_cache::rust_crate_cache(rust_scheduler *sched)\n     : type_descs(NULL),\n+      dicts(NULL),\n       sched(sched),\n       idx(0)\n {\n@@ -62,6 +84,11 @@ rust_crate_cache::flush() {\n         DLOG(sched, mem, \"rust_crate_cache::flush() tydesc %\" PRIxPTR, d);\n         sched->kernel->free(d);\n     }\n+    while (dicts) {\n+        rust_hashable_dict *d = dicts;\n+        HASH_DEL(dicts, d);\n+        sched->kernel->free(d);\n+    }\n }\n \n rust_crate_cache::~rust_crate_cache()"}, {"sha": "75dce82d31813b885b7cbffff230c874956cb6a4", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/822acdd1703af1714cb084a76c10937713339f6d/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/822acdd1703af1714cb084a76c10937713339f6d/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=822acdd1703af1714cb084a76c10937713339f6d", "patch": "@@ -11,17 +11,25 @@\n \n struct rust_scheduler;\n \n+struct rust_hashable_dict {\n+    uintptr_t key;\n+    UT_hash_handle hh;\n+    void* fields[0];\n+};\n+\n class rust_crate_cache {\n public:\n     type_desc *get_type_desc(size_t size,\n                              size_t align,\n                              size_t n_descs,\n                              type_desc const **descs,\n                              uintptr_t n_obj_params);\n+    void** get_dict(size_t n_fields, void** dict);\n \n private:\n \n     type_desc *type_descs;\n+    rust_hashable_dict *dicts;\n \n public:\n "}, {"sha": "6baac699e8f27c06dfed902b79845a034825646f", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/822acdd1703af1714cb084a76c10937713339f6d/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/822acdd1703af1714cb084a76c10937713339f6d/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=822acdd1703af1714cb084a76c10937713339f6d", "patch": "@@ -336,6 +336,32 @@ upcall_get_type_desc(void *curr_crate, // ignored, legacy compat.\n     return args.retval;\n }\n \n+/**********************************************************************\n+ * Called to get a heap-allocated dict. These are interned and kept\n+ * around indefinitely\n+ */\n+\n+struct s_intern_dict_args {\n+    size_t n_fields;\n+    void** dict;\n+    void** res;\n+};\n+\n+extern \"C\" CDECL void\n+upcall_s_intern_dict(s_intern_dict_args *args) {\n+    rust_task *task = rust_scheduler::get_task();\n+    LOG_UPCALL_ENTRY(task);\n+    rust_crate_cache *cache = task->get_crate_cache();\n+    args->res = cache->get_dict(args->n_fields, args->dict);\n+}\n+\n+extern \"C\" CDECL void**\n+upcall_intern_dict(size_t n_fields, void** dict) {\n+    s_intern_dict_args args = {n_fields, dict, 0 };\n+    UPCALL_SWITCH_STACK(&args, upcall_s_intern_dict);\n+    return args.res;\n+}\n+\n /**********************************************************************/\n \n struct s_vec_grow_args {"}, {"sha": "86b41fcb256d880b8ad04d1982dc3cb09f611a00", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/822acdd1703af1714cb084a76c10937713339f6d/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/822acdd1703af1714cb084a76c10937713339f6d/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=822acdd1703af1714cb084a76c10937713339f6d", "patch": "@@ -62,6 +62,7 @@ upcall_free\n upcall_create_shared_type_desc\n upcall_free_shared_type_desc\n upcall_get_type_desc\n+upcall_intern_dict\n upcall_log_type\n upcall_malloc\n upcall_rust_personality"}]}