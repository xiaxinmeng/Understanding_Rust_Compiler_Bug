{"sha": "f42977d9461ed8fb4aa244de99d720235515ceb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0Mjk3N2Q5NDYxZWQ4ZmI0YWEyNDRkZTk5ZDcyMDIzNTUxNWNlYjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-14T21:09:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T16:46:37Z"}, "message": "rustc: Modernize front::eval", "tree": {"sha": "ef7a88b0492aea2cd22461909becae5bbdca7f3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef7a88b0492aea2cd22461909becae5bbdca7f3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f42977d9461ed8fb4aa244de99d720235515ceb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f42977d9461ed8fb4aa244de99d720235515ceb0", "html_url": "https://github.com/rust-lang/rust/commit/f42977d9461ed8fb4aa244de99d720235515ceb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f42977d9461ed8fb4aa244de99d720235515ceb0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ab88cc357be4a03502d5be936ce66708f1ce53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ab88cc357be4a03502d5be936ce66708f1ce53", "html_url": "https://github.com/rust-lang/rust/commit/c7ab88cc357be4a03502d5be936ce66708f1ce53"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "b174de161627d1ab50de3ffce642970f7fdf2c90", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 26, "deletions": 37, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f42977d9461ed8fb4aa244de99d720235515ceb0/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42977d9461ed8fb4aa244de99d720235515ceb0/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=f42977d9461ed8fb4aa244de99d720235515ceb0", "patch": "@@ -38,56 +38,49 @@ type ctx = @rec(parser p,\n                 mutable uint next_ann);\n \n fn mk_env() -> env {\n-    let env e = [];\n-    ret e;\n+    ret [];\n }\n \n fn val_is_bool(val v) -> bool {\n     alt (v) {\n-        case (val_bool(_)) { ret true; }\n-        case (_) { }\n+        case (val_bool(_)) { true }\n+        case (_) { false }\n     }\n-    ret false;\n }\n \n fn val_is_int(val v) -> bool {\n     alt (v) {\n-        case (val_int(_)) { ret true; }\n-        case (_) { }\n+        case (val_int(_)) { true }\n+        case (_) { false }\n     }\n-    ret false;\n }\n \n fn val_is_str(val v) -> bool {\n     alt (v) {\n-        case (val_str(_)) { ret true; }\n-        case (_) { }\n+        case (val_str(_)) { true }\n+        case (_) { false }\n     }\n-    ret false;\n }\n \n fn val_as_bool(val v) -> bool {\n     alt (v) {\n-        case (val_bool(?b)) { ret b; }\n-        case (_) { }\n+        case (val_bool(?b)) { b }\n+        case (_) { fail }\n     }\n-    fail;\n }\n \n fn val_as_int(val v) -> int {\n     alt (v) {\n-        case (val_int(?i)) { ret i; }\n-        case (_) { }\n+        case (val_int(?i)) { i }\n+        case (_) { fail }\n     }\n-    fail;\n }\n \n fn val_as_str(val v) -> str {\n     alt (v) {\n-        case (val_str(?s)) { ret s; }\n-        case (_) { }\n+        case (val_str(?s)) { s }\n+        case (_) { fail }\n     }\n-    fail;\n }\n \n fn lookup(session::session sess, env e, span sp, ident i) -> val {\n@@ -96,20 +89,18 @@ fn lookup(session::session sess, env e, span sp, ident i) -> val {\n             ret pair._1;\n         }\n     }\n-    sess.span_err(sp, \"unknown variable: \" + i);\n-    fail;\n+    sess.span_err(sp, \"unknown variable: \" + i)\n }\n \n fn eval_lit(ctx cx, span sp, @ast::lit lit) -> val {\n     alt (lit.node) {\n-        case (ast::lit_bool(?b)) { ret val_bool(b); }\n-        case (ast::lit_int(?i)) { ret val_int(i); }\n-        case (ast::lit_str(?s,_)) { ret val_str(s); }\n+        case (ast::lit_bool(?b)) { val_bool(b) }\n+        case (ast::lit_int(?i)) { val_int(i) }\n+        case (ast::lit_str(?s,_)) { val_str(s) }\n         case (_) {\n-            cx.sess.span_err(sp, \"evaluating unsupported literal\");\n+            cx.sess.span_err(sp, \"evaluating unsupported literal\")\n         }\n     }\n-    fail;\n }\n \n fn eval_expr(ctx cx, env e, @ast::expr x) -> val {\n@@ -219,17 +210,15 @@ fn eval_expr(ctx cx, env e, @ast::expr x) -> val {\n \n fn val_eq(session::session sess, span sp, val av, val bv) -> bool {\n     if (val_is_bool(av) && val_is_bool(bv)) {\n-        ret val_as_bool(av) == val_as_bool(bv);\n-    }\n-    if (val_is_int(av) && val_is_int(bv)) {\n-        ret val_as_int(av) == val_as_int(bv);\n+        val_as_bool(av) == val_as_bool(bv)\n+    } else if (val_is_int(av) && val_is_int(bv)) {\n+        val_as_int(av) == val_as_int(bv)\n+    } else if (val_is_str(av) && val_is_str(bv)) {\n+        str::eq(val_as_str(av),\n+                val_as_str(bv))\n+    } else {\n+        sess.span_err(sp, \"bad types in comparison\")\n     }\n-    if (val_is_str(av) && val_is_str(bv)) {\n-        ret str::eq(val_as_str(av),\n-                    val_as_str(bv));\n-    }\n-    sess.span_err(sp, \"bad types in comparison\");\n-    fail;\n }\n \n fn eval_crate_directives(ctx cx,"}]}