{"sha": "c4a4d3a031301248f8769960bc1c0eb43cb779ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YTRkM2EwMzEzMDEyNDhmODc2OTk2MGJjMWMwZWI0M2NiNzc5ZWM=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-12-28T22:46:13Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:28Z"}, "message": "parse path ambiguity markers", "tree": {"sha": "5c3e3b6d4427956dbeb7d302ba3e4b78fa94d4c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3e3b6d4427956dbeb7d302ba3e4b78fa94d4c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4a4d3a031301248f8769960bc1c0eb43cb779ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a4d3a031301248f8769960bc1c0eb43cb779ec", "html_url": "https://github.com/rust-lang/rust/commit/c4a4d3a031301248f8769960bc1c0eb43cb779ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4a4d3a031301248f8769960bc1c0eb43cb779ec/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4587b270226a34fb178ca43c60484ca98371a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4587b270226a34fb178ca43c60484ca98371a0", "html_url": "https://github.com/rust-lang/rust/commit/ef4587b270226a34fb178ca43c60484ca98371a0"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "2c2cad1dc401dc9190d2917f25ec60f995a3e19a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c4a4d3a031301248f8769960bc1c0eb43cb779ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a4d3a031301248f8769960bc1c0eb43cb779ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c4a4d3a031301248f8769960bc1c0eb43cb779ec", "patch": "@@ -825,22 +825,44 @@ impl Clean<Attributes> for [ast::Attribute] {\n         if UnstableFeatures::from_environment().is_nightly_build() {\n             let dox = attrs.collapsed_doc_value().unwrap_or_else(String::new);\n             for link in markdown_links(&dox, cx.render_type) {\n-                if !link.starts_with(\"::\") {\n-                    // FIXME (misdreavus): can only support absolute paths because of limitations\n-                    // in Resolver. this may, with a lot of effort, figure out how to resolve paths\n-                    // within scopes, but the one use of `resolve_hir_path` i found in the HIR\n-                    // lowering code itself used an absolute path. we're brushing up against some\n-                    // structural limitations in the compiler already, but this may be a design one\n-                    // as well >_>\n-                    continue;\n-                }\n-\n                 let path = {\n+                    let is_value: bool;\n+                    let path_str = if let Some(prefix) =\n+                        [\"struct\", \"enum\", \"type\", \"trait\", \"union\"].iter()\n+                                                                    .find(|p| link.starts_with(**p)) {\n+                        is_value = false;\n+                        link.trim_left_matches(prefix).trim()\n+                    } else if let Some(prefix) =\n+                        [\"const\", \"static\"].iter()\n+                                           .find(|p| link.starts_with(**p)) {\n+                        is_value = true;\n+                        link.trim_left_matches(prefix).trim()\n+                    } else if link.ends_with(\"()\") {\n+                        is_value = true;\n+                        link.trim_right_matches(\"()\").trim()\n+                    } else if link.ends_with(\"!\") {\n+                        // FIXME (misdreavus): macros are resolved with different machinery\n+                        continue;\n+                    } else {\n+                        is_value = false;\n+                        link.trim()\n+                    };\n+\n+                    if !path_str.starts_with(\"::\") {\n+                        // FIXME (misdreavus): can only support absolute paths because of limitations\n+                        // in Resolver. this may, with a lot of effort, figure out how to resolve paths\n+                        // within scopes, but the one use of `resolve_hir_path` i found in the HIR\n+                        // lowering code itself used an absolute path. we're brushing up against some\n+                        // structural limitations in the compiler already, but this may be a design one\n+                        // as well >_>\n+                        continue;\n+                    }\n+\n                     // This allocation could be avoided if resolve_str_path could take an iterator;\n                     // but it can't because that would break object safety. This can still be\n                     // fixed.\n-                    let components = link.split(\"::\").skip(1).collect::<Vec<_>>();\n-                    cx.resolver.borrow_mut().resolve_str_path(DUMMY_SP, None, &components, false)\n+                    let components = path_str.split(\"::\").skip(1).collect::<Vec<_>>();\n+                    cx.resolver.borrow_mut().resolve_str_path(DUMMY_SP, None, &components, is_value)\n                 };\n \n                 if path.def != Def::Err {"}]}