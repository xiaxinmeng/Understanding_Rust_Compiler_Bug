{"sha": "ac81fff22926d464f7a90f14c4c8f846569e75e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjODFmZmYyMjkyNmQ0NjRmN2E5MGYxNGM0YzhmODQ2NTY5ZTc1ZTA=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2012-10-10T04:28:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-21T00:50:46Z"}, "message": "Remove old fixed-length vector syntax", "tree": {"sha": "cc94e2558cdea7c88c56c4125b56556e1dc40419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc94e2558cdea7c88c56c4125b56556e1dc40419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac81fff22926d464f7a90f14c4c8f846569e75e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac81fff22926d464f7a90f14c4c8f846569e75e0", "html_url": "https://github.com/rust-lang/rust/commit/ac81fff22926d464f7a90f14c4c8f846569e75e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac81fff22926d464f7a90f14c4c8f846569e75e0/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4174688dd48f4967e08c0aecc7a2a90dc28a56da", "url": "https://api.github.com/repos/rust-lang/rust/commits/4174688dd48f4967e08c0aecc7a2a90dc28a56da", "html_url": "https://github.com/rust-lang/rust/commit/4174688dd48f4967e08c0aecc7a2a90dc28a56da"}], "stats": {"total": 286, "additions": 135, "deletions": 151}, "files": [{"sha": "e3bbfbc4129de587c1a7be218a09fa850865eb61", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -156,7 +156,7 @@ struct SipState {\n     mut v1: u64,\n     mut v2: u64,\n     mut v3: u64,\n-    tail: [mut u8]/8, // unprocessed bytes\n+    tail: [mut u8 * 8], // unprocessed bytes\n     mut ntail: uint,  // how many bytes in tail are valid\n }\n \n@@ -359,72 +359,72 @@ impl &SipState : Streaming {\n \n #[test]\n pub fn test_siphash() {\n-    let vecs : [[u8]/8]/64 = [\n-        [ 0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72, ]/_,\n-        [ 0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74, ]/_,\n-        [ 0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d, ]/_,\n-        [ 0x2d, 0x7e, 0xfb, 0xd7, 0x96, 0x66, 0x67, 0x85, ]/_,\n-        [ 0xb7, 0x87, 0x71, 0x27, 0xe0, 0x94, 0x27, 0xcf, ]/_,\n-        [ 0x8d, 0xa6, 0x99, 0xcd, 0x64, 0x55, 0x76, 0x18, ]/_,\n-        [ 0xce, 0xe3, 0xfe, 0x58, 0x6e, 0x46, 0xc9, 0xcb, ]/_,\n-        [ 0x37, 0xd1, 0x01, 0x8b, 0xf5, 0x00, 0x02, 0xab, ]/_,\n-        [ 0x62, 0x24, 0x93, 0x9a, 0x79, 0xf5, 0xf5, 0x93, ]/_,\n-        [ 0xb0, 0xe4, 0xa9, 0x0b, 0xdf, 0x82, 0x00, 0x9e, ]/_,\n-        [ 0xf3, 0xb9, 0xdd, 0x94, 0xc5, 0xbb, 0x5d, 0x7a, ]/_,\n-        [ 0xa7, 0xad, 0x6b, 0x22, 0x46, 0x2f, 0xb3, 0xf4, ]/_,\n-        [ 0xfb, 0xe5, 0x0e, 0x86, 0xbc, 0x8f, 0x1e, 0x75, ]/_,\n-        [ 0x90, 0x3d, 0x84, 0xc0, 0x27, 0x56, 0xea, 0x14, ]/_,\n-        [ 0xee, 0xf2, 0x7a, 0x8e, 0x90, 0xca, 0x23, 0xf7, ]/_,\n-        [ 0xe5, 0x45, 0xbe, 0x49, 0x61, 0xca, 0x29, 0xa1, ]/_,\n-        [ 0xdb, 0x9b, 0xc2, 0x57, 0x7f, 0xcc, 0x2a, 0x3f, ]/_,\n-        [ 0x94, 0x47, 0xbe, 0x2c, 0xf5, 0xe9, 0x9a, 0x69, ]/_,\n-        [ 0x9c, 0xd3, 0x8d, 0x96, 0xf0, 0xb3, 0xc1, 0x4b, ]/_,\n-        [ 0xbd, 0x61, 0x79, 0xa7, 0x1d, 0xc9, 0x6d, 0xbb, ]/_,\n-        [ 0x98, 0xee, 0xa2, 0x1a, 0xf2, 0x5c, 0xd6, 0xbe, ]/_,\n-        [ 0xc7, 0x67, 0x3b, 0x2e, 0xb0, 0xcb, 0xf2, 0xd0, ]/_,\n-        [ 0x88, 0x3e, 0xa3, 0xe3, 0x95, 0x67, 0x53, 0x93, ]/_,\n-        [ 0xc8, 0xce, 0x5c, 0xcd, 0x8c, 0x03, 0x0c, 0xa8, ]/_,\n-        [ 0x94, 0xaf, 0x49, 0xf6, 0xc6, 0x50, 0xad, 0xb8, ]/_,\n-        [ 0xea, 0xb8, 0x85, 0x8a, 0xde, 0x92, 0xe1, 0xbc, ]/_,\n-        [ 0xf3, 0x15, 0xbb, 0x5b, 0xb8, 0x35, 0xd8, 0x17, ]/_,\n-        [ 0xad, 0xcf, 0x6b, 0x07, 0x63, 0x61, 0x2e, 0x2f, ]/_,\n-        [ 0xa5, 0xc9, 0x1d, 0xa7, 0xac, 0xaa, 0x4d, 0xde, ]/_,\n-        [ 0x71, 0x65, 0x95, 0x87, 0x66, 0x50, 0xa2, 0xa6, ]/_,\n-        [ 0x28, 0xef, 0x49, 0x5c, 0x53, 0xa3, 0x87, 0xad, ]/_,\n-        [ 0x42, 0xc3, 0x41, 0xd8, 0xfa, 0x92, 0xd8, 0x32, ]/_,\n-        [ 0xce, 0x7c, 0xf2, 0x72, 0x2f, 0x51, 0x27, 0x71, ]/_,\n-        [ 0xe3, 0x78, 0x59, 0xf9, 0x46, 0x23, 0xf3, 0xa7, ]/_,\n-        [ 0x38, 0x12, 0x05, 0xbb, 0x1a, 0xb0, 0xe0, 0x12, ]/_,\n-        [ 0xae, 0x97, 0xa1, 0x0f, 0xd4, 0x34, 0xe0, 0x15, ]/_,\n-        [ 0xb4, 0xa3, 0x15, 0x08, 0xbe, 0xff, 0x4d, 0x31, ]/_,\n-        [ 0x81, 0x39, 0x62, 0x29, 0xf0, 0x90, 0x79, 0x02, ]/_,\n-        [ 0x4d, 0x0c, 0xf4, 0x9e, 0xe5, 0xd4, 0xdc, 0xca, ]/_,\n-        [ 0x5c, 0x73, 0x33, 0x6a, 0x76, 0xd8, 0xbf, 0x9a, ]/_,\n-        [ 0xd0, 0xa7, 0x04, 0x53, 0x6b, 0xa9, 0x3e, 0x0e, ]/_,\n-        [ 0x92, 0x59, 0x58, 0xfc, 0xd6, 0x42, 0x0c, 0xad, ]/_,\n-        [ 0xa9, 0x15, 0xc2, 0x9b, 0xc8, 0x06, 0x73, 0x18, ]/_,\n-        [ 0x95, 0x2b, 0x79, 0xf3, 0xbc, 0x0a, 0xa6, 0xd4, ]/_,\n-        [ 0xf2, 0x1d, 0xf2, 0xe4, 0x1d, 0x45, 0x35, 0xf9, ]/_,\n-        [ 0x87, 0x57, 0x75, 0x19, 0x04, 0x8f, 0x53, 0xa9, ]/_,\n-        [ 0x10, 0xa5, 0x6c, 0xf5, 0xdf, 0xcd, 0x9a, 0xdb, ]/_,\n-        [ 0xeb, 0x75, 0x09, 0x5c, 0xcd, 0x98, 0x6c, 0xd0, ]/_,\n-        [ 0x51, 0xa9, 0xcb, 0x9e, 0xcb, 0xa3, 0x12, 0xe6, ]/_,\n-        [ 0x96, 0xaf, 0xad, 0xfc, 0x2c, 0xe6, 0x66, 0xc7, ]/_,\n-        [ 0x72, 0xfe, 0x52, 0x97, 0x5a, 0x43, 0x64, 0xee, ]/_,\n-        [ 0x5a, 0x16, 0x45, 0xb2, 0x76, 0xd5, 0x92, 0xa1, ]/_,\n-        [ 0xb2, 0x74, 0xcb, 0x8e, 0xbf, 0x87, 0x87, 0x0a, ]/_,\n-        [ 0x6f, 0x9b, 0xb4, 0x20, 0x3d, 0xe7, 0xb3, 0x81, ]/_,\n-        [ 0xea, 0xec, 0xb2, 0xa3, 0x0b, 0x22, 0xa8, 0x7f, ]/_,\n-        [ 0x99, 0x24, 0xa4, 0x3c, 0xc1, 0x31, 0x57, 0x24, ]/_,\n-        [ 0xbd, 0x83, 0x8d, 0x3a, 0xaf, 0xbf, 0x8d, 0xb7, ]/_,\n-        [ 0x0b, 0x1a, 0x2a, 0x32, 0x65, 0xd5, 0x1a, 0xea, ]/_,\n-        [ 0x13, 0x50, 0x79, 0xa3, 0x23, 0x1c, 0xe6, 0x60, ]/_,\n-        [ 0x93, 0x2b, 0x28, 0x46, 0xe4, 0xd7, 0x06, 0x66, ]/_,\n-        [ 0xe1, 0x91, 0x5f, 0x5c, 0xb1, 0xec, 0xa4, 0x6c, ]/_,\n-        [ 0xf3, 0x25, 0x96, 0x5c, 0xa1, 0x6d, 0x62, 0x9f, ]/_,\n-        [ 0x57, 0x5f, 0xf2, 0x8e, 0x60, 0x38, 0x1b, 0xe5, ]/_,\n-        [ 0x72, 0x45, 0x06, 0xeb, 0x4c, 0x32, 0x8a, 0x95, ]/_\n-    ]/_;\n+    let vecs : [[u8 * 8] * 64] = [\n+        [ 0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72, ],\n+        [ 0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74, ],\n+        [ 0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d, ],\n+        [ 0x2d, 0x7e, 0xfb, 0xd7, 0x96, 0x66, 0x67, 0x85, ],\n+        [ 0xb7, 0x87, 0x71, 0x27, 0xe0, 0x94, 0x27, 0xcf, ],\n+        [ 0x8d, 0xa6, 0x99, 0xcd, 0x64, 0x55, 0x76, 0x18, ],\n+        [ 0xce, 0xe3, 0xfe, 0x58, 0x6e, 0x46, 0xc9, 0xcb, ],\n+        [ 0x37, 0xd1, 0x01, 0x8b, 0xf5, 0x00, 0x02, 0xab, ],\n+        [ 0x62, 0x24, 0x93, 0x9a, 0x79, 0xf5, 0xf5, 0x93, ],\n+        [ 0xb0, 0xe4, 0xa9, 0x0b, 0xdf, 0x82, 0x00, 0x9e, ],\n+        [ 0xf3, 0xb9, 0xdd, 0x94, 0xc5, 0xbb, 0x5d, 0x7a, ],\n+        [ 0xa7, 0xad, 0x6b, 0x22, 0x46, 0x2f, 0xb3, 0xf4, ],\n+        [ 0xfb, 0xe5, 0x0e, 0x86, 0xbc, 0x8f, 0x1e, 0x75, ],\n+        [ 0x90, 0x3d, 0x84, 0xc0, 0x27, 0x56, 0xea, 0x14, ],\n+        [ 0xee, 0xf2, 0x7a, 0x8e, 0x90, 0xca, 0x23, 0xf7, ],\n+        [ 0xe5, 0x45, 0xbe, 0x49, 0x61, 0xca, 0x29, 0xa1, ],\n+        [ 0xdb, 0x9b, 0xc2, 0x57, 0x7f, 0xcc, 0x2a, 0x3f, ],\n+        [ 0x94, 0x47, 0xbe, 0x2c, 0xf5, 0xe9, 0x9a, 0x69, ],\n+        [ 0x9c, 0xd3, 0x8d, 0x96, 0xf0, 0xb3, 0xc1, 0x4b, ],\n+        [ 0xbd, 0x61, 0x79, 0xa7, 0x1d, 0xc9, 0x6d, 0xbb, ],\n+        [ 0x98, 0xee, 0xa2, 0x1a, 0xf2, 0x5c, 0xd6, 0xbe, ],\n+        [ 0xc7, 0x67, 0x3b, 0x2e, 0xb0, 0xcb, 0xf2, 0xd0, ],\n+        [ 0x88, 0x3e, 0xa3, 0xe3, 0x95, 0x67, 0x53, 0x93, ],\n+        [ 0xc8, 0xce, 0x5c, 0xcd, 0x8c, 0x03, 0x0c, 0xa8, ],\n+        [ 0x94, 0xaf, 0x49, 0xf6, 0xc6, 0x50, 0xad, 0xb8, ],\n+        [ 0xea, 0xb8, 0x85, 0x8a, 0xde, 0x92, 0xe1, 0xbc, ],\n+        [ 0xf3, 0x15, 0xbb, 0x5b, 0xb8, 0x35, 0xd8, 0x17, ],\n+        [ 0xad, 0xcf, 0x6b, 0x07, 0x63, 0x61, 0x2e, 0x2f, ],\n+        [ 0xa5, 0xc9, 0x1d, 0xa7, 0xac, 0xaa, 0x4d, 0xde, ],\n+        [ 0x71, 0x65, 0x95, 0x87, 0x66, 0x50, 0xa2, 0xa6, ],\n+        [ 0x28, 0xef, 0x49, 0x5c, 0x53, 0xa3, 0x87, 0xad, ],\n+        [ 0x42, 0xc3, 0x41, 0xd8, 0xfa, 0x92, 0xd8, 0x32, ],\n+        [ 0xce, 0x7c, 0xf2, 0x72, 0x2f, 0x51, 0x27, 0x71, ],\n+        [ 0xe3, 0x78, 0x59, 0xf9, 0x46, 0x23, 0xf3, 0xa7, ],\n+        [ 0x38, 0x12, 0x05, 0xbb, 0x1a, 0xb0, 0xe0, 0x12, ],\n+        [ 0xae, 0x97, 0xa1, 0x0f, 0xd4, 0x34, 0xe0, 0x15, ],\n+        [ 0xb4, 0xa3, 0x15, 0x08, 0xbe, 0xff, 0x4d, 0x31, ],\n+        [ 0x81, 0x39, 0x62, 0x29, 0xf0, 0x90, 0x79, 0x02, ],\n+        [ 0x4d, 0x0c, 0xf4, 0x9e, 0xe5, 0xd4, 0xdc, 0xca, ],\n+        [ 0x5c, 0x73, 0x33, 0x6a, 0x76, 0xd8, 0xbf, 0x9a, ],\n+        [ 0xd0, 0xa7, 0x04, 0x53, 0x6b, 0xa9, 0x3e, 0x0e, ],\n+        [ 0x92, 0x59, 0x58, 0xfc, 0xd6, 0x42, 0x0c, 0xad, ],\n+        [ 0xa9, 0x15, 0xc2, 0x9b, 0xc8, 0x06, 0x73, 0x18, ],\n+        [ 0x95, 0x2b, 0x79, 0xf3, 0xbc, 0x0a, 0xa6, 0xd4, ],\n+        [ 0xf2, 0x1d, 0xf2, 0xe4, 0x1d, 0x45, 0x35, 0xf9, ],\n+        [ 0x87, 0x57, 0x75, 0x19, 0x04, 0x8f, 0x53, 0xa9, ],\n+        [ 0x10, 0xa5, 0x6c, 0xf5, 0xdf, 0xcd, 0x9a, 0xdb, ],\n+        [ 0xeb, 0x75, 0x09, 0x5c, 0xcd, 0x98, 0x6c, 0xd0, ],\n+        [ 0x51, 0xa9, 0xcb, 0x9e, 0xcb, 0xa3, 0x12, 0xe6, ],\n+        [ 0x96, 0xaf, 0xad, 0xfc, 0x2c, 0xe6, 0x66, 0xc7, ],\n+        [ 0x72, 0xfe, 0x52, 0x97, 0x5a, 0x43, 0x64, 0xee, ],\n+        [ 0x5a, 0x16, 0x45, 0xb2, 0x76, 0xd5, 0x92, 0xa1, ],\n+        [ 0xb2, 0x74, 0xcb, 0x8e, 0xbf, 0x87, 0x87, 0x0a, ],\n+        [ 0x6f, 0x9b, 0xb4, 0x20, 0x3d, 0xe7, 0xb3, 0x81, ],\n+        [ 0xea, 0xec, 0xb2, 0xa3, 0x0b, 0x22, 0xa8, 0x7f, ],\n+        [ 0x99, 0x24, 0xa4, 0x3c, 0xc1, 0x31, 0x57, 0x24, ],\n+        [ 0xbd, 0x83, 0x8d, 0x3a, 0xaf, 0xbf, 0x8d, 0xb7, ],\n+        [ 0x0b, 0x1a, 0x2a, 0x32, 0x65, 0xd5, 0x1a, 0xea, ],\n+        [ 0x13, 0x50, 0x79, 0xa3, 0x23, 0x1c, 0xe6, 0x60, ],\n+        [ 0x93, 0x2b, 0x28, 0x46, 0xe4, 0xd7, 0x06, 0x66, ],\n+        [ 0xe1, 0x91, 0x5f, 0x5c, 0xb1, 0xec, 0xa4, 0x6c, ],\n+        [ 0xf3, 0x25, 0x96, 0x5c, 0xa1, 0x6d, 0x62, 0x9f, ],\n+        [ 0x57, 0x5f, 0xf2, 0x8e, 0x60, 0x38, 0x1b, 0xe5, ],\n+        [ 0x72, 0x45, 0x06, 0xeb, 0x4c, 0x32, 0x8a, 0x95, ]\n+    ];\n \n     let k0 = 0x_07_06_05_04_03_02_01_00_u64;\n     let k1 = 0x_0f_0e_0d_0c_0b_0a_09_08_u64;\n@@ -433,7 +433,7 @@ pub fn test_siphash() {\n     let stream_inc = &State(k0,k1);\n     let stream_full = &State(k0,k1);\n \n-    fn to_hex_str(r:  &[u8]/8) -> ~str {\n+    fn to_hex_str(r:  &[u8 * 8]) -> ~str {\n         let mut s = ~\"\";\n         for vec::each(*r) |b| {\n             s += uint::to_str(*b as uint, 16u);"}, {"sha": "3f8de19498f628c0a7ef662b739d4b8867c22ab4", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -667,7 +667,7 @@ pub fn select2<A: Send, Ab: Send, B: Send, Bb: Send>(\n     -> Either<(Option<A>, RecvPacketBuffered<B, Bb>),\n               (RecvPacketBuffered<A, Ab>, Option<B>)>\n {\n-    let i = wait_many([a.header(), b.header()]/_);\n+    let i = wait_many([a.header(), b.header()]);\n \n     match i {\n       0 => Left((try_recv(move a), move b)),\n@@ -693,7 +693,7 @@ pub fn selecti<T: Selectable>(endpoints: &[T]) -> uint {\n /// Returns 0 or 1 depending on which endpoint is ready to receive\n pub fn select2i<A: Selectable, B: Selectable>(a: &A, b: &B) ->\n         Either<(), ()> {\n-    match wait_many([a.header(), b.header()]/_) {\n+    match wait_many([a.header(), b.header()]) {\n       0 => Left(()),\n       1 => Right(()),\n       _ => fail ~\"wait returned unexpected index\""}, {"sha": "3199262ae163f3e48753a4a2275e69c88b8c748f", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -187,19 +187,7 @@ pub pure fn to_str_bytes<U>(neg: bool, num: T, radix: uint,\n     // Enough room to hold any number in any radix.\n     // Worst case: 64-bit number, binary-radix, with\n     // a leading negative sign = 65 bytes.\n-    let buf : [mut u8]/65 =\n-        [mut\n-         0u8,0u8,0u8,0u8,0u8, 0u8,0u8,0u8,0u8,0u8,\n-         0u8,0u8,0u8,0u8,0u8, 0u8,0u8,0u8,0u8,0u8,\n-\n-         0u8,0u8,0u8,0u8,0u8, 0u8,0u8,0u8,0u8,0u8,\n-         0u8,0u8,0u8,0u8,0u8, 0u8,0u8,0u8,0u8,0u8,\n-\n-         0u8,0u8,0u8,0u8,0u8, 0u8,0u8,0u8,0u8,0u8,\n-         0u8,0u8,0u8,0u8,0u8, 0u8,0u8,0u8,0u8,0u8,\n-\n-         0u8,0u8,0u8,0u8,0u8\n-         ]/65;\n+    let buf : [mut u8 * 65] = [mut 0u8, ..65];\n \n     // FIXME (#2649): post-snapshot, you can do this without the raw\n     // pointers and unsafe bits, and the codegen will prove it's all"}, {"sha": "9f40794b28a7915cfef45d2f4abfb9c2859a909f", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -244,7 +244,7 @@ fn test_arena_destructors() {\n         do arena.alloc { @i };\n         // Allocate something with funny size and alignment, to keep\n         // things interesting.\n-        do arena.alloc { [0u8, 1u8, 2u8]/3 };\n+        do arena.alloc { [0u8, 1u8, 2u8] };\n     }\n }\n \n@@ -258,7 +258,7 @@ fn test_arena_destructors_fail() {\n         do arena.alloc { @i };\n         // Allocate something with funny size and alignment, to keep\n         // things interesting.\n-        do arena.alloc { [0u8, 1u8, 2u8]/3 };\n+        do arena.alloc { [0u8, 1u8, 2u8] };\n     }\n     // Now, fail while allocating\n     do arena.alloc::<@int> {"}, {"sha": "010c604dd1ac46e5ef656689c22a6721ffd1af8e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -462,7 +462,7 @@ impl proto : cmp::Eq {\n #[auto_deserialize]\n enum vstore {\n     // FIXME (#3469): Change uint to @expr (actually only constant exprs)\n-    vstore_fixed(Option<uint>),   // [1,2,3,4]/_ or 4\n+    vstore_fixed(Option<uint>),   // [1,2,3,4]\n     vstore_uniq,                  // ~[1,2,3,4]\n     vstore_box,                   // @[1,2,3,4]\n     vstore_slice(@region)         // &[1,2,3,4](foo)?\n@@ -472,7 +472,8 @@ enum vstore {\n #[auto_deserialize]\n enum expr_vstore {\n     // FIXME (#3469): Change uint to @expr (actually only constant exprs)\n-    expr_vstore_fixed(Option<uint>),   // [1,2,3,4]/_ or 4\n+    expr_vstore_fixed(Option<uint>),   // [1,2,3,4]\n+>>>>>>> Remove old fixed-length vector syntax\n     expr_vstore_uniq,                  // ~[1,2,3,4]\n     expr_vstore_box,                   // @[1,2,3,4]\n     expr_vstore_slice                  // &[1,2,3,4]"}, {"sha": "46905b8fe01f2db168bba84d24517741b4d57a22", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -207,12 +207,7 @@ fn Parser(sess: parse_sess, cfg: ast::crate_cfg,\n         token: tok0.tok,\n         span: span0,\n         last_span: span0,\n-        buffer: [mut\n-            {tok: tok0.tok, sp: span0},\n-            {tok: tok0.tok, sp: span0},\n-            {tok: tok0.tok, sp: span0},\n-            {tok: tok0.tok, sp: span0}\n-        ]/4,\n+        buffer: [mut {tok: tok0.tok, sp: span0}, ..4],\n         buffer_start: 0,\n         buffer_end: 0,\n         restriction: UNRESTRICTED,\n@@ -231,7 +226,7 @@ struct Parser {\n     mut token: token::Token,\n     mut span: span,\n     mut last_span: span,\n-    mut buffer: [mut {tok: token::Token, sp: span}]/4,\n+    mut buffer: [mut {tok: token::Token, sp: span} * 4],\n     mut buffer_start: int,\n     mut buffer_end: int,\n     mut restriction: restriction,"}, {"sha": "a6de92ceeb3e1bec306a0572c5289bc51b520f0b", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -233,7 +233,7 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n                     ~\"try running with RUST_LOG=rustc=0,::rt::backtrace \\\n                      to get further details and report the results \\\n                      to github.com/mozilla/rust/issues\"\n-                ]/_.each |note| {\n+                ].each |note| {\n                     diagnostic::emit(None, *note, diagnostic::note)\n                 }\n             }"}, {"sha": "d0296ebd2e5448ceeff398c2d476b4dc0a462d8f", "filename": "src/rustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fconst_eval.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -19,7 +19,7 @@ use ast::*;\n //     target uses\". This _includes_ integer-constants, plus the following\n //     constructors:\n //\n-//        fixed-size vectors and strings: []/_ and \"\"/_\n+//        fixed-size vectors and strings: [] and \"\"/_\n //        vector and string slices: &[] and &\"\"\n //        tuples: (,)\n //        records: {...}"}, {"sha": "554a533e110df48b0950d45af36d4249afb2eb62", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1310,13 +1310,13 @@ fn dummy_substs(tps: ~[ty::t]) -> ty::substs {\n      tps: tps}\n }\n \n-fn struct_field(index: uint) -> [uint]/3 {\n+fn struct_field(index: uint) -> [uint * 3] {\n     //! The GEPi sequence to access a field of a record/struct.\n \n     [0, 0, index]\n }\n \n-fn struct_dtor() -> [uint]/2 {\n+fn struct_dtor() -> [uint * 2] {\n     //! The GEPi sequence to access the dtor of a struct.\n \n     [0, 1]"}, {"sha": "bfc172db3148a79a84ab87a5ffbb8e960795e149", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -140,7 +140,7 @@ fn trans_fixed_vstore(bcx: block,\n {\n     //!\n     //\n-    // [...]/_ allocates a fixed-size array and moves it around \"by value\".\n+    // [...] allocates a fixed-size array and moves it around \"by value\".\n     // In this case, it means that the caller has already given us a location\n     // to store the array of the suitable size, so all we have to do is\n     // generate the content."}, {"sha": "5f9e584fa7b99b8d2bcbe12578ab5981f391f4ae", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1019,7 +1019,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // functions. This is so that we have more information about the types\n         // of arguments when we typecheck the functions. This isn't really the\n         // right way to do this.\n-        for [false, true]/_.each |check_blocks| {\n+        for [false, true].each |check_blocks| {\n             let check_blocks = *check_blocks;\n             debug!(\"check_blocks=%b\", check_blocks);\n "}, {"sha": "e5e9aa0c2579f8194de6a7ff2a0aaa381c363fca", "filename": "src/test/compile-fail/evec-subtyping.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,6 +1,6 @@\n fn wants_box(x: @[uint]) { }\n fn wants_uniq(x: ~[uint]) { }\n-fn wants_three(x: [uint]/3) { }\n+fn wants_three(x: [uint * 3]) { }\n \n fn has_box(x: @[uint]) {\n    wants_box(x);\n@@ -14,13 +14,13 @@ fn has_uniq(x: ~[uint]) {\n    wants_three(x); //~ ERROR [] storage differs: expected 3 but found ~\n }\n \n-fn has_three(x: [uint]/3) {\n+fn has_three(x: [uint * 3]) {\n    wants_box(x); //~ ERROR [] storage differs: expected @ but found 3\n    wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found 3\n    wants_three(x);\n }\n \n-fn has_four(x: [uint]/4) {\n+fn has_four(x: [uint * 4]) {\n    wants_box(x); //~ ERROR [] storage differs: expected @ but found 4\n    wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found 4\n    wants_three(x); //~ ERROR [] storage differs: expected 3 but found 4"}, {"sha": "16e7473fb783bdd693c009cae4171eeabbc4ae5d", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -39,7 +39,7 @@ fn main() {\n     assert length::<int, &[int]>(x) == vec::len(x);\n \n     // Now try it with a type that *needs* to be borrowed\n-    let z = [0,1,2,3]/_;\n+    let z = [0,1,2,3];\n     // Call a method\n     for z.iterate() |y| { assert z[*y] == *y; }\n     // Call a parameterized function"}, {"sha": "22862d7e58f1c40571e09bee07de061b5248cea1", "filename": "src/test/run-pass/borrowck-fixed-length-vecs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let x = [22]/1;\n+    let x = [22];\n     let y = &x[0];\n     assert *y == 22;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a5bcfc93c79b430cfcee45ec6bccdf3a32b7b4cd", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,4 +1,4 @@\n-const x : [int]/4 = [1,2,3,4];\n+const x : [int * 4] = [1,2,3,4];\n const p : int = x[2];\n const y : &[int] = &[1,2,3,4];\n const q : int = y[2];\n@@ -17,4 +17,4 @@ fn main() {\n     assert p == 3;\n     assert q == 3;\n     assert t == 20;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "36327172fabb87b97905526f2a3c13bd035b8e78", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,4 +1,4 @@\n-const x : [int]/4 = [1,2,3,4];\n+const x : [int * 4] = [1,2,3,4];\n const y : &[int] = &[1,2,3,4];\n \n fn main() {\n@@ -7,4 +7,4 @@ fn main() {\n     assert x[1] == 2;\n     assert x[3] == 4;\n     assert x[3] == y[3];\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5ad12510b38fa0e66bf3f98a2f5a833c3788c379", "filename": "src/test/run-pass/evec-internal-boxes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n-    let x : [@int]/5 = [@1,@2,@3,@4,@5]/5;\n-    let _y : [@int]/5 = [@1,@2,@3,@4,@5]/_;\n-    let mut z = [@1,@2,@3,@4,@5]/_;\n+    let x : [@int * 5] = [@1,@2,@3,@4,@5];\n+    let _y : [@int * 5] = [@1,@2,@3,@4,@5];\n+    let mut z = [@1,@2,@3,@4,@5];\n     z = x;\n     assert *z[0] == 1;\n     assert *z[4] == 5;"}, {"sha": "7ee72272e0ba5d0a059a96229708933338715b83", "filename": "src/test/run-pass/evec-internal.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -4,16 +4,16 @@\n // Doesn't work; needs a design decision.\n \n fn main() {\n-    let x : [int]/5 = [1,2,3,4,5]/5;\n-    let _y : [int]/5 = [1,2,3,4,5]/_;\n-    let mut z = [1,2,3,4,5]/_;\n+    let x : [int * 5] = [1,2,3,4,5];\n+    let _y : [int * 5] = [1,2,3,4,5];\n+    let mut z = [1,2,3,4,5];\n     z = x;\n     assert z[0] == 1;\n     assert z[4] == 5;\n \n-    let a : [int]/5 = [1,1,1,1,1]/_;\n-    let b : [int]/5 = [2,2,2,2,2]/_;\n-    let c : [int]/5 = [2,2,2,2,3]/_;\n+    let a : [int * 5] = [1,1,1,1,1];\n+    let b : [int * 5] = [2,2,2,2,2];\n+    let c : [int * 5] = [2,2,2,2,3];\n \n     log(debug, a);\n "}, {"sha": "ca42fc35f2ba06f0973cdba075400fba9ce3faa6", "filename": "src/test/run-pass/fixed_length_copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -3,7 +3,7 @@\n // are implicitly copyable \n #[deny(implicit_copies)]\n fn main() {\n-    let arr = [1,2,3]/3;\n+    let arr = [1,2,3];\n     let arr2 = arr;\n     assert(arr[1] == 2);\n     assert(arr2[2] == 3);"}, {"sha": "d9488c5abd88c814f9aecd5a438e92e1919be422", "filename": "src/test/run-pass/fixed_length_vec_glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let arr = [1,2,3]/3;\n+    let arr = [1,2,3];\n     let struc = {a: 13u8, b: arr, c: 42};\n     let s = sys::log_str(&struc);\n     assert(s == ~\"{ a: 13, b: [ 1, 2, 3 ], c: 42 }\");"}, {"sha": "b5c10fd2c8121391d527919899260e0bb7940238", "filename": "src/test/run-pass/iter-all.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-all.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,9 +1,9 @@\n fn is_even(x: &uint) -> bool { (*x % 2) == 0 }\n \n fn main() {\n-    assert ![1u, 2u]/_.all(is_even);\n-    assert [2u, 4u]/_.all(is_even);\n-    assert []/_.all(is_even);\n+    assert ![1u, 2u].all(is_even);\n+    assert [2u, 4u].all(is_even);\n+    assert [].all(is_even);\n \n     assert !Some(1u).all(is_even);\n     assert Some(2u).all(is_even);"}, {"sha": "f964eda54a5acf2b0046db0e137d360033a10a42", "filename": "src/test/run-pass/iter-any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-any.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,9 +1,9 @@\n fn is_even(x: &uint) -> bool { (*x % 2) == 0 }\n \n fn main() {\n-    assert ![1u, 3u]/_.any(is_even);\n-    assert [1u, 2u]/_.any(is_even);\n-    assert ![]/_.any(is_even);\n+    assert ![1u, 3u].any(is_even);\n+    assert [1u, 2u].any(is_even);\n+    assert ![].any(is_even);\n \n     assert !Some(1).any(is_even);\n     assert Some(2).any(is_even);"}, {"sha": "31fa52175aad30b2653175c60e11a073a1320d20", "filename": "src/test/run-pass/iter-contains.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-contains.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,9 +1,9 @@\n fn main() {\n-    assert []/_.contains(&22u) == false;\n-    assert [1u, 3u]/_.contains(&22u) == false;\n-    assert [22u, 1u, 3u]/_.contains(&22u) == true;\n-    assert [1u, 22u, 3u]/_.contains(&22u) == true;\n-    assert [1u, 3u, 22u]/_.contains(&22u) == true;\n+    assert [].contains(&22u) == false;\n+    assert [1u, 3u].contains(&22u) == false;\n+    assert [22u, 1u, 3u].contains(&22u) == true;\n+    assert [1u, 22u, 3u].contains(&22u) == true;\n+    assert [1u, 3u, 22u].contains(&22u) == true;\n     assert None.contains(&22u) == false;\n     assert Some(1u).contains(&22u) == false;\n     assert Some(22u).contains(&22u) == true;"}, {"sha": "26aa26b4c8db748a9f4639d40b86e82629724d63", "filename": "src/test/run-pass/iter-count.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-count.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n-    assert []/_.count(&22u) == 0u;\n-    assert [1u, 3u]/_.count(&22u) == 0u;\n-    assert [22u, 1u, 3u]/_.count(&22u) == 1u;\n-    assert [22u, 1u, 22u]/_.count(&22u) == 2u;\n+    assert [].count(&22u) == 0u;\n+    assert [1u, 3u].count(&22u) == 0u;\n+    assert [22u, 1u, 3u].count(&22u) == 1u;\n+    assert [22u, 1u, 22u].count(&22u) == 2u;\n     assert None.count(&22u) == 0u;\n     assert Some(1u).count(&22u) == 0u;\n     assert Some(22u).count(&22u) == 1u;"}, {"sha": "4c85e6ca3af43f064a430d8d57877e4898ca19fa", "filename": "src/test/run-pass/iter-eachi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-eachi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-eachi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-eachi.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let mut c = 0u;\n-    for [1u, 2u, 3u, 4u, 5u]/_.eachi |i, v| {\n+    for [1u, 2u, 3u, 4u, 5u].eachi |i, v| {\n         assert (i + 1u) == *v;\n         c += 1u;\n     }"}, {"sha": "000e7c491be1337731a7f7e6dd14ea60f14481d1", "filename": "src/test/run-pass/iter-filter-to-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-filter-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-filter-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-filter-to-vec.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,8 +1,8 @@\n fn is_even(+x: uint) -> bool { (x % 2) == 0 }\n \n fn main() {\n-    assert [1, 3]/_.filter_to_vec(is_even) == ~[];\n-    assert [1, 2, 3]/_.filter_to_vec(is_even) == ~[2];\n+    assert [1, 3].filter_to_vec(is_even) == ~[];\n+    assert [1, 2, 3].filter_to_vec(is_even) == ~[2];\n     assert None.filter_to_vec(is_even) == ~[];\n     assert Some(1).filter_to_vec(is_even) == ~[];\n     assert Some(2).filter_to_vec(is_even) == ~[2];"}, {"sha": "65b517acf1c1a38af52277fa5247ec69ff937a98", "filename": "src/test/run-pass/iter-foldl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-foldl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-foldl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-foldl.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,8 +1,8 @@\n fn add(x: &float, y: &uint) -> float { *x + ((*y) as float) }\n \n fn main() {\n-    assert [1u, 3u]/_.foldl(20f, add) == 24f;\n-    assert []/_.foldl(20f, add) == 20f;\n+    assert [1u, 3u].foldl(20f, add) == 24f;\n+    assert [].foldl(20f, add) == 20f;\n     assert None.foldl(20f, add) == 20f;\n     assert Some(1u).foldl(20f, add) == 21f;\n     assert Some(2u).foldl(20f, add) == 22f;"}, {"sha": "208fc5d127edfd86178c72547c6324bbc9a8cf9c", "filename": "src/test/run-pass/iter-map-to-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-map-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-map-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-map-to-vec.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,8 +1,8 @@\n fn inc(+x: uint) -> uint { x + 1 }\n \n fn main() {\n-    assert [1, 3]/_.map_to_vec(inc) == ~[2, 4];\n-    assert [1, 2, 3]/_.map_to_vec(inc) == ~[2, 3, 4];\n+    assert [1, 3].map_to_vec(inc) == ~[2, 4];\n+    assert [1, 2, 3].map_to_vec(inc) == ~[2, 3, 4];\n     assert None.map_to_vec(inc) == ~[];\n     assert Some(1).map_to_vec(inc) == ~[2];\n     assert Some(2).map_to_vec(inc) == ~[3];"}, {"sha": "60001c8f7e522c5571880928fd1ee18086c0a639", "filename": "src/test/run-pass/iter-min-max.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-min-max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-min-max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-min-max.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,11 +1,11 @@\n fn is_even(&&x: uint) -> bool { (x % 2u) == 0u }\n \n fn main() {\n-    assert [1u, 3u]/_.min() == 1u;\n-    assert [3u, 1u]/_.min() == 1u;\n+    assert [1u, 3u].min() == 1u;\n+    assert [3u, 1u].min() == 1u;\n     assert Some(1u).min() == 1u;\n \n-    assert [1u, 3u]/_.max() == 3u;\n-    assert [3u, 1u]/_.max() == 3u;\n+    assert [1u, 3u].max() == 3u;\n+    assert [3u, 1u].max() == 3u;\n     assert Some(3u).max() == 3u;\n }"}, {"sha": "358f484464d5d52df0a7b2b040b30de21b2e9692", "filename": "src/test/run-pass/iter-to-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fiter-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-to-vec.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    assert [1u, 3u]/_.to_vec() == ~[1u, 3u];\n+    assert [1u, 3u].to_vec() == ~[1u, 3u];\n     let e: ~[uint] = ~[];\n     assert e.to_vec() == ~[];\n     assert None::<uint>.to_vec() == ~[];"}, {"sha": "853aba53eda471e7f42f53685a95be738c2b1bbc", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -56,7 +56,7 @@ macro_rules! select (\n               -> $next:ident $e:expr),+\n         } )+\n     } => {\n-        let index = pipes::selecti([$(($port).header()),+]/_);\n+        let index = pipes::selecti([$(($port).header()),+]);\n         select_if!(index, 0, $( $port => [\n             $($message$(($($x),+))dont_type_this* -> $next $e),+\n         ], )+)"}, {"sha": "2526540bde1bbf60648f0d581ad0ebd676e3495b", "filename": "src/test/run-pass/regions-borrow-evec-fixed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-fixed.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -5,6 +5,6 @@ fn foo(x: &[int]) -> int {\n }\n \n fn main() {\n-    let p = [1,2,3,4,5]/_;\n+    let p = [1,2,3,4,5];\n     assert foo(p) == 1;\n }"}, {"sha": "271ed99057fc2282fc31efb1456f1a20ae844471", "filename": "src/test/run-pass/select-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81fff22926d464f7a90f14c4c8f846569e75e0/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fselect-macro.rs?ref=ac81fff22926d464f7a90f14c4c8f846569e75e0", "patch": "@@ -52,7 +52,7 @@ macro_rules! select (\n               -> $next:ident $e:expr),+\n         } )+\n     } => {\n-        let index = pipes::selecti([$(($port).header()),+]/_);\n+        let index = pipes::selecti([$(($port).header()),+]);\n         select_if!(index, 0 $(, $port => [\n             $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { move $e }),+\n         ])+)"}]}