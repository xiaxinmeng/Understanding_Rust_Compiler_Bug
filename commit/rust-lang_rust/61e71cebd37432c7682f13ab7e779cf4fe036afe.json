{"sha": "61e71cebd37432c7682f13ab7e779cf4fe036afe", "node_id": "C_kwDOAAsO6NoAKDYxZTcxY2ViZDM3NDMyYzc2ODJmMTNhYjdlNzc5Y2Y0ZmUwMzZhZmU", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-09-26T22:06:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-04T13:32:10Z"}, "message": "Use VisitProvenance to factor allocation visiting better", "tree": {"sha": "33583f8285582a7f278f9ee6bce58e5d4d2b0dc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33583f8285582a7f278f9ee6bce58e5d4d2b0dc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61e71cebd37432c7682f13ab7e779cf4fe036afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61e71cebd37432c7682f13ab7e779cf4fe036afe", "html_url": "https://github.com/rust-lang/rust/commit/61e71cebd37432c7682f13ab7e779cf4fe036afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61e71cebd37432c7682f13ab7e779cf4fe036afe/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7153b5505992d94745969f75f6ced9b61063ac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7153b5505992d94745969f75f6ced9b61063ac2", "html_url": "https://github.com/rust-lang/rust/commit/a7153b5505992d94745969f75f6ced9b61063ac2"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "becd61f4fea66e12175b0d7ea8e0856be8dff7df", "filename": "src/tools/miri/src/concurrency/weak_memory.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61e71cebd37432c7682f13ab7e779cf4fe036afe/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e71cebd37432c7682f13ab7e779cf4fe036afe/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs?ref=61e71cebd37432c7682f13ab7e779cf4fe036afe", "patch": "@@ -108,15 +108,19 @@ pub struct StoreBufferAlloc {\n     store_buffers: RefCell<RangeObjectMap<StoreBuffer>>,\n }\n \n-impl StoreBufferAlloc {\n-    pub fn iter(&self, mut visitor: impl FnMut(&Scalar<Provenance>)) {\n+impl VisitProvenance for StoreBufferAlloc {\n+    fn visit_provenance(&self, visitor: &mut impl FnMut(SbTag)) {\n         for val in self\n             .store_buffers\n             .borrow()\n             .iter()\n             .flat_map(|buf| buf.buffer.iter().map(|element| &element.val))\n         {\n-            visitor(val)\n+            if let Scalar::Ptr(ptr, _) = val {\n+                if let Provenance::Concrete { sb, .. } = ptr.provenance {\n+                    visitor(sb);\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "e60e1f15b5f89fefdf6cf834d8ece21901ff71cb", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e71cebd37432c7682f13ab7e779cf4fe036afe/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e71cebd37432c7682f13ab7e779cf4fe036afe/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=61e71cebd37432c7682f13ab7e779cf4fe036afe", "patch": "@@ -112,7 +112,7 @@ pub use crate::range_map::RangeMap;\n pub use crate::stacked_borrows::{\n     CallId, EvalContextExt as StackedBorEvalContextExt, Item, Permission, SbTag, Stack, Stacks,\n };\n-pub use crate::tag_gc::{EvalContextExt as _, VisitMachineValues};\n+pub use crate::tag_gc::{EvalContextExt as _, VisitMachineValues, VisitProvenance};\n \n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be\n /// set per default, for maximal validation power."}, {"sha": "ab90e35844997bb50004c2743206a28543711b22", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61e71cebd37432c7682f13ab7e779cf4fe036afe/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e71cebd37432c7682f13ab7e779cf4fe036afe/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=61e71cebd37432c7682f13ab7e779cf4fe036afe", "patch": "@@ -79,7 +79,7 @@ pub struct Stacks {\n     /// Stores past operations on this allocation\n     history: AllocHistory,\n     /// The set of tags that have been exposed inside this allocation.\n-    pub exposed_tags: FxHashSet<SbTag>,\n+    exposed_tags: FxHashSet<SbTag>,\n     /// Whether this memory has been modified since the last time the tag GC ran\n     modified_since_last_gc: bool,\n }\n@@ -513,6 +513,14 @@ impl Stacks {\n     }\n }\n \n+impl VisitProvenance for Stacks {\n+    fn visit_provenance(&self, visit: &mut impl FnMut(SbTag)) {\n+        for tag in self.exposed_tags.iter().copied() {\n+            visit(tag);\n+        }\n+    }\n+}\n+\n /// Map per-stack operations to higher-level per-location-range operations.\n impl<'tcx> Stacks {\n     /// Creates a new stack with an initial tag. For diagnostic purposes, we also need to know"}, {"sha": "0a8d5d00cfb63e747287de2fbfd7223249d7480e", "filename": "src/tools/miri/src/tag_gc.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/61e71cebd37432c7682f13ab7e779cf4fe036afe/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e71cebd37432c7682f13ab7e779cf4fe036afe/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs?ref=61e71cebd37432c7682f13ab7e779cf4fe036afe", "patch": "@@ -6,6 +6,10 @@ pub trait VisitMachineValues {\n     fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>));\n }\n \n+pub trait VisitProvenance {\n+    fn visit_provenance(&self, visit: &mut impl FnMut(SbTag));\n+}\n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n     /// Generic GC helper to visit everything that can store a value. The `acc` offers some chance to\n@@ -46,6 +50,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n             }\n         };\n \n+        let visit_provenance = |tags: &mut FxHashSet<SbTag>, tag: SbTag| {\n+            tags.insert(tag);\n+        };\n+\n         this.visit_all_machine_values(\n             &mut tags,\n             |tags, op| {\n@@ -71,21 +79,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n                         tags.insert(*sb);\n                     }\n                 }\n-                let stacks = alloc\n-                    .extra\n-                    .stacked_borrows\n-                    .as_ref()\n-                    .expect(\"we should not even enter the GC if Stacked Borrows is disabled\");\n-                tags.extend(&stacks.borrow().exposed_tags);\n+\n+                let stacks =\n+                    alloc.extra.stacked_borrows.as_ref().expect(\n+                        \"we should not even enter the tag GC if Stacked Borrows is disabled\",\n+                    );\n+                stacks.borrow().visit_provenance(&mut |tag| visit_provenance(tags, tag));\n \n                 if let Some(store_buffers) = alloc.extra.weak_memory.as_ref() {\n-                    store_buffers.iter(|val| {\n-                        if let Scalar::Ptr(ptr, _) = val {\n-                            if let Provenance::Concrete { sb, .. } = ptr.provenance {\n-                                tags.insert(sb);\n-                            }\n-                        }\n-                    });\n+                    store_buffers.visit_provenance(&mut |tag| visit_provenance(tags, tag));\n                 }\n             },\n         );"}]}