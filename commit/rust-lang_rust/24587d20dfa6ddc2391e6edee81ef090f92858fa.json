{"sha": "24587d20dfa6ddc2391e6edee81ef090f92858fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NTg3ZDIwZGZhNmRkYzIzOTFlNmVkZWU4MWVmMDkwZjkyODU4ZmE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-12T21:15:12Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-18T18:25:12Z"}, "message": "Pre intern the `Self` parameter type\n\nUse this to simplify the object safety code a bit.", "tree": {"sha": "49b7603d91d3e0640256fffea68a81b6d82ea290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49b7603d91d3e0640256fffea68a81b6d82ea290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24587d20dfa6ddc2391e6edee81ef090f92858fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24587d20dfa6ddc2391e6edee81ef090f92858fa", "html_url": "https://github.com/rust-lang/rust/commit/24587d20dfa6ddc2391e6edee81ef090f92858fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24587d20dfa6ddc2391e6edee81ef090f92858fa/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "165e460c923117f88832d9b4baa7e222e46a9a05", "url": "https://api.github.com/repos/rust-lang/rust/commits/165e460c923117f88832d9b4baa7e222e46a9a05", "html_url": "https://github.com/rust-lang/rust/commit/165e460c923117f88832d9b4baa7e222e46a9a05"}], "stats": {"total": 82, "additions": 35, "deletions": 47}, "files": [{"sha": "7ea7bf0257cf7d56344833ef458d638c51dbeea7", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 21, "deletions": 34, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -92,9 +92,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                                             -> Vec<ObjectSafetyViolation>\n     {\n         debug_assert!(self.generics_of(trait_def_id).has_self);\n-        let self_ty = self.mk_self_type();\n         let violations = traits::supertrait_def_ids(self, trait_def_id)\n-            .filter(|&def_id| self.predicates_reference_self(def_id, self_ty, true))\n+            .filter(|&def_id| self.predicates_reference_self(def_id, true))\n             .map(|_| ObjectSafetyViolation::SupertraitSelf)\n             .collect();\n \n@@ -109,11 +108,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                                     -> Vec<ObjectSafetyViolation>\n     {\n         debug_assert!(self.generics_of(trait_def_id).has_self);\n-        let self_ty = self.mk_self_type();\n         debug!(\"object_safety_violations: {:?}\", trait_def_id);\n \n         traits::supertrait_def_ids(self, trait_def_id)\n-            .flat_map(|def_id| self.object_safety_violations_for_trait(def_id, self_ty))\n+            .flat_map(|def_id| self.object_safety_violations_for_trait(def_id))\n             .collect()\n     }\n \n@@ -123,29 +121,24 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// otherwise ensure that they cannot be used when `Self=Trait`.\n     pub fn is_vtable_safe_method(self, trait_def_id: DefId, method: &ty::AssocItem) -> bool {\n         debug_assert!(self.generics_of(trait_def_id).has_self);\n-        let self_ty = self.mk_self_type();\n         debug!(\"is_vtable_safe_method({:?}, {:?})\", trait_def_id, method);\n         // Any method that has a `Self : Sized` requisite can't be called.\n-        if self.generics_require_sized_self(method.def_id, self_ty) {\n+        if self.generics_require_sized_self(method.def_id) {\n             return false;\n         }\n \n-        match self.virtual_call_violation_for_method(trait_def_id, self_ty, method) {\n+        match self.virtual_call_violation_for_method(trait_def_id, method) {\n             None | Some(MethodViolationCode::WhereClauseReferencesSelf(_)) => true,\n             Some(_) => false,\n         }\n     }\n \n-    fn object_safety_violations_for_trait(\n-        self,\n-        trait_def_id: DefId,\n-        self_ty: Ty<'tcx>,\n-    ) -> Vec<ObjectSafetyViolation> {\n+    fn object_safety_violations_for_trait(self, trait_def_id: DefId) -> Vec<ObjectSafetyViolation> {\n         // Check methods for violations.\n         let mut violations: Vec<_> = self.associated_items(trait_def_id)\n             .filter(|item| item.kind == ty::AssocKind::Method)\n             .filter_map(|item|\n-                self.object_safety_violation_for_method(trait_def_id, self_ty, &item)\n+                self.object_safety_violation_for_method(trait_def_id, &item)\n                     .map(|code| ObjectSafetyViolation::Method(item.ident.name, code))\n             ).filter(|violation| {\n                 if let ObjectSafetyViolation::Method(_,\n@@ -167,10 +160,10 @@ impl<'tcx> TyCtxt<'tcx> {\n             }).collect();\n \n         // Check the trait itself.\n-        if self.trait_has_sized_self(trait_def_id, self_ty) {\n+        if self.trait_has_sized_self(trait_def_id) {\n             violations.push(ObjectSafetyViolation::SizedSelf);\n         }\n-        if self.predicates_reference_self(trait_def_id, self_ty, false) {\n+        if self.predicates_reference_self(trait_def_id, false) {\n             violations.push(ObjectSafetyViolation::SupertraitSelf);\n         }\n \n@@ -188,7 +181,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn predicates_reference_self(\n         self,\n         trait_def_id: DefId,\n-        self_ty: Ty<'tcx>,\n         supertraits_only: bool,\n     ) -> bool {\n         let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(self, trait_def_id));\n@@ -197,6 +189,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         } else {\n             self.predicates_of(trait_def_id)\n         };\n+        let self_ty = self.types.self_param;\n         let has_self_ty = |t: Ty<'tcx>| t.walk().any(|t| t == self_ty);\n         predicates\n             .predicates\n@@ -241,11 +234,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             })\n     }\n \n-    fn trait_has_sized_self(self, trait_def_id: DefId, self_ty: Ty<'tcx>) -> bool {\n-        self.generics_require_sized_self(trait_def_id, self_ty)\n+    fn trait_has_sized_self(self, trait_def_id: DefId) -> bool {\n+        self.generics_require_sized_self(trait_def_id)\n     }\n \n-    fn generics_require_sized_self(self, def_id: DefId, self_ty: Ty<'tcx>) -> bool {\n+    fn generics_require_sized_self(self, def_id: DefId) -> bool {\n         let sized_def_id = match self.lang_items().sized_trait() {\n             Some(def_id) => def_id,\n             None => { return false; /* No Sized trait, can't require it! */ }\n@@ -258,7 +251,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .any(|predicate| match predicate {\n                 ty::Predicate::Trait(ref trait_pred) => {\n                     trait_pred.def_id() == sized_def_id\n-                        && trait_pred.skip_binder().self_ty() == self_ty\n+                        && trait_pred.skip_binder().self_ty().is_param(0)\n                 }\n                 ty::Predicate::Projection(..) |\n                 ty::Predicate::Subtype(..) |\n@@ -278,17 +271,16 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn object_safety_violation_for_method(\n         self,\n         trait_def_id: DefId,\n-        self_ty: Ty<'tcx>,\n         method: &ty::AssocItem,\n     ) -> Option<MethodViolationCode> {\n         debug!(\"object_safety_violation_for_method({:?}, {:?})\", trait_def_id, method);\n         // Any method that has a `Self : Sized` requisite is otherwise\n         // exempt from the regulations.\n-        if self.generics_require_sized_self(method.def_id, self_ty) {\n+        if self.generics_require_sized_self(method.def_id) {\n             return None;\n         }\n \n-        self.virtual_call_violation_for_method(trait_def_id, self_ty, method)\n+        self.virtual_call_violation_for_method(trait_def_id, method)\n     }\n \n     /// Returns `Some(_)` if this method cannot be called on a trait\n@@ -298,7 +290,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn virtual_call_violation_for_method(\n         self,\n         trait_def_id: DefId,\n-        self_ty: Ty<'tcx>,\n         method: &ty::AssocItem,\n     ) -> Option<MethodViolationCode> {\n         // The method's first parameter must be named `self`\n@@ -309,15 +300,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         let sig = self.fn_sig(method.def_id);\n \n         for input_ty in &sig.skip_binder().inputs()[1..] {\n-            if self.contains_illegal_self_type_reference(trait_def_id, self_ty, input_ty) {\n+            if self.contains_illegal_self_type_reference(trait_def_id, input_ty) {\n                 return Some(MethodViolationCode::ReferencesSelf);\n             }\n         }\n-        if self.contains_illegal_self_type_reference(\n-            trait_def_id,\n-            self_ty,\n-            sig.output().skip_binder(),\n-        ) {\n+        if self.contains_illegal_self_type_reference(trait_def_id, sig.output().skip_binder()) {\n             return Some(MethodViolationCode::ReferencesSelf);\n         }\n \n@@ -336,7 +323,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 // Do a shallow visit so that `contains_illegal_self_type_reference`\n                 // may apply it's custom visiting.\n                 .visit_tys_shallow(|t| {\n-                    self.contains_illegal_self_type_reference(trait_def_id, self_ty, t)\n+                    self.contains_illegal_self_type_reference(trait_def_id, t)\n                 }) {\n             let span = self.def_span(method.def_id);\n             return Some(MethodViolationCode::WhereClauseReferencesSelf(span));\n@@ -351,7 +338,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // However, this is already considered object-safe. We allow it as a special case here.\n         // FIXME(mikeyhew) get rid of this `if` statement once `receiver_is_dispatchable` allows\n         // `Receiver: Unsize<Receiver[Self => dyn Trait]>`\n-        if receiver_ty != self_ty {\n+        if receiver_ty != self.types.self_param {\n             if !self.receiver_is_dispatchable(method, receiver_ty) {\n                 return Some(MethodViolationCode::UndispatchableReceiver);\n             } else {\n@@ -572,7 +559,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             // Self: Unsize<U>\n             let unsize_predicate = ty::TraitRef {\n                 def_id: unsize_did,\n-                substs: self.mk_substs_trait(self.mk_self_type(), &[unsized_self_ty.into()]),\n+                substs: self.mk_substs_trait(self.types.self_param, &[unsized_self_ty.into()]),\n             }.to_predicate();\n \n             // U: Trait<Arg1, ..., ArgN>\n@@ -628,7 +615,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn contains_illegal_self_type_reference(\n         self,\n         trait_def_id: DefId,\n-        self_ty: Ty<'tcx>,\n         ty: Ty<'tcx>,\n      ) -> bool {\n         // This is somewhat subtle. In general, we want to forbid\n@@ -672,6 +658,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let mut supertraits: Option<Vec<ty::PolyTraitRef<'tcx>>> = None;\n         let mut error = false;\n+        let self_ty = self.types.self_param;\n         ty.maybe_walk(|ty| {\n             match ty.sty {\n                 ty::Param(_) => {"}, {"sha": "d7c27afe199e413d0df33ba0688bf4786b13a160", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -173,6 +173,7 @@ pub struct CommonTypes<'tcx> {\n     pub f32: Ty<'tcx>,\n     pub f64: Ty<'tcx>,\n     pub never: Ty<'tcx>,\n+    pub self_param: Ty<'tcx>,\n     pub err: Ty<'tcx>,\n \n     /// Dummy type used for the `Self` of a `TraitRef` created for converting\n@@ -915,6 +916,10 @@ impl<'tcx> CommonTypes<'tcx> {\n             u128: mk(Uint(ast::UintTy::U128)),\n             f32: mk(Float(ast::FloatTy::F32)),\n             f64: mk(Float(ast::FloatTy::F64)),\n+            self_param: mk(ty::Param(ty::ParamTy {\n+                index: 0,\n+                name: kw::SelfUpper.as_interned_str(),\n+            })),\n \n             trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),\n         }\n@@ -2566,10 +2571,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    #[inline]\n-    pub fn mk_self_type(self) -> Ty<'tcx> {\n-        self.mk_ty_param(0, kw::SelfUpper.as_interned_str())\n-    }\n \n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> Kind<'tcx> {\n         match param.kind {"}, {"sha": "d4df0f82eea7812583d839caa7601dcf94675634", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -710,7 +710,7 @@ fn build_call_shim<'tcx>(\n         Adjustment::DerefMove => {\n             // fn(Self, ...) -> fn(*mut Self, ...)\n             let arg_ty = local_decls[rcvr_arg].ty;\n-            debug_assert!(tcx.generics_of(def_id).has_self && arg_ty == tcx.mk_self_type());\n+            debug_assert!(tcx.generics_of(def_id).has_self && arg_ty == tcx.types.self_param);\n             local_decls[rcvr_arg].ty = tcx.mk_mut_ptr(arg_ty);\n \n             Operand::Move(rcvr_l.deref())"}, {"sha": "9e52eae88ef45fbdf411a0ad5794b59dad58f42e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -636,7 +636,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let default_needs_object_self = |param: &ty::GenericParamDef| {\n             if let GenericParamDefKind::Type { has_default, .. } = param.kind {\n                 if is_object && has_default && has_self {\n-                    let self_param = tcx.mk_self_type();\n+                    let self_param = tcx.types.self_param;\n                     if tcx.at(span).type_of(param.def_id).walk().any(|ty| ty == self_param) {\n                         // There is no suitable inference default for a type parameter\n                         // that references self, in an object type.\n@@ -2031,7 +2031,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // `Self` in trait or type alias.\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(&path.segments);\n-                tcx.mk_self_type()\n+                tcx.types.self_param\n             }\n             Res::SelfTy(_, Some(def_id)) => {\n                 // `Self` in impl (we know the concrete type)."}, {"sha": "8e187b7e05b51ab0e10a0b7729be4ce1b947cd57", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -518,7 +518,7 @@ fn compare_self_type<'tcx>(\n     let self_string = |method: &ty::AssocItem| {\n         let untransformed_self_ty = match method.container {\n             ty::ImplContainer(_) => impl_trait_ref.self_ty(),\n-            ty::TraitContainer(_) => tcx.mk_self_type()\n+            ty::TraitContainer(_) => tcx.types.self_param\n         };\n         let self_arg_ty = *tcx.fn_sig(method.def_id).input(0).skip_binder();\n         let param_env = ty::ParamEnv::reveal_all();"}, {"sha": "c02b8c4bfb94d483098fecd07314335e3ef67b3b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -191,7 +191,7 @@ fn check_associated_item(\n         let item = fcx.tcx.associated_item(fcx.tcx.hir().local_def_id(item_id));\n \n         let (mut implied_bounds, self_ty) = match item.container {\n-            ty::TraitContainer(_) => (vec![], fcx.tcx.mk_self_type()),\n+            ty::TraitContainer(_) => (vec![], fcx.tcx.types.self_param),\n             ty::ImplContainer(def_id) => (fcx.impl_implied_bounds(def_id, span),\n                                           fcx.tcx.type_of(def_id))\n         };"}, {"sha": "214e2a4585b923f6387f9dfb0540e95aa12b0a2d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -713,7 +713,7 @@ fn super_predicates_of(\n     let icx = ItemCtxt::new(tcx, trait_def_id);\n \n     // Convert the bounds that follow the colon, e.g., `Bar + Zed` in `trait Foo: Bar + Zed`.\n-    let self_param_ty = tcx.mk_self_type();\n+    let self_param_ty = tcx.types.self_param;\n     let superbounds1 = AstConv::compute_bounds(&icx, self_param_ty, bounds, SizedByDefault::No,\n         item.span);\n "}, {"sha": "644d723ded5d96e60a3369ea7fb4d6aff0ac114a", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -211,7 +211,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                         substs,\n                         required_predicates,\n                         explicit_map,\n-                        Some(tcx.mk_self_type()),\n+                        Some(tcx.types.self_param),\n                     );\n                 }\n             }"}, {"sha": "531d6f26641143217edcfacc1c7819c392e7afee", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -2303,7 +2303,7 @@ impl Clean<Item> for ty::AssocItem {\n                         ty::ImplContainer(def_id) => {\n                             cx.tcx.type_of(def_id)\n                         }\n-                        ty::TraitContainer(_) => cx.tcx.mk_self_type()\n+                        ty::TraitContainer(_) => cx.tcx.types.self_param,\n                     };\n                     let self_arg_ty = *sig.input(0).skip_binder();\n                     if self_arg_ty == self_ty {"}, {"sha": "3801c42307fc6f00099bfb01217c258dfa809dda", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24587d20dfa6ddc2391e6edee81ef090f92858fa/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=24587d20dfa6ddc2391e6edee81ef090f92858fa", "patch": "@@ -150,7 +150,7 @@ fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId,\n     }\n     let predicates = cx.tcx.super_predicates_of(child);\n     debug_assert!(cx.tcx.generics_of(child).has_self);\n-    let self_ty = cx.tcx.mk_self_type();\n+    let self_ty = cx.tcx.types.self_param;\n     predicates.predicates.iter().filter_map(|(pred, _)| {\n         if let ty::Predicate::Trait(ref pred) = *pred {\n             if pred.skip_binder().trait_ref.self_ty() == self_ty {"}]}