{"sha": "d7a5390a67b114b4417558d71df798c9602f92a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTUzOTBhNjdiMTE0YjQ0MTc1NThkNzFkZjc5OGM5NjAyZjkyYTc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-19T20:16:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-19T20:16:12Z"}, "message": "Rollup merge of #41870 - excaliburHisSheath:iss29367-windows-docs, r=frewsxcv\n\nImprove docs in os::windows::ffi and os::windows::fs\n\nPart of #29367\n\nThis PR makes changes to the documentation in `os::windows::ffi` and `os::windows::fs` with the goal of fleshing them out and bringing them in line with Rust's quality standards.\n\nr? @steveklabnik", "tree": {"sha": "a1bbfe38a433bb8dd11167b760a10e1379c54102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1bbfe38a433bb8dd11167b760a10e1379c54102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a5390a67b114b4417558d71df798c9602f92a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a5390a67b114b4417558d71df798c9602f92a7", "html_url": "https://github.com/rust-lang/rust/commit/d7a5390a67b114b4417558d71df798c9602f92a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a5390a67b114b4417558d71df798c9602f92a7/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21577e1e80ed7a2470cd3402004b80d1bf0f30d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21577e1e80ed7a2470cd3402004b80d1bf0f30d", "html_url": "https://github.com/rust-lang/rust/commit/b21577e1e80ed7a2470cd3402004b80d1bf0f30d"}, {"sha": "a89292514b6d4c4e9be7d6d527ad72e08e27173c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a89292514b6d4c4e9be7d6d527ad72e08e27173c", "html_url": "https://github.com/rust-lang/rust/commit/a89292514b6d4c4e9be7d6d527ad72e08e27173c"}], "stats": {"total": 344, "additions": 287, "deletions": 57}, "files": [{"sha": "3f6c2827a3f937242b2522ccf29904545e6b39d8", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d7a5390a67b114b4417558d71df798c9602f92a7/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a5390a67b114b4417558d71df798c9602f92a7/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=d7a5390a67b114b4417558d71df798c9602f92a7", "patch": "@@ -26,8 +26,22 @@ pub trait OsStringExt {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n     /// 16-bit code units.\n     ///\n-    /// This is lossless: calling `.encode_wide()` on the resulting string\n+    /// This is lossless: calling [`encode_wide`] on the resulting string\n     /// will always return the original code units.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// // UTF-16 encoding for \"Unicode\".\n+    /// let source = [0x0055, 0x006E, 0x0069, 0x0063, 0x006F, 0x0064, 0x0065];\n+    ///\n+    /// let string = OsString::from_wide(&source[..]);\n+    /// ```\n+    ///\n+    /// [`encode_wide`]: ./trait.OsStrExt.html#tymethod.encode_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_wide(wide: &[u16]) -> Self;\n }\n@@ -42,11 +56,29 @@ impl OsStringExt for OsString {\n /// Windows-specific extensions to `OsStr`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n-    /// Re-encodes an `OsStr` as a wide character sequence,\n-    /// i.e. potentially ill-formed UTF-16.\n+    /// Re-encodes an `OsStr` as a wide character sequence, i.e. potentially\n+    /// ill-formed UTF-16.\n+    ///\n+    /// This is lossless: calling [`OsString::from_wide`] and then\n+    /// `encode_wide` on the result will yield the original code units.\n+    /// Note that the encoding does not add a final null terminator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// // UTF-16 encoding for \"Unicode\".\n+    /// let source = [0x0055, 0x006E, 0x0069, 0x0063, 0x006F, 0x0064, 0x0065];\n+    ///\n+    /// let string = OsString::from_wide(&source[..]);\n+    ///\n+    /// let result: Vec<u16> = string.encode_wide().collect();\n+    /// assert_eq!(&source[..], &result[..]);\n+    /// ```\n     ///\n-    /// This is lossless. Note that the encoding does not include a final\n-    /// null.\n+    /// [`OsString::from_wide`]: ./trait.OsStringExt.html#tymethod.from_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn encode_wide(&self) -> EncodeWide;\n }"}, {"sha": "2d00cb38ec4fcb9ba20d85f642c60c1c6140f22d", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 243, "deletions": 48, "changes": 291, "blob_url": "https://github.com/rust-lang/rust/blob/d7a5390a67b114b4417558d71df798c9602f92a7/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a5390a67b114b4417558d71df798c9602f92a7/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=d7a5390a67b114b4417558d71df798c9602f92a7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Windows-specific extensions for the primitives in `std::fs`\n+//! Windows-specific extensions for the primitives in the `std::fs` module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -18,7 +18,9 @@ use path::Path;\n use sys;\n use sys_common::{AsInnerMut, AsInner};\n \n-/// Windows-specific extensions to `File`\n+/// Windows-specific extensions to [`File`].\n+///\n+/// [`File`]: ../../../fs/struct.File.html\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Seeks to a given position and reads a number of bytes.\n@@ -35,6 +37,24 @@ pub trait FileExt {\n     /// Note that similar to `File::read`, it is not an error to return with a\n     /// short read. When returning from such a short read, the file pointer is\n     /// still updated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let mut buffer = [0; 10];\n+    ///\n+    /// // Read 10 bytes, starting 72 bytes from the\n+    /// // start of the file.\n+    /// file.seek_read(&mut buffer[..], 72)?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_read(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;\n \n@@ -52,6 +72,22 @@ pub trait FileExt {\n     /// Note that similar to `File::write`, it is not an error to return a\n     /// short write. When returning from such a short write, the file pointer\n     /// is still updated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut buffer = File::create(\"foo.txt\")?;\n+    ///\n+    /// // Write a byte string starting 72 bytes from\n+    /// // the start of the file.\n+    /// buffer.seek_write(b\"some bytes\", 72)?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_write(&self, buf: &[u8], offset: u64) -> io::Result<usize>;\n }\n@@ -67,81 +103,94 @@ impl FileExt for fs::File {\n     }\n }\n \n-/// Windows-specific extensions to `OpenOptions`\n+/// Windows-specific extensions to [`OpenOptions`].\n+///\n+/// [`OpenOptions`]: ../../../fs/struct.OpenOptions.html\n #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n pub trait OpenOptionsExt {\n-    /// Overrides the `dwDesiredAccess` argument to the call to `CreateFile`\n+    /// Overrides the `dwDesiredAccess` argument to the call to [`CreateFile`]\n     /// with the specified value.\n     ///\n     /// This will override the `read`, `write`, and `append` flags on the\n     /// `OpenOptions` structure. This method provides fine-grained control over\n     /// the permissions to read, write and append data, attributes (like hidden\n-    /// and system) and extended attributes.\n+    /// and system), and extended attributes.\n     ///\n     /// # Examples\n     ///\n     /// ```no_run\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n     /// // Open without read and write permission, for example if you only need\n-    /// // to call `stat()` on the file\n+    /// // to call `stat` on the file\n     /// let file = OpenOptions::new().access_mode(0).open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn access_mode(&mut self, access: u32) -> &mut Self;\n \n-    /// Overrides the `dwShareMode` argument to the call to `CreateFile` with\n+    /// Overrides the `dwShareMode` argument to the call to [`CreateFile`] with\n     /// the specified value.\n     ///\n     /// By default `share_mode` is set to\n-    /// `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. Specifying\n-    /// less permissions denies others to read from, write to and/or delete the\n-    /// file while it is open.\n+    /// `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. This allows\n+    /// other processes to to read, write, and delete/rename the same file\n+    /// while it is open. Removing any of the flags will prevent other\n+    /// processes from performing the corresponding operation until the file\n+    /// handle is closed.\n     ///\n     /// # Examples\n     ///\n     /// ```no_run\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n     /// // Do not allow others to read or modify this file while we have it open\n-    /// // for writing\n-    /// let file = OpenOptions::new().write(true)\n-    ///                              .share_mode(0)\n-    ///                              .open(\"foo.txt\");\n+    /// // for writing.\n+    /// let file = OpenOptions::new()\n+    ///     .write(true)\n+    ///     .share_mode(0)\n+    ///     .open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn share_mode(&mut self, val: u32) -> &mut Self;\n \n     /// Sets extra flags for the `dwFileFlags` argument to the call to\n-    /// `CreateFile2` (or combines it with `attributes` and `security_qos_flags`\n-    /// to set the `dwFlagsAndAttributes` for `CreateFile`).\n+    /// [`CreateFile2`] to the specified value (or combines it with\n+    /// `attributes` and `security_qos_flags` to set the `dwFlagsAndAttributes`\n+    /// for [`CreateFile`]).\n     ///\n-    /// Custom flags can only set flags, not remove flags set by Rusts options.\n-    /// This options overwrites any previously set custom flags.\n+    /// Custom flags can only set flags, not remove flags set by Rust's options.\n+    /// This option overwrites any previously set custom flags.\n     ///\n     /// # Examples\n     ///\n-    /// ```rust,ignore\n+    /// ```ignore\n     /// extern crate winapi;\n+    ///\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n-    ///\n-    /// let mut options = OpenOptions::new();\n-    /// options.create(true).write(true);\n-    /// if cfg!(windows) {\n-    ///     options.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE);\n-    /// }\n-    /// let file = options.open(\"foo.txt\");\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// let file = OpenOptions::new()\n+    ///     .create(true)\n+    ///     .write(true)\n+    ///     .custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE)\n+    ///     .open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n+    /// [`CreateFile2`]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn custom_flags(&mut self, flags: u32) -> &mut Self;\n \n-    /// Sets the `dwFileAttributes` argument to the call to `CreateFile2` to\n+    /// Sets the `dwFileAttributes` argument to the call to [`CreateFile2`] to\n     /// the specified value (or combines it with `custom_flags` and\n     /// `security_qos_flags` to set the `dwFlagsAndAttributes` for\n-    /// `CreateFile`).\n+    /// [`CreateFile`]).\n     ///\n     /// If a _new_ file is created because it does not yet exist and\n     /// `.create(true)` or `.create_new(true)` are specified, the new file is\n@@ -155,21 +204,52 @@ pub trait OpenOptionsExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust,ignore\n+    /// ```ignore\n     /// extern crate winapi;\n+    ///\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n-    /// let file = OpenOptions::new().write(true).create(true)\n-    ///                              .attributes(winapi::FILE_ATTRIBUTE_HIDDEN)\n-    ///                              .open(\"foo.txt\");\n+    /// let file = OpenOptions::new()\n+    ///     .write(true)\n+    ///     .create(true)\n+    ///     .attributes(winapi::FILE_ATTRIBUTE_HIDDEN)\n+    ///     .open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n+    /// [`CreateFile2`]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn attributes(&mut self, val: u32) -> &mut Self;\n \n-    /// Sets the `dwSecurityQosFlags` argument to the call to `CreateFile2` to\n+    /// Sets the `dwSecurityQosFlags` argument to the call to [`CreateFile2`] to\n     /// the specified value (or combines it with `custom_flags` and `attributes`\n-    /// to set the `dwFlagsAndAttributes` for `CreateFile`).\n+    /// to set the `dwFlagsAndAttributes` for [`CreateFile`]).\n+    ///\n+    /// By default, `security_qos_flags` is set to `SECURITY_ANONYMOUS`. For\n+    /// information about possible values, see [Impersonation Levels] on the\n+    /// Windows Dev Center site.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// let file = OpenOptions::new()\n+    ///     .write(true)\n+    ///     .create(true)\n+    ///\n+    ///     // Sets the flag value to `SecurityIdentification`.\n+    ///     .security_qos_flags(1)\n+    ///\n+    ///     .open(\"foo.txt\");\n+    /// ```\n+    ///\n+    /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n+    /// [`CreateFile2`]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx\n+    /// [Impersonation Levels]:\n+    ///     https://msdn.microsoft.com/en-us/library/windows/desktop/aa379572.aspx\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn security_qos_flags(&mut self, flags: u32) -> &mut OpenOptions;\n }\n@@ -197,42 +277,157 @@ impl OpenOptionsExt for OpenOptions {\n     }\n }\n \n-/// Extension methods for `fs::Metadata` to access the raw fields contained\n+/// Extension methods for [`fs::Metadata`] to access the raw fields contained\n /// within.\n+///\n+/// The data members that this trait exposes correspond to the members\n+/// of the [`BY_HANDLE_FILE_INFORMATION`] structure.\n+///\n+/// [`fs::Metadata`]: ../../../fs/struct.Metadata.html\n+/// [`BY_HANDLE_FILE_INFORMATION`]:\n+///     https://msdn.microsoft.com/en-us/library/windows/desktop/aa363788.aspx\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the value of the `dwFileAttributes` field of this metadata.\n     ///\n     /// This field contains the file system attribute information for a file\n-    /// or directory.\n+    /// or directory. For possible values and their descriptions, see\n+    /// [File Attribute Constants] in the Windows Dev Center.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let attributes = metadata.file_attributes();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// [File Attribute Constants]:\n+    ///     https://msdn.microsoft.com/en-us/library/windows/desktop/gg258117.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_attributes(&self) -> u32;\n \n     /// Returns the value of the `ftCreationTime` field of this metadata.\n     ///\n-    /// The returned 64-bit value represents the number of 100-nanosecond\n-    /// intervals since January 1, 1601 (UTC).\n+    /// The returned 64-bit value is equivalent to a [`FILETIME`] struct,\n+    /// which represents the number of 100-nanosecond intervals since\n+    /// January 1, 1601 (UTC). The struct is automatically\n+    /// converted to a `u64` value, as that is the recommended way\n+    /// to use it.\n+    ///\n+    /// If the underlying filesystem does not support creation time, the\n+    /// returned value is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let creation_time = metadata.creation_time();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn creation_time(&self) -> u64;\n \n     /// Returns the value of the `ftLastAccessTime` field of this metadata.\n     ///\n-    /// The returned 64-bit value represents the number of 100-nanosecond\n-    /// intervals since January 1, 1601 (UTC).\n+    /// The returned 64-bit value is equivalent to a [`FILETIME`] struct,\n+    /// which represents the number of 100-nanosecond intervals since\n+    /// January 1, 1601 (UTC). The struct is automatically\n+    /// converted to a `u64` value, as that is the recommended way\n+    /// to use it.\n+    ///\n+    /// For a file, the value specifies the last time that a file was read\n+    /// from or written to. For a directory, the value specifies when\n+    /// the directory was created. For both files and directories, the\n+    /// specified date is correct, but the time of day is always set to\n+    /// midnight.\n+    ///\n+    /// If the underlying filesystem does not support last access time, the\n+    /// returned value is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let last_access_time = metadata.last_access_time();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn last_access_time(&self) -> u64;\n \n     /// Returns the value of the `ftLastWriteTime` field of this metadata.\n     ///\n-    /// The returned 64-bit value represents the number of 100-nanosecond\n-    /// intervals since January 1, 1601 (UTC).\n+    /// The returned 64-bit value is equivalent to a [`FILETIME`] struct,\n+    /// which represents the number of 100-nanosecond intervals since\n+    /// January 1, 1601 (UTC). The struct is automatically\n+    /// converted to a `u64` value, as that is the recommended way\n+    /// to use it.\n+    ///\n+    /// For a file, the value specifies the last time that a file was written\n+    /// to. For a directory, the structure specifies when the directory was\n+    /// created.\n+    ///\n+    /// If the underlying filesystem does not support the last write time\n+    /// time, the returned value is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let last_write_time = metadata.last_write_time();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn last_write_time(&self) -> u64;\n \n     /// Returns the value of the `nFileSize{High,Low}` fields of this\n     /// metadata.\n     ///\n     /// The returned value does not have meaning for directories.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::fs;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let file_size = metadata.file_size();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_size(&self) -> u64;\n }\n@@ -253,7 +448,7 @@ impl MetadataExt for Metadata {\n ///\n /// # Examples\n ///\n-/// ```ignore\n+/// ```no_run\n /// use std::os::windows::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n@@ -274,7 +469,7 @@ pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n ///\n /// # Examples\n ///\n-/// ```ignore\n+/// ```no_run\n /// use std::os::windows::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "11b1337a8aec0b933965d39c9cb1b070ad0a44a5", "filename": "src/libstd/sys/windows/ext/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7a5390a67b114b4417558d71df798c9602f92a7/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a5390a67b114b4417558d71df798c9602f92a7/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs?ref=d7a5390a67b114b4417558d71df798c9602f92a7", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Experimental extensions to `std` for Windows.\n+//! Platform-specific extensions to `std` for Windows.\n //!\n-//! For now, this module is limited to extracting handles, file\n-//! descriptors, and sockets, but its functionality will grow over\n-//! time.\n+//! Provides access to platform-level information for Windows, and exposes\n+//! Windows-specific idioms that would otherwise be inappropriate as part\n+//! the core `std` library. These extensions allow developers to use\n+//! `std` types and idioms with Windows in a way that the normal\n+//! platform-agnostic idioms would not normally support.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "df5e4ef1d886e9f589e413b2ba46d54beb4be1be", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7a5390a67b114b4417558d71df798c9602f92a7/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a5390a67b114b4417558d71df798c9602f92a7/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=d7a5390a67b114b4417558d71df798c9602f92a7", "patch": "@@ -750,6 +750,7 @@ impl<'a> Iterator for Wtf8CodePoints<'a> {\n     }\n }\n \n+/// Generates a wide character sequence for potentially ill-formed UTF-16.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct EncodeWide<'a> {"}]}