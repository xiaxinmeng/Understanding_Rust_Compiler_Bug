{"sha": "30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "node_id": "C_kwDOAAsO6NoAKDMwZmI4MjI5ZTEzZGFkYmU5Zjk5NjgxMDhkZDQ2ZWJiOGQ0M2U1NmU", "commit": {"author": {"name": "J-ZhengLi", "email": "lizhengghengj@gmail.com", "date": "2022-02-25T10:08:52Z"}, "committer": {"name": "J-ZhengLi", "email": "lizhengghengj@gmail.com", "date": "2022-02-25T10:08:52Z"}, "message": "add tests, add base bone for the new lint", "tree": {"sha": "afcf3c96f789a6e1132c6bd970f119e52aaf32f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afcf3c96f789a6e1132c6bd970f119e52aaf32f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "html_url": "https://github.com/rust-lang/rust/commit/30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b2896a8fc9f0b275692677ee6d2d66a7cbde16a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2896a8fc9f0b275692677ee6d2d66a7cbde16a", "html_url": "https://github.com/rust-lang/rust/commit/7b2896a8fc9f0b275692677ee6d2d66a7cbde16a"}], "stats": {"total": 251, "additions": 251, "deletions": 0}, "files": [{"sha": "16fe9454634a35f98673b7844bbf163d4f6b4217", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "patch": "@@ -3348,6 +3348,7 @@ Released 2018-09-13\n [`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n [`nonsensical_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options\n [`nonstandard_macro_braces`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces\n+[`nop_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#nop_match\n [`not_unsafe_ptr_arg_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n [`octal_escapes`]: https://rust-lang.github.io/rust-clippy/master/index.html#octal_escapes\n [`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect"}, {"sha": "01429bf7ea541b8206effd5dc0494aacc1246340", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "patch": "@@ -134,6 +134,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(matches::MATCH_OVERLAPPING_ARM),\n     LintId::of(matches::MATCH_REF_PATS),\n     LintId::of(matches::MATCH_SINGLE_BINDING),\n+    LintId::of(matches::NOP_MATCH),\n     LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n     LintId::of(matches::SINGLE_MATCH),\n     LintId::of(matches::WILDCARD_IN_OR_PATTERNS),"}, {"sha": "191fa96bdfd2d92b288886cabb68f44c667bf772", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "patch": "@@ -37,6 +37,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(loops::NEVER_LOOP),\n     LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n     LintId::of(match_str_case_mismatch::MATCH_STR_CASE_MISMATCH),\n+    LintId::of(matches::NOP_MATCH),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n     LintId::of(methods::CLONE_DOUBLE_REF),\n     LintId::of(methods::ITERATOR_STEP_BY_ZERO),"}, {"sha": "2977a78f257e4d84daca65fcb79ab2646948c045", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "patch": "@@ -253,6 +253,7 @@ store.register_lints(&[\n     matches::MATCH_SINGLE_BINDING,\n     matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n     matches::MATCH_WILD_ERR_ARM,\n+    matches::NOP_MATCH,\n     matches::REDUNDANT_PATTERN_MATCHING,\n     matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n     matches::SINGLE_MATCH,"}, {"sha": "48300931dc43ebe3b6f20c3a9ab43083fdc967d3", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "patch": "@@ -21,6 +21,7 @@ mod redundant_pattern_match;\n mod rest_pat_in_fully_bound_struct;\n mod single_match;\n mod wild_in_or_pats;\n+mod nop_match;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -566,6 +567,49 @@ declare_clippy_lint! {\n     \"`match` with identical arm bodies\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for unnecessary `match` or match-like `if let` returns for `Option` and `Result` \n+    /// when function signatures are the same.\n+    ///\n+    /// ### Why is this bad?\n+    /// This `match` block does nothing and might not be what the coder intended.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// fn foo() -> Result<(), i32> {\n+    ///     match result {\n+    ///         Ok(val) => Ok(val),\n+    ///         Err(err) => Err(err),\n+    ///     }\n+    /// }\n+    /// \n+    /// fn bar() -> Option<i32> {\n+    ///     if let Some(val) = option {\n+    ///         Some(val)\n+    ///     } else {\n+    ///         None\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// Could be replaced as\n+    /// \n+    /// ```rust,ignore\n+    /// fn foo() -> Result<(), i32> {\n+    ///     result\n+    /// }\n+    /// \n+    /// fn bar() -> Option<i32> {\n+    ///     option\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub NOP_MATCH,\n+    correctness,\n+    \"`match` or match-like `if let` that are unnecessary\"\n+}\n+\n #[derive(Default)]\n pub struct Matches {\n     msrv: Option<RustcVersion>,\n@@ -599,6 +643,7 @@ impl_lint_pass!(Matches => [\n     REDUNDANT_PATTERN_MATCHING,\n     MATCH_LIKE_MATCHES_MACRO,\n     MATCH_SAME_ARMS,\n+    NOP_MATCH,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n@@ -622,6 +667,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                     overlapping_arms::check(cx, ex, arms);\n                     match_wild_enum::check(cx, ex, arms);\n                     match_as_ref::check(cx, ex, arms, expr);\n+                    nop_match::check_match(cx, ex, arms);\n \n                     if self.infallible_destructuring_match_linted {\n                         self.infallible_destructuring_match_linted = false;\n@@ -640,6 +686,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                 match_like_matches::check(cx, expr);\n             }\n             redundant_pattern_match::check(cx, expr);\n+            nop_match::check(cx, expr);\n         }\n     }\n "}, {"sha": "d995caf6cfd2cf132943ed574ad3f413fcad9532", "filename": "clippy_lints/src/matches/nop_match.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Fmatches%2Fnop_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/clippy_lints%2Fsrc%2Fmatches%2Fnop_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fnop_match.rs?ref=30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "patch": "@@ -0,0 +1,34 @@\n+#![allow(unused_variables)]\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_lint::LateContext;\n+use rustc_hir::{Arm, Expr};\n+use rustc_errors::Applicability;\n+use super::NOP_MATCH;\n+\n+pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>) {\n+    if false {\n+        span_lint_and_sugg(\n+            cx,\n+            NOP_MATCH,\n+            ex.span,\n+            \"this if-let expression is unnecessary\",\n+            \"replace it with\",\n+            \"\".to_string(),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n+\n+pub(crate) fn check_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n+    if false {\n+        span_lint_and_sugg(\n+            cx,\n+            NOP_MATCH,\n+            ex.span,\n+            \"this match expression is unnecessary\",\n+            \"replace it with\",\n+            \"\".to_string(),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "0e37bb854399e3d94472e063765474323a83c5cf", "filename": "tests/ui/nop_match.fixed", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/tests%2Fui%2Fnop_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/tests%2Fui%2Fnop_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnop_match.fixed?ref=30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "patch": "@@ -0,0 +1,83 @@\n+// run-rustfix\n+#![warn(clippy::nop_match)]\n+#![allow(clippy::manual_map)]\n+#![allow(clippy::question_mark)]\n+#![allow(dead_code)]\n+\n+fn option_match() -> Option<i32> {\n+    match Some(1) {\n+        Some(a) => Some(a),\n+        None => None\n+    }\n+}\n+\n+fn result_match() -> Result<i32, i32> {\n+    match Ok(1) {\n+        Ok(a) => Ok(a),\n+        Err(err) => Err(err)\n+    }\n+}\n+\n+fn option_check() -> Option<i32> {\n+    if let Some(a) = Some(1) {\n+        Some(a)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn option_check_no_else() -> Option<i32> {\n+    if let Some(a) = Some(1) {\n+        return Some(a);\n+    }\n+    None\n+}\n+\n+fn func_ret_err<T>(err: T) -> Result<(), T> {\n+    Err(err)\n+}\n+\n+fn result_check_no_else() -> Result<(), i32> {\n+    if let Err(e) = func_ret_err(0_i32) {\n+        return Err(e);\n+    }\n+    Ok(())\n+}\n+\n+fn result_check_a() -> Result<(), i32> {\n+    if let Err(e) = func_ret_err(0_i32) {\n+        Err(e)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+// Don't trigger\n+fn result_check_b() -> Result<(), i32> {\n+    if let Err(e) = Ok(1) {\n+        Err(e)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn result_check_c() -> Result<(), i32> {\n+    let example = Ok(());\n+    if let Err(e) = example {\n+        Err(e)\n+    } else {\n+        example\n+    }\n+}\n+\n+// Don't trigger\n+fn result_check_d() -> Result<(), i32> {\n+    let example = Ok(1);\n+    if let Err(e) = example {\n+        Err(e)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "0e37bb854399e3d94472e063765474323a83c5cf", "filename": "tests/ui/nop_match.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/tests%2Fui%2Fnop_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/tests%2Fui%2Fnop_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnop_match.rs?ref=30fb8229e13dadbe9f9968108dd46ebb8d43e56e", "patch": "@@ -0,0 +1,83 @@\n+// run-rustfix\n+#![warn(clippy::nop_match)]\n+#![allow(clippy::manual_map)]\n+#![allow(clippy::question_mark)]\n+#![allow(dead_code)]\n+\n+fn option_match() -> Option<i32> {\n+    match Some(1) {\n+        Some(a) => Some(a),\n+        None => None\n+    }\n+}\n+\n+fn result_match() -> Result<i32, i32> {\n+    match Ok(1) {\n+        Ok(a) => Ok(a),\n+        Err(err) => Err(err)\n+    }\n+}\n+\n+fn option_check() -> Option<i32> {\n+    if let Some(a) = Some(1) {\n+        Some(a)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn option_check_no_else() -> Option<i32> {\n+    if let Some(a) = Some(1) {\n+        return Some(a);\n+    }\n+    None\n+}\n+\n+fn func_ret_err<T>(err: T) -> Result<(), T> {\n+    Err(err)\n+}\n+\n+fn result_check_no_else() -> Result<(), i32> {\n+    if let Err(e) = func_ret_err(0_i32) {\n+        return Err(e);\n+    }\n+    Ok(())\n+}\n+\n+fn result_check_a() -> Result<(), i32> {\n+    if let Err(e) = func_ret_err(0_i32) {\n+        Err(e)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+// Don't trigger\n+fn result_check_b() -> Result<(), i32> {\n+    if let Err(e) = Ok(1) {\n+        Err(e)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn result_check_c() -> Result<(), i32> {\n+    let example = Ok(());\n+    if let Err(e) = example {\n+        Err(e)\n+    } else {\n+        example\n+    }\n+}\n+\n+// Don't trigger\n+fn result_check_d() -> Result<(), i32> {\n+    let example = Ok(1);\n+    if let Err(e) = example {\n+        Err(e)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/nop_match.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/tests%2Fui%2Fnop_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30fb8229e13dadbe9f9968108dd46ebb8d43e56e/tests%2Fui%2Fnop_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnop_match.stderr?ref=30fb8229e13dadbe9f9968108dd46ebb8d43e56e"}]}