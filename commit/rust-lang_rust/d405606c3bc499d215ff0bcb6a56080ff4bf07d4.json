{"sha": "d405606c3bc499d215ff0bcb6a56080ff4bf07d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MDU2MDZjM2JjNDk5ZDIxNWZmMGJjYjZhNTYwODBmZjRiZjA3ZDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-01-13T23:46:11Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-01-17T00:41:01Z"}, "message": "End fixing search index minification", "tree": {"sha": "270c00d177c03afc82cbf924fb8f3635eb8012df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/270c00d177c03afc82cbf924fb8f3635eb8012df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d405606c3bc499d215ff0bcb6a56080ff4bf07d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d405606c3bc499d215ff0bcb6a56080ff4bf07d4", "html_url": "https://github.com/rust-lang/rust/commit/d405606c3bc499d215ff0bcb6a56080ff4bf07d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d405606c3bc499d215ff0bcb6a56080ff4bf07d4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8fd44598f730d6a79e5fdabefcb26034fc093a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8fd44598f730d6a79e5fdabefcb26034fc093a", "html_url": "https://github.com/rust-lang/rust/commit/2e8fd44598f730d6a79e5fdabefcb26034fc093a"}], "stats": {"total": 126, "additions": 98, "deletions": 28}, "files": [{"sha": "d4593c1ad234bf8637e9dfe3f1e7f4ebef5cb67b", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d405606c3bc499d215ff0bcb6a56080ff4bf07d4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d405606c3bc499d215ff0bcb6a56080ff4bf07d4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d405606c3bc499d215ff0bcb6a56080ff4bf07d4", "patch": "@@ -1332,7 +1332,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"minifier\"\n-version = \"0.0.21\"\n+version = \"0.0.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"macro-utils 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2692,7 +2692,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"minifier 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"minifier 0.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3510,7 +3510,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a3eb002f0535929f1199681417029ebea04aadc0c7a4224b46be99c7f5d6a16\"\n \"checksum memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2ffa2c986de11a9df78620c01eeaaf27d94d3ff02bf81bfcca953102dd0c6ff\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n-\"checksum minifier 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9707d0ff1b828cba09c4bb27d5c3dceb6f49bd46f700042343bea350a131bf4f\"\n+\"checksum minifier 0.0.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f299df45afd73332044ea9f717c816a84fc90c8b631409abf339ba93642a7985\"\n \"checksum miniz-sys 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0300eafb20369952951699b68243ab4334f4b10a88f411c221d444b36c40e649\"\n \"checksum miniz_oxide 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5ad30a47319c16cde58d0314f5d98202a80c9083b5f61178457403dfb14e509c\"\n \"checksum miniz_oxide_c_api 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28edaef377517fd9fe3e085c37d892ce7acd1fbeab9239c5a36eec352d8a8b7e\""}, {"sha": "4b421881db48d7b008c1c27b3ec8f92013c01c37", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d405606c3bc499d215ff0bcb6a56080ff4bf07d4/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d405606c3bc499d215ff0bcb6a56080ff4bf07d4/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=d405606c3bc499d215ff0bcb6a56080ff4bf07d4", "patch": "@@ -9,6 +9,6 @@ path = \"lib.rs\"\n \n [dependencies]\n pulldown-cmark = { version = \"0.1.2\", default-features = false }\n-minifier = \"0.0.21\"\n+minifier = \"0.0.26\"\n tempfile = \"3\"\n parking_lot = \"0.6.4\""}, {"sha": "3a64c56fc8eeb7e9a020efe1d40949e2f3f498d0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 92, "deletions": 22, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/d405606c3bc499d215ff0bcb6a56080ff4bf07d4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d405606c3bc499d215ff0bcb6a56080ff4bf07d4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d405606c3bc499d215ff0bcb6a56080ff4bf07d4", "patch": "@@ -741,8 +741,8 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n \n     let mut crate_data = BTreeMap::new();\n     crate_data.insert(\"doc\".to_owned(), Json::String(crate_doc));\n-    crate_data.insert(\"items\".to_owned(), Json::Array(crate_items));\n-    crate_data.insert(\"paths\".to_owned(), Json::Array(crate_paths));\n+    crate_data.insert(\"i\".to_owned(), Json::Array(crate_items));\n+    crate_data.insert(\"p\".to_owned(), Json::Array(crate_paths));\n \n     // Collect the index into a string\n     format!(\"searchIndex[{}] = {};\",\n@@ -914,12 +914,44 @@ themePicker.onblur = handleThemeButtonsBlur;\n     write(cx.dst.join(\"COPYRIGHT.txt\"),\n           static_files::COPYRIGHT)?;\n \n-    fn collect(path: &Path, krate: &str, key: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n+    fn collect(\n+        path: &Path,\n+        krate: &str,\n+        key: &str,\n+        for_search_index: bool,\n+    ) -> io::Result<(Vec<String>, Vec<String>, Vec<String>)> {\n+        use minifier::js;\n+\n         let mut ret = Vec::new();\n         let mut krates = Vec::new();\n+        let mut variables = Vec::new();\n+\n+        let mut krate = krate.to_owned();\n+\n         if path.exists() {\n             for line in BufReader::new(File::open(path)?).lines() {\n                 let line = line?;\n+                if for_search_index && line.starts_with(\"var r_\") {\n+                    variables.push(line.clone());\n+                    // We need to check if the crate name has been put into a variable as well.\n+                    let tokens = js::simple_minify(&line).apply(js::clean_tokens);\n+                    let mut pos = 0;\n+                    while pos < tokens.len() {\n+                        if let Some((var_pos, Some(value_pos))) =\n+                                js::get_variable_name_and_value_positions(&tokens, pos) {\n+                            if let Some(s) = tokens.0[value_pos].get_string() {\n+                                if &s[1..s.len() - 1] == krate {\n+                                    if let Some(var) = tokens[var_pos].get_other() {\n+                                        krate = var.to_owned();\n+                                        break\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        pos += 1;\n+                    }\n+                    continue;\n+                }\n                 if !line.starts_with(key) {\n                     continue;\n                 }\n@@ -933,7 +965,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                                                  .unwrap_or_else(|| String::new()));\n             }\n         }\n-        Ok((ret, krates))\n+        Ok((ret, krates, variables))\n     }\n \n     fn show_item(item: &IndexItem, krate: &str) -> String {\n@@ -948,7 +980,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     let dst = cx.dst.join(\"aliases.js\");\n     {\n-        let (mut all_aliases, _) = try_err!(collect(&dst, &krate.name, \"ALIASES\"), &dst);\n+        let (mut all_aliases, _, _) = try_err!(collect(&dst, &krate.name, \"ALIASES\", false), &dst);\n         let mut w = try_err!(File::create(&dst), &dst);\n         let mut output = String::with_capacity(100);\n         for (alias, items) in &cache.aliases {\n@@ -1035,7 +1067,9 @@ themePicker.onblur = handleThemeButtonsBlur;\n         }\n \n         let dst = cx.dst.join(\"source-files.js\");\n-        let (mut all_sources, _krates) = try_err!(collect(&dst, &krate.name, \"sourcesIndex\"), &dst);\n+        let (mut all_sources, _krates, _) = try_err!(collect(&dst, &krate.name, \"sourcesIndex\",\n+                                                             false),\n+                                                     &dst);\n         all_sources.push(format!(\"sourcesIndex[\\\"{}\\\"] = {};\",\n                                  &krate.name,\n                                  hierarchy.to_json_string()));\n@@ -1049,20 +1083,22 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     // Update the search index\n     let dst = cx.dst.join(\"search-index.js\");\n-    let (mut all_indexes, mut krates) = try_err!(collect(&dst, &krate.name, \"searchIndex\"), &dst);\n+    let (mut all_indexes, mut krates, variables) = try_err!(collect(&dst,\n+                                                                    &krate.name,\n+                                                                    \"searchIndex\",\n+                                                                    true), &dst);\n     all_indexes.push(search_index);\n \n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n     let mut w = try_err!(File::create(&dst), &dst);\n-    try_err!(writeln!(&mut w, \"var N = null;var searchIndex = {{}};\"), &dst);\n+    try_err!(writeln!(&mut w, \"var N=null,E=\\\"\\\",T=\\\"t\\\",U=\\\"u\\\",searchIndex={{}};\"), &dst);\n     try_err!(write_minify_replacer(&mut w,\n-                                   &all_indexes.join(\"\\n\"),\n-                                   options.enable_minification,\n-                                   &[(minifier::js::Keyword::Null, \"N\")]),\n+                                   &format!(\"{}\\n{}\", variables.join(\"\"), all_indexes.join(\"\\n\")),\n+                                   options.enable_minification),\n              &dst);\n-    try_err!(writeln!(&mut w, \"initSearch(searchIndex);addSearchOptions(searchIndex);\"), &dst);\n+    try_err!(write!(&mut w, \"initSearch(searchIndex);addSearchOptions(searchIndex);\"), &dst);\n \n     if options.enable_index_page {\n         if let Some(index_page) = options.index_page.clone() {\n@@ -1161,8 +1197,9 @@ themePicker.onblur = handleThemeButtonsBlur;\n                             remote_item_type.css_class(),\n                             remote_path[remote_path.len() - 1]));\n \n-        let (mut all_implementors, _) = try_err!(collect(&mydst, &krate.name, \"implementors\"),\n-                                                 &mydst);\n+        let (mut all_implementors, _, _) = try_err!(collect(&mydst, &krate.name, \"implementors\",\n+                                                            false),\n+                                                    &mydst);\n         all_implementors.push(implementors);\n         // Sort the implementors by crate so the file will be generated\n         // identically even with rustdoc running in parallel.\n@@ -1216,16 +1253,49 @@ fn write_minify(dst: PathBuf, contents: &str, enable_minification: bool) -> Resu\n     }\n }\n \n-fn write_minify_replacer<W: Write>(dst: &mut W,\n-                                   contents: &str,\n-                                   enable_minification: bool,\n-                                   keywords_to_replace: &[(minifier::js::Keyword, &str)])\n-                                   -> io::Result<()> {\n+fn write_minify_replacer<W: Write>(\n+    dst: &mut W,\n+    contents: &str,\n+    enable_minification: bool,\n+) -> io::Result<()> {\n+    use minifier::js::{Keyword, ReservedChar, Token};\n+\n     if enable_minification {\n         writeln!(dst, \"{}\",\n-                 minifier::js::minify_and_replace_keywords(contents, keywords_to_replace)\n-                              .apply(minifier::js::clean_tokens)\n-                              .apply(minifier::js::aggregate_strings)\n+                 minifier::js::simple_minify(contents)\n+                              .apply(|f| {\n+                                  // We keep backlines.\n+                                  minifier::js::clean_tokens_except(f, |c| {\n+                                      c.get_char() != Some(ReservedChar::Backline)\n+                                  })\n+                              })\n+                              .apply(|f| {\n+                                  minifier::js::replace_token_with(f, |t| {\n+                                      match *t {\n+                                          Token::Keyword(Keyword::Null) => Some(Token::Other(\"N\")),\n+                                          Token::String(s) => {\n+                                              let s = &s[1..s.len() -1]; // The quotes are included\n+                                              if s.is_empty() {\n+                                                  Some(Token::Other(\"E\"))\n+                                              } else if s == \"t\" {\n+                                                  Some(Token::Other(\"T\"))\n+                                              } else if s == \"u\" {\n+                                                  Some(Token::Other(\"U\"))\n+                                              } else {\n+                                                  None\n+                                              }\n+                                          }\n+                                          _ => None,\n+                                      }\n+                                  })\n+                              })\n+                              .apply(|f| {\n+                                  // We add a backline after the newly created variables.\n+                                  minifier::js::aggregate_strings_with_separation(\n+                                      f,\n+                                      Token::Char(ReservedChar::Backline),\n+                                  )\n+                              })\n                               .to_string())\n     } else {\n         writeln!(dst, \"{}\", contents)"}, {"sha": "82604cc7ad8bbe28f97303b110c8e984fd19b0ab", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d405606c3bc499d215ff0bcb6a56080ff4bf07d4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d405606c3bc499d215ff0bcb6a56080ff4bf07d4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=d405606c3bc499d215ff0bcb6a56080ff4bf07d4", "patch": "@@ -1555,10 +1555,10 @@ if (!DOMTokenList.prototype.remove) {\n                 //              (String) description,\n                 //              (Number | null) the parent path index to `paths`]\n                 //              (Object | null) the type of the function (if any)\n-                var items = rawSearchIndex[crate].items;\n+                var items = rawSearchIndex[crate].i;\n                 // an array of [(Number) item type,\n                 //              (String) name]\n-                var paths = rawSearchIndex[crate].paths;\n+                var paths = rawSearchIndex[crate].p;\n \n                 // convert `paths` into an object form\n                 var len = paths.length;"}]}