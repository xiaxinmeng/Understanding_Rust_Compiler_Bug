{"sha": "75cf13ec7279ff7a56e3329ab6d6d8fc03e66e4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Y2YxM2VjNzI3OWZmN2E1NmUzMzI5YWI2ZDZkOGZjMDNlNjZlNGY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-19T00:02:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-19T00:50:58Z"}, "message": "Add str/& component accessor and test.", "tree": {"sha": "c7b1875e39975d0f4b69f2aa918ba7ef60b39dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b1875e39975d0f4b69f2aa918ba7ef60b39dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75cf13ec7279ff7a56e3329ab6d6d8fc03e66e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75cf13ec7279ff7a56e3329ab6d6d8fc03e66e4f", "html_url": "https://github.com/rust-lang/rust/commit/75cf13ec7279ff7a56e3329ab6d6d8fc03e66e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75cf13ec7279ff7a56e3329ab6d6d8fc03e66e4f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "956bc773c684fe0f9e3ebc165cadb0b02d918805", "url": "https://api.github.com/repos/rust-lang/rust/commits/956bc773c684fe0f9e3ebc165cadb0b02d918805", "html_url": "https://github.com/rust-lang/rust/commit/956bc773c684fe0f9e3ebc165cadb0b02d918805"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "3fbfd3e32cd39574f78d9e95093f03b9c4969b1d", "filename": "src/libcore/str.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/75cf13ec7279ff7a56e3329ab6d6d8fc03e66e4f/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75cf13ec7279ff7a56e3329ab6d6d8fc03e66e4f/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=75cf13ec7279ff7a56e3329ab6d6d8fc03e66e4f", "patch": "@@ -1539,6 +1539,21 @@ fn as_c_str<T>(s: str, f: fn(*libc::c_char) -> T) -> T unsafe {\n     as_buf(s) {|buf| f(buf as *libc::c_char) }\n }\n \n+\n+#[doc = \"\n+Work with the byte buffer and length of a slice.\n+\n+The unpacked length is one byte longer than the 'official' indexable\n+length of the string. This is to permit probing the byte past the\n+indexable area for a null byte, as is the case in slices pointing\n+to full strings, or suffixes of them.\n+\"]\n+fn unpack_slice<T>(s: str/&, f: fn(*u8, uint) -> T) -> T unsafe {\n+    let v : *(*u8,uint) = ::unsafe::reinterpret_cast(ptr::addr_of(s));\n+    let (buf,len) = *v;\n+    f(buf, len)\n+}\n+\n #[doc = \"\n Reserves capacity for exactly `n` bytes in the given string, not including\n the null terminator.\n@@ -2706,4 +2721,16 @@ mod tests {\n         }\n         assert found_b;\n     }\n+\n+    #[test]\n+    fn test_unpack_slice() unsafe {\n+        let a = \"hello\";\n+        unpack_slice(a) {|buf, len|\n+            assert a[0] == 'h' as u8;\n+            assert *buf == 'h' as u8;\n+            assert len == 6u;\n+            assert *ptr::offset(buf,4u) == 'o' as u8;\n+            assert *ptr::offset(buf,5u) == 0u8;\n+        }\n+    }\n }"}]}