{"sha": "26451ef7b5e00887dc8f27717ff34262df23d655", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NDUxZWY3YjVlMDA4ODdkYzhmMjc3MTdmZjM0MjYyZGYyM2Q2NTU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-22T02:42:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-27T03:58:38Z"}, "message": "Avoid unnecessary internings.\n\nMost involving `Symbol::intern` on string literals.", "tree": {"sha": "7e369732e649c3404dd2e7fb030c3a032fa0b790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e369732e649c3404dd2e7fb030c3a032fa0b790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26451ef7b5e00887dc8f27717ff34262df23d655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26451ef7b5e00887dc8f27717ff34262df23d655", "html_url": "https://github.com/rust-lang/rust/commit/26451ef7b5e00887dc8f27717ff34262df23d655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26451ef7b5e00887dc8f27717ff34262df23d655/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c0ff3dd979ccaf974312d72a4fba8392eb1a4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0ff3dd979ccaf974312d72a4fba8392eb1a4f7", "html_url": "https://github.com/rust-lang/rust/commit/6c0ff3dd979ccaf974312d72a4fba8392eb1a4f7"}], "stats": {"total": 190, "additions": 84, "deletions": 106}, "files": [{"sha": "daf476181646feaecb9c19830f412aa03812572d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -1145,9 +1145,7 @@ impl<'a> LoweringContext<'a> {\n         let unstable_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n-            Some(vec![\n-                Symbol::intern(\"gen_future\"),\n-            ].into()),\n+            Some(vec![sym::gen_future].into()),\n         );\n         let gen_future = self.expr_std_path(\n             unstable_span, &[sym::future, sym::from_generator], None, ThinVec::new());\n@@ -4177,9 +4175,7 @@ impl<'a> LoweringContext<'a> {\n                     let unstable_span = this.sess.source_map().mark_span_with_reason(\n                         CompilerDesugaringKind::TryBlock,\n                         body.span,\n-                        Some(vec![\n-                            Symbol::intern(\"try_trait\"),\n-                        ].into()),\n+                        Some(vec![sym::try_trait].into()),\n                     );\n                     let mut block = this.lower_block(body, true).into_inner();\n                     let tail = block.expr.take().map_or_else("}, {"sha": "034ef32aafe016cff8fec1816a9b735cfabcf580", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -210,8 +210,8 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n     attrs.iter().find_map(|attr| Some(match attr {\n         _ if attr.check_name(sym::lang) => (attr.value_str()?, attr.span),\n-        _ if attr.check_name(sym::panic_handler) => (Symbol::intern(\"panic_impl\"), attr.span),\n-        _ if attr.check_name(sym::alloc_error_handler) => (Symbol::intern(\"oom\"), attr.span),\n+        _ if attr.check_name(sym::panic_handler) => (sym::panic_impl, attr.span),\n+        _ if attr.check_name(sym::alloc_error_handler) => (sym::oom, attr.span),\n         _ => return None,\n     }))\n }"}, {"sha": "66fa9a5c6f1060aea38c59bcfd7e8263103404c3", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -437,7 +437,7 @@ impl<'a, 'tcx> Index<'tcx> {\n                         reason: Some(Symbol::intern(reason)),\n                         issue: 27812,\n                     },\n-                    feature: Symbol::intern(\"rustc_private\"),\n+                    feature: sym::rustc_private,\n                     rustc_depr: None,\n                     const_stability: None,\n                     promotable: false,\n@@ -880,7 +880,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // FIXME: only remove `libc` when `stdbuild` is active.\n     // FIXME: remove special casing for `test`.\n     remaining_lib_features.remove(&Symbol::intern(\"libc\"));\n-    remaining_lib_features.remove(&Symbol::intern(\"test\"));\n+    remaining_lib_features.remove(&sym::test);\n \n     let check_features =\n         |remaining_lib_features: &mut FxHashMap<_, _>, defined_features: &[_]| {"}, {"sha": "49cd3eff21a6c4ddb7035ffe534bb8afaec2aff3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -19,7 +19,7 @@ use syntax::source_map::{FileName, FilePathMapping};\n use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n use syntax::parse::token;\n use syntax::parse;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::{sym, Symbol};\n use syntax::feature_gate::UnstableFeatures;\n use errors::emitter::HumanReadableErrorType;\n \n@@ -1503,31 +1503,31 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n         Some(Symbol::intern(vendor)),\n     ));\n     if sess.target.target.options.has_elf_tls {\n-        ret.insert((Symbol::intern(\"target_thread_local\"), None));\n+        ret.insert((sym::target_thread_local, None));\n     }\n     for &i in &[8, 16, 32, 64, 128] {\n         if i >= min_atomic_width && i <= max_atomic_width {\n             let s = i.to_string();\n             ret.insert((\n-                Symbol::intern(\"target_has_atomic\"),\n+                sym::target_has_atomic,\n                 Some(Symbol::intern(&s)),\n             ));\n             if &s == wordsz {\n                 ret.insert((\n-                    Symbol::intern(\"target_has_atomic\"),\n+                    sym::target_has_atomic,\n                     Some(Symbol::intern(\"ptr\")),\n                 ));\n             }\n         }\n     }\n     if atomic_cas {\n-        ret.insert((Symbol::intern(\"target_has_atomic\"), Some(Symbol::intern(\"cas\"))));\n+        ret.insert((sym::target_has_atomic, Some(Symbol::intern(\"cas\"))));\n     }\n     if sess.opts.debug_assertions {\n         ret.insert((Symbol::intern(\"debug_assertions\"), None));\n     }\n     if sess.opts.crate_types.contains(&CrateType::ProcMacro) {\n-        ret.insert((Symbol::intern(\"proc_macro\"), None));\n+        ret.insert((sym::proc_macro, None));\n     }\n     ret\n }\n@@ -1547,7 +1547,7 @@ pub fn build_configuration(sess: &Session, mut user_cfg: ast::CrateConfig) -> as\n     let default_cfg = default_configuration(sess);\n     // If the user wants a test runner, then add the test cfg\n     if sess.opts.test {\n-        user_cfg.insert((Symbol::intern(\"test\"), None));\n+        user_cfg.insert((sym::test, None));\n     }\n     user_cfg.extend(default_cfg.iter().cloned());\n     user_cfg\n@@ -2702,7 +2702,7 @@ mod tests {\n     use std::path::PathBuf;\n     use super::{Externs, OutputType, OutputTypes};\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};\n-    use syntax::symbol::Symbol;\n+    use syntax::symbol::sym;\n     use syntax::edition::{Edition, DEFAULT_EDITION};\n     use syntax;\n     use super::Options;\n@@ -2744,15 +2744,14 @@ mod tests {\n             let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n             let sess = build_session(sessopts, None, registry);\n             let cfg = build_configuration(&sess, to_crate_config(cfg));\n-            assert!(cfg.contains(&(Symbol::intern(\"test\"), None)));\n+            assert!(cfg.contains(&(sym::test, None)));\n         });\n     }\n \n     // When the user supplies --test and --cfg test, don't implicitly add\n     // another --cfg test\n     #[test]\n     fn test_switch_implies_cfg_test_unless_cfg_test() {\n-        use syntax::symbol::sym;\n         syntax::with_default_globals(|| {\n             let matches = &match optgroups().parse(&[\"--test\".to_string(),\n                                                      \"--cfg=test\".to_string()]) {"}, {"sha": "3ec06b17aff22a66c1a238ee3835c2fb43201c4a", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -91,9 +91,7 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n             call_site: item.span, // use the call site of the static\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(name)),\n-            allow_internal_unstable: Some(vec![\n-                Symbol::intern(\"rustc_attrs\"),\n-            ].into()),\n+            allow_internal_unstable: Some(vec![sym::rustc_attrs].into()),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: self.sess.edition,\n@@ -223,7 +221,7 @@ impl AllocFnFactory<'_> {\n     }\n \n     fn attrs(&self) -> Vec<Attribute> {\n-        let special = Symbol::intern(\"rustc_std_internal_symbol\");\n+        let special = sym::rustc_std_internal_symbol;\n         let special = self.cx.meta_word(self.span, special);\n         vec![self.cx.attribute(self.span, special)]\n     }"}, {"sha": "4ff996d1f5707a2b51379e884544c78d0a492410", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -68,7 +68,7 @@ pub fn add_configuration(\n     sess: &Session,\n     codegen_backend: &dyn CodegenBackend,\n ) {\n-    let tf = Symbol::intern(\"target_feature\");\n+    let tf = sym::target_feature;\n \n     cfg.extend(\n         codegen_backend"}, {"sha": "c2c40ea79e8f5d5f56a143291dd36fc0adf1cb93", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -431,9 +431,7 @@ impl cstore::CStore {\n             let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n             let ext = SyntaxExtension::ProcMacro {\n                 expander: Box::new(BangProcMacro { client }),\n-                allow_internal_unstable: Some(vec![\n-                    Symbol::intern(\"proc_macro_def_site\"),\n-                ].into()),\n+                allow_internal_unstable: Some(vec![sym::proc_macro_def_site].into()),\n                 edition: data.root.edition,\n             };\n             return LoadedMacro::ProcMacro(Lrc::new(ext));"}, {"sha": "bfe30488f9cced9e4b52ce221ef75189f154ad89", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -4944,7 +4944,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // This is less than ideal, it will not suggest a return type span on any\n                 // method called `main`, regardless of whether it is actually the entry point,\n                 // but it will still present it as the reason for the expected type.\n-                Some((decl, ident, ident.name != Symbol::intern(\"main\")))\n+                Some((decl, ident, ident.name != sym::main))\n             }),\n             Node::TraitItem(&hir::TraitItem {\n                 ident, node: hir::TraitItemKind::Method(hir::MethodSig {"}, {"sha": "c47224ca0ce3fe032dba61af4ac8698dc6131b27", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -58,10 +58,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n         call_site: span,\n         def_site: None,\n         format: ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)),\n-        allow_internal_unstable: Some(vec![\n-            Symbol::intern(\"rustc_attrs\"),\n-            Symbol::intern(\"structural_match\"),\n-        ].into()),\n+        allow_internal_unstable: Some(vec![sym::rustc_attrs, sym::structural_match].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: cx.parse_sess.edition,\n@@ -74,7 +71,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n             attrs.push(cx.attribute(span, meta));\n         }\n         if names.contains(&Symbol::intern(\"Copy\")) {\n-            let meta = cx.meta_word(span, Symbol::intern(\"rustc_copy_clone_marker\"));\n+            let meta = cx.meta_word(span, sym::rustc_copy_clone_marker);\n             attrs.push(cx.attribute(span, meta));\n         }\n     });"}, {"sha": "c2a73b662c680b7137f6e70813e98f84fb7f6291", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -938,7 +938,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n             BuiltinDerive(func) => {\n                 expn_info.allow_internal_unstable = Some(vec![\n-                    Symbol::intern(\"rustc_attrs\"),\n+                    sym::rustc_attrs,\n                     Symbol::intern(\"derive_clone_copy\"),\n                     Symbol::intern(\"derive_eq\"),\n                     Symbol::intern(\"libstd_sys_internals\"), // RustcDeserialize and RustcSerialize"}, {"sha": "285c88357a6a8c7dd3a6718e2bf14e945eab2717", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -396,7 +396,7 @@ pub fn compile(\n                         future this will become a hard error. Please use `allow_internal_unstable(\\\n                         foo, bar)` to only allow the `foo` and `bar` features\",\n                     );\n-                    vec![Symbol::intern(\"allow_internal_unstable_backcompat_hack\")].into()\n+                    vec![sym::allow_internal_unstable_backcompat_hack].into()\n                 })\n             );\n         let allow_internal_unsafe = attr::contains_name(&def.attrs, sym::allow_internal_unsafe);"}, {"sha": "e0430ac556341b611c7cd37c0caf748682fcf54c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -5787,7 +5787,7 @@ impl<'a> Parser<'a> {\n             VisibilityKind::Inherited => {}\n             _ => {\n                 let is_macro_rules: bool = match self.token {\n-                    token::Ident(sid, _) => sid.name == Symbol::intern(\"macro_rules\"),\n+                    token::Ident(sid, _) => sid.name == sym::macro_rules,\n                     _ => false,\n                 };\n                 let mut err = if is_macro_rules {"}, {"sha": "eea94f0d19458fa44146fa960121ad0519bc1ec4", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -20,9 +20,7 @@ fn ignored_span(sp: Span, edition: Edition) -> Span {\n         call_site: DUMMY_SP,\n         def_site: None,\n         format: MacroAttribute(Symbol::intern(\"std_inject\")),\n-        allow_internal_unstable: Some(vec![\n-            Symbol::intern(\"prelude_import\"),\n-        ].into()),\n+        allow_internal_unstable: Some(vec![sym::prelude_import].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition,\n@@ -98,7 +96,7 @@ pub fn maybe_inject_crates_ref(\n     krate.module.items.insert(0, P(ast::Item {\n         attrs: vec![ast::Attribute {\n             style: ast::AttrStyle::Outer,\n-            path: ast::Path::from_ident(ast::Ident::new(Symbol::intern(\"prelude_import\"), span)),\n+            path: ast::Path::from_ident(ast::Ident::new(sym::prelude_import, span)),\n             tokens: TokenStream::empty(),\n             id: attr::mk_attr_id(),\n             is_sugared_doc: false,"}, {"sha": "1998ec19f13bf7033e28618d3ca8afc482502d83", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -283,12 +283,8 @@ fn generate_test_harness(sess: &ParseSess,\n     mark.set_expn_info(ExpnInfo {\n         call_site: DUMMY_SP,\n         def_site: None,\n-        format: MacroAttribute(Symbol::intern(\"test_case\")),\n-        allow_internal_unstable: Some(vec![\n-            Symbol::intern(\"main\"),\n-            Symbol::intern(\"test\"),\n-            Symbol::intern(\"rustc_attrs\"),\n-        ].into()),\n+        format: MacroAttribute(sym::test_case),\n+        allow_internal_unstable: Some(vec![sym::main, sym::test, sym::rustc_attrs].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: sess.edition,\n@@ -347,14 +343,14 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     let call_test_main = ecx.stmt_expr(call_test_main);\n \n     // #![main]\n-    let main_meta = ecx.meta_word(sp, Symbol::intern(\"main\"));\n+    let main_meta = ecx.meta_word(sp, sym::main);\n     let main_attr = ecx.attribute(sp, main_meta);\n \n     // extern crate test as test_gensym\n     let test_extern_stmt = ecx.stmt_item(sp, ecx.item(sp,\n         test_id,\n         vec![],\n-        ast::ItemKind::ExternCrate(Some(Symbol::intern(\"test\")))\n+        ast::ItemKind::ExternCrate(Some(sym::test))\n     ));\n \n     // pub fn main() { ... }"}, {"sha": "4d7083c1a790b955abbef10861be3c7f156d0c80", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -11,7 +11,7 @@ use syntax::ext::base::{self, *};\n use syntax::feature_gate;\n use syntax::parse::{self, token};\n use syntax::ptr::P;\n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::{kw, sym, Symbol};\n use syntax::ast::AsmDialect;\n use syntax_pos::Span;\n use syntax::tokenstream;\n@@ -93,7 +93,7 @@ fn parse_inline_asm<'a>(\n         })\n         .unwrap_or(tts.len());\n     let mut p = cx.new_parser_from_tts(&tts[first_colon..]);\n-    let mut asm = Symbol::intern(\"\");\n+    let mut asm = kw::Invalid;\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();\n     let mut inputs = Vec::new();"}, {"sha": "13342c8e28e2ff3bf4d7e22c9ed0b6c2c6bffeeb", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -8,7 +8,7 @@ use syntax::parse::token::{self, Token};\n use syntax::parse::parser::Parser;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::{sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -27,7 +27,7 @@ pub fn expand_assert<'cx>(\n \n     let sp = sp.apply_mark(cx.current_expansion.mark);\n     let panic_call = Mac_ {\n-        path: Path::from_ident(Ident::new(Symbol::intern(\"panic\"), sp)),\n+        path: Path::from_ident(Ident::new(sym::panic, sp)),\n         tts: custom_message.unwrap_or_else(|| {\n             TokenStream::from(TokenTree::Token(\n                 DUMMY_SP,"}, {"sha": "417dd2525d6eaba990587e37413dcf74aa088cd1", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -7,7 +7,7 @@ use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::{Symbol, kw, sym};\n+use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n \n pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n@@ -76,7 +76,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n         _ => cx.span_bug(span, \"#[derive(Clone)] on trait item or impl item\"),\n     }\n \n-    let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n+    let inline = cx.meta_word(span, sym::inline);\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {\n         span,"}, {"sha": "e7d7f136e1853fe7b8338f2b83489f42a840f7eb", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -6,17 +6,17 @@ use syntax::ast::{self, Expr, MetaItem, GenericArg};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::sym;\n use syntax_pos::Span;\n \n pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,\n                           span: Span,\n                           mitem: &MetaItem,\n                           item: &Annotatable,\n                           push: &mut dyn FnMut(Annotatable)) {\n-    let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n-    let hidden = cx.meta_list_item_word(span, Symbol::intern(\"hidden\"));\n-    let doc = cx.meta_list(span, Symbol::intern(\"doc\"), vec![hidden]);\n+    let inline = cx.meta_word(span, sym::inline);\n+    let hidden = cx.meta_list_item_word(span, sym::hidden);\n+    let doc = cx.meta_list(span, sym::doc, vec![hidden]);\n     let attrs = vec![cx.attribute(span, inline), cx.attribute(span, doc)];\n     let trait_def = TraitDef {\n         span,"}, {"sha": "282cfa5a4bfef4115f093eee1106150b20d21f69", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -6,15 +6,15 @@ use syntax::ast::{self, Expr, MetaItem};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::sym;\n use syntax_pos::Span;\n \n pub fn expand_deriving_ord(cx: &mut ExtCtxt<'_>,\n                            span: Span,\n                            mitem: &MetaItem,\n                            item: &Annotatable,\n                            push: &mut dyn FnMut(Annotatable)) {\n-    let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n+    let inline = cx.meta_word(span, sym::inline);\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {\n         span,"}, {"sha": "6172f27261ecf730971d8d11994208d7dc4cf84c", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::{BinOpKind, Expr, MetaItem};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::sym;\n use syntax_pos::Span;\n \n pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt<'_>,\n@@ -62,7 +62,7 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt<'_>,\n \n     macro_rules! md {\n         ($name:expr, $f:ident) => { {\n-            let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n+            let inline = cx.meta_word(span, sym::inline);\n             let attrs = vec![cx.attribute(span, inline)];\n             MethodDef {\n                 name: $name,"}, {"sha": "abfa79c2b4daffecd21b13f718283c06f71b2234", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::{self, BinOpKind, Expr, MetaItem};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::sym;\n use syntax_pos::Span;\n \n pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt<'_>,\n@@ -18,7 +18,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt<'_>,\n                                    push: &mut dyn FnMut(Annotatable)) {\n     macro_rules! md {\n         ($name:expr, $op:expr, $equal:expr) => { {\n-            let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n+            let inline = cx.meta_word(span, sym::inline);\n             let attrs = vec![cx.attribute(span, inline)];\n             MethodDef {\n                 name: $name,\n@@ -42,7 +42,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt<'_>,\n                                     vec![Box::new(ordering_ty)],\n                                     PathKind::Std));\n \n-    let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n+    let inline = cx.meta_word(span, sym::inline);\n     let attrs = vec![cx.attribute(span, inline)];\n \n     let partial_cmp_def = MethodDef {"}, {"sha": "dec4c2dfc3b5eb50ccfdf05b8a84d6540bbf8df8", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -9,6 +9,7 @@ use syntax::ast::{Expr, MetaItem};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n+use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, Span};\n \n pub fn expand_deriving_debug(cx: &mut ExtCtxt<'_>,\n@@ -82,7 +83,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n                 let expr = cx.expr_method_call(span,\n                                                 builder_expr.clone(),\n-                                                Ident::from_str(\"field\"),\n+                                                Ident::with_empty_ctxt(sym::field),\n                                                 vec![field]);\n \n                 // Use `let _ = expr;` to avoid triggering the\n@@ -106,7 +107,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n                 let field = cx.expr_addr_of(field.span, field);\n                 let expr = cx.expr_method_call(span,\n                                                 builder_expr.clone(),\n-                                                Ident::from_str(\"field\"),\n+                                                Ident::with_empty_ctxt(sym::field),\n                                                 vec![name, field]);\n                 stmts.push(stmt_let_undescore(cx, span, expr));\n             }"}, {"sha": "b42dde16420b073d8dad3c3b9af808076b507243", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::{Expr, MetaItem};\n use syntax::ext::base::{Annotatable, DummyResult, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::sym;\n use syntax::span_err;\n use syntax_pos::Span;\n \n@@ -15,7 +15,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt<'_>,\n                                mitem: &MetaItem,\n                                item: &Annotatable,\n                                push: &mut dyn FnMut(Annotatable)) {\n-    let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n+    let inline = cx.meta_word(span, sym::inline);\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {\n         span,"}, {"sha": "7e3082a87d99252b532824d96d10a95115168091", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -666,14 +666,13 @@ impl<'a> TraitDef<'a> {\n         let self_type = cx.ty_path(path);\n \n         let attr = cx.attribute(self.span,\n-                                cx.meta_word(self.span,\n-                                             Symbol::intern(\"automatically_derived\")));\n+                                cx.meta_word(self.span, sym::automatically_derived));\n         // Just mark it now since we know that it'll end up used downstream\n         attr::mark_used(&attr);\n         let opt_trait_ref = Some(trait_ref);\n         let unused_qual = {\n             let word = cx.meta_list_item_word(self.span, Symbol::intern(\"unused_qualifications\"));\n-            cx.attribute(self.span, cx.meta_list(self.span, Symbol::intern(\"allow\"), vec![word]))\n+            cx.attribute(self.span, cx.meta_list(self.span, sym::allow, vec![word]))\n         };\n \n         let mut a = vec![attr, unused_qual];"}, {"sha": "eff71bc969ee7cdb036116929fc88db3d54cc308", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -145,7 +145,7 @@ fn call_intrinsic(cx: &ExtCtxt<'_>,\n         span = span.with_ctxt(cx.backtrace());\n     } else { // Avoid instability errors with user defined curstom derives, cc #36316\n         let mut info = cx.current_expansion.mark.expn_info().unwrap();\n-        info.allow_internal_unstable = Some(vec![Symbol::intern(\"core_intrinsics\")].into());\n+        info.allow_internal_unstable = Some(vec![sym::core_intrinsics].into());\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(info);\n         span = span.with_ctxt(SyntaxContext::empty().apply_mark(mark));"}, {"sha": "fc0015442750123062ad42535a0fca8a2ae18238", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -42,8 +42,8 @@ pub mod proc_macro_impl;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n use syntax::ext::base::{MacroExpanderFn, NormalTT, NamedSyntaxExtension, MultiModifier};\n-use syntax::symbol::Symbol;\n use syntax::edition::Edition;\n+use syntax::symbol::{sym, Symbol};\n \n pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                          user_exts: Vec<NamedSyntaxExtension>,\n@@ -93,30 +93,26 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n         assert: assert::expand_assert,\n     }\n \n-    register(Symbol::intern(\"test_case\"), MultiModifier(Box::new(test_case::expand)));\n-    register(Symbol::intern(\"test\"), MultiModifier(Box::new(test::expand_test)));\n-    register(Symbol::intern(\"bench\"), MultiModifier(Box::new(test::expand_bench)));\n+    register(sym::test_case, MultiModifier(Box::new(test_case::expand)));\n+    register(sym::test, MultiModifier(Box::new(test::expand_test)));\n+    register(sym::bench, MultiModifier(Box::new(test::expand_bench)));\n \n     // format_args uses `unstable` things internally.\n     register(Symbol::intern(\"format_args\"),\n              NormalTT {\n                 expander: Box::new(format::expand_format_args),\n                 def_info: None,\n-                allow_internal_unstable: Some(vec![\n-                    Symbol::intern(\"fmt_internals\"),\n-                ].into()),\n+                allow_internal_unstable: Some(vec![sym::fmt_internals].into()),\n                 allow_internal_unsafe: false,\n                 local_inner_macros: false,\n                 unstable_feature: None,\n                 edition,\n             });\n-    register(Symbol::intern(\"format_args_nl\"),\n+    register(sym::format_args_nl,\n              NormalTT {\n                  expander: Box::new(format::expand_format_args_nl),\n                  def_info: None,\n-                 allow_internal_unstable: Some(vec![\n-                     Symbol::intern(\"fmt_internals\"),\n-                 ].into()),\n+                 allow_internal_unstable: Some(vec![sym::fmt_internals].into()),\n                  allow_internal_unsafe: false,\n                  local_inner_macros: false,\n                  unstable_feature: None,"}, {"sha": "5b8f4f35f2dd10f9f57d39a2617b8d4d887a0e10", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -351,9 +351,9 @@ fn mk_decls(\n     mark.set_expn_info(ExpnInfo {\n         call_site: DUMMY_SP,\n         def_site: None,\n-        format: MacroAttribute(Symbol::intern(\"proc_macro\")),\n+        format: MacroAttribute(sym::proc_macro),\n         allow_internal_unstable: Some(vec![\n-            Symbol::intern(\"rustc_attrs\"),\n+            sym::rustc_attrs,\n             Symbol::intern(\"proc_macro_internals\"),\n         ].into()),\n         allow_internal_unsafe: false,\n@@ -420,7 +420,7 @@ fn mk_decls(\n         ast::Mutability::Immutable,\n         cx.expr_vec_slice(span, decls),\n     ).map(|mut i| {\n-        let attr = cx.meta_word(span, Symbol::intern(\"rustc_proc_macro_decls\"));\n+        let attr = cx.meta_word(span, sym::rustc_proc_macro_decls);\n         i.attrs.push(cx.attribute(span, attr));\n         i.vis = respan(span, ast::VisibilityKind::Public);\n         i"}, {"sha": "53730d2d080223010ac2892edfc86fd94f9af206", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -14,7 +14,7 @@ use syntax::parse::lexer::comments;\n use syntax::parse::{self, token, ParseSess};\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use syntax_pos::hygiene::{SyntaxContext, Transparency};\n-use syntax_pos::symbol::{kw, Symbol};\n+use syntax_pos::symbol::{kw, sym, Symbol};\n use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n \n trait FromInternal<T> {\n@@ -159,7 +159,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n                     escaped.extend(ch.escape_debug());\n                 }\n                 let stream = vec![\n-                    Ident(ast::Ident::new(Symbol::intern(\"doc\"), span), false),\n+                    Ident(ast::Ident::new(sym::doc, span), false),\n                     Eq,\n                     Token::lit(token::Str, Symbol::intern(&escaped), None),\n                 ]"}, {"sha": "c20dc6cb2d7cdbb9ecd9f297384f2c7e7d926538", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -65,11 +65,8 @@ pub fn expand_test_or_bench(\n         mark.set_expn_info(ExpnInfo {\n             call_site: DUMMY_SP,\n             def_site: None,\n-            format: MacroAttribute(Symbol::intern(\"test\")),\n-            allow_internal_unstable: Some(vec![\n-                Symbol::intern(\"rustc_attrs\"),\n-                Symbol::intern(\"test\"),\n-            ].into()),\n+            format: MacroAttribute(sym::test),\n+            allow_internal_unstable: Some(vec![sym::rustc_attrs, sym::test].into()),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: cx.parse_sess.edition,\n@@ -130,11 +127,11 @@ pub fn expand_test_or_bench(\n     let mut test_const = cx.item(sp, ast::Ident::new(item.ident.name, sp).gensym(),\n         vec![\n             // #[cfg(test)]\n-            cx.attribute(attr_sp, cx.meta_list(attr_sp, Symbol::intern(\"cfg\"), vec![\n-                cx.meta_list_item_word(attr_sp, Symbol::intern(\"test\"))\n+            cx.attribute(attr_sp, cx.meta_list(attr_sp, sym::cfg, vec![\n+                cx.meta_list_item_word(attr_sp, sym::test)\n             ])),\n             // #[rustc_test_marker]\n-            cx.attribute(attr_sp, cx.meta_word(attr_sp, Symbol::intern(\"rustc_test_marker\"))),\n+            cx.attribute(attr_sp, cx.meta_word(attr_sp, sym::rustc_test_marker)),\n         ],\n         // const $ident: test::TestDescAndFn =\n         ast::ItemKind::Const(cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n@@ -180,7 +177,7 @@ pub fn expand_test_or_bench(\n     let test_extern = cx.item(sp,\n         test_id,\n         vec![],\n-        ast::ItemKind::ExternCrate(Some(Symbol::intern(\"test\")))\n+        ast::ItemKind::ExternCrate(Some(sym::test))\n     );\n \n     log::debug!(\"Synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));"}, {"sha": "cffecdd0f18e79fdb02734b112b205b028a1e84b", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -14,7 +14,7 @@ use syntax::ext::build::AstBuilder;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ast;\n use syntax::source_map::respan;\n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, Span};\n use syntax::source_map::{ExpnInfo, MacroAttribute};\n use syntax::feature_gate;\n@@ -40,11 +40,8 @@ pub fn expand(\n         mark.set_expn_info(ExpnInfo {\n             call_site: DUMMY_SP,\n             def_site: None,\n-            format: MacroAttribute(Symbol::intern(\"test_case\")),\n-            allow_internal_unstable: Some(vec![\n-                Symbol::intern(\"test\"),\n-                Symbol::intern(\"rustc_attrs\"),\n-            ].into()),\n+            format: MacroAttribute(sym::test_case),\n+            allow_internal_unstable: Some(vec![sym::test, sym::rustc_attrs].into()),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: ecx.parse_sess.edition,\n@@ -59,7 +56,7 @@ pub fn expand(\n         item.ident = item.ident.gensym();\n         item.attrs.push(\n             ecx.attribute(sp,\n-                ecx.meta_word(sp, Symbol::intern(\"rustc_test_marker\")))\n+                ecx.meta_word(sp, sym::rustc_test_marker))\n         );\n         item\n     });"}, {"sha": "30b342a11d8c2c3edf2386bafe341310903d6a13", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26451ef7b5e00887dc8f27717ff34262df23d655/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=26451ef7b5e00887dc8f27717ff34262df23d655", "patch": "@@ -145,6 +145,7 @@ symbols! {\n         automatically_derived,\n         avx512_target_feature,\n         await_macro,\n+        bench,\n         bin,\n         bind_by_move_pattern_guards,\n         block,\n@@ -252,8 +253,10 @@ symbols! {\n         f64,\n         feature,\n         ffi_returns_twice,\n+        field,\n         field_init_shorthand,\n         file,\n+        fmt_internals,\n         fn_must_use,\n         forbid,\n         format_args_nl,\n@@ -405,6 +408,7 @@ symbols! {\n         Output,\n         overlapping_marker_traits,\n         packed,\n+        panic,\n         panic_handler,\n         panic_impl,\n         panic_implementation,\n@@ -430,6 +434,7 @@ symbols! {\n         proc_dash_macro: \"proc-macro\",\n         proc_macro,\n         proc_macro_attribute,\n+        proc_macro_def_site,\n         proc_macro_derive,\n         proc_macro_expr,\n         proc_macro_gen,\n@@ -568,6 +573,7 @@ symbols! {\n         test,\n         test_2018_feature,\n         test_accepted_feature,\n+        test_case,\n         test_removed_feature,\n         test_runner,\n         thread_local,"}]}