{"sha": "d6b42c2463ddfc7d16b9199f7725e704c94c2acf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YjQyYzI0NjNkZGZjN2QxNmI5MTk5Zjc3MjVlNzA0Yzk0YzJhY2Y=", "commit": {"author": {"name": "root", "email": "root@localhost", "date": "2014-07-17T16:03:34Z"}, "committer": {"name": "root", "email": "root@localhost", "date": "2014-07-17T18:21:53Z"}, "message": "str: Add better tests for string slice's Chars iterator\n\nTest using for ch s.chars() { black_box(ch) } to have a test that should\nforce the iterator to run its full decoding computations.", "tree": {"sha": "0ef58d9bca37ebe1cc20c72f7edc93554a860098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ef58d9bca37ebe1cc20c72f7edc93554a860098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6b42c2463ddfc7d16b9199f7725e704c94c2acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b42c2463ddfc7d16b9199f7725e704c94c2acf", "html_url": "https://github.com/rust-lang/rust/commit/d6b42c2463ddfc7d16b9199f7725e704c94c2acf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6b42c2463ddfc7d16b9199f7725e704c94c2acf/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c7ee9c56f7c768be94c89f699527b44be664ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c7ee9c56f7c768be94c89f699527b44be664ab", "html_url": "https://github.com/rust-lang/rust/commit/06c7ee9c56f7c768be94c89f699527b44be664ab"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "f1bb3b40804100f7ddecfb5ad193d70b21fee8be", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d6b42c2463ddfc7d16b9199f7725e704c94c2acf/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b42c2463ddfc7d16b9199f7725e704c94c2acf/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=d6b42c2463ddfc7d16b9199f7725e704c94c2acf", "patch": "@@ -2240,16 +2240,26 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use test::Bencher;\n+    use test::black_box;\n     use super::*;\n+    use std::option::{None, Some};\n     use std::iter::{Iterator, DoubleEndedIterator};\n     use std::collections::Collection;\n \n     #[bench]\n     fn char_iterator(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-        let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.chars().count(), len));\n+        b.iter(|| s.chars().count());\n+    }\n+\n+    #[bench]\n+    fn char_iterator_for(b: &mut Bencher) {\n+        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+\n+        b.iter(|| {\n+            for ch in s.chars() { black_box(ch) }\n+        });\n     }\n \n     #[bench]\n@@ -2260,17 +2270,24 @@ mod bench {\n         Mary had a little lamb, Little lamb\n         Mary had a little lamb, Little lamb\n         Mary had a little lamb, Little lamb\";\n-        let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.chars().count(), len));\n+        b.iter(|| s.chars().count());\n     }\n \n     #[bench]\n     fn char_iterator_rev(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-        let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.chars().rev().count(), len));\n+        b.iter(|| s.chars().rev().count());\n+    }\n+\n+    #[bench]\n+    fn char_iterator_rev_for(b: &mut Bencher) {\n+        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+\n+        b.iter(|| {\n+            for ch in s.chars().rev() { black_box(ch) }\n+        });\n     }\n \n     #[bench]"}]}