{"sha": "d992736e796501b2a5ae232644924a3dfefede92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OTI3MzZlNzk2NTAxYjJhNWFlMjMyNjQ0OTI0YTNkZmVmZWRlOTI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:35:15Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:36:14Z"}, "message": "Remove unused", "tree": {"sha": "5af343156b092f0e2a3cd0c26390428d1f1a3983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af343156b092f0e2a3cd0c26390428d1f1a3983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d992736e796501b2a5ae232644924a3dfefede92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d992736e796501b2a5ae232644924a3dfefede92", "html_url": "https://github.com/rust-lang/rust/commit/d992736e796501b2a5ae232644924a3dfefede92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d992736e796501b2a5ae232644924a3dfefede92/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8040f4a5e3792f95b3194e21b3f6d375fb7499c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8040f4a5e3792f95b3194e21b3f6d375fb7499c5", "html_url": "https://github.com/rust-lang/rust/commit/8040f4a5e3792f95b3194e21b3f6d375fb7499c5"}], "stats": {"total": 89, "additions": 20, "deletions": 69}, "files": [{"sha": "e25ef866d7ba520584da85cab5df9fe705ce5e73", "filename": "crates/hir_ty/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -14,7 +14,7 @@ use smallvec::SmallVec;\n use crate::{\n     db::HirDatabase, primitive, to_assoc_type_id, to_chalk_trait_id, utils::generics, Binders,\n     CallableSig, FnPointer, FnSig, FnSubst, GenericArg, Interner, ProjectionTy, Substitution,\n-    TraitRef, Ty, TyDefId, TyExt, TyKind, TypeWalk, ValueTyDefId,\n+    TraitRef, Ty, TyDefId, TyExt, TyKind, ValueTyDefId,\n };\n \n /// This is a builder for `Ty` or anything that needs a `Substitution`."}, {"sha": "f27dee3fdedf42c343b4228b3caf294008fcf88c", "filename": "crates/hir_ty/src/chalk_cast.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -1,14 +1,8 @@\n //! Implementations of the Chalk `Cast` trait for our types.\n \n-use chalk_ir::{\n-    cast::{Cast, CastTo},\n-    interner::HasInterner,\n-};\n+use chalk_ir::interner::HasInterner;\n \n-use crate::{\n-    AliasEq, CallableSig, DomainGoal, GenericArg, GenericArgData, Interner, PolyFnSig,\n-    ReturnTypeImplTraits, TraitRef, Ty, WhereClause,\n-};\n+use crate::{CallableSig, ReturnTypeImplTraits};\n \n macro_rules! has_interner {\n     ($t:ty) => {\n@@ -18,15 +12,5 @@ macro_rules! has_interner {\n     };\n }\n \n-macro_rules! transitive_impl {\n-    ($a:ty, $b:ty, $c:ty) => {\n-        impl CastTo<$c> for $a {\n-            fn cast_to(self, interner: &Interner) -> $c {\n-                self.cast::<$b>(interner).cast(interner)\n-            }\n-        }\n-    };\n-}\n-\n has_interner!(CallableSig);\n has_interner!(ReturnTypeImplTraits);"}, {"sha": "bf2da2d4aee13f6ac73474d15736e4096ab3e67d", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -38,7 +38,6 @@ use syntax::SmolStr;\n \n use super::{\n     DomainGoal, Guidance, InEnvironment, ProjectionTy, Solution, TraitEnvironment, TraitRef, Ty,\n-    TypeWalk,\n };\n use crate::{\n     db::HirDatabase, fold_tys, infer::diagnostics::InferenceDiagnostic,"}, {"sha": "1f463a4255671033dc35f6275cd0b7f03ad01428", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -73,11 +73,11 @@ impl<'a> InferenceContext<'a> {\n         // Pointer weakening and function to pointer\n         match (from_ty.kind(&Interner), to_ty.kind(&Interner)) {\n             // `*mut T` -> `*const T`\n-            (TyKind::Raw(m1, inner), TyKind::Raw(m2 @ Mutability::Not, ..)) => {\n+            (TyKind::Raw(_, inner), TyKind::Raw(m2 @ Mutability::Not, ..)) => {\n                 from_ty = TyKind::Raw(*m2, inner.clone()).intern(&Interner);\n             }\n             // `&mut T` -> `&T`\n-            (TyKind::Ref(m1, lt, inner), TyKind::Ref(m2 @ Mutability::Not, ..)) => {\n+            (TyKind::Ref(_, lt, inner), TyKind::Ref(m2 @ Mutability::Not, ..)) => {\n                 from_ty = TyKind::Ref(*m2, lt.clone(), inner.clone()).intern(&Interner);\n             }\n             // `&T` -> `*const T`"}, {"sha": "cbbfa8b5c3a25fcf5eddcdc418aa94c6a128e773", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -24,7 +24,6 @@ use crate::{\n     utils::{generics, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n     ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n-    TypeWalk,\n };\n \n use super::{"}, {"sha": "a887e20b0b08aabbfb7607f8804dae85d1856b32", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -12,7 +12,7 @@ use super::{DomainGoal, InferenceContext};\n use crate::{\n     fold_tys, static_lifetime, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds,\n     DebruijnIndex, FnPointer, FnSubst, InEnvironment, InferenceVar, Interner, Scalar, Substitution,\n-    Ty, TyExt, TyKind, TypeWalk, WhereClause,\n+    Ty, TyExt, TyKind, WhereClause,\n };\n \n impl<'a> InferenceContext<'a> {"}, {"sha": "874c9541139ee7ade5293678eeb46bd292c56821", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -1,8 +1,6 @@\n //! The type system. We currently use this to infer types for completion, hover\n //! information and various assists.\n \n-#![allow(unused)]\n-\n #[allow(unused)]\n macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n@@ -34,7 +32,6 @@ use std::sync::Arc;\n \n use base_db::salsa;\n use chalk_ir::{\n-    cast::{CastTo, Caster},\n     fold::{Fold, Shift},\n     interner::HasInterner,\n     UintTy,"}, {"sha": "8a22d9ea35f5e482645a33765b542d005019d501", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -35,7 +35,7 @@ use crate::{\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n     FnSubst, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n     QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n-    TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, TypeWalk, WhereClause,\n+    TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, WhereClause,\n };\n \n #[derive(Debug)]"}, {"sha": "be3e4f09ab164196c00f4a922f7600b5811bca62", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -6,11 +6,7 @@ use std::{iter, sync::Arc};\n \n use arrayvec::ArrayVec;\n use base_db::CrateId;\n-use chalk_ir::{\n-    cast::Cast,\n-    fold::{Fold, Folder},\n-    Fallible, Mutability, UniverseIndex,\n-};\n+use chalk_ir::{cast::Cast, Mutability, UniverseIndex};\n use hir_def::{\n     lang_item::LangItemTarget, nameres::DefMap, AssocContainerId, AssocItemId, FunctionId,\n     GenericDefId, HasModule, ImplId, Lookup, ModuleId, TraitId,\n@@ -25,9 +21,9 @@ use crate::{\n     primitive::{self, FloatTy, IntTy, UintTy},\n     static_lifetime,\n     utils::all_super_traits,\n-    AdtId, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n+    AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n     InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, TraitRefExt, Ty, TyBuilder,\n-    TyExt, TyKind, TypeWalk,\n+    TyExt, TyKind,\n };\n \n /// This is used as a key for indexing impls."}, {"sha": "1cda72d2215d852141e5c427935e87aca6c7e27b", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     Solution, TraitRefExt, Ty, TyKind, WhereClause,\n };\n \n-use self::chalk::{from_chalk, Interner, ToChalk};\n+use self::chalk::Interner;\n \n pub(crate) mod chalk;\n \n@@ -101,8 +101,7 @@ pub(crate) fn trait_solve_query(\n     // We currently don't deal with universes (I think / hope they're not yet\n     // relevant for our use cases?)\n     let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };\n-    let solution = solve(db, krate, &u_canonical);\n-    solution.map(|solution| solution_from_chalk(db, solution))\n+    solve(db, krate, &u_canonical)\n }\n \n fn solve(\n@@ -170,13 +169,6 @@ fn is_chalk_print() -> bool {\n     std::env::var(\"CHALK_PRINT\").is_ok()\n }\n \n-fn solution_from_chalk(\n-    db: &dyn HirDatabase,\n-    solution: chalk_solve::Solution<Interner>,\n-) -> Solution {\n-    solution\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum FnTrait {\n     FnOnce,"}, {"sha": "b8c390b2eab8d04e7b00ba9eb9b0c13c2f848d70", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use log::debug;\n \n-use chalk_ir::{fold::shift::Shift, interner::HasInterner, CanonicalVarKinds};\n+use chalk_ir::{fold::shift::Shift, CanonicalVarKinds};\n use chalk_solve::rust_ir::{self, OpaqueTyDatumBound, WellKnownTrait};\n \n use base_db::{salsa::InternKey, CrateId};"}, {"sha": "7818f6387eb28347f3d82f8a53066429d19133da", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -3,16 +3,15 @@\n //! Chalk (in both directions); plus some helper functions for more specialized\n //! conversions.\n \n-use chalk_ir::{cast::Cast, interner::HasInterner};\n+use chalk_ir::cast::Cast;\n use chalk_solve::rust_ir;\n \n use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n-    db::HirDatabase, static_lifetime, AliasTy, CallableDefId, Canonical, ConstrainedSubst,\n-    DomainGoal, FnPointer, GenericArg, InEnvironment, OpaqueTy, ProjectionTy, ProjectionTyExt,\n-    QuantifiedWhereClause, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n+    db::HirDatabase, AliasTy, CallableDefId, ProjectionTyExt, QuantifiedWhereClause, Substitution,\n+    Ty, WhereClause,\n };\n \n use super::interner::*;"}, {"sha": "5f6cb052af73ca9c68a6c33ad5a3f4c7ef9ec946", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -1,6 +1,5 @@\n //! Helper functions for working with def, which don't need to be a separate\n //! query, but can't be computed directly from `*Data` (ie, which need a `db`).\n-use std::sync::Arc;\n \n use chalk_ir::{fold::Shift, BoundVar, DebruijnIndex};\n use hir_def::{\n@@ -16,9 +15,7 @@ use hir_def::{\n };\n use hir_expand::name::{name, Name};\n \n-use crate::{\n-    db::HirDatabase, Interner, Substitution, TraitRef, TraitRefExt, TyKind, TypeWalk, WhereClause,\n-};\n+use crate::{db::HirDatabase, Interner, Substitution, TraitRef, TraitRefExt, TyKind, WhereClause};\n \n fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n     let resolver = trait_.resolver(db);\n@@ -137,15 +134,6 @@ pub(super) fn associated_type_by_name_including_super_traits(\n     })\n }\n \n-/// Helper for mutating `Arc<[T]>` (i.e. `Arc::make_mut` for Arc slices).\n-/// The underlying values are cloned if there are other strong references.\n-pub(crate) fn make_mut_slice<T: Clone>(a: &mut Arc<[T]>) -> &mut [T] {\n-    if Arc::get_mut(a).is_none() {\n-        *a = a.iter().cloned().collect();\n-    }\n-    Arc::get_mut(a).unwrap()\n-}\n-\n pub(crate) fn generics(db: &dyn DefDatabase, def: GenericDefId) -> Generics {\n     let parent_generics = parent_generic_def(db, def).map(|def| Box::new(generics(db, def)));\n     Generics { def, params: db.generic_params(def), parent_generics }"}, {"sha": "6ef1d53368bc4048203fb094cfdce96a11589836", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d992736e796501b2a5ae232644924a3dfefede92/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=d992736e796501b2a5ae232644924a3dfefede92", "patch": "@@ -1,14 +1,11 @@\n //! The `TypeWalk` trait (probably to be replaced by Chalk's `Fold` and\n //! `Visit`).\n \n-use std::mem;\n-\n-use chalk_ir::{interner::HasInterner, DebruijnIndex};\n+use chalk_ir::interner::HasInterner;\n \n use crate::{\n-    utils::make_mut_slice, AliasEq, AliasTy, Binders, CallableSig, FnSubst, GenericArg,\n-    GenericArgData, Interner, OpaqueTy, ProjectionTy, Substitution, TraitRef, Ty, TyKind,\n-    WhereClause,\n+    AliasEq, AliasTy, Binders, CallableSig, FnSubst, GenericArg, GenericArgData, Interner,\n+    OpaqueTy, ProjectionTy, Substitution, TraitRef, Ty, TyKind, WhereClause,\n };\n \n /// This allows walking structures that contain types to do something with those"}]}