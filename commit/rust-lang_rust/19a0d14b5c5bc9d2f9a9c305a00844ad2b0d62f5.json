{"sha": "19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YTBkMTRiNWM1YmM5ZDJmOWE5YzMwNWEwMDg0NGFkMmIwZDYyZjU=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-01T19:51:54Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:32Z"}, "message": "Add notes about functions that are not currently used", "tree": {"sha": "478ae40f998b7de5c604b88b6086b424281fa8a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/478ae40f998b7de5c604b88b6086b424281fa8a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5", "html_url": "https://github.com/rust-lang/rust/commit/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dfa486d4a18b7a6e514e589771f52c43eff4f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dfa486d4a18b7a6e514e589771f52c43eff4f3b", "html_url": "https://github.com/rust-lang/rust/commit/7dfa486d4a18b7a6e514e589771f52c43eff4f3b"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "2a0c51f2afd8e9ef2ea5b94ff8b7512c46c8bb37", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5", "patch": "@@ -87,7 +87,7 @@ macro_rules! def_regs {\n                 match name {\n                     $(\n                         $($alias)|* | $reg_name => {\n-                            $($filter(_arch, &mut _has_feature)?;)?\n+                            $($filter(_arch, &mut _has_feature, false)?;)?\n                             Ok(Self::$reg)\n                         }\n                     )*\n@@ -109,7 +109,7 @@ macro_rules! def_regs {\n         ) {\n             use super::{InlineAsmReg, InlineAsmRegClass};\n             $(\n-                if $($filter(_arch, &mut _has_feature).is_ok() &&)? true {\n+                if $($filter(_arch, &mut _has_feature, true).is_ok() &&)? true {\n                     if let Some(set) = map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n                         set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                     }\n@@ -239,6 +239,8 @@ impl InlineAsmReg {\n         })\n     }\n \n+    // NOTE: This function isn't used at the moment, but is needed to support\n+    // falling back to an external assembler.\n     pub fn emit(\n         self,\n         out: &mut dyn fmt::Write,\n@@ -542,6 +544,8 @@ impl fmt::Display for InlineAsmType {\n /// registers in each register class. A particular register may be allocatable\n /// from multiple register classes, in which case it will appear multiple times\n /// in the map.\n+// NOTE: This function isn't used at the moment, but is needed to support\n+// falling back to an external assembler.\n pub fn allocatable_registers(\n     arch: InlineAsmArch,\n     has_feature: impl FnMut(&str) -> bool,"}, {"sha": "3ff542247ff02c4a438e413c5ce637d46fa33ec3", "filename": "src/librustc_target/asm/riscv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5/src%2Flibrustc_target%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5/src%2Flibrustc_target%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Friscv.rs?ref=19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5", "patch": "@@ -50,6 +50,7 @@ impl RiscVInlineAsmRegClass {\n fn not_e(\n     _arch: InlineAsmArch,\n     mut has_feature: impl FnMut(&str) -> bool,\n+    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if has_feature(\"e\") {\n         Err(\"register can't be used with the `e` target feature\")"}, {"sha": "065bb14966f322b73749a33403f3c44bc0ab0f37", "filename": "src/librustc_target/asm/x86.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5/src%2Flibrustc_target%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5/src%2Flibrustc_target%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fx86.rs?ref=19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5", "patch": "@@ -131,6 +131,7 @@ impl X86InlineAsmRegClass {\n fn x86_64_only(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n+    _allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => Err(\"register is only available on x86_64\"),\n@@ -139,6 +140,20 @@ fn x86_64_only(\n     }\n }\n \n+fn high_byte(\n+    arch: InlineAsmArch,\n+    _has_feature: impl FnMut(&str) -> bool,\n+    allocating: bool,\n+) -> Result<(), &'static str> {\n+    match arch {\n+        InlineAsmArch::X86_64 if allocating => {\n+            // The error message isn't actually used...\n+            Err(\"high byte registers are not allocated by reg_byte\")\n+        }\n+        _ => Ok(()),\n+    }\n+}\n+\n def_regs! {\n     X86 X86InlineAsmReg X86InlineAsmRegClass {\n         ax: reg, reg_abcd = [\"ax\", \"eax\", \"rax\"],\n@@ -156,13 +171,13 @@ def_regs! {\n         r14: reg = [\"r14\", \"r14w\", \"r14d\"] % x86_64_only,\n         r15: reg = [\"r15\", \"r15w\", \"r15d\"] % x86_64_only,\n         al: reg_byte = [\"al\"],\n-        ah: reg_byte = [\"ah\"],\n+        ah: reg_byte = [\"ah\"] % high_byte,\n         bl: reg_byte = [\"bl\"],\n-        bh: reg_byte = [\"bh\"],\n+        bh: reg_byte = [\"bh\"] % high_byte,\n         cl: reg_byte = [\"cl\"],\n-        ch: reg_byte = [\"ch\"],\n+        ch: reg_byte = [\"ch\"] % high_byte,\n         dl: reg_byte = [\"dl\"],\n-        dh: reg_byte = [\"dh\"],\n+        dh: reg_byte = [\"dh\"] % high_byte,\n         sil: reg_byte = [\"sil\"] % x86_64_only,\n         dil: reg_byte = [\"dil\"] % x86_64_only,\n         r8b: reg_byte = [\"r8b\"] % x86_64_only,"}]}