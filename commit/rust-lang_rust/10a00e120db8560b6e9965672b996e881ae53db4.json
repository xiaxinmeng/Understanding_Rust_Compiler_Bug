{"sha": "10a00e120db8560b6e9965672b996e881ae53db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYTAwZTEyMGRiODU2MGI2ZTk5NjU2NzJiOTk2ZTg4MWFlNTNkYjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-02T14:14:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-06T11:58:17Z"}, "message": "Make sure feature gate errors are recoverable (take 2)", "tree": {"sha": "0f1e1d0a96770d772ea825ae26f50e49da55ad05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1e1d0a96770d772ea825ae26f50e49da55ad05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a00e120db8560b6e9965672b996e881ae53db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a00e120db8560b6e9965672b996e881ae53db4", "html_url": "https://github.com/rust-lang/rust/commit/10a00e120db8560b6e9965672b996e881ae53db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a00e120db8560b6e9965672b996e881ae53db4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af2c159cc38f251a8e7d43cf1f98806392fbddcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2c159cc38f251a8e7d43cf1f98806392fbddcf", "html_url": "https://github.com/rust-lang/rust/commit/af2c159cc38f251a8e7d43cf1f98806392fbddcf"}], "stats": {"total": 372, "additions": 244, "deletions": 128}, "files": [{"sha": "a2c96e7cf9f662d1897c7010002a878023c5cdca", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -2839,16 +2839,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n                 && trait1_is_empty\n                 && trait2_is_empty\n-        } else if self.features().marker_trait_attr {\n+        } else {\n             let is_marker_impl = |def_id: DefId| -> bool {\n                 let trait_ref = self.impl_trait_ref(def_id);\n                 trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)\n             };\n             self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n                 && is_marker_impl(def_id1)\n                 && is_marker_impl(def_id2)\n-        } else {\n-            false\n         };\n \n         if is_legit {"}, {"sha": "0204d041a242044c14bbdb506a12ed102cce985d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1098,23 +1098,20 @@ where\n         ast_validation::check_crate(sess, &krate)\n     });\n \n-    time(sess, \"name resolution\", || -> CompileResult {\n+    time(sess, \"name resolution\", || {\n         resolver.resolve_crate(&krate);\n-        Ok(())\n-    })?;\n+    });\n \n     // Needs to go *after* expansion to be able to check the results of macro expansion.\n     time(sess, \"complete gated feature checking\", || {\n-        sess.track_errors(|| {\n-            syntax::feature_gate::check_crate(\n-                &krate,\n-                &sess.parse_sess,\n-                &sess.features_untracked(),\n-                &attributes,\n-                sess.opts.unstable_features,\n-            );\n-        })\n-    })?;\n+        syntax::feature_gate::check_crate(\n+            &krate,\n+            &sess.parse_sess,\n+            &sess.features_untracked(),\n+            &attributes,\n+            sess.opts.unstable_features,\n+        );\n+    });\n \n     // Lower ast -> hir.\n     // First, we need to collect the dep_graph."}, {"sha": "0dceba28b6ec388e7c99d27549a8facb0305dcdd", "filename": "src/test/ui/conditional-compilation/cfg-attr-crate-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,8 +1,8 @@\n-//\n-// compile-flags: --cfg broken\n-\n // https://github.com/rust-lang/rust/issues/21833#issuecomment-72353044\n \n+// compile-flags: --cfg broken\n+\n+#![crate_type = \"lib\"]\n #![cfg_attr(broken, no_core)] //~ ERROR no_core is experimental\n \n-fn main() { }\n+pub struct S {}"}, {"sha": "16813a7623c77f4273ca7ce0e31b83f80724b7f3", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,7 +1,7 @@\n-//\n // compile-flags: --cfg broken\n \n #![feature(cfg_attr_multi)]\n+#![crate_type = \"lib\"]\n #![cfg_attr(broken, no_core, no_std)] //~ ERROR no_core is experimental\n \n-fn main() { }\n+pub struct S {}"}, {"sha": "39f8fc4b8b9f1f26143e8f62ef13daa0b08cc2b7", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,7 +1,7 @@\n-//\n // compile-flags: --cfg broken\n \n #![feature(cfg_attr_multi)]\n+#![crate_type = \"lib\"]\n #![cfg_attr(broken, no_std, no_core)] //~ ERROR no_core is experimental\n \n-fn main() { }\n+pub struct S {}"}, {"sha": "daa2bb5d6fafccb577621d932d152526f8fb32b4", "filename": "src/test/ui/feature-gates/feature-gate-alloc-error-handler.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -9,3 +9,6 @@ use core::alloc::Layout;\n fn oom(info: Layout) -> ! {\n     loop {}\n }\n+\n+#[panic_handler]\n+fn panic(_: &core::panic::PanicInfo) -> ! { loop {} }"}, {"sha": "f9ad48551410c785f74a724b52d0f86317d73337", "filename": "src/test/ui/feature-gates/feature-gate-allow_fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -5,3 +5,4 @@ fn ok_to_fail() {\n     assert!(false);\n }\n \n+fn main() {}"}, {"sha": "84dd1b9f814c2c60b7333988746e421083161fe9", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -6,5 +6,5 @@ async fn foo() {} //~ ERROR async fn is unstable\n \n fn main() {\n     let _ = async {}; //~ ERROR cannot find struct, variant or union type `async`\n-    let _ = async || {}; //~ ERROR cannot find value `async` in this scope\n+    let _ = async || { true }; //~ ERROR cannot find value `async` in this scope\n }"}, {"sha": "450b2c42f119d9f431fb824836b5a5f69d3e4783", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -7,7 +7,7 @@ LL |     let _ = async {}; //~ ERROR cannot find struct, variant or union type `\n error[E0425]: cannot find value `async` in this scope\n   --> $DIR/feature-gate-async-await-2015-edition.rs:9:13\n    |\n-LL |     let _ = async || {}; //~ ERROR cannot find value `async` in this scope\n+LL |     let _ = async || { true }; //~ ERROR cannot find value `async` in this scope\n    |             ^^^^^ not found in this scope\n \n error[E0658]: async fn is unstable (see issue #50547)"}, {"sha": "f46d1dc13d3f036ee381b47e876a9866795bace1", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -9,14 +9,16 @@ trait Foo {\n                                 //~| ERROR trait fns cannot be declared const\n }\n \n-impl Foo {\n-    const fn baz() -> u32 { 0 } // ok\n-}\n-\n impl Foo for u32 {\n     const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n }\n \n+trait Bar {}\n+\n+impl dyn Bar {\n+    const fn baz() -> u32 { 0 } // ok\n+}\n+\n static FOO: usize = foo();\n const BAR: usize = foo();\n "}, {"sha": "b3fc587b1cf773fc33722a66f925aba7b3fcb020", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -11,7 +11,7 @@ LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n    |     ^^^^^ trait fns cannot be const\n \n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:17:5\n+  --> $DIR/feature-gate-const_fn.rs:13:5\n    |\n LL |     const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n    |     ^^^^^ trait fns cannot be const"}, {"sha": "b08940e28f443cb81b7547726adf764f7a0fdbd7", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,3 +1,5 @@\n #[doc(keyword = \"match\")] //~ ERROR: #[doc(keyword = \"...\")] is experimental\n /// wonderful\n mod foo{}\n+\n+fn main() {}"}, {"sha": "a2377cda9bd66d4170ee21f89ade50c1a941b351", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,14 +1,11 @@\n // gate-test-dropck_parametricity\n \n // Ensure that attempts to use the unsafe attribute are feature-gated.\n-\n // Example adapted from RFC 1238 text (just left out the feature gate).\n \n // https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\n //     #example-of-the-unguarded-escape-hatch\n \n-// #![feature(dropck_parametricity)]\n-\n use std::cell::Cell;\n \n struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n@@ -18,6 +15,7 @@ struct Foo<T> { data: Vec<T> }\n impl<T> Drop for Foo<T> {\n     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n     //~^ ERROR unsafe_destructor_blind_to_params has been replaced\n+    //~| WARN use of deprecated attribute `dropck_parametricity`\n     fn drop(&mut self) { }\n }\n \n@@ -29,4 +27,3 @@ fn main() {\n     foo.data[0].1.set(Some(&foo.data[1]));\n     foo.data[1].1.set(Some(&foo.data[0]));\n }\n-"}, {"sha": "bc62fc01b4438be15cae24fcd88b73adb32e709d", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,11 +1,19 @@\n error[E0658]: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future (see issue #28498)\n-  --> $DIR/feature-gate-dropck-ugeh.rs:19:5\n+  --> $DIR/feature-gate-dropck-ugeh.rs:16:5\n    |\n LL |     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(dropck_parametricity)] to the crate attributes to enable\n \n+warning: use of deprecated attribute `dropck_parametricity`: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future. See https://github.com/rust-lang/rust/issues/34761\n+  --> $DIR/feature-gate-dropck-ugeh.rs:16:5\n+   |\n+LL |     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this attribute with `#[may_dangle]`\n+   |\n+   = note: #[warn(deprecated)] on by default\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "6dfd2d10870e076dfc7d077488a429f2a1ecf76c", "filename": "src/test/ui/feature-gates/feature-gate-existential-type.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,15 +1,17 @@\n // Check that existential types must be ungated to use the `existential` keyword\n \n-\n-\n existential type Foo: std::fmt::Debug; //~ ERROR existential types are unstable\n \n trait Bar {\n     type Baa: std::fmt::Debug;\n+    fn define() -> Self::Baa;\n }\n \n impl Bar for () {\n     existential type Baa: std::fmt::Debug; //~ ERROR existential types are unstable\n+    fn define() -> Self::Baa { 0 }\n }\n \n+fn define() -> Foo { 0 }\n+\n fn main() {}"}, {"sha": "e83d5cdbde1e629cbbcecccfd78b6dd4d0fc1f66", "filename": "src/test/ui/feature-gates/feature-gate-existential-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,13 +1,13 @@\n error[E0658]: existential types are unstable (see issue #34511)\n-  --> $DIR/feature-gate-existential-type.rs:5:1\n+  --> $DIR/feature-gate-existential-type.rs:3:1\n    |\n LL | existential type Foo: std::fmt::Debug; //~ ERROR existential types are unstable\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(existential_type)] to the crate attributes to enable\n \n error[E0658]: existential types are unstable (see issue #34511)\n-  --> $DIR/feature-gate-existential-type.rs:12:5\n+  --> $DIR/feature-gate-existential-type.rs:11:5\n    |\n LL |     existential type Baa: std::fmt::Debug; //~ ERROR existential types are unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "cee930fd785b9cc384ec87579a1d4b0073a4681c", "filename": "src/test/ui/feature-gates/feature-gate-generators.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,3 +1,4 @@\n fn main() {\n     yield true; //~ ERROR yield syntax is experimental\n+                //~^ ERROR yield statement outside of generator literal\n }"}, {"sha": "aea1e00d698a6a7822641e42484d0c924eb18a0e", "filename": "src/test/ui/feature-gates/feature-gate-generators.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -6,6 +6,13 @@ LL |     yield true; //~ ERROR yield syntax is experimental\n    |\n    = help: add #![feature(generators)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0627]: yield statement outside of generator literal\n+  --> $DIR/feature-gate-generators.rs:2:5\n+   |\n+LL |     yield true; //~ ERROR yield syntax is experimental\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0627, E0658.\n+For more information about an error, try `rustc --explain E0627`."}, {"sha": "17548d7b9e88c5551bf7a8b49b2cd132146c7eab", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -11,9 +11,9 @@ trait PointerFamily<U> {\n struct Foo;\n \n impl PointerFamily<u32> for Foo {\n-    type Pointer<usize> = Box<usize>;\n+    type Pointer<Usize> = Box<Usize>;\n     //~^ ERROR generic associated types are unstable\n-    type Pointer2<u32> = Box<u32>;\n+    type Pointer2<U32> = Box<U32>;\n     //~^ ERROR generic associated types are unstable\n }\n "}, {"sha": "8a207c966cdab34ffa5fae596a1d11ecf4a2a884", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -25,15 +25,15 @@ LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n error[E0658]: generic associated types are unstable (see issue #44265)\n   --> $DIR/feature-gate-generic_associated_types.rs:14:5\n    |\n-LL |     type Pointer<usize> = Box<usize>;\n+LL |     type Pointer<Usize> = Box<Usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable (see issue #44265)\n   --> $DIR/feature-gate-generic_associated_types.rs:16:5\n    |\n-LL |     type Pointer2<u32> = Box<u32>;\n+LL |     type Pointer2<U32> = Box<U32>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable"}, {"sha": "d1da94338283be79dc6949496e4bdd4a8f95094c", "filename": "src/test/ui/feature-gates/feature-gate-intrinsics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,9 +1,7 @@\n extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n-    fn bar();\n+    fn bar(); //~ ERROR unrecognized intrinsic function: `bar`\n }\n \n-extern \"rust-intrinsic\" fn baz() {  //~ ERROR intrinsics are subject to change\n-}\n+extern \"rust-intrinsic\" fn baz() {} //~ ERROR intrinsics are subject to change\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "092cb98a2f963efe79cde8133e108fa65f0fa5b9", "filename": "src/test/ui/feature-gates/feature-gate-intrinsics.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -2,7 +2,7 @@ error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-intrinsics.rs:1:1\n    |\n LL | / extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n-LL | |     fn bar();\n+LL | |     fn bar(); //~ ERROR unrecognized intrinsic function: `bar`\n LL | | }\n    | |_^\n    |\n@@ -11,12 +11,18 @@ LL | | }\n error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-intrinsics.rs:5:1\n    |\n-LL | / extern \"rust-intrinsic\" fn baz() {  //~ ERROR intrinsics are subject to change\n-LL | | }\n-   | |_^\n+LL | extern \"rust-intrinsic\" fn baz() {} //~ ERROR intrinsics are subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0093]: unrecognized intrinsic function: `bar`\n+  --> $DIR/feature-gate-intrinsics.rs:2:5\n+   |\n+LL |     fn bar(); //~ ERROR unrecognized intrinsic function: `bar`\n+   |     ^^^^^^^^^ unrecognized intrinsic\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0093, E0658.\n+For more information about an error, try `rustc --explain E0093`."}, {"sha": "93262f2171bfe81358b0f8851dabae924ccbfe0e", "filename": "src/test/ui/feature-gates/feature-gate-lang-items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lang-items.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,5 +1,5 @@\n-#[lang=\"foo\"]   //~ ERROR language items are subject to change\n+#[lang = \"foo\"] //~ ERROR language items are subject to change\n+                //~^ ERROR definition of an unknown language item: `foo`\n trait Foo {}\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "ccbb711fe6d43a9c84d5f2031a82775580b1f7d3", "filename": "src/test/ui/feature-gates/feature-gate-lang-items.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lang-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lang-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lang-items.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,11 +1,18 @@\n error[E0658]: language items are subject to change\n   --> $DIR/feature-gate-lang-items.rs:1:1\n    |\n-LL | #[lang=\"foo\"]   //~ ERROR language items are subject to change\n-   | ^^^^^^^^^^^^^\n+LL | #[lang = \"foo\"] //~ ERROR language items are subject to change\n+   | ^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(lang_items)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0522]: definition of an unknown language item: `foo`\n+  --> $DIR/feature-gate-lang-items.rs:1:1\n+   |\n+LL | #[lang = \"foo\"] //~ ERROR language items are subject to change\n+   | ^^^^^^^^^^^^^^^ definition of unknown language item `foo`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0522, E0658.\n+For more information about an error, try `rustc --explain E0522`."}, {"sha": "70f33cc0c6cc71f78d78698b557d7ae324aa6ae4", "filename": "src/test/ui/feature-gates/feature-gate-linkage.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -2,3 +2,5 @@ extern {\n     #[linkage = \"extern_weak\"] static foo: isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable\n }\n+\n+fn main() {}"}, {"sha": "20896e426f65d59539c6442905219e4a176856ec", "filename": "src/test/ui/feature-gates/feature-gate-may-dangle.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -3,7 +3,9 @@\n // Check that `may_dangle` is rejected if `dropck_eyepatch` feature gate is absent.\n \n struct Pt<A>(A);\n-impl<#[may_dangle] A> Drop for Pt<A> {\n+unsafe impl<#[may_dangle] A> Drop for Pt<A> {\n     //~^ ERROR may_dangle has unstable semantics and may be removed in the future\n     fn drop(&mut self) { }\n }\n+\n+fn main() {}"}, {"sha": "6d21147c9eeb3bd81c069fb200c186651876f5ec", "filename": "src/test/ui/feature-gates/feature-gate-may-dangle.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: may_dangle has unstable semantics and may be removed in the future (see issue #34761)\n-  --> $DIR/feature-gate-may-dangle.rs:6:6\n+  --> $DIR/feature-gate-may-dangle.rs:6:13\n    |\n-LL | impl<#[may_dangle] A> Drop for Pt<A> {\n-   |      ^^^^^^^^^^^^^\n+LL | unsafe impl<#[may_dangle] A> Drop for Pt<A> {\n+   |             ^^^^^^^^^^^^^\n    |\n    = help: add #![feature(dropck_eyepatch)] to the crate attributes to enable\n "}, {"sha": "669631df2ad17485f7f8e876f620f06988a8ed5f", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -9,14 +9,16 @@ trait Foo {\n                                 //~| ERROR trait fns cannot be declared const\n }\n \n-impl Foo {\n-    const fn baz() -> u32 { 0 } // stabilized\n-}\n-\n impl Foo for u32 {\n     const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n }\n \n+trait Bar {}\n+\n+impl dyn Bar {\n+    const fn baz() -> u32 { 0 } // stabilized\n+}\n+\n static FOO: usize = foo();\n const BAR: usize = foo();\n "}, {"sha": "bcc5b0198c319de4f704ae574372e86759b86321", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -11,7 +11,7 @@ LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n    |     ^^^^^ trait fns cannot be const\n \n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/feature-gate-min_const_fn.rs:17:5\n+  --> $DIR/feature-gate-min_const_fn.rs:13:5\n    |\n LL |     const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n    |     ^^^^^ trait fns cannot be const"}, {"sha": "16a51a1e82fc664f1928fbbcece5d6d05acfdb11", "filename": "src/test/ui/feature-gates/feature-gate-naked_functions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -7,3 +7,5 @@ fn naked() {}\n fn naked_2() -> isize {\n     0\n }\n+\n+fn main() {}"}, {"sha": "be8c27dbb1b02d63c8720d45aa356986a3545bab", "filename": "src/test/ui/feature-gates/feature-gate-never_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -6,8 +6,8 @@ trait Foo {\n \n type Ma = (u32, !, i32); //~ ERROR type is experimental\n type Meeshka = Vec<!>; //~ ERROR type is experimental\n-type Mow = &fn(!) -> !; //~ ERROR type is experimental\n-type Skwoz = &mut !; //~ ERROR type is experimental\n+type Mow = &'static fn(!) -> !; //~ ERROR type is experimental\n+type Skwoz = &'static mut !; //~ ERROR type is experimental\n \n impl Foo for Meeshka {\n     type Wub = !; //~ ERROR type is experimental"}, {"sha": "c4f8771171e8ba0a3873b71a12de72291d280236", "filename": "src/test/ui/feature-gates/feature-gate-never_type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -15,18 +15,18 @@ LL | type Meeshka = Vec<!>; //~ ERROR type is experimental\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n error[E0658]: The `!` type is experimental (see issue #35121)\n-  --> $DIR/feature-gate-never_type.rs:9:16\n+  --> $DIR/feature-gate-never_type.rs:9:24\n    |\n-LL | type Mow = &fn(!) -> !; //~ ERROR type is experimental\n-   |                ^\n+LL | type Mow = &'static fn(!) -> !; //~ ERROR type is experimental\n+   |                        ^\n    |\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n error[E0658]: The `!` type is experimental (see issue #35121)\n-  --> $DIR/feature-gate-never_type.rs:10:19\n+  --> $DIR/feature-gate-never_type.rs:10:27\n    |\n-LL | type Skwoz = &mut !; //~ ERROR type is experimental\n-   |                   ^\n+LL | type Skwoz = &'static mut !; //~ ERROR type is experimental\n+   |                           ^\n    |\n    = help: add #![feature(never_type)] to the crate attributes to enable\n "}, {"sha": "40178edd74b8d6293d2942bc13c4f3fafcf8cae7", "filename": "src/test/ui/feature-gates/feature-gate-no_core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,3 +1,5 @@\n+#![crate_type = \"rlib\"]\n+\n #![no_core] //~ ERROR no_core is experimental\n \n-fn main() {}\n+pub struct S {}"}, {"sha": "7390051b95da2ccf8f589a20570552af1d1a4559", "filename": "src/test/ui/feature-gates/feature-gate-no_core.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: no_core is experimental (see issue #29639)\n-  --> $DIR/feature-gate-no_core.rs:1:1\n+  --> $DIR/feature-gate-no_core.rs:3:1\n    |\n LL | #![no_core] //~ ERROR no_core is experimental\n    | ^^^^^^^^^^^"}, {"sha": "35c05b75d365c4a1200994c3fc01b243983a8d43", "filename": "src/test/ui/feature-gates/feature-gate-optin-builtin-traits.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -3,14 +3,10 @@\n \n struct DummyStruct;\n \n-trait DummyTrait {\n-    fn dummy(&self) {}\n-}\n-\n auto trait AutoDummyTrait {}\n //~^ ERROR auto traits are experimental and possibly buggy\n \n-impl !DummyTrait for DummyStruct {}\n+impl !AutoDummyTrait for DummyStruct {}\n //~^ ERROR negative trait bounds are not yet fully implemented; use marker types for now\n \n fn main() {}"}, {"sha": "e5d0a8681fb45da81df29a59f5a5df5acf727932", "filename": "src/test/ui/feature-gates/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,16 +1,16 @@\n error[E0658]: auto traits are experimental and possibly buggy (see issue #13231)\n-  --> $DIR/feature-gate-optin-builtin-traits.rs:10:1\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:6:1\n    |\n LL | auto trait AutoDummyTrait {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n \n error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now (see issue #13231)\n-  --> $DIR/feature-gate-optin-builtin-traits.rs:13:1\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:9:1\n    |\n-LL | impl !DummyTrait for DummyStruct {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl !AutoDummyTrait for DummyStruct {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n "}, {"sha": "9d28f437415c9f78f77bb0dee0f5e20c5065f0c9", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,7 +1,7 @@\n #[repr(simd)] //~ error: SIMD types are experimental\n struct Foo(u64, u64);\n \n-#[repr(C)]\n+#[repr(C)] //~ warn: conflicting representation hints\n #[repr(simd)] //~ error: SIMD types are experimental\n struct Bar(u64, u64);\n "}, {"sha": "20cdbceeb689a4b44e0169ebe5c2ffafca50a8cc", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -14,6 +14,15 @@ LL | #[repr(simd)] //~ error: SIMD types are experimental\n    |\n    = help: add #![feature(repr_simd)] to the crate attributes to enable\n \n+warning[E0566]: conflicting representation hints\n+  --> $DIR/feature-gate-repr-simd.rs:4:8\n+   |\n+LL | #[repr(C)] //~ warn: conflicting representation hints\n+   |        ^\n+LL | #[repr(simd)] //~ error: SIMD types are experimental\n+   |        ^^^^\n+\n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0566, E0658.\n+For more information about an error, try `rustc --explain E0566`."}, {"sha": "2b23388fdc96de7b40eed3149e18be191857fe05", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -5,4 +5,4 @@\n #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n \n-fn main() {}\n+fn main() {} //~ ERROR []"}, {"sha": "31e24f5b99f1e2efadd6cdb5e3e49f098918d6a4", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -14,6 +14,13 @@ LL | #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for ru\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0208]: []\n+  --> $DIR/feature-gate-rustc-attrs-1.rs:8:1\n+   |\n+LL | fn main() {} //~ ERROR []\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0208, E0658.\n+For more information about an error, try `rustc --explain E0208`."}, {"sha": "46a1279a3fb16b7bdf8c1225125abed1b205dd93", "filename": "src/test/ui/feature-gates/feature-gate-start.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,2 +1,3 @@\n #[start]\n-fn foo() {} //~ ERROR: a #[start] function is an experimental feature\n+fn foo(_: isize, _: *const *const u8) -> isize { 0 }\n+//~^ ERROR a #[start] function is an experimental feature"}, {"sha": "d39e5f3555537437cef482e78a403c6a7148ffd8", "filename": "src/test/ui/feature-gates/feature-gate-start.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: a #[start] function is an experimental feature whose signature may change over time (see issue #29633)\n   --> $DIR/feature-gate-start.rs:2:1\n    |\n-LL | fn foo() {} //~ ERROR: a #[start] function is an experimental feature\n-   | ^^^^^^^^^^^\n+LL | fn foo(_: isize, _: *const *const u8) -> isize { 0 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(start)] to the crate attributes to enable\n "}, {"sha": "0efae1f6bc356556459e1e1915383d80d0e2aeb8", "filename": "src/test/ui/feature-gates/feature-gate-thread_local.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-thread_local.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -8,8 +8,4 @@\n #[thread_local] //~ ERROR `#[thread_local]` is an experimental feature\n static FOO: i32 = 3;\n \n-pub fn main() {\n-    FOO.with(|x| {\n-        println!(\"x: {}\", x);\n-    });\n-}\n+pub fn main() {}"}, {"sha": "ff6e2b8290389aa3d8db0dce595cb4508f89f991", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -3,25 +3,29 @@\n // never triggers (yet), because they encounter other problems around\n // angle bracket vs parentheses notation.\n \n-#![allow(dead_code)]\n+#![feature(fn_traits)]\n \n struct Foo;\n impl Fn<()> for Foo {\n+//~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n     extern \"rust-call\" fn call(self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }\n struct Foo1;\n impl FnOnce() for Foo1 {\n+//~^ ERROR associated type bindings are not allowed here\n     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }\n struct Bar;\n impl FnMut<()> for Bar {\n+//~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }\n struct Baz;\n impl FnOnce<()> for Baz {\n+//~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }"}, {"sha": "865b87e7dd5d70e5b68002f468b1dc22957766ba", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,35 +1,66 @@\n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:10:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:11:5\n    |\n LL |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:17:5\n    |\n LL |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:20:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:5\n    |\n LL |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:25:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:29:5\n    |\n LL |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: aborting due to 4 previous errors\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:6\n+   |\n+LL | impl Fn<()> for Foo {\n+   |      ^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:12\n+   |\n+LL | impl FnOnce() for Foo1 {\n+   |            ^^ associated type not allowed here\n+\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:21:6\n+   |\n+LL | impl FnMut<()> for Bar {\n+   |      ^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:27:6\n+   |\n+LL | impl FnOnce<()> for Baz {\n+   |      ^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0229, E0658.\n+For more information about an error, try `rustc --explain E0229`."}, {"sha": "c3f5c99dcb482a2071a711e3e5a98c38e03ca80f", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,6 +1,9 @@\n+#![feature(fn_traits)]\n+\n struct Test;\n \n impl FnOnce<(u32, u32)> for Test {\n+//~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n     type Output = u32;\n \n     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {"}, {"sha": "e7b1fc589bb4a92c8f36e0ff2f0b91b1910ed183", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-unboxed-closures.rs:6:5\n+  --> $DIR/feature-gate-unboxed-closures.rs:9:5\n    |\n LL | /     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n LL | |         a + b\n@@ -8,6 +8,14 @@ LL | |     }\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures.rs:5:6\n+   |\n+LL | impl FnOnce<(u32, u32)> for Test {\n+   |      ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "f8f3626caabe7bd3f97d5190d8199c15ae310254", "filename": "src/test/ui/issues/issue-51279.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -15,11 +15,13 @@ pub struct Y<#[cfg(none)] T>(T); // shouldn't care when the entire item is strip\n \n struct M<T>(*const T);\n \n-unsafe impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n+impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n     //~^ ERROR #[cfg_attr] cannot be applied on a generic parameter\n     fn drop(&mut self) {}\n }\n \n type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n //~^ ERROR #[cfg] cannot be applied on a generic parameter\n //~| ERROR attribute `ignored` is currently unknown to the compiler\n+\n+fn main() {}"}, {"sha": "bc33eacac9994f061522f03ae0dad9979f264a03", "filename": "src/test/ui/issues/issue-51279.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -35,10 +35,10 @@ LL | pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n    |                           ^^^^^^^^^^^^\n \n error: #[cfg_attr] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:18:13\n+  --> $DIR/issue-51279.rs:18:6\n    |\n-LL | unsafe impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: #[cfg] cannot be applied on a generic parameter\n   --> $DIR/issue-51279.rs:23:23"}, {"sha": "a4e2a1754f01360cec70d49d90eca7b25b1ab527", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -4,11 +4,10 @@\n \n #![feature(on_unimplemented)]\n \n-#[rustc_on_unimplemented(\n+#[rustc_on_unimplemented( //~ ERROR `#[rustc_on_unimplemented]` requires a value\n     message=\"the message\"\n-    label=\"the label\"\n+    label=\"the label\" //~ ERROR expected one of `)` or `,`, found `label`\n )]\n trait T {}\n-//~^^^ ERROR expected one of `)` or `,`, found `label`\n \n fn main() {  }"}, {"sha": "aa1b520e01529dd4b1b8442b201a8543e67278d2", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -3,8 +3,20 @@ error: expected one of `)` or `,`, found `label`\n    |\n LL |     message=\"the message\"\n    |                          - expected one of `)` or `,` here\n-LL |     label=\"the label\"\n+LL |     label=\"the label\" //~ ERROR expected one of `)` or `,`, found `label`\n    |     ^^^^^ unexpected token\n \n-error: aborting due to previous error\n+error[E0232]: `#[rustc_on_unimplemented]` requires a value\n+  --> $DIR/expected-comma-found-token.rs:7:1\n+   |\n+LL | / #[rustc_on_unimplemented( //~ ERROR `#[rustc_on_unimplemented]` requires a value\n+LL | |     message=\"the message\"\n+LL | |     label=\"the label\" //~ ERROR expected one of `)` or `,`, found `label`\n+LL | | )]\n+   | |__^ value required here\n+   |\n+   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0232`."}, {"sha": "69511ab8e1fc75985cf88744c0b529174ca89e61", "filename": "src/test/ui/span/gated-features-attr-spans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -1,7 +1,7 @@\n #[repr(simd)] //~ ERROR are experimental\n-struct Weapon {\n-    name: String,\n-    damage: u32\n+struct Coord {\n+    x: u32,\n+    y: u32,\n }\n \n fn main() {}"}, {"sha": "bed0d9bb2be5498919c79606c549bed7215e996f", "filename": "src/test/ui/utf8_idents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.rs?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -3,6 +3,7 @@\n fn foo<\n     '\u03b2, //~ ERROR non-ascii idents are not fully supported\n     \u03b3  //~ ERROR non-ascii idents are not fully supported\n+       //~^ WARN type parameter `\u03b3` should have a camel case name such as `\u0393`\n >() {}\n \n struct X {"}, {"sha": "1ccf767491cdb3f7e72e33c12204e0694b88fca8", "filename": "src/test/ui/utf8_idents.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a00e120db8560b6e9965672b996e881ae53db4/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=10a00e120db8560b6e9965672b996e881ae53db4", "patch": "@@ -15,21 +15,29 @@ LL |     \u03b3  //~ ERROR non-ascii idents are not fully supported\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n-  --> $DIR/utf8_idents.rs:9:5\n+  --> $DIR/utf8_idents.rs:10:5\n    |\n LL |     \u03b4: usize //~ ERROR non-ascii idents are not fully supported\n    |     ^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n-  --> $DIR/utf8_idents.rs:13:9\n+  --> $DIR/utf8_idents.rs:14:9\n    |\n LL |     let \u03b1 = 0.00001f64; //~ ERROR non-ascii idents are not fully supported\n    |         ^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n+warning: type parameter `\u03b3` should have a camel case name such as `\u0393`\n+  --> $DIR/utf8_idents.rs:5:5\n+   |\n+LL |     \u03b3  //~ ERROR non-ascii idents are not fully supported\n+   |     ^\n+   |\n+   = note: #[warn(non_camel_case_types)] on by default\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}