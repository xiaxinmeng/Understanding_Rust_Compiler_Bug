{"sha": "6b1f30ade93b3bd73625cc354652738254175dba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMWYzMGFkZTkzYjNiZDczNjI1Y2MzNTQ2NTI3MzgyNTQxNzVkYmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-26T21:12:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-26T21:12:43Z"}, "message": "hack around nested libraries", "tree": {"sha": "16cdd20641d34b441bdb571ac04b9c7f1aee30f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16cdd20641d34b441bdb571ac04b9c7f1aee30f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1f30ade93b3bd73625cc354652738254175dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1f30ade93b3bd73625cc354652738254175dba", "html_url": "https://github.com/rust-lang/rust/commit/6b1f30ade93b3bd73625cc354652738254175dba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1f30ade93b3bd73625cc354652738254175dba/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a572043e7effe1d0b36a0d247960111312edc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a572043e7effe1d0b36a0d247960111312edc2a", "html_url": "https://github.com/rust-lang/rust/commit/8a572043e7effe1d0b36a0d247960111312edc2a"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "ad6b52371cfa7fa5e2c46a7aa4bcdb94824e99b4", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b1f30ade93b3bd73625cc354652738254175dba/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1f30ade93b3bd73625cc354652738254175dba/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=6b1f30ade93b3bd73625cc354652738254175dba", "patch": "@@ -59,6 +59,9 @@ impl FileResolverImp {\n     pub(crate) fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId> {\n         self.inner.resolve(file_id, path)\n     }\n+    pub(crate) fn debug_path(&self, file_id: FileId) -> Option<std::path::PathBuf> {\n+        self.inner.debug_path(file_id)\n+    }\n     fn inner(&self) -> *const FileResolver {\n         &*self.inner\n     }\n@@ -138,6 +141,11 @@ impl AnalysisHostImpl {\n                 let mut files = FxHashSet::default();\n                 for (file_id, text) in library.files {\n                     files.insert(file_id);\n+                    log::debug!(\n+                        \"library file: {:?} {:?}\",\n+                        file_id,\n+                        library.file_resolver.debug_path(file_id)\n+                    );\n                     self.db\n                         .query_mut(crate::input::FileSourceRootQuery)\n                         .set_constant(file_id, source_root_id);"}, {"sha": "a78b6e397a59a555815633c6f98c2380a56b76a5", "filename": "crates/ra_analysis/src/input.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b1f30ade93b3bd73625cc354652738254175dba/crates%2Fra_analysis%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1f30ade93b3bd73625cc354652738254175dba/crates%2Fra_analysis%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Finput.rs?ref=6b1f30ade93b3bd73625cc354652738254175dba", "patch": "@@ -33,6 +33,9 @@ impl CrateGraph {\n pub trait FileResolver: fmt::Debug + Send + Sync + 'static {\n     fn file_stem(&self, file_id: FileId) -> String;\n     fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId>;\n+    fn debug_path(&self, _file_id: FileId) -> Option<std::path::PathBuf> {\n+        None\n+    }\n }\n \n salsa::query_group! {"}, {"sha": "36f08be2fefd5aedb9f4ef0d2af384891d8727d7", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6b1f30ade93b3bd73625cc354652738254175dba/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1f30ade93b3bd73625cc354652738254175dba/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=6b1f30ade93b3bd73625cc354652738254175dba", "patch": "@@ -168,9 +168,35 @@ fn main_loop_inner(\n                     let workspaces = vec![ws];\n                     feedback(internal_mode, \"workspace loaded\", msg_sender);\n                     for ws in workspaces.iter() {\n-                        for pkg in ws.packages().filter(|pkg| !pkg.is_member(ws)) {\n-                            debug!(\"sending root, {}\", pkg.root(ws).to_path_buf().display());\n-                            fs_worker.send(pkg.root(ws).to_path_buf());\n+                        // Add each library as constant input. If library is\n+                        // within the workspace, don't treat it as a library.\n+                        //\n+                        // HACK: If source roots are nested, pick the outer one.\n+\n+                        let mut roots = ws\n+                            .packages()\n+                            .filter(|pkg| !pkg.is_member(ws))\n+                            .filter_map(|pkg| {\n+                                let root = pkg.root(ws).to_path_buf();\n+                                if root.starts_with(&ws_root) {\n+                                    None\n+                                } else {\n+                                    Some(root)\n+                                }\n+                            })\n+                            .collect::<Vec<_>>();\n+                        roots.sort_by_key(|it| it.as_os_str().len());\n+                        let unique = roots\n+                            .iter()\n+                            .enumerate()\n+                            .filter(|&(idx, long)| {\n+                                !roots[..idx].iter().any(|short| long.starts_with(short))\n+                            })\n+                            .map(|(_idx, root)| root);\n+\n+                        for root in unique {\n+                            debug!(\"sending root, {}\", root.display());\n+                            fs_worker.send(root.to_owned());\n                         }\n                     }\n                     state.set_workspaces(workspaces);"}, {"sha": "a624043d840fb2f54812454d0a20d4ec07b61015", "filename": "crates/ra_lsp_server/src/path_map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b1f30ade93b3bd73625cc354652738254175dba/crates%2Fra_lsp_server%2Fsrc%2Fpath_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1f30ade93b3bd73625cc354652738254175dba/crates%2Fra_lsp_server%2Fsrc%2Fpath_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fpath_map.rs?ref=6b1f30ade93b3bd73625cc354652738254175dba", "patch": "@@ -79,6 +79,10 @@ impl FileResolver for PathMap {\n         let path = normalize(&path);\n         self.get_id(&path)\n     }\n+\n+    fn debug_path(&self, file_id: FileId) -> Option<PathBuf> {\n+        Some(self.get_path(file_id).to_owned())\n+    }\n }\n \n fn normalize(path: &Path) -> PathBuf {"}]}