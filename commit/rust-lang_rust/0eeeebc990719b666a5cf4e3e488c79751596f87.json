{"sha": "0eeeebc990719b666a5cf4e3e488c79751596f87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZWVlYmM5OTA3MTliNjY2YTVjZjRlM2U0ODhjNzk3NTE1OTZmODc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-14T16:50:20Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-06-26T15:11:14Z"}, "message": "Rename 'bad prefix' to 'unknown prefix'.", "tree": {"sha": "36c3658edee80142ad42c78542f961ecf9266187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c3658edee80142ad42c78542f961ecf9266187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eeeebc990719b666a5cf4e3e488c79751596f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eeeebc990719b666a5cf4e3e488c79751596f87", "html_url": "https://github.com/rust-lang/rust/commit/0eeeebc990719b666a5cf4e3e488c79751596f87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eeeebc990719b666a5cf4e3e488c79751596f87/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d40be0fc6418affeeb765a9b6a99315e90aa57c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40be0fc6418affeeb765a9b6a99315e90aa57c8", "html_url": "https://github.com/rust-lang/rust/commit/d40be0fc6418affeeb765a9b6a99315e90aa57c8"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "4cb2a6ca50f8dc1c71991c9a528802cf08940248", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0eeeebc990719b666a5cf4e3e488c79751596f87/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeeebc990719b666a5cf4e3e488c79751596f87/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=0eeeebc990719b666a5cf4e3e488c79751596f87", "patch": "@@ -72,7 +72,7 @@ pub enum TokenKind {\n     /// prefixes are reported as errors; in earlier editions, they result in a\n     /// (allowed by default) lint, and are treated as regular identifier\n     /// tokens.\n-    BadPrefix,\n+    UnknownPrefix,\n     /// \"12_u8\", \"1.0e-40\", \"b\"123\"\". See `LiteralKind` for more details.\n     Literal { kind: LiteralKind, suffix_start: usize },\n     /// \"'a\"\n@@ -330,7 +330,7 @@ impl Cursor<'_> {\n                     let kind = RawStr { n_hashes, err };\n                     Literal { kind, suffix_start }\n                 }\n-                _ => self.ident_or_bad_prefix(),\n+                _ => self.ident_or_unknown_prefix(),\n             },\n \n             // Byte literal, byte string literal, raw byte string literal or identifier.\n@@ -365,12 +365,12 @@ impl Cursor<'_> {\n                     let kind = RawByteStr { n_hashes, err };\n                     Literal { kind, suffix_start }\n                 }\n-                _ => self.ident_or_bad_prefix(),\n+                _ => self.ident_or_unknown_prefix(),\n             },\n \n             // Identifier (this should be checked after other variant that can\n             // start as identifier).\n-            c if is_id_start(c) => self.ident_or_bad_prefix(),\n+            c if is_id_start(c) => self.ident_or_unknown_prefix(),\n \n             // Numeric literal.\n             c @ '0'..='9' => {\n@@ -494,14 +494,14 @@ impl Cursor<'_> {\n         RawIdent\n     }\n \n-    fn ident_or_bad_prefix(&mut self) -> TokenKind {\n+    fn ident_or_unknown_prefix(&mut self) -> TokenKind {\n         debug_assert!(is_id_start(self.prev()));\n         // Start is already eaten, eat the rest of identifier.\n         self.eat_while(is_id_continue);\n-        // Good prefixes must have been handled earlier. So if\n-        // we see a prefix here, it is definitely a bad prefix.\n+        // Known prefixes must have been handled earlier. So if\n+        // we see a prefix here, it is definitely a unknown prefix.\n         match self.first() {\n-            '#' | '\"' | '\\'' => BadPrefix,\n+            '#' | '\"' | '\\'' => UnknownPrefix,\n             _ => Ident,\n         }\n     }"}, {"sha": "0f6b9a2f122d8a463900875ee8c86240c58ecf12", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0eeeebc990719b666a5cf4e3e488c79751596f87/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeeebc990719b666a5cf4e3e488c79751596f87/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=0eeeebc990719b666a5cf4e3e488c79751596f87", "patch": "@@ -170,15 +170,15 @@ impl<'a> StringReader<'a> {\n             rustc_lexer::TokenKind::Whitespace => return None,\n             rustc_lexer::TokenKind::Ident\n             | rustc_lexer::TokenKind::RawIdent\n-            | rustc_lexer::TokenKind::BadPrefix => {\n+            | rustc_lexer::TokenKind::UnknownPrefix => {\n                 let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;\n-                let is_bad_prefix = token == rustc_lexer::TokenKind::BadPrefix;\n+                let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;\n                 let mut ident_start = start;\n                 if is_raw_ident {\n                     ident_start = ident_start + BytePos(2);\n                 }\n-                if is_bad_prefix {\n-                    self.report_reserved_prefix(start);\n+                if is_unknown_prefix {\n+                    self.report_unknown_prefix(start);\n                 }\n                 let sym = nfc_normalize(self.str_from(ident_start));\n                 let span = self.mk_sp(start, self.pos);\n@@ -503,7 +503,7 @@ impl<'a> StringReader<'a> {\n     // using a (unknown) prefix is an error. In earlier editions, however, they\n     // only result in a (allowed by default) lint, and are treated as regular\n     // identifier tokens.\n-    fn report_reserved_prefix(&self, start: BytePos) {\n+    fn report_unknown_prefix(&self, start: BytePos) {\n         let prefix_span = self.mk_sp(start, self.pos);\n         let msg = format!(\"prefix `{}` is unknown\", self.str_from_to(start, self.pos));\n "}, {"sha": "33b1d98313ce3cd3c5efb3cc3404f26f1fdeab36", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eeeebc990719b666a5cf4e3e488c79751596f87/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeeebc990719b666a5cf4e3e488c79751596f87/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=0eeeebc990719b666a5cf4e3e488c79751596f87", "patch": "@@ -413,7 +413,7 @@ impl<'a> Classifier<'a> {\n                 },\n                 c => c,\n             },\n-            TokenKind::RawIdent | TokenKind::BadPrefix => Class::Ident,\n+            TokenKind::RawIdent | TokenKind::UnknownPrefix => Class::Ident,\n             TokenKind::Lifetime { .. } => Class::Lifetime,\n         };\n         // Anything that didn't return above is the simple case where we the"}]}