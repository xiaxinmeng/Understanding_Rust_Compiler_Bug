{"sha": "58042bffaccb8df5e65c9f86f3b5eec8da193773", "node_id": "C_kwDOAAsO6NoAKDU4MDQyYmZmYWNjYjhkZjVlNjVjOWY4NmYzYjVlZWM4ZGExOTM3NzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-01T14:49:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-01T14:49:27Z"}, "message": "Rollup merge of #99340 - GoldsteinE:fix-localdefid-debug-ice, r=lcnr\n\nFix ICE in Definitions::create_def\n\n`Debug` implementation for `LocalDefId` uses global `Definitions`. Normally it\u2019s ok, but we can\u2019t do it while holding a mutable reference to `Definitions`, since it causes ICE or deadlock (depending on whether `parallel_compiler` is enabled).\n\nThis PR effectively copies the `Debug` implementation into the problematic method. I don\u2019t particularly love this solution (since it creates code duplication), but I don\u2019t see any other options.\n\nThis issue was discovered when running `rustdoc` with `RUSTDOC_LOG=trace` on the following file:\n```rust\npub struct SomeStruct;\n\nfn asdf() {\n    impl SomeStruct {\n        pub fn qwop(&self) {\n            println!(\"hidden function\");\n        }\n    }\n}\n```\n\nI\u2019m not sure how to create a test for this behavior.", "tree": {"sha": "07db07cf2f9c11786c5d73de632ef956ad201c45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07db07cf2f9c11786c5d73de632ef956ad201c45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58042bffaccb8df5e65c9f86f3b5eec8da193773", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5+f3CRBK7hj4Ov3rIwAAWjEIACedE3LMxFuj8SWzYZ3f2uQi\nMzE2/j1cceEkiRlbpKBqJvnR9JGgkAWmDbsOmJs6hTFSMcop5u0Xn3gMaIChnTEL\nI+ej927TiVAbEpMOPm8WcCAs4JQ5aH9KN9M4s6Xz5SY/8qRYmB5T5qiIKP32mYB1\neUVeVshjYJLl+ZHimZrARljVnL1HShA7b+TrOG+Y0Ewn6FlF1fFvUzVrKcGJIzi+\nbiBLGg2L1bvu2pY/cdmMFMH8ik+IvXIoHao/KHsUpdOL28Iv+II9IlQceKq/Bi4U\nvMVwA6aOm/XcYLF9ClPjwuN35eZsZ3yb0SE4J48hTGzGt+f/8lyaEWZoI2z0IuM=\n=Ny7a\n-----END PGP SIGNATURE-----\n", "payload": "tree 07db07cf2f9c11786c5d73de632ef956ad201c45\nparent 1f5d8d49eb6111931091f700d07518cd2b80bc18\nparent d9f28b7b701321d24ff9930b3f7b5d93b6fd671f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659365367 +0200\ncommitter GitHub <noreply@github.com> 1659365367 +0200\n\nRollup merge of #99340 - GoldsteinE:fix-localdefid-debug-ice, r=lcnr\n\nFix ICE in Definitions::create_def\n\n`Debug` implementation for `LocalDefId` uses global `Definitions`. Normally it\u2019s ok, but we can\u2019t do it while holding a mutable reference to `Definitions`, since it causes ICE or deadlock (depending on whether `parallel_compiler` is enabled).\n\nThis PR effectively copies the `Debug` implementation into the problematic method. I don\u2019t particularly love this solution (since it creates code duplication), but I don\u2019t see any other options.\n\nThis issue was discovered when running `rustdoc` with `RUSTDOC_LOG=trace` on the following file:\n```rust\npub struct SomeStruct;\n\nfn asdf() {\n    impl SomeStruct {\n        pub fn qwop(&self) {\n            println!(\"hidden function\");\n        }\n    }\n}\n```\n\nI\u2019m not sure how to create a test for this behavior.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58042bffaccb8df5e65c9f86f3b5eec8da193773", "html_url": "https://github.com/rust-lang/rust/commit/58042bffaccb8df5e65c9f86f3b5eec8da193773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58042bffaccb8df5e65c9f86f3b5eec8da193773/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5d8d49eb6111931091f700d07518cd2b80bc18", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d8d49eb6111931091f700d07518cd2b80bc18", "html_url": "https://github.com/rust-lang/rust/commit/1f5d8d49eb6111931091f700d07518cd2b80bc18"}, {"sha": "d9f28b7b701321d24ff9930b3f7b5d93b6fd671f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f28b7b701321d24ff9930b3f7b5d93b6fd671f", "html_url": "https://github.com/rust-lang/rust/commit/d9f28b7b701321d24ff9930b3f7b5d93b6fd671f"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "c2c551e78a41105af9ee32fe96fbabbd750a3b7e", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58042bffaccb8df5e65c9f86f3b5eec8da193773/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58042bffaccb8df5e65c9f86f3b5eec8da193773/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=58042bffaccb8df5e65c9f86f3b5eec8da193773", "patch": "@@ -338,7 +338,12 @@ impl Definitions {\n \n     /// Adds a definition with a parent definition.\n     pub fn create_def(&mut self, parent: LocalDefId, data: DefPathData) -> LocalDefId {\n-        debug!(\"create_def(parent={:?}, data={:?})\", parent, data);\n+        // We can't use `Debug` implementation for `LocalDefId` here, since it tries to acquire a\n+        // reference to `Definitions` and we're already holding a mutable reference.\n+        debug!(\n+            \"create_def(parent={}, data={data:?})\",\n+            self.def_path(parent).to_string_no_crate_verbose(),\n+        );\n \n         // The root node must be created with `create_root_def()`.\n         assert!(data != DefPathData::CrateRoot);"}, {"sha": "541763e294f18bf87f5d57c8a121d09cf7a58baa", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58042bffaccb8df5e65c9f86f3b5eec8da193773/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58042bffaccb8df5e65c9f86f3b5eec8da193773/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=58042bffaccb8df5e65c9f86f3b5eec8da193773", "patch": "@@ -1459,11 +1459,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n \n         format!(\n-            \"{}[{}]{}\",\n+            \"{}[{:04x}]{}\",\n             crate_name,\n             // Don't print the whole stable crate id. That's just\n             // annoying in debug output.\n-            &(format!(\"{:08x}\", stable_crate_id.to_u64()))[..4],\n+            stable_crate_id.to_u64() >> 8 * 6,\n             self.def_path(def_id).to_string_no_crate_verbose()\n         )\n     }"}]}