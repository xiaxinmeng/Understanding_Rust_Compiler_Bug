{"sha": "22c2d9ddbf356bcdb718e88ca6ee3665e1e42690", "node_id": "C_kwDOAAsO6NoAKDIyYzJkOWRkYmYzNTZiY2RiNzE4ZTg4Y2E2ZWUzNjY1ZTFlNDI2OTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-23T09:10:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-23T09:10:50Z"}, "message": "Auto merge of #89883 - Mark-Simulacrum:incr-verify-outline, r=nnethercote\n\nManually outline error on incremental_verify_ich\n\nThis reduces codegen for rustc_query_impl by 169k lines of LLVM IR, representing\na 1.2% improvement. This code should be fairly cold, so hopefully this has minimal\nperformance impact.", "tree": {"sha": "f7bb7d96bcf04a0624aac7d5c3daaafc6ee27f11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7bb7d96bcf04a0624aac7d5c3daaafc6ee27f11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22c2d9ddbf356bcdb718e88ca6ee3665e1e42690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22c2d9ddbf356bcdb718e88ca6ee3665e1e42690", "html_url": "https://github.com/rust-lang/rust/commit/22c2d9ddbf356bcdb718e88ca6ee3665e1e42690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22c2d9ddbf356bcdb718e88ca6ee3665e1e42690/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4be43b27993ab405beaa19738258fdd546d3db", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4be43b27993ab405beaa19738258fdd546d3db", "html_url": "https://github.com/rust-lang/rust/commit/7c4be43b27993ab405beaa19738258fdd546d3db"}, {"sha": "dc65b2290143df24c426fbb3a9a2ce4b7d8b5b89", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc65b2290143df24c426fbb3a9a2ce4b7d8b5b89", "html_url": "https://github.com/rust-lang/rust/commit/dc65b2290143df24c426fbb3a9a2ce4b7d8b5b89"}], "stats": {"total": 98, "additions": 74, "deletions": 24}, "files": [{"sha": "b1295ba48ccb96e0824498f02c4f4a5113e9951f", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22c2d9ddbf356bcdb718e88ca6ee3665e1e42690/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c2d9ddbf356bcdb718e88ca6ee3665e1e42690/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=22c2d9ddbf356bcdb718e88ca6ee3665e1e42690", "patch": "@@ -6,6 +6,7 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(thread_local_const_init)]\n+#![feature(extern_types)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "b08db39e245a80ecb59dbd2a078e1bc3b9d83219", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 73, "deletions": 24, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/22c2d9ddbf356bcdb718e88ca6ee3665e1e42690/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c2d9ddbf356bcdb718e88ca6ee3665e1e42690/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=22c2d9ddbf356bcdb718e88ca6ee3665e1e42690", "patch": "@@ -18,6 +18,7 @@ use rustc_data_structures::sharded::{get_shard_index_by_hash, Sharded};\n use rustc_data_structures::sync::{Lock, LockGuard};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{DiagnosticBuilder, FatalError};\n+use rustc_session::Session;\n use rustc_span::{Span, DUMMY_SP};\n use std::cell::Cell;\n use std::collections::hash_map::Entry;\n@@ -595,38 +596,86 @@ fn incremental_verify_ich<CTX, K, V: Debug>(\n     debug!(\"END verify_ich({:?})\", dep_node);\n \n     if Some(new_hash) != old_hash {\n-        let run_cmd = if let Some(crate_name) = &tcx.sess().opts.crate_name {\n-            format!(\"`cargo clean -p {}` or `cargo clean`\", crate_name)\n-        } else {\n-            \"`cargo clean`\".to_string()\n-        };\n+        incremental_verify_ich_cold(tcx.sess(), DebugArg::from(&dep_node), DebugArg::from(&result));\n+    }\n+}\n \n-        // When we emit an error message and panic, we try to debug-print the `DepNode`\n-        // and query result. Unforunately, this can cause us to run additional queries,\n-        // which may result in another fingerprint mismatch while we're in the middle\n-        // of processing this one. To avoid a double-panic (which kills the process\n-        // before we can print out the query static), we print out a terse\n-        // but 'safe' message if we detect a re-entrant call to this method.\n-        thread_local! {\n-            static INSIDE_VERIFY_PANIC: Cell<bool> = const { Cell::new(false) };\n-        };\n+// This DebugArg business is largely a mirror of std::fmt::ArgumentV1, which is\n+// currently not exposed publicly.\n+//\n+// The PR which added this attempted to use `&dyn Debug` instead, but that\n+// showed statistically significant worse compiler performance. It's not\n+// actually clear what the cause there was -- the code should be cold. If this\n+// can be replaced with `&dyn Debug` with on perf impact, then it probably\n+// should be.\n+extern \"C\" {\n+    type Opaque;\n+}\n \n-        let old_in_panic = INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.replace(true));\n+struct DebugArg<'a> {\n+    value: &'a Opaque,\n+    fmt: fn(&Opaque, &mut std::fmt::Formatter<'_>) -> std::fmt::Result,\n+}\n \n-        if old_in_panic {\n-            tcx.sess().struct_err(\"internal compiler error: re-entrant incremental verify failure, suppressing message\")\n-                .emit();\n-        } else {\n-            tcx.sess().struct_err(&format!(\"internal compiler error: encountered incremental compilation error with {:?}\", dep_node))\n+impl<'a, T> From<&'a T> for DebugArg<'a>\n+where\n+    T: std::fmt::Debug,\n+{\n+    fn from(value: &'a T) -> DebugArg<'a> {\n+        DebugArg {\n+            value: unsafe { std::mem::transmute(value) },\n+            fmt: unsafe {\n+                std::mem::transmute(<T as std::fmt::Debug>::fmt as fn(_, _) -> std::fmt::Result)\n+            },\n+        }\n+    }\n+}\n+\n+impl std::fmt::Debug for DebugArg<'_> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        (self.fmt)(self.value, f)\n+    }\n+}\n+\n+// Note that this is marked #[cold] and intentionally takes the equivalent of\n+// `dyn Debug` for its arguments, as we want to avoid generating a bunch of\n+// different implementations for LLVM to chew on (and filling up the final\n+// binary, too).\n+#[cold]\n+fn incremental_verify_ich_cold(sess: &Session, dep_node: DebugArg<'_>, result: DebugArg<'_>) {\n+    let run_cmd = if let Some(crate_name) = &sess.opts.crate_name {\n+        format!(\"`cargo clean -p {}` or `cargo clean`\", crate_name)\n+    } else {\n+        \"`cargo clean`\".to_string()\n+    };\n+\n+    // When we emit an error message and panic, we try to debug-print the `DepNode`\n+    // and query result. Unfortunately, this can cause us to run additional queries,\n+    // which may result in another fingerprint mismatch while we're in the middle\n+    // of processing this one. To avoid a double-panic (which kills the process\n+    // before we can print out the query static), we print out a terse\n+    // but 'safe' message if we detect a re-entrant call to this method.\n+    thread_local! {\n+        static INSIDE_VERIFY_PANIC: Cell<bool> = const { Cell::new(false) };\n+    };\n+\n+    let old_in_panic = INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.replace(true));\n+\n+    if old_in_panic {\n+        sess.struct_err(\n+            \"internal compiler error: re-entrant incremental verify failure, suppressing message\",\n+        )\n+        .emit();\n+    } else {\n+        sess.struct_err(&format!(\"internal compiler error: encountered incremental compilation error with {:?}\", dep_node))\n                 .help(&format!(\"This is a known issue with the compiler. Run {} to allow your project to compile\", run_cmd))\n                 .note(&\"Please follow the instructions below to create a bug report with the provided information\")\n                 .note(&\"See <https://github.com/rust-lang/rust/issues/84970> for more information\")\n                 .emit();\n-            panic!(\"Found unstable fingerprints for {:?}: {:?}\", dep_node, result);\n-        }\n-\n-        INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.set(old_in_panic));\n+        panic!(\"Found unstable fingerprints for {:?}: {:?}\", dep_node, result);\n     }\n+\n+    INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.set(old_in_panic));\n }\n \n /// Ensure that either this query has all green inputs or been executed."}]}