{"sha": "77a4bfd34f2d251482aca8e8da10634f34552e3b", "node_id": "C_kwDOAAsO6NoAKDc3YTRiZmQzNGYyZDI1MTQ4MmFjYThlOGRhMTA2MzRmMzQ1NTJlM2I", "commit": {"author": {"name": "bruno-ortiz", "email": "brunortiz11@gmail.com", "date": "2022-02-26T01:37:09Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:48:38Z"}, "message": "fixing linting problemas", "tree": {"sha": "3585eff856c3f174faa4e16871d970c3b5513104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3585eff856c3f174faa4e16871d970c3b5513104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77a4bfd34f2d251482aca8e8da10634f34552e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77a4bfd34f2d251482aca8e8da10634f34552e3b", "html_url": "https://github.com/rust-lang/rust/commit/77a4bfd34f2d251482aca8e8da10634f34552e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77a4bfd34f2d251482aca8e8da10634f34552e3b/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68aa20bb8add41a2996c857235f554e11cde71aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/68aa20bb8add41a2996c857235f554e11cde71aa", "html_url": "https://github.com/rust-lang/rust/commit/68aa20bb8add41a2996c857235f554e11cde71aa"}], "stats": {"total": 262, "additions": 131, "deletions": 131}, "files": [{"sha": "2df5ef61111c62c408fb3579d58290cad545b879", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 131, "deletions": 131, "changes": 262, "blob_url": "https://github.com/rust-lang/rust/blob/77a4bfd34f2d251482aca8e8da10634f34552e3b/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/77a4bfd34f2d251482aca8e8da10634f34552e3b/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=77a4bfd34f2d251482aca8e8da10634f34552e3b", "patch": "@@ -7,148 +7,148 @@ import { activeToolchain, Cargo, Crate, getRustcVersion } from './toolchain';\n const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n \n export class RustDependenciesProvider implements vscode.TreeDataProvider<Dependency | DependencyFile>{\n-  cargo: Cargo;\n-  dependenciesMap: { [id: string]: Dependency | DependencyFile };\n-\n-  constructor(\n-    private readonly workspaceRoot: string,\n-  ) {\n-    this.cargo = new Cargo(this.workspaceRoot || '.', debugOutput);\n-    this.dependenciesMap = {};\n-  }\n-\n-  private _onDidChangeTreeData: vscode.EventEmitter<Dependency | DependencyFile | undefined | null | void> = new vscode.EventEmitter<Dependency | undefined | null | void>();\n-\n-  readonly onDidChangeTreeData: vscode.Event<Dependency | DependencyFile | undefined | null | void> = this._onDidChangeTreeData.event;\n-\n-\n-  getDependency(filePath: string): Dependency | DependencyFile | undefined {\n-    return this.dependenciesMap[filePath.toLowerCase()];\n-  }\n-\n-  contains(filePath: string): boolean {\n-    return filePath.toLowerCase() in this.dependenciesMap;\n-  }\n-\n-  refresh(): void {\n-    this._onDidChangeTreeData.fire();\n-  }\n-\n-  getParent?(element: Dependency | DependencyFile): vscode.ProviderResult<Dependency | DependencyFile> {\n-    if (element instanceof Dependency) return undefined;\n-    return element.parent;\n-  }\n-\n-  getTreeItem(element: Dependency | DependencyFile): vscode.TreeItem | Thenable<vscode.TreeItem> {\n-    if (element.id! in this.dependenciesMap) return this.dependenciesMap[element.id!];\n-    return element;\n-  }\n-\n-  getChildren(element?: Dependency | DependencyFile): vscode.ProviderResult<Dependency[] | DependencyFile[]> {\n-    return new Promise((resolve, _reject) => {\n-      if (!this.workspaceRoot) {\n-        void vscode.window.showInformationMessage('No dependency in empty workspace');\n-        return Promise.resolve([]);\n-      }\n-\n-      if (element) {\n-        const files = fs.readdirSync(element.dependencyPath).map(fileName => {\n-          const filePath = fspath.join(element.dependencyPath, fileName);\n-          const collapsibleState = fs.lstatSync(filePath).isDirectory() ?\n-            vscode.TreeItemCollapsibleState.Collapsed :\n-            vscode.TreeItemCollapsibleState.None;\n-          const dep = new DependencyFile(\n-            fileName,\n-            filePath,\n-            element,\n-            collapsibleState\n-          );\n-          this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n-          return dep;\n+    cargo: Cargo;\n+    dependenciesMap: { [id: string]: Dependency | DependencyFile };\n+\n+    constructor(\n+        private readonly workspaceRoot: string,\n+    ) {\n+        this.cargo = new Cargo(this.workspaceRoot || '.', debugOutput);\n+        this.dependenciesMap = {};\n+    }\n+\n+    private _onDidChangeTreeData: vscode.EventEmitter<Dependency | DependencyFile | undefined | null | void> = new vscode.EventEmitter<Dependency | undefined | null | void>();\n+\n+    readonly onDidChangeTreeData: vscode.Event<Dependency | DependencyFile | undefined | null | void> = this._onDidChangeTreeData.event;\n+\n+\n+    getDependency(filePath: string): Dependency | DependencyFile | undefined {\n+        return this.dependenciesMap[filePath.toLowerCase()];\n+    }\n+\n+    contains(filePath: string): boolean {\n+        return filePath.toLowerCase() in this.dependenciesMap;\n+    }\n+\n+    refresh(): void {\n+        this._onDidChangeTreeData.fire();\n+    }\n+\n+    getParent?(element: Dependency | DependencyFile): vscode.ProviderResult<Dependency | DependencyFile> {\n+        if (element instanceof Dependency) return undefined;\n+        return element.parent;\n+    }\n+\n+    getTreeItem(element: Dependency | DependencyFile): vscode.TreeItem | Thenable<vscode.TreeItem> {\n+        if (element.id! in this.dependenciesMap) return this.dependenciesMap[element.id!];\n+        return element;\n+    }\n+\n+    getChildren(element?: Dependency | DependencyFile): vscode.ProviderResult<Dependency[] | DependencyFile[]> {\n+        return new Promise((resolve, _reject) => {\n+            if (!this.workspaceRoot) {\n+                void vscode.window.showInformationMessage('No dependency in empty workspace');\n+                return Promise.resolve([]);\n+            }\n+\n+            if (element) {\n+                const files = fs.readdirSync(element.dependencyPath).map(fileName => {\n+                    const filePath = fspath.join(element.dependencyPath, fileName);\n+                    const collapsibleState = fs.lstatSync(filePath).isDirectory() ?\n+                        vscode.TreeItemCollapsibleState.Collapsed :\n+                        vscode.TreeItemCollapsibleState.None;\n+                    const dep = new DependencyFile(\n+                        fileName,\n+                        filePath,\n+                        element,\n+                        collapsibleState\n+                    );\n+                    this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n+                    return dep;\n+                });\n+                return resolve(\n+                    files\n+                );\n+            } else {\n+                return resolve(this.getRootDependencies());\n+            }\n         });\n-        return resolve(\n-          files\n+    }\n+\n+    private async getRootDependencies(): Promise<Dependency[]> {\n+        const registryDir = fspath.join(os.homedir(), '.cargo', 'registry', 'src');\n+        const basePath = fspath.join(registryDir, fs.readdirSync(registryDir)[0]);\n+        const deps = await this.getDepsInCartoTree(basePath);\n+        const stdlib = await this.getStdLib();\n+        this.dependenciesMap[stdlib.dependencyPath.toLowerCase()] = stdlib;\n+        return [stdlib].concat(deps);\n+    }\n+\n+    private async getStdLib(): Promise<Dependency> {\n+        const toolchain = await activeToolchain();\n+        const rustVersion = await getRustcVersion(os.homedir());\n+        const stdlibPath = fspath.join(os.homedir(), '.rustup', 'toolchains', toolchain, 'lib', 'rustlib', 'src', 'rust', 'library');\n+        const stdlib = new Dependency(\n+            \"stdlib\",\n+            rustVersion,\n+            stdlibPath,\n+            vscode.TreeItemCollapsibleState.Collapsed\n         );\n-      } else {\n-        return resolve(this.getRootDependencies());\n-      }\n-    });\n-  }\n-\n-  private async getRootDependencies(): Promise<Dependency[]> {\n-    const registryDir = fspath.join(os.homedir(), '.cargo', 'registry', 'src');\n-    const basePath = fspath.join(registryDir, fs.readdirSync(registryDir)[0]);\n-    const deps = await this.getDepsInCartoTree(basePath);\n-    const stdlib = await this.getStdLib();\n-    this.dependenciesMap[stdlib.dependencyPath.toLowerCase()] = stdlib;\n-    return [stdlib].concat(deps);\n-  }\n-\n-  private async getStdLib(): Promise<Dependency> {\n-    const toolchain = await activeToolchain();\n-    const rustVersion = await getRustcVersion(os.homedir());\n-    const stdlibPath = fspath.join(os.homedir(), '.rustup', 'toolchains', toolchain, 'lib', 'rustlib', 'src', 'rust', 'library');\n-    const stdlib = new Dependency(\n-      \"stdlib\",\n-      rustVersion,\n-      stdlibPath,\n-      vscode.TreeItemCollapsibleState.Collapsed\n-    );\n-\n-    return stdlib;\n-  }\n-\n-  private async getDepsInCartoTree(basePath: string): Promise<Dependency[]> {\n-    const crates: Crate[] = await this.cargo.crates();\n-    const toDep = (moduleName: string, version: string): Dependency => {\n-      const cratePath = fspath.join(basePath, `${moduleName}-${version}`);\n-      return new Dependency(\n-        moduleName,\n-        version,\n-        cratePath,\n-        vscode.TreeItemCollapsibleState.Collapsed\n-      );\n-    };\n-\n-    const deps = crates.map(crate => {\n-      const dep = toDep(crate.name, crate.version);\n-      this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n-      return dep;\n-    });\n-    return deps;\n-  }\n+\n+        return stdlib;\n+    }\n+\n+    private async getDepsInCartoTree(basePath: string): Promise<Dependency[]> {\n+        const crates: Crate[] = await this.cargo.crates();\n+        const toDep = (moduleName: string, version: string): Dependency => {\n+            const cratePath = fspath.join(basePath, `${moduleName}-${version}`);\n+            return new Dependency(\n+                moduleName,\n+                version,\n+                cratePath,\n+                vscode.TreeItemCollapsibleState.Collapsed\n+            );\n+        };\n+\n+        const deps = crates.map(crate => {\n+            const dep = toDep(crate.name, crate.version);\n+            this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n+            return dep;\n+        });\n+        return deps;\n+    }\n }\n \n \n export class Dependency extends vscode.TreeItem {\n-  constructor(\n-    public readonly label: string,\n-    private version: string,\n-    readonly dependencyPath: string,\n-    public readonly collapsibleState: vscode.TreeItemCollapsibleState\n-  ) {\n-    super(label, collapsibleState);\n-    this.tooltip = `${this.label}-${this.version}`;\n-    this.description = this.version;\n-    this.resourceUri = vscode.Uri.file(dependencyPath);\n-  }\n+    constructor(\n+        public readonly label: string,\n+        private version: string,\n+        readonly dependencyPath: string,\n+        public readonly collapsibleState: vscode.TreeItemCollapsibleState\n+    ) {\n+        super(label, collapsibleState);\n+        this.tooltip = `${this.label}-${this.version}`;\n+        this.description = this.version;\n+        this.resourceUri = vscode.Uri.file(dependencyPath);\n+    }\n }\n \n export class DependencyFile extends vscode.TreeItem {\n \n-  constructor(\n-    readonly label: string,\n-    readonly dependencyPath: string,\n-    readonly parent: Dependency | DependencyFile,\n-    public readonly collapsibleState: vscode.TreeItemCollapsibleState\n-  ) {\n-    super(vscode.Uri.file(dependencyPath), collapsibleState);\n-    const isDir = fs.lstatSync(this.dependencyPath).isDirectory();\n-    this.id = this.dependencyPath.toLowerCase();\n-    if (!isDir) {\n-      this.command = { command: 'rust-analyzer.openFile', title: \"Open File\", arguments: [vscode.Uri.file(this.dependencyPath)], };\n+    constructor(\n+        readonly label: string,\n+        readonly dependencyPath: string,\n+        readonly parent: Dependency | DependencyFile,\n+        public readonly collapsibleState: vscode.TreeItemCollapsibleState\n+    ) {\n+        super(vscode.Uri.file(dependencyPath), collapsibleState);\n+        const isDir = fs.lstatSync(this.dependencyPath).isDirectory();\n+        this.id = this.dependencyPath.toLowerCase();\n+        if (!isDir) {\n+            this.command = { command: 'rust-analyzer.openFile', title: \"Open File\", arguments: [vscode.Uri.file(this.dependencyPath)], };\n+        }\n     }\n-  }\n }\n \n export type DependencyId = { id: string };\n\\ No newline at end of file"}]}