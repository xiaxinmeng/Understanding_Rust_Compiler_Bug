{"sha": "d0fac05d8f0920d0aaa81dc4832334a49e7dbff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZmFjMDVkOGYwOTIwZDBhYWE4MWRjNDgzMjMzNGE0OWU3ZGJmZjg=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-11T03:54:04Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-11T03:54:04Z"}, "message": "Add test for capturing enums", "tree": {"sha": "678a3b0747a765563fec649f937ca32b89bbcd08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/678a3b0747a765563fec649f937ca32b89bbcd08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8", "html_url": "https://github.com/rust-lang/rust/commit/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deeb025f39a39fc58fc87900d62550dada849e1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/deeb025f39a39fc58fc87900d62550dada849e1b", "html_url": "https://github.com/rust-lang/rust/commit/deeb025f39a39fc58fc87900d62550dada849e1b"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "175fd79012446c35a81f46b1c56623408329b0ee", "filename": "src/test/ui/closures/2229_closure_analysis/capture-enums.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.rs?ref=d0fac05d8f0920d0aaa81dc4832334a49e7dbff8", "patch": "@@ -0,0 +1,56 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+enum Info {\n+    Point(i32, i32, String),\n+    Meta(String, Vec<(i32, i32)>)\n+}\n+\n+fn multi_variant_enum() {\n+    let point = Info::Point(10, -10, \"1\".into());\n+\n+    let vec = Vec::new();\n+    let meta = Info::Meta(\"meta\".into(), vec);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        if let Info::Point(_, _, str) = point {\n+            //~^ Capturing point[] -> ImmBorrow\n+            //~| Capturing point[(2, 0)] -> ByValue\n+            //~| Min Capture point[] -> ByValue\n+            println!(\"{}\", str);\n+        }\n+\n+        if let Info::Meta(_, v) = meta {\n+            //~^ Capturing meta[] -> ImmBorrow\n+            //~| Capturing meta[(1, 1)] -> ByValue\n+            //~| Min Capture meta[] -> ByValue\n+            println!(\"{:?}\", v);\n+        }\n+    };\n+\n+    c();\n+}\n+\n+enum SingleVariant {\n+    Point(i32, i32, String),\n+}\n+\n+fn single_variant_enum() {\n+    let point = SingleVariant::Point(10, -10, \"1\".into());\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+    let SingleVariant::Point(_, _, str) = point;\n+        //~^ Capturing point[(2, 0)] -> ByValue\n+        //~| Min Capture point[(2, 0)] -> ByValue\n+        println!(\"{}\", str);\n+    };\n+\n+    c();\n+}\n+\n+fn main() {}"}, {"sha": "76a2de2faf9c89e87a14a8db204be0fe98027180", "filename": "src/test/ui/closures/2229_closure_analysis/capture-enums.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.stderr?ref=d0fac05d8f0920d0aaa81dc4832334a49e7dbff8", "patch": "@@ -0,0 +1,78 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/capture-enums.rs:16:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/capture-enums.rs:44:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/capture-enums.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: Capturing point[] -> ImmBorrow\n+  --> $DIR/capture-enums.rs:19:41\n+   |\n+LL |         if let Info::Point(_, _, str) = point {\n+   |                                         ^^^^^\n+\n+error: Capturing point[(2, 0)] -> ByValue\n+  --> $DIR/capture-enums.rs:19:41\n+   |\n+LL |         if let Info::Point(_, _, str) = point {\n+   |                                         ^^^^^\n+\n+error: Capturing meta[] -> ImmBorrow\n+  --> $DIR/capture-enums.rs:26:35\n+   |\n+LL |         if let Info::Meta(_, v) = meta {\n+   |                                   ^^^^\n+\n+error: Capturing meta[(1, 1)] -> ByValue\n+  --> $DIR/capture-enums.rs:26:35\n+   |\n+LL |         if let Info::Meta(_, v) = meta {\n+   |                                   ^^^^\n+\n+error: Min Capture point[] -> ByValue\n+  --> $DIR/capture-enums.rs:19:41\n+   |\n+LL |         if let Info::Point(_, _, str) = point {\n+   |                                         ^^^^^\n+\n+error: Min Capture meta[] -> ByValue\n+  --> $DIR/capture-enums.rs:26:35\n+   |\n+LL |         if let Info::Meta(_, v) = meta {\n+   |                                   ^^^^\n+\n+error: Capturing point[(2, 0)] -> ByValue\n+  --> $DIR/capture-enums.rs:47:43\n+   |\n+LL |     let SingleVariant::Point(_, _, str) = point;\n+   |                                           ^^^^^\n+\n+error: Min Capture point[(2, 0)] -> ByValue\n+  --> $DIR/capture-enums.rs:47:43\n+   |\n+LL |     let SingleVariant::Point(_, _, str) = point;\n+   |                                           ^^^^^\n+\n+error: aborting due to 10 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}]}