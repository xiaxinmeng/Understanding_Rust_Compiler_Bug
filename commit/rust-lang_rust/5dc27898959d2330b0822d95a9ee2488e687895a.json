{"sha": "5dc27898959d2330b0822d95a9ee2488e687895a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzI3ODk4OTU5ZDIzMzBiMDgyMmQ5NWE5ZWUyNDg4ZTY4Nzg5NWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-08T10:51:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-08T10:53:14Z"}, "message": "Move docs to dedicated module", "tree": {"sha": "546680fa805ab2926106ec4ce2f35ae12831e135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/546680fa805ab2926106ec4ce2f35ae12831e135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc27898959d2330b0822d95a9ee2488e687895a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc27898959d2330b0822d95a9ee2488e687895a", "html_url": "https://github.com/rust-lang/rust/commit/5dc27898959d2330b0822d95a9ee2488e687895a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc27898959d2330b0822d95a9ee2488e687895a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a6b363b44e335af5f26ac503461ef15cca82ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6b363b44e335af5f26ac503461ef15cca82ace", "html_url": "https://github.com/rust-lang/rust/commit/2a6b363b44e335af5f26ac503461ef15cca82ace"}], "stats": {"total": 139, "additions": 70, "deletions": 69}, "files": [{"sha": "59d7d589a8f69a171a31040947c1b8429a449078", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5dc27898959d2330b0822d95a9ee2488e687895a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc27898959d2330b0822d95a9ee2488e687895a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=5dc27898959d2330b0822d95a9ee2488e687895a", "patch": "@@ -319,12 +319,6 @@ impl Module {\n     }\n }\n \n-impl Docs for Module {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        self.declaration_source(db).and_then(|it| docs_from_ast(&*it.1))\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructField {\n     pub(crate) parent: VariantDef,\n@@ -355,15 +349,6 @@ impl StructField {\n     }\n }\n \n-impl Docs for StructField {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        match self.source(db).1 {\n-            FieldSource::Named(named) => docs_from_ast(&*named),\n-            FieldSource::Pos(..) => return None,\n-        }\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Struct {\n     pub(crate) id: StructId,\n@@ -425,12 +410,6 @@ impl Struct {\n     }\n }\n \n-impl Docs for Struct {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Union {\n     pub(crate) id: StructId,\n@@ -464,12 +443,6 @@ impl Union {\n     }\n }\n \n-impl Docs for Union {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Enum {\n     pub(crate) id: EnumId,\n@@ -519,12 +492,6 @@ impl Enum {\n     }\n }\n \n-impl Docs for Enum {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumVariant {\n     pub(crate) parent: Enum,\n@@ -568,12 +535,6 @@ impl EnumVariant {\n     }\n }\n \n-impl Docs for EnumVariant {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n /// The defs which have a body.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum DefWithBody {\n@@ -757,12 +718,6 @@ impl Function {\n     }\n }\n \n-impl Docs for Function {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Const {\n     pub(crate) id: ConstId,\n@@ -806,12 +761,6 @@ impl Const {\n     }\n }\n \n-impl Docs for Const {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n /// The declared signature of a const.\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ConstSignature {\n@@ -884,12 +833,6 @@ impl Static {\n     }\n }\n \n-impl Docs for Static {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Trait {\n     pub(crate) id: TraitId,\n@@ -936,12 +879,6 @@ impl Trait {\n     }\n }\n \n-impl Docs for Trait {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeAlias {\n     pub(crate) id: TypeAliasId,\n@@ -998,11 +935,6 @@ impl TypeAlias {\n     }\n }\n \n-impl Docs for TypeAlias {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDef {\n     pub(crate) id: MacroDefId,"}, {"sha": "c2279fe95b6ddaa3aa74d3f8142a88d0e8c0218a", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5dc27898959d2330b0822d95a9ee2488e687895a/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc27898959d2330b0822d95a9ee2488e687895a/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=5dc27898959d2330b0822d95a9ee2488e687895a", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::ast;\n \n-use crate::HirDatabase;\n+use crate::{HirDatabase, Module, StructField, Struct, Enum, EnumVariant, Static, Const, Function, Union};\n \n /// Holds documentation\n #[derive(Debug, Clone)]\n@@ -29,3 +29,72 @@ pub trait Docs {\n pub(crate) fn docs_from_ast(node: &impl ast::DocCommentsOwner) -> Option<Documentation> {\n     node.doc_comment_text().map(|it| Documentation::new(&it))\n }\n+\n+impl Docs for Module {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        self.declaration_source(db).and_then(|it| docs_from_ast(&*it.1))\n+    }\n+}\n+\n+impl Docs for StructField {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        match self.source(db).1 {\n+            FieldSource::Named(named) => docs_from_ast(&*named),\n+            FieldSource::Pos(..) => return None,\n+        }\n+    }\n+}\n+\n+impl Docs for Struct {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n+impl Docs for Union {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n+impl Docs for Enum {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n+impl Docs for EnumVariant {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n+impl Docs for Function {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n+impl Docs for Const {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n+impl Docs for Static {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n+impl Docs for Trait {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n+impl Docs for TypeAlias {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}"}]}