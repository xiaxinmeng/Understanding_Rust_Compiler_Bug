{"sha": "ea6b3ddee9663e27221f366671261b21618394a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNmIzZGRlZTk2NjNlMjcyMjFmMzY2NjcxMjYxYjIxNjE4Mzk0YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-28T14:59:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-28T14:59:02Z"}, "message": "Auto merge of #33257 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 7 pull requests\n\n- Successful merges: #32991, #33056, #33095, #33152, #33212, #33218, #33234\n- Failed merges: #32912", "tree": {"sha": "0343b5361085cbbe94966b0608b7483e54a953c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0343b5361085cbbe94966b0608b7483e54a953c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea6b3ddee9663e27221f366671261b21618394a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6b3ddee9663e27221f366671261b21618394a0", "html_url": "https://github.com/rust-lang/rust/commit/ea6b3ddee9663e27221f366671261b21618394a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea6b3ddee9663e27221f366671261b21618394a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4751e45521e5a1e70f5cf5086b7712c999546af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4751e45521e5a1e70f5cf5086b7712c999546af8", "html_url": "https://github.com/rust-lang/rust/commit/4751e45521e5a1e70f5cf5086b7712c999546af8"}, {"sha": "b9dd8aa4c291ce464655735802e68b26fe9c6862", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9dd8aa4c291ce464655735802e68b26fe9c6862", "html_url": "https://github.com/rust-lang/rust/commit/b9dd8aa4c291ce464655735802e68b26fe9c6862"}], "stats": {"total": 77, "additions": 64, "deletions": 13}, "files": [{"sha": "fc2a762088331185e1ea9031feb4f1050eb7ffec", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea6b3ddee9663e27221f366671261b21618394a0/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea6b3ddee9663e27221f366671261b21618394a0/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=ea6b3ddee9663e27221f366671261b21618394a0", "patch": "@@ -412,7 +412,7 @@ enter the following commands:\n \n ```bash\n $ mkdir src\n-$ mv main.rs src/main.rs\n+$ mv main.rs src/main.rs # or 'move main.rs src/main.rs' on Windows\n $ rm main  # or 'del main.exe' on Windows\n ```\n "}, {"sha": "cb0757318984db19015035c4d91d3efd7e057d57", "filename": "src/doc/book/lifetimes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea6b3ddee9663e27221f366671261b21618394a0/src%2Fdoc%2Fbook%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea6b3ddee9663e27221f366671261b21618394a0/src%2Fdoc%2Fbook%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flifetimes.md?ref=ea6b3ddee9663e27221f366671261b21618394a0", "patch": "@@ -1,7 +1,7 @@\n % Lifetimes\n \n-This guide is three of three presenting Rust\u2019s ownership system. This is one of\n-Rust\u2019s most unique and compelling features, with which Rust developers should\n+This is the last of three sections presenting Rust\u2019s ownership system. This is one of\n+Rust\u2019s most distinct and compelling features, with which Rust developers should\n become quite acquainted. Ownership is how Rust achieves its largest goal,\n memory safety. There are a few distinct concepts, each with its own chapter:\n "}, {"sha": "e2e0403b738fa8cf8ebd3bd88dd49616185691a7", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea6b3ddee9663e27221f366671261b21618394a0/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea6b3ddee9663e27221f366671261b21618394a0/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=ea6b3ddee9663e27221f366671261b21618394a0", "patch": "@@ -1,7 +1,7 @@\n % Ownership\n \n-This guide is one of three presenting Rust\u2019s ownership system. This is one of\n-Rust\u2019s most unique and compelling features, with which Rust developers should\n+This is the first of three sections presenting Rust\u2019s ownership system. This is one of\n+Rust\u2019s most distinct and compelling features, with which Rust developers should\n become quite acquainted. Ownership is how Rust achieves its largest goal,\n memory safety. There are a few distinct concepts, each with its own\n chapter:"}, {"sha": "a28f450c942af04cf36302c15483bb13df3a0a1c", "filename": "src/doc/book/references-and-borrowing.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ea6b3ddee9663e27221f366671261b21618394a0/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea6b3ddee9663e27221f366671261b21618394a0/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md?ref=ea6b3ddee9663e27221f366671261b21618394a0", "patch": "@@ -1,7 +1,7 @@\n % References and Borrowing\n \n-This guide is two of three presenting Rust\u2019s ownership system. This is one of\n-Rust\u2019s most unique and compelling features, with which Rust developers should\n+This is the second of three sections presenting Rust\u2019s ownership system. This is one of\n+Rust\u2019s most distinct and compelling features, with which Rust developers should\n become quite acquainted. Ownership is how Rust achieves its largest goal,\n memory safety. There are a few distinct concepts, each with its own\n chapter:\n@@ -77,6 +77,32 @@ let answer = foo(&v1, &v2);\n // we can use v1 and v2 here!\n ```\n \n+A more concrete example:\n+\n+```rust\n+fn main() {\n+    // Don't worry if you don't understand how `fold` works, the point here is that an immutable reference is borrowed.\n+    fn sum_vec(v: &Vec<i32>) -> i32 {\n+        return v.iter().fold(0, |a, &b| a + b);\n+    }\n+    // Borrow two vectors and and sum them.\n+    // This kind of borrowing does not allow mutation to the borrowed.\n+    fn foo(v1: &Vec<i32>, v2: &Vec<i32>) -> i32 {\n+        // do stuff with v1 and v2\n+        let s1 = sum_vec(v1);\n+        let s2 = sum_vec(v2);\n+        // return the answer\n+        s1 + s2\n+    }\n+\n+    let v1 = vec![1, 2, 3];\n+    let v2 = vec![4, 5, 6];\n+\n+    let answer = foo(&v1, &v2);\n+    println!(\"{}\", answer);\n+}\n+```\n+\n Instead of taking `Vec<i32>`s as our arguments, we take a reference:\n `&Vec<i32>`. And instead of passing `v1` and `v2` directly, we pass `&v1` and\n `&v2`. We call the `&T` type a \u2018reference\u2019, and rather than owning the resource,"}, {"sha": "8b3a14b24df29d595c459fec70f43ccc409d1c35", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ea6b3ddee9663e27221f366671261b21618394a0", "patch": "@@ -459,6 +459,9 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     /// let mut s = [1, 2, 3];\n     /// let ptr: *mut u32 = s.as_mut_ptr();\n+    /// let first_value = unsafe { ptr.as_mut().unwrap() };\n+    /// *first_value = 4;\n+    /// println!(\"{:?}\", s); // It'll print: \"[4, 2, 3]\".\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]"}, {"sha": "abc6ff4a294e3b3354e4520dbc5c9206404c6f2b", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=ea6b3ddee9663e27221f366671261b21618394a0", "patch": "@@ -157,7 +157,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         \"scope of call-site for function\"\n                     }\n                     region::CodeExtentData::ParameterScope { .. } => {\n-                        \"scope of parameters for function\"\n+                        \"scope of function body\"\n                     }\n                     region::CodeExtentData::DestructionScope(_) => {\n                         new_string = format!(\"destruction scope surrounding {}\", tag);"}, {"sha": "e4ef3fca55dc7fb4bcff83246c27672ef5271051", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=ea6b3ddee9663e27221f366671261b21618394a0", "patch": "@@ -535,9 +535,9 @@ impl<T, S> HashSet<T, S>\n \n     /// Adds a value to the set.\n     ///\n-    /// If the set did not have a value present, `true` is returned.\n+    /// If the set did not have this value present, `true` is returned.\n     ///\n-    /// If the set did have this key present, `false` is returned.\n+    /// If the set did have this value present, `false` is returned.\n     ///\n     /// # Examples\n     ///"}, {"sha": "8761ca3717895adb0aebba24551e46d88d71b67d", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=ea6b3ddee9663e27221f366671261b21618394a0", "patch": "@@ -333,11 +333,11 @@ pub enum InlineAttr {\n pub fn find_inline_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> InlineAttr {\n     attrs.iter().fold(InlineAttr::None, |ia,attr| {\n         match attr.node.value.node {\n-            MetaItemKind::Word(ref n) if *n == \"inline\" => {\n+            MetaItemKind::Word(ref n) if n == \"inline\" => {\n                 mark_used(attr);\n                 InlineAttr::Hint\n             }\n-            MetaItemKind::List(ref n, ref items) if *n == \"inline\" => {\n+            MetaItemKind::List(ref n, ref items) if n == \"inline\" => {\n                 mark_used(attr);\n                 if items.len() != 1 {\n                     diagnostic.map(|d|{ d.span_err(attr.span, \"expected one argument\"); });\n@@ -711,7 +711,7 @@ pub fn require_unique_names(diagnostic: &Handler, metas: &[P<MetaItem>]) {\n pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr> {\n     let mut acc = Vec::new();\n     match attr.node.value.node {\n-        ast::MetaItemKind::List(ref s, ref items) if *s == \"repr\" => {\n+        ast::MetaItemKind::List(ref s, ref items) if s == \"repr\" => {\n             mark_used(attr);\n             for item in items {\n                 match item.node {"}, {"sha": "47de32ed7d00fe6a516ac9282f8e5f11ec359ca0", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6b3ddee9663e27221f366671261b21618394a0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=ea6b3ddee9663e27221f366671261b21618394a0", "patch": "@@ -566,6 +566,28 @@ impl<'a> PartialEq<InternedString> for &'a str {\n     }\n }\n \n+impl PartialEq<str> for InternedString {\n+    #[inline(always)]\n+    fn eq(&self, other: &str) -> bool {\n+        PartialEq::eq(&self.string[..], other)\n+    }\n+    #[inline(always)]\n+    fn ne(&self, other: &str) -> bool {\n+        PartialEq::ne(&self.string[..], other)\n+    }\n+}\n+\n+impl PartialEq<InternedString> for str {\n+    #[inline(always)]\n+    fn eq(&self, other: &InternedString) -> bool {\n+        PartialEq::eq(self, &other.string[..])\n+    }\n+    #[inline(always)]\n+    fn ne(&self, other: &InternedString) -> bool {\n+        PartialEq::ne(self, &other.string[..])\n+    }\n+}\n+\n impl Decodable for InternedString {\n     fn decode<D: Decoder>(d: &mut D) -> Result<InternedString, D::Error> {\n         Ok(intern(d.read_str()?.as_ref()).as_str())"}]}