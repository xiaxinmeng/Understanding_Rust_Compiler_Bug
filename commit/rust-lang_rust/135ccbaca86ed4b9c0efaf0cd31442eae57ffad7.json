{"sha": "135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNWNjYmFjYTg2ZWQ0YjljMGVmYWYwY2QzMTQ0MmVhZTU3ZmZhZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-01T00:39:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-01T00:39:18Z"}, "message": "Auto merge of #66908 - Centril:rollup-26givp6, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #66612 (Initial implementation of or-pattern usefulness checking)\n - #66705 (Atomic as_mut_ptr)\n - #66759 (impl TrustedLen for vec::Drain)\n - #66858 (Use LLVMAddAnalysisPasses instead of Rust's wrapper)\n - #66870 (SimplifyArmIdentity only for locals with the same type)\n - #66883 (rustc_typeck: gate AnonConst's generics on feature(const_generics).)\n - #66889 (Make python-generated source files compatible with rustfmt)\n - #66894 (Remove unneeded prelude imports in libcore tests)\n - #66895 (Feature gating *declarations* => new crate `rustc_feature`)\n\nFailed merges:\n\n - #66905 (rustc_plugin: Remove some remaining plugin features)\n\nr? @ghost", "tree": {"sha": "f5d91a593d425871fff9e1b68ac2e9f982d6c8e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d91a593d425871fff9e1b68ac2e9f982d6c8e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "html_url": "https://github.com/rust-lang/rust/commit/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3", "html_url": "https://github.com/rust-lang/rust/commit/d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3"}, {"sha": "b772b5b19d769e7062b032e6e73f6466b26d78bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b772b5b19d769e7062b032e6e73f6466b26d78bd", "html_url": "https://github.com/rust-lang/rust/commit/b772b5b19d769e7062b032e6e73f6466b26d78bd"}], "stats": {"total": 4040, "additions": 2255, "deletions": 1785}, "files": [{"sha": "67259aed8ebeece2b94f743cfb7649b50a1baa5e", "filename": "Cargo.lock", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -3199,6 +3199,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_fs_util\",\n  \"rustc_index\",\n  \"rustc_macros\",\n@@ -3574,6 +3575,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n  \"rustc_metadata\",\n@@ -3607,6 +3609,15 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n+[[package]]\n+name = \"rustc_feature\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"lazy_static 1.3.0\",\n+ \"rustc_data_structures\",\n+ \"syntax_pos\",\n+]\n+\n [[package]]\n name = \"rustc_fs_util\"\n version = \"0.0.0\"\n@@ -3682,6 +3693,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_target\",\n  \"syntax\",\n@@ -3786,6 +3798,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_lexer\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\",\n@@ -3802,6 +3815,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_parse\",\n  \"rustc_target\",\n@@ -3844,6 +3858,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_metadata\",\n  \"smallvec 1.0.0\",\n  \"syntax\",\n@@ -4442,6 +4457,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n@@ -4458,6 +4474,7 @@ dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_lexer\",\n  \"rustc_parse\",\n  \"serialize\",\n@@ -4475,6 +4492,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_parse\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\","}, {"sha": "85395d2ecdfc75b8e5593a02bda842d413e1b3c5", "filename": "src/etc/dec2flt_table.py", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Fetc%2Fdec2flt_table.py", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Fetc%2Fdec2flt_table.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdec2flt_table.py?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -111,14 +111,18 @@ def print_proper_powers():\n     print(\"pub const MIN_E: i16 = {};\".format(MIN_E))\n     print(\"pub const MAX_E: i16 = {};\".format(MAX_E))\n     print()\n+    print(\"#[rustfmt::skip]\")\n     typ = \"([u64; {0}], [i16; {0}])\".format(len(powers))\n-    print(\"pub const POWERS: \", typ, \" = ([\", sep='')\n+    print(\"pub const POWERS: \", typ, \" = (\", sep='')\n+    print(\"    [\")\n     for z in powers:\n-        print(\"    0x{:x},\".format(z.sig))\n-    print(\"], [\")\n+        print(\"        0x{:x},\".format(z.sig))\n+    print(\"    ],\")\n+    print(\"    [\")\n     for z in powers:\n-        print(\"    {},\".format(z.exp))\n-    print(\"]);\")\n+        print(\"        {},\".format(z.exp))\n+    print(\"    ],\")\n+    print(\");\")\n \n \n def print_short_powers(num_bits, significand_size):\n@@ -127,6 +131,7 @@ def print_short_powers(num_bits, significand_size):\n     max_e = int(ceil(log(max_sig, 5)))\n     e_range = range(max_e)\n     typ = \"[f{}; {}]\".format(num_bits, len(e_range))\n+    print(\"#[rustfmt::skip]\")\n     print(\"pub const F\", num_bits, \"_SHORT_POWERS: \", typ, \" = [\", sep='')\n     for e in e_range:\n         print(\"    1e{},\".format(e))"}, {"sha": "1a700b990569c39ac854f72150200a3131e64463", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -2703,6 +2703,9 @@ impl<T> ExactSizeIterator for Drain<'_, T> {\n     }\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<T> TrustedLen for Drain<'_, T> {}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Drain<'_, T> {}\n "}, {"sha": "1bd94ffa04e0e327b011271e294c4b8f5e20ec57", "filename": "src/libcore/num/dec2flt/table.rs", "status": "modified", "additions": 1231, "deletions": 1225, "changes": 2456, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Fnum%2Fdec2flt%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Fnum%2Fdec2flt%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Ftable.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -4,1232 +4,1237 @@\n pub const MIN_E: i16 = -305;\n pub const MAX_E: i16 = 305;\n \n-pub const POWERS: ([u64; 611], [i16; 611]) = ([\n-    0xe0b62e2929aba83c,\n-    0x8c71dcd9ba0b4926,\n-    0xaf8e5410288e1b6f,\n-    0xdb71e91432b1a24b,\n-    0x892731ac9faf056f,\n-    0xab70fe17c79ac6ca,\n-    0xd64d3d9db981787d,\n-    0x85f0468293f0eb4e,\n-    0xa76c582338ed2622,\n-    0xd1476e2c07286faa,\n-    0x82cca4db847945ca,\n-    0xa37fce126597973d,\n-    0xcc5fc196fefd7d0c,\n-    0xff77b1fcbebcdc4f,\n-    0x9faacf3df73609b1,\n-    0xc795830d75038c1e,\n-    0xf97ae3d0d2446f25,\n-    0x9becce62836ac577,\n-    0xc2e801fb244576d5,\n-    0xf3a20279ed56d48a,\n-    0x9845418c345644d7,\n-    0xbe5691ef416bd60c,\n-    0xedec366b11c6cb8f,\n-    0x94b3a202eb1c3f39,\n-    0xb9e08a83a5e34f08,\n-    0xe858ad248f5c22ca,\n-    0x91376c36d99995be,\n-    0xb58547448ffffb2e,\n-    0xe2e69915b3fff9f9,\n-    0x8dd01fad907ffc3c,\n-    0xb1442798f49ffb4b,\n-    0xdd95317f31c7fa1d,\n-    0x8a7d3eef7f1cfc52,\n-    0xad1c8eab5ee43b67,\n-    0xd863b256369d4a41,\n-    0x873e4f75e2224e68,\n-    0xa90de3535aaae202,\n-    0xd3515c2831559a83,\n-    0x8412d9991ed58092,\n-    0xa5178fff668ae0b6,\n-    0xce5d73ff402d98e4,\n-    0x80fa687f881c7f8e,\n-    0xa139029f6a239f72,\n-    0xc987434744ac874f,\n-    0xfbe9141915d7a922,\n-    0x9d71ac8fada6c9b5,\n-    0xc4ce17b399107c23,\n-    0xf6019da07f549b2b,\n-    0x99c102844f94e0fb,\n-    0xc0314325637a193a,\n-    0xf03d93eebc589f88,\n-    0x96267c7535b763b5,\n-    0xbbb01b9283253ca3,\n-    0xea9c227723ee8bcb,\n-    0x92a1958a7675175f,\n-    0xb749faed14125d37,\n-    0xe51c79a85916f485,\n-    0x8f31cc0937ae58d3,\n-    0xb2fe3f0b8599ef08,\n-    0xdfbdcece67006ac9,\n-    0x8bd6a141006042be,\n-    0xaecc49914078536d,\n-    0xda7f5bf590966849,\n-    0x888f99797a5e012d,\n-    0xaab37fd7d8f58179,\n-    0xd5605fcdcf32e1d7,\n-    0x855c3be0a17fcd26,\n-    0xa6b34ad8c9dfc070,\n-    0xd0601d8efc57b08c,\n-    0x823c12795db6ce57,\n-    0xa2cb1717b52481ed,\n-    0xcb7ddcdda26da269,\n-    0xfe5d54150b090b03,\n-    0x9efa548d26e5a6e2,\n-    0xc6b8e9b0709f109a,\n-    0xf867241c8cc6d4c1,\n-    0x9b407691d7fc44f8,\n-    0xc21094364dfb5637,\n-    0xf294b943e17a2bc4,\n-    0x979cf3ca6cec5b5b,\n-    0xbd8430bd08277231,\n-    0xece53cec4a314ebe,\n-    0x940f4613ae5ed137,\n-    0xb913179899f68584,\n-    0xe757dd7ec07426e5,\n-    0x9096ea6f3848984f,\n-    0xb4bca50b065abe63,\n-    0xe1ebce4dc7f16dfc,\n-    0x8d3360f09cf6e4bd,\n-    0xb080392cc4349ded,\n-    0xdca04777f541c568,\n-    0x89e42caaf9491b61,\n-    0xac5d37d5b79b6239,\n-    0xd77485cb25823ac7,\n-    0x86a8d39ef77164bd,\n-    0xa8530886b54dbdec,\n-    0xd267caa862a12d67,\n-    0x8380dea93da4bc60,\n-    0xa46116538d0deb78,\n-    0xcd795be870516656,\n-    0x806bd9714632dff6,\n-    0xa086cfcd97bf97f4,\n-    0xc8a883c0fdaf7df0,\n-    0xfad2a4b13d1b5d6c,\n-    0x9cc3a6eec6311a64,\n-    0xc3f490aa77bd60fd,\n-    0xf4f1b4d515acb93c,\n-    0x991711052d8bf3c5,\n-    0xbf5cd54678eef0b7,\n-    0xef340a98172aace5,\n-    0x9580869f0e7aac0f,\n-    0xbae0a846d2195713,\n-    0xe998d258869facd7,\n-    0x91ff83775423cc06,\n-    0xb67f6455292cbf08,\n-    0xe41f3d6a7377eeca,\n-    0x8e938662882af53e,\n-    0xb23867fb2a35b28e,\n-    0xdec681f9f4c31f31,\n-    0x8b3c113c38f9f37f,\n-    0xae0b158b4738705f,\n-    0xd98ddaee19068c76,\n-    0x87f8a8d4cfa417ca,\n-    0xa9f6d30a038d1dbc,\n-    0xd47487cc8470652b,\n-    0x84c8d4dfd2c63f3b,\n-    0xa5fb0a17c777cf0a,\n-    0xcf79cc9db955c2cc,\n-    0x81ac1fe293d599c0,\n-    0xa21727db38cb0030,\n-    0xca9cf1d206fdc03c,\n-    0xfd442e4688bd304b,\n-    0x9e4a9cec15763e2f,\n-    0xc5dd44271ad3cdba,\n-    0xf7549530e188c129,\n-    0x9a94dd3e8cf578ba,\n-    0xc13a148e3032d6e8,\n-    0xf18899b1bc3f8ca2,\n-    0x96f5600f15a7b7e5,\n-    0xbcb2b812db11a5de,\n-    0xebdf661791d60f56,\n-    0x936b9fcebb25c996,\n-    0xb84687c269ef3bfb,\n-    0xe65829b3046b0afa,\n-    0x8ff71a0fe2c2e6dc,\n-    0xb3f4e093db73a093,\n-    0xe0f218b8d25088b8,\n-    0x8c974f7383725573,\n-    0xafbd2350644eead0,\n-    0xdbac6c247d62a584,\n-    0x894bc396ce5da772,\n-    0xab9eb47c81f5114f,\n-    0xd686619ba27255a3,\n-    0x8613fd0145877586,\n-    0xa798fc4196e952e7,\n-    0xd17f3b51fca3a7a1,\n-    0x82ef85133de648c5,\n-    0xa3ab66580d5fdaf6,\n-    0xcc963fee10b7d1b3,\n-    0xffbbcfe994e5c620,\n-    0x9fd561f1fd0f9bd4,\n-    0xc7caba6e7c5382c9,\n-    0xf9bd690a1b68637b,\n-    0x9c1661a651213e2d,\n-    0xc31bfa0fe5698db8,\n-    0xf3e2f893dec3f126,\n-    0x986ddb5c6b3a76b8,\n-    0xbe89523386091466,\n-    0xee2ba6c0678b597f,\n-    0x94db483840b717f0,\n-    0xba121a4650e4ddec,\n-    0xe896a0d7e51e1566,\n-    0x915e2486ef32cd60,\n-    0xb5b5ada8aaff80b8,\n-    0xe3231912d5bf60e6,\n-    0x8df5efabc5979c90,\n-    0xb1736b96b6fd83b4,\n-    0xddd0467c64bce4a1,\n-    0x8aa22c0dbef60ee4,\n-    0xad4ab7112eb3929e,\n-    0xd89d64d57a607745,\n-    0x87625f056c7c4a8b,\n-    0xa93af6c6c79b5d2e,\n-    0xd389b47879823479,\n-    0x843610cb4bf160cc,\n-    0xa54394fe1eedb8ff,\n-    0xce947a3da6a9273e,\n-    0x811ccc668829b887,\n-    0xa163ff802a3426a9,\n-    0xc9bcff6034c13053,\n-    0xfc2c3f3841f17c68,\n-    0x9d9ba7832936edc1,\n-    0xc5029163f384a931,\n-    0xf64335bcf065d37d,\n-    0x99ea0196163fa42e,\n-    0xc06481fb9bcf8d3a,\n-    0xf07da27a82c37088,\n-    0x964e858c91ba2655,\n-    0xbbe226efb628afeb,\n-    0xeadab0aba3b2dbe5,\n-    0x92c8ae6b464fc96f,\n-    0xb77ada0617e3bbcb,\n-    0xe55990879ddcaabe,\n-    0x8f57fa54c2a9eab7,\n-    0xb32df8e9f3546564,\n-    0xdff9772470297ebd,\n-    0x8bfbea76c619ef36,\n-    0xaefae51477a06b04,\n-    0xdab99e59958885c5,\n-    0x88b402f7fd75539b,\n-    0xaae103b5fcd2a882,\n-    0xd59944a37c0752a2,\n-    0x857fcae62d8493a5,\n-    0xa6dfbd9fb8e5b88f,\n-    0xd097ad07a71f26b2,\n-    0x825ecc24c8737830,\n-    0xa2f67f2dfa90563b,\n-    0xcbb41ef979346bca,\n-    0xfea126b7d78186bd,\n-    0x9f24b832e6b0f436,\n-    0xc6ede63fa05d3144,\n-    0xf8a95fcf88747d94,\n-    0x9b69dbe1b548ce7d,\n-    0xc24452da229b021c,\n-    0xf2d56790ab41c2a3,\n-    0x97c560ba6b0919a6,\n-    0xbdb6b8e905cb600f,\n-    0xed246723473e3813,\n-    0x9436c0760c86e30c,\n-    0xb94470938fa89bcf,\n-    0xe7958cb87392c2c3,\n-    0x90bd77f3483bb9ba,\n-    0xb4ecd5f01a4aa828,\n-    0xe2280b6c20dd5232,\n-    0x8d590723948a535f,\n-    0xb0af48ec79ace837,\n-    0xdcdb1b2798182245,\n-    0x8a08f0f8bf0f156b,\n-    0xac8b2d36eed2dac6,\n-    0xd7adf884aa879177,\n-    0x86ccbb52ea94baeb,\n-    0xa87fea27a539e9a5,\n-    0xd29fe4b18e88640f,\n-    0x83a3eeeef9153e89,\n-    0xa48ceaaab75a8e2b,\n-    0xcdb02555653131b6,\n-    0x808e17555f3ebf12,\n-    0xa0b19d2ab70e6ed6,\n-    0xc8de047564d20a8c,\n-    0xfb158592be068d2f,\n-    0x9ced737bb6c4183d,\n-    0xc428d05aa4751e4d,\n-    0xf53304714d9265e0,\n-    0x993fe2c6d07b7fac,\n-    0xbf8fdb78849a5f97,\n-    0xef73d256a5c0f77d,\n-    0x95a8637627989aae,\n-    0xbb127c53b17ec159,\n-    0xe9d71b689dde71b0,\n-    0x9226712162ab070e,\n-    0xb6b00d69bb55c8d1,\n-    0xe45c10c42a2b3b06,\n-    0x8eb98a7a9a5b04e3,\n-    0xb267ed1940f1c61c,\n-    0xdf01e85f912e37a3,\n-    0x8b61313bbabce2c6,\n-    0xae397d8aa96c1b78,\n-    0xd9c7dced53c72256,\n-    0x881cea14545c7575,\n-    0xaa242499697392d3,\n-    0xd4ad2dbfc3d07788,\n-    0x84ec3c97da624ab5,\n-    0xa6274bbdd0fadd62,\n-    0xcfb11ead453994ba,\n-    0x81ceb32c4b43fcf5,\n-    0xa2425ff75e14fc32,\n-    0xcad2f7f5359a3b3e,\n-    0xfd87b5f28300ca0e,\n-    0x9e74d1b791e07e48,\n-    0xc612062576589ddb,\n-    0xf79687aed3eec551,\n-    0x9abe14cd44753b53,\n-    0xc16d9a0095928a27,\n-    0xf1c90080baf72cb1,\n-    0x971da05074da7bef,\n-    0xbce5086492111aeb,\n-    0xec1e4a7db69561a5,\n-    0x9392ee8e921d5d07,\n-    0xb877aa3236a4b449,\n-    0xe69594bec44de15b,\n-    0x901d7cf73ab0acd9,\n-    0xb424dc35095cd80f,\n-    0xe12e13424bb40e13,\n-    0x8cbccc096f5088cc,\n-    0xafebff0bcb24aaff,\n-    0xdbe6fecebdedd5bf,\n-    0x89705f4136b4a597,\n-    0xabcc77118461cefd,\n-    0xd6bf94d5e57a42bc,\n-    0x8637bd05af6c69b6,\n-    0xa7c5ac471b478423,\n-    0xd1b71758e219652c,\n-    0x83126e978d4fdf3b,\n-    0xa3d70a3d70a3d70a,\n-    0xcccccccccccccccd,\n-    0x8000000000000000,\n-    0xa000000000000000,\n-    0xc800000000000000,\n-    0xfa00000000000000,\n-    0x9c40000000000000,\n-    0xc350000000000000,\n-    0xf424000000000000,\n-    0x9896800000000000,\n-    0xbebc200000000000,\n-    0xee6b280000000000,\n-    0x9502f90000000000,\n-    0xba43b74000000000,\n-    0xe8d4a51000000000,\n-    0x9184e72a00000000,\n-    0xb5e620f480000000,\n-    0xe35fa931a0000000,\n-    0x8e1bc9bf04000000,\n-    0xb1a2bc2ec5000000,\n-    0xde0b6b3a76400000,\n-    0x8ac7230489e80000,\n-    0xad78ebc5ac620000,\n-    0xd8d726b7177a8000,\n-    0x878678326eac9000,\n-    0xa968163f0a57b400,\n-    0xd3c21bcecceda100,\n-    0x84595161401484a0,\n-    0xa56fa5b99019a5c8,\n-    0xcecb8f27f4200f3a,\n-    0x813f3978f8940984,\n-    0xa18f07d736b90be5,\n-    0xc9f2c9cd04674edf,\n-    0xfc6f7c4045812296,\n-    0x9dc5ada82b70b59e,\n-    0xc5371912364ce305,\n-    0xf684df56c3e01bc7,\n-    0x9a130b963a6c115c,\n-    0xc097ce7bc90715b3,\n-    0xf0bdc21abb48db20,\n-    0x96769950b50d88f4,\n-    0xbc143fa4e250eb31,\n-    0xeb194f8e1ae525fd,\n-    0x92efd1b8d0cf37be,\n-    0xb7abc627050305ae,\n-    0xe596b7b0c643c719,\n-    0x8f7e32ce7bea5c70,\n-    0xb35dbf821ae4f38c,\n-    0xe0352f62a19e306f,\n-    0x8c213d9da502de45,\n-    0xaf298d050e4395d7,\n-    0xdaf3f04651d47b4c,\n-    0x88d8762bf324cd10,\n-    0xab0e93b6efee0054,\n-    0xd5d238a4abe98068,\n-    0x85a36366eb71f041,\n-    0xa70c3c40a64e6c52,\n-    0xd0cf4b50cfe20766,\n-    0x82818f1281ed44a0,\n-    0xa321f2d7226895c8,\n-    0xcbea6f8ceb02bb3a,\n-    0xfee50b7025c36a08,\n-    0x9f4f2726179a2245,\n-    0xc722f0ef9d80aad6,\n-    0xf8ebad2b84e0d58c,\n-    0x9b934c3b330c8577,\n-    0xc2781f49ffcfa6d5,\n-    0xf316271c7fc3908b,\n-    0x97edd871cfda3a57,\n-    0xbde94e8e43d0c8ec,\n-    0xed63a231d4c4fb27,\n-    0x945e455f24fb1cf9,\n-    0xb975d6b6ee39e437,\n-    0xe7d34c64a9c85d44,\n-    0x90e40fbeea1d3a4b,\n-    0xb51d13aea4a488dd,\n-    0xe264589a4dcdab15,\n-    0x8d7eb76070a08aed,\n-    0xb0de65388cc8ada8,\n-    0xdd15fe86affad912,\n-    0x8a2dbf142dfcc7ab,\n-    0xacb92ed9397bf996,\n-    0xd7e77a8f87daf7fc,\n-    0x86f0ac99b4e8dafd,\n-    0xa8acd7c0222311bd,\n-    0xd2d80db02aabd62c,\n-    0x83c7088e1aab65db,\n-    0xa4b8cab1a1563f52,\n-    0xcde6fd5e09abcf27,\n-    0x80b05e5ac60b6178,\n-    0xa0dc75f1778e39d6,\n-    0xc913936dd571c84c,\n-    0xfb5878494ace3a5f,\n-    0x9d174b2dcec0e47b,\n-    0xc45d1df942711d9a,\n-    0xf5746577930d6501,\n-    0x9968bf6abbe85f20,\n-    0xbfc2ef456ae276e9,\n-    0xefb3ab16c59b14a3,\n-    0x95d04aee3b80ece6,\n-    0xbb445da9ca61281f,\n-    0xea1575143cf97227,\n-    0x924d692ca61be758,\n-    0xb6e0c377cfa2e12e,\n-    0xe498f455c38b997a,\n-    0x8edf98b59a373fec,\n-    0xb2977ee300c50fe7,\n-    0xdf3d5e9bc0f653e1,\n-    0x8b865b215899f46d,\n-    0xae67f1e9aec07188,\n-    0xda01ee641a708dea,\n-    0x884134fe908658b2,\n-    0xaa51823e34a7eedf,\n-    0xd4e5e2cdc1d1ea96,\n-    0x850fadc09923329e,\n-    0xa6539930bf6bff46,\n-    0xcfe87f7cef46ff17,\n-    0x81f14fae158c5f6e,\n-    0xa26da3999aef774a,\n-    0xcb090c8001ab551c,\n-    0xfdcb4fa002162a63,\n-    0x9e9f11c4014dda7e,\n-    0xc646d63501a1511e,\n-    0xf7d88bc24209a565,\n-    0x9ae757596946075f,\n-    0xc1a12d2fc3978937,\n-    0xf209787bb47d6b85,\n-    0x9745eb4d50ce6333,\n-    0xbd176620a501fc00,\n-    0xec5d3fa8ce427b00,\n-    0x93ba47c980e98ce0,\n-    0xb8a8d9bbe123f018,\n-    0xe6d3102ad96cec1e,\n-    0x9043ea1ac7e41393,\n-    0xb454e4a179dd1877,\n-    0xe16a1dc9d8545e95,\n-    0x8ce2529e2734bb1d,\n-    0xb01ae745b101e9e4,\n-    0xdc21a1171d42645d,\n-    0x899504ae72497eba,\n-    0xabfa45da0edbde69,\n-    0xd6f8d7509292d603,\n-    0x865b86925b9bc5c2,\n-    0xa7f26836f282b733,\n-    0xd1ef0244af2364ff,\n-    0x8335616aed761f1f,\n-    0xa402b9c5a8d3a6e7,\n-    0xcd036837130890a1,\n-    0x802221226be55a65,\n-    0xa02aa96b06deb0fe,\n-    0xc83553c5c8965d3d,\n-    0xfa42a8b73abbf48d,\n-    0x9c69a97284b578d8,\n-    0xc38413cf25e2d70e,\n-    0xf46518c2ef5b8cd1,\n-    0x98bf2f79d5993803,\n-    0xbeeefb584aff8604,\n-    0xeeaaba2e5dbf6785,\n-    0x952ab45cfa97a0b3,\n-    0xba756174393d88e0,\n-    0xe912b9d1478ceb17,\n-    0x91abb422ccb812ef,\n-    0xb616a12b7fe617aa,\n-    0xe39c49765fdf9d95,\n-    0x8e41ade9fbebc27d,\n-    0xb1d219647ae6b31c,\n-    0xde469fbd99a05fe3,\n-    0x8aec23d680043bee,\n-    0xada72ccc20054aea,\n-    0xd910f7ff28069da4,\n-    0x87aa9aff79042287,\n-    0xa99541bf57452b28,\n-    0xd3fa922f2d1675f2,\n-    0x847c9b5d7c2e09b7,\n-    0xa59bc234db398c25,\n-    0xcf02b2c21207ef2f,\n-    0x8161afb94b44f57d,\n-    0xa1ba1ba79e1632dc,\n-    0xca28a291859bbf93,\n-    0xfcb2cb35e702af78,\n-    0x9defbf01b061adab,\n-    0xc56baec21c7a1916,\n-    0xf6c69a72a3989f5c,\n-    0x9a3c2087a63f6399,\n-    0xc0cb28a98fcf3c80,\n-    0xf0fdf2d3f3c30b9f,\n-    0x969eb7c47859e744,\n-    0xbc4665b596706115,\n-    0xeb57ff22fc0c795a,\n-    0x9316ff75dd87cbd8,\n-    0xb7dcbf5354e9bece,\n-    0xe5d3ef282a242e82,\n-    0x8fa475791a569d11,\n-    0xb38d92d760ec4455,\n-    0xe070f78d3927556b,\n-    0x8c469ab843b89563,\n-    0xaf58416654a6babb,\n-    0xdb2e51bfe9d0696a,\n-    0x88fcf317f22241e2,\n-    0xab3c2fddeeaad25b,\n-    0xd60b3bd56a5586f2,\n-    0x85c7056562757457,\n-    0xa738c6bebb12d16d,\n-    0xd106f86e69d785c8,\n-    0x82a45b450226b39d,\n-    0xa34d721642b06084,\n-    0xcc20ce9bd35c78a5,\n-    0xff290242c83396ce,\n-    0x9f79a169bd203e41,\n-    0xc75809c42c684dd1,\n-    0xf92e0c3537826146,\n-    0x9bbcc7a142b17ccc,\n-    0xc2abf989935ddbfe,\n-    0xf356f7ebf83552fe,\n-    0x98165af37b2153df,\n-    0xbe1bf1b059e9a8d6,\n-    0xeda2ee1c7064130c,\n-    0x9485d4d1c63e8be8,\n-    0xb9a74a0637ce2ee1,\n-    0xe8111c87c5c1ba9a,\n-    0x910ab1d4db9914a0,\n-    0xb54d5e4a127f59c8,\n-    0xe2a0b5dc971f303a,\n-    0x8da471a9de737e24,\n-    0xb10d8e1456105dad,\n-    0xdd50f1996b947519,\n-    0x8a5296ffe33cc930,\n-    0xace73cbfdc0bfb7b,\n-    0xd8210befd30efa5a,\n-    0x8714a775e3e95c78,\n-    0xa8d9d1535ce3b396,\n-    0xd31045a8341ca07c,\n-    0x83ea2b892091e44e,\n-    0xa4e4b66b68b65d61,\n-    0xce1de40642e3f4b9,\n-    0x80d2ae83e9ce78f4,\n-    0xa1075a24e4421731,\n-    0xc94930ae1d529cfd,\n-    0xfb9b7cd9a4a7443c,\n-    0x9d412e0806e88aa6,\n-    0xc491798a08a2ad4f,\n-    0xf5b5d7ec8acb58a3,\n-    0x9991a6f3d6bf1766,\n-    0xbff610b0cc6edd3f,\n-    0xeff394dcff8a948f,\n-    0x95f83d0a1fb69cd9,\n-    0xbb764c4ca7a44410,\n-    0xea53df5fd18d5514,\n-    0x92746b9be2f8552c,\n-    0xb7118682dbb66a77,\n-    0xe4d5e82392a40515,\n-    0x8f05b1163ba6832d,\n-    0xb2c71d5bca9023f8,\n-    0xdf78e4b2bd342cf7,\n-    0x8bab8eefb6409c1a,\n-    0xae9672aba3d0c321,\n-    0xda3c0f568cc4f3e9,\n-    0x8865899617fb1871,\n-    0xaa7eebfb9df9de8e,\n-    0xd51ea6fa85785631,\n-    0x8533285c936b35df,\n-    0xa67ff273b8460357,\n-    0xd01fef10a657842c,\n-    0x8213f56a67f6b29c,\n-    0xa298f2c501f45f43,\n-    0xcb3f2f7642717713,\n-    0xfe0efb53d30dd4d8,\n-    0x9ec95d1463e8a507,\n-    0xc67bb4597ce2ce49,\n-    0xf81aa16fdc1b81db,\n-    0x9b10a4e5e9913129,\n-    0xc1d4ce1f63f57d73,\n-    0xf24a01a73cf2dcd0,\n-    0x976e41088617ca02,\n-    0xbd49d14aa79dbc82,\n-    0xec9c459d51852ba3,\n-    0x93e1ab8252f33b46,\n-    0xb8da1662e7b00a17,\n-    0xe7109bfba19c0c9d,\n-    0x906a617d450187e2,\n-    0xb484f9dc9641e9db,\n-    0xe1a63853bbd26451,\n-    0x8d07e33455637eb3,\n-    0xb049dc016abc5e60,\n-    0xdc5c5301c56b75f7,\n-    0x89b9b3e11b6329bb,\n-    0xac2820d9623bf429,\n-    0xd732290fbacaf134,\n-    0x867f59a9d4bed6c0,\n-    0xa81f301449ee8c70,\n-    0xd226fc195c6a2f8c,\n-    0x83585d8fd9c25db8,\n-    0xa42e74f3d032f526,\n-    0xcd3a1230c43fb26f,\n-    0x80444b5e7aa7cf85,\n-    0xa0555e361951c367,\n-    0xc86ab5c39fa63441,\n-    0xfa856334878fc151,\n-    0x9c935e00d4b9d8d2,\n-    0xc3b8358109e84f07,\n-    0xf4a642e14c6262c9,\n-    0x98e7e9cccfbd7dbe,\n-    0xbf21e44003acdd2d,\n-    0xeeea5d5004981478,\n-    0x95527a5202df0ccb,\n-    0xbaa718e68396cffe,\n-    0xe950df20247c83fd,\n-    0x91d28b7416cdd27e,\n-], [\n-    -1077,\n-    -1073,\n-    -1070,\n-    -1067,\n-    -1063,\n-    -1060,\n-    -1057,\n-    -1053,\n-    -1050,\n-    -1047,\n-    -1043,\n-    -1040,\n-    -1037,\n-    -1034,\n-    -1030,\n-    -1027,\n-    -1024,\n-    -1020,\n-    -1017,\n-    -1014,\n-    -1010,\n-    -1007,\n-    -1004,\n-    -1000,\n-    -997,\n-    -994,\n-    -990,\n-    -987,\n-    -984,\n-    -980,\n-    -977,\n-    -974,\n-    -970,\n-    -967,\n-    -964,\n-    -960,\n-    -957,\n-    -954,\n-    -950,\n-    -947,\n-    -944,\n-    -940,\n-    -937,\n-    -934,\n-    -931,\n-    -927,\n-    -924,\n-    -921,\n-    -917,\n-    -914,\n-    -911,\n-    -907,\n-    -904,\n-    -901,\n-    -897,\n-    -894,\n-    -891,\n-    -887,\n-    -884,\n-    -881,\n-    -877,\n-    -874,\n-    -871,\n-    -867,\n-    -864,\n-    -861,\n-    -857,\n-    -854,\n-    -851,\n-    -847,\n-    -844,\n-    -841,\n-    -838,\n-    -834,\n-    -831,\n-    -828,\n-    -824,\n-    -821,\n-    -818,\n-    -814,\n-    -811,\n-    -808,\n-    -804,\n-    -801,\n-    -798,\n-    -794,\n-    -791,\n-    -788,\n-    -784,\n-    -781,\n-    -778,\n-    -774,\n-    -771,\n-    -768,\n-    -764,\n-    -761,\n-    -758,\n-    -754,\n-    -751,\n-    -748,\n-    -744,\n-    -741,\n-    -738,\n-    -735,\n-    -731,\n-    -728,\n-    -725,\n-    -721,\n-    -718,\n-    -715,\n-    -711,\n-    -708,\n-    -705,\n-    -701,\n-    -698,\n-    -695,\n-    -691,\n-    -688,\n-    -685,\n-    -681,\n-    -678,\n-    -675,\n-    -671,\n-    -668,\n-    -665,\n-    -661,\n-    -658,\n-    -655,\n-    -651,\n-    -648,\n-    -645,\n-    -642,\n-    -638,\n-    -635,\n-    -632,\n-    -628,\n-    -625,\n-    -622,\n-    -618,\n-    -615,\n-    -612,\n-    -608,\n-    -605,\n-    -602,\n-    -598,\n-    -595,\n-    -592,\n-    -588,\n-    -585,\n-    -582,\n-    -578,\n-    -575,\n-    -572,\n-    -568,\n-    -565,\n-    -562,\n-    -558,\n-    -555,\n-    -552,\n-    -549,\n-    -545,\n-    -542,\n-    -539,\n-    -535,\n-    -532,\n-    -529,\n-    -525,\n-    -522,\n-    -519,\n-    -515,\n-    -512,\n-    -509,\n-    -505,\n-    -502,\n-    -499,\n-    -495,\n-    -492,\n-    -489,\n-    -485,\n-    -482,\n-    -479,\n-    -475,\n-    -472,\n-    -469,\n-    -465,\n-    -462,\n-    -459,\n-    -455,\n-    -452,\n-    -449,\n-    -446,\n-    -442,\n-    -439,\n-    -436,\n-    -432,\n-    -429,\n-    -426,\n-    -422,\n-    -419,\n-    -416,\n-    -412,\n-    -409,\n-    -406,\n-    -402,\n-    -399,\n-    -396,\n-    -392,\n-    -389,\n-    -386,\n-    -382,\n-    -379,\n-    -376,\n-    -372,\n-    -369,\n-    -366,\n-    -362,\n-    -359,\n-    -356,\n-    -353,\n-    -349,\n-    -346,\n-    -343,\n-    -339,\n-    -336,\n-    -333,\n-    -329,\n-    -326,\n-    -323,\n-    -319,\n-    -316,\n-    -313,\n-    -309,\n-    -306,\n-    -303,\n-    -299,\n-    -296,\n-    -293,\n-    -289,\n-    -286,\n-    -283,\n-    -279,\n-    -276,\n-    -273,\n-    -269,\n-    -266,\n-    -263,\n-    -259,\n-    -256,\n-    -253,\n-    -250,\n-    -246,\n-    -243,\n-    -240,\n-    -236,\n-    -233,\n-    -230,\n-    -226,\n-    -223,\n-    -220,\n-    -216,\n-    -213,\n-    -210,\n-    -206,\n-    -203,\n-    -200,\n-    -196,\n-    -193,\n-    -190,\n-    -186,\n-    -183,\n-    -180,\n-    -176,\n-    -173,\n-    -170,\n-    -166,\n-    -163,\n-    -160,\n-    -157,\n-    -153,\n-    -150,\n-    -147,\n-    -143,\n-    -140,\n-    -137,\n-    -133,\n-    -130,\n-    -127,\n-    -123,\n-    -120,\n-    -117,\n-    -113,\n-    -110,\n-    -107,\n-    -103,\n-    -100,\n-    -97,\n-    -93,\n-    -90,\n-    -87,\n-    -83,\n-    -80,\n-    -77,\n-    -73,\n-    -70,\n-    -67,\n-    -63,\n-    -60,\n-    -57,\n-    -54,\n-    -50,\n-    -47,\n-    -44,\n-    -40,\n-    -37,\n-    -34,\n-    -30,\n-    -27,\n-    -24,\n-    -20,\n-    -17,\n-    -14,\n-    -10,\n-    -7,\n-    -4,\n-    0,\n-    3,\n-    6,\n-    10,\n-    13,\n-    16,\n-    20,\n-    23,\n-    26,\n-    30,\n-    33,\n-    36,\n-    39,\n-    43,\n-    46,\n-    49,\n-    53,\n-    56,\n-    59,\n-    63,\n-    66,\n-    69,\n-    73,\n-    76,\n-    79,\n-    83,\n-    86,\n-    89,\n-    93,\n-    96,\n-    99,\n-    103,\n-    106,\n-    109,\n-    113,\n-    116,\n-    119,\n-    123,\n-    126,\n-    129,\n-    132,\n-    136,\n-    139,\n-    142,\n-    146,\n-    149,\n-    152,\n-    156,\n-    159,\n-    162,\n-    166,\n-    169,\n-    172,\n-    176,\n-    179,\n-    182,\n-    186,\n-    189,\n-    192,\n-    196,\n-    199,\n-    202,\n-    206,\n-    209,\n-    212,\n-    216,\n-    219,\n-    222,\n-    226,\n-    229,\n-    232,\n-    235,\n-    239,\n-    242,\n-    245,\n-    249,\n-    252,\n-    255,\n-    259,\n-    262,\n-    265,\n-    269,\n-    272,\n-    275,\n-    279,\n-    282,\n-    285,\n-    289,\n-    292,\n-    295,\n-    299,\n-    302,\n-    305,\n-    309,\n-    312,\n-    315,\n-    319,\n-    322,\n-    325,\n-    328,\n-    332,\n-    335,\n-    338,\n-    342,\n-    345,\n-    348,\n-    352,\n-    355,\n-    358,\n-    362,\n-    365,\n-    368,\n-    372,\n-    375,\n-    378,\n-    382,\n-    385,\n-    388,\n-    392,\n-    395,\n-    398,\n-    402,\n-    405,\n-    408,\n-    412,\n-    415,\n-    418,\n-    422,\n-    425,\n-    428,\n-    431,\n-    435,\n-    438,\n-    441,\n-    445,\n-    448,\n-    451,\n-    455,\n-    458,\n-    461,\n-    465,\n-    468,\n-    471,\n-    475,\n-    478,\n-    481,\n-    485,\n-    488,\n-    491,\n-    495,\n-    498,\n-    501,\n-    505,\n-    508,\n-    511,\n-    515,\n-    518,\n-    521,\n-    524,\n-    528,\n-    531,\n-    534,\n-    538,\n-    541,\n-    544,\n-    548,\n-    551,\n-    554,\n-    558,\n-    561,\n-    564,\n-    568,\n-    571,\n-    574,\n-    578,\n-    581,\n-    584,\n-    588,\n-    591,\n-    594,\n-    598,\n-    601,\n-    604,\n-    608,\n-    611,\n-    614,\n-    617,\n-    621,\n-    624,\n-    627,\n-    631,\n-    634,\n-    637,\n-    641,\n-    644,\n-    647,\n-    651,\n-    654,\n-    657,\n-    661,\n-    664,\n-    667,\n-    671,\n-    674,\n-    677,\n-    681,\n-    684,\n-    687,\n-    691,\n-    694,\n-    697,\n-    701,\n-    704,\n-    707,\n-    711,\n-    714,\n-    717,\n-    720,\n-    724,\n-    727,\n-    730,\n-    734,\n-    737,\n-    740,\n-    744,\n-    747,\n-    750,\n-    754,\n-    757,\n-    760,\n-    764,\n-    767,\n-    770,\n-    774,\n-    777,\n-    780,\n-    784,\n-    787,\n-    790,\n-    794,\n-    797,\n-    800,\n-    804,\n-    807,\n-    810,\n-    813,\n-    817,\n-    820,\n-    823,\n-    827,\n-    830,\n-    833,\n-    837,\n-    840,\n-    843,\n-    847,\n-    850,\n-    853,\n-    857,\n-    860,\n-    863,\n-    867,\n-    870,\n-    873,\n-    877,\n-    880,\n-    883,\n-    887,\n-    890,\n-    893,\n-    897,\n-    900,\n-    903,\n-    907,\n-    910,\n-    913,\n-    916,\n-    920,\n-    923,\n-    926,\n-    930,\n-    933,\n-    936,\n-    940,\n-    943,\n-    946,\n-    950,\n-]);\n+#[rustfmt::skip]\n+pub const POWERS: ([u64; 611], [i16; 611]) = (\n+    [\n+        0xe0b62e2929aba83c,\n+        0x8c71dcd9ba0b4926,\n+        0xaf8e5410288e1b6f,\n+        0xdb71e91432b1a24b,\n+        0x892731ac9faf056f,\n+        0xab70fe17c79ac6ca,\n+        0xd64d3d9db981787d,\n+        0x85f0468293f0eb4e,\n+        0xa76c582338ed2622,\n+        0xd1476e2c07286faa,\n+        0x82cca4db847945ca,\n+        0xa37fce126597973d,\n+        0xcc5fc196fefd7d0c,\n+        0xff77b1fcbebcdc4f,\n+        0x9faacf3df73609b1,\n+        0xc795830d75038c1e,\n+        0xf97ae3d0d2446f25,\n+        0x9becce62836ac577,\n+        0xc2e801fb244576d5,\n+        0xf3a20279ed56d48a,\n+        0x9845418c345644d7,\n+        0xbe5691ef416bd60c,\n+        0xedec366b11c6cb8f,\n+        0x94b3a202eb1c3f39,\n+        0xb9e08a83a5e34f08,\n+        0xe858ad248f5c22ca,\n+        0x91376c36d99995be,\n+        0xb58547448ffffb2e,\n+        0xe2e69915b3fff9f9,\n+        0x8dd01fad907ffc3c,\n+        0xb1442798f49ffb4b,\n+        0xdd95317f31c7fa1d,\n+        0x8a7d3eef7f1cfc52,\n+        0xad1c8eab5ee43b67,\n+        0xd863b256369d4a41,\n+        0x873e4f75e2224e68,\n+        0xa90de3535aaae202,\n+        0xd3515c2831559a83,\n+        0x8412d9991ed58092,\n+        0xa5178fff668ae0b6,\n+        0xce5d73ff402d98e4,\n+        0x80fa687f881c7f8e,\n+        0xa139029f6a239f72,\n+        0xc987434744ac874f,\n+        0xfbe9141915d7a922,\n+        0x9d71ac8fada6c9b5,\n+        0xc4ce17b399107c23,\n+        0xf6019da07f549b2b,\n+        0x99c102844f94e0fb,\n+        0xc0314325637a193a,\n+        0xf03d93eebc589f88,\n+        0x96267c7535b763b5,\n+        0xbbb01b9283253ca3,\n+        0xea9c227723ee8bcb,\n+        0x92a1958a7675175f,\n+        0xb749faed14125d37,\n+        0xe51c79a85916f485,\n+        0x8f31cc0937ae58d3,\n+        0xb2fe3f0b8599ef08,\n+        0xdfbdcece67006ac9,\n+        0x8bd6a141006042be,\n+        0xaecc49914078536d,\n+        0xda7f5bf590966849,\n+        0x888f99797a5e012d,\n+        0xaab37fd7d8f58179,\n+        0xd5605fcdcf32e1d7,\n+        0x855c3be0a17fcd26,\n+        0xa6b34ad8c9dfc070,\n+        0xd0601d8efc57b08c,\n+        0x823c12795db6ce57,\n+        0xa2cb1717b52481ed,\n+        0xcb7ddcdda26da269,\n+        0xfe5d54150b090b03,\n+        0x9efa548d26e5a6e2,\n+        0xc6b8e9b0709f109a,\n+        0xf867241c8cc6d4c1,\n+        0x9b407691d7fc44f8,\n+        0xc21094364dfb5637,\n+        0xf294b943e17a2bc4,\n+        0x979cf3ca6cec5b5b,\n+        0xbd8430bd08277231,\n+        0xece53cec4a314ebe,\n+        0x940f4613ae5ed137,\n+        0xb913179899f68584,\n+        0xe757dd7ec07426e5,\n+        0x9096ea6f3848984f,\n+        0xb4bca50b065abe63,\n+        0xe1ebce4dc7f16dfc,\n+        0x8d3360f09cf6e4bd,\n+        0xb080392cc4349ded,\n+        0xdca04777f541c568,\n+        0x89e42caaf9491b61,\n+        0xac5d37d5b79b6239,\n+        0xd77485cb25823ac7,\n+        0x86a8d39ef77164bd,\n+        0xa8530886b54dbdec,\n+        0xd267caa862a12d67,\n+        0x8380dea93da4bc60,\n+        0xa46116538d0deb78,\n+        0xcd795be870516656,\n+        0x806bd9714632dff6,\n+        0xa086cfcd97bf97f4,\n+        0xc8a883c0fdaf7df0,\n+        0xfad2a4b13d1b5d6c,\n+        0x9cc3a6eec6311a64,\n+        0xc3f490aa77bd60fd,\n+        0xf4f1b4d515acb93c,\n+        0x991711052d8bf3c5,\n+        0xbf5cd54678eef0b7,\n+        0xef340a98172aace5,\n+        0x9580869f0e7aac0f,\n+        0xbae0a846d2195713,\n+        0xe998d258869facd7,\n+        0x91ff83775423cc06,\n+        0xb67f6455292cbf08,\n+        0xe41f3d6a7377eeca,\n+        0x8e938662882af53e,\n+        0xb23867fb2a35b28e,\n+        0xdec681f9f4c31f31,\n+        0x8b3c113c38f9f37f,\n+        0xae0b158b4738705f,\n+        0xd98ddaee19068c76,\n+        0x87f8a8d4cfa417ca,\n+        0xa9f6d30a038d1dbc,\n+        0xd47487cc8470652b,\n+        0x84c8d4dfd2c63f3b,\n+        0xa5fb0a17c777cf0a,\n+        0xcf79cc9db955c2cc,\n+        0x81ac1fe293d599c0,\n+        0xa21727db38cb0030,\n+        0xca9cf1d206fdc03c,\n+        0xfd442e4688bd304b,\n+        0x9e4a9cec15763e2f,\n+        0xc5dd44271ad3cdba,\n+        0xf7549530e188c129,\n+        0x9a94dd3e8cf578ba,\n+        0xc13a148e3032d6e8,\n+        0xf18899b1bc3f8ca2,\n+        0x96f5600f15a7b7e5,\n+        0xbcb2b812db11a5de,\n+        0xebdf661791d60f56,\n+        0x936b9fcebb25c996,\n+        0xb84687c269ef3bfb,\n+        0xe65829b3046b0afa,\n+        0x8ff71a0fe2c2e6dc,\n+        0xb3f4e093db73a093,\n+        0xe0f218b8d25088b8,\n+        0x8c974f7383725573,\n+        0xafbd2350644eead0,\n+        0xdbac6c247d62a584,\n+        0x894bc396ce5da772,\n+        0xab9eb47c81f5114f,\n+        0xd686619ba27255a3,\n+        0x8613fd0145877586,\n+        0xa798fc4196e952e7,\n+        0xd17f3b51fca3a7a1,\n+        0x82ef85133de648c5,\n+        0xa3ab66580d5fdaf6,\n+        0xcc963fee10b7d1b3,\n+        0xffbbcfe994e5c620,\n+        0x9fd561f1fd0f9bd4,\n+        0xc7caba6e7c5382c9,\n+        0xf9bd690a1b68637b,\n+        0x9c1661a651213e2d,\n+        0xc31bfa0fe5698db8,\n+        0xf3e2f893dec3f126,\n+        0x986ddb5c6b3a76b8,\n+        0xbe89523386091466,\n+        0xee2ba6c0678b597f,\n+        0x94db483840b717f0,\n+        0xba121a4650e4ddec,\n+        0xe896a0d7e51e1566,\n+        0x915e2486ef32cd60,\n+        0xb5b5ada8aaff80b8,\n+        0xe3231912d5bf60e6,\n+        0x8df5efabc5979c90,\n+        0xb1736b96b6fd83b4,\n+        0xddd0467c64bce4a1,\n+        0x8aa22c0dbef60ee4,\n+        0xad4ab7112eb3929e,\n+        0xd89d64d57a607745,\n+        0x87625f056c7c4a8b,\n+        0xa93af6c6c79b5d2e,\n+        0xd389b47879823479,\n+        0x843610cb4bf160cc,\n+        0xa54394fe1eedb8ff,\n+        0xce947a3da6a9273e,\n+        0x811ccc668829b887,\n+        0xa163ff802a3426a9,\n+        0xc9bcff6034c13053,\n+        0xfc2c3f3841f17c68,\n+        0x9d9ba7832936edc1,\n+        0xc5029163f384a931,\n+        0xf64335bcf065d37d,\n+        0x99ea0196163fa42e,\n+        0xc06481fb9bcf8d3a,\n+        0xf07da27a82c37088,\n+        0x964e858c91ba2655,\n+        0xbbe226efb628afeb,\n+        0xeadab0aba3b2dbe5,\n+        0x92c8ae6b464fc96f,\n+        0xb77ada0617e3bbcb,\n+        0xe55990879ddcaabe,\n+        0x8f57fa54c2a9eab7,\n+        0xb32df8e9f3546564,\n+        0xdff9772470297ebd,\n+        0x8bfbea76c619ef36,\n+        0xaefae51477a06b04,\n+        0xdab99e59958885c5,\n+        0x88b402f7fd75539b,\n+        0xaae103b5fcd2a882,\n+        0xd59944a37c0752a2,\n+        0x857fcae62d8493a5,\n+        0xa6dfbd9fb8e5b88f,\n+        0xd097ad07a71f26b2,\n+        0x825ecc24c8737830,\n+        0xa2f67f2dfa90563b,\n+        0xcbb41ef979346bca,\n+        0xfea126b7d78186bd,\n+        0x9f24b832e6b0f436,\n+        0xc6ede63fa05d3144,\n+        0xf8a95fcf88747d94,\n+        0x9b69dbe1b548ce7d,\n+        0xc24452da229b021c,\n+        0xf2d56790ab41c2a3,\n+        0x97c560ba6b0919a6,\n+        0xbdb6b8e905cb600f,\n+        0xed246723473e3813,\n+        0x9436c0760c86e30c,\n+        0xb94470938fa89bcf,\n+        0xe7958cb87392c2c3,\n+        0x90bd77f3483bb9ba,\n+        0xb4ecd5f01a4aa828,\n+        0xe2280b6c20dd5232,\n+        0x8d590723948a535f,\n+        0xb0af48ec79ace837,\n+        0xdcdb1b2798182245,\n+        0x8a08f0f8bf0f156b,\n+        0xac8b2d36eed2dac6,\n+        0xd7adf884aa879177,\n+        0x86ccbb52ea94baeb,\n+        0xa87fea27a539e9a5,\n+        0xd29fe4b18e88640f,\n+        0x83a3eeeef9153e89,\n+        0xa48ceaaab75a8e2b,\n+        0xcdb02555653131b6,\n+        0x808e17555f3ebf12,\n+        0xa0b19d2ab70e6ed6,\n+        0xc8de047564d20a8c,\n+        0xfb158592be068d2f,\n+        0x9ced737bb6c4183d,\n+        0xc428d05aa4751e4d,\n+        0xf53304714d9265e0,\n+        0x993fe2c6d07b7fac,\n+        0xbf8fdb78849a5f97,\n+        0xef73d256a5c0f77d,\n+        0x95a8637627989aae,\n+        0xbb127c53b17ec159,\n+        0xe9d71b689dde71b0,\n+        0x9226712162ab070e,\n+        0xb6b00d69bb55c8d1,\n+        0xe45c10c42a2b3b06,\n+        0x8eb98a7a9a5b04e3,\n+        0xb267ed1940f1c61c,\n+        0xdf01e85f912e37a3,\n+        0x8b61313bbabce2c6,\n+        0xae397d8aa96c1b78,\n+        0xd9c7dced53c72256,\n+        0x881cea14545c7575,\n+        0xaa242499697392d3,\n+        0xd4ad2dbfc3d07788,\n+        0x84ec3c97da624ab5,\n+        0xa6274bbdd0fadd62,\n+        0xcfb11ead453994ba,\n+        0x81ceb32c4b43fcf5,\n+        0xa2425ff75e14fc32,\n+        0xcad2f7f5359a3b3e,\n+        0xfd87b5f28300ca0e,\n+        0x9e74d1b791e07e48,\n+        0xc612062576589ddb,\n+        0xf79687aed3eec551,\n+        0x9abe14cd44753b53,\n+        0xc16d9a0095928a27,\n+        0xf1c90080baf72cb1,\n+        0x971da05074da7bef,\n+        0xbce5086492111aeb,\n+        0xec1e4a7db69561a5,\n+        0x9392ee8e921d5d07,\n+        0xb877aa3236a4b449,\n+        0xe69594bec44de15b,\n+        0x901d7cf73ab0acd9,\n+        0xb424dc35095cd80f,\n+        0xe12e13424bb40e13,\n+        0x8cbccc096f5088cc,\n+        0xafebff0bcb24aaff,\n+        0xdbe6fecebdedd5bf,\n+        0x89705f4136b4a597,\n+        0xabcc77118461cefd,\n+        0xd6bf94d5e57a42bc,\n+        0x8637bd05af6c69b6,\n+        0xa7c5ac471b478423,\n+        0xd1b71758e219652c,\n+        0x83126e978d4fdf3b,\n+        0xa3d70a3d70a3d70a,\n+        0xcccccccccccccccd,\n+        0x8000000000000000,\n+        0xa000000000000000,\n+        0xc800000000000000,\n+        0xfa00000000000000,\n+        0x9c40000000000000,\n+        0xc350000000000000,\n+        0xf424000000000000,\n+        0x9896800000000000,\n+        0xbebc200000000000,\n+        0xee6b280000000000,\n+        0x9502f90000000000,\n+        0xba43b74000000000,\n+        0xe8d4a51000000000,\n+        0x9184e72a00000000,\n+        0xb5e620f480000000,\n+        0xe35fa931a0000000,\n+        0x8e1bc9bf04000000,\n+        0xb1a2bc2ec5000000,\n+        0xde0b6b3a76400000,\n+        0x8ac7230489e80000,\n+        0xad78ebc5ac620000,\n+        0xd8d726b7177a8000,\n+        0x878678326eac9000,\n+        0xa968163f0a57b400,\n+        0xd3c21bcecceda100,\n+        0x84595161401484a0,\n+        0xa56fa5b99019a5c8,\n+        0xcecb8f27f4200f3a,\n+        0x813f3978f8940984,\n+        0xa18f07d736b90be5,\n+        0xc9f2c9cd04674edf,\n+        0xfc6f7c4045812296,\n+        0x9dc5ada82b70b59e,\n+        0xc5371912364ce305,\n+        0xf684df56c3e01bc7,\n+        0x9a130b963a6c115c,\n+        0xc097ce7bc90715b3,\n+        0xf0bdc21abb48db20,\n+        0x96769950b50d88f4,\n+        0xbc143fa4e250eb31,\n+        0xeb194f8e1ae525fd,\n+        0x92efd1b8d0cf37be,\n+        0xb7abc627050305ae,\n+        0xe596b7b0c643c719,\n+        0x8f7e32ce7bea5c70,\n+        0xb35dbf821ae4f38c,\n+        0xe0352f62a19e306f,\n+        0x8c213d9da502de45,\n+        0xaf298d050e4395d7,\n+        0xdaf3f04651d47b4c,\n+        0x88d8762bf324cd10,\n+        0xab0e93b6efee0054,\n+        0xd5d238a4abe98068,\n+        0x85a36366eb71f041,\n+        0xa70c3c40a64e6c52,\n+        0xd0cf4b50cfe20766,\n+        0x82818f1281ed44a0,\n+        0xa321f2d7226895c8,\n+        0xcbea6f8ceb02bb3a,\n+        0xfee50b7025c36a08,\n+        0x9f4f2726179a2245,\n+        0xc722f0ef9d80aad6,\n+        0xf8ebad2b84e0d58c,\n+        0x9b934c3b330c8577,\n+        0xc2781f49ffcfa6d5,\n+        0xf316271c7fc3908b,\n+        0x97edd871cfda3a57,\n+        0xbde94e8e43d0c8ec,\n+        0xed63a231d4c4fb27,\n+        0x945e455f24fb1cf9,\n+        0xb975d6b6ee39e437,\n+        0xe7d34c64a9c85d44,\n+        0x90e40fbeea1d3a4b,\n+        0xb51d13aea4a488dd,\n+        0xe264589a4dcdab15,\n+        0x8d7eb76070a08aed,\n+        0xb0de65388cc8ada8,\n+        0xdd15fe86affad912,\n+        0x8a2dbf142dfcc7ab,\n+        0xacb92ed9397bf996,\n+        0xd7e77a8f87daf7fc,\n+        0x86f0ac99b4e8dafd,\n+        0xa8acd7c0222311bd,\n+        0xd2d80db02aabd62c,\n+        0x83c7088e1aab65db,\n+        0xa4b8cab1a1563f52,\n+        0xcde6fd5e09abcf27,\n+        0x80b05e5ac60b6178,\n+        0xa0dc75f1778e39d6,\n+        0xc913936dd571c84c,\n+        0xfb5878494ace3a5f,\n+        0x9d174b2dcec0e47b,\n+        0xc45d1df942711d9a,\n+        0xf5746577930d6501,\n+        0x9968bf6abbe85f20,\n+        0xbfc2ef456ae276e9,\n+        0xefb3ab16c59b14a3,\n+        0x95d04aee3b80ece6,\n+        0xbb445da9ca61281f,\n+        0xea1575143cf97227,\n+        0x924d692ca61be758,\n+        0xb6e0c377cfa2e12e,\n+        0xe498f455c38b997a,\n+        0x8edf98b59a373fec,\n+        0xb2977ee300c50fe7,\n+        0xdf3d5e9bc0f653e1,\n+        0x8b865b215899f46d,\n+        0xae67f1e9aec07188,\n+        0xda01ee641a708dea,\n+        0x884134fe908658b2,\n+        0xaa51823e34a7eedf,\n+        0xd4e5e2cdc1d1ea96,\n+        0x850fadc09923329e,\n+        0xa6539930bf6bff46,\n+        0xcfe87f7cef46ff17,\n+        0x81f14fae158c5f6e,\n+        0xa26da3999aef774a,\n+        0xcb090c8001ab551c,\n+        0xfdcb4fa002162a63,\n+        0x9e9f11c4014dda7e,\n+        0xc646d63501a1511e,\n+        0xf7d88bc24209a565,\n+        0x9ae757596946075f,\n+        0xc1a12d2fc3978937,\n+        0xf209787bb47d6b85,\n+        0x9745eb4d50ce6333,\n+        0xbd176620a501fc00,\n+        0xec5d3fa8ce427b00,\n+        0x93ba47c980e98ce0,\n+        0xb8a8d9bbe123f018,\n+        0xe6d3102ad96cec1e,\n+        0x9043ea1ac7e41393,\n+        0xb454e4a179dd1877,\n+        0xe16a1dc9d8545e95,\n+        0x8ce2529e2734bb1d,\n+        0xb01ae745b101e9e4,\n+        0xdc21a1171d42645d,\n+        0x899504ae72497eba,\n+        0xabfa45da0edbde69,\n+        0xd6f8d7509292d603,\n+        0x865b86925b9bc5c2,\n+        0xa7f26836f282b733,\n+        0xd1ef0244af2364ff,\n+        0x8335616aed761f1f,\n+        0xa402b9c5a8d3a6e7,\n+        0xcd036837130890a1,\n+        0x802221226be55a65,\n+        0xa02aa96b06deb0fe,\n+        0xc83553c5c8965d3d,\n+        0xfa42a8b73abbf48d,\n+        0x9c69a97284b578d8,\n+        0xc38413cf25e2d70e,\n+        0xf46518c2ef5b8cd1,\n+        0x98bf2f79d5993803,\n+        0xbeeefb584aff8604,\n+        0xeeaaba2e5dbf6785,\n+        0x952ab45cfa97a0b3,\n+        0xba756174393d88e0,\n+        0xe912b9d1478ceb17,\n+        0x91abb422ccb812ef,\n+        0xb616a12b7fe617aa,\n+        0xe39c49765fdf9d95,\n+        0x8e41ade9fbebc27d,\n+        0xb1d219647ae6b31c,\n+        0xde469fbd99a05fe3,\n+        0x8aec23d680043bee,\n+        0xada72ccc20054aea,\n+        0xd910f7ff28069da4,\n+        0x87aa9aff79042287,\n+        0xa99541bf57452b28,\n+        0xd3fa922f2d1675f2,\n+        0x847c9b5d7c2e09b7,\n+        0xa59bc234db398c25,\n+        0xcf02b2c21207ef2f,\n+        0x8161afb94b44f57d,\n+        0xa1ba1ba79e1632dc,\n+        0xca28a291859bbf93,\n+        0xfcb2cb35e702af78,\n+        0x9defbf01b061adab,\n+        0xc56baec21c7a1916,\n+        0xf6c69a72a3989f5c,\n+        0x9a3c2087a63f6399,\n+        0xc0cb28a98fcf3c80,\n+        0xf0fdf2d3f3c30b9f,\n+        0x969eb7c47859e744,\n+        0xbc4665b596706115,\n+        0xeb57ff22fc0c795a,\n+        0x9316ff75dd87cbd8,\n+        0xb7dcbf5354e9bece,\n+        0xe5d3ef282a242e82,\n+        0x8fa475791a569d11,\n+        0xb38d92d760ec4455,\n+        0xe070f78d3927556b,\n+        0x8c469ab843b89563,\n+        0xaf58416654a6babb,\n+        0xdb2e51bfe9d0696a,\n+        0x88fcf317f22241e2,\n+        0xab3c2fddeeaad25b,\n+        0xd60b3bd56a5586f2,\n+        0x85c7056562757457,\n+        0xa738c6bebb12d16d,\n+        0xd106f86e69d785c8,\n+        0x82a45b450226b39d,\n+        0xa34d721642b06084,\n+        0xcc20ce9bd35c78a5,\n+        0xff290242c83396ce,\n+        0x9f79a169bd203e41,\n+        0xc75809c42c684dd1,\n+        0xf92e0c3537826146,\n+        0x9bbcc7a142b17ccc,\n+        0xc2abf989935ddbfe,\n+        0xf356f7ebf83552fe,\n+        0x98165af37b2153df,\n+        0xbe1bf1b059e9a8d6,\n+        0xeda2ee1c7064130c,\n+        0x9485d4d1c63e8be8,\n+        0xb9a74a0637ce2ee1,\n+        0xe8111c87c5c1ba9a,\n+        0x910ab1d4db9914a0,\n+        0xb54d5e4a127f59c8,\n+        0xe2a0b5dc971f303a,\n+        0x8da471a9de737e24,\n+        0xb10d8e1456105dad,\n+        0xdd50f1996b947519,\n+        0x8a5296ffe33cc930,\n+        0xace73cbfdc0bfb7b,\n+        0xd8210befd30efa5a,\n+        0x8714a775e3e95c78,\n+        0xa8d9d1535ce3b396,\n+        0xd31045a8341ca07c,\n+        0x83ea2b892091e44e,\n+        0xa4e4b66b68b65d61,\n+        0xce1de40642e3f4b9,\n+        0x80d2ae83e9ce78f4,\n+        0xa1075a24e4421731,\n+        0xc94930ae1d529cfd,\n+        0xfb9b7cd9a4a7443c,\n+        0x9d412e0806e88aa6,\n+        0xc491798a08a2ad4f,\n+        0xf5b5d7ec8acb58a3,\n+        0x9991a6f3d6bf1766,\n+        0xbff610b0cc6edd3f,\n+        0xeff394dcff8a948f,\n+        0x95f83d0a1fb69cd9,\n+        0xbb764c4ca7a44410,\n+        0xea53df5fd18d5514,\n+        0x92746b9be2f8552c,\n+        0xb7118682dbb66a77,\n+        0xe4d5e82392a40515,\n+        0x8f05b1163ba6832d,\n+        0xb2c71d5bca9023f8,\n+        0xdf78e4b2bd342cf7,\n+        0x8bab8eefb6409c1a,\n+        0xae9672aba3d0c321,\n+        0xda3c0f568cc4f3e9,\n+        0x8865899617fb1871,\n+        0xaa7eebfb9df9de8e,\n+        0xd51ea6fa85785631,\n+        0x8533285c936b35df,\n+        0xa67ff273b8460357,\n+        0xd01fef10a657842c,\n+        0x8213f56a67f6b29c,\n+        0xa298f2c501f45f43,\n+        0xcb3f2f7642717713,\n+        0xfe0efb53d30dd4d8,\n+        0x9ec95d1463e8a507,\n+        0xc67bb4597ce2ce49,\n+        0xf81aa16fdc1b81db,\n+        0x9b10a4e5e9913129,\n+        0xc1d4ce1f63f57d73,\n+        0xf24a01a73cf2dcd0,\n+        0x976e41088617ca02,\n+        0xbd49d14aa79dbc82,\n+        0xec9c459d51852ba3,\n+        0x93e1ab8252f33b46,\n+        0xb8da1662e7b00a17,\n+        0xe7109bfba19c0c9d,\n+        0x906a617d450187e2,\n+        0xb484f9dc9641e9db,\n+        0xe1a63853bbd26451,\n+        0x8d07e33455637eb3,\n+        0xb049dc016abc5e60,\n+        0xdc5c5301c56b75f7,\n+        0x89b9b3e11b6329bb,\n+        0xac2820d9623bf429,\n+        0xd732290fbacaf134,\n+        0x867f59a9d4bed6c0,\n+        0xa81f301449ee8c70,\n+        0xd226fc195c6a2f8c,\n+        0x83585d8fd9c25db8,\n+        0xa42e74f3d032f526,\n+        0xcd3a1230c43fb26f,\n+        0x80444b5e7aa7cf85,\n+        0xa0555e361951c367,\n+        0xc86ab5c39fa63441,\n+        0xfa856334878fc151,\n+        0x9c935e00d4b9d8d2,\n+        0xc3b8358109e84f07,\n+        0xf4a642e14c6262c9,\n+        0x98e7e9cccfbd7dbe,\n+        0xbf21e44003acdd2d,\n+        0xeeea5d5004981478,\n+        0x95527a5202df0ccb,\n+        0xbaa718e68396cffe,\n+        0xe950df20247c83fd,\n+        0x91d28b7416cdd27e,\n+    ],\n+    [\n+        -1077,\n+        -1073,\n+        -1070,\n+        -1067,\n+        -1063,\n+        -1060,\n+        -1057,\n+        -1053,\n+        -1050,\n+        -1047,\n+        -1043,\n+        -1040,\n+        -1037,\n+        -1034,\n+        -1030,\n+        -1027,\n+        -1024,\n+        -1020,\n+        -1017,\n+        -1014,\n+        -1010,\n+        -1007,\n+        -1004,\n+        -1000,\n+        -997,\n+        -994,\n+        -990,\n+        -987,\n+        -984,\n+        -980,\n+        -977,\n+        -974,\n+        -970,\n+        -967,\n+        -964,\n+        -960,\n+        -957,\n+        -954,\n+        -950,\n+        -947,\n+        -944,\n+        -940,\n+        -937,\n+        -934,\n+        -931,\n+        -927,\n+        -924,\n+        -921,\n+        -917,\n+        -914,\n+        -911,\n+        -907,\n+        -904,\n+        -901,\n+        -897,\n+        -894,\n+        -891,\n+        -887,\n+        -884,\n+        -881,\n+        -877,\n+        -874,\n+        -871,\n+        -867,\n+        -864,\n+        -861,\n+        -857,\n+        -854,\n+        -851,\n+        -847,\n+        -844,\n+        -841,\n+        -838,\n+        -834,\n+        -831,\n+        -828,\n+        -824,\n+        -821,\n+        -818,\n+        -814,\n+        -811,\n+        -808,\n+        -804,\n+        -801,\n+        -798,\n+        -794,\n+        -791,\n+        -788,\n+        -784,\n+        -781,\n+        -778,\n+        -774,\n+        -771,\n+        -768,\n+        -764,\n+        -761,\n+        -758,\n+        -754,\n+        -751,\n+        -748,\n+        -744,\n+        -741,\n+        -738,\n+        -735,\n+        -731,\n+        -728,\n+        -725,\n+        -721,\n+        -718,\n+        -715,\n+        -711,\n+        -708,\n+        -705,\n+        -701,\n+        -698,\n+        -695,\n+        -691,\n+        -688,\n+        -685,\n+        -681,\n+        -678,\n+        -675,\n+        -671,\n+        -668,\n+        -665,\n+        -661,\n+        -658,\n+        -655,\n+        -651,\n+        -648,\n+        -645,\n+        -642,\n+        -638,\n+        -635,\n+        -632,\n+        -628,\n+        -625,\n+        -622,\n+        -618,\n+        -615,\n+        -612,\n+        -608,\n+        -605,\n+        -602,\n+        -598,\n+        -595,\n+        -592,\n+        -588,\n+        -585,\n+        -582,\n+        -578,\n+        -575,\n+        -572,\n+        -568,\n+        -565,\n+        -562,\n+        -558,\n+        -555,\n+        -552,\n+        -549,\n+        -545,\n+        -542,\n+        -539,\n+        -535,\n+        -532,\n+        -529,\n+        -525,\n+        -522,\n+        -519,\n+        -515,\n+        -512,\n+        -509,\n+        -505,\n+        -502,\n+        -499,\n+        -495,\n+        -492,\n+        -489,\n+        -485,\n+        -482,\n+        -479,\n+        -475,\n+        -472,\n+        -469,\n+        -465,\n+        -462,\n+        -459,\n+        -455,\n+        -452,\n+        -449,\n+        -446,\n+        -442,\n+        -439,\n+        -436,\n+        -432,\n+        -429,\n+        -426,\n+        -422,\n+        -419,\n+        -416,\n+        -412,\n+        -409,\n+        -406,\n+        -402,\n+        -399,\n+        -396,\n+        -392,\n+        -389,\n+        -386,\n+        -382,\n+        -379,\n+        -376,\n+        -372,\n+        -369,\n+        -366,\n+        -362,\n+        -359,\n+        -356,\n+        -353,\n+        -349,\n+        -346,\n+        -343,\n+        -339,\n+        -336,\n+        -333,\n+        -329,\n+        -326,\n+        -323,\n+        -319,\n+        -316,\n+        -313,\n+        -309,\n+        -306,\n+        -303,\n+        -299,\n+        -296,\n+        -293,\n+        -289,\n+        -286,\n+        -283,\n+        -279,\n+        -276,\n+        -273,\n+        -269,\n+        -266,\n+        -263,\n+        -259,\n+        -256,\n+        -253,\n+        -250,\n+        -246,\n+        -243,\n+        -240,\n+        -236,\n+        -233,\n+        -230,\n+        -226,\n+        -223,\n+        -220,\n+        -216,\n+        -213,\n+        -210,\n+        -206,\n+        -203,\n+        -200,\n+        -196,\n+        -193,\n+        -190,\n+        -186,\n+        -183,\n+        -180,\n+        -176,\n+        -173,\n+        -170,\n+        -166,\n+        -163,\n+        -160,\n+        -157,\n+        -153,\n+        -150,\n+        -147,\n+        -143,\n+        -140,\n+        -137,\n+        -133,\n+        -130,\n+        -127,\n+        -123,\n+        -120,\n+        -117,\n+        -113,\n+        -110,\n+        -107,\n+        -103,\n+        -100,\n+        -97,\n+        -93,\n+        -90,\n+        -87,\n+        -83,\n+        -80,\n+        -77,\n+        -73,\n+        -70,\n+        -67,\n+        -63,\n+        -60,\n+        -57,\n+        -54,\n+        -50,\n+        -47,\n+        -44,\n+        -40,\n+        -37,\n+        -34,\n+        -30,\n+        -27,\n+        -24,\n+        -20,\n+        -17,\n+        -14,\n+        -10,\n+        -7,\n+        -4,\n+        0,\n+        3,\n+        6,\n+        10,\n+        13,\n+        16,\n+        20,\n+        23,\n+        26,\n+        30,\n+        33,\n+        36,\n+        39,\n+        43,\n+        46,\n+        49,\n+        53,\n+        56,\n+        59,\n+        63,\n+        66,\n+        69,\n+        73,\n+        76,\n+        79,\n+        83,\n+        86,\n+        89,\n+        93,\n+        96,\n+        99,\n+        103,\n+        106,\n+        109,\n+        113,\n+        116,\n+        119,\n+        123,\n+        126,\n+        129,\n+        132,\n+        136,\n+        139,\n+        142,\n+        146,\n+        149,\n+        152,\n+        156,\n+        159,\n+        162,\n+        166,\n+        169,\n+        172,\n+        176,\n+        179,\n+        182,\n+        186,\n+        189,\n+        192,\n+        196,\n+        199,\n+        202,\n+        206,\n+        209,\n+        212,\n+        216,\n+        219,\n+        222,\n+        226,\n+        229,\n+        232,\n+        235,\n+        239,\n+        242,\n+        245,\n+        249,\n+        252,\n+        255,\n+        259,\n+        262,\n+        265,\n+        269,\n+        272,\n+        275,\n+        279,\n+        282,\n+        285,\n+        289,\n+        292,\n+        295,\n+        299,\n+        302,\n+        305,\n+        309,\n+        312,\n+        315,\n+        319,\n+        322,\n+        325,\n+        328,\n+        332,\n+        335,\n+        338,\n+        342,\n+        345,\n+        348,\n+        352,\n+        355,\n+        358,\n+        362,\n+        365,\n+        368,\n+        372,\n+        375,\n+        378,\n+        382,\n+        385,\n+        388,\n+        392,\n+        395,\n+        398,\n+        402,\n+        405,\n+        408,\n+        412,\n+        415,\n+        418,\n+        422,\n+        425,\n+        428,\n+        431,\n+        435,\n+        438,\n+        441,\n+        445,\n+        448,\n+        451,\n+        455,\n+        458,\n+        461,\n+        465,\n+        468,\n+        471,\n+        475,\n+        478,\n+        481,\n+        485,\n+        488,\n+        491,\n+        495,\n+        498,\n+        501,\n+        505,\n+        508,\n+        511,\n+        515,\n+        518,\n+        521,\n+        524,\n+        528,\n+        531,\n+        534,\n+        538,\n+        541,\n+        544,\n+        548,\n+        551,\n+        554,\n+        558,\n+        561,\n+        564,\n+        568,\n+        571,\n+        574,\n+        578,\n+        581,\n+        584,\n+        588,\n+        591,\n+        594,\n+        598,\n+        601,\n+        604,\n+        608,\n+        611,\n+        614,\n+        617,\n+        621,\n+        624,\n+        627,\n+        631,\n+        634,\n+        637,\n+        641,\n+        644,\n+        647,\n+        651,\n+        654,\n+        657,\n+        661,\n+        664,\n+        667,\n+        671,\n+        674,\n+        677,\n+        681,\n+        684,\n+        687,\n+        691,\n+        694,\n+        697,\n+        701,\n+        704,\n+        707,\n+        711,\n+        714,\n+        717,\n+        720,\n+        724,\n+        727,\n+        730,\n+        734,\n+        737,\n+        740,\n+        744,\n+        747,\n+        750,\n+        754,\n+        757,\n+        760,\n+        764,\n+        767,\n+        770,\n+        774,\n+        777,\n+        780,\n+        784,\n+        787,\n+        790,\n+        794,\n+        797,\n+        800,\n+        804,\n+        807,\n+        810,\n+        813,\n+        817,\n+        820,\n+        823,\n+        827,\n+        830,\n+        833,\n+        837,\n+        840,\n+        843,\n+        847,\n+        850,\n+        853,\n+        857,\n+        860,\n+        863,\n+        867,\n+        870,\n+        873,\n+        877,\n+        880,\n+        883,\n+        887,\n+        890,\n+        893,\n+        897,\n+        900,\n+        903,\n+        907,\n+        910,\n+        913,\n+        916,\n+        920,\n+        923,\n+        926,\n+        930,\n+        933,\n+        936,\n+        940,\n+        943,\n+        946,\n+        950,\n+    ],\n+);\n \n+#[rustfmt::skip]\n pub const F32_SHORT_POWERS: [f32; 11] = [\n     1e0,\n     1e1,\n@@ -1244,6 +1249,7 @@ pub const F32_SHORT_POWERS: [f32; 11] = [\n     1e10,\n ];\n \n+#[rustfmt::skip]\n pub const F64_SHORT_POWERS: [f64; 23] = [\n     1e0,\n     1e1,"}, {"sha": "251d49db0625389baf9260ad076b9c8a8cba2a7d", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -802,6 +802,43 @@ impl AtomicBool {\n     pub fn fetch_xor(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_xor(self.v.get(), val as u8, order) != 0 }\n     }\n+\n+    /// Returns a mutable pointer to the underlying [`bool`].\n+    ///\n+    /// Doing non-atomic reads and writes on the resulting integer can be a data race.\n+    /// This method is mostly useful for FFI, where the function signature may use\n+    /// `*mut bool` instead of `&AtomicBool`.\n+    ///\n+    /// Returning an `*mut` pointer from a shared reference to this atomic is safe because the\n+    /// atomic types work with interior mutability. All modifications of an atomic change the value\n+    /// through a shared reference, and can do so safely as long as they use atomic operations. Any\n+    /// use of the returned raw pointer requires an `unsafe` block and still has to uphold the same\n+    /// restriction: operations on it must be atomic.\n+    ///\n+    /// [`bool`]: ../../../std/primitive.bool.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore (extern-declaration)\n+    /// # fn main() {\n+    /// use std::sync::atomic::AtomicBool;\n+    /// extern {\n+    ///     fn my_atomic_op(arg: *mut bool);\n+    /// }\n+    ///\n+    /// let mut atomic = AtomicBool::new(true);\n+    /// unsafe {\n+    ///     my_atomic_op(atomic.as_mut_ptr());\n+    /// }\n+    /// # }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_mut_ptr\",\n+           reason = \"recently added\",\n+           issue = \"66893\")]\n+    pub fn as_mut_ptr(&self) -> *mut bool {\n+        self.v.get() as *mut bool\n+    }\n }\n \n #[cfg(target_has_atomic_load_store = \"ptr\")]\n@@ -1891,6 +1928,43 @@ assert_eq!(min_foo, 12);\n                 }\n             }\n \n+            doc_comment! {\n+                concat!(\"Returns a mutable pointer to the underlying integer.\n+\n+Doing non-atomic reads and writes on the resulting integer can be a data race.\n+This method is mostly useful for FFI, where the function signature may use\n+`*mut \", stringify!($int_type), \"` instead of `&\", stringify!($atomic_type), \"`.\n+\n+Returning an `*mut` pointer from a shared reference to this atomic is safe because the\n+atomic types work with interior mutability. All modifications of an atomic change the value\n+through a shared reference, and can do so safely as long as they use atomic operations. Any\n+use of the returned raw pointer requires an `unsafe` block and still has to uphold the same\n+restriction: operations on it must be atomic.\n+\n+# Examples\n+\n+```ignore (extern-declaration)\n+# fn main() {\n+\", $extra_feature, \"use std::sync::atomic::\", stringify!($atomic_type), \";\n+\n+extern {\n+    fn my_atomic_op(arg: *mut \", stringify!($int_type), \");\n+}\n+\n+let mut atomic = \", stringify!($atomic_type), \"::new(1);\n+unsafe {\n+    my_atomic_op(atomic.as_mut_ptr());\n+}\n+# }\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"atomic_mut_ptr\",\n+                       reason = \"recently added\",\n+                       issue = \"66893\")]\n+                pub fn as_mut_ptr(&self) -> *mut $int_type {\n+                    self.v.get()\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "50a3ec046ad1374a52f8c6fdeafb50a881ef14cf", "filename": "src/libcore/tests/num/bignum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,4 +1,3 @@\n-use std::prelude::v1::*;\n use core::num::bignum::tests::Big8x3 as Big;\n \n #[test]"}, {"sha": "f85369ce40b8db256f8e48e450561ffbc144048a", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,4 +1,3 @@\n-use std::prelude::v1::*;\n use std::{str, i16, f32, f64, fmt};\n \n use core::num::flt2dec::{decode, DecodableFloat, FullDecoded, Decoded};"}, {"sha": "0c545b4d88714f3d34f50502fc6720fa611f8657", "filename": "src/libcore/tests/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,4 +1,3 @@\n-use std::prelude::v1::*;\n use super::super::*;\n use core::num::bignum::Big32x40 as Big;\n use core::num::flt2dec::strategy::dragon::*;"}, {"sha": "91db6381c9b6670ccc5a69e29feeac257cb017c5", "filename": "src/libcore/unicode/printable.py", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Funicode%2Fprintable.py", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Funicode%2Fprintable.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fprintable.py?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -111,16 +111,19 @@ def compress_normal(normal):\n     return compressed\n \n def print_singletons(uppers, lowers, uppersname, lowersname):\n+    print(\"#[rustfmt::skip]\")\n     print(\"const {}: &[(u8, u8)] = &[\".format(uppersname))\n     for u, c in uppers:\n         print(\"    ({:#04x}, {}),\".format(u, c))\n     print(\"];\")\n+    print(\"#[rustfmt::skip]\")\n     print(\"const {}: &[u8] = &[\".format(lowersname))\n     for i in range(0, len(lowers), 8):\n         print(\"    {}\".format(\" \".join(\"{:#04x},\".format(l) for l in lowers[i:i+8])))\n     print(\"];\")\n \n def print_normal(normal, normalname):\n+    print(\"#[rustfmt::skip]\")\n     print(\"const {}: &[u8] = &[\".format(normalname))\n     for v in normal:\n         print(\"    {}\".format(\" \".join(\"{:#04x},\".format(i) for i in v)))\n@@ -170,8 +173,7 @@ def main():\n // NOTE: The following code was generated by \"src/libcore/unicode/printable.py\",\n //       do not edit directly!\n \n-fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8],\n-         normal: &[u8]) -> bool {\n+fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8], normal: &[u8]) -> bool {\n     let xupper = (x >> 8) as u8;\n     let mut lowerstart = 0;\n     for &(upper, lowercount) in singletonuppers {"}, {"sha": "eee9ea52ef0d2e2387c8d6ef43c0682e6f2b8454", "filename": "src/libcore/unicode/printable.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Funicode%2Fprintable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Funicode%2Fprintable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fprintable.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,8 +1,7 @@\n // NOTE: The following code was generated by \"src/libcore/unicode/printable.py\",\n //       do not edit directly!\n \n-fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8],\n-         normal: &[u8]) -> bool {\n+fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8], normal: &[u8]) -> bool {\n     let xupper = (x >> 8) as u8;\n     let mut lowerstart = 0;\n     for &(upper, lowercount) in singletonuppers {\n@@ -70,6 +69,7 @@ pub(crate) fn is_printable(x: char) -> bool {\n     }\n }\n \n+#[rustfmt::skip]\n const SINGLETONS0U: &[(u8, u8)] = &[\n     (0x00, 1),\n     (0x03, 5),\n@@ -113,6 +113,7 @@ const SINGLETONS0U: &[(u8, u8)] = &[\n     (0xfe, 3),\n     (0xff, 9),\n ];\n+#[rustfmt::skip]\n const SINGLETONS0L: &[u8] = &[\n     0xad, 0x78, 0x79, 0x8b, 0x8d, 0xa2, 0x30, 0x57,\n     0x58, 0x8b, 0x8c, 0x90, 0x1c, 0x1d, 0xdd, 0x0e,\n@@ -152,6 +153,7 @@ const SINGLETONS0L: &[u8] = &[\n     0xff, 0x53, 0x67, 0x75, 0xc8, 0xc9, 0xd0, 0xd1,\n     0xd8, 0xd9, 0xe7, 0xfe, 0xff,\n ];\n+#[rustfmt::skip]\n const SINGLETONS1U: &[(u8, u8)] = &[\n     (0x00, 6),\n     (0x01, 1),\n@@ -189,6 +191,7 @@ const SINGLETONS1U: &[(u8, u8)] = &[\n     (0xf9, 6),\n     (0xfa, 2),\n ];\n+#[rustfmt::skip]\n const SINGLETONS1L: &[u8] = &[\n     0x0c, 0x27, 0x3b, 0x3e, 0x4e, 0x4f, 0x8f, 0x9e,\n     0x9e, 0x9f, 0x06, 0x07, 0x09, 0x36, 0x3d, 0x3e,\n@@ -212,6 +215,7 @@ const SINGLETONS1L: &[u8] = &[\n     0xa4, 0xaa, 0xaf, 0xb0, 0xc0, 0xd0, 0x0c, 0x72,\n     0xa3, 0xa4, 0xcb, 0xcc, 0x6e, 0x6f,\n ];\n+#[rustfmt::skip]\n const NORMAL0: &[u8] = &[\n     0x00, 0x20,\n     0x5f, 0x22,\n@@ -355,6 +359,7 @@ const NORMAL0: &[u8] = &[\n     0x1b, 0x03,\n     0x0f, 0x0d,\n ];\n+#[rustfmt::skip]\n const NORMAL1: &[u8] = &[\n     0x5e, 0x22,\n     0x7b, 0x05,"}, {"sha": "3fa125e8fea15fc9921ce35af4660c76554f619c", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -2,19 +2,16 @@\n \n #![allow(missing_docs, non_upper_case_globals, non_snake_case, clippy::unreadable_literal)]\n \n-use crate::unicode::version::UnicodeVersion;\n use crate::unicode::bool_trie::{BoolTrie, SmallBoolTrie};\n+use crate::unicode::version::UnicodeVersion;\n \n /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n /// `char` and `str` methods are based on.\n #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n-pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {\n-    major: 12,\n-    minor: 1,\n-    micro: 0,\n-    _priv: (),\n-};\n+pub const UNICODE_VERSION: UnicodeVersion =\n+    UnicodeVersion { major: 12, minor: 1, micro: 0, _priv: () };\n pub(crate) mod general_category {\n+    #[rustfmt::skip]\n     const Cc_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n         r1: &[\n             0, 1, 0\n@@ -28,6 +25,7 @@ pub(crate) mod general_category {\n         Cc_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const N_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x03ff000000000000, 0x0000000000000000, 0x720c000000000000, 0x0000000000000000,\n@@ -138,10 +136,10 @@ pub(crate) mod general_category {\n     pub fn N(c: char) -> bool {\n         N_table.lookup(c)\n     }\n-\n }\n \n pub(crate) mod derived_property {\n+    #[rustfmt::skip]\n     const Alphabetic_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,\n@@ -327,6 +325,7 @@ pub(crate) mod derived_property {\n         Alphabetic_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Case_Ignorable_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0400408000000000, 0x0000000140000000, 0x0190a10000000000, 0x0000000000000000,\n@@ -464,6 +463,7 @@ pub(crate) mod derived_property {\n         Case_Ignorable_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Cased_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,\n@@ -565,6 +565,7 @@ pub(crate) mod derived_property {\n         Cased_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Grapheme_Extend_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,\n@@ -689,6 +690,7 @@ pub(crate) mod derived_property {\n         Grapheme_Extend_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Lowercase_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe00000000, 0x0420040000000000, 0xff7fffff80000000,\n@@ -789,6 +791,7 @@ pub(crate) mod derived_property {\n         Lowercase_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Uppercase_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x0000000007fffffe, 0x0000000000000000, 0x000000007f7fffff,\n@@ -889,10 +892,10 @@ pub(crate) mod derived_property {\n     pub fn Uppercase(c: char) -> bool {\n         Uppercase_table.lookup(c)\n     }\n-\n }\n \n pub(crate) mod property {\n+    #[rustfmt::skip]\n     const White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n         r1: &[\n             0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n@@ -912,20 +915,19 @@ pub(crate) mod property {\n     pub fn White_Space(c: char) -> bool {\n         White_Space_table.lookup(c)\n     }\n-\n }\n \n pub(crate) mod conversions {\n     pub fn to_lower(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_lowercase_table) {\n-            None        => [c, '\\0', '\\0'],\n+            None => [c, '\\0', '\\0'],\n             Some(index) => to_lowercase_table[index].1,\n         }\n     }\n \n     pub fn to_upper(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_uppercase_table) {\n-            None        => [c, '\\0', '\\0'],\n+            None => [c, '\\0', '\\0'],\n             Some(index) => to_uppercase_table[index].1,\n         }\n     }\n@@ -934,6 +936,7 @@ pub(crate) mod conversions {\n         table.binary_search_by(|&(key, _)| key.cmp(&c)).ok()\n     }\n \n+    #[rustfmt::skip]\n     const to_lowercase_table: &[(char, [char; 3])] = &[\n         ('\\u{41}', ['\\u{61}', '\\0', '\\0']), ('\\u{42}', ['\\u{62}', '\\0', '\\0']), ('\\u{43}',\n         ['\\u{63}', '\\0', '\\0']), ('\\u{44}', ['\\u{64}', '\\0', '\\0']), ('\\u{45}', ['\\u{65}', '\\0',\n@@ -1558,6 +1561,7 @@ pub(crate) mod conversions {\n         ('\\u{1e920}', ['\\u{1e942}', '\\0', '\\0']), ('\\u{1e921}', ['\\u{1e943}', '\\0', '\\0'])\n     ];\n \n+    #[rustfmt::skip]\n     const to_uppercase_table: &[(char, [char; 3])] = &[\n         ('\\u{61}', ['\\u{41}', '\\0', '\\0']), ('\\u{62}', ['\\u{42}', '\\0', '\\0']), ('\\u{63}',\n         ['\\u{43}', '\\0', '\\0']), ('\\u{64}', ['\\u{44}', '\\0', '\\0']), ('\\u{65}', ['\\u{45}', '\\0',\n@@ -2228,5 +2232,4 @@ pub(crate) mod conversions {\n         ('\\u{1e940}', ['\\u{1e91e}', '\\0', '\\0']), ('\\u{1e941}', ['\\u{1e91f}', '\\0', '\\0']),\n         ('\\u{1e942}', ['\\u{1e920}', '\\0', '\\0']), ('\\u{1e943}', ['\\u{1e921}', '\\0', '\\0'])\n     ];\n-\n }"}, {"sha": "97df92a56da66ea2b0527a35d4a5eb28f6457390", "filename": "src/libcore/unicode/unicode.py", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Funicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibcore%2Funicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode.py?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -81,8 +81,8 @@ class UnicodeFiles(object):\n \n #![allow(missing_docs, non_upper_case_globals, non_snake_case, clippy::unreadable_literal)]\n \n-use crate::unicode::version::UnicodeVersion;\n use crate::unicode::bool_trie::{{BoolTrie, SmallBoolTrie}};\n+use crate::unicode::version::UnicodeVersion;\n \"\"\".format(year=datetime.datetime.now().year)\n \n # Mapping taken from Table 12 from:\n@@ -555,6 +555,8 @@ def generate_table(\n     if is_pub:\n         pub_string = \"pub \"\n \n+    yield \"\\n\"\n+    yield \"    #[rustfmt::skip]\\n\"\n     yield \"    %sconst %s: %s = &[\\n\" % (pub_string, name, decl_type)\n \n     data = []\n@@ -568,7 +570,7 @@ def generate_table(\n     for table_line in generate_table_lines(\"\".join(data).split(\",\"), 8):\n         yield table_line\n \n-    yield \"\\n    ];\\n\\n\"\n+    yield \"\\n    ];\\n\"\n \n \n def compute_trie(raw_data, chunk_size):\n@@ -634,6 +636,9 @@ def generate_bool_trie(name, codepoint_ranges, is_pub=False):\n     pub_string = \"\"\n     if is_pub:\n         pub_string = \"pub \"\n+\n+    yield \"\\n\"\n+    yield \"    #[rustfmt::skip]\\n\"\n     yield \"    %sconst %s: &super::BoolTrie = &super::BoolTrie {\\n\" % (pub_string, name)\n     yield \"        r1: [\\n\"\n     data = (\"0x%016x\" % chunk for chunk in chunks[:0x800 // chunk_size])\n@@ -678,7 +683,7 @@ def generate_bool_trie(name, codepoint_ranges, is_pub=False):\n         yield fragment\n     yield \"\\n        ],\\n\"\n \n-    yield \"    };\\n\\n\"\n+    yield \"    };\\n\"\n \n \n def generate_small_bool_trie(name, codepoint_ranges, is_pub=False):\n@@ -700,6 +705,8 @@ def generate_small_bool_trie(name, codepoint_ranges, is_pub=False):\n     if is_pub:\n         pub_string = \"pub \"\n \n+    yield \"\\n\"\n+    yield \"    #[rustfmt::skip]\\n\"\n     yield (\"    %sconst %s: &super::SmallBoolTrie = &super::SmallBoolTrie {\\n\"\n            % (pub_string, name))\n \n@@ -717,7 +724,7 @@ def generate_small_bool_trie(name, codepoint_ranges, is_pub=False):\n         yield fragment\n     yield \"\\n        ],\\n\"\n \n-    yield \"    };\\n\\n\"\n+    yield \"    };\\n\"\n \n \n def generate_property_module(mod, grouped_categories, category_subset):\n@@ -726,7 +733,7 @@ def generate_property_module(mod, grouped_categories, category_subset):\n     Generate Rust code for module defining properties.\n     \"\"\"\n \n-    yield \"pub(crate) mod %s {\\n\" % mod\n+    yield \"pub(crate) mod %s {\" % mod\n     for cat in sorted(category_subset):\n         if cat in (\"Cc\", \"White_Space\"):\n             generator = generate_small_bool_trie(\"%s_table\" % cat, grouped_categories[cat])\n@@ -736,9 +743,10 @@ def generate_property_module(mod, grouped_categories, category_subset):\n         for fragment in generator:\n             yield fragment\n \n+        yield \"\\n\"\n         yield \"    pub fn %s(c: char) -> bool {\\n\" % cat\n         yield \"        %s_table.lookup(c)\\n\" % cat\n-        yield \"    }\\n\\n\"\n+        yield \"    }\\n\"\n \n     yield \"}\\n\\n\"\n \n@@ -753,21 +761,21 @@ def generate_conversions_module(unicode_data):\n     yield \"\"\"\n     pub fn to_lower(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_lowercase_table) {\n-            None        => [c, '\\\\0', '\\\\0'],\n+            None => [c, '\\\\0', '\\\\0'],\n             Some(index) => to_lowercase_table[index].1,\n         }\n     }\n \n     pub fn to_upper(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_uppercase_table) {\n-            None        => [c, '\\\\0', '\\\\0'],\n+            None => [c, '\\\\0', '\\\\0'],\n             Some(index) => to_uppercase_table[index].1,\n         }\n     }\n \n     fn bsearch_case_table(c: char, table: &[(char, [char; 3])]) -> Option<usize> {\n         table.binary_search_by(|&(key, _)| key.cmp(&c)).ok()\n-    }\\n\\n\"\"\"\n+    }\\n\"\"\"\n \n     decl_type = \"&[(char, [char; 3])]\"\n     format_conversion = lambda x: \"({},[{},{},{}])\".format(*(\n@@ -827,13 +835,9 @@ def main():\n     /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n     /// `char` and `str` methods are based on.\n     #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n-    pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {{\n-        major: {version.major},\n-        minor: {version.minor},\n-        micro: {version.micro},\n-        _priv: (),\n-    }};\n-    \"\"\").format(version=unicode_version)\n+    pub const UNICODE_VERSION: UnicodeVersion =\n+        UnicodeVersion {{ major: {v.major}, minor: {v.minor}, micro: {v.micro}, _priv: () }};\n+    \"\"\").format(v=unicode_version)\n     buf.write(unicode_version_notice)\n \n     get_path = lambda f: get_unicode_file_path(unicode_version, f)"}, {"sha": "fb30d6c519c90bca440628b3b856afdc287667bc", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -22,6 +22,7 @@ rustc-rayon = \"0.3.0\"\n rustc-rayon-core = \"0.3.0\"\n polonius-engine  = \"0.10.0\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "1d6a3420ed9523a748a343cb6e61fa640f876693", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -101,7 +101,7 @@ macro_rules! arena_types {\n             [few] resolve_lifetimes: rustc::middle::resolve_lifetime::ResolveLifetimes,\n             [few] lint_levels: rustc::lint::LintLevelMap,\n             [few] stability_index: rustc::middle::stability::Index<'tcx>,\n-            [few] features: syntax::feature_gate::Features,\n+            [few] features: rustc_feature::Features,\n             [few] all_traits: Vec<rustc::hir::def_id::DefId>,\n             [few] privacy_access_levels: rustc::middle::privacy::AccessLevels,\n             [few] target_features_whitelist: rustc_data_structures::fx::FxHashMap<"}, {"sha": "6499e56325a42aca2aa41bdc2287eaaecbcafe01", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -4,7 +4,6 @@\n use crate::ich::StableHashingContext;\n \n use syntax::ast;\n-use syntax::feature_gate;\n use syntax_pos::SourceFile;\n \n use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n@@ -156,7 +155,7 @@ fn stable_normalized_pos(np: ::syntax_pos::NormalizedPos,\n }\n \n \n-impl<'tcx> HashStable<StableHashingContext<'tcx>> for feature_gate::Features {\n+impl<'tcx> HashStable<StableHashingContext<'tcx>> for rustc_feature::Features {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'tcx>, hasher: &mut StableHasher) {\n         // Unfortunately we cannot exhaustively list fields here, since the\n         // struct is macro generated."}, {"sha": "619ca724214c87b5d1464d563568e910bcebd60b", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -232,13 +232,13 @@ impl<'a> LintLevelsBuilder<'a> {\n                             // don't have any lint names (`#[level(reason = \"foo\")]`)\n                             if let ast::LitKind::Str(rationale, _) = name_value.kind {\n                                 if !self.sess.features_untracked().lint_reasons {\n-                                    feature_gate::emit_feature_err(\n+                                    feature_gate::feature_err(\n                                         &self.sess.parse_sess,\n                                         sym::lint_reasons,\n                                         item.span,\n-                                        feature_gate::GateIssue::Language,\n                                         \"lint reasons are experimental\"\n-                                    );\n+                                    )\n+                                    .emit();\n                                 }\n                                 reason = Some(rationale);\n                             } else {"}, {"sha": "54aafe2114dac04cef756414a9a55658d33cb608", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -13,11 +13,12 @@ use crate::ty::query::Providers;\n use crate::middle::privacy::AccessLevels;\n use crate::session::{DiagnosticMessageId, Session};\n use errors::DiagnosticBuilder;\n+use rustc_feature::GateIssue;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::{Span, MultiSpan};\n use syntax::ast::{Attribute, CRATE_NODE_ID};\n use syntax::errors::Applicability;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::{feature_err, feature_err_issue};\n use syntax::attr::{self, Stability, Deprecation, RustcDeprecation};\n use crate::ty::{self, TyCtxt};\n use crate::util::nodemap::{FxHashSet, FxHashMap};\n@@ -512,9 +513,8 @@ pub fn report_unstable(\n         if is_soft {\n             soft_handler(lint::builtin::SOFT_UNSTABLE, span, &msg)\n         } else {\n-            emit_feature_err(\n-                &sess.parse_sess, feature, span, GateIssue::Library(issue), &msg\n-            );\n+            feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg)\n+                .emit();\n         }\n     }\n }\n@@ -842,15 +842,19 @@ impl Visitor<'tcx> for Checker<'tcx> {\n                 let ty = self.tcx.type_of(def_id);\n \n                 if adt_def.has_dtor(self.tcx) {\n-                    emit_feature_err(&self.tcx.sess.parse_sess,\n-                                     sym::untagged_unions, item.span, GateIssue::Language,\n-                                     \"unions with `Drop` implementations are unstable\");\n+                    feature_err(\n+                        &self.tcx.sess.parse_sess, sym::untagged_unions, item.span,\n+                        \"unions with `Drop` implementations are unstable\"\n+                    )\n+                    .emit();\n                 } else {\n                     let param_env = self.tcx.param_env(def_id);\n                     if !param_env.can_type_implement_copy(self.tcx, ty).is_ok() {\n-                        emit_feature_err(&self.tcx.sess.parse_sess,\n-                                         sym::untagged_unions, item.span, GateIssue::Language,\n-                                         \"unions with non-`Copy` fields are unstable\");\n+                        feature_err(\n+                            &self.tcx.sess.parse_sess, sym::untagged_unions, item.span,\n+                            \"unions with non-`Copy` fields are unstable\"\n+                        )\n+                        .emit();\n                     }\n                 }\n             }"}, {"sha": "d715ddb1b81de603677afc6b6cab834e8e8372e2", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1130,7 +1130,7 @@ rustc_queries! {\n             desc { |tcx| \"estimating size for `{}`\", tcx.def_path_str(def.def_id()) }\n         }\n \n-        query features_query(_: CrateNum) -> &'tcx feature_gate::Features {\n+        query features_query(_: CrateNum) -> &'tcx rustc_feature::Features {\n             eval_always\n             desc { \"looking up enabled feature gates\" }\n         }"}, {"sha": "fbfae721bbe91e218b0434aaf115564805bb992d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -7,6 +7,7 @@ use crate::session::{early_error, early_warn, Session};\n use crate::session::search_paths::SearchPath;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_feature::UnstableFeatures;\n \n use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n@@ -16,7 +17,6 @@ use syntax::ast;\n use syntax::source_map::{FileName, FilePathMapping};\n use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n use syntax::symbol::{sym, Symbol};\n-use syntax::feature_gate::UnstableFeatures;\n \n use errors::emitter::HumanReadableErrorType;\n use errors::{ColorConfig, FatalError, Handler};\n@@ -2701,7 +2701,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n \n pub mod nightly_options {\n     use getopts;\n-    use syntax::feature_gate::UnstableFeatures;\n+    use rustc_feature::UnstableFeatures;\n     use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n     use crate::session::early_error;\n \n@@ -2850,9 +2850,9 @@ mod dep_tracking {\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n                 Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath,\n                 SymbolManglingVersion};\n+    use rustc_feature::UnstableFeatures;\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n-    use syntax::feature_gate::UnstableFeatures;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);"}, {"sha": "87c7e5a82a39d5ca53033117575edd6dbbf5748b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -21,7 +21,6 @@ use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::edition::Edition;\n-use syntax::feature_gate;\n use errors::json::JsonEmitter;\n use syntax::source_map;\n use syntax::sess::ParseSess;\n@@ -86,7 +85,7 @@ pub struct Session {\n     /// `rustc_codegen_llvm::back::symbol_names` module for more information.\n     pub crate_disambiguator: Once<CrateDisambiguator>,\n \n-    features: Once<feature_gate::Features>,\n+    features: Once<rustc_feature::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n@@ -470,11 +469,11 @@ impl Session {\n     /// DO NOT USE THIS METHOD if there is a TyCtxt available, as it circumvents\n     /// dependency tracking. Use tcx.features() instead.\n     #[inline]\n-    pub fn features_untracked(&self) -> &feature_gate::Features {\n+    pub fn features_untracked(&self) -> &rustc_feature::Features {\n         self.features.get()\n     }\n \n-    pub fn init_features(&self, features: feature_gate::Features) {\n+    pub fn init_features(&self, features: rustc_feature::Features) {\n         self.features.set(features);\n     }\n "}, {"sha": "776ae7dc141ce54de52b2522e90b8bd56f4cec70", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -72,7 +72,6 @@ use rustc_macros::HashStable;\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map::MultiSpan;\n-use syntax::feature_gate;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n use syntax::expand::allocator::AllocatorKind;\n@@ -1312,7 +1311,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.cstore.allocator_kind()\n     }\n \n-    pub fn features(self) -> &'tcx feature_gate::Features {\n+    pub fn features(self) -> &'tcx rustc_feature::Features {\n         self.features_query(LOCAL_CRATE)\n     }\n "}, {"sha": "5b4a6ac8a2d3cbac65ea5bc2c35792babac277c1", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -56,7 +56,6 @@ use std::any::type_name;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::attr;\n use syntax::ast;\n-use syntax::feature_gate;\n use syntax::symbol::Symbol;\n \n #[macro_use]"}, {"sha": "aa5b1c7315a4ba3261ed24a0e5d9ccce272f7b41", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -2330,22 +2330,43 @@ impl<'tcx> Const<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n     ) -> &Const<'tcx> {\n-        // FIXME(const_generics): this doesn't work right now,\n-        // because it tries to relate an `Infer` to a `Param`.\n+        let try_const_eval = |did, param_env: ParamEnv<'tcx>, substs| {\n+            let param_env_and_substs = param_env.with_reveal_all().and(substs);\n+\n+            // Avoid querying `tcx.const_eval(...)` with any e.g. inference vars.\n+            if param_env_and_substs.has_local_value() {\n+                return None;\n+            }\n+\n+            let (param_env, substs) = param_env_and_substs.into_parts();\n+\n+            // try to resolve e.g. associated constants to their definition on an impl\n+            let instance = ty::Instance::resolve(tcx, param_env, did, substs)?;\n+            let gid = GlobalId {\n+                instance,\n+                promoted: None,\n+            };\n+            tcx.const_eval(param_env.and(gid)).ok()\n+        };\n+\n         match self.val {\n             ConstKind::Unevaluated(did, substs) => {\n-                // if `substs` has no unresolved components, use and empty param_env\n-                let (param_env, substs) = param_env.with_reveal_all().and(substs).into_parts();\n-                // try to resolve e.g. associated constants to their definition on an impl\n-                let instance = match ty::Instance::resolve(tcx, param_env, did, substs) {\n-                    Some(instance) => instance,\n-                    None => return self,\n-                };\n-                let gid = GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                tcx.const_eval(param_env.and(gid)).unwrap_or(self)\n+                // HACK(eddyb) when substs contain e.g. inference variables,\n+                // attempt using identity substs instead, that will succeed\n+                // when the expression doesn't depend on any parameters.\n+                // FIXME(eddyb) make `const_eval` a canonical query instead,\n+                // that would properly handle inference variables in `substs`.\n+                if substs.has_local_value() {\n+                    let identity_substs = InternalSubsts::identity_for_item(tcx, did);\n+                    // The `ParamEnv` needs to match the `identity_substs`.\n+                    let identity_param_env = tcx.param_env(did);\n+                    match try_const_eval(did, identity_param_env, identity_substs) {\n+                        Some(ct) => ct.subst(tcx, substs),\n+                        None => self,\n+                    }\n+                } else {\n+                    try_const_eval(did, param_env, substs).unwrap_or(self)\n+                }\n             },\n             _ => self,\n         }"}, {"sha": "d0b065ccc848be75a982dc7f898d3f038a2257a8", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -541,7 +541,7 @@ pub(crate) fn run_pass_manager(cgcx: &CodegenContext<LlvmCodegenBackend>,\n     debug!(\"running the pass manager\");\n     unsafe {\n         let pm = llvm::LLVMCreatePassManager();\n-        llvm::LLVMRustAddAnalysisPasses(module.module_llvm.tm, pm, module.module_llvm.llmod());\n+        llvm::LLVMAddAnalysisPasses(module.module_llvm.tm, pm);\n \n         if config.verify_llvm_ir {\n             let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr().cast());"}, {"sha": "5dfb04a4436e6356f0b2774913efa6ae0de2615c", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -384,8 +384,8 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             // we'll get errors in LLVM.\n             let using_thin_buffers = config.bitcode_needed();\n             if !config.no_prepopulate_passes {\n-                llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n-                llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n+                llvm::LLVMAddAnalysisPasses(tm, fpm);\n+                llvm::LLVMAddAnalysisPasses(tm, mpm);\n                 let opt_level = to_llvm_opt_settings(opt_level).0;\n                 let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal ||\n                     (cgcx.lto != Lto::Fat && cgcx.opts.cg.linker_plugin_lto.enabled());\n@@ -509,7 +509,7 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             where F: FnOnce(&'ll mut PassManager<'ll>) -> R,\n         {\n             let cpm = llvm::LLVMCreatePassManager();\n-            llvm::LLVMRustAddAnalysisPasses(tm, cpm, llmod);\n+            llvm::LLVMAddAnalysisPasses(tm, cpm);\n             llvm::LLVMRustAddLibraryInfo(cpm, llmod, no_builtins);\n             f(cpm)\n         }"}, {"sha": "acc221f0657c9470aad7f4f5c60240e651ad966e", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -30,6 +30,7 @@ extern crate libc;\n #[macro_use] extern crate rustc;\n extern crate rustc_target;\n #[macro_use] extern crate rustc_data_structures;\n+extern crate rustc_feature;\n extern crate rustc_index;\n extern crate rustc_incremental;\n extern crate rustc_codegen_utils;"}, {"sha": "a49e863fa2185d2cd3ccdfbbc7a936d2c149ba9b", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1341,6 +1341,8 @@ extern \"C\" {\n \n     pub fn LLVMInitializePasses();\n \n+    pub fn LLVMAddAnalysisPasses(T: &'a TargetMachine, PM: &PassManager<'a>);\n+\n     pub fn LLVMPassManagerBuilderCreate() -> &'static mut PassManagerBuilder;\n     pub fn LLVMPassManagerBuilderDispose(PMB: &'static mut PassManagerBuilder);\n     pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: &PassManagerBuilder, Value: Bool);\n@@ -1703,7 +1705,6 @@ extern \"C\" {\n                                        EmitStackSizeSection: bool)\n                                        -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n-    pub fn LLVMRustAddAnalysisPasses(T: &'a TargetMachine, PM: &PassManager<'a>, M: &'a Module);\n     pub fn LLVMRustAddBuilderLibraryInfo(PMB: &'a PassManagerBuilder,\n                                          M: &'a Module,\n                                          DisableSimplifyLibCalls: bool);"}, {"sha": "7bff9e69dd52e3a4c55432c31a85776d23a1fb80", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -6,7 +6,7 @@ use rustc::session::config::PrintRequest;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use libc::c_int;\n use std::ffi::CString;\n-use syntax::feature_gate::UnstableFeatures;\n+use rustc_feature::UnstableFeatures;\n use syntax::symbol::sym;\n \n use std::str;"}, {"sha": "d1cb4cbeb9b31269354c49b025c63e9cad3b638a", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -19,6 +19,7 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_parse = { path = \"../librustc_parse\" }"}, {"sha": "8b04d3d46d04a902520bdcc6e4f48c58b81be4d1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -44,7 +44,7 @@ use errors::{PResult, registry::Registry};\n use rustc_interface::interface;\n use rustc_interface::util::get_codegen_sysroot;\n use rustc_data_structures::sync::SeqCst;\n-\n+use rustc_feature::{find_gated_cfg, UnstableFeatures};\n use rustc_serialize::json::ToJson;\n \n use std::borrow::Cow;\n@@ -61,10 +61,9 @@ use std::str;\n use std::time::Instant;\n \n use syntax::ast;\n-use syntax::source_map::FileLoader;\n-use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n-use syntax::symbol::sym;\n-use syntax_pos::{DUMMY_SP, FileName};\n+use syntax_pos::source_map::FileLoader;\n+use syntax_pos::symbol::sym;\n+use syntax_pos::FileName;\n \n pub mod pretty;\n mod args;\n@@ -684,12 +683,6 @@ impl RustcDefaultCalls {\n                         .is_nightly_build();\n \n                     let mut cfgs = sess.parse_sess.config.iter().filter_map(|&(name, ref value)| {\n-                        let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n-                            path: ast::Path::from_ident(ast::Ident::with_dummy_span(name)),\n-                            kind: ast::MetaItemKind::Word,\n-                            span: DUMMY_SP,\n-                        });\n-\n                         // Note that crt-static is a specially recognized cfg\n                         // directive that's printed out here as part of\n                         // rust-lang/rust#37406, but in general the\n@@ -700,10 +693,11 @@ impl RustcDefaultCalls {\n                         // through to build scripts.\n                         let value = value.as_ref().map(|s| s.as_str());\n                         let value = value.as_ref().map(|s| s.as_ref());\n-                        if name != sym::target_feature || value != Some(\"crt-static\") {\n-                            if !allow_unstable_cfg && gated_cfg.is_some() {\n-                                return None\n-                            }\n+                        if (name != sym::target_feature || value != Some(\"crt-static\"))\n+                            && !allow_unstable_cfg\n+                            && find_gated_cfg(|cfg_sym| cfg_sym == name).is_some()\n+                        {\n+                            return None;\n                         }\n \n                         if let Some(value) = value {"}, {"sha": "40ce922947bcb7368145bee8b37ee4ce35905247", "filename": "src/librustc_feature/Cargo.toml", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,15 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_feature\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_feature\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+lazy_static = \"1.0.0\"\n+syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "fec5a7f1a4501b9c5a385522229655ff0e5ee498", "filename": "src/librustc_feature/accepted.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,7 +1,7 @@\n //! List of the accepted feature gates.\n \n-use crate::symbol::sym;\n use super::{State, Feature};\n+use syntax_pos::symbol::sym;\n \n macro_rules! declare_features {\n     ($(", "previous_filename": "src/libsyntax/feature_gate/accepted.rs"}, {"sha": "7c0d39965fc00ff0522ed544827aae6a2f4d35e9", "filename": "src/librustc_feature/active.rs", "status": "renamed", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -2,10 +2,9 @@\n \n use super::{State, Feature};\n \n-use crate::edition::Edition;\n-use crate::symbol::{Symbol, sym};\n-\n+use syntax_pos::edition::Edition;\n use syntax_pos::Span;\n+use syntax_pos::symbol::{Symbol, sym};\n \n macro_rules! set {\n     ($field: ident) => {{\n@@ -37,7 +36,7 @@ macro_rules! declare_features {\n             ),+];\n \n         /// A set of features to be used by later passes.\n-        #[derive(Clone)]\n+        #[derive(Clone, Default)]\n         pub struct Features {\n             /// `#![feature]` attrs for language features, for error reporting.\n             pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,\n@@ -50,17 +49,7 @@ macro_rules! declare_features {\n         }\n \n         impl Features {\n-            pub fn new() -> Features {\n-                Features {\n-                    declared_lang_features: Vec::new(),\n-                    declared_lib_features: Vec::new(),\n-                    $($feature: false),+\n-                }\n-            }\n-\n-            pub fn walk_feature_fields<F>(&self, mut f: F)\n-                where F: FnMut(&str, bool)\n-            {\n+            pub fn walk_feature_fields(&self, mut f: impl FnMut(&str, bool)) {\n                 $(f(stringify!($feature), self.$feature);)+\n             }\n         }", "previous_filename": "src/libsyntax/feature_gate/active.rs"}, {"sha": "f72df00a8e8218f5def02ff9c67d0fc8eb887db0", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "renamed", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -3,17 +3,10 @@\n use AttributeType::*;\n use AttributeGate::*;\n \n-use super::check::{emit_feature_err, GateIssue};\n-use super::check::{Stability, EXPLAIN_ALLOW_INTERNAL_UNSAFE, EXPLAIN_ALLOW_INTERNAL_UNSTABLE};\n-use super::active::Features;\n+use crate::{Features, Stability};\n \n-use crate::ast;\n-use crate::attr::AttributeTemplate;\n-use crate::sess::ParseSess;\n-use crate::symbol::{Symbol, sym};\n-\n-use syntax_pos::Span;\n use rustc_data_structures::fx::FxHashMap;\n+use syntax_pos::symbol::{Symbol, sym};\n use lazy_static::lazy_static;\n \n type GateFn = fn(&Features) -> bool;\n@@ -24,39 +17,19 @@ macro_rules! cfg_fn {\n     }\n }\n \n+pub type GatedCfg = (Symbol, Symbol, GateFn);\n+\n /// `cfg(...)`'s that are feature gated.\n-const GATED_CFGS: &[(Symbol, Symbol, GateFn)] = &[\n+const GATED_CFGS: &[GatedCfg] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n ];\n \n-#[derive(Debug)]\n-pub struct GatedCfg {\n-    span: Span,\n-    index: usize,\n-}\n-\n-impl GatedCfg {\n-    pub fn gate(cfg: &ast::MetaItem) -> Option<GatedCfg> {\n-        GATED_CFGS.iter()\n-                  .position(|info| cfg.check_name(info.0))\n-                  .map(|idx| {\n-                      GatedCfg {\n-                          span: cfg.span,\n-                          index: idx\n-                      }\n-                  })\n-    }\n-\n-    pub fn check_and_emit(&self, sess: &ParseSess, features: &Features) {\n-        let (cfg, feature, has_feature) = GATED_CFGS[self.index];\n-        if !has_feature(features) && !self.span.allows_unstable(feature) {\n-            let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n-            emit_feature_err(sess, feature, self.span, GateIssue::Language, &explain);\n-        }\n-    }\n+/// Find a gated cfg determined by the `pred`icate which is given the cfg's name.\n+pub fn find_gated_cfg(pred: impl Fn(Symbol) -> bool) -> Option<&'static GatedCfg> {\n+    GATED_CFGS.iter().find(|(cfg_sym, ..)| pred(*cfg_sym))\n }\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must\n@@ -108,6 +81,21 @@ impl AttributeGate {\n     }\n }\n \n+/// A template that the attribute input must match.\n+/// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n+#[derive(Clone, Copy)]\n+pub struct AttributeTemplate {\n+    pub word: bool,\n+    pub list: Option<&'static str>,\n+    pub name_value_str: Option<&'static str>,\n+}\n+\n+impl AttributeTemplate {\n+    pub fn only_word() -> Self {\n+        Self { word: true, list: None, name_value_str: None }\n+    }\n+}\n+\n /// A convenience macro for constructing attribute templates.\n /// E.g., `template!(Word, List: \"description\")` means that the attribute\n /// supports forms `#[attr]` and `#[attr(description)]`.\n@@ -361,9 +349,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     gated!(\n         allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n-        EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n+        \"allow_internal_unstable side-steps feature gating and stability checks\",\n+    ),\n+    gated!(\n+        allow_internal_unsafe, Normal, template!(Word),\n+        \"allow_internal_unsafe side-steps the unsafe_code lint\",\n     ),\n-    gated!(allow_internal_unsafe, Normal, template!(Word), EXPLAIN_ALLOW_INTERNAL_UNSAFE),\n \n     // ==========================================================================\n     // Internal attributes: Type system related:\n@@ -587,14 +578,10 @@ pub fn deprecated_attributes() -> Vec<&'static BuiltinAttribute> {\n     BUILTIN_ATTRIBUTES.iter().filter(|(.., gate)| gate.is_deprecated()).collect()\n }\n \n-pub fn is_builtin_attr_name(name: ast::Name) -> bool {\n+pub fn is_builtin_attr_name(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).is_some()\n }\n \n-pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).is_some()\n-}\n-\n lazy_static! {\n     pub static ref BUILTIN_ATTRIBUTE_MAP: FxHashMap<Symbol, &'static BuiltinAttribute> = {\n         let mut map = FxHashMap::default();", "previous_filename": "src/libsyntax/feature_gate/builtin_attrs.rs"}, {"sha": "c38bb3740af3a6e664dc686243b4e745c469d945", "filename": "src/librustc_feature/lib.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Flib.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,137 @@\n+//! # Feature gates\n+//!\n+//! This crate declares the set of past and present unstable features in the compiler.\n+//! Feature gate checking itself is done in `libsyntax/feature_gate/check.rs` at the moment.\n+//!\n+//! Features are enabled in programs via the crate-level attributes of\n+//! `#![feature(...)]` with a comma-separated list of features.\n+//!\n+//! For the purpose of future feature-tracking, once a feature gate is added,\n+//! even if it is stabilized or removed, *do not remove it*. Instead, move the\n+//! symbol to the `accepted` or `removed` modules respectively.\n+\n+mod accepted;\n+mod removed;\n+mod active;\n+mod builtin_attrs;\n+\n+use std::fmt;\n+use std::num::NonZeroU32;\n+use syntax_pos::{Span, edition::Edition, symbol::Symbol};\n+\n+#[derive(Clone, Copy)]\n+pub enum State {\n+    Accepted,\n+    Active { set: fn(&mut Features, Span) },\n+    Removed { reason: Option<&'static str> },\n+    Stabilized { reason: Option<&'static str> },\n+}\n+\n+impl fmt::Debug for State {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            State::Accepted { .. } => write!(f, \"accepted\"),\n+            State::Active { .. } => write!(f, \"active\"),\n+            State::Removed { .. } => write!(f, \"removed\"),\n+            State::Stabilized { .. } => write!(f, \"stabilized\"),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct Feature {\n+    pub state: State,\n+    pub name: Symbol,\n+    pub since: &'static str,\n+    issue: Option<u32>,  // FIXME: once #58732 is done make this an Option<NonZeroU32>\n+    pub edition: Option<Edition>,\n+    description: &'static str,\n+}\n+\n+impl Feature {\n+    fn issue(&self) -> Option<NonZeroU32> {\n+        self.issue.and_then(|i| NonZeroU32::new(i))\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub enum Stability {\n+    Unstable,\n+    // First argument is tracking issue link; second argument is an optional\n+    // help message, which defaults to \"remove this attribute\".\n+    Deprecated(&'static str, Option<&'static str>),\n+}\n+\n+#[derive(Clone, Copy, Hash)]\n+pub enum UnstableFeatures {\n+    /// Hard errors for unstable features are active, as on beta/stable channels.\n+    Disallow,\n+    /// Allow features to be activated, as on nightly.\n+    Allow,\n+    /// Errors are bypassed for bootstrapping. This is required any time\n+    /// during the build that feature-related lints are set to warn or above\n+    /// because the build turns on warnings-as-errors and uses lots of unstable\n+    /// features. As a result, this is always required for building Rust itself.\n+    Cheat\n+}\n+\n+impl UnstableFeatures {\n+    pub fn from_environment() -> UnstableFeatures {\n+        // `true` if this is a feature-staged build, i.e., on the beta or stable channel.\n+        let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n+        // `true` if we should enable unstable features for bootstrapping.\n+        let bootstrap = std::env::var(\"RUSTC_BOOTSTRAP\").is_ok();\n+        match (disable_unstable_features, bootstrap) {\n+            (_, true) => UnstableFeatures::Cheat,\n+            (true, _) => UnstableFeatures::Disallow,\n+            (false, _) => UnstableFeatures::Allow\n+        }\n+    }\n+\n+    pub fn is_nightly_build(&self) -> bool {\n+        match *self {\n+            UnstableFeatures::Allow | UnstableFeatures::Cheat => true,\n+            UnstableFeatures::Disallow => false,\n+        }\n+    }\n+}\n+\n+fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n+    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n+        // FIXME (#28244): enforce that active features have issue numbers\n+        // assert!(info.issue().is_some())\n+        info.issue()\n+    } else {\n+        // search in Accepted, Removed, or Stable Removed features\n+        let found = ACCEPTED_FEATURES\n+            .iter()\n+            .chain(REMOVED_FEATURES)\n+            .chain(STABLE_REMOVED_FEATURES)\n+            .find(|t| t.name == feature);\n+        match found {\n+            Some(found) => found.issue(),\n+            None => panic!(\"feature `{}` is not declared anywhere\", feature),\n+        }\n+    }\n+}\n+\n+pub enum GateIssue {\n+    Language,\n+    Library(Option<NonZeroU32>)\n+}\n+\n+pub fn find_feature_issue(feature: Symbol, issue: GateIssue) -> Option<NonZeroU32> {\n+    match issue {\n+        GateIssue::Language => find_lang_feature_issue(feature),\n+        GateIssue::Library(lib) => lib,\n+    }\n+}\n+\n+pub use accepted::ACCEPTED_FEATURES;\n+pub use active::{ACTIVE_FEATURES, Features, INCOMPLETE_FEATURES};\n+pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n+pub use builtin_attrs::{\n+    AttributeGate, AttributeTemplate, AttributeType, find_gated_cfg, GatedCfg,\n+    BuiltinAttribute, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n+    deprecated_attributes, is_builtin_attr_name,\n+};"}, {"sha": "340bd32fb8a460b8bac668bfcbd8324ccf1bf64b", "filename": "src/librustc_feature/removed.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,7 +1,7 @@\n //! List of the removed feature gates.\n \n-use crate::symbol::sym;\n use super::{State, Feature};\n+use syntax_pos::symbol::sym;\n \n macro_rules! declare_features {\n     ($(", "previous_filename": "src/libsyntax/feature_gate/removed.rs"}, {"sha": "ed38243581b1a095e9a4a281a686cded8b8e235e", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -15,5 +15,6 @@ rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "5d3a6cccc4e73f83e25fc84ccc50b1f0f6dbc55b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -34,15 +34,15 @@ use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n use rustc::util::nodemap::FxHashSet;\n+use rustc_feature::{AttributeGate, AttributeTemplate, AttributeType, deprecated_attributes};\n+use rustc_feature::Stability;\n \n use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ast::{self, Expr};\n use syntax::ptr::P;\n-use syntax::attr::{self, HasAttrs, AttributeTemplate};\n+use syntax::attr::{self, HasAttrs};\n use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n-use syntax::feature_gate::{self, AttributeGate, AttributeType};\n-use syntax::feature_gate::{Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span};\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::errors::{Applicability, DiagnosticBuilder};\n@@ -1850,7 +1850,7 @@ impl EarlyLintPass for IncompleteFeatures {\n         features.declared_lang_features\n             .iter().map(|(name, span, _)| (name, span))\n             .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))\n-            .filter(|(name, _)| feature_gate::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n+            .filter(|(name, _)| rustc_feature::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n             .for_each(|(name, &span)| {\n                 cx.struct_span_lint(\n                     INCOMPLETE_FEATURES,"}, {"sha": "f7de7ec7e18f44a8bb565dce7efa40106634d736", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,3 +1,4 @@\n+use rustc::hir;\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::DefId;\n use rustc::lint;\n@@ -7,19 +8,17 @@ use rustc::ty::adjustment;\n use rustc_data_structures::fx::FxHashMap;\n use lint::{LateContext, EarlyContext, LintContext, LintArray};\n use lint::{LintPass, EarlyLintPass, LateLintPass};\n+use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n \n use syntax::ast;\n use syntax::attr;\n use syntax::errors::{Applicability, pluralize};\n-use syntax::feature_gate::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n use syntax::symbol::Symbol;\n use syntax::util::parser;\n use syntax_pos::{Span, BytePos};\n \n-use rustc::hir;\n-\n use log::debug;\n \n declare_lint! {"}, {"sha": "425e5d1d821bf971b72de83bb6eff492d943bbba", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -7,7 +7,7 @@ use rustc::util::nodemap::FxHashSet;\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::source_map::Span;\n-use syntax::feature_gate::{self, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::{span_err, struct_span_err};\n \n@@ -158,27 +158,29 @@ impl Collector<'tcx> {\n             }\n         }\n         if lib.cfg.is_some() && !self.tcx.features().link_cfg {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::link_cfg,\n-                                           span.unwrap(),\n-                                           GateIssue::Language,\n-                                           \"is unstable\");\n+            feature_err(&self.tcx.sess.parse_sess, sym::link_cfg, span.unwrap(), \"is unstable\")\n+                .emit();\n         }\n         if lib.kind == cstore::NativeStaticNobundle &&\n-           !self.tcx.features().static_nobundle {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::static_nobundle,\n-                                           span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n-                                           GateIssue::Language,\n-                                           \"kind=\\\"static-nobundle\\\" is unstable\");\n+           !self.tcx.features().static_nobundle\n+        {\n+            feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::static_nobundle,\n+                span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                \"kind=\\\"static-nobundle\\\" is unstable\"\n+            )\n+            .emit();\n         }\n         if lib.kind == cstore::NativeRawDylib &&\n            !self.tcx.features().raw_dylib {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::raw_dylib,\n-                                           span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n-                                           GateIssue::Language,\n-                                           \"kind=\\\"raw-dylib\\\" is unstable\");\n+            feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::raw_dylib,\n+                span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                \"kind=\\\"raw-dylib\\\" is unstable\"\n+            )\n+            .emit();\n         }\n         self.libs.push(lib);\n     }"}, {"sha": "c893d6f485630da75b81915f7f78c26781f27836", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -84,10 +84,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n             }\n \n+            PatKind::Or { .. } => {\n+                self.hir.tcx().sess.span_fatal(\n+                    match_pair.pattern.span,\n+                    \"or-patterns are not fully implemented yet\"\n+                )\n+            }\n+\n             PatKind::AscribeUserType { .. } |\n             PatKind::Array { .. } |\n             PatKind::Wild |\n-            PatKind::Or { .. } |\n             PatKind::Binding { .. } |\n             PatKind::Leaf { .. } |\n             PatKind::Deref { .. } => {"}, {"sha": "f2c5bf1bf6d55157d420461c79d648814023de92", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -400,6 +400,25 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n         self.0.iter().map(|p| *p)\n     }\n \n+    // If the first pattern is an or-pattern, expand this pattern. Otherwise, return `None`.\n+    fn expand_or_pat(&self) -> Option<Vec<Self>> {\n+        if self.is_empty() {\n+            None\n+        } else if let PatKind::Or { pats } = &*self.head().kind {\n+            Some(\n+                pats.iter()\n+                    .map(|pat| {\n+                        let mut new_patstack = PatStack::from_pattern(pat);\n+                        new_patstack.0.extend_from_slice(&self.0[1..]);\n+                        new_patstack\n+                    })\n+                    .collect(),\n+            )\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// This computes `D(self)`. See top of the file for explanations.\n     fn specialize_wildcard(&self) -> Option<Self> {\n         if self.head().is_wildcard() { Some(self.to_tail()) } else { None }\n@@ -447,8 +466,13 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n         Matrix(vec![])\n     }\n \n+    /// Pushes a new row to the matrix. If the row starts with an or-pattern, this expands it.\n     pub fn push(&mut self, row: PatStack<'p, 'tcx>) {\n-        self.0.push(row)\n+        if let Some(rows) = row.expand_or_pat() {\n+            self.0.extend(rows);\n+        } else {\n+            self.0.push(row);\n+        }\n     }\n \n     /// Iterate over the first component of each row\n@@ -472,12 +496,10 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n         'a: 'q,\n         'p: 'q,\n     {\n-        Matrix(\n-            self.0\n-                .iter()\n-                .filter_map(|r| r.specialize_constructor(cx, constructor, ctor_wild_subpatterns))\n-                .collect(),\n-        )\n+        self.0\n+            .iter()\n+            .filter_map(|r| r.specialize_constructor(cx, constructor, ctor_wild_subpatterns))\n+            .collect()\n     }\n }\n \n@@ -529,7 +551,12 @@ impl<'p, 'tcx> FromIterator<PatStack<'p, 'tcx>> for Matrix<'p, 'tcx> {\n     where\n         T: IntoIterator<Item = PatStack<'p, 'tcx>>,\n     {\n-        Matrix(iter.into_iter().collect())\n+        let mut matrix = Matrix::empty();\n+        for x in iter {\n+            // Using `push` ensures we correctly expand or-patterns.\n+            matrix.push(x);\n+        }\n+        matrix\n     }\n }\n \n@@ -1602,6 +1629,15 @@ pub fn is_useful<'p, 'a, 'tcx>(\n \n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n+    // If the first pattern is an or-pattern, expand it.\n+    if let Some(vs) = v.expand_or_pat() {\n+        return vs\n+            .into_iter()\n+            .map(|v| is_useful(cx, matrix, &v, witness_preference, hir_id))\n+            .find(|result| result.is_useful())\n+            .unwrap_or(NotUseful);\n+    }\n+\n     let (ty, span) = matrix\n         .heads()\n         .map(|r| (r.ty, r.span))\n@@ -1813,9 +1849,7 @@ fn pat_constructor<'tcx>(\n                 if slice.is_some() { VarLen(prefix, suffix) } else { FixedLen(prefix + suffix) };\n             Some(Slice(Slice { array_len, kind }))\n         }\n-        PatKind::Or { .. } => {\n-            bug!(\"support for or-patterns has not been fully implemented yet.\");\n-        }\n+        PatKind::Or { .. } => bug!(\"Or-pattern should have been expanded earlier on.\"),\n     }\n }\n \n@@ -2404,9 +2438,7 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n             _ => span_bug!(pat.span, \"unexpected ctor {:?} for slice pat\", constructor),\n         },\n \n-        PatKind::Or { .. } => {\n-            bug!(\"support for or-patterns has not been fully implemented yet.\");\n-        }\n+        PatKind::Or { .. } => bug!(\"Or-pattern should have been expanded earlier on.\"),\n     };\n     debug!(\"specialize({:#?}, {:#?}) = {:#?}\", pat, ctor_wild_subpatterns, result);\n "}, {"sha": "a4f12a4e54fa73cbdb78736bc3f6f7de817dba49", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::BorrowKind;\n use rustc::session::config::nightly_options;\n use rustc::ty::TyCtxt;\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::symbol::sym;\n use syntax_pos::{Span, Symbol};\n \n@@ -222,13 +222,13 @@ impl NonConstOp for Panic {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n+        feature_err(\n             &item.tcx.sess.parse_sess,\n             sym::const_panic,\n             span,\n-            GateIssue::Language,\n             &format!(\"panicking in {}s is unstable\", item.const_kind()),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -240,13 +240,13 @@ impl NonConstOp for RawPtrComparison {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n+        feature_err(\n             &item.tcx.sess.parse_sess,\n             sym::const_compare_raw_pointers,\n             span,\n-            GateIssue::Language,\n             &format!(\"comparing raw pointers inside {}\", item.const_kind()),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -258,14 +258,14 @@ impl NonConstOp for RawPtrDeref {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_raw_ptr_deref,\n-            span, GateIssue::Language,\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_raw_ptr_deref, span,\n             &format!(\n                 \"dereferencing raw pointers in {}s is unstable\",\n                 item.const_kind(),\n             ),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -277,14 +277,14 @@ impl NonConstOp for RawPtrToIntCast {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_raw_ptr_to_usize_cast,\n-            span, GateIssue::Language,\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_raw_ptr_to_usize_cast, span,\n             &format!(\n                 \"casting pointers to integers in {}s is unstable\",\n                 item.const_kind(),\n             ),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -334,11 +334,11 @@ impl NonConstOp for Transmute {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_transmute,\n-            span, GateIssue::Language,\n-            &format!(\"The use of std::mem::transmute() \\\n-            is gated in {}s\", item.const_kind()));\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_transmute, span,\n+            &format!(\"The use of std::mem::transmute() is gated in {}s\", item.const_kind())\n+        )\n+        .emit();\n     }\n }\n \n@@ -355,10 +355,10 @@ impl NonConstOp for UnionAccess {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_fn_union,\n-            span, GateIssue::Language,\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_fn_union, span,\n             \"unions in const fn are unstable\",\n-        );\n+        )\n+        .emit();\n     }\n }"}, {"sha": "9dc5daa9b0709c4aa7597297082405342a66871e", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -34,7 +34,8 @@ pub struct SimplifyArmIdentity;\n \n impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n     fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        for bb in body.basic_blocks_mut() {\n+        let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+        for bb in basic_blocks {\n             // Need 3 statements:\n             let (s0, s1, s2) = match &mut *bb.statements {\n                 [s0, s1, s2] => (s0, s1, s2),\n@@ -51,7 +52,12 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n                 Some(x) => x,\n             };\n             if local_tmp_s0 != local_tmp_s1\n+                // The field-and-variant information match up.\n                 || vf_s0 != vf_s1\n+                // Source and target locals have the same type.\n+                // FIXME(Centril | oli-obk): possibly relax to same layout?\n+                || local_decls[local_0].ty != local_decls[local_1].ty\n+                // We're setting the discriminant of `local_0` to this variant.\n                 || Some((local_0, vf_s0.var_idx)) != match_set_discr(s2)\n             {\n                 continue;"}, {"sha": "95b3256f53a388d81a875a636fd34a3fef83e5ca", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -16,6 +16,7 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n syntax = { path = \"../libsyntax\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "26e51e83d625a542225640d8b854027ebac8900a", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -9,14 +9,9 @@\n //! [#64197]: https://github.com/rust-lang/rust/issues/64197\n \n use crate::validate_attr;\n+use rustc_feature::Features;\n use syntax::attr::HasAttrs;\n-use syntax::feature_gate::{\n-    feature_err,\n-    EXPLAIN_STMT_ATTR_SYNTAX,\n-    Features,\n-    get_features,\n-    GateIssue,\n-};\n+use syntax::feature_gate::{feature_err, get_features};\n use syntax::attr;\n use syntax::ast;\n use syntax::edition::Edition;\n@@ -52,7 +47,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition,\n         } else { // the entire crate is unconfigured\n             krate.attrs = Vec::new();\n             krate.module.items = Vec::new();\n-            return (krate, Features::new());\n+            return (krate, Features::default());\n         }\n \n         features = get_features(&sess.span_diagnostic, &krate.attrs, edition, allow_features);\n@@ -217,8 +212,7 @@ impl<'a> StripUnconfigured<'a> {\n             let mut err = feature_err(self.sess,\n                                       sym::stmt_expr_attributes,\n                                       attr.span,\n-                                      GateIssue::Language,\n-                                      EXPLAIN_STMT_ATTR_SYNTAX);\n+                                      \"attributes on expressions are experimental\");\n \n             if attr.is_doc_comment() {\n                 err.help(\"`///` is for documentation comments. For a plain comment, use `//`.\");"}, {"sha": "a3c9e2665930db302af40b188421b1c257d4cea6", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,10 +1,10 @@\n //! Meta-syntax validation logic of attributes for post-expansion.\n \n use errors::{PResult, Applicability};\n-use syntax::ast::{self, Attribute, AttrKind, Ident, MetaItem};\n-use syntax::attr::{AttributeTemplate, mk_name_value_item_str};\n+use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n+use syntax::ast::{self, Attribute, AttrKind, Ident, MetaItem, MetaItemKind};\n+use syntax::attr::mk_name_value_item_str;\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n-use syntax::feature_gate::BUILTIN_ATTRIBUTE_MAP;\n use syntax::token;\n use syntax::tokenstream::TokenTree;\n use syntax::sess::ParseSess;\n@@ -41,6 +41,16 @@ pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, Meta\n     })\n }\n \n+/// Checks that the given meta-item is compatible with this `AttributeTemplate`.\n+fn is_attr_template_compatible(template: &AttributeTemplate, meta: &ast::MetaItemKind) -> bool {\n+    match meta {\n+        MetaItemKind::Word => template.word,\n+        MetaItemKind::List(..) => template.list.is_some(),\n+        MetaItemKind::NameValue(lit) if lit.kind.is_str() => template.name_value_str.is_some(),\n+        MetaItemKind::NameValue(..) => false,\n+    }\n+}\n+\n pub fn check_builtin_attribute(\n     sess: &ParseSess,\n     attr: &Attribute,\n@@ -57,7 +67,7 @@ pub fn check_builtin_attribute(\n                              name == sym::test || name == sym::bench;\n \n     match parse_meta(sess, attr) {\n-        Ok(meta) => if !should_skip(name) && !template.compatible(&meta.kind) {\n+        Ok(meta) => if !should_skip(name) && !is_attr_template_compatible(&template, &meta.kind) {\n             let error_msg = format!(\"malformed `{}` attribute input\", name);\n             let mut msg = \"attribute must be of the form \".to_owned();\n             let mut suggestions = vec![];"}, {"sha": "bb2f7c67418244ec101334ea5fc7dad57a09b86c", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "5a29a56ad5472b0498f3bef77e1a0e193ef7f447", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -14,7 +14,6 @@ use rustc_parse::validate_attr;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n-use syntax::feature_gate::is_builtin_attr;\n use syntax::print::pprust;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};\n@@ -257,7 +256,7 @@ impl<'a> AstValidator<'a> {\n             .flat_map(|i| i.attrs.as_ref())\n             .filter(|attr| {\n                 let arr = [sym::allow, sym::cfg, sym::cfg_attr, sym::deny, sym::forbid, sym::warn];\n-                !arr.contains(&attr.name_or_empty()) && is_builtin_attr(attr)\n+                !arr.contains(&attr.name_or_empty()) && attr::is_builtin_attr(attr)\n             })\n             .for_each(|attr| if attr.is_doc_comment() {\n                 let mut err = self.err_handler().struct_span_err("}, {"sha": "63c6e60de795436133760662e7b6768184417274", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -13,8 +13,9 @@ use rustc::hir::map::Map;\n use rustc::hir;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n+use rustc_feature::Features;\n use syntax::ast::Mutability;\n-use syntax::feature_gate::{emit_feature_err, Features, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::span_err;\n use syntax_pos::{sym, Span};\n use rustc_error_codes::*;\n@@ -140,13 +141,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             | NonConstExpr::Match(hir::MatchSource::Normal)\n             | NonConstExpr::Match(hir::MatchSource::IfDesugar { .. })\n             | NonConstExpr::Match(hir::MatchSource::IfLetDesugar { .. })\n-            => emit_feature_err(\n-                &self.tcx.sess.parse_sess,\n-                sym::const_if_match,\n-                span,\n-                GateIssue::Language,\n-                &msg\n-            ),\n+            => feature_err(&self.tcx.sess.parse_sess, sym::const_if_match, span, &msg).emit(),\n \n             _ => span_err!(self.tcx.sess, span, E0744, \"{}\", msg),\n         }"}, {"sha": "caca20e4221e59169d7abac334a1f105da05a67a", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -20,6 +20,7 @@ arena = { path = \"../libarena\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "04e233c5973102fcdcd4e0f015b49898b1f465eb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -29,10 +29,8 @@ use errors::Applicability;\n \n use syntax::ast::{Name, Ident};\n use syntax::attr;\n-\n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind};\n-use syntax::feature_gate::is_builtin_attr;\n use syntax::token::{self, Token};\n use syntax::print::pprust;\n use syntax::{span_err, struct_span_err};\n@@ -1231,7 +1229,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn visit_attribute(&mut self, attr: &'b ast::Attribute) {\n-        if !attr.is_doc_comment() && is_builtin_attr(attr) {\n+        if !attr.is_doc_comment() && attr::is_builtin_attr(attr) {\n             self.r.builtin_attrs.push(\n                 (attr.get_normal_item().path.segments[0].ident, self.parent_scope)\n             );"}, {"sha": "4dcafb6d2798ccdbf9d2d7281b3040f2c48a7e4b", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -9,8 +9,8 @@ use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::FxHashSet;\n+use rustc_feature::BUILTIN_ATTRIBUTES;\n use syntax::ast::{self, Ident, Path};\n-use syntax::feature_gate::BUILTIN_ATTRIBUTES;\n use syntax::source_map::SourceMap;\n use syntax::struct_span_err;\n use syntax::symbol::{Symbol, kw};"}, {"sha": "9e7098da49f32b111ec027252583458df462f7f6", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -12,18 +12,18 @@ use rustc::middle::stability;\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashSet;\n use rustc::{ty, lint, span_bug};\n+use rustc_feature::is_builtin_attr_name;\n use syntax::ast::{self, NodeId, Ident};\n use syntax::attr::{self, StabilityLevel};\n use syntax::edition::Edition;\n-use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n-use syntax::feature_gate::GateIssue;\n+use syntax::feature_gate::feature_err;\n use syntax::print::pprust;\n-use syntax::symbol::{Symbol, kw, sym};\n use syntax_expand::base::{self, InvocationRes, Indeterminate};\n use syntax_expand::base::SyntaxExtension;\n use syntax_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n use syntax_expand::compile_declarative_macro;\n use syntax_pos::hygiene::{self, ExpnId, ExpnData, ExpnKind};\n+use syntax_pos::symbol::{Symbol, kw, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::{mem, ptr};\n@@ -346,13 +346,8 @@ impl<'a> Resolver<'a> {\n                segment.ident.as_str().starts_with(\"rustc\") {\n                 let msg =\n                     \"attributes starting with `rustc` are reserved for use by the `rustc` compiler\";\n-                emit_feature_err(\n-                    &self.session.parse_sess,\n-                    sym::rustc_attrs,\n-                    segment.ident.span,\n-                    GateIssue::Language,\n-                    msg,\n-                );\n+                feature_err(&self.session.parse_sess, sym::rustc_attrs, segment.ident.span, msg)\n+                    .emit();\n             }\n         }\n "}, {"sha": "af978d5095eaae84f5cbbd857ad25bce96a14462", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -23,7 +23,7 @@ use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n use syntax::ast;\n use syntax::errors::pluralize;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::feature_err;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, Span, MultiSpan};\n@@ -914,8 +914,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             } else {\n                 \"parenthetical notation is only stable when used with `Fn`-family traits\"\n             };\n-            emit_feature_err(&self.tcx().sess.parse_sess, sym::unboxed_closures,\n-                             span, GateIssue::Language, msg);\n+            feature_err(&self.tcx().sess.parse_sess, sym::unboxed_closures, span, msg).emit();\n         }\n \n         self.create_substs_for_ast_path(span,"}, {"sha": "901a2192e20dd91c92fa1d3510281b38a60b2615", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -644,11 +644,13 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         }\n \n         if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::unsized_tuple_coercion,\n-                                           self.cause.span,\n-                                           feature_gate::GateIssue::Language,\n-                                           feature_gate::EXPLAIN_UNSIZED_TUPLE_COERCION);\n+            feature_gate::feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::unsized_tuple_coercion,\n+                self.cause.span,\n+                \"unsized tuple coercion is not stable enough for use and is subject to change\",\n+            )\n+            .emit();\n         }\n \n         Ok(coercion)"}, {"sha": "c7a0190a1d1b4314569981f670a7e8b12cba0b8e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -125,7 +125,7 @@ use syntax_pos::{self, BytePos, Span, MultiSpan};\n use syntax_pos::hygiene::DesugaringKind;\n use syntax::ast;\n use syntax::attr;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::feature_err;\n use syntax::source_map::{DUMMY_SP, original_sp};\n use syntax::symbol::{kw, sym, Ident};\n use syntax::util::parser::ExprPrecedence;\n@@ -2373,13 +2373,13 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n \n     if adt.is_enum() {\n         if !tcx.features().transparent_enums {\n-            emit_feature_err(\n+            feature_err(\n                 &tcx.sess.parse_sess,\n                 sym::transparent_enums,\n                 sp,\n-                GateIssue::Language,\n                 \"transparent enums are unstable\",\n-            );\n+            )\n+            .emit();\n         }\n         if adt.variants.len() != 1 {\n             bad_variant_count(tcx, adt, sp, def_id);\n@@ -2391,11 +2391,13 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     }\n \n     if adt.is_union() && !tcx.features().transparent_unions {\n-        emit_feature_err(&tcx.sess.parse_sess,\n-                         sym::transparent_unions,\n-                         sp,\n-                         GateIssue::Language,\n-                         \"transparent unions are unstable\");\n+        feature_err(\n+            &tcx.sess.parse_sess,\n+            sym::transparent_unions,\n+            sp,\n+            \"transparent unions are unstable\",\n+        )\n+        .emit();\n     }\n \n     // For each field, figure out if it's known to be a ZST and align(1)\n@@ -2452,11 +2454,13 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n     let repr_type_ty = def.repr.discr_type().to_ty(tcx);\n     if repr_type_ty == tcx.types.i128 || repr_type_ty == tcx.types.u128 {\n         if !tcx.features().repr128 {\n-            emit_feature_err(&tcx.sess.parse_sess,\n-                             sym::repr128,\n-                             sp,\n-                             GateIssue::Language,\n-                             \"repr with 128-bit type is unstable\");\n+            feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::repr128,\n+                sp,\n+                \"repr with 128-bit type is unstable\",\n+            )\n+            .emit();\n         }\n     }\n "}, {"sha": "20b6b01de57b2555ee26a7da116c826b11b9d1b3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -10,7 +10,7 @@ use rustc::middle::lang_items;\n use rustc::infer::opaque_types::may_define_opaque_type;\n \n use syntax::ast;\n-use syntax::feature_gate::{self, GateIssue};\n+use syntax::feature_gate;\n use syntax_pos::Span;\n use syntax::symbol::sym;\n use errors::DiagnosticBuilder;\n@@ -830,13 +830,13 @@ fn check_method_receiver<'fcx, 'tcx>(\n                     &fcx.tcx.sess.parse_sess,\n                     sym::arbitrary_self_types,\n                     span,\n-                    GateIssue::Language,\n                     &format!(\n                         \"`{}` cannot be used as the type of `self` without \\\n                             the `arbitrary_self_types` feature\",\n                         receiver_ty,\n                     ),\n-                ).help(HELP_FOR_SELF_TYPE)\n+                )\n+                .help(HELP_FOR_SELF_TYPE)\n                 .emit();\n             } else {\n                 // Report error; would not have worked with `arbitrary_self_types`."}, {"sha": "6d6e7685fa05338cde3082f0fe1f17f86e5651a6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -909,14 +909,12 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             Some(tcx.hir().local_def_id(parent_id))\n         }\n-        // FIXME(#43408) enable this in all cases when we get lazy normalization.\n-        Node::AnonConst(&anon_const) => {\n-            // HACK(eddyb) this provides the correct generics when the workaround\n-            // for a const parameter `AnonConst` is being used elsewhere, as then\n-            // there won't be the kind of cyclic dependency blocking #43408.\n-            let expr = &tcx.hir().body(anon_const.body).value;\n-            let icx = ItemCtxt::new(tcx, def_id);\n-            if AstConv::const_param_def_id(&icx, expr).is_some() {\n+        // FIXME(#43408) enable this always when we get lazy normalization.\n+        Node::AnonConst(_) => {\n+            // HACK(eddyb) this provides the correct generics when\n+            // `feature(const_generics)` is enabled, so that const expressions\n+            // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n+            if tcx.features().const_generics {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n                 Some(tcx.hir().local_def_id(parent_id))\n             } else {\n@@ -1494,16 +1492,16 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         _ => None,\n                     };\n                     if let Some(unsupported_type) = err {\n-                        feature_gate::emit_feature_err(\n+                        feature_gate::feature_err(\n                             &tcx.sess.parse_sess,\n                             sym::const_compare_raw_pointers,\n                             hir_ty.span,\n-                            feature_gate::GateIssue::Language,\n                             &format!(\n                                 \"using {} as const generic parameters is unstable\",\n                                 unsupported_type\n                             ),\n-                        );\n+                        )\n+                        .emit();\n                     };\n                 }\n                 if ty::search_for_structural_match_violation(\n@@ -2522,13 +2520,13 @@ fn from_target_feature(\n                 None => true,\n             };\n             if !allowed && id.is_local() {\n-                feature_gate::emit_feature_err(\n+                feature_gate::feature_err(\n                     &tcx.sess.parse_sess,\n                     feature_gate.unwrap(),\n                     item.span(),\n-                    feature_gate::GateIssue::Language,\n                     &format!(\"the target feature `{}` is currently unstable\", feature),\n-                );\n+                )\n+                .emit();\n             }\n             Some(Symbol::intern(feature))\n         }));"}, {"sha": "078948cc63bd2633822deaf6dee0814dd8d0546e", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -7,10 +7,10 @@ use std::mem;\n use std::fmt::{self, Write};\n use std::ops;\n \n+use rustc_feature::Features;\n use syntax::symbol::{Symbol, sym};\n use syntax::ast::{MetaItem, MetaItemKind, NestedMetaItem, LitKind};\n use syntax::sess::ParseSess;\n-use syntax::feature_gate::Features;\n \n use syntax_pos::Span;\n "}, {"sha": "b77b1c720cfdffa0186a4f67c2386958c53c869e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -12,12 +12,12 @@ use rustc::session::DiagnosticOutput;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_interface::interface;\n use rustc_driver::abort_on_err;\n+use rustc_feature::UnstableFeatures;\n use rustc_resolve as resolve;\n \n use syntax::ast::CRATE_NODE_ID;\n use syntax::source_map;\n use syntax::attr;\n-use syntax::feature_gate::UnstableFeatures;\n use errors::json::JsonEmitter;\n use syntax::symbol::sym;\n use syntax_pos::DUMMY_SP;"}, {"sha": "7945850ef08ac84cc69b5da597218893b52ff9dc", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -2,7 +2,7 @@ use std::fs;\n use std::path::Path;\n use std::str;\n use errors;\n-use crate::syntax::feature_gate::UnstableFeatures;\n+use rustc_feature::UnstableFeatures;\n use crate::syntax::edition::Edition;\n use crate::html::markdown::{IdMap, ErrorCodes, Markdown, Playground};\n "}, {"sha": "b5c1a77a3874209c585e19b8c60fc3fc58aaacfd", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -45,7 +45,6 @@ use errors;\n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n use syntax::edition::Edition;\n-use syntax::feature_gate::UnstableFeatures;\n use syntax::print::pprust;\n use syntax::source_map::FileName;\n use syntax::symbol::{Symbol, sym};\n@@ -56,6 +55,7 @@ use rustc::middle::stability;\n use rustc::hir;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n+use rustc_feature::UnstableFeatures;\n \n use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy, Mutability};\n use crate::config::RenderOptions;"}, {"sha": "be3644ecf96a7ad1436d23a45a9d5fff00ac1925", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -24,6 +24,7 @@ extern crate env_logger;\n extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n+extern crate rustc_feature;\n extern crate rustc_error_codes;\n extern crate rustc_index;\n extern crate rustc_resolve;"}, {"sha": "7dc3df23a6d16cd73d0335fb6f1765b354994d4a", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -6,7 +6,7 @@ use errors;\n use testing;\n use syntax::edition::Edition;\n use syntax::source_map::DUMMY_SP;\n-use syntax::feature_gate::UnstableFeatures;\n+use rustc_feature::UnstableFeatures;\n \n use crate::externalfiles::{LoadStringError, load_string};\n use crate::config::{Options, RenderOptions};"}, {"sha": "3c021ae7465236c195c15276ab4f93523bdac4be", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -5,10 +5,10 @@ use rustc::hir;\n use rustc::lint as lint;\n use rustc::ty;\n use rustc_resolve::ParentScope;\n+use rustc_feature::UnstableFeatures;\n use syntax;\n use syntax::ast::{self, Ident};\n use syntax_expand::base::SyntaxExtensionKind;\n-use syntax::feature_gate::UnstableFeatures;\n use syntax::symbol::Symbol;\n use syntax_pos::DUMMY_SP;\n "}, {"sha": "5fd7ab03224a5a495b5122edca616b98d76a38c7", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,4 +1,5 @@\n use rustc_data_structures::sync::Lrc;\n+use rustc_feature::UnstableFeatures;\n use rustc_interface::interface;\n use rustc_target::spec::TargetTriple;\n use rustc::hir;\n@@ -9,7 +10,6 @@ use syntax::ast;\n use syntax::with_globals;\n use syntax::source_map::SourceMap;\n use syntax::edition::Edition;\n-use syntax::feature_gate::UnstableFeatures;\n use std::env;\n use std::io::{self, Write};\n use std::panic;"}, {"sha": "1dbb0c6ec8310b3b9084246ada779710f5ed2278", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -234,6 +234,7 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n+#![feature(atomic_mut_ptr)]\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]"}, {"sha": "05e55334ac008a3164d532bd1d4e52e2efc75625", "filename": "src/libstd/sys/wasm/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibstd%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibstd%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Falloc.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -67,7 +67,7 @@ mod lock {\n             //\n             //     unsafe {\n             //         let r = core::arch::wasm32::i32_atomic_wait(\n-            //             &LOCKED as *const AtomicI32 as *mut i32,\n+            //             LOCKED.as_mut_ptr(),\n             //             1,  //     expected value\n             //             -1, //     timeout\n             //         );\n@@ -143,7 +143,7 @@ mod lock {\n             //\n             //     unsafe {\n             //         core::arch::wasm32::atomic_notify(\n-            //             &LOCKED as *const AtomicI32 as *mut i32,\n+            //             LOCKED.as_mut_ptr(),\n             //             1, //     only one thread\n             //         );\n             //     }"}, {"sha": "f452bbd3487872206ca34d57cfc84fb4c4aef3bf", "filename": "src/libstd/sys/wasm/condvar_atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar_atomics.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -89,6 +89,6 @@ impl Condvar {\n     #[inline]\n     fn ptr(&self) -> *mut i32 {\n         assert_eq!(mem::size_of::<usize>(), mem::size_of::<i32>());\n-        &self.cnt as *const AtomicUsize as *mut i32\n+        self.cnt.as_mut_ptr() as *mut i32\n     }\n }"}, {"sha": "cddd584dd2207354373d10f9b11a08326f573492", "filename": "src/libstd/sys/wasm/mutex_atomics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibstd%2Fsys%2Fwasm%2Fmutex_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibstd%2Fsys%2Fwasm%2Fmutex_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmutex_atomics.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -56,7 +56,7 @@ impl Mutex {\n     #[inline]\n     fn ptr(&self) -> *mut i32 {\n         assert_eq!(mem::size_of::<usize>(), mem::size_of::<i32>());\n-        &self.locked as *const AtomicUsize as *mut isize as *mut i32\n+        self.locked.as_mut_ptr() as *mut i32\n     }\n }\n \n@@ -145,6 +145,6 @@ impl ReentrantMutex {\n \n     #[inline]\n     fn ptr(&self) -> *mut i32 {\n-        &self.owner as *const AtomicU32 as *mut i32\n+        self.owner.as_mut_ptr() as *mut i32\n     }\n }"}, {"sha": "085c1760c80272c9cf659a20052947338d4777aa", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -18,6 +18,7 @@ lazy_static = \"1.0.0\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }"}, {"sha": "3c10f27b60ae94532eba9919aa6de84de0ba7c8b", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,20 +1,24 @@\n //! Parsing and validation of builtin attributes\n \n+use super::{mark_used, MetaItemKind};\n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::feature_gate::{Features, GatedCfg};\n+use crate::feature_gate::feature_err;\n use crate::print::pprust;\n use crate::sess::ParseSess;\n \n use errors::{Applicability, Handler};\n use std::num::NonZeroU32;\n use syntax_pos::hygiene::Transparency;\n use syntax_pos::{symbol::Symbol, symbol::sym, Span};\n+use rustc_feature::{Features, find_gated_cfg, GatedCfg, is_builtin_attr_name};\n use rustc_macros::HashStable_Generic;\n \n-use super::{mark_used, MetaItemKind};\n-\n use rustc_error_codes::*;\n \n+pub fn is_builtin_attr(attr: &Attribute) -> bool {\n+    attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n+}\n+\n enum AttrError {\n     MultipleItem(String),\n     UnknownMetaItem(String, &'static [&'static str]),\n@@ -24,31 +28,6 @@ enum AttrError {\n     UnsupportedLiteral(&'static str, /* is_bytestr */ bool),\n }\n \n-/// A template that the attribute input must match.\n-/// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n-#[derive(Clone, Copy)]\n-pub struct AttributeTemplate {\n-    pub word: bool,\n-    pub list: Option<&'static str>,\n-    pub name_value_str: Option<&'static str>,\n-}\n-\n-impl AttributeTemplate {\n-    pub fn only_word() -> Self {\n-        Self { word: true, list: None, name_value_str: None }\n-    }\n-\n-    /// Checks that the given meta-item is compatible with this template.\n-    pub fn compatible(&self, meta_item_kind: &ast::MetaItemKind) -> bool {\n-        match meta_item_kind {\n-            ast::MetaItemKind::Word => self.word,\n-            ast::MetaItemKind::List(..) => self.list.is_some(),\n-            ast::MetaItemKind::NameValue(lit) if lit.kind.is_str() => self.name_value_str.is_some(),\n-            ast::MetaItemKind::NameValue(..) => false,\n-        }\n-    }\n-}\n-\n fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     let diag = &sess.span_diagnostic;\n     match error {\n@@ -555,8 +534,9 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<Symbol> {\n /// Tests if a cfg-pattern matches the cfg set\n pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) -> bool {\n     eval_condition(cfg, sess, &mut |cfg| {\n-        if let (Some(feats), Some(gated_cfg)) = (features, GatedCfg::gate(cfg)) {\n-            gated_cfg.check_and_emit(sess, feats);\n+        let gate = find_gated_cfg(|sym| cfg.check_name(sym));\n+        if let (Some(feats), Some(gated_cfg)) = (features, gate) {\n+            gate_cfg(&gated_cfg, cfg.span, sess, feats);\n         }\n         let error = |span, msg| { sess.span_diagnostic.span_err(span, msg); true };\n         if cfg.path.segments.len() != 1 {\n@@ -585,12 +565,21 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n     })\n }\n \n+fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &Features) {\n+    let (cfg, feature, has_feature) = gated_cfg;\n+    if !has_feature(features) && !cfg_span.allows_unstable(*feature) {\n+        let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n+        feature_err(sess, *feature, cfg_span, &explain).emit()\n+    }\n+}\n+\n /// Evaluate a cfg-like condition (with `any` and `all`), using `eval` to\n /// evaluate individual items.\n-pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n-                         -> bool\n-    where F: FnMut(&ast::MetaItem) -> bool\n-{\n+pub fn eval_condition(\n+    cfg: &ast::MetaItem,\n+    sess: &ParseSess,\n+    eval: &mut impl FnMut(&ast::MetaItem) -> bool,\n+) -> bool {\n     match cfg.kind {\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {"}, {"sha": "3d2c3b1d4f90121de47f7f580d50f3842f85366e", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 19, "deletions": 107, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,7 +1,7 @@\n-use super::{active::{ACTIVE_FEATURES, Features}, Feature, State as FeatureState};\n-use super::accepted::ACCEPTED_FEATURES;\n-use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n-use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n+use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{Features, Feature, State as FeatureState, UnstableFeatures};\n+use rustc_feature::{find_feature_issue, GateIssue};\n \n use crate::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n use crate::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n@@ -19,18 +19,6 @@ use log::debug;\n \n use rustc_error_codes::*;\n \n-\n-use std::env;\n-use std::num::NonZeroU32;\n-\n-#[derive(Copy, Clone, Debug)]\n-pub enum Stability {\n-    Unstable,\n-    // First argument is tracking issue link; second argument is an optional\n-    // help message, which defaults to \"remove this attribute\"\n-    Deprecated(&'static str, Option<&'static str>),\n-}\n-\n macro_rules! gate_feature_fn {\n     ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $level: expr) => {{\n         let (cx, has_feature, span,\n@@ -59,30 +47,6 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n     PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n-fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n-    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n-        // FIXME (#28244): enforce that active features have issue numbers\n-        // assert!(info.issue().is_some())\n-        info.issue()\n-    } else {\n-        // search in Accepted, Removed, or Stable Removed features\n-        let found = ACCEPTED_FEATURES\n-            .iter()\n-            .chain(REMOVED_FEATURES)\n-            .chain(STABLE_REMOVED_FEATURES)\n-            .find(|t| t.name == feature);\n-        match found {\n-            Some(found) => found.issue(),\n-            None => panic!(\"feature `{}` is not declared anywhere\", feature),\n-        }\n-    }\n-}\n-\n-pub enum GateIssue {\n-    Language,\n-    Library(Option<NonZeroU32>)\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq)]\n pub enum GateStrength {\n     /// A hard error. (Most feature gates should use this.)\n@@ -91,49 +55,43 @@ pub enum GateStrength {\n     Soft,\n }\n \n-pub fn emit_feature_err(\n-    sess: &ParseSess,\n+pub fn feature_err<'a>(\n+    sess: &'a ParseSess,\n     feature: Symbol,\n-    span: Span,\n-    issue: GateIssue,\n+    span: impl Into<MultiSpan>,\n     explain: &str,\n-) {\n-    feature_err(sess, feature, span, issue, explain).emit();\n+) -> DiagnosticBuilder<'a> {\n+    feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n }\n \n-pub fn feature_err<'a, S: Into<MultiSpan>>(\n+pub fn feature_err_issue<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n-    span: S,\n+    span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: &str,\n ) -> DiagnosticBuilder<'a> {\n     leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n }\n \n-fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n+fn leveled_feature_err<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n-    span: S,\n+    span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: &str,\n     level: GateStrength,\n ) -> DiagnosticBuilder<'a> {\n     let diag = &sess.span_diagnostic;\n \n-    let issue = match issue {\n-        GateIssue::Language => find_lang_feature_issue(feature),\n-        GateIssue::Library(lib) => lib,\n-    };\n-\n     let mut err = match level {\n         GateStrength::Hard => {\n             diag.struct_span_err_with_code(span, explain, stringify_error_code!(E0658))\n         }\n         GateStrength::Soft => diag.struct_span_warn(span, explain),\n     };\n \n-    if let Some(n) = issue {\n+    if let Some(n) = find_feature_issue(feature, issue) {\n         err.note(&format!(\n             \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n             n,\n@@ -156,20 +114,6 @@ fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n \n }\n \n-const EXPLAIN_BOX_SYNTAX: &str =\n-    \"box expression syntax is experimental; you can call `Box::new` instead\";\n-\n-pub const EXPLAIN_STMT_ATTR_SYNTAX: &str =\n-    \"attributes on expressions are experimental\";\n-\n-pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &str =\n-    \"allow_internal_unstable side-steps feature gating and stability checks\";\n-pub const EXPLAIN_ALLOW_INTERNAL_UNSAFE: &str =\n-    \"allow_internal_unsafe side-steps the unsafe_code lint\";\n-\n-pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &str =\n-    \"unsized tuple coercion is not stable enough for use and is subject to change\";\n-\n struct PostExpansionVisitor<'a> {\n     parse_sess: &'a ParseSess,\n     features: &'a Features,\n@@ -282,7 +226,6 @@ impl<'a> PostExpansionVisitor<'a> {\n                 self.parse_sess,\n                 sym::arbitrary_enum_discriminant,\n                 discriminant_spans.clone(),\n-                crate::feature_gate::GateIssue::Language,\n                 \"custom discriminant values are not allowed in enums with tuple or struct variants\",\n             );\n             for sp in discriminant_spans {\n@@ -529,7 +472,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n             ast::ExprKind::Box(_) => {\n-                gate_feature_post!(&self, box_syntax, e.span, EXPLAIN_BOX_SYNTAX);\n+                gate_feature_post!(\n+                    &self, box_syntax, e.span,\n+                    \"box expression syntax is experimental; you can call `Box::new` instead\"\n+                );\n             }\n             ast::ExprKind::Type(..) => {\n                 // To avoid noise about type ascription in common syntax errors, only emit if it\n@@ -695,7 +641,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         err.emit();\n     }\n \n-    let mut features = Features::new();\n+    let mut features = Features::default();\n     let mut edition_enabled_features = FxHashMap::default();\n \n     for &edition in ALL_EDITIONS {\n@@ -900,40 +846,6 @@ pub fn check_crate(krate: &ast::Crate,\n     visit::walk_crate(&mut visitor, krate);\n }\n \n-#[derive(Clone, Copy, Hash)]\n-pub enum UnstableFeatures {\n-    /// Hard errors for unstable features are active, as on beta/stable channels.\n-    Disallow,\n-    /// Allow features to be activated, as on nightly.\n-    Allow,\n-    /// Errors are bypassed for bootstrapping. This is required any time\n-    /// during the build that feature-related lints are set to warn or above\n-    /// because the build turns on warnings-as-errors and uses lots of unstable\n-    /// features. As a result, this is always required for building Rust itself.\n-    Cheat\n-}\n-\n-impl UnstableFeatures {\n-    pub fn from_environment() -> UnstableFeatures {\n-        // `true` if this is a feature-staged build, i.e., on the beta or stable channel.\n-        let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n-        // `true` if we should enable unstable features for bootstrapping.\n-        let bootstrap = env::var(\"RUSTC_BOOTSTRAP\").is_ok();\n-        match (disable_unstable_features, bootstrap) {\n-            (_, true) => UnstableFeatures::Cheat,\n-            (true, _) => UnstableFeatures::Disallow,\n-            (false, _) => UnstableFeatures::Allow\n-        }\n-    }\n-\n-    pub fn is_nightly_build(&self) -> bool {\n-        match *self {\n-            UnstableFeatures::Allow | UnstableFeatures::Cheat => true,\n-            UnstableFeatures::Disallow => false,\n-        }\n-    }\n-}\n-\n fn maybe_stage_features(span_handler: &Handler, krate: &ast::Crate, unstable: UnstableFeatures) {\n     if !unstable.is_nightly_build() {\n         for attr in krate.attrs.iter().filter(|attr| attr.check_name(sym::feature)) {"}, {"sha": "c4418c0f0f632b26cf26ec0e1e900ca0868d76c8", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3", "patch": "@@ -1,71 +0,0 @@\n-//! # Feature gating\n-//!\n-//! This module implements the gating necessary for preventing certain compiler\n-//! features from being used by default. This module will crawl a pre-expanded\n-//! AST to ensure that there are no features which are used that are not\n-//! enabled.\n-//!\n-//! Features are enabled in programs via the crate-level attributes of\n-//! `#![feature(...)]` with a comma-separated list of features.\n-//!\n-//! For the purpose of future feature-tracking, once code for detection of feature\n-//! gate usage is added, *do not remove it again* even once the feature\n-//! becomes stable.\n-\n-mod accepted;\n-mod removed;\n-mod active;\n-mod builtin_attrs;\n-mod check;\n-\n-use crate::{edition::Edition, symbol::Symbol};\n-use std::fmt;\n-use std::num::NonZeroU32;\n-use syntax_pos::Span;\n-\n-#[derive(Clone, Copy)]\n-pub enum State {\n-    Accepted,\n-    Active { set: fn(&mut Features, Span) },\n-    Removed { reason: Option<&'static str> },\n-    Stabilized { reason: Option<&'static str> },\n-}\n-\n-impl fmt::Debug for State {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            State::Accepted { .. } => write!(f, \"accepted\"),\n-            State::Active { .. } => write!(f, \"active\"),\n-            State::Removed { .. } => write!(f, \"removed\"),\n-            State::Stabilized { .. } => write!(f, \"stabilized\"),\n-        }\n-    }\n-}\n-\n-#[derive(Debug, Clone)]\n-pub struct Feature {\n-    state: State,\n-    name: Symbol,\n-    since: &'static str,\n-    issue: Option<u32>,  // FIXME: once #58732 is done make this an Option<NonZeroU32>\n-    edition: Option<Edition>,\n-    description: &'static str,\n-}\n-\n-impl Feature {\n-    fn issue(&self) -> Option<NonZeroU32> {\n-        self.issue.and_then(|i| NonZeroU32::new(i))\n-    }\n-}\n-\n-pub use active::{Features, INCOMPLETE_FEATURES};\n-pub use builtin_attrs::{\n-    AttributeGate, AttributeType, GatedCfg,\n-    BuiltinAttribute, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n-    deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n-};\n-pub use check::{\n-    check_crate, check_attribute, get_features, feature_err, emit_feature_err,\n-    Stability, GateIssue, UnstableFeatures,\n-    EXPLAIN_STMT_ATTR_SYNTAX, EXPLAIN_UNSIZED_TUPLE_COERCION,\n-};"}, {"sha": "3d4a5d624c1190eccf025a807b2779387d3de59d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -92,7 +92,10 @@ pub mod attr;\n pub mod expand;\n pub use syntax_pos::source_map;\n pub mod entry;\n-pub mod feature_gate;\n+pub mod feature_gate {\n+    mod check;\n+    pub use check::{check_crate, check_attribute, get_features, feature_err, feature_err_issue};\n+}\n pub mod mut_visit;\n pub mod ptr;\n pub mod show_span;"}, {"sha": "aa9217c1b69a846f574e49337d2c1e173038638b", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -3,15 +3,15 @@\n \n use crate::ast::{CrateConfig, NodeId};\n use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n-use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::feature_gate::UnstableFeatures;\n \n use errors::{Applicability, emitter::SilentEmitter, Handler, ColorConfig, DiagnosticBuilder};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock, Once};\n+use rustc_feature::UnstableFeatures;\n use syntax_pos::{Symbol, Span, MultiSpan};\n use syntax_pos::edition::Edition;\n use syntax_pos::hygiene::ExpnId;\n+use syntax_pos::source_map::{SourceMap, FilePathMapping};\n \n use std::path::PathBuf;\n use std::str;"}, {"sha": "897d5a65ba3de1297818c1299e6fb34aabf71d7e", "filename": "src/libsyntax_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -16,6 +16,7 @@ log = \"0.4\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_parse = { path = \"../librustc_parse\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "a6ced1439c5d95c5e07800899cd4f8980872fa9c", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -4,16 +4,17 @@ use crate::hygiene::{ExpnId, SyntaxContext, ExpnData, ExpnKind};\n use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n use crate::config::StripUnconfigured;\n-use rustc_parse::configure;\n \n+use rustc_feature::Features;\n+use rustc_parse::configure;\n use rustc_parse::DirectoryOwnership;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use syntax::ast::{MacStmtStyle, StmtKind, ItemKind};\n-use syntax::attr::{self, HasAttrs};\n+use syntax::attr::{self, HasAttrs, is_builtin_attr};\n use syntax::source_map::respan;\n-use syntax::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n+use syntax::feature_gate::{self, feature_err};\n use syntax::mut_visit::*;\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -726,13 +727,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         if self.cx.ecfg.proc_macro_hygiene() {\n             return\n         }\n-        emit_feature_err(\n+        feature_err(\n             self.cx.parse_sess,\n             sym::proc_macro_hygiene,\n             span,\n-            GateIssue::Language,\n             &format!(\"custom attributes cannot be applied to {}\", kind),\n-        );\n+        )\n+        .emit();\n     }\n \n     fn gate_proc_macro_input(&self, annotatable: &Annotatable) {\n@@ -744,13 +745,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             fn visit_item(&mut self, item: &'ast ast::Item) {\n                 match &item.kind {\n                     ast::ItemKind::Mod(module) if !module.inline => {\n-                        emit_feature_err(\n+                        feature_err(\n                             self.parse_sess,\n                             sym::proc_macro_hygiene,\n                             item.span,\n-                            GateIssue::Language,\n                             \"non-inline modules in proc macro input are unstable\",\n-                        );\n+                        )\n+                        .emit();\n                     }\n                     _ => {}\n                 }\n@@ -789,13 +790,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         if self.cx.ecfg.proc_macro_hygiene() {\n             return\n         }\n-        emit_feature_err(\n+        feature_err(\n             self.cx.parse_sess,\n             sym::proc_macro_hygiene,\n             span,\n-            GateIssue::Language,\n             &format!(\"procedural macros cannot be expanded to {}\", kind),\n-        );\n+        )\n+        .emit();\n     }\n \n     fn parse_ast_fragment(\n@@ -991,9 +992,11 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         if let Some(attr) = &attr {\n             if !self.cx.ecfg.custom_inner_attributes() &&\n                attr.style == ast::AttrStyle::Inner && !attr.has_name(sym::test) {\n-                emit_feature_err(&self.cx.parse_sess, sym::custom_inner_attributes,\n-                                 attr.span, GateIssue::Language,\n-                                 \"non-builtin inner attributes are unstable\");\n+                feature_err(\n+                    &self.cx.parse_sess, sym::custom_inner_attributes, attr.span,\n+                    \"non-builtin inner attributes are unstable\"\n+                )\n+                .emit();\n             }\n         }\n         attr"}, {"sha": "b191527df1991fc832b43862901720e7b67e9215", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -8,12 +8,12 @@ use crate::mbe::macro_parser::{Error, Failure, Success};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::mbe::transcribe::transcribe;\n \n+use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::Directory;\n use syntax::ast;\n use syntax::attr::{self, TransparencyError};\n use syntax::edition::Edition;\n-use syntax::feature_gate::Features;\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};"}, {"sha": "d73a9ea6cdbc14ef4eea404e05c6ef6c97854bb8", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -14,6 +14,7 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "4c1eec38c6e5dd8b8e8685283be86c2419c4d6e3", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -2,13 +2,13 @@\n \n use log::debug;\n use smallvec::{smallvec, SmallVec};\n+use rustc_feature::Features;\n use rustc_target::spec::PanicStrategy;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::entry::{self, EntryPointType};\n use syntax_expand::base::{ExtCtxt, Resolver};\n use syntax_expand::expand::{AstFragment, ExpansionConfig};\n-use syntax::feature_gate::Features;\n use syntax::mut_visit::{*, ExpectOne};\n use syntax::ptr::P;\n use syntax::sess::ParseSess;"}, {"sha": "f7bd9a056046178f171077b7666ef4bebc92167f", "filename": "src/libsyntax_ext/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_ext%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Flibsyntax_ext%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Futil.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -1,7 +1,7 @@\n use rustc_parse::validate_attr;\n+use rustc_feature::AttributeTemplate;\n use syntax_pos::Symbol;\n use syntax::ast::MetaItem;\n-use syntax::attr::AttributeTemplate;\n use syntax_expand::base::ExtCtxt;\n \n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {"}, {"sha": "a116ed282acd1b306bba0b847f3b0226b205793a", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -445,17 +445,6 @@ extern \"C\" void LLVMRustDisposeTargetMachine(LLVMTargetMachineRef TM) {\n   delete unwrap(TM);\n }\n \n-// Unfortunately, LLVM doesn't expose a C API to add the corresponding analysis\n-// passes for a target to a pass manager. We export that functionality through\n-// this function.\n-extern \"C\" void LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n-                                          LLVMPassManagerRef PMR,\n-                                          LLVMModuleRef M) {\n-  PassManagerBase *PM = unwrap(PMR);\n-  PM->add(\n-      createTargetTransformInfoWrapperPass(unwrap(TM)->getTargetIRAnalysis()));\n-}\n-\n extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n     bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,"}, {"sha": "a8fa64255fb9ae5523a36c6ef26bab2eac28696f", "filename": "src/test/mir-opt/simplify-arm-identity.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,75 @@\n+// Checks that `SimplifyArmIdentity` is not applied if enums have incompatible layouts.\n+// Regression test for issue #66856.\n+//\n+// compile-flags: -Zmir-opt-level=2\n+\n+enum Src {\n+    Foo(u8),\n+    Bar,\n+}\n+\n+enum Dst {\n+    Foo(u8),\n+}\n+\n+fn main() {\n+    let e: Src = Src::Foo(0);\n+    let _: Dst = match e {\n+        Src::Foo(x) => Dst::Foo(x),\n+        Src::Bar => Dst::Foo(0),\n+    };\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.SimplifyArmIdentity.before.mir\n+// fn main() -> () {\n+//     ...\n+//     bb0: {\n+//         StorageLive(_1);\n+//         ((_1 as Foo).0: u8) = const 0u8;\n+//         discriminant(_1) = 0;\n+//         StorageLive(_2);\n+//         _3 = discriminant(_1);\n+//         switchInt(move _3) -> [0isize: bb3, 1isize: bb1, otherwise: bb2];\n+//     }\n+//     bb1: {\n+//         ((_2 as Foo).0: u8) = const 0u8;\n+//         discriminant(_2) = 0;\n+//         goto -> bb4;\n+//     }\n+//     ...\n+//     bb3: {\n+//         _4 = ((_1 as Foo).0: u8);\n+//         ((_2 as Foo).0: u8) = move _4;\n+//         discriminant(_2) = 0;\n+//         goto -> bb4;\n+//     }\n+//     ...\n+// }\n+// END rustc.main.SimplifyArmIdentity.before.mir\n+// START rustc.main.SimplifyArmIdentity.after.mir\n+// fn main() -> () {\n+//     ...\n+//     bb0: {\n+//         StorageLive(_1);\n+//         ((_1 as Foo).0: u8) = const 0u8;\n+//         discriminant(_1) = 0;\n+//         StorageLive(_2);\n+//         _3 = discriminant(_1);\n+//         switchInt(move _3) -> [0isize: bb3, 1isize: bb1, otherwise: bb2];\n+//     }\n+//     bb1: {\n+//         ((_2 as Foo).0: u8) = const 0u8;\n+//         discriminant(_2) = 0;\n+//         goto -> bb4;\n+//     }\n+//     ...\n+//     bb3: {\n+//         _4 = ((_1 as Foo).0: u8);\n+//         ((_2 as Foo).0: u8) = move _4;\n+//         discriminant(_2) = 0;\n+//         goto -> bb4;\n+//     }\n+//     ...\n+// }\n+// END rustc.main.SimplifyArmIdentity.after.mir"}, {"sha": "72d62a30a337a8a83b100a8267c6979422fc58d7", "filename": "src/test/ui/issues/issue-66851.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2Fissues%2Fissue-66851.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2Fissues%2Fissue-66851.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66851.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,20 @@\n+// This used to mis-compile because the mir-opt `SimplifyArmIdentity`\n+// did not check that the types matched up in the `Ok(r)` branch.\n+//\n+// run-pass\n+// compile-flags: -Zmir-opt-level=2\n+\n+#[derive(Debug, PartialEq, Eq)]\n+enum SpecialsRes { Res(u64) }\n+\n+fn e103() -> SpecialsRes {\n+    if let Ok(r) = \"1\".parse() {\n+        SpecialsRes::Res(r)\n+    } else {\n+        SpecialsRes::Res(42)\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(e103(), SpecialsRes::Res(1));\n+}"}, {"sha": "d7c191bb5a28d38b1d8159b3c53139239e75e446", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,26 @@\n+#![feature(or_patterns)]\n+#![feature(slice_patterns)]\n+#![allow(incomplete_features)]\n+#![deny(unreachable_patterns)]\n+\n+// We wrap patterns in a tuple because top-level or-patterns are special-cased for now.\n+fn main() {\n+    // Get the fatal error out of the way\n+    match (0u8,) {\n+        (0 | _,) => {}\n+        //~^ ERROR or-patterns are not fully implemented yet\n+    }\n+\n+    match (0u8, 0u8) {\n+        //~^ ERROR non-exhaustive patterns: `(2u8..=std::u8::MAX, _)`\n+        (0 | 1, 2 | 3) => {}\n+    }\n+    match ((0u8,),) {\n+        //~^ ERROR non-exhaustive patterns: `((4u8..=std::u8::MAX))`\n+        ((0 | 1,) | (2 | 3,),) => {},\n+    }\n+    match (Some(0u8),) {\n+        //~^ ERROR non-exhaustive patterns: `(Some(2u8..=std::u8::MAX))`\n+        (None | Some(0 | 1),) => {}\n+    }\n+}"}, {"sha": "e6aa157d278c824279745efd2bf103af8003f506", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,33 @@\n+error[E0004]: non-exhaustive patterns: `(2u8..=std::u8::MAX, _)` not covered\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:14:11\n+   |\n+LL |     match (0u8, 0u8) {\n+   |           ^^^^^^^^^^ pattern `(2u8..=std::u8::MAX, _)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `((4u8..=std::u8::MAX))` not covered\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:18:11\n+   |\n+LL |     match ((0u8,),) {\n+   |           ^^^^^^^^^ pattern `((4u8..=std::u8::MAX))` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `(Some(2u8..=std::u8::MAX))` not covered\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:22:11\n+   |\n+LL |     match (Some(0u8),) {\n+   |           ^^^^^^^^^^^^ pattern `(Some(2u8..=std::u8::MAX))` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: or-patterns are not fully implemented yet\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:10:10\n+   |\n+LL |         (0 | _,) => {}\n+   |          ^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "62a851719f96d363442806d4546c4730a88c1a27", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,40 @@\n+#![feature(or_patterns)]\n+#![feature(slice_patterns)]\n+#![allow(incomplete_features)]\n+#![deny(unreachable_patterns)]\n+\n+// We wrap patterns in a tuple because top-level or-patterns are special-cased for now.\n+fn main() {\n+    // Get the fatal error out of the way\n+    match (0u8,) {\n+        (0 | _,) => {}\n+        //~^ ERROR or-patterns are not fully implemented yet\n+    }\n+\n+    match (0u8,) {\n+        (1 | 2,) => {}\n+        _ => {}\n+    }\n+\n+    match (0u8,) {\n+        (1 | 1,) => {} // FIXME(or_patterns): redundancy not detected for now.\n+        _ => {}\n+    }\n+    match (0u8, 0u8) {\n+        (1 | 2, 3 | 4) => {}\n+        (1, 2) => {}\n+        (2, 1) => {}\n+        _ => {}\n+    }\n+    match (Some(0u8),) {\n+        (None | Some(0 | 1),) => {}\n+        (Some(2..=255),) => {}\n+    }\n+    match ((0u8,),) {\n+        ((0 | 1,) | (2 | 3,),) => {},\n+        ((_,),) => {},\n+    }\n+    match (&[0u8][..],) {\n+        ([] | [0 | 1..=255] | [_, ..],) => {},\n+    }\n+}"}, {"sha": "1f4278c4b8098c2070287ff91ba86f1d05341659", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,8 @@\n+error: or-patterns are not fully implemented yet\n+  --> $DIR/exhaustiveness-pass.rs:10:10\n+   |\n+LL |         (0 | _,) => {}\n+   |          ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2cd8ca2dbac626449fc60db47dadb431cbb6c5e2", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,51 @@\n+#![feature(or_patterns)]\n+#![feature(slice_patterns)]\n+#![allow(incomplete_features)]\n+#![deny(unreachable_patterns)]\n+\n+// We wrap patterns in a tuple because top-level or-patterns are special-cased for now.\n+fn main() {\n+    // Get the fatal error out of the way\n+    match (0u8,) {\n+        (0 | _,) => {}\n+        //~^ ERROR or-patterns are not fully implemented yet\n+    }\n+\n+    match (0u8,) {\n+        (1 | 2,) => {}\n+        (1,) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match (0u8,) {\n+        (1 | 2,) => {}\n+        (2,) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match (0u8,) {\n+        (1,) => {}\n+        (2,) => {}\n+        (1 | 2,) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match (0u8, 0u8) {\n+        (1 | 2, 3 | 4) => {}\n+        (1, 3) => {} //~ ERROR unreachable pattern\n+        (1, 4) => {} //~ ERROR unreachable pattern\n+        (2, 4) => {} //~ ERROR unreachable pattern\n+        (2 | 1, 4) => {} //~ ERROR unreachable pattern\n+        (1, 5 | 6) => {}\n+        (1, 4 | 5) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match (Some(0u8),) {\n+        (None | Some(1 | 2),) => {}\n+        (Some(1),) => {} //~ ERROR unreachable pattern\n+        (None,) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match ((0u8,),) {\n+        ((1 | 2,) | (3 | 4,),) => {},\n+        ((1..=4,),) => {}, //~ ERROR unreachable pattern\n+        _ => {},\n+    }\n+}"}, {"sha": "a4d55d805c3c621ed8c22167380ad1babe99ab3a", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -0,0 +1,80 @@\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:16:9\n+   |\n+LL |         (1,) => {}\n+   |         ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:4:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:21:9\n+   |\n+LL |         (2,) => {}\n+   |         ^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:27:9\n+   |\n+LL |         (1 | 2,) => {}\n+   |         ^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:32:9\n+   |\n+LL |         (1, 3) => {}\n+   |         ^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:33:9\n+   |\n+LL |         (1, 4) => {}\n+   |         ^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:34:9\n+   |\n+LL |         (2, 4) => {}\n+   |         ^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:35:9\n+   |\n+LL |         (2 | 1, 4) => {}\n+   |         ^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:37:9\n+   |\n+LL |         (1, 4 | 5) => {}\n+   |         ^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:42:9\n+   |\n+LL |         (Some(1),) => {}\n+   |         ^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:43:9\n+   |\n+LL |         (None,) => {}\n+   |         ^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:48:9\n+   |\n+LL |         ((1..=4,),) => {},\n+   |         ^^^^^^^^^^^\n+\n+error: or-patterns are not fully implemented yet\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:10:10\n+   |\n+LL |         (0 | _,) => {}\n+   |          ^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "4ea101296b738c04d370e40d94af8c1c41c4de67", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "patch": "@@ -231,7 +231,7 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n }\n \n fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features {\n-    let path = base.join(\"libsyntax/feature_gate\").join(file);\n+    let path = base.join(\"librustc_feature\").join(file);\n     let contents = t!(fs::read_to_string(&path));\n \n     // We allow rustc-internal features to omit a tracking issue."}]}