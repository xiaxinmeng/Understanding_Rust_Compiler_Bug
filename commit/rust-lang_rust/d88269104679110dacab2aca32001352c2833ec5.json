{"sha": "d88269104679110dacab2aca32001352c2833ec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODI2OTEwNDY3OTExMGRhY2FiMmFjYTMyMDAxMzUyYzI4MzNlYzU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-26T07:52:27Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-12-28T03:32:24Z"}, "message": "Prefer to use attr::contains_name() and attr::find_by_name()", "tree": {"sha": "5cf73196da7f42901bfdc53c836cb5f32ac03b86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf73196da7f42901bfdc53c836cb5f32ac03b86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d88269104679110dacab2aca32001352c2833ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d88269104679110dacab2aca32001352c2833ec5", "html_url": "https://github.com/rust-lang/rust/commit/d88269104679110dacab2aca32001352c2833ec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d88269104679110dacab2aca32001352c2833ec5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18da3c671b8147fb8d4e206d487f0ee4e4c3ba11", "url": "https://api.github.com/repos/rust-lang/rust/commits/18da3c671b8147fb8d4e206d487f0ee4e4c3ba11", "html_url": "https://github.com/rust-lang/rust/commit/18da3c671b8147fb8d4e206d487f0ee4e4c3ba11"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "e435f14470c57fa25792cfbc689e532b69855737", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -1571,7 +1571,7 @@ impl<'a> LoweringContext<'a> {\n             bounds,\n             default: tp.default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::Disallowed)),\n             span: tp.span,\n-            pure_wrt_drop: tp.attrs.iter().any(|attr| attr.check_name(\"may_dangle\")),\n+            pure_wrt_drop: attr::contains_name(&tp.attrs, \"may_dangle\"),\n             synthetic: tp.attrs.iter()\n                                .filter(|attr| attr.check_name(\"rustc_synthetic\"))\n                                .map(|_| hir::SyntheticTyParamKind::ImplTrait)\n@@ -1611,7 +1611,7 @@ impl<'a> LoweringContext<'a> {\n         let def = hir::LifetimeDef {\n             lifetime: self.lower_lifetime(&l.lifetime),\n             bounds: self.lower_lifetimes(&l.bounds),\n-            pure_wrt_drop: l.attrs.iter().any(|attr| attr.check_name(\"may_dangle\")),\n+            pure_wrt_drop: attr::contains_name(&l.attrs, \"may_dangle\"),\n             in_band: false,\n         };\n \n@@ -2331,7 +2331,7 @@ impl<'a> LoweringContext<'a> {\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n         if let ItemKind::MacroDef(ref def) = i.node {\n-            if !def.legacy || i.attrs.iter().any(|attr| attr.path == \"macro_export\") {\n+            if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") {\n                 let body = self.lower_token_stream(def.stream());\n                 self.exported_macros.push(hir::MacroDef {\n                     name,"}, {"sha": "757b078086d9c0531a0b342c3502c386e17c4854", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -140,9 +140,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n     {\n         let attrs = tcx.get_attrs(impl_def_id);\n \n-        let attr = if let Some(item) =\n-            attrs.into_iter().find(|a| a.check_name(\"rustc_on_unimplemented\"))\n-        {\n+        let attr = if let Some(item) = attr::find_by_name(&attrs, \"rustc_on_unimplemented\") {\n             item\n         } else {\n             return Ok(None);"}, {"sha": "12e5451f83cf4dc27dea935cf992762377e8e375", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -2402,7 +2402,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Determine whether an item is annotated with an attribute\n     pub fn has_attr(self, did: DefId, attr: &str) -> bool {\n-        self.get_attrs(did).iter().any(|item| item.check_name(attr))\n+        attr::contains_name(&self.get_attrs(did), attr)\n     }\n \n     /// Returns true if this is an `auto trait`."}, {"sha": "839d1831f95443fe7e4105d5808eb8bf1e710c9a", "filename": "src/librustc_driver/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_driver%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_driver%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FREADME.md?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -3,7 +3,7 @@ compiler as a whole, see\n [the README.md file found in `librustc`](../librustc/README.md).\n \n The `driver` crate is effectively the \"main\" function for the rust\n-compiler.  It orchstrates the compilation process and \"knits together\"\n+compiler.  It orchestrates the compilation process and \"knits together\"\n the code from the other crates within rustc. This crate itself does\n not contain any of the \"main logic\" of the compiler (though it does\n have some code related to pretty printing or other minor compiler"}, {"sha": "0303b503691d19022a57961ec4e53915a4bfa306", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -221,9 +221,7 @@ impl LintPass for NonSnakeCase {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     fn check_crate(&mut self, cx: &LateContext, cr: &hir::Crate) {\n-        let attr_crate_name = cr.attrs\n-            .iter()\n-            .find(|at| at.check_name(\"crate_name\"))\n+        let attr_crate_name = attr::find_by_name(&cr.attrs, \"crate_name\")\n             .and_then(|at| at.value_str().map(|s| (at, s)));\n         if let Some(ref name) = cx.tcx.sess.opts.crate_name {\n             self.check_snake_case(cx, \"crate\", name, None);"}, {"sha": "725a1b845e7ea39ff226d3b2f9d8518c50ea666f", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -27,6 +27,7 @@ use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use syntax::ast;\n+use syntax::attr;\n use syntax::symbol::Symbol;\n use rustc::hir;\n use rustc_const_math::{ConstInt, ConstUsize};\n@@ -78,8 +79,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         // Some functions always have overflow checks enabled,\n         // however, they may not get codegen'd, depending on\n         // the settings for the crate they are translated in.\n-        let mut check_overflow = attrs.iter()\n-            .any(|item| item.check_name(\"rustc_inherit_overflow_checks\"));\n+        let mut check_overflow = attr::contains_name(attrs, \"rustc_inherit_overflow_checks\");\n \n         // Respect -C overflow-checks.\n         check_overflow |= tcx.sess.overflow_checks();"}, {"sha": "61f54774163d4772fcc0fcaa52aad5b26fc9c5e0", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -51,8 +51,7 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn invalid_non_exhaustive_attribute(&self, variant: &Variant) {\n-        let has_non_exhaustive = variant.node.attrs.iter()\n-            .any(|attr| attr.check_name(\"non_exhaustive\"));\n+        let has_non_exhaustive = attr::contains_name(&variant.node.attrs, \"non_exhaustive\");\n         if has_non_exhaustive {\n             self.err_handler().span_err(variant.span,\n                                         \"#[non_exhaustive] is not yet supported on variants\");\n@@ -308,7 +307,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (c.f. #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, \"path\");\n-                if item.attrs.iter().any(|attr| attr.check_name(\"warn_directory_ownership\")) {\n+                if attr::contains_name(&item.attrs, \"warn_directory_ownership\") {\n                     let lint = lint::builtin::LEGACY_DIRECTORY_OWNERSHIP;\n                     let msg = \"cannot declare a new module at this location\";\n                     self.session.buffer_lint(lint, item.id, item.span, msg);"}, {"sha": "5866c8f93f094cfe51f122856c6b8d807af1a75b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -358,8 +358,7 @@ impl<'a> Resolver<'a> {\n \n                 let mut ctor_vis = vis;\n \n-                let has_non_exhaustive = item.attrs.iter()\n-                    .any(|item| item.check_name(\"non_exhaustive\"));\n+                let has_non_exhaustive = attr::contains_name(&item.attrs, \"non_exhaustive\");\n \n                 // If the structure is marked as non_exhaustive then lower the visibility\n                 // to within the crate."}, {"sha": "aabe931d79c579af326fa6a93ef1263fa72a898f", "filename": "src/librustc_trans_utils/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_trans_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibrustc_trans_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flink.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -13,7 +13,7 @@ use rustc::session::Session;\n use rustc::middle::cstore::{self, LinkMeta};\n use rustc::hir::svh::Svh;\n use std::path::{Path, PathBuf};\n-use syntax::ast;\n+use syntax::{ast, attr};\n use syntax_pos::Span;\n \n pub fn out_filename(sess: &Session,\n@@ -69,8 +69,8 @@ pub fn find_crate_name(sess: Option<&Session>,\n     // as used. After doing this, however, we still prioritize a crate name from\n     // the command line over one found in the #[crate_name] attribute. If we\n     // find both we ensure that they're the same later on as well.\n-    let attr_crate_name = attrs.iter().find(|at| at.check_name(\"crate_name\"))\n-                               .and_then(|at| at.value_str().map(|s| (at, s)));\n+    let attr_crate_name = attr::find_by_name(attrs, \"crate_name\")\n+        .and_then(|at| at.value_str().map(|s| (at, s)));\n \n     if let Some(sess) = sess {\n         if let Some(ref s) = sess.opts.crate_name {"}, {"sha": "eff7dd57f08af0086dc0a2aaee00a3a659b34084", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -386,15 +386,15 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n }\n \n fn is_ignored(i: &ast::Item) -> bool {\n-    i.attrs.iter().any(|attr| attr.check_name(\"ignore\"))\n+    attr::contains_name(&i.attrs, \"ignore\")\n }\n \n fn is_allowed_fail(i: &ast::Item) -> bool {\n-    i.attrs.iter().any(|attr| attr.check_name(\"allow_fail\"))\n+    attr::contains_name(&i.attrs, \"allow_fail\")\n }\n \n fn should_panic(i: &ast::Item, cx: &TestCtxt) -> ShouldPanic {\n-    match i.attrs.iter().find(|attr| attr.check_name(\"should_panic\")) {\n+    match attr::find_by_name(&i.attrs, \"should_panic\") {\n         Some(attr) => {\n             let sd = cx.span_diagnostic;\n             if attr.is_value_str() {"}, {"sha": "8c5276e1d74b532121a1d2cc260102a0aa2d0988", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -13,6 +13,7 @@ use std::mem;\n use errors;\n \n use syntax::ast::{self, Ident, NodeId};\n+use syntax::attr;\n use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n@@ -248,8 +249,7 @@ impl<'a> CollectProcMacros<'a> {\n impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         if let ast::ItemKind::MacroDef(..) = item.node {\n-            if self.is_proc_macro_crate &&\n-               item.attrs.iter().any(|attr| attr.path == \"macro_export\") {\n+            if self.is_proc_macro_crate && attr::contains_name(&item.attrs, \"macro_export\") {\n                 let msg =\n                     \"cannot export macro_rules! macros from a `proc-macro` crate type currently\";\n                 self.handler.span_err(item.span, msg);"}, {"sha": "0f90cb3752cf5a9043f601b9566bac508ab4c557", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -21,6 +21,7 @@ extern crate rustc;\n extern crate rustc_plugin;\n \n use syntax::ast;\n+use syntax::attr;\n use syntax::ext::base::{MultiDecorator, ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::symbol::Symbol;\n@@ -80,7 +81,7 @@ fn totalsum_substructure(cx: &mut ExtCtxt, trait_span: Span,\n     };\n \n     fields.iter().fold(cx.expr_isize(trait_span, 0), |acc, ref item| {\n-        if item.attrs.iter().find(|a| a.check_name(\"ignore\")).is_some() {\n+        if attr::contains_name(&item.attrs, \"ignore\") {\n             acc\n         } else {\n             cx.expr_binary(item.span, ast::BinOpKind::Add, acc,"}, {"sha": "0433b11f7c1271aaf5a6e66b707223762060d601", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d88269104679110dacab2aca32001352c2833ec5/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88269104679110dacab2aca32001352c2833ec5/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs?ref=d88269104679110dacab2aca32001352c2833ec5", "patch": "@@ -17,6 +17,7 @@ extern crate rustc_plugin;\n extern crate syntax;\n \n use rustc_plugin::Registry;\n+use syntax::attr;\n use syntax::ext::base::*;\n use syntax::feature_gate::AttributeType::Whitelisted;\n use syntax::symbol::Symbol;\n@@ -59,9 +60,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingWhitelistedAttrPass {\n             _ => cx.tcx.hir.expect_item(cx.tcx.hir.get_parent(id)),\n         };\n \n-        if !item.attrs.iter().any(|a| a.check_name(\"whitelisted_attr\")) {\n+        if !attr::contains_name(&item.attrs, \"whitelisted_attr\") {\n             cx.span_lint(MISSING_WHITELISTED_ATTR, span,\n-                         \"Missing 'whitelited_attr' attribute\");\n+                         \"Missing 'whitelisted_attr' attribute\");\n         }\n     }\n }"}]}