{"sha": "95bc9ea26df56b29f74583317ab080fdc7b99757", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YmM5ZWEyNmRmNTZiMjlmNzQ1ODMzMTdhYjA4MGZkYzdiOTk3NTc=", "commit": {"author": {"name": "Jihyun Yu", "email": "jihyun@nclab.kaist.ac.kr", "date": "2013-03-02T03:57:05Z"}, "committer": {"name": "Jihyun Yu", "email": "jihyun@nclab.kaist.ac.kr", "date": "2013-03-02T03:57:05Z"}, "message": "Remove REC, change related tests/docs", "tree": {"sha": "5bc88308814e2b0013f886efa2deaa7b56c5c8e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bc88308814e2b0013f886efa2deaa7b56c5c8e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95bc9ea26df56b29f74583317ab080fdc7b99757", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95bc9ea26df56b29f74583317ab080fdc7b99757", "html_url": "https://github.com/rust-lang/rust/commit/95bc9ea26df56b29f74583317ab080fdc7b99757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95bc9ea26df56b29f74583317ab080fdc7b99757/comments", "author": {"login": "yjh0502", "id": 554344, "node_id": "MDQ6VXNlcjU1NDM0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/554344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yjh0502", "html_url": "https://github.com/yjh0502", "followers_url": "https://api.github.com/users/yjh0502/followers", "following_url": "https://api.github.com/users/yjh0502/following{/other_user}", "gists_url": "https://api.github.com/users/yjh0502/gists{/gist_id}", "starred_url": "https://api.github.com/users/yjh0502/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yjh0502/subscriptions", "organizations_url": "https://api.github.com/users/yjh0502/orgs", "repos_url": "https://api.github.com/users/yjh0502/repos", "events_url": "https://api.github.com/users/yjh0502/events{/privacy}", "received_events_url": "https://api.github.com/users/yjh0502/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yjh0502", "id": 554344, "node_id": "MDQ6VXNlcjU1NDM0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/554344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yjh0502", "html_url": "https://github.com/yjh0502", "followers_url": "https://api.github.com/users/yjh0502/followers", "following_url": "https://api.github.com/users/yjh0502/following{/other_user}", "gists_url": "https://api.github.com/users/yjh0502/gists{/gist_id}", "starred_url": "https://api.github.com/users/yjh0502/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yjh0502/subscriptions", "organizations_url": "https://api.github.com/users/yjh0502/orgs", "repos_url": "https://api.github.com/users/yjh0502/repos", "events_url": "https://api.github.com/users/yjh0502/events{/privacy}", "received_events_url": "https://api.github.com/users/yjh0502/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fd1b58f236b4fe653d164836e94feebb2972931", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd1b58f236b4fe653d164836e94feebb2972931", "html_url": "https://github.com/rust-lang/rust/commit/0fd1b58f236b4fe653d164836e94feebb2972931"}], "stats": {"total": 409, "additions": 74, "deletions": 335}, "files": [{"sha": "e8018671fde88df9bffaa6253fac5513a4126596", "filename": "doc/rust.md", "status": "modified", "additions": 14, "deletions": 95, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1285,19 +1285,22 @@ An _implementation_ is an item that implements a [trait](#traits) for a specific\n Implementations are defined with the keyword `impl`.\n \n ~~~~\n-# type Point = {x: float, y: float};\n+# struct Point {x: float, y: float};\n # type Surface = int;\n-# type BoundingBox = {x: float, y: float, width: float, height: float};\n+# struct BoundingBox {x: float, y: float, width: float, height: float};\n # trait Shape { fn draw(Surface); fn bounding_box() -> BoundingBox; }\n # fn do_draw_circle(s: Surface, c: Circle) { }\n \n-type Circle = {radius: float, center: Point};\n+struct Circle {\n+    radius: float,\n+    center: Point,\n+}\n \n impl Shape for Circle {\n     fn draw(s: Surface) { do_draw_circle(s, self); }\n     fn bounding_box() -> BoundingBox {\n         let r = self.radius;\n-        {x: self.center.x - r, y: self.center.y - r,\n+        BoundingBox{x: self.center.x - r, y: self.center.y - r,\n          width: 2.0 * r, height: 2.0 * r}\n     }\n }\n@@ -1637,38 +1640,6 @@ rec_expr : '{' ident ':' expr\n                [ \"..\" expr ] '}'\n ~~~~~~~~\n \n-> **Note:** In future versions of Rust, record expressions and [record types](#record-types) will be removed.\n-\n-A [_record_](#record-types) _expression_ is one or more comma-separated\n-name-value pairs enclosed by braces. A fieldname can be any identifier,\n-and is separated from its value expression by a\n-colon. To indicate that a field is mutable, the `mut` keyword is\n-written before its name.\n-\n-~~~~\n-{x: 10f, y: 20f};\n-{name: \"Joe\", age: 35u, score: 100_000};\n-{ident: \"X\", mut count: 0u};\n-~~~~\n-\n-The order of the fields in a record expression is significant, and\n-determines the type of the resulting value. `{a: u8, b: u8}` and `{b:\n-u8, a: u8}` are two different fields.\n-\n-A record expression can terminate with the syntax `..` followed by an\n-expression to denote a functional update. The expression following\n-`..` (the base) must be of a record type that includes at least all the\n-fields mentioned in the record expression. A new record will be\n-created, of the same type as the base expression, with the given\n-values for the fields that were explicitly specified, and the values\n-in the base record for all other fields. The ordering of the fields in\n-such a record expression is not significant.\n-\n-~~~~\n-let base = {x: 1, y: 2, z: 3};\n-{y: 0, z: 10, .. base};\n-~~~~\n-\n ### Method-call expressions\n \n ~~~~~~~~{.ebnf .gram}\n@@ -1689,7 +1660,7 @@ field_expr : expr '.' ident\n \n A _field expression_ consists of an expression followed by a single dot and an identifier,\n when not immediately followed by a parenthesized expression-list (the latter is a [method call expression](#method-call-expressions)).\n-A field expression denotes a field of a [structure](#structure-types) or [record](#record-types).\n+A field expression denotes a field of a [structure](#structure-types).\n \n ~~~~~~~~ {.field}\n myrecord.myfield;\n@@ -1905,8 +1876,10 @@ An example of three different swap expressions:\n # let mut x = &mut [0];\n # let mut a = &mut [0];\n # let i = 0;\n-# let y = {mut z: 0};\n-# let b = {mut c: 0};\n+# struct S1 { z: int };\n+# struct S2 { c: int };\n+# let mut y = S1{z: 0};\n+# let mut b = S2{c: 0};\n \n x <-> a;\n x[i] <-> a[i];\n@@ -2328,42 +2301,6 @@ match x {\n }\n ~~~~\n \n-Records and structures can also be pattern-matched and their fields bound to variables.\n-When matching fields of a record,\n-the fields being matched are specified first,\n-then a placeholder (`_`) represents the remaining fields.\n-\n-~~~~\n-# type options = {choose: bool, size: ~str};\n-# type player = {player: ~str, stats: (), options: options};\n-# fn load_stats() { }\n-# fn choose_player(r: &player) { }\n-# fn next_player() { }\n-\n-fn main() {\n-    let r = {\n-        player: ~\"ralph\",\n-        stats: load_stats(),\n-        options: {\n-            choose: true,\n-            size: ~\"small\"\n-        }\n-    };\n-\n-    match r {\n-      {options: {choose: true, _}, _} => {\n-        choose_player(&r)\n-      }\n-      {player: ref p, options: {size: ~\"small\", _}, _} => {\n-        log(info, (copy *p) + ~\" is small\");\n-      }\n-      _ => {\n-        next_player();\n-      }\n-    }\n-}\n-~~~~\n-\n Patterns that bind variables default to binding to a copy of the matched value. This can be made\n explicit using the ```copy``` keyword, changed to bind to a borrowed pointer by using the ```ref```\n keyword, or to a mutable borrowed pointer using ```ref mut```, or the value can be moved into\n@@ -2692,25 +2629,6 @@ let a: List<int> = Cons(7, @Cons(13, @Nil));\n ~~~~\n \n \n-### Record types\n-\n-> **Note:** Records are not nominal types, thus do not directly support recursion, visibility control,\n-> out-of-order field initialization, or coherent trait implementation.\n-> Records are therefore deprecated and will be removed in future versions of Rust.\n-> [Structure types](#structure-types) should be used instead.\n-\n-The record type-constructor forms a new heterogeneous product of values.\n-Fields of a record type are accessed by name and are arranged in memory in the order specified by the record type.\n-\n-An example of a record type and its use:\n-\n-~~~~\n-type Point = {x: int, y: int};\n-let p: Point = {x: 10, y: 11};\n-let px: int = p.x;\n-~~~~\n-\n-\n ### Pointer types\n \n All pointers in Rust are explicit first-class values.\n@@ -3040,7 +2958,8 @@ Some operations (such as field selection) implicitly dereference boxes. An\n example of an _implicit dereference_ operation performed on box values:\n \n ~~~~~~~~\n-let x = @{y: 10};\n+struct Foo { y: int }\n+let x = @Foo{y: 10};\n assert x.y == 10;\n ~~~~~~~~\n "}, {"sha": "e638579253fed8df756a02dbeaf9775c2a752516", "filename": "doc/tutorial-borrowed-ptr.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/doc%2Ftutorial-borrowed-ptr.md", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/doc%2Ftutorial-borrowed-ptr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-borrowed-ptr.md?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -166,9 +166,9 @@ operator. For example, I could write:\n # struct Point {x: float, y: float} // as before\n # struct Size {w: float, h: float} // as before\n # struct Rectangle {origin: Point, size: Size}\n-# let rect_stack  = &{origin: Point {x: 1f, y: 2f}, size: Size {w: 3f, h: 4f}};\n-# let rect_managed = @{origin: Point {x: 3f, y: 4f}, size: Size {w: 3f, h: 4f}};\n-# let rect_unique = ~{origin: Point {x: 5f, y: 6f}, size: Size {w: 3f, h: 4f}};\n+# let rect_stack  = &Rectangle {origin: Point {x: 1f, y: 2f}, size: Size {w: 3f, h: 4f}};\n+# let rect_managed = @Rectangle {origin: Point {x: 3f, y: 4f}, size: Size {w: 3f, h: 4f}};\n+# let rect_unique = ~Rectangle {origin: Point {x: 5f, y: 6f}, size: Size {w: 3f, h: 4f}};\n # fn compute_distance(p1: &Point, p2: &Point) -> float { 0f }\n compute_distance(&rect_stack.origin, &rect_managed.origin);\n ~~~\n@@ -274,13 +274,14 @@ the following function is legal:\n \n ~~~\n # fn some_condition() -> bool { true }\n+# struct Foo { f: int }\n fn example3() -> int {\n-    let mut x = ~{f: 3};\n+    let mut x = ~Foo {f: 3};\n     if some_condition() {\n         let y = &x.f;      // -+ L\n         return *y;         //  |\n     }                      // -+\n-    x = ~{f: 4};\n+    x = ~Foo {f: 4};\n     ...\n # return 0;\n }"}, {"sha": "7197de36404ede7c1cec124b8b5c1d58700921fe", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -62,17 +62,17 @@ pub struct DVec<A> {\n \n /// Creates a new, empty dvec\n pub pure fn DVec<A>() -> DVec<A> {\n-    DVec {mut data: ~[]}\n+    DVec {data: ~[]}\n }\n \n /// Creates a new dvec with a single element\n pub pure fn from_elem<A>(e: A) -> DVec<A> {\n-    DVec {mut data: ~[e]}\n+    DVec {data: ~[e]}\n }\n \n /// Creates a new dvec with the contents of a vector\n pub pure fn from_vec<A>(v: ~[A]) -> DVec<A> {\n-    DVec {mut data: v}\n+    DVec {data: v}\n }\n \n /// Consumes the vector and returns its contents"}, {"sha": "09588f3280de0590e78b9f761fb8cc1db6b28af9", "filename": "src/libcore/os.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -322,8 +322,8 @@ pub struct Pipe { mut in: c_int, mut out: c_int }\n #[cfg(unix)]\n pub fn pipe() -> Pipe {\n     unsafe {\n-        let mut fds = Pipe {mut in: 0 as c_int,\n-                        mut out: 0 as c_int };\n+        let mut fds = Pipe {in: 0 as c_int,\n+                        out: 0 as c_int };\n         assert (libc::pipe(&mut fds.in) == (0 as c_int));\n         return Pipe {in: fds.in, out: fds.out};\n     }\n@@ -339,8 +339,8 @@ pub fn pipe() -> Pipe {\n         // fully understand. Here we explicitly make the pipe non-inheritable,\n         // which means to pass it to a subprocess they need to be duplicated\n         // first, as in rust_run_program.\n-        let mut fds = Pipe { mut in: 0 as c_int,\n-                    mut out: 0 as c_int };\n+        let mut fds = Pipe {in: 0 as c_int,\n+                    out: 0 as c_int };\n         let res = libc::pipe(&mut fds.in, 1024 as c_uint,\n                              (libc::O_BINARY | libc::O_NOINHERIT) as c_int);\n         assert (res == 0 as c_int);\n@@ -566,13 +566,17 @@ pub fn path_exists(p: &Path) -> bool {\n  *\n  * If the given path is relative, return it prepended with the current working\n  * directory. If the given path is already an absolute path, return it\n- * as is.  This is a shortcut for calling os::getcwd().unsafe_join(p)\n+ * as is.\n  */\n // NB: this is here rather than in path because it is a form of environment\n // querying; what it does depends on the process working directory, not just\n // the input paths.\n pub fn make_absolute(p: &Path) -> Path {\n-    getcwd().unsafe_join(p)\n+    if p.is_absolute {\n+        copy *p\n+    } else {\n+        getcwd().push_many(p.components)\n+    }\n }\n \n "}, {"sha": "ca5f667113028a011a3506875e2f25cce61a864c", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -300,15 +300,15 @@ impl<T:Ord> Ord for &const T {\n pub fn test() {\n     unsafe {\n         struct Pair {mut fst: int, mut snd: int};\n-        let mut p = Pair {mut fst: 10, mut snd: 20};\n+        let mut p = Pair {fst: 10, snd: 20};\n         let pptr: *mut Pair = &mut p;\n         let iptr: *mut int = cast::reinterpret_cast(&pptr);\n         assert (*iptr == 10);;\n         *iptr = 30;\n         assert (*iptr == 30);\n         assert (p.fst == 30);;\n \n-        *pptr = Pair {mut fst: 50, mut snd: 60};\n+        *pptr = Pair {fst: 50, snd: 60};\n         assert (*iptr == 50);\n         assert (p.fst == 50);\n         assert (p.snd == 60);"}, {"sha": "cbe0580a6096855af009a24f01b25c137938df0d", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -219,7 +219,7 @@ pub mod reader {\n     }\n \n     pub fn Decoder(d: Doc) -> Decoder {\n-        Decoder { mut parent: d, mut pos: d.start }\n+        Decoder { parent: d, pos: d.start }\n     }\n \n     priv impl Decoder {"}, {"sha": "51ff69da98dc600cd956e176417151d76e053bf1", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -87,7 +87,7 @@ enum Sem<Q> = Exclusive<SemInner<Q>>;\n #[doc(hidden)]\n fn new_sem<Q:Owned>(count: int, q: Q) -> Sem<Q> {\n     Sem(exclusive(SemInner {\n-        mut count: count, waiters: new_waitqueue(), blocked: q }))\n+        count: count, waiters: new_waitqueue(), blocked: q }))\n }\n #[doc(hidden)]\n fn new_sem_and_signal(count: int, num_condvars: uint)"}, {"sha": "444f1201fc3234afa24b3d4ea88b82c0c6b85fde", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -1093,15 +1093,10 @@ pub impl Parser {\n                 self.mk_expr(lo, hi, expr_tup(es))\n             }\n         } else if *self.token == token::LBRACE {\n-            if self.looking_at_record_literal() {\n-                ex = self.parse_record_literal();\n-                hi = self.span.hi;\n-            } else {\n-                self.bump();\n-                let blk = self.parse_block_tail(lo, default_blk);\n-                return self.mk_expr(blk.span.lo, blk.span.hi,\n-                                     expr_block(blk));\n-            }\n+            self.bump();\n+            let blk = self.parse_block_tail(lo, default_blk);\n+            return self.mk_expr(blk.span.lo, blk.span.hi,\n+                                 expr_block(blk));\n         } else if token::is_bar(*self.token) {\n             return self.parse_lambda_expr();\n         } else if self.eat_keyword(~\"if\") {\n@@ -1223,6 +1218,7 @@ pub impl Parser {\n                     self.bump();\n                     let mut fields = ~[];\n                     let mut base = None;\n+\n                     fields.push(self.parse_field(token::COLON));\n                     while *self.token != token::RBRACE {\n                         if self.try_parse_obsolete_with() {"}, {"sha": "ac21e27bb8b1afadb83b54b062a578b00cf9f54d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1213,7 +1213,7 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n                 print_expr(s, expr);\n                 end(s);\n             }\n-            _ => word(s.s, ~\",\")\n+            _ => (word(s.s, ~\",\"))\n         }\n         word(s.s, ~\"}\");\n       }"}, {"sha": "cbbf484ad557047ca071fc664ef13f29dde812d6", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -9,18 +9,23 @@\n // except according to those terms.\n \n // error-pattern: mismatched types\n-type clam = {x: @int, y: @int};\n+struct clam {\n+    x: @int,\n+    y: @int,\n+}\n \n-type fish = {a: @int};\n+struct fish {\n+    a: @int,\n+}\n \n fn main() {\n-    let a: clam = {x: @1, y: @2};\n-    let b: clam = {x: @10, y: @20};\n+    let a: clam = clam{x: @1, y: @2};\n+    let b: clam = clam{x: @10, y: @20};\n     let z: int = a.x + b.y;\n     log(debug, z);\n     assert (z == 21);\n-    let forty: fish = {a: @40};\n-    let two: fish = {a: @2};\n+    let forty: fish = fish{a: @40};\n+    let two: fish = fish{a: @2};\n     let answer: int = forty.a + two.a;\n     log(debug, answer);\n     assert (answer == 42);"}, {"sha": "3707dc923c8c19ca1b2b029581e8d1058712c77f", "filename": "src/test/compile-fail/bad-record-pat-2.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:did not expect a record with a field `q`\n-\n-fn main() { match {x: 1, y: 2} { {x: x, q: q} => { } } }"}, {"sha": "a7ce8e2ef5c79f030571c12695982b074f4a0dbc", "filename": "src/test/compile-fail/bad-record-pat.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fbad-record-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fbad-record-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-record-pat.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:expected a record with 2 fields, found one with 1\n-\n-fn main() { match {x: 1, y: 2} { {x: x} => { } } }"}, {"sha": "3e560c8eaf6eb57c7f83335ff7c5f52b56f52d77", "filename": "src/test/compile-fail/binop-add-tup-assign.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup-assign.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:+ cannot be applied to type `{x: bool}`\n-\n-fn main() { let x = {x: true}; x += {x: false}; }"}, {"sha": "660e951c84732dadd72b039e594513823bcf5e4c", "filename": "src/test/compile-fail/binop-add-tup.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:+ cannot be applied to type `{x: bool}`\n-\n-fn main() { let x = {x: true} + {x: false}; }"}, {"sha": "b3154c9742aca6e933c0cf05d71cef2af8f0b62f", "filename": "src/test/compile-fail/break-outside-loop.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -9,9 +9,14 @@\n // except according to those terms.\n \n // error-pattern:`break` outside of loop\n+\n+struct Foo {\n+    t: ~str\n+}\n+\n fn main() {\n     let pth = break;\n \n-    let rs: {t: ~str} = {t: pth};\n+    let rs: Foo = Foo{t: pth};\n \n }"}, {"sha": "64d76d6fb7445963ed1f40e1c33f579aa193396a", "filename": "src/test/compile-fail/fru-extra-field.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Ffru-extra-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Ffru-extra-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffru-extra-field.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,21 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern: record\n-\n-type point = {x: int, y: int};\n-\n-fn main() {\n-    let origin: point = {x: 0, y: 0};\n-\n-    let origin3d: point = {z: 0,.. origin};\n-}"}, {"sha": "9bd9db207799317462030f083e7daacebf159a48", "filename": "src/test/compile-fail/let-destruct-refutable.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Flet-destruct-refutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Flet-destruct-refutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flet-destruct-refutable.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:refutable pattern\n-// error-pattern:refutable pattern\n-\n-enum xx { xx(int), yy, }\n-\n-fn main() {\n-    let @{x: xx(x), y: y} = @{x: xx(10), y: 20};\n-    assert (x + y == 30);\n-\n-    let [a, b] = ~[1, 2];\n-}"}, {"sha": "d84775d02ac6463de6b60bc4ad8126913458d317", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,6 +10,10 @@\n \n // error-pattern:non-scalar cast\n \n+struct foo {\n+    x:int\n+}\n+\n fn main() {\n-  log(debug, { x: 1 } as int);\n+    log(debug, foo{ x: 1 } as int);\n }"}, {"sha": "962201aa9b966f8a1d09b2a3b1cff6f24fd2a24f", "filename": "src/test/compile-fail/rec-expected.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Frec-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Frec-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-expected.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-type foo = {a: int};\n-type bar = {b: int};\n-\n-fn want_foo(f: foo) {}\n-fn have_bar(b: bar) {\n-    want_foo(b); //~ ERROR expected a record with field `a`\n-}\n-\n-fn main() {}"}, {"sha": "aa4f9d0501a2aa641caa6a71c62c83fb15645d12", "filename": "src/test/compile-fail/rec-extend.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Frec-extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Frec-extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-extend.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:expected `int` but found `bool`\n-\n-fn main() {\n-\n-    let a = {foo: 0i};\n-\n-    let b = {foo: true,.. a};\n-}"}, {"sha": "2ad2f00ee266f180c2c210507ef87147724d6e65", "filename": "src/test/compile-fail/rec-missing-fields.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Frec-missing-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Frec-missing-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-missing-fields.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,19 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern: mismatched types\n-\n-// Issue #51.\n-\n-type point = {x: int, y: int};\n-\n-fn main() { let p: point = {x: 10}; log(debug, p.y); }"}, {"sha": "3b2591c3bfab6505f4b1f119eb9ecb48fb332243", "filename": "src/test/compile-fail/writing-through-read-alias.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fwriting-through-read-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fwriting-through-read-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-through-read-alias.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,19 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern:assigning to immutable field\n-\n-type point = {x: int, y: int, z: int};\n-\n-fn f(p: point) { p.x = 13; }\n-\n-fn main() { let x: point = {x: 10, y: 11, z: 12}; f(x); }"}, {"sha": "4cc9dae7debface52b2caf6b0d8c79b03b5ed76b", "filename": "src/test/compile-fail/writing-to-immutable-rec.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-rec.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,12 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: assigning to immutable field\n-fn main() { let r: {x: int} = {x: 1}; r.x = 6; }"}, {"sha": "e5107ba187cbb3cfea313372e4eb18e6c58d528b", "filename": "src/test/run-pass/lint-structural-records.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Frun-pass%2Flint-structural-records.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd1b58f236b4fe653d164836e94feebb2972931/src%2Ftest%2Frun-pass%2Flint-structural-records.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-structural-records.rs?ref=0fd1b58f236b4fe653d164836e94feebb2972931", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[warn(structural_records)];\n-pub fn main() {\n-    let _foo = {x:5};\n-}"}, {"sha": "def49ef0f8c3395be5f266a35ec8fdb0f54bcf4e", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bc9ea26df56b29f74583317ab080fdc7b99757/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=95bc9ea26df56b29f74583317ab080fdc7b99757", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -24,7 +24,7 @@ fn make_uniq_closure<A:Owned + Copy>(a: A) -> fn~() -> uint {\n \n fn empty_pointy() -> @mut Pointy {\n     return @mut Pointy {\n-        mut a : none,\n+        a : none,\n         d : make_uniq_closure(~\"hi\")\n     }\n }"}]}