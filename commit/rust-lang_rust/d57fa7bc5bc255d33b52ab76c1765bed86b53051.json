{"sha": "d57fa7bc5bc255d33b52ab76c1765bed86b53051", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1N2ZhN2JjNWJjMjU1ZDMzYjUyYWI3NmMxNzY1YmVkODZiNTMwNTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-10T15:49:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-10T15:49:47Z"}, "message": "Merge pull request #450 from Manishearth/mir_float_cmp\n\nuse rustc's eval_const, bail on (negative) infinity", "tree": {"sha": "23abde616985ecbe2468691eec83e236e3a05bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23abde616985ecbe2468691eec83e236e3a05bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d57fa7bc5bc255d33b52ab76c1765bed86b53051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d57fa7bc5bc255d33b52ab76c1765bed86b53051", "html_url": "https://github.com/rust-lang/rust/commit/d57fa7bc5bc255d33b52ab76c1765bed86b53051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d57fa7bc5bc255d33b52ab76c1765bed86b53051/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a66c0f28eadfc964ee630eb9e7b20ed5c8d113", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a66c0f28eadfc964ee630eb9e7b20ed5c8d113", "html_url": "https://github.com/rust-lang/rust/commit/f3a66c0f28eadfc964ee630eb9e7b20ed5c8d113"}, {"sha": "42ae1e69182577aa33a378e82362ca78be458bd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/42ae1e69182577aa33a378e82362ca78be458bd2", "html_url": "https://github.com/rust-lang/rust/commit/42ae1e69182577aa33a378e82362ca78be458bd2"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "85fd03079fe2d919a3d8d2c0eba763fd9728473e", "filename": "src/misc.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d57fa7bc5bc255d33b52ab76c1765bed86b53051/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d57fa7bc5bc255d33b52ab76c1765bed86b53051/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=d57fa7bc5bc255d33b52ab76c1765bed86b53051", "patch": "@@ -6,10 +6,12 @@ use rustc_front::util::{is_comparison_binop, binop_to_string};\n use syntax::codemap::{Span, Spanned};\n use rustc_front::visit::FnKind;\n use rustc::middle::ty;\n+use rustc::middle::const_eval::ConstVal::Float;\n+use rustc::middle::const_eval::eval_const_expr_partial;\n+use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n \n use utils::{get_item_name, match_path, snippet, span_lint, walk_ptrs_ty, is_integer_literal};\n use utils::span_help_and_lint;\n-use consts::constant;\n \n declare_lint!(pub TOPLEVEL_REF_ARG, Warn,\n               \"An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), \\\n@@ -119,10 +121,7 @@ impl LateLintPass for FloatCmp {\n         if let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n             let op = cmp.node;\n             if (op == BiEq || op == BiNe) && (is_float(cx, left) || is_float(cx, right)) {\n-                if constant(cx, left).or_else(|| constant(cx, right)).map_or(\n-                        false, |c| c.0.as_float().map_or(false, |f| f == 0.0)) {\n-                    return;\n-                }\n+                if is_allowed(cx, left) || is_allowed(cx, right) { return; }\n                 if let Some(name) = get_item_name(cx, expr) {\n                     let name = name.as_str();\n                     if name == \"eq\" || name == \"ne\" || name == \"is_nan\" ||\n@@ -141,6 +140,13 @@ impl LateLintPass for FloatCmp {\n     }\n }\n \n+fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n+    let res = eval_const_expr_partial(cx.tcx, expr, ExprTypeChecked, None);\n+    if let Ok(Float(val)) = res {\n+        val == 0.0 || val == ::std::f64::INFINITY || val == ::std::f64::NEG_INFINITY\n+    } else { false }\n+}\n+\n fn is_float(cx: &LateContext, expr: &Expr) -> bool {\n     if let ty::TyFloat(_) = walk_ptrs_ty(cx.tcx.expr_ty(expr)).sty {\n         true"}, {"sha": "27cde245f686a47c9c94603ddc09342827c181a8", "filename": "tests/compile-fail/float_cmp.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d57fa7bc5bc255d33b52ab76c1765bed86b53051/tests%2Fcompile-fail%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d57fa7bc5bc255d33b52ab76c1765bed86b53051/tests%2Fcompile-fail%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffloat_cmp.rs?ref=d57fa7bc5bc255d33b52ab76c1765bed86b53051", "patch": "@@ -35,8 +35,10 @@ impl PartialEq for X {\n \n fn main() {\n     ZERO == 0f32; //no error, comparison with zero is ok\n+    1.0f32 != ::std::f32::INFINITY; // also comparison with infinity\n+    1.0f32 != ::std::f32::NEG_INFINITY; // and negative infinity\n     ZERO == 0.0; //no error, comparison with zero is ok\n-    ZERO + ZERO != 1.0; //~ERROR !=-comparison of f32 or f64\n+    ZERO + ZERO != 1.0; //no error, comparison with zero is ok\n \n     ONE == 1f32; //~ERROR ==-comparison of f32 or f64\n     ONE == (1.0 + 0.0); //~ERROR ==-comparison of f32 or f64"}]}