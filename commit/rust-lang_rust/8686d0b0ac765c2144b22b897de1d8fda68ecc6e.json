{"sha": "8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ODZkMGIwYWM3NjVjMjE0NGIyMmI4OTdkZTFkOGZkYTY4ZWNjNmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-25T12:29:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-25T12:29:47Z"}, "message": "Merge #4607\n\n4607: Less rust-analyzer specific onEnter r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8cf69f49502a9f2b08d2d2975be79f54f9a04ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf69f49502a9f2b08d2d2975be79f54f9a04ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJey7o7CRBK7hj4Ov3rIwAAdHIIAApegYV2mKpcZNrm2MAfygHk\n93S98AddH6v5sIilXQm29Q1omjahn6+W/JANbzw5ogWf5g0CCcRbNQXI2w3x9Ifx\nEMWw831v2Czu0/8INhMvjZIdNiyF1p3FmwNEBBDxNwJQx1JjMsZ4SjpQgRiVljPq\n79OvnWIwvVVA9DQ/OvrenyPdPE7EHqKrC3HEXIsIXzDLZgiQTXk3498HwkRjSthT\nGCnMd/3+QhGcLqo4p4fAf5tJD2Kt4JbtfS3SKDAYeU6qBDvaLXBaAGk07dvLRsDd\nnalI4CzyGMPTkR/pFUuMXwmmoF283kY6Kex7IKbKCsYC2Xwcq8QSoPGpbuliuFc=\n=Nwvo\n-----END PGP SIGNATURE-----\n", "payload": "tree 8cf69f49502a9f2b08d2d2975be79f54f9a04ccb\nparent e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6\nparent 76e170c3d0d0784c0e612c5849798c65a2034f29\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590409787 +0000\ncommitter GitHub <noreply@github.com> 1590409787 +0000\n\nMerge #4607\n\n4607: Less rust-analyzer specific onEnter r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "html_url": "https://github.com/rust-lang/rust/commit/8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6", "html_url": "https://github.com/rust-lang/rust/commit/e4f91bfa578e57c1ef4be3343ebb4e8950e5dae6"}, {"sha": "76e170c3d0d0784c0e612c5849798c65a2034f29", "url": "https://api.github.com/repos/rust-lang/rust/commits/76e170c3d0d0784c0e612c5849798c65a2034f29", "html_url": "https://github.com/rust-lang/rust/commit/76e170c3d0d0784c0e612c5849798c65a2034f29"}], "stats": {"total": 160, "additions": 105, "deletions": 55}, "files": [{"sha": "d983cd91002370d624177e9634c2da1cc2f1a968", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -309,7 +309,8 @@ impl Analysis {\n \n     /// Returns an edit which should be applied when opening a new line, fixing\n     /// up minor stuff like continuing the comment.\n-    pub fn on_enter(&self, position: FilePosition) -> Cancelable<Option<SourceChange>> {\n+    /// The edit will be a snippet (with `$0`).\n+    pub fn on_enter(&self, position: FilePosition) -> Cancelable<Option<TextEdit>> {\n         self.with_db(|db| typing::on_enter(&db, position))\n     }\n "}, {"sha": "a40d8af9c43de32e0d98fcc3154f6090dbe360a2", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -11,9 +11,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEdit;\n \n-use crate::{SourceChange, SourceFileEdit};\n-\n-pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n+pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<TextEdit> {\n     let parse = db.parse(position.file_id);\n     let file = parse.tree();\n     let comment = file\n@@ -41,9 +39,7 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n     let inserted = format!(\"\\n{}{} $0\", indent, prefix);\n     let edit = TextEdit::insert(position.offset, inserted);\n \n-    let mut res = SourceChange::from(SourceFileEdit { edit, file_id: position.file_id });\n-    res.is_snippet = true;\n-    Some(res)\n+    Some(edit)\n }\n \n fn followed_by_comment(comment: &ast::Comment) -> bool {\n@@ -90,9 +86,8 @@ mod tests {\n         let (analysis, file_id) = single_file(&before);\n         let result = analysis.on_enter(FilePosition { offset, file_id }).unwrap()?;\n \n-        assert_eq!(result.source_file_edits.len(), 1);\n         let mut actual = before.to_string();\n-        result.source_file_edits[0].edit.apply(&mut actual);\n+        result.apply(&mut actual);\n         Some(actual)\n     }\n "}, {"sha": "d55cbb15fe88808983565407d140b7c0b83f60bd", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -85,6 +85,7 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n         experimental: Some(json!({\n             \"joinLines\": true,\n             \"ssr\": true,\n+            \"onEnter\": true,\n         })),\n     }\n }"}, {"sha": "1cce1baa4552a8852d51ed467d8b3a9ba970b5dc", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -102,8 +102,8 @@ pub enum OnEnter {}\n \n impl Request for OnEnter {\n     type Params = lsp_types::TextDocumentPositionParams;\n-    type Result = Option<SnippetWorkspaceEdit>;\n-    const METHOD: &'static str = \"rust-analyzer/onEnter\";\n+    type Result = Option<Vec<SnippetTextEdit>>;\n+    const METHOD: &'static str = \"experimental/onEnter\";\n }\n \n pub enum Runnables {}"}, {"sha": "a13a0e1f523b37099ae8d74c2a665ca1719fac3d", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -174,13 +174,17 @@ pub fn handle_join_lines(\n pub fn handle_on_enter(\n     world: WorldSnapshot,\n     params: lsp_types::TextDocumentPositionParams,\n-) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n+) -> Result<Option<Vec<lsp_ext::SnippetTextEdit>>> {\n     let _p = profile(\"handle_on_enter\");\n     let position = from_proto::file_position(&world, params)?;\n-    match world.analysis().on_enter(position)? {\n-        None => Ok(None),\n-        Some(source_change) => to_proto::snippet_workspace_edit(&world, source_change).map(Some),\n-    }\n+    let edit = match world.analysis().on_enter(position)? {\n+        None => return Ok(None),\n+        Some(it) => it,\n+    };\n+    let line_index = world.analysis().file_line_index(position.file_id)?;\n+    let line_endings = world.file_line_endings(position.file_id);\n+    let edit = to_proto::snippet_text_edit_vec(&line_index, line_endings, true, edit);\n+    Ok(Some(edit))\n }\n \n // Don't forget to add new trigger characters to `ServerCapabilities` in `caps.rs`."}, {"sha": "39d58f1e01bded19eeb8fb4549417e485341e556", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -135,6 +135,18 @@ pub(crate) fn text_edit_vec(\n     text_edit.into_iter().map(|indel| self::text_edit(line_index, line_endings, indel)).collect()\n }\n \n+pub(crate) fn snippet_text_edit_vec(\n+    line_index: &LineIndex,\n+    line_endings: LineEndings,\n+    is_snippet: bool,\n+    text_edit: TextEdit,\n+) -> Vec<lsp_ext::SnippetTextEdit> {\n+    text_edit\n+        .into_iter()\n+        .map(|indel| self::snippet_text_edit(line_index, line_endings, is_snippet, indel))\n+        .collect()\n+}\n+\n pub(crate) fn completion_item(\n     line_index: &LineIndex,\n     line_endings: LineEndings,"}, {"sha": "b1bfc968a8dc3272e7560f8b91b6fd2764a2cd7b", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -473,23 +473,14 @@ fn main() {{}}\n             text_document: server.doc_id(\"src/m0.rs\"),\n             position: Position { line: 0, character: 5 },\n         },\n-        json!({\n-          \"documentChanges\": [\n-            {\n-              \"edits\": [\n-                {\n-                  \"insertTextFormat\": 2,\n-                  \"newText\": \"\\n/// $0\",\n-                  \"range\": {\n-                    \"end\": { \"character\": 5, \"line\": 0 },\n-                    \"start\": { \"character\": 5, \"line\": 0 }\n-                  }\n-                }\n-              ],\n-              \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\", \"version\": null }\n+        json!([{\n+            \"insertTextFormat\": 2,\n+            \"newText\": \"\\n/// $0\",\n+            \"range\": {\n+            \"end\": { \"character\": 5, \"line\": 0 },\n+            \"start\": { \"character\": 5, \"line\": 0 }\n             }\n-          ]\n-        }),\n+        }]),\n     );\n     let elapsed = start.elapsed();\n     assert!(elapsed.as_millis() < 2000, \"typing enter took {:?}\", elapsed);\n@@ -519,23 +510,14 @@ version = \\\"0.0.0\\\"\n             text_document: server.doc_id(\"src/main.rs\"),\n             position: Position { line: 0, character: 8 },\n         },\n-        json!({\n-          \"documentChanges\": [\n-            {\n-              \"edits\": [\n-                {\n-                  \"insertTextFormat\": 2,\n-                  \"newText\": \"\\r\\n/// $0\",\n-                  \"range\": {\n-                    \"end\": { \"line\": 0, \"character\": 8 },\n-                    \"start\": { \"line\": 0, \"character\": 8 }\n-                  }\n-                }\n-              ],\n-              \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\", \"version\": null }\n+        json!([{\n+            \"insertTextFormat\": 2,\n+            \"newText\": \"\\r\\n/// $0\",\n+            \"range\": {\n+            \"end\": { \"line\": 0, \"character\": 8 },\n+            \"start\": { \"line\": 0, \"character\": 8 }\n             }\n-          ]\n-        }),\n+        }]),\n     );\n }\n "}, {"sha": "e4b9fb2c25e0f38002942b8264a548d5ec3fec53", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -138,6 +138,59 @@ fn main() {\n   Currently this is left to editor's discretion, but it might be useful to specify on the server via snippets.\n   However, it then becomes unclear how it works with multi cursor.\n \n+## On Enter\n+\n+**Issue:** https://github.com/microsoft/language-server-protocol/issues/1001\n+\n+**Server Capability:** `{ \"onEnter\": boolean }`\n+\n+This request is send from client to server to handle <kbd>Enter</kbd> keypress.\n+\n+**Method:** `experimental/onEnter`\n+\n+**Request:**: `TextDocumentPositionParams`\n+\n+**Response:**\n+\n+```typescript\n+SnippetTextEdit[]\n+```\n+\n+### Example\n+\n+```rust\n+fn main() {\n+    // Some /*cursor here*/ docs\n+    let x = 92;\n+}\n+```\n+\n+`experimental/onEnter` returns the following snippet\n+\n+```rust\n+fn main() {\n+    // Some\n+    // $0 docs\n+    let x = 92;\n+}\n+```\n+\n+The primary goal of `onEnter` is to handle automatic indentation when opening a new line.\n+This is not yet implemented.\n+The secondary goal is to handle fixing up syntax, like continuing doc strings and comments, and escaping `\\n` in string literals.\n+\n+As proper cursor positioning is raison-d'etat for `onEnter`, it uses `SnippetTextEdit`.\n+\n+### Unresolved Question\n+\n+* How to deal with synchronicity of the request?\n+  One option is to require the client to block until the server returns the response.\n+  Another option is to do a OT-style merging of edits from client and server.\n+  A third option is to do a record-replay: client applies heuristic on enter immediatelly, then applies all user's keypresses.\n+  When the server is ready with the response, the client rollbacks all the changes and applies the recorded actions on top of the correct response.\n+* How to deal with multiple carets?\n+* Should we extend this to arbitrary typed events and not just `onEnter`?\n+\n ## Structural Search Replace (SSR)\n \n **Server Capability:** `{ \"ssr\": boolean }`"}, {"sha": "e080301405dd85cf678358bb2dc5755b9b36380d", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -3,7 +3,7 @@ import * as lc from 'vscode-languageclient';\n import * as ra from './rust-analyzer-api';\n \n import { Ctx, Cmd } from './ctx';\n-import { applySnippetWorkspaceEdit } from './snippets';\n+import { applySnippetWorkspaceEdit, applySnippetTextEdits } from './snippets';\n import { spawnSync } from 'child_process';\n import { RunnableQuickPick, selectRunnable, createTask } from './run';\n import { AstInspector } from './ast_inspector';\n@@ -102,7 +102,7 @@ export function onEnter(ctx: Ctx): Cmd {\n \n         if (!editor || !client) return false;\n \n-        const change = await client.sendRequest(ra.onEnter, {\n+        const lcEdits = await client.sendRequest(ra.onEnter, {\n             textDocument: { uri: editor.document.uri.toString() },\n             position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n@@ -111,10 +111,10 @@ export function onEnter(ctx: Ctx): Cmd {\n             // client.logFailedRequest(OnEnterRequest.type, error);\n             return null;\n         });\n-        if (!change) return false;\n+        if (!lcEdits) return false;\n \n-        const workspaceEdit = client.protocol2CodeConverter.asWorkspaceEdit(change);\n-        await applySnippetWorkspaceEdit(workspaceEdit);\n+        const edits = client.protocol2CodeConverter.asTextEdits(lcEdits);\n+        await applySnippetTextEdits(editor, edits);\n         return true;\n     }\n "}, {"sha": "c10c0fa78942225f5f95feddac9e4f243c33697b", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -67,8 +67,7 @@ export interface JoinLinesParams {\n }\n export const joinLines = new lc.RequestType<JoinLinesParams, lc.TextEdit[], unknown>('experimental/joinLines');\n \n-\n-export const onEnter = request<lc.TextDocumentPositionParams, Option<lc.WorkspaceEdit>>(\"onEnter\");\n+export const onEnter = new lc.RequestType<lc.TextDocumentPositionParams, lc.TextEdit[], unknown>('experimental/onEnter');\n \n export interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;"}, {"sha": "bcb3f2cc76135346814e1315450fffc661fa4574", "filename": "editors/code/src/snippets.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/editors%2Fcode%2Fsrc%2Fsnippets.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/editors%2Fcode%2Fsrc%2Fsnippets.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsnippets.ts?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -8,7 +8,10 @@ export async function applySnippetWorkspaceEdit(edit: vscode.WorkspaceEdit) {\n \n     const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n     if (!editor) return;\n+    await applySnippetTextEdits(editor, edits);\n+}\n \n+export async function applySnippetTextEdits(editor: vscode.TextEditor, edits: vscode.TextEdit[]) {\n     let selection: vscode.Selection | undefined = undefined;\n     let lineDelta = 0;\n     await editor.edit((builder) => {"}]}