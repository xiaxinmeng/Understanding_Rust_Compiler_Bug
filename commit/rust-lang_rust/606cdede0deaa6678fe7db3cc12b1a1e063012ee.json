{"sha": "606cdede0deaa6678fe7db3cc12b1a1e063012ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNmNkZWRlMGRlYWE2Njc4ZmU3ZGIzY2MxMmIxYTFlMDYzMDEyZWU=", "commit": {"author": {"name": "Eugene Bulkin", "email": "ebulkin@caltech.edu", "date": "2016-09-14T00:21:54Z"}, "committer": {"name": "Eugene Bulkin", "email": "ebulkin@caltech.edu", "date": "2016-09-14T00:21:54Z"}, "message": "Add checked operation methods to Duration", "tree": {"sha": "0be0f91c6aacaa9e2a484d7c3e9696bd3fd3019e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0be0f91c6aacaa9e2a484d7c3e9696bd3fd3019e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/606cdede0deaa6678fe7db3cc12b1a1e063012ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/606cdede0deaa6678fe7db3cc12b1a1e063012ee", "html_url": "https://github.com/rust-lang/rust/commit/606cdede0deaa6678fe7db3cc12b1a1e063012ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/606cdede0deaa6678fe7db3cc12b1a1e063012ee/comments", "author": null, "committer": null, "parents": [{"sha": "1fca1ab0e7be574022b2d229f0a6ad9bd580d1bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fca1ab0e7be574022b2d229f0a6ad9bd580d1bf", "html_url": "https://github.com/rust-lang/rust/commit/1fca1ab0e7be574022b2d229f0a6ad9bd580d1bf"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "12e580fe80184dc45c9c02ce88d486cfa244f4a2", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/606cdede0deaa6678fe7db3cc12b1a1e063012ee/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606cdede0deaa6678fe7db3cc12b1a1e063012ee/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=606cdede0deaa6678fe7db3cc12b1a1e063012ee", "patch": "@@ -97,6 +97,130 @@ impl Duration {\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     pub fn subsec_nanos(&self) -> u32 { self.nanos }\n+\n+    /// Checked duration addition. Computes `self + other`, returning `None`\n+    /// if overflow occurred.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)), Some(Duration::new(0, 1)));\n+    /// assert_eq!(Duration::new(1, 0).checked_add(Duration::new(::u64::MAX, 0)), None);\n+    /// ```\n+    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[inline]\n+    pub fn checked_add(self, rhs: Duration) -> Option<Duration> {\n+        if let Some(mut secs) = self.secs.checked_add(rhs.secs) {\n+            let mut nanos = self.nanos + rhs.nanos;\n+            if nanos >= NANOS_PER_SEC {\n+                nanos -= NANOS_PER_SEC;\n+                if let Some(new_secs) = secs.checked_add(1) {\n+                    secs = new_secs;\n+                } else {\n+                    return None;\n+                }\n+            }\n+            debug_assert!(nanos < NANOS_PER_SEC);\n+            Some(Duration {\n+                secs: secs,\n+                nanos: nanos,\n+            })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Checked duration subtraction. Computes `self + other`, returning `None`\n+    /// if the result would be negative or if underflow occurred.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// assert_eq!(Duration::new(0, 1).checked_sub(Duration::new(0, 0)), Some(Duration::new(0, 1)));\n+    /// assert_eq!(Duration::new(0, 0).checked_sub(Duration::new(0, 1)), None);\n+    /// ```\n+    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[inline]\n+    pub fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n+        if let Some(mut secs) = self.secs.checked_sub(rhs.secs) {\n+            let nanos = if self.nanos >= rhs.nanos {\n+                self.nanos - rhs.nanos\n+            } else {\n+                if let Some(sub_secs) = secs.checked_sub(1) {\n+                    secs = sub_secs;\n+                    self.nanos + NANOS_PER_SEC - rhs.nanos\n+                } else {\n+                    return None;\n+                }\n+            };\n+            debug_assert!(nanos < NANOS_PER_SEC);\n+            Some(Duration { secs: secs, nanos: nanos })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Checked integer multiplication. Computes `self * other`, returning\n+    /// `None` if underflow or overflow occurred.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// assert_eq!(Duration::new(0, 500_000_001).checked_mul(2), Some(Duration::new(1, 2)));\n+    /// assert_eq!(Duration::new(::u64::MAX - 1, 0).checked_mul(2), None);\n+    /// ```\n+    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[inline]\n+    pub fn checked_mul(self, rhs: u32) -> Option<Duration> {\n+        // Multiply nanoseconds as u64, because it cannot overflow that way.\n+        let total_nanos = self.nanos as u64 * rhs as u64;\n+        let extra_secs = total_nanos / (NANOS_PER_SEC as u64);\n+        let nanos = (total_nanos % (NANOS_PER_SEC as u64)) as u32;\n+        if let Some(secs) = self.secs\n+            .checked_mul(rhs as u64)\n+            .and_then(|s| s.checked_add(extra_secs)) {\n+            debug_assert!(nanos < NANOS_PER_SEC);\n+            Some(Duration {\n+                secs: secs,\n+                nanos: nanos,\n+            })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Checked duration division. Computes `self / other`, returning `None`\n+    /// if `other == 0` or the operation results in underflow or overflow.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\n+    /// assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\n+    /// assert_eq!(Duration::new(2, 0).checked_div(0), None);\n+    /// ```\n+    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[inline]\n+    pub fn checked_div(self, rhs: u32) -> Option<Duration> {\n+        if rhs != 0 {\n+            let secs = self.secs / (rhs as u64);\n+            let carry = self.secs - secs * (rhs as u64);\n+            let extra_nanos = carry * (NANOS_PER_SEC as u64) / (rhs as u64);\n+            let nanos = self.nanos / rhs + (extra_nanos as u32);\n+            debug_assert!(nanos < NANOS_PER_SEC);\n+            Some(Duration { secs: secs, nanos: nanos })\n+        } else {\n+            None\n+        }\n+    }\n }\n \n #[stable(feature = \"duration\", since = \"1.3.0\")]\n@@ -234,6 +358,15 @@ mod tests {\n                    Duration::new(1, 1));\n     }\n \n+    #[test]\n+    fn checked_add() {\n+        assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)),\n+                   Some(Duration::new(0, 1)));\n+        assert_eq!(Duration::new(0, 500_000_000).checked_add(Duration::new(0, 500_000_001)),\n+                   Some(Duration::new(1, 1)));\n+        assert_eq!(Duration::new(1, 0).checked_add(Duration::new(::u64::MAX, 0)), None);\n+    }\n+\n     #[test]\n     fn sub() {\n         assert_eq!(Duration::new(0, 1) - Duration::new(0, 0),\n@@ -244,6 +377,18 @@ mod tests {\n                    Duration::new(0, 999_999_999));\n     }\n \n+    #[test]\n+    fn checked_sub() {\n+        let zero = Duration::new(0, 0);\n+        let one_nano = Duration::new(0, 1);\n+        let one_sec = Duration::new(1, 0);\n+        assert_eq!(one_nano.checked_sub(zero), Some(Duration::new(0, 1)));\n+        assert_eq!(one_sec.checked_sub(one_nano),\n+                   Some(Duration::new(0, 999_999_999)));\n+        assert_eq!(zero.checked_sub(one_nano), None);\n+        assert_eq!(zero.checked_sub(one_sec), None);\n+    }\n+\n     #[test] #[should_panic]\n     fn sub_bad1() {\n         Duration::new(0, 0) - Duration::new(0, 1);\n@@ -263,11 +408,28 @@ mod tests {\n                    Duration::new(2000, 4000));\n     }\n \n+    #[test]\n+    fn checked_mul() {\n+        assert_eq!(Duration::new(0, 1).checked_mul(2), Some(Duration::new(0, 2)));\n+        assert_eq!(Duration::new(1, 1).checked_mul(3), Some(Duration::new(3, 3)));\n+        assert_eq!(Duration::new(0, 500_000_001).checked_mul(4), Some(Duration::new(2, 4)));\n+        assert_eq!(Duration::new(0, 500_000_001).checked_mul(4000),\n+                   Some(Duration::new(2000, 4000)));\n+        assert_eq!(Duration::new(::u64::MAX - 1, 0).checked_mul(2), None);\n+    }\n+\n     #[test]\n     fn div() {\n         assert_eq!(Duration::new(0, 1) / 2, Duration::new(0, 0));\n         assert_eq!(Duration::new(1, 1) / 3, Duration::new(0, 333_333_333));\n         assert_eq!(Duration::new(99, 999_999_000) / 100,\n                    Duration::new(0, 999_999_990));\n     }\n+\n+    #[test]\n+    fn checked_div() {\n+        assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\n+        assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\n+        assert_eq!(Duration::new(2, 0).checked_div(0), None);\n+    }\n }"}]}