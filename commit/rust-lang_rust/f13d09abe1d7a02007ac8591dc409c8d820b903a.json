{"sha": "f13d09abe1d7a02007ac8591dc409c8d820b903a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxM2QwOWFiZTFkN2EwMjAwN2FjODU5MWRjNDA5YzhkODIwYjkwM2E=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T20:57:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T20:57:29Z"}, "message": "Rollup merge of #73485 - estebank:dedup-preds, r=nikomatsakis\n\nPerform obligation deduplication to avoid buggy `ExistentialMismatch`\n\nAddress #59326.", "tree": {"sha": "8aa2ee5582e3ae664badd35002a2d3599650cd76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aa2ee5582e3ae664badd35002a2d3599650cd76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f13d09abe1d7a02007ac8591dc409c8d820b903a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9mE5CRBK7hj4Ov3rIwAAdHIIAAXTeu1fXk/7n+0uFeiy8q0X\noeBIyMPFVw636wNyvCWueXOaGQ5GmHa5fGjxd6x+Cq4L7sfYCsrwNhYKr62TNIfs\nwFldk1ueDcL6zQZFmCqdaw4xcQ0xIHVFW4x5mPnnlyPS3B2rG8zhfIHEDtzqH1ja\nESueEwp/Ymwu3albqY8nprZ18Flfchl5fgP8ksXDgRus+LEjnkQLwkkZnR6W7o47\ngKyLe5vZQOLjiAc11w1e6E6pvhKwOJavnaKAXDJyz2fkD/aiHjg0R99wJCGF8jXi\nL5VtrSK0sM+2EJ+P3P1OGIsRzm2ChEwmu61jFU+CMwiKX0aK/S/RtjFDjHjZfv8=\n=upHa\n-----END PGP SIGNATURE-----\n", "payload": "tree 8aa2ee5582e3ae664badd35002a2d3599650cd76\nparent 38cbf158b8f565af3d2027f96227858cb7abbb57\nparent b7f23968cc44763b4d2c357ca0f45d33e56d2a2a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593205049 -0700\ncommitter GitHub <noreply@github.com> 1593205049 -0700\n\nRollup merge of #73485 - estebank:dedup-preds, r=nikomatsakis\n\nPerform obligation deduplication to avoid buggy `ExistentialMismatch`\n\nAddress #59326.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f13d09abe1d7a02007ac8591dc409c8d820b903a", "html_url": "https://github.com/rust-lang/rust/commit/f13d09abe1d7a02007ac8591dc409c8d820b903a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f13d09abe1d7a02007ac8591dc409c8d820b903a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38cbf158b8f565af3d2027f96227858cb7abbb57", "url": "https://api.github.com/repos/rust-lang/rust/commits/38cbf158b8f565af3d2027f96227858cb7abbb57", "html_url": "https://github.com/rust-lang/rust/commit/38cbf158b8f565af3d2027f96227858cb7abbb57"}, {"sha": "b7f23968cc44763b4d2c357ca0f45d33e56d2a2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f23968cc44763b4d2c357ca0f45d33e56d2a2a", "html_url": "https://github.com/rust-lang/rust/commit/b7f23968cc44763b4d2c357ca0f45d33e56d2a2a"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "e9a8b9095bf72d2845da10d211fef979bdf61e73", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f13d09abe1d7a02007ac8591dc409c8d820b903a/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13d09abe1d7a02007ac8591dc409c8d820b903a/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=f13d09abe1d7a02007ac8591dc409c8d820b903a", "patch": "@@ -617,12 +617,22 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n         a: &Self,\n         b: &Self,\n     ) -> RelateResult<'tcx, Self> {\n-        if a.len() != b.len() {\n+        let tcx = relation.tcx();\n+\n+        // FIXME: this is wasteful, but want to do a perf run to see how slow it is.\n+        // We need to perform this deduplication as we sometimes generate duplicate projections\n+        // in `a`.\n+        let mut a_v: Vec<_> = a.into_iter().collect();\n+        let mut b_v: Vec<_> = b.into_iter().collect();\n+        a_v.sort_by(|a, b| a.stable_cmp(tcx, b));\n+        a_v.dedup();\n+        b_v.sort_by(|a, b| a.stable_cmp(tcx, b));\n+        b_v.dedup();\n+        if a_v.len() != b_v.len() {\n             return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));\n         }\n \n-        let tcx = relation.tcx();\n-        let v = a.iter().zip(b.iter()).map(|(ep_a, ep_b)| {\n+        let v = a_v.into_iter().zip(b_v.into_iter()).map(|(ep_a, ep_b)| {\n             use crate::ty::ExistentialPredicate::*;\n             match (ep_a, ep_b) {\n                 (Trait(ref a), Trait(ref b)) => Ok(Trait(relation.relate(a, b)?)),"}, {"sha": "c0e8837749eb4ca93677ce4de379ba37354a8fd3", "filename": "src/test/ui/issues/issue-59326.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f13d09abe1d7a02007ac8591dc409c8d820b903a/src%2Ftest%2Fui%2Fissues%2Fissue-59326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13d09abe1d7a02007ac8591dc409c8d820b903a/src%2Ftest%2Fui%2Fissues%2Fissue-59326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59326.rs?ref=f13d09abe1d7a02007ac8591dc409c8d820b903a", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+trait Service {\n+    type S;\n+}\n+\n+trait Framing {\n+    type F;\n+}\n+\n+impl Framing for () {\n+    type F = ();\n+}\n+\n+trait HttpService<F: Framing>: Service<S = F::F> {}\n+\n+type BoxService = Box<dyn HttpService<(), S = ()>>;\n+\n+fn build_server<F: FnOnce() -> BoxService>(_: F) {}\n+\n+fn make_server<F: Framing>() -> Box<dyn HttpService<F, S = F::F>> {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    build_server(|| make_server())\n+}"}]}