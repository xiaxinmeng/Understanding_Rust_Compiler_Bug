{"sha": "592165fb17fb78e7aa1cfd054ddfdfe9401e92d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MjE2NWZiMTdmYjc4ZTdhYTFjZmQwNTRkZGZkZmU5NDAxZTkyZDc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-12T04:56:37Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-12T04:56:37Z"}, "message": "Fix ty::populate_implementations_for_trait_if_necessary to load the trait's impls from all the crates.", "tree": {"sha": "c7ff98c4fa7012b52f14a0abf2df87060ff0da30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7ff98c4fa7012b52f14a0abf2df87060ff0da30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7", "html_url": "https://github.com/rust-lang/rust/commit/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeb92bab5d63313455e4bfd079ce84712a1a4bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb92bab5d63313455e4bfd079ce84712a1a4bac", "html_url": "https://github.com/rust-lang/rust/commit/aeb92bab5d63313455e4bfd079ce84712a1a4bac"}], "stats": {"total": 71, "additions": 54, "deletions": 17}, "files": [{"sha": "b6202084296bb400b87ca669632d9040694354c4", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=592165fb17fb78e7aa1cfd054ddfdfe9401e92d7", "patch": "@@ -189,6 +189,7 @@ pub const tag_item_impl_vtables: usize = 0x7e;\n \n pub const tag_impls: usize = 0x109; // top-level only\n pub const tag_impls_impl: usize = 0x7f;\n+pub const tag_impls_impl_trait_def_id: usize = 0x8d;\n \n pub const tag_items_data_item_inherent_impl: usize = 0x80;\n pub const tag_items_data_item_extension_impl: usize = 0x81;"}, {"sha": "369d1aeabd41ce38a701e757f2e2485a40f45534", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=592165fb17fb78e7aa1cfd054ddfdfe9401e92d7", "patch": "@@ -324,11 +324,12 @@ pub fn each_inherent_implementation_for_type<F>(cstore: &cstore::CStore,\n \n pub fn each_implementation_for_trait<F>(cstore: &cstore::CStore,\n                                         def_id: ast::DefId,\n-                                        callback: F) where\n+                                        mut callback: F) where\n     F: FnMut(ast::DefId),\n {\n-    let cdata = cstore.get_crate_data(def_id.krate);\n-    decoder::each_implementation_for_trait(&*cdata, def_id.node, callback)\n+    cstore.iter_crate_data(|_, cdata| {\n+        decoder::each_implementation_for_trait(cdata, def_id, &mut callback)\n+    })\n }\n \n /// If the given def ID describes an item belonging to a trait (either a"}, {"sha": "4cb6e7481902f974076d0d2daf8f00d93e303e0d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=592165fb17fb78e7aa1cfd054ddfdfe9401e92d7", "patch": "@@ -1328,6 +1328,22 @@ pub fn translate_def_id(cdata: Cmd, did: ast::DefId) -> ast::DefId {\n     }\n }\n \n+// Translate a DefId from the current compilation environment to a DefId\n+// for an external crate.\n+fn reverse_translate_def_id(cdata: Cmd, did: ast::DefId) -> Option<ast::DefId> {\n+    if did.krate == cdata.cnum {\n+        return Some(ast::DefId { krate: ast::LOCAL_CRATE, node: did.node });\n+    }\n+\n+    for (&local, &global) in &cdata.cnum_map {\n+        if global == did.krate {\n+            return Some(ast::DefId { krate: local, node: did.node });\n+        }\n+    }\n+\n+    None\n+}\n+\n pub fn each_impl<F>(cdata: Cmd, mut callback: F) where\n     F: FnMut(ast::DefId),\n {\n@@ -1355,19 +1371,35 @@ pub fn each_inherent_implementation_for_type<F>(cdata: Cmd,\n }\n \n pub fn each_implementation_for_trait<F>(cdata: Cmd,\n-                                        id: ast::NodeId,\n+                                        def_id: ast::DefId,\n                                         mut callback: F) where\n     F: FnMut(ast::DefId),\n {\n-    let item_doc = lookup_item(id, cdata.data());\n+    if cdata.cnum == def_id.krate {\n+        let item_doc = lookup_item(def_id.node, cdata.data());\n+        let _ = reader::tagged_docs(item_doc,\n+                                    tag_items_data_item_extension_impl,\n+                                    |impl_doc| {\n+            callback(item_def_id(impl_doc, cdata));\n+            true\n+        });\n+        return;\n+    }\n \n-    let _ = reader::tagged_docs(item_doc,\n-                                tag_items_data_item_extension_impl,\n-                                |impl_doc| {\n-        let implementation_def_id = item_def_id(impl_doc, cdata);\n-        callback(implementation_def_id);\n-        true\n-    });\n+    // Do a reverse lookup beforehand to avoid touching the crate_num\n+    // hash map in the loop below.\n+    if let Some(crate_local_did) = reverse_translate_def_id(cdata, def_id) {\n+        let def_id_u64 = def_to_u64(crate_local_did);\n+\n+        let impls_doc = reader::get_doc(rbml::Doc::new(cdata.data()), tag_impls);\n+        let _ = reader::tagged_docs(impls_doc, tag_impls_impl, |impl_doc| {\n+            let impl_trait = reader::get_doc(impl_doc, tag_impls_impl_trait_def_id);\n+            if reader::doc_as_u64(impl_trait) == def_id_u64 {\n+                callback(item_def_id(impl_doc, cdata));\n+            }\n+            true\n+        });\n+    }\n }\n \n pub fn get_trait_of_item(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)"}, {"sha": "afc71f83975c221abe05ba7bbc15b9b38925e78e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=592165fb17fb78e7aa1cfd054ddfdfe9401e92d7", "patch": "@@ -1895,6 +1895,7 @@ impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'b, 'c, 'tcx> {\n                     def_id.krate != ast::LOCAL_CRATE {\n                 self.rbml_w.start_tag(tag_impls_impl);\n                 encode_def_id(self.rbml_w, local_def(item.id));\n+                self.rbml_w.wr_tagged_u64(tag_impls_impl_trait_def_id, def_to_u64(def_id));\n                 self.rbml_w.end_tag();\n             }\n         }"}, {"sha": "3ec400b35c95a54f07ae2164f309439237071b9b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592165fb17fb78e7aa1cfd054ddfdfe9401e92d7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=592165fb17fb78e7aa1cfd054ddfdfe9401e92d7", "patch": "@@ -2564,9 +2564,11 @@ impl<'tcx> TraitDef<'tcx> {\n                        tcx: &ctxt<'tcx>,\n                        impl_def_id: DefId,\n                        impl_trait_ref: TraitRef<'tcx>) {\n+        debug!(\"TraitDef::record_impl for {}, from {}\",\n+               self.repr(tcx), impl_trait_ref.repr(tcx));\n+\n         // We don't want to borrow_mut after we already populated all impls,\n         // so check if an impl is present with an immutable borrow first.\n-\n         if let Some(sty) = fast_reject::simplify_type(tcx,\n                                                       impl_trait_ref.self_ty(), false) {\n             if let Some(is) = self.nonblanket_impls.borrow().get(&sty) {\n@@ -6366,18 +6368,18 @@ pub fn populate_inherent_implementations_for_type_if_necessary(tcx: &ctxt,\n \n /// Populates the type context with all the implementations for the given\n /// trait if necessary.\n-pub fn populate_implementations_for_trait_if_necessary(\n-        tcx: &ctxt,\n-        trait_id: ast::DefId) {\n+pub fn populate_implementations_for_trait_if_necessary(tcx: &ctxt, trait_id: ast::DefId) {\n     if trait_id.krate == LOCAL_CRATE {\n         return\n     }\n \n     let def = lookup_trait_def(tcx, trait_id);\n     if def.flags.get().intersects(TraitFlags::IMPLS_VALID) {\n-        return\n+        return;\n     }\n \n+    debug!(\"populate_implementations_for_trait_if_necessary: searching for {}\", def.repr(tcx));\n+\n     if csearch::is_defaulted_trait(&tcx.sess.cstore, trait_id) {\n         record_trait_has_default_impl(tcx, trait_id);\n     }"}]}