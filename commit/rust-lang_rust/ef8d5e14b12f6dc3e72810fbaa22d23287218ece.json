{"sha": "ef8d5e14b12f6dc3e72810fbaa22d23287218ece", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOGQ1ZTE0YjEyZjZkYzNlNzI4MTBmYmFhMjJkMjMyODcyMThlY2U=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-27T12:52:30Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-28T10:06:17Z"}, "message": "Add missing urls for AtomicPtr", "tree": {"sha": "84e11b7c39d4f85f2ef7cef3b1ef813af82ff8df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e11b7c39d4f85f2ef7cef3b1ef813af82ff8df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef8d5e14b12f6dc3e72810fbaa22d23287218ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8d5e14b12f6dc3e72810fbaa22d23287218ece", "html_url": "https://github.com/rust-lang/rust/commit/ef8d5e14b12f6dc3e72810fbaa22d23287218ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef8d5e14b12f6dc3e72810fbaa22d23287218ece/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "html_url": "https://github.com/rust-lang/rust/commit/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "f924c9278339b0336722a1dc07ac2502edba15e7", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ef8d5e14b12f6dc3e72810fbaa22d23287218ece/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8d5e14b12f6dc3e72810fbaa22d23287218ece/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=ef8d5e14b12f6dc3e72810fbaa22d23287218ece", "patch": "@@ -619,11 +619,16 @@ impl<T> AtomicPtr<T> {\n \n     /// Loads a value from the pointer.\n     ///\n-    /// `load` takes an `Ordering` argument which describes the memory ordering of this operation.\n+    /// `load` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation.\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `order` is `Release` or `AcqRel`.\n+    /// Panics if `order` is [`Release`] or [`AcqRel`].\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     ///\n     /// # Examples\n     ///\n@@ -643,7 +648,10 @@ impl<T> AtomicPtr<T> {\n \n     /// Stores a value into the pointer.\n     ///\n-    /// `store` takes an `Ordering` argument which describes the memory ordering of this operation.\n+    /// `store` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation.\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n     ///\n     /// # Examples\n     ///\n@@ -671,7 +679,10 @@ impl<T> AtomicPtr<T> {\n \n     /// Stores a value into the pointer, returning the old value.\n     ///\n-    /// `swap` takes an `Ordering` argument which describes the memory ordering of this operation.\n+    /// `swap` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation.\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n     ///\n     /// # Examples\n     ///\n@@ -696,8 +707,10 @@ impl<T> AtomicPtr<T> {\n     /// The return value is always the previous value. If it is equal to `current`, then the value\n     /// was updated.\n     ///\n-    /// `compare_and_swap` also takes an `Ordering` argument which describes the memory ordering of\n-    /// this operation.\n+    /// `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n+    /// ordering of this operation.\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n     ///\n     /// # Examples\n     ///\n@@ -726,10 +739,15 @@ impl<T> AtomicPtr<T> {\n     /// The return value is a result indicating whether the new value was written and containing\n     /// the previous value. On success this value is guaranteed to be equal to `current`.\n     ///\n-    /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of this\n-    /// operation. The first describes the required ordering if the operation succeeds while the\n-    /// second describes the required ordering when the operation fails. The failure ordering can't\n-    /// be `Release` or `AcqRel` and must be equivalent or weaker than the success ordering.\n+    /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n+    /// ordering of this operation. The first describes the required ordering if\n+    /// the operation succeeds while the second describes the required ordering when\n+    /// the operation fails. The failure ordering can't be [`Release`] or [`AcqRel`]\n+    /// and must be equivalent or weaker than the success ordering.\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     ///\n     /// # Examples\n     ///\n@@ -768,16 +786,21 @@ impl<T> AtomicPtr<T> {\n \n     /// Stores a value into the pointer if the current value is the same as the `current` value.\n     ///\n-    /// Unlike `compare_exchange`, this function is allowed to spuriously fail even when the\n+    /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The\n     /// return value is a result indicating whether the new value was written and containing the\n     /// previous value.\n     ///\n-    /// `compare_exchange_weak` takes two `Ordering` arguments to describe the memory\n+    /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n     /// ordering of this operation. The first describes the required ordering if the operation\n     /// succeeds while the second describes the required ordering when the operation fails. The\n-    /// failure ordering can't be `Release` or `AcqRel` and must be equivalent or weaker than the\n-    /// success ordering.\n+    /// failure ordering can't be [`Release`] or [`AcqRel`] and must be equivalent or\n+    /// weaker than the success ordering.\n+    ///\n+    /// [`compare_exchange`]: #method.compare_exchange\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     ///\n     /// # Examples\n     ///"}]}