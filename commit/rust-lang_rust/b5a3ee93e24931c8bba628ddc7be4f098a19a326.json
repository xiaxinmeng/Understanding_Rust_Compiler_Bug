{"sha": "b5a3ee93e24931c8bba628ddc7be4f098a19a326", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YTNlZTkzZTI0OTMxYzhiYmE2MjhkZGM3YmU0ZjA5OGExOWEzMjY=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-16T13:49:35Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-22T20:47:31Z"}, "message": "support items that visible to the parent module", "tree": {"sha": "aaf6ecb7f04abfd3ba855d848777cd0fbb8307e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaf6ecb7f04abfd3ba855d848777cd0fbb8307e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5a3ee93e24931c8bba628ddc7be4f098a19a326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a3ee93e24931c8bba628ddc7be4f098a19a326", "html_url": "https://github.com/rust-lang/rust/commit/b5a3ee93e24931c8bba628ddc7be4f098a19a326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5a3ee93e24931c8bba628ddc7be4f098a19a326/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e1910d006da7961687928542c1167cc556a39f", "url": "https://api.github.com/repos/rust-lang/rust/commits/55e1910d006da7961687928542c1167cc556a39f", "html_url": "https://github.com/rust-lang/rust/commit/55e1910d006da7961687928542c1167cc556a39f"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "aadd52616bc103ae26799d0373b9a1cd3e3a0a23", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b5a3ee93e24931c8bba628ddc7be4f098a19a326/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a3ee93e24931c8bba628ddc7be4f098a19a326/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=b5a3ee93e24931c8bba628ddc7be4f098a19a326", "patch": "@@ -270,9 +270,8 @@ mod tests {\n         assert_eq!(refs.len(), 3);\n     }\n \n-\n     // `mod foo;` is not in the results because `foo` is an `ast::Name`.\n-    // So, there are two references: the first one is a definition of the `foo` module, \n+    // So, there are two references: the first one is a definition of the `foo` module,\n     // which is the whole `foo.rs`, and the second one is in `use foo::Foo`.\n     #[test]\n     fn test_find_all_refs_decl_module() {\n@@ -297,6 +296,31 @@ mod tests {\n         assert_eq!(refs.len(), 2);\n     }\n \n+    #[test]\n+    fn test_find_all_refs_super_mod_vis() {\n+        let code = r#\"\n+            //- /lib.rs\n+            mod foo;\n+\n+            //- /foo.rs\n+            mod some;\n+            use some::Foo;\n+\n+            fn f() {\n+                let i = Foo { n: 5 };\n+            }\n+\n+            //- /foo/some.rs\n+            pub(super) struct Foo<|> {\n+                pub n: u32,\n+            }\n+        \"#;\n+\n+        let (analysis, pos) = analysis_and_position(code);\n+        let refs = analysis.find_all_refs(pos).unwrap().unwrap();\n+        assert_eq!(refs.len(), 3);\n+    }\n+\n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position).unwrap().unwrap()"}, {"sha": "3beab9861efe0f71fb906fb607116ff20a53194e", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5a3ee93e24931c8bba628ddc7be4f098a19a326/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a3ee93e24931c8bba628ddc7be4f098a19a326/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=b5a3ee93e24931c8bba628ddc7be4f098a19a326", "patch": "@@ -152,6 +152,7 @@ pub(crate) fn classify_name_ref(\n         AssocItem(item) => Some(from_assoc_item(db, item)),\n         LocalBinding(Either::A(pat)) => from_pat(db, file_id, pat),\n         LocalBinding(Either::B(par)) => {\n+            // Not really supported\n             let kind = NameKind::SelfParam(par);\n             Some(NameDefinition { kind, container, visibility })\n         }"}, {"sha": "8495a92a514910100e75ae9bb892fa8054bdd528", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b5a3ee93e24931c8bba628ddc7be4f098a19a326/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a3ee93e24931c8bba628ddc7be4f098a19a326/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=b5a3ee93e24931c8bba628ddc7be4f098a19a326", "patch": "@@ -25,14 +25,53 @@ impl NameDefinition {\n         }\n \n         if let Some(ref vis) = self.visibility {\n+            let vis = vis.syntax().to_string();\n+\n+            // FIXME: add \"pub(in path)\"\n+\n+            if vis.as_str() == \"pub(super)\" {\n+                if let Some(parent_module) = self.container.parent(db) {\n+                    let mut files = HashSet::new();\n+\n+                    let parent_src = parent_module.definition_source(db);\n+                    let file_id = parent_src.file_id.original_file(db);\n+\n+                    match parent_src.ast {\n+                        ModuleSource::Module(m) => {\n+                            let range = Some(m.syntax().text_range());\n+                            files.insert((file_id, range));\n+                        }\n+                        ModuleSource::SourceFile(_) => {\n+                            files.insert((file_id, None));\n+                            files.extend(\n+                                parent_module\n+                                    .children(db)\n+                                    .map(|m| {\n+                                        let src = m.definition_source(db);\n+                                        (src.file_id.original_file(db), None)\n+                                    })\n+                                    .collect::<HashSet<_>>(),\n+                            );\n+                        }\n+                    }\n+                    return files;\n+                } else {\n+                    let range = match module_src.ast {\n+                        ModuleSource::Module(m) => Some(m.syntax().text_range()),\n+                        ModuleSource::SourceFile(_) => None,\n+                    };\n+                    return [(file_id, range)].iter().cloned().collect();\n+                }\n+            }\n+\n             let source_root_id = db.file_source_root(file_id);\n             let source_root = db.source_root(source_root_id);\n             let mut files = source_root.walk().map(|id| (id.into(), None)).collect::<HashSet<_>>();\n \n-            if vis.syntax().to_string().as_str() == \"pub(crate)\" {\n+            if vis.as_str() == \"pub(crate)\" {\n                 return files;\n             }\n-            if vis.syntax().to_string().as_str() == \"pub\" {\n+            if vis.as_str() == \"pub\" {\n                 let krate = self.container.krate(db).unwrap();\n                 let crate_graph = db.crate_graph();\n \n@@ -49,7 +88,6 @@ impl NameDefinition {\n \n                 return files;\n             }\n-            // FIXME: \"pub(super)\", \"pub(in path)\"\n         }\n \n         let range = match module_src.ast {"}]}