{"sha": "c9f8304351ad4223e4f618e9a329b2b94776b25e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjgzMDQzNTFhZDQyMjNlNGY2MThlOWEzMjliMmI5NDc3NmIyNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-09T05:19:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-09T05:19:48Z"}, "message": "Auto merge of #59012 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 24 pull requests\n\nSuccessful merges:\n\n - #58080 (Add FreeBSD armv6 and armv7 targets)\n - #58204 (On return type `impl Trait` for block with no expr point at last semi)\n - #58269 (Add librustc and libsyntax to rust-src distribution.)\n - #58369 (Make the Entry API of HashMap<K, V> Sync and Send)\n - #58861 (Expand where negative supertrait specific error is shown)\n - #58877 (Suggest removal of `&` when borrowing macro and appropriate)\n - #58883 (Suggest appropriate code for unused field when destructuring pattern)\n - #58891 (Remove stray ` in the docs for the FromIterator implementation for Option)\n - #58893 (race condition in thread local storage example)\n - #58906 (Monomorphize generator field types for debuginfo)\n - #58911 (Regression test for #58435.)\n - #58912 (Regression test for #58813)\n - #58916 (Fix release note problems noticed after merging.)\n - #58918 (Regression test added for an async ICE.)\n - #58921 (Add an explicit test for issue #50582)\n - #58926 (Make the lifetime parameters of tcx consistent.)\n - #58931 (Elide invalid method receiver error when it contains TyErr)\n - #58940 (Remove JSBackend from config.toml)\n - #58950 (Add self to mailmap)\n - #58961 (On incorrect cfg literal/identifier, point at the right span)\n - #58963 (libstd: implement Error::source for io::Error)\n - #58970 (delay_span_bug in wfcheck's ty.lift_to_tcx unwrap)\n - #58984 (Teach `-Z treat-err-as-bug` to take a number of errors to emit)\n - #59007 (Add a test for invalid const arguments)\n\nFailed merges:\n\n - #58959 (Add release notes for PR #56243)\n\nr? @ghost", "tree": {"sha": "e97dbd8df5d7edeed08c782ac6f5c56313bb8fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e97dbd8df5d7edeed08c782ac6f5c56313bb8fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f8304351ad4223e4f618e9a329b2b94776b25e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f8304351ad4223e4f618e9a329b2b94776b25e", "html_url": "https://github.com/rust-lang/rust/commit/c9f8304351ad4223e4f618e9a329b2b94776b25e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f8304351ad4223e4f618e9a329b2b94776b25e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777cc25bacbd7cd4f4ddd631006a998fa74b5ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/777cc25bacbd7cd4f4ddd631006a998fa74b5ed3", "html_url": "https://github.com/rust-lang/rust/commit/777cc25bacbd7cd4f4ddd631006a998fa74b5ed3"}, {"sha": "961e378ca11d5b83ae2a1395f583af76335003e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/961e378ca11d5b83ae2a1395f583af76335003e6", "html_url": "https://github.com/rust-lang/rust/commit/961e378ca11d5b83ae2a1395f583af76335003e6"}], "stats": {"total": 694, "additions": 588, "deletions": 106}, "files": [{"sha": "0733086284947dd8be6ce8b75944940ededc669f", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -161,6 +161,7 @@ Michael Woerister <michaelwoerister@posteo> <michaelwoerister@gmail>\n Micka\u00ebl Raybaud-Roig <raybaudroigm@gmail.com> m-r-r <raybaudroigm@gmail.com>\n Ms2ger <ms2ger@gmail.com> <Ms2ger@gmail.com>\n Mukilan Thiagarajan <mukilanthiagarajan@gmail.com>\n+Nathan West <Lucretiel@gmail.com> <lucretiel@gmail.com>\n Nathan Wilson <wilnathan@gmail.com>\n Nathaniel Herman <nherman@post.harvard.edu> Nathaniel Herman <nherman@college.harvard.edu>\n Neil Pankey <npankey@gmail.com> <neil@wire.im>"}, {"sha": "4cda02c5c2ebed35030a79de4d68abca20ffac5b", "filename": "RELEASES.md", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -4,10 +4,10 @@ Version 1.33.0 (2019-02-28)\n Language\n --------\n - [You can now use the `cfg(target_vendor)` attribute.][57465] E.g.\n-  `#[cfg(target_vendor=\"linux\")] fn main() { println!(\"Hello Linux!\"); }`\n+  `#[cfg(target_vendor=\"apple\")] fn main() { println!(\"Hello Apple!\"); }`\n - [Integer patterns such as in a match expression can now be exhaustive.][56362]\n   E.g. You can have match statement on a `u8` that covers `0..=255` and\n-  you would no longer be required to have a `_ => unreachable!()` case. \n+  you would no longer be required to have a `_ => unreachable!()` case.\n - [You can now have multiple patterns in `if let` and `while let`\n   expressions.][57532] You can do this with the same syntax as a `match`\n   expression. E.g.\n@@ -51,8 +51,7 @@ Language\n   // Allowed as there is only one `Read` in the module.\n   pub trait Read {}\n   ```\n-- [`extern` functions will now abort by default when panicking.][55982]\n-  This was previously undefined behaviour.\n+- [You may now use `Rc`, `Arc`, and `Pin` as method receivers][56805].\n \n Compiler\n --------\n@@ -109,27 +108,30 @@ Compatibility Notes\n   are now deprecated in the standard library, and their usage will now produce a warning.\n   Please use the `str::{trim_start, trim_end, trim_start_matches, trim_end_matches}`\n   methods instead.\n+- The `Error::cause` method has been deprecated in favor of `Error::source` which supports\n+  downcasting.\n \n-[57615]: https://github.com/rust-lang/rust/pull/57615/\n-[57465]: https://github.com/rust-lang/rust/pull/57465/\n-[57532]: https://github.com/rust-lang/rust/pull/57532/\n-[57535]: https://github.com/rust-lang/rust/pull/57535/\n-[57566]: https://github.com/rust-lang/rust/pull/57566/\n+[55982]: https://github.com/rust-lang/rust/pull/55982/\n+[56303]: https://github.com/rust-lang/rust/pull/56303/\n+[56351]: https://github.com/rust-lang/rust/pull/56351/\n+[56362]: https://github.com/rust-lang/rust/pull/56362\n+[56642]: https://github.com/rust-lang/rust/pull/56642/\n+[56769]: https://github.com/rust-lang/rust/pull/56769/\n+[56805]: https://github.com/rust-lang/rust/pull/56805\n+[56947]: https://github.com/rust-lang/rust/pull/56947/\n+[57049]: https://github.com/rust-lang/rust/pull/57049/\n+[57067]: https://github.com/rust-lang/rust/pull/57067/\n+[57105]: https://github.com/rust-lang/rust/pull/57105\n [57130]: https://github.com/rust-lang/rust/pull/57130/\n [57167]: https://github.com/rust-lang/rust/pull/57167/\n [57175]: https://github.com/rust-lang/rust/pull/57175/\n [57234]: https://github.com/rust-lang/rust/pull/57234/\n [57332]: https://github.com/rust-lang/rust/pull/57332/\n-[56947]: https://github.com/rust-lang/rust/pull/56947/\n-[57049]: https://github.com/rust-lang/rust/pull/57049/\n-[57067]: https://github.com/rust-lang/rust/pull/57067/\n-[56769]: https://github.com/rust-lang/rust/pull/56769/\n-[56642]: https://github.com/rust-lang/rust/pull/56642/\n-[56303]: https://github.com/rust-lang/rust/pull/56303/\n-[56351]: https://github.com/rust-lang/rust/pull/56351/\n-[55982]: https://github.com/rust-lang/rust/pull/55982/\n-[56362]: https://github.com/rust-lang/rust/pull/56362\n-[57105]: https://github.com/rust-lang/rust/pull/57105\n+[57465]: https://github.com/rust-lang/rust/pull/57465/\n+[57532]: https://github.com/rust-lang/rust/pull/57532/\n+[57535]: https://github.com/rust-lang/rust/pull/57535/\n+[57566]: https://github.com/rust-lang/rust/pull/57566/\n+[57615]: https://github.com/rust-lang/rust/pull/57615/\n [cargo/6484]: https://github.com/rust-lang/cargo/pull/6484/\n [`unix::FileExt::read_exact_at`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#method.read_exact_at\n [`unix::FileExt::write_all_at`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#method.write_all_at\n@@ -170,7 +172,7 @@ Language\n - [You can now match against literals in macros with the `literal`\n   specifier.][56072] This will match against a literal of any type.\n   E.g. `1`, `'A'`, `\"Hello World\"`\n-- [Self can now be used as a constructor and pattern for unit and tuple structs.][56365] E.g. \n+- [Self can now be used as a constructor and pattern for unit and tuple structs.][56365] E.g.\n   ```rust\n   struct Point(i32, i32);\n \n@@ -460,7 +462,7 @@ Version 1.31.0 (2018-12-06)\n \n Language\n --------\n-- \ud83c\udf89 [This version marks the release of the 2018 edition of Rust.][54057] \ud83c\udf89 \n+- \ud83c\udf89 [This version marks the release of the 2018 edition of Rust.][54057] \ud83c\udf89\n - [New lifetime elision rules now allow for eliding lifetimes in functions and\n   impl headers.][54778] E.g. `impl<'a> Reader for BufReader<'a> {}` can now be\n   `impl Reader for BufReader<'_> {}`. Lifetimes are still required to be defined"}, {"sha": "0631d7c83eaf7fbf963296bfb95e8645ef125ba9", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -61,7 +61,7 @@\n # support. You'll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n-#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\"\n+#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;MSP430;Sparc;NVPTX;Hexagon\"\n \n # LLVM experimental targets to build support for. These targets are specified in\n # the same format as above, but since these targets are experimental, they are"}, {"sha": "8af7aa4856c381c196466407833370e7841c7ac1", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -262,6 +262,10 @@ def default_build_triple():\n         cputype = 'arm'\n         if ostype == 'linux-android':\n             ostype = 'linux-androideabi'\n+        elif ostype == 'unknown-freebsd':\n+            cputype = subprocess.check_output(\n+                ['uname', '-p']).strip().decode(default_encoding)\n+            ostype = 'unknown-freebsd'\n     elif cputype == 'armv6l':\n         cputype = 'arm'\n         if ostype == 'linux-android':"}, {"sha": "2c40dd6d2961d49ab6838708ef7b05516cef5563", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -904,6 +904,8 @@ impl Step for Src {\n             \"src/stdsimd\",\n             \"src/libproc_macro\",\n             \"src/tools/rustc-std-workspace-core\",\n+            \"src/librustc\",\n+            \"src/libsyntax\",\n         ];\n \n         copy_src_dirs(builder, &std_src_dirs[..], &[], &dst_src);"}, {"sha": "46dfe28da622c451f8e4c3fe9fa54d927e151227", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -1286,7 +1286,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// # Examples\n     ///\n     /// Here is an example which increments every integer in a vector.\n-    /// `We use the checked variant of `add` that returns `None` when the\n+    /// We use the checked variant of `add` that returns `None` when the\n     /// calculation would result in an overflow.\n     ///\n     /// ```"}, {"sha": "709e0513202e95f6fa66ac2022493d4cd5efaa03", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -379,9 +379,22 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n     let body = ir.tcx.hir().body(body_id);\n \n     for arg in &body.arguments {\n+        let is_shorthand = match arg.pat.node {\n+            crate::hir::PatKind::Struct(..) => true,\n+            _ => false,\n+        };\n         arg.pat.each_binding(|_bm, hir_id, _x, ident| {\n             debug!(\"adding argument {:?}\", hir_id);\n-            fn_maps.add_variable(Arg(hir_id, ident.name));\n+            let var = if is_shorthand {\n+                Local(LocalInfo {\n+                    id: hir_id,\n+                    name: ident.name,\n+                    is_shorthand: true,\n+                })\n+            } else {\n+                Arg(hir_id, ident.name)\n+            };\n+            fn_maps.add_variable(var);\n         })\n     };\n "}, {"sha": "a44d815025e9250f7daa6cc44e1e2ec698731ccd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -816,6 +816,8 @@ macro_rules! options {\n             Some(\"crate=integer\");\n         pub const parse_unpretty: Option<&str> =\n             Some(\"`string` or `string=string`\");\n+        pub const parse_treat_err_as_bug: Option<&str> =\n+            Some(\"either no value or a number bigger than 0\");\n         pub const parse_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, \\\n                   `fat`, or omitted\");\n@@ -1022,6 +1024,13 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_treat_err_as_bug(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => { *slot = s.parse().ok().filter(|&x| x != 0); slot.unwrap_or(0) != 0 }\n+                None => { *slot = Some(1); true }\n+            }\n+        }\n+\n         fn parse_lto(slot: &mut LtoCli, v: Option<&str>) -> bool {\n             if v.is_some() {\n                 let mut bool_arg = None;\n@@ -1236,8 +1245,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"load proc macros for both target and host, but only link to the target\"),\n     no_codegen: bool = (false, parse_bool, [TRACKED],\n         \"run all passes except codegen; no output\"),\n-    treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n-        \"treat all errors that occur as bugs\"),\n+    treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n+        \"treat error number `val` that occurs as bug\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug`\"),\n     external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n@@ -3214,7 +3223,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.debugging_opts.treat_err_as_bug = true;\n+        opts.debugging_opts.treat_err_as_bug = Some(1);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "751fa7e95e3a835b38339b1f013dcd882fb15183", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -1315,7 +1315,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n             Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n     errors::FatalError.raise();\n }\n@@ -1330,7 +1330,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n             Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);\n }\n "}, {"sha": "c7674ae7a28a248fc614ec3a885a2bda33d46212", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -599,11 +599,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn report_selection_error(&self,\n-                                  obligation: &PredicateObligation<'tcx>,\n-                                  error: &SelectionError<'tcx>,\n-                                  fallback_has_occurred: bool)\n-    {\n+    pub fn report_selection_error(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        error: &SelectionError<'tcx>,\n+        fallback_has_occurred: bool,\n+    ) {\n         let span = obligation.cause.span;\n \n         let mut err = match *error {\n@@ -673,6 +674,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n+                        self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n \n                         // Try to report a help message\n                         if !trait_ref.has_infer_types() &&\n@@ -900,9 +902,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// When encountering an assignment of an unsized trait, like `let x = \"\"[..];`, provide a\n     /// suggestion to borrow the initializer in order to use have a slice instead.\n-    fn suggest_borrow_on_unsized_slice(&self,\n-                                       code: &ObligationCauseCode<'tcx>,\n-                                       err: &mut DiagnosticBuilder<'tcx>) {\n+    fn suggest_borrow_on_unsized_slice(\n+        &self,\n+        code: &ObligationCauseCode<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+    ) {\n         if let &ObligationCauseCode::VariableType(node_id) = code {\n             let parent_node = self.tcx.hir().get_parent_node(node_id);\n             if let Some(Node::Local(ref local)) = self.tcx.hir().find(parent_node) {\n@@ -924,10 +928,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// Whenever references are used by mistake, like `for (i, e) in &vec.iter().enumerate()`,\n     /// suggest removing these references until we reach a type that implements the trait.\n-    fn suggest_remove_reference(&self,\n-                                obligation: &PredicateObligation<'tcx>,\n-                                err: &mut DiagnosticBuilder<'tcx>,\n-                                trait_ref: &ty::Binder<ty::TraitRef<'tcx>>) {\n+    fn suggest_remove_reference(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+    ) {\n         let trait_ref = trait_ref.skip_binder();\n         let span = obligation.cause.span;\n \n@@ -969,6 +975,40 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn suggest_semicolon_removal(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        span: Span,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+    ) {\n+        let hir = self.tcx.hir();\n+        let parent_node = hir.get_parent_node(\n+            hir.hir_to_node_id(obligation.cause.body_id),\n+        );\n+        let node = hir.find(parent_node);\n+        if let Some(hir::Node::Item(hir::Item {\n+            node: hir::ItemKind::Fn(decl, _, _, body_id),\n+            ..\n+        })) = node {\n+            let body = hir.body(*body_id);\n+            if let hir::ExprKind::Block(blk, _) = &body.value.node {\n+                if decl.output.span().overlaps(span) && blk.expr.is_none() &&\n+                    \"()\" == &trait_ref.self_ty().to_string()\n+                {\n+                    // FIXME(estebank): When encountering a method with a trait\n+                    // bound not satisfied in the return type with a body that has\n+                    // no return, suggest removal of semicolon on last statement.\n+                    // Once that is added, close #54771.\n+                    if let Some(ref stmt) = blk.stmts.last() {\n+                        let sp = self.tcx.sess.source_map().end_point(stmt.span);\n+                        err.span_label(sp, \"consider removing this semicolon\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     /// Given some node representing a fn-like thing in the HIR map,\n     /// returns a span and `ArgKind` information that describes the\n     /// arguments it expects. This can be supplied to"}, {"sha": "258391ba8360fc99eecc1204d126860f964a9f7c", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -123,9 +123,9 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     ) -> EncodedMetadata {\n         base::write_metadata(tcx, metadata)\n     }\n-    fn codegen_allocator(\n+    fn codegen_allocator<'b, 'gcx>(\n         &self,\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'b, 'gcx, 'gcx>,\n         mods: &mut ModuleLlvm,\n         kind: AllocatorKind\n     ) {"}, {"sha": "c84b38cde81853f39aae0869024b6f26e700c361", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -247,7 +247,7 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n \n impl<B: WriteBackendMethods> CodegenContext<B> {\n     pub fn create_diag_handler(&self) -> Handler {\n-        Handler::with_emitter(true, false, Box::new(self.diag_emitter.clone()))\n+        Handler::with_emitter(true, None, Box::new(self.diag_emitter.clone()))\n     }\n \n     pub fn config(&self, kind: ModuleKind) -> &ModuleConfig {"}, {"sha": "bc77097425bd1350e30352d0c0591e19327f37f3", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -673,6 +673,7 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                         .zip(state_tys)\n                         .enumerate()\n                         .filter_map(move |(i, (decl, ty))| {\n+                            let ty = fx.monomorphize(&ty);\n                             decl.name.map(|name| (i + upvar_count + 1, name, false, ty))\n                         })\n                 }).into_iter().flatten();"}, {"sha": "a9e0eadb198a86f1fedea63c7b47f3763a6ede4d", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -38,9 +38,9 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         tcx: TyCtxt<'b, 'gcx, 'gcx>,\n         metadata: &mut Self::Module,\n     ) -> EncodedMetadata;\n-    fn codegen_allocator(\n+    fn codegen_allocator<'b, 'gcx>(\n         &self,\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'b, 'gcx, 'gcx>,\n         mods: &mut Self::Module,\n         kind: AllocatorKind\n     );"}, {"sha": "656d8e463dbd044806d6f540d42039a536791d13", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -148,7 +148,7 @@ pub fn run<F>(run_compiler: F) -> isize\n                                 true,\n                                 false\n                             );\n-                        let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n+                        let handler = errors::Handler::with_emitter(true, None, Box::new(emitter));\n                         handler.emit(&MultiSpan::new(),\n                                      \"aborting due to previous error(s)\",\n                                      errors::Level::Fatal);\n@@ -1327,7 +1327,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) -> Result<(), CompilationFail\n                                                                 None,\n                                                                 false,\n                                                                 false));\n-            let handler = errors::Handler::with_emitter(true, false, emitter);\n+            let handler = errors::Handler::with_emitter(true, None, emitter);\n \n             // a .span_bug or .bug call has already printed what\n             // it wants to print."}, {"sha": "3d52f1d44ba295e19e2d1ba89f5e1d11407ef5c1", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -113,7 +113,7 @@ fn test_env_with_pool<F>(\n ) where\n     F: FnOnce(Env),\n {\n-    let diagnostic_handler = errors::Handler::with_emitter(true, false, emitter);\n+    let diagnostic_handler = errors::Handler::with_emitter(true, None, emitter);\n     let sess = session::build_session_(\n         options,\n         None,"}, {"sha": "c8d47339fb36572432369715402c1a2a1fb7503b", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -103,7 +103,9 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// Buffers the diagnostic for later emission, unless handler\n     /// has disabled such buffering.\n     pub fn buffer(mut self, buffered_diagnostics: &mut Vec<Diagnostic>) {\n-        if self.handler.flags.dont_buffer_diagnostics || self.handler.flags.treat_err_as_bug {\n+        if self.handler.flags.dont_buffer_diagnostics ||\n+            self.handler.flags.treat_err_as_bug.is_some()\n+        {\n             self.emit();\n             return;\n         }"}, {"sha": "7c7698ddd3d7397e98a7978be053af234a8a2604", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -330,7 +330,7 @@ pub struct HandlerFlags {\n     pub can_emit_warnings: bool,\n     /// If true, error-level diagnostics are upgraded to bug-level.\n     /// (rustc: see `-Z treat-err-as-bug`)\n-    pub treat_err_as_bug: bool,\n+    pub treat_err_as_bug: Option<usize>,\n     /// If true, immediately emit diagnostics that would otherwise be buffered.\n     /// (rustc: see `-Z dont-buffer-diagnostics` and `-Z treat-err-as-bug`)\n     pub dont_buffer_diagnostics: bool,\n@@ -360,7 +360,7 @@ impl Drop for Handler {\n impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n                             can_emit_warnings: bool,\n-                            treat_err_as_bug: bool,\n+                            treat_err_as_bug: Option<usize>,\n                             cm: Option<Lrc<SourceMapperDyn>>)\n                             -> Handler {\n         Handler::with_tty_emitter_and_flags(\n@@ -382,7 +382,7 @@ impl Handler {\n     }\n \n     pub fn with_emitter(can_emit_warnings: bool,\n-                        treat_err_as_bug: bool,\n+                        treat_err_as_bug: Option<usize>,\n                         e: Box<dyn Emitter + sync::Send>)\n                         -> Handler {\n         Handler::with_emitter_and_flags(\n@@ -516,8 +516,20 @@ impl Handler {\n     }\n \n     fn panic_if_treat_err_as_bug(&self) {\n-        if self.flags.treat_err_as_bug {\n-            panic!(\"encountered error with `-Z treat_err_as_bug\");\n+        if self.treat_err_as_bug() {\n+            let s = match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {\n+                (0, _) => return,\n+                (1, 1) => \"aborting due to `-Z treat-err-as-bug=1`\".to_string(),\n+                (1, _) => return,\n+                (count, as_bug) => {\n+                    format!(\n+                        \"aborting after {} errors due to `-Z treat-err-as-bug={}`\",\n+                        count,\n+                        as_bug,\n+                    )\n+                }\n+            };\n+            panic!(s);\n         }\n     }\n \n@@ -558,7 +570,7 @@ impl Handler {\n         panic!(ExplicitBug);\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }\n@@ -593,14 +605,14 @@ impl Handler {\n         DiagnosticBuilder::new(self, FailureNote, msg).emit()\n     }\n     pub fn fatal(&self, msg: &str) -> FatalError {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             self.bug(msg);\n         }\n         DiagnosticBuilder::new(self, Fatal, msg).emit();\n         FatalError\n     }\n     pub fn err(&self, msg: &str) {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             self.bug(msg);\n         }\n         let mut db = DiagnosticBuilder::new(self, Error, msg);\n@@ -610,6 +622,9 @@ impl Handler {\n         let mut db = DiagnosticBuilder::new(self, Warning, msg);\n         db.emit();\n     }\n+    fn treat_err_as_bug(&self) -> bool {\n+        self.flags.treat_err_as_bug.map(|c| self.err_count() >= c).unwrap_or(false)\n+    }\n     pub fn note_without_error(&self, msg: &str) {\n         let mut db = DiagnosticBuilder::new(self, Note, msg);\n         db.emit();\n@@ -624,8 +639,8 @@ impl Handler {\n     }\n \n     fn bump_err_count(&self) {\n-        self.panic_if_treat_err_as_bug();\n         self.err_count.fetch_add(1, SeqCst);\n+        self.panic_if_treat_err_as_bug();\n     }\n \n     pub fn err_count(&self) -> usize {\n@@ -642,6 +657,9 @@ impl Handler {\n             1 => \"aborting due to previous error\".to_string(),\n             _ => format!(\"aborting due to {} previous errors\", self.err_count())\n         };\n+        if self.treat_err_as_bug() {\n+            return;\n+        }\n \n         let _ = self.fatal(&s);\n "}, {"sha": "39886a16a740307ba45574c4af3c9b4a09618cb8", "filename": "src/librustc_target/spec/armv6_unknown_freebsd.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,24 @@\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let base = super::freebsd_base::opts();\n+    Ok(Target {\n+        llvm_target: \"armv6-unknown-freebsd-gnueabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"freebsd\".to_string(),\n+        target_env: \"gnueabihf\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: TargetOptions {\n+            features: \"+v6,+vfp2\".to_string(),\n+            max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "ba63fd2bf053fe6fbc1f62a2f6d6053ae88ffb84", "filename": "src/librustc_target/spec/armv7_unknown_freebsd.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,24 @@\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let base = super::freebsd_base::opts();\n+    Ok(Target {\n+        llvm_target: \"armv7-unknown-freebsd-gnueabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"freebsd\".to_string(),\n+        target_env: \"gnueabihf\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: TargetOptions {\n+            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "2824d9cb6c3bbb380d6de5cb5f6965738ed4758c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -376,6 +376,8 @@ supported_targets! {\n     (\"aarch64-linux-android\", aarch64_linux_android),\n \n     (\"aarch64-unknown-freebsd\", aarch64_unknown_freebsd),\n+    (\"armv6-unknown-freebsd\", armv6_unknown_freebsd),\n+    (\"armv7-unknown-freebsd\", armv7_unknown_freebsd),\n     (\"i686-unknown-freebsd\", i686_unknown_freebsd),\n     (\"powerpc64-unknown-freebsd\", powerpc64_unknown_freebsd),\n     (\"x86_64-unknown-freebsd\", x86_64_unknown_freebsd),"}, {"sha": "32ca854b2774469cf9effc8436bbbfb29a2f0189", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -367,6 +367,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         // Maybe remove `&`?\n                         hir::ExprKind::AddrOf(_, ref expr) => {\n                             if !cm.span_to_filename(expr.span).is_real() {\n+                                if let Ok(code) = cm.span_to_snippet(sp) {\n+                                    if code.chars().next() == Some('&') {\n+                                        return Some((\n+                                            sp,\n+                                            \"consider removing the borrow\",\n+                                            code[1..].to_string()),\n+                                        );\n+                                    }\n+                                }\n                                 return None;\n                             }\n                             if let Ok(code) = cm.span_to_snippet(expr.span) {"}, {"sha": "81fc38e743f4498bb222a4f1ffc2b10e6a21c22f", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -251,11 +251,14 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let needs_drop_copy = || {\n                 packed && {\n                     let ty = variant.fields.last().unwrap().ty;\n-                    let ty = fcx.tcx.erase_regions(&ty).lift_to_tcx(fcx_tcx)\n+                    fcx.tcx.erase_regions(&ty).lift_to_tcx(fcx_tcx)\n+                        .map(|ty| ty.needs_drop(fcx_tcx, fcx_tcx.param_env(def_id)))\n                         .unwrap_or_else(|| {\n-                            span_bug!(item.span, \"inference variables in {:?}\", ty)\n-                        });\n-                    ty.needs_drop(fcx_tcx, fcx_tcx.param_env(def_id))\n+                            fcx_tcx.sess.delay_span_bug(\n+                                item.span, &format!(\"inference variables in {:?}\", ty));\n+                            // Just treat unresolved type expression as if it needs drop.\n+                            true\n+                        })\n                 }\n             };\n             let all_sized =\n@@ -881,7 +884,9 @@ fn receiver_is_valid<'fcx, 'tcx, 'gcx>(\n         } else {\n             debug!(\"receiver_is_valid: type `{:?}` does not deref to `{:?}`\",\n                 receiver_ty, self_ty);\n-            return false\n+            // If he receiver already has errors reported due to it, consider it valid to avoid\n+            // unecessary errors (#58712).\n+            return receiver_ty.references_error();\n         }\n \n         // without the `arbitrary_self_types` feature, `receiver_ty` must directly deref to"}, {"sha": "205e4249910761d010b442e98dc0dc7793836067", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -277,7 +277,7 @@ impl DocAccessLevels for AccessLevels<DefId> {\n /// will be created for the handler.\n pub fn new_handler(error_format: ErrorOutputType,\n                    source_map: Option<Lrc<source_map::SourceMap>>,\n-                   treat_err_as_bug: bool,\n+                   treat_err_as_bug: Option<usize>,\n                    ui_testing: bool,\n ) -> errors::Handler {\n     // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so"}, {"sha": "856365847ae17a0a11ab5ab736793c26cfe4b1d6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -67,7 +67,7 @@ pub fn run(mut options: Options) -> isize {\n         let source_map = Lrc::new(SourceMap::new(sessopts.file_path_mapping()));\n         let handler =\n             errors::Handler::with_tty_emitter(ColorConfig::Auto,\n-                                            true, false,\n+                                            true, None,\n                                             Some(source_map.clone()));\n \n         let mut sess = session::build_session_(\n@@ -272,7 +272,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n                                                         false);\n \n         // Compile the code\n-        let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n+        let diagnostic_handler = errors::Handler::with_emitter(true, None, box emitter);\n \n         let mut sess = session::build_session_(\n             sessopts, None, diagnostic_handler, source_map, Default::default(),\n@@ -424,7 +424,7 @@ pub fn make_test(s: &str,\n         // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let emitter = EmitterWriter::new(box io::sink(), None, false, false);\n-        let handler = Handler::with_emitter(false, false, box emitter);\n+        let handler = Handler::with_emitter(false, None, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);\n \n         let mut found_main = false;"}, {"sha": "928de29b297fced40874c6617baec89b206c4d63", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -2341,6 +2341,11 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n     elem: FullBucket<K, V, &'a mut RawTable<K, V>>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<'a, K: 'a + Send, V: 'a + Send> Send for OccupiedEntry<'a, K, V> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<'a, K: 'a + Sync, V: 'a + Sync> Sync for OccupiedEntry<'a, K, V> {}\n+\n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n impl<K: Debug, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -2362,6 +2367,11 @@ pub struct VacantEntry<'a, K: 'a, V: 'a> {\n     elem: VacantEntryState<K, V, &'a mut RawTable<K, V>>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<'a, K: 'a + Send, V: 'a + Send> Send for VacantEntry<'a, K, V> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<'a, K: 'a + Sync, V: 'a + Sync> Sync for VacantEntry<'a, K, V> {}\n+\n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n impl<K: Debug, V> Debug for VacantEntry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "614b79124cc6874849d92cd750d2e36de96026aa", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -556,6 +556,14 @@ impl error::Error for Error {\n             Repr::Custom(ref c) => c.error.cause(),\n         }\n     }\n+\n+    fn source(&self) -> Option<&(dyn error::Error + 'static)> {\n+        match self.repr {\n+            Repr::Os(..) => None,\n+            Repr::Simple(..) => None,\n+            Repr::Custom(ref c) => c.error.source(),\n+        }\n+    }\n }\n \n fn _assert_error_is_sync_send() {"}, {"sha": "7ad6b124e3a384c1f57543d2230e4b0f513421de", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -40,13 +40,16 @@ use crate::mem;\n /// });\n ///\n /// // each thread starts out with the initial value of 1\n-/// thread::spawn(move|| {\n+/// let t = thread::spawn(move|| {\n ///     FOO.with(|f| {\n ///         assert_eq!(*f.borrow(), 1);\n ///         *f.borrow_mut() = 3;\n ///     });\n /// });\n ///\n+/// // wait for the thread to complete and bail out on panic\n+/// t.join().unwrap();\n+///\n /// // we retain our original value of 2 despite the child thread\n /// FOO.with(|f| {\n ///     assert_eq!(*f.borrow(), 2);"}, {"sha": "e93e15f9012a71980cfee44fd4db794f21f3f9b6", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -285,8 +285,8 @@ impl<'a> Parser<'a> {\n         }\n \n         let found = self.this_token_to_string();\n-        let msg = format!(\"expected unsuffixed literal or identifier, found {}\", found);\n-        Err(self.diagnostic().struct_span_err(lo, &msg))\n+        let msg = format!(\"expected unsuffixed literal or identifier, found `{}`\", found);\n+        Err(self.diagnostic().struct_span_err(self.span, &msg))\n     }\n \n     /// matches meta_seq = ( COMMASEP(meta_item_inner) )"}, {"sha": "db5b8dcda4eab7daadddc04514043510a00b683b", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -1920,7 +1920,7 @@ mod tests {\n                                                           false,\n                                                           false);\n         ParseSess {\n-            span_diagnostic: errors::Handler::with_emitter(true, false, Box::new(emitter)),\n+            span_diagnostic: errors::Handler::with_emitter(true, None, Box::new(emitter)),\n             unstable_features: UnstableFeatures::from_environment(),\n             config: CrateConfig::default(),\n             included_mod_stack: Lock::new(Vec::new()),"}, {"sha": "98b5fe563b8a9c31e46729ebf718780891482c8a", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -54,7 +54,7 @@ impl ParseSess {\n         let cm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(ColorConfig::Auto,\n                                                 true,\n-                                                false,\n+                                                None,\n                                                 Some(cm.clone()));\n         ParseSess::with_span_handler(handler, cm)\n     }"}, {"sha": "fe31311094b89412624eded504cb630872c0854b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -1818,7 +1818,7 @@ impl<'a> Parser<'a> {\n         let mut bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n-            bounds.append(&mut self.parse_generic_bounds(None)?);\n+            bounds.append(&mut self.parse_generic_bounds(Some(self.prev_span))?);\n         }\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n@@ -5538,6 +5538,7 @@ impl<'a> Parser<'a> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n         let mut last_plus_span = None;\n+        let mut was_negative = false;\n         loop {\n             // This needs to be synchronized with `Token::can_begin_bound`.\n             let is_bound_start = self.check_path() || self.check_lifetime() ||\n@@ -5582,9 +5583,10 @@ impl<'a> Parser<'a> {\n                     }\n                     let poly_span = lo.to(self.prev_span);\n                     if is_negative {\n-                        negative_bounds.push(\n-                            last_plus_span.or(colon_span).unwrap()\n-                                .to(poly_span));\n+                        was_negative = true;\n+                        if let Some(sp) = last_plus_span.or(colon_span) {\n+                            negative_bounds.push(sp.to(poly_span));\n+                        }\n                     } else {\n                         let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n                         let modifier = if question.is_some() {\n@@ -5606,26 +5608,28 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        if !negative_bounds.is_empty() {\n+        if !negative_bounds.is_empty() || was_negative {\n             let plural = negative_bounds.len() > 1;\n             let mut err = self.struct_span_err(negative_bounds,\n                                                \"negative trait bounds are not supported\");\n-            let bound_list = colon_span.unwrap().to(self.prev_span);\n-            let mut new_bound_list = String::new();\n-            if !bounds.is_empty() {\n-                let mut snippets = bounds.iter().map(|bound| bound.span())\n-                    .map(|span| self.sess.source_map().span_to_snippet(span));\n-                while let Some(Ok(snippet)) = snippets.next() {\n-                    new_bound_list.push_str(\" + \");\n-                    new_bound_list.push_str(&snippet);\n-                }\n-                new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n-            }\n-            err.span_suggestion_short(bound_list,\n-                                      &format!(\"remove the trait bound{}\",\n-                                              if plural { \"s\" } else { \"\" }),\n-                                      new_bound_list,\n-                                      Applicability::MachineApplicable);\n+            if let Some(bound_list) = colon_span {\n+                let bound_list = bound_list.to(self.prev_span);\n+                let mut new_bound_list = String::new();\n+                if !bounds.is_empty() {\n+                    let mut snippets = bounds.iter().map(|bound| bound.span())\n+                        .map(|span| self.sess.source_map().span_to_snippet(span));\n+                    while let Some(Ok(snippet)) = snippets.next() {\n+                        new_bound_list.push_str(\" + \");\n+                        new_bound_list.push_str(&snippet);\n+                    }\n+                    new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n+                }\n+                err.span_suggestion_short(bound_list,\n+                                        &format!(\"remove the trait bound{}\",\n+                                                if plural { \"s\" } else { \"\" }),\n+                                        new_bound_list,\n+                                        Applicability::MachineApplicable);\n+            }\n             err.emit();\n         }\n \n@@ -5661,7 +5665,7 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and param bounds.\n         let bounds = if self.eat(&token::Colon) {\n-            self.parse_generic_bounds(None)?\n+            self.parse_generic_bounds(Some(self.prev_span))?\n         } else {\n             Vec::new()\n         };\n@@ -6106,7 +6110,7 @@ impl<'a> Parser<'a> {\n                 // or with mandatory equality sign and the second type.\n                 let ty = self.parse_ty()?;\n                 if self.eat(&token::Colon) {\n-                    let bounds = self.parse_generic_bounds(None)?;\n+                    let bounds = self.parse_generic_bounds(Some(self.prev_span))?;\n                     where_clause.predicates.push(ast::WherePredicate::BoundPredicate(\n                         ast::WhereBoundPredicate {\n                             span: lo.to(self.prev_span),\n@@ -7665,7 +7669,7 @@ impl<'a> Parser<'a> {\n         tps.where_clause = self.parse_where_clause()?;\n         let alias = if existential {\n             self.expect(&token::Colon)?;\n-            let bounds = self.parse_generic_bounds(None)?;\n+            let bounds = self.parse_generic_bounds(Some(self.prev_span))?;\n             AliasKind::Existential(bounds)\n         } else {\n             self.expect(&token::Eq)?;"}, {"sha": "2b3d18835d543bc631dd0e60f511159442ad8fd6", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -58,7 +58,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n                                         Some(source_map.clone()),\n                                         false,\n                                         false);\n-        let handler = Handler::with_emitter(true, false, Box::new(emitter));\n+        let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");\n \n         assert!(expected_output.chars().next() == Some('\\n'),"}, {"sha": "4102eb32580f025143f6e7bd5627790e18e4fc7b", "filename": "src/test/incremental/cyclic-trait-hierarchy.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fincremental%2Fcyclic-trait-hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fincremental%2Fcyclic-trait-hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcyclic-trait-hierarchy.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,14 @@\n+// Adapated from rust-lang/rust#58813\n+\n+// revisions: rpass1 cfail2\n+\n+#[cfg(rpass1)]\n+pub trait T2 { }\n+#[cfg(cfail2)]\n+pub trait T2: T1 { }\n+//[cfail2]~^ ERROR cycle detected when computing the supertraits of `T2`\n+//[cfail2]~| ERROR cycle detected when computing the supertraits of `T2`\n+\n+pub trait T1: T2 { }\n+\n+fn main() { }"}, {"sha": "9b3bcef2faf327ca9b25acdf4274634daf553466", "filename": "src/test/run-make-fulldeps/treat-err-as-bug/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -2,4 +2,4 @@\n \n all:\n \t$(RUSTC) err.rs -Z treat-err-as-bug 2>&1 \\\n-\t    | $(CGREP) \"panicked at 'encountered error with \\`-Z treat_err_as_bug'\"\n+\t    | $(CGREP) \"panicked at 'aborting due to \\`-Z treat-err-as-bug=1\\`'\""}, {"sha": "8aaa6a0e427d13395f176ddb746f9229f63a6988", "filename": "src/test/run-pass/generator/issue-57084.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-57084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-57084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-57084.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,28 @@\n+// This issue reproduces an ICE on compile (E.g. fails on 2018-12-19 nightly).\n+// \"cannot relate bound region: ReLateBound(DebruijnIndex(1), BrAnon(1)) <= '_#1r\"\n+// run-pass\n+// edition:2018\n+#![feature(generators,generator_trait)]\n+use std::ops::Generator;\n+\n+fn with<F>(f: F) -> impl Generator<Yield=(), Return=()>\n+where F: Fn() -> ()\n+{\n+    move || {\n+        loop {\n+            match f() {\n+                _ => yield,\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let data = &vec![1];\n+    || {\n+        let _to_pin = with(move || println!(\"{:p}\", data));\n+        loop {\n+            yield\n+        }\n+    };\n+}"}, {"sha": "43b37a9afc2cc9f26284625ef86f912e14557424", "filename": "src/test/run-pass/generator/issue-58888.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-58888.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-58888.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-58888.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,27 @@\n+// run-pass\n+// compile-flags: -g\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+struct Database;\n+\n+impl Database {\n+    fn get_connection(&self) -> impl Iterator<Item = ()> {\n+        Some(()).into_iter()\n+    }\n+\n+    fn check_connection(&self) -> impl Generator<Yield = (), Return = ()> + '_ {\n+        move || {\n+            let iter = self.get_connection();\n+            for i in iter {\n+                yield i\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    Database.check_connection();\n+}"}, {"sha": "94e2b2563df59baae386022e53c4752a6b152960", "filename": "src/test/run-pass/issues/issue-58435-ice-with-assoc-const.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-pass%2Fissues%2Fissue-58435-ice-with-assoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-pass%2Fissues%2Fissue-58435-ice-with-assoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-58435-ice-with-assoc-const.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,17 @@\n+// The const-evaluator was at one point ICE'ing while trying to\n+// evaluate the body of `fn id` during the `s.id()` call in main.\n+\n+struct S<T>(T);\n+\n+impl<T> S<T> {\n+    const ID: fn(&S<T>) -> &S<T> = |s| s;\n+    pub fn id(&self) -> &Self {\n+        Self::ID(self) // This, plus call below ...\n+    }\n+}\n+\n+fn main() {\n+    let s = S(10u32);\n+    assert!(S::<u32>::ID(&s).0 == 10); // Works fine\n+    assert!(s.id().0 == 10); // ... causes compiler to panic\n+}"}, {"sha": "fd53bb607f79d46bf7d1d5c18d8e3db769371b8a", "filename": "src/test/run-pass/threads-sendsync/sync-send-iterators-in-libcollections.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Fsync-send-iterators-in-libcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Fsync-send-iterators-in-libcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Fsync-send-iterators-in-libcollections.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -53,6 +53,7 @@ fn main() {\n     is_sync_send!(BTreeSet::<usize>::new(), union(&BTreeSet::<usize>::new()));\n \n     all_sync_send!(HashMap::<usize, usize>::new(), iter, iter_mut, drain, into_iter, keys, values);\n+    is_sync_send!(HashMap::<usize, usize>::new(), entry(0));\n     all_sync_send!(HashSet::<usize>::new(), iter, drain, into_iter);\n     is_sync_send!(HashSet::<usize>::new(), difference(&HashSet::<usize>::new()));\n     is_sync_send!(HashSet::<usize>::new(), symmetric_difference(&HashSet::<usize>::new()));"}, {"sha": "6a13b31fe932ff2a8636927edadd8d50a5049f04", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -4,7 +4,10 @@ error[E0308]: mismatched types\n LL | fn main() {\n    |           - expected `()` because of default return type\n LL |     &panic!()\n-   |     ^^^^^^^^^ expected (), found reference\n+   |     ^^^^^^^^^\n+   |     |\n+   |     expected (), found reference\n+   |     help: consider removing the borrow: `panic!()`\n    |\n    = note: expected type `()`\n               found type `&_`"}, {"sha": "7f0648b381dbd92372246288ba64fee9059c222e", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -28,7 +28,7 @@ struct S9;\n macro_rules! generate_s10 {\n     ($expr: expr) => {\n         #[cfg(feature = $expr)]\n-        //~^ ERROR expected unsuffixed literal or identifier, found concat!(\"nonexistent\")\n+        //~^ ERROR expected unsuffixed literal or identifier, found `concat!(\"nonexistent\")`\n         struct S10;\n     }\n }"}, {"sha": "7dab2b2b53f91d61ee683ba5123f53b6fdc3747d", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -52,11 +52,11 @@ error[E0565]: literal in `cfg` predicate value must be a string\n LL | #[cfg(a = b\"hi\")]  //~ ERROR literal in `cfg` predicate value must be a string\n    |           ^^^^^ help: consider removing the prefix: `\"hi\"`\n \n-error: expected unsuffixed literal or identifier, found concat!(\"nonexistent\")\n-  --> $DIR/cfg-attr-syntax-validation.rs:30:15\n+error: expected unsuffixed literal or identifier, found `concat!(\"nonexistent\")`\n+  --> $DIR/cfg-attr-syntax-validation.rs:30:25\n    |\n LL |         #[cfg(feature = $expr)]\n-   |               ^^^^^^^\n+   |                         ^^^^^\n ...\n LL | generate_s10!(concat!(\"nonexistent\"));\n    | -------------------------------------- in this macro invocation"}, {"sha": "40df237ee72eddb3effd6fbf47f509a63733ec60", "filename": "src/test/ui/const-generics/invalid-constant-in-args.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let _: Vec<&str, \"a\"> = Vec::new(); //~ ERROR wrong number of const arguments\n+}"}, {"sha": "1623f645124ab997caf097982a4938a93864125e", "filename": "src/test/ui/const-generics/invalid-constant-in-args.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,9 @@\n+error[E0107]: wrong number of const arguments: expected 0, found 1\n+  --> $DIR/invalid-constant-in-args.rs:2:22\n+   |\n+LL |     let _: Vec<&str, \"a\"> = Vec::new(); //~ ERROR wrong number of const arguments\n+   |                      ^^^ unexpected const argument\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "3457549a752392ce928ee309650deca03392297f", "filename": "src/test/ui/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -1,13 +1,19 @@\n error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:8:5\n    |\n-LL | fn g() {\n-   |        - help: try adding a return type: `-> &_`\n LL |     &panic!() //~ ERROR mismatched types\n    |     ^^^^^^^^^ expected (), found reference\n    |\n    = note: expected type `()`\n               found type `&_`\n+help: try adding a return type\n+   |\n+LL | fn g() -> &_ {\n+   |        ^^^^^\n+help: consider removing the borrow\n+   |\n+LL |     panic!() //~ ERROR mismatched types\n+   |     ^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:12:5"}, {"sha": "1358e0bde4c8248e9c6f40587ac0fb4a4ac487c4", "filename": "src/test/ui/issues/issue-50582.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    Vec::<[(); 1 + for x in 0..1 {}]>::new();\n+    //~^ ERROR cannot add\n+}"}, {"sha": "226f5a3f0fed24666998618635e9add9f2aeb89d", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: cannot add `()` to `{integer}`\n+  --> $DIR/issue-50582.rs:2:18\n+   |\n+LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n+   |                  ^ no implementation for `{integer} + ()`\n+   |\n+   = help: the trait `std::ops::Add<()>` is not implemented for `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "577709cf2919df905b043f46da93833cf0506600", "filename": "src/test/ui/issues/issue-58712.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-58712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-58712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58712.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,15 @@\n+struct AddrVec<H, A> {\n+    h: H,\n+    a: A,\n+}\n+\n+impl<H> AddrVec<H, DeviceId> {\n+    //~^ ERROR cannot find type `DeviceId` in this scope\n+    pub fn device(&self) -> DeviceId {\n+    //~^ ERROR cannot find type `DeviceId` in this scope\n+        self.tail()\n+    }\n+}\n+\n+fn main() {}\n+"}, {"sha": "6164ad7ee19b2af3814b5aeca225d08ca294aa6b", "filename": "src/test/ui/issues/issue-58712.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-58712.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-58712.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58712.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,15 @@\n+error[E0412]: cannot find type `DeviceId` in this scope\n+  --> $DIR/issue-58712.rs:6:20\n+   |\n+LL | impl<H> AddrVec<H, DeviceId> {\n+   |                    ^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `DeviceId` in this scope\n+  --> $DIR/issue-58712.rs:8:29\n+   |\n+LL |     pub fn device(&self) -> DeviceId {\n+   |                             ^^^^^^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "392e4ea0c2ecc2ca65d99dcc1dc02cb320e056b3", "filename": "src/test/ui/issues/issue-58857.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-58857.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-58857.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58857.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,7 @@\n+struct Conj<A> {a : A}\n+trait Valid {}\n+\n+impl<A: !Valid> Conj<A>{}\n+//~^ ERROR negative trait bounds are not supported\n+\n+fn main() {}"}, {"sha": "040e9eb8a65676a5d7d41b3e4c23984be22c49d8", "filename": "src/test/ui/issues/issue-58857.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,8 @@\n+error: negative trait bounds are not supported\n+  --> $DIR/issue-58857.rs:4:7\n+   |\n+LL | impl<A: !Valid> Conj<A>{}\n+   |       ^^^^^^^^ help: remove the trait bound\n+\n+error: aborting due to previous error\n+"}, {"sha": "63930e7f787fd3f6d11abb3ee0d87c2f8c9b232f", "filename": "src/test/ui/suggestions/format-borrow.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let a: String = &String::from(\"a\");\n+    //~^ ERROR mismatched types\n+    let b: String = &format!(\"b\");\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "44bb11faa7f38eab722a73a1c0f45d1a4d0f86ca", "filename": "src/test/ui/suggestions/format-borrow.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/format-borrow.rs:2:21\n+   |\n+LL |     let a: String = &String::from(\"a\");\n+   |                     ^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     expected struct `std::string::String`, found reference\n+   |                     help: consider removing the borrow: `String::from(\"a\")`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `&std::string::String`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/format-borrow.rs:4:21\n+   |\n+LL |     let b: String = &format!(\"b\");\n+   |                     ^^^^^^^^^^^^^\n+   |                     |\n+   |                     expected struct `std::string::String`, found reference\n+   |                     help: consider removing the borrow: `format!(\"b\")`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `&std::string::String`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e72a2d8ccc629e9943587e09ee5551f10a907746", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,7 @@\n+trait Bar {}\n+impl Bar for u8 {}\n+fn foo() -> impl Bar {\n+    5; //~^ ERROR the trait bound `(): Bar` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "f26fb141ccf80d636cab9721bcb03a722e94f692", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the trait bound `(): Bar` is not satisfied\n+  --> $DIR/impl-trait-return-trailing-semicolon.rs:3:13\n+   |\n+LL | fn foo() -> impl Bar {\n+   |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\n+LL |     5; //~^ ERROR the trait bound `(): Bar` is not satisfied\n+   |      - consider removing this semicolon\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "677003ebf225ca65d86b57d9fd064d75d2b4e509", "filename": "src/test/ui/suggestions/unused-closure-argument.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Funused-closure-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Funused-closure-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funused-closure-argument.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,20 @@\n+#![deny(unused_variables)]\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let points = vec!(Point { x: 1, y: 2 }, Point { x: 3, y: 4 });\n+\n+    let _: i32 = points.iter()\n+        .map(|Point { x, y }| y)\n+        //~^ ERROR unused variable\n+        .sum();\n+\n+    let _: i32 = points.iter()\n+        .map(|x| 4)\n+        //~^ ERROR unused variable\n+        .sum();\n+}"}, {"sha": "5cfdd79659b2737e90b4e756f717a19fda93304e", "filename": "src/test/ui/suggestions/unused-closure-argument.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Funused-closure-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fsuggestions%2Funused-closure-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funused-closure-argument.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,20 @@\n+error: unused variable: `x`\n+  --> $DIR/unused-closure-argument.rs:12:23\n+   |\n+LL |         .map(|Point { x, y }| y)\n+   |                       ^ help: try ignoring the field: `x: _`\n+   |\n+note: lint level defined here\n+  --> $DIR/unused-closure-argument.rs:1:9\n+   |\n+LL | #![deny(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: unused variable: `x`\n+  --> $DIR/unused-closure-argument.rs:17:15\n+   |\n+LL |         .map(|x| 4)\n+   |               ^ help: consider prefixing with an underscore: `_x`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d0167c8c268cf21502acf627c8df3f15da421f40", "filename": "src/test/ui/wf/wf-packed-on-proj-of-type-as-unimpl-trait.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.rs?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,31 @@\n+// rust-lang/rust#58158: We have special-case code to deal with case\n+// when a type is both packed and needs drop glue, (we move the fields\n+// out of their potentially unaligned locations before dropping them,\n+// which requires they be Sized; see PR #44884).\n+//\n+// So, we need to check if a given type needs drop-glue. That requires\n+// that we actually know that the concrete type, and we guard against\n+// the type having unknown parts (i.e. type variables) by ICE'ing in\n+// that scenario.\n+//\n+// But in a case where we have a projection (`Type as Trait::Assoc`)\n+// where `Type` does not actually implement `Trait`, we of course\n+// cannot have a concrete type, because there is no impl to look up\n+// the concrete type for the associated type `Assoc`.\n+//\n+// So, this test is just making sure that in such a case that we do\n+// not immediately ICE, and instead allow the underlying type error to\n+// surface.\n+\n+pub struct Matrix<S>(S);\n+pub struct DefaultAllocator;\n+\n+pub trait Allocator { type Buffer; }\n+\n+// impl Allocator for DefaultAllocator { type Buffer = (); }\n+\n+#[repr(packed)]\n+struct Foo(Matrix<<DefaultAllocator as Allocator>::Buffer>);\n+//~^ ERROR the trait bound `DefaultAllocator: Allocator` is not satisfied\n+\n+fn main() { }"}, {"sha": "e460cdcd3f3e5be1e222ad60fde5835f8e22a195", "filename": "src/test/ui/wf/wf-packed-on-proj-of-type-as-unimpl-trait.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8304351ad4223e4f618e9a329b2b94776b25e/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.stderr?ref=c9f8304351ad4223e4f618e9a329b2b94776b25e", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `DefaultAllocator: Allocator` is not satisfied\n+  --> $DIR/wf-packed-on-proj-of-type-as-unimpl-trait.rs:28:12\n+   |\n+LL | struct Foo(Matrix<<DefaultAllocator as Allocator>::Buffer>);\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Allocator` is not implemented for `DefaultAllocator`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}