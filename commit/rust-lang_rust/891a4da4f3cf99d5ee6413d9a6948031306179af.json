{"sha": "891a4da4f3cf99d5ee6413d9a6948031306179af", "node_id": "C_kwDOAAsO6NoAKDg5MWE0ZGE0ZjNjZjk5ZDVlZTY0MTNkOWE2OTQ4MDMxMzA2MTc5YWY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-28T09:45:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-28T14:09:56Z"}, "message": "stricter alignment enforcement for ScalarPair and Vector", "tree": {"sha": "4398421c7f8167f482e23b5bdedcc85593949af6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4398421c7f8167f482e23b5bdedcc85593949af6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/891a4da4f3cf99d5ee6413d9a6948031306179af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/891a4da4f3cf99d5ee6413d9a6948031306179af", "html_url": "https://github.com/rust-lang/rust/commit/891a4da4f3cf99d5ee6413d9a6948031306179af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/891a4da4f3cf99d5ee6413d9a6948031306179af/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58dd62a756b634ee705d4133684b4cf48d48df3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/58dd62a756b634ee705d4133684b4cf48d48df3d", "html_url": "https://github.com/rust-lang/rust/commit/58dd62a756b634ee705d4133684b4cf48d48df3d"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "a5311dbd1b77025b32d282d9cf689d70c5e53fcd", "filename": "compiler/rustc_ty_utils/src/layout_sanity_check.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/891a4da4f3cf99d5ee6413d9a6948031306179af/compiler%2Frustc_ty_utils%2Fsrc%2Flayout_sanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891a4da4f3cf99d5ee6413d9a6948031306179af/compiler%2Frustc_ty_utils%2Fsrc%2Flayout_sanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout_sanity_check.rs?ref=891a4da4f3cf99d5ee6413d9a6948031306179af", "patch": "@@ -135,22 +135,24 @@ pub(super) fn sanity_check_layout<'tcx>(\n                 }\n             }\n             Abi::ScalarPair(scalar1, scalar2) => {\n-                // Sanity-check scalar pairs. These are a bit more flexible and support\n-                // padding, but we can at least ensure both fields actually fit into the layout\n-                // and the alignment requirement has not been weakened.\n+                // Sanity-check scalar pairs. Computing the expected size and alignment is a bit of work.\n                 let size1 = scalar1.size(cx);\n                 let align1 = scalar1.align(cx).abi;\n                 let size2 = scalar2.size(cx);\n                 let align2 = scalar2.align(cx).abi;\n-                assert!(\n-                    layout.layout.align().abi >= cmp::max(align1, align2),\n-                    \"alignment mismatch between ABI and layout in {layout:#?}\",\n-                );\n+                let align = cmp::max(align1, align2);\n                 let field2_offset = size1.align_to(align2);\n-                assert!(\n-                    layout.layout.size() >= field2_offset + size2,\n+                let size = (field2_offset + size2).align_to(align);\n+                assert_eq!(\n+                    layout.layout.size(),\n+                    size,\n                     \"size mismatch between ABI and layout in {layout:#?}\"\n                 );\n+                assert_eq!(\n+                    layout.layout.align().abi,\n+                    align,\n+                    \"alignment mismatch between ABI and layout in {layout:#?}\",\n+                );\n                 // Check that the underlying pair of fields matches.\n                 let inner = skip_newtypes(cx, layout);\n                 assert!(\n@@ -233,17 +235,22 @@ pub(super) fn sanity_check_layout<'tcx>(\n                 );\n             }\n             Abi::Vector { count, element } => {\n-                // No padding in vectors. Alignment can be strengthened, though.\n-                assert!(\n-                    layout.layout.align().abi >= element.align(cx).abi,\n-                    \"alignment mismatch between ABI and layout in {layout:#?}\"\n-                );\n+                // No padding in vectors, except possibly for trailing padding to make the size a multiple of align.\n                 let size = element.size(cx) * count;\n+                let align = cx.data_layout().vector_align(size).abi;\n+                let size = size.align_to(align); // needed e.g. for vectors of size 3\n+                assert!(align >= element.align(cx).abi); // just sanity-checking `vector_align`.\n                 assert_eq!(\n                     layout.layout.size(),\n-                    size.align_to(cx.data_layout().vector_align(size).abi),\n+                    size,\n                     \"size mismatch between ABI and layout in {layout:#?}\"\n                 );\n+                assert_eq!(\n+                    layout.layout.align().abi,\n+                    align,\n+                    \"alignment mismatch between ABI and layout in {layout:#?}\"\n+                );\n+                // FIXME: Do some kind of check of the inner type, like for Scalar and ScalarPair.\n             }\n             Abi::Uninhabited | Abi::Aggregate { .. } => {} // Nothing to check.\n         }"}]}