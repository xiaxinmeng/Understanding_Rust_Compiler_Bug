{"sha": "505572b3f830c8f5140efaaf2adf8293e29b0db9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNTU3MmIzZjgzMGM4ZjUxNDBlZmFhZjJhZGY4MjkzZTI5YjBkYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-21T19:26:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-21T19:26:13Z"}, "message": "auto merge of #11700 : bharrisau/rust/thumb, r=alexcrichton\n\nTo build for the cortex-M series ARM processors LLC needs to be told to build for the thumb instruction set. There are two ways to do this, either with the triple \"thumb\\*-\\*-\\*\" or with -march=thumb (which just overrides the triple anyway). I chose the first way.\r\n\r\nThe following will fail because the local cc doesn't know what to do with -mthumb.\r\n````\r\nrustc test.rs --lib --target thumb-linux-eab\r\nerror: linking with `cc` failed: exit code: 1\r\nnote: cc: error: unrecognized command line option \u2018-mthumb\u2019\r\n````\r\n\r\nChanging the linker works as expected.\r\n````\r\nrustc test.rs --lib --target thumb-linux-eabi --linker arm-none-eabi-gcc\r\n````\r\n\r\nIdeally I'd have the triple thumb-none-eabi, but adding a new OS looks like much more work (and I'm not familiar enough with what it does to know if it is needed).", "tree": {"sha": "3a19f772ea175bda23c09e8e0c8251c38d527e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a19f772ea175bda23c09e8e0c8251c38d527e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/505572b3f830c8f5140efaaf2adf8293e29b0db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/505572b3f830c8f5140efaaf2adf8293e29b0db9", "html_url": "https://github.com/rust-lang/rust/commit/505572b3f830c8f5140efaaf2adf8293e29b0db9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/505572b3f830c8f5140efaaf2adf8293e29b0db9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "232d8e560561e07b3ba54c5d0234816e50342fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/232d8e560561e07b3ba54c5d0234816e50342fb3", "html_url": "https://github.com/rust-lang/rust/commit/232d8e560561e07b3ba54c5d0234816e50342fb3"}, {"sha": "50d0e07065b7cc9a08427a009740abd12397fc9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d0e07065b7cc9a08427a009740abd12397fc9d", "html_url": "https://github.com/rust-lang/rust/commit/50d0e07065b7cc9a08427a009740abd12397fc9d"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "92a0c90cd9ded2b56aa1c39bfced27141d8762bb", "filename": "src/librustc/back/arm.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/505572b3f830c8f5140efaaf2adf8293e29b0db9/src%2Flibrustc%2Fback%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505572b3f830c8f5140efaaf2adf8293e29b0db9/src%2Flibrustc%2Fback%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farm.rs?ref=505572b3f830c8f5140efaaf2adf8293e29b0db9", "patch": "@@ -14,6 +14,11 @@ use metadata::loader::meta_section_name;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t {\n+    let cc_args = if target_triple.contains(\"thumb\") {\n+        ~[~\"-mthumb\"]\n+    } else {\n+        ~[~\"-marm\"]\n+    };\n     return target_strs::t {\n         module_asm: ~\"\",\n \n@@ -63,6 +68,6 @@ pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::\n \n         target_triple: target_triple,\n \n-        cc_args: ~[~\"-marm\"],\n+        cc_args: cc_args,\n     };\n }"}, {"sha": "9cc12caa4783452d454c7aceb3175e9ea4cca429", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/505572b3f830c8f5140efaaf2adf8293e29b0db9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505572b3f830c8f5140efaaf2adf8293e29b0db9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=505572b3f830c8f5140efaaf2adf8293e29b0db9", "patch": "@@ -661,6 +661,7 @@ static architecture_abis : &'static [(&'static str, abi::Architecture)] = &'stat\n \n     (\"arm\",    abi::Arm),\n     (\"xscale\", abi::Arm),\n+    (\"thumb\",  abi::Arm),\n \n     (\"mips\",   abi::Mips)];\n "}]}