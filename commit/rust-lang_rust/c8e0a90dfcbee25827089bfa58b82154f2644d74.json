{"sha": "c8e0a90dfcbee25827089bfa58b82154f2644d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZTBhOTBkZmNiZWUyNTgyNzA4OWJmYTU4YjgyMTU0ZjI2NDRkNzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-12-31T18:45:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:05Z"}, "message": "tests: cases where we now do the right thing but did not before\n\nFixes #33684", "tree": {"sha": "432b5f4d702ae5db64d2513a6ca5e3751a439fba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432b5f4d702ae5db64d2513a6ca5e3751a439fba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e0a90dfcbee25827089bfa58b82154f2644d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e0a90dfcbee25827089bfa58b82154f2644d74", "html_url": "https://github.com/rust-lang/rust/commit/c8e0a90dfcbee25827089bfa58b82154f2644d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e0a90dfcbee25827089bfa58b82154f2644d74/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c96ff15249a73736222d41d87ade7013440945", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c96ff15249a73736222d41d87ade7013440945", "html_url": "https://github.com/rust-lang/rust/commit/d3c96ff15249a73736222d41d87ade7013440945"}], "stats": {"total": 274, "additions": 137, "deletions": 137}, "files": [{"sha": "4069e3b25ade05eede9e78fa42d5061581c41c23", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,16 +1,19 @@\n-error[E0308]: mismatched types\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+   |                            ^^^^^^^^^^^\n ...\n LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n LL | |                                             for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n    | |_________________________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n-              found type `std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:26), 'b) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:25), 'a) })...\n+   = note: ...so that the expression is assignable:\n+           expected std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>\n+              found std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "25b74d855bb487eb52e9816ac35d4381245af28a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,16 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+error: compilation successful\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n-LL | |                                 for<'a>    fn(&'a u32, &'a u32)) }\n-   | |__________________________________________________________________- in this macro invocation\n-   |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n-              found type `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n+LL | / fn main() {\n+LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n+LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n+LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n+...  |\n+LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "25b74d855bb487eb52e9816ac35d4381245af28a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+...  |\n+LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "25b74d855bb487eb52e9816ac35d4381245af28a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+...  |\n+LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "1225842665d99dca0e398facf43d817b934a28e0", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -2,14 +2,24 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+   |                            ^^^^^^^^^^^ lifetime mismatch\n ...\n LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | |                              fn(&'x u32)) }\n    | |___________________________________________- in this macro invocation\n    |\n    = note: expected type `std::option::Option<for<'a> fn(&'a u32)>`\n               found type `std::option::Option<fn(&'x u32)>`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:23), 'a) })...\n+note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 48:22\n+  --> $DIR/hr-subtype.rs:48:22\n+   |\n+LL |           fn supertype<'x,'y:'x,'z:'y>() {\n+   |                        ^^\n+...\n+LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n+LL | |                              fn(&'x u32)) }\n+   | |___________________________________________- in this macro invocation\n \n error: aborting due to previous error\n "}, {"sha": "25b74d855bb487eb52e9816ac35d4381245af28a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,16 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+error: compilation successful\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n-LL | |                                       for<'a>    fn(Co<'a>, Co<'a>)) }\n-   | |______________________________________________________________________- in this macro invocation\n-   |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n-              found type `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n+LL | / fn main() {\n+LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n+LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n+LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n+...  |\n+LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "25b74d855bb487eb52e9816ac35d4381245af28a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,16 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+error: compilation successful\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) -> Contra<'a>,\n-LL | |                                         for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n-   | |______________________________________________________________________________________- in this macro invocation\n-   |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n-              found type `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n+LL | / fn main() {\n+LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n+LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n+LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n+...  |\n+LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "25b74d855bb487eb52e9816ac35d4381245af28a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+...  |\n+LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "25b74d855bb487eb52e9816ac35d4381245af28a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,16 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+error: compilation successful\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>,\n-LL | |                                             for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n-   | |______________________________________________________________________________________________- in this macro invocation\n-   |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n-              found type `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n+LL | / fn main() {\n+LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n+LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n+LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n+...  |\n+LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "1a806bd2cb550852a3a0913e212fa1b70fa5759f", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,16 +1,19 @@\n-error[E0308]: mismatched types\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+   |                            ^^^^^^^^^^^\n ...\n LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | |                                         for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    | |__________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n-              found type `std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:25), 'a) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:26), 'b) })...\n+   = note: ...so that the expression is assignable:\n+           expected std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>\n+              found std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "25b74d855bb487eb52e9816ac35d4381245af28a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+...  |\n+LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "25b74d855bb487eb52e9816ac35d4381245af28a", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+...  |\n+LL | | //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n LL | | }\n    | |_^\n "}, {"sha": "ad4f39f8405281defcbdfd0dc7cd4d2373616e24", "filename": "src/test/ui/hr-subtype/hr-subtype.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -31,21 +31,17 @@ macro_rules! check {\n         #[cfg($rev)]\n         fn subtype<'x,'y:'x,'z:'y>() {\n             gimme::<$t2>(None::<$t1>);\n-            //[free_inv_x_vs_free_inv_y]~^ ERROR mismatched types\n+            //[free_inv_x_vs_free_inv_y]~^ ERROR\n         }\n \n         #[cfg($rev)]\n         fn supertype<'x,'y:'x,'z:'y>() {\n             gimme::<$t1>(None::<$t2>);\n-            //[bound_a_vs_free_x]~^ ERROR mismatched types\n-            //[free_x_vs_free_y]~^^ ERROR mismatched types\n-            //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR mismatched types\n-            //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^ ERROR mismatched types\n-            //[free_inv_x_vs_free_inv_y]~^^^^^ ERROR mismatched types\n-            //[bound_a_b_vs_bound_a]~^^^^^^ ERROR mismatched types\n-            //[bound_co_a_b_vs_bound_co_a]~^^^^^^^ ERROR mismatched types\n-            //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^ ERROR mismatched types\n-            //[bound_co_a_co_b_ret_contra_a]~^^^^^^^^^ ERROR mismatched types\n+            //[bound_a_vs_free_x]~^ ERROR\n+            //[free_x_vs_free_y]~^^ ERROR\n+            //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR\n+            //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^ ERROR\n+            //[free_inv_x_vs_free_inv_y]~^^^^^ ERROR\n         }\n     }\n }\n@@ -103,4 +99,8 @@ fn main() {\n //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+//[bound_a_b_vs_bound_a]~^^^^^^ ERROR compilation successful\n+//[bound_co_a_co_b_ret_contra_a]~^^^^^^^ ERROR compilation successful\n+//[bound_co_a_b_vs_bound_co_a]~^^^^^^^^ ERROR compilation successful\n+//[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR compilation successful\n }"}, {"sha": "324dc86bd92b8175b2cb8fd388f20758bf5c23c1", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,11 +1,16 @@\n // Test that we give a note when the old LUB/GLB algorithm would have\n-// succeeded but the new code (which is stricter) gives an error.\n+// succeeded but the new code (which requires equality) gives an\n+// error. However, now that we handle subtyping correctly, we no\n+// longer get an error, because we recognize these two types as\n+// equivalent!\n+//\n+// compile-pass\n \n fn foo(\n     x: fn(&u8, &u8),\n     y: for<'a> fn(&'a u8, &'a u8),\n ) {\n-    let z = match 22 { //~ ERROR incompatible types\n+    let z = match 22 {\n         0 => x,\n         _ => y,\n     };"}, {"sha": "9c397a8fd2cc53d1f1e043b8867f56039578eba0", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,17 +0,0 @@\n-error[E0308]: match arms have incompatible types\n-  --> $DIR/old-lub-glb-hr.rs:8:13\n-   |\n-LL |       let z = match 22 { //~ ERROR incompatible types\n-   |  _____________^\n-LL | |         0 => x,\n-LL | |         _ => y,\n-   | |              - match arm with an incompatible type\n-LL | |     };\n-   | |_____^ expected bound lifetime parameter, found concrete lifetime\n-   |\n-   = note: expected type `for<'r, 's> fn(&'r u8, &'s u8)`\n-              found type `for<'a> fn(&'a u8, &'a u8)`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "242119cc201dafcbc273639118b14b2a3cd1340f", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.rs?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -37,20 +37,15 @@ fn baz(x: &S) -> &S {\n fn supply_F() {\n     want_F(foo);\n \n-    // FIXME(#33684) -- this should be a subtype, but current alg. rejects it incorrectly\n-    want_F(bar); //~ ERROR E0308\n+    want_F(bar);\n \n     want_F(baz);\n }\n \n fn supply_G() {\n     want_G(foo);\n     want_G(bar);\n-    want_G(baz);\n-    //~^ ERROR mismatched types\n-    //~| expected type `for<'cx> fn(&'cx S) -> &'static S`\n-    //~| found type `for<'r> fn(&'r S) -> &'r S {baz}`\n-    //~| expected concrete lifetime, found bound lifetime parameter 'cx\n+    want_G(baz); //~ ERROR\n }\n \n pub fn main() {"}, {"sha": "c9ccb9b6ded3dcb7deb24cc284a1f26c14535436", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,21 +1,15 @@\n-error[E0308]: mismatched types\n-  --> $DIR/regions-fn-subtyping-return-static-fail.rs:41:12\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n+  --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12\n    |\n-LL |     want_F(bar); //~ ERROR E0308\n-   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n+LL |     want_G(baz); //~ ERROR\n+   |            ^^^\n    |\n-   = note: expected type `for<'cx> fn(&'cx S) -> &'cx S`\n-              found type `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U3, name: BrNamed(crate0:DefIndex(1:11), 'cx) })...\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+   = note: ...so that the expression is assignable:\n+           expected for<'cx> fn(&'cx S) -> &'static S\n+              found for<'r> fn(&'r S) -> &'r S\n \n-error[E0308]: mismatched types\n-  --> $DIR/regions-fn-subtyping-return-static-fail.rs:49:12\n-   |\n-LL |     want_G(baz);\n-   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n-   |\n-   = note: expected type `for<'cx> fn(&'cx S) -> &'static S`\n-              found type `for<'r> fn(&'r S) -> &'r S {baz}`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "4d6d342f571a5c6b27fecbdd0ab0d5dc5acfa53f", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -5,6 +5,8 @@\n // *ANY* lifetime and returns a reference with the 'static lifetime.\n // This can safely be considered to be an instance of `F` because all\n // lifetimes are sublifetimes of 'static.\n+//\n+// compile-pass\n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n@@ -37,8 +39,7 @@ fn baz(x: &S) -> &S {\n fn supply_F() {\n     want_F(foo);\n \n-    // FIXME(#33684) -- this should be a subtype, but current alg. rejects it incorrectly\n-    want_F(bar); //~ ERROR E0308\n+    want_F(bar);\n \n     want_F(baz);\n }"}, {"sha": "61eaf9fcf109b01d782a96095a09581468d9c927", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.stderr", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0a90dfcbee25827089bfa58b82154f2644d74/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr?ref=c8e0a90dfcbee25827089bfa58b82154f2644d74", "patch": "@@ -1,12 +1,26 @@\n-error[E0308]: mismatched types\n-  --> $DIR/regions-fn-subtyping-return-static.rs:41:12\n+warning: function `want_F` should have a snake case name such as `want_f`\n+  --> $DIR/regions-fn-subtyping-return-static.rs:18:1\n    |\n-LL |     want_F(bar); //~ ERROR E0308\n-   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n+LL | fn want_F(f: F) { }\n+   | ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected type `for<'cx> fn(&'cx S) -> &'cx S`\n-              found type `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n+   = note: #[warn(non_snake_case)] on by default\n \n-error: aborting due to previous error\n+warning: function `want_G` should have a snake case name such as `want_g`\n+  --> $DIR/regions-fn-subtyping-return-static.rs:22:1\n+   |\n+LL | fn want_G(f: G) { }\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+warning: function `supply_F` should have a snake case name such as `supply_f`\n+  --> $DIR/regions-fn-subtyping-return-static.rs:39:1\n+   |\n+LL | / fn supply_F() {\n+LL | |     want_F(foo);\n+LL | |\n+LL | |     want_F(bar);\n+LL | |\n+LL | |     want_F(baz);\n+LL | | }\n+   | |_^\n \n-For more information about this error, try `rustc --explain E0308`."}]}