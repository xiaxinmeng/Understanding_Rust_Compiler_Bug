{"sha": "612553cb3921f428668602afda1b106e0fd54d73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMjU1M2NiMzkyMWY0Mjg2Njg2MDJhZmRhMWIxMDZlMGZkNTRkNzM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-17T23:41:47Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-17T23:52:05Z"}, "message": "syntax: Allow 1-tuple expressions\n\nThis is for greater uniformity (for example, macros that generate\ntuples). rustc already supported 1-tuple patterns, but there was no\nway to construct a 1-tuple term.", "tree": {"sha": "cc68e58ac9ed47482d768890d3152cf6c783b7d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc68e58ac9ed47482d768890d3152cf6c783b7d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/612553cb3921f428668602afda1b106e0fd54d73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/612553cb3921f428668602afda1b106e0fd54d73", "html_url": "https://github.com/rust-lang/rust/commit/612553cb3921f428668602afda1b106e0fd54d73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/612553cb3921f428668602afda1b106e0fd54d73/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6945f2a45d56ef692cd8f2955dcef4e4c10d50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6945f2a45d56ef692cd8f2955dcef4e4c10d50a", "html_url": "https://github.com/rust-lang/rust/commit/a6945f2a45d56ef692cd8f2955dcef4e4c10d50a"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "b5c68d6715e4ad1f96b55ba714e157d6b6630258", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/612553cb3921f428668602afda1b106e0fd54d73/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/612553cb3921f428668602afda1b106e0fd54d73/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=612553cb3921f428668602afda1b106e0fd54d73", "patch": "@@ -1061,6 +1061,9 @@ pub impl Parser {\n \n         if self.token == token::LPAREN {\n             self.bump();\n+            // (e) is parenthesized e\n+            // (e,) is a tuple with only one field, e\n+            let mut one_tuple = false;\n             if self.token == token::RPAREN {\n                 hi = self.span.hi;\n                 self.bump();\n@@ -1069,12 +1072,18 @@ pub impl Parser {\n             }\n             let mut es = ~[self.parse_expr()];\n             while self.token == token::COMMA {\n-                self.bump(); es.push(self.parse_expr());\n+                self.bump();\n+                if self.token != token::RPAREN {\n+                    es.push(self.parse_expr());\n+                }\n+                else {\n+                    one_tuple = true;\n+                }\n             }\n             hi = self.span.hi;\n             self.expect(token::RPAREN);\n \n-            return if es.len() == 1 {\n+            return if es.len() == 1 && !one_tuple {\n                 self.mk_expr(lo, self.span.hi, expr_paren(es[0]))\n             }\n             else {\n@@ -2158,11 +2167,13 @@ pub impl Parser {\n                 pat = pat_lit(expr);\n             } else {\n                 let mut fields = ~[self.parse_pat(refutable)];\n-                while self.token == token::COMMA {\n-                    self.bump();\n-                    fields.push(self.parse_pat(refutable));\n+                if self.look_ahead(1) != token::RPAREN {\n+                    while self.token == token::COMMA {\n+                        self.bump();\n+                        fields.push(self.parse_pat(refutable));\n+                    }\n                 }\n-                if vec::len(fields) == 1u { self.expect(token::COMMA); }\n+                if fields.len() == 1 { self.expect(token::COMMA); }\n                 hi = self.span.hi;\n                 self.expect(token::RPAREN);\n                 pat = pat_tup(fields);"}, {"sha": "8f2ad6ecb90a85b13ad14d56a58f148040c67b51", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/612553cb3921f428668602afda1b106e0fd54d73/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/612553cb3921f428668602afda1b106e0fd54d73/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=612553cb3921f428668602afda1b106e0fd54d73", "patch": "@@ -1199,6 +1199,9 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n       ast::expr_tup(exprs) => {\n         popen(s);\n         commasep_exprs(s, inconsistent, exprs);\n+        if exprs.len() == 1 {\n+            word(s.s, ~\",\");\n+        }\n         pclose(s);\n       }\n       ast::expr_call(func, args, sugar) => {\n@@ -1634,6 +1637,9 @@ pub fn print_pat(s: @ps, &&pat: @ast::pat, refutable: bool) {\n       ast::pat_tup(elts) => {\n         popen(s);\n         commasep(s, inconsistent, elts, |s, p| print_pat(s, p, refutable));\n+        if elts.len() == 1 {\n+            word(s.s, ~\",\");\n+        }\n         pclose(s);\n       }\n       ast::pat_box(inner) => {"}, {"sha": "4f2daa7d6088619a19e304ae99c479e2d9cceed1", "filename": "src/test/run-pass/one-tuple.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/612553cb3921f428668602afda1b106e0fd54d73/src%2Ftest%2Frun-pass%2Fone-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/612553cb3921f428668602afda1b106e0fd54d73/src%2Ftest%2Frun-pass%2Fone-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fone-tuple.rs?ref=612553cb3921f428668602afda1b106e0fd54d73", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Why one-tuples? Because macros.\n+\n+fn main() {\n+    match ('c',) {\n+        (x,) => {\n+            assert x == 'c';\n+        }\n+    }\n+}\n+"}]}