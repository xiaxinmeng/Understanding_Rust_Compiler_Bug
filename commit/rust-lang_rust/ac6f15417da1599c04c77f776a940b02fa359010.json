{"sha": "ac6f15417da1599c04c77f776a940b02fa359010", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNmYxNTQxN2RhMTU5OWMwNGM3N2Y3NzZhOTQwYjAyZmEzNTkwMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-15T12:49:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-15T12:49:02Z"}, "message": "auto merge of #7130 : huonw/rust/rustdoc-highlight, r=thestinger\n\nThis means that type definitions and function signatures have\r\npretty colours.", "tree": {"sha": "aa0dc4415e1d87c7313ad3ab460b0f2cff60c5a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa0dc4415e1d87c7313ad3ab460b0f2cff60c5a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac6f15417da1599c04c77f776a940b02fa359010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6f15417da1599c04c77f776a940b02fa359010", "html_url": "https://github.com/rust-lang/rust/commit/ac6f15417da1599c04c77f776a940b02fa359010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac6f15417da1599c04c77f776a940b02fa359010/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df66c194d01f34ae319a6b79e45125d4d18be01", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df66c194d01f34ae319a6b79e45125d4d18be01", "html_url": "https://github.com/rust-lang/rust/commit/6df66c194d01f34ae319a6b79e45125d4d18be01"}, {"sha": "d3618025400eb4cea067380bfad11948969b7bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3618025400eb4cea067380bfad11948969b7bc2", "html_url": "https://github.com/rust-lang/rust/commit/d3618025400eb4cea067380bfad11948969b7bc2"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "17db7c24a7c8fc250407637aa47101fa34dd38d9", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ac6f15417da1599c04c77f776a940b02fa359010/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6f15417da1599c04c77f776a940b02fa359010/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=ac6f15417da1599c04c77f776a940b02fa359010", "patch": "@@ -402,19 +402,17 @@ fn write_fnlike(\n fn write_sig(ctxt: &Ctxt, sig: Option<~str>) {\n     match sig {\n         Some(sig) => {\n-            ctxt.w.put_line(code_block_indent(sig));\n+            ctxt.w.put_line(code_block(sig));\n             ctxt.w.put_line(~\"\");\n         }\n         None => fail!(\"unimplemented\")\n     }\n }\n \n-fn code_block_indent(s: ~str) -> ~str {\n-    let mut indented = ~[];\n-    for str::each_line_any(s) |line| {\n-        indented.push(fmt!(\"    %s\", line));\n-    }\n-    indented.connect(\"\\n\")\n+fn code_block(s: ~str) -> ~str {\n+    fmt!(\"~~~ {.rust}\n+%s\n+~~~\", s)\n }\n \n fn write_const(\n@@ -754,17 +752,17 @@ mod test {\n     #[test]\n     fn should_write_the_function_signature() {\n         let markdown = render(~\"#[doc = \\\"f\\\"] fn a() { }\");\n-        assert!(markdown.contains(\"\\n    fn a()\\n\"));\n+        assert!(markdown.contains(\"\\n~~~ {.rust}\\nfn a()\\n\"));\n     }\n \n     #[test]\n     fn should_insert_blank_line_after_fn_signature() {\n         let markdown = render(~\"#[doc = \\\"f\\\"] fn a() { }\");\n-        assert!(markdown.contains(\"fn a()\\n\\n\"));\n+        assert!(markdown.contains(\"fn a()\\n~~~\\n\\n\"));\n     }\n \n     #[test]\n-    fn should_correctly_indent_fn_signature() {\n+    fn should_correctly_bracket_fn_signature() {\n         let doc = create_doc(~\"fn a() { }\");\n         let doc = doc::Doc{\n             pages: ~[\n@@ -781,13 +779,13 @@ mod test {\n             ]\n         };\n         let markdown = write_markdown_str(doc);\n-        assert!(markdown.contains(\"    line 1\\n    line 2\"));\n+        assert!(markdown.contains(\"~~~ {.rust}\\nline 1\\nline 2\\n~~~\"));\n     }\n \n     #[test]\n     fn should_leave_blank_line_between_fn_header_and_sig() {\n         let markdown = render(~\"fn a() { }\");\n-        assert!(markdown.contains(\"Function `a`\\n\\n    fn a()\"));\n+        assert!(markdown.contains(\"Function `a`\\n\\n~~~ {.rust}\\nfn a()\"));\n     }\n \n     #[test]\n@@ -887,7 +885,7 @@ mod test {\n     #[test]\n     fn should_write_trait_method_signature() {\n         let markdown = render(~\"trait i { fn a(&self); }\");\n-        assert!(markdown.contains(\"\\n    fn a(&self)\"));\n+        assert!(markdown.contains(\"\\n~~~ {.rust}\\nfn a(&self)\"));\n     }\n \n     #[test]\n@@ -927,7 +925,7 @@ mod test {\n     fn should_write_impl_method_signature() {\n         let markdown = render(\n             ~\"impl int { fn a(&mut self) { } }\");\n-        assert!(markdown.contains(\"\\n    fn a(&mut self)\"));\n+        assert!(markdown.contains(\"~~~ {.rust}\\nfn a(&mut self)\"));\n     }\n \n     #[test]\n@@ -946,7 +944,7 @@ mod test {\n     #[test]\n     fn should_write_type_signature() {\n         let markdown = render(~\"type t = int;\");\n-        assert!(markdown.contains(\"\\n\\n    type t = int\\n\\n\"));\n+        assert!(markdown.contains(\"\\n\\n~~~ {.rust}\\ntype t = int\\n~~~\\n\"));\n     }\n \n     #[test]"}]}