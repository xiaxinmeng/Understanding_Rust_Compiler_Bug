{"sha": "695fe965173795f9242dfcad6d1c07d7a17b106a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NWZlOTY1MTczNzk1ZjkyNDJkZmNhZDZkMWMwN2Q3YTE3YjEwNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-13T13:16:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-13T13:16:53Z"}, "message": "Auto merge of #66366 - JohnTitor:rollup-xlc1bj2, r=JohnTitor\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #65932 (download .tar.xz if python3 is used)\n - #66094 (Fix documentation for `Iterator::count()`.)\n - #66166 (rename cfg(rustdoc) into cfg(doc))\n - #66186 (Add long error explanation for E0623)\n - #66227 (docs: Fix link to BufWriter::flush)\n - #66248 (add raw ptr variant of UnsafeCell::get)\n - #66292 (add Result::map_or)\n - #66297 (Add a callback that allows compiler consumers to override queries.)\n - #66317 (Use a relative bindir for rustdoc to find rustc)\n - #66330 (Improve non-exhaustiveness handling in usefulness checking)\n - #66331 (Add some tests for fixed ICEs)\n - #66334 (Move Session fields to CrateStore)\n - #66335 (Move self-profile infrastructure to data structures)\n - #66337 (Remove dead code for encoding/decoding lint IDs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9097068ee322e19c2a947de662df6c3a1ed50cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9097068ee322e19c2a947de662df6c3a1ed50cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/695fe965173795f9242dfcad6d1c07d7a17b106a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/695fe965173795f9242dfcad6d1c07d7a17b106a", "html_url": "https://github.com/rust-lang/rust/commit/695fe965173795f9242dfcad6d1c07d7a17b106a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/695fe965173795f9242dfcad6d1c07d7a17b106a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "374ad1b0063963060a00a3110e44d76e7105d059", "url": "https://api.github.com/repos/rust-lang/rust/commits/374ad1b0063963060a00a3110e44d76e7105d059", "html_url": "https://github.com/rust-lang/rust/commit/374ad1b0063963060a00a3110e44d76e7105d059"}, {"sha": "d52dafd2a885f91081faa0ff3dcd4ea24ef6d073", "url": "https://api.github.com/repos/rust-lang/rust/commits/d52dafd2a885f91081faa0ff3dcd4ea24ef6d073", "html_url": "https://github.com/rust-lang/rust/commit/d52dafd2a885f91081faa0ff3dcd4ea24ef6d073"}], "stats": {"total": 1107, "additions": 789, "deletions": 318}, "files": [{"sha": "7c074fb18a6f16b62f584de5fcfcab6df0caf159", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -3120,7 +3120,6 @@ dependencies = [\n  \"graphviz\",\n  \"jobserver\",\n  \"log\",\n- \"measureme\",\n  \"num_cpus\",\n  \"parking_lot 0.9.0\",\n  \"polonius-engine\",\n@@ -3470,6 +3469,7 @@ dependencies = [\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n+ \"bitflags\",\n  \"cfg-if\",\n  \"crossbeam-utils 0.6.5\",\n  \"ena\",\n@@ -3478,6 +3478,7 @@ dependencies = [\n  \"jobserver\",\n  \"lazy_static 1.3.0\",\n  \"log\",\n+ \"measureme\",\n  \"parking_lot 0.9.0\",\n  \"rustc-hash\",\n  \"rustc-rayon 0.3.0\","}, {"sha": "6937fb922de486e1231e947c58031fddc5db076d", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     let mut dylib_path = bootstrap::util::dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir.clone()));\n \n-    //FIXME(misdreavus): once stdsimd uses cfg(rustdoc) instead of cfg(dox), remove the `--cfg dox`\n+    //FIXME(misdreavus): once stdsimd uses cfg(doc) instead of cfg(dox), remove the `--cfg dox`\n     //arguments here\n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)"}, {"sha": "730e8cf05d41d784c02d25eb5bac589fcabe6de7", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -102,10 +102,10 @@ def verify(path, sha_path, verbose):\n     return verified\n \n \n-def unpack(tarball, dst, verbose=False, match=None):\n+def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     \"\"\"Unpack the given tarball file\"\"\"\n     print(\"extracting\", tarball)\n-    fname = os.path.basename(tarball).replace(\".tar.gz\", \"\")\n+    fname = os.path.basename(tarball).replace(tarball_suffix, \"\")\n     with contextlib.closing(tarfile.open(tarball)) as tar:\n         for member in tar.getnames():\n             if \"/\" not in member:\n@@ -331,6 +331,7 @@ def __init__(self):\n         self.use_vendored_sources = ''\n         self.verbose = False\n \n+\n     def download_stage0(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n \n@@ -344,18 +345,30 @@ def download_stage0(self):\n         rustc_channel = self.rustc_channel\n         cargo_channel = self.cargo_channel\n \n+        def support_xz():\n+            try:\n+                with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+                    temp_path = temp_file.name\n+                with tarfile.open(temp_path, \"w:xz\") as tar:\n+                    pass\n+                return True\n+            except tarfile.CompressionError:\n+                return False\n+\n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or\n                  self.program_out_of_date(self.rustc_stamp())):\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n-            filename = \"rust-std-{}-{}.tar.gz\".format(\n-                rustc_channel, self.build)\n+            tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+            filename = \"rust-std-{}-{}{}\".format(\n+                rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n-            self._download_stage0_helper(filename, pattern)\n+            self._download_stage0_helper(filename, pattern, tarball_suffix)\n \n-            filename = \"rustc-{}-{}.tar.gz\".format(rustc_channel, self.build)\n-            self._download_stage0_helper(filename, \"rustc\")\n+            filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n+                                              tarball_suffix)\n+            self._download_stage0_helper(filename, \"rustc\", tarball_suffix)\n             self.fix_executable(\"{}/bin/rustc\".format(self.bin_root()))\n             self.fix_executable(\"{}/bin/rustdoc\".format(self.bin_root()))\n             with output(self.rustc_stamp()) as rust_stamp:\n@@ -365,20 +378,22 @@ def download_stage0(self):\n             # libraries/binaries that are included in rust-std with\n             # the system MinGW ones.\n             if \"pc-windows-gnu\" in self.build:\n-                filename = \"rust-mingw-{}-{}.tar.gz\".format(\n-                    rustc_channel, self.build)\n-                self._download_stage0_helper(filename, \"rust-mingw\")\n+                filename = \"rust-mingw-{}-{}{}\".format(\n+                    rustc_channel, self.build, tarball_suffix)\n+                self._download_stage0_helper(filename, \"rust-mingw\", tarball_suffix)\n \n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or\n                  self.program_out_of_date(self.cargo_stamp())):\n-            filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n-            self._download_stage0_helper(filename, \"cargo\")\n+            tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+            filename = \"cargo-{}-{}{}\".format(cargo_channel, self.build,\n+                                              tarball_suffix)\n+            self._download_stage0_helper(filename, \"cargo\", tarball_suffix)\n             self.fix_executable(\"{}/bin/cargo\".format(self.bin_root()))\n             with output(self.cargo_stamp()) as cargo_stamp:\n                 cargo_stamp.write(self.date)\n \n-    def _download_stage0_helper(self, filename, pattern):\n+    def _download_stage0_helper(self, filename, pattern, tarball_suffix):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, self.date)\n         if not os.path.exists(rustc_cache):\n@@ -388,7 +403,7 @@ def _download_stage0_helper(self, filename, pattern):\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n             get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n-        unpack(tarball, self.bin_root(), match=pattern, verbose=self.verbose)\n+        unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n     @staticmethod\n     def fix_executable(fname):"}, {"sha": "99b8ddf7db1f0c704785a9fef9502150ac2e343d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -1242,7 +1242,8 @@ impl<'a> Builder<'a> {\n             cargo.arg(\"--frozen\");\n         }\n \n-        cargo.env(\"RUSTC_INSTALL_BINDIR\", &self.config.bindir);\n+        // Try to use a sysroot-relative bindir, in case it was configured absolutely.\n+        cargo.env(\"RUSTC_INSTALL_BINDIR\", self.config.bindir_relative());\n \n         self.ci_env.force_coloring_in_ci(&mut cargo);\n "}, {"sha": "0c03b95c7b251035eb5f7ce4936877b65f481f14", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -647,6 +647,20 @@ impl Config {\n         config\n     }\n \n+    /// Try to find the relative path of `bindir`, otherwise return it in full.\n+    pub fn bindir_relative(&self) -> &Path {\n+        let bindir = &self.bindir;\n+        if bindir.is_absolute() {\n+            // Try to make it relative to the prefix.\n+            if let Some(prefix) = &self.prefix {\n+                if let Ok(stripped) = bindir.strip_prefix(prefix) {\n+                    return stripped;\n+                }\n+            }\n+        }\n+        bindir\n+    }\n+\n     /// Try to find the relative path of `libdir`.\n     pub fn libdir_relative(&self) -> Option<&Path> {\n         let libdir = self.libdir.as_ref()?;"}, {"sha": "f8be04a1087bf87245e7b7f27ad5d3069f468359", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -106,24 +106,24 @@ item, it will be accompanied by a banner explaining that the item is only availa\n platforms.\n \n For Rustdoc to document an item, it needs to see it, regardless of what platform it's currently\n-running on. To aid this, Rustdoc sets the flag `#[cfg(rustdoc)]` when running on your crate.\n+running on. To aid this, Rustdoc sets the flag `#[cfg(doc)]` when running on your crate.\n Combining this with the target platform of a given item allows it to appear when building your crate\n normally on that platform, as well as when building documentation anywhere.\n \n-For example, `#[cfg(any(windows, rustdoc))]` will preserve the item either on Windows or during the\n+For example, `#[cfg(any(windows, doc))]` will preserve the item either on Windows or during the\n documentation process. Then, adding a new attribute `#[doc(cfg(windows))]` will tell Rustdoc that\n the item is supposed to be used on Windows. For example:\n \n ```rust\n #![feature(doc_cfg)]\n \n /// Token struct that can only be used on Windows.\n-#[cfg(any(windows, rustdoc))]\n+#[cfg(any(windows, doc))]\n #[doc(cfg(windows))]\n pub struct WindowsToken;\n \n /// Token struct that can only be used on Unix.\n-#[cfg(any(unix, rustdoc))]\n+#[cfg(any(unix, doc))]\n #[doc(cfg(unix))]\n pub struct UnixToken;\n ```"}, {"sha": "e75f1aea992294db3a73c571094a7b1cc0b1ce0d", "filename": "src/doc/unstable-book/src/language-features/doc-cfg.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -13,7 +13,7 @@ This attribute has two effects:\n 2. The item's doc-tests will only run on the specific platform.\n \n In addition to allowing the use of the `#[doc(cfg)]` attribute, this feature enables the use of a\n-special conditional compilation flag, `#[cfg(rustdoc)]`, set whenever building documentation on your\n+special conditional compilation flag, `#[cfg(doc)]`, set whenever building documentation on your\n crate.\n \n This feature was introduced as part of PR [#43348] to allow the platform-specific parts of the\n@@ -22,7 +22,7 @@ standard library be documented.\n ```rust\n #![feature(doc_cfg)]\n \n-#[cfg(any(windows, rustdoc))]\n+#[cfg(any(windows, doc))]\n #[doc(cfg(windows))]\n /// The application's icon in the notification area (a.k.a. system tray).\n ///"}, {"sha": "03f32e726187b09ea86af46601df58465cd16c31", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -1545,9 +1545,46 @@ impl<T: ?Sized> UnsafeCell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn get(&self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n-        // #[repr(transparent)]\n+        // #[repr(transparent)]. This exploits libstd's special status, there is\n+        // no guarantee for user code that this will work in future versions of the compiler!\n         self as *const UnsafeCell<T> as *const T as *mut T\n     }\n+\n+    /// Gets a mutable pointer to the wrapped value.\n+    /// The difference to [`get`] is that this function accepts a raw pointer,\n+    /// which is useful to avoid the creation of temporary references.\n+    ///\n+    /// The result can be cast to a pointer of any kind.\n+    /// Ensure that the access is unique (no active references, mutable or not)\n+    /// when casting to `&mut T`, and ensure that there are no mutations\n+    /// or mutable aliases going on when casting to `&T`.\n+    ///\n+    /// [`get`]: #method.get\n+    ///\n+    /// # Examples\n+    ///\n+    /// Gradual initialization of an `UnsafeCell` requires `raw_get`, as\n+    /// calling `get` would require creating a reference to uninitialized data:\n+    ///\n+    /// ```\n+    /// #![feature(unsafe_cell_raw_get)]\n+    /// use std::cell::UnsafeCell;\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let m = MaybeUninit::<UnsafeCell<i32>>::uninit();\n+    /// unsafe { UnsafeCell::raw_get(m.as_ptr()).write(5); }\n+    /// let uc = unsafe { m.assume_init() };\n+    ///\n+    /// assert_eq!(uc.into_inner(), 5);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"66358\")]\n+    pub const fn raw_get(this: *const Self) -> *mut T {\n+        // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n+        // #[repr(transparent)]. This exploits libstd's special status, there is\n+        // no guarantee for user code that this will work in future versions of the compiler!\n+        this as *const T as *mut T\n+    }\n }\n \n #[stable(feature = \"unsafe_cell_default\", since = \"1.10.0\")]"}, {"sha": "b7a35568e3fc52a1beb20dab004ab969e14b3c0d", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -201,12 +201,13 @@ pub trait Iterator {\n \n     /// Consumes the iterator, counting the number of iterations and returning it.\n     ///\n-    /// This method will evaluate the iterator until its [`next`] returns\n-    /// [`None`]. Once [`None`] is encountered, `count()` returns the number of\n-    /// times it called [`next`].\n+    /// This method will call [`next`] repeatedly until [`None`] is encountered,\n+    /// returning the number of times it saw [`Some`]. Note that [`next`] has to be\n+    /// called at least once even if the iterator does not have any elements.\n     ///\n     /// [`next`]: #tymethod.next\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n     ///\n     /// # Overflow Behavior\n     ///"}, {"sha": "06c7041703ae51971b291868bab3e4e057282e7d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -514,6 +514,28 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Applies a function to the contained value (if any),\n+    /// or returns the provided default (if not).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_map_or)]\n+    /// let x: Result<_, &str> = Ok(\"foo\");\n+    /// assert_eq!(x.map_or(42, |v| v.len()), 3);\n+    ///\n+    /// let x: Result<&str, _> = Err(\"bar\");\n+    /// assert_eq!(x.map_or(42, |v| v.len()), 42);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_map_or\", issue = \"66293\")]\n+    pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {\n+        match self {\n+            Ok(t) => f(t),\n+            Err(_) => default,\n+        }\n+    }\n+\n     /// Maps a `Result<T, E>` to `U` by applying a function to a\n     /// contained [`Ok`] value, or a fallback function to a\n     /// contained [`Err`] value."}, {"sha": "bcbe765b85073cef280a035248e9939cc341a7dd", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -40,4 +40,3 @@ byteorder = { version = \"1.3\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-measureme = \"0.4\""}, {"sha": "d5c2db5fb970532a0ad078d9c042cf6647a048ba", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -1896,6 +1896,51 @@ fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n ```\n \"##,\n \n+E0623: r##\"\n+A lifetime didn't match what was expected.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0623\n+struct Foo<'a> {\n+    x: &'a isize,\n+}\n+\n+fn bar<'short, 'long>(c: Foo<'short>, l: &'long isize) {\n+    let _: Foo<'long> = c; // error!\n+}\n+```\n+\n+In this example, we tried to set a value with an incompatible lifetime to\n+another one (`'long` is unrelated to `'short`). We can solve this issue in\n+two different ways:\n+\n+Either we make `'short` live at least as long as `'long`:\n+\n+```\n+struct Foo<'a> {\n+    x: &'a isize,\n+}\n+\n+// we set 'short to live at least as long as 'long\n+fn bar<'short: 'long, 'long>(c: Foo<'short>, l: &'long isize) {\n+    let _: Foo<'long> = c; // ok!\n+}\n+```\n+\n+Or we use only one lifetime:\n+\n+```\n+struct Foo<'a> {\n+    x: &'a isize,\n+}\n+\n+fn bar<'short>(c: Foo<'short>, l: &'short isize) {\n+    let _: Foo<'short> = c; // ok!\n+}\n+```\n+\"##,\n+\n E0635: r##\"\n The `#![feature]` attribute specified an unknown feature.\n \n@@ -2329,7 +2374,6 @@ the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n     E0488, // lifetime of variable does not enclose its declaration\n     E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n-    E0623, // lifetime mismatch where both parameters are anonymous regions\n     E0628, // generators cannot have explicit parameters\n     E0631, // type mismatch in closure arguments\n     E0637, // \"'_\" is not a valid lifetime bound"}, {"sha": "7dbacfd133f3f3d7df2d2be2bccc50e4da3a6dd6", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -124,7 +124,6 @@ pub mod util {\n     pub mod captures;\n     pub mod common;\n     pub mod nodemap;\n-    pub mod profiling;\n     pub mod bug;\n }\n "}, {"sha": "dc3bc5fa0cebfddac642f97dd861cb96e8481411", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -35,7 +35,6 @@ use crate::util::common::time;\n use errors::DiagnosticBuilder;\n use std::slice;\n use rustc_data_structures::sync::{self, ParallelIterator, join, par_iter};\n-use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n@@ -71,7 +70,7 @@ pub struct LintStore {\n \n /// Lints that are buffered up early on in the `Session` before the\n /// `LintLevels` is calculated\n-#[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(PartialEq, Debug)]\n pub struct BufferedEarlyLint {\n     pub lint_id: LintId,\n     pub ast_id: ast::NodeId,\n@@ -1574,27 +1573,3 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n         }\n     }\n }\n-\n-impl Encodable for LintId {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(&self.lint.name.to_lowercase())\n-    }\n-}\n-\n-impl Decodable for LintId {\n-    #[inline]\n-    fn decode<D: Decoder>(d: &mut D) -> Result<LintId, D::Error> {\n-        let s = d.read_str()?;\n-        ty::tls::with(|tcx| {\n-            match tcx.lint_store.find_lints(&s) {\n-                Ok(ids) => {\n-                    if ids.len() != 0 {\n-                        panic!(\"invalid lint-id `{}`\", s);\n-                    }\n-                    Ok(ids[0])\n-                }\n-                Err(_) => panic!(\"invalid lint-id `{}`\", s),\n-            }\n-        })\n-    }\n-}"}, {"sha": "e5c80c3589494440012b3057142565836379efe3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -15,6 +15,7 @@ use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n+use syntax::expand::allocator::AllocatorKind;\n use rustc_target::spec::Target;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_macros::HashStable;\n@@ -227,6 +228,8 @@ pub trait CrateStore {\n     // utility functions\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n+    fn injected_panic_runtime(&self) -> Option<CrateNum>;\n+    fn allocator_kind(&self) -> Option<AllocatorKind>;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "a69584cb90ad1c5d5c408fee4c928052867555af", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -2,7 +2,6 @@ pub use self::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n use self::code_stats::CodeStats;\n \n use crate::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n-use crate::hir::def_id::CrateNum;\n use rustc_data_structures::fingerprint::Fingerprint;\n \n use crate::lint;\n@@ -22,18 +21,17 @@ use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::edition::Edition;\n-use syntax::expand::allocator::AllocatorKind;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;\n use syntax::sess::{ParseSess, ProcessCfgMod};\n use syntax::symbol::Symbol;\n use syntax_pos::{MultiSpan, Span};\n-use crate::util::profiling::{SelfProfiler, SelfProfilerRef};\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n use rustc_data_structures::flock;\n use rustc_data_structures::jobserver;\n+use rustc_data_structures::profiling::{SelfProfiler, SelfProfilerRef};\n use ::jobserver::Client;\n \n use std;\n@@ -102,12 +100,6 @@ pub struct Session {\n     /// The maximum number of stackframes allowed in const eval.\n     pub const_eval_stack_frame_limit: usize,\n \n-    /// The `metadata::creader` module may inject an allocator/`panic_runtime`\n-    /// dependency if it didn't already find one, and this tracks what was\n-    /// injected.\n-    pub allocator_kind: Once<Option<AllocatorKind>>,\n-    pub injected_panic_runtime: Once<Option<CrateNum>>,\n-\n     /// Map from imported macro spans (which consist of\n     /// the localized span for the macro body) to the\n     /// macro name and definition span in the source crate.\n@@ -1099,7 +1091,6 @@ fn build_session_(\n             );\n             match profiler {\n                 Ok(profiler) => {\n-                    crate::ty::query::QueryName::register_with_profiler(&profiler);\n                     Some(Arc::new(profiler))\n                 },\n                 Err(e) => {\n@@ -1182,8 +1173,6 @@ fn build_session_(\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: 100,\n-        allocator_kind: Once::new(),\n-        injected_panic_runtime: Once::new(),\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,"}, {"sha": "a15acb00c17fbcc49353d6caa2ca87404f02d7c1", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -46,11 +46,11 @@ use crate::ty::CanonicalPolyFnSig;\n use crate::util::common::ErrorReported;\n use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap, ItemLocalSet, NodeMap};\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n-use crate::util::profiling::SelfProfilerRef;\n \n use errors::DiagnosticBuilder;\n use arena::SyncDroplessArena;\n use smallvec::SmallVec;\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::stable_hasher::{\n     HashStable, StableHasher, StableVec, hash_stable_hashmap,\n };\n@@ -75,6 +75,7 @@ use syntax::source_map::MultiSpan;\n use syntax::feature_gate;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n+use syntax::expand::allocator::AllocatorKind;\n \n pub struct AllArenas {\n     pub interner: SyncDroplessArena,\n@@ -1338,6 +1339,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.all_crate_nums(LOCAL_CRATE)\n     }\n \n+    pub fn injected_panic_runtime(self) -> Option<CrateNum> {\n+        self.cstore.injected_panic_runtime()\n+    }\n+\n+    pub fn allocator_kind(self) -> Option<AllocatorKind> {\n+        self.cstore.allocator_kind()\n+    }\n+\n     pub fn features(self) -> &'tcx feature_gate::Features {\n         self.features_query(LOCAL_CRATE)\n     }"}, {"sha": "7e126459dcc731aa8d8d690d6d30158edc68735b", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -6,7 +6,7 @@ use crate::ty::query::queries;\n use crate::ty::query::{Query, QueryName};\n use crate::ty::query::QueryCache;\n use crate::ty::query::plumbing::CycleError;\n-use crate::util::profiling::ProfileCategory;\n+use rustc_data_structures::profiling::ProfileCategory;\n \n use std::borrow::Cow;\n use std::hash::Hash;"}, {"sha": "a1eb1c43335b1caac4c3f31a4bde61f0ed77147d", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -39,7 +39,7 @@ use crate::ty::util::NeedsDrop;\n use crate::ty::subst::SubstsRef;\n use crate::util::nodemap::{DefIdSet, DefIdMap};\n use crate::util::common::ErrorReported;\n-use crate::util::profiling::ProfileCategory::*;\n+use rustc_data_structures::profiling::ProfileCategory::*;\n \n use rustc_data_structures::svh::Svh;\n use rustc_index::vec::IndexVec;"}, {"sha": "1c15b7d5f3559ec844ea2423567ac22299f1cd86", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -672,7 +672,7 @@ macro_rules! define_queries_inner {\n             rustc_data_structures::stable_hasher::StableHasher,\n             ich::StableHashingContext\n         };\n-        use crate::util::profiling::ProfileCategory;\n+        use rustc_data_structures::profiling::ProfileCategory;\n \n         define_queries_struct! {\n             tcx: $tcx,\n@@ -816,8 +816,20 @@ macro_rules! define_queries_inner {\n             $($name),*\n         }\n \n+        impl rustc_data_structures::profiling::QueryName for QueryName {\n+            fn discriminant(self) -> std::mem::Discriminant<QueryName> {\n+                std::mem::discriminant(&self)\n+            }\n+\n+            fn as_str(self) -> &'static str {\n+                QueryName::as_str(&self)\n+            }\n+        }\n+\n         impl QueryName {\n-            pub fn register_with_profiler(profiler: &crate::util::profiling::SelfProfiler) {\n+            pub fn register_with_profiler(\n+                profiler: &rustc_data_structures::profiling::SelfProfiler,\n+            ) {\n                 $(profiler.register_query_name(QueryName::$name);)*\n             }\n "}, {"sha": "f8b3e0ffe5cd9774416126d04a0530aa715789e4", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -194,7 +194,7 @@ fn exported_symbols_provider_local(\n         symbols.push((exported_symbol, SymbolExportLevel::C));\n     }\n \n-    if tcx.sess.allocator_kind.get().is_some() {\n+    if tcx.allocator_kind().is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));"}, {"sha": "ed901fa064a4e3e7064fabb5908cff5240afeb83", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -19,7 +19,7 @@ use rustc::util::nodemap::FxHashMap;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::ty::TyCtxt;\n use rustc::util::common::{time_depth, set_time_depth, print_time_passes_entry};\n-use rustc::util::profiling::SelfProfilerRef;\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "faa7b588e56e30d0b42b04602a3d75d262ecac98", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -549,7 +549,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         });\n     let allocator_module = if any_dynamic_crate {\n         None\n-    } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n+    } else if let Some(kind) = tcx.allocator_kind() {\n         let llmod_id = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n                                                        &[\"crate\"],\n                                                        Some(\"allocator\")).to_string();"}, {"sha": "0fd47115022c2ce63d74f0cf6df7c1d076bdfdb4", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -25,6 +25,8 @@ rayon-core = { version = \"0.3.0\", package = \"rustc-rayon-core\" }\n rustc-hash = \"1.0.1\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_index = { path = \"../librustc_index\", package = \"rustc_index\" }\n+bitflags = \"1.2.1\"\n+measureme = \"0.4\"\n \n [dependencies.parking_lot]\n version = \"0.9\""}, {"sha": "fb541637e5f79da6c267ea39fc4b67493ee26e3c", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -94,6 +94,7 @@ pub use ena::unify;\n pub mod vec_linked_list;\n pub mod work_queue;\n pub mod fingerprint;\n+pub mod profiling;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "86f59bfabe627eb1480b9960b5fe9b05c257305f", "filename": "src/librustc_data_structures/profiling.rs", "status": "renamed", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -7,8 +7,6 @@ use std::sync::Arc;\n use std::thread::ThreadId;\n use std::u32;\n \n-use crate::ty::query::QueryName;\n-\n use measureme::{StringId, TimestampKind};\n \n /// MmapSerializatioSink is faster on macOS and Linux\n@@ -20,6 +18,10 @@ type SerializationSink = measureme::FileSerializationSink;\n \n type Profiler = measureme::Profiler<SerializationSink>;\n \n+pub trait QueryName: Sized + Copy {\n+    fn discriminant(self) -> Discriminant<Self>;\n+    fn as_str(self) -> &'static str;\n+}\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd)]\n pub enum ProfileCategory {\n@@ -32,7 +34,7 @@ pub enum ProfileCategory {\n     Other,\n }\n \n-bitflags! {\n+bitflags::bitflags! {\n     struct EventFilter: u32 {\n         const GENERIC_ACTIVITIES = 1 << 0;\n         const QUERY_PROVIDERS    = 1 << 1;\n@@ -137,7 +139,7 @@ impl SelfProfilerRef {\n     /// Start profiling a query provider. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]\n-    pub fn query_provider(&self, query_name: QueryName) -> TimingGuard<'_> {\n+    pub fn query_provider(&self, query_name: impl QueryName) -> TimingGuard<'_> {\n         self.exec(EventFilter::QUERY_PROVIDERS, |profiler| {\n             let event_id = SelfProfiler::get_query_name_string_id(query_name);\n             TimingGuard::start(profiler, profiler.query_event_kind, event_id)\n@@ -146,7 +148,7 @@ impl SelfProfilerRef {\n \n     /// Record a query in-memory cache hit.\n     #[inline(always)]\n-    pub fn query_cache_hit(&self, query_name: QueryName) {\n+    pub fn query_cache_hit(&self, query_name: impl QueryName) {\n         self.non_guard_query_event(\n             |profiler| profiler.query_cache_hit_event_kind,\n             query_name,\n@@ -159,7 +161,7 @@ impl SelfProfilerRef {\n     /// Profiling continues until the TimingGuard returned from this call is\n     /// dropped.\n     #[inline(always)]\n-    pub fn query_blocked(&self, query_name: QueryName) -> TimingGuard<'_> {\n+    pub fn query_blocked(&self, query_name: impl QueryName) -> TimingGuard<'_> {\n         self.exec(EventFilter::QUERY_BLOCKED, |profiler| {\n             let event_id = SelfProfiler::get_query_name_string_id(query_name);\n             TimingGuard::start(profiler, profiler.query_blocked_event_kind, event_id)\n@@ -170,7 +172,7 @@ impl SelfProfilerRef {\n     /// incremental compilation on-disk cache. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]\n-    pub fn incr_cache_loading(&self, query_name: QueryName) -> TimingGuard<'_> {\n+    pub fn incr_cache_loading(&self, query_name: impl QueryName) -> TimingGuard<'_> {\n         self.exec(EventFilter::INCR_CACHE_LOADS, |profiler| {\n             let event_id = SelfProfiler::get_query_name_string_id(query_name);\n             TimingGuard::start(\n@@ -185,7 +187,7 @@ impl SelfProfilerRef {\n     fn non_guard_query_event(\n         &self,\n         event_kind: fn(&SelfProfiler) -> StringId,\n-        query_name: QueryName,\n+        query_name: impl QueryName,\n         event_filter: EventFilter,\n         timestamp_kind: TimestampKind\n     ) {\n@@ -203,6 +205,12 @@ impl SelfProfilerRef {\n             TimingGuard::none()\n         }));\n     }\n+\n+    pub fn register_queries(&self, f: impl FnOnce(&SelfProfiler)) {\n+        if let Some(profiler) = &self.profiler {\n+            f(&profiler)\n+        }\n+    }\n }\n \n pub struct SelfProfiler {\n@@ -274,15 +282,15 @@ impl SelfProfiler {\n         })\n     }\n \n-    fn get_query_name_string_id(query_name: QueryName) -> StringId {\n+    fn get_query_name_string_id(query_name: impl QueryName) -> StringId {\n         let discriminant = unsafe {\n-            mem::transmute::<Discriminant<QueryName>, u64>(mem::discriminant(&query_name))\n+            mem::transmute::<Discriminant<_>, u64>(query_name.discriminant())\n         };\n \n         StringId::reserved(discriminant as u32)\n     }\n \n-    pub fn register_query_name(&self, query_name: QueryName) {\n+    pub fn register_query_name(&self, query_name: impl QueryName) {\n         let id = SelfProfiler::get_query_name_string_id(query_name);\n         self.profiler.alloc_string_with_reserved_id(id, query_name.as_str());\n     }", "previous_filename": "src/librustc/util/profiling.rs"}, {"sha": "514c6d0e1dad962bad63390477fef273f80816e7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -181,6 +181,7 @@ pub fn run_compiler(\n             crate_name: None,\n             lint_caps: Default::default(),\n             register_lints: None,\n+            override_queries: None,\n         };\n         callbacks.config(&mut config);\n         config\n@@ -259,6 +260,7 @@ pub fn run_compiler(\n         crate_name: None,\n         lint_caps: Default::default(),\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     callbacks.config(&mut config);"}, {"sha": "fae4eb48c4a1b127aa810d5de5b8aada02057efc", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -12,6 +12,7 @@ use rustc_data_structures::OnDrop;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_parse::new_parser_from_source_str;\n+use rustc::ty;\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n@@ -38,6 +39,8 @@ pub struct Compiler {\n     pub(crate) queries: Queries,\n     pub(crate) crate_name: Option<String>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n+    pub(crate) override_queries:\n+        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n }\n \n impl Compiler {\n@@ -131,6 +134,13 @@ pub struct Config {\n     /// Note that if you find a Some here you probably want to call that function in the new\n     /// function being registered.\n     pub register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n+\n+    /// This is a callback from the driver that is called just after we have populated\n+    /// the list of queries.\n+    ///\n+    /// The second parameter is local providers and the third parameter is external providers.\n+    pub override_queries:\n+        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n }\n \n pub fn run_compiler_in_existing_thread_pool<F, R>(config: Config, f: F) -> R\n@@ -157,6 +167,7 @@ where\n         queries: Default::default(),\n         crate_name: config.crate_name,\n         register_lints: config.register_lints,\n+        override_queries: config.override_queries,\n     };\n \n     let _sess_abort_error = OnDrop(|| {"}, {"sha": "c57622b8b8fe5d587c0c8c427eb65cef27c111ef", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -786,6 +786,7 @@ pub fn create_global_ctxt(\n     let codegen_backend = compiler.codegen_backend().clone();\n     let crate_name = crate_name.to_string();\n     let defs = mem::take(&mut resolver_outputs.definitions);\n+    let override_queries = compiler.override_queries;\n \n     let ((), result) = BoxedGlobalCtxt::new(static move || {\n         let sess = &*sess;\n@@ -810,6 +811,10 @@ pub fn create_global_ctxt(\n         default_provide_extern(&mut extern_providers);\n         codegen_backend.provide_extern(&mut extern_providers);\n \n+        if let Some(callback) = override_queries {\n+            callback(sess, &mut local_providers, &mut extern_providers);\n+        }\n+\n         let gcx = TyCtxt::create_global_ctxt(\n             sess,\n             lint_store,"}, {"sha": "6b9d708cefacab0399933e2c3aa4d06f3fa19879", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -108,6 +108,10 @@ pub fn create_session(\n         process_configure_mod,\n     );\n \n+    sess.prof.register_queries(|profiler| {\n+        rustc::ty::query::QueryName::register_with_profiler(&profiler);\n+    });\n+\n     let codegen_backend = get_codegen_backend(&sess);\n \n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));"}, {"sha": "b4dea19d3dc3ffdc78b7197e640e0d153d0dd663", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -531,7 +531,7 @@ impl<'a> CrateLoader<'a> {\n         });\n         if !any_non_rlib {\n             info!(\"panic runtime injection skipped, only generating rlib\");\n-            self.sess.injected_panic_runtime.set(None);\n+            self.cstore.injected_panic_runtime = None;\n             return\n         }\n \n@@ -563,7 +563,7 @@ impl<'a> CrateLoader<'a> {\n         // we just don't need one at all, then we're done here and there's\n         // nothing else to do.\n         if !needs_panic_runtime || runtime_found {\n-            self.sess.injected_panic_runtime.set(None);\n+            self.cstore.injected_panic_runtime = None;\n             return\n         }\n \n@@ -600,7 +600,7 @@ impl<'a> CrateLoader<'a> {\n                                    name, desired_strategy.desc()));\n         }\n \n-        self.sess.injected_panic_runtime.set(Some(cnum));\n+        self.cstore.injected_panic_runtime = Some(cnum);\n         self.inject_dependency_if(cnum, \"a panic runtime\",\n                                   &|data| data.root.needs_panic_runtime);\n     }\n@@ -722,7 +722,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn inject_allocator_crate(&self, krate: &ast::Crate) {\n+    fn inject_allocator_crate(&mut self, krate: &ast::Crate) {\n         let has_global_allocator = match &*global_allocator_spans(krate) {\n             [span1, span2, ..] => {\n                 self.sess.struct_span_err(*span2, \"cannot define multiple global allocators\")\n@@ -742,7 +742,7 @@ impl<'a> CrateLoader<'a> {\n             needs_allocator = needs_allocator || data.root.needs_allocator;\n         });\n         if !needs_allocator {\n-            self.sess.allocator_kind.set(None);\n+            self.cstore.allocator_kind = None;\n             return\n         }\n \n@@ -758,7 +758,7 @@ impl<'a> CrateLoader<'a> {\n                 }\n             });\n         if all_rlib {\n-            self.sess.allocator_kind.set(None);\n+            self.cstore.allocator_kind = None;\n             return\n         }\n \n@@ -795,7 +795,7 @@ impl<'a> CrateLoader<'a> {\n             }\n         });\n         if global_allocator.is_some() {\n-            self.sess.allocator_kind.set(Some(AllocatorKind::Global));\n+            self.cstore.allocator_kind = Some(AllocatorKind::Global);\n             return\n         }\n \n@@ -816,7 +816,7 @@ impl<'a> CrateLoader<'a> {\n                            add `#[global_allocator]` to a static item \\\n                            that implements the GlobalAlloc trait.\");\n         }\n-        self.sess.allocator_kind.set(Some(AllocatorKind::DefaultLib));\n+        self.cstore.allocator_kind = Some(AllocatorKind::DefaultLib);\n     }\n \n     fn inject_dependency_if(&self,"}, {"sha": "54857ce1b82816b4e1403587bfcda2193d6eced0", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -14,6 +14,7 @@ use rustc_data_structures::svh::Svh;\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax_expand::base::SyntaxExtension;\n+use syntax::expand::allocator::AllocatorKind;\n use syntax_pos;\n use proc_macro::bridge::client::ProcMacro;\n \n@@ -101,6 +102,8 @@ crate struct CrateMetadata {\n #[derive(Clone)]\n pub struct CStore {\n     metas: IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>,\n+    pub(crate) injected_panic_runtime: Option<CrateNum>,\n+    pub(crate) allocator_kind: Option<AllocatorKind>,\n }\n \n pub enum LoadedMacro {\n@@ -116,6 +119,8 @@ impl Default for CStore {\n             // corresponding `CrateNum`. This first entry will always remain\n             // `None`.\n             metas: IndexVec::from_elem_n(None, 1),\n+            injected_panic_runtime: None,\n+            allocator_kind: None,\n         }\n     }\n }"}, {"sha": "dbf7fede1469f7d71da81a4db565d495aaa85249", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -184,7 +184,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n     //\n     // Things like allocators and panic runtimes may not have been activated\n     // quite yet, so do so here.\n-    activate_injected_dep(*sess.injected_panic_runtime.get(), &mut ret,\n+    activate_injected_dep(tcx.injected_panic_runtime(), &mut ret,\n                           &|cnum| tcx.is_panic_runtime(cnum));\n \n     // When dylib B links to dylib A, then when using B we must also link to A.\n@@ -244,7 +244,6 @@ fn add_library(\n }\n \n fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n-    let sess = &tcx.sess;\n     let crates = cstore::used_crates(tcx, RequireStatic);\n     if !crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n         return None\n@@ -264,7 +263,7 @@ fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n     // Our allocator/panic runtime may not have been linked above if it wasn't\n     // explicitly linked, which is the case for any injected dependency. Handle\n     // that here and activate them.\n-    activate_injected_dep(*sess.injected_panic_runtime.get(), &mut ret,\n+    activate_injected_dep(tcx.injected_panic_runtime(), &mut ret,\n                           &|cnum| tcx.is_panic_runtime(cnum));\n \n     Some(ret)"}, {"sha": "a6cb3864ca7d4e22cb280dd146530b8f98bc45d4", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -31,6 +31,7 @@ use syntax::attr;\n use syntax::source_map;\n use syntax::source_map::Spanned;\n use syntax::symbol::Symbol;\n+use syntax::expand::allocator::AllocatorKind;\n use syntax_pos::{Span, FileName};\n \n macro_rules! provide {\n@@ -527,4 +528,12 @@ impl CrateStore for cstore::CStore {\n     {\n         rmeta::METADATA_HEADER\n     }\n+\n+    fn injected_panic_runtime(&self) -> Option<CrateNum> {\n+        self.injected_panic_runtime\n+    }\n+\n+    fn allocator_kind(&self) -> Option<AllocatorKind> {\n+        self.allocator_kind\n+    }\n }"}, {"sha": "8e574cc961b2b0d5ae9b4cdc2800f1e8cf72cdb1", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 185, "deletions": 182, "changes": 367, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -560,13 +560,6 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn is_non_exhaustive_enum(&self, ty: Ty<'tcx>) -> bool {\n-        match ty.kind {\n-            ty::Adt(adt_def, ..) => adt_def.is_variant_list_non_exhaustive(),\n-            _ => false,\n-        }\n-    }\n-\n     fn is_local(&self, ty: Ty<'tcx>) -> bool {\n         match ty.kind {\n             ty::Adt(adt_def, ..) => adt_def.did.is_local(),\n@@ -590,13 +583,16 @@ enum Constructor<'tcx> {\n     FixedLenSlice(u64),\n     /// Slice patterns. Captures any array constructor of `length >= i + j`.\n     VarLenSlice(u64, u64),\n+    /// Fake extra constructor for enums that aren't allowed to be matched exhaustively.\n+    NonExhaustive,\n }\n \n // Ignore spans when comparing, they don't carry semantic information as they are only for lints.\n impl<'tcx> std::cmp::PartialEq for Constructor<'tcx> {\n     fn eq(&self, other: &Self) -> bool {\n         match (self, other) {\n             (Constructor::Single, Constructor::Single) => true,\n+            (Constructor::NonExhaustive, Constructor::NonExhaustive) => true,\n             (Constructor::Variant(a), Constructor::Variant(b)) => a == b,\n             (Constructor::ConstantValue(a, _), Constructor::ConstantValue(b, _)) => a == b,\n             (\n@@ -771,6 +767,8 @@ impl<'tcx> Constructor<'tcx> {\n                 // ranges have been omitted.\n                 remaining_ctors\n             }\n+            // This constructor is never covered by anything else\n+            NonExhaustive => vec![NonExhaustive],\n         }\n     }\n \n@@ -781,65 +779,68 @@ impl<'tcx> Constructor<'tcx> {\n         ty: Ty<'tcx>,\n     ) -> Vec<Pat<'tcx>> {\n         debug!(\"wildcard_subpatterns({:#?}, {:?})\", self, ty);\n-        match ty.kind {\n-            ty::Tuple(ref fs) => {\n-                fs.into_iter().map(|t| t.expect_ty()).map(Pat::wildcard_from_ty).collect()\n-            }\n-            ty::Slice(ty) | ty::Array(ty, _) => match *self {\n-                FixedLenSlice(length) => (0..length).map(|_| Pat::wildcard_from_ty(ty)).collect(),\n-                VarLenSlice(prefix, suffix) => {\n-                    (0..prefix + suffix).map(|_| Pat::wildcard_from_ty(ty)).collect()\n+\n+        match self {\n+            Single | Variant(_) => match ty.kind {\n+                ty::Tuple(ref fs) => {\n+                    fs.into_iter().map(|t| t.expect_ty()).map(Pat::wildcard_from_ty).collect()\n                 }\n-                ConstantValue(..) => vec![],\n-                _ => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n-            },\n-            ty::Ref(_, rty, _) => vec![Pat::wildcard_from_ty(rty)],\n-            ty::Adt(adt, substs) => {\n-                if adt.is_box() {\n-                    // Use T as the sub pattern type of Box<T>.\n-                    vec![Pat::wildcard_from_ty(substs.type_at(0))]\n-                } else {\n-                    let variant = &adt.variants[self.variant_index_for_adt(cx, adt)];\n-                    let is_non_exhaustive =\n-                        variant.is_field_list_non_exhaustive() && !cx.is_local(ty);\n-                    variant\n-                        .fields\n-                        .iter()\n-                        .map(|field| {\n-                            let is_visible =\n-                                adt.is_enum() || field.vis.is_accessible_from(cx.module, cx.tcx);\n-                            let is_uninhabited = cx.is_uninhabited(field.ty(cx.tcx, substs));\n-                            match (is_visible, is_non_exhaustive, is_uninhabited) {\n-                                // Treat all uninhabited types in non-exhaustive variants as\n-                                // `TyErr`.\n-                                (_, true, true) => cx.tcx.types.err,\n-                                // Treat all non-visible fields as `TyErr`. They can't appear in\n-                                // any other pattern from this match (because they are private), so\n-                                // their type does not matter - but we don't want to know they are\n-                                // uninhabited.\n-                                (false, ..) => cx.tcx.types.err,\n-                                (true, ..) => {\n-                                    let ty = field.ty(cx.tcx, substs);\n-                                    match ty.kind {\n-                                        // If the field type returned is an array of an unknown\n-                                        // size return an TyErr.\n-                                        ty::Array(_, len)\n-                                            if len\n-                                                .try_eval_usize(cx.tcx, cx.param_env)\n-                                                .is_none() =>\n-                                        {\n-                                            cx.tcx.types.err\n+                ty::Ref(_, rty, _) => vec![Pat::wildcard_from_ty(rty)],\n+                ty::Adt(adt, substs) => {\n+                    if adt.is_box() {\n+                        // Use T as the sub pattern type of Box<T>.\n+                        vec![Pat::wildcard_from_ty(substs.type_at(0))]\n+                    } else {\n+                        let variant = &adt.variants[self.variant_index_for_adt(cx, adt)];\n+                        let is_non_exhaustive =\n+                            variant.is_field_list_non_exhaustive() && !cx.is_local(ty);\n+                        variant\n+                            .fields\n+                            .iter()\n+                            .map(|field| {\n+                                let is_visible = adt.is_enum()\n+                                    || field.vis.is_accessible_from(cx.module, cx.tcx);\n+                                let is_uninhabited = cx.is_uninhabited(field.ty(cx.tcx, substs));\n+                                match (is_visible, is_non_exhaustive, is_uninhabited) {\n+                                    // Treat all uninhabited types in non-exhaustive variants as\n+                                    // `TyErr`.\n+                                    (_, true, true) => cx.tcx.types.err,\n+                                    // Treat all non-visible fields as `TyErr`. They can't appear\n+                                    // in any other pattern from this match (because they are\n+                                    // private), so their type does not matter - but we don't want\n+                                    // to know they are uninhabited.\n+                                    (false, ..) => cx.tcx.types.err,\n+                                    (true, ..) => {\n+                                        let ty = field.ty(cx.tcx, substs);\n+                                        match ty.kind {\n+                                            // If the field type returned is an array of an unknown\n+                                            // size return an TyErr.\n+                                            ty::Array(_, len)\n+                                                if len\n+                                                    .try_eval_usize(cx.tcx, cx.param_env)\n+                                                    .is_none() =>\n+                                            {\n+                                                cx.tcx.types.err\n+                                            }\n+                                            _ => ty,\n                                         }\n-                                        _ => ty,\n                                     }\n                                 }\n-                            }\n-                        })\n-                        .map(Pat::wildcard_from_ty)\n-                        .collect()\n+                            })\n+                            .map(Pat::wildcard_from_ty)\n+                            .collect()\n+                    }\n                 }\n-            }\n-            _ => vec![],\n+                _ => vec![],\n+            },\n+            FixedLenSlice(_) | VarLenSlice(..) => match ty.kind {\n+                ty::Slice(ty) | ty::Array(ty, _) => {\n+                    let arity = self.arity(cx, ty);\n+                    (0..arity).map(|_| Pat::wildcard_from_ty(ty)).collect()\n+                }\n+                _ => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n+            },\n+            ConstantValue(..) | ConstantRange(..) | NonExhaustive => vec![],\n         }\n     }\n \n@@ -850,19 +851,19 @@ impl<'tcx> Constructor<'tcx> {\n     /// A struct pattern's arity is the number of fields it contains, etc.\n     fn arity<'a>(&self, cx: &MatchCheckCtxt<'a, 'tcx>, ty: Ty<'tcx>) -> u64 {\n         debug!(\"Constructor::arity({:#?}, {:?})\", self, ty);\n-        match ty.kind {\n-            ty::Tuple(ref fs) => fs.len() as u64,\n-            ty::Slice(..) | ty::Array(..) => match *self {\n-                FixedLenSlice(length) => length,\n-                VarLenSlice(prefix, suffix) => prefix + suffix,\n-                ConstantValue(..) => 0,\n-                _ => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n+        match self {\n+            Single | Variant(_) => match ty.kind {\n+                ty::Tuple(ref fs) => fs.len() as u64,\n+                ty::Slice(..) | ty::Array(..) => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n+                ty::Ref(..) => 1,\n+                ty::Adt(adt, _) => {\n+                    adt.variants[self.variant_index_for_adt(cx, adt)].fields.len() as u64\n+                }\n+                _ => 0,\n             },\n-            ty::Ref(..) => 1,\n-            ty::Adt(adt, _) => {\n-                adt.variants[self.variant_index_for_adt(cx, adt)].fields.len() as u64\n-            }\n-            _ => 0,\n+            FixedLenSlice(length) => *length,\n+            VarLenSlice(prefix, suffix) => prefix + suffix,\n+            ConstantValue(..) | ConstantRange(..) | NonExhaustive => 0,\n         }\n     }\n \n@@ -886,53 +887,50 @@ impl<'tcx> Constructor<'tcx> {\n         pats: impl IntoIterator<Item = Pat<'tcx>>,\n     ) -> Pat<'tcx> {\n         let mut subpatterns = pats.into_iter();\n-        let pat = match ty.kind {\n-            ty::Adt(..) | ty::Tuple(..) => {\n-                let subpatterns = subpatterns\n-                    .enumerate()\n-                    .map(|(i, p)| FieldPat { field: Field::new(i), pattern: p })\n-                    .collect();\n-\n-                if let ty::Adt(adt, substs) = ty.kind {\n-                    if adt.is_enum() {\n-                        PatKind::Variant {\n-                            adt_def: adt,\n-                            substs,\n-                            variant_index: self.variant_index_for_adt(cx, adt),\n-                            subpatterns,\n+\n+        let pat = match self {\n+            Single | Variant(_) => match ty.kind {\n+                ty::Adt(..) | ty::Tuple(..) => {\n+                    let subpatterns = subpatterns\n+                        .enumerate()\n+                        .map(|(i, p)| FieldPat { field: Field::new(i), pattern: p })\n+                        .collect();\n+\n+                    if let ty::Adt(adt, substs) = ty.kind {\n+                        if adt.is_enum() {\n+                            PatKind::Variant {\n+                                adt_def: adt,\n+                                substs,\n+                                variant_index: self.variant_index_for_adt(cx, adt),\n+                                subpatterns,\n+                            }\n+                        } else {\n+                            PatKind::Leaf { subpatterns }\n                         }\n                     } else {\n                         PatKind::Leaf { subpatterns }\n                     }\n-                } else {\n-                    PatKind::Leaf { subpatterns }\n-                }\n-            }\n-\n-            ty::Ref(..) => PatKind::Deref { subpattern: subpatterns.nth(0).unwrap() },\n-\n-            ty::Slice(_) | ty::Array(..) => match self {\n-                FixedLenSlice(_) => {\n-                    PatKind::Slice { prefix: subpatterns.collect(), slice: None, suffix: vec![] }\n                 }\n-                VarLenSlice(prefix_len, _suffix_len) => {\n-                    let prefix = subpatterns.by_ref().take(*prefix_len as usize).collect();\n-                    let suffix = subpatterns.collect();\n-                    let wild = Pat::wildcard_from_ty(ty);\n-                    PatKind::Slice { prefix, slice: Some(wild), suffix }\n-                }\n-                _ => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n-            },\n-\n-            _ => match *self {\n-                ConstantValue(value, _) => PatKind::Constant { value },\n-                ConstantRange(lo, hi, ty, end, _) => PatKind::Range(PatRange {\n-                    lo: ty::Const::from_bits(cx.tcx, lo, ty::ParamEnv::empty().and(ty)),\n-                    hi: ty::Const::from_bits(cx.tcx, hi, ty::ParamEnv::empty().and(ty)),\n-                    end,\n-                }),\n+                ty::Ref(..) => PatKind::Deref { subpattern: subpatterns.nth(0).unwrap() },\n+                ty::Slice(_) | ty::Array(..) => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n                 _ => PatKind::Wild,\n             },\n+            FixedLenSlice(_) => {\n+                PatKind::Slice { prefix: subpatterns.collect(), slice: None, suffix: vec![] }\n+            }\n+            &VarLenSlice(prefix_len, _) => {\n+                let prefix = subpatterns.by_ref().take(prefix_len as usize).collect();\n+                let suffix = subpatterns.collect();\n+                let wild = Pat::wildcard_from_ty(ty);\n+                PatKind::Slice { prefix, slice: Some(wild), suffix }\n+            }\n+            &ConstantValue(value, _) => PatKind::Constant { value },\n+            &ConstantRange(lo, hi, ty, end, _) => PatKind::Range(PatRange {\n+                lo: ty::Const::from_bits(cx.tcx, lo, ty::ParamEnv::empty().and(ty)),\n+                hi: ty::Const::from_bits(cx.tcx, hi, ty::ParamEnv::empty().and(ty)),\n+                end,\n+            }),\n+            NonExhaustive => PatKind::Wild,\n         };\n \n         Pat { ty, span: DUMMY_SP, kind: Box::new(pat) }\n@@ -1128,7 +1126,7 @@ fn all_constructors<'a, 'tcx>(\n     pcx: PatCtxt<'tcx>,\n ) -> Vec<Constructor<'tcx>> {\n     debug!(\"all_constructors({:?})\", pcx.ty);\n-    let ctors = match pcx.ty.kind {\n+    match pcx.ty.kind {\n         ty::Bool => [true, false]\n             .iter()\n             .map(|&b| ConstantValue(ty::Const::from_bool(cx.tcx, b), pcx.span))\n@@ -1145,17 +1143,49 @@ fn all_constructors<'a, 'tcx>(\n                 vec![VarLenSlice(0, 0)]\n             }\n         }\n-        ty::Adt(def, substs) if def.is_enum() => def\n-            .variants\n-            .iter()\n-            .filter(|v| {\n-                !cx.tcx.features().exhaustive_patterns\n-                    || !v\n-                        .uninhabited_from(cx.tcx, substs, def.adt_kind())\n-                        .contains(cx.tcx, cx.module)\n-            })\n-            .map(|v| Variant(v.def_id))\n-            .collect(),\n+        ty::Adt(def, substs) if def.is_enum() => {\n+            let ctors: Vec<_> = def\n+                .variants\n+                .iter()\n+                .filter(|v| {\n+                    !cx.tcx.features().exhaustive_patterns\n+                        || !v\n+                            .uninhabited_from(cx.tcx, substs, def.adt_kind())\n+                            .contains(cx.tcx, cx.module)\n+                })\n+                .map(|v| Variant(v.def_id))\n+                .collect();\n+\n+            // If our scrutinee is *privately* an empty enum, we must treat it as though it had an\n+            // \"unknown\" constructor (in that case, all other patterns obviously can't be variants)\n+            // to avoid exposing its emptyness. See the `match_privately_empty` test for details.\n+            // FIXME: currently the only way I know of something can be a privately-empty enum is\n+            // when the exhaustive_patterns feature flag is not present, so this is only needed for\n+            // that case.\n+            let is_privately_empty = ctors.is_empty() && !cx.is_uninhabited(pcx.ty);\n+            // If the enum is declared as `#[non_exhaustive]`, we treat it as if it had an\n+            // additionnal \"unknown\" constructor.\n+            let is_declared_nonexhaustive =\n+                def.is_variant_list_non_exhaustive() && !cx.is_local(pcx.ty);\n+\n+            if is_privately_empty || is_declared_nonexhaustive {\n+                // There is no point in enumerating all possible variants, because the user can't\n+                // actually match against them themselves. So we return only the fictitious\n+                // constructor.\n+                // E.g., in an example like:\n+                // ```\n+                //     let err: io::ErrorKind = ...;\n+                //     match err {\n+                //         io::ErrorKind::NotFound => {},\n+                //     }\n+                // ```\n+                // we don't want to show every possible IO error, but instead have only `_` as the\n+                // witness.\n+                vec![NonExhaustive]\n+            } else {\n+                ctors\n+            }\n+        }\n         ty::Char => {\n             vec![\n                 // The valid Unicode Scalar Value ranges.\n@@ -1175,6 +1205,15 @@ fn all_constructors<'a, 'tcx>(\n                 ),\n             ]\n         }\n+        ty::Int(_) | ty::Uint(_)\n+            if pcx.ty.is_ptr_sized_integral()\n+                && !cx.tcx.features().precise_pointer_size_matching =>\n+        {\n+            // `usize`/`isize` are not allowed to be matched exhaustively unless the\n+            // `precise_pointer_size_matching` feature is enabled. So we treat those types like\n+            // `#[non_exhaustive]` enums by returning a special unmatcheable constructor.\n+            vec![NonExhaustive]\n+        }\n         ty::Int(ity) => {\n             let bits = Integer::from_attr(&cx.tcx, SignedInt(ity)).size().bits() as u128;\n             let min = 1u128 << (bits - 1);\n@@ -1193,8 +1232,7 @@ fn all_constructors<'a, 'tcx>(\n                 vec![Single]\n             }\n         }\n-    };\n-    ctors\n+    }\n }\n \n /// An inclusive interval, used for precise integer exhaustiveness checking.\n@@ -1592,48 +1630,22 @@ pub fn is_useful<'p, 'a, 'tcx>(\n         let all_ctors = all_constructors(cx, pcx);\n         debug!(\"all_ctors = {:#?}\", all_ctors);\n \n-        let is_privately_empty = all_ctors.is_empty() && !cx.is_uninhabited(pcx.ty);\n-        let is_declared_nonexhaustive = cx.is_non_exhaustive_enum(pcx.ty) && !cx.is_local(pcx.ty);\n-\n         // `missing_ctors` is the set of constructors from the same type as the\n         // first column of `matrix` that are matched only by wildcard patterns\n         // from the first column.\n         //\n         // Therefore, if there is some pattern that is unmatched by `matrix`,\n         // it will still be unmatched if the first constructor is replaced by\n         // any of the constructors in `missing_ctors`\n-        //\n-        // However, if our scrutinee is *privately* an empty enum, we\n-        // must treat it as though it had an \"unknown\" constructor (in\n-        // that case, all other patterns obviously can't be variants)\n-        // to avoid exposing its emptyness. See the `match_privately_empty`\n-        // test for details.\n-        //\n-        // FIXME: currently the only way I know of something can\n-        // be a privately-empty enum is when the exhaustive_patterns\n-        // feature flag is not present, so this is only\n-        // needed for that case.\n-\n-        // Missing constructors are those that are not matched by any\n-        // non-wildcard patterns in the current column. To determine if\n-        // the set is empty, we can check that `.peek().is_none()`, so\n-        // we only fully construct them on-demand, because they're rarely used and can be big.\n-        let missing_ctors = MissingConstructors::new(cx.tcx, cx.param_env, all_ctors, used_ctors);\n \n-        debug!(\n-            \"missing_ctors.empty()={:#?} is_privately_empty={:#?} is_declared_nonexhaustive={:#?}\",\n-            missing_ctors.is_empty(),\n-            is_privately_empty,\n-            is_declared_nonexhaustive\n-        );\n+        // Missing constructors are those that are not matched by any non-wildcard patterns in the\n+        // current column. We only fully construct them on-demand, because they're rarely used and\n+        // can be big.\n+        let missing_ctors = MissingConstructors::new(cx.tcx, cx.param_env, all_ctors, used_ctors);\n \n-        // For privately empty and non-exhaustive enums, we work as if there were an \"extra\"\n-        // `_` constructor for the type, so we can never match over all constructors.\n-        let is_non_exhaustive = is_privately_empty\n-            || is_declared_nonexhaustive\n-            || (pcx.ty.is_ptr_sized_integral() && !cx.tcx.features().precise_pointer_size_matching);\n+        debug!(\"missing_ctors.empty()={:#?}\", missing_ctors.is_empty(),);\n \n-        if missing_ctors.is_empty() && !is_non_exhaustive {\n+        if missing_ctors.is_empty() {\n             let (all_ctors, _) = missing_ctors.into_inner();\n             split_grouped_constructors(cx.tcx, cx.param_env, pcx, all_ctors, matrix, DUMMY_SP, None)\n                 .into_iter()\n@@ -1662,26 +1674,9 @@ pub fn is_useful<'p, 'a, 'tcx>(\n             //\n             // we can report 3 witnesses: `S`, `E`, and `W`.\n             //\n-            // However, there are 2 cases where we don't want\n+            // However, there is a case where we don't want\n             // to do this and instead report a single `_` witness:\n-            //\n-            // 1) If the user is matching against a non-exhaustive\n-            // enum, there is no point in enumerating all possible\n-            // variants, because the user can't actually match\n-            // against them themselves, e.g., in an example like:\n-            // ```\n-            //     let err: io::ErrorKind = ...;\n-            //     match err {\n-            //         io::ErrorKind::NotFound => {},\n-            //     }\n-            // ```\n-            // we don't want to show every possible IO error,\n-            // but instead have `_` as the witness (this is\n-            // actually *required* if the user specified *all*\n-            // IO errors, but is probably what we want in every\n-            // case).\n-            //\n-            // 2) If the user didn't actually specify a constructor\n+            // if the user didn't actually specify a constructor\n             // in this arm, e.g., in\n             // ```\n             //     let x: (Direction, Direction, bool) = ...;\n@@ -1691,7 +1686,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n             // `(<direction-1>, <direction-2>, true)` - we are\n             // satisfied with `(_, _, true)`. In this case,\n             // `used_ctors` is empty.\n-            if is_non_exhaustive || missing_ctors.all_ctors_are_missing() {\n+            if missing_ctors.all_ctors_are_missing() {\n                 // All constructors are unused. Add a wild pattern\n                 // rather than each individual constructor.\n                 usefulness.apply_wildcard(pcx.ty)\n@@ -2218,13 +2213,21 @@ fn patterns_for_variant<'p, 'a: 'p, 'tcx>(\n /// fields filled with wild patterns.\n fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-    pat: &'q Pat<'tcx>,\n+    mut pat: &'q Pat<'tcx>,\n     constructor: &Constructor<'tcx>,\n     ctor_wild_subpatterns: &[&'p Pat<'tcx>],\n ) -> Option<PatStack<'p, 'tcx>> {\n+    while let PatKind::AscribeUserType { ref subpattern, .. } = *pat.kind {\n+        pat = subpattern;\n+    }\n+\n+    if let NonExhaustive = constructor {\n+        // Only a wildcard pattern can match the special extra constructor\n+        return if pat.is_wildcard() { Some(PatStack::default()) } else { None };\n+    }\n+\n     let result = match *pat.kind {\n-        PatKind::AscribeUserType { ref subpattern, .. } => PatStack::from_pattern(subpattern)\n-            .specialize_constructor(cx, constructor, ctor_wild_subpatterns),\n+        PatKind::AscribeUserType { .. } => bug!(), // Handled above\n \n         PatKind::Binding { .. } | PatKind::Wild => {\n             Some(PatStack::from_slice(ctor_wild_subpatterns))"}, {"sha": "0f508966a4cc2fe9ddc7e1fd56771fe5f076b94c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -247,7 +247,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     } = options;\n \n     // Add the rustdoc cfg into the doc build.\n-    cfgs.push(\"rustdoc\".to_string());\n+    cfgs.push(\"doc\".to_string());\n \n     let cpath = Some(input.clone());\n     let input = Input::File(input);\n@@ -335,6 +335,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         crate_name,\n         lint_caps,\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     interface::run_compiler_in_existing_thread_pool(config, |compiler| {"}, {"sha": "c483f6fb4770f941d7e1722d85f38b07545a8df1", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -64,7 +64,7 @@ pub fn run(options: Options) -> i32 {\n     };\n \n     let mut cfgs = options.cfgs.clone();\n-    cfgs.push(\"rustdoc\".to_owned());\n+    cfgs.push(\"doc\".to_owned());\n     cfgs.push(\"doctest\".to_owned());\n     let config = interface::Config {\n         opts: sessopts,\n@@ -79,6 +79,7 @@ pub fn run(options: Options) -> i32 {\n         crate_name: options.crate_name.clone(),\n         lint_caps: Default::default(),\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     let mut test_args = options.test_args.clone();"}, {"sha": "557da174d8941b2d39ab7db81f58450ce7fd7e6e", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -369,7 +369,7 @@ impl<R: Seek> Seek for BufReader<R> {\n ///\n /// It is critical to call [`flush`] before `BufWriter<W>` is dropped. Though\n /// dropping will attempt to flush the the contents of the buffer, any errors\n-/// that happen in the process of dropping will be ignored. Calling ['flush']\n+/// that happen in the process of dropping will be ignored. Calling [`flush`]\n /// ensures that the buffer is empty and thus dropping will not even attempt\n /// file operations.\n ///"}, {"sha": "a8d2b0cb397abf1df57f8a3866e54fcc7c347b81", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -4,7 +4,7 @@\n #![allow(missing_docs, nonstandard_style, missing_debug_implementations)]\n \n cfg_if::cfg_if! {\n-    if #[cfg(rustdoc)] {\n+    if #[cfg(doc)] {\n \n         // When documenting libstd we want to show unix/windows/linux modules as\n         // these are the \"main modules\" that are used across platforms. This"}, {"sha": "9eeab34643f93db26ad76e520489e2ba443f4367", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -56,7 +56,7 @@ cfg_if::cfg_if! {\n // then later used in the `std::os` module when documenting, for example,\n // Windows when we're compiling for Linux.\n \n-#[cfg(rustdoc)]\n+#[cfg(doc)]\n cfg_if::cfg_if! {\n     if #[cfg(unix)] {\n         // On unix we'll document what's already available\n@@ -80,7 +80,7 @@ cfg_if::cfg_if! {\n     }\n }\n \n-#[cfg(rustdoc)]\n+#[cfg(doc)]\n cfg_if::cfg_if! {\n     if #[cfg(windows)] {\n         // On windows we'll just be documenting what's already available"}, {"sha": "bf0166ceb6fbf539466d22aac5c14af4e7859269", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -2,21 +2,21 @@\n \n use crate::io::ErrorKind;\n \n-#[cfg(any(rustdoc, target_os = \"linux\"))] pub use crate::os::linux as platform;\n-\n-#[cfg(all(not(rustdoc), target_os = \"android\"))]   pub use crate::os::android as platform;\n-#[cfg(all(not(rustdoc), target_os = \"dragonfly\"))] pub use crate::os::dragonfly as platform;\n-#[cfg(all(not(rustdoc), target_os = \"freebsd\"))]   pub use crate::os::freebsd as platform;\n-#[cfg(all(not(rustdoc), target_os = \"haiku\"))]     pub use crate::os::haiku as platform;\n-#[cfg(all(not(rustdoc), target_os = \"ios\"))]       pub use crate::os::ios as platform;\n-#[cfg(all(not(rustdoc), target_os = \"macos\"))]     pub use crate::os::macos as platform;\n-#[cfg(all(not(rustdoc), target_os = \"netbsd\"))]    pub use crate::os::netbsd as platform;\n-#[cfg(all(not(rustdoc), target_os = \"openbsd\"))]   pub use crate::os::openbsd as platform;\n-#[cfg(all(not(rustdoc), target_os = \"solaris\"))]   pub use crate::os::solaris as platform;\n-#[cfg(all(not(rustdoc), target_os = \"emscripten\"))] pub use crate::os::emscripten as platform;\n-#[cfg(all(not(rustdoc), target_os = \"fuchsia\"))]   pub use crate::os::fuchsia as platform;\n-#[cfg(all(not(rustdoc), target_os = \"l4re\"))]      pub use crate::os::linux as platform;\n-#[cfg(all(not(rustdoc), target_os = \"redox\"))]      pub use crate::os::redox as platform;\n+#[cfg(any(doc, target_os = \"linux\"))] pub use crate::os::linux as platform;\n+\n+#[cfg(all(not(doc), target_os = \"android\"))]   pub use crate::os::android as platform;\n+#[cfg(all(not(doc), target_os = \"dragonfly\"))] pub use crate::os::dragonfly as platform;\n+#[cfg(all(not(doc), target_os = \"freebsd\"))]   pub use crate::os::freebsd as platform;\n+#[cfg(all(not(doc), target_os = \"haiku\"))]     pub use crate::os::haiku as platform;\n+#[cfg(all(not(doc), target_os = \"ios\"))]       pub use crate::os::ios as platform;\n+#[cfg(all(not(doc), target_os = \"macos\"))]     pub use crate::os::macos as platform;\n+#[cfg(all(not(doc), target_os = \"netbsd\"))]    pub use crate::os::netbsd as platform;\n+#[cfg(all(not(doc), target_os = \"openbsd\"))]   pub use crate::os::openbsd as platform;\n+#[cfg(all(not(doc), target_os = \"solaris\"))]   pub use crate::os::solaris as platform;\n+#[cfg(all(not(doc), target_os = \"emscripten\"))] pub use crate::os::emscripten as platform;\n+#[cfg(all(not(doc), target_os = \"fuchsia\"))]   pub use crate::os::fuchsia as platform;\n+#[cfg(all(not(doc), target_os = \"l4re\"))]      pub use crate::os::linux as platform;\n+#[cfg(all(not(doc), target_os = \"redox\"))]      pub use crate::os::redox as platform;\n \n pub use self::rand::hashmap_random_keys;\n pub use libc::strlen;"}, {"sha": "8912aed9255806c05b48ac15be46f95e73dd5648", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -45,7 +45,7 @@ pub mod backtrace;\n pub mod condvar;\n pub mod io;\n pub mod mutex;\n-#[cfg(any(rustdoc, // see `mod os`, docs are generated for multiple platforms\n+#[cfg(any(doc, // see `mod os`, docs are generated for multiple platforms\n           unix,\n           target_os = \"redox\",\n           target_os = \"cloudabi\","}, {"sha": "555c715771aaadce12d5c5d91e33607d400072f9", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -30,7 +30,7 @@ const GATED_CFGS: &[(Symbol, Symbol, GateFn)] = &[\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n-    (sym::rustdoc, sym::doc_cfg, cfg_fn!(doc_cfg)),\n+    (sym::doc, sym::doc_cfg, cfg_fn!(doc_cfg)),\n ];\n \n #[derive(Debug)]"}, {"sha": "9f1850dfb4c90e291a6b612a40e9d777e9f49eb1", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -60,6 +60,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         crate_name: None,\n         lint_caps: Default::default(),\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     interface::run_compiler(config, |compiler| {"}, {"sha": "62fd3da9233fa895495fac6fd06685e01327a211", "filename": "src/test/rustdoc-ui/doc-test-rustdoc-feature.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -4,11 +4,11 @@\n \n #![feature(doc_cfg)]\n \n-// Make sure `cfg(rustdoc)` is set when finding doctests but not inside the doctests.\n+// Make sure `cfg(doc)` is set when finding doctests but not inside the doctests.\n \n /// ```\n /// #![feature(doc_cfg)]\n-/// assert!(!cfg!(rustdoc));\n+/// assert!(!cfg!(doc));\n /// ```\n-#[cfg(rustdoc)]\n+#[cfg(doc)]\n pub struct Foo;"}, {"sha": "60c6e8a80fb6a9ec2b484621e4762af13d7ddb93", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -18,3 +18,4 @@ LL |             let _failure_proves_not_implied_outlives_region_b: &'b T = &x;\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "d5310c47fcf1e4b3f0f753edaec96fd9b1567cea", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -11,3 +11,4 @@ LL |     let z: I::A = if cond { x } else { y };\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "58ceec9040b9d331f41f140569796283ec4eb7e9", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -18,3 +18,4 @@ LL |     let _c: <T as Trait<'a>>::Type = b;\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "fa4c6adb5fff74b3775531fdf32ee2235238379b", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -22,3 +22,4 @@ LL |    (a, b)\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "5009e0868a7d4f8a8cf673ce3c219c5b87b35e9d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -21,3 +21,4 @@ LL |    let b = bar(foo, x);\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "65d16440ac9b04bb8fd324679ef5314c847b8f82", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -11,3 +11,4 @@ LL |    let b = bar(f, y);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "8813183312ddf62dcc15de7736f856adc9da0fec", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -11,3 +11,4 @@ LL |         foo\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "7b8f290d6c2f86b65dcc4c6d80406924ef3c0197", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -9,3 +9,4 @@ LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "67b6f64eaa64f1cbe65634a8657a45ce77e45f36", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -10,3 +10,4 @@ LL |     S { pointer: &mut *p.pointer }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "2d4c939f47d795369a55f4c89dc68bc0d1263e77", "filename": "src/test/ui/consts/issue-52432.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_raw_ptr_to_usize_cast)]\n+\n+fn main() {\n+    [(); &(static |x| {}) as *const _ as usize];\n+    //~^ ERROR: closures cannot be static\n+    //~| ERROR: type annotations needed\n+    [(); &(static || {}) as *const _ as usize];\n+    //~^ ERROR: closures cannot be static\n+    //~| ERROR: evaluation of constant value failed\n+}"}, {"sha": "e9539d24118a0533bbc18e447589c3693d2fd9ad", "filename": "src/test/ui/consts/issue-52432.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -0,0 +1,28 @@\n+error[E0697]: closures cannot be static\n+  --> $DIR/issue-52432.rs:4:12\n+   |\n+LL |     [(); &(static |x| {}) as *const _ as usize];\n+   |            ^^^^^^^^^^\n+\n+error[E0697]: closures cannot be static\n+  --> $DIR/issue-52432.rs:7:12\n+   |\n+LL |     [(); &(static || {}) as *const _ as usize];\n+   |            ^^^^^^^^^\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-52432.rs:4:20\n+   |\n+LL |     [(); &(static |x| {}) as *const _ as usize];\n+   |                    ^ consider giving this closure parameter a type\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52432.rs:7:10\n+   |\n+LL |     [(); &(static || {}) as *const _ as usize];\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0080, E0282, E0697.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "439f9e5221f66556693b50b3af78f0f090866dac", "filename": "src/test/ui/continue-after-missing-main.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -21,4 +21,5 @@ LL |     let _: AdaptedMatrixProvider<'original_data, MP> = tableau.provider().c\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0601`.\n+Some errors have detailed explanations: E0601, E0623.\n+For more information about an error, try `rustc --explain E0601`."}, {"sha": "9830503a8cac6ab7d05da1a3019a105b32247870", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg-cfg-rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg-cfg-rustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg-cfg-rustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg-cfg-rustdoc.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -1,4 +1,4 @@\n-#[cfg(rustdoc)] //~ ERROR: `cfg(rustdoc)` is experimental and subject to change\n+#[cfg(doc)] //~ ERROR: `cfg(doc)` is experimental and subject to change\n pub struct SomeStruct;\n \n fn main() {}"}, {"sha": "26a1f4decf4cfaaaf55e174d3f0dff2f1fecb332", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg-cfg-rustdoc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: `cfg(rustdoc)` is experimental and subject to change\n+error[E0658]: `cfg(doc)` is experimental and subject to change\n   --> $DIR/feature-gate-doc_cfg-cfg-rustdoc.rs:1:7\n    |\n-LL | #[cfg(rustdoc)]\n-   |       ^^^^^^^\n+LL | #[cfg(doc)]\n+   |       ^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/43781\n    = help: add `#![feature(doc_cfg)]` to the crate attributes to enable"}, {"sha": "a8341f62e1d14e7046b1e718055a346e56c19873", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -77,4 +77,5 @@ LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0310`.\n+Some errors have detailed explanations: E0310, E0623.\n+For more information about an error, try `rustc --explain E0310`."}, {"sha": "db72c20697108a8d9b1e450aeb9df8a2f27c0370", "filename": "src/test/ui/in-band-lifetimes/mismatched.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -16,4 +16,5 @@ LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y }\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0621`.\n+Some errors have detailed explanations: E0621, E0623.\n+For more information about an error, try `rustc --explain E0621`."}, {"sha": "15891c9e7a62d8600d9b6e3d8d7439e44805f8dd", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -22,3 +22,4 @@ LL |         x\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "945dfc26b206dcf80cf0877e15cdcf6b87b1f38f", "filename": "src/test/ui/issues/issue-17728.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -29,4 +29,5 @@ LL | |     }\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0623.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "999399ec8d34c6bed4c93fcedc6bf399cf86cf9f", "filename": "src/test/ui/issues/issue-40231-1.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fissues%2Fissue-40231-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fissues%2Fissue-40231-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40231-1.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -0,0 +1,54 @@\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+trait Structure<E>: Sized where E: Encoding {\n+    type RefTarget: ?Sized;\n+    type FfiPtr;\n+    unsafe fn borrow_from_ffi_ptr<'a>(ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget>;\n+}\n+\n+enum Slice {}\n+\n+impl<E> Structure<E> for Slice where E: Encoding {\n+    type RefTarget = [E::Unit];\n+    type FfiPtr = (*const E::FfiUnit, usize);\n+    unsafe fn borrow_from_ffi_ptr<'a>(_ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget> {\n+        panic!()\n+    }\n+}\n+\n+trait Encoding {\n+    type Unit: Unit;\n+    type FfiUnit;\n+}\n+\n+trait Unit {}\n+\n+enum Utf16 {}\n+\n+impl Encoding for Utf16 {\n+    type Unit = Utf16Unit;\n+    type FfiUnit = u16;\n+}\n+\n+struct Utf16Unit(pub u16);\n+\n+impl Unit for Utf16Unit {}\n+\n+type SUtf16Str = SeStr<Slice, Utf16>;\n+\n+struct SeStr<S, E> where S: Structure<E>, E: Encoding {\n+    _data: S::RefTarget,\n+}\n+\n+impl<S, E> SeStr<S, E> where S: Structure<E>, E: Encoding {\n+    pub unsafe fn from_ptr<'a>(_ptr: S::FfiPtr) -> Option<&'a Self> {\n+        panic!()\n+    }\n+}\n+\n+fn main() {\n+    const TEXT_U16: &'static [u16] = &[];\n+    let _ = unsafe { SUtf16Str::from_ptr((TEXT_U16.as_ptr(), TEXT_U16.len())).unwrap() };\n+}"}, {"sha": "780433b28c5964951ee043701d842a1607d76284", "filename": "src/test/ui/issues/issue-40231-2.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fissues%2Fissue-40231-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fissues%2Fissue-40231-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40231-2.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -0,0 +1,54 @@\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+trait Structure<E>: Sized where E: Encoding {\n+    type RefTarget: ?Sized;\n+    type FfiPtr;\n+    unsafe fn borrow_from_ffi_ptr<'a>(ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget>;\n+}\n+\n+enum Slice {}\n+\n+impl<E> Structure<E> for Slice where E: Encoding {\n+    type RefTarget = [E::Unit];\n+    type FfiPtr = (*const E::FfiUnit, usize);\n+    unsafe fn borrow_from_ffi_ptr<'a>(_ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget> {\n+        panic!()\n+    }\n+}\n+\n+trait Encoding {\n+    type Unit: Unit;\n+    type FfiUnit;\n+}\n+\n+trait Unit {}\n+\n+enum Utf16 {}\n+\n+impl Encoding for Utf16 {\n+    type Unit = Utf16Unit;\n+    type FfiUnit = u16;\n+}\n+\n+struct Utf16Unit(pub u16);\n+\n+impl Unit for Utf16Unit {}\n+\n+struct SUtf16Str {\n+    _data: <Slice as Structure<Utf16>>::RefTarget,\n+}\n+\n+impl SUtf16Str {\n+    pub unsafe fn from_ptr<'a>(ptr: <Slice as Structure<Utf16>>::FfiPtr)\n+    -> Option<&'a Self> {\n+        std::mem::transmute::<Option<&[<Utf16 as Encoding>::Unit]>, _>(\n+            <Slice as Structure<Utf16>>::borrow_from_ffi_ptr(ptr))\n+    }\n+}\n+\n+fn main() {\n+    const TEXT_U16: &'static [u16] = &[];\n+    let _ = unsafe { SUtf16Str::from_ptr((TEXT_U16.as_ptr(), TEXT_U16.len())).unwrap() };\n+}"}, {"sha": "e9f5fc311dfc236e2cdc752097169d4695472580", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -11,3 +11,4 @@ LL |         if x > y { x } else { y }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "0d506f2b9fcb466440709da9f71a32c08ce05dae", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -11,3 +11,4 @@ LL |     x\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "98a23613c3635872ec9cc986b1986efe32c175e0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -11,3 +11,4 @@ LL |         if true { x } else { self }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "e505c9c0dc262d8a8808b27ee1b855c95e728f9f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     x.push(y);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "63b1c6db28f14dc78cee91664e681209bd34aca3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -9,3 +9,4 @@ LL |     x.push(z);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "2f669efcf1eb4a9d4c2b82c8998f3675ddbfc0bc", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     let a: &mut Vec<Ref<i32>> = x;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "258b6805acd5cc0a76df9d4721ff066876fd8a2e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     let a: &mut Vec<Ref<i32>> = x;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "0aff80c6fbdd3c3fb3f316c75ea0f8a940e7a597", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     *v = x;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "2e5ff6782d3b65ac0f617879e7cb025caa750893", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -16,3 +16,4 @@ LL |     z.push((x,y));\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "8e41d7c54e68d9be496a4c2eb12616b8d83312c1", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     x.b = y.b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "d659c88f69ef7b9cd9b98e7e777627814f32b074", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     x.a = x.b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "374bbd93d0874c38ef4373f61f4328e28543029b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -9,3 +9,4 @@ LL |     x.push(y);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "94798d1ce2ab6d80de69d8919934a0f58c9ccf67", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     x.push(y);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "9f5a79ed333dcb6e24d43d8a973ebc9396640cc9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     x.push(y);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "2c87f8dbd2c2b0e09971e5c0376273a3fe21ae4a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     x.push(y);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "60b92ed2b3247f6dcff7e5c5709a20a526ee7d58", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -10,3 +10,4 @@ LL |     y = x.b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "a220c8ddb2be6e1c39ef4e90416553881d5e230f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     y.b = x;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "73472a8d0225293c9424003e5c0abeb65fb690c3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     y.b = x;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "eb6e6f2e95e784d427cd50b3743c8206a375e449", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     x.b = y;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "199f880b3c4877107902916e061accfb5c21e3bc", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -10,3 +10,4 @@ LL |     x\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "838f43b37747f62cf861c5aab35519851d1ee6e7", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -10,3 +10,4 @@ LL |         if true { x } else { self }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "d2cc3dba6a4336cce5781dd19a8b6249d50f26f8", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |   y.push(z);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "e8b0208f092f76a10fc319ecba671f17610d4d61", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |         x.push(y);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "2acc4eaf60f557dc1510588e1e5c794dc0b0fb0a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |   y.push(z);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "b2784827672b8fb165d45c6b5f286673d7cc1589", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL |     x.push(y);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "89579fb1df3df4c6e5b0d3f75d8e7b23a58f95b6", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -27,4 +27,5 @@ LL | fn load2<'a>(ss: &MyBox<dyn SomeTrait + 'a>) -> MyBox<dyn SomeTrait + 'a> {\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0623.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "36c66451cfaf6e806a2b55fd462022afd73c2117", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -27,4 +27,5 @@ LL |     let _: fn(&mut &isize, &mut &isize) = a;\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0623.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "a366bd2e5c2d75e1fa774dfee586c073d1f9dcd0", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -38,4 +38,5 @@ LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0623.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "eb205a303dbdfaa17e20af835cc6d72d8bbb791a", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -9,3 +9,4 @@ LL |     a.bigger_region(b)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "de1073cd1d9dafeea7ae022bdea996d5246062fc", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -9,3 +9,4 @@ LL |     f.method(b);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "2fc1fc3f681286e0f4a7dc4045a774d2460da297", "filename": "src/test/ui/regions/regions-creating-enums3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -10,3 +10,4 @@ LL |     Ast::Add(x, y)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "4648bf046bc778d411deb9663ea6b0e7dcfdfa3d", "filename": "src/test/ui/regions/regions-free-region-ordering-callee.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -22,3 +22,4 @@ LL |     let z: &'b usize = &*x;\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "a33d3583552dce2fc634ab77a8e567c37ed68227", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.migrate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -29,3 +29,4 @@ LL |     let z: Option<&'a &'b usize> = None;\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "f3a0358b90fb0849fcaba5a22836d35fa43a0fad", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -12,3 +12,4 @@ LL |     let _: Contravariant<'long> = c;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "c3e2075fbc37e840a84123361b3adc2097bf4e35", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -11,3 +11,4 @@ LL |     let _: Covariant<'short> = c;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "e260fccf8488ce636f145bd17e59d10314d31711", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -27,4 +27,5 @@ LL |     let _: fn(&mut &isize, &mut &isize) = a;\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0623.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "aca3a1ed05728cd074447feb67d566642862b201", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -10,3 +10,4 @@ LL |     &mut ***p\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "a9916dbe4f5ef615abb8327f9401d448b1042587", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -10,3 +10,4 @@ LL |     &mut **p\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "98f7a8136da91ef9a4704d1e34f988c2c37e8bfe", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -9,3 +9,4 @@ LL |     let _: S<'long, 'long> = c;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "e7c106cbbe3d1d55444dcd8d344706fd6ea2d3fa", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -12,3 +12,4 @@ LL |     let _: Contravariant<'long> = c;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "e5e5261ba993f9fbdebffbcca9f4f7dd2559879b", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -11,3 +11,4 @@ LL |     let _: Covariant<'short> = c;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "2a2d5d019a129c6cd963ab9ad377295d503f41d7", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -11,3 +11,4 @@ LL |     let _: Invariant<'short> = c;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "37297032632e13bc09f4ecdda050fbe1036b9c63", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -24,3 +24,4 @@ LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "f3a7d147201715327b33d100cc1133891e22fd35", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -24,3 +24,4 @@ LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "235b71ccab3a8be6643201ec9070d6ed191251e4", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -60,3 +60,4 @@ LL |         f\n \n error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "afd07d38f2fe47ab198d3f2cfec61015f6a78acc", "filename": "src/test/ui/self/elision/lt-ref-self.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -60,3 +60,4 @@ LL |         f\n \n error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "a656808d46bc2bb965062beb5c587518ecf5038a", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -60,3 +60,4 @@ LL |         f\n \n error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "3d6ae4b3dd388889206bcd39b6db4c9fb0b66398", "filename": "src/test/ui/self/elision/ref-mut-self.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -60,3 +60,4 @@ LL |         f\n \n error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "2dc8cdb7d28ecb48afeb5bec154482c4e7effc3d", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -50,3 +50,4 @@ LL |         f\n \n error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "3fec398bb9879c6b658cd7e061deee59ba95fa06", "filename": "src/test/ui/self/elision/ref-mut-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -50,3 +50,4 @@ LL |         f\n \n error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "bda958241b67b6564df1b8d6e7b8ee6a02ab8c04", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -70,3 +70,4 @@ LL |         f\n \n error: aborting due to 7 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "8343c8d349e1619ea3cbff4bd2480449937b7c8c", "filename": "src/test/ui/self/elision/ref-self.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -70,3 +70,4 @@ LL |         f\n \n error: aborting due to 7 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "49a2a00953d8793905d7af10746dd28814487565", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -50,3 +50,4 @@ LL |         f\n \n error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "5116488dd22bb3154d5ba67582418543973638f5", "filename": "src/test/ui/self/elision/ref-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -50,3 +50,4 @@ LL |         f\n \n error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "586ff7a31587fa71820c8f53c2d8e39ca4283bec", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -0,0 +1,9 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Closure = impl FnOnce(); //~ ERROR: type mismatch resolving\n+\n+fn c() -> Closure {\n+    || -> Closure { || () }\n+}\n+\n+fn main() {}"}, {"sha": "a5065241fc74ddd30b379bdc339a056b0d453edb", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -0,0 +1,13 @@\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:6:5: 6:28] as std::ops::FnOnce<()>>::Output == ()`\n+  --> $DIR/issue-63279.rs:3:1\n+   |\n+LL | type Closure = impl FnOnce();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found ()\n+   |\n+   = note: expected type `Closure`\n+              found type `()`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "eec5e962b431e55ef2bcd69fcc003fd0c255a629", "filename": "src/test/ui/unboxed-closures/issue-30904.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.rs?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -0,0 +1,36 @@\n+#![feature(fn_traits, unboxed_closures)]\n+\n+fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n+\n+struct Compose<F,G>(F,G);\n+impl<T,F,G> FnOnce<(T,)> for Compose<F,G>\n+where F: FnOnce<(T,)>, G: FnOnce<(F::Output,)> {\n+    type Output = G::Output;\n+    extern \"rust-call\" fn call_once(self, (x,): (T,)) -> G::Output {\n+        (self.1)((self.0)(x))\n+    }\n+}\n+\n+struct Str<'a>(&'a str);\n+fn mk_str<'a>(s: &'a str) -> Str<'a> { Str(s) }\n+\n+fn main() {\n+    let _: for<'a> fn(&'a str) -> Str<'a> = mk_str;\n+    // expected concrete lifetime, found bound lifetime parameter 'a\n+    let _: for<'a> fn(&'a str) -> Str<'a> = Str;\n+    //~^ ERROR: mismatched types\n+\n+    test(|_: &str| {});\n+    test(mk_str);\n+    // expected concrete lifetime, found bound lifetime parameter 'x\n+    test(Str); //~ ERROR: type mismatch in function arguments\n+\n+    test(Compose(|_: &str| {}, |_| {}));\n+    test(Compose(mk_str, |_| {}));\n+    // internal compiler error: cannot relate bound region:\n+    //   ReLateBound(DebruijnIndex { depth: 2 },\n+    //     BrNamed(DefId { krate: 0, node: DefIndex(6) => test::'x }, 'x(65)))\n+    //<= ReSkolemized(0,\n+    //     BrNamed(DefId { krate: 0, node: DefIndex(6) => test::'x }, 'x(65)))\n+    test(Compose(Str, |_| {}));\n+}"}, {"sha": "943cbe0ccc2978d63f48c0db601cd66a50b7754b", "filename": "src/test/ui/unboxed-closures/issue-30904.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-30904.rs:20:45\n+   |\n+LL |     let _: for<'a> fn(&'a str) -> Str<'a> = Str;\n+   |                                             ^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+   |\n+   = note: expected type `for<'a> fn(&'a str) -> Str<'a>`\n+              found type `fn(&str) -> Str<'_> {Str::<'_>}`\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/issue-30904.rs:26:10\n+   |\n+LL | fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n+   |    ----    -------------------------- required by this bound in `test`\n+...\n+LL | struct Str<'a>(&'a str);\n+   | ------------------------ found signature of `fn(&str) -> _`\n+...\n+LL |     test(Str);\n+   |          ^^^ expected signature of `for<'x> fn(&'x str) -> _`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "76c14ccc14b4522906c1821bb06a5ec6c26b9572", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -8,3 +8,4 @@ LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "6fcd6460fe30ae5a4bd841be86f5e6bbc1e61cae", "filename": "src/test/ui/variance/variance-cell-is-invariant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/695fe965173795f9242dfcad6d1c07d7a17b106a/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.stderr?ref=695fe965173795f9242dfcad6d1c07d7a17b106a", "patch": "@@ -12,3 +12,4 @@ LL |     let _: Foo<'long> = c;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0623`."}]}