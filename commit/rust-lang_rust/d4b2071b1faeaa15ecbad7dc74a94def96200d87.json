{"sha": "d4b2071b1faeaa15ecbad7dc74a94def96200d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YjIwNzFiMWZhZWFhMTVlY2JhZDdkYzc0YTk0ZGVmOTYyMDBkODc=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-03-11T15:54:57Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-03-11T15:54:57Z"}, "message": "Resolved nits raised in review.", "tree": {"sha": "a0e4d4150baeeea49e68e4fb94828e58a6d791f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e4d4150baeeea49e68e4fb94828e58a6d791f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4b2071b1faeaa15ecbad7dc74a94def96200d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b2071b1faeaa15ecbad7dc74a94def96200d87", "html_url": "https://github.com/rust-lang/rust/commit/d4b2071b1faeaa15ecbad7dc74a94def96200d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4b2071b1faeaa15ecbad7dc74a94def96200d87/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8629fd3e4e5184852352ea1bb18bb1c8465ffac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8629fd3e4e5184852352ea1bb18bb1c8465ffac3", "html_url": "https://github.com/rust-lang/rust/commit/8629fd3e4e5184852352ea1bb18bb1c8465ffac3"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c383f21dcd752ae327a13ad9289977d2387467a2", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4b2071b1faeaa15ecbad7dc74a94def96200d87/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b2071b1faeaa15ecbad7dc74a94def96200d87/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=d4b2071b1faeaa15ecbad7dc74a94def96200d87", "patch": "@@ -190,7 +190,7 @@ impl Condvar {\n     /// // Wait for the thread to start up.\n     /// let &(ref lock, ref cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n-    /// // As long as the value inside the `Mutex` is `false`, we wait.\n+    /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// while !*started {\n     ///     started = cvar.wait(started).unwrap();\n     /// }\n@@ -254,7 +254,7 @@ impl Condvar {\n     ///\n     /// // Wait for the thread to start up.\n     /// let &(ref lock, ref cvar) = &*pair;\n-    /// // As long as the value inside the `Mutex` is `false`, we wait.\n+    /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// let _guard = cvar.wait_until(lock.lock().unwrap(), |started| { *started }).unwrap();\n     /// ```\n     #[unstable(feature = \"wait_until\", issue = \"47960\")]\n@@ -311,7 +311,7 @@ impl Condvar {\n     /// // Wait for the thread to start up.\n     /// let &(ref lock, ref cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n-    /// // As long as the value inside the `Mutex` is `false`, we wait.\n+    /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// loop {\n     ///     let result = cvar.wait_timeout_ms(started, 10).unwrap();\n     ///     // 10 milliseconds have passed, or maybe the value changed!\n@@ -384,7 +384,7 @@ impl Condvar {\n     /// // wait for the thread to start up\n     /// let &(ref lock, ref cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n-    /// // as long as the value inside the `Mutex` is `false`, we wait\n+    /// // as long as the value inside the `Mutex<bool>` is `false`, we wait\n     /// loop {\n     ///     let result = cvar.wait_timeout(started, Duration::from_millis(10)).unwrap();\n     ///     // 10 milliseconds have passed, or maybe the value changed!\n@@ -518,7 +518,7 @@ impl Condvar {\n     /// // Wait for the thread to start up.\n     /// let &(ref lock, ref cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n-    /// // As long as the value inside the `Mutex` is `false`, we wait.\n+    /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// while !*started {\n     ///     started = cvar.wait(started).unwrap();\n     /// }\n@@ -558,7 +558,7 @@ impl Condvar {\n     /// // Wait for the thread to start up.\n     /// let &(ref lock, ref cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n-    /// // As long as the value inside the `Mutex` is `false`, we wait.\n+    /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// while !*started {\n     ///     started = cvar.wait(started).unwrap();\n     /// }"}]}