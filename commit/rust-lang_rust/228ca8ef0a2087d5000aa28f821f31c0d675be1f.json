{"sha": "228ca8ef0a2087d5000aa28f821f31c0d675be1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOGNhOGVmMGEyMDg3ZDUwMDBhYTI4ZjgyMWYzMWMwZDY3NWJlMWY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-24T08:30:13Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-26T08:40:50Z"}, "message": "Access QueryStateShard directly.", "tree": {"sha": "7f185ac26bd2829aa182321f5fc91e5fdb148779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f185ac26bd2829aa182321f5fc91e5fdb148779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/228ca8ef0a2087d5000aa28f821f31c0d675be1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/228ca8ef0a2087d5000aa28f821f31c0d675be1f", "html_url": "https://github.com/rust-lang/rust/commit/228ca8ef0a2087d5000aa28f821f31c0d675be1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/228ca8ef0a2087d5000aa28f821f31c0d675be1f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d305b2ccc61c6faf6c10271122fcf3a76a94a5bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d305b2ccc61c6faf6c10271122fcf3a76a94a5bf", "html_url": "https://github.com/rust-lang/rust/commit/d305b2ccc61c6faf6c10271122fcf3a76a94a5bf"}], "stats": {"total": 24, "additions": 5, "deletions": 19}, "files": [{"sha": "f79aa992fd204433c66a2759201cdf14baebc9b3", "filename": "src/librustc_query_system/query/caches.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/228ca8ef0a2087d5000aa28f821f31c0d675be1f/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228ca8ef0a2087d5000aa28f821f31c0d675be1f/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs?ref=228ca8ef0a2087d5000aa28f821f31c0d675be1f", "patch": "@@ -1,6 +1,6 @@\n use crate::dep_graph::DepNodeIndex;\n use crate::query::config::QueryContext;\n-use crate::query::plumbing::{QueryLookup, QueryState, QueryStateShard};\n+use crate::query::plumbing::{QueryLookup, QueryState};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sharded::Sharded;\n@@ -21,19 +21,15 @@ pub trait QueryCache<CTX: QueryContext>: Default {\n     /// It returns the shard index and a lock guard to the shard,\n     /// which will be used if the query is not in the cache and we need\n     /// to compute it.\n-    fn lookup<R, GetCache, OnHit, OnMiss>(\n+    fn lookup<R, OnHit, OnMiss>(\n         &self,\n         state: &QueryState<CTX, Self>,\n-        get_cache: GetCache,\n         key: Self::Key,\n         // `on_hit` can be called while holding a lock to the query state shard.\n         on_hit: OnHit,\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        GetCache: for<'a> Fn(\n-            &'a mut QueryStateShard<CTX, Self::Key, Self::Sharded>,\n-        ) -> &'a mut Self::Sharded,\n         OnHit: FnOnce(&Self::Value, DepNodeIndex) -> R,\n         OnMiss: FnOnce(Self::Key, QueryLookup<'_, CTX, Self::Key, Self::Sharded>) -> R;\n \n@@ -76,24 +72,21 @@ impl<CTX: QueryContext, K: Eq + Hash, V: Clone> QueryCache<CTX> for DefaultCache\n     type Sharded = FxHashMap<K, (V, DepNodeIndex)>;\n \n     #[inline(always)]\n-    fn lookup<R, GetCache, OnHit, OnMiss>(\n+    fn lookup<R, OnHit, OnMiss>(\n         &self,\n         state: &QueryState<CTX, Self>,\n-        get_cache: GetCache,\n         key: K,\n         on_hit: OnHit,\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        GetCache:\n-            for<'a> Fn(&'a mut QueryStateShard<CTX, K, Self::Sharded>) -> &'a mut Self::Sharded,\n         OnHit: FnOnce(&V, DepNodeIndex) -> R,\n         OnMiss: FnOnce(K, QueryLookup<'_, CTX, K, Self::Sharded>) -> R,\n     {\n         let mut lookup = state.get_lookup(&key);\n         let lock = &mut *lookup.lock;\n \n-        let result = get_cache(lock).raw_entry().from_key_hashed_nocheck(lookup.key_hash, &key);\n+        let result = lock.cache.raw_entry().from_key_hashed_nocheck(lookup.key_hash, &key);\n \n         if let Some((_, value)) = result { on_hit(&value.0, value.1) } else { on_miss(key, lookup) }\n     }"}, {"sha": "cf23467cf99fc125c5a365843ac775b02547bfc6", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/228ca8ef0a2087d5000aa28f821f31c0d675be1f/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228ca8ef0a2087d5000aa28f821f31c0d675be1f/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=228ca8ef0a2087d5000aa28f821f31c0d675be1f", "patch": "@@ -30,19 +30,13 @@ use std::ptr;\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n pub struct QueryStateShard<CTX: QueryContext, K, C> {\n-    cache: C,\n+    pub(super) cache: C,\n     active: FxHashMap<K, QueryResult<CTX>>,\n \n     /// Used to generate unique ids for active jobs.\n     jobs: u32,\n }\n \n-impl<CTX: QueryContext, K, C> QueryStateShard<CTX, K, C> {\n-    fn get_cache(&mut self) -> &mut C {\n-        &mut self.cache\n-    }\n-}\n-\n impl<CTX: QueryContext, K, C: Default> Default for QueryStateShard<CTX, K, C> {\n     fn default() -> QueryStateShard<CTX, K, C> {\n         QueryStateShard { cache: Default::default(), active: Default::default(), jobs: 0 }\n@@ -372,7 +366,6 @@ where\n {\n     state.cache.lookup(\n         state,\n-        QueryStateShard::<CTX, C::Key, C::Sharded>::get_cache,\n         key,\n         |value, index| {\n             if unlikely!(tcx.profiler().enabled()) {"}]}