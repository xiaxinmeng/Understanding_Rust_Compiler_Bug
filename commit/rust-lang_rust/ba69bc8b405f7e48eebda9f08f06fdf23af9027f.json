{"sha": "ba69bc8b405f7e48eebda9f08f06fdf23af9027f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjliYzhiNDA1ZjdlNDhlZWJkYTlmMDhmMDZmZGYyM2FmOTAyN2Y=", "commit": {"author": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-23T15:41:04Z"}, "committer": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-30T19:55:11Z"}, "message": "replace `BitAndAssign` example with something more evocative\n\nThis is the augmented-assignment version of PR #35809.\n\nr? @GuillaumeGomez\n\nimproved documentation a la PR #35993", "tree": {"sha": "67f5527bbdd5b4a50f0f51a839b0b753a6e8adb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f5527bbdd5b4a50f0f51a839b0b753a6e8adb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba69bc8b405f7e48eebda9f08f06fdf23af9027f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba69bc8b405f7e48eebda9f08f06fdf23af9027f", "html_url": "https://github.com/rust-lang/rust/commit/ba69bc8b405f7e48eebda9f08f06fdf23af9027f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba69bc8b405f7e48eebda9f08f06fdf23af9027f/comments", "author": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43204fff5d0a656f8a94bfff3129e04bc9d30ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/43204fff5d0a656f8a94bfff3129e04bc9d30ad4", "html_url": "https://github.com/rust-lang/rust/commit/43204fff5d0a656f8a94bfff3129e04bc9d30ad4"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "1bac3224d318b81e0bc7486d354765b13decce71", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ba69bc8b405f7e48eebda9f08f06fdf23af9027f/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba69bc8b405f7e48eebda9f08f06fdf23af9027f/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=ba69bc8b405f7e48eebda9f08f06fdf23af9027f", "patch": "@@ -1291,24 +1291,66 @@ rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `BitAndAssign`. When `Foo &= Foo` happens, it ends up\n-/// calling `bitand_assign`, and therefore, `main` prints `Bitwise And-ing!`.\n+/// In this example, the `&=` operator is lifted to a trivial `Scalar` type.\n ///\n /// ```\n /// use std::ops::BitAndAssign;\n ///\n-/// struct Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// struct Scalar(bool);\n ///\n-/// impl BitAndAssign for Foo {\n-///     fn bitand_assign(&mut self, _rhs: Foo) {\n-///         println!(\"Bitwise And-ing!\");\n+/// impl BitAndAssign for Scalar {\n+///     // rhs is the \"right-hand side\" of the expression `a &= b`\n+///     fn bitand_assign(&mut self, rhs: Self) {\n+///         *self = Scalar(self.0 & rhs.0)\n ///     }\n /// }\n ///\n-/// # #[allow(unused_assignments)]\n /// fn main() {\n-///     let mut foo = Foo;\n-///     foo &= Foo;\n+///     let mut scalar = Scalar(true);\n+///     scalar &= Scalar(true);\n+///     assert_eq!(scalar, Scalar(true));\n+///\n+///     let mut scalar = Scalar(true);\n+///     scalar &= Scalar(false);\n+///     assert_eq!(scalar, Scalar(false));\n+///\n+///     let mut scalar = Scalar(false);\n+///     scalar &= Scalar(true);\n+///     assert_eq!(scalar, Scalar(false));\n+///\n+///     let mut scalar = Scalar(false);\n+///     scalar &= Scalar(false);\n+///     assert_eq!(scalar, Scalar(false));\n+/// }\n+/// ```\n+///\n+/// In this example, the `BitAndAssign` trait is implemented for a\n+/// `BooleanVector` struct.\n+///\n+/// ```\n+/// use std::ops::BitAndAssign;\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// struct BooleanVector(Vec<bool>);\n+///\n+/// impl BitAndAssign for BooleanVector {\n+///     // rhs is the \"right-hand side\" of the expression `a &= b`\n+///     fn bitand_assign(&mut self, rhs: Self) {\n+///         assert_eq!(self.0.len(), rhs.0.len());\n+///         *self = BooleanVector(self.0\n+///                                   .iter()\n+///                                   .zip(rhs.0.iter())\n+///                                   .map(|(x, y)| *x && *y)\n+///                                   .collect());\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     let mut bv = BooleanVector(vec![true, true, false, false]);\n+///     bv &= BooleanVector(vec![true, false, true, false]);\n+///     let expected = BooleanVector(vec![true, false, false, false]);\n+///     assert_eq!(bv, expected);\n /// }\n /// ```\n #[lang = \"bitand_assign\"]"}]}