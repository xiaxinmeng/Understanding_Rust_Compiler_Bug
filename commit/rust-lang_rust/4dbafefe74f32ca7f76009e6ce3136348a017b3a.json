{"sha": "4dbafefe74f32ca7f76009e6ce3136348a017b3a", "node_id": "C_kwDOAAsO6NoAKDRkYmFmZWZlNzRmMzJjYTdmNzYwMDllNmNlMzEzNjM0OGEwMTdiM2E", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T13:04:40Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T14:18:11Z"}, "message": "Return Compiler from build_sysroot", "tree": {"sha": "226533bee182b2bd1aa898cb06878043d8eccb58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226533bee182b2bd1aa898cb06878043d8eccb58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dbafefe74f32ca7f76009e6ce3136348a017b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbafefe74f32ca7f76009e6ce3136348a017b3a", "html_url": "https://github.com/rust-lang/rust/commit/4dbafefe74f32ca7f76009e6ce3136348a017b3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dbafefe74f32ca7f76009e6ce3136348a017b3a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "html_url": "https://github.com/rust-lang/rust/commit/bbb7a3b9b9790d3abc62157f3f6daae9af94d841"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "8742389f3322718645ccd25d2e1c4a0e9f9f600f", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbafefe74f32ca7f76009e6ce3136348a017b3a/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbafefe74f32ca7f76009e6ce3136348a017b3a/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=4dbafefe74f32ca7f76009e6ce3136348a017b3a", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn run(\n         sysroot_kind,\n         cg_clif_dylib,\n         bootstrap_host_compiler,\n-        &bootstrap_host_compiler.triple,\n+        bootstrap_host_compiler.triple.clone(),\n     );\n \n     eprintln!(\"Running abi-cafe\");"}, {"sha": "7902c7005e017e9e45275681864c705e011e9028", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4dbafefe74f32ca7f76009e6ce3136348a017b3a/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbafefe74f32ca7f76009e6ce3136348a017b3a/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=4dbafefe74f32ca7f76009e6ce3136348a017b3a", "patch": "@@ -18,14 +18,16 @@ pub(crate) fn build_sysroot(\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib_src: &Path,\n     bootstrap_host_compiler: &Compiler,\n-    target_triple: &str,\n-) {\n+    target_triple: String,\n+) -> Compiler {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n \n     DIST_DIR.ensure_fresh(dirs);\n     BIN_DIR.ensure_exists(dirs);\n     LIB_DIR.ensure_exists(dirs);\n \n+    let is_native = bootstrap_host_compiler.triple == target_triple;\n+\n     // Copy the backend\n     let cg_clif_dylib_path = if cfg!(windows) {\n         // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n@@ -55,20 +57,20 @@ pub(crate) fn build_sysroot(\n \n     let host_rustlib_lib =\n         RUSTLIB_DIR.to_path(dirs).join(&bootstrap_host_compiler.triple).join(\"lib\");\n-    let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(target_triple).join(\"lib\");\n+    let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&target_triple).join(\"lib\");\n     fs::create_dir_all(&host_rustlib_lib).unwrap();\n     fs::create_dir_all(&target_rustlib_lib).unwrap();\n \n     if target_triple == \"x86_64-pc-windows-gnu\" {\n-        if !default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\").exists() {\n+        if !default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\").exists() {\n             eprintln!(\n                 \"The x86_64-pc-windows-gnu target needs to be installed first before it is possible \\\n                 to compile a sysroot for it.\",\n             );\n             process::exit(1);\n         }\n         for file in fs::read_dir(\n-            default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+            default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\"),\n         )\n         .unwrap()\n         {\n@@ -108,9 +110,9 @@ pub(crate) fn build_sysroot(\n                 try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n             }\n \n-            if target_triple != bootstrap_host_compiler.triple {\n+            if !is_native {\n                 for file in fs::read_dir(\n-                    default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+                    default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\"),\n                 )\n                 .unwrap()\n                 {\n@@ -127,13 +129,13 @@ pub(crate) fn build_sysroot(\n                 &cg_clif_dylib_path,\n             );\n \n-            if bootstrap_host_compiler.triple != target_triple {\n+            if !is_native {\n                 build_clif_sysroot_for_triple(\n                     dirs,\n                     channel,\n                     {\n                         let mut bootstrap_target_compiler = bootstrap_host_compiler.clone();\n-                        bootstrap_target_compiler.triple = target_triple.to_owned();\n+                        bootstrap_target_compiler.triple = target_triple.clone();\n                         bootstrap_target_compiler.set_cross_linker_and_runner();\n                         bootstrap_target_compiler\n                     },\n@@ -152,6 +154,12 @@ pub(crate) fn build_sysroot(\n             }\n         }\n     }\n+\n+    let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n+    if !is_native {\n+        target_compiler.set_cross_linker_and_runner();\n+    }\n+    target_compiler\n }\n \n pub(crate) static ORIG_BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");"}, {"sha": "6f388cd605fce2f194d0f43cea484e5c7233b29d", "filename": "build_system/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dbafefe74f32ca7f76009e6ce3136348a017b3a/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbafefe74f32ca7f76009e6ce3136348a017b3a/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=4dbafefe74f32ca7f76009e6ce3136348a017b3a", "patch": "@@ -154,7 +154,7 @@ pub fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n-                &target_triple,\n+                target_triple.clone(),\n             );\n \n             if bootstrap_host_compiler.triple == target_triple {\n@@ -177,7 +177,7 @@ pub fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n-                &target_triple,\n+                target_triple,\n             );\n         }\n         Command::Bench => {\n@@ -187,7 +187,7 @@ pub fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n-                &target_triple,\n+                target_triple,\n             );\n             bench::benchmark(&dirs, &bootstrap_host_compiler);\n         }"}, {"sha": "dcfadd737566e20d8a76f0fb8bf393e9b27eb654", "filename": "build_system/tests.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4dbafefe74f32ca7f76009e6ce3136348a017b3a/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbafefe74f32ca7f76009e6ce3136348a017b3a/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=4dbafefe74f32ca7f76009e6ce3136348a017b3a", "patch": "@@ -242,21 +242,21 @@ pub(crate) fn run_tests(\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib: &Path,\n     bootstrap_host_compiler: &Compiler,\n-    target_triple: &str,\n+    target_triple: String,\n ) {\n-    let runner =\n-        TestRunner::new(dirs.clone(), target_triple.to_owned(), get_host_triple() == target_triple);\n-\n     if config::get_bool(\"testsuite.no_sysroot\") {\n-        build_sysroot::build_sysroot(\n+        let target_compiler = build_sysroot::build_sysroot(\n             dirs,\n             channel,\n             SysrootKind::None,\n             cg_clif_dylib,\n             bootstrap_host_compiler,\n-            &target_triple,\n+            target_triple.clone(),\n         );\n \n+        let runner =\n+            TestRunner::new(dirs.clone(), target_compiler, get_host_triple() == target_triple);\n+\n         BUILD_EXAMPLE_OUT_DIR.ensure_fresh(dirs);\n         runner.run_testsuite(NO_SYSROOT_SUITE);\n     } else {\n@@ -267,26 +267,29 @@ pub(crate) fn run_tests(\n     let run_extended_sysroot = config::get_bool(\"testsuite.extended_sysroot\");\n \n     if run_base_sysroot || run_extended_sysroot {\n-        build_sysroot::build_sysroot(\n+        let target_compiler = build_sysroot::build_sysroot(\n             dirs,\n             channel,\n             sysroot_kind,\n             cg_clif_dylib,\n             bootstrap_host_compiler,\n-            &target_triple,\n+            target_triple.clone(),\n         );\n-    }\n \n-    if run_base_sysroot {\n-        runner.run_testsuite(BASE_SYSROOT_SUITE);\n-    } else {\n-        eprintln!(\"[SKIP] base_sysroot tests\");\n-    }\n+        let runner =\n+            TestRunner::new(dirs.clone(), target_compiler, get_host_triple() == target_triple);\n \n-    if run_extended_sysroot {\n-        runner.run_testsuite(EXTENDED_SYSROOT_SUITE);\n-    } else {\n-        eprintln!(\"[SKIP] extended_sysroot tests\");\n+        if run_base_sysroot {\n+            runner.run_testsuite(BASE_SYSROOT_SUITE);\n+        } else {\n+            eprintln!(\"[SKIP] base_sysroot tests\");\n+        }\n+\n+        if run_extended_sysroot {\n+            runner.run_testsuite(EXTENDED_SYSROOT_SUITE);\n+        } else {\n+            eprintln!(\"[SKIP] extended_sysroot tests\");\n+        }\n     }\n }\n \n@@ -298,11 +301,7 @@ struct TestRunner {\n }\n \n impl TestRunner {\n-    pub fn new(dirs: Dirs, target_triple: String, is_native: bool) -> Self {\n-        let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n-        if !is_native {\n-            target_compiler.set_cross_linker_and_runner();\n-        }\n+    pub fn new(dirs: Dirs, mut target_compiler: Compiler, is_native: bool) -> Self {\n         if let Ok(rustflags) = env::var(\"RUSTFLAGS\") {\n             target_compiler.rustflags.push(' ');\n             target_compiler.rustflags.push_str(&rustflags);"}]}