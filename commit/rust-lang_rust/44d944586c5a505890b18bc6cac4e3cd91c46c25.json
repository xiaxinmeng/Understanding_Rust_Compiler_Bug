{"sha": "44d944586c5a505890b18bc6cac4e3cd91c46c25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDk0NDU4NmM1YTUwNTg5MGIxOGJjNmNhYzRlM2NkOTFjNDZjMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T20:28:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T20:28:32Z"}, "message": "Auto merge of #6070 - matsujika:unnecessary_wrap, r=flip1995\n\nAdd new lint `unnecessary_wrap`\n\nFixes #5969\n\nchangelog: New lint [`unnecessary_wraps`]", "tree": {"sha": "f5843695df23fecd4b0c9d47fe22fd87712ae4c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5843695df23fecd4b0c9d47fe22fd87712ae4c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d944586c5a505890b18bc6cac4e3cd91c46c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d944586c5a505890b18bc6cac4e3cd91c46c25", "html_url": "https://github.com/rust-lang/rust/commit/44d944586c5a505890b18bc6cac4e3cd91c46c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d944586c5a505890b18bc6cac4e3cd91c46c25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5464cbed2f0e1119f91fe3e330b51ed9b612ace7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5464cbed2f0e1119f91fe3e330b51ed9b612ace7", "html_url": "https://github.com/rust-lang/rust/commit/5464cbed2f0e1119f91fe3e330b51ed9b612ace7"}, {"sha": "c7445d7f2c3eece2b9056d05ea92fb1d1112b3ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7445d7f2c3eece2b9056d05ea92fb1d1112b3ca", "html_url": "https://github.com/rust-lang/rust/commit/c7445d7f2c3eece2b9056d05ea92fb1d1112b3ca"}], "stats": {"total": 1101, "additions": 754, "deletions": 347}, "files": [{"sha": "64f67680b6c3ace5d0ceeed7a726a13a333fd2d5", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -2008,6 +2008,7 @@ Released 2018-09-13\n [`unnecessary_operation`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation\n [`unnecessary_sort_by`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\n [`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n+[`unnecessary_wraps`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps\n [`unneeded_field_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_field_pattern\n [`unneeded_wildcard_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_wildcard_pattern\n [`unnested_or_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnested_or_patterns"}, {"sha": "f0c1cb8d6e5eef61d0fdd012483384ced4ec77d9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -323,6 +323,7 @@ mod unicode;\n mod unit_return_expecting_ord;\n mod unnamed_address;\n mod unnecessary_sort_by;\n+mod unnecessary_wraps;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n mod unused_io_amount;\n@@ -892,6 +893,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unnamed_address::FN_ADDRESS_COMPARISONS,\n         &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n         &unnecessary_sort_by::UNNECESSARY_SORT_BY,\n+        &unnecessary_wraps::UNNECESSARY_WRAPS,\n         &unnested_or_patterns::UNNESTED_OR_PATTERNS,\n         &unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         &unused_io_amount::UNUSED_IO_AMOUNT,\n@@ -1064,6 +1066,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box redundant_clone::RedundantClone);\n     store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n     store.register_late_pass(|| box unnecessary_sort_by::UnnecessarySortBy);\n+    store.register_late_pass(|| box unnecessary_wraps::UnnecessaryWraps);\n     store.register_late_pass(|| box types::RefToMut);\n     store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n     store.register_late_pass(|| box missing_const_for_fn::MissingConstForFn);\n@@ -1571,6 +1574,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+        LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n@@ -1775,6 +1779,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+        LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&zero_div_zero::ZERO_DIVIDED_BY_ZERO),"}, {"sha": "540a1484a8558292a92ad7ea0222eabce8892d26", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 124, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,14 +1,12 @@\n use super::{contains_return, BIND_INSTEAD_OF_MAP};\n use crate::utils::{\n     in_macro, match_qpath, match_type, method_calls, multispan_sugg_with_applicability, paths, remove_blocks, snippet,\n-    snippet_with_macro_callsite, span_lint_and_sugg, span_lint_and_then,\n+    snippet_with_macro_callsite, span_lint_and_sugg, span_lint_and_then, visitors::find_all_ret_expressions,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, Visitor};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_span::Span;\n \n pub(crate) struct OptionAndThenSome;\n@@ -193,124 +191,3 @@ pub(crate) trait BindInsteadOfMap {\n         }\n     }\n }\n-\n-/// returns `true` if expr contains match expr desugared from try\n-fn contains_try(expr: &hir::Expr<'_>) -> bool {\n-    struct TryFinder {\n-        found: bool,\n-    }\n-\n-    impl<'hir> intravisit::Visitor<'hir> for TryFinder {\n-        type Map = Map<'hir>;\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-\n-        fn visit_expr(&mut self, expr: &'hir hir::Expr<'hir>) {\n-            if self.found {\n-                return;\n-            }\n-            match expr.kind {\n-                hir::ExprKind::Match(_, _, hir::MatchSource::TryDesugar) => self.found = true,\n-                _ => intravisit::walk_expr(self, expr),\n-            }\n-        }\n-    }\n-\n-    let mut visitor = TryFinder { found: false };\n-    visitor.visit_expr(expr);\n-    visitor.found\n-}\n-\n-fn find_all_ret_expressions<'hir, F>(_cx: &LateContext<'_>, expr: &'hir hir::Expr<'hir>, callback: F) -> bool\n-where\n-    F: FnMut(&'hir hir::Expr<'hir>) -> bool,\n-{\n-    struct RetFinder<F> {\n-        in_stmt: bool,\n-        failed: bool,\n-        cb: F,\n-    }\n-\n-    struct WithStmtGuarg<'a, F> {\n-        val: &'a mut RetFinder<F>,\n-        prev_in_stmt: bool,\n-    }\n-\n-    impl<F> RetFinder<F> {\n-        fn inside_stmt(&mut self, in_stmt: bool) -> WithStmtGuarg<'_, F> {\n-            let prev_in_stmt = std::mem::replace(&mut self.in_stmt, in_stmt);\n-            WithStmtGuarg {\n-                val: self,\n-                prev_in_stmt,\n-            }\n-        }\n-    }\n-\n-    impl<F> std::ops::Deref for WithStmtGuarg<'_, F> {\n-        type Target = RetFinder<F>;\n-\n-        fn deref(&self) -> &Self::Target {\n-            self.val\n-        }\n-    }\n-\n-    impl<F> std::ops::DerefMut for WithStmtGuarg<'_, F> {\n-        fn deref_mut(&mut self) -> &mut Self::Target {\n-            self.val\n-        }\n-    }\n-\n-    impl<F> Drop for WithStmtGuarg<'_, F> {\n-        fn drop(&mut self) {\n-            self.val.in_stmt = self.prev_in_stmt;\n-        }\n-    }\n-\n-    impl<'hir, F: FnMut(&'hir hir::Expr<'hir>) -> bool> intravisit::Visitor<'hir> for RetFinder<F> {\n-        type Map = Map<'hir>;\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-\n-        fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'_>) {\n-            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt)\n-        }\n-\n-        fn visit_expr(&mut self, expr: &'hir hir::Expr<'_>) {\n-            if self.failed {\n-                return;\n-            }\n-            if self.in_stmt {\n-                match expr.kind {\n-                    hir::ExprKind::Ret(Some(expr)) => self.inside_stmt(false).visit_expr(expr),\n-                    _ => intravisit::walk_expr(self, expr),\n-                }\n-            } else {\n-                match expr.kind {\n-                    hir::ExprKind::Match(cond, arms, _) => {\n-                        self.inside_stmt(true).visit_expr(cond);\n-                        for arm in arms {\n-                            self.visit_expr(arm.body);\n-                        }\n-                    },\n-                    hir::ExprKind::Block(..) => intravisit::walk_expr(self, expr),\n-                    hir::ExprKind::Ret(Some(expr)) => self.visit_expr(expr),\n-                    _ => self.failed |= !(self.cb)(expr),\n-                }\n-            }\n-        }\n-    }\n-\n-    !contains_try(expr) && {\n-        let mut ret_finder = RetFinder {\n-            in_stmt: false,\n-            failed: false,\n-            cb: callback,\n-        };\n-        ret_finder.visit_expr(expr);\n-        !ret_finder.failed\n-    }\n-}"}, {"sha": "f0e507105a6a0ef241ece96d66782c039b35cbd7", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -320,11 +320,11 @@ fn find_stmt_assigns_to<'tcx>(\n \n     match (by_ref, &*rvalue) {\n         (true, mir::Rvalue::Ref(_, _, place)) | (false, mir::Rvalue::Use(mir::Operand::Copy(place))) => {\n-            base_local_and_movability(cx, mir, *place)\n+            Some(base_local_and_movability(cx, mir, *place))\n         },\n         (false, mir::Rvalue::Ref(_, _, place)) => {\n             if let [mir::ProjectionElem::Deref] = place.as_ref().projection {\n-                base_local_and_movability(cx, mir, *place)\n+                Some(base_local_and_movability(cx, mir, *place))\n             } else {\n                 None\n             }\n@@ -341,7 +341,7 @@ fn base_local_and_movability<'tcx>(\n     cx: &LateContext<'tcx>,\n     mir: &mir::Body<'tcx>,\n     place: mir::Place<'tcx>,\n-) -> Option<(mir::Local, CannotMoveOut)> {\n+) -> (mir::Local, CannotMoveOut) {\n     use rustc_middle::mir::PlaceRef;\n \n     // Dereference. You cannot move things out from a borrowed value.\n@@ -362,7 +362,7 @@ fn base_local_and_movability<'tcx>(\n             && !is_copy(cx, mir::Place::ty_from(local, projection, &mir.local_decls, cx.tcx).ty);\n     }\n \n-    Some((local, deref || field || slice))\n+    (local, deref || field || slice)\n }\n \n struct LocalUseVisitor {"}, {"sha": "25ecc7a82f18bfac868785558093879f5de0c2b6", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -0,0 +1,143 @@\n+use crate::utils::{\n+    in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n+    visitors::find_all_ret_expressions,\n+};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::intravisit::FnKind;\n+use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Node};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for private functions that only return `Ok` or `Some`.\n+    ///\n+    /// **Why is this bad?** It is not meaningful to wrap values when no `None` or `Err` is returned.\n+    ///\n+    /// **Known problems:** Since this lint changes function type signature, you may need to\n+    /// adjust some code at callee side.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn get_cool_number(a: bool, b: bool) -> Option<i32> {\n+    ///     if a && b {\n+    ///         return Some(50);\n+    ///     }\n+    ///     if a {\n+    ///         Some(0)\n+    ///     } else {\n+    ///         Some(10)\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn get_cool_number(a: bool, b: bool) -> i32 {\n+    ///     if a && b {\n+    ///         return 50;\n+    ///     }\n+    ///     if a {\n+    ///         0\n+    ///     } else {\n+    ///         10\n+    ///     }\n+    /// }\n+    /// ```\n+    pub UNNECESSARY_WRAPS,\n+    complexity,\n+    \"functions that only return `Ok` or `Some`\"\n+}\n+\n+declare_lint_pass!(UnnecessaryWraps => [UNNECESSARY_WRAPS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        fn_kind: FnKind<'tcx>,\n+        fn_decl: &FnDecl<'tcx>,\n+        body: &Body<'tcx>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        match fn_kind {\n+            FnKind::ItemFn(.., visibility, _) | FnKind::Method(.., Some(visibility), _) => {\n+                if visibility.node.is_pub() {\n+                    return;\n+                }\n+            },\n+            FnKind::Closure(..) => return,\n+            _ => (),\n+        }\n+\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+            if matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), ..} | ItemKind::Trait(..)) {\n+                return;\n+            }\n+        }\n+\n+        let (return_type, path) = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(option_type)) {\n+            (\"Option\", &paths::OPTION_SOME)\n+        } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type)) {\n+            (\"Result\", &paths::RESULT_OK)\n+        } else {\n+            return;\n+        };\n+\n+        let mut suggs = Vec::new();\n+        let can_sugg = find_all_ret_expressions(cx, &body.value, |ret_expr| {\n+            if_chain! {\n+                if !in_macro(ret_expr.span);\n+                if let ExprKind::Call(ref func, ref args) = ret_expr.kind;\n+                if let ExprKind::Path(ref qpath) = func.kind;\n+                if match_qpath(qpath, path);\n+                if args.len() == 1;\n+                then {\n+                    suggs.push((ret_expr.span, snippet(cx, args[0].span.source_callsite(), \"..\").to_string()));\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+        });\n+\n+        if can_sugg && !suggs.is_empty() {\n+            span_lint_and_then(\n+                cx,\n+                UNNECESSARY_WRAPS,\n+                span,\n+                format!(\n+                    \"this function's return value is unnecessarily wrapped by `{}`\",\n+                    return_type\n+                )\n+                .as_str(),\n+                |diag| {\n+                    let inner_ty = return_ty(cx, hir_id)\n+                        .walk()\n+                        .skip(1) // skip `std::option::Option` or `std::result::Result`\n+                        .take(1) // take the first outermost inner type\n+                        .filter_map(|inner| match inner.unpack() {\n+                            GenericArgKind::Type(inner_ty) => Some(inner_ty.to_string()),\n+                            _ => None,\n+                        });\n+                    inner_ty.for_each(|inner_ty| {\n+                        diag.span_suggestion(\n+                            fn_decl.output.span(),\n+                            format!(\"remove `{}` from the return type...\", return_type).as_str(),\n+                            inner_ty,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    });\n+                    diag.multipart_suggestion(\n+                        \"...and change the returning expressions\",\n+                        suggs,\n+                        Applicability::MachineApplicable,\n+                    );\n+                },\n+            );\n+        }\n+    }\n+}"}, {"sha": "87bfaf44383ec77eff117438920cbfbb5b0f8b53", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -21,6 +21,7 @@ pub mod ptr;\n pub mod qualify_min_const_fn;\n pub mod sugg;\n pub mod usage;\n+pub mod visitors;\n \n pub use self::attrs::*;\n pub use self::diagnostics::*;"}, {"sha": "b0837b6c43e76dc3f9bbdaf80ad15bc7bf0039c6", "filename": "clippy_lints/src/utils/visitors.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -0,0 +1,125 @@\n+use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_lint::LateContext;\n+use rustc_middle::hir::map::Map;\n+\n+/// returns `true` if expr contains match expr desugared from try\n+fn contains_try(expr: &hir::Expr<'_>) -> bool {\n+    struct TryFinder {\n+        found: bool,\n+    }\n+\n+    impl<'hir> intravisit::Visitor<'hir> for TryFinder {\n+        type Map = Map<'hir>;\n+\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+            intravisit::NestedVisitorMap::None\n+        }\n+\n+        fn visit_expr(&mut self, expr: &'hir hir::Expr<'hir>) {\n+            if self.found {\n+                return;\n+            }\n+            match expr.kind {\n+                hir::ExprKind::Match(_, _, hir::MatchSource::TryDesugar) => self.found = true,\n+                _ => intravisit::walk_expr(self, expr),\n+            }\n+        }\n+    }\n+\n+    let mut visitor = TryFinder { found: false };\n+    visitor.visit_expr(expr);\n+    visitor.found\n+}\n+\n+pub fn find_all_ret_expressions<'hir, F>(_cx: &LateContext<'_>, expr: &'hir hir::Expr<'hir>, callback: F) -> bool\n+where\n+    F: FnMut(&'hir hir::Expr<'hir>) -> bool,\n+{\n+    struct RetFinder<F> {\n+        in_stmt: bool,\n+        failed: bool,\n+        cb: F,\n+    }\n+\n+    struct WithStmtGuarg<'a, F> {\n+        val: &'a mut RetFinder<F>,\n+        prev_in_stmt: bool,\n+    }\n+\n+    impl<F> RetFinder<F> {\n+        fn inside_stmt(&mut self, in_stmt: bool) -> WithStmtGuarg<'_, F> {\n+            let prev_in_stmt = std::mem::replace(&mut self.in_stmt, in_stmt);\n+            WithStmtGuarg {\n+                val: self,\n+                prev_in_stmt,\n+            }\n+        }\n+    }\n+\n+    impl<F> std::ops::Deref for WithStmtGuarg<'_, F> {\n+        type Target = RetFinder<F>;\n+\n+        fn deref(&self) -> &Self::Target {\n+            self.val\n+        }\n+    }\n+\n+    impl<F> std::ops::DerefMut for WithStmtGuarg<'_, F> {\n+        fn deref_mut(&mut self) -> &mut Self::Target {\n+            self.val\n+        }\n+    }\n+\n+    impl<F> Drop for WithStmtGuarg<'_, F> {\n+        fn drop(&mut self) {\n+            self.val.in_stmt = self.prev_in_stmt;\n+        }\n+    }\n+\n+    impl<'hir, F: FnMut(&'hir hir::Expr<'hir>) -> bool> intravisit::Visitor<'hir> for RetFinder<F> {\n+        type Map = Map<'hir>;\n+\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+            intravisit::NestedVisitorMap::None\n+        }\n+\n+        fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'_>) {\n+            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt)\n+        }\n+\n+        fn visit_expr(&mut self, expr: &'hir hir::Expr<'_>) {\n+            if self.failed {\n+                return;\n+            }\n+            if self.in_stmt {\n+                match expr.kind {\n+                    hir::ExprKind::Ret(Some(expr)) => self.inside_stmt(false).visit_expr(expr),\n+                    _ => intravisit::walk_expr(self, expr),\n+                }\n+            } else {\n+                match expr.kind {\n+                    hir::ExprKind::Match(cond, arms, _) => {\n+                        self.inside_stmt(true).visit_expr(cond);\n+                        for arm in arms {\n+                            self.visit_expr(arm.body);\n+                        }\n+                    },\n+                    hir::ExprKind::Block(..) => intravisit::walk_expr(self, expr),\n+                    hir::ExprKind::Ret(Some(expr)) => self.visit_expr(expr),\n+                    _ => self.failed |= !(self.cb)(expr),\n+                }\n+            }\n+        }\n+    }\n+\n+    !contains_try(expr) && {\n+        let mut ret_finder = RetFinder {\n+            in_stmt: false,\n+            failed: false,\n+            cb: callback,\n+        };\n+        ret_finder.visit_expr(expr);\n+        !ret_finder.failed\n+    }\n+}"}, {"sha": "a2edd6cd0bd4fb7da017411dfebb8a7dfce96641", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -2608,6 +2608,13 @@ vec![\n         deprecation: None,\n         module: \"unwrap\",\n     },\n+    Lint {\n+        name: \"unnecessary_wraps\",\n+        group: \"complexity\",\n+        desc: \"functions that only return `Ok` or `Some`\",\n+        deprecation: None,\n+        module: \"unnecessary_wraps\",\n+    },\n     Lint {\n         name: \"unneeded_field_pattern\",\n         group: \"restriction\","}, {"sha": "6f12d36d777dcbae0fbbae36f393e16f514528ef", "filename": "tests/ui/derive_ord_xor_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fderive_ord_xor_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fderive_ord_xor_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::derive_ord_xor_partial_ord)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::cmp::Ordering;\n "}, {"sha": "97b46a4aa89828c3dda6d9ed82f65c8f288cf835", "filename": "tests/ui/derive_ord_xor_partial_ord.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,12 +1,12 @@\n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n-  --> $DIR/derive_ord_xor_partial_ord.rs:20:10\n+  --> $DIR/derive_ord_xor_partial_ord.rs:21:10\n    |\n LL | #[derive(Ord, PartialEq, Eq)]\n    |          ^^^\n    |\n    = note: `-D clippy::derive-ord-xor-partial-ord` implied by `-D warnings`\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:23:1\n+  --> $DIR/derive_ord_xor_partial_ord.rs:24:1\n    |\n LL | / impl PartialOrd for DeriveOrd {\n LL | |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n@@ -17,13 +17,13 @@ LL | | }\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n-  --> $DIR/derive_ord_xor_partial_ord.rs:29:10\n+  --> $DIR/derive_ord_xor_partial_ord.rs:30:10\n    |\n LL | #[derive(Ord, PartialEq, Eq)]\n    |          ^^^\n    |\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:32:1\n+  --> $DIR/derive_ord_xor_partial_ord.rs:33:1\n    |\n LL | / impl PartialOrd<DeriveOrdWithExplicitTypeVariable> for DeriveOrdWithExplicitTypeVariable {\n LL | |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n@@ -34,7 +34,7 @@ LL | | }\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n-  --> $DIR/derive_ord_xor_partial_ord.rs:41:1\n+  --> $DIR/derive_ord_xor_partial_ord.rs:42:1\n    |\n LL | / impl std::cmp::Ord for DerivePartialOrd {\n LL | |     fn cmp(&self, other: &Self) -> Ordering {\n@@ -44,14 +44,14 @@ LL | | }\n    | |_^\n    |\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:38:10\n+  --> $DIR/derive_ord_xor_partial_ord.rs:39:10\n    |\n LL | #[derive(PartialOrd, PartialEq, Eq)]\n    |          ^^^^^^^^^^\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n-  --> $DIR/derive_ord_xor_partial_ord.rs:61:5\n+  --> $DIR/derive_ord_xor_partial_ord.rs:62:5\n    |\n LL | /     impl Ord for DerivePartialOrdInUseOrd {\n LL | |         fn cmp(&self, other: &Self) -> Ordering {\n@@ -61,7 +61,7 @@ LL | |     }\n    | |_____^\n    |\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:58:14\n+  --> $DIR/derive_ord_xor_partial_ord.rs:59:14\n    |\n LL |     #[derive(PartialOrd, PartialEq, Eq)]\n    |              ^^^^^^^^^^"}, {"sha": "c77a74a58f22c6072dcfb295ea22794afbe1309c", "filename": "tests/ui/doc_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fdoc_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fdoc_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n #![warn(clippy::missing_errors_doc)]\n #![allow(clippy::result_unit_err)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::io;\n "}, {"sha": "b5a81419daee35d295197158c9e20d5a17f21871", "filename": "tests/ui/doc_errors.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fdoc_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fdoc_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:7:1\n+  --> $DIR/doc_errors.rs:8:1\n    |\n LL | / pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n@@ -9,47 +9,47 @@ LL | | }\n    = note: `-D clippy::missing-errors-doc` implied by `-D warnings`\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:11:1\n+  --> $DIR/doc_errors.rs:12:1\n    |\n LL | / pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:16:1\n+  --> $DIR/doc_errors.rs:17:1\n    |\n LL | / pub fn pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:21:1\n+  --> $DIR/doc_errors.rs:22:1\n    |\n LL | / pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:51:5\n+  --> $DIR/doc_errors.rs:52:5\n    |\n LL | /     pub fn pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:56:5\n+  --> $DIR/doc_errors.rs:57:5\n    |\n LL | /     pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:85:5\n+  --> $DIR/doc_errors.rs:86:5\n    |\n LL |     fn trait_method_missing_errors_header() -> Result<(), ()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e1a15c609fd233d6adf784fb5294c7a3b191baed", "filename": "tests/ui/drop_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,6 +1,7 @@\n #![warn(clippy::drop_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n #![allow(clippy::map_err_ignore)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::mem::drop;\n "}, {"sha": "10087cb4820a7ce650ce5f52016d0c615767491e", "filename": "tests/ui/drop_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,108 +1,108 @@\n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:10:5\n+  --> $DIR/drop_ref.rs:11:5\n    |\n LL |     drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::drop-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:10:10\n+  --> $DIR/drop_ref.rs:11:10\n    |\n LL |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:13:5\n+  --> $DIR/drop_ref.rs:14:5\n    |\n LL |     drop(&owned1);\n    |     ^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:13:10\n+  --> $DIR/drop_ref.rs:14:10\n    |\n LL |     drop(&owned1);\n    |          ^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:14:5\n+  --> $DIR/drop_ref.rs:15:5\n    |\n LL |     drop(&&owned1);\n    |     ^^^^^^^^^^^^^^\n    |\n note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_ref.rs:14:10\n+  --> $DIR/drop_ref.rs:15:10\n    |\n LL |     drop(&&owned1);\n    |          ^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:15:5\n+  --> $DIR/drop_ref.rs:16:5\n    |\n LL |     drop(&mut owned1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:15:10\n+  --> $DIR/drop_ref.rs:16:10\n    |\n LL |     drop(&mut owned1);\n    |          ^^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:19:5\n+  --> $DIR/drop_ref.rs:20:5\n    |\n LL |     drop(reference1);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:19:10\n+  --> $DIR/drop_ref.rs:20:10\n    |\n LL |     drop(reference1);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:22:5\n+  --> $DIR/drop_ref.rs:23:5\n    |\n LL |     drop(reference2);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:22:10\n+  --> $DIR/drop_ref.rs:23:10\n    |\n LL |     drop(reference2);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:25:5\n+  --> $DIR/drop_ref.rs:26:5\n    |\n LL |     drop(reference3);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:25:10\n+  --> $DIR/drop_ref.rs:26:10\n    |\n LL |     drop(reference3);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:30:5\n+  --> $DIR/drop_ref.rs:31:5\n    |\n LL |     drop(&val);\n    |     ^^^^^^^^^^\n    |\n note: argument has type `&T`\n-  --> $DIR/drop_ref.rs:30:10\n+  --> $DIR/drop_ref.rs:31:10\n    |\n LL |     drop(&val);\n    |          ^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:38:5\n+  --> $DIR/drop_ref.rs:39:5\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:38:20\n+  --> $DIR/drop_ref.rs:39:20\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^"}, {"sha": "c49e6756a6c5bed9db7e73e40ae7acbf5aebb260", "filename": "tests/ui/forget_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,6 @@\n #![warn(clippy::forget_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::mem::forget;\n "}, {"sha": "b2c7f2023bfbf47519d00125d17da0babb767022", "filename": "tests/ui/forget_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,108 +1,108 @@\n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:9:5\n+  --> $DIR/forget_ref.rs:10:5\n    |\n LL |     forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::forget-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:9:12\n+  --> $DIR/forget_ref.rs:10:12\n    |\n LL |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:12:5\n+  --> $DIR/forget_ref.rs:13:5\n    |\n LL |     forget(&owned);\n    |     ^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:12:12\n+  --> $DIR/forget_ref.rs:13:12\n    |\n LL |     forget(&owned);\n    |            ^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:13:5\n+  --> $DIR/forget_ref.rs:14:5\n    |\n LL |     forget(&&owned);\n    |     ^^^^^^^^^^^^^^^\n    |\n note: argument has type `&&SomeStruct`\n-  --> $DIR/forget_ref.rs:13:12\n+  --> $DIR/forget_ref.rs:14:12\n    |\n LL |     forget(&&owned);\n    |            ^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:14:5\n+  --> $DIR/forget_ref.rs:15:5\n    |\n LL |     forget(&mut owned);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:14:12\n+  --> $DIR/forget_ref.rs:15:12\n    |\n LL |     forget(&mut owned);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:18:5\n+  --> $DIR/forget_ref.rs:19:5\n    |\n LL |     forget(&*reference1);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:18:12\n+  --> $DIR/forget_ref.rs:19:12\n    |\n LL |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:21:5\n+  --> $DIR/forget_ref.rs:22:5\n    |\n LL |     forget(reference2);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:21:12\n+  --> $DIR/forget_ref.rs:22:12\n    |\n LL |     forget(reference2);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:24:5\n+  --> $DIR/forget_ref.rs:25:5\n    |\n LL |     forget(reference3);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:24:12\n+  --> $DIR/forget_ref.rs:25:12\n    |\n LL |     forget(reference3);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:29:5\n+  --> $DIR/forget_ref.rs:30:5\n    |\n LL |     forget(&val);\n    |     ^^^^^^^^^^^^\n    |\n note: argument has type `&T`\n-  --> $DIR/forget_ref.rs:29:12\n+  --> $DIR/forget_ref.rs:30:12\n    |\n LL |     forget(&val);\n    |            ^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:37:5\n+  --> $DIR/forget_ref.rs:38:5\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:37:22\n+  --> $DIR/forget_ref.rs:38:22\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |                      ^^^^^^^^^^^"}, {"sha": "a842e872a37b1f0fefcb21dad35b630ef75deaeb", "filename": "tests/ui/let_underscore_must_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Flet_underscore_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Flet_underscore_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::let_underscore_must_use)]\n+#![allow(clippy::unnecessary_wraps)]\n \n // Debug implementations can fire this lint,\n // so we shouldn't lint external macros"}, {"sha": "5b751ea56deffe96d0413506ba5ed67abd039e6b", "filename": "tests/ui/let_underscore_must_use.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Flet_underscore_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Flet_underscore_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:66:5\n+  --> $DIR/let_underscore_must_use.rs:67:5\n    |\n LL |     let _ = f();\n    |     ^^^^^^^^^^^^\n@@ -8,87 +8,87 @@ LL |     let _ = f();\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:67:5\n+  --> $DIR/let_underscore_must_use.rs:68:5\n    |\n LL |     let _ = g();\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:69:5\n+  --> $DIR/let_underscore_must_use.rs:70:5\n    |\n LL |     let _ = l(0_u32);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:73:5\n+  --> $DIR/let_underscore_must_use.rs:74:5\n    |\n LL |     let _ = s.f();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:74:5\n+  --> $DIR/let_underscore_must_use.rs:75:5\n    |\n LL |     let _ = s.g();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:77:5\n+  --> $DIR/let_underscore_must_use.rs:78:5\n    |\n LL |     let _ = S::h();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:78:5\n+  --> $DIR/let_underscore_must_use.rs:79:5\n    |\n LL |     let _ = S::p();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:80:5\n+  --> $DIR/let_underscore_must_use.rs:81:5\n    |\n LL |     let _ = S::a();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:82:5\n+  --> $DIR/let_underscore_must_use.rs:83:5\n    |\n LL |     let _ = if true { Ok(()) } else { Err(()) };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:86:5\n+  --> $DIR/let_underscore_must_use.rs:87:5\n    |\n LL |     let _ = a.is_ok();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:88:5\n+  --> $DIR/let_underscore_must_use.rs:89:5\n    |\n LL |     let _ = a.map(|_| ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:90:5\n+  --> $DIR/let_underscore_must_use.rs:91:5\n    |\n LL |     let _ = a;\n    |     ^^^^^^^^^^"}, {"sha": "81d903c15d32a29475cf338109586a22511ab306", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![allow(dead_code)]\n-#![allow(unused_variables)]\n+#![allow(unused_variables, clippy::unnecessary_wraps)]\n \n fn option_unwrap_or() {\n     // int case"}, {"sha": "16105d379c3052ac8c709e0ea24925411d0fb237", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![allow(dead_code)]\n-#![allow(unused_variables)]\n+#![allow(unused_variables, clippy::unnecessary_wraps)]\n \n fn option_unwrap_or() {\n     // int case"}, {"sha": "05b9949f10217e2cd9ef17c3fd8a2a51dfff61d5", "filename": "tests/ui/map_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::map_err_ignore)]\n+#![allow(clippy::unnecessary_wraps)]\n use std::convert::TryFrom;\n use std::error::Error;\n use std::fmt;"}, {"sha": "390d7ce2e4e7b0fa5a6c956929a72d6983838173", "filename": "tests/ui/map_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: `map_err(|_|...` ignores the original error\n-  --> $DIR/map_err.rs:22:32\n+  --> $DIR/map_err.rs:23:32\n    |\n LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n    |                                ^^^"}, {"sha": "773b5914439d39f03ccc5cacd3666f68c0d67eb6", "filename": "tests/ui/map_flatten.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -4,6 +4,7 @@\n #![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn main() {\n     // mapping to Option on Iterator"}, {"sha": "578bd877267952da8f126e277a63e9fdc94176ba", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -4,6 +4,7 @@\n #![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn main() {\n     // mapping to Option on Iterator"}, {"sha": "756e6e818ad4454ee42494add7f11610d078295d", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,37 +1,37 @@\n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:15:46\n+  --> $DIR/map_flatten.rs:16:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:16:46\n+  --> $DIR/map_flatten.rs:17:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_ref)`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:17:46\n+  --> $DIR/map_flatten.rs:18:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_closure)`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:18:46\n+  --> $DIR/map_flatten.rs:19:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(|x| x.checked_add(1))`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:21:46\n+  --> $DIR/map_flatten.rs:22:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n \n error: called `map(..).flatten()` on an `Option`\n-  --> $DIR/map_flatten.rs:24:39\n+  --> $DIR/map_flatten.rs:25:39\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                                       ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`"}, {"sha": "44972c8c63964c71e9678d54a49256f34ef54cb4", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value)]\n+#![allow(dead_code, clippy::needless_pass_by_value, clippy::unnecessary_wraps)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}, {"sha": "7d29445e66c8b97b8730f096f45db5eb3a321255", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "b6f834f686f9f34cf68ef9f27dc131a226664ee6", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "8abdbcafb6e935ed9ae422fc893e801f27363723", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:38:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:39:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n@@ -9,135 +9,135 @@ LL |     x.field.map(do_nothing);\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:40:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:41:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:42:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:43:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:48:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:49:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:50:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:51:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:53:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:54:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:55:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:56:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:57:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:58:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:59:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:60:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:62:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:63:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:64:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:65:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:66:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:67:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:68:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:69:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:73:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:74:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:75:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:76:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:77:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:78:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:80:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:81:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:82:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:83:5\n    |\n LL |     option().map(do_nothing);}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^-"}, {"sha": "6859ba8e5bb8f08abf23ef45101217cd6ee9ec23", "filename": "tests/ui/option_option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,4 +1,5 @@\n #![deny(clippy::option_option)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn input(_: Option<Option<u8>>) {}\n "}, {"sha": "ad7f081c71392ff9157f80580d1f62a824319b7c", "filename": "tests/ui/option_option.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Foption_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:3:13\n+  --> $DIR/option_option.rs:4:13\n    |\n LL | fn input(_: Option<Option<u8>>) {}\n    |             ^^^^^^^^^^^^^^^^^^\n@@ -11,55 +11,55 @@ LL | #![deny(clippy::option_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:5:16\n+  --> $DIR/option_option.rs:6:16\n    |\n LL | fn output() -> Option<Option<u8>> {\n    |                ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:9:27\n+  --> $DIR/option_option.rs:10:27\n    |\n LL | fn output_nested() -> Vec<Option<Option<u8>>> {\n    |                           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:14:30\n+  --> $DIR/option_option.rs:15:30\n    |\n LL | fn output_nested_nested() -> Option<Option<Option<u8>>> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:19:8\n+  --> $DIR/option_option.rs:20:8\n    |\n LL |     x: Option<Option<u8>>,\n    |        ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:23:23\n+  --> $DIR/option_option.rs:24:23\n    |\n LL |     fn struct_fn() -> Option<Option<u8>> {\n    |                       ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:29:22\n+  --> $DIR/option_option.rs:30:22\n    |\n LL |     fn trait_fn() -> Option<Option<u8>>;\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:33:11\n+  --> $DIR/option_option.rs:34:11\n    |\n LL |     Tuple(Option<Option<u8>>),\n    |           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:34:17\n+  --> $DIR/option_option.rs:35:17\n    |\n LL |     Struct { x: Option<Option<u8>> },\n    |                 ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:75:14\n+  --> $DIR/option_option.rs:76:14\n    |\n LL |         foo: Option<Option<Cow<'a, str>>>,\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2a63318c8c7a8bc7c8f1aa4c34e2ec1cfc943cb5", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::or_fun_call)]\n #![allow(dead_code)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "026ef437caa1ad29f74d8f2ee7931665a28adab5", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::or_fun_call)]\n #![allow(dead_code)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "fb8bf339828f4ff4e87f4442e2fbf2de42f5be85", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,103 +1,103 @@\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:32:19\n+  --> $DIR/or_fun_call.rs:33:19\n    |\n LL |     with_const_fn.unwrap_or(Duration::from_secs(5));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Duration::from_secs(5))`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:35:22\n+  --> $DIR/or_fun_call.rs:36:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:38:5\n+  --> $DIR/or_fun_call.rs:39:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:41:21\n+  --> $DIR/or_fun_call.rs:42:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:44:14\n+  --> $DIR/or_fun_call.rs:45:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:47:19\n+  --> $DIR/or_fun_call.rs:48:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:50:5\n+  --> $DIR/or_fun_call.rs:51:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:53:5\n+  --> $DIR/or_fun_call.rs:54:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:56:5\n+  --> $DIR/or_fun_call.rs:57:5\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:59:21\n+  --> $DIR/or_fun_call.rs:60:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:62:19\n+  --> $DIR/or_fun_call.rs:63:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:65:21\n+  --> $DIR/or_fun_call.rs:66:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:68:21\n+  --> $DIR/or_fun_call.rs:69:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:76:21\n+  --> $DIR/or_fun_call.rs:77:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:78:21\n+  --> $DIR/or_fun_call.rs:79:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:102:35\n+  --> $DIR/or_fun_call.rs:103:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:106:10\n+  --> $DIR/or_fun_call.rs:107:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`"}, {"sha": "3d3c19a1be5199e70c2a08f6c439aaca2e8a9645", "filename": "tests/ui/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::panic_in_result_fn)]\n+#![allow(clippy::unnecessary_wraps)]\n \n struct A;\n "}, {"sha": "ca73ac5a4111405c946c7dc8f6a422917cae48da", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:6:5\n+  --> $DIR/panic_in_result_fn.rs:7:5\n    |\n LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -10,14 +10,14 @@ LL | |     }\n    = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:8:9\n+  --> $DIR/panic_in_result_fn.rs:9:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:11:5\n+  --> $DIR/panic_in_result_fn.rs:12:5\n    |\n LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -27,14 +27,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:13:9\n+  --> $DIR/panic_in_result_fn.rs:14:9\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:16:5\n+  --> $DIR/panic_in_result_fn.rs:17:5\n    |\n LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -44,14 +44,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:18:9\n+  --> $DIR/panic_in_result_fn.rs:19:9\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:21:5\n+  --> $DIR/panic_in_result_fn.rs:22:5\n    |\n LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -61,14 +61,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:23:9\n+  --> $DIR/panic_in_result_fn.rs:24:9\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:52:1\n+  --> $DIR/panic_in_result_fn.rs:53:1\n    |\n LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n LL | | {\n@@ -78,14 +78,14 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:54:5\n+  --> $DIR/panic_in_result_fn.rs:55:5\n    |\n LL |     panic!(\"error\");\n    |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:67:1\n+  --> $DIR/panic_in_result_fn.rs:68:1\n    |\n LL | / fn main() -> Result<(), String> {\n LL | |     todo!(\"finish main method\");\n@@ -95,7 +95,7 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:68:5\n+  --> $DIR/panic_in_result_fn.rs:69:5\n    |\n LL |     todo!(\"finish main method\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0b5746cb52270ed7e59d4126b7664151d1d39e95", "filename": "tests/ui/question_mark.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fquestion_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fquestion_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.fixed?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(unreachable_code)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn some_func(a: Option<u32>) -> Option<u32> {\n     a?;"}, {"sha": "0f0825c9334679d185e9bc711dc86f05df0466d8", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(unreachable_code)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn some_func(a: Option<u32>) -> Option<u32> {\n     if a.is_none() {"}, {"sha": "6f330cfa385dddeaab2c9473fb9c684f381aea27", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:5:5\n+  --> $DIR/question_mark.rs:6:5\n    |\n LL | /     if a.is_none() {\n LL | |         return None;\n@@ -9,23 +9,23 @@ LL | |     }\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:50:9\n+  --> $DIR/question_mark.rs:51:9\n    |\n LL | /         if (self.opt).is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `(self.opt)?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:54:9\n+  --> $DIR/question_mark.rs:55:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None\n LL | |         }\n    | |_________^ help: replace it with: `self.opt?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:58:17\n+  --> $DIR/question_mark.rs:59:17\n    |\n LL |           let _ = if self.opt.is_none() {\n    |  _________________^\n@@ -36,7 +36,7 @@ LL | |         };\n    | |_________^ help: replace it with: `Some(self.opt?)`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:64:17\n+  --> $DIR/question_mark.rs:65:17\n    |\n LL |           let _ = if let Some(x) = self.opt {\n    |  _________________^\n@@ -47,31 +47,31 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:81:9\n+  --> $DIR/question_mark.rs:82:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:89:9\n+  --> $DIR/question_mark.rs:90:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:97:9\n+  --> $DIR/question_mark.rs:98:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:104:26\n+  --> $DIR/question_mark.rs:105:26\n    |\n LL |           let v: &Vec<_> = if let Some(ref v) = self.opt {\n    |  __________________________^\n@@ -82,7 +82,7 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt.as_ref()?`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:114:17\n+  --> $DIR/question_mark.rs:115:17\n    |\n LL |           let v = if let Some(v) = self.opt {\n    |  _________________^\n@@ -93,7 +93,7 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:129:5\n+  --> $DIR/question_mark.rs:130:5\n    |\n LL | /     if f().is_none() {\n LL | |         return None;"}, {"sha": "aa20512296aa1e6c025996d56958ee8b6eff96de", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -7,6 +7,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::unnecessary_wraps,\n     deprecated\n )]\n "}, {"sha": "d76f9c288ffdbfe5608caf10d98e87810ed99d10", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -7,6 +7,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::unnecessary_wraps,\n     deprecated\n )]\n "}, {"sha": "aeb309f5ba12a5f474951bd60577f51929f6e3bf", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,37 +1,37 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:15:12\n+  --> $DIR/redundant_pattern_matching.rs:16:12\n    |\n LL |     if let Ok(_) = &result {}\n    |     -------^^^^^---------- help: try this: `if result.is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:17:12\n+  --> $DIR/redundant_pattern_matching.rs:18:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:19:12\n+  --> $DIR/redundant_pattern_matching.rs:20:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:21:15\n+  --> $DIR/redundant_pattern_matching.rs:22:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:23:15\n+  --> $DIR/redundant_pattern_matching.rs:24:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:33:5\n+  --> $DIR/redundant_pattern_matching.rs:34:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -40,7 +40,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:38:5\n+  --> $DIR/redundant_pattern_matching.rs:39:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -49,7 +49,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:43:5\n+  --> $DIR/redundant_pattern_matching.rs:44:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -58,7 +58,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:48:5\n+  --> $DIR/redundant_pattern_matching.rs:49:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -67,73 +67,73 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:53:20\n+  --> $DIR/redundant_pattern_matching.rs:54:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:59:20\n+  --> $DIR/redundant_pattern_matching.rs:60:20\n    |\n LL |     let _ = if let Ok(_) = gen_res() {\n    |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:61:19\n+  --> $DIR/redundant_pattern_matching.rs:62:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:84:19\n+  --> $DIR/redundant_pattern_matching.rs:85:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:85:16\n+  --> $DIR/redundant_pattern_matching.rs:86:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:91:12\n+  --> $DIR/redundant_pattern_matching.rs:92:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:92:15\n+  --> $DIR/redundant_pattern_matching.rs:93:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:110:12\n+  --> $DIR/redundant_pattern_matching.rs:111:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:112:12\n+  --> $DIR/redundant_pattern_matching.rs:113:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:114:15\n+  --> $DIR/redundant_pattern_matching.rs:115:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:116:15\n+  --> $DIR/redundant_pattern_matching.rs:117:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:118:5\n+  --> $DIR/redundant_pattern_matching.rs:119:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -142,7 +142,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:123:5\n+  --> $DIR/redundant_pattern_matching.rs:124:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,"}, {"sha": "5e57c752b5a034fbe5d2a80588938068a54b384e", "filename": "tests/ui/result_unit_error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fresult_unit_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fresult_unit_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_unit_error.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,3 +1,4 @@\n+#![allow(clippy::unnecessary_wraps)]\n #[warn(clippy::result_unit_err)]\n #[allow(unused)]\n "}, {"sha": "12901b354f9169d76fdf184a1e27934b6a38d011", "filename": "tests/ui/result_unit_error.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fresult_unit_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fresult_unit_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_unit_error.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:4:1\n+  --> $DIR/result_unit_error.rs:5:1\n    |\n LL | pub fn returns_unit_error() -> Result<u32, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,23 +8,23 @@ LL | pub fn returns_unit_error() -> Result<u32, ()> {\n    = help: use a custom Error type instead\n \n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:13:5\n+  --> $DIR/result_unit_error.rs:14:5\n    |\n LL |     fn get_that_error(&self) -> Result<bool, ()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom Error type instead\n \n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:15:5\n+  --> $DIR/result_unit_error.rs:16:5\n    |\n LL |     fn get_this_one_too(&self) -> Result<bool, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom Error type instead\n \n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:33:5\n+  --> $DIR/result_unit_error.rs:34:5\n    |\n LL |     pub fn unit_error(&self) -> Result<usize, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "652b611208b7376140f062e1a9c93d2be54d89b2", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![deny(clippy::try_err)]\n+#![allow(clippy::unnecessary_wraps)]\n \n #[macro_use]\n extern crate macro_rules;"}, {"sha": "6bd479657b70bb1041a91663b9e8357bfbeb9b36", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![deny(clippy::try_err)]\n+#![allow(clippy::unnecessary_wraps)]\n \n #[macro_use]\n extern crate macro_rules;"}, {"sha": "2c01d37192e8e296439258134367a1c37a5c6c63", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:18:9\n+  --> $DIR/try_err.rs:19:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err)`\n@@ -11,25 +11,25 @@ LL | #![deny(clippy::try_err)]\n    |         ^^^^^^^^^^^^^^^\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:28:9\n+  --> $DIR/try_err.rs:29:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:48:17\n+  --> $DIR/try_err.rs:49:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err)`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:67:17\n+  --> $DIR/try_err.rs:68:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:86:23\n+  --> $DIR/try_err.rs:87:23\n    |\n LL |             Err(_) => Err(1)?,\n    |                       ^^^^^^^ help: try this: `return Err(1)`\n@@ -40,7 +40,7 @@ LL |     try_validation!(Ok::<_, i32>(5));\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:101:23\n+  --> $DIR/try_err.rs:102:23\n    |\n LL |             Err(_) => Err(ret_one!())?,\n    |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(ret_one!())`\n@@ -51,25 +51,25 @@ LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:140:9\n+  --> $DIR/try_err.rs:141:9\n    |\n LL |         Err(foo!())?;\n    |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:147:9\n+  --> $DIR/try_err.rs:148:9\n    |\n LL |         Err(io::ErrorKind::WriteZero)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:149:9\n+  --> $DIR/try_err.rs:150:9\n    |\n LL |         Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:157:9\n+  --> $DIR/try_err.rs:158:9\n    |\n LL |         Err(io::ErrorKind::NotFound)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))`"}, {"sha": "9ad16d365094e73b165124cc68b35fe28c7172a1", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -4,6 +4,7 @@\n     unused_must_use,\n     unused_variables,\n     clippy::unused_unit,\n+    clippy::unnecessary_wraps,\n     clippy::or_fun_call\n )]\n "}, {"sha": "c3a839a9bf8120fcefe07023da88df1948f89ff8", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:29:5\n+  --> $DIR/unit_arg.rs:30:5\n    |\n LL | /     foo({\n LL | |         1;\n@@ -20,7 +20,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:32:5\n+  --> $DIR/unit_arg.rs:33:5\n    |\n LL |     foo(foo(1));\n    |     ^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:33:5\n+  --> $DIR/unit_arg.rs:34:5\n    |\n LL | /     foo({\n LL | |         foo(1);\n@@ -54,7 +54,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:38:5\n+  --> $DIR/unit_arg.rs:39:5\n    |\n LL | /     b.bar({\n LL | |         1;\n@@ -74,7 +74,7 @@ LL |     b.bar(());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:41:5\n+  --> $DIR/unit_arg.rs:42:5\n    |\n LL |     taking_multiple_units(foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -87,7 +87,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:42:5\n+  --> $DIR/unit_arg.rs:43:5\n    |\n LL | /     taking_multiple_units(foo(0), {\n LL | |         foo(1);\n@@ -110,7 +110,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:46:5\n+  --> $DIR/unit_arg.rs:47:5\n    |\n LL | /     taking_multiple_units(\n LL | |         {\n@@ -140,7 +140,7 @@ LL |         foo(2);\n  ...\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:57:13\n+  --> $DIR/unit_arg.rs:58:13\n    |\n LL |     None.or(Some(foo(2)));\n    |             ^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |     });\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:60:5\n+  --> $DIR/unit_arg.rs:61:5\n    |\n LL |     foo(foo(()))\n    |     ^^^^^^^^^^^^\n@@ -166,7 +166,7 @@ LL |     foo(())\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:93:5\n+  --> $DIR/unit_arg.rs:94:5\n    |\n LL |     Some(foo(1))\n    |     ^^^^^^^^^^^^"}, {"sha": "6770a7fac90fdc6343092d5e05a02e750d4a0019", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,7 +1,7 @@\n // does not test any rustfixable lints\n \n #![warn(clippy::clone_on_ref_ptr)]\n-#![allow(unused, clippy::redundant_clone)]\n+#![allow(unused, clippy::redundant_clone, clippy::unnecessary_wraps)]\n \n use std::cell::RefCell;\n use std::rc::{self, Rc};"}, {"sha": "a53dec8f91ac50acae35e3d5c02ec13a501e8456", "filename": "tests/ui/unnecessary_wraps.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -0,0 +1,116 @@\n+#![warn(clippy::unnecessary_wraps)]\n+#![allow(clippy::no_effect)]\n+#![allow(clippy::needless_return)]\n+#![allow(clippy::if_same_then_else)]\n+#![allow(dead_code)]\n+\n+// should be linted\n+fn func1(a: bool, b: bool) -> Option<i32> {\n+    if a && b {\n+        return Some(42);\n+    }\n+    if a {\n+        Some(-1);\n+        Some(2)\n+    } else {\n+        return Some(1337);\n+    }\n+}\n+\n+// should be linted\n+fn func2(a: bool, b: bool) -> Option<i32> {\n+    if a && b {\n+        return Some(10);\n+    }\n+    if a {\n+        Some(20)\n+    } else {\n+        Some(30)\n+    }\n+}\n+\n+// public fns should not be linted\n+pub fn func3(a: bool) -> Option<i32> {\n+    if a {\n+        Some(1)\n+    } else {\n+        Some(1)\n+    }\n+}\n+\n+// should not be linted\n+fn func4(a: bool) -> Option<i32> {\n+    if a {\n+        Some(1)\n+    } else {\n+        None\n+    }\n+}\n+\n+// should be linted\n+fn func5() -> Option<i32> {\n+    Some(1)\n+}\n+\n+// should not be linted\n+fn func6() -> Option<i32> {\n+    None\n+}\n+\n+// should be linted\n+fn func7() -> Result<i32, ()> {\n+    Ok(1)\n+}\n+\n+// should not be linted\n+fn func8(a: bool) -> Result<i32, ()> {\n+    if a {\n+        Ok(1)\n+    } else {\n+        Err(())\n+    }\n+}\n+\n+// should not be linted\n+fn func9(a: bool) -> Result<i32, ()> {\n+    Err(())\n+}\n+\n+// should not be linted\n+fn func10() -> Option<()> {\n+    unimplemented!()\n+}\n+\n+struct A;\n+\n+impl A {\n+    // should not be linted\n+    pub fn func11() -> Option<i32> {\n+        Some(1)\n+    }\n+\n+    // should be linted\n+    fn func12() -> Option<i32> {\n+        Some(1)\n+    }\n+}\n+\n+trait B {\n+    // trait impls are not linted\n+    fn func13() -> Option<i32> {\n+        Some(1)\n+    }\n+}\n+\n+impl B for A {\n+    // trait impls are not linted\n+    fn func13() -> Option<i32> {\n+        Some(0)\n+    }\n+}\n+\n+fn main() {\n+    // method calls are not linted\n+    func1(true, true);\n+    func2(true, true);\n+}"}, {"sha": "410f054b8efcaf8c85536471e4bd08eaa5233701", "filename": "tests/ui/unnecessary_wraps.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funnecessary_wraps.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Funnecessary_wraps.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -0,0 +1,106 @@\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:8:1\n+   |\n+LL | / fn func1(a: bool, b: bool) -> Option<i32> {\n+LL | |     if a && b {\n+LL | |         return Some(42);\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::unnecessary-wraps` implied by `-D warnings`\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func1(a: bool, b: bool) -> i32 {\n+   |                               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         return 42;\n+LL |     }\n+LL |     if a {\n+LL |         Some(-1);\n+LL |         2\n+LL |     } else {\n+ ...\n+\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:21:1\n+   |\n+LL | / fn func2(a: bool, b: bool) -> Option<i32> {\n+LL | |     if a && b {\n+LL | |         return Some(10);\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func2(a: bool, b: bool) -> i32 {\n+   |                               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         return 10;\n+LL |     }\n+LL |     if a {\n+LL |         20\n+LL |     } else {\n+LL |         30\n+   |\n+\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:51:1\n+   |\n+LL | / fn func5() -> Option<i32> {\n+LL | |     Some(1)\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func5() -> i32 {\n+   |               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |     1\n+   |\n+\n+error: this function's return value is unnecessarily wrapped by `Result`\n+  --> $DIR/unnecessary_wraps.rs:61:1\n+   |\n+LL | / fn func7() -> Result<i32, ()> {\n+LL | |     Ok(1)\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Result` from the return type...\n+   |\n+LL | fn func7() -> i32 {\n+   |               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |     1\n+   |\n+\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:93:5\n+   |\n+LL | /     fn func12() -> Option<i32> {\n+LL | |         Some(1)\n+LL | |     }\n+   | |_____^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL |     fn func12() -> i32 {\n+   |                    ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         1\n+   |\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "03977de9455ebb34a380a4b1b591a46c105576bb", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(clippy::useless_conversion)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = val;"}, {"sha": "f6e094c16616c438b98e13bb5f93427ff850038d", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(clippy::useless_conversion)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = T::from(val);"}, {"sha": "26a33595031bd9455e54317395bf978e55ee7b1f", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,5 +1,5 @@\n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion.rs:6:13\n+  --> $DIR/useless_conversion.rs:7:13\n    |\n LL |     let _ = T::from(val);\n    |             ^^^^^^^^^^^^ help: consider removing `T::from()`: `val`\n@@ -11,61 +11,61 @@ LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion.rs:7:5\n+  --> $DIR/useless_conversion.rs:8:5\n    |\n LL |     val.into()\n    |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:19:22\n+  --> $DIR/useless_conversion.rs:20:22\n    |\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:60:21\n+  --> $DIR/useless_conversion.rs:61:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:61:21\n+  --> $DIR/useless_conversion.rs:62:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:62:13\n+  --> $DIR/useless_conversion.rs:63:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:63:13\n+  --> $DIR/useless_conversion.rs:64:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: useless conversion to the same type: `std::str::Lines`\n-  --> $DIR/useless_conversion.rs:64:13\n+  --> $DIR/useless_conversion.rs:65:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n-  --> $DIR/useless_conversion.rs:65:13\n+  --> $DIR/useless_conversion.rs:66:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:66:21\n+  --> $DIR/useless_conversion.rs:67:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:71:13\n+  --> $DIR/useless_conversion.rs:72:13\n    |\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`"}, {"sha": "ee9c9045fff55940b42177b9eecef25bebe2b780", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -4,6 +4,7 @@\n #![warn(clippy::wildcard_imports)]\n //#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wraps)]\n #![warn(unused_imports)]\n \n extern crate wildcard_imports_helper;"}, {"sha": "efaa8f9ef664186b0ba5e70a6d9cd4143bb31460", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -4,6 +4,7 @@\n #![warn(clippy::wildcard_imports)]\n //#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wraps)]\n #![warn(unused_imports)]\n \n extern crate wildcard_imports_helper;"}, {"sha": "66267dd27b84fcf4da55e265ed164709a6e6647e", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d944586c5a505890b18bc6cac4e3cd91c46c25/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=44d944586c5a505890b18bc6cac4e3cd91c46c25", "patch": "@@ -1,123 +1,123 @@\n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:11:5\n+  --> $DIR/wildcard_imports.rs:12:5\n    |\n LL | use crate::fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n    |\n    = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:12:5\n+  --> $DIR/wildcard_imports.rs:13:5\n    |\n LL | use crate::mod_mod::*;\n    |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:13:5\n+  --> $DIR/wildcard_imports.rs:14:5\n    |\n LL | use crate::multi_fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:15:5\n+  --> $DIR/wildcard_imports.rs:16:5\n    |\n LL | use crate::struct_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:19:5\n+  --> $DIR/wildcard_imports.rs:20:5\n    |\n LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:20:5\n+  --> $DIR/wildcard_imports.rs:21:5\n    |\n LL | use wildcard_imports_helper::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:91:13\n+  --> $DIR/wildcard_imports.rs:92:13\n    |\n LL |         use crate::fn_mod::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:97:75\n+  --> $DIR/wildcard_imports.rs:98:75\n    |\n LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n    |                                                                           ^ help: try: `inner_extern_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:98:13\n+  --> $DIR/wildcard_imports.rs:99:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:109:20\n+  --> $DIR/wildcard_imports.rs:110:20\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                    ^^^^^^^^ help: try: `inner::inner_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:109:30\n+  --> $DIR/wildcard_imports.rs:110:30\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:116:13\n+  --> $DIR/wildcard_imports.rs:117:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:145:9\n+  --> $DIR/wildcard_imports.rs:146:9\n    |\n LL |     use crate::in_fn_test::*;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:154:9\n+  --> $DIR/wildcard_imports.rs:155:9\n    |\n LL |     use crate:: in_fn_test::  * ;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:155:9\n+  --> $DIR/wildcard_imports.rs:156:9\n    |\n LL |       use crate:: fn_mod::\n    |  _________^\n LL | |         *;\n    | |_________^ help: try: `crate:: fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:166:13\n+  --> $DIR/wildcard_imports.rs:167:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:201:17\n+  --> $DIR/wildcard_imports.rs:202:17\n    |\n LL |             use super::*;\n    |                 ^^^^^^^^ help: try: `super::insidefoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:209:13\n+  --> $DIR/wildcard_imports.rs:210:13\n    |\n LL |         use super_imports::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:218:17\n+  --> $DIR/wildcard_imports.rs:219:17\n    |\n LL |             use super::super::*;\n    |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:227:13\n+  --> $DIR/wildcard_imports.rs:228:13\n    |\n LL |         use super::super::super_imports::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`"}]}