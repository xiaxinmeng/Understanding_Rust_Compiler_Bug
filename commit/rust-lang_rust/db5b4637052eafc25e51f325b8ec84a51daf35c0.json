{"sha": "db5b4637052eafc25e51f325b8ec84a51daf35c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNWI0NjM3MDUyZWFmYzI1ZTUxZjMyNWI4ZWM4NGE1MWRhZjM1YzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-22T03:47:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-22T03:47:20Z"}, "message": "rustc_trans: Use custom PATH for archive commands\n\nThis commit ensures that the modifications made in #26382 also apply to the\narchive commands run in addition to the linker commands.", "tree": {"sha": "6c8d4323acb855f368ae65fdee90dcea9330d7a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c8d4323acb855f368ae65fdee90dcea9330d7a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db5b4637052eafc25e51f325b8ec84a51daf35c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db5b4637052eafc25e51f325b8ec84a51daf35c0", "html_url": "https://github.com/rust-lang/rust/commit/db5b4637052eafc25e51f325b8ec84a51daf35c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db5b4637052eafc25e51f325b8ec84a51daf35c0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a38e7585fc29289581e6cefcdf9e201c3d58ed14", "url": "https://api.github.com/repos/rust-lang/rust/commits/a38e7585fc29289581e6cefcdf9e201c3d58ed14", "html_url": "https://github.com/rust-lang/rust/commit/a38e7585fc29289581e6cefcdf9e201c3d58ed14"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "c7968db4733a2ace8be070c155a16e5f8ecc6a04", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db5b4637052eafc25e51f325b8ec84a51daf35c0/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5b4637052eafc25e51f325b8ec84a51daf35c0/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=db5b4637052eafc25e51f325b8ec84a51daf35c0", "patch": "@@ -11,6 +11,7 @@\n //! A helper class for dealing with static archives\n \n use std::env;\n+use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io;\n@@ -30,7 +31,8 @@ pub struct ArchiveConfig<'a> {\n     pub lib_search_paths: Vec<PathBuf>,\n     pub slib_prefix: String,\n     pub slib_suffix: String,\n-    pub ar_prog: String\n+    pub ar_prog: String,\n+    pub command_path: OsString,\n }\n \n pub struct Archive<'a> {\n@@ -114,6 +116,7 @@ impl<'a> Archive<'a> {\n         let abs_dst = env::current_dir().unwrap().join(&self.config.dst);\n         let ar = &self.config.ar_prog;\n         let mut cmd = Command::new(ar);\n+        cmd.env(\"PATH\", &self.config.command_path);\n         cmd.stdout(Stdio::piped()).stderr(Stdio::piped());\n         self.prepare_ar_action(&mut cmd, &abs_dst, action);\n         info!(\"{:?}\", cmd);"}, {"sha": "6b8b59de3c253b9a1a2124a0711ba044b9b40ce7", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/db5b4637052eafc25e51f325b8ec84a51daf35c0/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5b4637052eafc25e51f325b8ec84a51daf35c0/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=db5b4637052eafc25e51f325b8ec84a51daf35c0", "patch": "@@ -30,6 +30,7 @@ use util::fs::fix_windows_verbatim_for_gcc;\n use rustc_back::tempdir::TempDir;\n \n use std::env;\n+use std::ffi::OsString;\n use std::fs::{self, PathExt};\n use std::io::{self, Read, Write};\n use std::mem;\n@@ -370,6 +371,17 @@ pub fn get_ar_prog(sess: &Session) -> String {\n     })\n }\n \n+fn command_path(sess: &Session) -> OsString {\n+    // The compiler's sysroot often has some bundled tools, so add it to the\n+    // PATH for the child.\n+    let mut new_path = sess.host_filesearch(PathKind::All)\n+                           .get_tools_search_paths();\n+    if let Some(path) = env::var_os(\"PATH\") {\n+        new_path.extend(env::split_paths(&path));\n+    }\n+    env::join_paths(new_path).unwrap()\n+}\n+\n pub fn remove(sess: &Session, path: &Path) {\n     match fs::remove_file(path) {\n         Ok(..) => {}\n@@ -554,6 +566,7 @@ fn link_rlib<'a>(sess: &'a Session,\n         slib_prefix: sess.target.target.options.staticlib_prefix.clone(),\n         slib_suffix: sess.target.target.options.staticlib_suffix.clone(),\n         ar_prog: get_ar_prog(sess),\n+        command_path: command_path(sess),\n     };\n     let mut ab = ArchiveBuilder::create(config);\n     ab.add_file(obj_filename).unwrap();\n@@ -796,15 +809,7 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n     // The invocations of cc share some flags across platforms\n     let pname = get_cc_prog(sess);\n     let mut cmd = Command::new(&pname);\n-\n-    // The compiler's sysroot often has some bundled tools, so add it to the\n-    // PATH for the child.\n-    let mut new_path = sess.host_filesearch(PathKind::All)\n-                           .get_tools_search_paths();\n-    if let Some(path) = env::var_os(\"PATH\") {\n-        new_path.extend(env::split_paths(&path));\n-    }\n-    cmd.env(\"PATH\", env::join_paths(new_path).unwrap());\n+    cmd.env(\"PATH\", command_path(sess));\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n     cmd.args(&sess.target.target.options.pre_link_args);\n@@ -1187,6 +1192,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker, sess: &Session,\n                     slib_prefix: sess.target.target.options.staticlib_prefix.clone(),\n                     slib_suffix: sess.target.target.options.staticlib_suffix.clone(),\n                     ar_prog: get_ar_prog(sess),\n+                    command_path: command_path(sess),\n                 };\n                 let mut archive = Archive::open(config);\n                 archive.remove_file(&format!(\"{}.o\", name));"}]}