{"sha": "44f020883eee01e3b4112bfac65b09a13e470c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZjAyMDg4M2VlZTAxZTNiNDExMmJmYWM2NWIwOWExM2U0NzBjNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-02T13:58:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-02T13:58:57Z"}, "message": "Auto merge of #30675 - jimmantooth:master, r=apasel422", "tree": {"sha": "33a5be08c7399a15e3e1e93fcd6712710193c814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33a5be08c7399a15e3e1e93fcd6712710193c814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44f020883eee01e3b4112bfac65b09a13e470c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44f020883eee01e3b4112bfac65b09a13e470c5c", "html_url": "https://github.com/rust-lang/rust/commit/44f020883eee01e3b4112bfac65b09a13e470c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44f020883eee01e3b4112bfac65b09a13e470c5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4b67cd7cce8e29b22082bc9bc3a667ba3b2e036", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b67cd7cce8e29b22082bc9bc3a667ba3b2e036", "html_url": "https://github.com/rust-lang/rust/commit/d4b67cd7cce8e29b22082bc9bc3a667ba3b2e036"}, {"sha": "877d55c1e09a58f7999dcc4b650ad0a42c9b312e", "url": "https://api.github.com/repos/rust-lang/rust/commits/877d55c1e09a58f7999dcc4b650ad0a42c9b312e", "html_url": "https://github.com/rust-lang/rust/commit/877d55c1e09a58f7999dcc4b650ad0a42c9b312e"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "76d9c194b452001b81a6b42037b98571bf95fb14", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44f020883eee01e3b4112bfac65b09a13e470c5c/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f020883eee01e3b4112bfac65b09a13e470c5c/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=44f020883eee01e3b4112bfac65b09a13e470c5c", "patch": "@@ -41,15 +41,15 @@ pub use panicking::{take_handler, set_handler, PanicInfo, Location};\n ///    panics.\n /// 2. This broken invariant is then later observed.\n ///\n-/// Typically in Rust it is difficult to perform step (2) because catching a\n+/// Typically in Rust, it is difficult to perform step (2) because catching a\n /// panic involves either spawning a thread (which in turns makes it difficult\n /// to later witness broken invariants) or using the `recover` function in this\n-/// module. Additionally, even if an invariant is witness, it typically isn't a\n+/// module. Additionally, even if an invariant is witnessed, it typically isn't a\n /// problem in Rust because there's no uninitialized values (like in C or C++).\n ///\n /// It is possible, however, for **logical** invariants to be broken in Rust,\n /// which can end up causing behavioral bugs. Another key aspect of panic safety\n-/// in Rust is that in the absence of `unsafe` code, a panic cannot lead to\n+/// in Rust is that, in the absence of `unsafe` code, a panic cannot lead to\n /// memory unsafety.\n ///\n /// That was a bit of a whirlwind tour of panic safety, but for more information\n@@ -60,12 +60,12 @@ pub use panicking::{take_handler, set_handler, PanicInfo, Location};\n /// ## What is `RecoverSafe`?\n ///\n /// Now that we've got an idea of what panic safety is in Rust, it's also\n-/// important to understand that this trait represents. As mentioned above, one\n+/// important to understand what this trait represents. As mentioned above, one\n /// way to witness broken invariants is through the `recover` function in this\n /// module as it allows catching a panic and then re-using the environment of\n /// the closure.\n ///\n-/// Simply but, a type `T` implements `RecoverSafe` if it cannot easily allow\n+/// Simply put, a type `T` implements `RecoverSafe` if it cannot easily allow\n /// witnessing a broken invariant through the use of `recover` (catching a\n /// panic). This trait is a marker trait, so it is automatically implemented for\n /// many types, and it is also structurally composed (e.g. a struct is recover\n@@ -180,7 +180,7 @@ impl<T: RefRecoverSafe + ?Sized> RecoverSafe for Arc<T> {}\n // Pretty simple implementations for the `RefRecoverSafe` marker trait,\n // basically just saying that this is a marker trait and `UnsafeCell` is the\n // only thing which doesn't implement it (which then transitively applies to\n-// everything else.\n+// everything else).\n impl RefRecoverSafe for .. {}\n impl<T: ?Sized> !RefRecoverSafe for UnsafeCell<T> {}\n impl<T> RefRecoverSafe for AssertRecoverSafe<T> {}"}, {"sha": "e327adfaf892ce5a6e42d5c0ae9194d6a5b3c1dd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44f020883eee01e3b4112bfac65b09a13e470c5c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f020883eee01e3b4112bfac65b09a13e470c5c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=44f020883eee01e3b4112bfac65b09a13e470c5c", "patch": "@@ -334,7 +334,7 @@ pub struct AngleBracketedParameterData {\n     /// The type parameters for this path segment, if present.\n     pub types: P<[P<Ty>]>,\n     /// Bindings (equality constraints) on associated types, if present.\n-    /// E.g., `Foo<A=Bar>`.\n+    /// e.g., `Foo<A=Bar>`.\n     pub bindings: P<[P<TypeBinding>]>,\n }\n \n@@ -447,15 +447,15 @@ pub struct WhereClause {\n /// A single predicate in a `where` clause\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum WherePredicate {\n-    /// A type binding, eg `for<'c> Foo: Send+Clone+'c`\n+    /// A type binding, e.g. `for<'c> Foo: Send+Clone+'c`\n     BoundPredicate(WhereBoundPredicate),\n     /// A lifetime predicate, e.g. `'a: 'b+'c`\n     RegionPredicate(WhereRegionPredicate),\n     /// An equality predicate (unsupported)\n     EqPredicate(WhereEqPredicate),\n }\n \n-/// A type bound, eg `for<'c> Foo: Send+Clone+'c`\n+/// A type bound, e.g. `for<'c> Foo: Send+Clone+'c`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereBoundPredicate {\n     pub span: Span,\n@@ -1095,7 +1095,7 @@ impl Delimited {\n     }\n }\n \n-/// A sequence of token treesee\n+/// A sequence of token trees\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct SequenceRepetition {\n     /// The sequence of token trees\n@@ -1346,7 +1346,7 @@ pub struct MethodSig {\n }\n \n /// Represents a method declaration in a trait declaration, possibly including\n-/// a default implementation A trait method is either required (meaning it\n+/// a default implementation. A trait method is either required (meaning it\n /// doesn't have an implementation, just a signature) or provided (meaning it\n /// has a default implementation).\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}]}