{"sha": "2129866dc0d49f5b1197278643102a53da60536a", "node_id": "C_kwDOAAsO6NoAKDIxMjk4NjZkYzBkNDlmNWIxMTk3Mjc4NjQzMTAyYTUzZGE2MDUzNmE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-09T17:08:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-10T12:50:38Z"}, "message": "Directly encode IsAsync in metadata.", "tree": {"sha": "596243b1706d99a37f21ff8f852ae77a9eff3c54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596243b1706d99a37f21ff8f852ae77a9eff3c54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2129866dc0d49f5b1197278643102a53da60536a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2129866dc0d49f5b1197278643102a53da60536a", "html_url": "https://github.com/rust-lang/rust/commit/2129866dc0d49f5b1197278643102a53da60536a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2129866dc0d49f5b1197278643102a53da60536a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42820daf910d1db6ff4b41bc0e4df9e2ff61b4d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/42820daf910d1db6ff4b41bc0e4df9e2ff61b4d0", "html_url": "https://github.com/rust-lang/rust/commit/42820daf910d1db6ff4b41bc0e4df9e2ff61b4d0"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "d0cdc85e1709b0a99d4a412a1fd69f5e000d4376", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2129866dc0d49f5b1197278643102a53da60536a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2129866dc0d49f5b1197278643102a53da60536a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=2129866dc0d49f5b1197278643102a53da60536a", "patch": "@@ -1207,7 +1207,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                         record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body))\n                     }\n                 };\n-                record!(self.tables.asyncness[def_id] <- m_sig.header.asyncness);\n+                self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n                 self.tables.impl_constness.set(def_id.index, hir::Constness::NotConst);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n                     container,\n@@ -1265,7 +1265,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             ty::AssocKind::Fn => {\n                 let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n-                record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n+                self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n                 // Can be inside `impl const Trait`, so using sig.header.constness is not reliable\n                 let constness = if self.tcx.is_const_fn_raw(def_id) {\n@@ -1394,7 +1394,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 EntryKind::Const\n             }\n             hir::ItemKind::Fn(ref sig, .., body) => {\n-                record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n+                self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n                 self.tables.impl_constness.set(def_id.index, sig.header.constness);\n                 EntryKind::Fn\n@@ -1886,7 +1886,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         match nitem.kind {\n             hir::ForeignItemKind::Fn(_, ref names, _) => {\n-                record!(self.tables.asyncness[def_id] <- hir::IsAsync::NotAsync);\n+                self.tables.asyncness.set(def_id.index, hir::IsAsync::NotAsync);\n                 record!(self.tables.fn_arg_names[def_id] <- *names);\n                 let constness = if self.tcx.is_const_fn_raw(def_id) {\n                     hir::Constness::Const"}, {"sha": "f4caa126ab43fd1cd71cbb9396ac1b64109b0b93", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2129866dc0d49f5b1197278643102a53da60536a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2129866dc0d49f5b1197278643102a53da60536a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=2129866dc0d49f5b1197278643102a53da60536a", "patch": "@@ -317,7 +317,7 @@ define_tables! {\n     coerce_unsized_info: Table<DefIndex, Lazy!(ty::adjustment::CoerceUnsizedInfo)>,\n     mir_const_qualif: Table<DefIndex, Lazy!(mir::ConstQualifs)>,\n     rendered_const: Table<DefIndex, Lazy!(String)>,\n-    asyncness: Table<DefIndex, Lazy!(hir::IsAsync)>,\n+    asyncness: Table<DefIndex, hir::IsAsync>,\n     fn_arg_names: Table<DefIndex, Lazy!([Ident])>,\n     generator_kind: Table<DefIndex, Lazy!(hir::GeneratorKind)>,\n     trait_def: Table<DefIndex, Lazy!(ty::TraitDef)>,"}, {"sha": "3c5c551f0e09c743d2932058d01189889f44d2fa", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2129866dc0d49f5b1197278643102a53da60536a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2129866dc0d49f5b1197278643102a53da60536a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=2129866dc0d49f5b1197278643102a53da60536a", "patch": "@@ -128,6 +128,13 @@ fixed_size_enum! {\n     }\n }\n \n+fixed_size_enum! {\n+    hir::IsAsync {\n+        ( NotAsync )\n+        ( Async    )\n+    }\n+}\n+\n // NOTE(eddyb) there could be an impl for `usize`, which would enable a more\n // generic `Lazy<T>` impl, but in the general case we might not need / want to\n // fit every `usize` in `u32`."}]}