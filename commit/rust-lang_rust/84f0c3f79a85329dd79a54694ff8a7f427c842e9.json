{"sha": "84f0c3f79a85329dd79a54694ff8a7f427c842e9", "node_id": "C_kwDOAAsO6NoAKDg0ZjBjM2Y3OWE4NTMyOWRkNzlhNTQ2OTRmZjhhN2Y0MjdjODQyZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-03T19:32:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-03T19:32:41Z"}, "message": "Auto merge of #101214 - cjgillot:old-no-lt, r=estebank\n\nDo not call object_lifetime_default on lifetime params.\n\nSmall cleanup to avoid unnecessary query invocations in trivial cases.", "tree": {"sha": "620046df033b33fe0b352b069d6a209dc4ca7588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/620046df033b33fe0b352b069d6a209dc4ca7588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f0c3f79a85329dd79a54694ff8a7f427c842e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f0c3f79a85329dd79a54694ff8a7f427c842e9", "html_url": "https://github.com/rust-lang/rust/commit/84f0c3f79a85329dd79a54694ff8a7f427c842e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f0c3f79a85329dd79a54694ff8a7f427c842e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec689432fac6720b2f18101ac28a21add98b1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec689432fac6720b2f18101ac28a21add98b1b8", "html_url": "https://github.com/rust-lang/rust/commit/dec689432fac6720b2f18101ac28a21add98b1b8"}, {"sha": "e7164267a2af0d7c146db719abccd64258745c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7164267a2af0d7c146db719abccd64258745c42", "html_url": "https://github.com/rust-lang/rust/commit/e7164267a2af0d7c146db719abccd64258745c42"}], "stats": {"total": 195, "additions": 116, "deletions": 79}, "files": [{"sha": "15e74db8d74586f6173728a681b0ef1bdcc66322", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84f0c3f79a85329dd79a54694ff8a7f427c842e9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f0c3f79a85329dd79a54694ff8a7f427c842e9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=84f0c3f79a85329dd79a54694ff8a7f427c842e9", "patch": "@@ -1162,10 +1162,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if should_encode_type(tcx, local_id, def_kind) {\n                 record!(self.tables.type_of[def_id] <- self.tcx.type_of(def_id));\n             }\n-            if let DefKind::TyParam | DefKind::ConstParam = def_kind {\n-                if let Some(default) = self.tcx.object_lifetime_default(def_id) {\n-                    record!(self.tables.object_lifetime_default[def_id] <- default);\n-                }\n+            if let DefKind::TyParam = def_kind {\n+                let default = self.tcx.object_lifetime_default(def_id);\n+                record!(self.tables.object_lifetime_default[def_id] <- default);\n             }\n             if let DefKind::Trait | DefKind::TraitAlias = def_kind {\n                 record!(self.tables.super_predicates_of[def_id] <- self.tcx.super_predicates_of(def_id));"}, {"sha": "8e7bacca262e10d7da0e6177720f57f7379b4ffd", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84f0c3f79a85329dd79a54694ff8a7f427c842e9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f0c3f79a85329dd79a54694ff8a7f427c842e9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=84f0c3f79a85329dd79a54694ff8a7f427c842e9", "patch": "@@ -1593,12 +1593,13 @@ rustc_queries! {\n     query is_late_bound_map(_: LocalDefId) -> Option<&'tcx FxIndexSet<LocalDefId>> {\n         desc { \"testing if a region is late bound\" }\n     }\n-    /// For a given item (like a struct), gets the default lifetimes to be used\n+    /// For a given item's generic parameter, gets the default lifetimes to be used\n     /// for each parameter if a trait object were to be passed for that parameter.\n-    /// For example, for `struct Foo<'a, T, U>`, this would be `['static, 'static]`.\n-    /// For `struct Foo<'a, T: 'a, U>`, this would instead be `['a, 'static]`.\n-    query object_lifetime_default(key: DefId) -> Option<ObjectLifetimeDefault> {\n-        desc { \"looking up lifetime defaults for generic parameter `{:?}`\", key }\n+    /// For example, for `T` in `struct Foo<'a, T>`, this would be `'static`.\n+    /// For `T` in `struct Foo<'a, T: 'a>`, this would instead be `'a`.\n+    /// This query will panic if passed something that is not a type parameter.\n+    query object_lifetime_default(key: DefId) -> ObjectLifetimeDefault {\n+        desc { \"looking up lifetime defaults for generic parameter `{}`\", tcx.def_path_str(key) }\n         separate_provide_extern\n     }\n     query late_bound_vars_map(_: LocalDefId)"}, {"sha": "a63af4159e8cbd075bae75ff2f6a6be653bc0663", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/84f0c3f79a85329dd79a54694ff8a7f427c842e9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f0c3f79a85329dd79a54694ff8a7f427c842e9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=84f0c3f79a85329dd79a54694ff8a7f427c842e9", "patch": "@@ -173,9 +173,7 @@ impl CheckAttrVisitor<'_> {\n                 sym::no_implicit_prelude => {\n                     self.check_generic_attr(hir_id, attr, target, &[Target::Mod])\n                 }\n-                sym::rustc_object_lifetime_default => {\n-                    self.check_object_lifetime_default(hir_id, span)\n-                }\n+                sym::rustc_object_lifetime_default => self.check_object_lifetime_default(hir_id),\n                 _ => {}\n             }\n \n@@ -415,26 +413,21 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Debugging aid for `object_lifetime_default` query.\n-    fn check_object_lifetime_default(&self, hir_id: HirId, span: Span) {\n+    fn check_object_lifetime_default(&self, hir_id: HirId) {\n         let tcx = self.tcx;\n         if let Some(generics) = tcx.hir().get_generics(tcx.hir().local_def_id(hir_id)) {\n-            let object_lifetime_default_reprs: String = generics\n-                .params\n-                .iter()\n-                .filter_map(|p| {\n-                    let param_id = tcx.hir().local_def_id(p.hir_id);\n-                    let default = tcx.object_lifetime_default(param_id)?;\n-                    Some(match default {\n-                        ObjectLifetimeDefault::Empty => \"BaseDefault\".to_owned(),\n-                        ObjectLifetimeDefault::Static => \"'static\".to_owned(),\n-                        ObjectLifetimeDefault::Param(def_id) => tcx.item_name(def_id).to_string(),\n-                        ObjectLifetimeDefault::Ambiguous => \"Ambiguous\".to_owned(),\n-                    })\n-                })\n-                .collect::<Vec<String>>()\n-                .join(\",\");\n-\n-            tcx.sess.span_err(span, &object_lifetime_default_reprs);\n+            for p in generics.params {\n+                let hir::GenericParamKind::Type { .. } = p.kind else { continue };\n+                let param_id = tcx.hir().local_def_id(p.hir_id);\n+                let default = tcx.object_lifetime_default(param_id);\n+                let repr = match default {\n+                    ObjectLifetimeDefault::Empty => \"BaseDefault\".to_owned(),\n+                    ObjectLifetimeDefault::Static => \"'static\".to_owned(),\n+                    ObjectLifetimeDefault::Param(def_id) => tcx.item_name(def_id).to_string(),\n+                    ObjectLifetimeDefault::Ambiguous => \"Ambiguous\".to_owned(),\n+                };\n+                tcx.sess.span_err(p.span, &repr);\n+            }\n         }\n     }\n "}, {"sha": "c72981ed96f6788b0c840ff7c420349aace8e42d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/84f0c3f79a85329dd79a54694ff8a7f427c842e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f0c3f79a85329dd79a54694ff8a7f427c842e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=84f0c3f79a85329dd79a54694ff8a7f427c842e9", "patch": "@@ -1148,21 +1148,18 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n }\n \n-fn object_lifetime_default<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    param_def_id: DefId,\n-) -> Option<ObjectLifetimeDefault> {\n+fn object_lifetime_default<'tcx>(tcx: TyCtxt<'tcx>, param_def_id: DefId) -> ObjectLifetimeDefault {\n+    debug_assert_eq!(tcx.def_kind(param_def_id), DefKind::TyParam);\n     let param_def_id = param_def_id.expect_local();\n     let parent_def_id = tcx.local_parent(param_def_id);\n-    let generics = tcx.hir().get_generics(parent_def_id)?;\n+    let generics = tcx.hir().get_generics(parent_def_id).unwrap();\n     let param_hir_id = tcx.local_def_id_to_hir_id(param_def_id);\n-    let param = generics.params.iter().find(|p| p.hir_id == param_hir_id)?;\n+    let param = generics.params.iter().find(|p| p.hir_id == param_hir_id).unwrap();\n \n     // Scan the bounds and where-clauses on parameters to extract bounds\n     // of the form `T:'a` so as to determine the `ObjectLifetimeDefault`\n     // for each type parameter.\n     match param.kind {\n-        GenericParamKind::Lifetime { .. } => None,\n         GenericParamKind::Type { .. } => {\n             let mut set = Set1::Empty;\n \n@@ -1181,21 +1178,17 @@ fn object_lifetime_default<'tcx>(\n                 }\n             }\n \n-            Some(match set {\n+            match set {\n                 Set1::Empty => ObjectLifetimeDefault::Empty,\n                 Set1::One(hir::LifetimeName::Static) => ObjectLifetimeDefault::Static,\n                 Set1::One(hir::LifetimeName::Param(param_def_id, _)) => {\n                     ObjectLifetimeDefault::Param(param_def_id.to_def_id())\n                 }\n                 _ => ObjectLifetimeDefault::Ambiguous,\n-            })\n+            }\n         }\n-        GenericParamKind::Const { .. } => {\n-            // Generic consts don't impose any constraints.\n-            //\n-            // We still store a dummy value here to allow generic parameters\n-            // in an arbitrary order.\n-            Some(ObjectLifetimeDefault::Empty)\n+        _ => {\n+            bug!(\"object_lifetime_default_raw must only be called on a type parameter\")\n         }\n     }\n }\n@@ -1512,7 +1505,20 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             generics\n                 .params\n                 .iter()\n-                .filter_map(|param| self.tcx.object_lifetime_default(param.def_id))\n+                .filter_map(|param| {\n+                    match self.tcx.def_kind(param.def_id) {\n+                        // Generic consts don't impose any constraints.\n+                        //\n+                        // We still store a dummy value here to allow generic parameters\n+                        // in an arbitrary order.\n+                        DefKind::ConstParam => Some(ObjectLifetimeDefault::Empty),\n+                        DefKind::TyParam => Some(self.tcx.object_lifetime_default(param.def_id)),\n+                        // We may also get a `Trait` or `TraitAlias` because of how generics `Self` parameter\n+                        // works.  Ignore it because it can't have a meaningful lifetime default.\n+                        DefKind::LifetimeParam | DefKind::Trait | DefKind::TraitAlias => None,\n+                        dk => bug!(\"unexpected def_kind {:?}\", dk),\n+                    }\n+                })\n                 .map(set_to_region)\n                 .collect()\n         });"}, {"sha": "74f5bb7ddb0ec068f966899458467ec7af4984ab", "filename": "src/test/ui/object-lifetime/object-lifetime-default.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/84f0c3f79a85329dd79a54694ff8a7f427c842e9/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f0c3f79a85329dd79a54694ff8a7f427c842e9/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.rs?ref=84f0c3f79a85329dd79a54694ff8a7f427c842e9", "patch": "@@ -1,24 +1,50 @@\n #![feature(rustc_attrs)]\n \n #[rustc_object_lifetime_default]\n-struct A<T>(T); //~ ERROR BaseDefault\n+struct A<\n+    T, //~ ERROR BaseDefault\n+>(T);\n \n #[rustc_object_lifetime_default]\n-struct B<'a,T>(&'a (), T); //~ ERROR BaseDefault\n+struct B<\n+    'a,\n+    T, //~ ERROR BaseDefault\n+>(&'a (), T);\n \n #[rustc_object_lifetime_default]\n-struct C<'a,T:'a>(&'a T); //~ ERROR 'a\n+struct C<\n+    'a,\n+    T: 'a, //~ ERROR 'a\n+>(&'a T);\n \n #[rustc_object_lifetime_default]\n-struct D<'a,'b,T:'a+'b>(&'a T, &'b T); //~ ERROR Ambiguous\n+struct D<\n+    'a,\n+    'b,\n+    T: 'a + 'b, //~ ERROR Ambiguous\n+>(&'a T, &'b T);\n \n #[rustc_object_lifetime_default]\n-struct E<'a,'b:'a,T:'b>(&'a T, &'b T); //~ ERROR 'b\n+struct E<\n+    'a,\n+    'b: 'a,\n+    T: 'b, //~ ERROR 'b\n+>(&'a T, &'b T);\n \n #[rustc_object_lifetime_default]\n-struct F<'a,'b,T:'a,U:'b>(&'a T, &'b U); //~ ERROR 'a,'b\n+struct F<\n+    'a,\n+    'b,\n+    T: 'a, //~ ERROR 'a\n+    U: 'b, //~ ERROR 'b\n+>(&'a T, &'b U);\n \n #[rustc_object_lifetime_default]\n-struct G<'a,'b,T:'a,U:'a+'b>(&'a T, &'b U); //~ ERROR 'a,Ambiguous\n-\n-fn main() { }\n+struct G<\n+    'a,\n+    'b,\n+    T: 'a,      //~ ERROR 'a\n+    U: 'a + 'b, //~ ERROR Ambiguous\n+>(&'a T, &'b U);\n+\n+fn main() {}"}, {"sha": "a58afad3ef2beab986f63ef3ff0b41901ea7ccf1", "filename": "src/test/ui/object-lifetime/object-lifetime-default.stderr", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/84f0c3f79a85329dd79a54694ff8a7f427c842e9/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84f0c3f79a85329dd79a54694ff8a7f427c842e9/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.stderr?ref=84f0c3f79a85329dd79a54694ff8a7f427c842e9", "patch": "@@ -1,44 +1,56 @@\n error: BaseDefault\n-  --> $DIR/object-lifetime-default.rs:4:1\n+  --> $DIR/object-lifetime-default.rs:5:5\n    |\n-LL | struct A<T>(T);\n-   | ^^^^^^^^^^^^^^^\n+LL |     T,\n+   |     ^\n \n error: BaseDefault\n-  --> $DIR/object-lifetime-default.rs:7:1\n+  --> $DIR/object-lifetime-default.rs:11:5\n    |\n-LL | struct B<'a,T>(&'a (), T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     T,\n+   |     ^\n \n error: 'a\n-  --> $DIR/object-lifetime-default.rs:10:1\n+  --> $DIR/object-lifetime-default.rs:17:5\n    |\n-LL | struct C<'a,T:'a>(&'a T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     T: 'a,\n+   |     ^\n \n error: Ambiguous\n-  --> $DIR/object-lifetime-default.rs:13:1\n+  --> $DIR/object-lifetime-default.rs:24:5\n    |\n-LL | struct D<'a,'b,T:'a+'b>(&'a T, &'b T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     T: 'a + 'b,\n+   |     ^\n \n error: 'b\n-  --> $DIR/object-lifetime-default.rs:16:1\n+  --> $DIR/object-lifetime-default.rs:31:5\n    |\n-LL | struct E<'a,'b:'a,T:'b>(&'a T, &'b T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     T: 'b,\n+   |     ^\n \n-error: 'a,'b\n-  --> $DIR/object-lifetime-default.rs:19:1\n+error: 'a\n+  --> $DIR/object-lifetime-default.rs:38:5\n+   |\n+LL |     T: 'a,\n+   |     ^\n+\n+error: 'b\n+  --> $DIR/object-lifetime-default.rs:39:5\n    |\n-LL | struct F<'a,'b,T:'a,U:'b>(&'a T, &'b U);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     U: 'b,\n+   |     ^\n \n-error: 'a,Ambiguous\n-  --> $DIR/object-lifetime-default.rs:22:1\n+error: 'a\n+  --> $DIR/object-lifetime-default.rs:46:5\n+   |\n+LL |     T: 'a,\n+   |     ^\n+\n+error: Ambiguous\n+  --> $DIR/object-lifetime-default.rs:47:5\n    |\n-LL | struct G<'a,'b,T:'a,U:'a+'b>(&'a T, &'b U);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     U: 'a + 'b,\n+   |     ^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n "}]}