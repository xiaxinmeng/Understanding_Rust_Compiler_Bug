{"sha": "9eabb41ab4299e290f43d614877947d6238c3a96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYWJiNDFhYjQyOTllMjkwZjQzZDYxNDg3Nzk0N2Q2MjM4YzNhOTY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-05T10:02:29Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-05T10:03:53Z"}, "message": "Remove unnecessary exceptions to the platform-specific code check\n\nSome of these were just wrong, like src/librustc. Some looked outdated,\nlike std::f64. Not sure what was going on with the others - maybe this\ncheck isn't as smart as it needs to be? But it the meantime it seems\nsilly to ignore the check if it will pass anyway.", "tree": {"sha": "6d0cced1c86fa8a14c06e5ee270a63d6af579a4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d0cced1c86fa8a14c06e5ee270a63d6af579a4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eabb41ab4299e290f43d614877947d6238c3a96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eabb41ab4299e290f43d614877947d6238c3a96", "html_url": "https://github.com/rust-lang/rust/commit/9eabb41ab4299e290f43d614877947d6238c3a96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eabb41ab4299e290f43d614877947d6238c3a96/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58e71896506edb701f276158bd2f47e8788a1133", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e71896506edb701f276158bd2f47e8788a1133", "html_url": "https://github.com/rust-lang/rust/commit/58e71896506edb701f276158bd2f47e8788a1133"}], "stats": {"total": 22, "additions": 0, "deletions": 22}, "files": [{"sha": "144529d8641eee4c56bb02f00b1b0fcedae6e18c", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9eabb41ab4299e290f43d614877947d6238c3a96/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eabb41ab4299e290f43d614877947d6238c3a96/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=9eabb41ab4299e290f43d614877947d6238c3a96", "patch": "@@ -40,35 +40,20 @@ const EXCEPTION_PATHS: &[&str] = &[\n     \"library/panic_abort\",\n     \"library/panic_unwind\",\n     \"library/unwind\",\n-    // black_box implementation is LLVM-version specific and it uses\n-    // target_os to tell targets with different LLVM-versions apart\n-    // (e.g. `wasm32-unknown-emscripten` vs `wasm32-unknown-unknown`):\n-    \"library/core/src/hint.rs\",\n     \"library/std/src/sys/\", // Platform-specific code for std lives here.\n     // This has the trailing slash so that sys_common is not excepted.\n     \"library/std/src/os\", // Platform-specific public interfaces\n     \"library/rtstartup\",  // Not sure what to do about this. magic stuff for mingw\n-    // temporary exceptions\n-    \"library/std/src/lib.rs\",\n-    \"library/std/src/path.rs\",\n-    \"library/std/src/f32.rs\",\n-    \"library/std/src/f64.rs\",\n     // Integration test for platform-specific run-time feature detection:\n     \"library/std/tests/run-time-detect.rs\",\n     \"library/std/src/net/test.rs\",\n     \"library/std/src/net/addr\",\n     \"library/std/src/net/udp\",\n-    \"library/std/src/sys_common/mod.rs\",\n-    \"library/std/src/sys_common/net.rs\",\n-    \"library/std/src/sys_common/backtrace.rs\",\n     \"library/std/src/sys_common/remutex.rs\",\n     \"library/std/src/sync/mutex.rs\",\n     \"library/std/src/sync/rwlock.rs\",\n-    // panic_unwind shims\n-    \"library/std/src/panicking.rs\",\n     \"library/term\", // Not sure how to make this crate portable, but test crate needs it.\n     \"library/test\", // Probably should defer to unstable `std::sys` APIs.\n-    \"library/std/src/sync/mpsc\", // some tests are only run on non-emscripten\n     // std testing crates, okay for now at least\n     \"library/core/tests\",\n     \"library/alloc/tests/lib.rs\",\n@@ -79,13 +64,6 @@ const EXCEPTION_PATHS: &[&str] = &[\n     // we must use `#[cfg(windows)]` to conditionally compile the\n     // correct `VaList` structure for windows.\n     \"library/core/src/ffi.rs\",\n-    // non-std crates\n-    \"src/test\",\n-    \"src/tools\",\n-    \"src/librustc\",\n-    \"src/librustdoc\",\n-    \"src/librustc_ast\",\n-    \"src/bootstrap\",\n ];\n \n pub fn check(path: &Path, bad: &mut bool) {"}]}