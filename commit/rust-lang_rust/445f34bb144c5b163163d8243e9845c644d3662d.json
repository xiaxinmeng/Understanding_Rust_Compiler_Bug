{"sha": "445f34bb144c5b163163d8243e9845c644d3662d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NWYzNGJiMTQ0YzViMTYzMTYzZDgyNDNlOTg0NWM2NDRkMzY2MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-01T03:26:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-01T03:26:55Z"}, "message": "Auto merge of #76186 - tmandry:rollup-49nliiy, r=tmandry\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #75945 (Use `env::func()`, not 'the function env::func' in docs for std::env)\n - #76002 (Fix `-Z instrument-coverage` on MSVC)\n - #76003 (Adds two source span utility functions used in source-based coverage)\n - #76059 (Clean up E0764)\n - #76103 (Clean up E0769)\n - #76139 (Make `cow_is_borrowed` methods const)\n - #76154 (Fix rustdoc strings indentation)\n - #76161 (Remove notrust in rustc_middle)\n - #76163 (README: Adjust Linux and macOS support platform and architecture)\n - #76166 (Make `StringReader` private)\n - #76172 (Revert #75463)\n - #76178 (Update expect-test to 1.0)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0109fbe74144d5f4f11b9f435808edcb34756750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0109fbe74144d5f4f11b9f435808edcb34756750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/445f34bb144c5b163163d8243e9845c644d3662d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/445f34bb144c5b163163d8243e9845c644d3662d", "html_url": "https://github.com/rust-lang/rust/commit/445f34bb144c5b163163d8243e9845c644d3662d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/445f34bb144c5b163163d8243e9845c644d3662d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d824b2351449714dc685d90e298c9d630ad6c437", "url": "https://api.github.com/repos/rust-lang/rust/commits/d824b2351449714dc685d90e298c9d630ad6c437", "html_url": "https://github.com/rust-lang/rust/commit/d824b2351449714dc685d90e298c9d630ad6c437"}, {"sha": "8d328d785fc9e1242ff4c6e390ccd276a09221da", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d328d785fc9e1242ff4c6e390ccd276a09221da", "html_url": "https://github.com/rust-lang/rust/commit/8d328d785fc9e1242ff4c6e390ccd276a09221da"}], "stats": {"total": 621, "additions": 313, "deletions": 308}, "files": [{"sha": "7be90aaf9e6fbdba1c2e9ba0624299dc1ee24138", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -998,9 +998,9 @@ dependencies = [\n \n [[package]]\n name = \"expect-test\"\n-version = \"0.1.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a3e383741ea1982866572109d1a8c807bd36aad91fca701489fdca56ef92b3b8\"\n+checksum = \"ceb96f3eaa0d4e8769c52dacfd4eb60183b817ed2f176171b3c691d5022b0f2e\"\n dependencies = [\n  \"difference\",\n  \"once_cell\","}, {"sha": "a7e23d8ac2caaeaedb3de1fe8b2aaabc790506f2", "filename": "README.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -211,11 +211,17 @@ fetch snapshots, and an OS that can execute the available snapshot binaries.\n \n Snapshot binaries are currently built and tested on several platforms:\n \n-| Platform / Architecture    | x86 | x86_64 |\n-|----------------------------|-----|--------|\n-| Windows (7, 8, 10, ...)    | \u2713   | \u2713      |\n-| Linux (2.6.18 or later)    | \u2713   | \u2713      |\n-| macOS (10.7 Lion or later) | \u2713   | \u2713      |\n+| Platform / Architecture                     | x86 | x86_64 |\n+|---------------------------------------------|-----|--------|\n+| Windows (7, 8, 10, ...)                     | \u2713   | \u2713      |\n+| Linux (kernel 2.6.32, glibc 2.11 or later)  | \u2713   | \u2713      |\n+| macOS (10.7 Lion or later)                  | (\\*) | \u2713      |\n+\n+(\\*): Apple dropped support for running 32-bit binaries starting from macOS 10.15 and iOS 11.\n+Due to this decision from Apple, the targets are no longer useful to our users.\n+Please read [our blog post][macx32] for more info.\n+\n+[macx32]: https://blog.rust-lang.org/2020/01/03/reducing-support-for-32-bit-apple-targets.html\n \n You may find that other platforms work, but these are our officially\n supported build environments that are most likely to work."}, {"sha": "270c8250e19812f11702c427a6b1401e1bca44a4", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -1668,7 +1668,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // FIXME: Order dependent, applies to the following objects. Where should it be placed?\n     // Try to strip as much out of the generated object by removing unused\n     // sections if possible. See more comments in linker.rs\n-    if sess.opts.cg.link_dead_code != Some(true) {\n+    if !sess.link_dead_code() {\n         let keep_metadata = crate_type == CrateType::Dylib;\n         cmd.gc_sections(keep_metadata);\n     }"}, {"sha": "0a2e2290e77c2e7ad2cfcd23054a34de130456aa", "filename": "compiler/rustc_error_codes/src/error_codes/E0764.md", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0764.md", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0764.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0764.md?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -1,12 +1,4 @@\n-Mutable references (`&mut`) can only be used in constant functions, not statics\n-or constants. This limitation exists to prevent the creation of constants that\n-have a mutable reference in their final value. If you had a constant of `&mut\n-i32` type, you could modify the value through that reference, making the\n-constant essentially mutable. While there could be a more fine-grained scheme\n-in the future that allows mutable references if they are not \"leaked\" to the\n-final value, a more conservative approach was chosen for now. `const fn` do not\n-have this problem, as the borrow checker will prevent the `const fn` from\n-returning new mutable references.\n+A mutable reference was used in a constant.\n \n Erroneous code example:\n \n@@ -19,6 +11,18 @@ fn main() {\n }\n ```\n \n+Mutable references (`&mut`) can only be used in constant functions, not statics\n+or constants. This limitation exists to prevent the creation of constants that\n+have a mutable reference in their final value. If you had a constant of\n+`&mut i32` type, you could modify the value through that reference, making the\n+constant essentially mutable.\n+\n+While there could be a more fine-grained scheme in the future that allows\n+mutable references if they are not \"leaked\" to the final value, a more\n+conservative approach was chosen for now. `const fn` do not have this problem,\n+as the borrow checker will prevent the `const fn` from returning new mutable\n+references.\n+\n Remember: you cannot use a function call inside a constant or static. However,\n you can totally use it in constant functions:\n "}, {"sha": "4a3b674b05896d964165f73dd4f37efe8b7ec046", "filename": "compiler/rustc_error_codes/src/error_codes/E0769.md", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0769.md", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0769.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0769.md?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -1,15 +1,19 @@\n-A tuple struct or tuple variant was used in a pattern as if it were a\n-struct or struct variant.\n+A tuple struct or tuple variant was used in a pattern as if it were a struct or\n+struct variant.\n \n Erroneous code example:\n \n ```compile_fail,E0769\n enum E {\n     A(i32),\n }\n+\n let e = E::A(42);\n+\n match e {\n-    E::A { number } => println!(\"{}\", x),\n+    E::A { number } => { // error!\n+        println!(\"{}\", number);\n+    }\n }\n ```\n \n@@ -21,19 +25,23 @@ To fix this error, you can use the tuple pattern:\n # }\n # let e = E::A(42);\n match e {\n-    E::A(number) => println!(\"{}\", number),\n+    E::A(number) => { // ok!\n+        println!(\"{}\", number);\n+    }\n }\n ```\n \n-Alternatively, you can also use the struct pattern by using the correct\n-field names and binding them to new identifiers:\n+Alternatively, you can also use the struct pattern by using the correct field\n+names and binding them to new identifiers:\n \n ```\n # enum E {\n #     A(i32),\n # }\n # let e = E::A(42);\n match e {\n-    E::A { 0: number } => println!(\"{}\", number),\n+    E::A { 0: number } => { // ok!\n+        println!(\"{}\", number);\n+    }\n }\n ```"}, {"sha": "12101776de25f4333d07cddbd9e1b7f65d62b16d", "filename": "compiler/rustc_lexer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_lexer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_lexer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2FCargo.toml?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -20,4 +20,4 @@ doctest = false\n unicode-xid = \"0.2.0\"\n \n [dev-dependencies]\n-expect-test = \"0.1\"\n+expect-test = \"1.0\""}, {"sha": "79e2c5aac23859939bbe467a890ecd3dc0b752b1", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -85,7 +85,7 @@ impl<'tcx> MonoItem<'tcx> {\n             .debugging_opts\n             .inline_in_all_cgus\n             .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n-            && tcx.sess.opts.cg.link_dead_code != Some(true);\n+            && !tcx.sess.link_dead_code();\n \n         match *self {\n             MonoItem::Fn(ref instance) => {"}, {"sha": "ece8da7e51e340dea0c59bf0b366fbdc08149949", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -55,7 +55,7 @@ impl GenericArg<'tcx> {\n     /// that appear in `self`, it does not descend into the fields of\n     /// structs or variants. For example:\n     ///\n-    /// ```notrust\n+    /// ```text\n     /// isize => { isize }\n     /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }\n     /// [isize] => { [isize], isize }\n@@ -80,7 +80,7 @@ impl<'tcx> super::TyS<'tcx> {\n     /// that appear in `self`, it does not descend into the fields of\n     /// structs or variants. For example:\n     ///\n-    /// ```notrust\n+    /// ```text\n     /// isize => { isize }\n     /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }\n     /// [isize] => { [isize], isize }"}, {"sha": "b45fe0ee010f98ba9d4f7451a1126cfb2334e825", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -190,7 +190,7 @@ pub fn partition<'tcx>(\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n-    if tcx.sess.opts.cg.link_dead_code != Some(true) {\n+    if !tcx.sess.link_dead_code() {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_internalize_symbols\");\n         partitioner.internalize_symbols(tcx, &mut post_inlining, inlining_map);\n     }\n@@ -327,7 +327,7 @@ fn collect_and_partition_mono_items<'tcx>(\n             }\n         }\n         None => {\n-            if tcx.sess.opts.cg.link_dead_code == Some(true) {\n+            if tcx.sess.link_dead_code() {\n                 MonoItemCollectionMode::Eager\n             } else {\n                 MonoItemCollectionMode::Lazy"}, {"sha": "1131f00cb425e0250118cfd18cbcf59573c5ba20", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -27,7 +27,7 @@ pub struct UnmatchedBrace {\n     pub candidate_span: Option<Span>,\n }\n \n-pub struct StringReader<'a> {\n+crate struct StringReader<'a> {\n     sess: &'a ParseSess,\n     /// Initial position, read-only.\n     start_pos: BytePos,\n@@ -41,7 +41,7 @@ pub struct StringReader<'a> {\n }\n \n impl<'a> StringReader<'a> {\n-    pub fn new(\n+    crate fn new(\n         sess: &'a ParseSess,\n         source_file: Lrc<rustc_span::SourceFile>,\n         override_span: Option<Span>,\n@@ -66,7 +66,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// Returns the next token, including trivia like whitespace or comments.\n-    pub fn next_token(&mut self) -> Token {\n+    fn next_token(&mut self) -> Token {\n         let start_src_index = self.src_index(self.pos);\n         let text: &str = &self.src[start_src_index..self.end_src_index];\n "}, {"sha": "0a2a535598a2ff8c66da875f209c14cc9f5fba79", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -1718,20 +1718,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             );\n         }\n \n-        // `-Z instrument-coverage` implies:\n-        //   * `-Z symbol-mangling-version=v0` - to ensure consistent and reversible name mangling.\n-        //     Note, LLVM coverage tools can analyze coverage over multiple runs, including some\n-        //     changes to source code; so mangled names must be consistent across compilations.\n-        //   * `-C link-dead-code` - so unexecuted code is still counted as zero, rather than be\n-        //     optimized out. Note that instrumenting dead code can be explicitly disabled with:\n-        //         `-Z instrument-coverage -C link-dead-code=no`.\n+        // `-Z instrument-coverage` implies `-Z symbol-mangling-version=v0` - to ensure consistent\n+        // and reversible name mangling. Note, LLVM coverage tools can analyze coverage over\n+        // multiple runs, including some changes to source code; so mangled names must be consistent\n+        // across compilations.\n         debugging_opts.symbol_mangling_version = SymbolManglingVersion::V0;\n-        if cg.link_dead_code == None {\n-            // FIXME(richkadel): Investigate if the `instrument-coverage` implementation can\n-            // inject [\"zero counters\"](https://llvm.org/docs/CoverageMappingFormat.html#counter)\n-            // in the coverage map when \"dead code\" is removed, rather than forcing `link-dead-code`.\n-            cg.link_dead_code = Some(true);\n-        }\n     }\n \n     if !cg.embed_bitcode {"}, {"sha": "ee30c16108a0c50d51f3ce0e450ff0a2f6342ed2", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -885,9 +885,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"instrument the generated code to support LLVM source-based code coverage \\\n         reports (note, the compiler build config must include `profiler = true`, \\\n         and is mutually exclusive with `-C profile-generate`/`-C profile-use`); \\\n-        implies `-C link-dead-code` (unless explicitly disabled)` and \\\n-        `-Z symbol-mangling-version=v0`; and disables/overrides some optimization \\\n-        options (default: no)\"),\n+        implies `-C link-dead-code` (unless targeting MSVC, or explicitly disabled) \\\n+        and `-Z symbol-mangling-version=v0`; disables/overrides some Rust \\\n+        optimizations (default: no)\"),\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "db2059251c0c8f8b02409c26e79d6121b651f567", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -1024,6 +1024,40 @@ impl Session {\n         || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY)\n     }\n \n+    pub fn link_dead_code(&self) -> bool {\n+        match self.opts.cg.link_dead_code {\n+            Some(explicitly_set) => explicitly_set,\n+            None => {\n+                self.opts.debugging_opts.instrument_coverage\n+                    && !self.target.target.options.is_like_msvc\n+                // Issue #76038: (rustc `-Clink-dead-code` causes MSVC linker to produce invalid\n+                // binaries when LLVM InstrProf counters are enabled). As described by this issue,\n+                // the \"link dead code\" option produces incorrect binaries when compiled and linked\n+                // under MSVC. The resulting Rust programs typically crash with a segmentation\n+                // fault, or produce an empty \"*.profraw\" file (profiling counter results normally\n+                // generated during program exit).\n+                //\n+                // If not targeting MSVC, `-Z instrument-coverage` implies `-C link-dead-code`, so\n+                // unexecuted code is still counted as zero, rather than be optimized out. Note that\n+                // instrumenting dead code can be explicitly disabled with:\n+                //\n+                //     `-Z instrument-coverage -C link-dead-code=no`.\n+                //\n+                // FIXME(richkadel): Investigate if `instrument-coverage` implementation can inject\n+                // [zero counters](https://llvm.org/docs/CoverageMappingFormat.html#counter) in the\n+                // coverage map when \"dead code\" is removed, rather than forcing `link-dead-code`.\n+                // This may not be possible, however, if (as it seems to appear) the \"dead code\"\n+                // that would otherwise not be linked is only identified as \"dead\" by the native\n+                // linker. If that's the case, I believe it is too late for the Rust compiler to\n+                // leverage any information it might be able to get from the linker regarding what\n+                // code is dead, to be able to add those counters.\n+                //\n+                // On the other hand, if any Rust compiler passes are optimizing out dead code blocks\n+                // we should inject \"zero\" counters for those code regions.\n+            }\n+        }\n+    }\n+\n     pub fn mark_attr_known(&self, attr: &Attribute) {\n         self.known_attrs.lock().mark(attr)\n     }\n@@ -1432,20 +1466,6 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         );\n     }\n \n-    // FIXME(richkadel): See `src/test/run-make-fulldeps/instrument-coverage/Makefile`. After\n-    // compiling with `-Zinstrument-coverage`, the resulting binary generates a segfault during\n-    // the program's exit process (likely while attempting to generate the coverage stats in\n-    // the \"*.profraw\" file). An investigation to resolve the problem on Windows is ongoing,\n-    // but until this is resolved, the option is disabled on Windows, and the test is skipped\n-    // when targeting `MSVC`.\n-    if sess.opts.debugging_opts.instrument_coverage && sess.target.target.options.is_like_msvc {\n-        sess.warn(\n-            \"Rust source-based code coverage instrumentation (with `-Z instrument-coverage`) \\\n-            is not yet supported on Windows when targeting MSVC. The resulting binaries will \\\n-            still be instrumented for experimentation purposes, but may not execute correctly.\",\n-        );\n-    }\n-\n     const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n         \"aarch64-fuchsia\",\n         \"aarch64-unknown-linux-gnu\","}, {"sha": "b478a1d15c5065cc574c0e49b8d141f5319c13c0", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -400,6 +400,13 @@ impl Span {\n         span.with_lo(span.hi)\n     }\n \n+    #[inline]\n+    /// Returns true if hi == lo\n+    pub fn is_empty(&self) -> bool {\n+        let span = self.data();\n+        span.hi == span.lo\n+    }\n+\n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n         if self.is_dummy() { other } else { self }"}, {"sha": "37596b8ef6fcaadf1639eee2ad32b07f8f97a39a", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -487,6 +487,15 @@ impl SourceMap {\n         }\n     }\n \n+    /// Returns a new `Span` covering the start and end `BytePos`s of the file containing the given\n+    /// `pos`. This can be used to quickly determine if another `BytePos` or `Span` is from the same\n+    /// file.\n+    pub fn lookup_file_span(&self, pos: BytePos) -> Span {\n+        let idx = self.lookup_source_file_idx(pos);\n+        let SourceFile { start_pos, end_pos, .. } = *(*self.files.borrow().source_files)[idx];\n+        Span::with_root_ctxt(start_pos, end_pos)\n+    }\n+\n     /// Returns `Some(span)`, a union of the LHS and RHS span. The LHS must precede the RHS. If\n     /// there are gaps between LHS and RHS, the resulting union will cross these gaps.\n     /// For this to work,"}, {"sha": "e7260f3956c3833671ac771677956e6285c5e48d", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -217,7 +217,7 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n     /// assert!(!bull.is_borrowed());\n     /// ```\n     #[unstable(feature = \"cow_is_borrowed\", issue = \"65143\")]\n-    pub fn is_borrowed(&self) -> bool {\n+    pub const fn is_borrowed(&self) -> bool {\n         match *self {\n             Borrowed(_) => true,\n             Owned(_) => false,\n@@ -239,7 +239,7 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n     /// assert!(!bull.is_owned());\n     /// ```\n     #[unstable(feature = \"cow_is_borrowed\", issue = \"65143\")]\n-    pub fn is_owned(&self) -> bool {\n+    pub const fn is_owned(&self) -> bool {\n         !self.is_borrowed()\n     }\n "}, {"sha": "3953c73319fe419e5b33d735e68020a2cad20c85", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -356,9 +356,8 @@ impl Ordering {\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[rustc_const_stable(feature = \"const_ordering\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn reverse(self) -> Ordering {\n+    pub fn reverse(self) -> Ordering {\n         match self {\n             Less => Greater,\n             Equal => Equal,\n@@ -395,9 +394,8 @@ impl Ordering {\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[rustc_const_stable(feature = \"const_ordering\", since = \"1.48.0\")]\n     #[stable(feature = \"ordering_chaining\", since = \"1.17.0\")]\n-    pub const fn then(self, other: Ordering) -> Ordering {\n+    pub fn then(self, other: Ordering) -> Ordering {\n         match self {\n             Equal => other,\n             _ => self,"}, {"sha": "970dea6b2991b0fd5ddf99d6a9d40e804433c982", "filename": "library/std/src/env.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -68,21 +68,19 @@ pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created by the [`std::env::vars`] function. See its\n-/// documentation for more.\n+/// This structure is created by [`env::vars()`]. See its documentation for more.\n ///\n-/// [`std::env::vars`]: vars\n+/// [`env::vars()`]: vars\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars {\n     inner: VarsOs,\n }\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created by the [`std::env::vars_os`] function. See\n-/// its documentation for more.\n+/// This structure is created by [`env::vars_os()`]. See its documentation for more.\n ///\n-/// [`std::env::vars_os`]: vars_os\n+/// [`env::vars_os()`]: vars_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct VarsOs {\n     inner: os_imp::Env,\n@@ -98,10 +96,8 @@ pub struct VarsOs {\n /// # Panics\n ///\n /// While iterating, the returned iterator will panic if any key or value in the\n-/// environment is not valid unicode. If this is not desired, consider using the\n-/// [`env::vars_os`] function.\n-///\n-/// [`env::vars_os`]: vars_os\n+/// environment is not valid unicode. If this is not desired, consider using\n+/// [`env::vars_os()`].\n ///\n /// # Examples\n ///\n@@ -114,6 +110,8 @@ pub struct VarsOs {\n ///     println!(\"{}: {}\", key, value);\n /// }\n /// ```\n+///\n+/// [`env::vars_os()`]: vars_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars() -> Vars {\n     Vars { inner: vars_os() }\n@@ -245,9 +243,9 @@ fn _var_os(key: &OsStr) -> Option<OsString> {\n }\n \n /// The error type for operations interacting with environment variables.\n-/// Possibly returned from the [`env::var`] function.\n+/// Possibly returned from [`env::var()`].\n ///\n-/// [`env::var`]: var\n+/// [`env::var()`]: var\n #[derive(Debug, PartialEq, Eq, Clone)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub enum VarError {\n@@ -372,10 +370,10 @@ fn _remove_var(k: &OsStr) {\n ///\n /// The iterator element type is [`PathBuf`].\n ///\n-/// This structure is created by the [`std::env::split_paths`] function. See its\n+/// This structure is created by [`env::split_paths()`]. See its\n /// documentation for more.\n ///\n-/// [`std::env::split_paths`]: split_paths\n+/// [`env::split_paths()`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> {\n     inner: os_imp::SplitPaths<'a>,\n@@ -426,9 +424,9 @@ impl fmt::Debug for SplitPaths<'_> {\n }\n \n /// The error type for operations on the `PATH` variable. Possibly returned from\n-/// the [`env::join_paths`] function.\n+/// [`env::join_paths()`].\n ///\n-/// [`env::join_paths`]: join_paths\n+/// [`env::join_paths()`]: join_paths\n #[derive(Debug)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct JoinPathsError {\n@@ -463,7 +461,8 @@ pub struct JoinPathsError {\n /// }\n /// ```\n ///\n-/// Joining a path containing a colon on a Unix-like platform results in an error:\n+/// Joining a path containing a colon on a Unix-like platform results in an\n+/// error:\n ///\n /// ```\n /// # if cfg!(unix) {\n@@ -475,8 +474,8 @@ pub struct JoinPathsError {\n /// # }\n /// ```\n ///\n-/// Using `env::join_paths` with [`env::split_paths`] to append an item to the `PATH` environment\n-/// variable:\n+/// Using `env::join_paths()` with [`env::split_paths()`] to append an item to\n+/// the `PATH` environment variable:\n ///\n /// ```\n /// use std::env;\n@@ -494,7 +493,7 @@ pub struct JoinPathsError {\n /// }\n /// ```\n ///\n-/// [`env::split_paths`]: split_paths\n+/// [`env::split_paths()`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n where\n@@ -667,14 +666,14 @@ pub fn current_exe() -> io::Result<PathBuf> {\n /// An iterator over the arguments of a process, yielding a [`String`] value for\n /// each argument.\n ///\n-/// This struct is created by the [`std::env::args`] function. See its\n-/// documentation for more.\n+/// This struct is created by [`env::args()`]. See its documentation\n+/// for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`std::env::args`]: args\n+/// [`env::args()`]: args\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args {\n     inner: ArgsOs,\n@@ -683,14 +682,14 @@ pub struct Args {\n /// An iterator over the arguments of a process, yielding an [`OsString`] value\n /// for each argument.\n ///\n-/// This struct is created by the [`std::env::args_os`] function. See its\n-/// documentation for more.\n+/// This struct is created by [`env::args_os()`]. See its documentation\n+/// for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`std::env::args_os`]: args_os\n+/// [`env::args_os()`]: args_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs {\n     inner: sys::args::Args,"}, {"sha": "ede5239446835061426475d8b7133ae83c1e8dea", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -18,4 +18,4 @@ tempfile = \"3\"\n itertools = \"0.8\"\n \n [dev-dependencies]\n-expect-test = \"0.1\"\n+expect-test = \"1.0\""}, {"sha": "484fbd0316dc47d6fe6979fd62bf844335366348", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -75,8 +75,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     }\n                 });\n                 debug!(\n-                    \"get_blanket_impls: found applicable impl: {}\\\n-                        for trait_ref={:?}, ty={:?}\",\n+                    \"get_blanket_impls: found applicable impl: {} for trait_ref={:?}, ty={:?}\",\n                     may_apply, trait_ref, ty\n                 );\n                 if !may_apply {"}, {"sha": "794a7bcaf1cb79e6bff4b6bf19b81341715a3582", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -391,26 +391,25 @@ fn test_render_long_html() {\n             (word_cfg(\"unix\") & word_cfg(\"windows\") & word_cfg(\"debug_assertions\"))\n                 .render_long_html(),\n             \"This is supported on <strong>Unix and Windows and debug-assertions enabled\\\n-                </strong> only.\"\n+             </strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") | word_cfg(\"windows\") | word_cfg(\"debug_assertions\"))\n                 .render_long_html(),\n             \"This is supported on <strong>Unix or Windows or debug-assertions enabled\\\n-                </strong> only.\"\n+             </strong> only.\"\n         );\n         assert_eq!(\n             (!(word_cfg(\"unix\") | word_cfg(\"windows\") | word_cfg(\"debug_assertions\")))\n                 .render_long_html(),\n             \"This is supported on <strong>neither Unix nor Windows nor debug-assertions \\\n-                enabled</strong>.\"\n+             enabled</strong>.\"\n         );\n         assert_eq!(\n             ((word_cfg(\"unix\") & name_value_cfg(\"target_arch\", \"x86_64\"))\n                 | (word_cfg(\"windows\") & name_value_cfg(\"target_pointer_width\", \"64\")))\n             .render_long_html(),\n-            \"This is supported on <strong>Unix and x86-64, or Windows and 64-bit</strong> \\\n-                only.\"\n+            \"This is supported on <strong>Unix and x86-64, or Windows and 64-bit</strong> only.\"\n         );\n         assert_eq!(\n             (!(word_cfg(\"unix\") & word_cfg(\"windows\"))).render_long_html(),\n@@ -420,7 +419,7 @@ fn test_render_long_html() {\n             ((word_cfg(\"debug_assertions\") | word_cfg(\"windows\")) & word_cfg(\"unix\"))\n                 .render_long_html(),\n             \"This is supported on <strong>(debug-assertions enabled or Windows) and Unix\\\n-            </strong> only.\"\n+             </strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_feature\", \"sse2\").render_long_html(),\n@@ -430,7 +429,7 @@ fn test_render_long_html() {\n             (name_value_cfg(\"target_arch\", \"x86_64\") & name_value_cfg(\"target_feature\", \"sse2\"))\n                 .render_long_html(),\n             \"This is supported on <strong>x86-64 and target feature \\\n-            <code>sse2</code></strong> only.\"\n+             <code>sse2</code></strong> only.\"\n         );\n     })\n }"}, {"sha": "8255bdab4f5097588d2b03c96562b70625469dd3", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -422,14 +422,13 @@ pub fn name_from_pat(p: &hir::Pat<'_>) -> String {\n         PatKind::Ref(ref p, _) => name_from_pat(&**p),\n         PatKind::Lit(..) => {\n             warn!(\n-                \"tried to get argument name from PatKind::Lit, \\\n-                  which is silly in function arguments\"\n+                \"tried to get argument name from PatKind::Lit, which is silly in function arguments\"\n             );\n             \"()\".to_string()\n         }\n         PatKind::Range(..) => panic!(\n             \"tried to get argument name from PatKind::Range, \\\n-                              which is not allowed in function arguments\"\n+             which is not allowed in function arguments\"\n         ),\n         PatKind::Slice(ref begin, ref mid, ref end) => {\n             let begin = begin.iter().map(|p| name_from_pat(&**p));"}, {"sha": "a5fc07578169e07684cc775d9551cd1d29340e00", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -416,14 +416,12 @@ impl Options {\n                     return Err(1);\n                 } else if !ret.is_empty() {\n                     diag.struct_warn(&format!(\n-                        \"theme file \\\"{}\\\" is missing CSS rules from the \\\n-                                               default theme\",\n+                        \"theme file \\\"{}\\\" is missing CSS rules from the default theme\",\n                         theme_s\n                     ))\n                     .warn(\"the theme may appear incorrect when loaded\")\n                     .help(&format!(\n-                        \"to see what rules are missing, call `rustdoc \\\n-                                        --check-theme \\\"{}\\\"`\",\n+                        \"to see what rules are missing, call `rustdoc  --check-theme \\\"{}\\\"`\",\n                         theme_s\n                     ))\n                     .emit();"}, {"sha": "074a43f2a709985161925e41226f5bf814f02962", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -561,8 +561,7 @@ fn run_global_ctxt(\n     if let Some(ref m) = krate.module {\n         if let None | Some(\"\") = m.doc_value() {\n             let help = \"The following guide may be of use:\\n\\\n-                    https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation\\\n-                    .html\";\n+                https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\";\n             tcx.struct_lint_node(\n                 rustc_lint::builtin::MISSING_CRATE_LEVEL_DOCS,\n                 ctxt.as_local_hir_id(m.def_id).unwrap(),\n@@ -581,7 +580,7 @@ fn run_global_ctxt(\n             .struct_warn(&format!(\"the `#![doc({})]` attribute is considered deprecated\", name));\n         msg.warn(\n             \"see issue #44136 <https://github.com/rust-lang/rust/issues/44136> \\\n-                for more information\",\n+             for more information\",\n         );\n \n         if name == \"no_default_passes\" {\n@@ -614,7 +613,7 @@ fn run_global_ctxt(\n                     report_deprecated_attr(\"plugins = \\\"...\\\"\", diag);\n                     eprintln!(\n                         \"WARNING: `#![doc(plugins = \\\"...\\\")]` \\\n-                            no longer functions; see CVE-2018-1000622\"\n+                         no longer functions; see CVE-2018-1000622\"\n                     );\n                     continue;\n                 }"}, {"sha": "2da9c68b1967c6714b37c6c2b4d40aed06d7f3ea", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -833,7 +833,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                             write!(\n                                 f,\n                                 \"<a class=\\\"type\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n-                                   title=\\\"type {path}::{name}\\\">{name}</a>\",\n+                                    title=\\\"type {path}::{name}\\\">{name}</a>\",\n                                 url = url,\n                                 shortty = ItemType::AssocType,\n                                 name = name,"}, {"sha": "4769edc50ff074f3535413a7a729b08d0d6e89ee", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -27,7 +27,7 @@ pub fn render_with_highlighting(\n         write!(\n             out,\n             \"<div class='information'><div class='tooltip {}'>\u24d8<span \\\n-                     class='tooltiptext'>{}</span></div></div>\",\n+                  class='tooltiptext'>{}</span></div></div>\",\n             class, tooltip\n         )\n         .unwrap();"}, {"sha": "c79471b1fae6b41e0c581865a5056a85baa54638", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -9,7 +9,7 @@ fn test_html_highlighting() {\n         write_code(&mut out, src);\n         format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out)\n     };\n-    expect_file![\"src/librustdoc/html/highlight/fixtures/sample.html\"].assert_eq(&html);\n+    expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n }\n \n const STYLE: &str = r#\""}, {"sha": "287c85b8c2253e5ba7b5f85e62e65a31202508ee", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -210,8 +210,8 @@ pub fn render<T: Print, S: Print>(\n             .collect::<String>(),\n         filter_crates = if layout.generate_search_filter {\n             \"<select id=\\\"crate-search\\\">\\\n-            <option value=\\\"All crates\\\">All crates</option>\\\n-        </select>\"\n+                 <option value=\\\"All crates\\\">All crates</option>\\\n+             </select>\"\n         } else {\n             \"\"\n         },"}, {"sha": "d54b8ea7478990273978c942f7bd1ca0d7e0d20d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -519,8 +519,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n                 Some(Event::FootnoteReference(ref reference)) => {\n                     let entry = self.get_entry(&reference);\n                     let reference = format!(\n-                        \"<sup id=\\\"fnref{0}\\\"><a href=\\\"#fn{0}\\\">{0}\\\n-                                             </a></sup>\",\n+                        \"<sup id=\\\"fnref{0}\\\"><a href=\\\"#fn{0}\\\">{0}</a></sup>\",\n                         (*entry).1\n                     );\n                     return Some(Event::Html(reference.into()));"}, {"sha": "01a897c93db8dc2e2edfd14096889b2f5c8ac211", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -140,25 +140,26 @@ fn test_header() {\n \n     t(\n         \"# Foo bar\",\n-        \"<h1 id=\\\"foo-bar\\\" class=\\\"section-header\\\">\\\n-      <a href=\\\"#foo-bar\\\">Foo bar</a></h1>\",\n+        \"<h1 id=\\\"foo-bar\\\" class=\\\"section-header\\\"><a href=\\\"#foo-bar\\\">Foo bar</a></h1>\",\n     );\n     t(\n         \"## Foo-bar_baz qux\",\n-        \"<h2 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-\\\n-      header\\\"><a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h2>\",\n+        \"<h2 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-header\\\">\\\n+         <a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h2>\",\n     );\n     t(\n         \"### **Foo** *bar* baz!?!& -_qux_-%\",\n         \"<h3 id=\\\"foo-bar-baz--qux-\\\" class=\\\"section-header\\\">\\\n-      <a href=\\\"#foo-bar-baz--qux-\\\"><strong>Foo</strong> \\\n-      <em>bar</em> baz!?!&amp; -<em>qux</em>-%</a></h3>\",\n+            <a href=\\\"#foo-bar-baz--qux-\\\"><strong>Foo</strong> \\\n+            <em>bar</em> baz!?!&amp; -<em>qux</em>-%</a>\\\n+         </h3>\",\n     );\n     t(\n         \"#### **Foo?** & \\\\*bar?!*  _`baz`_ \u2764 #qux\",\n         \"<h4 id=\\\"foo--bar--baz--qux\\\" class=\\\"section-header\\\">\\\n-      <a href=\\\"#foo--bar--baz--qux\\\"><strong>Foo?</strong> &amp; *bar?!*  \\\n-      <em><code>baz</code></em> \u2764 #qux</a></h4>\",\n+             <a href=\\\"#foo--bar--baz--qux\\\"><strong>Foo?</strong> &amp; *bar?!*  \\\n+             <em><code>baz</code></em> \u2764 #qux</a>\\\n+         </h4>\",\n     );\n }\n \n@@ -174,38 +175,32 @@ fn test_header_ids_multiple_blocks() {\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#example\\\">Example</a></h1>\",\n+        \"<h1 id=\\\"example\\\" class=\\\"section-header\\\"><a href=\\\"#example\\\">Example</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Panics\",\n-        \"<h1 id=\\\"panics\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#panics\\\">Panics</a></h1>\",\n+        \"<h1 id=\\\"panics\\\" class=\\\"section-header\\\"><a href=\\\"#panics\\\">Panics</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example-1\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#example-1\\\">Example</a></h1>\",\n+        \"<h1 id=\\\"example-1\\\" class=\\\"section-header\\\"><a href=\\\"#example-1\\\">Example</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Main\",\n-        \"<h1 id=\\\"main-1\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#main-1\\\">Main</a></h1>\",\n+        \"<h1 id=\\\"main-1\\\" class=\\\"section-header\\\"><a href=\\\"#main-1\\\">Main</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example-2\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#example-2\\\">Example</a></h1>\",\n+        \"<h1 id=\\\"example-2\\\" class=\\\"section-header\\\"><a href=\\\"#example-2\\\">Example</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Panics\",\n-        \"<h1 id=\\\"panics-1\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#panics-1\\\">Panics</a></h1>\",\n+        \"<h1 id=\\\"panics-1\\\" class=\\\"section-header\\\"><a href=\\\"#panics-1\\\">Panics</a></h1>\",\n     );\n }\n "}, {"sha": "470e9d5ae768d42c0d5b84c75f31d424834df08b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 78, "deletions": 91, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -1061,8 +1061,8 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n             let content = format!(\n                 \"<h1 class='fqn'>\\\n-     <span class='in-band'>List of all crates</span>\\\n-</h1><ul class='mod'>{}</ul>\",\n+                     <span class='in-band'>List of all crates</span>\\\n+                </h1><ul class='mod'>{}</ul>\",\n                 krates\n                     .iter()\n                     .map(|s| {\n@@ -1311,15 +1311,16 @@ impl AllTypes {\n         write!(\n             f,\n             \"<h1 class='fqn'>\\\n-        <span class='out-of-band'>\\\n-            <span id='render-detail'>\\\n-                <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" title=\\\"collapse all docs\\\">\\\n-                    [<span class='inner'>&#x2212;</span>]\\\n-                </a>\\\n-            </span>\n-        </span>\n-        <span class='in-band'>List of all items</span>\\\n-    </h1>\"\n+                 <span class='out-of-band'>\\\n+                     <span id='render-detail'>\\\n+                         <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n+                            title=\\\"collapse all docs\\\">\\\n+                             [<span class='inner'>&#x2212;</span>]\\\n+                         </a>\\\n+                     </span>\n+                 </span>\n+                 <span class='in-band'>List of all items</span>\\\n+             </h1>\"\n         );\n         print_entries(f, &self.structs, \"Structs\", \"structs\");\n         print_entries(f, &self.enums, \"Enums\", \"enums\");\n@@ -1349,20 +1350,20 @@ impl Setting {\n         match *self {\n             Setting::Section { ref description, ref sub_settings } => format!(\n                 \"<div class='setting-line'>\\\n-                        <div class='title'>{}</div>\\\n-                        <div class='sub-settings'>{}</div>\n-                    </div>\",\n+                     <div class='title'>{}</div>\\\n+                     <div class='sub-settings'>{}</div>\n+                 </div>\",\n                 description,\n                 sub_settings.iter().map(|s| s.display()).collect::<String>()\n             ),\n             Setting::Entry { ref js_data_name, ref description, ref default_value } => format!(\n                 \"<div class='setting-line'>\\\n-                        <label class='toggle'>\\\n-                        <input type='checkbox' id='{}' {}>\\\n-                        <span class='slider'></span>\\\n-                        </label>\\\n-                        <div>{}</div>\\\n-                    </div>\",\n+                     <label class='toggle'>\\\n+                     <input type='checkbox' id='{}' {}>\\\n+                     <span class='slider'></span>\\\n+                     </label>\\\n+                     <div>{}</div>\\\n+                 </div>\",\n                 js_data_name,\n                 if *default_value { \" checked\" } else { \"\" },\n                 description,\n@@ -1876,30 +1877,29 @@ fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n             write!(\n                 w,\n                 \"Non-exhaustive structs could have additional fields added in future. \\\n-                       Therefore, non-exhaustive structs cannot be constructed in external crates \\\n-                       using the traditional <code>Struct {{ .. }}</code> syntax; cannot be \\\n-                       matched against without a wildcard <code>..</code>; and \\\n-                       struct update syntax will not work.\"\n+                 Therefore, non-exhaustive structs cannot be constructed in external crates \\\n+                 using the traditional <code>Struct {{ .. }}</code> syntax; cannot be \\\n+                 matched against without a wildcard <code>..</code>; and \\\n+                 struct update syntax will not work.\"\n             );\n         } else if item.is_enum() {\n             write!(\n                 w,\n                 \"Non-exhaustive enums could have additional variants added in future. \\\n-                       Therefore, when matching against variants of non-exhaustive enums, an \\\n-                       extra wildcard arm must be added to account for any future variants.\"\n+                 Therefore, when matching against variants of non-exhaustive enums, an \\\n+                 extra wildcard arm must be added to account for any future variants.\"\n             );\n         } else if item.is_variant() {\n             write!(\n                 w,\n                 \"Non-exhaustive enum variants could have additional fields added in future. \\\n-                       Therefore, non-exhaustive enum variants cannot be constructed in external \\\n-                       crates and cannot be matched against.\"\n+                 Therefore, non-exhaustive enum variants cannot be constructed in external \\\n+                 crates and cannot be matched against.\"\n             );\n         } else {\n             write!(\n                 w,\n-                \"This type will require a wildcard arm in any match statements or \\\n-                       constructors.\"\n+                \"This type will require a wildcard arm in any match statements or constructors.\"\n             );\n         }\n \n@@ -2096,12 +2096,11 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                 let doc_value = myitem.doc_value().unwrap_or(\"\");\n                 write!(\n                     w,\n-                    \"\\\n-                       <tr class='{stab}{add}module-item'>\\\n-                           <td><a class=\\\"{class}\\\" href=\\\"{href}\\\" \\\n-                                  title='{title}'>{name}</a>{unsafety_flag}</td>\\\n-                           <td class='docblock-short'>{stab_tags}{docs}</td>\\\n-                       </tr>\",\n+                    \"<tr class='{stab}{add}module-item'>\\\n+                         <td><a class=\\\"{class}\\\" href=\\\"{href}\\\" \\\n+                             title='{title}'>{name}</a>{unsafety_flag}</td>\\\n+                         <td class='docblock-short'>{stab_tags}{docs}</td>\\\n+                     </tr>\",\n                     name = *myitem.name.as_ref().unwrap(),\n                     stab_tags = stability_tags(myitem),\n                     docs = MarkdownSummaryLine(doc_value, &myitem.links()).into_string(),\n@@ -2250,8 +2249,7 @@ fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Cons\n \n     write!(\n         w,\n-        \"{vis}const \\\n-               {name}: {typ}\",\n+        \"{vis}const {name}: {typ}\",\n         vis = it.visibility.print_with_space(),\n         name = it.name.as_ref().unwrap(),\n         typ = c.type_.print(),\n@@ -2285,8 +2283,7 @@ fn item_static(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Static\n     render_attributes(w, it, false);\n     write!(\n         w,\n-        \"{vis}static {mutability}\\\n-               {name}: {typ}</pre>\",\n+        \"{vis}static {mutability} {name}: {typ}</pre>\",\n         vis = it.visibility.print_with_space(),\n         mutability = s.mutability.print_with_space(),\n         name = it.name.as_ref().unwrap(),\n@@ -2312,7 +2309,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-           {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n+         {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n         vis = it.visibility.print_with_space(),\n         constness = f.header.constness.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n@@ -2503,10 +2500,9 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n     fn write_small_section_header(w: &mut Buffer, id: &str, title: &str, extra_content: &str) {\n         write!(\n             w,\n-            \"\n-            <h2 id='{0}' class='small-section-header'>\\\n-              {1}<a href='#{0}' class='anchor'></a>\\\n-            </h2>{2}\",\n+            \"<h2 id='{0}' class='small-section-header'>\\\n+                {1}<a href='#{0}' class='anchor'></a>\\\n+             </h2>{2}\",\n             id, title, extra_content\n         )\n     }\n@@ -2835,7 +2831,7 @@ fn render_assoc_item(\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n-                   {generics}{decl}{spotlight}{where_clause}\",\n+             {generics}{decl}{spotlight}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n             meth.visibility.print_with_space(),\n             header.constness.print_with_space(),\n@@ -2910,9 +2906,9 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n                 write!(\n                     w,\n                     \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n-                           <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                           <code>{name}: {ty}</code>\\\n-                           </span>\",\n+                         <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                         <code>{name}: {ty}</code>\\\n+                     </span>\",\n                     item_type = ItemType::StructField,\n                     id = id,\n                     name = field.name.as_ref().unwrap(),\n@@ -2954,9 +2950,9 @@ fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union,\n             write!(\n                 w,\n                 \"<span id=\\\"{id}\\\" class=\\\"{shortty} small-section-header\\\">\\\n-                           <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                           <code>{name}: {ty}</code>\\\n-                       </span>\",\n+                     <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                     <code>{name}: {ty}</code>\\\n+                 </span>\",\n                 id = id,\n                 name = name,\n                 shortty = ItemType::StructField,\n@@ -3081,9 +3077,9 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum, ca\n                         write!(\n                             w,\n                             \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n-                                   <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                                   <code>{f}:&nbsp;{t}\\\n-                                   </code></span>\",\n+                                 <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                                 <code>{f}:&nbsp;{t}</code>\\\n+                             </span>\",\n                             id = id,\n                             f = field.name.as_ref().unwrap(),\n                             t = ty.print()\n@@ -3296,23 +3292,19 @@ fn render_assoc_items(\n             AssocItemRender::All => {\n                 write!(\n                     w,\n-                    \"\\\n-                    <h2 id='implementations' class='small-section-header'>\\\n-                      Implementations<a href='#implementations' class='anchor'></a>\\\n-                    </h2>\\\n-                \"\n+                    \"<h2 id='implementations' class='small-section-header'>\\\n+                         Implementations<a href='#implementations' class='anchor'></a>\\\n+                    </h2>\"\n                 );\n                 RenderMode::Normal\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n                 write!(\n                     w,\n-                    \"\\\n-                    <h2 id='deref-methods' class='small-section-header'>\\\n-                      Methods from {}&lt;Target = {}&gt;\\\n-                      <a href='#deref-methods' class='anchor'></a>\\\n-                    </h2>\\\n-                \",\n+                    \"<h2 id='deref-methods' class='small-section-header'>\\\n+                         Methods from {}&lt;Target = {}&gt;\\\n+                         <a href='#deref-methods' class='anchor'></a>\\\n+                     </h2>\",\n                     trait_.print(),\n                     type_.print()\n                 );\n@@ -3359,25 +3351,22 @@ fn render_assoc_items(\n         if !impls.is_empty() {\n             write!(\n                 w,\n-                \"\\\n-                <h2 id='trait-implementations' class='small-section-header'>\\\n-                  Trait Implementations<a href='#trait-implementations' class='anchor'></a>\\\n-                </h2>\\\n-                <div id='trait-implementations-list'>{}</div>\",\n+                \"<h2 id='trait-implementations' class='small-section-header'>\\\n+                     Trait Implementations<a href='#trait-implementations' class='anchor'></a>\\\n+                 </h2>\\\n+                 <div id='trait-implementations-list'>{}</div>\",\n                 impls\n             );\n         }\n \n         if !synthetic.is_empty() {\n             write!(\n                 w,\n-                \"\\\n-                <h2 id='synthetic-implementations' class='small-section-header'>\\\n-                  Auto Trait Implementations\\\n-                  <a href='#synthetic-implementations' class='anchor'></a>\\\n-                </h2>\\\n-                <div id='synthetic-implementations-list'>\\\n-            \"\n+                \"<h2 id='synthetic-implementations' class='small-section-header'>\\\n+                     Auto Trait Implementations\\\n+                     <a href='#synthetic-implementations' class='anchor'></a>\\\n+                 </h2>\\\n+                 <div id='synthetic-implementations-list'>\"\n             );\n             render_impls(cx, w, &synthetic, containing_item, cache);\n             write!(w, \"</div>\");\n@@ -3386,13 +3375,11 @@ fn render_assoc_items(\n         if !blanket_impl.is_empty() {\n             write!(\n                 w,\n-                \"\\\n-                <h2 id='blanket-implementations' class='small-section-header'>\\\n-                  Blanket Implementations\\\n-                  <a href='#blanket-implementations' class='anchor'></a>\\\n-                </h2>\\\n-                <div id='blanket-implementations-list'>\\\n-            \"\n+                \"<h2 id='blanket-implementations' class='small-section-header'>\\\n+                     Blanket Implementations\\\n+                     <a href='#blanket-implementations' class='anchor'></a>\\\n+                 </h2>\\\n+                 <div id='blanket-implementations-list'>\"\n             );\n             render_impls(cx, w, &blanket_impl, containing_item, cache);\n             write!(w, \"</div>\");\n@@ -3473,7 +3460,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> String {\n                     if out.is_empty() {\n                         out.push_str(&format!(\n                             \"<h3 class=\\\"notable\\\">Notable traits for {}</h3>\\\n-                                      <code class=\\\"content\\\">\",\n+                             <code class=\\\"content\\\">\",\n                             impl_.for_.print()\n                         ));\n                         trait_.push_str(&impl_.for_.print().to_string());\n@@ -3909,8 +3896,8 @@ fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer, cache: &Ca\n             write!(\n                 buffer,\n                 \"<div class='block version'>\\\n-                    <p>Version {}</p>\\\n-                    </div>\",\n+                     <p>Version {}</p>\\\n+                 </div>\",\n                 Escape(version)\n             );\n         }\n@@ -4185,7 +4172,7 @@ fn sidebar_struct(buf: &mut Buffer, it: &clean::Item, s: &clean::Struct) {\n         if let doctree::Plain = s.struct_type {\n             sidebar.push_str(&format!(\n                 \"<a class=\\\"sidebar-title\\\" href=\\\"#fields\\\">Fields</a>\\\n-                                       <div class=\\\"sidebar-links\\\">{}</div>\",\n+                 <div class=\\\"sidebar-links\\\">{}</div>\",\n                 fields\n             ));\n         }\n@@ -4312,8 +4299,8 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n             res.sort();\n             sidebar.push_str(&format!(\n                 \"<a class=\\\"sidebar-title\\\" href=\\\"#foreign-impls\\\">\\\n-                    Implementations on Foreign Types</a><div \\\n-                    class=\\\"sidebar-links\\\">{}</div>\",\n+                    Implementations on Foreign Types</a>\\\n+                 <div class=\\\"sidebar-links\\\">{}</div>\",\n                 res.into_iter()\n                     .map(|(name, id)| format!(\"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name)))\n                     .collect::<Vec<_>>()"}, {"sha": "02a7362bb3b2ea2657a557cd918ec43ad530ef8a", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -52,7 +52,7 @@ impl<'a> DocFolder for SourceCollector<'a> {\n                 Err(e) => {\n                     println!(\n                         \"warning: source code was requested to be rendered, \\\n-                              but processing `{}` had an error: {}\",\n+                         but processing `{}` had an error: {}\",\n                         item.source.filename, e\n                     );\n                     println!(\"         skipping rendering of source code\");"}, {"sha": "73a783d54060c4722f8668a398f1f8d9cd0d2026", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -153,7 +153,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"passes\",\n                 \"list of passes to also run, you might want to pass it multiple times; a value of \\\n-                        `list` will print available passes\",\n+                 `list` will print available passes\",\n                 \"PASSES\",\n             )\n         }),\n@@ -183,7 +183,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"html-in-header\",\n                 \"files to include inline in the <head> section of a rendered Markdown file \\\n-                        or generated documentation\",\n+                 or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -192,7 +192,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"html-before-content\",\n                 \"files to include inline between <body> and the content of a rendered \\\n-                        Markdown file or generated documentation\",\n+                 Markdown file or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -201,7 +201,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"html-after-content\",\n                 \"files to include inline between the content and </body> of a rendered \\\n-                        Markdown file or generated documentation\",\n+                 Markdown file or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -210,7 +210,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"markdown-before-content\",\n                 \"files to include inline between <body> and the content of a rendered \\\n-                        Markdown file or generated documentation\",\n+                 Markdown file or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -219,7 +219,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"markdown-after-content\",\n                 \"files to include inline between the content and </body> of a rendered \\\n-                        Markdown file or generated documentation\",\n+                 Markdown file or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -234,8 +234,8 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"e\",\n                 \"extend-css\",\n                 \"To add some CSS rules with a given file to generate doc with your \\\n-                        own theme. However, your theme might break if the rustdoc's generated HTML \\\n-                        changes, so be careful!\",\n+                 own theme. However, your theme might break if the rustdoc's generated HTML \\\n+                 changes, so be careful!\",\n                 \"PATH\",\n             )\n         }),\n@@ -248,7 +248,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"playground-url\",\n                 \"URL to send code snippets to, may be reset by --markdown-playground-url \\\n-                        or `#![doc(html_playground_url=...)]`\",\n+                 or `#![doc(html_playground_url=...)]`\",\n                 \"URL\",\n             )\n         }),\n@@ -281,7 +281,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"resource-suffix\",\n                 \"suffix to add to CSS and JavaScript files, e.g., \\\"light.css\\\" will become \\\n-                      \\\"light-suffix.css\\\"\",\n+                 \\\"light-suffix.css\\\"\",\n                 \"PATH\",\n             )\n         }),\n@@ -343,7 +343,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"static-root-path\",\n                 \"Path string to force loading static files from in output pages. \\\n-                        If not set, uses combinations of '../' to reach the documentation root.\",\n+                 If not set, uses combinations of '../' to reach the documentation root.\",\n                 \"PATH\",\n             )\n         }),"}, {"sha": "beb1f13ca6f75667a1e66ff4c0791331a354f4f2", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 32, "deletions": 43, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -1,7 +1,6 @@\n-use rustc_ast::token;\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n-use rustc_parse::lexer::StringReader as Lexer;\n+use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{FileName, InnerSpan};\n@@ -28,49 +27,34 @@ struct SyntaxChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n     fn check_rust_syntax(&self, item: &clean::Item, dox: &str, code_block: RustCodeBlock) {\n-        let buffered_messages = Lrc::new(Lock::new(vec![]));\n-\n-        let emitter = BufferEmitter { messages: Lrc::clone(&buffered_messages) };\n+        let buffer = Lrc::new(Lock::new(Buffer::default()));\n+        let emitter = BufferEmitter { buffer: Lrc::clone(&buffer) };\n \n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let handler = Handler::with_emitter(false, None, Box::new(emitter));\n+        let source = dox[code_block.code].to_owned();\n         let sess = ParseSess::with_span_handler(handler, sm);\n-        let source_file = sess.source_map().new_source_file(\n-            FileName::Custom(String::from(\"doctest\")),\n-            dox[code_block.code].to_owned(),\n-        );\n-\n-        let validation_status = rustc_driver::catch_fatal_errors(|| {\n-            let mut has_syntax_errors = false;\n-            let mut only_whitespace = true;\n-            // even if there is a syntax error, we need to run the lexer over the whole file\n-            let mut lexer = Lexer::new(&sess, source_file, None);\n-            loop {\n-                match lexer.next_token().kind {\n-                    token::Eof => break,\n-                    token::Whitespace => (),\n-                    token::Unknown(..) => has_syntax_errors = true,\n-                    _ => only_whitespace = false,\n-                }\n-            }\n \n-            if has_syntax_errors {\n-                Some(CodeBlockInvalid::SyntaxError)\n-            } else if only_whitespace {\n-                Some(CodeBlockInvalid::Empty)\n-            } else {\n-                None\n-            }\n+        let is_empty = rustc_driver::catch_fatal_errors(|| {\n+            parse_stream_from_source_str(\n+                FileName::Custom(String::from(\"doctest\")),\n+                source,\n+                &sess,\n+                None,\n+            )\n+            .is_empty()\n         })\n-        .unwrap_or(Some(CodeBlockInvalid::SyntaxError));\n+        .unwrap_or(false);\n+        let buffer = buffer.borrow();\n \n-        if let Some(code_block_invalid) = validation_status {\n+        if buffer.has_errors || is_empty {\n             let mut diag = if let Some(sp) =\n                 super::source_span_for_markdown_range(self.cx, &dox, &code_block.range, &item.attrs)\n             {\n-                let warning_message = match code_block_invalid {\n-                    CodeBlockInvalid::SyntaxError => \"could not parse code block as Rust code\",\n-                    CodeBlockInvalid::Empty => \"Rust code block is empty\",\n+                let warning_message = if buffer.has_errors {\n+                    \"could not parse code block as Rust code\"\n+                } else {\n+                    \"Rust code block is empty\"\n                 };\n \n                 let mut diag = self.cx.sess().struct_span_warn(sp, warning_message);\n@@ -102,7 +86,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             };\n \n             // FIXME(#67563): Provide more context for these errors by displaying the spans inline.\n-            for message in buffered_messages.borrow().iter() {\n+            for message in buffer.messages.iter() {\n                 diag.note(&message);\n             }\n \n@@ -125,21 +109,26 @@ impl<'a, 'tcx> DocFolder for SyntaxChecker<'a, 'tcx> {\n     }\n }\n \n+#[derive(Default)]\n+struct Buffer {\n+    messages: Vec<String>,\n+    has_errors: bool,\n+}\n+\n struct BufferEmitter {\n-    messages: Lrc<Lock<Vec<String>>>,\n+    buffer: Lrc<Lock<Buffer>>,\n }\n \n impl Emitter for BufferEmitter {\n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n-        self.messages.borrow_mut().push(format!(\"error from rustc: {}\", diag.message[0].0));\n+        let mut buffer = self.buffer.borrow_mut();\n+        buffer.messages.push(format!(\"error from rustc: {}\", diag.message[0].0));\n+        if diag.is_error() {\n+            buffer.has_errors = true;\n+        }\n     }\n \n     fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         None\n     }\n }\n-\n-enum CodeBlockInvalid {\n-    SyntaxError,\n-    Empty,\n-}"}, {"sha": "f497f341e112dd3cc616ce76e9fa2162ccc95593", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -1157,7 +1157,7 @@ fn report_diagnostic(\n                 // Print the line containing the `link_range` and manually mark it with '^'s.\n                 diag.note(&format!(\n                     \"the link appears in this line:\\n\\n{line}\\n\\\n-                         {indicator: <before$}{indicator:^<found$}\",\n+                     {indicator: <before$}{indicator:^<found$}\",\n                     line = line,\n                     indicator = \"\",\n                     before = link_range.start - last_new_line_offset,"}, {"sha": "75a659666673f528f19c6de0c8a9050e92a0382d", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -284,8 +284,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n                     if let Some(did) = typaram.def_id() {\n                         if did.is_local() && !self.retained.contains(&did) {\n                             debug!(\n-                                \"ImplStripper: stripped item in trait's generics; \\\n-                                    removing impl\"\n+                                \"ImplStripper: stripped item in trait's generics; removing impl\"\n                             );\n                             return None;\n                         }"}, {"sha": "9173d8e96058eee2fed67ca4b2e02f72ae7e241c", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -9,7 +9,7 @@ pub const STRIP_PRIVATE: Pass = Pass {\n     name: \"strip-private\",\n     run: strip_private,\n     description: \"strips all private items from a crate which cannot be seen externally, \\\n-        implies strip-priv-imports\",\n+                  implies strip-priv-imports\",\n };\n \n /// Strip private items from the point of view of a crate or externally from a"}, {"sha": "454f2da00df9e28ce2c6b40806730281fd88e071", "filename": "src/test/ui/consts/const-ordering.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d824b2351449714dc685d90e298c9d630ad6c437/src%2Ftest%2Fui%2Fconsts%2Fconst-ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d824b2351449714dc685d90e298c9d630ad6c437/src%2Ftest%2Fui%2Fconsts%2Fconst-ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ordering.rs?ref=d824b2351449714dc685d90e298c9d630ad6c437", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-\n-use std::cmp::Ordering;\n-\n-// the following methods of core::cmp::Ordering are const:\n-//  - reverse\n-//  - then\n-\n-fn main() {\n-    const REVERSE : Ordering = Ordering::Greater.reverse();\n-    assert_eq!(REVERSE, Ordering::Less);\n-\n-    const THEN : Ordering = Ordering::Equal.then(REVERSE);\n-    assert_eq!(THEN, Ordering::Less);\n-}"}, {"sha": "adebe20f5a25591df1f21b58a7dd7acec590e820", "filename": "src/test/ui/consts/cow-is-borrowed.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/445f34bb144c5b163163d8243e9845c644d3662d/src%2Ftest%2Fui%2Fconsts%2Fcow-is-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445f34bb144c5b163163d8243e9845c644d3662d/src%2Ftest%2Fui%2Fconsts%2Fcow-is-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcow-is-borrowed.rs?ref=445f34bb144c5b163163d8243e9845c644d3662d", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+#![feature(cow_is_borrowed)]\n+\n+use std::borrow::Cow;\n+\n+fn main() {\n+    const COW: Cow<str> = Cow::Borrowed(\"moo\");\n+\n+    const IS_BORROWED: bool = COW.is_borrowed();\n+    assert!(IS_BORROWED);\n+\n+    const IS_OWNED: bool = COW.is_owned();\n+    assert!(!IS_OWNED);\n+}"}]}