{"sha": "dad5edd4f351621fd7b609d70b611858d8d13cd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDVlZGQ0ZjM1MTYyMWZkN2I2MDlkNzBiNjExODU4ZDhkMTNjZDE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T07:48:07Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T07:48:07Z"}, "message": "Unnest integer reprs.", "tree": {"sha": "610bd36e68881dabe1b7b987b152845d65f79d35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/610bd36e68881dabe1b7b987b152845d65f79d35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad5edd4f351621fd7b609d70b611858d8d13cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad5edd4f351621fd7b609d70b611858d8d13cd1", "html_url": "https://github.com/rust-lang/rust/commit/dad5edd4f351621fd7b609d70b611858d8d13cd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad5edd4f351621fd7b609d70b611858d8d13cd1/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "html_url": "https://github.com/rust-lang/rust/commit/6b4d2b11a625e04245b9ff9a2ff4642863a94c55"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "bf87283dee437e2a2fc61c4ffe0442464f7aa6a0", "filename": "src/interpreter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dad5edd4f351621fd7b609d70b611858d8d13cd1/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad5edd4f351621fd7b609d70b611858d8d13cd1/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=dad5edd4f351621fd7b609d70b611858d8d13cd1", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::repr as mir;\n use std::error::Error;\n use std::fmt;\n \n-use memory::{FieldRepr, IntRepr, Memory, Pointer, Repr};\n+use memory::{FieldRepr, Memory, Pointer, Repr};\n use primval;\n \n const TRACE_EXECUTION: bool = true;\n@@ -416,10 +416,10 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             ty::TyBool => Repr::Bool,\n \n             ty::TyInt(IntTy::Is) => unimplemented!(),\n-            ty::TyInt(IntTy::I8) => Repr::Int(IntRepr::I8),\n-            ty::TyInt(IntTy::I16) => Repr::Int(IntRepr::I16),\n-            ty::TyInt(IntTy::I32) => Repr::Int(IntRepr::I32),\n-            ty::TyInt(IntTy::I64) => Repr::Int(IntRepr::I64),\n+            ty::TyInt(IntTy::I8) => Repr::I8,\n+            ty::TyInt(IntTy::I16) => Repr::I16,\n+            ty::TyInt(IntTy::I32) => Repr::I32,\n+            ty::TyInt(IntTy::I64) => Repr::I64,\n \n             ty::TyTuple(ref fields) => self.make_product_repr(fields.iter().cloned()),\n "}, {"sha": "61d00d37ffc36690178910035ed0581ed2fa562e", "filename": "src/memory.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dad5edd4f351621fd7b609d70b611858d8d13cd1/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad5edd4f351621fd7b609d70b611858d8d13cd1/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=dad5edd4f351621fd7b609d70b611858d8d13cd1", "patch": "@@ -26,9 +26,6 @@ pub struct Pointer {\n     pub offset: usize,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub enum IntRepr { I8, I16, I32, I64 }\n-\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct FieldRepr {\n     pub offset: usize,\n@@ -38,7 +35,10 @@ pub struct FieldRepr {\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum Repr {\n     Bool,\n-    Int(IntRepr),\n+    I8,\n+    I16,\n+    I32,\n+    I64,\n \n     /// The representation for product types including tuples, structs, and the contents of enum\n     /// variants.\n@@ -123,10 +123,10 @@ impl Memory {\n     pub fn read_primval(&self, ptr: Pointer, repr: &Repr) -> EvalResult<PrimVal> {\n         match *repr {\n             Repr::Bool => self.read_bool(ptr).map(PrimVal::Bool),\n-            Repr::Int(IntRepr::I8) => self.read_i8(ptr).map(PrimVal::I8),\n-            Repr::Int(IntRepr::I16) => self.read_i16(ptr).map(PrimVal::I16),\n-            Repr::Int(IntRepr::I32) => self.read_i32(ptr).map(PrimVal::I32),\n-            Repr::Int(IntRepr::I64) => self.read_i64(ptr).map(PrimVal::I64),\n+            Repr::I8 => self.read_i8(ptr).map(PrimVal::I8),\n+            Repr::I16 => self.read_i16(ptr).map(PrimVal::I16),\n+            Repr::I32 => self.read_i32(ptr).map(PrimVal::I32),\n+            Repr::I64 => self.read_i64(ptr).map(PrimVal::I64),\n             _ => panic!(\"primitive read of non-primitive: {:?}\", repr),\n         }\n     }\n@@ -216,10 +216,10 @@ impl Repr {\n     pub fn size(&self) -> usize {\n         match *self {\n             Repr::Bool => 1,\n-            Repr::Int(IntRepr::I8) => 1,\n-            Repr::Int(IntRepr::I16) => 2,\n-            Repr::Int(IntRepr::I32) => 4,\n-            Repr::Int(IntRepr::I64) => 8,\n+            Repr::I8 => 1,\n+            Repr::I16 => 2,\n+            Repr::I32 => 4,\n+            Repr::I64 => 8,\n             Repr::Product { size, .. } => size,\n             Repr::Sum { discr_size, max_variant_size, .. } => discr_size + max_variant_size,\n         }"}]}