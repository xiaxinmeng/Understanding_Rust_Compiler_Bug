{"sha": "94c4dd990296df030f0decffc9a4751105f3e603", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzRkZDk5MDI5NmRmMDMwZjBkZWNmZmM5YTQ3NTExMDVmM2U2MDM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-11T01:35:22Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-25T22:26:27Z"}, "message": "Emit warning for ignored #[inline] on trait method prototypes", "tree": {"sha": "3f2666a49bdd72ac83f04763c9886d5ea520780a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f2666a49bdd72ac83f04763c9886d5ea520780a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c4dd990296df030f0decffc9a4751105f3e603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c4dd990296df030f0decffc9a4751105f3e603", "html_url": "https://github.com/rust-lang/rust/commit/94c4dd990296df030f0decffc9a4751105f3e603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c4dd990296df030f0decffc9a4751105f3e603/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3c8438e04461e05d71a784a2f582dadf14e5d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3c8438e04461e05d71a784a2f582dadf14e5d6", "html_url": "https://github.com/rust-lang/rust/commit/7f3c8438e04461e05d71a784a2f582dadf14e5d6"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "c0fe712adc7581ea7010fc460251e908c31a93c3", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/94c4dd990296df030f0decffc9a4751105f3e603/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c4dd990296df030f0decffc9a4751105f3e603/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=94c4dd990296df030f0decffc9a4751105f3e603", "patch": "@@ -8,6 +8,7 @@ use crate::hir::{self, HirId, HirVec, Attribute, Item, ItemKind, TraitItem, Trai\n use crate::hir::DUMMY_HIR_ID;\n use crate::hir::def_id::DefId;\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n \n@@ -36,6 +37,9 @@ pub(crate) enum Target {\n     Impl,\n     Expression,\n     Statement,\n+    AssocConst,\n+    Method { body: bool },\n+    AssocTy,\n }\n \n impl Display for Target {\n@@ -60,6 +64,9 @@ impl Display for Target {\n             Target::Impl => \"item\",\n             Target::Expression => \"expression\",\n             Target::Statement => \"statement\",\n+            Target::AssocConst => \"associated const\",\n+            Target::Method { .. } => \"method\",\n+            Target::AssocTy => \"associated type\",\n         })\n     }\n }\n@@ -85,6 +92,19 @@ impl Target {\n             ItemKind::Impl(..) => Target::Impl,\n         }\n     }\n+\n+    fn from_trait_item(trait_item: &TraitItem) -> Target {\n+        match trait_item.kind {\n+            TraitItemKind::Const(..) => Target::AssocConst,\n+            TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+                Target::Method { body: false }\n+            }\n+            TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+                Target::Method { body: true }\n+            }\n+            TraitItemKind::Type(..) => Target::AssocTy,\n+        }\n+    }\n         }\n     }\n }\n@@ -136,6 +156,15 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::Fn | Target::Closure | Target::Method { body: true } => true,\n+            Target::Method { body: false } | Target::ForeignFn => {\n+                self.tcx.struct_span_lint_hir(\n+                    UNUSED_ATTRIBUTES,\n+                    hir_id,\n+                    attr.span,\n+                    \"`#[inline]` is ignored on function prototypes\",\n+                ).emit();\n+                true\n+            }\n             _ => {\n                 struct_span_err!(self.tcx.sess,\n                                  attr.span,\n@@ -392,6 +421,11 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_item(self, item)\n     }\n \n+    fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem) {\n+        let target = Target::from_trait_item(trait_item);\n+        self.check_attributes(trait_item.hir_id, &trait_item.attrs, &trait_item.span, target, None);\n+        intravisit::walk_trait_item(self, trait_item)\n+    }\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt) {\n         self.check_stmt_attributes(stmt);"}, {"sha": "5c871bb6b698899bf904e31a7a15aa130bea2b3a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c4dd990296df030f0decffc9a4751105f3e603/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c4dd990296df030f0decffc9a4751105f3e603/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=94c4dd990296df030f0decffc9a4751105f3e603", "patch": "@@ -68,6 +68,12 @@ declare_lint! {\n     \"detect unused, unexported items\"\n }\n \n+declare_lint! {\n+    pub UNUSED_ATTRIBUTES,\n+    Warn,\n+    \"detects attributes that were not used by the compiler\"\n+}\n+\n declare_lint! {\n     pub UNREACHABLE_CODE,\n     Warn,"}, {"sha": "9a826de4b6eafb86ff8642c6ffbde9cf351da1d5", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94c4dd990296df030f0decffc9a4751105f3e603/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c4dd990296df030f0decffc9a4751105f3e603/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=94c4dd990296df030f0decffc9a4751105f3e603", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::DefId;\n use rustc::lint;\n+use rustc::lint::builtin::UNUSED_ATTRIBUTES;\n use rustc::ty::{self, Ty};\n use rustc::ty::adjustment;\n use rustc_data_structures::fx::FxHashMap;\n@@ -277,12 +278,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathStatements {\n     }\n }\n \n-declare_lint! {\n-    pub UNUSED_ATTRIBUTES,\n-    Warn,\n-    \"detects attributes that were not used by the compiler\"\n-}\n-\n #[derive(Copy, Clone)]\n pub struct UnusedAttributes {\n     builtin_attributes: &'static FxHashMap<Symbol, &'static BuiltinAttribute>,"}, {"sha": "33b79dba73e0eb087d0ba3ee125b12d43c701344", "filename": "src/test/ui/issues/issue-52057.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c4dd990296df030f0decffc9a4751105f3e603/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c4dd990296df030f0decffc9a4751105f3e603/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr?ref=94c4dd990296df030f0decffc9a4751105f3e603", "patch": "@@ -0,0 +1,8 @@\n+warning: `#[inline]` is ignored on function prototypes\n+  --> $DIR/issue-52057.rs:10:5\n+   |\n+LL |     #[inline(always)]\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unused_attributes)]` on by default\n+"}, {"sha": "f7fc28cbc7d1c1b459676cc190c8f54a58c2571e", "filename": "src/test/ui/lint/warn-unused-inline-on-fn-prototypes.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c4dd990296df030f0decffc9a4751105f3e603/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c4dd990296df030f0decffc9a4751105f3e603/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs?ref=94c4dd990296df030f0decffc9a4751105f3e603", "patch": "@@ -0,0 +1,8 @@\n+#![deny(unused_attributes)]\n+\n+trait Trait {\n+    #[inline] //~ ERROR `#[inline]` is ignored on function prototypes\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "a13de8e09c51af428973fc8b7ea7cc06de185ca4", "filename": "src/test/ui/lint/warn-unused-inline-on-fn-prototypes.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94c4dd990296df030f0decffc9a4751105f3e603/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c4dd990296df030f0decffc9a4751105f3e603/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr?ref=94c4dd990296df030f0decffc9a4751105f3e603", "patch": "@@ -0,0 +1,14 @@\n+error: `#[inline]` is ignored on function prototypes\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:9:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:1:9\n+   |\n+LL | #![deny(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}