{"sha": "7b25e886028195a4f90c0baa5cc9101ebeceb5a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMjVlODg2MDI4MTk1YTRmOTBjMGJhYTVjYzkxMDFlYmVjZWI1YTM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-24T10:56:27Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-09-16T12:08:32Z"}, "message": "forbid moves out of slices\n\nThe wording of RFC #495 enables moves out of slices. Unfortuantely, non-zeroing\nmoves out of slices introduce a very annoying complication: as slices can\nvary in their length, indexes from the start and end may or may not overlap\ndepending on the slice's exact length, which prevents assigning a particular\ndrop flag for each individual element.\n\nFor example, in the code\n\n```Rust\nfn foo<T>(a: Box<[Box<[T]>]>, c: bool) -> T {\n    match (a, c) {\n        (box [box [t, ..], ..], true) => t,\n        (box [.., box [.., t]], false) => t,\n        _ => panic!()\n    }\n}\n```\n\nIf the condition is false, we have to drop the first element\nof `a`, unless `a` has size 1 in which case we drop all the elements\nof it but the last.\n\nIf someone comes with a nice way of handling it, we can always re-allow\nmoves out of slices.\n\nThis is a [breaking-change], but it is behind the `slice_patterns` feature\ngate and was not allowed until recently.", "tree": {"sha": "7899d0115549790a45f227311015fe4733c9ca86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7899d0115549790a45f227311015fe4733c9ca86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b25e886028195a4f90c0baa5cc9101ebeceb5a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b25e886028195a4f90c0baa5cc9101ebeceb5a3", "html_url": "https://github.com/rust-lang/rust/commit/7b25e886028195a4f90c0baa5cc9101ebeceb5a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b25e886028195a4f90c0baa5cc9101ebeceb5a3/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb19cd65756cd285c81410e627752a75a41e3f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb19cd65756cd285c81410e627752a75a41e3f0e", "html_url": "https://github.com/rust-lang/rust/commit/eb19cd65756cd285c81410e627752a75a41e3f0e"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "9bdc6887f6d03e74680a3a74fbb9a31d480f1926", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b25e886028195a4f90c0baa5cc9101ebeceb5a3/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b25e886028195a4f90c0baa5cc9101ebeceb5a3/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=7b25e886028195a4f90c0baa5cc9101ebeceb5a3", "patch": "@@ -185,6 +185,7 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                         check_and_get_illegal_move_origin(bccx, b)\n                     }\n                 }\n+                ty::TySlice(..) => Some(cmt.clone()),\n                 _ => {\n                     check_and_get_illegal_move_origin(bccx, b)\n                 }"}, {"sha": "9fbf1492f5d2884b869390e0192a68b5407c5956", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b25e886028195a4f90c0baa5cc9101ebeceb5a3/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b25e886028195a4f90c0baa5cc9101ebeceb5a3/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=7b25e886028195a4f90c0baa5cc9101ebeceb5a3", "patch": "@@ -16,7 +16,6 @@ use rustc::ty;\n use syntax::ast;\n use syntax_pos;\n use errors::DiagnosticBuilder;\n-use rustc::hir;\n \n pub struct MoveErrorCollector<'tcx> {\n     errors: Vec<MoveError<'tcx>>\n@@ -131,17 +130,20 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             err\n         }\n \n-        Categorization::Interior(ref b, mc::InteriorElement(Kind::Index, _)) => {\n-            let expr = bccx.tcx.map.expect_expr(move_from.id);\n-            if let hir::ExprIndex(..) = expr.node {\n-                let mut err = struct_span_err!(bccx, move_from.span, E0508,\n-                                               \"cannot move out of type `{}`, \\\n-                                               a non-copy fixed-size array\",\n-                                               b.ty);\n-                err.span_label(move_from.span, &format!(\"cannot move out of here\"));\n-                err\n-            } else {\n-                span_bug!(move_from.span, \"this path should not cause illegal move\");\n+        Categorization::Interior(ref b, mc::InteriorElement(ik, _)) => {\n+            match (&b.ty.sty, ik) {\n+                (&ty::TySlice(..), _) |\n+                (_, Kind::Index) => {\n+                    let mut err = struct_span_err!(bccx, move_from.span, E0508,\n+                                                   \"cannot move out of type `{}`, \\\n+                                                    a non-copy array\",\n+                                                   b.ty);\n+                    err.span_label(move_from.span, &format!(\"cannot move out of here\"));\n+                    err\n+                }\n+                (_, Kind::Pattern) => {\n+                    span_bug!(move_from.span, \"this path should not cause illegal move\");\n+                }\n             }\n         }\n "}, {"sha": "f3efc68701e9455fd7403c22d3a2cf180dde9fe6", "filename": "src/test/compile-fail/move-out-of-slice-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7b25e886028195a4f90c0baa5cc9101ebeceb5a3/src%2Ftest%2Fcompile-fail%2Fmove-out-of-slice-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b25e886028195a4f90c0baa5cc9101ebeceb5a3/src%2Ftest%2Fcompile-fail%2Fmove-out-of-slice-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-slice-1.rs?ref=7b25e886028195a4f90c0baa5cc9101ebeceb5a3", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(slice_patterns, box_patterns)]\n+\n+struct A;\n+\n+fn main() {\n+    let a: Box<[A]> = Box::new([A]);\n+    match a {\n+        box [a] => {}, //~ ERROR cannot move out of type `[A]`\n+        _ => {}\n+    }\n+}"}]}