{"sha": "4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NTVlMmYzYjYzNWFkNzM5MWJhODhiMTg2NzJiMDVjYmFlNWJhNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-20T09:58:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-20T09:58:10Z"}, "message": "Auto merge of #56741 - RalfJung:retag-to-raw, r=oli-obk\n\ntreat ref-to-raw cast like a reborrow: do a special kind of retag\n\nr? @oli-obk\n\nCc @nikomatsakis", "tree": {"sha": "84bf0164c0a79f6b3f8e9f87fab480181e9606e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84bf0164c0a79f6b3f8e9f87fab480181e9606e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "html_url": "https://github.com/rust-lang/rust/commit/4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "817dda7df0164669487568fbcd33acb4ef512bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/817dda7df0164669487568fbcd33acb4ef512bc2", "html_url": "https://github.com/rust-lang/rust/commit/817dda7df0164669487568fbcd33acb4ef512bc2"}, {"sha": "c1160a8f8662c743170c895332f5c82ca26e4d4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1160a8f8662c743170c895332f5c82ca26e4d4a", "html_url": "https://github.com/rust-lang/rust/commit/c1160a8f8662c743170c895332f5c82ca26e4d4a"}], "stats": {"total": 204, "additions": 76, "deletions": 128}, "files": [{"sha": "d82020f59a10ecbd4be52055b5fef06fb306d77d", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -200,13 +200,13 @@ impl_stable_hash_for!(impl<'gcx> for enum mir::StatementKind<'gcx> [ mir::Statem\n     SetDiscriminant { place, variant_index },\n     StorageLive(place),\n     StorageDead(place),\n-    EscapeToRaw(place),\n-    Retag { fn_entry, two_phase, place },\n+    Retag(retag_kind, place),\n     AscribeUserType(place, variance, c_ty),\n     Nop,\n     InlineAsm { asm, outputs, inputs },\n });\n \n+impl_stable_hash_for!(enum mir::RetagKind { FnEntry, TwoPhase, Raw, Default });\n impl_stable_hash_for!(enum mir::FakeReadCause { ForMatchGuard, ForMatchedPlace, ForLet });\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::Place<'gcx> {"}, {"sha": "dc14450e8d22d88f4e979745412558529a9a18d7", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -1788,23 +1788,7 @@ pub enum StatementKind<'tcx> {\n     /// by miri and only generated when \"-Z mir-emit-retag\" is passed.\n     /// See <https://internals.rust-lang.org/t/stacked-borrows-an-aliasing-model-for-rust/8153/>\n     /// for more details.\n-    Retag {\n-        /// `fn_entry` indicates whether this is the initial retag that happens in the\n-        /// function prolog.\n-        fn_entry: bool,\n-        /// `two_phase` indicates whether this is just the reservation action of\n-        /// a two-phase borrow.\n-        two_phase: bool,\n-        /// The place to retag\n-        place: Place<'tcx>,\n-    },\n-\n-    /// Escape the given reference to a raw pointer, so that it can be accessed\n-    /// without precise provenance tracking. These statements are currently only interpreted\n-    /// by miri and only generated when \"-Z mir-emit-retag\" is passed.\n-    /// See <https://internals.rust-lang.org/t/stacked-borrows-an-aliasing-model-for-rust/8153/>\n-    /// for more details.\n-    EscapeToRaw(Operand<'tcx>),\n+    Retag(RetagKind, Place<'tcx>),\n \n     /// Encodes a user's type ascription. These need to be preserved\n     /// intact so that NLL can respect them. For example:\n@@ -1824,6 +1808,19 @@ pub enum StatementKind<'tcx> {\n     Nop,\n }\n \n+/// `RetagKind` describes what kind of retag is to be performed.\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq)]\n+pub enum RetagKind {\n+    /// The initial retag when entering a function\n+    FnEntry,\n+    /// Retag preparing for a two-phase borrow\n+    TwoPhase,\n+    /// Retagging raw pointers\n+    Raw,\n+    /// A \"normal\" retag\n+    Default,\n+}\n+\n /// The `FakeReadCause` describes the type of pattern why a `FakeRead` statement exists.\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum FakeReadCause {\n@@ -1859,13 +1856,16 @@ impl<'tcx> Debug for Statement<'tcx> {\n         match self.kind {\n             Assign(ref place, ref rv) => write!(fmt, \"{:?} = {:?}\", place, rv),\n             FakeRead(ref cause, ref place) => write!(fmt, \"FakeRead({:?}, {:?})\", cause, place),\n-            Retag { fn_entry, two_phase, ref place } =>\n-                write!(fmt, \"Retag({}{}{:?})\",\n-                    if fn_entry { \"[fn entry] \" } else { \"\" },\n-                    if two_phase { \"[2phase] \" } else { \"\" },\n+            Retag(ref kind, ref place) =>\n+                write!(fmt, \"Retag({}{:?})\",\n+                    match kind {\n+                        RetagKind::FnEntry => \"[fn entry] \",\n+                        RetagKind::TwoPhase => \"[2phase] \",\n+                        RetagKind::Raw => \"[raw] \",\n+                        RetagKind::Default => \"\",\n+                    },\n                     place,\n                 ),\n-            EscapeToRaw(ref place) => write!(fmt, \"EscapeToRaw({:?})\", place),\n             StorageLive(ref place) => write!(fmt, \"StorageLive({:?})\", place),\n             StorageDead(ref place) => write!(fmt, \"StorageDead({:?})\", place),\n             SetDiscriminant {\n@@ -2979,6 +2979,7 @@ CloneTypeFoldableAndLiftImpls! {\n     SourceInfo,\n     UpvarDecl,\n     FakeReadCause,\n+    RetagKind,\n     SourceScope,\n     SourceScopeData,\n     SourceScopeLocalData,\n@@ -3046,8 +3047,7 @@ EnumTypeFoldableImpl! {\n         (StatementKind::StorageLive)(a),\n         (StatementKind::StorageDead)(a),\n         (StatementKind::InlineAsm) { asm, outputs, inputs },\n-        (StatementKind::Retag) { fn_entry, two_phase, place },\n-        (StatementKind::EscapeToRaw)(place),\n+        (StatementKind::Retag)(kind, place),\n         (StatementKind::AscribeUserType)(a, v, b),\n         (StatementKind::Nop),\n     }"}, {"sha": "278a4dc1d873aceafd5a672c4721a57a946f4d1c", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -153,11 +153,10 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_retag(&mut self,\n-                           fn_entry: & $($mutability)* bool,\n-                           two_phase: & $($mutability)* bool,\n+                           kind: & $($mutability)* RetagKind,\n                            place: & $($mutability)* Place<'tcx>,\n                            location: Location) {\n-                self.super_retag(fn_entry, two_phase, place, location);\n+                self.super_retag(kind, place, location);\n             }\n \n             fn visit_place(&mut self,\n@@ -385,9 +384,6 @@ macro_rules! make_mir_visitor {\n                             location\n                         );\n                     }\n-                    StatementKind::EscapeToRaw(ref $($mutability)* op) => {\n-                        self.visit_operand(op, location);\n-                    }\n                     StatementKind::StorageLive(ref $($mutability)* local) => {\n                         self.visit_local(\n                             local,\n@@ -417,10 +413,9 @@ macro_rules! make_mir_visitor {\n                             self.visit_operand(input, location);\n                         }\n                     }\n-                    StatementKind::Retag { ref $($mutability)* fn_entry,\n-                                           ref $($mutability)* two_phase,\n-                                           ref $($mutability)* place } => {\n-                        self.visit_retag(fn_entry, two_phase, place, location);\n+                    StatementKind::Retag ( ref $($mutability)* kind,\n+                                           ref $($mutability)* place ) => {\n+                        self.visit_retag(kind, place, location);\n                     }\n                     StatementKind::AscribeUserType(\n                         ref $($mutability)* place,\n@@ -725,8 +720,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_retag(&mut self,\n-                           _fn_entry: & $($mutability)* bool,\n-                           _two_phase: & $($mutability)* bool,\n+                           _kind: & $($mutability)* RetagKind,\n                            place: & $($mutability)* Place<'tcx>,\n                            location: Location) {\n                 self.visit_place("}, {"sha": "80539b78c7073c9e75364e7b43a6552fd399ab33", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -106,7 +106,6 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n             mir::StatementKind::FakeRead(..) |\n             mir::StatementKind::Retag { .. } |\n-            mir::StatementKind::EscapeToRaw { .. } |\n             mir::StatementKind::AscribeUserType(..) |\n             mir::StatementKind::Nop => bx,\n         }"}, {"sha": "99cc4acb5197b32fa608709dc0ff958509f37b79", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -590,7 +590,6 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n             StatementKind::Nop\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Retag { .. }\n-            | StatementKind::EscapeToRaw { .. }\n             | StatementKind::StorageLive(..) => {\n                 // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant\n                 // to borrow check."}, {"sha": "d2810de284a894b6b122356903bf87e7a9725a57", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -135,7 +135,6 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n             StatementKind::Nop |\n             StatementKind::AscribeUserType(..) |\n             StatementKind::Retag { .. } |\n-            StatementKind::EscapeToRaw { .. } |\n             StatementKind::StorageLive(..) => {\n                 // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant\n                 // to borrow check."}, {"sha": "0a363e931da3b2c8701ded003ec85b2ef979bb60", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -1316,7 +1316,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             | StatementKind::StorageDead(..)\n             | StatementKind::InlineAsm { .. }\n             | StatementKind::Retag { .. }\n-            | StatementKind::EscapeToRaw { .. }\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "078e2fd49804e92e0dcd05ca42807b61a69e6975", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -324,7 +324,6 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::SetDiscriminant { .. } |\n             mir::StatementKind::StorageLive(..) |\n             mir::StatementKind::Retag { .. } |\n-            mir::StatementKind::EscapeToRaw { .. } |\n             mir::StatementKind::AscribeUserType(..) |\n             mir::StatementKind::Nop => {}\n "}, {"sha": "d201a355a2ae94941a019c9ca3e8bde6f5bd8c58", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -302,7 +302,6 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                           \"SetDiscriminant should not exist during borrowck\");\n             }\n             StatementKind::Retag { .. } |\n-            StatementKind::EscapeToRaw { .. } |\n             StatementKind::AscribeUserType(..) |\n             StatementKind::Nop => {}\n         }"}, {"sha": "118539fc58ebf2bb2299390554e8adf41bd52f94", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -44,34 +44,28 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             }\n \n             Misc => {\n-                let src_layout = src.layout;\n                 let src = self.read_immediate(src)?;\n \n-                // There are no casts to references\n-                assert!(!dest.layout.ty.is_region_ptr());\n-                // Hence we make all casts erase the tag\n-                let src = src.erase_tag().with_default_tag();\n-\n-                if self.type_is_fat_ptr(src_layout.ty) {\n-                    match (src, self.type_is_fat_ptr(dest.layout.ty)) {\n+                if self.type_is_fat_ptr(src.layout.ty) {\n+                    match (*src, self.type_is_fat_ptr(dest.layout.ty)) {\n                         // pointers to extern types\n                         (Immediate::Scalar(_),_) |\n                         // slices and trait objects to other slices/trait objects\n                         (Immediate::ScalarPair(..), true) => {\n                             // No change to immediate\n-                            self.write_immediate(src, dest)?;\n+                            self.write_immediate(*src, dest)?;\n                         }\n                         // slices and trait objects to thin pointers (dropping the metadata)\n                         (Immediate::ScalarPair(data, _), false) => {\n                             self.write_scalar(data, dest)?;\n                         }\n                     }\n                 } else {\n-                    match src_layout.variants {\n+                    match src.layout.variants {\n                         layout::Variants::Single { index } => {\n-                            if let Some(def) = src_layout.ty.ty_adt_def() {\n+                            if let Some(def) = src.layout.ty.ty_adt_def() {\n                                 // Cast from a univariant enum\n-                                assert!(src_layout.is_zst());\n+                                assert!(src.layout.is_zst());\n                                 let discr_val = def\n                                     .discriminant_for_variant(*self.tcx, index)\n                                     .val;\n@@ -84,7 +78,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         layout::Variants::NicheFilling { .. } => {},\n                     }\n \n-                    let dest_val = self.cast_scalar(src.to_scalar()?, src_layout, dest.layout)?;\n+                    let dest_val = self.cast_scalar(src.to_scalar()?, src.layout, dest.layout)?;\n                     self.write_scalar(dest_val, dest)?;\n                 }\n             }"}, {"sha": "e6f3b664c007b5684bb2f761c53305abba04a1c9", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -203,22 +203,12 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     #[inline]\n     fn retag(\n         _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n-        _fn_entry: bool,\n-        _two_phase: bool,\n+        _kind: mir::RetagKind,\n         _place: PlaceTy<'tcx, Self::PointerTag>,\n     ) -> EvalResult<'tcx> {\n         Ok(())\n     }\n \n-    /// Execute an escape-to-raw operation\n-    #[inline]\n-    fn escape_to_raw(\n-        _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n-        _ptr: OpTy<'tcx, Self::PointerTag>,\n-    ) -> EvalResult<'tcx> {\n-        Ok(())\n-    }\n-\n     /// Called immediately before a new stack frame got pushed\n     fn stack_push(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,"}, {"sha": "596dba576064623199fc7ffbc73ba7e1c2b53867", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -119,13 +119,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             FakeRead(..) => {}\n \n             // Stacked Borrows.\n-            Retag { fn_entry, two_phase, ref place } => {\n+            Retag(kind, ref place) => {\n                 let dest = self.eval_place(place)?;\n-                M::retag(self, fn_entry, two_phase, dest)?;\n-            }\n-            EscapeToRaw(ref op) => {\n-                let op = self.eval_operand(op, None)?;\n-                M::escape_to_raw(self, op)?;\n+                M::retag(self, kind, dest)?;\n             }\n \n             // Statements we do not track."}, {"sha": "3802b0191272807c97fef68c20f721c8e4d1742f", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -227,20 +227,11 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // The first argument (index 0), but add 1 for the return value.\n         let dropee_ptr = Place::Local(Local::new(1+0));\n         if tcx.sess.opts.debugging_opts.mir_emit_retag {\n-            // Function arguments should be retagged\n+            // Function arguments should be retagged, and we make this one raw.\n             mir.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n                 source_info,\n-                kind: StatementKind::Retag {\n-                    fn_entry: true,\n-                    two_phase: false,\n-                    place: dropee_ptr.clone(),\n-                },\n+                kind: StatementKind::Retag(RetagKind::Raw, dropee_ptr.clone()),\n             });\n-            // We use raw ptr operations, better prepare the alias tracking for that\n-            mir.basic_blocks_mut()[START_BLOCK].statements.insert(1, Statement {\n-                source_info,\n-                kind: StatementKind::EscapeToRaw(Operand::Copy(dropee_ptr.clone())),\n-            })\n         }\n         let patch = {\n             let param_env = tcx.param_env(def_id).with_reveal_all();"}, {"sha": "69c0a68ae70516a68eddcf991b12b54abde4bc45", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -118,7 +118,7 @@ impl MirPass for AddRetag {\n             basic_blocks[START_BLOCK].statements.splice(0..0,\n                 places.into_iter().map(|place| Statement {\n                     source_info,\n-                    kind: StatementKind::Retag { fn_entry: true, two_phase: false, place },\n+                    kind: StatementKind::Retag(RetagKind::FnEntry, place),\n                 })\n             );\n         }\n@@ -154,7 +154,7 @@ impl MirPass for AddRetag {\n         for (source_info, dest_place, dest_block) in returns {\n             basic_blocks[dest_block].statements.insert(0, Statement {\n                 source_info,\n-                kind: StatementKind::Retag { fn_entry: false, two_phase: false, place: dest_place },\n+                kind: StatementKind::Retag(RetagKind::Default, dest_place),\n             });\n         }\n \n@@ -164,9 +164,9 @@ impl MirPass for AddRetag {\n             // We want to insert statements as we iterate.  To this end, we\n             // iterate backwards using indices.\n             for i in (0..block_data.statements.len()).rev() {\n-                match block_data.statements[i].kind {\n-                    // If we are casting *from* a reference, we may have to escape-to-raw.\n-                    StatementKind::Assign(_, box Rvalue::Cast(\n+                let (retag_kind, place) = match block_data.statements[i].kind {\n+                    // If we are casting *from* a reference, we may have to retag-as-raw.\n+                    StatementKind::Assign(ref place, box Rvalue::Cast(\n                         CastKind::Misc,\n                         ref src,\n                         dest_ty,\n@@ -175,42 +175,35 @@ impl MirPass for AddRetag {\n                         if src_ty.is_region_ptr() {\n                             // The only `Misc` casts on references are those creating raw pointers.\n                             assert!(dest_ty.is_unsafe_ptr());\n-                            // Insert escape-to-raw before the cast.  We are not concerned\n-                            // with stability here: Our EscapeToRaw will not change the value\n-                            // that the cast will then use.\n-                            // `src` might be a \"move\", but we rely on this not actually moving\n-                            // but just doing a memcpy.  It is crucial that we do EscapeToRaw\n-                            // on the src because we need it with its original type.\n-                            let source_info = block_data.statements[i].source_info;\n-                            block_data.statements.insert(i, Statement {\n-                                source_info,\n-                                kind: StatementKind::EscapeToRaw(src.clone()),\n-                            });\n+                            (RetagKind::Raw, place)\n+                        } else {\n+                            // Some other cast, no retag\n+                            continue\n                         }\n                     }\n                     // Assignments of reference or ptr type are the ones where we may have\n                     // to update tags.  This includes `x = &[mut] ...` and hence\n                     // we also retag after taking a reference!\n                     StatementKind::Assign(ref place, box ref rvalue) if needs_retag(place) => {\n-                        let two_phase = match rvalue {\n-                            Rvalue::Ref(_, borrow_kind, _) =>\n-                                borrow_kind.allows_two_phase_borrow(),\n-                            _ => false\n+                        let kind = match rvalue {\n+                            Rvalue::Ref(_, borrow_kind, _)\n+                                if borrow_kind.allows_two_phase_borrow()\n+                            =>\n+                                RetagKind::TwoPhase,\n+                            _ =>\n+                                RetagKind::Default,\n                         };\n-                        // Insert a retag after the assignment.\n-                        let source_info = block_data.statements[i].source_info;\n-                        block_data.statements.insert(i+1, Statement {\n-                            source_info,\n-                            kind: StatementKind::Retag {\n-                                fn_entry: false,\n-                                two_phase,\n-                                place: place.clone(),\n-                            },\n-                        });\n+                        (kind, place)\n                     }\n                     // Do nothing for the rest\n-                    _ => {},\n+                    _ => continue,\n                 };\n+                // Insert a retag after the statement.\n+                let source_info = block_data.statements[i].source_info;\n+                block_data.statements.insert(i+1, Statement {\n+                    source_info,\n+                    kind: StatementKind::Retag(retag_kind, place.clone()),\n+                });\n             }\n         }\n     }"}, {"sha": "f6b7f817aad5306b7a32fb6ec77e62618bc4fc16", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -117,7 +117,6 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             StatementKind::StorageLive(..) |\n             StatementKind::StorageDead(..) |\n             StatementKind::Retag { .. } |\n-            StatementKind::EscapeToRaw { .. } |\n             StatementKind::AscribeUserType(..) |\n             StatementKind::Nop => {\n                 // safe (at least as emitted during MIR construction)"}, {"sha": "fe19accb03137a1d170fdffbea2c80541931b0a4", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -689,7 +689,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         // Alias tracking must know we changed the type\n         mir.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n             source_info,\n-            kind: StatementKind::EscapeToRaw(Operand::Copy(Place::Local(self_arg()))),\n+            kind: StatementKind::Retag(RetagKind::Raw, Place::Local(self_arg())),\n         })\n     }\n "}, {"sha": "88424d75baa882e145e1c36a304abd881f1229ff", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -709,16 +709,17 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n \n     fn visit_retag(\n         &mut self,\n-        fn_entry: &mut bool,\n-        two_phase: &mut bool,\n+        kind: &mut RetagKind,\n         place: &mut Place<'tcx>,\n         loc: Location,\n     ) {\n-        self.super_retag(fn_entry, two_phase, place, loc);\n+        self.super_retag(kind, place, loc);\n \n         // We have to patch all inlined retags to be aware that they are no longer\n         // happening on function entry.\n-        *fn_entry = false;\n+        if *kind == RetagKind::FnEntry {\n+            *kind = RetagKind::Default;\n+        }\n     }\n \n     fn visit_terminator_kind(&mut self, block: BasicBlock,"}, {"sha": "b854f029e51067709aaf9e159a57caca6b294e62", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -1241,7 +1241,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 StatementKind::StorageDead(_) |\n                 StatementKind::InlineAsm {..} |\n                 StatementKind::Retag { .. } |\n-                StatementKind::EscapeToRaw { .. } |\n                 StatementKind::AscribeUserType(..) |\n                 StatementKind::Nop => {}\n             }"}, {"sha": "c1c5b18915aede665e4734aef2dd786c436a57f2", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -243,7 +243,6 @@ fn check_statement(\n         | StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)\n         | StatementKind::Retag { .. }\n-        | StatementKind::EscapeToRaw { .. }\n         | StatementKind::AscribeUserType(..)\n         | StatementKind::Nop => Ok(()),\n     }"}, {"sha": "cdab5a1d7b011796f79081ebe4d589df8b277426", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -65,8 +65,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::Assign { .. } |\n                 StatementKind::SetDiscriminant { .. } |\n                 StatementKind::InlineAsm { .. } |\n-                StatementKind::Retag { .. } |\n-                StatementKind::EscapeToRaw { .. } => {\n+                StatementKind::Retag { .. } => {\n                     return false;\n                 }\n             }"}, {"sha": "e1eeeb8301ce2fce436d557c379492f2e15b405a", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -162,7 +162,6 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::Retag { .. } |\n-            mir::StatementKind::EscapeToRaw { .. } |\n             mir::StatementKind::AscribeUserType(..) |\n             mir::StatementKind::Nop => continue,\n             mir::StatementKind::SetDiscriminant{ .. } =>"}, {"sha": "f48862ff9330b107dcd32013f4f8481f52b24c70", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4755e2f3b635ad7391ba88b18672b05cbae5ba4c/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=4755e2f3b635ad7391ba88b18672b05cbae5ba4c", "patch": "@@ -87,8 +87,8 @@ fn main() {\n //         ...\n //         _14 = &mut (*_10);\n //         Retag(_14);\n-//         EscapeToRaw(move _14);\n //         _13 = move _14 as *mut i32 (Misc);\n+//         Retag([raw] _13);\n //         ...\n //         _17 = move _18(move _19) -> bb2;\n //     }"}]}