{"sha": "79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YWE5YjE1ZDc0MDNjZTJkYzQwYjUyNWExZDE2ZTZjNGFkMTk3M2M=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-09-13T18:58:43Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-09-13T21:32:29Z"}, "message": "Optimize behavior of vec.split_off(0) (take all)\n\nOptimization improvement to `split_off()` so the performance meets the\nintuitively expected behavior when `at == 0`, avoiding the current\nbehavior of copying the entire vector.\n\nThe change honors documented behavior that the method leaves the\noriginal vector's \"previous capacity unchanged\".\n\nThis improvement better supports the pattern for building and flushing a\nbuffer of elements, such as the following:\n\n```rust\n    let mut vec = Vec::new();\n    loop {\n        vec.push(something);\n        if condition_is_met {\n            process(vec.split_off(0));\n        }\n    }\n```\n\n`Option` wrapping is the first alternative I thought of, but is much\nless obvious and more verbose:\n\n```rust\n    let mut capacity = 1;\n    let mut vec: Option<Vec<Stuff>> = None;\n    loop {\n        vec.get_or_insert_with(|| Vec::with_capacity(capacity)).push(something);\n        if condition_is_met {\n            capacity = vec.capacity();\n            process(vec.take().unwrap());\n        }\n    }\n```\n\nDirectly applying `mem::replace()` could work, but `mem::` functions are\ntypically a last resort, when a developer is actively seeking better\nperformance than the standard library provides, for example.\n\nThe benefit of the approach to this change is it does not change the\nexisting API contract, but improves the peformance of `split_off(0)` for\n`Vec`, `String` (which delegates `split_off()` to `Vec`), and any other\nexisting use cases.\n\nThis change adds tests to validate the behavior of `split_off()` with\nregard to capacity, as originally documented, and confirm that behavior\nstill holds, when `at == 0`.\n\nThe change is an implementation detail, and does not require a\ndocumentation change, but documenting the new behavior as part of its\nAPI contract may benefit future users.\n\n(Let me know if I should make that documentation update.)\n\nNote, for future consideration:\n\nI think it would be helpful to introduce an additional method to `Vec`\n(if not also to `String`):\n\n```\n    pub fn take_all(&mut self) -> Self {\n        self.split_off(0)\n    }\n```\n\nThis would make it more clear how `Vec` supports the pattern, and make\nit easier to find, since the behavior is similar to other `take()`\nmethods in the Rust standard library.", "tree": {"sha": "71f0861bcaadff6387a76a08231f49aeaa8525a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f0861bcaadff6387a76a08231f49aeaa8525a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c", "html_url": "https://github.com/rust-lang/rust/commit/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1894e4afe1a39f718cc27232a5a2f0d02b501f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1894e4afe1a39f718cc27232a5a2f0d02b501f6", "html_url": "https://github.com/rust-lang/rust/commit/a1894e4afe1a39f718cc27232a5a2f0d02b501f6"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "c939a7bb295338f262aae58845bb07d7449f3602", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c", "patch": "@@ -1410,6 +1410,11 @@ impl<T> Vec<T> {\n             assert_failed(at, self.len());\n         }\n \n+        if at == 0 {\n+            // the new vector can take over the original buffer and avoid the copy\n+            return mem::replace(self, Vec::with_capacity(self.capacity()));\n+        }\n+\n         let other_len = self.len - at;\n         let mut other = Vec::with_capacity(other_len);\n "}, {"sha": "f7f78046d089b09479a2c7067c06e7de70115d76", "filename": "library/alloc/tests/string.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c/library%2Falloc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c/library%2Falloc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstring.rs?ref=79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c", "patch": "@@ -278,17 +278,21 @@ fn test_split_off_mid_char() {\n #[test]\n fn test_split_off_ascii() {\n     let mut ab = String::from(\"ABCD\");\n+    let orig_capacity = ab.capacity();\n     let cd = ab.split_off(2);\n     assert_eq!(ab, \"AB\");\n     assert_eq!(cd, \"CD\");\n+    assert_eq!(ab.capacity(), orig_capacity);\n }\n \n #[test]\n fn test_split_off_unicode() {\n     let mut nihon = String::from(\"\u65e5\u672c\u8a9e\");\n+    let orig_capacity = nihon.capacity();\n     let go = nihon.split_off(\"\u65e5\u672c\".len());\n     assert_eq!(nihon, \"\u65e5\u672c\");\n     assert_eq!(go, \"\u8a9e\");\n+    assert_eq!(nihon.capacity(), orig_capacity);\n }\n \n #[test]"}, {"sha": "dd3a9f35842067b0fea0d9dd291dc37db2061114", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=79aa9b15d7403ce2dc40b525a1d16e6c4ad1973c", "patch": "@@ -772,9 +772,23 @@ fn test_append() {\n #[test]\n fn test_split_off() {\n     let mut vec = vec![1, 2, 3, 4, 5, 6];\n+    let orig_capacity = vec.capacity();\n     let vec2 = vec.split_off(4);\n     assert_eq!(vec, [1, 2, 3, 4]);\n     assert_eq!(vec2, [5, 6]);\n+    assert_eq!(vec.capacity(), orig_capacity);\n+}\n+\n+#[test]\n+fn test_split_off_take_all() {\n+    let mut vec = vec![1, 2, 3, 4, 5, 6];\n+    let orig_ptr = vec.as_ptr();\n+    let orig_capacity = vec.capacity();\n+    let vec2 = vec.split_off(0);\n+    assert_eq!(vec, []);\n+    assert_eq!(vec2, [1, 2, 3, 4, 5, 6]);\n+    assert_eq!(vec.capacity(), orig_capacity);\n+    assert_eq!(vec2.as_ptr(), orig_ptr);\n }\n \n #[test]"}]}