{"sha": "21b43693229d72441872cad96842b5bcd6ba9f1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYjQzNjkzMjI5ZDcyNDQxODcyY2FkOTY4NDJiNWJjZDZiYTlmMWI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-29T00:22:46Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-07T21:54:04Z"}, "message": "Refactor away `ext::expand::{expand_crate, expand_crate_with_expander}`.", "tree": {"sha": "9d825e4414cdfac9a4255ae2638a76f4bdcd3c4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d825e4414cdfac9a4255ae2638a76f4bdcd3c4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b43693229d72441872cad96842b5bcd6ba9f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b43693229d72441872cad96842b5bcd6ba9f1b", "html_url": "https://github.com/rust-lang/rust/commit/21b43693229d72441872cad96842b5bcd6ba9f1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b43693229d72441872cad96842b5bcd6ba9f1b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e41b6784fcc67c4dc3ab681d3d751cc768ca89", "html_url": "https://github.com/rust-lang/rust/commit/09e41b6784fcc67c4dc3ab681d3d751cc768ca89"}], "stats": {"total": 51, "additions": 18, "deletions": 33}, "files": [{"sha": "a3b7b32f1b52da3e67fd1d27db0a49be12312fee", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21b43693229d72441872cad96842b5bcd6ba9f1b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b43693229d72441872cad96842b5bcd6ba9f1b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=21b43693229d72441872cad96842b5bcd6ba9f1b", "patch": "@@ -686,11 +686,17 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n             ..syntax::ext::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n         let mut ecx = ExtCtxt::new(&sess.parse_sess, krate.config.clone(), cfg, &mut resolver);\n-        let ret = syntax::ext::expand::expand_crate(&mut ecx, krate);\n+        let err_count = ecx.parse_sess.span_diagnostic.err_count();\n+\n+        let krate = ecx.monotonic_expander().expand_crate(krate);\n+\n+        if ecx.parse_sess.span_diagnostic.err_count() - ecx.resolve_err_count > err_count {\n+            ecx.parse_sess.span_diagnostic.abort_if_errors();\n+        }\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n         }\n-        ret\n+        krate\n     });\n \n     krate.exported_macros = mem::replace(&mut resolver.exported_macros, Vec::new());"}, {"sha": "923d5d05439e462ea304d46c3066e4dea718dda8", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21b43693229d72441872cad96842b5bcd6ba9f1b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b43693229d72441872cad96842b5bcd6ba9f1b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=21b43693229d72441872cad96842b5bcd6ba9f1b", "patch": "@@ -22,7 +22,6 @@ use parse::{self, parser};\n use parse::token;\n use parse::token::{InternedString, str_to_ident};\n use ptr::P;\n-use std_inject;\n use util::small_vector::SmallVector;\n \n use std::path::PathBuf;\n@@ -737,17 +736,6 @@ impl<'a> ExtCtxt<'a> {\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         token::intern(st)\n     }\n-\n-    pub fn initialize(&mut self, krate: &ast::Crate) {\n-        self.crate_root = std_inject::injected_crate_name(krate);\n-\n-        let mut module = ModuleData {\n-            mod_path: vec![token::str_to_ident(&self.ecfg.crate_name)],\n-            directory: PathBuf::from(self.parse_sess.codemap().span_to_filename(krate.span)),\n-        };\n-        module.directory.pop();\n-        self.current_expansion.module = Rc::new(module);\n-    }\n }\n \n /// Extract a string literal from the macro expanded version of `expr`,"}, {"sha": "745afb473f9944d5ed5a593236788239cbb50d45", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/21b43693229d72441872cad96842b5bcd6ba9f1b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b43693229d72441872cad96842b5bcd6ba9f1b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=21b43693229d72441872cad96842b5bcd6ba9f1b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{Block, Crate, Ident, Mac_, PatKind};\n+use ast::{Block, Ident, Mac_, PatKind};\n use ast::{Name, MacStmtStyle, StmtKind, ItemKind};\n use ast;\n use ext::hygiene::Mark;\n@@ -26,6 +26,7 @@ use parse::parser::Parser;\n use parse::token::{self, intern, keywords};\n use print::pprust;\n use ptr::P;\n+use std_inject;\n use tokenstream::{TokenTree, TokenStream};\n use util::small_vector::SmallVector;\n use visit::Visitor;\n@@ -186,8 +187,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         MacroExpander { cx: cx, monotonic: monotonic }\n     }\n \n-    fn expand_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n-        let err_count = self.cx.parse_sess.span_diagnostic.err_count();\n+    pub fn expand_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n+        self.cx.crate_root = std_inject::injected_crate_name(&krate);\n+        let mut module = ModuleData {\n+            mod_path: vec![token::str_to_ident(&self.cx.ecfg.crate_name)],\n+            directory: PathBuf::from(self.cx.codemap().span_to_filename(krate.span)),\n+        };\n+        module.directory.pop();\n+        self.cx.current_expansion.module = Rc::new(module);\n \n         let krate_item = Expansion::Items(SmallVector::one(P(ast::Item {\n             attrs: krate.attrs,\n@@ -206,10 +213,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             _ => unreachable!(),\n         };\n \n-        if self.cx.parse_sess.span_diagnostic.err_count() - self.cx.resolve_err_count > err_count {\n-            self.cx.parse_sess.span_diagnostic.abort_if_errors();\n-        }\n-\n         krate\n     }\n \n@@ -866,18 +869,6 @@ impl<'feat> ExpansionConfig<'feat> {\n     }\n }\n \n-pub fn expand_crate(cx: &mut ExtCtxt, c: Crate) -> Crate {\n-    cx.initialize(&c);\n-    cx.monotonic_expander().expand_crate(c)\n-}\n-\n-// Expands crate using supplied MacroExpander - allows for\n-// non-standard expansion behaviour (e.g. step-wise).\n-pub fn expand_crate_with_expander(expander: &mut MacroExpander, c: Crate) -> Crate {\n-    expander.cx.initialize(&c);\n-    expander.expand_crate(c)\n-}\n-\n // A Marker adds the given mark to the syntax context and\n // sets spans' `expn_id` to the given expn_id (unless it is `None`).\n struct Marker { mark: Mark, expn_id: Option<ExpnId> }"}]}