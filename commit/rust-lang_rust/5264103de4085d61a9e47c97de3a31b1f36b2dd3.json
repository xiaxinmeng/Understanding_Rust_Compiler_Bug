{"sha": "5264103de4085d61a9e47c97de3a31b1f36b2dd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNjQxMDNkZTQwODVkNjFhOWU0N2M5N2RlM2EzMWIxZjM2YjJkZDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-11T21:01:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-30T08:11:59Z"}, "message": "add new instructions for asserting when values are valid, and to describe when we can rely on them being locked in memory", "tree": {"sha": "3b40835672d65f509e68ed8294e8f94430001042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b40835672d65f509e68ed8294e8f94430001042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5264103de4085d61a9e47c97de3a31b1f36b2dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5264103de4085d61a9e47c97de3a31b1f36b2dd3", "html_url": "https://github.com/rust-lang/rust/commit/5264103de4085d61a9e47c97de3a31b1f36b2dd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5264103de4085d61a9e47c97de3a31b1f36b2dd3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "html_url": "https://github.com/rust-lang/rust/commit/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "eb0c62a1161806b0343a208b0929faa8a2cbd809", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -226,8 +226,12 @@ for mir::StatementKind<'tcx> {\n             mir::StatementKind::StorageDead(ref lvalue) => {\n                 lvalue.hash_stable(hcx, hasher);\n             }\n-            mir::StatementKind::EndRegion(ref extents) => {\n-                extents.hash_stable(hcx, hasher);\n+            mir::StatementKind::EndRegion(ref extent) => {\n+                extent.hash_stable(hcx, hasher);\n+            }\n+            mir::StatementKind::Validate(ref op, ref lvalues) => {\n+                op.hash_stable(hcx, hasher);\n+                lvalues.hash_stable(hcx, hasher);\n             }\n             mir::StatementKind::Nop => {}\n             mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {\n@@ -239,6 +243,8 @@ for mir::StatementKind<'tcx> {\n     }\n }\n \n+impl_stable_hash_for!(enum mir::ValidationOp { Acquire, Release, Suspend(extent) });\n+\n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::Lvalue<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,"}, {"sha": "c7be58c13f86c135be5baa7842641664efded151", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -818,12 +818,16 @@ pub enum StatementKind<'tcx> {\n     /// End the current live range for the storage of the local.\n     StorageDead(Lvalue<'tcx>),\n \n+    /// Execute a piece of inline Assembly.\n     InlineAsm {\n         asm: Box<InlineAsm>,\n         outputs: Vec<Lvalue<'tcx>>,\n         inputs: Vec<Operand<'tcx>>\n     },\n \n+    /// Assert the given lvalues to be valid inhabitants of their type.\n+    Validate(ValidationOp, Vec<(Ty<'tcx>, Lvalue<'tcx>)>),\n+\n     /// Mark one terminating point of an extent (i.e. static region).\n     /// (The starting point(s) arise implicitly from borrows.)\n     EndRegion(CodeExtent),\n@@ -832,13 +836,21 @@ pub enum StatementKind<'tcx> {\n     Nop,\n }\n \n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, PartialEq, Eq)]\n+pub enum ValidationOp {\n+    Acquire,\n+    Release,\n+    Suspend(CodeExtent),\n+}\n+\n impl<'tcx> Debug for Statement<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(ref lv, ref rv) => write!(fmt, \"{:?} = {:?}\", lv, rv),\n             // (reuse lifetime rendering policy from ppaux.)\n             EndRegion(ref ce) => write!(fmt, \"EndRegion({})\", ty::ReScope(*ce)),\n+            Validate(ref op, ref lvalues) => write!(fmt, \"Validate({:?}, {:?})\", op, lvalues),\n             StorageLive(ref lv) => write!(fmt, \"StorageLive({:?})\", lv),\n             StorageDead(ref lv) => write!(fmt, \"StorageDead({:?})\", lv),\n             SetDiscriminant{lvalue: ref lv, variant_index: index} => {\n@@ -1505,6 +1517,10 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n             // trait with a `fn fold_extent`.\n             EndRegion(ref extent) => EndRegion(extent.clone()),\n \n+            Validate(ref op, ref lvals) =>\n+                Validate(op.clone(),\n+                         lvals.iter().map(|ty_and_lval| ty_and_lval.fold_with(folder)).collect()),\n+\n             Nop => Nop,\n         };\n         Statement {\n@@ -1530,6 +1546,8 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n             // trait with a `fn visit_extent`.\n             EndRegion(ref _extent) => false,\n \n+            Validate(ref _op, ref lvalues) => lvalues.iter().any(|ty_and_lvalue| ty_and_lvalue.visit_with(visitor)),\n+\n             Nop => false,\n         }\n     }"}, {"sha": "5284a6132396be545ff1f101f934cfd38fc5f167", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -333,6 +333,12 @@ macro_rules! make_mir_visitor {\n                         self.visit_assign(block, lvalue, rvalue, location);\n                     }\n                     StatementKind::EndRegion(_) => {}\n+                    StatementKind::Validate(_, ref $($mutability)* lvalues) => {\n+                        for & $($mutability)* (ref $($mutability)* ty, ref $($mutability)* lvalue) in lvalues {\n+                            self.visit_ty(ty, Lookup::Loc(location));\n+                            self.visit_lvalue(lvalue, LvalueContext::Validate, location);\n+                        }\n+                    }\n                     StatementKind::SetDiscriminant{ ref $($mutability)* lvalue, .. } => {\n                         self.visit_lvalue(lvalue, LvalueContext::Store, location);\n                     }\n@@ -784,6 +790,9 @@ pub enum LvalueContext<'tcx> {\n     // Starting and ending a storage live range\n     StorageLive,\n     StorageDead,\n+\n+    // Validation command\n+    Validate,\n }\n \n impl<'tcx> LvalueContext<'tcx> {\n@@ -830,7 +839,8 @@ impl<'tcx> LvalueContext<'tcx> {\n             LvalueContext::Borrow { kind: BorrowKind::Shared, .. } |\n             LvalueContext::Borrow { kind: BorrowKind::Unique, .. } |\n             LvalueContext::Projection(Mutability::Not) | LvalueContext::Consume |\n-            LvalueContext::StorageLive | LvalueContext::StorageDead => false,\n+            LvalueContext::StorageLive | LvalueContext::StorageDead |\n+            LvalueContext::Validate => false,\n         }\n     }\n \n@@ -842,7 +852,8 @@ impl<'tcx> LvalueContext<'tcx> {\n             LvalueContext::Projection(Mutability::Not) | LvalueContext::Consume => true,\n             LvalueContext::Borrow { kind: BorrowKind::Mut, .. } | LvalueContext::Store |\n             LvalueContext::Call | LvalueContext::Projection(Mutability::Mut) |\n-            LvalueContext::Drop | LvalueContext::StorageLive | LvalueContext::StorageDead => false,\n+            LvalueContext::Drop | LvalueContext::StorageLive | LvalueContext::StorageDead |\n+            LvalueContext::Validate => false,\n         }\n     }\n "}, {"sha": "24d5aa9e46bf232767ee2d41da9bf17117b03482", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -289,6 +289,7 @@ pub(crate) fn drop_flag_effects_for_location<'a, 'tcx, F>(\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::EndRegion(_) |\n+            mir::StatementKind::Validate(..) |\n             mir::StatementKind::Nop => {}\n         },\n         None => {"}, {"sha": "d5bdc71a705c5da5954ea8eb2f5a9ae1ede27759", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -486,6 +486,7 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::EndRegion(_) |\n+            mir::StatementKind::Validate(..) |\n             mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "c2945d4659271432c034048731664621f5fc6ecf", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -416,6 +416,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             }\n             StatementKind::InlineAsm { .. } |\n             StatementKind::EndRegion(_) |\n+            StatementKind::Validate(..) |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "9d01f8294e4fa0ec9ae8e604887cda6cd2d4eabc", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -908,6 +908,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 StatementKind::StorageDead(_) |\n                 StatementKind::InlineAsm {..} |\n                 StatementKind::EndRegion(_) |\n+                StatementKind::Validate(..) |\n                 StatementKind::Nop => {}\n             }\n         });"}, {"sha": "268e7a4c185b00cd8eae1559064b164619d79e1d", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -161,6 +161,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::EndRegion(_) |\n+            mir::StatementKind::Validate(..) |\n             mir::StatementKind::Nop => continue,\n             mir::StatementKind::SetDiscriminant{ .. } =>\n                 span_bug!(stmt.source_info.span,"}, {"sha": "1c7899a46d1d760eb2d854a79c0ce31af6cbdd31", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -414,6 +414,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             }\n             StatementKind::InlineAsm { .. } |\n             StatementKind::EndRegion(_) |\n+            StatementKind::Validate(..) |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "d5e477ff0c784d218d958dddff7ca883e12f9bd8", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -126,6 +126,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.record(match statement.kind {\n             StatementKind::Assign(..) => \"StatementKind::Assign\",\n             StatementKind::EndRegion(..) => \"StatementKind::EndRegion\",\n+            StatementKind::Validate(..) => \"StatementKind::Validate\",\n             StatementKind::SetDiscriminant { .. } => \"StatementKind::SetDiscriminant\",\n             StatementKind::StorageLive(..) => \"StatementKind::StorageLive\",\n             StatementKind::StorageDead(..) => \"StatementKind::StorageDead\","}, {"sha": "598af1cda91d4940fdc7e703d1eaa56bd6d64694", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -158,6 +158,7 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n \n                 LvalueContext::StorageLive |\n                 LvalueContext::StorageDead |\n+                LvalueContext::Validate |\n                 LvalueContext::Inspect |\n                 LvalueContext::Consume => {}\n "}, {"sha": "c90382673a4a233873a42174296e66df59e5503f", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -285,6 +285,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     }\n                     mir::StatementKind::StorageLive(_) |\n                     mir::StatementKind::StorageDead(_) |\n+                    mir::StatementKind::Validate(..) |\n                     mir::StatementKind::EndRegion(_) |\n                     mir::StatementKind::Nop => {}\n                     mir::StatementKind::InlineAsm { .. } |"}, {"sha": "52dfc8dc4de5cac1d10f0d408ab504c3dd6cb91b", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5264103de4085d61a9e47c97de3a31b1f36b2dd3/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=5264103de4085d61a9e47c97de3a31b1f36b2dd3", "patch": "@@ -87,6 +87,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 bcx\n             }\n             mir::StatementKind::EndRegion(_) |\n+            mir::StatementKind::Validate(..) |\n             mir::StatementKind::Nop => bcx,\n         }\n     }"}]}