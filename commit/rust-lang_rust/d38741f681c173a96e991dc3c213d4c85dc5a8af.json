{"sha": "d38741f681c173a96e991dc3c213d4c85dc5a8af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzODc0MWY2ODFjMTczYTk2ZTk5MWRjM2MyMTNkNGM4NWRjNWE4YWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-05T19:36:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-05T19:36:53Z"}, "message": "Merge #4327\n\n4327: Refactor assists r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4a34a03a160441b981aa5acfb8928f5ffe20fbfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a34a03a160441b981aa5acfb8928f5ffe20fbfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d38741f681c173a96e991dc3c213d4c85dc5a8af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJescBVCRBK7hj4Ov3rIwAAdHIIAAMTH9tJrpPhgl8NH03DHb9U\nReLCWHLHyn8LdrQt7sRjQdDzqpYjado3LuPqZZ8ZAA2X97zuHvym76ih63enk27M\nfOenNAWBUKJ3Dhjl05crnIAz8qoDs+Nr+vq54IGAGXKWMDi88gCTE0a1GQtjJdyc\nZVdrLDk01b0fe7KBWMhLxcw66hBmvH636/+68k2ktc56GmyNwkBj8sOUx47zq0/x\n/re5+rVUvOvLqVjrbrLBbhYz41Nc8PIcmpy4e8vk/AVNZZLBh795+Usjeoex+M/n\n6ukAspHgj0eP5o+B6b/sFCGziG3bC8LerkfjsTWCkd78pB0ZaYIzaxJ2fJDGV7g=\n=CoFL\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a34a03a160441b981aa5acfb8928f5ffe20fbfb\nparent a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3\nparent 3908fad1fe02efedc810d7bd8f765b1434684cef\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588707413 +0000\ncommitter GitHub <noreply@github.com> 1588707413 +0000\n\nMerge #4327\n\n4327: Refactor assists r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d38741f681c173a96e991dc3c213d4c85dc5a8af", "html_url": "https://github.com/rust-lang/rust/commit/d38741f681c173a96e991dc3c213d4c85dc5a8af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d38741f681c173a96e991dc3c213d4c85dc5a8af/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3", "html_url": "https://github.com/rust-lang/rust/commit/a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3"}, {"sha": "3908fad1fe02efedc810d7bd8f765b1434684cef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3908fad1fe02efedc810d7bd8f765b1434684cef", "html_url": "https://github.com/rust-lang/rust/commit/3908fad1fe02efedc810d7bd8f765b1434684cef"}], "stats": {"total": 87, "additions": 42, "deletions": 45}, "files": [{"sha": "82f61bc8f7e336ec87e7d7bd49c7e40236e3e4ec", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=d38741f681c173a96e991dc3c213d4c85dc5a8af", "patch": "@@ -38,8 +38,7 @@ impl AssistInfo {\n \n     pub(crate) fn into_resolved(self) -> Option<ResolvedAssist> {\n         let label = self.label;\n-        let group_label = self.group_label;\n-        self.action.map(|action| ResolvedAssist { label, group_label, action })\n+        self.action.map(|action| ResolvedAssist { label, action })\n     }\n }\n \n@@ -100,7 +99,7 @@ impl<'a> AssistCtx<'a> {\n         label: impl Into<String>,\n         f: impl FnOnce(&mut ActionBuilder),\n     ) -> Option<Assist> {\n-        let label = AssistLabel::new(label.into(), id);\n+        let label = AssistLabel::new(id, label.into(), None);\n \n         let mut info = AssistInfo::new(label);\n         if self.should_compute_edit {\n@@ -116,7 +115,8 @@ impl<'a> AssistCtx<'a> {\n     }\n \n     pub(crate) fn add_assist_group(self, group_name: impl Into<String>) -> AssistGroup<'a> {\n-        AssistGroup { ctx: self, group_name: group_name.into(), assists: Vec::new() }\n+        let group = GroupLabel(group_name.into());\n+        AssistGroup { ctx: self, group, assists: Vec::new() }\n     }\n \n     pub(crate) fn token_at_offset(&self) -> TokenAtOffset<SyntaxToken> {\n@@ -146,7 +146,7 @@ impl<'a> AssistCtx<'a> {\n \n pub(crate) struct AssistGroup<'a> {\n     ctx: AssistCtx<'a>,\n-    group_name: String,\n+    group: GroupLabel,\n     assists: Vec<AssistInfo>,\n }\n \n@@ -157,9 +157,9 @@ impl<'a> AssistGroup<'a> {\n         label: impl Into<String>,\n         f: impl FnOnce(&mut ActionBuilder),\n     ) {\n-        let label = AssistLabel::new(label.into(), id);\n+        let label = AssistLabel::new(id, label.into(), Some(self.group.clone()));\n \n-        let mut info = AssistInfo::new(label).with_group(GroupLabel(self.group_name.clone()));\n+        let mut info = AssistInfo::new(label).with_group(self.group.clone());\n         if self.ctx.should_compute_edit {\n             let action = {\n                 let mut edit = ActionBuilder::new(&self.ctx);"}, {"sha": "5cec10088ce013496058c4433722148ab9d3e365", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=d38741f681c173a96e991dc3c213d4c85dc5a8af", "patch": "@@ -17,13 +17,13 @@ mod doc_tests;\n pub mod utils;\n pub mod ast_transform;\n \n+use hir::Semantics;\n use ra_db::{FileId, FileRange};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{TextRange, TextSize};\n use ra_text_edit::TextEdit;\n \n pub(crate) use crate::assist_ctx::{Assist, AssistCtx, AssistHandler};\n-use hir::Semantics;\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -32,19 +32,20 @@ pub struct AssistId(pub &'static str);\n \n #[derive(Debug, Clone)]\n pub struct AssistLabel {\n+    pub id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n-    pub id: AssistId,\n+    pub group: Option<GroupLabel>,\n }\n \n #[derive(Clone, Debug)]\n pub struct GroupLabel(pub String);\n \n impl AssistLabel {\n-    pub(crate) fn new(label: String, id: AssistId) -> AssistLabel {\n+    pub(crate) fn new(id: AssistId, label: String, group: Option<GroupLabel>) -> AssistLabel {\n         // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n-        AssistLabel { label, id }\n+        AssistLabel { id, label, group }\n     }\n }\n \n@@ -60,7 +61,6 @@ pub struct AssistAction {\n #[derive(Debug, Clone)]\n pub struct ResolvedAssist {\n     pub label: AssistLabel,\n-    pub group_label: Option<GroupLabel>,\n     pub action: AssistAction,\n }\n "}, {"sha": "389339a03446d0da16a4bb940373c6f186e22673", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=d38741f681c173a96e991dc3c213d4c85dc5a8af", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use ra_assists::{resolved_assists, AssistAction, AssistLabel};\n+use ra_assists::{resolved_assists, AssistAction};\n use ra_db::{FilePosition, FileRange};\n use ra_ide_db::RootDatabase;\n \n@@ -21,27 +21,22 @@ pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n         .into_iter()\n         .map(|assist| {\n             let file_id = frange.file_id;\n-            let assist_label = &assist.label;\n             Assist {\n-                id: assist_label.id,\n-                label: assist_label.label.clone(),\n-                group_label: assist.group_label.map(|it| it.0),\n-                source_change: action_to_edit(assist.action, file_id, assist_label),\n+                id: assist.label.id,\n+                label: assist.label.label.clone(),\n+                group_label: assist.label.group.map(|it| it.0),\n+                source_change: action_to_edit(assist.action, file_id, assist.label.label.clone()),\n             }\n         })\n         .collect()\n }\n \n-fn action_to_edit(\n-    action: AssistAction,\n-    file_id: FileId,\n-    assist_label: &AssistLabel,\n-) -> SourceChange {\n+fn action_to_edit(action: AssistAction, file_id: FileId, label: String) -> SourceChange {\n     let file_id = match action.file {\n         ra_assists::AssistFile::TargetFile(it) => it,\n         _ => file_id,\n     };\n     let file_edit = SourceFileEdit { file_id, edit: action.edit };\n-    SourceChange::source_file_edit(assist_label.label.clone(), file_edit)\n+    SourceChange::source_file_edit(label, file_edit)\n         .with_cursor_opt(action.cursor_position.map(|offset| FilePosition { offset, file_id }))\n }"}, {"sha": "4c04cee078d48a47b94581428fa5a09548209628", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=d38741f681c173a96e991dc3c213d4c85dc5a8af", "patch": "@@ -64,7 +64,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             .unwrap_or_else(|| RelativePath::new(\"\"))\n             .join(&d.candidate);\n         let create_file = FileSystemEdit::CreateFile { source_root, path };\n-        let fix = SourceChange::file_system_edit(\"create module\", create_file);\n+        let fix = SourceChange::file_system_edit(\"Create module\", create_file);\n         res.borrow_mut().push(Diagnostic {\n             range: sema.diagnostics_range(d).range,\n             message: d.message(),\n@@ -92,7 +92,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             algo::diff(&d.ast(db).syntax(), &field_list.syntax()).into_text_edit(&mut builder);\n \n             Some(SourceChange::source_file_edit_from(\n-                \"fill struct fields\",\n+                \"Fill struct fields\",\n                 file_id,\n                 builder.finish(),\n             ))\n@@ -117,7 +117,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let node = d.ast(db);\n         let replacement = format!(\"Ok({})\", node.syntax());\n         let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n-        let fix = SourceChange::source_file_edit_from(\"wrap with ok\", file_id, edit);\n+        let fix = SourceChange::source_file_edit_from(\"Wrap with ok\", file_id, edit);\n         res.borrow_mut().push(Diagnostic {\n             range: sema.diagnostics_range(d).range,\n             message: d.message(),\n@@ -199,7 +199,7 @@ fn check_struct_shorthand_initialization(\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n                     fix: Some(SourceChange::source_file_edit(\n-                        \"use struct shorthand initialization\",\n+                        \"Use struct shorthand initialization\",\n                         SourceFileEdit { file_id, edit },\n                     )),\n                 });\n@@ -606,7 +606,7 @@ mod tests {\n                 range: 0..8,\n                 fix: Some(\n                     SourceChange {\n-                        label: \"create module\",\n+                        label: \"Create module\",\n                         source_file_edits: [],\n                         file_system_edits: [\n                             CreateFile {\n@@ -655,7 +655,7 @@ mod tests {\n                 range: 224..233,\n                 fix: Some(\n                     SourceChange {\n-                        label: \"fill struct fields\",\n+                        label: \"Fill struct fields\",\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId("}, {"sha": "52e55b0a08ee7769c387f2a34e2d52a81479f988", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=d38741f681c173a96e991dc3c213d4c85dc5a8af", "patch": "@@ -122,7 +122,7 @@ fn rename_mod(\n         source_file_edits.extend(ref_edits);\n     }\n \n-    Some(SourceChange::from_edits(\"rename\", source_file_edits, file_system_edits))\n+    Some(SourceChange::from_edits(\"Rename\", source_file_edits, file_system_edits))\n }\n \n fn rename_reference(\n@@ -141,7 +141,7 @@ fn rename_reference(\n         return None;\n     }\n \n-    Some(RangeInfo::new(range, SourceChange::source_file_edits(\"rename\", edit)))\n+    Some(RangeInfo::new(range, SourceChange::source_file_edits(\"Rename\", edit)))\n }\n \n #[cfg(test)]\n@@ -530,7 +530,7 @@ mod tests {\n             RangeInfo {\n                 range: 4..7,\n                 info: SourceChange {\n-                    label: \"rename\",\n+                    label: \"Rename\",\n                     source_file_edits: [\n                         SourceFileEdit {\n                             file_id: FileId(\n@@ -582,7 +582,7 @@ mod tests {\n             RangeInfo {\n                 range: 4..7,\n                 info: SourceChange {\n-                    label: \"rename\",\n+                    label: \"Rename\",\n                     source_file_edits: [\n                         SourceFileEdit {\n                             file_id: FileId(\n@@ -665,7 +665,7 @@ mod tests {\n             RangeInfo {\n                 range: 8..11,\n                 info: SourceChange {\n-                    label: \"rename\",\n+                    label: \"Rename\",\n                     source_file_edits: [\n                         SourceFileEdit {\n                             file_id: FileId("}, {"sha": "10afd78256ea8679b26b0f9c1a377e6f92052648", "filename": "crates/ra_ide/src/source_change.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsource_change.rs?ref=d38741f681c173a96e991dc3c213d4c85dc5a8af", "patch": "@@ -35,8 +35,10 @@ impl SourceChange {\n     /// Creates a new SourceChange with the given label,\n     /// containing only the given `SourceFileEdits`.\n     pub(crate) fn source_file_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n+        let label = label.into();\n+        assert!(label.starts_with(char::is_uppercase));\n         SourceChange {\n-            label: label.into(),\n+            label: label,\n             source_file_edits: edits,\n             file_system_edits: vec![],\n             cursor_position: None,"}, {"sha": "72523746413a968f7b827cdb74dc184dbb7a3e3b", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=d38741f681c173a96e991dc3c213d4c85dc5a8af", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n \n     Some(\n         SourceChange::source_file_edit(\n-            \"on enter\",\n+            \"On enter\",\n             SourceFileEdit { edit, file_id: position.file_id },\n         )\n         .with_cursor(FilePosition { offset: cursor_position, file_id: position.file_id }),"}, {"sha": "1efa5dd632d3805b0f1331c35b3036d14d5056dc", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38741f681c173a96e991dc3c213d4c85dc5a8af/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=d38741f681c173a96e991dc3c213d4c85dc5a8af", "patch": "@@ -337,7 +337,7 @@ fn main() {}\n               \"arguments\": [\n                 {\n                   \"cursorPosition\": null,\n-                  \"label\": \"create module\",\n+                  \"label\": \"Create module\",\n                   \"workspaceEdit\": {\n                     \"documentChanges\": [\n                       {\n@@ -349,9 +349,9 @@ fn main() {}\n                 }\n               ],\n               \"command\": \"rust-analyzer.applySourceChange\",\n-              \"title\": \"create module\"\n+              \"title\": \"Create module\"\n             },\n-            \"title\": \"create module\"\n+            \"title\": \"Create module\"\n           }\n         ]),\n     );\n@@ -420,7 +420,7 @@ fn main() {{}}\n               \"arguments\": [\n                 {\n                   \"cursorPosition\": null,\n-                  \"label\": \"create module\",\n+                  \"label\": \"Create module\",\n                   \"workspaceEdit\": {\n                     \"documentChanges\": [\n                       {\n@@ -432,9 +432,9 @@ fn main() {{}}\n                 }\n               ],\n               \"command\": \"rust-analyzer.applySourceChange\",\n-              \"title\": \"create module\"\n+              \"title\": \"Create module\"\n             },\n-            \"title\": \"create module\"\n+            \"title\": \"Create module\"\n           }\n         ]),\n     );\n@@ -500,7 +500,7 @@ fn main() {{}}\n             \"position\": { \"character\": 4, \"line\": 1 },\n             \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\" }\n           },\n-          \"label\": \"on enter\",\n+          \"label\": \"On enter\",\n           \"workspaceEdit\": {\n             \"documentChanges\": [\n               {\n@@ -552,7 +552,7 @@ version = \\\"0.0.0\\\"\n             \"position\": { \"line\": 1, \"character\": 4 },\n             \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\" }\n           },\n-          \"label\": \"on enter\",\n+          \"label\": \"On enter\",\n           \"workspaceEdit\": {\n             \"documentChanges\": [\n               {"}]}