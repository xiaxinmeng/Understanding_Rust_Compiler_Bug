{"sha": "a642563d490e6f15353b88881abe4b3b9ae5b9f4", "node_id": "C_kwDOAAsO6NoAKGE2NDI1NjNkNDkwZTZmMTUzNTNiODg4ODFhYmU0YjNiOWFlNWI5ZjQ", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-21T08:53:34Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-21T09:45:48Z"}, "message": "major test improvements", "tree": {"sha": "c94cbe63a6ce737fceb3fb2b32cd72bc003064e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c94cbe63a6ce737fceb3fb2b32cd72bc003064e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a642563d490e6f15353b88881abe4b3b9ae5b9f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a642563d490e6f15353b88881abe4b3b9ae5b9f4", "html_url": "https://github.com/rust-lang/rust/commit/a642563d490e6f15353b88881abe4b3b9ae5b9f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a642563d490e6f15353b88881abe4b3b9ae5b9f4/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3206960ec660f45169c03afb789f0e4ef4e4f193", "url": "https://api.github.com/repos/rust-lang/rust/commits/3206960ec660f45169c03afb789f0e4ef4e4f193", "html_url": "https://github.com/rust-lang/rust/commit/3206960ec660f45169c03afb789f0e4ef4e4f193"}], "stats": {"total": 373, "additions": 349, "deletions": 24}, "files": [{"sha": "7f0338169014147ac8d879cc491823a0962b160c", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 109, "deletions": 14, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -388,6 +388,115 @@ fn offset_of() {\n     assert!(offset_of!((u8, u16), 1) <= size_of::<(u8, u16)>() - 2);\n }\n \n+#[test]\n+#[cfg(not(bootstrap))]\n+fn offset_of_union() {\n+    #[repr(C)]\n+    union Foo {\n+        x: u8,\n+        y: u16,\n+        z: Bar,\n+    }\n+\n+    #[repr(C)]\n+    #[derive(Copy, Clone)]\n+    struct Bar(u8, u8);\n+\n+    assert_eq!(offset_of!(Foo, x), 0);\n+    assert_eq!(offset_of!(Foo, y), 0);\n+    assert_eq!(offset_of!(Foo, z.0), 0);\n+    assert_eq!(offset_of!(Foo, z.1), 1);\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn offset_of_dst() {\n+    #[repr(C)]\n+    struct Alpha {\n+        x: u8,\n+        y: u16,\n+        z: [u8],\n+    }\n+\n+    trait Trait {}\n+\n+    #[repr(C)]\n+    struct Beta {\n+        x: u8,\n+        y: u16,\n+        z: dyn Trait,\n+    }\n+\n+    extern \"C\" {\n+        type Extern;\n+    }\n+\n+    #[repr(C)]\n+    struct Gamma {\n+        x: u8,\n+        y: u16,\n+        z: Extern,\n+    }\n+\n+    assert_eq!(offset_of!(Alpha, x), 0);\n+    assert_eq!(offset_of!(Alpha, y), 2);\n+\n+    assert_eq!(offset_of!(Beta, x), 0);\n+    assert_eq!(offset_of!(Beta, y), 2);\n+\n+    assert_eq!(offset_of!(Gamma, x), 0);\n+    assert_eq!(offset_of!(Gamma, y), 2);\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn offset_of_packed() {\n+    #[repr(C, packed)]\n+    struct Foo {\n+        x: u8,\n+        y: u16,\n+    }\n+\n+    assert_eq!(offset_of!(Foo, x), 0);\n+    assert_eq!(offset_of!(Foo, y), 1);\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn offset_of_projection() {\n+    #[repr(C)]\n+    struct Foo {\n+        x: u8,\n+        y: u16,\n+    }\n+\n+    trait Projector {\n+        type Type;\n+    }\n+\n+    impl Projector for () {\n+        type Type = Foo;\n+    }\n+\n+    assert_eq!(offset_of!(<() as Projector>::Type, x), 0);\n+    assert_eq!(offset_of!(<() as Projector>::Type, y), 2);\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn offset_of_alias() {\n+    #[repr(C)]\n+    struct Foo {\n+        x: u8,\n+        y: u16,\n+    }\n+\n+    type Bar = Foo;\n+\n+    assert_eq!(offset_of!(Bar, x), 0);\n+    assert_eq!(offset_of!(Bar, y), 2);\n+}\n+\n #[test]\n #[cfg(not(bootstrap))]\n fn const_offset_of() {\n@@ -425,20 +534,6 @@ fn offset_of_without_const_promotion() {\n     inner::<()>();\n }\n \n-#[test]\n-#[cfg(not(bootstrap))]\n-fn offset_of_dst() {\n-    #[repr(C)]\n-    struct Foo {\n-        x: u8,\n-        y: u16,\n-        slice: [u8],\n-    }\n-\n-    assert_eq!(offset_of!(Foo, x), 0);\n-    assert_eq!(offset_of!(Foo, y), 2);\n-}\n-\n #[test]\n #[cfg(not(bootstrap))]\n fn offset_of_addr() {"}, {"sha": "2c6fcef2500494b1ad51c2fec123b165ed8fcb71", "filename": "tests/ui/lint/dead-code/offset-of-correct-param-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Flint%2Fdead-code%2Foffset-of-correct-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Flint%2Fdead-code%2Foffset-of-correct-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Foffset-of-correct-param-env.rs?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -33,7 +33,7 @@ where\n     // But importantly, the normalization ends up with T, which, as we've declared in our param\n     // env is MyFieldDead. When we're in the param env of the `a` field, the where bound above\n     // is not in scope, so we don't know what T is - it's generic.\n-    // We cannot access a field on T. Boom!\n+    // If we use the wrong param env, the lint will ICE.\n     std::mem::offset_of!(A<GenericIsEqual<T>>, a.not_dead)\n }\n "}, {"sha": "088086cc580524cd0a9f8aadf7e9a27ac187ca5e", "filename": "tests/ui/offset-of/auxiliary/offset-of-staged-api.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Fauxiliary%2Foffset-of-staged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Fauxiliary%2Foffset-of-staged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Fauxiliary%2Foffset-of-staged-api.rs?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -0,0 +1,33 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0\")]\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+pub struct Unstable {\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    pub unstable: u8,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0\")]\n+pub struct Stable {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0\")]\n+    pub stable: u8,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0\")]\n+pub struct StableWithUnstableField {\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    pub unstable: u8,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0\")]\n+pub struct StableWithUnstableFieldType {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0\")]\n+    pub stable: Unstable,\n+}\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+pub struct UnstableWithStableFieldType {\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    pub unstable: Stable,\n+}"}, {"sha": "a0269ca2d125168fe3e0e51ca9ce9ce662be4fde", "filename": "tests/ui/offset-of/offset-of-dst-field.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -1,14 +1,33 @@\n-#![feature(offset_of)]\n+#![feature(offset_of, extern_types)]\n \n use std::mem::offset_of;\n \n-#[repr(C)]\n-struct Foo {\n+struct Alpha {\n     x: u8,\n     y: u16,\n-    slice: [u8],\n+    z: [u8],\n+}\n+\n+trait Trait {}\n+\n+struct Beta {\n+    x: u8,\n+    y: u16,\n+    z: dyn Trait,\n+}\n+\n+extern {\n+    type Extern;\n+}\n+\n+struct Gamma {\n+    x: u8,\n+    y: u16,\n+    z: Extern,\n }\n \n fn main() {\n-    offset_of!(Foo, slice); //~ ERROR the size for values of type\n+    offset_of!(Alpha, z); //~ ERROR the size for values of type\n+    offset_of!(Beta, z); //~ ERROR the size for values of type\n+    offset_of!(Gamma, z); //~ ERROR the size for values of type\n }"}, {"sha": "8e88015b07a74606b19d0c3afddff24d1db3603b", "filename": "tests/ui/offset-of/offset-of-dst-field.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -1,11 +1,27 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:13:5\n+  --> $DIR/offset-of-dst-field.rs:30:5\n    |\n-LL |     offset_of!(Foo, slice);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL |     offset_of!(Alpha, z);\n+   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n \n-error: aborting due to previous error\n+error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:31:5\n+   |\n+LL |     offset_of!(Beta, z);\n+   |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n+\n+error[E0277]: the size for values of type `Extern` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:32:5\n+   |\n+LL |     offset_of!(Gamma, z);\n+   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `Extern`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d73505821ff5341ff54131c735e6a6b8cfd92ee4", "filename": "tests/ui/offset-of/offset-of-enum.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-enum.rs?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -0,0 +1,13 @@\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+enum Alpha {\n+    One(u8),\n+    Two(u8),\n+}\n+\n+fn main() {\n+    offset_of!(Alpha::One, 0); //~ ERROR expected type, found variant `Alpha::One`\n+    offset_of!(Alpha, Two.0); //~ ERROR no field `Two` on type `Alpha`\n+}"}, {"sha": "6958d199fbdb4b1c9da13f7275bf950098d4a3f7", "filename": "tests/ui/offset-of/offset-of-enum.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-enum.stderr?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -0,0 +1,19 @@\n+error[E0573]: expected type, found variant `Alpha::One`\n+  --> $DIR/offset-of-enum.rs:11:16\n+   |\n+LL |     offset_of!(Alpha::One, 0);\n+   |                ^^^^^^^^^^\n+   |                |\n+   |                not a type\n+   |                help: try using the variant's enum: `Alpha`\n+\n+error[E0609]: no field `Two` on type `Alpha`\n+  --> $DIR/offset-of-enum.rs:12:23\n+   |\n+LL |     offset_of!(Alpha, Two.0);\n+   |                       ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0573, E0609.\n+For more information about an error, try `rustc --explain E0573`."}, {"sha": "7d2eb46c056eba68ace92fd0f61c0dcfd5a55396", "filename": "tests/ui/offset-of/offset-of-unstable-with-feature.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-unstable-with-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-unstable-with-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-unstable-with-feature.rs?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+// aux-build:offset-of-staged-api.rs\n+\n+#![feature(offset_of, unstable_test_feature)]\n+\n+use std::mem::offset_of;\n+\n+extern crate offset_of_staged_api;\n+\n+use offset_of_staged_api::*;\n+\n+fn main() {\n+    offset_of!(Unstable, unstable);\n+    offset_of!(Stable, stable);\n+    offset_of!(StableWithUnstableField, unstable);\n+    offset_of!(StableWithUnstableFieldType, stable);\n+    offset_of!(StableWithUnstableFieldType, stable.unstable);\n+    offset_of!(UnstableWithStableFieldType, unstable);\n+    offset_of!(UnstableWithStableFieldType, unstable.stable);\n+}"}, {"sha": "1e19f2091f29f0e5b70a68d9397360edf6a385ae", "filename": "tests/ui/offset-of/offset-of-unstable.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-unstable.rs?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -0,0 +1,31 @@\n+// aux-build:offset-of-staged-api.rs\n+\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+extern crate offset_of_staged_api;\n+\n+use offset_of_staged_api::*;\n+\n+fn main() {\n+    offset_of!(\n+        //~^ ERROR use of unstable library feature\n+        Unstable, //~ ERROR use of unstable library feature\n+        unstable\n+    );\n+    offset_of!(Stable, stable);\n+    offset_of!(StableWithUnstableField, unstable); //~ ERROR use of unstable library feature\n+    offset_of!(StableWithUnstableFieldType, stable);\n+    offset_of!(StableWithUnstableFieldType, stable.unstable); //~ ERROR use of unstable library feature\n+    offset_of!(\n+        //~^ ERROR use of unstable library feature\n+        UnstableWithStableFieldType, //~ ERROR use of unstable library feature\n+        unstable\n+    );\n+    offset_of!(\n+        //~^ ERROR use of unstable library feature\n+        UnstableWithStableFieldType, //~ ERROR use of unstable library feature\n+        unstable.stable\n+    );\n+}"}, {"sha": "25811a061d7f01491232b2dd2c6709b164ac4d1c", "filename": "tests/ui/offset-of/offset-of-unstable.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a642563d490e6f15353b88881abe4b3b9ae5b9f4/tests%2Fui%2Foffset-of%2Foffset-of-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-unstable.stderr?ref=a642563d490e6f15353b88881abe4b3b9ae5b9f4", "patch": "@@ -0,0 +1,79 @@\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/offset-of-unstable.rs:14:9\n+   |\n+LL |         Unstable,\n+   |         ^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/offset-of-unstable.rs:23:9\n+   |\n+LL |         UnstableWithStableFieldType,\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/offset-of-unstable.rs:28:9\n+   |\n+LL |         UnstableWithStableFieldType,\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/offset-of-unstable.rs:12:5\n+   |\n+LL | /     offset_of!(\n+LL | |\n+LL | |         Unstable,\n+LL | |         unstable\n+LL | |     );\n+   | |_____^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/offset-of-unstable.rs:18:5\n+   |\n+LL |     offset_of!(StableWithUnstableField, unstable);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/offset-of-unstable.rs:20:5\n+   |\n+LL |     offset_of!(StableWithUnstableFieldType, stable.unstable);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/offset-of-unstable.rs:21:5\n+   |\n+LL | /     offset_of!(\n+LL | |\n+LL | |         UnstableWithStableFieldType,\n+LL | |         unstable\n+LL | |     );\n+   | |_____^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/offset-of-unstable.rs:26:5\n+   |\n+LL | /     offset_of!(\n+LL | |\n+LL | |         UnstableWithStableFieldType,\n+LL | |         unstable.stable\n+LL | |     );\n+   | |_____^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}