{"sha": "94aa3a7b1af7b756139e6c2d8384beb57daa6190", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YWEzYTdiMWFmN2I3NTYxMzllNmMyZDgzODRiZWI1N2RhYTYxOTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-22T13:20:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T13:20:07Z"}, "message": "Merge #8141\n\n8141: Don't suggest long looping paths for imports r=matklad a=SomeoneToIgnore\n\nFixes https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/name.3A.3Aname.3A.3Aname.3A.3Aname.3A.3Aname\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "830fcf06727d8c4adbaf4cf19a07d1081232d31d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/830fcf06727d8c4adbaf4cf19a07d1081232d31d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94aa3a7b1af7b756139e6c2d8384beb57daa6190", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWJmHCRBK7hj4Ov3rIwAAdHIIAI2QAHPIfaJoTh4Enpn2Ozj4\nvOZGWF+Zmu3onywyo4bCYfx7kBYIWfmwOyN2ycvSH2D2pzCzWo614lJhjshHUDhs\ni2cpiS5S7yxp9q/XkcBduEQo/xC33qYUB8ljd0SoYc5nwnfG5RrE/wntwHebwRxM\nX2mUxMog604MpzK+jlIQ0ohdlHz4knF0qZ0m8EpDpyC1P/l6zjzfnUIZf9QEw1qf\nNFZ3BUcjaoLz32l+J8LQGdBtBexvyyYhcviLAz+ztLyP+fr9rUOpJnwe5Xw4W35x\nDT0SsUOqaElm0cA2lv27lA3VRL/tWvHVwxppk0kg+GwwDif1x29Wwa9qk51hb/s=\n=yJuq\n-----END PGP SIGNATURE-----\n", "payload": "tree 830fcf06727d8c4adbaf4cf19a07d1081232d31d\nparent d4fa6721afacec78a750df1bb1f0e7e950eaf73c\nparent 129353255cf7cf103dc593407f3aac1f606827b0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616419207 +0000\ncommitter GitHub <noreply@github.com> 1616419207 +0000\n\nMerge #8141\n\n8141: Don't suggest long looping paths for imports r=matklad a=SomeoneToIgnore\n\nFixes https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/name.3A.3Aname.3A.3Aname.3A.3Aname.3A.3Aname\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94aa3a7b1af7b756139e6c2d8384beb57daa6190", "html_url": "https://github.com/rust-lang/rust/commit/94aa3a7b1af7b756139e6c2d8384beb57daa6190", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94aa3a7b1af7b756139e6c2d8384beb57daa6190/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "html_url": "https://github.com/rust-lang/rust/commit/d4fa6721afacec78a750df1bb1f0e7e950eaf73c"}, {"sha": "129353255cf7cf103dc593407f3aac1f606827b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/129353255cf7cf103dc593407f3aac1f606827b0", "html_url": "https://github.com/rust-lang/rust/commit/129353255cf7cf103dc593407f3aac1f606827b0"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "109d3552f6a2f387ff44dfa4c8fb4bd702219512", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/94aa3a7b1af7b756139e6c2d8384beb57daa6190/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94aa3a7b1af7b756139e6c2d8384beb57daa6190/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=94aa3a7b1af7b756139e6c2d8384beb57daa6190", "patch": "@@ -18,7 +18,8 @@ use crate::{\n /// *from where* you're referring to the item, hence the `from` parameter.\n pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n     let _p = profile::span(\"find_path\");\n-    find_path_inner(db, item, from, MAX_PATH_LEN, None)\n+    let mut visited_modules = FxHashSet::default();\n+    find_path_inner(db, item, from, MAX_PATH_LEN, None, &mut visited_modules)\n }\n \n pub fn find_path_prefixed(\n@@ -28,7 +29,8 @@ pub fn find_path_prefixed(\n     prefix_kind: PrefixKind,\n ) -> Option<ModPath> {\n     let _p = profile::span(\"find_path_prefixed\");\n-    find_path_inner(db, item, from, MAX_PATH_LEN, Some(prefix_kind))\n+    let mut visited_modules = FxHashSet::default();\n+    find_path_inner(db, item, from, MAX_PATH_LEN, Some(prefix_kind), &mut visited_modules)\n }\n \n const MAX_PATH_LEN: usize = 15;\n@@ -97,6 +99,7 @@ fn find_path_inner(\n     from: ModuleId,\n     max_len: usize,\n     mut prefixed: Option<PrefixKind>,\n+    visited_modules: &mut FxHashSet<ModuleId>,\n ) -> Option<ModPath> {\n     if max_len == 0 {\n         return None;\n@@ -176,15 +179,18 @@ fn find_path_inner(\n     if item.krate(db) == Some(from.krate) {\n         // Item was defined in the same crate that wants to import it. It cannot be found in any\n         // dependency in this case.\n-\n-        let local_imports = find_local_import_locations(db, item, from);\n-        for (module_id, name) in local_imports {\n+        for (module_id, name) in find_local_import_locations(db, item, from) {\n+            if !visited_modules.insert(module_id) {\n+                cov_mark::hit!(recursive_imports);\n+                continue;\n+            }\n             if let Some(mut path) = find_path_inner(\n                 db,\n                 ItemInNs::Types(ModuleDefId::ModuleId(module_id)),\n                 from,\n                 best_path_len - 1,\n                 prefixed,\n+                visited_modules,\n             ) {\n                 path.push_segment(name);\n \n@@ -213,6 +219,7 @@ fn find_path_inner(\n                     from,\n                     best_path_len - 1,\n                     prefixed,\n+                    visited_modules,\n                 )?;\n                 cov_mark::hit!(partially_imported);\n                 path.push_segment(info.path.segments.last().unwrap().clone());\n@@ -391,8 +398,15 @@ mod tests {\n             .take_types()\n             .unwrap();\n \n-        let found_path =\n-            find_path_inner(&db, ItemInNs::Types(resolved), module, MAX_PATH_LEN, prefix_kind);\n+        let mut visited_modules = FxHashSet::default();\n+        let found_path = find_path_inner(\n+            &db,\n+            ItemInNs::Types(resolved),\n+            module,\n+            MAX_PATH_LEN,\n+            prefix_kind,\n+            &mut visited_modules,\n+        );\n         assert_eq!(found_path, Some(mod_path), \"{:?}\", prefix_kind);\n     }\n \n@@ -878,4 +892,32 @@ mod tests {\n             \"self::module::CompleteMe\",\n         )\n     }\n+\n+    #[test]\n+    fn recursive_pub_mod_reexport() {\n+        cov_mark::check!(recursive_imports);\n+        check_found_path(\n+            r#\"\n+fn main() {\n+    let _ = 22_i32.as_name$0();\n+}\n+\n+pub mod name {\n+    pub trait AsName {\n+        fn as_name(&self) -> String;\n+    }\n+    impl AsName for i32 {\n+        fn as_name(&self) -> String {\n+            format!(\"Name: {}\", self)\n+        }\n+    }\n+    pub use crate::name;\n+}\n+\"#,\n+            \"name::AsName\",\n+            \"name::AsName\",\n+            \"crate::name::AsName\",\n+            \"self::name::AsName\",\n+        );\n+    }\n }"}]}