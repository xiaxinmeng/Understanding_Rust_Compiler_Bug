{"sha": "3d86aac990c0310726da05fe1fdb5827ccfc495d", "node_id": "C_kwDOAAsO6NoAKDNkODZhYWM5OTBjMDMxMDcyNmRhMDVmZTFmZGI1ODI3Y2NmYzQ5NWQ", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T01:05:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T01:05:20Z"}, "message": "Rollup merge of #88782 - asquared31415:issue-79559, r=cjgillot\n\nFix ICE when `start` lang item has wrong generics\n\nIn my previous pr #87875 I missed the requirements on the `start` lang item due to its relative difficulty to test and opting for more conservative estimates.  This fixes that by updating the requirement to be exactly one generic type.\n\nThe `start` lang item should have exactly one generic type for the return type of the `main` fn ptr passed to it.  I believe having zero would previously *sometimes* compile (often with the use of `fn() -> ()` as the fn ptr but it was likely UB to call if the return type of `main` was not `()` as far as I know) however it also sometimes would not for various errors including ICEs and LLVM errors depending on exact situations.  Having more than 1 generic has always failed with an ICE because only the one generic type is expected and provided.\n\nFixes #79559, fixes #73584, fixes #83117 (all duplicates)\nRelevant to #9307\n\nr? ````@cjgillot````", "tree": {"sha": "9ba031dca8c5f71eab1ca2146ecfe1d95bddd47f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ba031dca8c5f71eab1ca2146ecfe1d95bddd47f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d86aac990c0310726da05fe1fdb5827ccfc495d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVl7QCRBK7hj4Ov3rIwAAlygIAIZlienwJpF89cOBbyAqUeIR\nJK94QAIkpE+1fLCERR5HYkwIyTiJR1TEH41jLLrFxHtbXIXxyL4fWoSXOqlwI6n8\nhAz3+iz2nUhKsMR5hjAE07NzkaQq6oqG1vain5m6liu4ML0NfJ7yjdwMi1rwtTD+\n6kTeQvLEnSgFqxRZRvDG9utCfa2fN0m2IYIt0MCLkLSMb1jgzD6U5yPBLaWD9m9z\n+b8aCd7FgdlWOFMGeCENzvjjbdCc1a0J70qbxY4w95GCe9kCgKBcP6MozpQMLmhT\ncWXDy/D+co7ex8rWlhOd+l1RZIwXlzSKS9Moh2KQCiCmJsoRPEGyOhGyZaMgZgw=\n=Nm7u\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ba031dca8c5f71eab1ca2146ecfe1d95bddd47f\nparent aa7aca3b954131720df725e70d12e902eb3be1de\nparent 05460d0efcf16ed1c437c721beafd65babd7c1ef\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633050320 -0700\ncommitter GitHub <noreply@github.com> 1633050320 -0700\n\nRollup merge of #88782 - asquared31415:issue-79559, r=cjgillot\n\nFix ICE when `start` lang item has wrong generics\n\nIn my previous pr #87875 I missed the requirements on the `start` lang item due to its relative difficulty to test and opting for more conservative estimates.  This fixes that by updating the requirement to be exactly one generic type.\n\nThe `start` lang item should have exactly one generic type for the return type of the `main` fn ptr passed to it.  I believe having zero would previously *sometimes* compile (often with the use of `fn() -> ()` as the fn ptr but it was likely UB to call if the return type of `main` was not `()` as far as I know) however it also sometimes would not for various errors including ICEs and LLVM errors depending on exact situations.  Having more than 1 generic has always failed with an ICE because only the one generic type is expected and provided.\n\nFixes #79559, fixes #73584, fixes #83117 (all duplicates)\nRelevant to #9307\n\nr? ````@cjgillot````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d86aac990c0310726da05fe1fdb5827ccfc495d", "html_url": "https://github.com/rust-lang/rust/commit/3d86aac990c0310726da05fe1fdb5827ccfc495d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d86aac990c0310726da05fe1fdb5827ccfc495d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa7aca3b954131720df725e70d12e902eb3be1de", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7aca3b954131720df725e70d12e902eb3be1de", "html_url": "https://github.com/rust-lang/rust/commit/aa7aca3b954131720df725e70d12e902eb3be1de"}, {"sha": "05460d0efcf16ed1c437c721beafd65babd7c1ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/05460d0efcf16ed1c437c721beafd65babd7c1ef", "html_url": "https://github.com/rust-lang/rust/commit/05460d0efcf16ed1c437c721beafd65babd7c1ef"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "814054c551878a47a47c861ea3b0c6ce244580ea", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d86aac990c0310726da05fe1fdb5827ccfc495d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d86aac990c0310726da05fe1fdb5827ccfc495d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=3d86aac990c0310726da05fe1fdb5827ccfc495d", "patch": "@@ -300,7 +300,7 @@ language_item_table! {\n     Oom,                     sym::oom,                 oom,                        Target::Fn,             GenericRequirement::None;\n     AllocLayout,             sym::alloc_layout,        alloc_layout,               Target::Struct,         GenericRequirement::None;\n \n-    Start,                   sym::start,               start_fn,                   Target::Fn,             GenericRequirement::None;\n+    Start,                   sym::start,               start_fn,                   Target::Fn,             GenericRequirement::Exact(1);\n \n     EhPersonality,           sym::eh_personality,      eh_personality,             Target::Fn,             GenericRequirement::None;\n     EhCatchTypeinfo,         sym::eh_catch_typeinfo,   eh_catch_typeinfo,          Target::Static,         GenericRequirement::None;"}, {"sha": "d576a1dd28192a15b75a337c7694afb2ffb34b09", "filename": "src/test/run-make-fulldeps/target-specs/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs?ref=3d86aac990c0310726da05fe1fdb5827ccfc495d", "patch": "@@ -11,7 +11,7 @@ trait Sized {}\n auto trait Freeze {}\n \n #[lang = \"start\"]\n-fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -> isize {\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n     0\n }\n "}, {"sha": "c0b958f2bf22195d1880bd50af08b8d4e6af5bd4", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs?ref=3d86aac990c0310726da05fe1fdb5827ccfc495d", "patch": "@@ -1,9 +1,8 @@\n-// Checks whether declaring a lang item with the wrong number\n-// of generic arguments crashes the compiler (issue #83893, #87573, and part of #9307).\n+// Checks that declaring a lang item with the wrong number\n+// of generic arguments errors rather than crashing (issue #83893, #87573, part of #9307, #79559).\n \n #![feature(lang_items, no_core)]\n #![no_core]\n-#![crate_type = \"lib\"]\n \n #[lang = \"sized\"]\n trait MySized {}\n@@ -26,6 +25,14 @@ struct MyPhantomData<T, U>;\n //~^ ERROR parameter `T` is never used\n //~| ERROR parameter `U` is never used\n \n+// When the `start` lang item is missing generics very odd things can happen, especially when\n+// it comes to cross-crate monomorphization\n+#[lang = \"start\"]\n+//~^ ERROR `start` language item must be applied to a function with 1 generic argument [E0718]\n+fn start(_: *const u8, _: isize, _: *const *const u8) -> isize {\n+    0\n+}\n+\n fn ice() {\n     // Use add\n     let r = 5;\n@@ -42,3 +49,6 @@ fn ice() {\n     // Use phantomdata\n     let _ = MyPhantomData::<(), i32>;\n }\n+\n+// use `start`\n+fn main() {}"}, {"sha": "df5a77850f14d866d6cccd22d1c8b8d9e87cc3dd", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr?ref=3d86aac990c0310726da05fe1fdb5827ccfc495d", "patch": "@@ -1,13 +1,13 @@\n error[E0718]: `add` language item must be applied to a trait with 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:11:1\n+  --> $DIR/lang-item-generic-requirements.rs:10:1\n    |\n LL | #[lang = \"add\"]\n    | ^^^^^^^^^^^^^^^\n LL | trait MyAdd<'a, T> {}\n    |            ------- this trait has 2 generic arguments\n \n error[E0718]: `drop_in_place` language item must be applied to a function with at least 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:15:1\n+  --> $DIR/lang-item-generic-requirements.rs:14:1\n    |\n LL | #[lang = \"drop_in_place\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,24 +16,33 @@ LL | fn my_ptr_drop() {}\n    |               - this function has 0 generic arguments\n \n error[E0718]: `index` language item must be applied to a trait with 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:19:1\n+  --> $DIR/lang-item-generic-requirements.rs:18:1\n    |\n LL | #[lang = \"index\"]\n    | ^^^^^^^^^^^^^^^^^\n LL | trait MyIndex<'a, T> {}\n    |              ------- this trait has 2 generic arguments\n \n error[E0718]: `phantom_data` language item must be applied to a struct with 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:23:1\n+  --> $DIR/lang-item-generic-requirements.rs:22:1\n    |\n LL | #[lang = \"phantom_data\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL | struct MyPhantomData<T, U>;\n    |                     ------ this struct has 2 generic arguments\n \n+error[E0718]: `start` language item must be applied to a function with 1 generic argument\n+  --> $DIR/lang-item-generic-requirements.rs:30:1\n+   |\n+LL | #[lang = \"start\"]\n+   | ^^^^^^^^^^^^^^^^^\n+LL |\n+LL | fn start(_: *const u8, _: isize, _: *const *const u8) -> isize {\n+   |         - this function has 0 generic arguments\n+\n error[E0392]: parameter `T` is never used\n-  --> $DIR/lang-item-generic-requirements.rs:25:22\n+  --> $DIR/lang-item-generic-requirements.rs:24:22\n    |\n LL | struct MyPhantomData<T, U>;\n    |                      ^ unused parameter\n@@ -42,15 +51,15 @@ LL | struct MyPhantomData<T, U>;\n    = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error[E0392]: parameter `U` is never used\n-  --> $DIR/lang-item-generic-requirements.rs:25:25\n+  --> $DIR/lang-item-generic-requirements.rs:24:25\n    |\n LL | struct MyPhantomData<T, U>;\n    |                         ^ unused parameter\n    |\n    = help: consider removing `U` or referring to it in a field\n    = help: if you intended `U` to be a const parameter, use `const U: usize` instead\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0392, E0718.\n For more information about an error, try `rustc --explain E0392`."}, {"sha": "1ed78547a60cd49a40f20493f9fcf964a3bc695c", "filename": "src/tools/clippy/tests/ui/def_id_nocore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.rs?ref=3d86aac990c0310726da05fe1fdb5827ccfc495d", "patch": "@@ -15,11 +15,12 @@ pub trait Copy {}\n pub unsafe trait Freeze {}\n \n #[lang = \"start\"]\n-#[start]\n-fn start(_argc: isize, _argv: *const *const u8) -> isize {\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n     0\n }\n \n+fn main() {}\n+\n struct A;\n \n impl A {"}, {"sha": "6210d7c6cfd80c1d32369494f3010694b606dc65", "filename": "src/tools/clippy/tests/ui/def_id_nocore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d86aac990c0310726da05fe1fdb5827ccfc495d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.stderr?ref=3d86aac990c0310726da05fe1fdb5827ccfc495d", "patch": "@@ -1,5 +1,5 @@\n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/def_id_nocore.rs:26:19\n+  --> $DIR/def_id_nocore.rs:27:19\n    |\n LL |     pub fn as_ref(self) -> &'static str {\n    |                   ^^^^"}]}