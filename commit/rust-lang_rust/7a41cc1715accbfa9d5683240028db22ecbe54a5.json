{"sha": "7a41cc1715accbfa9d5683240028db22ecbe54a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNDFjYzE3MTVhY2NiZmE5ZDU2ODMyNDAwMjhkYjIyZWNiZTU0YTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:10:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:10:12Z"}, "message": "typeck/expr.rs: extract out check_expr_return.", "tree": {"sha": "aeea67ab31b179e31c7e94af8ad3e103773aec66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeea67ab31b179e31c7e94af8ad3e103773aec66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a41cc1715accbfa9d5683240028db22ecbe54a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a41cc1715accbfa9d5683240028db22ecbe54a5", "html_url": "https://github.com/rust-lang/rust/commit/7a41cc1715accbfa9d5683240028db22ecbe54a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a41cc1715accbfa9d5683240028db22ecbe54a5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74dd65edfe640e0c37979031abfb1a8ad2b7785b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74dd65edfe640e0c37979031abfb1a8ad2b7785b", "html_url": "https://github.com/rust-lang/rust/commit/74dd65edfe640e0c37979031abfb1a8ad2b7785b"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "7f8d98b21e1fedf9b570252e6afef856629fab8f", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7a41cc1715accbfa9d5683240028db22ecbe54a5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a41cc1715accbfa9d5683240028db22ecbe54a5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=7a41cc1715accbfa9d5683240028db22ecbe54a5", "patch": "@@ -87,40 +87,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             ExprKind::Ret(ref expr_opt) => {\n-                if self.ret_coercion.is_none() {\n-                    struct_span_err!(self.tcx.sess, expr.span, E0572,\n-                                     \"return statement outside of function body\").emit();\n-                } else if let Some(ref e) = *expr_opt {\n-                    if self.ret_coercion_span.borrow().is_none() {\n-                        *self.ret_coercion_span.borrow_mut() = Some(e.span);\n-                    }\n-                    self.check_return_expr(e);\n-                } else {\n-                    let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n-                    if self.ret_coercion_span.borrow().is_none() {\n-                        *self.ret_coercion_span.borrow_mut() = Some(expr.span);\n-                    }\n-                    let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n-                    if let Some((fn_decl, _)) = self.get_fn_decl(expr.hir_id) {\n-                        coercion.coerce_forced_unit(\n-                            self,\n-                            &cause,\n-                            &mut |db| {\n-                                db.span_label(\n-                                    fn_decl.output.span(),\n-                                    format!(\n-                                        \"expected `{}` because of this return type\",\n-                                        fn_decl.output,\n-                                    ),\n-                                );\n-                            },\n-                            true,\n-                        );\n-                    } else {\n-                        coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n-                    }\n-                }\n-                tcx.types.never\n+                self.check_expr_return(expr_opt.deref(), expr)\n             }\n             ExprKind::Assign(ref lhs, ref rhs) => {\n                 self.check_assign(expr, expected, lhs, rhs)\n@@ -734,4 +701,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tcx.types.err\n         }\n     }\n+\n+    fn check_expr_return(\n+        &self,\n+        expr_opt: Option<&'tcx hir::Expr>,\n+        expr: &'tcx hir::Expr\n+    ) -> Ty<'tcx> {\n+        if self.ret_coercion.is_none() {\n+            struct_span_err!(self.tcx.sess, expr.span, E0572,\n+                                \"return statement outside of function body\").emit();\n+        } else if let Some(ref e) = expr_opt {\n+            if self.ret_coercion_span.borrow().is_none() {\n+                *self.ret_coercion_span.borrow_mut() = Some(e.span);\n+            }\n+            self.check_return_expr(e);\n+        } else {\n+            let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n+            if self.ret_coercion_span.borrow().is_none() {\n+                *self.ret_coercion_span.borrow_mut() = Some(expr.span);\n+            }\n+            let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n+            if let Some((fn_decl, _)) = self.get_fn_decl(expr.hir_id) {\n+                coercion.coerce_forced_unit(\n+                    self,\n+                    &cause,\n+                    &mut |db| {\n+                        db.span_label(\n+                            fn_decl.output.span(),\n+                            format!(\n+                                \"expected `{}` because of this return type\",\n+                                fn_decl.output,\n+                            ),\n+                        );\n+                    },\n+                    true,\n+                );\n+            } else {\n+                coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n+            }\n+        }\n+        self.tcx.types.never\n+    }\n }"}]}