{"sha": "a53242a1a38301b4a40be71fcd182568b7ee91b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MzI0MmExYTM4MzAxYjRhNDBiZTcxZmNkMTgyNTY4YjdlZTkxYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-13T02:21:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-13T02:21:44Z"}, "message": "auto merge of #12756 : pongad/rust/remove_owned_str_pat, r=alexcrichton\n\nmatch-drop-strs-issue-4541.rs deleted as it's the same with issue-4541.rs", "tree": {"sha": "86001b14271c4107e54f73af6a7fe50db580c7b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86001b14271c4107e54f73af6a7fe50db580c7b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a53242a1a38301b4a40be71fcd182568b7ee91b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a53242a1a38301b4a40be71fcd182568b7ee91b6", "html_url": "https://github.com/rust-lang/rust/commit/a53242a1a38301b4a40be71fcd182568b7ee91b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a53242a1a38301b4a40be71fcd182568b7ee91b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eebeb81372e320510a1c1e2eef96eb5146a1e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eebeb81372e320510a1c1e2eef96eb5146a1e1f", "html_url": "https://github.com/rust-lang/rust/commit/2eebeb81372e320510a1c1e2eef96eb5146a1e1f"}, {"sha": "f079c94f723f8c67319da8c727324b2011d7b36f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f079c94f723f8c67319da8c727324b2011d7b36f", "html_url": "https://github.com/rust-lang/rust/commit/f079c94f723f8c67319da8c727324b2011d7b36f"}], "stats": {"total": 167, "additions": 57, "deletions": 110}, "files": [{"sha": "5f8c63d60715abd68a32513ce2de87de7c44de50", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -191,13 +191,13 @@ pub fn opt_str2(maybestr: Option<~str>) -> ~str {\n }\n \n pub fn str_mode(s: ~str) -> mode {\n-    match s {\n-      ~\"compile-fail\" => mode_compile_fail,\n-      ~\"run-fail\" => mode_run_fail,\n-      ~\"run-pass\" => mode_run_pass,\n-      ~\"pretty\" => mode_pretty,\n-      ~\"debug-info\" => mode_debug_info,\n-      ~\"codegen\" => mode_codegen,\n+    match s.as_slice() {\n+      \"compile-fail\" => mode_compile_fail,\n+      \"run-fail\" => mode_run_fail,\n+      \"run-pass\" => mode_run_pass,\n+      \"pretty\" => mode_pretty,\n+      \"debug-info\" => mode_debug_info,\n+      \"codegen\" => mode_codegen,\n       _ => fail!(\"invalid mode\")\n     }\n }"}, {"sha": "b1c432ec50d573994916badf9c36606f10768204", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -38,9 +38,9 @@ use test::MetricMap;\n \n pub fn run(config: config, testfile: ~str) {\n \n-    match config.target {\n+    match config.target.as_slice() {\n \n-        ~\"arm-linux-androideabi\" => {\n+        \"arm-linux-androideabi\" => {\n             if !config.adb_device_status {\n                 fail!(\"android device not available\");\n             }\n@@ -277,8 +277,8 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n     let exe_file = make_exe_name(config, testfile);\n \n     let mut proc_args;\n-    match config.target {\n-        ~\"arm-linux-androideabi\" => {\n+    match config.target.as_slice() {\n+        \"arm-linux-androideabi\" => {\n \n             cmds = cmds.replace(\"run\",\"continue\");\n \n@@ -682,9 +682,9 @@ fn exec_compiled_test(config: &config, props: &TestProps,\n \n     let env = props.exec_env.clone();\n \n-    match config.target {\n+    match config.target.as_slice() {\n \n-        ~\"arm-linux-androideabi\" => {\n+        \"arm-linux-androideabi\" => {\n             _arm_exec_compiled_test(config, props, testfile, env)\n         }\n \n@@ -735,9 +735,9 @@ fn compose_and_run_compiler(\n                 &auxres);\n         }\n \n-        match config.target {\n+        match config.target.as_slice() {\n \n-            ~\"arm-linux-androideabi\" => {\n+            \"arm-linux-androideabi\" => {\n                 _arm_push_aux_shared_library(config, testfile);\n             }\n "}, {"sha": "6f2934d9138a04062d8a5bcbe8357f102d51c4a3", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -880,7 +880,6 @@ pub fn build_session_options(matches: &getopts::Matches)\n         }\n     };\n     let gc = debugging_opts & session::GC != 0;\n-\n     let debuginfo = if matches.opt_present(\"g\") {\n         if matches.opt_present(\"debuginfo\") {\n             early_error(\"-g and --debuginfo both provided\");"}, {"sha": "d42a611053f914618e2be3672a3e5a1d79a2208f", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -137,7 +137,7 @@ impl Item {\n     pub fn doc_list<'a>(&'a self) -> Option<&'a [Attribute]> {\n         for attr in self.attrs.iter() {\n             match *attr {\n-                List(~\"doc\", ref list) => { return Some(list.as_slice()); }\n+                List(ref x, ref list) if \"doc\" == *x => { return Some(list.as_slice()); }\n                 _ => {}\n             }\n         }\n@@ -149,7 +149,7 @@ impl Item {\n     pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n         for attr in self.attrs.iter() {\n             match *attr {\n-                NameValue(~\"doc\", ref v) => { return Some(v.as_slice()); }\n+                NameValue(ref x, ref v) if \"doc\" == *x => { return Some(v.as_slice()); }\n                 _ => {}\n             }\n         }"}, {"sha": "9a7d00195d40d1adc6ee6fd990279b286462bfe1", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -357,7 +357,8 @@ impl fmt::Show for clean::Type {\n                 write!(f.buf, \"{}{}fn{}{}\",\n                        PuritySpace(decl.purity),\n                        match decl.abi {\n-                           ~\"\" | ~\"\\\"Rust\\\"\" => ~\"\",\n+                           ref x if \"\" == *x => ~\"\",\n+                           ref x if \"\\\"Rust\\\"\" == *x => ~\"\",\n                            ref s => \" \" + *s + \" \",\n                        },\n                        decl.generics,"}, {"sha": "1ebb51cb65e9f7299a2d953a61f3325a3926e826", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -225,13 +225,13 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n         Some(attrs) => {\n             for attr in attrs.iter() {\n                 match *attr {\n-                    clean::NameValue(~\"html_favicon_url\", ref s) => {\n+                    clean::NameValue(ref x, ref s) if \"html_favicon_url\" == *x => {\n                         cx.layout.favicon = s.to_owned();\n                     }\n-                    clean::NameValue(~\"html_logo_url\", ref s) => {\n+                    clean::NameValue(ref x, ref s) if \"html_logo_url\" == *x => {\n                         cx.layout.logo = s.to_owned();\n                     }\n-                    clean::Word(~\"html_no_source\") => {\n+                    clean::Word(ref x) if \"html_no_source\" == *x => {\n                         cx.include_sources = false;\n                     }\n                     _ => {}\n@@ -396,10 +396,10 @@ fn extern_location(e: &clean::ExternalCrate, dst: &Path) -> ExternalLocation {\n     // external crate\n     for attr in e.attrs.iter() {\n         match *attr {\n-            clean::List(~\"doc\", ref list) => {\n+            clean::List(ref x, ref list) if \"doc\" == *x => {\n                 for attr in list.iter() {\n                     match *attr {\n-                        clean::NameValue(~\"html_root_url\", ref s) => {\n+                        clean::NameValue(ref x, ref s) if \"html_root_url\" == *x => {\n                             if s.ends_with(\"/\") {\n                                 return Remote(s.to_owned());\n                             }\n@@ -666,7 +666,7 @@ impl DocFolder for Cache {\n                                 // extract relevant documentation for this impl\n                                 match attrs.move_iter().find(|a| {\n                                     match *a {\n-                                        clean::NameValue(~\"doc\", _) => true,\n+                                        clean::NameValue(ref x, _) if \"doc\" == *x => true,\n                                         _ => false\n                                     }\n                                 }) {"}, {"sha": "e6b4e2c09430803c0cebe8fe3914058f1ed8ce91", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -195,14 +195,14 @@ pub fn main_args(args: &[~str]) -> int {\n \n     info!(\"going to format\");\n     let started = time::precise_time_ns();\n-    match matches.opt_str(\"w\") {\n-        Some(~\"html\") | None => {\n+    match matches.opt_str(\"w\").as_ref().map(|s| s.as_slice()) {\n+        Some(\"html\") | None => {\n             match html::render::run(krate, output.unwrap_or(Path::new(\"doc\"))) {\n                 Ok(()) => {}\n                 Err(e) => fail!(\"failed to generate documentation: {}\", e),\n             }\n         }\n-        Some(~\"json\") => {\n+        Some(\"json\") => {\n             match json_output(krate, res, output.unwrap_or(Path::new(\"doc.json\"))) {\n                 Ok(()) => {}\n                 Err(e) => fail!(\"failed to write json: {}\", e),\n@@ -223,9 +223,9 @@ pub fn main_args(args: &[~str]) -> int {\n /// and files and then generates the necessary rustdoc output for formatting.\n fn acquire_input(input: &str,\n                  matches: &getopts::Matches) -> Result<Output, ~str> {\n-    match matches.opt_str(\"r\") {\n-        Some(~\"rust\") => Ok(rust_input(input, matches)),\n-        Some(~\"json\") => json_input(input),\n+    match matches.opt_str(\"r\").as_ref().map(|s| s.as_slice()) {\n+        Some(\"rust\") => Ok(rust_input(input, matches)),\n+        Some(\"json\") => json_input(input),\n         Some(s) => Err(\"unknown input format: \" + s),\n         None => {\n             if input.ends_with(\".json\") {\n@@ -265,15 +265,15 @@ fn rust_input(cratefile: &str, matches: &getopts::Matches) -> Output {\n         Some(nested) => {\n             for inner in nested.iter() {\n                 match *inner {\n-                    clean::Word(~\"no_default_passes\") => {\n+                    clean::Word(ref x) if \"no_default_passes\" == *x => {\n                         default_passes = false;\n                     }\n-                    clean::NameValue(~\"passes\", ref value) => {\n+                    clean::NameValue(ref x, ref value) if \"passes\" == *x => {\n                         for pass in value.words() {\n                             passes.push(pass.to_owned());\n                         }\n                     }\n-                    clean::NameValue(~\"plugins\", ref value) => {\n+                    clean::NameValue(ref x, ref value) if \"plugins\" == *x => {\n                         for p in value.words() {\n                             plugins.push(p.to_owned());\n                         }"}, {"sha": "3360e389c44a96b8c45be45d9ef680170d0f8bb4", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -34,7 +34,7 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n             fn fold_item(&mut self, i: Item) -> Option<Item> {\n                 for attr in i.attrs.iter() {\n                     match attr {\n-                        &clean::List(~\"doc\", ref l) => {\n+                        &clean::List(ref x, ref l) if \"doc\" == *x => {\n                             for innerattr in l.iter() {\n                                 match innerattr {\n                                     &clean::Word(ref s) if \"hidden\" == *s => {\n@@ -223,7 +223,7 @@ pub fn unindent_comments(krate: clean::Crate) -> plugins::PluginResult {\n             let mut avec: ~[clean::Attribute] = ~[];\n             for attr in i.attrs.iter() {\n                 match attr {\n-                    &clean::NameValue(~\"doc\", ref s) => avec.push(\n+                    &clean::NameValue(ref x, ref s) if \"doc\" == *x => avec.push(\n                         clean::NameValue(~\"doc\", unindent(*s))),\n                     x => avec.push(x.clone())\n                 }\n@@ -245,15 +245,15 @@ pub fn collapse_docs(krate: clean::Crate) -> plugins::PluginResult {\n             let mut i = i;\n             for attr in i.attrs.iter() {\n                 match *attr {\n-                    clean::NameValue(~\"doc\", ref s) => {\n+                    clean::NameValue(ref x, ref s) if \"doc\" == *x => {\n                         docstr.push_str(s.clone());\n                         docstr.push_char('\\n');\n                     },\n                     _ => ()\n                 }\n             }\n             let mut a: ~[clean::Attribute] = i.attrs.iter().filter(|&a| match a {\n-                &clean::NameValue(~\"doc\", _) => false,\n+                &clean::NameValue(ref x, _) if \"doc\" == *x => false,\n                 _ => true\n             }).map(|x| x.clone()).collect();\n             if \"\" != docstr {"}, {"sha": "9fc635647f335b2653b3a6ac4a8f248cc0a7df82", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -398,8 +398,8 @@ mod tests {\n             }\n         });\n         modify(my_key, |data| {\n-            match data {\n-                Some(~\"first data\") => Some(~\"next data\"),\n+            match data.as_ref().map(|s| s.as_slice()) {\n+                Some(\"first data\") => Some(~\"next data\"),\n                 Some(ref val)       => fail!(\"wrong value: {}\", *val),\n                 None                 => fail!(\"missing value\")\n             }"}, {"sha": "16ac46186df5a17f85a2703fccba38e493131f3b", "filename": "src/libstd/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -387,8 +387,8 @@ fn test_back_to_the_future_result() {\n fn test_try_success() {\n     match try(proc() {\n         ~\"Success!\"\n-    }) {\n-        result::Ok(~\"Success!\") => (),\n+    }).as_ref().map(|s| s.as_slice()) {\n+        result::Ok(\"Success!\") => (),\n         _ => fail!()\n     }\n }"}, {"sha": "676db94cd7c82b9f87f9bb54594ac1cbcfd61a38", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -2838,24 +2838,7 @@ impl Parser {\n             // parse ~pat\n             self.bump();\n             let sub = self.parse_pat();\n-            hi = sub.span.hi;\n-            // HACK: parse ~\"...\" as a literal of a vstore ~str\n-            pat = match sub.node {\n-                PatLit(e) => {\n-                    match e.node {\n-                        ExprLit(lit) if lit_is_str(lit) => {\n-                            let vst = @Expr {\n-                                id: ast::DUMMY_NODE_ID,\n-                                node: ExprVstore(e, ExprVstoreUniq),\n-                                span: mk_sp(lo, hi),\n-                            };\n-                            PatLit(vst)\n-                        }\n-                        _ => PatUniq(sub)\n-                    }\n-                }\n-                _ => PatUniq(sub)\n-            };\n+            pat = PatUniq(sub);\n             hi = self.last_span.hi;\n             return @ast::Pat {\n                 id: ast::DUMMY_NODE_ID,"}, {"sha": "79d18596bf27330cbfb2901bd5d6ae5d3a826052", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -25,9 +25,9 @@ impl read for int {\n \n impl read for bool {\n     fn readMaybe(s: ~str) -> Option<bool> {\n-        match s {\n-          ~\"true\" => Some(true),\n-          ~\"false\" => Some(false),\n+        match s.as_slice() {\n+          \"true\" => Some(true),\n+          \"false\" => Some(false),\n           _ => None\n         }\n     }"}, {"sha": "e117e0a1c7a28d49eeaf23c649349023cf6487f7", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     let x: &[~str] = x;\n     match x {\n         [a, _, _, ..] => { println!(\"{}\", a); }\n-        [~\"foo\", ~\"bar\", ~\"baz\", ~\"foo\", ~\"bar\"] => { } //~ ERROR unreachable pattern\n+        [_, _, _, _, _] => { } //~ ERROR unreachable pattern\n         _ => { }\n     }\n "}, {"sha": "fc14b60c532b8943fe8fc5eb55ce53e2c1861f07", "filename": "src/test/run-pass/borrowed-ptr-pattern-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn foo(s: &~str) -> bool {\n-    match s {\n-        &~\"kitty\" => true,\n+    match s.as_slice() {\n+        \"kitty\" => true,\n         _ => false\n     }\n }"}, {"sha": "a9ebdaa925fe23c12bf5a9dab00c0e7baa559c67", "filename": "src/test/run-pass/issue-4541.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4541.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -13,10 +13,10 @@ fn parse_args() -> ~str {\n     let mut n = 0;\n \n     while n < args.len() {\n-        match args[n].clone() {\n-            ~\"-v\" => (),\n+        match args[n].as_slice() {\n+            \"-v\" => (),\n             s => {\n-                return s;\n+                return s.into_owned();\n             }\n         }\n         n += 1;"}, {"sha": "5fbe6b4aa6325e3c289ff009dec93192c29c4ff6", "filename": "src/test/run-pass/match-drop-strs-issue-4541.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2eebeb81372e320510a1c1e2eef96eb5146a1e1f/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebeb81372e320510a1c1e2eef96eb5146a1e1f/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs?ref=2eebeb81372e320510a1c1e2eef96eb5146a1e1f", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Tests a tricky scenario involving string matching,\n-// copying, and moving to ensure that we don't segfault\n-// or double-free, as we were wont to do in the past.\n-\n-use std::os;\n-\n-fn parse_args() -> ~str {\n-    let args = os::args();\n-    let mut n = 0;\n-\n-    while n < args.len() {\n-        match args[n].clone() {\n-            ~\"-v\" => (),\n-            s => {\n-                return s;\n-            }\n-        }\n-        n += 1;\n-    }\n-\n-    return ~\"\"\n-}\n-\n-pub fn main() {\n-    println!(\"{}\", parse_args());\n-}"}, {"sha": "44fa2978716cbb990b5df0222ed33ba945329ab4", "filename": "src/test/run-pass/match-str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Frun-pass%2Fmatch-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53242a1a38301b4a40be71fcd182568b7ee91b6/src%2Ftest%2Frun-pass%2Fmatch-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-str.rs?ref=a53242a1a38301b4a40be71fcd182568b7ee91b6", "patch": "@@ -11,21 +11,21 @@\n // Issue #53\n \n pub fn main() {\n-    match ~\"test\" { ~\"not-test\" => fail!(), ~\"test\" => (), _ => fail!() }\n+    match \"test\" { \"not-test\" => fail!(), \"test\" => (), _ => fail!() }\n \n     enum t { tag1(~str), tag2, }\n \n \n     match tag1(~\"test\") {\n       tag2 => fail!(),\n-      tag1(~\"not-test\") => fail!(),\n-      tag1(~\"test\") => (),\n+      tag1(ref s) if \"test\" != *s => fail!(),\n+      tag1(ref s) if \"test\" == *s => (),\n       _ => fail!()\n     }\n \n-    let x = match ~\"a\" { ~\"a\" => 1, ~\"b\" => 2, _ => fail!() };\n+    let x = match \"a\" { \"a\" => 1, \"b\" => 2, _ => fail!() };\n     assert_eq!(x, 1);\n \n-    match ~\"a\" { ~\"a\" => { } ~\"b\" => { }, _ => fail!() }\n+    match \"a\" { \"a\" => { } \"b\" => { }, _ => fail!() }\n \n }"}]}