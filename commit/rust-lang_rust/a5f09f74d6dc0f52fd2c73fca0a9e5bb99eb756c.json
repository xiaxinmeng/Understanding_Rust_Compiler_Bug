{"sha": "a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c", "node_id": "C_kwDOAAsO6NoAKGE1ZjA5Zjc0ZDZkYzBmNTJmZDJjNzNmY2EwYTllNWJiOTllYjc1NmM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T23:06:35Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-11T03:23:26Z"}, "message": "Update comment and make code clearer\n\nI'm still not sure why this hack works so seemingly well.", "tree": {"sha": "9963c433a95e6aac7e0ae1611de2ef22024ba002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9963c433a95e6aac7e0ae1611de2ef22024ba002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c", "html_url": "https://github.com/rust-lang/rust/commit/a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "591ec49df312ec4cbcdec0f082f123f473c182a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/591ec49df312ec4cbcdec0f082f123f473c182a9", "html_url": "https://github.com/rust-lang/rust/commit/591ec49df312ec4cbcdec0f082f123f473c182a9"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "13e1992a31caa70d609a3f70eafeceabc1e261e1", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c", "patch": "@@ -6,13 +6,12 @@ use rustc_ast as ast;\n use rustc_data_structures::{fx::FxHashMap, stable_set::FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtensionKind;\n-use rustc_hir as hir;\n use rustc_hir::def::{\n     DefKind,\n     Namespace::{self, *},\n     PerNS,\n };\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_ID};\n use rustc_middle::ty::{DefIdTree, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug, ty};\n use rustc_resolve::ParentScope;\n@@ -1736,9 +1735,9 @@ impl Disambiguator {\n     fn descr(self) -> &'static str {\n         match self {\n             Self::Namespace(n) => n.descr(),\n-            // HACK(jynelson): by looking at the source I saw the DefId we pass\n-            // for `expected.descr()` doesn't matter, since it's not a crate\n-            Self::Kind(k) => k.descr(DefId::local(hir::def_id::DefIndex::from_usize(0))),\n+            // HACK(jynelson): the source of `DefKind::descr` only uses the DefId for\n+            // printing \"module\" vs \"crate\" so using the wrong ID is not a huge problem\n+            Self::Kind(k) => k.descr(CRATE_DEF_ID.to_def_id()),\n             Self::Primitive => \"builtin type\",\n         }\n     }"}]}