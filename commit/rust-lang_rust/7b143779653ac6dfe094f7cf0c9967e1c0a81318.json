{"sha": "7b143779653ac6dfe094f7cf0c9967e1c0a81318", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMTQzNzc5NjUzYWM2ZGZlMDk0ZjdjZjBjOTk2N2UxYzBhODEzMTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T10:28:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T13:01:57Z"}, "message": "refactor nav target", "tree": {"sha": "1e4795a8a632bc33871733aa822fd8e6ce644d93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e4795a8a632bc33871733aa822fd8e6ce644d93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b143779653ac6dfe094f7cf0c9967e1c0a81318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b143779653ac6dfe094f7cf0c9967e1c0a81318", "html_url": "https://github.com/rust-lang/rust/commit/7b143779653ac6dfe094f7cf0c9967e1c0a81318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b143779653ac6dfe094f7cf0c9967e1c0a81318/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6bbc6e420e869c4a3a6effb21170c952727d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6bbc6e420e869c4a3a6effb21170c952727d04", "html_url": "https://github.com/rust-lang/rust/commit/df6bbc6e420e869c4a3a6effb21170c952727d04"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "cff11eeabcbf32991d5c6c8eeec0dd37bb9ffac5", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7b143779653ac6dfe094f7cf0c9967e1c0a81318/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b143779653ac6dfe094f7cf0c9967e1c0a81318/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=7b143779653ac6dfe094f7cf0c9967e1c0a81318", "patch": "@@ -1,6 +1,9 @@\n use ra_db::{FileId, LocalSyntaxPtr, Cancelable};\n-use ra_syntax::{SyntaxNode, AstNode};\n-use hir::{Name, Def, ModuleSource};\n+use ra_syntax::{\n+    SyntaxNode, AstNode, SmolStr,\n+    ast\n+};\n+use hir::{Def, ModuleSource};\n \n use crate::{\n     NavigationTarget,\n@@ -24,57 +27,63 @@ impl NavigationTarget {\n         Ok(match def {\n             Def::Struct(s) => {\n                 let (file_id, node) = s.source(db)?;\n-                Some(NavigationTarget::from_syntax(\n-                    s.name(db)?,\n+                Some(NavigationTarget::from_named(\n                     file_id.original_file(db),\n-                    node.syntax(),\n+                    &*node,\n                 ))\n             }\n             Def::Enum(e) => {\n                 let (file_id, node) = e.source(db)?;\n-                Some(NavigationTarget::from_syntax(\n-                    e.name(db)?,\n+                Some(NavigationTarget::from_named(\n                     file_id.original_file(db),\n-                    node.syntax(),\n+                    &*node,\n                 ))\n             }\n             Def::EnumVariant(ev) => {\n                 let (file_id, node) = ev.source(db)?;\n-                Some(NavigationTarget::from_syntax(\n-                    ev.name(db)?,\n+                Some(NavigationTarget::from_named(\n                     file_id.original_file(db),\n-                    node.syntax(),\n+                    &*node,\n                 ))\n             }\n             Def::Function(f) => {\n                 let (file_id, node) = f.source(db)?;\n-                let name = f.signature(db).name().clone();\n-                Some(NavigationTarget::from_syntax(\n-                    Some(name),\n+                Some(NavigationTarget::from_named(\n                     file_id.original_file(db),\n-                    node.syntax(),\n+                    &*node,\n                 ))\n             }\n             Def::Module(m) => {\n                 let (file_id, source) = m.definition_source(db)?;\n-                let name = m.name(db)?;\n+                let name = m\n+                    .name(db)?\n+                    .map(|it| it.to_string().into())\n+                    .unwrap_or_else(|| SmolStr::new(\"\"));\n                 match source {\n                     ModuleSource::SourceFile(node) => {\n-                        Some(NavigationTarget::from_syntax(name, file_id, node.syntax()))\n+                        Some(NavigationTarget::from_syntax(file_id, name, node.syntax()))\n                     }\n                     ModuleSource::Module(node) => {\n-                        Some(NavigationTarget::from_syntax(name, file_id, node.syntax()))\n+                        Some(NavigationTarget::from_syntax(file_id, name, node.syntax()))\n                     }\n                 }\n             }\n             Def::Item => None,\n         })\n     }\n \n-    fn from_syntax(name: Option<Name>, file_id: FileId, node: &SyntaxNode) -> NavigationTarget {\n+    fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {\n+        let name = node\n+            .name()\n+            .map(|it| it.text().clone())\n+            .unwrap_or_else(|| SmolStr::new(\"\"));\n+        NavigationTarget::from_syntax(file_id, name, node.syntax())\n+    }\n+\n+    fn from_syntax(file_id: FileId, name: SmolStr, node: &SyntaxNode) -> NavigationTarget {\n         NavigationTarget {\n             file_id,\n-            name: name.map(|n| n.to_string().into()).unwrap_or(\"\".into()),\n+            name,\n             kind: node.kind(),\n             range: node.range(),\n             ptr: Some(LocalSyntaxPtr::new(node)),"}]}