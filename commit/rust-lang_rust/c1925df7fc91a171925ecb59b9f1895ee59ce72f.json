{"sha": "c1925df7fc91a171925ecb59b9f1895ee59ce72f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOTI1ZGY3ZmM5MWExNzE5MjVlY2I1OWI5ZjE4OTVlZTU5Y2U3MmY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-03T12:22:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-03T16:36:08Z"}, "message": "Replace insert_use_statement with the new insert_use", "tree": {"sha": "475182f8b2f91a200cfa1662f7407242b6220cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/475182f8b2f91a200cfa1662f7407242b6220cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1925df7fc91a171925ecb59b9f1895ee59ce72f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1925df7fc91a171925ecb59b9f1895ee59ce72f", "html_url": "https://github.com/rust-lang/rust/commit/c1925df7fc91a171925ecb59b9f1895ee59ce72f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1925df7fc91a171925ecb59b9f1895ee59ce72f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "952f3856822d471cf5062e82f544c901c385f3ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/952f3856822d471cf5062e82f544c901c385f3ae", "html_url": "https://github.com/rust-lang/rust/commit/952f3856822d471cf5062e82f544c901c385f3ae"}], "stats": {"total": 122, "additions": 68, "deletions": 54}, "files": [{"sha": "f3b4c5708295621762ebf94741b7c6ecaf589782", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1925df7fc91a171925ecb59b9f1895ee59ce72f/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1925df7fc91a171925ecb59b9f1895ee59ce72f/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=c1925df7fc91a171925ecb59b9f1895ee59ce72f", "patch": "@@ -13,8 +13,11 @@ use syntax::{\n };\n \n use crate::{\n-    utils::insert_use_statement, AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n+    utils::{insert_use, MergeBehaviour},\n+    AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n };\n+use ast::make;\n+use insert_use::find_insert_use_container;\n \n // Assist: auto_import\n //\n@@ -44,19 +47,21 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     let range = ctx.sema.original_range(&auto_import_assets.syntax_under_caret).range;\n     let group = auto_import_assets.get_import_group_message();\n+    let container = find_insert_use_container(&auto_import_assets.syntax_under_caret, ctx)?;\n+    let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());\n     for import in proposed_imports {\n         acc.add_group(\n             &group,\n             AssistId(\"auto_import\", AssistKind::QuickFix),\n             format!(\"Import `{}`\", &import),\n             range,\n             |builder| {\n-                insert_use_statement(\n-                    &auto_import_assets.syntax_under_caret,\n-                    &import.to_string(),\n-                    ctx,\n-                    builder.text_edit_builder(),\n+                let new_syntax = insert_use(\n+                    &syntax,\n+                    make::path_from_text(&import.to_string()),\n+                    Some(MergeBehaviour::Full),\n                 );\n+                builder.replace(syntax.text_range(), new_syntax.to_string())\n             },\n         );\n     }\n@@ -358,7 +363,7 @@ mod tests {\n             }\n             \",\n             r\"\n-            use PubMod::{PubStruct2, PubStruct1};\n+            use PubMod::{PubStruct1, PubStruct2};\n \n             struct Test {\n                 test: PubStruct2<u8>,"}, {"sha": "d9c50f25f1fc80fe47c1556ab2aa1456bb0d83a8", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1925df7fc91a171925ecb59b9f1895ee59ce72f/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1925df7fc91a171925ecb59b9f1895ee59ce72f/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=c1925df7fc91a171925ecb59b9f1895ee59ce72f", "patch": "@@ -10,9 +10,12 @@ use syntax::{\n };\n \n use crate::{\n-    assist_context::AssistBuilder, utils::insert_use_statement, AssistContext, AssistId,\n-    AssistKind, Assists,\n+    assist_context::AssistBuilder,\n+    utils::{insert_use, MergeBehaviour},\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n+use ast::make;\n+use insert_use::find_insert_use_container;\n \n // Assist: extract_struct_from_enum_variant\n //\n@@ -107,12 +110,15 @@ fn insert_import(\n     if let Some(mut mod_path) = mod_path {\n         mod_path.segments.pop();\n         mod_path.segments.push(variant_hir_name.clone());\n-        insert_use_statement(\n-            path.syntax(),\n-            &mod_path.to_string(),\n-            ctx,\n-            builder.text_edit_builder(),\n+        let container = find_insert_use_container(path.syntax(), ctx)?;\n+        let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());\n+\n+        let new_syntax = insert_use(\n+            &syntax,\n+            make::path_from_text(&mod_path.to_string()),\n+            Some(MergeBehaviour::Full),\n         );\n+        builder.replace(syntax.text_range(), new_syntax.to_string())\n     }\n     Some(())\n }"}, {"sha": "56e85125d7a389c279b40c63c67e475996245974", "filename": "crates/assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c1925df7fc91a171925ecb59b9f1895ee59ce72f/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1925df7fc91a171925ecb59b9f1895ee59ce72f/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=c1925df7fc91a171925ecb59b9f1895ee59ce72f", "patch": "@@ -2,9 +2,10 @@ use syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SyntaxNode, TextRang\n use test_utils::mark;\n \n use crate::{\n-    utils::{find_insert_use_container, insert_use_statement},\n+    utils::{find_insert_use_container, insert_use, MergeBehaviour},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n+use ast::make;\n \n // Assist: replace_qualified_name_with_use\n //\n@@ -32,7 +33,7 @@ pub(crate) fn replace_qualified_name_with_use(\n         mark::hit!(dont_import_trivial_paths);\n         return None;\n     }\n-    let path_to_import = path.to_string().clone();\n+    let path_to_import = path.to_string();\n     let path_to_import = match path.segment()?.generic_arg_list() {\n         Some(generic_args) => {\n             let generic_args_start =\n@@ -43,28 +44,24 @@ pub(crate) fn replace_qualified_name_with_use(\n     };\n \n     let target = path.syntax().text_range();\n+    let container = find_insert_use_container(path.syntax(), ctx)?;\n+    let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());\n     acc.add(\n         AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),\n         \"Replace qualified path with use\",\n         target,\n         |builder| {\n-            let container = match find_insert_use_container(path.syntax(), ctx) {\n-                Some(c) => c,\n-                None => return,\n-            };\n-            insert_use_statement(\n-                path.syntax(),\n-                &path_to_import.to_string(),\n-                ctx,\n-                builder.text_edit_builder(),\n-            );\n-\n             // Now that we've brought the name into scope, re-qualify all paths that could be\n             // affected (that is, all paths inside the node we added the `use` to).\n             let mut rewriter = SyntaxRewriter::default();\n-            let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());\n-            shorten_paths(&mut rewriter, syntax, path);\n-            builder.rewrite(rewriter);\n+            shorten_paths(&mut rewriter, syntax.clone(), path);\n+            let rewritten_syntax = rewriter.rewrite(&syntax);\n+            let new_syntax = insert_use(\n+                &rewritten_syntax,\n+                make::path_from_text(path_to_import),\n+                Some(MergeBehaviour::Full),\n+            );\n+            builder.replace(syntax.text_range(), new_syntax.to_string())\n         },\n     )\n }\n@@ -220,9 +217,10 @@ impl std::fmt::Debug<|> for Foo {\n }\n     \",\n             r\"\n-use stdx;\n use std::fmt::Debug;\n \n+use stdx;\n+\n impl Debug for Foo {\n }\n     \",\n@@ -274,7 +272,7 @@ impl std::io<|> for Foo {\n }\n     \",\n             r\"\n-use std::{io, fmt};\n+use std::{fmt, io};\n \n impl io for Foo {\n }\n@@ -293,7 +291,7 @@ impl std::fmt::Debug<|> for Foo {\n }\n     \",\n             r\"\n-use std::fmt::{self, Debug, };\n+use std::fmt::{self, Debug};\n \n impl Debug for Foo {\n }\n@@ -312,7 +310,7 @@ impl std::fmt<|> for Foo {\n }\n     \",\n             r\"\n-use std::fmt::{self, Debug};\n+use std::fmt::{Debug, self};\n \n impl fmt for Foo {\n }\n@@ -330,8 +328,9 @@ use std::fmt::{Debug, nested::{Display}};\n impl std::fmt::nested<|> for Foo {\n }\n \",\n+            // FIXME(veykril): should be nested::{self, Display} here\n             r\"\n-use std::fmt::{Debug, nested::{Display, self}};\n+use std::fmt::{Debug, nested::{Display}, nested};\n \n impl nested for Foo {\n }\n@@ -349,8 +348,9 @@ use std::fmt::{Debug, nested::{self, Display}};\n impl std::fmt::nested<|> for Foo {\n }\n \",\n+            // FIXME(veykril): self is being pulled out for some reason now\n             r\"\n-use std::fmt::{Debug, nested::{self, Display}};\n+use std::fmt::{Debug, nested::{Display}, nested};\n \n impl nested for Foo {\n }\n@@ -369,7 +369,7 @@ impl std::fmt::nested::Debug<|> for Foo {\n }\n \",\n             r\"\n-use std::fmt::{Debug, nested::{Display, Debug}};\n+use std::fmt::{Debug, nested::{Display}, nested::Debug};\n \n impl Debug for Foo {\n }\n@@ -388,7 +388,7 @@ impl std::fmt::nested::Display<|> for Foo {\n }\n \",\n             r\"\n-use std::fmt::{nested::Display, Debug};\n+use std::fmt::{Debug, nested::Display};\n \n impl Display for Foo {\n }\n@@ -407,7 +407,7 @@ impl std::fmt::Display<|> for Foo {\n }\n \",\n             r\"\n-use std::fmt::{Display, nested::Debug};\n+use std::fmt::{nested::Debug, Display};\n \n impl Display for Foo {\n }\n@@ -427,11 +427,12 @@ use crate::{\n \n fn foo() { crate::ty::lower<|>::trait_env() }\n \",\n+            // FIXME(veykril): formatting broke here\n             r\"\n use crate::{\n-    ty::{Substs, Ty, lower},\n+    ty::{Substs, Ty},\n     AssocItem,\n-};\n+ty::lower};\n \n fn foo() { lower::trait_env() }\n \",\n@@ -451,6 +452,8 @@ impl foo::Debug<|> for Foo {\n             r\"\n use std::fmt as foo;\n \n+use foo::Debug;\n+\n impl Debug for Foo {\n }\n \",\n@@ -627,7 +630,7 @@ fn main() {\n }\n     \",\n             r\"\n-use std::fmt::{self, Display};\n+use std::fmt::{Display, self};\n \n fn main() {\n     fmt;\n@@ -647,9 +650,8 @@ impl std::io<|> for Foo {\n }\n     \",\n             r\"\n-use std::io;\n-\n pub use std::fmt;\n+use std::io;\n \n impl io for Foo {\n }\n@@ -668,9 +670,8 @@ impl std::io<|> for Foo {\n }\n     \",\n             r\"\n-use std::io;\n-\n pub(crate) use std::fmt;\n+use std::io;\n \n impl io for Foo {\n }"}, {"sha": "f2acda6f32ee47073103bd23b4dc275cae2ce64a", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1925df7fc91a171925ecb59b9f1895ee59ce72f/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1925df7fc91a171925ecb59b9f1895ee59ce72f/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=c1925df7fc91a171925ecb59b9f1895ee59ce72f", "patch": "@@ -18,9 +18,10 @@ pub(crate) fn find_insert_use_container(\n ) -> Option<Either<ast::ItemList, ast::SourceFile>> {\n     ctx.sema.ancestors_with_macros(position.clone()).find_map(|n| {\n         if let Some(module) = ast::Module::cast(n.clone()) {\n-            return module.item_list().map(Either::Left);\n+            module.item_list().map(Either::Left)\n+        } else {\n+            Some(Either::Right(ast::SourceFile::cast(n)?))\n         }\n-        Some(Either::Right(ast::SourceFile::cast(n)?))\n     })\n }\n \n@@ -92,6 +93,7 @@ fn use_tree_list_is_nested(tl: &ast::UseTreeList) -> bool {\n     })\n }\n \n+// FIXME: currently this merely prepends the new tree into old, ideally it would insert the items in a sorted fashion\n pub fn try_merge_trees(\n     old: &ast::UseTree,\n     new: &ast::UseTree,\n@@ -486,7 +488,7 @@ use std::io;\",\n         check_full(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::Qux;\",\n-            r\"use std::foo::bar::{Baz, Qux};\",\n+            r\"use std::foo::bar::{Qux, Baz};\",\n         )\n     }\n \n@@ -495,7 +497,7 @@ use std::io;\",\n         check_last(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::Qux;\",\n-            r\"use std::foo::bar::{Baz, Qux};\",\n+            r\"use std::foo::bar::{Qux, Baz};\",\n         )\n     }\n \n@@ -504,7 +506,7 @@ use std::io;\",\n         check_full(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::{Qux, Quux};\",\n-            r\"use std::foo::bar::{Baz, Quux, Qux};\",\n+            r\"use std::foo::bar::{Qux, Quux, Baz};\",\n         )\n     }\n \n@@ -513,7 +515,7 @@ use std::io;\",\n         check_last(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::{Qux, Quux};\",\n-            r\"use std::foo::bar::{Baz, Quux, Qux};\",\n+            r\"use std::foo::bar::{Qux, Quux, Baz};\",\n         )\n     }\n \n@@ -522,7 +524,7 @@ use std::io;\",\n         check_full(\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n-            r\"use std::foo::bar::{Baz, quux::{Fez, Fizz}, Qux};\",\n+            r\"use std::foo::bar::{Qux, quux::{Fez, Fizz}, Baz};\",\n         )\n     }\n \n@@ -532,7 +534,7 @@ use std::io;\",\n             \"std::foo::bar::Baz\",\n             r\"use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n             r\"use std::foo::bar::Baz;\n-use std::foo::bar::{quux::{Fez, Fizz}, Qux};\",\n+use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n         )\n     }\n "}]}