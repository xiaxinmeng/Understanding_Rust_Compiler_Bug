{"sha": "565710b33cb20c901b8b3371d1364cf7fb11e79b", "node_id": "C_kwDOAAsO6NoAKDU2NTcxMGIzM2NiMjBjOTAxYjhiMzM3MWQxMzY0Y2Y3ZmIxMWU3OWI", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-01-21T22:04:06Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-01-31T16:09:31Z"}, "message": "Fix invalid special casing of the unreachable! macro", "tree": {"sha": "ea8b01a50153f7188172d0a924b86fa30471d4a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8b01a50153f7188172d0a924b86fa30471d4a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565710b33cb20c901b8b3371d1364cf7fb11e79b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565710b33cb20c901b8b3371d1364cf7fb11e79b", "html_url": "https://github.com/rust-lang/rust/commit/565710b33cb20c901b8b3371d1364cf7fb11e79b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565710b33cb20c901b8b3371d1364cf7fb11e79b/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86f5e177bca8121e1edc9864023a8ea61acf9034", "url": "https://api.github.com/repos/rust-lang/rust/commits/86f5e177bca8121e1edc9864023a8ea61acf9034", "html_url": "https://github.com/rust-lang/rust/commit/86f5e177bca8121e1edc9864023a8ea61acf9034"}], "stats": {"total": 159, "additions": 140, "deletions": 19}, "files": [{"sha": "9a45dec55f30b0d7e41e8b213013537d6cc7d5a0", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -1,4 +1,4 @@\n-use crate::panic::use_panic_2021;\n+use crate::edition_panic::use_panic_2021;\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};"}, {"sha": "518b88dec6a75190d7e6479ceb6209ee03c75fcd", "filename": "compiler/rustc_builtin_macros/src/edition_panic.rs", "status": "renamed", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -20,8 +20,29 @@ pub fn expand_panic<'cx>(\n     sp: Span,\n     tts: TokenStream,\n ) -> Box<dyn MacResult + 'cx> {\n-    let panic = if use_panic_2021(sp) { sym::panic_2021 } else { sym::panic_2015 };\n+    let mac = if use_panic_2021(sp) { sym::panic_2021 } else { sym::panic_2015 };\n+    expand(mac, cx, sp, tts)\n+}\n \n+// This expands to either\n+// - `$crate::panic::unreachable_2015!(...)` or\n+// - `$crate::panic::unreachable_2021!(...)`\n+// depending on the edition.\n+pub fn expand_unreachable<'cx>(\n+    cx: &'cx mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: TokenStream,\n+) -> Box<dyn MacResult + 'cx> {\n+    let mac = if use_panic_2021(sp) { sym::unreachable_2021 } else { sym::unreachable_2015 };\n+    expand(mac, cx, sp, tts)\n+}\n+\n+fn expand<'cx>(\n+    mac: rustc_span::Symbol,\n+    cx: &'cx mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: TokenStream,\n+) -> Box<dyn MacResult + 'cx> {\n     let sp = cx.with_call_site_ctxt(sp);\n \n     MacEager::expr(\n@@ -31,7 +52,7 @@ pub fn expand_panic<'cx>(\n                 path: Path {\n                     span: sp,\n                     segments: cx\n-                        .std_path(&[sym::panic, panic])\n+                        .std_path(&[sym::panic, mac])\n                         .into_iter()\n                         .map(|ident| PathSegment::from_ident(ident))\n                         .collect(),", "previous_filename": "compiler/rustc_builtin_macros/src/panic.rs"}, {"sha": "98c94dfc68665e879e733bf913ac677e8207feb8", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -31,12 +31,12 @@ mod concat_bytes;\n mod concat_idents;\n mod derive;\n mod deriving;\n+mod edition_panic;\n mod env;\n mod format;\n mod format_foreign;\n mod global_allocator;\n mod log_syntax;\n-mod panic;\n mod source_util;\n mod test;\n mod trace_macros;\n@@ -82,8 +82,9 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n         option_env: env::expand_option_env,\n-        core_panic: panic::expand_panic,\n-        std_panic: panic::expand_panic,\n+        core_panic: edition_panic::expand_panic,\n+        std_panic: edition_panic::expand_panic,\n+        unreachable: edition_panic::expand_unreachable,\n         stringify: source_util::expand_stringify,\n         trace_macros: trace_macros::expand_trace_macros,\n     }"}, {"sha": "7068b86572f431681318b9bda6288e418407265e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -1437,7 +1437,12 @@ symbols! {\n         unmarked_api,\n         unpin,\n         unreachable,\n+        unreachable_2015,\n+        unreachable_2015_macro,\n+        unreachable_2021,\n+        unreachable_2021_macro,\n         unreachable_code,\n+        unreachable_display,\n         unreachable_macro,\n         unrestricted_attribute_tokens,\n         unsafe_block_in_unsafe_fn,"}, {"sha": "a9e90556f6c2631a6b5d548dd8c3435d8c9e53c6", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -594,6 +594,22 @@ macro_rules! writeln {\n ///     unreachable!(\"The loop should always return\");\n /// }\n /// ```\n+#[cfg(not(bootstrap))]\n+#[macro_export]\n+#[rustc_builtin_macro(unreachable)]\n+#[allow_internal_unstable(edition_panic)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"unreachable_macro\")]\n+macro_rules! unreachable {\n+    // Expands to either `$crate::panic::unreachable_2015` or `$crate::panic::unreachable_2021`\n+    // depending on the edition of the caller.\n+    ($($arg:tt)*) => {\n+        /* compiler built-in */\n+    };\n+}\n+\n+/// unreachable!() macro\n+#[cfg(bootstrap)]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"unreachable_macro\")]"}, {"sha": "0be3f06ff6c2a56720ff41ad14631722091ca6bc", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -58,6 +58,39 @@ pub macro panic_2021 {\n     ),\n }\n \n+#[doc(hidden)]\n+#[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use unreachable!() instead\")]\n+#[allow_internal_unstable(core_panic)]\n+#[rustc_diagnostic_item = \"unreachable_2015_macro\"]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro unreachable_2015 {\n+    () => (\n+        $crate::panicking::panic(\"internal error: entered unreachable code\")\n+    ),\n+    // Use of `unreachable_display` for non_fmt_panic lint.\n+    // NOTE: the message (\"internal error ...\") is embeded directly in unreachable_display\n+    ($msg:expr $(,)?) => (\n+        $crate::panicking::unreachable_display(&$msg)\n+    ),\n+    ($fmt:expr, $($arg:tt)*) => (\n+        $crate::panic!($crate::concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n+    ),\n+}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use unreachable!() instead\")]\n+#[allow_internal_unstable(core_panic)]\n+#[rustc_diagnostic_item = \"unreachable_2021_macro\"]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro unreachable_2021 {\n+    () => (\n+        $crate::panicking::panic(\"internal error: entered unreachable code\")\n+    ),\n+    ($($t:tt)+) => (\n+        $crate::panic!(\"internal error: entered unreachable code: {}\", $crate::format_args!($($t)+))\n+    ),\n+}\n+\n /// An internal trait used by libstd to pass data from libstd to `panic_unwind`\n /// and other panic runtimes. Not intended to be stabilized any time soon, do\n /// not use."}, {"sha": "d857b4948b5c7e601ca658b988f940b829b2a499", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -56,6 +56,14 @@ pub const fn panic_str(expr: &str) -> ! {\n     panic_display(&expr);\n }\n \n+#[cfg(not(bootstrap))]\n+#[inline]\n+#[track_caller]\n+#[rustc_diagnostic_item = \"unreachable_display\"] // needed for `non-fmt-panics` lint\n+pub fn unreachable_display<T: fmt::Display>(x: &T) -> ! {\n+    panic_fmt(format_args!(\"internal error: entered unreachable code: {}\", *x));\n+}\n+\n #[inline]\n #[track_caller]\n #[lang = \"panic_display\"] // needed for const-evaluated panics"}, {"sha": "1a454bab4d0d961949255630072705d054f48274", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -21,7 +21,7 @@\n       let mut _19: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:54: 9:68\n       let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n       let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n-      let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _23: &[T; 3];                // in scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n       scope 1 {\n           debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:7:9: 7:10\n@@ -66,16 +66,16 @@\n       }\n   \n       bb1: {\n-          StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                            // ty::Const\n                                            // + ty: &str\n                                            // + val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 })\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }\n       }\n   "}, {"sha": "2955f11716c418d8f1e8b8de2d5e2243fc068041", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -20,7 +20,7 @@ error[E0080]: evaluation of constant value failed\n LL | const Y: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n    |\n-   = note: this error originates in the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:15:15\n@@ -68,7 +68,7 @@ error[E0080]: evaluation of constant value failed\n LL | const Y_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:30:20\n    |\n-   = note: this error originates in the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:33:20"}, {"sha": "cb3b08e0e09991c44bdf92ee5d9d37b3cb50daf4", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -20,7 +20,7 @@ error[E0080]: evaluation of constant value failed\n LL | const C: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:12:15\n    |\n-   = note: this error originates in the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:15:15\n@@ -60,7 +60,7 @@ error[E0080]: evaluation of constant value failed\n LL | const C_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:27:20\n    |\n-   = note: this error originates in the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:30:20"}, {"sha": "417120c453e927427247b3e2c4b96c2ec87a169c", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -12,7 +12,7 @@ error[E0080]: evaluation of constant value failed\n LL | const Y: () = unreachable!();\n    |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:11:15\n    |\n-   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:14:15"}, {"sha": "7d83b698d79b89d62239cc708277072a50dca919", "filename": "src/test/ui/macros/unreachable-format-arg.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-arg.rs?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -0,0 +1,13 @@\n+// run-fail\n+// ignore-emscripten no processes\n+\n+// revisions: edition_2015 edition_2021\n+// [edition_2015]edition:2015\n+// [edition_2021]edition:2021\n+// [edition_2015]error-pattern:internal error: entered unreachable code: x is {x}\n+// [edition_2021]error-pattern:internal error: entered unreachable code: x is 5\n+\n+fn main() {\n+    let x = 5;\n+    unreachable!(\"x is {x}\");\n+}"}, {"sha": "dda45d14a3f1b5dd4f887988b0607fa5c85f553b", "filename": "src/test/ui/macros/unreachable-format-args.edition_2015.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -0,0 +1,12 @@\n+error: there is no argument named `x`\n+  --> $DIR/unreachable-format-args.rs:13:5\n+   |\n+LL |     unreachable!(\"x is {x} and y is {y}\", y = 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `x` from the surrounding scope?\n+   = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n+   = note: this error originates in the macro `$crate::concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "04a31fc1ba370fa8a3d4ed9b87e218b362c2196e", "filename": "src/test/ui/macros/unreachable-format-args.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.rs?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -0,0 +1,14 @@\n+// ignore-emscripten no processes\n+\n+// revisions: edition_2015 edition_2021\n+// [edition_2015]edition:2015\n+// [edition_2021]edition:2021\n+// [edition_2015]check-fail\n+// [edition_2021]run-fail\n+// [edition_2015]error-pattern:there is no argument named `x`\n+// [edition_2021]error-pattern:internal error: entered unreachable code: x is 5 and y is 0\n+\n+fn main() {\n+    let x = 5;\n+    unreachable!(\"x is {x} and y is {y}\", y = 0);\n+}"}, {"sha": "3738bffd733d408884cf1917d3fece6df3e4d56e", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/565710b33cb20c901b8b3371d1364cf7fb11e79b/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=565710b33cb20c901b8b3371d1364cf7fb11e79b", "patch": "@@ -33,9 +33,7 @@ fn main() {\n                                             lit.set_span(crate::Span::recover_proc_macro_span(2));\n                                             lit\n                                         } else {\n-                                           {\n-                                               ::core::panicking::panic(\"internal error: entered unreachable code\")\n-                                           }\n+                                           ::core::panicking::panic(\"internal error: entered unreachable code\")\n                                        }\n                                 })),\n                         crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',"}]}