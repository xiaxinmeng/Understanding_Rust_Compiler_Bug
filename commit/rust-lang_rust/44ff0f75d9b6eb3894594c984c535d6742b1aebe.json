{"sha": "44ff0f75d9b6eb3894594c984c535d6742b1aebe", "node_id": "C_kwDOAAsO6NoAKDQ0ZmYwZjc1ZDliNmViMzg5NDU5NGM5ODRjNTM1ZDY3NDJiMWFlYmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T10:28:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T10:28:03Z"}, "message": "Rollup merge of #91925 - LegionMammal978:less-inband-privacy, r=nagisa\n\nRemove `in_band_lifetimes` from `rustc_privacy`\n\nSee #91867 for more information.", "tree": {"sha": "5a332e5e169929b3093066e89e0da88fd3d575cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a332e5e169929b3093066e89e0da88fd3d575cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44ff0f75d9b6eb3894594c984c535d6742b1aebe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvbezCRBK7hj4Ov3rIwAA6doIABPP80KuwmviiO1qcSeVptpb\nf20PvsILVoxQ+CzkojELP4IarZQ977ke/AF2HMEvP9sE1mfZQNakIzy3X9l9fU1R\ndX6QNumlN40Y0D1zUo5ssps3hdfeOPOgexZNAaZ8jO54vMT62KmJi4+oOTHpd0NP\nDUA/cPJrDBTbNRTd8bvwIXybT0gznQllPi14jDlnxGke549d5eR1KUG/o0+n8E/6\nVT7VlgleODew3uqH+MOwFgs+HaIKqq50unMuS+hJhibGX+7S3ZmgR2EsK1lUpd8i\nsF6vEhNoceV7tAczpScg9LZv2AVaJJuFmoyOHEugy3nPY7Dc3lbFxwhXpSZBWAM=\n=Tb++\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a332e5e169929b3093066e89e0da88fd3d575cf\nparent df428917ef5346b28958223e2d07b66ec79fe9f3\nparent 29c56fef275b1dc8f3f8ea6b61f215aa87d795a3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639823283 +0100\ncommitter GitHub <noreply@github.com> 1639823283 +0100\n\nRollup merge of #91925 - LegionMammal978:less-inband-privacy, r=nagisa\n\nRemove `in_band_lifetimes` from `rustc_privacy`\n\nSee #91867 for more information.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44ff0f75d9b6eb3894594c984c535d6742b1aebe", "html_url": "https://github.com/rust-lang/rust/commit/44ff0f75d9b6eb3894594c984c535d6742b1aebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44ff0f75d9b6eb3894594c984c535d6742b1aebe/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df428917ef5346b28958223e2d07b66ec79fe9f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/df428917ef5346b28958223e2d07b66ec79fe9f3", "html_url": "https://github.com/rust-lang/rust/commit/df428917ef5346b28958223e2d07b66ec79fe9f3"}, {"sha": "29c56fef275b1dc8f3f8ea6b61f215aa87d795a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c56fef275b1dc8f3f8ea6b61f215aa87d795a3", "html_url": "https://github.com/rust-lang/rust/commit/29c56fef275b1dc8f3f8ea6b61f215aa87d795a3"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "10f6f6b1a9fac91c166ed9acb7f2bc92cdeb1e2c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44ff0f75d9b6eb3894594c984c535d6742b1aebe/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ff0f75d9b6eb3894594c984c535d6742b1aebe/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=44ff0f75d9b6eb3894594c984c535d6742b1aebe", "patch": "@@ -1,5 +1,4 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(control_flow_enum)]\n #![feature(try_blocks)]\n@@ -310,7 +309,7 @@ struct PubRestrictedVisitor<'tcx> {\n     has_pub_restricted: bool,\n }\n \n-impl Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -432,7 +431,7 @@ struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {\n     ev: &'a mut EmbargoVisitor<'tcx>,\n }\n \n-impl EmbargoVisitor<'tcx> {\n+impl<'tcx> EmbargoVisitor<'tcx> {\n     fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {\n         self.access_levels.map.get(&def_id).copied()\n     }\n@@ -674,7 +673,7 @@ impl EmbargoVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     /// We want to visit items in the context of their containing\n@@ -944,7 +943,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n     }\n }\n \n-impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n+impl ReachEverythingInTheInterfaceVisitor<'_, '_> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.ev.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n@@ -983,7 +982,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n     }\n }\n \n-impl DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n+impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.ev.tcx\n     }\n@@ -1413,7 +1412,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n     }\n }\n \n-impl DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {\n+impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -1800,7 +1799,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     in_assoc_ty: bool,\n }\n \n-impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n+impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n@@ -1921,7 +1920,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     }\n }\n \n-impl DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n+impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}]}