{"sha": "b731d96b4f2a8d5733e79a863c40632425456520", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MzFkOTZiNGYyYThkNTczM2U3OWE4NjNjNDA2MzI0MjU0NTY1MjA=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-01T02:18:17Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-01T02:30:37Z"}, "message": "vec: implement exchange vector reserve in Rust", "tree": {"sha": "b5b23ab4de56bec4166ad2fdee8edec091780fb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b23ab4de56bec4166ad2fdee8edec091780fb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b731d96b4f2a8d5733e79a863c40632425456520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b731d96b4f2a8d5733e79a863c40632425456520", "html_url": "https://github.com/rust-lang/rust/commit/b731d96b4f2a8d5733e79a863c40632425456520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b731d96b4f2a8d5733e79a863c40632425456520/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80ab87784108b1a26e9670a029283567b23cf1ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/80ab87784108b1a26e9670a029283567b23cf1ad", "html_url": "https://github.com/rust-lang/rust/commit/80ab87784108b1a26e9670a029283567b23cf1ad"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "310b7e6a1d473ebadba26ec11d77f964c9ea5f3e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b731d96b4f2a8d5733e79a863c40632425456520/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b731d96b4f2a8d5733e79a863c40632425456520/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=b731d96b4f2a8d5733e79a863c40632425456520", "patch": "@@ -22,12 +22,14 @@ use iterator::{FromIterator, Iterator, IteratorUtil};\n use iter::FromIter;\n use kinds::Copy;\n use libc;\n+use libc::c_void;\n use num::Zero;\n use ops::Add;\n use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n use ptr;\n use ptr::RawPtr;\n+use rt::global_heap::realloc_raw;\n use sys;\n use sys::size_of;\n use uint;\n@@ -52,12 +54,6 @@ pub mod rustrt {\n \n     #[abi = \"cdecl\"]\n     pub extern {\n-        // These names are terrible. reserve_shared applies\n-        // to ~[] and reserve_shared_actual applies to @[].\n-        #[fast_ffi]\n-        unsafe fn vec_reserve_shared(t: *TyDesc,\n-                                     v: **raw::VecRepr,\n-                                     n: libc::size_t);\n         #[fast_ffi]\n         unsafe fn vec_reserve_shared_actual(t: *TyDesc,\n                                             v: **raw::VecRepr,\n@@ -1523,13 +1519,16 @@ impl<T> OwnedVector<T> for ~[T] {\n         use managed;\n         if self.capacity() < n {\n             unsafe {\n-                let ptr: **raw::VecRepr = cast::transmute(self);\n+                let ptr: *mut *mut raw::VecRepr = cast::transmute(self);\n                 let td = get_tydesc::<T>();\n                 if ((**ptr).box_header.ref_count ==\n                     managed::raw::RC_MANAGED_UNIQUE) {\n-                    rustrt::vec_reserve_shared_actual(td, ptr, n as libc::size_t);\n+                    rustrt::vec_reserve_shared_actual(td, ptr as **raw::VecRepr, n as libc::size_t);\n                 } else {\n-                    rustrt::vec_reserve_shared(td, ptr, n as libc::size_t);\n+                    let alloc = n * sys::nonzero_size_of::<T>();\n+                    *ptr = realloc_raw(*ptr as *mut c_void, alloc + size_of::<raw::VecRepr>())\n+                           as *mut raw::VecRepr;\n+                    (**ptr).unboxed.alloc = alloc;\n                 }\n             }\n         }\n@@ -1551,12 +1550,15 @@ impl<T> OwnedVector<T> for ~[T] {\n         // Only make the (slow) call into the runtime if we have to\n         if self.capacity() < n {\n             unsafe {\n-                let ptr: **raw::VecRepr = cast::transmute(self);\n+                let ptr: *mut *mut raw::VecRepr = cast::transmute(self);\n                 let td = get_tydesc::<T>();\n                 if contains_managed::<T>() {\n-                    rustrt::vec_reserve_shared_actual(td, ptr, n as libc::size_t);\n+                    rustrt::vec_reserve_shared_actual(td, ptr as **raw::VecRepr, n as libc::size_t);\n                 } else {\n-                    rustrt::vec_reserve_shared(td, ptr, n as libc::size_t);\n+                    let alloc = n * sys::nonzero_size_of::<T>();\n+                    *ptr = realloc_raw(*ptr as *mut c_void, alloc + size_of::<raw::VecRepr>())\n+                           as *mut raw::VecRepr;\n+                    (**ptr).unboxed.alloc = alloc;\n                 }\n             }\n         }"}, {"sha": "17f36e810cd1ab70092ae42eb9066e91840ff448", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b731d96b4f2a8d5733e79a863c40632425456520/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b731d96b4f2a8d5733e79a863c40632425456520/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=b731d96b4f2a8d5733e79a863c40632425456520", "patch": "@@ -75,13 +75,6 @@ vec_reserve_shared_actual(type_desc* ty, rust_vec_box** vp,\n     reserve_vec_exact_shared(task, vp, n_elts * ty->size);\n }\n \n-// This is completely misnamed.\n-extern \"C\" CDECL void\n-vec_reserve_shared(type_desc* ty, rust_vec_box** vp,\n-                   size_t n_elts) {\n-    reserve_vec_exact(vp, n_elts * ty->size);\n-}\n-\n extern \"C\" CDECL size_t\n rand_seed_size() {\n     return rng_seed_size();"}, {"sha": "0da04e34f495d9ced6ecbb10efbe33164a19030e", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b731d96b4f2a8d5733e79a863c40632425456520/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b731d96b4f2a8d5733e79a863c40632425456520/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=b731d96b4f2a8d5733e79a863c40632425456520", "patch": "@@ -55,7 +55,6 @@ rust_get_c_stack\n rust_log_str\n start_task\n vec_reserve_shared_actual\n-vec_reserve_shared\n task_clear_event_reject\n task_wait_event\n task_signal_event"}]}