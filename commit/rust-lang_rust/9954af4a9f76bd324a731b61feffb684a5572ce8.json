{"sha": "9954af4a9f76bd324a731b61feffb684a5572ce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NTRhZjRhOWY3NmJkMzI0YTczMWI2MWZlZmZiNjg0YTU1NzJjZTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-23T18:08:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-23T18:08:55Z"}, "message": "deduplicate some code", "tree": {"sha": "580f0ca8306fa69d896b0070d009fdcb3e6dee13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/580f0ca8306fa69d896b0070d009fdcb3e6dee13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9954af4a9f76bd324a731b61feffb684a5572ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9954af4a9f76bd324a731b61feffb684a5572ce8", "html_url": "https://github.com/rust-lang/rust/commit/9954af4a9f76bd324a731b61feffb684a5572ce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9954af4a9f76bd324a731b61feffb684a5572ce8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9492038ae9fe1c559d890bd0f41dfe5f37030a03", "url": "https://api.github.com/repos/rust-lang/rust/commits/9492038ae9fe1c559d890bd0f41dfe5f37030a03", "html_url": "https://github.com/rust-lang/rust/commit/9492038ae9fe1c559d890bd0f41dfe5f37030a03"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "8b72c367e9f05f6b1b1012c5a231c070b28b366c", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9954af4a9f76bd324a731b61feffb684a5572ce8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9954af4a9f76bd324a731b61feffb684a5572ce8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9954af4a9f76bd324a731b61feffb684a5572ce8", "patch": "@@ -274,6 +274,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n+        fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {\n+            if offset % align.bytes() == 0 {\n+                Ok(())\n+            } else {\n+                // The biggest power of two through which `offset` is divisible.\n+                let offset_pow2 = 1 << offset.trailing_zeros();\n+                err!(AlignmentCheckFailed {\n+                    has: Align::from_bytes(offset_pow2).unwrap(),\n+                    required: align,\n+                })\n+            }\n+        }\n+\n         // Normalize to a `Pointer` if we definitely need one.\n         let normalized = if size.bytes() == 0 {\n             // Can be an integer, just take what we got.\n@@ -290,14 +303,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 if bits == 0 {\n                     return err!(InvalidNullPointerUsage);\n                 }\n-                if bits % align.bytes() != 0 {\n-                    // The biggest power of two through which `bits` is divisible.\n-                    let bits_pow2 = 1 << bits.trailing_zeros();\n-                    return err!(AlignmentCheckFailed {\n-                        has: Align::from_bytes(bits_pow2).unwrap(),\n-                        required: align,\n-                    });\n-                }\n+                check_offset_align(bits, align)?;\n                 None\n             }\n             Err(ptr) => {\n@@ -321,15 +327,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                         required: align,\n                     });\n                 }\n-                let offset = ptr.offset.bytes();\n-                if offset % align.bytes() != 0 {\n-                    // The biggest power of two through which `offset` is divisible.\n-                    let bits_pow2 = 1 << offset.trailing_zeros();\n-                    return err!(AlignmentCheckFailed {\n-                        has: Align::from_bytes(bits_pow2).unwrap(),\n-                        required: align,\n-                    })\n-                }\n+                check_offset_align(ptr.offset.bytes(), align)?;\n \n                 // We can still be zero-sized in this branch, in which case we have to\n                 // return `None`."}]}