{"sha": "14931b94a207b0aef76a7d426f0620095050d7f9", "node_id": "C_kwDOAAsO6NoAKDE0OTMxYjk0YTIwN2IwYWVmNzZhN2Q0MjZmMDYyMDA5NTA1MGQ3Zjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-25T20:59:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-25T20:59:47Z"}, "message": "Rollup merge of #90196 - yanok:master, r=scottmcm\n\nFix and extent ControlFlow `traverse_inorder` example\n\nFix and extent ControlFlow `traverse_inorder` example\n\n1. The existing example compiles on its own, but any usage fails to be monomorphised and so doesn't compile. Fix that by using Fn trait instead of FnMut.\n2. Added an example usage of `traverse_inorder` showing how we can terminate the traversal early.\n\nFixes #90063", "tree": {"sha": "bf236a4e086073edadc500dd2edb9df4ddb55ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf236a4e086073edadc500dd2edb9df4ddb55ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14931b94a207b0aef76a7d426f0620095050d7f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhdxrDCRBK7hj4Ov3rIwAAPhUIAFesa21pkTMJk/LA5bYyAgps\nfngFaXlp0NhyJPxIyOUIe896qc9RqMN6qEwh3RhDQayK+nMvW56sRxB761TCCdac\nuWN0V2YrUH0U7QmGirDCaFIOfyKBN8brAE119UX8J6+pEkxisSs9FhxL9BAwKocd\na5vvrWfGx9ZaIi2yk17TqMj28O8UaKDb6Rh45MSwMFsFjGj1TJyvV6NPNVB6loeG\nUSySSBz17TbFr5xxFdqhPQ3eDAjIZodbx91xp9/sQVr4025eJ7vVutS7jPwLzHCd\n2PTZrArBRbOjjoqWMxgcWustrD4ikvlCO9iDjgxNLJ/O8wX25CEuC1VhBhrp+TY=\n=n+z7\n-----END PGP SIGNATURE-----\n", "payload": "tree bf236a4e086073edadc500dd2edb9df4ddb55ae3\nparent 2f6764760665a2ac776293edf8b6772d17f3e266\nparent f3795e27c1f4ab46626f17e027f54a96ab9ea77c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635195587 +0200\ncommitter GitHub <noreply@github.com> 1635195587 +0200\n\nRollup merge of #90196 - yanok:master, r=scottmcm\n\nFix and extent ControlFlow `traverse_inorder` example\n\nFix and extent ControlFlow `traverse_inorder` example\n\n1. The existing example compiles on its own, but any usage fails to be monomorphised and so doesn't compile. Fix that by using Fn trait instead of FnMut.\n2. Added an example usage of `traverse_inorder` showing how we can terminate the traversal early.\n\nFixes #90063\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14931b94a207b0aef76a7d426f0620095050d7f9", "html_url": "https://github.com/rust-lang/rust/commit/14931b94a207b0aef76a7d426f0620095050d7f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14931b94a207b0aef76a7d426f0620095050d7f9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6764760665a2ac776293edf8b6772d17f3e266", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6764760665a2ac776293edf8b6772d17f3e266", "html_url": "https://github.com/rust-lang/rust/commit/2f6764760665a2ac776293edf8b6772d17f3e266"}, {"sha": "f3795e27c1f4ab46626f17e027f54a96ab9ea77c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3795e27c1f4ab46626f17e027f54a96ab9ea77c", "html_url": "https://github.com/rust-lang/rust/commit/f3795e27c1f4ab46626f17e027f54a96ab9ea77c"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "776cea2ef791fbb128566a06cce9f2a048dcc8a9", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/14931b94a207b0aef76a7d426f0620095050d7f9/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14931b94a207b0aef76a7d426f0620095050d7f9/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=14931b94a207b0aef76a7d426f0620095050d7f9", "patch": "@@ -24,7 +24,7 @@ use crate::{convert, ops};\n /// ```\n ///\n /// A basic tree traversal:\n-/// ```no_run\n+/// ```\n /// use std::ops::ControlFlow;\n ///\n /// pub struct TreeNode<T> {\n@@ -34,17 +34,42 @@ use crate::{convert, ops};\n /// }\n ///\n /// impl<T> TreeNode<T> {\n-///     pub fn traverse_inorder<B>(&self, mut f: impl FnMut(&T) -> ControlFlow<B>) -> ControlFlow<B> {\n+///     pub fn traverse_inorder<B>(&self, f: &mut impl FnMut(&T) -> ControlFlow<B>) -> ControlFlow<B> {\n ///         if let Some(left) = &self.left {\n-///             left.traverse_inorder(&mut f)?;\n+///             left.traverse_inorder(f)?;\n ///         }\n ///         f(&self.value)?;\n ///         if let Some(right) = &self.right {\n-///             right.traverse_inorder(&mut f)?;\n+///             right.traverse_inorder(f)?;\n ///         }\n ///         ControlFlow::Continue(())\n ///     }\n+///     fn leaf(value: T) -> Option<Box<TreeNode<T>>> {\n+///         Some(Box::new(Self { value, left: None, right: None }))\n+///     }\n /// }\n+///\n+/// let node = TreeNode {\n+///     value: 0,\n+///     left: TreeNode::leaf(1),\n+///     right: Some(Box::new(TreeNode {\n+///         value: -1,\n+///         left: TreeNode::leaf(5),\n+///         right: TreeNode::leaf(2),\n+///     }))\n+/// };\n+/// let mut sum = 0;\n+///\n+/// let res = node.traverse_inorder(&mut |val| {\n+///     if *val < 0 {\n+///         ControlFlow::Break(*val)\n+///     } else {\n+///         sum += *val;\n+///         ControlFlow::Continue(())\n+///     }\n+/// });\n+/// assert_eq!(res, ControlFlow::Break(-1));\n+/// assert_eq!(sum, 6);\n /// ```\n #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n #[derive(Debug, Clone, Copy, PartialEq)]"}]}