{"sha": "707c0d9a2d37da38b21222cd4b98e10a93a2643d", "node_id": "C_kwDOAAsO6NoAKDcwN2MwZDlhMmQzN2RhMzhiMjEyMjJjZDRiOThlMTBhOTNhMjY0M2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-06T09:19:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-06T09:19:08Z"}, "message": "Rollup merge of #98881 - cjgillot:q-def-kind, r=fee1-dead\n\nOnly compute DefKind through the query.", "tree": {"sha": "5af601bf9937d776f4aa45b772568abfee3ae745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af601bf9937d776f4aa45b772568abfee3ae745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/707c0d9a2d37da38b21222cd4b98e10a93a2643d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixVOMCRBK7hj4Ov3rIwAA2XsIACDgr1fC8AcmXIQC01GZwC5j\ntAmbvdPndYeQmN9Oe7QLgmEfeBGxPTBTpFbsJV+TixI9CpS8vZciaUJNzKrb76VN\noy+uAbDz/ZfNa1DyAsmdIssbGhuaDAlbF3aoy+zWwi4uxXQAtBMCn3BcvLyPIonG\n4HfqMd9Se3Re3pDY7Ncv97w4IRfWpvedO9ilZmymzWleh8/rrsJn1cKjzyYDypeJ\nlLGgll4RfOiNiiuG31Fz6Y34KR/WP8cW/Z02VRNLm7SYNKJumQrGh/KKo/Z3/ejH\n8QYKkQTRODzg8MDys7AMRrwalz0yrs+GBo8yF6IvWFdagGSl1746T2CtpVVl6vw=\n=lQn4\n-----END PGP SIGNATURE-----\n", "payload": "tree 5af601bf9937d776f4aa45b772568abfee3ae745\nparent 5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7\nparent 31629860e8bada8156c207b77b91901fc274acf7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657099148 +0530\ncommitter GitHub <noreply@github.com> 1657099148 +0530\n\nRollup merge of #98881 - cjgillot:q-def-kind, r=fee1-dead\n\nOnly compute DefKind through the query.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/707c0d9a2d37da38b21222cd4b98e10a93a2643d", "html_url": "https://github.com/rust-lang/rust/commit/707c0d9a2d37da38b21222cd4b98e10a93a2643d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/707c0d9a2d37da38b21222cd4b98e10a93a2643d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "html_url": "https://github.com/rust-lang/rust/commit/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7"}, {"sha": "31629860e8bada8156c207b77b91901fc274acf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/31629860e8bada8156c207b77b91901fc274acf7", "html_url": "https://github.com/rust-lang/rust/commit/31629860e8bada8156c207b77b91901fc274acf7"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "3539acbc06ee98353fad571fe821699a6f8648a7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/707c0d9a2d37da38b21222cd4b98e10a93a2643d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707c0d9a2d37da38b21222cd4b98e10a93a2643d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=707c0d9a2d37da38b21222cd4b98e10a93a2643d", "patch": "@@ -225,7 +225,8 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions_untracked().iter_local_def_id()\n     }\n \n-    pub fn opt_def_kind(self, local_def_id: LocalDefId) -> Option<DefKind> {\n+    /// Do not call this function directly. The query should be called.\n+    pub(super) fn opt_def_kind(self, local_def_id: LocalDefId) -> Option<DefKind> {\n         let hir_id = self.local_def_id_to_hir_id(local_def_id);\n         let def_kind = match self.find(hir_id)? {\n             Node::Item(item) => match item.kind {"}, {"sha": "5560d44aa0d52f5428252a3dd2f1fa2fa06b76ba", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/707c0d9a2d37da38b21222cd4b98e10a93a2643d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707c0d9a2d37da38b21222cd4b98e10a93a2643d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=707c0d9a2d37da38b21222cd4b98e10a93a2643d", "patch": "@@ -467,7 +467,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         }\n \n         let macro_module_def_id = self.tcx.local_parent(local_def_id);\n-        if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {\n+        if self.tcx.opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {\n             // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).\n             return;\n         }"}, {"sha": "3ed6632ba66adfe189b09b3fd16216b974159e63", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/707c0d9a2d37da38b21222cd4b98e10a93a2643d/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707c0d9a2d37da38b21222cd4b98e10a93a2643d/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=707c0d9a2d37da38b21222cd4b98e10a93a2643d", "patch": "@@ -282,11 +282,14 @@ macro_rules! define_queries {\n                 } else {\n                     Some(key.default_span(*tcx))\n                 };\n-                // Use `tcx.hir().opt_def_kind()` to reduce the chance of\n-                // accidentally triggering an infinite query loop.\n-                let def_kind = key.key_as_def_id()\n-                    .and_then(|def_id| def_id.as_local())\n-                    .and_then(|def_id| tcx.hir().opt_def_kind(def_id));\n+                let def_kind = if kind == dep_graph::DepKind::opt_def_kind {\n+                    // Try to avoid infinite recursion.\n+                    None\n+                } else {\n+                    key.key_as_def_id()\n+                        .and_then(|def_id| def_id.as_local())\n+                        .and_then(|def_id| tcx.opt_def_kind(def_id))\n+                };\n                 let hash = || {\n                     let mut hcx = tcx.create_stable_hashing_context();\n                     let mut hasher = StableHasher::new();"}]}