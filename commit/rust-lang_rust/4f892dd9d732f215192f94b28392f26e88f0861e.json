{"sha": "4f892dd9d732f215192f94b28392f26e88f0861e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmODkyZGQ5ZDczMmYyMTUxOTJmOTRiMjgzOTJmMjZlODhmMDg2MWU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-02T20:47:41Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-05T18:26:07Z"}, "message": "Check that the operand in a check is a call\n\nIn addition, fix bug in fold that was turning asserts into checks.\n\nMore typechecking still needs to be done.", "tree": {"sha": "080318c19494144be62617146984d7bb14478432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/080318c19494144be62617146984d7bb14478432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f892dd9d732f215192f94b28392f26e88f0861e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f892dd9d732f215192f94b28392f26e88f0861e", "html_url": "https://github.com/rust-lang/rust/commit/4f892dd9d732f215192f94b28392f26e88f0861e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f892dd9d732f215192f94b28392f26e88f0861e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a0e98096f86195b3f97f255b8512b6e8d76ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a0e98096f86195b3f97f255b8512b6e8d76ed7", "html_url": "https://github.com/rust-lang/rust/commit/59a0e98096f86195b3f97f255b8512b6e8d76ed7"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "49b6290cfba5b58760cd28195a93abb1d6dd138d", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f892dd9d732f215192f94b28392f26e88f0861e/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f892dd9d732f215192f94b28392f26e88f0861e/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=4f892dd9d732f215192f94b28392f26e88f0861e", "patch": "@@ -1396,7 +1396,7 @@ fn identity_fold_expr_check[ENV](&ENV e, &span sp, @expr x, ann a)\n \n fn identity_fold_expr_assert[ENV](&ENV e, &span sp, @expr x, ann a)\n     -> @expr {\n-    ret @respan(sp, ast.expr_check(x, a));\n+    ret @respan(sp, ast.expr_assert(x, a));\n }\n \n fn identity_fold_expr_port[ENV](&ENV e, &span sp, ann a) -> @expr {"}, {"sha": "fd91510844b1e8b83af814eeee5dd0422335f30b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f892dd9d732f215192f94b28392f26e88f0861e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f892dd9d732f215192f94b28392f26e88f0861e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4f892dd9d732f215192f94b28392f26e88f0861e", "patch": "@@ -9,6 +9,8 @@ import util.common;\n import util.common.span;\n import util.common.plain_ann;\n \n+import util.common.log_expr_err;\n+\n import middle.ty;\n import middle.ty.ann_to_type;\n import middle.ty.arg;\n@@ -1955,16 +1957,25 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n         }\n \n         case (ast.expr_check(?e, _)) {\n-            /* FIXME */\n-        /* presumably, here is where we should check that e is\n-         actually a call to a predicate, where all the arguments\n-        are literals or slot variables? */\n             auto expr_t = check_expr(fcx, e);\n             Demand.simple(fcx, expr.span, ty.mk_bool(fcx.ccx.tcx),\n                           expr_ty(fcx.ccx.tcx, expr_t));\n-            ret @fold.respan[ast.expr_]\n-                (expr.span, ast.expr_check(expr_t,\n-                                                plain_ann(fcx.ccx.tcx)));\n+            /* e must be a call expr where all arguments are either\n+             literals or slots */\n+            alt (e.node) {\n+                case (ast.expr_call(?operator, ?operands, _)) {\n+                    /* operator must be a pure function */\n+                    /* FIXME: need more checking */\n+                    ret @fold.respan[ast.expr_]\n+                        (expr.span, ast.expr_check(expr_t,\n+                               plain_ann(fcx.ccx.tcx)));\n+                    \n+                }\n+                case (_) {\n+                    fcx.ccx.sess.span_err(expr.span,\n+                        \"Check on non-predicate\");\n+                }\n+            }\n         }\n \n         case (ast.expr_assert(?e, _)) {"}, {"sha": "c8ac4a08adb3c3e46cc9d67af1e65a970756bded", "filename": "src/test/compile-fail/not-a-pred-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f892dd9d732f215192f94b28392f26e88f0861e/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f892dd9d732f215192f94b28392f26e88f0861e/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-2.rs?ref=4f892dd9d732f215192f94b28392f26e88f0861e", "patch": "@@ -0,0 +1,9 @@\n+// -*- rust -*-\n+// xfail-boot\n+\n+// error-pattern: non-predicate\n+\n+fn main() {\n+  check (1 == 2); // should fail to typecheck, as (a == b)\n+                  // is not a manifest call\n+}"}]}