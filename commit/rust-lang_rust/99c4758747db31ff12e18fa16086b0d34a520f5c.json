{"sha": "99c4758747db31ff12e18fa16086b0d34a520f5c", "node_id": "C_kwDOAAsO6NoAKDk5YzQ3NTg3NDdkYjMxZmYxMmUxOGZhMTYwODZiMGQzNGE1MjBmNWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-26T02:00:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-26T02:00:17Z"}, "message": "Auto merge of #97369 - tmiasko:codgen-ssa-atomic-ordering, r=michaelwoerister\n\nrustc_codegen_ssa: cleanup `AtomicOrdering`\n\n* Remove unused `NotAtomic` ordering.\n* Rename `Monotonic` to `Relaxed` - a Rust specific name.\n* Derive copy and clone.", "tree": {"sha": "7f257793c7d7e32766aea9532a2ed4bd6e9759ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f257793c7d7e32766aea9532a2ed4bd6e9759ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c4758747db31ff12e18fa16086b0d34a520f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c4758747db31ff12e18fa16086b0d34a520f5c", "html_url": "https://github.com/rust-lang/rust/commit/99c4758747db31ff12e18fa16086b0d34a520f5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c4758747db31ff12e18fa16086b0d34a520f5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "html_url": "https://github.com/rust-lang/rust/commit/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4"}, {"sha": "ef83e689a82682ba9547de1b921d72b5a3d75b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef83e689a82682ba9547de1b921d72b5a3d75b30", "html_url": "https://github.com/rust-lang/rust/commit/ef83e689a82682ba9547de1b921d72b5a3d75b30"}], "stats": {"total": 47, "additions": 15, "deletions": 32}, "files": [{"sha": "479328a557cfaf8a4b3b836c447f5ce70706bb43", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/99c4758747db31ff12e18fa16086b0d34a520f5c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c4758747db31ff12e18fa16086b0d34a520f5c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=99c4758747db31ff12e18fa16086b0d34a520f5c", "patch": "@@ -61,24 +61,6 @@ enum ExtremumOperation {\n     Min,\n }\n \n-trait EnumClone {\n-    fn clone(&self) -> Self;\n-}\n-\n-impl EnumClone for AtomicOrdering {\n-    fn clone(&self) -> Self {\n-        match *self {\n-            AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n-            AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n-            AtomicOrdering::Monotonic => AtomicOrdering::Monotonic,\n-            AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n-            AtomicOrdering::Release => AtomicOrdering::Release,\n-            AtomicOrdering::AcquireRelease => AtomicOrdering::AcquireRelease,\n-            AtomicOrdering::SequentiallyConsistent => AtomicOrdering::SequentiallyConsistent,\n-        }\n-    }\n-}\n-\n pub struct Builder<'a: 'gcc, 'gcc, 'tcx> {\n     pub cx: &'a CodegenCx<'gcc, 'tcx>,\n     pub block: Block<'gcc>,\n@@ -103,9 +85,9 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n             match order {\n                 // TODO(antoyo): does this make sense?\n                 AtomicOrdering::AcquireRelease | AtomicOrdering::Release => AtomicOrdering::Acquire,\n-                _ => order.clone(),\n+                _ => order,\n             };\n-        let previous_value = self.atomic_load(dst.get_type(), dst, load_ordering.clone(), Size::from_bytes(size));\n+        let previous_value = self.atomic_load(dst.get_type(), dst, load_ordering, Size::from_bytes(size));\n         let previous_var = func.new_local(None, previous_value.get_type(), \"previous_value\");\n         let return_value = func.new_local(None, previous_value.get_type(), \"return_value\");\n         self.llbb().add_assignment(None, previous_var, previous_value);\n@@ -1384,9 +1366,8 @@ impl ToGccOrdering for AtomicOrdering {\n \n         let ordering =\n             match self {\n-                AtomicOrdering::NotAtomic => __ATOMIC_RELAXED, // TODO(antoyo): check if that's the same.\n                 AtomicOrdering::Unordered => __ATOMIC_RELAXED,\n-                AtomicOrdering::Monotonic => __ATOMIC_RELAXED, // TODO(antoyo): check if that's the same.\n+                AtomicOrdering::Relaxed => __ATOMIC_RELAXED, // TODO(antoyo): check if that's the same.\n                 AtomicOrdering::Acquire => __ATOMIC_ACQUIRE,\n                 AtomicOrdering::Release => __ATOMIC_RELEASE,\n                 AtomicOrdering::AcquireRelease => __ATOMIC_ACQ_REL,"}, {"sha": "1d9a4655db637ba148f5f371fd2df9b06576fa1b", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99c4758747db31ff12e18fa16086b0d34a520f5c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c4758747db31ff12e18fa16086b0d34a520f5c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=99c4758747db31ff12e18fa16086b0d34a520f5c", "patch": "@@ -381,9 +381,8 @@ pub enum AtomicOrdering {\n impl AtomicOrdering {\n     pub fn from_generic(ao: rustc_codegen_ssa::common::AtomicOrdering) -> Self {\n         match ao {\n-            rustc_codegen_ssa::common::AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n             rustc_codegen_ssa::common::AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n-            rustc_codegen_ssa::common::AtomicOrdering::Monotonic => AtomicOrdering::Monotonic,\n+            rustc_codegen_ssa::common::AtomicOrdering::Relaxed => AtomicOrdering::Monotonic,\n             rustc_codegen_ssa::common::AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n             rustc_codegen_ssa::common::AtomicOrdering::Release => AtomicOrdering::Release,\n             rustc_codegen_ssa::common::AtomicOrdering::AcquireRelease => {"}, {"sha": "8ca1a6084cf6f6b16e232bde079078bcf8ea1d1d", "filename": "compiler/rustc_codegen_ssa/src/common.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99c4758747db31ff12e18fa16086b0d34a520f5c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c4758747db31ff12e18fa16086b0d34a520f5c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs?ref=99c4758747db31ff12e18fa16086b0d34a520f5c", "patch": "@@ -11,6 +11,7 @@ use rustc_span::Span;\n use crate::base;\n use crate::traits::*;\n \n+#[derive(Copy, Clone)]\n pub enum IntPredicate {\n     IntEQ,\n     IntNE,\n@@ -24,6 +25,7 @@ pub enum IntPredicate {\n     IntSLE,\n }\n \n+#[derive(Copy, Clone)]\n pub enum RealPredicate {\n     RealPredicateFalse,\n     RealOEQ,\n@@ -43,6 +45,7 @@ pub enum RealPredicate {\n     RealPredicateTrue,\n }\n \n+#[derive(Copy, Clone)]\n pub enum AtomicRmwBinOp {\n     AtomicXchg,\n     AtomicAdd,\n@@ -57,17 +60,17 @@ pub enum AtomicRmwBinOp {\n     AtomicUMin,\n }\n \n+#[derive(Copy, Clone)]\n pub enum AtomicOrdering {\n-    NotAtomic,\n     Unordered,\n-    Monotonic,\n-    // Consume,  // Not specified yet.\n+    Relaxed,\n     Acquire,\n     Release,\n     AcquireRelease,\n     SequentiallyConsistent,\n }\n \n+#[derive(Copy, Clone)]\n pub enum SynchronizationScope {\n     SingleThread,\n     CrossThread,"}, {"sha": "0ed4c3f1d9430652f529e9c8c0d404545e0c1a56", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99c4758747db31ff12e18fa16086b0d34a520f5c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c4758747db31ff12e18fa16086b0d34a520f5c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=99c4758747db31ff12e18fa16086b0d34a520f5c", "patch": "@@ -388,17 +388,17 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     2 => (SequentiallyConsistent, SequentiallyConsistent),\n                     3 => match split[2] {\n                         \"unordered\" => (Unordered, Unordered),\n-                        \"relaxed\" => (Monotonic, Monotonic),\n+                        \"relaxed\" => (Relaxed, Relaxed),\n                         \"acq\" => (Acquire, Acquire),\n-                        \"rel\" => (Release, Monotonic),\n+                        \"rel\" => (Release, Relaxed),\n                         \"acqrel\" => (AcquireRelease, Acquire),\n-                        \"failrelaxed\" if is_cxchg => (SequentiallyConsistent, Monotonic),\n+                        \"failrelaxed\" if is_cxchg => (SequentiallyConsistent, Relaxed),\n                         \"failacq\" if is_cxchg => (SequentiallyConsistent, Acquire),\n                         _ => bx.sess().fatal(\"unknown ordering in atomic intrinsic\"),\n                     },\n                     4 => match (split[2], split[3]) {\n-                        (\"acq\", \"failrelaxed\") if is_cxchg => (Acquire, Monotonic),\n-                        (\"acqrel\", \"failrelaxed\") if is_cxchg => (AcquireRelease, Monotonic),\n+                        (\"acq\", \"failrelaxed\") if is_cxchg => (Acquire, Relaxed),\n+                        (\"acqrel\", \"failrelaxed\") if is_cxchg => (AcquireRelease, Relaxed),\n                         _ => bx.sess().fatal(\"unknown ordering in atomic intrinsic\"),\n                     },\n                     _ => bx.sess().fatal(\"Atomic intrinsic not in correct format\"),"}]}