{"sha": "fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOTFlZWI5OWZiZmE4MGZhYzllYTU4NjcwZDZiODZmYTg0OTQ5ZjE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-20T13:32:06Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-20T13:32:06Z"}, "message": "Remove unused DefTable::retrace_path().", "tree": {"sha": "41ee55ac2b9460f25e6a785289c1561e3ac5c949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ee55ac2b9460f25e6a785289c1561e3ac5c949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "html_url": "https://github.com/rust-lang/rust/commit/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1edbc3df0d051902916ead8e81db16a6f546f973", "url": "https://api.github.com/repos/rust-lang/rust/commits/1edbc3df0d051902916ead8e81db16a6f546f973", "html_url": "https://github.com/rust-lang/rust/commit/1edbc3df0d051902916ead8e81db16a6f546f973"}], "stats": {"total": 140, "additions": 27, "deletions": 113}, "files": [{"sha": "7f76e1bf770bf26c5549a66aec2a51dc998869f6", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "patch": "@@ -136,6 +136,10 @@ impl DefIndex {\n     pub fn as_array_index(&self) -> usize {\n         (self.0 & !DEF_INDEX_HI_START.0) as usize\n     }\n+\n+    pub fn from_array_index(i: usize, address_space: DefIndexAddressSpace) -> DefIndex {\n+        DefIndex::new(address_space.start() + i)\n+    }\n }\n \n /// The start of the \"high\" range of DefIndexes."}, {"sha": "91bce64243e3f0ae98f7d175d48374f7bcbb6ada", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 19, "deletions": 66, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "patch": "@@ -18,7 +18,7 @@ use hir;\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n                   CRATE_DEF_INDEX};\n use ich::Fingerprint;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -36,7 +36,6 @@ use util::nodemap::NodeMap;\n /// There is one DefPathTable for each crate.\n pub struct DefPathTable {\n     index_to_key: [Vec<DefKey>; 2],\n-    key_to_index: FxHashMap<DefKey, DefIndex>,\n     def_path_hashes: [Vec<DefPathHash>; 2],\n }\n \n@@ -47,7 +46,6 @@ impl Clone for DefPathTable {\n         DefPathTable {\n             index_to_key: [self.index_to_key[0].clone(),\n                            self.index_to_key[1].clone()],\n-            key_to_index: self.key_to_index.clone(),\n             def_path_hashes: [self.def_path_hashes[0].clone(),\n                               self.def_path_hashes[1].clone()],\n         }\n@@ -65,10 +63,9 @@ impl DefPathTable {\n             let index_to_key = &mut self.index_to_key[address_space.index()];\n             let index = DefIndex::new(index_to_key.len() + address_space.start());\n             debug!(\"DefPathTable::insert() - {:?} <-> {:?}\", key, index);\n-            index_to_key.push(key.clone());\n+            index_to_key.push(key);\n             index\n         };\n-        self.key_to_index.insert(key, index);\n         self.def_path_hashes[address_space.index()].push(def_path_hash);\n         debug_assert!(self.def_path_hashes[address_space.index()].len() ==\n                       self.index_to_key[address_space.index()].len());\n@@ -87,47 +84,6 @@ impl DefPathTable {\n                             [index.as_array_index()]\n     }\n \n-    #[inline(always)]\n-    pub fn def_index_for_def_key(&self, key: &DefKey) -> Option<DefIndex> {\n-        self.key_to_index.get(key).cloned()\n-    }\n-\n-    #[inline(always)]\n-    pub fn contains_key(&self, key: &DefKey) -> bool {\n-        self.key_to_index.contains_key(key)\n-    }\n-\n-    pub fn retrace_path(&self,\n-                        path_data: &[DisambiguatedDefPathData])\n-                        -> Option<DefIndex> {\n-        let root_key = DefKey {\n-            parent: None,\n-            disambiguated_data: DisambiguatedDefPathData {\n-                data: DefPathData::CrateRoot,\n-                disambiguator: 0,\n-            },\n-        };\n-\n-        let root_index = self.key_to_index\n-                             .get(&root_key)\n-                             .expect(\"no root key?\")\n-                             .clone();\n-\n-        debug!(\"retrace_path: root_index={:?}\", root_index);\n-\n-        let mut index = root_index;\n-        for data in path_data {\n-            let key = DefKey { parent: Some(index), disambiguated_data: data.clone() };\n-            debug!(\"retrace_path: key={:?}\", key);\n-            match self.key_to_index.get(&key) {\n-                Some(&i) => index = i,\n-                None => return None,\n-            }\n-        }\n-\n-        Some(index)\n-    }\n-\n     pub fn add_def_path_hashes_to(&self,\n                                   cnum: CrateNum,\n                                   out: &mut FxHashMap<DefPathHash, DefId>) {\n@@ -149,7 +105,7 @@ impl DefPathTable {\n     }\n \n     pub fn size(&self) -> usize {\n-        self.key_to_index.len()\n+        self.index_to_key.iter().map(|v| v.len()).sum()\n     }\n }\n \n@@ -179,19 +135,8 @@ impl Decodable for DefPathTable {\n         let index_to_key = [index_to_key_lo, index_to_key_hi];\n         let def_path_hashes = [def_path_hashes_lo, def_path_hashes_hi];\n \n-        let mut key_to_index = FxHashMap();\n-\n-        for space in &[DefIndexAddressSpace::Low, DefIndexAddressSpace::High] {\n-            key_to_index.extend(index_to_key[space.index()]\n-                .iter()\n-                .enumerate()\n-                .map(|(index, key)| (key.clone(),\n-                                     DefIndex::new(index + space.start()))))\n-        }\n-\n         Ok(DefPathTable {\n             index_to_key,\n-            key_to_index,\n             def_path_hashes,\n         })\n     }\n@@ -208,6 +153,7 @@ pub struct Definitions {\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n     macro_def_scopes: FxHashMap<Mark, DefId>,\n     expansions: FxHashMap<DefIndex, Mark>,\n+    keys_created: FxHashSet<DefKey>,\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -224,6 +170,7 @@ impl Clone for Definitions {\n             node_to_hir_id: self.node_to_hir_id.clone(),\n             macro_def_scopes: self.macro_def_scopes.clone(),\n             expansions: self.expansions.clone(),\n+            keys_created: self.keys_created.clone(),\n         }\n     }\n }\n@@ -448,14 +395,14 @@ impl Definitions {\n         Definitions {\n             table: DefPathTable {\n                 index_to_key: [vec![], vec![]],\n-                key_to_index: FxHashMap(),\n                 def_path_hashes: [vec![], vec![]],\n             },\n             node_to_def_index: NodeMap(),\n             def_index_to_node: [vec![], vec![]],\n             node_to_hir_id: IndexVec::new(),\n             macro_def_scopes: FxHashMap(),\n             expansions: FxHashMap(),\n+            keys_created: FxHashSet(),\n         }\n     }\n \n@@ -478,10 +425,6 @@ impl Definitions {\n         self.table.def_path_hash(index)\n     }\n \n-    pub fn def_index_for_def_key(&self, key: DefKey) -> Option<DefIndex> {\n-        self.table.def_index_for_def_key(&key)\n-    }\n-\n     /// Returns the path from the crate root to `index`. The root\n     /// nodes are not included in the path (i.e., this will be an\n     /// empty vector for the crate root). For an inlined item, this\n@@ -583,9 +526,10 @@ impl Definitions {\n             }\n         };\n \n-        while self.table.contains_key(&key) {\n+        while self.keys_created.contains(&key) {\n             key.disambiguated_data.disambiguator += 1;\n         }\n+        self.keys_created.insert(key.clone());\n \n         let parent_hash = self.table.def_path_hash(parent);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n@@ -710,6 +654,8 @@ macro_rules! define_global_metadata_kind {\n             $($variant),*\n         }\n \n+        const GLOBAL_MD_ADDRESS_SPACE: DefIndexAddressSpace = DefIndexAddressSpace::High;\n+\n         impl GlobalMetaDataKind {\n             fn allocate_def_indices(definitions: &mut Definitions) {\n                 $({\n@@ -718,7 +664,7 @@ macro_rules! define_global_metadata_kind {\n                         CRATE_DEF_INDEX,\n                         ast::DUMMY_NODE_ID,\n                         DefPathData::GlobalMetaData(instance.name()),\n-                        DefIndexAddressSpace::High,\n+                        GLOBAL_MD_ADDRESS_SPACE,\n                         Mark::root()\n                     );\n \n@@ -736,7 +682,14 @@ macro_rules! define_global_metadata_kind {\n                     }\n                 };\n \n-                def_path_table.key_to_index[&def_key]\n+                // These DefKeys are all right after the root,\n+                // so a linear search is fine.\n+                let index = def_path_table.index_to_key[GLOBAL_MD_ADDRESS_SPACE.index()]\n+                                          .iter()\n+                                          .position(|k| *k == def_key)\n+                                          .unwrap();\n+\n+                DefIndex::from_array_index(index, GLOBAL_MD_ADDRESS_SPACE)\n             }\n \n             fn name(&self) -> Symbol {"}, {"sha": "3fdd9c34f46d9f130a94bb7f695cfeb403a6d0d3", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "patch": "@@ -17,7 +17,7 @@ pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n \n use dep_graph::{DepGraph, DepNode, DepKind};\n \n-use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex, DefIndexAddressSpace};\n+use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndexAddressSpace};\n \n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n@@ -377,10 +377,6 @@ impl<'hir> Map<'hir> {\n         self.definitions.def_path(def_id.index)\n     }\n \n-    pub fn def_index_for_def_key(&self, def_key: DefKey) -> Option<DefIndex> {\n-        self.definitions.def_index_for_def_key(def_key)\n-    }\n-\n     pub fn local_def_id(&self, node: NodeId) -> DefId {\n         self.opt_local_def_id(node).unwrap_or_else(|| {\n             bug!(\"local_def_id: no entry for `{}`, which has a map of `{:?}`\","}, {"sha": "48bddf2f71759bac89f34ca8ef72483b053e2c0e", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "patch": "@@ -25,8 +25,7 @@\n use hir::def;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::map as hir_map;\n-use hir::map::definitions::{Definitions, DefKey, DisambiguatedDefPathData,\n-                            DefPathTable};\n+use hir::map::definitions::{Definitions, DefKey, DefPathTable};\n use hir::svh::Svh;\n use ich;\n use middle::lang_items;\n@@ -269,10 +268,6 @@ pub trait CrateStore {\n     fn is_no_builtins(&self, cnum: CrateNum) -> bool;\n \n     // resolve\n-    fn retrace_path(&self,\n-                    cnum: CrateNum,\n-                    path_data: &[DisambiguatedDefPathData])\n-                    -> Option<DefId>;\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n     fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash;\n@@ -392,13 +387,6 @@ impl CrateStore for DummyCrateStore {\n     fn is_no_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_no_builtins\") }\n \n     // resolve\n-    fn retrace_path(&self,\n-                    cnum: CrateNum,\n-                    path_data: &[DisambiguatedDefPathData])\n-                    -> Option<DefId> {\n-        None\n-    }\n-\n     fn def_key(&self, def: DefId) -> DefKey { bug!(\"def_key\") }\n     fn def_path(&self, def: DefId) -> hir_map::DefPath {\n         bug!(\"relative_def_path\")"}, {"sha": "45ddd4c0ff179ba7420c37e8bfc50b351c05b476", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "patch": "@@ -18,7 +18,7 @@ use hir::TraitMap;\n use hir::def::{Def, ExportMap};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n-use hir::map::{DisambiguatedDefPathData, DefPathHash};\n+use hir::map::DefPathHash;\n use middle::free_region::FreeRegionMap;\n use middle::lang_items;\n use middle::resolve_lifetime;\n@@ -570,23 +570,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn retrace_path(self,\n-                        krate: CrateNum,\n-                        path_data: &[DisambiguatedDefPathData])\n-                        -> Option<DefId> {\n-        debug!(\"retrace_path(path={:?}, krate={:?})\", path_data, self.crate_name(krate));\n-\n-        if krate == LOCAL_CRATE {\n-            self.hir\n-                .definitions()\n-                .def_path_table()\n-                .retrace_path(path_data)\n-                .map(|def_index| DefId { krate: krate, index: def_index })\n-        } else {\n-            self.sess.cstore.retrace_path(krate, path_data)\n-        }\n-    }\n-\n     pub fn alloc_generics(self, generics: ty::Generics) -> &'gcx ty::Generics {\n         self.global_arenas.generics.alloc(generics)\n     }"}, {"sha": "5b0612ddab6060c71ace37da58bf500bf22dd059", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa91eeb99fbfa80fac9ea58670d6b86fa84949f1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=fa91eeb99fbfa80fac9ea58670d6b86fa84949f1", "patch": "@@ -22,7 +22,7 @@ use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::map::{DefKey, DefPath, DisambiguatedDefPathData, DefPathHash};\n+use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::definitions::{DefPathTable, GlobalMetaDataKind};\n use rustc::util::nodemap::{NodeSet, DefIdMap};\n@@ -307,16 +307,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).is_no_builtins(&self.dep_graph)\n     }\n \n-    fn retrace_path(&self,\n-                    cnum: CrateNum,\n-                    path: &[DisambiguatedDefPathData])\n-                    -> Option<DefId> {\n-        let cdata = self.get_crate_data(cnum);\n-        cdata.def_path_table\n-             .retrace_path(&path)\n-             .map(|index| DefId { krate: cnum, index: index })\n-    }\n-\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to."}]}