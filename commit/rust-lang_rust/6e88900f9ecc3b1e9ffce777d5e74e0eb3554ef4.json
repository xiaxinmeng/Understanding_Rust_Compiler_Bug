{"sha": "6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlODg5MDBmOWVjYzNiMWU5ZmZjZTc3N2Q1ZTc0ZTBlYjM1NTRlZjQ=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-24T20:19:27Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-24T20:23:02Z"}, "message": "Rename `contains_adt` to `contains_adt_constructor`", "tree": {"sha": "7af63af2234e46d85fa263e2ad2fa9b9c8494f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af63af2234e46d85fa263e2ad2fa9b9c8494f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBbn6kACgkQ2lnoZDo37QZ4NgD9HkneacGOKsu4BPvUN+ZexgJw\nJN5CuRfYkqLOLiV5nH4A/3CSGBw/bIrTpcuy1a4JQPrvK31Znmw8sDX/bpvCGSEH\n=FaNJ\n-----END PGP SIGNATURE-----", "payload": "tree 7af63af2234e46d85fa263e2ad2fa9b9c8494f52\nparent 99b8a671981eb9bf2c624027940bf9ae4cd23087\nauthor Jason Newcomb <jsnewcomb@pm.me> 1616617167 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1616617382 -0400\n\nRename `contains_adt` to `contains_adt_constructor`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4", "html_url": "https://github.com/rust-lang/rust/commit/6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b8a671981eb9bf2c624027940bf9ae4cd23087", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b8a671981eb9bf2c624027940bf9ae4cd23087", "html_url": "https://github.com/rust-lang/rust/commit/99b8a671981eb9bf2c624027940bf9ae4cd23087"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "fccdee078778e523e3ce3af6fa78dca9b366a46f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4", "patch": "@@ -61,7 +61,7 @@ mod zst_offset;\n \n use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n-use clippy_utils::ty::{contains_adt, contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::ty::{contains_adt_constructor, contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n use clippy_utils::{contains_return, get_trait_def_id, in_macro, iter_input_pats, method_calls, paths, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n@@ -1917,7 +1917,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             // walk the return type and check for Self (this does not check associated types)\n             if let Some(self_adt) = self_ty.ty_adt_def() {\n-                if contains_adt(ret_ty, self_adt) {\n+                if contains_adt_constructor(ret_ty, self_adt) {\n                     return;\n                 }\n             } else if contains_ty(ret_ty, self_ty) {\n@@ -1931,7 +1931,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt(projection_predicate.ty, self_adt) {\n+                            if contains_adt_constructor(projection_predicate.ty, self_adt) {\n                                 return;\n                             }\n                         } else if contains_ty(projection_predicate.ty, self_ty) {"}, {"sha": "807cfbc4c7f1f420ed25025e62f560bd53a9f732", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=6e88900f9ecc3b1e9ffce777d5e74e0eb3554ef4", "patch": "@@ -43,9 +43,9 @@ pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n     })\n }\n \n-/// Walks into `ty` and returns `true` if any inner type is any instance of the given abstract data\n-/// type.`\n-pub fn contains_adt(ty: Ty<'_>, adt: &AdtDef) -> bool {\n+/// Walks into `ty` and returns `true` if any inner type is an instance of the given adt\n+/// constructor.\n+pub fn contains_adt_constructor(ty: Ty<'_>, adt: &AdtDef) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,"}]}