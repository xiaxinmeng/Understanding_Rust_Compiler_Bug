{"sha": "e70817e712fd4d4e930ead0d587031e2b4a97a2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MDgxN2U3MTJmZDRkNGU5MzBlYWQwZDU4NzAzMWUyYjRhOTdhMmU=", "commit": {"author": {"name": "cgm616", "email": "cgm616@me.com", "date": "2020-10-16T20:20:03Z"}, "committer": {"name": "cgm616", "email": "cgm616@me.com", "date": "2020-10-22T01:21:11Z"}, "message": "Update tests and add known problems to docs", "tree": {"sha": "4eadd355a92bc80775f17381e53f2c879c78bc3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eadd355a92bc80775f17381e53f2c879c78bc3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e70817e712fd4d4e930ead0d587031e2b4a97a2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e70817e712fd4d4e930ead0d587031e2b4a97a2e", "html_url": "https://github.com/rust-lang/rust/commit/e70817e712fd4d4e930ead0d587031e2b4a97a2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e70817e712fd4d4e930ead0d587031e2b4a97a2e/comments", "author": {"login": "cgm616", "id": 2502394, "node_id": "MDQ6VXNlcjI1MDIzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2502394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgm616", "html_url": "https://github.com/cgm616", "followers_url": "https://api.github.com/users/cgm616/followers", "following_url": "https://api.github.com/users/cgm616/following{/other_user}", "gists_url": "https://api.github.com/users/cgm616/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgm616/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgm616/subscriptions", "organizations_url": "https://api.github.com/users/cgm616/orgs", "repos_url": "https://api.github.com/users/cgm616/repos", "events_url": "https://api.github.com/users/cgm616/events{/privacy}", "received_events_url": "https://api.github.com/users/cgm616/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cgm616", "id": 2502394, "node_id": "MDQ6VXNlcjI1MDIzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2502394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgm616", "html_url": "https://github.com/cgm616", "followers_url": "https://api.github.com/users/cgm616/followers", "following_url": "https://api.github.com/users/cgm616/following{/other_user}", "gists_url": "https://api.github.com/users/cgm616/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgm616/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgm616/subscriptions", "organizations_url": "https://api.github.com/users/cgm616/orgs", "repos_url": "https://api.github.com/users/cgm616/repos", "events_url": "https://api.github.com/users/cgm616/events{/privacy}", "received_events_url": "https://api.github.com/users/cgm616/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4f998c39b1b7e06c34a5fc8ed90e8752142e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4f998c39b1b7e06c34a5fc8ed90e8752142e20", "html_url": "https://github.com/rust-lang/rust/commit/4a4f998c39b1b7e06c34a5fc8ed90e8752142e20"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "97e7cfd1bb26c15814bd543b18ca5719c5c780d6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e70817e712fd4d4e930ead0d587031e2b4a97a2e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70817e712fd4d4e930ead0d587031e2b4a97a2e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e70817e712fd4d4e930ead0d587031e2b4a97a2e", "patch": "@@ -1524,6 +1524,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n+        LintId::of(&undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n         LintId::of(&unicode::INVISIBLE_CHARACTERS),\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),"}, {"sha": "5443f1601fcbb083c8fcef94219a56a26d67cc5c", "filename": "clippy_lints/src/undropped_manually_drops.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e70817e712fd4d4e930ead0d587031e2b4a97a2e/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70817e712fd4d4e930ead0d587031e2b4a97a2e/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs?ref=e70817e712fd4d4e930ead0d587031e2b4a97a2e", "patch": "@@ -1,14 +1,15 @@\n-use rustc_lint::{LateLintPass, LateContext};\n+use crate::utils::{is_type_lang_item, match_function_call, paths, span_lint_and_help};\n+use rustc_hir::{lang_items, Expr};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_hir::*;\n-use crate::utils::{match_function_call, is_type_lang_item, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Prevents the safe `std::mem::drop` function from being called on `std::mem::ManuallyDrop`.\n     ///\n     /// **Why is this bad?** The safe `drop` function does not drop the inner value of a `ManuallyDrop`.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** Does not catch cases if the user binds `std::mem::drop`\n+    /// to a different name and calls it that way.\n     ///\n     /// **Example:**\n     ///\n@@ -20,7 +21,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// struct S;\n     /// unsafe {\n-    ///     std::mem::ManuallyDrop::drop(std::mem::ManuallyDrop::new(S));\n+    ///     std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n     /// }\n     /// ```\n     pub UNDROPPED_MANUALLY_DROPS,\n@@ -41,9 +42,9 @@ impl LateLintPass<'tcx> for UndroppedManuallyDrops {\n                     expr.span,\n                     \"the inner value of this ManuallyDrop will not be dropped\",\n                     None,\n-                    \"to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\"\n+                    \"to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\",\n                 );\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f4cfc92e1cd0259eddc426dce698b54ee4c7b61d", "filename": "tests/ui/undropped_manually_drops.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e70817e712fd4d4e930ead0d587031e2b4a97a2e/tests%2Fui%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70817e712fd4d4e930ead0d587031e2b4a97a2e/tests%2Fui%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundropped_manually_drops.rs?ref=e70817e712fd4d4e930ead0d587031e2b4a97a2e", "patch": "@@ -3,16 +3,24 @@\n struct S;\n \n fn main() {\n-    let f = drop;\n-    let manual = std::mem::ManuallyDrop::new(S);\n+    let f = std::mem::drop;\n+    let g = std::mem::ManuallyDrop::drop;\n+    let mut manual1 = std::mem::ManuallyDrop::new(S);\n+    let mut manual2 = std::mem::ManuallyDrop::new(S);\n+    let mut manual3 = std::mem::ManuallyDrop::new(S);\n+    let mut manual4 = std::mem::ManuallyDrop::new(S);\n \n-    // These lines will not drop `S`\n+    // These lines will not drop `S` and should be linted\n     drop(std::mem::ManuallyDrop::new(S));\n-    f(manual);\n+    drop(manual1);\n \n-    // These lines will\n+    // FIXME: this line is not linted, though it should be\n+    f(manual2);\n+\n+    // These lines will drop `S` and should be okay.\n     unsafe {\n-        std::mem::ManuallyDrop::drop(std::mem::ManuallyDrop::new(S));\n-        std::mem::ManuallyDrop::drop(manual);\n+        std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n+        std::mem::ManuallyDrop::drop(&mut manual3);\n+        g(&mut manual4);\n     }\n }"}, {"sha": "2ac0fe98697efce7dfe01155e2637e51fe4e53fb", "filename": "tests/ui/undropped_manually_drops.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e70817e712fd4d4e930ead0d587031e2b4a97a2e/tests%2Fui%2Fundropped_manually_drops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e70817e712fd4d4e930ead0d587031e2b4a97a2e/tests%2Fui%2Fundropped_manually_drops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundropped_manually_drops.stderr?ref=e70817e712fd4d4e930ead0d587031e2b4a97a2e", "patch": "@@ -0,0 +1,19 @@\n+error: the inner value of this ManuallyDrop will not be dropped\n+  --> $DIR/undropped_manually_drops.rs:14:5\n+   |\n+LL |     drop(std::mem::ManuallyDrop::new(S));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::undropped-manually-drops` implied by `-D warnings`\n+   = help: to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\n+\n+error: the inner value of this ManuallyDrop will not be dropped\n+  --> $DIR/undropped_manually_drops.rs:15:5\n+   |\n+LL |     drop(manual1);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\n+\n+error: aborting due to 2 previous errors\n+"}]}