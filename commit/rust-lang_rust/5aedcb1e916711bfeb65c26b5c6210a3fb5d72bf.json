{"sha": "5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZWRjYjFlOTE2NzExYmZlYjY1YzI2YjVjNjIxMGEzZmI1ZDcyYmY=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-05T21:38:14Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-12T02:20:10Z"}, "message": "librustc: Don't allow return_address intrinsic in functions that don't use an out pointer.", "tree": {"sha": "41cde6d72ea22ba90133268f083557b86d273084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41cde6d72ea22ba90133268f083557b86d273084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "html_url": "https://github.com/rust-lang/rust/commit/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dac85f92daa094f94f124fd06cfeb5339d48772", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dac85f92daa094f94f124fd06cfeb5339d48772", "html_url": "https://github.com/rust-lang/rust/commit/9dac85f92daa094f94f124fd06cfeb5339d48772"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "1dd3d6ce9db9d409df80a7aa3018bac432e6f311", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "patch": "@@ -310,6 +310,13 @@ extern \"rust-intrinsic\" {\n     /// ```\n     pub fn transmute<T,U>(e: T) -> U;\n \n+    /// Gives the address for the return value of the enclosing function.\n+    ///\n+    /// Using this instrinsic in a function that does not use an out pointer\n+    /// will trigger a compiler error.\n+    #[cfg(not(stage0))]\n+    pub fn return_address() -> *const u8;\n+\n     /// Returns `true` if a type requires drop glue.\n     pub fn needs_drop<T>() -> bool;\n "}, {"sha": "dd37f3adab9d537c1315067e943b2978e86ed409", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "patch": "@@ -765,9 +765,11 @@ pub fn trans_call_inner<'a>(\n             assert!(abi == synabi::RustIntrinsic);\n             assert!(dest.is_some());\n \n+            let call_info = call_info.expect(\"no call info for intrinsic call?\");\n             return intrinsic::trans_intrinsic_call(bcx, node, callee_ty,\n                                                    arg_cleanup_scope, args,\n-                                                   dest.unwrap(), substs);\n+                                                   dest.unwrap(), substs,\n+                                                   call_info);\n         }\n         NamedTupleConstructor(substs, disr) => {\n             assert!(dest.is_some());"}, {"sha": "359c8d24f72705c6ef0aa6098400c5680d8d3a38", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "patch": "@@ -126,7 +126,7 @@ pub fn check_intrinsics(ccx: &CrateContext) {\n pub fn trans_intrinsic_call<'a>(mut bcx: &'a Block<'a>, node: ast::NodeId,\n                                 callee_ty: ty::t, cleanup_scope: cleanup::CustomScopeIndex,\n                                 args: callee::CallArgs, dest: expr::Dest,\n-                                substs: subst::Substs) -> Result<'a> {\n+                                substs: subst::Substs, call_info: NodeInfo) -> Result<'a> {\n \n     let fcx = bcx.fcx;\n     let ccx = fcx.ccx;\n@@ -426,9 +426,14 @@ pub fn trans_intrinsic_call<'a>(mut bcx: &'a Block<'a>, node: ast::NodeId,\n                                     *llargs.get(0), *llargs.get(1)),\n \n         (_, \"return_address\") => {\n-            PointerCast(bcx,\n-                        bcx.fcx.llretptr.get().unwrap(),\n-                        Type::i8p(bcx.ccx()))\n+            if !fcx.caller_expects_out_pointer {\n+                tcx.sess.span_err(call_info.span,\n+                                  \"invalid use of `return_address` intrinsic: function \\\n+                                   does not use out pointer\");\n+                C_null(Type::i8p(ccx))\n+            } else {\n+                PointerCast(bcx, llvm::get_param(fcx.llfn, 0), Type::i8p(ccx))\n+            }\n         }\n \n         // This requires that atomic intrinsics follow a specific naming pattern:"}, {"sha": "9c1db4057c6cd47043727a699b2a7736e3caa9fd", "filename": "src/test/compile-fail/intrinsic-return-address.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs?ref=5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(warnings)]\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn return_address() -> *const u8;\n+}\n+\n+unsafe fn f() {\n+    let _ = return_address();\n+    //~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n+}\n+\n+unsafe fn g() -> int {\n+    let _ = return_address();\n+    //~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n+    0\n+}\n+\n+fn main() {}\n+\n+"}, {"sha": "91af669340d61a95448406e5bb6021d24264f45d", "filename": "src/test/run-pass/intrinsic-return-address.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs?ref=5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(intrinsics)];\n+#![feature(intrinsics)]\n \n use std::ptr;\n "}]}