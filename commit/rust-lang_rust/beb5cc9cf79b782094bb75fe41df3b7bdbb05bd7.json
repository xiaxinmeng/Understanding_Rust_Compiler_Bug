{"sha": "beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "node_id": "C_kwDOAAsO6NoAKGJlYjVjYzljZjc5Yjc4MjA5NGJiNzVmZTQxZGYzYjdiZGJiMDViZDc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-03T22:15:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-03T22:15:21Z"}, "message": "Rollup merge of #107519 - joboet:raw_os_error_ty, r=Amanieu\n\nAdd type alias for raw OS errors\n\nImplement rust-lang/libs-team#173.\n\n`@rustbot` label +S-waiting-on-ACP +T-libs-api", "tree": {"sha": "b4d5c10a4c6190d30c00046a30a398a226308222", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4d5c10a4c6190d30c00046a30a398a226308222"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3Yd5CRBK7hj4Ov3rIwAA92sIAKLQdq9BZOugDkTi5YHFE0m+\nRos2zU6Y0VRrR1VA//1CNJFP520OLQE+gtUvris4z48wtmn3voRi9fV2jDnMEFGD\n+P/9cmRsj8akZfU5d6N8u6m1EqIRNQF3bhuLY5YcWJb6QggaaM8X8K4DQTCbWZ2h\nacyOGAHZXc8cuAiqk+yXCnHoHYsXMbKbBK6uadwSReSp4Vh5d9jdxHzO9FGQzyw1\n2InHrsRZCCCigzozS1PxjhcBBsW3aZCGvtVo9sxRHB9aQmpQAunHvMVBX/9Q5x4Q\nSPIwEPJ2XYaKqXpIjwANbHOfy1hQ7UeAZ7jzcyDql5yR/LmBU6rsZVOb4zbbJXQ=\n=hbSW\n-----END PGP SIGNATURE-----\n", "payload": "tree b4d5c10a4c6190d30c00046a30a398a226308222\nparent e7e8b91b741ea70cd80f1cf281084f6b80051ba0\nparent 42cc28ac8b7de426b4ae615242acd0be1bfa9a58\nauthor Michael Goulet <michael@errs.io> 1675462521 -0800\ncommitter GitHub <noreply@github.com> 1675462521 -0800\n\nRollup merge of #107519 - joboet:raw_os_error_ty, r=Amanieu\n\nAdd type alias for raw OS errors\n\nImplement rust-lang/libs-team#173.\n\n`@rustbot` label +S-waiting-on-ACP +T-libs-api\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "html_url": "https://github.com/rust-lang/rust/commit/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e8b91b741ea70cd80f1cf281084f6b80051ba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e8b91b741ea70cd80f1cf281084f6b80051ba0", "html_url": "https://github.com/rust-lang/rust/commit/e7e8b91b741ea70cd80f1cf281084f6b80051ba0"}, {"sha": "42cc28ac8b7de426b4ae615242acd0be1bfa9a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/42cc28ac8b7de426b4ae615242acd0be1bfa9a58", "html_url": "https://github.com/rust-lang/rust/commit/42cc28ac8b7de426b4ae615242acd0be1bfa9a58"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "324d698eaeb1d129a772f7bb31db616aee342b62", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "patch": "@@ -88,12 +88,23 @@ impl From<alloc::ffi::NulError> for Error {\n // doesn't accidentally get printed.\n #[cfg_attr(test, derive(Debug))]\n enum ErrorData<C> {\n-    Os(i32),\n+    Os(RawOsError),\n     Simple(ErrorKind),\n     SimpleMessage(&'static SimpleMessage),\n     Custom(C),\n }\n \n+/// The type of raw OS error codes returned by [`Error::raw_os_error`].\n+///\n+/// This is an [`i32`] on all currently supported platforms, but platforms\n+/// added in the future (such as UEFI) may use a different primitive type like\n+/// [`usize`]. Use `as`or [`into`] conversions where applicable to ensure maximum\n+/// portability.\n+///\n+/// [`into`]: Into::into\n+#[unstable(feature = \"raw_os_error_ty\", issue = \"none\")]\n+pub type RawOsError = i32;\n+\n // `#[repr(align(4))]` is probably redundant, it should have that value or\n // higher already. We include it just because repr_bitpacked.rs's encoding\n // requires an alignment >= 4 (note that `#[repr(align)]` will not reduce the\n@@ -579,7 +590,7 @@ impl Error {\n     #[must_use]\n     #[inline]\n     pub fn last_os_error() -> Error {\n-        Error::from_raw_os_error(sys::os::errno() as i32)\n+        Error::from_raw_os_error(sys::os::errno())\n     }\n \n     /// Creates a new instance of an [`Error`] from a particular OS error code.\n@@ -610,7 +621,7 @@ impl Error {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[inline]\n-    pub fn from_raw_os_error(code: i32) -> Error {\n+    pub fn from_raw_os_error(code: RawOsError) -> Error {\n         Error { repr: Repr::new_os(code) }\n     }\n \n@@ -646,7 +657,7 @@ impl Error {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[inline]\n-    pub fn raw_os_error(&self) -> Option<i32> {\n+    pub fn raw_os_error(&self) -> Option<RawOsError> {\n         match self.repr.data() {\n             ErrorData::Os(i) => Some(i),\n             ErrorData::Custom(..) => None,"}, {"sha": "f94f88bac417ef1d1c9086263bda11a6ba5ce382", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "patch": "@@ -102,7 +102,7 @@\n //! to use a pointer type to store something that may hold an integer, some of\n //! the time.\n \n-use super::{Custom, ErrorData, ErrorKind, SimpleMessage};\n+use super::{Custom, ErrorData, ErrorKind, RawOsError, SimpleMessage};\n use alloc::boxed::Box;\n use core::marker::PhantomData;\n use core::mem::{align_of, size_of};\n@@ -172,7 +172,7 @@ impl Repr {\n     }\n \n     #[inline]\n-    pub(super) fn new_os(code: i32) -> Self {\n+    pub(super) fn new_os(code: RawOsError) -> Self {\n         let utagged = ((code as usize) << 32) | TAG_OS;\n         // Safety: `TAG_OS` is not zero, so the result of the `|` is not 0.\n         let res = Self(unsafe { NonNull::new_unchecked(ptr::invalid_mut(utagged)) }, PhantomData);\n@@ -250,7 +250,7 @@ where\n     let bits = ptr.as_ptr().addr();\n     match bits & TAG_MASK {\n         TAG_OS => {\n-            let code = ((bits as i64) >> 32) as i32;\n+            let code = ((bits as i64) >> 32) as RawOsError;\n             ErrorData::Os(code)\n         }\n         TAG_SIMPLE => {\n@@ -374,6 +374,9 @@ static_assert!((TAG_MASK + 1).is_power_of_two());\n static_assert!(align_of::<SimpleMessage>() >= TAG_MASK + 1);\n static_assert!(align_of::<Custom>() >= TAG_MASK + 1);\n \n+// `RawOsError` must be an alias for `i32`.\n+const _: fn(RawOsError) -> i32 = |os| os;\n+\n static_assert!(@usize_eq: TAG_MASK & TAG_SIMPLE_MESSAGE, TAG_SIMPLE_MESSAGE);\n static_assert!(@usize_eq: TAG_MASK & TAG_CUSTOM, TAG_CUSTOM);\n static_assert!(@usize_eq: TAG_MASK & TAG_OS, TAG_OS);"}, {"sha": "093fde33757eb6e8cfe694b7ef36b07004319a38", "filename": "library/std/src/io/error/repr_unpacked.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs?ref=beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "patch": "@@ -2,7 +2,7 @@\n //! non-64bit targets, where the packed 64 bit representation wouldn't work, and\n //! would have no benefit.\n \n-use super::{Custom, ErrorData, ErrorKind, SimpleMessage};\n+use super::{Custom, ErrorData, ErrorKind, RawOsError, SimpleMessage};\n use alloc::boxed::Box;\n \n type Inner = ErrorData<Box<Custom>>;\n@@ -18,7 +18,7 @@ impl Repr {\n         Self(Inner::Custom(b))\n     }\n     #[inline]\n-    pub(super) fn new_os(code: i32) -> Self {\n+    pub(super) fn new_os(code: RawOsError) -> Self {\n         Self(Inner::Os(code))\n     }\n     #[inline]"}, {"sha": "36d52aef03cb7b211f382af9136817c0b2f667b9", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "patch": "@@ -71,7 +71,7 @@ fn test_const() {\n \n #[test]\n fn test_os_packing() {\n-    for code in -20i32..20i32 {\n+    for code in -20..20 {\n         let e = Error::from_raw_os_error(code);\n         assert_eq!(e.raw_os_error(), Some(code));\n         assert_matches!("}, {"sha": "5907ba5d5fbf3ab8dd8495cd2619aa25f5b7de09", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "patch": "@@ -262,6 +262,8 @@ use crate::sys_common::memchr;\n \n #[stable(feature = \"bufwriter_into_parts\", since = \"1.56.0\")]\n pub use self::buffered::WriterPanicked;\n+#[unstable(feature = \"raw_os_error_ty\", issue = \"none\")]\n+pub use self::error::RawOsError;\n pub(crate) use self::stdio::attempt_print_to_stderr;\n #[unstable(feature = \"internal_output_capture\", issue = \"none\")]\n #[doc(no_inline, hidden)]"}]}