{"sha": "2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMGNiOTAxYzhlZTQ2NGI5ZDVkNGUwNjliOThjNjkyNjc4YjJlZTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-18T05:02:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-18T17:50:50Z"}, "message": "syntax: Begin moving functions from mod parser to mod classify", "tree": {"sha": "ea37dfde59d606b591e979eae6c41c5e0d1ad3c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea37dfde59d606b591e979eae6c41c5e0d1ad3c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "html_url": "https://github.com/rust-lang/rust/commit/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d51973a6a66756c2f2cb7ab0649483ef41ba3050", "url": "https://api.github.com/repos/rust-lang/rust/commits/d51973a6a66756c2f2cb7ab0649483ef41ba3050", "html_url": "https://github.com/rust-lang/rust/commit/d51973a6a66756c2f2cb7ab0649483ef41ba3050"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "f2c9aece0c163fe0482a4baa3ed286e77b205df6", "filename": "src/librustsyntax/parse/classify.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fclassify.rs?ref=2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "patch": "@@ -0,0 +1,31 @@\n+// FIXME: There are a bunch of similar functions in pprust that\n+// likely belong here\n+\n+fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n+    alt e.node {\n+      ast::expr_if(_, _, _) | ast::expr_if_check(_, _, _)\n+      | ast::expr_alt(_, _, _) | ast::expr_block(_)\n+      | ast::expr_do_while(_, _) | ast::expr_while(_, _)\n+      | ast::expr_loop(_) | ast::expr_call(_, _, true) {\n+        false\n+      }\n+      _ { true }\n+    }\n+}\n+\n+fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n+    alt stmt.node {\n+      ast::stmt_decl(d, _) {\n+        ret alt d.node {\n+              ast::decl_local(_) { true }\n+              ast::decl_item(_) { false }\n+            }\n+      }\n+      ast::stmt_expr(e, _) {\n+        ret expr_requires_semi_to_be_stmt(e);\n+      }\n+      ast::stmt_semi(e, _) {\n+        ret false;\n+      }\n+    }\n+}"}, {"sha": "798afc70e05079fb4d6c3549a239a769306a52e2", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "patch": "@@ -9,7 +9,6 @@ import ast_util::{mk_sp, ident_to_path};\n import lexer::reader;\n import prec::{op_spec, binop_prec_table, as_prec};\n \n-export expr_requires_semi_to_be_stmt;\n export file_type;\n export mk_item;\n export next_node_id;\n@@ -31,7 +30,6 @@ export parse_pat;\n export parse_sess;\n export parse_stmt;\n export parse_ty;\n-export stmt_ends_with_semi;\n \n enum restriction {\n     UNRESTRICTED,\n@@ -1776,38 +1774,9 @@ fn parse_stmt(p: parser, first_item_attrs: [ast::attribute]) -> @ast::stmt {\n fn expr_is_complete(p: parser, e: pexpr) -> bool {\n     log(debug, (\"expr_is_complete\", p.restriction,\n                 print::pprust::expr_to_str(*e),\n-                expr_requires_semi_to_be_stmt(*e)));\n+                classify::expr_requires_semi_to_be_stmt(*e)));\n     ret p.restriction == RESTRICT_STMT_EXPR &&\n-        !expr_requires_semi_to_be_stmt(*e);\n-}\n-\n-fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n-    alt e.node {\n-      ast::expr_if(_, _, _) | ast::expr_if_check(_, _, _)\n-      | ast::expr_alt(_, _, _) | ast::expr_block(_)\n-      | ast::expr_do_while(_, _) | ast::expr_while(_, _)\n-      | ast::expr_loop(_) | ast::expr_call(_, _, true) {\n-        false\n-      }\n-      _ { true }\n-    }\n-}\n-\n-fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n-    alt stmt.node {\n-      ast::stmt_decl(d, _) {\n-        ret alt d.node {\n-              ast::decl_local(_) { true }\n-              ast::decl_item(_) { false }\n-            }\n-      }\n-      ast::stmt_expr(e, _) {\n-        ret expr_requires_semi_to_be_stmt(e);\n-      }\n-      ast::stmt_semi(e, _) {\n-        ret false;\n-      }\n-    }\n+        !classify::expr_requires_semi_to_be_stmt(*e);\n }\n \n fn parse_block(p: parser) -> ast::blk {\n@@ -1890,7 +1859,7 @@ fn parse_block_tail_(p: parser, lo: uint, s: ast::blk_check_mode,\n                     expr = some(e);\n                   }\n                   t {\n-                    if stmt_ends_with_semi(*stmt) {\n+                    if classify::stmt_ends_with_semi(*stmt) {\n                         p.fatal(\"expected ';' or '}' after expression but \\\n                                  found '\" + token_to_str(p.reader, t) +\n                                 \"'\");\n@@ -1903,7 +1872,7 @@ fn parse_block_tail_(p: parser, lo: uint, s: ast::blk_check_mode,\n               _ { // All other kinds of statements:\n                 stmts += [stmt];\n \n-                if stmt_ends_with_semi(*stmt) {\n+                if classify::stmt_ends_with_semi(*stmt) {\n                     expect(p, token::SEMI);\n                 }\n               }"}, {"sha": "dbe5f3472d8188befe9998b48b0e9072e2824d9a", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "patch": "@@ -685,7 +685,7 @@ fn print_stmt(s: ps, st: ast::stmt) {\n         word(s.s, \";\");\n       }\n     }\n-    if parse::parser::stmt_ends_with_semi(st) { word(s.s, \";\"); }\n+    if parse::classify::stmt_ends_with_semi(st) { word(s.s, \";\"); }\n     maybe_print_trailing_comment(s, st.span, none::<uint>);\n }\n \n@@ -1508,7 +1508,7 @@ fn need_parens(expr: @ast::expr, outer_prec: int) -> bool {\n       ast::expr_assert(_) { true }\n       ast::expr_check(_, _) { true }\n       ast::expr_log(_, _, _) { true }\n-      _ { !parse::parser::expr_requires_semi_to_be_stmt(expr) }\n+      _ { !parse::classify::expr_requires_semi_to_be_stmt(expr) }\n     }\n }\n "}, {"sha": "68a41985aa6d7b7915f258d5d0136db5dd351447", "filename": "src/librustsyntax/rustsyntax.rc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7/src%2Flibrustsyntax%2Frustsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7/src%2Flibrustsyntax%2Frustsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Frustsyntax.rc?ref=2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "patch": "@@ -27,6 +27,7 @@ mod parse {\n     export lexer;\n     export comments;\n     export prec;\n+    export classify;\n \n     mod eval;\n     mod lexer;\n@@ -36,6 +37,9 @@ mod parse {\n \n     #[doc = \"Functions dealing with operator precedence\"]\n     mod prec;\n+\n+    #[doc = \"Routines the parser uses to classify AST nodes\"]\n+    mod classify;\n }\n \n mod print {"}]}