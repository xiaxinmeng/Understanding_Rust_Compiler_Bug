{"sha": "421c8db14430011d40f8f8499ca4aefbcc26d07e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWM4ZGIxNDQzMDAxMWQ0MGY4Zjg0OTljYTRhZWZiY2MyNmQwN2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-09T22:24:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-10T03:00:16Z"}, "message": "rt: Move rust_thread to its own files", "tree": {"sha": "c6cc3269f99dd70e83a10335ac6bc8a6aa64c255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6cc3269f99dd70e83a10335ac6bc8a6aa64c255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421c8db14430011d40f8f8499ca4aefbcc26d07e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421c8db14430011d40f8f8499ca4aefbcc26d07e", "html_url": "https://github.com/rust-lang/rust/commit/421c8db14430011d40f8f8499ca4aefbcc26d07e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421c8db14430011d40f8f8499ca4aefbcc26d07e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad9cf8087f2d1f1badfb7c8616c0b11cc4aa6db", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad9cf8087f2d1f1badfb7c8616c0b11cc4aa6db", "html_url": "https://github.com/rust-lang/rust/commit/8ad9cf8087f2d1f1badfb7c8616c0b11cc4aa6db"}], "stats": {"total": 135, "additions": 72, "deletions": 63}, "files": [{"sha": "2a53cac4abb8d1dd9b973bcf7a96c2730b2cbda9", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421c8db14430011d40f8f8499ca4aefbcc26d07e/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/421c8db14430011d40f8f8499ca4aefbcc26d07e/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=421c8db14430011d40f8f8499ca4aefbcc26d07e", "patch": "@@ -37,6 +37,7 @@ RUNTIME_CS_$(1) := \\\n               rt/sync/timer.cpp \\\n               rt/sync/sync.cpp \\\n               rt/sync/lock_and_signal.cpp \\\n+              rt/sync/rust_thread.cpp \\\n               rt/rust.cpp \\\n               rt/rust_builtin.cpp \\\n               rt/rust_run_program.cpp \\\n@@ -97,6 +98,7 @@ RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/sync/timer.h \\\n                rt/sync/lock_and_signal.h \\\n                rt/sync/lock_free_queue.h \\\n+               rt/sync/rust_thread.h \\\n                rt/rust_srv.h \\\n                rt/rust_kernel.h \\\n                rt/memory_region.h \\"}, {"sha": "66d3d00f2a61595830bd0d6ff80824bc29d66930", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=421c8db14430011d40f8f8499ca4aefbcc26d07e", "patch": "@@ -1,6 +1,7 @@\n #ifndef RUST_TASK_THREAD_H\n #define RUST_TASK_THREAD_H\n \n+#include \"sync/rust_thread.h\"\n #include \"rust_stack.h\"\n #include \"context.h\"\n "}, {"sha": "49daaa5c96db97eeb160b8a32743482885dea147", "filename": "src/rt/sync/rust_thread.cpp", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Fsync%2Frust_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Fsync%2Frust_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Frust_thread.cpp?ref=421c8db14430011d40f8f8499ca4aefbcc26d07e", "patch": "@@ -0,0 +1,43 @@\n+#include \"globals.h\"\n+#include \"rust_thread.h\"\n+\n+rust_thread::rust_thread() : thread(0) {\n+}\n+\n+#if defined(__WIN32__)\n+static DWORD WINAPI\n+#elif defined(__GNUC__)\n+static void *\n+#else\n+#error \"Platform not supported\"\n+#endif\n+rust_thread_start(void *ptr) {\n+    rust_thread *thread = (rust_thread *) ptr;\n+    thread->run();\n+    return 0;\n+}\n+\n+void\n+rust_thread::start() {\n+#if defined(__WIN32__)\n+   thread = CreateThread(NULL, 0, rust_thread_start, this, 0, NULL);\n+#else\n+   pthread_attr_t attr;\n+   pthread_attr_init(&attr);\n+   pthread_attr_setstacksize(&attr, 1024 * 1024);\n+   pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n+   pthread_create(&thread, &attr, rust_thread_start, (void *) this);\n+#endif\n+}\n+\n+void\n+rust_thread::join() {\n+#if defined(__WIN32__)\n+   if (thread)\n+     WaitForSingleObject(thread, INFINITE);\n+#else\n+   if (thread)\n+     pthread_join(thread, NULL);\n+#endif\n+   thread = 0;\n+}"}, {"sha": "1c27d1b6597bf767c3d28969ea5d9e89dfde51f8", "filename": "src/rt/sync/rust_thread.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Fsync%2Frust_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Fsync%2Frust_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Frust_thread.h?ref=421c8db14430011d40f8f8499ca4aefbcc26d07e", "patch": "@@ -0,0 +1,26 @@\n+#ifndef RUST_THREAD_H\n+#define RUST_THREAD_H\n+\n+/**\n+ * Thread utility class. Derive and implement your own run() method.\n+ */\n+class rust_thread {\n+public:\n+#if defined(__WIN32__)\n+    HANDLE thread;\n+#else\n+    pthread_t thread;\n+#endif\n+    rust_thread();\n+    void start();\n+\n+    virtual void run() {\n+        return;\n+    }\n+\n+    void join();\n+\n+    virtual ~rust_thread() {}   // quiet the compiler\n+};\n+\n+#endif /* RUST_THREAD_H */"}, {"sha": "3bf37986161b1b42ee6974847009a9fc60b9ba20", "filename": "src/rt/sync/sync.cpp", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Fsync%2Fsync.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Fsync%2Fsync.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Fsync.cpp?ref=421c8db14430011d40f8f8499ca4aefbcc26d07e", "patch": "@@ -18,44 +18,3 @@ void sync::sleep(size_t timeout_in_ms) {\n     usleep(timeout_in_ms * 1000);\n #endif\n }\n-\n-rust_thread::rust_thread() : thread(0) {\n-}\n-\n-#if defined(__WIN32__)\n-static DWORD WINAPI\n-#elif defined(__GNUC__)\n-static void *\n-#else\n-#error \"Platform not supported\"\n-#endif\n-rust_thread_start(void *ptr) {\n-    rust_thread *thread = (rust_thread *) ptr;\n-    thread->run();\n-    return 0;\n-}\n-\n-void\n-rust_thread::start() {\n-#if defined(__WIN32__)\n-   thread = CreateThread(NULL, 0, rust_thread_start, this, 0, NULL);\n-#else\n-   pthread_attr_t attr;\n-   pthread_attr_init(&attr);\n-   pthread_attr_setstacksize(&attr, 1024 * 1024);\n-   pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n-   pthread_create(&thread, &attr, rust_thread_start, (void *) this);\n-#endif\n-}\n-\n-void\n-rust_thread::join() {\n-#if defined(__WIN32__)\n-   if (thread)\n-     WaitForSingleObject(thread, INFINITE);\n-#else\n-   if (thread)\n-     pthread_join(thread, NULL);\n-#endif\n-   thread = 0;\n-}"}, {"sha": "3bd36f5c5662f25924d309096e2bb2bb525a2df7", "filename": "src/rt/sync/sync.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Fsync%2Fsync.h", "raw_url": "https://github.com/rust-lang/rust/raw/421c8db14430011d40f8f8499ca4aefbcc26d07e/src%2Frt%2Fsync%2Fsync.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Fsync.h?ref=421c8db14430011d40f8f8499ca4aefbcc26d07e", "patch": "@@ -33,26 +33,4 @@ class sync {\n     }\n };\n \n-/**\n- * Thread utility class. Derive and implement your own run() method.\n- */\n-class rust_thread {\n-public:\n-#if defined(__WIN32__)\n-    HANDLE thread;\n-#else\n-    pthread_t thread;\n-#endif\n-    rust_thread();\n-    void start();\n-\n-    virtual void run() {\n-        return;\n-    }\n-\n-    void join();\n-\n-    virtual ~rust_thread() {}   // quiet the compiler\n-};\n-\n #endif /* SYNC_H */"}]}