{"sha": "ccf6353fd56dc9cbeebe335332f0e5758117c658", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZjYzNTNmZDU2ZGM5Y2JlZWJlMzM1MzMyZjBlNTc1ODExN2M2NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-19T02:40:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-19T02:40:25Z"}, "message": "auto merge of #6589 : thestinger/rust/iterator, r=thestinger", "tree": {"sha": "c60bb62198f43d84e1b6513c176f7d4de226e7fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c60bb62198f43d84e1b6513c176f7d4de226e7fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccf6353fd56dc9cbeebe335332f0e5758117c658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf6353fd56dc9cbeebe335332f0e5758117c658", "html_url": "https://github.com/rust-lang/rust/commit/ccf6353fd56dc9cbeebe335332f0e5758117c658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccf6353fd56dc9cbeebe335332f0e5758117c658/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee479f3e98474cd8125432f7a0c5c18bc2bd342", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee479f3e98474cd8125432f7a0c5c18bc2bd342", "html_url": "https://github.com/rust-lang/rust/commit/3ee479f3e98474cd8125432f7a0c5c18bc2bd342"}, {"sha": "9b6b0e1e646b42de7205a21bf73e5c4c2b203a6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6b0e1e646b42de7205a21bf73e5c4c2b203a6b", "html_url": "https://github.com/rust-lang/rust/commit/9b6b0e1e646b42de7205a21bf73e5c4c2b203a6b"}], "stats": {"total": 103, "additions": 27, "deletions": 76}, "files": [{"sha": "ecf76a39fcdb51817ca3e3422af6a885a7791e72", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 27, "deletions": 76, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/ccf6353fd56dc9cbeebe335332f0e5758117c658/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf6353fd56dc9cbeebe335332f0e5758117c658/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=ccf6353fd56dc9cbeebe335332f0e5758117c658", "patch": "@@ -47,10 +47,10 @@ pub trait IteratorUtil<A> {\n     fn advance(&mut self, f: &fn(A) -> bool);\n     #[cfg(not(stage0))]\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool;\n-    fn to_vec(self) -> ~[A];\n-    fn nth(&mut self, n: uint) -> A;\n-    fn first(&mut self) -> A;\n-    fn last(&mut self) -> A;\n+    #[cfg(not(stage0))]\n+    fn to_vec(&mut self) -> ~[A];\n+    fn nth(&mut self, n: uint) -> Option<A>;\n+    fn last(&mut self) -> Option<A>;\n     fn fold<B>(&mut self, start: B, f: &fn(B, A) -> B) -> B;\n     fn count(&mut self) -> uint;\n     fn all(&mut self, f: &fn(&A) -> bool) -> bool;\n@@ -147,47 +147,30 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         }\n     }\n \n+    #[cfg(not(stage0))]\n     #[inline(always)]\n-    fn to_vec(self) -> ~[A] {\n-        let mut v = ~[];\n-        let mut it = self;\n-        for it.advance() |x| { v.push(x); }\n-        return v;\n+    fn to_vec(&mut self) -> ~[A] {\n+        iter::to_vec::<A>(|f| self.advance(f))\n     }\n \n-    /// Get `n`th element of an iterator.\n+    /// Return the `n`th item yielded by an iterator.\n     #[inline(always)]\n-    fn nth(&mut self, n: uint) -> A {\n-        let mut i = n;\n+    fn nth(&mut self, mut n: uint) -> Option<A> {\n         loop {\n             match self.next() {\n-                Some(x) => { if i == 0 { return x; }}\n-                None => { fail!(\"cannot get %uth element\", n) }\n+                Some(x) => if n == 0 { return Some(x) },\n+                None => return None\n             }\n-            i -= 1;\n+            n -= 1;\n         }\n     }\n \n-    // Get first elemet of an iterator.\n+    /// Return the last item yielded by an iterator.\n     #[inline(always)]\n-    fn first(&mut self) -> A {\n-        match self.next() {\n-            Some(x) => x ,\n-            None => fail!(\"cannot get first element\")\n-        }\n-    }\n-\n-    // Get last element of an iterator.\n-    //\n-    // If the iterator have an infinite length, this method won't return.\n-    #[inline(always)]\n-    fn last(&mut self) -> A {\n-        let mut elm = match self.next() {\n-            Some(x) => x,\n-            None    => fail!(\"cannot get last element\")\n-        };\n-        for self.advance |e| { elm = e; }\n-        return elm;\n+    fn last(&mut self) -> Option<A> {\n+        let mut last = None;\n+        for self.advance |x| { last = Some(x); }\n+        last\n     }\n \n     /// Reduce an iterator to an accumulated value\n@@ -203,7 +186,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         return accum;\n     }\n \n-    /// Count the number of an iterator elemenrs\n+    /// Count the number of items yielded by an iterator\n     #[inline(always)]\n     fn count(&mut self) -> uint { self.fold(0, |cnt, _x| cnt + 1) }\n \n@@ -344,17 +327,13 @@ pub struct FilterMapIterator<'self, A, B, T> {\n impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B, T> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        loop {\n-            match self.iter.next() {\n-                None    => { return None; }\n-                Some(a) => {\n-                    match (self.f)(a) {\n-                        Some(b) => { return Some(b); }\n-                        None    => { loop; }\n-                    }\n-                }\n+        for self.iter.advance |x| {\n+            match (self.f)(x) {\n+                Some(y) => return Some(y),\n+                None => ()\n             }\n         }\n+        None\n     }\n }\n \n@@ -579,7 +558,7 @@ mod tests {\n \n     #[test]\n     fn test_filter_map() {\n-        let it  = Counter::new(0u, 1u).take(10)\n+        let mut it = Counter::new(0u, 1u).take(10)\n             .filter_map(|x: uint| if x.is_even() { Some(x*x) } else { None });\n         assert_eq!(it.to_vec(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n     }\n@@ -689,43 +668,15 @@ mod tests {\n     fn test_iterator_nth() {\n         let v = &[0, 1, 2, 3, 4];\n         for uint::range(0, v.len()) |i| {\n-            assert_eq!(v.iter().nth(i), &v[i]);\n+            assert_eq!(v.iter().nth(i).unwrap(), &v[i]);\n         }\n     }\n \n-    #[test]\n-    #[should_fail]\n-    fn test_iterator_nth_fail() {\n-        let v = &[0, 1, 2, 3, 4];\n-        v.iter().nth(5);\n-    }\n-\n-    #[test]\n-    fn test_iterator_first() {\n-        let v = &[0, 1, 2, 3, 4];\n-        assert_eq!(v.iter().first(), &0);\n-        assert_eq!(v.slice(2, 5).iter().first(), &2);\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    fn test_iterator_first_fail() {\n-        let v: &[uint] = &[];\n-        v.iter().first();\n-    }\n-\n     #[test]\n     fn test_iterator_last() {\n         let v = &[0, 1, 2, 3, 4];\n-        assert_eq!(v.iter().last(), &4);\n-        assert_eq!(v.slice(0, 1).iter().last(), &0);\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    fn test_iterator_last_fail() {\n-        let v: &[uint] = &[];\n-        v.iter().last();\n+        assert_eq!(v.iter().last().unwrap(), &4);\n+        assert_eq!(v.slice(0, 1).iter().last().unwrap(), &0);\n     }\n \n     #[test]"}]}