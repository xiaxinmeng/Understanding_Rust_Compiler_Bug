{"sha": "3352fab59ba39194b2efd7e478aa1fbbfe0de8d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNTJmYWI1OWJhMzkxOTRiMmVmZDdlNDc4YWExZmJiZmUwZGU4ZDE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-20T00:34:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-20T00:34:47Z"}, "message": "Parse type items, nil types, named types. Fix some parser bugs. Enable arith-0 and arith-2 tests.", "tree": {"sha": "59d35872bb663b136d4953544e22eacfebd8a71e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59d35872bb663b136d4953544e22eacfebd8a71e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3352fab59ba39194b2efd7e478aa1fbbfe0de8d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3352fab59ba39194b2efd7e478aa1fbbfe0de8d1", "html_url": "https://github.com/rust-lang/rust/commit/3352fab59ba39194b2efd7e478aa1fbbfe0de8d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3352fab59ba39194b2efd7e478aa1fbbfe0de8d1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a0c7225d5aa13769c4531b25fd524976c7f7a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a0c7225d5aa13769c4531b25fd524976c7f7a0", "html_url": "https://github.com/rust-lang/rust/commit/44a0c7225d5aa13769c4531b25fd524976c7f7a0"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "dc69d19e9c2580597f5722ff9776e508fa5954fc", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3352fab59ba39194b2efd7e478aa1fbbfe0de8d1/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3352fab59ba39194b2efd7e478aa1fbbfe0de8d1/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=3352fab59ba39194b2efd7e478aa1fbbfe0de8d1", "patch": "@@ -517,6 +517,8 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n \n TEST_XFAILS_SELF := $(filter-out \\\n                       $(addprefix test/run-pass/, \\\n+                        arith-0.rs \\\n+                        arith-2.rs \\\n                         bool-not.rs \\\n                         char.rs \\\n                         fact.rs \\"}, {"sha": "a0b7eef26272ab2ba94c408a2a372e350e63731c", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 77, "deletions": 6, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3352fab59ba39194b2efd7e478aa1fbbfe0de8d1/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3352fab59ba39194b2efd7e478aa1fbbfe0de8d1/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=3352fab59ba39194b2efd7e478aa1fbbfe0de8d1", "patch": "@@ -146,9 +146,10 @@ impure fn parse_ty_fn(parser p) -> ast.ty_ {\n \n     ret ast.ty_fn(inputs.node, output);\n }\n-            \n+\n impure fn parse_ty(parser p) -> @ast.ty {\n     auto lo = p.get_span();\n+    auto hi = lo;\n     let ast.ty_ t;\n     alt (p.peek()) {\n         case (token.INT) { p.bump(); t = ast.ty_int; }\n@@ -157,12 +158,29 @@ impure fn parse_ty(parser p) -> @ast.ty {\n         case (token.CHAR) { p.bump(); t = ast.ty_char; }\n         case (token.MACH(?tm)) { p.bump(); t = ast.ty_machine(tm); }\n \n+        case (token.LPAREN) {\n+            p.bump();\n+            alt (p.peek()) {\n+                case (token.RPAREN) {\n+                    hi = p.get_span();\n+                    p.bump();\n+                    t = ast.ty_nil;\n+                }\n+                case (_) {\n+                    t = parse_ty(p).node;\n+                    hi = p.get_span();\n+                    expect(p, token.RPAREN);\n+                }\n+            }\n+        }\n+\n         case (token.AT) { p.bump(); t = ast.ty_box(parse_ty(p)); }\n \n         case (token.VEC) {\n             p.bump();\n             expect(p, token.LBRACKET);\n             t = ast.ty_vec(parse_ty(p));\n+            hi = p.get_span();\n             expect(p, token.RBRACKET);\n         }\n \n@@ -171,11 +189,39 @@ impure fn parse_ty(parser p) -> @ast.ty {\n             auto f = parse_possibly_mutable_ty; // FIXME: trans_const_lval bug\n             auto elems = parse_seq[tup(bool, @ast.ty)](token.LPAREN,\n                 token.RPAREN, some(token.COMMA), f, p);\n+            hi = p.get_span();\n             t = ast.ty_tup(elems.node);\n         }\n \n         case (token.FN) {\n             t = parse_ty_fn(p);\n+            alt (t) {\n+                case (ast.ty_fn(_, ?out)) {\n+                    hi = out.span;\n+                }\n+            }\n+        }\n+\n+        case (token.IDENT(_)) {\n+            let ast.path pth = vec();\n+            let bool more = true;\n+            while (more) {\n+                alt (p.peek()) {\n+                    case (token.IDENT(?i)) {\n+                        auto n = parse_name(p, i);\n+                        hi = n.span;\n+                        if (p.peek() == token.DOT) {\n+                            p.bump();\n+                        } else {\n+                            more = false;\n+                        }\n+                    }\n+                    case (_) {\n+                        more = false;\n+                    }\n+                }\n+            }\n+            t = ast.ty_path(pth, none[ast.def]);\n         }\n \n         case (_) {\n@@ -184,7 +230,7 @@ impure fn parse_ty(parser p) -> @ast.ty {\n             fail;\n         }\n     }\n-    ret @spanned(lo, lo, t);\n+    ret @spanned(lo, hi, t);\n }\n \n impure fn parse_arg(parser p) -> ast.arg {\n@@ -328,6 +374,15 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n \n         case (token.LPAREN) {\n             p.bump();\n+            alt (p.peek()) {\n+                case (token.RPAREN) {\n+                    hi = p.get_span();\n+                    p.bump();\n+                    auto lit = @spanned(lo, hi, ast.lit_nil);\n+                    ret @spanned(lo, hi,\n+                                 ast.expr_lit(lit, ast.ann_none));\n+                }\n+            }\n             auto e = parse_expr(p);\n             hi = p.get_span();\n             expect(p, token.RPAREN);\n@@ -409,6 +464,7 @@ impure fn parse_path_expr(parser p) -> @ast.expr {\n                     }\n \n                     case (token.LPAREN) {\n+                        p.bump();\n                         auto ix = parse_bottom_expr(p);\n                         hi = ix.span;\n                         auto e_ = ast.expr_index(e, ix, ast.ann_none);\n@@ -889,7 +945,7 @@ impure fn parse_block(parser p) -> ast.block {\n     ret spanned(stmts.span, stmts.span, b);\n }\n \n-impure fn parse_fn(parser p) -> tup(ast.ident, @ast.item) {\n+impure fn parse_item_fn(parser p) -> tup(ast.ident, @ast.item) {\n     auto lo = p.get_span();\n     expect(p, token.FN);\n     auto id = parse_ident(p);\n@@ -934,7 +990,7 @@ impure fn parse_mod_items(parser p, token.token term) -> ast._mod {\n     ret rec(items=items, index=index);\n  }\n \n-impure fn parse_mod(parser p) -> tup(ast.ident, @ast.item) {\n+impure fn parse_item_mod(parser p) -> tup(ast.ident, @ast.item) {\n     auto lo = p.get_span();\n     expect(p, token.MOD);\n     auto id = parse_ident(p);\n@@ -946,13 +1002,28 @@ impure fn parse_mod(parser p) -> tup(ast.ident, @ast.item) {\n     ret tup(id, @spanned(lo, hi, item));\n }\n \n+impure fn parse_item_type(parser p) -> tup(ast.ident, @ast.item) {\n+    auto lo = p.get_span();\n+    expect(p, token.TYPE);\n+    auto id = parse_ident(p);\n+    expect(p, token.EQ);\n+    auto ty = parse_ty(p);\n+    auto hi = p.get_span();\n+    expect(p, token.SEMI);\n+    auto item = ast.item_ty(id, ty, p.next_def_id(), ast.ann_none);\n+    ret tup(id, @spanned(lo, hi, item));\n+}\n+\n impure fn parse_item(parser p) -> tup(ast.ident, @ast.item) {\n     alt (p.peek()) {\n         case (token.FN) {\n-            ret parse_fn(p);\n+            ret parse_item_fn(p);\n         }\n         case (token.MOD) {\n-            ret parse_mod(p);\n+            ret parse_item_mod(p);\n+        }\n+        case (token.TYPE) {\n+            ret parse_item_type(p);\n         }\n     }\n     p.err(\"expectied item\");"}]}