{"sha": "a5c16a5381cd71c4d27b32857d04d70345b12de4", "node_id": "C_kwDOAAsO6NoAKGE1YzE2YTUzODFjZDcxYzRkMjdiMzI4NTdkMDRkNzAzNDViMTJkZTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-21T14:54:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-21T14:54:01Z"}, "message": "Rollup merge of #100556 - Alex-Velez:patch-1, r=scottmcm\n\nClamp Function for f32 and f64\n\nI thought the clamp function could use a little improvement for readability purposes. The function now returns early in order to skip the extra bound checks.\n\nIf there was a reason for binding `self` to `x` or if this code is incorrect, please correct me :)", "tree": {"sha": "81b934c48e05a55fe7a28400bc36e6267fd67699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81b934c48e05a55fe7a28400bc36e6267fd67699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c16a5381cd71c4d27b32857d04d70345b12de4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAkcJCRBK7hj4Ov3rIwAAQAQIAGzrNa8euV+oIKpC9H5YkzUy\nD7Thdauxi8CR/bwAGmfEav6rq6gklpJqHeWGe/MAOyk49XfvMrxwUMIAwgUHZAG4\nr4Yp13GRMGpj/qJIi63F0/HZEZ+fr/HJOjOFPhH1tKFU+LVf+RsQi843ciP8c6FB\nWrogHdk772qS5tbVSesbJZTlIzNfPKktVLgbVMui31szp26XWC19Aj5Gcnx76BwA\ndGNTWU69YTMRItjQ+wvvY69Q6V906FV4x9uf53o+GqlUZmeUC2oJ2UX4SZYcaDR0\nLDYBeerpA4C7FwKt4RuICrYLBRMVtifR64qciXcZ1zhfErxI+yvgUnD8uxdYig8=\n=SQ1v\n-----END PGP SIGNATURE-----\n", "payload": "tree 81b934c48e05a55fe7a28400bc36e6267fd67699\nparent 4b695f7c4e1a02d160fe7e159abd0f87027c0fcf\nparent 03146471b58be8a0f9133064ea503252e60f7466\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661093641 +0200\ncommitter GitHub <noreply@github.com> 1661093641 +0200\n\nRollup merge of #100556 - Alex-Velez:patch-1, r=scottmcm\n\nClamp Function for f32 and f64\n\nI thought the clamp function could use a little improvement for readability purposes. The function now returns early in order to skip the extra bound checks.\n\nIf there was a reason for binding `self` to `x` or if this code is incorrect, please correct me :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c16a5381cd71c4d27b32857d04d70345b12de4", "html_url": "https://github.com/rust-lang/rust/commit/a5c16a5381cd71c4d27b32857d04d70345b12de4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c16a5381cd71c4d27b32857d04d70345b12de4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf", "html_url": "https://github.com/rust-lang/rust/commit/4b695f7c4e1a02d160fe7e159abd0f87027c0fcf"}, {"sha": "03146471b58be8a0f9133064ea503252e60f7466", "url": "https://api.github.com/repos/rust-lang/rust/commits/03146471b58be8a0f9133064ea503252e60f7466", "html_url": "https://github.com/rust-lang/rust/commit/03146471b58be8a0f9133064ea503252e60f7466"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "efa434f2392666507a130c6f39da332b5e4cb1d8", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5c16a5381cd71c4d27b32857d04d70345b12de4/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c16a5381cd71c4d27b32857d04d70345b12de4/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=a5c16a5381cd71c4d27b32857d04d70345b12de4", "patch": "@@ -1282,15 +1282,14 @@ impl f32 {\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"clamp\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn clamp(self, min: f32, max: f32) -> f32 {\n+    pub fn clamp(mut self, min: f32, max: f32) -> f32 {\n         assert!(min <= max);\n-        let mut x = self;\n-        if x < min {\n-            x = min;\n+        if self < min {\n+            self = min;\n         }\n-        if x > max {\n-            x = max;\n+        if self > max {\n+            self = max;\n         }\n-        x\n+        self\n     }\n }"}, {"sha": "9e4334fe01ad85e6095e3d124650c2143bdcded7", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5c16a5381cd71c4d27b32857d04d70345b12de4/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c16a5381cd71c4d27b32857d04d70345b12de4/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=a5c16a5381cd71c4d27b32857d04d70345b12de4", "patch": "@@ -1280,15 +1280,14 @@ impl f64 {\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"clamp\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn clamp(self, min: f64, max: f64) -> f64 {\n+    pub fn clamp(mut self, min: f64, max: f64) -> f64 {\n         assert!(min <= max);\n-        let mut x = self;\n-        if x < min {\n-            x = min;\n+        if self < min {\n+            self = min;\n         }\n-        if x > max {\n-            x = max;\n+        if self > max {\n+            self = max;\n         }\n-        x\n+        self\n     }\n }"}, {"sha": "0f3b465d08d4f13bdb831217333da782521f86a2", "filename": "src/test/assembly/x86_64-floating-point-clamp.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a5c16a5381cd71c4d27b32857d04d70345b12de4/src%2Ftest%2Fassembly%2Fx86_64-floating-point-clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c16a5381cd71c4d27b32857d04d70345b12de4/src%2Ftest%2Fassembly%2Fx86_64-floating-point-clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-floating-point-clamp.rs?ref=a5c16a5381cd71c4d27b32857d04d70345b12de4", "patch": "@@ -0,0 +1,25 @@\n+// Floating-point clamp is designed to be implementable as max+min,\n+// so check to make sure that's what it's actually emitting.\n+\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type=lib -O -C llvm-args=-x86-asm-syntax=intel\n+// only-x86_64\n+\n+// CHECK-LABEL: clamp_demo:\n+#[no_mangle]\n+pub fn clamp_demo(a: f32, x: f32, y: f32) -> f32 {\n+    // CHECK: maxss\n+    // CHECK: minss\n+    a.clamp(x, y)\n+}\n+\n+// CHECK-LABEL: clamp12_demo:\n+#[no_mangle]\n+pub fn clamp12_demo(a: f32) -> f32 {\n+    // CHECK: movss   xmm1\n+    // CHECK-NEXT: maxss   xmm1, xmm0\n+    // CHECK-NEXT: movss   xmm0\n+    // CHECK-NEXT: minss   xmm0, xmm1\n+    // CHECK: ret\n+    a.clamp(1.0, 2.0)\n+}"}]}