{"sha": "f9ed012000e6b97878abe6ad41c7842be23590c3", "node_id": "C_kwDOAAsO6NoAKGY5ZWQwMTIwMDBlNmI5Nzg3OGFiZTZhZDQxYzc4NDJiZTIzNTkwYzM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T21:36:06Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T22:05:41Z"}, "message": "Clean up definition of `clean_ty_generics` a bit", "tree": {"sha": "1e682b075645d85989e36998a777b6bdb12b6d8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e682b075645d85989e36998a777b6bdb12b6d8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9ed012000e6b97878abe6ad41c7842be23590c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ed012000e6b97878abe6ad41c7842be23590c3", "html_url": "https://github.com/rust-lang/rust/commit/f9ed012000e6b97878abe6ad41c7842be23590c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9ed012000e6b97878abe6ad41c7842be23590c3/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927a5e393ccb68fc7166f7737459dad42d5e50ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/927a5e393ccb68fc7166f7737459dad42d5e50ca", "html_url": "https://github.com/rust-lang/rust/commit/927a5e393ccb68fc7166f7737459dad42d5e50ca"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "116364ea31085e3f0894d8f00458d711f2602ac4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed012000e6b97878abe6ad41c7842be23590c3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed012000e6b97878abe6ad41c7842be23590c3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f9ed012000e6b97878abe6ad41c7842be23590c3", "patch": "@@ -31,6 +31,7 @@ use rustc_typeck::hir_ty_to_ty;\n \n use std::assert_matches::assert_matches;\n use std::collections::hash_map::Entry;\n+use std::collections::BTreeMap;\n use std::default::Default;\n use std::hash::Hash;\n use std::{mem, vec};\n@@ -527,9 +528,6 @@ fn clean_ty_generics(\n     gens: &ty::Generics,\n     preds: ty::GenericPredicates<'tcx>,\n ) -> Generics {\n-    use self::WherePredicate as WP;\n-    use std::collections::BTreeMap;\n-\n     // Don't populate `cx.impl_trait_bounds` before `clean`ning `where` clauses,\n     // since `Clean for ty::Predicate` would consume them.\n     let mut impl_trait = BTreeMap::<ImplTraitParam, Vec<GenericBound>>::default();\n@@ -650,7 +648,7 @@ fn clean_ty_generics(\n     // handled in cleaning associated types\n     let mut sized_params = FxHashSet::default();\n     where_predicates.retain(|pred| match *pred {\n-        WP::BoundPredicate { ty: Generic(ref g), ref bounds, .. } => {\n+        WherePredicate::BoundPredicate { ty: Generic(ref g), ref bounds, .. } => {\n             if bounds.iter().any(|b| b.is_sized_bound(cx)) {\n                 sized_params.insert(*g);\n                 false\n@@ -667,7 +665,7 @@ fn clean_ty_generics(\n         if matches!(tp.kind, types::GenericParamDefKind::Type { .. })\n             && !sized_params.contains(&tp.name)\n         {\n-            where_predicates.push(WP::BoundPredicate {\n+            where_predicates.push(WherePredicate::BoundPredicate {\n                 ty: Type::Generic(tp.name),\n                 bounds: vec![GenericBound::maybe_sized(cx)],\n                 bound_params: Vec::new(),"}]}