{"sha": "505848a935f416a3850095dbc7b5899bd66f8b36", "node_id": "C_kwDOAAsO6NoAKDUwNTg0OGE5MzVmNDE2YTM4NTAwOTVkYmM3YjU4OTliZDY2ZjhiMzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-16T23:45:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-16T23:45:50Z"}, "message": "Rollup merge of #105493 - WaffleLapkin:unchoke-r-a, r=Nilstrieb\n\nHelp rust-analyzer normalize query return types\n\nSee [zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rustc.20query.20types.20are.20not.20normalized.20since.20recently/near/312686086), since https://github.com/rust-lang/rust/pull/103808, rust analyzer doesn't normalize return types of queries. This is because r-a doesn't support associated type defaults (yet).\n\nThe easiest fix is to not use associated type defaults (duh), which this PR does.\n\nr? `@cjgillot`", "tree": {"sha": "8bae3558bdf7a9533bf0be8e61c91e6f9d4b93a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bae3558bdf7a9533bf0be8e61c91e6f9d4b93a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/505848a935f416a3850095dbc7b5899bd66f8b36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjnQMuCRBK7hj4Ov3rIwAAEeAIAJGdTavKclagUkNn2Gl/sHOa\nCXEkpDfkX1xPMko5Udva8FAEJl9azAeDRmLBwFeN4QMdX178CehKRnpspC43xBZM\nbzPRXUeAdDdZ3y+iQ2AYv0+OIX95yGKefVKqQ9Ub4yO7xSHXDJp8jHX8TDPc45X8\n8/YtYlzvJoWREA9VO4+kd6gdRCNDhe3wfQRFmvb7hsHy//GBy6U1VOOnudJbEJOr\nRKKMLSRnJhz8WQu2fHpBcjCgpycOt8sclaX+alKdLhm1mJMtZDFOyxPVXuILWTcL\noEOC/fuP/W0Kblxg+0eXSpikKAI0rEdqs4XwatL9Ib2Q+7/fayuSd1MXwXcKq3A=\n=HJvI\n-----END PGP SIGNATURE-----\n", "payload": "tree 8bae3558bdf7a9533bf0be8e61c91e6f9d4b93a3\nparent 9c07efe84f28a44f3044237696acc295aa407ee5\nparent 452c745518246484807bd8c73a30400a10cd5057\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671234350 +0100\ncommitter GitHub <noreply@github.com> 1671234350 +0100\n\nRollup merge of #105493 - WaffleLapkin:unchoke-r-a, r=Nilstrieb\n\nHelp rust-analyzer normalize query return types\n\nSee [zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rustc.20query.20types.20are.20not.20normalized.20since.20recently/near/312686086), since https://github.com/rust-lang/rust/pull/103808, rust analyzer doesn't normalize return types of queries. This is because r-a doesn't support associated type defaults (yet).\n\nThe easiest fix is to not use associated type defaults (duh), which this PR does.\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/505848a935f416a3850095dbc7b5899bd66f8b36", "html_url": "https://github.com/rust-lang/rust/commit/505848a935f416a3850095dbc7b5899bd66f8b36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/505848a935f416a3850095dbc7b5899bd66f8b36/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c07efe84f28a44f3044237696acc295aa407ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c07efe84f28a44f3044237696acc295aa407ee5", "html_url": "https://github.com/rust-lang/rust/commit/9c07efe84f28a44f3044237696acc295aa407ee5"}, {"sha": "452c745518246484807bd8c73a30400a10cd5057", "url": "https://api.github.com/repos/rust-lang/rust/commits/452c745518246484807bd8c73a30400a10cd5057", "html_url": "https://github.com/rust-lang/rust/commit/452c745518246484807bd8c73a30400a10cd5057"}], "stats": {"total": 106, "additions": 105, "deletions": 1}, "files": [{"sha": "e4bb3ce3d5a99b32793e8f0a9f1467d5b47f76f7", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 105, "deletions": 1, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/505848a935f416a3850095dbc7b5899bd66f8b36/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505848a935f416a3850095dbc7b5899bd66f8b36/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=505848a935f416a3850095dbc7b5899bd66f8b36", "patch": "@@ -15,7 +15,15 @@ use rustc_span::{Span, DUMMY_SP};\n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n pub trait Key: Sized {\n-    type CacheSelector = DefaultCacheSelector<Self>;\n+    // N.B. Most of the keys down below have `type CacheSelector = DefaultCacheSelector<Self>;`,\n+    //      it would be reasonable to use associated type defaults, to remove the duplication...\n+    //\n+    //      ...But r-a doesn't support them yet and using a default here causes r-a to not infer\n+    //      return types of queries which is very annoying. Thus, until r-a support associated\n+    //      type defaults, plese restrain from using them here <3\n+    //\n+    //      r-a issue: <https://github.com/rust-lang/rust-analyzer/issues/13693>\n+    type CacheSelector;\n \n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n@@ -37,6 +45,8 @@ pub trait Key: Sized {\n }\n \n impl Key for () {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -48,6 +58,8 @@ impl Key for () {\n }\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -59,6 +71,8 @@ impl<'tcx> Key for ty::InstanceDef<'tcx> {\n }\n \n impl<'tcx> Key for ty::Instance<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -70,6 +84,8 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n }\n \n impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -81,6 +97,8 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n }\n \n impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -92,6 +110,8 @@ impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n }\n \n impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -145,6 +165,8 @@ impl Key for LocalDefId {\n }\n \n impl Key for DefId {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.krate == LOCAL_CRATE\n@@ -159,6 +181,8 @@ impl Key for DefId {\n }\n \n impl Key for ty::WithOptConstParam<LocalDefId> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -169,6 +193,8 @@ impl Key for ty::WithOptConstParam<LocalDefId> {\n }\n \n impl Key for SimplifiedType {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -179,6 +205,8 @@ impl Key for SimplifiedType {\n }\n \n impl Key for (DefId, DefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -189,6 +217,8 @@ impl Key for (DefId, DefId) {\n }\n \n impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -199,6 +229,8 @@ impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n }\n \n impl Key for (DefId, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -209,6 +241,8 @@ impl Key for (DefId, LocalDefId) {\n }\n \n impl Key for (LocalDefId, DefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -219,6 +253,8 @@ impl Key for (LocalDefId, DefId) {\n }\n \n impl Key for (LocalDefId, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -229,6 +265,8 @@ impl Key for (LocalDefId, LocalDefId) {\n }\n \n impl Key for (DefId, Option<Ident>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -243,6 +281,8 @@ impl Key for (DefId, Option<Ident>) {\n }\n \n impl Key for (DefId, LocalDefId, Ident) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -253,6 +293,8 @@ impl Key for (DefId, LocalDefId, Ident) {\n }\n \n impl Key for (CrateNum, DefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0 == LOCAL_CRATE\n@@ -263,6 +305,8 @@ impl Key for (CrateNum, DefId) {\n }\n \n impl Key for (CrateNum, SimplifiedType) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0 == LOCAL_CRATE\n@@ -273,6 +317,8 @@ impl Key for (CrateNum, SimplifiedType) {\n }\n \n impl Key for (DefId, SimplifiedType) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -283,6 +329,8 @@ impl Key for (DefId, SimplifiedType) {\n }\n \n impl<'tcx> Key for SubstsRef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -293,6 +341,8 @@ impl<'tcx> Key for SubstsRef<'tcx> {\n }\n \n impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -303,6 +353,8 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         (self.0).def.did.krate == LOCAL_CRATE\n@@ -313,6 +365,8 @@ impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n }\n \n impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -323,6 +377,8 @@ impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.1.def_id().krate == LOCAL_CRATE\n@@ -333,6 +389,8 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -343,6 +401,8 @@ impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n }\n \n impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -353,6 +413,8 @@ impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n }\n \n impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.def_id().krate == LOCAL_CRATE\n@@ -363,6 +425,8 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n }\n \n impl<'tcx> Key for ty::PolyExistentialTraitRef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.def_id().krate == LOCAL_CRATE\n@@ -373,6 +437,8 @@ impl<'tcx> Key for ty::PolyExistentialTraitRef<'tcx> {\n }\n \n impl<'tcx> Key for (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.def_id().krate == LOCAL_CRATE\n@@ -383,6 +449,8 @@ impl<'tcx> Key for (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>) {\n }\n \n impl<'tcx> Key for GenericArg<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -393,6 +461,8 @@ impl<'tcx> Key for GenericArg<'tcx> {\n }\n \n impl<'tcx> Key for mir::ConstantKind<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -403,6 +473,8 @@ impl<'tcx> Key for mir::ConstantKind<'tcx> {\n }\n \n impl<'tcx> Key for ty::Const<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -413,6 +485,8 @@ impl<'tcx> Key for ty::Const<'tcx> {\n }\n \n impl<'tcx> Key for Ty<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -429,6 +503,8 @@ impl<'tcx> Key for Ty<'tcx> {\n }\n \n impl<'tcx> Key for TyAndLayout<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -439,6 +515,8 @@ impl<'tcx> Key for TyAndLayout<'tcx> {\n }\n \n impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -449,6 +527,8 @@ impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n }\n \n impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -459,6 +539,8 @@ impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n }\n \n impl<'tcx> Key for ty::ParamEnv<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -469,6 +551,8 @@ impl<'tcx> Key for ty::ParamEnv<'tcx> {\n }\n \n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.value.query_crate_is_local()\n@@ -479,6 +563,8 @@ impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n }\n \n impl Key for Symbol {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -489,6 +575,8 @@ impl Key for Symbol {\n }\n \n impl Key for Option<Symbol> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -501,6 +589,8 @@ impl Key for Option<Symbol> {\n /// Canonical query goals correspond to abstract trait operations that\n /// are not tied to any crate in particular.\n impl<'tcx, T> Key for Canonical<'tcx, T> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -512,6 +602,8 @@ impl<'tcx, T> Key for Canonical<'tcx, T> {\n }\n \n impl Key for (Symbol, u32, u32) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -523,6 +615,8 @@ impl Key for (Symbol, u32, u32) {\n }\n \n impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -534,6 +628,8 @@ impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -545,6 +641,8 @@ impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n }\n \n impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -556,6 +654,8 @@ impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n }\n \n impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -567,6 +667,8 @@ impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n }\n \n impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -578,6 +680,8 @@ impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n }\n \n impl Key for HirId {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true"}]}