{"sha": "7c480d0db7b3e822e74e6b6df82602a61ced5fcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNDgwZDBkYjdiM2U4MjJlNzRlNmI2ZGY4MjYwMmE2MWNlZDVmY2I=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-12-25T16:47:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-25T16:47:42Z"}, "message": "Merge pull request #1394 from Manishearth/absurd_extreme_comparisons_false_positive\n\nfix absurd extreme comparisons false positive", "tree": {"sha": "62080dc0f3405b7fe8a06d831d489197bcbd2a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62080dc0f3405b7fe8a06d831d489197bcbd2a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c480d0db7b3e822e74e6b6df82602a61ced5fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c480d0db7b3e822e74e6b6df82602a61ced5fcb", "html_url": "https://github.com/rust-lang/rust/commit/7c480d0db7b3e822e74e6b6df82602a61ced5fcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c480d0db7b3e822e74e6b6df82602a61ced5fcb/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b729b3b8e26721d9809f6e6309f68375bfdc102c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b729b3b8e26721d9809f6e6309f68375bfdc102c", "html_url": "https://github.com/rust-lang/rust/commit/b729b3b8e26721d9809f6e6309f68375bfdc102c"}, {"sha": "0b10a41ef396cc21d1526219ba81f3d0a57f17be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b10a41ef396cc21d1526219ba81f3d0a57f17be", "html_url": "https://github.com/rust-lang/rust/commit/0b10a41ef396cc21d1526219ba81f3d0a57f17be"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "9912c52492a5e955913459a178f5276f3e537470", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c480d0db7b3e822e74e6b6df82602a61ced5fcb/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c480d0db7b3e822e74e6b6df82602a61ced5fcb/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=7c480d0db7b3e822e74e6b6df82602a61ced5fcb", "patch": "@@ -825,6 +825,12 @@ fn detect_absurd_comparison<'a>(\n     use types::AbsurdComparisonResult::*;\n     use utils::comparisons::*;\n \n+    // absurd comparison only makes sense on primitive types\n+    // primitive types don't implement comparison operators with each other\n+    if cx.tcx.tables().expr_ty(lhs) != cx.tcx.tables().expr_ty(rhs) {\n+        return None;\n+    }\n+\n     let normalized = normalize_comparison(op, lhs, rhs);\n     let (rel, normalized_lhs, normalized_rhs) = if let Some(val) = normalized {\n         val"}, {"sha": "cf69473bbe5f6ffd2acea28d222a0458dc9b2e31", "filename": "tests/compile-fail/absurd-extreme-comparisons.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7c480d0db7b3e822e74e6b6df82602a61ced5fcb/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c480d0db7b3e822e74e6b6df82602a61ced5fcb/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs?ref=7c480d0db7b3e822e74e6b6df82602a61ced5fcb", "patch": "@@ -3,6 +3,7 @@\n \n #![deny(absurd_extreme_comparisons)]\n #![allow(unused, eq_op, no_effect, unnecessary_operation)]\n+\n fn main() {\n     const Z: u32 = 0;\n \n@@ -70,3 +71,23 @@ fn main() {\n     // this is handled by unit_cmp\n     () < {}; //~WARNING <-comparison of unit values detected.\n }\n+\n+use std::cmp::{Ordering, PartialEq, PartialOrd};\n+\n+#[derive(PartialEq, PartialOrd)]\n+pub struct U(u64);\n+\n+impl PartialEq<u32> for U {\n+    fn eq(&self, other: &u32) -> bool {\n+        self.eq(&U(*other as u64))\n+    }\n+}\n+impl PartialOrd<u32> for U {\n+    fn partial_cmp(&self, other: &u32) -> Option<Ordering> {\n+        self.partial_cmp(&U(*other as u64))\n+    }\n+}\n+\n+pub fn foo(val: U) -> bool {\n+    val > std::u32::MAX\n+}"}]}