{"sha": "e81c393663daab11238944cddfbd97541630f178", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MWMzOTM2NjNkYWFiMTEyMzg5NDRjZGRmYmQ5NzU0MTYzMGYxNzg=", "commit": {"author": {"name": "Ashvin Arsakularatne", "email": "ashvin.arsakularatne@gmail.com", "date": "2021-08-25T18:51:29Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-08-26T02:18:41Z"}, "message": "fix: remove wrong reformatting of qualified paths in struct patterns", "tree": {"sha": "2bc2c7441b8b4e63e9b02c1eb1e27a1f99ba4e01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bc2c7441b8b4e63e9b02c1eb1e27a1f99ba4e01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81c393663daab11238944cddfbd97541630f178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81c393663daab11238944cddfbd97541630f178", "html_url": "https://github.com/rust-lang/rust/commit/e81c393663daab11238944cddfbd97541630f178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81c393663daab11238944cddfbd97541630f178/comments", "author": {"login": "ashvin021", "id": 65221672, "node_id": "MDQ6VXNlcjY1MjIxNjcy", "avatar_url": "https://avatars.githubusercontent.com/u/65221672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashvin021", "html_url": "https://github.com/ashvin021", "followers_url": "https://api.github.com/users/ashvin021/followers", "following_url": "https://api.github.com/users/ashvin021/following{/other_user}", "gists_url": "https://api.github.com/users/ashvin021/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashvin021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashvin021/subscriptions", "organizations_url": "https://api.github.com/users/ashvin021/orgs", "repos_url": "https://api.github.com/users/ashvin021/repos", "events_url": "https://api.github.com/users/ashvin021/events{/privacy}", "received_events_url": "https://api.github.com/users/ashvin021/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd6b025e8a5ab0bf0356030cab98575dca397f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6b025e8a5ab0bf0356030cab98575dca397f69", "html_url": "https://github.com/rust-lang/rust/commit/fd6b025e8a5ab0bf0356030cab98575dca397f69"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "0c6a6f3e8143615a5c39cff7870726861d2547e4", "filename": "src/patterns.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e81c393663daab11238944cddfbd97541630f178/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81c393663daab11238944cddfbd97541630f178/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=e81c393663daab11238944cddfbd97541630f178", "patch": "@@ -244,8 +244,8 @@ impl Rewrite for Pat {\n                     .collect();\n                 Some(format!(\"[{}]\", rw.join(\", \")))\n             }\n-            PatKind::Struct(_, ref path, ref fields, ellipsis) => {\n-                rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n+            PatKind::Struct(ref qself, ref path, ref fields, ellipsis) => {\n+                rewrite_struct_pat(qself, path, fields, ellipsis, self.span, context, shape)\n             }\n             PatKind::MacCall(ref mac) => {\n                 rewrite_macro(mac, None, context, shape, MacroPosition::Pat)\n@@ -258,6 +258,7 @@ impl Rewrite for Pat {\n }\n \n fn rewrite_struct_pat(\n+    qself: &Option<ast::QSelf>,\n     path: &ast::Path,\n     fields: &[ast::PatField],\n     ellipsis: bool,\n@@ -267,7 +268,7 @@ fn rewrite_struct_pat(\n ) -> Option<String> {\n     // 2 =  ` {`\n     let path_shape = shape.sub_width(2)?;\n-    let path_str = rewrite_path(context, PathContext::Expr, None, path, path_shape)?;\n+    let path_str = rewrite_path(context, PathContext::Expr, qself.as_ref(), path, path_shape)?;\n \n     if fields.is_empty() && !ellipsis {\n         return Some(format!(\"{} {{}}\", path_str));"}, {"sha": "023b323cb2796f65af8362c4e0da4d6c2c227bf9", "filename": "tests/target/issue-4908-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e81c393663daab11238944cddfbd97541630f178/tests%2Ftarget%2Fissue-4908-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81c393663daab11238944cddfbd97541630f178/tests%2Ftarget%2Fissue-4908-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4908-2.rs?ref=e81c393663daab11238944cddfbd97541630f178", "patch": "@@ -0,0 +1,20 @@\n+#![feature(more_qualified_paths)]\n+\n+fn main() {\n+    // destructure through a qualified path\n+    let <Foo as A>::Assoc { br } = StructStruct { br: 2 };\n+}\n+\n+struct StructStruct {\n+    br: i8,\n+}\n+\n+struct Foo;\n+\n+trait A {\n+    type Assoc;\n+}\n+\n+impl A for Foo {\n+    type Assoc = StructStruct;\n+}"}, {"sha": "ac5357abe2a18b91f1a89fd174fcd798f8770ddc", "filename": "tests/target/issue-4908.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e81c393663daab11238944cddfbd97541630f178/tests%2Ftarget%2Fissue-4908.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81c393663daab11238944cddfbd97541630f178/tests%2Ftarget%2Fissue-4908.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4908.rs?ref=e81c393663daab11238944cddfbd97541630f178", "patch": "@@ -0,0 +1,34 @@\n+#![feature(more_qualified_paths)]\n+\n+mod foo_bar {\n+    pub enum Example {\n+        Example1 {},\n+        Example2 {},\n+    }\n+}\n+\n+fn main() {\n+    foo!(crate::foo_bar::Example, Example1);\n+\n+    let i1 = foo_bar::Example::Example1 {};\n+\n+    assert_eq!(i1.foo_example(), 1);\n+\n+    let i2 = foo_bar::Example::Example2 {};\n+\n+    assert_eq!(i2.foo_example(), 2);\n+}\n+\n+#[macro_export]\n+macro_rules! foo {\n+    ($struct:path, $variant:ident) => {\n+        impl $struct {\n+            pub fn foo_example(&self) -> i32 {\n+                match self {\n+                    <$struct>::$variant { .. } => 1,\n+                    _ => 2,\n+                }\n+            }\n+        }\n+    };\n+}"}]}