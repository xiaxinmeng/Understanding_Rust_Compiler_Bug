{"sha": "feaceb2063688c401a41d4d7aafc8f5735afa30a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYWNlYjIwNjM2ODhjNDAxYTQxZDRkN2FhZmM4ZjU3MzVhZmEzMGE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-29T00:33:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T00:33:23Z"}, "message": "Rollup merge of #72674 - Mark-Simulacrum:clippy-always-test-pass, r=oli-obk\n\nClippy should always build\n\nThis just unwraps clippy's build step instead of skipping tests if clippy didn't\nbuild. This matches e.g. cargo's behavior and seems more correct, as we always\nexpect clippy to successfully build.\n\nI believe this doesn't actually change anything in practice, but I feel mildly uncomfortable potentially leaving this hole open.", "tree": {"sha": "44ed2e76fd0dc3de1db7754a221feaafdf5bec51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ed2e76fd0dc3de1db7754a221feaafdf5bec51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feaceb2063688c401a41d4d7aafc8f5735afa30a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0FhTCRBK7hj4Ov3rIwAAdHIIAFqnJ54sAhnIShdq58o5n81A\n+Ed+yeX7+dH+eaMJre+vZGDA1E7lYhzXq7IDlOGwYhRdH7YJDXeqqvk3j/Uf6uEO\nQmnp76ZhA1TAFK2IM8Gs3mT9w+uuBQuZRjZ44yxERo4aJhcbf98lpSHX/ByiSe3T\nZUWrfPrcCiQ8HLDXeyCDWmqRPhu3MQ7RIdbb39f8VSopdHexyCXNDYdOtre9vcbc\n6qJ9DB4bqcgtpi6MqRWZNHMJP1P1kunz5exYpSrc5xXt/FOUJ4kKaPE/u1A4vpbH\nDoximry6GkFCL1LZwf6twv7gijUoIR1htxD4UP23q+jvTVMnawfae1/jT5UST3E=\n=g10n\n-----END PGP SIGNATURE-----\n", "payload": "tree 44ed2e76fd0dc3de1db7754a221feaafdf5bec51\nparent 0204fc38d228ace4e33f63431841565ceac3b244\nparent b1063b83da7159c0dc8616fec26daeaa11b5f4d7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590712403 +0200\ncommitter GitHub <noreply@github.com> 1590712403 +0200\n\nRollup merge of #72674 - Mark-Simulacrum:clippy-always-test-pass, r=oli-obk\n\nClippy should always build\n\nThis just unwraps clippy's build step instead of skipping tests if clippy didn't\nbuild. This matches e.g. cargo's behavior and seems more correct, as we always\nexpect clippy to successfully build.\n\nI believe this doesn't actually change anything in practice, but I feel mildly uncomfortable potentially leaving this hole open.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feaceb2063688c401a41d4d7aafc8f5735afa30a", "html_url": "https://github.com/rust-lang/rust/commit/feaceb2063688c401a41d4d7aafc8f5735afa30a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feaceb2063688c401a41d4d7aafc8f5735afa30a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0204fc38d228ace4e33f63431841565ceac3b244", "url": "https://api.github.com/repos/rust-lang/rust/commits/0204fc38d228ace4e33f63431841565ceac3b244", "html_url": "https://github.com/rust-lang/rust/commit/0204fc38d228ace4e33f63431841565ceac3b244"}, {"sha": "b1063b83da7159c0dc8616fec26daeaa11b5f4d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1063b83da7159c0dc8616fec26daeaa11b5f4d7", "html_url": "https://github.com/rust-lang/rust/commit/b1063b83da7159c0dc8616fec26daeaa11b5f4d7"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "f1305e2540b4ca9deba0a3bb8aafd6a3ed804d0f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/feaceb2063688c401a41d4d7aafc8f5735afa30a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feaceb2063688c401a41d4d7aafc8f5735afa30a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=feaceb2063688c401a41d4d7aafc8f5735afa30a", "patch": "@@ -516,45 +516,37 @@ impl Step for Clippy {\n         let host = self.host;\n         let compiler = builder.compiler(stage, host);\n \n-        let clippy = builder.ensure(tool::Clippy {\n+        let clippy = builder\n+            .ensure(tool::Clippy { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        let mut cargo = tool::prepare_tool_cargo(\n+            builder,\n             compiler,\n-            target: self.host,\n-            extra_features: Vec::new(),\n-        });\n-        if let Some(clippy) = clippy {\n-            let mut cargo = tool::prepare_tool_cargo(\n-                builder,\n-                compiler,\n-                Mode::ToolRustc,\n-                host,\n-                \"test\",\n-                \"src/tools/clippy\",\n-                SourceType::InTree,\n-                &[],\n-            );\n+            Mode::ToolRustc,\n+            host,\n+            \"test\",\n+            \"src/tools/clippy\",\n+            SourceType::InTree,\n+            &[],\n+        );\n \n-            // clippy tests need to know about the stage sysroot\n-            cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n-            cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n-            cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n-            let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n-            let target_libs = builder\n-                .stage_out(compiler, Mode::ToolRustc)\n-                .join(&self.host)\n-                .join(builder.cargo_dir());\n-            cargo.env(\"HOST_LIBS\", host_libs);\n-            cargo.env(\"TARGET_LIBS\", target_libs);\n-            // clippy tests need to find the driver\n-            cargo.env(\"CLIPPY_DRIVER_PATH\", clippy);\n+        // clippy tests need to know about the stage sysroot\n+        cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n+        cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n+        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n+        let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n+        let target_libs =\n+            builder.stage_out(compiler, Mode::ToolRustc).join(&self.host).join(builder.cargo_dir());\n+        cargo.env(\"HOST_LIBS\", host_libs);\n+        cargo.env(\"TARGET_LIBS\", target_libs);\n+        // clippy tests need to find the driver\n+        cargo.env(\"CLIPPY_DRIVER_PATH\", clippy);\n \n-            cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n-            builder.add_rustc_lib_path(compiler, &mut cargo);\n+        builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            try_run(builder, &mut cargo.into());\n-        } else {\n-            eprintln!(\"failed to test clippy: could not build\");\n-        }\n+        try_run(builder, &mut cargo.into());\n     }\n }\n "}]}