{"sha": "f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzY3ZTAzNzBkNWRlNWNiYTEzYzg1M2M3ZGY1ZjBjNWEwZWRmNTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:50:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:50:16Z"}, "message": "remove Cancelable from navigation target", "tree": {"sha": "6ea2db9840f91aa39b65680ace9d3079a140a12c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea2db9840f91aa39b65680ace9d3079a140a12c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "html_url": "https://github.com/rust-lang/rust/commit/f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dd4099d9388b5f61e99f923dd6c523f76ad43ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd4099d9388b5f61e99f923dd6c523f76ad43ff", "html_url": "https://github.com/rust-lang/rust/commit/9dd4099d9388b5f61e99f923dd6c523f76ad43ff"}], "stats": {"total": 71, "additions": 29, "deletions": 42}, "files": [{"sha": "f28e077c66c3b1a7c124fc220ba3931c1c78b15e", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -297,8 +297,8 @@ impl Function {\n         self.def_id\n     }\n \n-    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::FnDef>)> {\n-        Ok(def_id_to_ast(db, self.def_id))\n+    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n+        def_id_to_ast(db, self.def_id)\n     }\n \n     pub fn body_syntax_mapping(&self, db: &impl HirDatabase) -> Cancelable<Arc<BodySyntaxMapping>> {"}, {"sha": "331b0500e5a0fb4cc6b17d093a53918cf9e061b4", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -148,7 +148,7 @@ impl Module {\n             } else {\n                 return Ok(PerNs::none());\n             };\n-            let module = match curr.resolve(db)? {\n+            let module = match curr.resolve(db) {\n                 Def::Module(it) => it,\n                 Def::Enum(e) => {\n                     if segments.len() == idx + 1 {"}, {"sha": "a1e8da3480d3a950c92c9ca977861807a01b4c5e", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -832,10 +832,10 @@ pub(crate) fn body_syntax_mapping(\n     db: &impl HirDatabase,\n     def_id: DefId,\n ) -> Cancelable<Arc<BodySyntaxMapping>> {\n-    let def = def_id.resolve(db)?;\n+    let def = def_id.resolve(db);\n \n     let body_syntax_mapping = match def {\n-        Def::Function(f) => collect_fn_body_syntax(&f.source(db)?.1),\n+        Def::Function(f) => collect_fn_body_syntax(&f.source(db).1),\n         // TODO: consts, etc.\n         _ => panic!(\"Trying to get body for item type without body\"),\n     };"}, {"sha": "3cbf8070f932cf3205020921c751543a87f16879", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -159,9 +159,9 @@ impl DefId {\n         db.as_ref().id2loc(self)\n     }\n \n-    pub fn resolve(self, db: &impl HirDatabase) -> Cancelable<Def> {\n+    pub fn resolve(self, db: &impl HirDatabase) -> Def {\n         let loc = self.loc(db);\n-        let res = match loc.kind {\n+        match loc.kind {\n             DefKind::Module => {\n                 let module = Module::from_module_id(db, loc.source_root_id, loc.module_id);\n                 Def::Module(module)\n@@ -195,8 +195,7 @@ impl DefId {\n \n             DefKind::StructCtor => Def::Item,\n             DefKind::Item => Def::Item,\n-        };\n-        Ok(res)\n+        }\n     }\n \n     pub(crate) fn source(self, db: &impl HirDatabase) -> (HirFileId, TreeArc<SyntaxNode>) {"}, {"sha": "3607969ed7f371c0b39b900276be6edf2e9d1f55", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -481,7 +481,7 @@ pub(crate) fn type_for_enum_variant(db: &impl HirDatabase, ev: EnumVariant) -> C\n }\n \n pub(super) fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Ty> {\n-    let def = def_id.resolve(db)?;\n+    let def = def_id.resolve(db);\n     match def {\n         Def::Module(..) => {\n             log::debug!(\"trying to get type for module {:?}\", def_id);\n@@ -507,7 +507,7 @@ pub(super) fn type_for_field(\n     def_id: DefId,\n     field: Name,\n ) -> Cancelable<Option<Ty>> {\n-    let def = def_id.resolve(db)?;\n+    let def = def_id.resolve(db);\n     let variant_data = match def {\n         Def::Struct(s) => s.variant_data(db)?,\n         Def::EnumVariant(ev) => ev.variant_data(db),\n@@ -877,7 +877,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         } else {\n             return Ok((Ty::Unknown, None));\n         };\n-        Ok(match def_id.resolve(self.db)? {\n+        Ok(match def_id.resolve(self.db) {\n             Def::Struct(s) => {\n                 let ty = type_for_struct(self.db, s)?;\n                 (ty, Some(def_id))"}, {"sha": "886dc54d45dbdfb062c0b428161d8908395b5b52", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -27,7 +27,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n     for receiver in receiver.autoderef(ctx.db) {\n         match receiver {\n             Ty::Adt { def_id, .. } => {\n-                match def_id.resolve(ctx.db)? {\n+                match def_id.resolve(ctx.db) {\n                     Def::Struct(s) => {\n                         for field in s.fields(ctx.db) {\n                             CompletionItem::new("}, {"sha": "207a509b33fe8843520e43d51575f443775c01e1", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -12,7 +12,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> C\n         Some(it) => it,\n         None => return Ok(()),\n     };\n-    match def_id.resolve(ctx.db)? {\n+    match def_id.resolve(ctx.db) {\n         hir::Def::Module(module) => {\n             let module_scope = module.scope(ctx.db)?;\n             for (name, res) in module_scope.entries() {"}, {"sha": "11d00f78cd2b4e0ccab6228e9b6cee65d3d231e7", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -144,7 +144,7 @@ impl Builder {\n         ctx: &CompletionContext,\n         resolution: &hir::Resolution,\n     ) -> Builder {\n-        let resolved = resolution.def_id.and_then(|d| d.resolve(ctx.db).ok());\n+        let resolved = resolution.def_id.map(|d| d.resolve(ctx.db));\n         let kind = match resolved {\n             PerNs {\n                 types: Some(hir::Def::Module(..)),"}, {"sha": "7229293a478c25c23d8f3607ea1538893fbd9a88", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -70,7 +70,7 @@ pub(crate) fn reference_definition(\n                 .node_expr(expr)\n                 .and_then(|it| infer_result.method_resolution(it))\n             {\n-                if let Some(target) = NavigationTarget::from_def(db, def_id.resolve(db)?)? {\n+                if let Some(target) = NavigationTarget::from_def(db, def_id.resolve(db)) {\n                     return Ok(Exact(target));\n                 }\n             };\n@@ -87,7 +87,7 @@ pub(crate) fn reference_definition(\n         {\n             let resolved = module.resolve_path(db, &path)?;\n             if let Some(def_id) = resolved.take_types().or(resolved.take_values()) {\n-                if let Some(target) = NavigationTarget::from_def(db, def_id.resolve(db)?)? {\n+                if let Some(target) = NavigationTarget::from_def(db, def_id.resolve(db)) {\n                     return Ok(Exact(target));\n                 }\n             }\n@@ -112,7 +112,7 @@ fn name_definition(\n             if let Some(child_module) =\n                 hir::source_binder::module_from_declaration(db, file_id, module)\n             {\n-                let nav = NavigationTarget::from_module(db, child_module)?;\n+                let nav = NavigationTarget::from_module(db, child_module);\n                 return Ok(Some(vec![nav]));\n             }\n         }"}, {"sha": "21c15c0c00e514c6e39a07b0e92e3c025ec8ace7", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -1,4 +1,4 @@\n-use ra_db::{FileId, Cancelable};\n+use ra_db::FileId;\n use ra_syntax::{\n     SyntaxNode, AstNode, SmolStr, TextRange, ast,\n     SyntaxKind::{self, NAME},\n@@ -69,47 +69,35 @@ impl NavigationTarget {\n         }\n     }\n \n-    pub(crate) fn from_module(\n-        db: &RootDatabase,\n-        module: hir::Module,\n-    ) -> Cancelable<NavigationTarget> {\n+    pub(crate) fn from_module(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let (file_id, source) = module.definition_source(db);\n         let name = module\n             .name(db)\n             .map(|it| it.to_string().into())\n             .unwrap_or_default();\n-        let res = match source {\n+        match source {\n             ModuleSource::SourceFile(node) => {\n                 NavigationTarget::from_syntax(file_id, name, None, node.syntax())\n             }\n             ModuleSource::Module(node) => {\n                 NavigationTarget::from_syntax(file_id, name, None, node.syntax())\n             }\n-        };\n-        Ok(res)\n+        }\n     }\n \n-    pub(crate) fn from_module_to_decl(\n-        db: &RootDatabase,\n-        module: hir::Module,\n-    ) -> Cancelable<NavigationTarget> {\n+    pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module\n             .name(db)\n             .map(|it| it.to_string().into())\n             .unwrap_or_default();\n         if let Some((file_id, source)) = module.declaration_source(db) {\n-            return Ok(NavigationTarget::from_syntax(\n-                file_id,\n-                name,\n-                None,\n-                source.syntax(),\n-            ));\n+            return NavigationTarget::from_syntax(file_id, name, None, source.syntax());\n         }\n         NavigationTarget::from_module(db, module)\n     }\n \n     // TODO once Def::Item is gone, this should be able to always return a NavigationTarget\n-    pub(crate) fn from_def(db: &RootDatabase, def: Def) -> Cancelable<Option<NavigationTarget>> {\n+    pub(crate) fn from_def(db: &RootDatabase, def: Def) -> Option<NavigationTarget> {\n         let res = match def {\n             Def::Struct(s) => {\n                 let (file_id, node) = s.source(db);\n@@ -124,7 +112,7 @@ impl NavigationTarget {\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             Def::Function(f) => {\n-                let (file_id, node) = f.source(db)?;\n+                let (file_id, node) = f.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             Def::Trait(f) => {\n@@ -143,10 +131,10 @@ impl NavigationTarget {\n                 let (file_id, node) = f.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n-            Def::Module(m) => NavigationTarget::from_module(db, m)?,\n-            Def::Item => return Ok(None),\n+            Def::Module(m) => NavigationTarget::from_module(db, m),\n+            Def::Item => return None,\n         };\n-        Ok(Some(res))\n+        Some(res)\n     }\n \n     #[cfg(test)]"}, {"sha": "379b3f3a4f22cf9c40a35d0b30a5b92812ed62b7", "filename": "crates/ra_ide_api/src/parent_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1367e0370d5de5cba13c853c7df5f0c5a0edf59/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs?ref=f1367e0370d5de5cba13c853c7df5f0c5a0edf59", "patch": "@@ -12,7 +12,7 @@ pub(crate) fn parent_module(\n         None => return Ok(Vec::new()),\n         Some(it) => it,\n     };\n-    let nav = NavigationTarget::from_module_to_decl(db, module)?;\n+    let nav = NavigationTarget::from_module_to_decl(db, module);\n     Ok(vec![nav])\n }\n "}]}