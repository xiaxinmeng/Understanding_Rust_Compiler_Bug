{"sha": "93a3cfb748546ba7729db68f2e962e8b29eafa77", "node_id": "C_kwDOAAsO6NoAKDkzYTNjZmI3NDg1NDZiYTc3MjlkYjY4ZjJlOTYyZThiMjllYWZhNzc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-12T12:31:00Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-12T12:31:00Z"}, "message": "Explain the span search logic", "tree": {"sha": "d2d618923e941ce6f184a35c4679ff286840d45c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d618923e941ce6f184a35c4679ff286840d45c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93a3cfb748546ba7729db68f2e962e8b29eafa77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93a3cfb748546ba7729db68f2e962e8b29eafa77", "html_url": "https://github.com/rust-lang/rust/commit/93a3cfb748546ba7729db68f2e962e8b29eafa77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93a3cfb748546ba7729db68f2e962e8b29eafa77/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08ef70bd1398efd882b985959baaa4a5cc6dd738", "url": "https://api.github.com/repos/rust-lang/rust/commits/08ef70bd1398efd882b985959baaa4a5cc6dd738", "html_url": "https://github.com/rust-lang/rust/commit/08ef70bd1398efd882b985959baaa4a5cc6dd738"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "f9e2e4c41aad97c393a9b036a70a16ef98595fa6", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93a3cfb748546ba7729db68f2e962e8b29eafa77/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a3cfb748546ba7729db68f2e962e8b29eafa77/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=93a3cfb748546ba7729db68f2e962e8b29eafa77", "patch": "@@ -146,11 +146,14 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGua\n     // and #84660 where it would otherwise allow unsoundness.\n     if trait_ref.has_opaque_types() {\n         trace!(\"{:#?}\", item);\n+        // First we find the opaque type in question.\n         for ty in trait_ref.substs {\n             for ty in ty.walk() {\n                 let ty::subst::GenericArgKind::Type(ty) = ty.unpack() else { continue };\n                 let ty::Opaque(def_id, _) = *ty.kind() else { continue };\n                 trace!(?def_id);\n+\n+                // Then we search for mentions of the opaque type's type alias in the HIR\n                 struct SpanFinder<'tcx> {\n                     sp: Span,\n                     def_id: DefId,\n@@ -159,11 +162,14 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGua\n                 impl<'v, 'tcx> hir::intravisit::Visitor<'v> for SpanFinder<'tcx> {\n                     #[instrument(level = \"trace\", skip(self, _id))]\n                     fn visit_path(&mut self, path: &'v hir::Path<'v>, _id: hir::HirId) {\n+                        // You can't mention an opaque type directly, so we look for type aliases\n                         if let hir::def::Res::Def(hir::def::DefKind::TyAlias, def_id) = path.res {\n+                            // And check if that type alias's type contains the opaque type we're looking for\n                             for arg in self.tcx.type_of(def_id).walk() {\n                                 if let GenericArgKind::Type(ty) = arg.unpack() {\n                                     if let ty::Opaque(def_id, _) = *ty.kind() {\n                                         if def_id == self.def_id {\n+                                            // Finally we update the span to the mention of the type alias\n                                             self.sp = path.span;\n                                             return;\n                                         }"}]}