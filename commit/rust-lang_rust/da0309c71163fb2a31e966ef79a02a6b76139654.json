{"sha": "da0309c71163fb2a31e966ef79a02a6b76139654", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDMwOWM3MTE2M2ZiMmEzMWU5NjZlZjc5YTAyYTZiNzYxMzk2NTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-27T18:59:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-23T09:30:38Z"}, "message": "Use PassMode::Pair by default for Abi::ScalarPair for all abi's and in return position\n\nAbi::ScalarPair is only ever used for types that don't have a stable\nlayout anyway so this doesn't break any FFI. It does however reduce the\namount of special casing on the abi outside of the code responsible for\nabi specific adjustments to the pass mode.", "tree": {"sha": "e430c7eb7edb78733bfe487ec9719a46b6fd2314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e430c7eb7edb78733bfe487ec9719a46b6fd2314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da0309c71163fb2a31e966ef79a02a6b76139654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da0309c71163fb2a31e966ef79a02a6b76139654", "html_url": "https://github.com/rust-lang/rust/commit/da0309c71163fb2a31e966ef79a02a6b76139654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da0309c71163fb2a31e966ef79a02a6b76139654/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bde7d21ccdee7f147884de1b070a558d209c743", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bde7d21ccdee7f147884de1b070a558d209c743", "html_url": "https://github.com/rust-lang/rust/commit/2bde7d21ccdee7f147884de1b070a558d209c743"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "0363f4d7cdac3cbef37b8af03461af8723896e5e", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/da0309c71163fb2a31e966ef79a02a6b76139654/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0309c71163fb2a31e966ef79a02a6b76139654/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=da0309c71163fb2a31e966ef79a02a6b76139654", "patch": "@@ -2794,22 +2794,19 @@ where\n                 }\n             }\n \n-            // FIXME(eddyb) other ABIs don't have logic for scalar pairs.\n-            if !is_return && rust_abi {\n-                if let Abi::ScalarPair(ref a, ref b) = arg.layout.abi {\n-                    let mut a_attrs = ArgAttributes::new();\n-                    let mut b_attrs = ArgAttributes::new();\n-                    adjust_for_rust_scalar(&mut a_attrs, a, arg.layout, Size::ZERO, false);\n-                    adjust_for_rust_scalar(\n-                        &mut b_attrs,\n-                        b,\n-                        arg.layout,\n-                        a.value.size(cx).align_to(b.value.align(cx).abi),\n-                        false,\n-                    );\n-                    arg.mode = PassMode::Pair(a_attrs, b_attrs);\n-                    return arg;\n-                }\n+            if let Abi::ScalarPair(ref a, ref b) = arg.layout.abi {\n+                let mut a_attrs = ArgAttributes::new();\n+                let mut b_attrs = ArgAttributes::new();\n+                adjust_for_rust_scalar(&mut a_attrs, a, arg.layout, Size::ZERO, is_return);\n+                adjust_for_rust_scalar(\n+                    &mut b_attrs,\n+                    b,\n+                    arg.layout,\n+                    a.value.size(cx).align_to(b.value.align(cx).abi),\n+                    is_return,\n+                );\n+                arg.mode = PassMode::Pair(a_attrs, b_attrs);\n+                return arg;\n             }\n \n             if let Abi::Scalar(ref scalar) = arg.layout.abi {"}, {"sha": "24fd11b677281dc083f3a50ea3c35db50eecf367", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da0309c71163fb2a31e966ef79a02a6b76139654/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0309c71163fb2a31e966ef79a02a6b76139654/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=da0309c71163fb2a31e966ef79a02a6b76139654", "patch": "@@ -439,7 +439,10 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n     }\n \n     pub fn make_indirect(&mut self) {\n-        assert_eq!(self.mode, PassMode::Direct(ArgAttributes::new()));\n+        match self.mode {\n+            PassMode::Direct(_) | PassMode::Pair(_, _) => {}\n+            _ => panic!(\"Tried to make {:?} indirect\", self.mode),\n+        }\n \n         // Start with fresh attributes for the pointer.\n         let mut attrs = ArgAttributes::new();\n@@ -486,7 +489,10 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n     }\n \n     pub fn cast_to<T: Into<CastTarget>>(&mut self, target: T) {\n-        assert_eq!(self.mode, PassMode::Direct(ArgAttributes::new()));\n+        match self.mode {\n+            PassMode::Direct(_) | PassMode::Pair(_, _) => {}\n+            _ => panic!(\"Tried to cast {:?} to {:?}\", self.mode, target.into()),\n+        }\n         self.mode = PassMode::Cast(target.into());\n     }\n "}]}