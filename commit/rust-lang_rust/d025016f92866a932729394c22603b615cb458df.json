{"sha": "d025016f92866a932729394c22603b615cb458df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMjUwMTZmOTI4NjZhOTMyNzI5Mzk0YzIyNjAzYjYxNWNiNDU4ZGY=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2019-08-11T12:25:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-25T09:55:55Z"}, "message": "Mock std String and Result types in tests for ok-wrapping diagnostic", "tree": {"sha": "dd118c11a6e6475cb1bb0c4ba6fa7c2ae6a543df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd118c11a6e6475cb1bb0c4ba6fa7c2ae6a543df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d025016f92866a932729394c22603b615cb458df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d025016f92866a932729394c22603b615cb458df", "html_url": "https://github.com/rust-lang/rust/commit/d025016f92866a932729394c22603b615cb458df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d025016f92866a932729394c22603b615cb458df/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bacb938ab096e3e2885e7bbb5e2cdbebe53292ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/bacb938ab096e3e2885e7bbb5e2cdbebe53292ea", "html_url": "https://github.com/rust-lang/rust/commit/bacb938ab096e3e2885e7bbb5e2cdbebe53292ea"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "ca7db61bc43c73944aa97f1950fb4d43911dc373", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d025016f92866a932729394c22603b615cb458df/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d025016f92866a932729394c22603b615cb458df/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=d025016f92866a932729394c22603b615cb458df", "patch": "@@ -106,12 +106,10 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             Some(m) => m,\n             None => return,\n         };\n-\n         let ret = match &mismatch.expected {\n             Ty::Apply(t) => t,\n             _ => return,\n         };\n-\n         let ret_enum = match ret.ctor {\n             TypeCtor::Adt(AdtDef::Enum(e)) => e,\n             _ => return,"}, {"sha": "84d2b7fb10c6b368a207de6b28289879b5a81e23", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d025016f92866a932729394c22603b615cb458df/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d025016f92866a932729394c22603b615cb458df/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=d025016f92866a932729394c22603b615cb458df", "patch": "@@ -187,7 +187,7 @@ mod tests {\n     use ra_syntax::SourceFile;\n     use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::single_file;\n+    use crate::mock_analysis::{fixture_with_target_file, single_file};\n \n     use super::*;\n \n@@ -216,6 +216,15 @@ mod tests {\n         assert_eq_text!(after, &actual);\n     }\n \n+    fn check_apply_diagnostic_fix_for_target_file(target_file: &str, fixture: &str, after: &str) {\n+        let (analysis, file_id, target_file_contents) = fixture_with_target_file(fixture, target_file);\n+        let diagnostic = analysis.diagnostics(file_id).unwrap().pop().unwrap();\n+        let mut fix = diagnostic.fix.unwrap();\n+        let edit = fix.source_file_edits.pop().unwrap().edit;\n+        let actual = edit.apply(&target_file_contents);\n+        assert_eq_text!(after, &actual);\n+    }\n+\n     fn check_apply_diagnostic_fix(before: &str, after: &str) {\n         let (analysis, file_id) = single_file(before);\n         let diagnostic = analysis.diagnostics(file_id).unwrap().pop().unwrap();\n@@ -225,6 +234,12 @@ mod tests {\n         assert_eq_text!(after, &actual);\n     }\n \n+    fn check_no_diagnostic_for_target_file(target_file: &str, fixture: &str) {\n+        let (analysis, file_id, _) = fixture_with_target_file(fixture, target_file);\n+        let diagnostics = analysis.diagnostics(file_id).unwrap();\n+        assert_eq!(diagnostics.len(), 0);\n+    }\n+\n     fn check_no_diagnostic(content: &str) {\n         let (analysis, file_id) = single_file(content);\n         let diagnostics = analysis.diagnostics(file_id).unwrap();\n@@ -234,38 +249,57 @@ mod tests {\n     #[test]\n     fn test_wrap_return_type() {\n         let before = r#\"\n-            enum Result<T, E> { Ok(T), Err(E) }\n-            struct String { }\n+            //- /main.rs\n+            use std::{string::String, result::Result::{self, Ok, Err}};\n \n             fn div(x: i32, y: i32) -> Result<i32, String> {\n                 if y == 0 {\n                     return Err(\"div by zero\".into());\n                 }\n                 x / y\n             }\n-        \"#;\n-        let after = r#\"\n-            enum Result<T, E> { Ok(T), Err(E) }\n-            struct String { }\n \n-            fn div(x: i32, y: i32) -> Result<i32, String> {\n-                if y == 0 {\n-                    return Err(\"div by zero\".into());\n-                }\n-                Ok(x / y)\n+            //- /std/lib.rs\n+            pub mod string {\n+                pub struct String { }\n+            }\n+            pub mod result {\n+                pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n-        check_apply_diagnostic_fix(before, after);\n+// The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n+// it strips empty lines and leading whitespace. The important part of this test is that the final\n+// `x / y` expr is now wrapped in `Ok(..)`\n+        let after = r#\"use std::{string::String, result::Result::{self, Ok, Err}};\n+fn div(x: i32, y: i32) -> Result<i32, String> {\n+    if y == 0 {\n+        return Err(\"div by zero\".into());\n+    }\n+    Ok(x / y)\n+}\n+\"#;\n+        check_apply_diagnostic_fix_for_target_file(\"/main.rs\", before, after);\n     }\n \n     #[test]\n     fn test_wrap_return_type_not_applicable() {\n         let content = r#\"\n+            //- /main.rs\n+            use std::{string::String, result::Result::{self, Ok, Err}};\n+\n             fn foo() -> Result<String, i32> {\n                 0\n             }\n+\n+            //- /std/lib.rs\n+            pub mod string {\n+                pub struct String { }\n+            }\n+            pub mod result {\n+                pub enum Result<T, E> { Ok(T), Err(E) }\n+            }\n         \"#;\n-        check_no_diagnostic(content);\n+        check_no_diagnostic_for_target_file(\"/main.rs\", content);\n     }\n \n     #[test]"}, {"sha": "0eaf5d15a3eb2e8c1d65d81ce13d0844667074fa", "filename": "crates/ra_ide_api/src/mock_analysis.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d025016f92866a932729394c22603b615cb458df/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d025016f92866a932729394c22603b615cb458df/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs?ref=d025016f92866a932729394c22603b615cb458df", "patch": "@@ -80,6 +80,15 @@ impl MockAnalysis {\n             .expect(\"no file in this mock\");\n         FileId(idx as u32 + 1)\n     }\n+    pub fn id_and_contents_of(&self, path: &str) -> (FileId, String) {\n+        let (idx, contents) = self\n+            .files\n+            .iter()\n+            .enumerate()\n+            .find(|(_, (p, _text))| path == p)\n+            .expect(\"no file in this mock\");\n+        (FileId(idx as u32 + 1), contents.1.to_string())\n+    }\n     pub fn analysis_host(self) -> AnalysisHost {\n         let mut host = AnalysisHost::default();\n         let source_root = SourceRootId(0);\n@@ -124,6 +133,14 @@ pub fn single_file(code: &str) -> (Analysis, FileId) {\n     (mock.analysis(), file_id)\n }\n \n+/// Creates analysis from a fixture with multiple files\n+/// and returns the file id and contents of the target file.\n+pub fn fixture_with_target_file(fixture: &str, target_file: &str) -> (Analysis, FileId, String) {\n+    let mock = MockAnalysis::with_files(fixture);\n+    let (target_file_id, target_file_contents) = mock.id_and_contents_of(target_file);\n+    (mock.analysis(), target_file_id, target_file_contents)\n+}\n+\n /// Creates analysis for a single file, returns position marked with <|>.\n pub fn single_file_with_position(code: &str) -> (Analysis, FilePosition) {\n     let mut mock = MockAnalysis::new();"}]}