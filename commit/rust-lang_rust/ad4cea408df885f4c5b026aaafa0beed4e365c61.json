{"sha": "ad4cea408df885f4c5b026aaafa0beed4e365c61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNGNlYTQwOGRmODg1ZjRjNWIwMjZhYWFmYTBiZWVkNGUzNjVjNjE=", "commit": {"author": {"name": "Franc\u0327ois Mockers", "email": "mockersf@gmail.com", "date": "2018-10-16T23:09:43Z"}, "committer": {"name": "Franc\u0327ois Mockers", "email": "mockersf@gmail.com", "date": "2018-10-16T23:09:43Z"}, "message": "apply review", "tree": {"sha": "ae4c683f6ef78586264cfa389849378047eb98c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4c683f6ef78586264cfa389849378047eb98c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad4cea408df885f4c5b026aaafa0beed4e365c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4cea408df885f4c5b026aaafa0beed4e365c61", "html_url": "https://github.com/rust-lang/rust/commit/ad4cea408df885f4c5b026aaafa0beed4e365c61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad4cea408df885f4c5b026aaafa0beed4e365c61/comments", "author": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cac95ee11c901f4d366c15acbbb9cf351f89632a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cac95ee11c901f4d366c15acbbb9cf351f89632a", "html_url": "https://github.com/rust-lang/rust/commit/cac95ee11c901f4d366c15acbbb9cf351f89632a"}], "stats": {"total": 128, "additions": 75, "deletions": 53}, "files": [{"sha": "7320b6e7d9b7da98866f843d5065e32fecdfe31b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ad4cea408df885f4c5b026aaafa0beed4e365c61", "patch": "@@ -1248,15 +1248,6 @@ impl<'a> NameBinding<'a> {\n         }\n     }\n \n-    fn is_renamed_extern_crate(&self) -> bool {\n-        if let NameBindingKind::Import { directive, ..} = self.kind {\n-            if let ImportDirectiveSubclass::ExternCrate(Some(_)) = directive.subclass {\n-                return true;\n-            }\n-        }\n-        false\n-    }\n-\n     fn is_glob_import(&self) -> bool {\n         match self.kind {\n             NameBindingKind::Import { directive, .. } => directive.is_glob(),\n@@ -4783,10 +4774,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             };\n \n             let cm = self.session.source_map();\n-            let rename_msg = \"You can use `as` to change the binding name of the import\";\n+            let rename_msg = \"you can use `as` to change the binding name of the import\";\n \n-            if let (Ok(snippet), false) = (cm.span_to_snippet(binding.span),\n-                                           binding.is_renamed_extern_crate()) {\n+            if let Ok(snippet) = cm.span_to_snippet(binding.span) {\n                 let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n                     format!(\"Other{}\", name)\n                 } else {\n@@ -4796,20 +4786,22 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 err.span_suggestion_with_applicability(\n                     binding.span,\n                     rename_msg,\n-                    if snippet.contains(\" as \") {\n-                        format!(\n-                            \"{} as {}\",\n+                    match (snippet.split_whitespace().find(|w| *w == \"as\"), snippet.ends_with(\";\")) {\n+                        (Some(_), false) => format!(\"{} as {}\",\n                             &snippet[..snippet.find(\" as \").unwrap()],\n                             suggested_name,\n-                        )\n-                    } else {\n-                        if snippet.ends_with(';') {\n-                            format!(\"{} as {};\", &snippet[..snippet.len() - 1], suggested_name)\n-                        } else {\n-                            format!(\"{} as {}\", snippet, suggested_name)\n-                        }\n+                        ),\n+                        (Some(_), true) => format!(\"{} as {};\",\n+                            &snippet[..snippet.find(\" as \").unwrap()],\n+                            suggested_name,\n+                        ),\n+                        (None, false) => format!(\"{} as {}\", snippet, suggested_name),\n+                        (None, true) => format!(\"{} as {};\", \n+                            &snippet[..snippet.len() - 1],\n+                            suggested_name\n+                        ),\n                     },\n-                    Applicability::MachineApplicable,\n+                    Applicability::MaybeIncorrect,\n                 );\n             } else {\n                 err.span_label(binding.span, rename_msg);"}, {"sha": "eca46484699b3b178eb04010a2c91fe2737c12f4", "filename": "src/test/ui/issues/issue-45829/issue-45829.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fissue-45829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fissue-45829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fissue-45829.rs?ref=ad4cea408df885f4c5b026aaafa0beed4e365c61", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub struct A;\n+    pub struct B;\n+}\n+\n+use foo::{A, B as A};\n+\n+fn main() {}"}, {"sha": "872379d9fc30339a6807ed9f4f0ed86181944ff2", "filename": "src/test/ui/issues/issue-45829/issue-45829.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fissue-45829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fissue-45829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fissue-45829.stderr?ref=ad4cea408df885f4c5b026aaafa0beed4e365c61", "patch": "@@ -0,0 +1,17 @@\n+error[E0252]: the name `A` is defined multiple times\n+  --> $DIR/issue-45829.rs:16:14\n+   |\n+LL | use foo::{A, B as A};\n+   |           -  ^^^^^^ `A` reimported here\n+   |           |\n+   |           previous import of the type `A` here\n+   |\n+   = note: `A` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | use foo::{A, B as OtherA};\n+   |              ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0252`."}, {"sha": "5230cadf604304ee6ddfa4401061add0af9c0e52", "filename": "src/test/ui/issues/issue-45829/rename-extern-vs-use.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.rs?ref=ad4cea408df885f4c5b026aaafa0beed4e365c61", "patch": "@@ -10,7 +10,11 @@\n \n // aux-build:issue_45829_b.rs\n \n-use std;\n-extern crate issue_45829_b as std;\n+mod foo {\n+    pub mod bar {}\n+}\n+\n+use foo::bar;\n+extern crate issue_45829_b as bar;\n \n fn main() {}"}, {"sha": "6a513e90d95b98e6bcaf289ec69ac27d40c2e029", "filename": "src/test/ui/issues/issue-45829/rename-extern-vs-use.stderr", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.stderr?ref=ad4cea408df885f4c5b026aaafa0beed4e365c61", "patch": "@@ -1,27 +1,17 @@\n-error[E0259]: the name `std` is defined multiple times\n-  --> $DIR/rename-extern-vs-use.rs:14:1\n+error[E0254]: the name `bar` is defined multiple times\n+  --> $DIR/rename-extern-vs-use.rs:18:1\n    |\n-LL | extern crate issue_45829_b as std;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | `std` reimported here\n-   | You can use `as` to change the binding name of the import\n+LL | use foo::bar;\n+   |     -------- previous import of the module `bar` here\n+LL | extern crate issue_45829_b as bar;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `bar` reimported here\n    |\n-   = note: `std` must be defined only once in the type namespace of this module\n-\n-error[E0254]: the name `std` is defined multiple times\n-  --> $DIR/rename-extern-vs-use.rs:13:5\n-   |\n-LL | use std;\n-   |     ^^^ `std` reimported here\n+   = note: `bar` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n    |\n-   = note: `std` must be defined only once in the type namespace of this module\n-help: You can use `as` to change the binding name of the import\n+LL | extern crate issue_45829_b as other_bar;\n    |\n-LL | use std as other_std;\n-   |     ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0254, E0259.\n-For more information about an error, try `rustc --explain E0254`.\n+For more information about this error, try `rustc --explain E0254`."}, {"sha": "ab77e592b4a99dbad2bb0121cfad34d197a23425", "filename": "src/test/ui/issues/issue-45829/rename-extern.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern.stderr?ref=ad4cea408df885f4c5b026aaafa0beed4e365c61", "patch": "@@ -4,12 +4,13 @@ error[E0259]: the name `issue_45829_a` is defined multiple times\n LL | extern crate issue_45829_a;\n    | --------------------------- previous import of the extern crate `issue_45829_a` here\n LL | extern crate issue_45829_b as issue_45829_a;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | `issue_45829_a` reimported here\n-   | You can use `as` to change the binding name of the import\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `issue_45829_a` reimported here\n    |\n    = note: `issue_45829_a` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | extern crate issue_45829_b as other_issue_45829_a;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1395fbeea3b31d8951e3de3f88f6765298de8f72", "filename": "src/test/ui/issues/issue-45829/rename-use-vs-extern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-vs-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-vs-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-vs-extern.stderr?ref=ad4cea408df885f4c5b026aaafa0beed4e365c61", "patch": "@@ -7,7 +7,7 @@ LL | use std as issue_45829_b;\n    |     ^^^^^^^^^^^^^^^^^^^^ `issue_45829_b` reimported here\n    |\n    = note: `issue_45829_b` must be defined only once in the type namespace of this module\n-help: You can use `as` to change the binding name of the import\n+help: you can use `as` to change the binding name of the import\n    |\n LL | use std as other_issue_45829_b;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2bc45f0a62d7463f5a345d4d6d374a2033908303", "filename": "src/test/ui/issues/issue-45829/rename-with-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-with-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-with-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-with-path.stderr?ref=ad4cea408df885f4c5b026aaafa0beed4e365c61", "patch": "@@ -7,7 +7,7 @@ LL | use std::{collections::HashMap as A, sync::Arc as A};\n    |           previous import of the type `A` here\n    |\n    = note: `A` must be defined only once in the type namespace of this module\n-help: You can use `as` to change the binding name of the import\n+help: you can use `as` to change the binding name of the import\n    |\n LL | use std::{collections::HashMap as A, sync::Arc as OtherA};\n    |                                      ^^^^^^^^^^^^^^^^^^^"}, {"sha": "ce13b457490425f267bcfa3482fcf6a4f790d9b4", "filename": "src/test/ui/issues/issue-45829/rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4cea408df885f4c5b026aaafa0beed4e365c61/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename.stderr?ref=ad4cea408df885f4c5b026aaafa0beed4e365c61", "patch": "@@ -7,7 +7,7 @@ LL | use std as core;\n    |     ^^^^^^^^^^^ `core` reimported here\n    |\n    = note: `core` must be defined only once in the type namespace of this module\n-help: You can use `as` to change the binding name of the import\n+help: you can use `as` to change the binding name of the import\n    |\n LL | use std as other_core;\n    |     ^^^^^^^^^^^^^^^^^"}]}