{"sha": "d4497e481e99af8806f78deaeb60c67cb88eb5c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDk3ZTQ4MWU5OWFmODgwNmY3OGRlYWViNjBjNjdjYjg4ZWI1YzU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-23T02:23:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-23T02:23:10Z"}, "message": "Extremely broken hacked-up incorrect attempt at 'ret'.", "tree": {"sha": "756702d2918c6effec5f2473788e91146ea4b550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/756702d2918c6effec5f2473788e91146ea4b550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4497e481e99af8806f78deaeb60c67cb88eb5c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4497e481e99af8806f78deaeb60c67cb88eb5c5", "html_url": "https://github.com/rust-lang/rust/commit/d4497e481e99af8806f78deaeb60c67cb88eb5c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4497e481e99af8806f78deaeb60c67cb88eb5c5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0867e0ccfdbdb910a2aeebe283e5734cadeb688", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0867e0ccfdbdb910a2aeebe283e5734cadeb688", "html_url": "https://github.com/rust-lang/rust/commit/a0867e0ccfdbdb910a2aeebe283e5734cadeb688"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "ceb686094c6c543a70dc05ded737285e9d4e13de", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4497e481e99af8806f78deaeb60c67cb88eb5c5/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4497e481e99af8806f78deaeb60c67cb88eb5c5/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=d4497e481e99af8806f78deaeb60c67cb88eb5c5", "patch": "@@ -705,6 +705,22 @@ io fn parse_stmt(parser p) -> @ast.stmt {\n             }\n         }\n \n+        case (token.RET) {\n+            p.bump();\n+            alt (p.peek()) {\n+                case (token.SEMI) {\n+                    p.bump();\n+                    ret @spanned(lo, p.get_span(),\n+                                 ast.stmt_ret(none[@ast.expr]));\n+                }\n+                case (_) {\n+                    auto e = parse_expr(p);\n+                    expect(p, token.SEMI);\n+                    ret @spanned(lo, e.span,\n+                                 ast.stmt_ret(some[@ast.expr](e)));\n+                }\n+            }\n+        }\n \n         case (token.LET) {\n             auto decl = parse_let(p);"}, {"sha": "b80ddbea0a8ac11bfffe966ca2003257dd8d0d3b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4497e481e99af8806f78deaeb60c67cb88eb5c5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4497e481e99af8806f78deaeb60c67cb88eb5c5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d4497e481e99af8806f78deaeb60c67cb88eb5c5", "patch": "@@ -811,6 +811,22 @@ fn trans_check_expr(@block_ctxt cx, &ast.expr e) -> result {\n     ret res(next_cx, C_nil());\n }\n \n+fn trans_ret(@block_ctxt cx, &option[@ast.expr] e) -> result {\n+    auto r = res(cx, C_nil());\n+    alt (e) {\n+        case (some[@ast.expr](?x)) {\n+            r = trans_expr(cx, *x);\n+            r.bcx.build.Store(r.val, cx.fcx.lloutptr);\n+        }\n+    }\n+    // FIXME: if we actually ret here, the block structure falls apart;\n+    // need to do something more-clever with terminators and block cleanup.\n+    // Mean time 'ret' means 'copy result to output slot and keep going'.\n+\n+    // r.val = r.bcx.build.RetVoid();\n+    ret r;\n+}\n+\n fn trans_stmt(@block_ctxt cx, &ast.stmt s) -> result {\n     auto sub = res(cx, C_nil());\n     alt (s.node) {\n@@ -822,6 +838,10 @@ fn trans_stmt(@block_ctxt cx, &ast.stmt s) -> result {\n             sub.bcx = trans_check_expr(cx, *a).bcx;\n         }\n \n+        case (ast.stmt_ret(?e)) {\n+            sub.bcx = trans_ret(cx, e).bcx;\n+        }\n+\n         case (ast.stmt_expr(?e)) {\n             sub.bcx = trans_expr(cx, *e).bcx;\n         }"}]}