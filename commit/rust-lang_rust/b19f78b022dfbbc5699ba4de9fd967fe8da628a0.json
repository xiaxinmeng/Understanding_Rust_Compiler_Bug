{"sha": "b19f78b022dfbbc5699ba4de9fd967fe8da628a0", "node_id": "C_kwDOAAsO6NoAKGIxOWY3OGIwMjJkZmJiYzU2OTliYTRkZTlmZDk2N2ZlOGRhNjI4YTA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-22T15:13:49Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-22T15:13:49Z"}, "message": "Remove auto-config patching from the VSCode client", "tree": {"sha": "96ea562f316ab9757b0f7830609d9c93737123ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96ea562f316ab9757b0f7830609d9c93737123ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b19f78b022dfbbc5699ba4de9fd967fe8da628a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b19f78b022dfbbc5699ba4de9fd967fe8da628a0", "html_url": "https://github.com/rust-lang/rust/commit/b19f78b022dfbbc5699ba4de9fd967fe8da628a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b19f78b022dfbbc5699ba4de9fd967fe8da628a0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dea163970a94f05d56e482c423df1cd379c8735c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dea163970a94f05d56e482c423df1cd379c8735c", "html_url": "https://github.com/rust-lang/rust/commit/dea163970a94f05d56e482c423df1cd379c8735c"}], "stats": {"total": 100, "additions": 0, "deletions": 100}, "files": [{"sha": "719d2734643f4ae09682e971a25b09bf4221f296", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b19f78b022dfbbc5699ba4de9fd967fe8da628a0/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b19f78b022dfbbc5699ba4de9fd967fe8da628a0/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=b19f78b022dfbbc5699ba4de9fd967fe8da628a0", "patch": "@@ -5,7 +5,6 @@ import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n import { assert } from \"./util\";\n import { WorkspaceEdit } from \"vscode\";\n import { Workspace } from \"./ctx\";\n-import { updateConfig } from \"./config\";\n import { substituteVariablesInEnv } from \"./config\";\n import { outputChannel, traceOutputChannel } from \"./main\";\n import { randomUUID } from \"crypto\";\n@@ -86,11 +85,6 @@ export async function createClient(\n \n     let initializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n \n-    // Update outdated user configs\n-    await updateConfig(initializationOptions).catch((err) => {\n-        void vscode.window.showErrorMessage(`Failed updating old config keys: ${err.message}`);\n-    });\n-\n     if (workspace.kind === \"Detached Files\") {\n         initializationOptions = {\n             detachedFiles: workspace.files.map((file) => file.uri.fsPath),"}, {"sha": "7e6d4ac297040800971895f5f3013df20964bfb7", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/b19f78b022dfbbc5699ba4de9fd967fe8da628a0/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b19f78b022dfbbc5699ba4de9fd967fe8da628a0/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=b19f78b022dfbbc5699ba4de9fd967fe8da628a0", "patch": "@@ -175,100 +175,6 @@ export class Config {\n     }\n }\n \n-export async function updateConfig(config: vscode.WorkspaceConfiguration) {\n-    const renames = [\n-        [\"assist.allowMergingIntoGlobImports\", \"imports.merge.glob\"],\n-        [\"assist.exprFillDefault\", \"assist.expressionFillDefault\"],\n-        [\"assist.importEnforceGranularity\", \"imports.granularity.enforce\"],\n-        [\"assist.importGranularity\", \"imports.granularity.group\"],\n-        [\"assist.importMergeBehavior\", \"imports.granularity.group\"],\n-        [\"assist.importMergeBehaviour\", \"imports.granularity.group\"],\n-        [\"assist.importGroup\", \"imports.group.enable\"],\n-        [\"assist.importPrefix\", \"imports.prefix\"],\n-        [\"primeCaches.enable\", \"cachePriming.enable\"],\n-        [\"cache.warmup\", \"cachePriming.enable\"],\n-        [\"cargo.loadOutDirsFromCheck\", \"cargo.buildScripts.enable\"],\n-        [\"cargo.runBuildScripts\", \"cargo.buildScripts.enable\"],\n-        [\"cargo.runBuildScriptsCommand\", \"cargo.buildScripts.overrideCommand\"],\n-        [\"cargo.useRustcWrapperForBuildScripts\", \"cargo.buildScripts.useRustcWrapper\"],\n-        [\"completion.snippets\", \"completion.snippets.custom\"],\n-        [\"diagnostics.enableExperimental\", \"diagnostics.experimental.enable\"],\n-        [\"experimental.procAttrMacros\", \"procMacro.attributes.enable\"],\n-        [\"highlighting.strings\", \"semanticHighlighting.strings.enable\"],\n-        [\"highlightRelated.breakPoints\", \"highlightRelated.breakPoints.enable\"],\n-        [\"highlightRelated.exitPoints\", \"highlightRelated.exitPoints.enable\"],\n-        [\"highlightRelated.yieldPoints\", \"highlightRelated.yieldPoints.enable\"],\n-        [\"highlightRelated.references\", \"highlightRelated.references.enable\"],\n-        [\"hover.documentation\", \"hover.documentation.enable\"],\n-        [\"hover.linksInHover\", \"hover.links.enable\"],\n-        [\"hoverActions.linksInHover\", \"hover.links.enable\"],\n-        [\"hoverActions.debug\", \"hover.actions.debug.enable\"],\n-        [\"hoverActions.enable\", \"hover.actions.enable.enable\"],\n-        [\"hoverActions.gotoTypeDef\", \"hover.actions.gotoTypeDef.enable\"],\n-        [\"hoverActions.implementations\", \"hover.actions.implementations.enable\"],\n-        [\"hoverActions.references\", \"hover.actions.references.enable\"],\n-        [\"hoverActions.run\", \"hover.actions.run.enable\"],\n-        [\"inlayHints.chainingHints\", \"inlayHints.chainingHints.enable\"],\n-        [\"inlayHints.closureReturnTypeHints\", \"inlayHints.closureReturnTypeHints.enable\"],\n-        [\"inlayHints.hideNamedConstructorHints\", \"inlayHints.typeHints.hideNamedConstructor\"],\n-        [\"inlayHints.parameterHints\", \"inlayHints.parameterHints.enable\"],\n-        [\"inlayHints.reborrowHints\", \"inlayHints.reborrowHints.enable\"],\n-        [\"inlayHints.typeHints\", \"inlayHints.typeHints.enable\"],\n-        [\"lruCapacity\", \"lru.capacity\"],\n-        [\"runnables.cargoExtraArgs\", \"runnables.extraArgs\"],\n-        [\"runnables.overrideCargo\", \"runnables.command\"],\n-        [\"rustcSource\", \"rustc.source\"],\n-        [\"rustfmt.enableRangeFormatting\", \"rustfmt.rangeFormatting.enable\"],\n-    ];\n-\n-    for (const [oldKey, newKey] of renames) {\n-        const inspect = config.inspect(oldKey);\n-        if (inspect !== undefined) {\n-            const valMatrix = [\n-                {\n-                    val: inspect.globalValue,\n-                    langVal: inspect.globalLanguageValue,\n-                    target: vscode.ConfigurationTarget.Global,\n-                },\n-                {\n-                    val: inspect.workspaceFolderValue,\n-                    langVal: inspect.workspaceFolderLanguageValue,\n-                    target: vscode.ConfigurationTarget.WorkspaceFolder,\n-                },\n-                {\n-                    val: inspect.workspaceValue,\n-                    langVal: inspect.workspaceLanguageValue,\n-                    target: vscode.ConfigurationTarget.Workspace,\n-                },\n-            ];\n-            for (const { val, langVal, target } of valMatrix) {\n-                const patch = (val: unknown) => {\n-                    // some of the updates we do only append \"enable\" or \"custom\"\n-                    // that means on the next run we would find these again, but as objects with\n-                    // these properties causing us to destroy the config\n-                    // so filter those already updated ones out\n-                    return (\n-                        val !== undefined &&\n-                        !(\n-                            typeof val === \"object\" &&\n-                            val !== null &&\n-                            (oldKey === \"completion.snippets\" || !val.hasOwnProperty(\"custom\"))\n-                        )\n-                    );\n-                };\n-                if (patch(val)) {\n-                    await config.update(newKey, val, target, false);\n-                    await config.update(oldKey, undefined, target, false);\n-                }\n-                if (patch(langVal)) {\n-                    await config.update(newKey, langVal, target, true);\n-                    await config.update(oldKey, undefined, target, true);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n export function substituteVariablesInEnv(env: Env): Env {\n     const missingDeps = new Set<string>();\n     // vscode uses `env:ENV_NAME` for env vars resolution, and it's easier"}]}