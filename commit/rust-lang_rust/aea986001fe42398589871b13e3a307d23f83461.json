{"sha": "aea986001fe42398589871b13e3a307d23f83461", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTk4NjAwMWZlNDIzOTg1ODk4NzFiMTNlM2EzMDdkMjNmODM0NjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-17T18:10:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-17T18:10:40Z"}, "message": "marginally better names", "tree": {"sha": "065fa8ae66ce3e5e438677e96d8b1227042a3bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065fa8ae66ce3e5e438677e96d8b1227042a3bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea986001fe42398589871b13e3a307d23f83461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea986001fe42398589871b13e3a307d23f83461", "html_url": "https://github.com/rust-lang/rust/commit/aea986001fe42398589871b13e3a307d23f83461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea986001fe42398589871b13e3a307d23f83461/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb393e2d11fde1307e92789669ca7230457d86cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb393e2d11fde1307e92789669ca7230457d86cd", "html_url": "https://github.com/rust-lang/rust/commit/bb393e2d11fde1307e92789669ca7230457d86cd"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "7f555a3c009cc4bc156e2155c6ca443888b023ed", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aea986001fe42398589871b13e3a307d23f83461/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea986001fe42398589871b13e3a307d23f83461/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=aea986001fe42398589871b13e3a307d23f83461", "patch": "@@ -112,7 +112,7 @@ impl Vfs {\n             } else {\n                 let text = fs::read_to_string(path).unwrap_or_default();\n                 let text = Arc::new(text);\n-                let file = self.add_file(root, rel_path.clone(), Arc::clone(&text), false);\n+                let file = self.raw_add_file(root, rel_path.clone(), Arc::clone(&text), false);\n                 let change = VfsChange::AddFile { file, text, root, path: rel_path };\n                 self.pending_changes.push(change);\n                 Some(file)\n@@ -124,17 +124,17 @@ impl Vfs {\n     pub fn add_file_overlay(&mut self, path: &Path, text: String) -> Option<VfsFile> {\n         let (root, rel_path, file) = self.find_root(path)?;\n         if let Some(file) = file {\n-            self.do_change_file(file, text, true);\n+            self.change_file_event(file, text, true);\n             Some(file)\n         } else {\n-            self.do_add_file(root, rel_path, text, true)\n+            self.add_file_event(root, rel_path, text, true)\n         }\n     }\n \n     pub fn change_file_overlay(&mut self, path: &Path, new_text: String) {\n         if let Some((_root, _path, file)) = self.find_root(path) {\n             let file = file.expect(\"can't change a file which wasn't added\");\n-            self.do_change_file(file, new_text, true);\n+            self.change_file_event(file, new_text, true);\n         }\n     }\n \n@@ -143,9 +143,9 @@ impl Vfs {\n         let file = file.expect(\"can't remove a file which wasn't added\");\n         let full_path = rel_path.to_path(&self.roots.path(root));\n         if let Ok(text) = fs::read_to_string(&full_path) {\n-            self.do_change_file(file, text, false);\n+            self.change_file_event(file, text, false);\n         } else {\n-            self.do_remove_file(root, rel_path, file);\n+            self.remove_file_event(root, rel_path, file);\n         }\n         Some(file)\n     }\n@@ -175,7 +175,7 @@ impl Vfs {\n                         continue;\n                     }\n                     let text = Arc::new(text);\n-                    let file = self.add_file(root, path.clone(), Arc::clone(&text), false);\n+                    let file = self.raw_add_file(root, path.clone(), Arc::clone(&text), false);\n                     cur_files.push((file, path, text));\n                 }\n \n@@ -189,45 +189,50 @@ impl Vfs {\n                 }\n                 match (existing_file, text) {\n                     (Some(file), None) => {\n-                        self.do_remove_file(root, path, file);\n+                        self.remove_file_event(root, path, file);\n                     }\n                     (None, Some(text)) => {\n-                        self.do_add_file(root, path, text, false);\n+                        self.add_file_event(root, path, text, false);\n                     }\n                     (Some(file), Some(text)) => {\n-                        self.do_change_file(file, text, false);\n+                        self.change_file_event(file, text, false);\n                     }\n                     (None, None) => (),\n                 }\n             }\n         }\n     }\n \n-    fn do_add_file(\n+    // *_event calls change the state of VFS and push a change onto pending\n+    // changes array.\n+\n+    fn add_file_event(\n         &mut self,\n         root: VfsRoot,\n         path: RelativePathBuf,\n         text: String,\n         is_overlay: bool,\n     ) -> Option<VfsFile> {\n         let text = Arc::new(text);\n-        let file = self.add_file(root, path.clone(), text.clone(), is_overlay);\n+        let file = self.raw_add_file(root, path.clone(), text.clone(), is_overlay);\n         self.pending_changes.push(VfsChange::AddFile { file, root, path, text });\n         Some(file)\n     }\n \n-    fn do_change_file(&mut self, file: VfsFile, text: String, is_overlay: bool) {\n+    fn change_file_event(&mut self, file: VfsFile, text: String, is_overlay: bool) {\n         let text = Arc::new(text);\n-        self.change_file(file, text.clone(), is_overlay);\n+        self.raw_change_file(file, text.clone(), is_overlay);\n         self.pending_changes.push(VfsChange::ChangeFile { file, text });\n     }\n \n-    fn do_remove_file(&mut self, root: VfsRoot, path: RelativePathBuf, file: VfsFile) {\n-        self.remove_file(file);\n+    fn remove_file_event(&mut self, root: VfsRoot, path: RelativePathBuf, file: VfsFile) {\n+        self.raw_remove_file(file);\n         self.pending_changes.push(VfsChange::RemoveFile { root, path, file });\n     }\n \n-    fn add_file(\n+    // raw_* calls change the state of VFS, but **do not** emit events.\n+\n+    fn raw_add_file(\n         &mut self,\n         root: VfsRoot,\n         path: RelativePathBuf,\n@@ -240,13 +245,13 @@ impl Vfs {\n         file\n     }\n \n-    fn change_file(&mut self, file: VfsFile, new_text: Arc<String>, is_overlayed: bool) {\n+    fn raw_change_file(&mut self, file: VfsFile, new_text: Arc<String>, is_overlayed: bool) {\n         let mut file_data = &mut self.files[file];\n         file_data.text = new_text;\n         file_data.is_overlayed = is_overlayed;\n     }\n \n-    fn remove_file(&mut self, file: VfsFile) {\n+    fn raw_remove_file(&mut self, file: VfsFile) {\n         // FIXME: use arena with removal\n         self.files[file].text = Default::default();\n         self.files[file].path = Default::default();"}]}