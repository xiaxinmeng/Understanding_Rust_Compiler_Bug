{"sha": "d14ee8a4b1f41121d799c3f5b868d916ac0f24bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNGVlOGE0YjFmNDExMjFkNzk5YzNmNWI4NjhkOTE2YWMwZjI0YmQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-01-21T17:43:57Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-12T08:34:25Z"}, "message": "Add Clippy Test (bors) to GHA", "tree": {"sha": "8218fd5b43fdc70ca563c50bf1a9419eb5e0d39f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8218fd5b43fdc70ca563c50bf1a9419eb5e0d39f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d14ee8a4b1f41121d799c3f5b868d916ac0f24bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl5DuJEACgkQaTCGhp1Q\nZjceTQ//VQ2tFt4XJ3AKVm4hLtzXr+TbsG/gekRtNJlrbLSBHJ0x8I3NGmAmKqXB\ndxVtwoMw7unHd8D0DZDryA4sAZ648iWlRzqtM1bTQSmogps18SmQjiPLyNw+9JQB\nMsk3pV19DpUKdpf9+V6zZbFR9EL99fX+TgCQP5BqBQWnMw4WXacJrzJeaIIx48nb\nQXaK12zyZkFKlyH3fBSjbOTjTMdRSu6p0TU9s0GlWcMNNZp3tQbbcB/28pvki1u9\newFSRKGUtqYQjokV2qvbMsEe5K1xinIg6b6HwHE4WDrpJ0ufm2VfEbefcHt4QfSD\nBrupZQywcCe04coEdga0sr3Vr19ZICNlCj/hYDnSjtaIUX7VCaejUoVLfDvjqNFc\nu+KF6QAZx73b+Y/tqhdxWBXNLsw02u0vD9n5K9aaP20lRNUveXFaPFCS3l8vO47m\nszdLjCcGZHobfEASo2TUGiI8YlUXfL81IukvRuSQCgzLgLz1uzZrS5EFH3TL2cHE\nGdppRC2V0Ad2gGVwuS/fTI9dw65RK5F4sZ4+S4zHgqN/32ZXyEUMz7j5Sc3zc5zg\nlNVXcEmxzpII95CKksoVLy3vXc2zROiQ3geipu70C9KIsaFUqCRWAEgH7w71Qhcl\nkX3RzIaH0rgrC33Vn8ktkn4sIWjQrG58Jw4pEEo1V5SJPg6JlwM=\n=KyMz\n-----END PGP SIGNATURE-----", "payload": "tree 8218fd5b43fdc70ca563c50bf1a9419eb5e0d39f\nparent 757bbf7feb2e9ed1e4d8cc547390608654e8191e\nauthor flip1995 <hello@philkrones.com> 1579628637 +0100\ncommitter flip1995 <hello@philkrones.com> 1581496465 +0100\n\nAdd Clippy Test (bors) to GHA\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d14ee8a4b1f41121d799c3f5b868d916ac0f24bd", "html_url": "https://github.com/rust-lang/rust/commit/d14ee8a4b1f41121d799c3f5b868d916ac0f24bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d14ee8a4b1f41121d799c3f5b868d916ac0f24bd/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757bbf7feb2e9ed1e4d8cc547390608654e8191e", "url": "https://api.github.com/repos/rust-lang/rust/commits/757bbf7feb2e9ed1e4d8cc547390608654e8191e", "html_url": "https://github.com/rust-lang/rust/commit/757bbf7feb2e9ed1e4d8cc547390608654e8191e"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "6a6d58410f95f89c54adb3c1496c6e314dfc71ed", "filename": ".github/workflows/clippy_bors.yml", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/d14ee8a4b1f41121d799c3f5b868d916ac0f24bd/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d14ee8a4b1f41121d799c3f5b868d916ac0f24bd/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=d14ee8a4b1f41121d799c3f5b868d916ac0f24bd", "patch": "@@ -0,0 +1,146 @@\n+name: Clippy Test (bors)\n+\n+on:\n+  push:\n+    branches: [auto, try]\n+    # Don't run Clippy tests, when only textfiles were modified\n+    paths-ignore:\n+    - 'COPYRIGHT'\n+    - 'LICENSE-*'\n+    - '**.md'\n+    - '**.txt'\n+\n+env:\n+  RUST_BACKTRACE: 1\n+  CARGO_TARGET_DIR: '${{ github.workspace }}/target'\n+  GHA_CI: 1\n+\n+jobs:\n+  base:\n+    strategy:\n+      matrix:\n+        os: [ubuntu-latest, windows-latest, macos-latest]\n+        host: [x86_64-unknown-linux-gnu, i686-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-msvc]\n+        exclude:\n+        - os: ubuntu-latest\n+          host: x86_64-apple-darwin\n+        - os: ubuntu-latest\n+          host: x86_64-pc-windows-msvc\n+        - os: macos-latest\n+          host: x86_64-unknown-linux-gnu\n+        - os: macos-latest\n+          host: i686-unknown-linux-gnu\n+        - os: macos-latest\n+          host: x86_64-pc-windows-msvc\n+        - os: windows-latest\n+          host: x86_64-unknown-linux-gnu\n+        - os: windows-latest\n+          host: i686-unknown-linux-gnu\n+        - os: windows-latest\n+          host: x86_64-apple-darwin\n+\n+    runs-on: ${{ matrix.os }}\n+\n+    steps:\n+    - name: Install dependencies (Linux-i686)\n+      run: |\n+        sudo dpkg --add-architecture i386\n+        sudo apt-get update\n+        sudo apt-get install gcc-multilib libssl-dev:i386 libgit2-dev:i386\n+      if: matrix.host == 'i686-unknown-linux-gnu'\n+    - name: rust-toolchain\n+      uses: actions-rs/toolchain@v1.0.3\n+      with:\n+        toolchain: nightly\n+        target: ${{ matrix.host }}\n+        profile: minimal\n+    - name: Cache cargo dir\n+      uses: actions/cache@v1\n+      with:\n+        path: ~/.cargo\n+        key: ${{ runner.os }}-${{ matrix.host }}\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+    - name: Master Toolchain Setup\n+      run: bash setup-toolchain.sh\n+      env:\n+        HOST_TOOLCHAIN: ${{ matrix.host }}\n+      shell: bash\n+\n+    - name: Set LD_LIBRARY_PATH (Linux)\n+      if: runner.os == 'Linux'\n+      run: |\n+        SYSROOT=$(rustc --print sysroot)\n+        echo \"::set-env name=LD_LIBRARY_PATH::${SYSROOT}/lib${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}\"\n+    - name: Link rustc dylib (MacOS)\n+      if: runner.os == 'macOS'\n+      run: |\n+        SYSROOT=$(rustc --print sysroot)\n+        sudo mkdir -p /usr/local/lib\n+        sudo find \"${SYSROOT}/lib\" -maxdepth 1 -name '*dylib' -exec ln -s {} /usr/local/lib \\;\n+    - name: Set PATH (Windows)\n+      if: runner.os == 'Windows'\n+      run: |\n+        $sysroot = rustc --print sysroot\n+        $env:PATH += ';' + $sysroot + '\\bin'\n+        echo \"::set-env name=PATH::$env:PATH\"\n+    - name: Build\n+      run: cargo build --features deny-warnings\n+      shell: bash\n+    - name: Test\n+      run: cargo test --features deny-warnings\n+      shell: bash\n+    - name: Test clippy_lints\n+      run: cargo test --features deny-warnings\n+      shell: bash\n+      working-directory: clippy_lints\n+    - name: Test rustc_tools_util\n+      run: cargo test --features deny-warnings\n+      shell: bash\n+      working-directory: rustc_tools_util\n+    - name: Test clippy_dev\n+      run: cargo test --features deny-warnings\n+      shell: bash\n+      working-directory: clippy_dev\n+    - name: Test cargo-clippy\n+      run: ../target/debug/cargo-clippy\n+      shell: bash\n+      working-directory: clippy_workspace_tests\n+    - name: Test clippy-driver\n+      run: |\n+        (\n+          set -ex\n+          # Check sysroot handling\n+          sysroot=$(./target/debug/clippy-driver --print sysroot)\n+          test \"$sysroot\" = \"$(rustc --print sysroot)\"\n+\n+          if [[ ${{ runner.os }} == \"Windows\" ]]; then\n+            desired_sysroot=C:/tmp\n+          else\n+            desired_sysroot=/tmp\n+          fi\n+          sysroot=$(./target/debug/clippy-driver --sysroot $desired_sysroot --print sysroot)\n+          test \"$sysroot\" = $desired_sysroot\n+\n+          sysroot=$(SYSROOT=$desired_sysroot ./target/debug/clippy-driver --print sysroot)\n+          test \"$sysroot\" = $desired_sysroot\n+\n+          # Make sure this isn't set - clippy-driver should cope without it\n+          unset CARGO_MANIFEST_DIR\n+\n+          # Run a lint and make sure it produces the expected output. It's also expected to exit with code 1\n+          # FIXME: How to match the clippy invocation in compile-test.rs?\n+          ./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/cstring.rs 2> cstring.stderr && exit 1\n+          sed -e 's,tests/ui,$DIR,' -e '/= help/d' cstring.stderr > normalized.stderr\n+          diff normalized.stderr tests/ui/cstring.stderr\n+\n+          # TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR\n+        )\n+      shell: bash\n+\n+    - name: Run cargo-cache --autoclean\n+      run: |\n+        cargo install cargo-cache --debug\n+        /usr/bin/find ~/.cargo/bin ! -type d -exec strip {} \\;\n+        cargo cache --autoclean\n+      shell: bash"}]}