{"sha": "e9801294a1e24ec8812b8bb827a5d6df5f9078a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ODAxMjk0YTFlMjRlYzg4MTJiOGJiODI3YTVkNmRmNWY5MDc4YTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-24T17:07:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-24T17:07:04Z"}, "message": "Auto merge of #28634 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #28616, #28617, #28618, #28619, #28620, #28622\n- Failed merges: #28621", "tree": {"sha": "00dde2282ac3365a44499862d3c7fdbd52874308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00dde2282ac3365a44499862d3c7fdbd52874308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9801294a1e24ec8812b8bb827a5d6df5f9078a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9801294a1e24ec8812b8bb827a5d6df5f9078a9", "html_url": "https://github.com/rust-lang/rust/commit/e9801294a1e24ec8812b8bb827a5d6df5f9078a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9801294a1e24ec8812b8bb827a5d6df5f9078a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "html_url": "https://github.com/rust-lang/rust/commit/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4"}, {"sha": "c3ca1820828f3ed6620b45b0cc2cc404e322a8ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ca1820828f3ed6620b45b0cc2cc404e322a8ce", "html_url": "https://github.com/rust-lang/rust/commit/c3ca1820828f3ed6620b45b0cc2cc404e322a8ce"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "7bfe8b62e8a5dc1070a8105a91de41e05c062ad2", "filename": "src/doc/grammar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9801294a1e24ec8812b8bb827a5d6df5f9078a9/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9801294a1e24ec8812b8bb827a5d6df5f9078a9/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=e9801294a1e24ec8812b8bb827a5d6df5f9078a9", "patch": "@@ -9,7 +9,7 @@ provides only one kind of material:\n \n This document does not serve as an introduction to the language. Background\n familiarity with the language is assumed. A separate [guide] is available to\n-help acquire such background familiarity.\n+help acquire such background.\n \n This document also does not serve as a reference to the [standard] library\n included in the language distribution. Those libraries are documented"}, {"sha": "cd24e33a232d895468456dbeefbb951dd4d7462a", "filename": "src/doc/reference.md", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e9801294a1e24ec8812b8bb827a5d6df5f9078a9/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9801294a1e24ec8812b8bb827a5d6df5f9078a9/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=e9801294a1e24ec8812b8bb827a5d6df5f9078a9", "patch": "@@ -674,7 +674,7 @@ There are several kinds of item:\n * [modules](#modules)\n * [functions](#functions)\n * [type definitions](grammar.html#type-definitions)\n-* [structures](#structures)\n+* [structs](#structs)\n * [enumerations](#enumerations)\n * [constant items](#constant-items)\n * [static items](#static-items)\n@@ -900,9 +900,10 @@ fn main() {}\n \n ### Functions\n \n-A _function item_ defines a sequence of [statements](#statements) and an\n-optional final [expression](#expressions), along with a name and a set of\n-parameters. Functions are declared with the keyword `fn`. Functions declare a\n+A _function item_ defines a sequence of [statements](#statements) and a\n+final [expression](#expressions), along with a name and a set of\n+parameters. Other than a name, all these are optional.\n+Functions are declared with the keyword `fn`. Functions may declare a\n set of *input* [*variables*](#variables) as parameters, through which the caller\n passes arguments into the function, and the *output* [*type*](#types)\n of the value the function will return to its caller on completion.\n@@ -921,7 +922,7 @@ An example of a function:\n \n ```\n fn add(x: i32, y: i32) -> i32 {\n-    return x + y;\n+    x + y\n }\n ```\n \n@@ -1155,7 +1156,7 @@ type Point = (u8, u8);\n let p: Point = (41, 68);\n ```\n \n-### Structures\n+### Structs\n \n A _structure_ is a nominal [structure type](#structure-types) defined with the\n keyword `struct`.\n@@ -2614,21 +2615,21 @@ comma:\n ### Structure expressions\n \n There are several forms of structure expressions. A _structure expression_\n-consists of the [path](#paths) of a [structure item](#structures), followed by\n+consists of the [path](#paths) of a [structure item](#structs), followed by\n a brace-enclosed list of one or more comma-separated name-value pairs,\n providing the field values of a new instance of the structure. A field name\n can be any identifier, and is separated from its value expression by a colon.\n The location denoted by a structure field is mutable if and only if the\n enclosing structure is mutable.\n \n A _tuple structure expression_ consists of the [path](#paths) of a [structure\n-item](#structures), followed by a parenthesized list of one or more\n+item](#structs), followed by a parenthesized list of one or more\n comma-separated expressions (in other words, the path of a structure item\n followed by a tuple expression). The structure item must be a tuple structure\n item.\n \n A _unit-like structure expression_ consists only of the [path](#paths) of a\n-[structure item](#structures).\n+[structure item](#structs).\n \n The following are examples of structure expressions:\n \n@@ -3145,7 +3146,7 @@ if` condition is evaluated. If all `if` and `else if` conditions evaluate to\n \n A `match` expression branches on a *pattern*. The exact form of matching that\n occurs depends on the pattern. Patterns consist of some combination of\n-literals, destructured arrays or enum constructors, structures and tuples,\n+literals, destructured arrays or enum constructors, structs and tuples,\n variable binding specifications, wildcards (`..`), and placeholders (`_`). A\n `match` expression has a *head expression*, which is the value to compare to\n the patterns. The type of the patterns must equal the type of the head\n@@ -3469,7 +3470,7 @@ named reference to an [`enum` item](#enumerations).\n ### Recursive types\n \n Nominal types &mdash; [enumerations](#enumerated-types) and\n-[structures](#structure-types) &mdash; may be recursive. That is, each `enum`\n+[structs](#structure-types) &mdash; may be recursive. That is, each `enum`\n constructor or `struct` field may refer, directly or indirectly, to the\n enclosing `enum` or `struct` type itself. Such recursion has restrictions:\n \n@@ -3497,7 +3498,7 @@ let a: List<i32> = List::Cons(7, Box::new(List::Cons(13, Box::new(List::Nil))));\n ### Pointer types\n \n All pointers in Rust are explicit first-class values. They can be copied,\n-stored into data structures, and returned from functions. There are two\n+stored into data structs, and returned from functions. There are two\n varieties of pointer in Rust:\n \n * References (`&`)\n@@ -3897,7 +3898,7 @@ references to boxes are dropped.\n ### Variables\n \n A _variable_ is a component of a stack frame, either a named function parameter,\n-an anonymous [temporary](#lvalues,-rvalues-and-temporaries), or a named local\n+an anonymous [temporary](#lvalues-rvalues-and-temporaries), or a named local\n variable.\n \n A _local variable_ (or *stack-local* allocation) holds a value directly,\n@@ -4036,10 +4037,6 @@ In general, `--crate-type=bin` or `--crate-type=lib` should be sufficient for\n all compilation needs, and the other options are just available if more\n fine-grained control is desired over the output format of a Rust crate.\n \n-# Appendix: Rationales and design trade-offs\n-\n-*TODO*.\n-\n # Appendix: Influences\n \n Rust is not a particularly original language, with design elements coming from"}]}