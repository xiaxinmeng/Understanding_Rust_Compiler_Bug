{"sha": "bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMWVjZWU1YjZkOTZhOGIwNDVhNmY0NGM4NWQ3Mzg0MjliM2Q2YzQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-13T23:05:04Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T21:50:16Z"}, "message": "Simplify `force_allocation_maybe_sized`", "tree": {"sha": "54858116448bfdd3b1407d7b742d2bfc834b22f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54858116448bfdd3b1407d7b742d2bfc834b22f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4", "html_url": "https://github.com/rust-lang/rust/commit/bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5b5258d7486ee99fa52f21cbd514dce80c03466", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b5258d7486ee99fa52f21cbd514dce80c03466", "html_url": "https://github.com/rust-lang/rust/commit/b5b5258d7486ee99fa52f21cbd514dce80c03466"}], "stats": {"total": 19, "additions": 4, "deletions": 15}, "files": [{"sha": "5ba9dcd3aa5c8484c9ce7e4e3c329524733919cc", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4", "patch": "@@ -118,7 +118,7 @@ pub struct LocalState<'tcx, Tag = (), Id = AllocId> {\n }\n \n /// Current value of a local variable\n-#[derive(Clone, PartialEq, Eq, Debug, HashStable)] // Miri debug-prints these\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, HashStable)] // Miri debug-prints these\n pub enum LocalValue<Tag = (), Id = AllocId> {\n     /// This local is not currently alive, and cannot be used at all.\n     Dead,"}, {"sha": "c46075699331f184d9c69820f8377856e95a3d71", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=bb1ecee5b6d96a8b045a6f44c85d738429b3d6c4", "patch": "@@ -974,31 +974,20 @@ where\n         let (mplace, size) = match place.place {\n             Place::Local { frame, local } => {\n                 match self.stack[frame].locals[local].access_mut()? {\n-                    Ok(local_val) => {\n+                    Ok(&mut local_val) => {\n                         // We need to make an allocation.\n-                        // FIXME: Consider not doing anything for a ZST, and just returning\n-                        // a fake pointer?  Are we even called for ZST?\n-\n-                        // We cannot hold on to the reference `local_val` while allocating,\n-                        // but we can hold on to the value in there.\n-                        let old_val =\n-                            if let LocalValue::Live(Operand::Immediate(value)) = *local_val {\n-                                Some(value)\n-                            } else {\n-                                None\n-                            };\n \n                         // We need the layout of the local.  We can NOT use the layout we got,\n                         // that might e.g., be an inner field of a struct with `Scalar` layout,\n                         // that has different alignment than the outer field.\n-                        // We also need to support unsized types, and hence cannot use `allocate`.\n                         let local_layout = self.layout_of_local(&self.stack[frame], local, None)?;\n+                        // We also need to support unsized types, and hence cannot use `allocate`.\n                         let (size, align) = self\n                             .size_and_align_of(meta, local_layout)?\n                             .expect(\"Cannot allocate for non-dyn-sized type\");\n                         let ptr = self.memory.allocate(size, align, MemoryKind::Stack);\n                         let mplace = MemPlace { ptr: ptr.into(), align, meta };\n-                        if let Some(value) = old_val {\n+                        if let LocalValue::Live(Operand::Immediate(value)) = local_val {\n                             // Preserve old value.\n                             // We don't have to validate as we can assume the local\n                             // was already valid for its type."}]}