{"sha": "7d72719efc25c6cdb8963c187e93df646ba65245", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNzI3MTllZmMyNWM2Y2RiODk2M2MxODdlOTNkZjY0NmJhNjUyNDU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-08T00:26:00Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-08T00:26:36Z"}, "message": "fix the `&mut _` patterns", "tree": {"sha": "470d75c976f3fea1873ac7f7720b8139e77d026a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/470d75c976f3fea1873ac7f7720b8139e77d026a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d72719efc25c6cdb8963c187e93df646ba65245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d72719efc25c6cdb8963c187e93df646ba65245", "html_url": "https://github.com/rust-lang/rust/commit/7d72719efc25c6cdb8963c187e93df646ba65245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d72719efc25c6cdb8963c187e93df646ba65245/comments", "author": null, "committer": null, "parents": [{"sha": "ed4bebda965bfbd6845aba52e0a6d622cd4a8d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4bebda965bfbd6845aba52e0a6d622cd4a8d07", "html_url": "https://github.com/rust-lang/rust/commit/ed4bebda965bfbd6845aba52e0a6d622cd4a8d07"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "2cff9b2cb92cb64eebb0786ee01a81dace05dcf2", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -2030,7 +2030,7 @@ mod tests {\n         v.push(());\n         assert_eq!(v.iter_mut().count(), 4);\n \n-        for &() in v.iter_mut() {}\n+        for &mut () in v.iter_mut() {}\n         unsafe { v.set_len(0); }\n         assert_eq!(v.iter_mut().count(), 0);\n     }"}, {"sha": "87d61358ed36438ca140211972169bda3d8b243d", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -2344,7 +2344,7 @@ impl<A, I, F> RandomAccessIterator for Inspect<A, I, F> where\n ///\n /// // This iterator will yield up to the last Fibonacci number before the max value of `u32`.\n /// // You can simply change `u32` to `u64` in this line if you want higher values than that.\n-/// let mut fibonacci = Unfold::new((Some(0u32), Some(1u32)), |&(ref mut x2, ref mut x1)| {\n+/// let mut fibonacci = Unfold::new((Some(0u32), Some(1u32)), |&mut (ref mut x2, ref mut x1)| {\n ///     // Attempt to get the next Fibonacci number\n ///     // `x1` will be `None` if previously overflowed.\n ///     let next = match (*x2, *x1) {"}, {"sha": "108cbadcc174da349d8dc7bf8d08f0932069b3d2", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -533,7 +533,7 @@ impl<T> Option<T> {\n     /// ```\n     /// let mut x = Some(4u);\n     /// match x.iter_mut().next() {\n-    ///     Some(&ref mut v) => *v = 42u,\n+    ///     Some(&mut ref mut v) => *v = 42u,\n     ///     None => {},\n     /// }\n     /// assert_eq!(x, Some(42));"}, {"sha": "7868ec67c8a3adfa915b3d90cd7a17c17f86f29b", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -383,8 +383,8 @@ impl<T, E> Result<T, E> {\n     /// ```\n     /// fn mutate(r: &mut Result<int, int>) {\n     ///     match r.as_mut() {\n-    ///         Ok(&ref mut v) => *v = 42,\n-    ///         Err(&ref mut e) => *e = 0,\n+    ///         Ok(&mut ref mut v) => *v = 42,\n+    ///         Err(&mut ref mut e) => *e = 0,\n     ///     }\n     /// }\n     ///\n@@ -529,7 +529,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     /// let mut x: Result<uint, &str> = Ok(7);\n     /// match x.iter_mut().next() {\n-    ///     Some(&ref mut x) => *x = 40,\n+    ///     Some(&mut ref mut x) => *x = 40,\n     ///     None => {},\n     /// }\n     /// assert_eq!(x, Ok(40));"}, {"sha": "e6a7170aceafb40ad57d559305f45f3c7b28fed4", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -101,12 +101,12 @@ fn any_downcast_mut() {\n     }\n \n     match a_r.downcast_mut::<uint>() {\n-        Some(&612) => {}\n+        Some(&mut 612) => {}\n         x => panic!(\"Unexpected value {:?}\", x)\n     }\n \n     match b_r.downcast_mut::<uint>() {\n-        Some(&413) => {}\n+        Some(&mut 413) => {}\n         x => panic!(\"Unexpected value {:?}\", x)\n     }\n }"}, {"sha": "7592fbc05b3383afcf52457473095e2cec1d1f27", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -350,8 +350,8 @@ impl<'a, 'ast> Iterator for NodesMatchingUII<'a, 'ast> {\n \n     fn next(&mut self) -> Option<ast::NodeId> {\n         match self {\n-            &NodesMatchingDirect(ref mut iter) => iter.next(),\n-            &NodesMatchingSuffix(ref mut iter) => iter.next(),\n+            &mut NodesMatchingDirect(ref mut iter) => iter.next(),\n+            &mut NodesMatchingSuffix(ref mut iter) => iter.next(),\n         }\n     }\n }"}, {"sha": "2b7f615dc1288c4f35614096258dfd926a51dbc1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -1709,7 +1709,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// ! gets replaced with (), unconstrained ints with i32, and unconstrained floats with f64.\n     pub fn default_type_parameters(&self) {\n         use middle::ty::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat, Neither};\n-        for (_, &ref ty) in self.inh.node_types.borrow_mut().iter_mut() {\n+        for (_, &mut ref ty) in self.inh.node_types.borrow_mut().iter_mut() {\n             let resolved = self.infcx().resolve_type_vars_if_possible(ty);\n             if self.infcx().type_var_diverges(resolved) {\n                 demand::eqtype(self, codemap::DUMMY_SP, *ty, ty::mk_nil(self.tcx()));"}, {"sha": "f4b20c7b74235613c9334d974a7636a183e89c16", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -338,7 +338,7 @@ impl<T: Send> Packet<T> {\n         // upgrade pending, then go through the whole recv rigamarole to update\n         // the internal state.\n         match self.queue.peek() {\n-            Some(&GoUp(..)) => {\n+            Some(&mut GoUp(..)) => {\n                 match self.recv() {\n                     Err(Upgraded(port)) => Err(port),\n                     _ => unreachable!(),\n@@ -367,7 +367,7 @@ impl<T: Send> Packet<T> {\n             Ok(()) => SelSuccess,\n             Err(token) => {\n                 let ret = match self.queue.peek() {\n-                    Some(&GoUp(..)) => {\n+                    Some(&mut GoUp(..)) => {\n                         match self.queue.pop() {\n                             Some(GoUp(port)) => SelUpgraded(token, port),\n                             _ => unreachable!(),\n@@ -457,7 +457,7 @@ impl<T: Send> Packet<T> {\n         // upgraded port.\n         if has_data {\n             match self.queue.peek() {\n-                Some(&GoUp(..)) => {\n+                Some(&mut GoUp(..)) => {\n                     match self.queue.pop() {\n                         Some(GoUp(port)) => Err(port),\n                         _ => unreachable!(),"}, {"sha": "e6f2979a3f8eceb66aeb28fa45b0a6a74d743793", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -90,7 +90,7 @@ impl<'a, T: Copy> Iterator for Values<'a, T> {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> {\n-        let &Values(ref mut items) = self;\n+        let &mut Values(ref mut items) = self;\n         items.next().map(|&x| x)\n     }\n }"}, {"sha": "0480c9d884ad001d84dabb6ae80f642c4adebb16", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -118,7 +118,7 @@ fn transform(piece: Vec<(int, int)> , all: bool) -> Vec<Vec<(int, int)>> {\n     // translating to (0, 0) as minimum coordinates.\n     for cur_piece in res.iter_mut() {\n         let (dy, dx) = *cur_piece.iter().min_by(|e| *e).unwrap();\n-        for &(ref mut y, ref mut x) in cur_piece.iter_mut() {\n+        for &mut (ref mut y, ref mut x) in cur_piece.iter_mut() {\n             *y -= dy; *x -= dx;\n         }\n     }"}, {"sha": "02ccf9c0e08e7af6fd4daa7a6b6b49a4d61933bc", "filename": "src/test/compile-fail/issue-15756.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -14,7 +14,7 @@ use std::slice::ChunksMut;\n fn dft_iter<'a, T>(arg1: Chunks<'a,T>, arg2: ChunksMut<'a,T>)\n {\n     for\n-    &something\n+    &mut something\n //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[T]`\n     in arg2\n     {"}, {"sha": "9f1d3d1fb391298559d99fc576f4b23b3304ea9a", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -13,7 +13,7 @@ fn main() {\n \n     // (separate lines to ensure the spans are accurate)\n \n-     let &_ // ~ ERROR expected `&mut isize`, found `&_`\n+     let &_ //~ ERROR expected `&mut isize`, found `&_`\n         = foo;\n     let &mut _ = foo;\n "}, {"sha": "54ac3cba636f24abc6ddbf28dc75bda565d6f754", "filename": "src/test/compile-fail/pattern-bindings-after-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Fcompile-fail%2Fpattern-bindings-after-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Fcompile-fail%2Fpattern-bindings-after-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-bindings-after-at.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -15,7 +15,7 @@ enum Option<T> {\n \n fn main() {\n     match &mut Some(1i) {\n-        ref mut z @ &Some(ref a) => {\n+        ref mut z @ &mut Some(ref a) => {\n         //~^ ERROR pattern bindings are not allowed after an `@`\n             **z = None;\n             println!(\"{}\", *a);"}, {"sha": "4c7b0680621784c290054a15cb16ff87928604a7", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -36,13 +36,13 @@ enum Foo {\n impl Drop for Foo {\n     fn drop(&mut self) {\n         match self {\n-            &Foo::SimpleVariant(ref mut sender) => {\n+            &mut Foo::SimpleVariant(ref mut sender) => {\n                 sender.send(Message::DestructorRan).unwrap();\n             }\n-            &Foo::NestedVariant(_, _, ref mut sender) => {\n+            &mut Foo::NestedVariant(_, _, ref mut sender) => {\n                 sender.send(Message::DestructorRan).unwrap();\n             }\n-            &Foo::FailingVariant { .. } => {\n+            &mut Foo::FailingVariant { .. } => {\n                 panic!(\"Failed\");\n             }\n         }"}, {"sha": "4246fced26c66e02ae9886405705458f2387f599", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d72719efc25c6cdb8963c187e93df646ba65245/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=7d72719efc25c6cdb8963c187e93df646ba65245", "patch": "@@ -36,7 +36,7 @@ impl Deref for X {\n \n impl DerefMut for X {\n     fn deref_mut(&mut self) -> &mut int {\n-        let &X(box ref mut x) = self;\n+        let &mut X(box ref mut x) = self;\n         x\n     }\n }"}]}