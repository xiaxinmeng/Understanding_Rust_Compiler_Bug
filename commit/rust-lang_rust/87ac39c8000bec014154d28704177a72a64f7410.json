{"sha": "87ac39c8000bec014154d28704177a72a64f7410", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YWMzOWM4MDAwYmVjMDE0MTU0ZDI4NzA0MTc3YTcyYTY0Zjc0MTA=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-02-20T23:34:12Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-02-21T00:12:11Z"}, "message": "Add a chapter on the test harness.", "tree": {"sha": "4b46036bb250464763f6bf53ac8cfbf1f72d3a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b46036bb250464763f6bf53ac8cfbf1f72d3a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87ac39c8000bec014154d28704177a72a64f7410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87ac39c8000bec014154d28704177a72a64f7410", "html_url": "https://github.com/rust-lang/rust/commit/87ac39c8000bec014154d28704177a72a64f7410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87ac39c8000bec014154d28704177a72a64f7410/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c23ab933ebc1f205c3b59f4ebc85d40f67d404", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c23ab933ebc1f205c3b59f4ebc85d40f67d404", "html_url": "https://github.com/rust-lang/rust/commit/e7c23ab933ebc1f205c3b59f4ebc85d40f67d404"}], "stats": {"total": 297, "additions": 288, "deletions": 9}, "files": [{"sha": "b7791b1b24d4573979761cd02626959a1d2feb80", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87ac39c8000bec014154d28704177a72a64f7410/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ac39c8000bec014154d28704177a72a64f7410/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=87ac39c8000bec014154d28704177a72a64f7410", "patch": "@@ -51,14 +51,8 @@ fn optgroups() -> getopts::Options {\n         .optflag(\"\", \"test\", \"Run tests and not benchmarks\")\n         .optflag(\"\", \"bench\", \"Run benchmarks instead of tests\")\n         .optflag(\"\", \"list\", \"List all tests and benchmarks\")\n-        .optflag(\"h\", \"help\", \"Display this message (longer with --help)\")\n-        .optopt(\n-            \"\",\n-            \"logfile\",\n-            \"Write logs to the specified file instead \\\n-             of stdout\",\n-            \"PATH\",\n-        )\n+        .optflag(\"h\", \"help\", \"Display this message\")\n+        .optopt(\"\", \"logfile\", \"Write logs to the specified file\", \"PATH\")\n         .optflag(\n             \"\",\n             \"nocapture\","}, {"sha": "af5834525fa791ca228892fd553a8847e95351a4", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87ac39c8000bec014154d28704177a72a64f7410/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/87ac39c8000bec014154d28704177a72a64f7410/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=87ac39c8000bec014154d28704177a72a64f7410", "patch": "@@ -11,6 +11,7 @@\n         - [Deny-by-default lints](lints/listing/deny-by-default.md)\n - [Codegen options](codegen-options/index.md)\n - [JSON Output](json.md)\n+- [Tests](tests/index.md)\n - [Platform Support](platform-support.md)\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)"}, {"sha": "7d3cad7988c8c717780565a5aa776784201cf5d8", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87ac39c8000bec014154d28704177a72a64f7410/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/87ac39c8000bec014154d28704177a72a64f7410/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=87ac39c8000bec014154d28704177a72a64f7410", "patch": "@@ -204,7 +204,8 @@ out a longer explanation of a given error.\n ## `--test`: build a test harness\n \n When compiling this crate, `rustc` will ignore your `main` function\n-and instead produce a test harness.\n+and instead produce a test harness. See the [Tests chapter](tests/index.md)\n+for more information about tests.\n \n <a id=\"option-target\"></a>\n ## `--target`: select a target triple to build"}, {"sha": "1f914da4fc55e3cf64c2aa92e303bbaeb00cb800", "filename": "src/doc/rustc/src/tests/index.md", "status": "added", "additions": 283, "deletions": 0, "changes": 283, "blob_url": "https://github.com/rust-lang/rust/blob/87ac39c8000bec014154d28704177a72a64f7410/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/87ac39c8000bec014154d28704177a72a64f7410/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md?ref=87ac39c8000bec014154d28704177a72a64f7410", "patch": "@@ -0,0 +1,283 @@\n+# Tests\n+\n+`rustc` has a built-in facility for building and running tests for a crate.\n+More information about writing and running tests may be found in the [Testing\n+Chapter] of the Rust Programming Language book.\n+\n+Tests are written as free functions with the [`#[test]`\n+attribute][attribute-test]. For example:\n+\n+```rust\n+#[test]\n+fn it_works() {\n+    assert_eq!(2 + 2, 4);\n+}\n+```\n+\n+Tests \"pass\" if they return without an error. They \"fail\" if they [panic], or\n+return a [`Result`] with an error.\n+\n+By passing the [`--test` option] to `rustc`, the compiler will build the crate\n+in a special mode to construct an executable that will run the tests in the\n+crate. The `--test` flag will make the following changes:\n+\n+* The crate will be built as a `bin` [crate type], forcing it to be an\n+  executable.\n+* Links the executable with [`libtest`], the test harness that is part of the\n+  standard library, which handles running the tests.\n+* Synthesizes a [`main` function] which will process command-line arguments\n+  and run the tests. If the crate already has a `main` function, it will be\n+  replaced.\n+* Enables the [`test` cfg option], which allows your code to use conditional\n+  compilation to detect if it is being built as a test.\n+* Enables building of functions annotated with the [`test`][attribute-test]\n+  and [`bench`](#benchmarks) attributes, which will be run by the test\n+  harness.\n+\n+After the executable is created, you can run it to execute the tests and\n+receive a report on what passes and fails. If you are using [Cargo] to manage\n+your project, it has a built-in [`cargo test`] command which handles all of\n+this automatically. An example of the output looks like this:\n+\n+```text\n+running 4 tests\n+test it_works ... ok\n+test check_valid_args ... ok\n+test invalid_characters ... ok\n+test walks_the_dog ... ok\n+\n+test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n+```\n+\n+> **Note**: Tests must be built with the [`unwind` panic\n+> strategy][panic-strategy]. This is because all tests run in the same\n+> process, and they are intended to catch panics, which is not possible with\n+> the `abort` strategy. See the unstable [`-Z panic-abort-tests`] option for\n+> experimental support of the `abort` strategy by spawning tests in separate\n+> processes.\n+\n+## Test attributes\n+\n+Tests are indicated using attributes on free functions. The following\n+attributes are used for testing, see the linked documentation for more\n+details:\n+\n+* [`#[test]`][attribute-test] \u2014\u00a0Indicates a function is a test to be run.\n+* `#[bench]` \u2014\u00a0Indicates a function is a benchmark to be\n+  run. Benchmarks are currently unstable and only available in the nightly\n+  channel, see the [unstable docs][bench-docs] for more details.\n+* [`#[should_panic]`][attribute-should_panic] \u2014\u00a0Indicates that the test\n+  function will only pass if the function [panics][panic].\n+* [`#[ignore]`][attribute-ignore] \u2014\u00a0Indicates that the test function will be\n+  compiled, but not run by default. See the [`--ignored`](#--ignored) and\n+  [`--include-ignored`](#--include-ignored) options to run these tests.\n+\n+## CLI arguments\n+\n+The libtest harness has several command-line arguments to control its\n+behavior.\n+\n+> Note: When running with [`cargo test`], the libtest CLI arguments must be\n+> passed after the `--` argument to differentiate between flags for Cargo and\n+> those for the harness. For example: `cargo test -- --nocapture`\n+\n+### Filters\n+\n+Bare arguments (those without a `-` prefix) are treated as filters which will\n+only run tests whose name matches one of those strings. The filter will match\n+any substring found in the full path of the test function. For example, if the\n+test function `it_works` is located in the module `utils::paths::tests`, then\n+any of the filters `works`, `path`, `utils::`, or\n+`utils::paths::tests::it_works` will match that test.\n+\n+See [Selection options](#selection-options) for more options to control which\n+tests are run.\n+\n+### Action options\n+\n+The following options perform different actions other than running tests.\n+\n+#### `--list`\n+\n+Prints a list of all tests and benchmarks. Does not run any of the tests.\n+[Filters](#filters) can be used to list only matching tests.\n+\n+#### `-h`, `--help`\n+\n+Displays usage information and command-line options.\n+\n+### Selection options\n+\n+The following options change how tests are selected.\n+\n+#### `--test`\n+\n+This is the default mode where all tests will be run as well as running all\n+benchmarks with only a single iteration (to ensure the benchmark works,\n+without taking the time to actually perform benchmarking). This can be\n+combined with the `--bench` flag to run both tests and perform full\n+benchmarking.\n+\n+#### `--bench`\n+\n+This runs in a mode where tests are ignored, and only runs benchmarks. This\n+can be combined with `--test` to run both benchmarks and tests.\n+\n+#### `--exact`\n+\n+This forces [filters](#filters) to match the full path of the test exactly.\n+For example, if the test `it_works` is in the module `utils::paths::tests`,\n+then only the string `utils::paths::tests::it_works` will match that test.\n+\n+#### `--skip` _FILTER_\n+\n+Skips any tests whose name contains the given _FILTER_ string. This flag may\n+be passed multiple times.\n+\n+#### `--ignored`\n+\n+Runs only tests that are marked with the [`ignore`\n+attribute][attribute-ignore].\n+\n+#### `--include-ignored`\n+\n+Runs both [ignored](#--ignored) and non-ignored tests.\n+\n+#### `--exclude-should-panic`\n+\n+Excludes tests marked with the [`should_panic`\n+attribute][attribute-should_panic].\n+\n+\u26a0\ufe0f \ud83d\udea7 This option is [unstable](#unstable-options), and requires the `-Z\n+unstable-options` flag. See [tracking issue\n+#82348](https://github.com/rust-lang/rust/issues/82348) for more information.\n+\n+### Execution options\n+\n+The following options affect how tests are executed.\n+\n+#### `--test-threads` _NUM_THREADS_\n+\n+Sets the number of threads to use for running tests in parallel. By default,\n+uses the amount of concurrency available on the hardware as indicated by\n+[`available_concurrency`].\n+\n+This can also be specified with the `RUST_TEST_THREADS` environment variable.\n+\n+#### `--force-run-in-process`\n+\n+Forces the tests to run in a single process when using the [`abort` panic\n+strategy][panic-strategy].\n+\n+\u26a0\ufe0f \ud83d\udea7 This only works with the unstable [`-Z panic-abort-tests`] option, and\n+requires the `-Z unstable-options` flag. See [tracking issue\n+#67650](https://github.com/rust-lang/rust/issues/67650) for more information.\n+\n+#### `--ensure-time`\n+\n+\u26a0\ufe0f \ud83d\udea7 This option is [unstable](#unstable-options), and requires the `-Z\n+unstable-options` flag. See [tracking issue\n+#64888](https://github.com/rust-lang/rust/issues/64888) and the [unstable\n+docs](../../unstable-book/compiler-flags/report-time.html) for more information.\n+\n+### Output options\n+\n+The following options affect the output behavior.\n+\n+#### `-q`, `--quiet`\n+\n+Displays one character per test instead of one line per test. This is an alias\n+for [`--format=terse`](#--format-format).\n+\n+#### `--nocapture`\n+\n+Does not capture the stdout and stderr of the test, and allows tests to print\n+to the console. Usually the output is captured, and only displayed if the test\n+fails.\n+\n+This may also be specified by setting the `RUST_TEST_NOCAPTURE` environment\n+variable set to anything but `0`.\n+\n+#### `--show-output`\n+\n+Displays the stdout and stderr of successful tests after all tests have run.\n+\n+Contrast this with [`--nocapture`](#--nocapture) which allows tests to print\n+*while they are running*, which can cause interleaved output if there are\n+multiple tests running in parallel, `--show-output` ensures the output is\n+contiguous, but requires waiting for all tests to finish.\n+\n+#### `--color` _COLOR_\n+\n+Control when colored terminal output is used. Valid options:\n+\n+* `auto`: Colorize if stdout is a tty and [`--nocapture`](#--nocapture) is not\n+  used. This is the default.\n+* `always`: Always colorize the output.\n+* `never`: Never colorize the output.\n+\n+#### `--format` _FORMAT_\n+\n+Controls the format of the output. Valid options:\n+\n+* `pretty`: This is the default format, with one line per test.\n+* `terse`: Displays only a single character per test. [`--quiet`](#-q---quiet)\n+  is an alias for this option.\n+* `json`: Emits JSON objects, one per line. \u26a0\ufe0f \ud83d\udea7 This option is\n+  [unstable](#unstable-options), and requires the `-Z unstable-options` flag.\n+  See [tracking issue #49359](https://github.com/rust-lang/rust/issues/49359)\n+  for more information.\n+\n+#### `--logfile` _PATH_\n+\n+Writes the results to the tests to the given file.\n+\n+#### `--report-time` _FORMAT_\n+\n+\u26a0\ufe0f \ud83d\udea7 This option is [unstable](#unstable-options), and requires the `-Z\n+unstable-options` flag. See [tracking issue\n+#64888](https://github.com/rust-lang/rust/issues/64888) and the [unstable\n+docs](../../unstable-book/compiler-flags/report-time.html) for more information.\n+\n+### Unstable options\n+\n+Some CLI options are added in an \"unstable\" state, where they are intended for\n+experimentation and testing to determine if the option works correctly, has\n+the right design, and is useful. The option may not work correctly, break, or\n+change at at any time. To signal that you acknowledge that you are using an\n+unstable option, they require passing the `-Z unstable-options` command-line\n+flag.\n+\n+## Benchmarks\n+\n+The libtest harness supports running benchmarks for functions annotated with\n+the `#[bench]` attribute. Benchmarks are currently unstable, and only\n+available on the [nightly channel]. More information may be found in the\n+[unstable book][bench-docs].\n+\n+## Custom test frameworks\n+\n+Experimental support for using custom test harnesses is available on the\n+[nightly channel]. See [tracking issue\n+#50297](https://github.com/rust-lang/rust/issues/50297) and the\n+[custom_test_frameworks documentation] for more information.\n+\n+[`--test` option]: ../command-line-arguments.md#option-test\n+[`-Z panic-abort-tests`]: https://github.com/rust-lang/rust/issues/67650\n+[`available_concurrency`]: ../../std/thread/fn.available_concurrency.html\n+[`cargo test`]: ../../cargo/commands/cargo-test.html\n+[`libtest`]: ../../test/index.html\n+[`main` function]: ../../reference/crates-and-source-files.html#main-functions\n+[`Result`]: ../../std/result/index.html\n+[`test` cfg option]: ../../reference/conditional-compilation.html#test\n+[attribute-ignore]: ../../reference/attributes/testing.html#the-ignore-attribute\n+[attribute-should_panic]: ../../reference/attributes/testing.html#the-should_panic-attribute\n+[attribute-test]: ../../reference/attributes/testing.html#the-test-attribute\n+[bench-docs]: ../../unstable-book/library-features/test.html\n+[Cargo]: ../../cargo/index.html\n+[crate type]: ../../reference/linkage.html\n+[custom_test_frameworks documentation]: ../../unstable-book/language-features/custom-test-frameworks.html\n+[nightly channel]: ../../book/appendix-07-nightly-rust.html\n+[panic-strategy]: ../../book/ch09-01-unrecoverable-errors-with-panic.html\n+[panic]: ../../book/ch09-01-unrecoverable-errors-with-panic.html\n+[Testing Chapter]: ../../book/ch11-00-testing.html"}]}