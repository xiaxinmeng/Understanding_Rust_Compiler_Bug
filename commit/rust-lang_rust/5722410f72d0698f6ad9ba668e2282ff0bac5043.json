{"sha": "5722410f72d0698f6ad9ba668e2282ff0bac5043", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjI0MTBmNzJkMDY5OGY2YWQ5YmE2NjhlMjI4MmZmMGJhYzUwNDM=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2014-12-18T04:43:50Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2014-12-18T04:43:50Z"}, "message": "Fix logic error and add unreachable after returns", "tree": {"sha": "f60bc3ad27c2bfa9d13a5c32e75bab33183a15f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60bc3ad27c2bfa9d13a5c32e75bab33183a15f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5722410f72d0698f6ad9ba668e2282ff0bac5043", "comment_count": 10, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5722410f72d0698f6ad9ba668e2282ff0bac5043", "html_url": "https://github.com/rust-lang/rust/commit/5722410f72d0698f6ad9ba668e2282ff0bac5043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5722410f72d0698f6ad9ba668e2282ff0bac5043/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f54f96df60337cb939f6f753a1cc6181e70f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f54f96df60337cb939f6f753a1cc6181e70f4b", "html_url": "https://github.com/rust-lang/rust/commit/b4f54f96df60337cb939f6f753a1cc6181e70f4b"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "45bdf1c89cfc3cda76d115ad4ec9f5418b38015f", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5722410f72d0698f6ad9ba668e2282ff0bac5043/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5722410f72d0698f6ad9ba668e2282ff0bac5043/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=5722410f72d0698f6ad9ba668e2282ff0bac5043", "patch": "@@ -314,7 +314,7 @@ pub struct DepthFirstTraversal<'g, N:'g, E:'g> {\n impl<'g, N, E> Iterator<&'g N> for DepthFirstTraversal<'g, N, E> {\n     fn next(&mut self) -> Option<&'g N> {\n         while let Some(idx) = self.stack.pop() {\n-            if self.visited.insert(idx.node_id()) {\n+            if !self.visited.insert(idx.node_id()) {\n                 continue;\n             }\n             self.graph.each_outgoing_edge(idx, |_, e| -> bool {"}, {"sha": "b185e8098e42bb3fec20583dda6976a68bf0b56c", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5722410f72d0698f6ad9ba668e2282ff0bac5043/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5722410f72d0698f6ad9ba668e2282ff0bac5043/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=5722410f72d0698f6ad9ba668e2282ff0bac5043", "patch": "@@ -945,6 +945,10 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 if let &Some(ref x) = ex {\n                     bcx = trans_into(bcx, &**x, Ignore);\n                 }\n+                // Mark the end of the block as unreachable. Once we get to\n+                // a return expression, there's no more we should be doing\n+                // after this.\n+                Unreachable(bcx);\n                 bcx\n             }\n         }"}]}