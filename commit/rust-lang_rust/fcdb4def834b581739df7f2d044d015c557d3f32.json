{"sha": "fcdb4def834b581739df7f2d044d015c557d3f32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZGI0ZGVmODM0YjU4MTczOWRmN2YyZDA0NGQwMTVjNTU3ZDNmMzI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-09T18:57:48Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-28T03:12:41Z"}, "message": "rustc: track fields in the HIR map.", "tree": {"sha": "71cb7f328f4c047649c35dbf8659679cf7cc94a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71cb7f328f4c047649c35dbf8659679cf7cc94a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcdb4def834b581739df7f2d044d015c557d3f32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcdb4def834b581739df7f2d044d015c557d3f32", "html_url": "https://github.com/rust-lang/rust/commit/fcdb4def834b581739df7f2d044d015c557d3f32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcdb4def834b581739df7f2d044d015c557d3f32/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d33d6b71cb99ad9d9403295daec8d8a8f5c976", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d33d6b71cb99ad9d9403295daec8d8a8f5c976", "html_url": "https://github.com/rust-lang/rust/commit/36d33d6b71cb99ad9d9403295daec8d8a8f5c976"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "26fd2b736a42c29bdcba81874fb4835b0c8c3b65", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fcdb4def834b581739df7f2d044d015c557d3f32/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdb4def834b581739df7f2d044d015c557d3f32/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=fcdb4def834b581739df7f2d044d015c557d3f32", "patch": "@@ -242,4 +242,11 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     fn visit_macro_def(&mut self, macro_def: &'ast MacroDef) {\n         self.insert_entry(macro_def.id, NotPresent);\n     }\n+\n+    fn visit_struct_field(&mut self, field: &'ast StructField) {\n+        self.insert(field.id, NodeField(field));\n+        self.with_parent(field.id, |this| {\n+            intravisit::walk_struct_field(this, field);\n+        });\n+    }\n }"}, {"sha": "b9763e6ea0dcb430a77eede0cd9c33acd73ff878", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcdb4def834b581739df7f2d044d015c557d3f32/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdb4def834b581739df7f2d044d015c557d3f32/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=fcdb4def834b581739df7f2d044d015c557d3f32", "patch": "@@ -46,6 +46,7 @@ pub enum Node<'ast> {\n     NodeTraitItem(&'ast TraitItem),\n     NodeImplItem(&'ast ImplItem),\n     NodeVariant(&'ast Variant),\n+    NodeField(&'ast StructField),\n     NodeExpr(&'ast Expr),\n     NodeStmt(&'ast Stmt),\n     NodeTy(&'ast Ty),\n@@ -75,6 +76,7 @@ pub enum MapEntry<'ast> {\n     EntryTraitItem(NodeId, &'ast TraitItem),\n     EntryImplItem(NodeId, &'ast ImplItem),\n     EntryVariant(NodeId, &'ast Variant),\n+    EntryField(NodeId, &'ast StructField),\n     EntryExpr(NodeId, &'ast Expr),\n     EntryStmt(NodeId, &'ast Stmt),\n     EntryTy(NodeId, &'ast Ty),\n@@ -106,6 +108,7 @@ impl<'ast> MapEntry<'ast> {\n             NodeTraitItem(n) => EntryTraitItem(p, n),\n             NodeImplItem(n) => EntryImplItem(p, n),\n             NodeVariant(n) => EntryVariant(p, n),\n+            NodeField(n) => EntryField(p, n),\n             NodeExpr(n) => EntryExpr(p, n),\n             NodeStmt(n) => EntryStmt(p, n),\n             NodeTy(n) => EntryTy(p, n),\n@@ -127,6 +130,7 @@ impl<'ast> MapEntry<'ast> {\n             EntryTraitItem(id, _) => id,\n             EntryImplItem(id, _) => id,\n             EntryVariant(id, _) => id,\n+            EntryField(id, _) => id,\n             EntryExpr(id, _) => id,\n             EntryStmt(id, _) => id,\n             EntryTy(id, _) => id,\n@@ -152,6 +156,7 @@ impl<'ast> MapEntry<'ast> {\n             EntryTraitItem(_, n) => NodeTraitItem(n),\n             EntryImplItem(_, n) => NodeImplItem(n),\n             EntryVariant(_, n) => NodeVariant(n),\n+            EntryField(_, n) => NodeField(n),\n             EntryExpr(_, n) => NodeExpr(n),\n             EntryStmt(_, n) => NodeStmt(n),\n             EntryTy(_, n) => NodeTy(n),\n@@ -265,6 +270,7 @@ impl<'ast> Map<'ast> {\n                     EntryForeignItem(p, _) |\n                     EntryTraitItem(p, _) |\n                     EntryVariant(p, _) |\n+                    EntryField(p, _) |\n                     EntryExpr(p, _) |\n                     EntryStmt(p, _) |\n                     EntryTy(p, _) |\n@@ -308,6 +314,7 @@ impl<'ast> Map<'ast> {\n                     EntryTraitItem(p, _) |\n                     EntryImplItem(p, _) |\n                     EntryVariant(p, _) |\n+                    EntryField(p, _) |\n                     EntryExpr(p, _) |\n                     EntryStmt(p, _) |\n                     EntryTy(p, _) |\n@@ -656,6 +663,7 @@ impl<'ast> Map<'ast> {\n             NodeImplItem(ii) => ii.name,\n             NodeTraitItem(ti) => ti.name,\n             NodeVariant(v) => v.node.name,\n+            NodeField(f) => f.name,\n             NodeLifetime(lt) => lt.name,\n             NodeTyParam(tp) => tp.name,\n             NodeLocal(&Pat { node: PatKind::Binding(_,_,l,_), .. }) => l.node,\n@@ -674,6 +682,7 @@ impl<'ast> Map<'ast> {\n             Some(NodeTraitItem(ref ti)) => Some(&ti.attrs[..]),\n             Some(NodeImplItem(ref ii)) => Some(&ii.attrs[..]),\n             Some(NodeVariant(ref v)) => Some(&v.node.attrs[..]),\n+            Some(NodeField(ref f)) => Some(&f.attrs[..]),\n             Some(NodeExpr(ref e)) => Some(&*e.attrs),\n             Some(NodeStmt(ref s)) => Some(s.node.attrs()),\n             // unit/tuple structs take the attributes straight from\n@@ -710,6 +719,7 @@ impl<'ast> Map<'ast> {\n             Some(NodeTraitItem(trait_method)) => trait_method.span,\n             Some(NodeImplItem(ref impl_item)) => impl_item.span,\n             Some(NodeVariant(variant)) => variant.span,\n+            Some(NodeField(field)) => field.span,\n             Some(NodeExpr(expr)) => expr.span,\n             Some(NodeStmt(stmt)) => stmt.span,\n             Some(NodeTy(ty)) => ty.span,\n@@ -831,6 +841,7 @@ impl<'a, 'ast> Iterator for NodesMatchingSuffix<'a, 'ast> {\n                 Some(EntryTraitItem(_, n))  => n.name(),\n                 Some(EntryImplItem(_, n))   => n.name(),\n                 Some(EntryVariant(_, n))    => n.name(),\n+                Some(EntryField(_, n))      => n.name(),\n                 _ => continue,\n             };\n             if self.matches_names(self.map.get_parent(idx), name) {\n@@ -849,6 +860,7 @@ impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() }\n impl Named for Item { fn name(&self) -> Name { self.name } }\n impl Named for ForeignItem { fn name(&self) -> Name { self.name } }\n impl Named for Variant_ { fn name(&self) -> Name { self.name } }\n+impl Named for StructField { fn name(&self) -> Name { self.name } }\n impl Named for TraitItem { fn name(&self) -> Name { self.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.name } }\n \n@@ -940,6 +952,7 @@ impl<'a> NodePrinter for pprust::State<'a> {\n             NodeLifetime(a)    => self.print_lifetime(&a),\n             NodeVisibility(a)  => self.print_visibility(&a),\n             NodeTyParam(_)     => bug!(\"cannot print TyParam\"),\n+            NodeField(_)       => bug!(\"cannot print StructField\"),\n             // these cases do not carry enough information in the\n             // ast_map to reconstruct their full structure for pretty\n             // printing.\n@@ -1019,6 +1032,11 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                     variant.node.name,\n                     path_str(), id_str)\n         }\n+        Some(NodeField(ref field)) => {\n+            format!(\"field {} in {}{}\",\n+                    field.name,\n+                    path_str(), id_str)\n+        }\n         Some(NodeExpr(ref expr)) => {\n             format!(\"expr {}{}\", pprust::expr_to_string(&expr), id_str)\n         }"}, {"sha": "b17d41e0fa544da01b581b5c1748fa73bc401067", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcdb4def834b581739df7f2d044d015c557d3f32/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdb4def834b581739df7f2d044d015c557d3f32/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=fcdb4def834b581739df7f2d044d015c557d3f32", "patch": "@@ -299,6 +299,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             ast_map::NodeForeignItem(_) |\n             ast_map::NodeVariant(_) |\n             ast_map::NodeStructCtor(_) |\n+            ast_map::NodeField(_) |\n             ast_map::NodeTy(_) => {}\n             _ => {\n                 bug!(\"found unexpected thingy in worklist: {}\","}]}