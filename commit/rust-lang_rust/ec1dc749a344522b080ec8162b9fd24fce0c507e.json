{"sha": "ec1dc749a344522b080ec8162b9fd24fce0c507e", "node_id": "C_kwDOAAsO6NoAKGVjMWRjNzQ5YTM0NDUyMmIwODBlYzgxNjJiOWZkMjRmY2UwYzUwN2U", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T14:20:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-20T12:40:19Z"}, "message": "adjust for provenance cleanup", "tree": {"sha": "956ae9cc01554b910fab639bff98116774289f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/956ae9cc01554b910fab639bff98116774289f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec1dc749a344522b080ec8162b9fd24fce0c507e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1dc749a344522b080ec8162b9fd24fce0c507e", "html_url": "https://github.com/rust-lang/rust/commit/ec1dc749a344522b080ec8162b9fd24fce0c507e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec1dc749a344522b080ec8162b9fd24fce0c507e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "598ae7418b101c47aff2131d21a7e4e22192d3ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/598ae7418b101c47aff2131d21a7e4e22192d3ba", "html_url": "https://github.com/rust-lang/rust/commit/598ae7418b101c47aff2131d21a7e4e22192d3ba"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "7625763a3bb4f450b0630728e9110fc6310c9aa9", "filename": "src/data_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec1dc749a344522b080ec8162b9fd24fce0c507e/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1dc749a344522b080ec8162b9fd24fce0c507e/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=ec1dc749a344522b080ec8162b9fd24fce0c507e", "patch": "@@ -999,15 +999,15 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         if let Some(data_race) = &this.machine.data_race {\n             if data_race.multi_threaded.get() {\n                 let size = place.layout.size;\n-                let (alloc_id, base_offset, ptr) = this.ptr_get_alloc_id(place.ptr)?;\n+                let (alloc_id, base_offset, _tag) = this.ptr_get_alloc_id(place.ptr)?;\n                 // Load and log the atomic operation.\n                 // Note that atomic loads are possible even from read-only allocations, so `get_alloc_extra_mut` is not an option.\n                 let alloc_meta = &this.get_alloc_extra(alloc_id)?.data_race.as_ref().unwrap();\n                 log::trace!(\n                     \"Atomic op({}) with ordering {:?} on {:?} (size={})\",\n                     description,\n                     &atomic,\n-                    ptr,\n+                    place.ptr,\n                     size.bytes()\n                 );\n \n@@ -1039,7 +1039,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n                     {\n                         log::trace!(\n                             \"Updated atomic memory({:?}, size={}) to {:#?}\",\n-                            ptr,\n+                            place.ptr,\n                             size.bytes(),\n                             range.atomic_ops\n                         );"}, {"sha": "df53d90b05c502b09dd7b4030a856b74f95c8708", "filename": "src/machine.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ec1dc749a344522b080ec8162b9fd24fce0c507e/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1dc749a344522b080ec8162b9fd24fce0c507e/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ec1dc749a344522b080ec8162b9fd24fce0c507e", "patch": "@@ -431,11 +431,13 @@ impl<'mir, 'tcx> MiriEvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx>\n /// Machine hook implementations.\n impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     type MemoryKind = MiriMemoryKind;\n+    type ExtraFnVal = Dlsym;\n \n     type FrameExtra = FrameData<'tcx>;\n     type AllocExtra = AllocExtra;\n+\n     type PointerTag = Tag;\n-    type ExtraFnVal = Dlsym;\n+    type TagExtra = SbTag;\n \n     type MemoryMap =\n         MonoHashMap<AllocId, (MemoryKind<MiriMemoryKind>, Allocation<Tag, Self::AllocExtra>)>;\n@@ -607,26 +609,26 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     fn ptr_get_alloc(\n         ecx: &MiriEvalContext<'mir, 'tcx>,\n         ptr: Pointer<Self::PointerTag>,\n-    ) -> (AllocId, Size) {\n+    ) -> (AllocId, Size, Self::TagExtra) {\n         let rel = intptrcast::GlobalStateInner::abs_ptr_to_rel(ecx, ptr);\n-        (ptr.provenance.alloc_id, rel)\n+        (ptr.provenance.alloc_id, rel, ptr.provenance.sb)\n     }\n \n     #[inline(always)]\n     fn memory_read(\n         _tcx: TyCtxt<'tcx>,\n         machine: &Self,\n         alloc_extra: &AllocExtra,\n-        tag: Tag,\n+        (alloc_id, tag): (AllocId, Self::TagExtra),\n         range: AllocRange,\n     ) -> InterpResult<'tcx> {\n         if let Some(data_race) = &alloc_extra.data_race {\n-            data_race.read(tag.alloc_id, range, machine.data_race.as_ref().unwrap())?;\n+            data_race.read(alloc_id, range, machine.data_race.as_ref().unwrap())?;\n         }\n         if let Some(stacked_borrows) = &alloc_extra.stacked_borrows {\n             stacked_borrows.memory_read(\n-                tag.alloc_id,\n-                tag.sb,\n+                alloc_id,\n+                tag,\n                 range,\n                 machine.stacked_borrows.as_ref().unwrap(),\n             )\n@@ -640,16 +642,16 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         _tcx: TyCtxt<'tcx>,\n         machine: &mut Self,\n         alloc_extra: &mut AllocExtra,\n-        tag: Tag,\n+        (alloc_id, tag): (AllocId, Self::TagExtra),\n         range: AllocRange,\n     ) -> InterpResult<'tcx> {\n         if let Some(data_race) = &mut alloc_extra.data_race {\n-            data_race.write(tag.alloc_id, range, machine.data_race.as_mut().unwrap())?;\n+            data_race.write(alloc_id, range, machine.data_race.as_mut().unwrap())?;\n         }\n         if let Some(stacked_borrows) = &mut alloc_extra.stacked_borrows {\n             stacked_borrows.memory_written(\n-                tag.alloc_id,\n-                tag.sb,\n+                alloc_id,\n+                tag,\n                 range,\n                 machine.stacked_borrows.as_mut().unwrap(),\n             )\n@@ -663,19 +665,19 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         _tcx: TyCtxt<'tcx>,\n         machine: &mut Self,\n         alloc_extra: &mut AllocExtra,\n-        tag: Tag,\n+        (alloc_id, tag): (AllocId, Self::TagExtra),\n         range: AllocRange,\n     ) -> InterpResult<'tcx> {\n-        if Some(tag.alloc_id) == machine.tracked_alloc_id {\n-            register_diagnostic(NonHaltingDiagnostic::FreedAlloc(tag.alloc_id));\n+        if Some(alloc_id) == machine.tracked_alloc_id {\n+            register_diagnostic(NonHaltingDiagnostic::FreedAlloc(alloc_id));\n         }\n         if let Some(data_race) = &mut alloc_extra.data_race {\n-            data_race.deallocate(tag.alloc_id, range, machine.data_race.as_mut().unwrap())?;\n+            data_race.deallocate(alloc_id, range, machine.data_race.as_mut().unwrap())?;\n         }\n         if let Some(stacked_borrows) = &mut alloc_extra.stacked_borrows {\n             stacked_borrows.memory_deallocated(\n-                tag.alloc_id,\n-                tag.sb,\n+                alloc_id,\n+                tag,\n                 range,\n                 machine.stacked_borrows.as_mut().unwrap(),\n             )"}, {"sha": "3ada61abbd29653407710484e32226b239d3ec80", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1dc749a344522b080ec8162b9fd24fce0c507e/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1dc749a344522b080ec8162b9fd24fce0c507e/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=ec1dc749a344522b080ec8162b9fd24fce0c507e", "patch": "@@ -124,7 +124,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let ptr = this.read_pointer(ptr)?;\n         // Take apart the pointer, we need its pieces.\n-        let (alloc_id, offset, ptr) = this.ptr_get_alloc_id(ptr)?;\n+        let (alloc_id, offset, _tag) = this.ptr_get_alloc_id(ptr)?;\n \n         let fn_instance =\n             if let Some(GlobalAlloc::Function(instance)) = this.tcx.get_global_alloc(alloc_id) {"}, {"sha": "0029de3b5a9c1a488949853b8c33064406492bdc", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec1dc749a344522b080ec8162b9fd24fce0c507e/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1dc749a344522b080ec8162b9fd24fce0c507e/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=ec1dc749a344522b080ec8162b9fd24fce0c507e", "patch": "@@ -702,8 +702,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             );\n             return Ok(());\n         }\n-        let (alloc_id, base_offset, ptr) = this.ptr_get_alloc_id(place.ptr)?;\n-        let orig_tag = ptr.provenance.sb;\n+        let (alloc_id, base_offset, orig_tag) = this.ptr_get_alloc_id(place.ptr)?;\n \n         // Ensure we bail out if the pointer goes out-of-bounds (see miri#1050).\n         let (alloc_size, _) ="}]}