{"sha": "569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e", "node_id": "C_kwDOAAsO6NoAKDU2OWNhMmJhZDA0ZGVjOWM2YjdiYzQ4NjRiZDAyMTZlM2JlYTljNWU", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-19T16:21:29Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-19T17:36:35Z"}, "message": "Deduplicate fresh_item_substs", "tree": {"sha": "22a639dcf1c184b62d711517a43f5d649c2cfa3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a639dcf1c184b62d711517a43f5d649c2cfa3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmPyXicACgkQ0XoHIV9o\n5xPUSw//Wna0IOZ18HDeDCaHnvai4kgsfjseC9g3AJymqN4Z5QsS7+GbWCdiFwP7\nr4SxfWGe67LAdbppa0HAUlWRSfOOsR/E06GAF+NpwwRaRQI95aEP9T5Eva0NFbld\nosOIVvBH5ePWUnfXXDUh/DTGjKYA9hepxYci+OspLtgSZ/6heEtjbUMZFoDv2VmY\n0/WJ7Q2xd0RTxc7XPotaZ5Dzgg7Mq0i49XmY91AGR2CRr5DZWIYJ4YmBWi/RtGE1\nGmeGuboZxn02FlOaZRMW9GHp1clwALBZ/GVmpvTAFRLrAhAw0eEJcYXH/6bGr6+d\nxfAshH4ZCr4m84uR2AhWj515Uv3YxGSFO3B0GU3t+I6SmHmHNEVRXLV0BX9AHhgm\nKgw9znzJl5C9AmehUa5HfskSbCi54czuTSnPgnLBzfP53n8ocl2RzZtrPKlW7F0Y\nlig+9ClaZxFlaxnTKIsgJovCYdboD3+1DWFpHH1AYSXUvJfS9gN6DCmE1rS43V4E\nkh208DjfS1L2l1c+rfpjwuR16IMZ+rwzqPoXrjFjwokW3/CS8/souOUZnqZ44vb/\n70lRQYECL7wGcbLG2yyEgy4vnGzU14xY5D0h3w2JoqOGtEGxgctIqyHpahILdLXu\nrkdnCDRjuTA+NXUcC/2Qn4E8+KFQMpLKfr9bq9SBdxz5QJTwaNQ=\n=NNJl\n-----END PGP SIGNATURE-----", "payload": "tree 22a639dcf1c184b62d711517a43f5d649c2cfa3c\nparent 6eb6455c46454fc09fe892d3f9193477a323802c\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676823689 +0100\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676828195 +0100\n\nDeduplicate fresh_item_substs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e", "html_url": "https://github.com/rust-lang/rust/commit/569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb6455c46454fc09fe892d3f9193477a323802c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb6455c46454fc09fe892d3f9193477a323802c", "html_url": "https://github.com/rust-lang/rust/commit/6eb6455c46454fc09fe892d3f9193477a323802c"}], "stats": {"total": 95, "additions": 35, "deletions": 60}, "files": [{"sha": "4098de59f9e98982be3110be91a503d1f18ce4e3", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e", "patch": "@@ -2239,7 +2239,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n \n                     let impl_ty = tcx.type_of(impl_);\n-                    let impl_substs = self.fresh_item_substs(impl_, &infcx);\n+                    let impl_substs = infcx.fresh_item_substs(impl_);\n                     let impl_ty = impl_ty.subst(tcx, impl_substs);\n                     let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n \n@@ -2306,36 +2306,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ))\n     }\n \n-    // FIXME(fmease): Copied from `rustc_hir_typeck::method::probe`. Deduplicate.\n-    fn fresh_item_substs(&self, def_id: DefId, infcx: &InferCtxt<'tcx>) -> SubstsRef<'tcx> {\n-        let tcx = self.tcx();\n-\n-        InternalSubsts::for_item(tcx, def_id, |param, _| match param.kind {\n-            GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n-            GenericParamDefKind::Type { .. } => infcx\n-                .next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::SubstitutionPlaceholder,\n-                    span: tcx.def_span(def_id),\n-                })\n-                .into(),\n-            GenericParamDefKind::Const { .. } => {\n-                let span = tcx.def_span(def_id);\n-                let origin = ConstVariableOrigin {\n-                    kind: ConstVariableOriginKind::SubstitutionPlaceholder,\n-                    span,\n-                };\n-                infcx\n-                    .next_const_var(\n-                        tcx.type_of(param.def_id)\n-                            .no_bound_vars()\n-                            .expect(\"const parameter types cannot be generic\"),\n-                        origin,\n-                    )\n-                    .into()\n-            }\n-        })\n-    }\n-\n     fn lookup_assoc_ty(\n         &self,\n         name: Ident,\n@@ -3531,3 +3501,36 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n     }\n }\n+\n+pub trait InferCtxtExt<'tcx> {\n+    fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx>;\n+}\n+\n+impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n+    fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx> {\n+        InternalSubsts::for_item(self.tcx, def_id, |param, _| match param.kind {\n+            GenericParamDefKind::Lifetime => self.tcx.lifetimes.re_erased.into(),\n+            GenericParamDefKind::Type { .. } => self\n+                .next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::SubstitutionPlaceholder,\n+                    span: self.tcx.def_span(def_id),\n+                })\n+                .into(),\n+            GenericParamDefKind::Const { .. } => {\n+                let span = self.tcx.def_span(def_id);\n+                let origin = ConstVariableOrigin {\n+                    kind: ConstVariableOriginKind::SubstitutionPlaceholder,\n+                    span,\n+                };\n+                self.next_const_var(\n+                    self.tcx\n+                        .type_of(param.def_id)\n+                        .no_bound_vars()\n+                        .expect(\"const parameter types cannot be generic\"),\n+                    origin,\n+                )\n+                .into()\n+            }\n+        })\n+    }\n+}"}, {"sha": "eb6c0b7686b6d94c12b646d210496bc94a319088", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=569ca2bad04dec9c6b7bc4864bd0216e3bea9c5e", "patch": "@@ -9,12 +9,11 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n+use rustc_hir_analysis::astconv::InferCtxtExt as _;\n use rustc_hir_analysis::autoderef::{self, Autoderef};\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n-use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n-use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n@@ -1941,33 +1940,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         (self.tcx.type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n     }\n \n-    fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx> {\n-        InternalSubsts::for_item(self.tcx, def_id, |param, _| match param.kind {\n-            GenericParamDefKind::Lifetime => self.tcx.lifetimes.re_erased.into(),\n-            GenericParamDefKind::Type { .. } => self\n-                .next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::SubstitutionPlaceholder,\n-                    span: self.tcx.def_span(def_id),\n-                })\n-                .into(),\n-            GenericParamDefKind::Const { .. } => {\n-                let span = self.tcx.def_span(def_id);\n-                let origin = ConstVariableOrigin {\n-                    kind: ConstVariableOriginKind::SubstitutionPlaceholder,\n-                    span,\n-                };\n-                self.next_const_var(\n-                    self.tcx\n-                        .type_of(param.def_id)\n-                        .no_bound_vars()\n-                        .expect(\"const parameter types cannot be generic\"),\n-                    origin,\n-                )\n-                .into()\n-            }\n-        })\n-    }\n-\n     /// Replaces late-bound-regions bound by `value` with `'static` using\n     /// `ty::erase_late_bound_regions`.\n     ///"}]}