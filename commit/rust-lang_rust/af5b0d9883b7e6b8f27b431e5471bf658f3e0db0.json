{"sha": "af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNWIwZDk4ODNiN2U2YjhmMjdiNDMxZTU0NzFiZjY1OGYzZTBkYjA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-16T17:29:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-16T17:29:49Z"}, "message": "Rollup merge of #80614 - 1000teslas:issue-78938-fix, r=tmandry\n\nExplain why borrows can't be held across yield point in async blocks\n\nFor https://github.com/rust-lang/rust/issues/78938.", "tree": {"sha": "bcd7381a47d5b2efc81eb5ea5c97373a32baf70b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcd7381a47d5b2efc81eb5ea5c97373a32baf70b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAyKNCRBK7hj4Ov3rIwAAdHIIADlhIm0q0PECMzMjh3wGEgwA\na+RGUgAFmFlMeH4Oh0nqbR1GAz00coVSbMDuYF5hRycIurA0qjNIr7xVtWdcRUwO\ntF5MzSXdOct8bJWj2lOpAcYE7GUzDohCC7kJFT/xU9nSCNnnRyvuF9sA55DqklZi\nC78dAwFL2GKO5s7/lcRBjxV42Jb/cIkeJ2TXsX2b0l3+swBnLSLZeXUmF8nC03Cb\nUVGl98NmoBRo9gjUYd0Y3sPywDkQZF3eKX464Mik75/yX6c0aeq3e7U99DBAzKes\n0Z67amuLKxnKToNAJAa2EYlJ2XqFTvCD8zBnTbkYKlGUQObV7sCRFz6el6ESsyA=\n=SYOG\n-----END PGP SIGNATURE-----\n", "payload": "tree bcd7381a47d5b2efc81eb5ea5c97373a32baf70b\nparent d2b63d455c381ce8229146a34a3c1668bb7eb154\nparent 3e9c95b9d44aba57ee70a596b73af514046b4b26\nauthor Mara Bos <m-ou.se@m-ou.se> 1610818189 +0000\ncommitter GitHub <noreply@github.com> 1610818189 +0000\n\nRollup merge of #80614 - 1000teslas:issue-78938-fix, r=tmandry\n\nExplain why borrows can't be held across yield point in async blocks\n\nFor https://github.com/rust-lang/rust/issues/78938.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "html_url": "https://github.com/rust-lang/rust/commit/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b63d455c381ce8229146a34a3c1668bb7eb154", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b63d455c381ce8229146a34a3c1668bb7eb154", "html_url": "https://github.com/rust-lang/rust/commit/d2b63d455c381ce8229146a34a3c1668bb7eb154"}, {"sha": "3e9c95b9d44aba57ee70a596b73af514046b4b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9c95b9d44aba57ee70a596b73af514046b4b26", "html_url": "https://github.com/rust-lang/rust/commit/3e9c95b9d44aba57ee70a596b73af514046b4b26"}], "stats": {"total": 94, "additions": 89, "deletions": 5}, "files": [{"sha": "effa597aad9182840ed68f81c14e99d5c4f457f8", "filename": "compiler/rustc_error_codes/src/error_codes/E0373.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0373.md", "raw_url": "https://github.com/rust-lang/rust/raw/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0373.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0373.md?ref=af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "patch": "@@ -50,3 +50,24 @@ fn foo() -> Box<Fn(u32) -> u32> {\n \n Now that the closure has its own copy of the data, there's no need to worry\n about safety.\n+\n+This error may also be encountered while using `async` blocks:\n+\n+```compile_fail,E0373,edition2018\n+use std::future::Future;\n+\n+async fn f() {\n+    let v = vec![1, 2, 3i32];\n+    spawn(async { //~ ERROR E0373\n+        println!(\"{:?}\", v)\n+    });\n+}\n+\n+fn spawn<F: Future + Send + 'static>(future: F) {\n+    unimplemented!()\n+}\n+```\n+\n+Similarly to closures, `async` blocks are not executed immediately and may\n+capture closed-over data by reference. For more information, see\n+https://rust-lang.github.io/async-book/03_async_await/01_chapter.html."}, {"sha": "0fda20cbb0884205deecf164b923ed274d06f868", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "patch": "@@ -1318,21 +1318,30 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Applicability::MachineApplicable,\n         );\n \n-        let msg = match category {\n+        match category {\n             ConstraintCategory::Return(_) | ConstraintCategory::OpaqueType => {\n-                format!(\"{} is returned here\", kind)\n+                let msg = format!(\"{} is returned here\", kind);\n+                err.span_note(constraint_span, &msg);\n             }\n             ConstraintCategory::CallArgument => {\n                 fr_name.highlight_region_name(&mut err);\n-                format!(\"function requires argument type to outlive `{}`\", fr_name)\n+                if matches!(use_span.generator_kind(), Some(GeneratorKind::Async(_))) {\n+                    err.note(\n+                        \"async blocks are not executed immediately and must either take a \\\n+                    reference or ownership of outside variables they use\",\n+                    );\n+                } else {\n+                    let msg = format!(\"function requires argument type to outlive `{}`\", fr_name);\n+                    err.span_note(constraint_span, &msg);\n+                }\n             }\n             _ => bug!(\n                 \"report_escaping_closure_capture called with unexpected constraint \\\n                  category: `{:?}`\",\n                 category\n             ),\n-        };\n-        err.span_note(constraint_span, &msg);\n+        }\n+\n         err\n     }\n "}, {"sha": "36f7160198526d66a3cda0b3b63b457c2235379b", "filename": "src/test/ui/async-await/issues/issue-78938-async-block.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.rs?ref=af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "patch": "@@ -0,0 +1,33 @@\n+// edition:2018\n+\n+use std::{sync::Arc, future::Future, pin::Pin, task::{Context, Poll}};\n+\n+async fn f() {\n+    let room_ref = Arc::new(Vec::new());\n+\n+    let gameloop_handle = spawn(async { //~ ERROR E0373\n+        game_loop(Arc::clone(&room_ref))\n+    });\n+    gameloop_handle.await;\n+}\n+\n+fn game_loop(v: Arc<Vec<usize>>) {}\n+\n+fn spawn<F>(future: F) -> JoinHandle\n+where\n+    F: Future + Send + 'static,\n+    F::Output: Send + 'static,\n+{\n+    loop {}\n+}\n+\n+struct JoinHandle;\n+\n+impl Future for JoinHandle {\n+    type Output = ();\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        loop {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "01ffc48d6542ec83af40d35ed438dae39ae41469", "filename": "src/test/ui/async-await/issues/issue-78938-async-block.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr?ref=af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "patch": "@@ -0,0 +1,21 @@\n+error[E0373]: async block may outlive the current function, but it borrows `room_ref`, which is owned by the current function\n+  --> $DIR/issue-78938-async-block.rs:8:39\n+   |\n+LL |       let gameloop_handle = spawn(async {\n+   |  _______________________________________^\n+LL | |         game_loop(Arc::clone(&room_ref))\n+   | |                               -------- `room_ref` is borrowed here\n+LL | |     });\n+   | |_____^ may outlive borrowed value `room_ref`\n+   |\n+   = note: async blocks are not executed immediately and must either take a reference or ownership of outside variables they use\n+help: to force the async block to take ownership of `room_ref` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     let gameloop_handle = spawn(async move {\n+LL |         game_loop(Arc::clone(&room_ref))\n+LL |     });\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0373`."}]}