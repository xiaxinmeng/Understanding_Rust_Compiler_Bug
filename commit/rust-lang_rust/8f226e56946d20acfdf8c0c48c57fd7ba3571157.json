{"sha": "8f226e56946d20acfdf8c0c48c57fd7ba3571157", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMjI2ZTU2OTQ2ZDIwYWNmZGY4YzBjNDhjNTdmZDdiYTM1NzExNTc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-27T14:40:35Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-28T16:28:04Z"}, "message": "De-@ TokenTree.", "tree": {"sha": "5ea6dfba381234511302124eff5c6aafa038449f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea6dfba381234511302124eff5c6aafa038449f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f226e56946d20acfdf8c0c48c57fd7ba3571157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f226e56946d20acfdf8c0c48c57fd7ba3571157", "html_url": "https://github.com/rust-lang/rust/commit/8f226e56946d20acfdf8c0c48c57fd7ba3571157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f226e56946d20acfdf8c0c48c57fd7ba3571157/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cf4d8bc446177204e9e12b1efb199a5dbc956b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf4d8bc446177204e9e12b1efb199a5dbc956b5", "html_url": "https://github.com/rust-lang/rust/commit/7cf4d8bc446177204e9e12b1efb199a5dbc956b5"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "7c3eb7742d20ebe1703994721eb1197897a6ce6d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8f226e56946d20acfdf8c0c48c57fd7ba3571157", "patch": "@@ -581,14 +581,16 @@ pub enum TokenTree {\n     TTTok(Span, ::parse::token::Token),\n     // a delimited sequence (the delimiters appear as the first\n     // and last elements of the vector)\n-    TTDelim(@Vec<TokenTree> ),\n+    // FIXME(eddyb) #6308 Use Rc<[TokenTree]> after DST.\n+    TTDelim(Rc<Vec<TokenTree>>),\n \n     // These only make sense for right-hand-sides of MBE macros:\n \n     // a kleene-style repetition sequence with a span, a TTForest,\n     // an optional separator, and a boolean where true indicates\n     // zero or more (..), and false indicates one or more (+).\n-    TTSeq(Span, @Vec<TokenTree> , Option<::parse::token::Token>, bool),\n+    // FIXME(eddyb) #6308 Use Rc<[TokenTree]> after DST.\n+    TTSeq(Span, Rc<Vec<TokenTree>>, Option<::parse::token::Token>, bool),\n \n     // a syntactic variable that will be filled in by macro expansion.\n     TTNonterminal(Span, Ident)"}, {"sha": "c9e444a9b8caf2a762b7d6987712765dc9d79269", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=8f226e56946d20acfdf8c0c48c57fd7ba3571157", "patch": "@@ -13,14 +13,16 @@ use codemap;\n use ext::base;\n use print;\n \n+use std::rc::Rc;\n+\n pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                          sp: codemap::Span,\n                          tt: &[ast::TokenTree])\n                       -> base::MacResult {\n \n     cx.print_backtrace();\n     println!(\"{}\", print::pprust::tt_to_str(&ast::TTDelim(\n-                @tt.iter().map(|x| (*x).clone()).collect())));\n+                Rc::new(tt.iter().map(|x| (*x).clone()).collect()))));\n \n     // any so that `log_syntax` can be invoked as an expression and item.\n     base::MacResult::dummy_any(sp)"}, {"sha": "e4e3f51b993f41f2d8385b4c4f10b659ca4c344d", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8f226e56946d20acfdf8c0c48c57fd7ba3571157", "patch": "@@ -28,6 +28,7 @@ use print;\n use util::small_vector::SmallVector;\n \n use std::cell::RefCell;\n+use std::rc::Rc;\n \n struct ParserAnyMacro<'a> {\n     parser: RefCell<Parser<'a>>,\n@@ -115,9 +116,9 @@ fn generic_extension(cx: &ExtCtxt,\n     if cx.trace_macros() {\n         println!(\"{}! \\\\{ {} \\\\}\",\n                  token::get_ident(name),\n-                 print::pprust::tt_to_str(&TTDelim(@arg.iter()\n-                                                       .map(|x| (*x).clone())\n-                                                       .collect())));\n+                 print::pprust::tt_to_str(&TTDelim(Rc::new(arg.iter()\n+                                                              .map(|x| (*x).clone())\n+                                                              .collect()))));\n     }\n \n     // Which arm's failure should we report? (the one furthest along)"}, {"sha": "1cfe9f1ab96fe227a85a1b6295adbc3a0baafd20", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=8f226e56946d20acfdf8c0c48c57fd7ba3571157", "patch": "@@ -17,12 +17,13 @@ use parse::token::{EOF, INTERPOLATED, IDENT, Token, NtIdent};\n use parse::token;\n use parse::lexer::TokenAndSpan;\n \n+use std::rc::Rc;\n use collections::HashMap;\n \n ///an unzipping of `TokenTree`s\n #[deriving(Clone)]\n struct TtFrame {\n-    forest: @Vec<ast::TokenTree>,\n+    forest: Rc<Vec<ast::TokenTree>>,\n     idx: uint,\n     dotdotdoted: bool,\n     sep: Option<Token>,\n@@ -52,7 +53,7 @@ pub fn new_tt_reader<'a>(sp_diag: &'a SpanHandler,\n     let mut r = TtReader {\n         sp_diag: sp_diag,\n         stack: vec!(TtFrame {\n-            forest: @src,\n+            forest: Rc::new(src),\n             idx: 0,\n             dotdotdoted: false,\n             sep: None,\n@@ -212,7 +213,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n             }\n             TTSeq(sp, tts, sep, zerok) => {\n                 // FIXME(pcwalton): Bad copy.\n-                match lockstep_iter_size(&TTSeq(sp, tts, sep.clone(), zerok), r) {\n+                match lockstep_iter_size(&TTSeq(sp, tts.clone(), sep.clone(), zerok), r) {\n                     LisUnconstrained => {\n                         r.sp_diag.span_fatal(\n                             sp.clone(), /* blame macro writer */"}, {"sha": "0f8c74f9ee0716be8d12fd5d9235782e3bbac725", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8f226e56946d20acfdf8c0c48c57fd7ba3571157", "patch": "@@ -16,6 +16,8 @@ use parse::token;\n use owned_slice::OwnedSlice;\n use util::small_vector::SmallVector;\n \n+use std::rc::Rc;\n+\n // We may eventually want to be able to fold over type parameters, too.\n pub trait Folder {\n     fn fold_crate(&mut self, c: Crate) -> Crate {\n@@ -375,10 +377,10 @@ pub fn fold_tts<T: Folder>(tts: &[TokenTree], fld: &mut T) -> Vec<TokenTree> {\n         match *tt {\n             TTTok(span, ref tok) =>\n             TTTok(span,maybe_fold_ident(tok,fld)),\n-            TTDelim(tts) => TTDelim(@fold_tts(tts.as_slice(), fld)),\n-            TTSeq(span, pattern, ref sep, is_optional) =>\n+            TTDelim(ref tts) => TTDelim(Rc::new(fold_tts(tts.as_slice(), fld))),\n+            TTSeq(span, ref pattern, ref sep, is_optional) =>\n             TTSeq(span,\n-                  @fold_tts(pattern.as_slice(), fld),\n+                  Rc::new(fold_tts(pattern.as_slice(), fld)),\n                   sep.as_ref().map(|tok|maybe_fold_ident(tok,fld)),\n                   is_optional),\n             TTNonterminal(sp,ref ident) =>"}, {"sha": "f2a7f543bd642a61aece0a388c45c01c3ea141fd", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=8f226e56946d20acfdf8c0c48c57fd7ba3571157", "patch": "@@ -366,13 +366,13 @@ mod test {\n             [ast::TTTok(_,_),\n              ast::TTTok(_,token::NOT),\n              ast::TTTok(_,_),\n-             ast::TTDelim(delim_elts)] => {\n+             ast::TTDelim(ref delim_elts)] => {\n                 let delim_elts: &[ast::TokenTree] = delim_elts.as_slice();\n                 match delim_elts {\n                     [ast::TTTok(_,token::LPAREN),\n-                     ast::TTDelim(first_set),\n+                     ast::TTDelim(ref first_set),\n                      ast::TTTok(_,token::FAT_ARROW),\n-                     ast::TTDelim(second_set),\n+                     ast::TTDelim(ref second_set),\n                      ast::TTTok(_,token::RPAREN)] => {\n                         let first_set: &[ast::TokenTree] =\n                             first_set.as_slice();"}, {"sha": "3618978d5c62187759db057697ac1f3bfd0edd7d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f226e56946d20acfdf8c0c48c57fd7ba3571157/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8f226e56946d20acfdf8c0c48c57fd7ba3571157", "patch": "@@ -80,6 +80,7 @@ use owned_slice::OwnedSlice;\n use collections::HashSet;\n use std::kinds::marker;\n use std::mem::replace;\n+use std::rc::Rc;\n use std::vec;\n \n #[allow(non_camel_case_types)]\n@@ -2101,7 +2102,7 @@ impl<'a> Parser<'a> {\n                     let seq = match seq {\n                         Spanned { node, .. } => node,\n                     };\n-                    TTSeq(mk_sp(sp.lo, p.span.hi), @seq, s, z)\n+                    TTSeq(mk_sp(sp.lo, p.span.hi), Rc::new(seq), s, z)\n                 } else {\n                     TTNonterminal(sp, p.parse_ident())\n                 }\n@@ -2144,7 +2145,7 @@ impl<'a> Parser<'a> {\n                 result.push(parse_any_tt_tok(self));\n                 self.open_braces.pop().unwrap();\n \n-                TTDelim(@result)\n+                TTDelim(Rc::new(result))\n             }\n             _ => parse_non_delim_tt_tok(self)\n         }"}]}