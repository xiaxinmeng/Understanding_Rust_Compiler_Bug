{"sha": "6e3561e149870fc60f27a3035747a0fe14ffd9f5", "node_id": "C_kwDOAAsO6NoAKDZlMzU2MWUxNDk4NzBmYzYwZjI3YTMwMzU3NDdhMGZlMTRmZmQ5ZjU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T03:14:56Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T20:07:43Z"}, "message": "Rename `Type::def_id()` to `Type::def_id_no_primitives()`\n\nThe old name was confusing because it's easy to assume that using\n`def_id()` is fine, but in some situations it's incorrect. In general,\n`def_id_full()` should be preferred, so `def_id_full()` should have a\nshorter name. That will happen in the next commit.", "tree": {"sha": "bef68600d74d789b928674dabe71a96c01222677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef68600d74d789b928674dabe71a96c01222677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3561e149870fc60f27a3035747a0fe14ffd9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3561e149870fc60f27a3035747a0fe14ffd9f5", "html_url": "https://github.com/rust-lang/rust/commit/6e3561e149870fc60f27a3035747a0fe14ffd9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3561e149870fc60f27a3035747a0fe14ffd9f5/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0853c33c3b489d5bf0045bf306d6555097f595f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0853c33c3b489d5bf0045bf306d6555097f595f4", "html_url": "https://github.com/rust-lang/rust/commit/0853c33c3b489d5bf0045bf306d6555097f595f4"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "854f332dd9989515cd3892b4d9478994513dfc0c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6e3561e149870fc60f27a3035747a0fe14ffd9f5", "patch": "@@ -479,7 +479,11 @@ crate fn build_impl(\n     let (merged_attrs, cfg) = merge_attrs(cx, parent_module.into(), load_attrs(cx, did), attrs);\n     trace!(\"merged_attrs={:?}\", merged_attrs);\n \n-    trace!(\"build_impl: impl {:?} for {:?}\", trait_.as_ref().map(|t| t.def_id()), for_.def_id());\n+    trace!(\n+        \"build_impl: impl {:?} for {:?}\",\n+        trait_.as_ref().map(|t| t.def_id()),\n+        for_.def_id_no_primitives()\n+    );\n     ret.push(clean::Item::from_def_id_and_attrs_and_parts(\n         did,\n         None,"}, {"sha": "bd3308c1898545694814614a010ee24e06574a5a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6e3561e149870fc60f27a3035747a0fe14ffd9f5", "patch": "@@ -1539,13 +1539,13 @@ impl Type {\n     /// [`clean`]: crate::clean\n     /// [`clean::Type`]: crate::clean::Type\n     // FIXME: get rid of this function and always use `def_id_full`\n-    crate fn def_id(&self) -> Option<DefId> {\n+    crate fn def_id_no_primitives(&self) -> Option<DefId> {\n         self.inner_def_id(None)\n     }\n \n     /// Use this method to get the [DefId] of a [clean] AST node, including [PrimitiveType]s.\n     ///\n-    /// See [`Self::def_id`] for more.\n+    /// See [`Self::def_id_no_primitives`] for more.\n     ///\n     /// [clean]: crate::clean\n     crate fn def_id_full(&self, cache: &Cache) -> Option<DefId> {"}, {"sha": "20c5d6dfd8a2d69b540ebb050526ca32420165e5", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=6e3561e149870fc60f27a3035747a0fe14ffd9f5", "patch": "@@ -276,7 +276,7 @@ crate fn get_real_types<'tcx>(\n     res: &mut FxHashSet<(Type, ItemType)>,\n ) -> usize {\n     fn insert(res: &mut FxHashSet<(Type, ItemType)>, tcx: TyCtxt<'_>, ty: Type) -> usize {\n-        if let Some(kind) = ty.def_id().map(|did| tcx.def_kind(did).into()) {\n+        if let Some(kind) = ty.def_id_no_primitives().map(|did| tcx.def_kind(did).into()) {\n             res.insert((ty, kind));\n             1\n         } else if ty.is_primitive() {\n@@ -296,7 +296,9 @@ crate fn get_real_types<'tcx>(\n \n     if let &Type::Generic(arg_s) = arg {\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n-            WherePredicate::BoundPredicate { ty, .. } => ty.def_id() == arg.def_id(),\n+            WherePredicate::BoundPredicate { ty, .. } => {\n+                ty.def_id_no_primitives() == arg.def_id_no_primitives()\n+            }\n             _ => false,\n         }) {\n             let bounds = where_pred.get_bounds().unwrap_or_else(|| &[]);\n@@ -363,7 +365,8 @@ crate fn get_all_types<'tcx>(\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n-            if let Some(kind) = arg.type_.def_id().map(|did| tcx.def_kind(did).into()) {\n+            if let Some(kind) = arg.type_.def_id_no_primitives().map(|did| tcx.def_kind(did).into())\n+            {\n                 all_types.insert((arg.type_.clone(), kind));\n             }\n         }\n@@ -374,7 +377,9 @@ crate fn get_all_types<'tcx>(\n             let mut ret = FxHashSet::default();\n             get_real_types(generics, &return_type, tcx, 0, &mut ret);\n             if ret.is_empty() {\n-                if let Some(kind) = return_type.def_id().map(|did| tcx.def_kind(did).into()) {\n+                if let Some(kind) =\n+                    return_type.def_id_no_primitives().map(|did| tcx.def_kind(did).into())\n+                {\n                     ret.insert((return_type.clone(), kind));\n                 }\n             }"}, {"sha": "0b2ee0d12c17c90c9eb39e899168148faf972017", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=6e3561e149870fc60f27a3035747a0fe14ffd9f5", "patch": "@@ -187,7 +187,7 @@ impl BadImplStripper {\n             true\n         } else if let Some(prim) = ty.primitive_type() {\n             self.prims.contains(&prim)\n-        } else if let Some(did) = ty.def_id() {\n+        } else if let Some(did) = ty.def_id_no_primitives() {\n             self.keep_impl_with_def_id(did.into())\n         } else {\n             false"}, {"sha": "74a9a2da06d36db0b117a930f588435c5dbb91ee", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3561e149870fc60f27a3035747a0fe14ffd9f5/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=6e3561e149870fc60f27a3035747a0fe14ffd9f5", "patch": "@@ -127,7 +127,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n             if imp.trait_.is_none() && imp.items.is_empty() {\n                 return None;\n             }\n-            if let Some(did) = imp.for_.def_id() {\n+            if let Some(did) = imp.for_.def_id_no_primitives() {\n                 if did.is_local() && !imp.for_.is_assoc_ty() && !self.retained.contains(&did.into())\n                 {\n                     debug!(\"ImplStripper: impl item for stripped type; removing\");\n@@ -142,7 +142,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n             }\n             if let Some(generics) = imp.trait_.as_ref().and_then(|t| t.generics()) {\n                 for typaram in generics {\n-                    if let Some(did) = typaram.def_id() {\n+                    if let Some(did) = typaram.def_id_no_primitives() {\n                         if did.is_local() && !self.retained.contains(&did.into()) {\n                             debug!(\n                                 \"ImplStripper: stripped item in trait's generics; removing impl\""}]}