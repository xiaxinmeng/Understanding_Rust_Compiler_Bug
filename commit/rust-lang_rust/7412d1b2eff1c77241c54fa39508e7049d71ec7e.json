{"sha": "7412d1b2eff1c77241c54fa39508e7049d71ec7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MTJkMWIyZWZmMWM3NzI0MWM1NGZhMzk1MDhlNzA0OWQ3MWVjN2U=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-02T18:25:44Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-18T13:04:46Z"}, "message": "Eliminate excessive null-checks from slice iterators\n\nThe data pointer used in the slice is never null, using assume() to tell\nLLVM about it gets rid of various unneeded null checks when iterating\nover the slice.\n\nSince the snapshot compiler is still using an older LLVM version, omit\nthe call in stage0, because compile times explode otherwise.\n\nBenchmarks from #18193\n````\nrunning 5 tests\ntest _range    ... bench:     33329 ns/iter (+/- 417)\ntest assembly  ... bench:     33299 ns/iter (+/- 58)\ntest enumerate ... bench:     33318 ns/iter (+/- 83)\ntest iter      ... bench:     33311 ns/iter (+/- 130)\ntest position  ... bench:     33300 ns/iter (+/- 47)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 5 measured\n````\n\nFixes #18193", "tree": {"sha": "28ada1feea39cb5f455b30ab44d0438600020909", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ada1feea39cb5f455b30ab44d0438600020909"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7412d1b2eff1c77241c54fa39508e7049d71ec7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7412d1b2eff1c77241c54fa39508e7049d71ec7e", "html_url": "https://github.com/rust-lang/rust/commit/7412d1b2eff1c77241c54fa39508e7049d71ec7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7412d1b2eff1c77241c54fa39508e7049d71ec7e/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b5150cfd3dfcdf518675e9073f03e061a63a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b5150cfd3dfcdf518675e9073f03e061a63a53", "html_url": "https://github.com/rust-lang/rust/commit/52b5150cfd3dfcdf518675e9073f03e061a63a53"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "25226afd8c9b72b771c049b1e757a25fcd51170e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7412d1b2eff1c77241c54fa39508e7049d71ec7e/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7412d1b2eff1c77241c54fa39508e7049d71ec7e/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7412d1b2eff1c77241c54fa39508e7049d71ec7e", "patch": "@@ -56,6 +56,7 @@ use core::cmp::{Ordering};\n use core::default::Default;\n use core::fmt;\n use core::hash::{self, Hash};\n+use core::intrinsics::assume;\n use core::iter::{repeat, FromIterator, IntoIterator};\n use core::marker::{self, ContravariantLifetime, InvariantType};\n use core::mem;\n@@ -1587,8 +1588,12 @@ impl<T> AsSlice<T> for Vec<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_slice(&self) -> &[T] {\n         unsafe {\n+            let p = *self.ptr;\n+            if cfg!(not(stage0)) { // NOTE remove cfg after next snapshot\n+                assume(p != 0 as *mut T);\n+            }\n             mem::transmute(RawSlice {\n-                data: *self.ptr,\n+                data: p,\n                 len: self.len\n             })\n         }"}]}