{"sha": "67e418ce75b6aab0918268e4268570b7215abe68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZTQxOGNlNzViNmFhYjA5MTgyNjhlNDI2ODU3MGI3MjE1YWJlNjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T04:33:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T04:33:20Z"}, "message": "Rollup merge of #70058 - Centril:fix-70050, r=petrochenkov\n\ncan_begin_literal_maybe_minus: `true` on `\"-\"? lit` NTs.\n\nMake `can_begin_literal_or_bool` (renamed to `can_begin_literal_maybe_minus`) accept `NtLiteral(e) | NtExpr(e)` where `e` is either a literal or a negated literal.\n\nFixes https://github.com/rust-lang/rust/issues/70050.\n\nr? @petrochenkov", "tree": {"sha": "dccb616ee1f5eb1bc1638cdea6c1db3ca37538b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dccb616ee1f5eb1bc1638cdea6c1db3ca37538b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67e418ce75b6aab0918268e4268570b7215abe68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedZkQCRBK7hj4Ov3rIwAAdHIIAGXW3r1mBRodGOAXyww/5RnZ\nHYtOqpLJuao01H7VLhVBkILFcX1WN5XwFoWbMN8zxSMLQHnbH8pWfs6il8Nq5XCT\n7MB8z0eHc+bw7hgIb1s3ybRpj84GqXT+I1PkftK/egGW1lERfSlffq6PIJmUKNXU\nqprjuqXv3dohd0lHIceWeNAkMw8T29smDhUOA8Jm2BoHPt0ypl6jfk015JyrZ5uZ\nffIzeuqLOJHuI+fWJEC/JK41+nLd/CAKj+vn46BSRXG2a1vZrhLM8WtHdxNtNAnX\nDQ3k8YLWOofmkq+Li4JPIYmJbNBIhd4PovbiFTyuFYpyK74GefFVCIdm1RnQLW4=\n=mLuj\n-----END PGP SIGNATURE-----\n", "payload": "tree dccb616ee1f5eb1bc1638cdea6c1db3ca37538b0\nparent 45b10f6f9876abe8b57394ef28e57936c4a07466\nparent 9b9a22cd2e537708152e847263fa2b999649a53c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584765200 +0100\ncommitter GitHub <noreply@github.com> 1584765200 +0100\n\nRollup merge of #70058 - Centril:fix-70050, r=petrochenkov\n\ncan_begin_literal_maybe_minus: `true` on `\"-\"? lit` NTs.\n\nMake `can_begin_literal_or_bool` (renamed to `can_begin_literal_maybe_minus`) accept `NtLiteral(e) | NtExpr(e)` where `e` is either a literal or a negated literal.\n\nFixes https://github.com/rust-lang/rust/issues/70050.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67e418ce75b6aab0918268e4268570b7215abe68", "html_url": "https://github.com/rust-lang/rust/commit/67e418ce75b6aab0918268e4268570b7215abe68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67e418ce75b6aab0918268e4268570b7215abe68/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b10f6f9876abe8b57394ef28e57936c4a07466", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b10f6f9876abe8b57394ef28e57936c4a07466", "html_url": "https://github.com/rust-lang/rust/commit/45b10f6f9876abe8b57394ef28e57936c4a07466"}, {"sha": "9b9a22cd2e537708152e847263fa2b999649a53c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9a22cd2e537708152e847263fa2b999649a53c", "html_url": "https://github.com/rust-lang/rust/commit/9b9a22cd2e537708152e847263fa2b999649a53c"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "be5d322ba1677dd4d984367ff430601babe40ec5", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=67e418ce75b6aab0918268e4268570b7215abe68", "patch": "@@ -424,7 +424,7 @@ impl Token {\n                 NtExpr(..) | NtBlock(..) | NtLiteral(..) => true,\n                 _ => false,\n             },\n-            _ => self.can_begin_literal_or_bool(),\n+            _ => self.can_begin_literal_maybe_minus(),\n         }\n     }\n \n@@ -448,13 +448,22 @@ impl Token {\n     /// Returns `true` if the token is any literal, a minus (which can prefix a literal,\n     /// for example a '-42', or one of the boolean idents).\n     ///\n-    /// Keep this in sync with `Lit::from_token`.\n-    pub fn can_begin_literal_or_bool(&self) -> bool {\n+    /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?\n+    ///\n+    /// Keep this in sync with and `Lit::from_token`, excluding unary negation.\n+    pub fn can_begin_literal_maybe_minus(&self) -> bool {\n         match self.uninterpolate().kind {\n             Literal(..) | BinOp(Minus) => true,\n             Ident(name, false) if name.is_bool_lit() => true,\n             Interpolated(ref nt) => match &**nt {\n-                NtExpr(e) | NtLiteral(e) => matches!(e.kind, ast::ExprKind::Lit(_)),\n+                NtLiteral(_) => true,\n+                NtExpr(e) => match &e.kind {\n+                    ast::ExprKind::Lit(_) => true,\n+                    ast::ExprKind::Unary(ast::UnOp::Neg, e) => {\n+                        matches!(&e.kind, ast::ExprKind::Lit(_))\n+                    }\n+                    _ => false,\n+                },\n                 _ => false,\n             },\n             _ => false,"}, {"sha": "1b17f343a6d67deb74f0e7027199c9985d65438f", "filename": "src/librustc_ast/util/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_ast%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_ast%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fliteral.rs?ref=67e418ce75b6aab0918268e4268570b7215abe68", "patch": "@@ -189,7 +189,7 @@ impl Lit {\n \n     /// Converts arbitrary token into an AST literal.\n     ///\n-    /// Keep this in sync with `Token::can_begin_literal_or_bool`.\n+    /// Keep this in sync with `Token::can_begin_literal_or_bool` excluding unary negation.\n     pub fn from_token(token: &Token) -> Result<Lit, LitError> {\n         let lit = match token.uninterpolate().kind {\n             token::Ident(name, false) if name.is_bool_lit() => {"}, {"sha": "0d777d88cad3a6b1e7ca080ae5260005b355686d", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=67e418ce75b6aab0918268e4268570b7215abe68", "patch": "@@ -778,7 +778,7 @@ fn may_begin_with(token: &Token, name: Name) -> bool {\n         }\n         sym::ty => token.can_begin_type(),\n         sym::ident => get_macro_ident(token).is_some(),\n-        sym::literal => token.can_begin_literal_or_bool(),\n+        sym::literal => token.can_begin_literal_maybe_minus(),\n         sym::vis => match token.kind {\n             // The follow-set of :vis + \"priv\" keyword + interpolated\n             token::Comma | token::Ident(..) | token::Interpolated(_) => true,"}, {"sha": "58ebc6b5637072f7681875c769d495f9f1a1bd05", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=67e418ce75b6aab0918268e4268570b7215abe68", "patch": "@@ -1374,6 +1374,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Matches `'-' lit | lit` (cf. `ast_validation::AstValidator::check_expr_within_pat`).\n+    /// Keep this in sync with `Token::can_begin_literal_maybe_minus`.\n     pub fn parse_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {\n         maybe_whole_expr!(self);\n "}, {"sha": "7ccf31d8b4faa64943c59560e0039ea42a13f9bc", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=67e418ce75b6aab0918268e4268570b7215abe68", "patch": "@@ -1509,7 +1509,7 @@ impl<'a> Parser<'a> {\n                 })\n             // `extern ABI fn`\n             || self.check_keyword(kw::Extern)\n-                && self.look_ahead(1, |t| t.can_begin_literal_or_bool())\n+                && self.look_ahead(1, |t| t.can_begin_literal_maybe_minus())\n                 && self.look_ahead(2, |t| t.is_keyword(kw::Fn))\n     }\n "}, {"sha": "5aab0580997c0b9b30e4b77d27f8cc123ea447bc", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e418ce75b6aab0918268e4268570b7215abe68/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=67e418ce75b6aab0918268e4268570b7215abe68", "patch": "@@ -696,7 +696,7 @@ impl<'a> Parser<'a> {\n         self.look_ahead(dist, |t| {\n             t.is_path_start() // e.g. `MY_CONST`;\n                 || t.kind == token::Dot // e.g. `.5` for recovery;\n-                || t.can_begin_literal_or_bool() // e.g. `42`.\n+                || t.can_begin_literal_maybe_minus() // e.g. `42`.\n                 || t.is_whole_expr()\n         })\n     }"}, {"sha": "4ecb21d26ab9b7fe6f99cec1d1122b8acec0b45b", "filename": "src/test/ui/parser/extern-abi-from-mac-literal-frag.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/67e418ce75b6aab0918268e4268570b7215abe68/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e418ce75b6aab0918268e4268570b7215abe68/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs?ref=67e418ce75b6aab0918268e4268570b7215abe68", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n // In this test we check that the parser accepts an ABI string when it\n-// comes from a macro `literal` fragment as opposed to a hardcoded string.\n+// comes from a macro `literal` or `expr` fragment as opposed to a hardcoded string.\n \n fn main() {}\n \n@@ -17,10 +17,30 @@ macro_rules! abi_from_lit_frag {\n     }\n }\n \n+macro_rules! abi_from_expr_frag {\n+    ($abi:expr) => {\n+        extern $abi {\n+            fn _import();\n+        }\n+\n+        extern $abi fn _export() {}\n+\n+        type _PTR = extern $abi fn();\n+    };\n+}\n+\n mod rust {\n     abi_from_lit_frag!(\"Rust\");\n }\n \n mod c {\n     abi_from_lit_frag!(\"C\");\n }\n+\n+mod rust_expr {\n+    abi_from_expr_frag!(\"Rust\");\n+}\n+\n+mod c_expr {\n+    abi_from_expr_frag!(\"C\");\n+}"}, {"sha": "aca9d9eb0a5b4c3e837897a45100b238bf8334f1", "filename": "src/test/ui/parser/issue-70050-ntliteral-accepts-negated-lit.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67e418ce75b6aab0918268e4268570b7215abe68/src%2Ftest%2Fui%2Fparser%2Fissue-70050-ntliteral-accepts-negated-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e418ce75b6aab0918268e4268570b7215abe68/src%2Ftest%2Fui%2Fparser%2Fissue-70050-ntliteral-accepts-negated-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70050-ntliteral-accepts-negated-lit.rs?ref=67e418ce75b6aab0918268e4268570b7215abe68", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+macro_rules! foo {\n+    ($a:literal) => {\n+        bar!($a)\n+    };\n+}\n+\n+macro_rules! bar {\n+    ($b:literal) => {};\n+}\n+\n+fn main() {\n+    foo!(-2);\n+    bar!(-2);\n+}"}]}