{"sha": "b181ea415ee283248ecabaa76f0c4c407fec05c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxODFlYTQxNWVlMjgzMjQ4ZWNhYmFhNzZmMGM0YzQwN2ZlYzA1YzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-20T22:12:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-20T22:20:37Z"}, "message": "core: Rename unsafe::leak to unsafe::forget. Closes #2031", "tree": {"sha": "debf8c92b42644f8308079662c4804d89f41ce2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/debf8c92b42644f8308079662c4804d89f41ce2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b181ea415ee283248ecabaa76f0c4c407fec05c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b181ea415ee283248ecabaa76f0c4c407fec05c1", "html_url": "https://github.com/rust-lang/rust/commit/b181ea415ee283248ecabaa76f0c4c407fec05c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b181ea415ee283248ecabaa76f0c4c407fec05c1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56828d49fd469614ffea46bb6ea1053876ba2bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/56828d49fd469614ffea46bb6ea1053876ba2bfe", "html_url": "https://github.com/rust-lang/rust/commit/56828d49fd469614ffea46bb6ea1053876ba2bfe"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "a4d1d2647eff1ee8adb7e803d511d849c0330617", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -119,7 +119,7 @@ fn send<T: send>(ch: chan<T>, -data: T) {\n     let res = rustrt::rust_port_id_send(sys::get_type_desc::<T>(), p, data);\n     if res != 0u unsafe {\n         // Data sent successfully\n-        unsafe::leak(data);\n+        unsafe::forget(data);\n     }\n     task::yield();\n }"}, {"sha": "f2aebc12d330f223cb0f2ee5bb66d99388591259", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -83,7 +83,7 @@ fn unwrap<T>(-opt: option<T>) -> T unsafe {\n       none { fail \"option none\" }\n     };\n     let liberated_value = unsafe::reinterpret_cast(*addr);\n-    unsafe::leak(opt);\n+    unsafe::forget(opt);\n     ret liberated_value;\n }\n "}, {"sha": "d2af1eca3a2bf8bddcb60c3eabc115137765de29", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -129,7 +129,7 @@ fn with_envp<T>(env: option<[(str,str)]>,\n             let t = #fmt(\"%s=%s\", k, v);\n             let mut v : [u8] = ::unsafe::reinterpret_cast(t);\n             blk += v;\n-            ::unsafe::leak(v);\n+            ::unsafe::forget(v);\n         }\n         blk += [0_u8];\n         vec::as_buf(blk) {|p| cb(::unsafe::reinterpret_cast(p)) }"}, {"sha": "ad3ed1f3cfc7b874214d3e0b9cb5bf08846d9388", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -129,7 +129,7 @@ fn from_byte(b: u8) -> str unsafe {\n     assert b < 128u8;\n     let mut v = [b, 0u8];\n     let s: str = ::unsafe::reinterpret_cast(v);\n-    ::unsafe::leak(v);\n+    ::unsafe::forget(v);\n     s\n }\n \n@@ -273,7 +273,7 @@ The result vector is not null-terminated.\n fn bytes(s: str) -> [u8] unsafe {\n     let mut s_copy = s;\n     let mut v: [u8] = ::unsafe::reinterpret_cast(s_copy);\n-    ::unsafe::leak(s_copy);\n+    ::unsafe::forget(s_copy);\n     vec::unsafe::set_len(v, len(s));\n     ret v;\n }\n@@ -1445,7 +1445,7 @@ let i = str::as_bytes(\\\"Hello World\\\") { |bytes| vec::len(bytes) };\n fn as_bytes<T>(s: str, f: fn([u8]) -> T) -> T unsafe {\n     let mut v: [u8] = ::unsafe::reinterpret_cast(s);\n     let r = f(v);\n-    ::unsafe::leak(v);\n+    ::unsafe::forget(v);\n     r\n }\n \n@@ -1517,7 +1517,7 @@ mod unsafe {\n \n         assert is_utf8(v);\n         let s: str = ::unsafe::reinterpret_cast(v);\n-        ::unsafe::leak(v);\n+        ::unsafe::forget(v);\n         ret s;\n     }\n \n@@ -1541,7 +1541,7 @@ mod unsafe {\n    unsafe fn from_bytes(v: [const u8]) -> str unsafe {\n        let mut vcopy: [u8] = v + [0u8];\n        let scopy: str = ::unsafe::reinterpret_cast(vcopy);\n-       ::unsafe::leak(vcopy);\n+       ::unsafe::forget(vcopy);\n        ret scopy;\n    }\n \n@@ -1578,7 +1578,7 @@ mod unsafe {\n        };\n        v += [0u8];\n        let s: str = ::unsafe::reinterpret_cast(v);\n-       ::unsafe::leak(v);\n+       ::unsafe::forget(v);\n        ret s;\n    }\n "}, {"sha": "b7b26c5c4e1f5e021292e5413992cd56cd3f2821", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -504,7 +504,7 @@ fn spawn_raw(opts: task_opts, +f: fn~()) unsafe {\n     }\n \n     rustrt::start_task(new_task, closure);\n-    unsafe::leak(f);\n+    unsafe::forget(f);\n \n     fn new_task_in_new_sched(opts: sched_opts) -> *rust_task {\n         if opts.native_stack_size != none {"}, {"sha": "9a6375345d08315b43bd13e4cc7871a4fac0d0ca", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -1,6 +1,6 @@\n #[doc = \"Unsafe operations\"];\n \n-export reinterpret_cast, leak;\n+export reinterpret_cast, forget;\n \n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n@@ -24,13 +24,13 @@ unsafe fn reinterpret_cast<T, U>(src: T) -> U {\n #[doc =\"\n Move a thing into the void\n \n-The leak function will take ownership of the provided value but neglect\n+The forget function will take ownership of the provided value but neglect\n to run any required cleanup or memory-management operations on it. This\n can be used for various acts of magick, particularly when using\n reinterpret_cast on managed pointer types.\n \"]\n #[inline(always)]\n-unsafe fn leak<T>(-thing: T) { rusti::leak(thing); }\n+unsafe fn forget<T>(-thing: T) { rusti::leak(thing); }\n \n #[cfg(test)]\n mod tests {"}, {"sha": "e726c933532a1bc5b42670ca0e30e562ce63822e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -155,14 +155,14 @@ fn from_elem<T: copy>(n_elts: uint, t: T) -> [T] {\n #[doc = \"Produces a mutable vector from an immutable vector.\"]\n fn to_mut<T>(+v: [T]) -> [mutable T] unsafe {\n     let r = ::unsafe::reinterpret_cast(v);\n-    ::unsafe::leak(v);\n+    ::unsafe::forget(v);\n     r\n }\n \n #[doc = \"Produces an immutable vector from a mutable vector.\"]\n fn from_mut<T>(+v: [mutable T]) -> [T] unsafe {\n     let r = ::unsafe::reinterpret_cast(v);\n-    ::unsafe::leak(v);\n+    ::unsafe::forget(v);\n     r\n }\n "}, {"sha": "982bfe36b0384d5aa319b49aa105cb268623e48f", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -813,12 +813,12 @@ mod node {\n                     offset += 1u;\n                     i      += 1u;\n                 }\n-                unsafe::leak(local_buf);\n+                unsafe::forget(local_buf);\n               }\n             }\n         }\n         let str : str = unsafe::reinterpret_cast(buf);\n-        unsafe::leak(buf);//TODO: Check if this is correct\n+        unsafe::forget(buf);//TODO: Check if this is correct\n         ret str;\n     }\n "}, {"sha": "98b5224f9ff0afc539326777218d14b1fcdd9d15", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -123,7 +123,7 @@ enum debug_metadata {\n fn cast_safely<T: copy, U>(val: T) -> U unsafe {\n     let val2 = val;\n     let val3 = unsafe::reinterpret_cast(val2);\n-    unsafe::leak(val2);\n+    unsafe::forget(val2);\n     ret val3;\n }\n "}, {"sha": "fd9765e3fc340bf93984f85bd62a5bef092f4812", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -220,7 +220,7 @@ type t = *t_opaque;\n pure fn get(t: t) -> t_box unsafe {\n     let t2 = unsafe::reinterpret_cast::<t, t_box>(t);\n     let t3 = t2;\n-    unsafe::leak(t2);\n+    unsafe::forget(t2);\n     t3\n }\n "}, {"sha": "447380663f45c996d4e8e4aef85b576af12c51fd", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181ea415ee283248ecabaa76f0c4c407fec05c1/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=b181ea415ee283248ecabaa76f0c4c407fec05c1", "patch": "@@ -31,6 +31,6 @@ fn main() unsafe {\n     };\n     let fptr = unsafe::reinterpret_cast(ptr::addr_of(f));\n     rustrt::start_task(new_task_id, fptr);\n-    unsafe::leak(f);\n+    unsafe::forget(f);\n     comm::recv(po);\n }\n\\ No newline at end of file"}]}