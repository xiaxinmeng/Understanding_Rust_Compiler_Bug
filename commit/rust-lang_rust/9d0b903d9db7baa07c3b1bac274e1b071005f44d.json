{"sha": "9d0b903d9db7baa07c3b1bac274e1b071005f44d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMGI5MDNkOWRiN2JhYTA3YzNiMWJhYzI3NGUxYjA3MTAwNWY0NGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T09:54:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T09:54:38Z"}, "message": "remove GlobalKind", "tree": {"sha": "d5852a48e8a384508a0d304901e60c744c3edf4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5852a48e8a384508a0d304901e60c744c3edf4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d0b903d9db7baa07c3b1bac274e1b071005f44d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYCeXeAAoJEFbW7qD8Z6xGfC4QAKWy55jxF+twyBONHCOCCwoE\nZ1c0trMHGshrXjf4mkFU3ICmCJg1lNxi49G7KMwhTdFXbf9wMyLacbvxNzDjxRNh\ndKNwyKtrdWwXegxpCUVU6i8tiGXBF8jbUDKT8b6Rc516AExkWZ0Aaup/gAQFLlp1\npV9Kd3nItEmFQMBOcUngLcytMGEv3H/b2NFip3SeuMr9Yl4c76uYai4yFu68y3Mj\njGteSXlS1xui6cN1WZlltoR6a2oplrTOk5u0+DK1cxwtccp/RaTCeWkfbB/lYlim\nBXaKX15+5fbbK+oeX+Y0H31vQvCjxO6wP1VjTecGIrqWijMDPUtbjDeXBWActCVp\nxl3S2+HzeL5TKxl0IyhAwRgcX+RyTE7jFYrTVwmKXeNkeseXv2a+ytMQ65i37K0V\nzCaKrctUk4LTPz31MQSdjNE8nHa9aNhdVCawyMLoKs+88xac6nFUzhJ+oIyJug2W\nNU19E2ohsy3HzqmNxjNoZCGZ02ahBweaNw1N/ejWKRUCP/nzI2ZS6vvKDNU9iG58\nW4vrMkOjMYvAq7pz9ClDpYpiB0yGrmrZ6ekHHTS0zuEeS+tdcSAcKaFON5RUKgtl\njc+iYHpgKdHQc4ZSUd9tUS7tGkNCGNdc4GpAtHcBAsmefYdndr6ykXuA80Dsb2Wc\nhmJzNsZin7Fmo8laNIbE\n=udLu\n-----END PGP SIGNATURE-----", "payload": "tree d5852a48e8a384508a0d304901e60c744c3edf4b\nparent e82e6132ecb4c1c789a6e41e61aba551bb6003df\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477043678 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477043678 +0200\n\nremove GlobalKind"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0b903d9db7baa07c3b1bac274e1b071005f44d", "html_url": "https://github.com/rust-lang/rust/commit/9d0b903d9db7baa07c3b1bac274e1b071005f44d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d0b903d9db7baa07c3b1bac274e1b071005f44d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82e6132ecb4c1c789a6e41e61aba551bb6003df", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82e6132ecb4c1c789a6e41e61aba551bb6003df", "html_url": "https://github.com/rust-lang/rust/commit/e82e6132ecb4c1c789a6e41e61aba551bb6003df"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "1cbfafd10b202fa6cd71eebef4b7fc5c554a4e2c", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b903d9db7baa07c3b1bac274e1b071005f44d/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b903d9db7baa07c3b1bac274e1b071005f44d/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=9d0b903d9db7baa07c3b1bac274e1b071005f44d", "patch": "@@ -141,14 +141,8 @@ pub struct GlobalId<'tcx> {\n     /// but that would only require more branching when working with constants, and not bring any\n     /// real benefits.\n     substs: &'tcx Substs<'tcx>,\n-    kind: GlobalKind,\n-}\n-\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n-enum GlobalKind {\n-    Promoted(mir::Promoted),\n-    /// Statics, constants and associated constants\n-    Global,\n+    /// this `Option` is `Some` for promoted constants\n+    promoted: Option<mir::Promoted>,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -845,7 +839,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             let cid = GlobalId {\n                                 def_id: def_id,\n                                 substs: substs,\n-                                kind: GlobalKind::Global,\n+                                promoted: None,\n                             };\n                             self.read_lvalue(Lvalue::Global(cid))?\n                         }\n@@ -855,7 +849,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let cid = GlobalId {\n                             def_id: self.frame().def_id,\n                             substs: self.substs(),\n-                            kind: GlobalKind::Promoted(index),\n+                            promoted: Some(index),\n                         };\n                         self.read_lvalue(Lvalue::Global(cid))?\n                     }\n@@ -915,7 +909,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let cid = GlobalId {\n                     def_id: def_id,\n                     substs: substs,\n-                    kind: GlobalKind::Global,\n+                    promoted: None,\n                 };\n                 Lvalue::Global(cid)\n             }"}, {"sha": "eac5494f43103b3553225973d56d471fb667a87f", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b903d9db7baa07c3b1bac274e1b071005f44d/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b903d9db7baa07c3b1bac274e1b071005f44d/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=9d0b903d9db7baa07c3b1bac274e1b071005f44d", "patch": "@@ -7,7 +7,6 @@ use super::{\n     GlobalId,\n     EvalContext,\n     Lvalue,\n-    GlobalKind,\n     StackPopCleanup,\n     Global,\n };\n@@ -122,7 +121,7 @@ impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n         let cid = GlobalId {\n             def_id: def_id,\n             substs: substs,\n-            kind: GlobalKind::Global,\n+            promoted: None,\n         };\n         if self.ecx.globals.contains_key(&cid) {\n             return;\n@@ -170,7 +169,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n                 let cid = GlobalId {\n                     def_id: self.def_id,\n                     substs: self.substs,\n-                    kind: GlobalKind::Promoted(index),\n+                    promoted: Some(index),\n                 };\n                 if self.ecx.globals.contains_key(&cid) {\n                     return;"}]}