{"sha": "8d3de56da1eba68d012977d4c743d5eaaa1baee8", "node_id": "C_kwDOAAsO6NoAKDhkM2RlNTZkYTFlYmE2OGQwMTI5NzdkNGM3NDNkNWVhYWExYmFlZTg", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-02-20T00:26:52Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-02-23T12:22:23Z"}, "message": "Continue improvements on the --check-cfg implementation\n\n- Test the combinations of --check-cfg with partial values() and --cfg\n- Test that we detect unexpected value when none are expected", "tree": {"sha": "f9e20f36386f0fcb218504528db33c9ff1561a81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9e20f36386f0fcb218504528db33c9ff1561a81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d3de56da1eba68d012977d4c743d5eaaa1baee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3de56da1eba68d012977d4c743d5eaaa1baee8", "html_url": "https://github.com/rust-lang/rust/commit/8d3de56da1eba68d012977d4c743d5eaaa1baee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d3de56da1eba68d012977d4c743d5eaaa1baee8/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d234770b1c83840d18305e8625da38e97da3174", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d234770b1c83840d18305e8625da38e97da3174", "html_url": "https://github.com/rust-lang/rust/commit/3d234770b1c83840d18305e8625da38e97da3174"}], "stats": {"total": 239, "additions": 184, "deletions": 55}, "files": [{"sha": "50eb6b6e5da52f7cb996047df1499eac2f194dd6", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8d3de56da1eba68d012977d4c743d5eaaa1baee8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3de56da1eba68d012977d4c743d5eaaa1baee8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=8d3de56da1eba68d012977d4c743d5eaaa1baee8", "patch": "@@ -462,7 +462,8 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                 true\n             }\n             MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n-                let name = cfg.ident().expect(\"multi-segment cfg predicate\").name;\n+                let ident = cfg.ident().expect(\"multi-segment cfg predicate\");\n+                let name = ident.name;\n                 let value = cfg.value_str();\n                 if let Some(names_valid) = &sess.check_config.names_valid {\n                     if !names_valid.contains(&name) {\n@@ -471,30 +472,24 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                             cfg.span,\n                             CRATE_NODE_ID,\n                             \"unexpected `cfg` condition name\",\n-                            BuiltinLintDiagnostics::UnexpectedCfg(\n-                                cfg.ident().unwrap().span,\n-                                name,\n-                                None,\n-                            ),\n+                            BuiltinLintDiagnostics::UnexpectedCfg(ident.span, name, None),\n                         );\n                     }\n                 }\n-                if let Some(val) = value {\n-                    if let Some(values_valid) = &sess.check_config.values_valid {\n-                        if let Some(values) = values_valid.get(&name) {\n-                            if !values.contains(&val) {\n-                                sess.buffer_lint_with_diagnostic(\n-                                    UNEXPECTED_CFGS,\n-                                    cfg.span,\n-                                    CRATE_NODE_ID,\n-                                    \"unexpected `cfg` condition value\",\n-                                    BuiltinLintDiagnostics::UnexpectedCfg(\n-                                        cfg.name_value_literal_span().unwrap(),\n-                                        name,\n-                                        Some(val),\n-                                    ),\n-                                );\n-                            }\n+                if let Some(value) = value {\n+                    if let Some(values) = &sess.check_config.values_valid.get(&name) {\n+                        if !values.contains(&value) {\n+                            sess.buffer_lint_with_diagnostic(\n+                                UNEXPECTED_CFGS,\n+                                cfg.span,\n+                                CRATE_NODE_ID,\n+                                \"unexpected `cfg` condition value\",\n+                                BuiltinLintDiagnostics::UnexpectedCfg(\n+                                    cfg.name_value_literal_span().unwrap(),\n+                                    name,\n+                                    Some(value),\n+                                ),\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "91ced2a2d90e21e4f83fdf141a7e552a2aa5991b", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d3de56da1eba68d012977d4c743d5eaaa1baee8/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3de56da1eba68d012977d4c743d5eaaa1baee8/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=8d3de56da1eba68d012977d4c743d5eaaa1baee8", "patch": "@@ -183,12 +183,10 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n                             } else if meta_item.has_name(sym::values) {\n                                 if let Some((name, values)) = args.split_first() {\n                                     if name.is_word() && name.ident().is_some() {\n-                                        let values_valid = cfg\n-                                            .values_valid\n-                                            .get_or_insert_with(|| FxHashMap::default());\n                                         let ident = name.ident().expect(\"multi-segment cfg key\");\n-                                        let ident_values = values_valid\n-                                            .entry(ident.to_string())\n+                                        let ident_values = cfg\n+                                            .values_valid\n+                                            .entry(ident.name.to_string())\n                                             .or_insert_with(|| FxHashSet::default());\n \n                                         for val in values {\n@@ -225,10 +223,8 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n             );\n         }\n \n-        if let Some(values_valid) = &cfg.values_valid {\n-            if let Some(names_valid) = &mut cfg.names_valid {\n-                names_valid.extend(values_valid.keys().cloned());\n-            }\n+        if let Some(names_valid) = &mut cfg.names_valid {\n+            names_valid.extend(cfg.values_valid.keys().cloned());\n         }\n         cfg\n     })"}, {"sha": "5f07cf08c2ea3b4d0ebc9d1ed91a1307fe70691b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8d3de56da1eba68d012977d4c743d5eaaa1baee8/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3de56da1eba68d012977d4c743d5eaaa1baee8/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=8d3de56da1eba68d012977d4c743d5eaaa1baee8", "patch": "@@ -768,35 +768,36 @@ pub trait LintContext: Sized {\n                     db.note(\"see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\");\n                 },\n                 BuiltinLintDiagnostics::UnexpectedCfg(span, name, value) => {\n-                    let mut possibilities: Vec<Symbol> = if value.is_some() {\n-                        let Some(values_valid) = &sess.parse_sess.check_config.values_valid else {\n-                            bug!(\"it shouldn't be possible to have a diagnostic on a value if values checking is not enable\");\n-                        };\n-                        let Some(values) = values_valid.get(&name) else {\n+                    let possibilities: Vec<Symbol> = if value.is_some() {\n+                        let Some(values) = &sess.parse_sess.check_config.values_valid.get(&name) else {\n                             bug!(\"it shouldn't be possible to have a diagnostic on a value whose name is not in values\");\n                         };\n                         values.iter().map(|&s| s).collect()\n                     } else {\n                         let Some(names_valid) = &sess.parse_sess.check_config.names_valid else {\n-                            bug!(\"it shouldn't be possible to have a diagnostic on a value if values checking is not enable\");\n+                            bug!(\"it shouldn't be possible to have a diagnostic on a name if name checking is not enabled\");\n                         };\n                         names_valid.iter().map(|s| *s).collect()\n                     };\n \n                     // Show the full list if all possible values for a given name, but don't do it\n                     // for names as the possibilities could be very long\n                     if value.is_some() {\n-                        // Sorting can take some time, so we only do it if required\n-                        possibilities.sort();\n+                        if !possibilities.is_empty() {\n+                            let mut possibilities = possibilities.iter().map(Symbol::as_str).collect::<Vec<_>>();\n+                            possibilities.sort();\n \n-                        let possibilities = possibilities.iter().map(Symbol::as_str).intersperse(\", \").collect::<String>();\n-                        db.note(&format!(\"possible values for `{name}` are: {possibilities}\"));\n+                            let possibilities = possibilities.join(\", \");\n+                            db.note(&format!(\"expected values for `{name}` are: {possibilities}\"));\n+                        } else {\n+                            db.note(&format!(\"no expected value for `{name}`\"));\n+                        }\n                     }\n \n                     // Suggest the most probable if we found one\n                     if let Some(best_match) = find_best_match_for_name(&possibilities, value.unwrap_or(name), None) {\n-                        let ponctuation = if value.is_some() { \"\\\"\" } else { \"\" };\n-                        db.span_suggestion(span, \"did you mean\", format!(\"{ponctuation}{best_match}{ponctuation}\"), Applicability::MaybeIncorrect);\n+                        let punctuation = if value.is_some() { \"\\\"\" } else { \"\" };\n+                        db.span_suggestion(span, \"did you mean\", format!(\"{punctuation}{best_match}{punctuation}\"), Applicability::MaybeIncorrect);\n                     }\n                 },\n             }"}, {"sha": "f9b75690e375fd253c97632dfe61ebb302486813", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8d3de56da1eba68d012977d4c743d5eaaa1baee8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3de56da1eba68d012977d4c743d5eaaa1baee8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=8d3de56da1eba68d012977d4c743d5eaaa1baee8", "patch": "@@ -1023,10 +1023,10 @@ pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> CrateConfig\n \n /// The parsed `--check-cfg` options\n pub struct CheckCfg<T = String> {\n-    /// The set of all `names()`, if none no names checking is performed\n+    /// The set of all `names()`, if None no name checking is performed\n     pub names_valid: Option<FxHashSet<T>>,\n-    /// The set of all `values()`, if none no values chcking is performed\n-    pub values_valid: Option<FxHashMap<T, FxHashSet<T>>>,\n+    /// The set of all `values()`\n+    pub values_valid: FxHashMap<T, FxHashSet<T>>,\n }\n \n impl<T> Default for CheckCfg<T> {\n@@ -1042,9 +1042,11 @@ impl<T> CheckCfg<T> {\n                 .names_valid\n                 .as_ref()\n                 .map(|names_valid| names_valid.iter().map(|a| f(a)).collect()),\n-            values_valid: self.values_valid.as_ref().map(|values_valid| {\n-                values_valid.iter().map(|(a, b)| (f(a), b.iter().map(|b| f(b)).collect())).collect()\n-            }),\n+            values_valid: self\n+                .values_valid\n+                .iter()\n+                .map(|(a, b)| (f(a), b.iter().map(|b| f(b)).collect()))\n+                .collect(),\n         }\n     }\n }\n@@ -1098,11 +1100,9 @@ impl CrateCheckConfig {\n                 names_valid.insert(k);\n             }\n             if let Some(v) = v {\n-                if let Some(values_valid) = &mut self.values_valid {\n-                    values_valid.entry(k).and_modify(|values| {\n-                        values.insert(v);\n-                    });\n-                }\n+                self.values_valid.entry(k).and_modify(|values| {\n+                    values.insert(v);\n+                });\n             }\n         }\n     }"}, {"sha": "bc2c053fed65a7efe775289b476008995feea887", "filename": "src/test/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=8d3de56da1eba68d012977d4c743d5eaaa1baee8", "patch": "@@ -5,7 +5,7 @@ LL | #[cfg(feature = \"sedre\")]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n-   = note: possible values for `feature` are: rand, serde, full\n+   = note: expected values for `feature` are: full, rand, serde\n \n warning: 1 warning emitted\n "}, {"sha": "26c735c4a10bd72df1797a7a73f79a1ec500cfc2", "filename": "src/test/ui/check-cfg/mix.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs?ref=8d3de56da1eba68d012977d4c743d5eaaa1baee8", "patch": "@@ -0,0 +1,50 @@\n+// This test checks the combination of well known names, their activation via names(), the usage of\n+// partial values() with a --cfg and test that we also correctly lint on the `cfg!` macro and\n+// `cfg_attr` attribute.\n+//\n+// check-pass\n+// compile-flags: --check-cfg=names() --check-cfg=values(feature,\"foo\") --cfg feature=\"bar\" -Z unstable-options\n+\n+#[cfg(windows)]\n+fn do_windows_stuff() {}\n+\n+#[cfg(widnows)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn do_windows_stuff() {}\n+\n+#[cfg(feature = \"foo\")]\n+fn use_foo() {}\n+\n+#[cfg(feature = \"bar\")]\n+fn use_bar() {}\n+\n+#[cfg(feature = \"zebra\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn use_zebra() {}\n+\n+#[cfg_attr(uu, test)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn do_test() {}\n+\n+#[cfg_attr(feature = \"foo\", no_mangle)]\n+fn do_test_foo() {}\n+\n+fn test_cfg_macro() {\n+    cfg!(windows);\n+    cfg!(widnows);\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(feature = \"foo\");\n+    cfg!(feature = \"bar\");\n+    cfg!(feature = \"zebra\");\n+    //~^ WARNING unexpected `cfg` condition value\n+    cfg!(xxx = \"foo\");\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(xxx);\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(any(xxx, windows));\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(any(feature = \"bad\", windows));\n+    //~^ WARNING unexpected `cfg` condition value\n+}\n+\n+fn main() {}"}, {"sha": "b273be774224d24b212b9384393159f91adabee6", "filename": "src/test/ui/check-cfg/mix.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr?ref=8d3de56da1eba68d012977d4c743d5eaaa1baee8", "patch": "@@ -0,0 +1,66 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:11:7\n+   |\n+LL | #[cfg(widnows)]\n+   |       ^^^^^^^ help: did you mean: `windows`\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:21:7\n+   |\n+LL | #[cfg(feature = \"zebra\")]\n+   |       ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:25:12\n+   |\n+LL | #[cfg_attr(uu, test)]\n+   |            ^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:34:10\n+   |\n+LL |     cfg!(widnows);\n+   |          ^^^^^^^ help: did you mean: `windows`\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:38:10\n+   |\n+LL |     cfg!(feature = \"zebra\");\n+   |          ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:40:10\n+   |\n+LL |     cfg!(xxx = \"foo\");\n+   |          ^^^^^^^^^^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:42:10\n+   |\n+LL |     cfg!(xxx);\n+   |          ^^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:44:14\n+   |\n+LL |     cfg!(any(xxx, windows));\n+   |              ^^^\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:46:14\n+   |\n+LL |     cfg!(any(feature = \"bad\", windows));\n+   |              ^^^^^^^^^^-----\n+   |                        |\n+   |                        help: did you mean: `\"bar\"`\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: 9 warnings emitted\n+"}, {"sha": "2440757e52da994e1c516c3b434b8c212310105a", "filename": "src/test/ui/check-cfg/no-values.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.rs?ref=8d3de56da1eba68d012977d4c743d5eaaa1baee8", "patch": "@@ -0,0 +1,10 @@\n+// Check that we detect unexpected value when none are allowed\n+//\n+// check-pass\n+// compile-flags: --check-cfg=values(feature) -Z unstable-options\n+\n+#[cfg(feature = \"foo\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn do_foo() {}\n+\n+fn main() {}"}, {"sha": "ea1c9107d4c2ffb1137e5c67411c7c4ce90f3334", "filename": "src/test/ui/check-cfg/no-values.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d3de56da1eba68d012977d4c743d5eaaa1baee8/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr?ref=8d3de56da1eba68d012977d4c743d5eaaa1baee8", "patch": "@@ -0,0 +1,11 @@\n+warning: unexpected `cfg` condition value\n+  --> $DIR/no-values.rs:6:7\n+   |\n+LL | #[cfg(feature = \"foo\")]\n+   |       ^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: no expected value for `feature`\n+\n+warning: 1 warning emitted\n+"}]}