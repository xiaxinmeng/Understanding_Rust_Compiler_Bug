{"sha": "5827b5a4bd0bb35251da12fc972aa1d5a210116f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MjdiNWE0YmQwYmIzNTI1MWRhMTJmYzk3MmFhMWQ1YTIxMDExNmY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-07T16:50:45Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-07T17:41:42Z"}, "message": "ty: add `MAY_POLYMORPHIZE` flag\n\nThis commit adds a `MAY_POLYMORPHIZE` which checks for closures and\ngenerators so that polymorphization of substs does not need to traverse\nevery substs.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "84a48d5d8fedc42fb823604e5d1e84a7c8950db5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84a48d5d8fedc42fb823604e5d1e84a7c8950db5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5827b5a4bd0bb35251da12fc972aa1d5a210116f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8tklYACgkQJZLnbIc4\nH9ldyw//VcVOijoLjUKwDEN59Kldykk1ejx6vjmwvC5u0Fu2b9fnxZbFeoZf9EzW\nG6dNgdf3FwecFcLYpDJM2dYE68rRrvEGbVnK73Q85mTzi1JOYgC3sweKnuUQqCP5\nSztvcsnYmFTXHyrbnn5CYsbLtqMnac0gG8LMEh0GGSN0n7iW/9S+XpbUCZOWn+3o\nXKDRZpQjIoBHAJk9nR0Dk9mYWFz03iiNpHmv3vjHMy66PdnhVMwwZBMQMFDtMpL+\nKB/Zzdm68FXzeLWTpeSEtIcHnwGG/awPnMfR326cIFb9Esr078O1JrdG+yuql/M3\nGqoQ/qTTj3UiCviWOsGGidO7oBlVuH14yn5EG8zyMeAoKFugZwYD07LU9SJ6lDTc\nY+Abn9WsAqG6qQAf3wkje28V/oFj0QVL45zKuEFfic33kXXsX65Xn7GdxXK/YEe2\nAI+Nu3VwmSIsz1+swmaaS4P5jvuYV73nFe5Jd6+IOIM+yACRz65WNlXUvSv2pEjV\nJZycKb39/nmNRK5HMMCirBKOphQ37sZc0yp5Zpy5jtGQorr8aGS/KRu2zBnZ4kpc\nWhGkAvaqkxds0ErZkrM0tLQek8LTz/pR+/AQ8E4+2nzfuzOuJWyEz77M9D6OyBlZ\nbtbhcRPlBvSzMwk3ZtAnv/wi0IdM2iTBwrnRSYFSDGw0mjNlJcg=\n=EpYf\n-----END PGP SIGNATURE-----", "payload": "tree 84a48d5d8fedc42fb823604e5d1e84a7c8950db5\nparent 0d9924a87b862529591c3039959fef5bc7c95359\nauthor David Wood <david@davidtw.co> 1596819045 +0100\ncommitter David Wood <david@davidtw.co> 1596822102 +0100\n\nty: add `MAY_POLYMORPHIZE` flag\n\nThis commit adds a `MAY_POLYMORPHIZE` which checks for closures and\ngenerators so that polymorphization of substs does not need to traverse\nevery substs.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5827b5a4bd0bb35251da12fc972aa1d5a210116f", "html_url": "https://github.com/rust-lang/rust/commit/5827b5a4bd0bb35251da12fc972aa1d5a210116f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5827b5a4bd0bb35251da12fc972aa1d5a210116f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9924a87b862529591c3039959fef5bc7c95359", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9924a87b862529591c3039959fef5bc7c95359", "html_url": "https://github.com/rust-lang/rust/commit/0d9924a87b862529591c3039959fef5bc7c95359"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "1782c38f5739bc4d7d80f24f9128e53c61577abf", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5827b5a4bd0bb35251da12fc972aa1d5a210116f/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5827b5a4bd0bb35251da12fc972aa1d5a210116f/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=5827b5a4bd0bb35251da12fc972aa1d5a210116f", "patch": "@@ -85,6 +85,8 @@ impl FlagComputation {\n             }\n \n             &ty::Generator(_, ref substs, _) => {\n+                self.add_flags(TypeFlags::MAY_POLYMORPHIZE);\n+\n                 let substs = substs.as_generator();\n                 let should_remove_further_specializable =\n                     !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n@@ -107,6 +109,8 @@ impl FlagComputation {\n             }\n \n             &ty::Closure(_, substs) => {\n+                self.add_flags(TypeFlags::MAY_POLYMORPHIZE);\n+\n                 let substs = substs.as_closure();\n                 let should_remove_further_specializable =\n                     !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);"}, {"sha": "c7dbd79e0330d535557304ee3e181eabd54bb871", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5827b5a4bd0bb35251da12fc972aa1d5a210116f/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5827b5a4bd0bb35251da12fc972aa1d5a210116f/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=5827b5a4bd0bb35251da12fc972aa1d5a210116f", "patch": "@@ -150,6 +150,12 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE)\n     }\n \n+    /// Does this value contain closures or generators such that it may require\n+    /// polymorphization?\n+    fn may_polymorphize(&self) -> bool {\n+        self.has_type_flags(TypeFlags::MAY_POLYMORPHIZE)\n+    }\n+\n     /// A visitor that does not recurse into types, works like `fn walk_shallow` in `Ty`.\n     fn visit_tys_shallow(&self, visit: impl FnMut(Ty<'tcx>) -> bool) -> bool {\n         pub struct Visitor<F>(F);"}, {"sha": "439e35c9757819024dbd61de1c9757d9f7f3d657", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5827b5a4bd0bb35251da12fc972aa1d5a210116f/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5827b5a4bd0bb35251da12fc972aa1d5a210116f/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=5827b5a4bd0bb35251da12fc972aa1d5a210116f", "patch": "@@ -528,7 +528,11 @@ fn polymorphize<'tcx>(\n                     // ..then use the identity for this parameter.\n                     tcx.mk_param_from_def(param),\n \n-            // Otherwise, use the parameter as before (polymorphizing any closures or generators).\n+            // If the parameter does not contain any closures or generators, then use the\n+            // substitution directly.\n+            _ if !substs.may_polymorphize() => substs[param.index as usize],\n+\n+            // Otherwise, use the substitution after polymorphizing.\n             _ => {\n                 let arg = substs[param.index as usize];\n                 let polymorphized_arg = arg.fold_with(&mut PolymorphizationFolder { tcx });"}, {"sha": "349add46fb28d0ba3fec0e2e96b7951f2d12631c", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5827b5a4bd0bb35251da12fc972aa1d5a210116f/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5827b5a4bd0bb35251da12fc972aa1d5a210116f/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=5827b5a4bd0bb35251da12fc972aa1d5a210116f", "patch": "@@ -575,6 +575,10 @@ bitflags! {\n         /// Does this value have parameters/placeholders/inference variables which could be\n         /// replaced later, in a way that would change the results of `impl` specialization?\n         const STILL_FURTHER_SPECIALIZABLE = 1 << 17;\n+\n+        /// Does this value contain closures or generators such that it may require\n+        /// polymorphization?\n+        const MAY_POLYMORPHIZE = 1 << 18;\n     }\n }\n "}]}