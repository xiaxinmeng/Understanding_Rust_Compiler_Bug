{"sha": "0e602f10b55da3b751859d862a8cddba719ecd6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNjAyZjEwYjU1ZGEzYjc1MTg1OWQ4NjJhOGNkZGJhNzE5ZWNkNmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T20:30:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T20:30:19Z"}, "message": "replace match by ok()", "tree": {"sha": "90b8fb7ef24a44bc1dd28cc3eba9bd7d1abf855e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b8fb7ef24a44bc1dd28cc3eba9bd7d1abf855e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e602f10b55da3b751859d862a8cddba719ecd6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e602f10b55da3b751859d862a8cddba719ecd6f", "html_url": "https://github.com/rust-lang/rust/commit/0e602f10b55da3b751859d862a8cddba719ecd6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e602f10b55da3b751859d862a8cddba719ecd6f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c119291b55f2a14a2b0e13fbd3d54a9692f1066f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c119291b55f2a14a2b0e13fbd3d54a9692f1066f", "html_url": "https://github.com/rust-lang/rust/commit/c119291b55f2a14a2b0e13fbd3d54a9692f1066f"}], "stats": {"total": 10, "additions": 2, "deletions": 8}, "files": [{"sha": "e3f16a3c9ea452432b33ed47ebd2b70b0c8e6dcf", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e602f10b55da3b751859d862a8cddba719ecd6f/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e602f10b55da3b751859d862a8cddba719ecd6f/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=0e602f10b55da3b751859d862a8cddba719ecd6f", "patch": "@@ -57,18 +57,12 @@ pub trait AllocMap<K: Hash + Eq, V> {\n \n     /// Read-only lookup.\n     fn get(&self, k: K) -> Option<&V> {\n-        match self.get_or(k, || Err(())) {\n-            Ok(v) => Some(v),\n-            Err(()) => None,\n-        }\n+        self.get_or(k, || Err(())).ok()\n     }\n \n     /// Mutable lookup.\n     fn get_mut(&mut self, k: K) -> Option<&mut V> {\n-        match self.get_mut_or(k, || Err(())) {\n-            Ok(v) => Some(v),\n-            Err(()) => None,\n-        }\n+        self.get_mut_or(k, || Err(())).ok()\n     }\n }\n "}]}