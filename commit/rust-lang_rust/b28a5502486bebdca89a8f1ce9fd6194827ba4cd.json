{"sha": "b28a5502486bebdca89a8f1ce9fd6194827ba4cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOGE1NTAyNDg2YmViZGNhODlhOGYxY2U5ZmQ2MTk0ODI3YmE0Y2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-14T13:04:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-14T13:04:53Z"}, "message": "Auto merge of #28909 - GuillaumeGomez:patch-3, r=pnkfelix\n\nr? @Manishearth", "tree": {"sha": "cb48f7e6d19fac96df8fb02df7a20a5ad473ba23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb48f7e6d19fac96df8fb02df7a20a5ad473ba23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b28a5502486bebdca89a8f1ce9fd6194827ba4cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b28a5502486bebdca89a8f1ce9fd6194827ba4cd", "html_url": "https://github.com/rust-lang/rust/commit/b28a5502486bebdca89a8f1ce9fd6194827ba4cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b28a5502486bebdca89a8f1ce9fd6194827ba4cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a668dd2a563796d6ab94a385e5a49a619c53e8ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a668dd2a563796d6ab94a385e5a49a619c53e8ce", "html_url": "https://github.com/rust-lang/rust/commit/a668dd2a563796d6ab94a385e5a49a619c53e8ce"}, {"sha": "4618aada4d95d0c23c14eb8b843902858e7f2be4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4618aada4d95d0c23c14eb8b843902858e7f2be4", "html_url": "https://github.com/rust-lang/rust/commit/4618aada4d95d0c23c14eb8b843902858e7f2be4"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "2ad2e7528e442be491b35512d349bd8cb9354cb3", "filename": "src/librustc_trans/diagnostics.rs", "status": "modified", "additions": 93, "deletions": 7, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/b28a5502486bebdca89a8f1ce9fd6194827ba4cd/src%2Flibrustc_trans%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28a5502486bebdca89a8f1ce9fd6194827ba4cd/src%2Flibrustc_trans%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdiagnostics.rs?ref=b28a5502486bebdca89a8f1ce9fd6194827ba4cd", "patch": "@@ -12,6 +12,98 @@\n \n register_long_diagnostics! {\n \n+E0510: r##\"\n+`return_address` was used in an invalid context. Erroneous code example:\n+\n+```\n+extern \"rust-intrinsic\" {\n+    fn return_address() -> *const u8;\n+}\n+\n+pub unsafe fn by_value() -> i32 {\n+    let _ = return_address();\n+    // error: invalid use of `return_address` intrinsic: function does\n+    //        not use out pointer\n+    0\n+}\n+```\n+\n+Return values may be stored in a return register(s) or written into a so-called\n+out pointer. In case the returned value is too big (this is\n+target-ABI-dependent and generally not portable or future proof) to fit into\n+the return register(s), the compiler will return the value by writing it into\n+space allocated in the caller's stack frame. Example:\n+\n+```\n+extern \"rust-intrinsic\" {\n+    fn return_address() -> *const u8;\n+}\n+\n+pub unsafe fn by_pointer() -> String {\n+    let _ = return_address();\n+    String::new() // ok!\n+}\n+```\n+\"##,\n+\n+E0511: r##\"\n+Invalid monomorphization of an intrinsic function was used. Erroneous code\n+example:\n+\n+```\n+extern \"platform-intrinsic\" {\n+    fn simd_add<T>(a: T, b: T) -> T;\n+}\n+\n+unsafe { simd_add(0, 1); }\n+// error: invalid monomorphization of `simd_add` intrinsic\n+```\n+\n+The generic type has to be a SIMD type. Example:\n+\n+```\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct i32x1(i32);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_add<T>(a: T, b: T) -> T;\n+}\n+\n+unsafe { simd_add(i32x1(0), i32x1(1)); } // ok!\n+```\n+\"##,\n+\n+E0512: r##\"\n+Transmute with two differently sized types was attempted. Erroneous code\n+example:\n+\n+```\n+extern \"rust-intrinsic\" {\n+    pub fn ctpop8(x: u8) -> u8;\n+}\n+\n+fn main() {\n+    unsafe { ctpop8(::std::mem::transmute(0u16)); }\n+    // error: transmute called with differently sized types\n+}\n+```\n+\n+Please use types with same size or use the expected type directly. Example:\n+\n+```\n+extern \"rust-intrinsic\" {\n+    pub fn ctpop8(x: u8) -> u8;\n+}\n+\n+fn main() {\n+    unsafe { ctpop8(::std::mem::transmute(0i8)); } // ok!\n+    // or:\n+    unsafe { ctpop8(0u8); } // ok!\n+}\n+```\n+\"##,\n+\n E0515: r##\"\n A constant index expression was out of bounds. Erroneous code example:\n \n@@ -23,14 +115,8 @@ Please specify a valid index (not inferior to 0 or superior to array length).\n Example:\n \n ```\n-let x = &[0, 1, 2][2]; // ok!\n+let x = &[0, 1, 2][2]; // ok\n ```\n \"##,\n \n }\n-\n-register_diagnostics! {\n-    E0510, // invalid use of `return_address` intrinsic: function does not use out pointer\n-    E0511, // invalid monomorphization of `{}` intrinsic\n-    E0512, // transmute called on types with potentially different sizes...\n-}"}]}