{"sha": "8da8a4a018bad826940fa3d5617e54f4b9ec8fb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYThhNGEwMThiYWQ4MjY5NDBmYTNkNTYxN2U1NGY0YjllYzhmYjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T18:43:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T18:43:07Z"}, "message": "rustc: Extract error reporting from codemap", "tree": {"sha": "e29eb49f8bd055ca93e1c614ef0f0e26ec4de55d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e29eb49f8bd055ca93e1c614ef0f0e26ec4de55d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8da8a4a018bad826940fa3d5617e54f4b9ec8fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8da8a4a018bad826940fa3d5617e54f4b9ec8fb3", "html_url": "https://github.com/rust-lang/rust/commit/8da8a4a018bad826940fa3d5617e54f4b9ec8fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8da8a4a018bad826940fa3d5617e54f4b9ec8fb3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2a3270b9c6104136637a8f03e4baa9b52c0d36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a3270b9c6104136637a8f03e4baa9b52c0d36a", "html_url": "https://github.com/rust-lang/rust/commit/f2a3270b9c6104136637a8f03e4baa9b52c0d36a"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "5156570c8bae1871ff65166115bb5057b29b4c98", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8da8a4a018bad826940fa3d5617e54f4b9ec8fb3/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da8a4a018bad826940fa3d5617e54f4b9ec8fb3/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=8da8a4a018bad826940fa3d5617e54f4b9ec8fb3", "patch": "@@ -92,25 +92,54 @@ fn span_to_str(sp: span, cm: codemap) -> str {\n     ret res;\n }\n \n-fn emit_diagnostic(sp: option::t<span>, msg: str, kind: str, color: u8,\n+tag diagnostictype {\n+    warning;\n+    error;\n+    note;\n+}\n+\n+fn diagnosticstr(t: diagnostictype) -> str {\n+    alt t {\n+      warning. { \"warning\" }\n+      error. { \"error\" }\n+      note. { \"note\" }\n+    }\n+}\n+\n+fn diagnosticcolor(t: diagnostictype) -> u8 {\n+    alt t {\n+      warning. { term::color_bright_yellow }\n+      error. { term::color_bright_red }\n+      note. { term::color_bright_green }\n+    }\n+}\n+\n+fn print_diagnostic(topic: str, t: diagnostictype, msg: str) {\n+    if str::is_not_empty(topic) {\n+        io::stdout().write_str(#fmt[\"%s \", topic]);\n+    }\n+    if term::color_supported() {\n+        term::fg(io::stdout().get_buf_writer(), diagnosticcolor(t));\n+    }\n+    io::stdout().write_str(#fmt[\"%s:\", diagnosticstr(t)]);\n+    if term::color_supported() {\n+        term::reset(io::stdout().get_buf_writer());\n+    }\n+    io::stdout().write_str(#fmt[\" %s\\n\", msg]);\n+}\n+\n+fn emit_diagnostic(sp: option::t<span>, msg: str, t: diagnostictype,\n                    cm: codemap) {\n     let ss = \"\";\n     let maybe_lines: option::t<@file_lines> = none;\n     alt sp {\n       some(ssp) {\n-        ss = span_to_str(ssp, cm) + \" \";\n+        ss = span_to_str(ssp, cm);\n         maybe_lines = some(span_to_lines(ssp, cm));\n       }\n       none. { }\n     }\n-    io::stdout().write_str(ss);\n-    if term::color_supported() {\n-        term::fg(io::stdout().get_buf_writer(), color);\n-    }\n-    io::stdout().write_str(#fmt[\"%s:\", kind]);\n-    if term::color_supported() { term::reset(io::stdout().get_buf_writer()); }\n-    io::stdout().write_str(#fmt[\" %s\\n\", msg]);\n-\n+    print_diagnostic(ss, t, msg);\n     maybe_highlight_lines(sp, cm, maybe_lines);\n }\n \n@@ -183,13 +212,13 @@ fn maybe_highlight_lines(sp: option::t<span>, cm: codemap,\n }\n \n fn emit_warning(sp: option::t<span>, msg: str, cm: codemap) {\n-    emit_diagnostic(sp, msg, \"warning\", term::color_bright_yellow, cm);\n+    emit_diagnostic(sp, msg, warning, cm);\n }\n fn emit_error(sp: option::t<span>, msg: str, cm: codemap) {\n-    emit_diagnostic(sp, msg, \"error\", term::color_bright_red, cm);\n+    emit_diagnostic(sp, msg, error, cm);\n }\n fn emit_note(sp: option::t<span>, msg: str, cm: codemap) {\n-    emit_diagnostic(sp, msg, \"note\", term::color_bright_green, cm);\n+    emit_diagnostic(sp, msg, note, cm);\n }\n \n type file_lines = {name: str, lines: [uint]};"}]}