{"sha": "1c8e658820a7ed1127c52006265c1f771bafc17b", "node_id": "C_kwDOAAsO6NoAKDFjOGU2NTg4MjBhN2VkMTEyN2M1MjAwNjI2NWMxZjc3MWJhZmMxN2I", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-26T22:01:00Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-29T21:04:10Z"}, "message": "Use LanguageItems::require less", "tree": {"sha": "d6f28098aa96481d1147f97ae096471117e52d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6f28098aa96481d1147f97ae096471117e52d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c8e658820a7ed1127c52006265c1f771bafc17b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8e658820a7ed1127c52006265c1f771bafc17b", "html_url": "https://github.com/rust-lang/rust/commit/1c8e658820a7ed1127c52006265c1f771bafc17b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c8e658820a7ed1127c52006265c1f771bafc17b/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6180ede5cd3e2c471831ead520c4ac3e7ef6b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68", "html_url": "https://github.com/rust-lang/rust/commit/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68"}], "stats": {"total": 79, "additions": 34, "deletions": 45}, "files": [{"sha": "39b178f5976b8abfaa9ef6d1926697282a23f5a3", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -23,7 +23,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n-use rustc_hir::lang_items::LangItem;\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n@@ -884,9 +883,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        let sized_def_id = tcx.lang_items().require(LangItem::Sized);\n+        let sized_def_id = tcx.lang_items().sized_trait();\n         match (&sized_def_id, unbound) {\n-            (Ok(sized_def_id), Some(tpb))\n+            (Some(sized_def_id), Some(tpb))\n                 if tpb.path.res == Res::Def(DefKind::Trait, *sized_def_id) =>\n             {\n                 // There was in fact a `?Sized` bound, return without doing anything\n@@ -906,7 +905,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // There was no `?Sized` bound; add implicitly sized if `Sized` is available.\n             }\n         }\n-        if sized_def_id.is_err() {\n+        if sized_def_id.is_none() {\n             // No lang item for `Sized`, so we can't add it as a bound.\n             return;\n         }"}, {"sha": "8e24f4813a7e8e0dcc8f73727d42a3ed7c9ee41e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -2456,7 +2456,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {\n-        let def_id = self.lang_items().require(item).ok()?;\n+        let def_id = self.lang_items().get(item)?;\n         Some(self.mk_generic_adt(def_id, ty))\n     }\n "}, {"sha": "d7606d88803dc2229fa3e1a08f2d390ca5fbc1c9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -1019,7 +1019,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let mut never_suggest_borrow: Vec<_> =\n             [LangItem::Copy, LangItem::Clone, LangItem::Unpin, LangItem::Sized]\n                 .iter()\n-                .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n+                .filter_map(|lang_item| self.tcx.lang_items().get(*lang_item))\n                 .collect();\n \n         if let Some(def_id) = self.tcx.get_diagnostic_item(sym::Send) {"}, {"sha": "54c316358a14b161ec9fc75a28239c15ebc27cf0", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -6,11 +6,12 @@ use rustc_hir::intravisit::{\n     walk_fn_decl, walk_generic_param, walk_generics, walk_impl_item_ref, walk_item, walk_param_bound,\n     walk_poly_trait_ref, walk_trait_ref, walk_ty, Visitor,\n };\n+use rustc_hir::lang_items;\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin, TraitFn,\n-    TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin, TraitFn, TraitItem,\n+    TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -364,8 +365,6 @@ fn unique_lifetimes(lts: &[RefLt]) -> usize {\n     lts.iter().collect::<FxHashSet<_>>().len()\n }\n \n-const CLOSURE_TRAIT_BOUNDS: [LangItem; 3] = [LangItem::Fn, LangItem::FnMut, LangItem::FnOnce];\n-\n /// A visitor usable for `rustc_front::visit::walk_ty()`.\n struct RefVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n@@ -424,12 +423,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n     fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>) {\n         let trait_ref = &poly_tref.trait_ref;\n-        if CLOSURE_TRAIT_BOUNDS.iter().any(|&item| {\n-            self.cx\n-                .tcx\n-                .lang_items()\n-                .require(item)\n-                .map_or(false, |id| Some(id) == trait_ref.trait_def_id())\n+        if let Some(id) = trait_ref.trait_def_id() && lang_items::FN_TRAITS.iter().any(|&item| {\n+            self.cx.tcx.lang_items().get(item) == Some(id)\n         }) {\n             let mut sub_visitor = RefVisitor::new(self.cx);\n             sub_visitor.visit_trait_ref(trait_ref);"}, {"sha": "6abbab278feb4e5306de1fb84c19de0c42781440", "filename": "src/tools/clippy/clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -92,7 +92,7 @@ fn check_into_iter(\n         && match_def_path(cx, filter_def_id, &paths::CORE_ITER_FILTER)\n         && let hir::ExprKind::MethodCall(_, struct_expr, [], _) = &into_iter_expr.kind\n         && let Some(into_iter_def_id) = cx.typeck_results().type_dependent_def_id(into_iter_expr.hir_id)\n-        && cx.tcx.lang_items().require(hir::LangItem::IntoIterIntoIter).ok() == Some(into_iter_def_id)\n+        && Some(into_iter_def_id) == cx.tcx.lang_items().into_iter_fn()\n         && match_acceptable_type(cx, left_expr, msrv)\n         && SpanlessEq::new(cx).eq_expr(left_expr, struct_expr) {\n         suggest(cx, parent_expr, left_expr, target_expr);"}, {"sha": "4720a6e6888b88dc8a710b5ca497c3527cfdab34", "filename": "src/tools/clippy/clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -41,7 +41,7 @@ pub(crate) trait BindInsteadOfMap {\n     const GOOD_METHOD_NAME: &'static str;\n \n     fn no_op_msg(cx: &LateContext<'_>) -> Option<String> {\n-        let variant_id = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM).ok()?;\n+        let variant_id = cx.tcx.lang_items().get(Self::VARIANT_LANG_ITEM)?;\n         let item_id = cx.tcx.parent(variant_id);\n         Some(format!(\n             \"using `{}.{}({})`, which is a no-op\",\n@@ -52,7 +52,7 @@ pub(crate) trait BindInsteadOfMap {\n     }\n \n     fn lint_msg(cx: &LateContext<'_>) -> Option<String> {\n-        let variant_id = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM).ok()?;\n+        let variant_id = cx.tcx.lang_items().get(Self::VARIANT_LANG_ITEM)?;\n         let item_id = cx.tcx.parent(variant_id);\n         Some(format!(\n             \"using `{}.{}(|x| {}(y))`, which is more succinctly expressed as `{}(|x| y)`\",\n@@ -144,7 +144,7 @@ pub(crate) trait BindInsteadOfMap {\n     fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) -> bool {\n         if_chain! {\n             if let Some(adt) = cx.typeck_results().expr_ty(recv).ty_adt_def();\n-            if let Ok(vid) = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM);\n+            if let Some(vid) = cx.tcx.lang_items().get(Self::VARIANT_LANG_ITEM);\n             if adt.did() == cx.tcx.parent(vid);\n             then {} else { return false; }\n         }\n@@ -181,7 +181,7 @@ pub(crate) trait BindInsteadOfMap {\n \n     fn is_variant(cx: &LateContext<'_>, res: Res) -> bool {\n         if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Fn), id) = res {\n-            if let Ok(variant_id) = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM) {\n+            if let Some(variant_id) = cx.tcx.lang_items().get(Self::VARIANT_LANG_ITEM) {\n                 return cx.tcx.parent(id) == variant_id;\n             }\n         }"}, {"sha": "4eb579af7a12a9d78569377f7dcca5e9c7974149", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait};\n use clippy_utils::{fn_def_id, get_parent_expr};\n use rustc_errors::Applicability;\n-use rustc_hir::{def_id::DefId, Expr, ExprKind, LangItem};\n+use rustc_hir::{def_id::DefId, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_span::{sym, Symbol};\n \n@@ -100,5 +100,5 @@ pub fn check_for_loop_iter(\n \n /// Returns true if the named method is `IntoIterator::into_iter`.\n pub fn is_into_iter(cx: &LateContext<'_>, callee_def_id: DefId) -> bool {\n-    cx.tcx.lang_items().require(LangItem::IntoIterIntoIter) == Ok(callee_def_id)\n+    Some(callee_def_id) == cx.tcx.lang_items().into_iter_fn()\n }"}, {"sha": "642a64ae77b6dd84ad91594dab3198a657a89bc1", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::visitors::find_all_ret_expressions;\n use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item, return_ty};\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n-use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, LangItem, Node};\n+use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, Node};\n use rustc_hir_typeck::{FnCtxt, Inherited};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n@@ -378,7 +378,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Expr(parent_expr) => {\n                 if let Some((callee_def_id, call_substs, recv, call_args)) = get_callee_substs_and_args(cx, parent_expr)\n                 {\n-                    if cx.tcx.lang_items().require(LangItem::IntoFutureIntoFuture) == Ok(callee_def_id) {\n+                    if Some(callee_def_id) == cx.tcx.lang_items().into_future_fn() {\n                         return false;\n                     }\n "}, {"sha": "9bbf385fb5999938ff3d22c429f8ad6f14346c68", "filename": "src/tools/clippy/clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -28,7 +28,7 @@ pub(super) fn check<'tcx>(\n             let rty = cx.typeck_results().expr_ty(rhs);\n             if_chain! {\n                 if let Some((_, lang_item)) = binop_traits(op.node);\n-                if let Ok(trait_id) = cx.tcx.lang_items().require(lang_item);\n+                if let Some(trait_id) = cx.tcx.lang_items().get(lang_item);\n                 let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id).def_id;\n                 if trait_ref_of_method(cx, parent_fn)\n                     .map_or(true, |t| t.path.res.def_id() != trait_id);"}, {"sha": "6271ea0273140e02193599843fb8bb1d8ebc23a0", "filename": "src/tools/clippy/clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -60,8 +60,8 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n         if_chain! {\n             if let hir::ExprKind::Binary(binop, _, _) | hir::ExprKind::AssignOp(binop, ..) = expr.kind;\n             if let Some((binop_trait_lang, op_assign_trait_lang)) = binop_traits(binop.node);\n-            if let Ok(binop_trait_id) = cx.tcx.lang_items().require(binop_trait_lang);\n-            if let Ok(op_assign_trait_id) = cx.tcx.lang_items().require(op_assign_trait_lang);\n+            if let Some(binop_trait_id) = cx.tcx.lang_items().get(binop_trait_lang);\n+            if let Some(op_assign_trait_id) = cx.tcx.lang_items().get(op_assign_trait_lang);\n \n             // Check for more than one binary operation in the implemented function\n             // Linting when multiple operations are involved can result in false positives\n@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n                 (&OP_ASSIGN_TRAITS, SUSPICIOUS_OP_ASSIGN_IMPL),\n             ]\n                 .iter()\n-                .find(|&(ts, _)| ts.iter().any(|&t| Ok(trait_id) == cx.tcx.lang_items().require(t)));\n+                .find(|&(ts, _)| ts.iter().any(|&t| Some(trait_id) == cx.tcx.lang_items().get(t)));\n             if count_binops(body.value) == 1;\n             then {\n                 span_lint("}, {"sha": "ab73f0fc44f4edae35d4a18ecb4312c9b049c5b7", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_owned_empty_strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryOwnedEmptyStrings {\n                         );\n                 } else {\n                     if_chain! {\n-                        if cx.tcx.lang_items().require(LangItem::FromFrom).ok() == Some(fun_def_id);\n+                        if Some(fun_def_id) == cx.tcx.lang_items().from_fn();\n                         if let [.., last_arg] = args;\n                         if let ExprKind::Lit(spanned) = &last_arg.kind;\n                         if let LitKind::Str(symbol, _) = spanned.node;"}, {"sha": "b452be0840948e86c718816d360715e1615922c9", "filename": "src/tools/clippy/clippy_lints/src/unused_peekable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_peekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_peekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_peekable.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -3,7 +3,6 @@ use clippy_utils::ty::{match_type, peel_mid_ty_refs_is_mutable};\n use clippy_utils::{fn_def_id, is_trait_method, path_to_local_id, paths, peel_ref_operators};\n use rustc_ast::Mutability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Block, Expr, ExprKind, HirId, Local, Node, PatKind, PathSegment, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter::OnlyBodies;\n@@ -132,11 +131,11 @@ impl<'tcx> Visitor<'tcx> for PeekableVisitor<'_, 'tcx> {\n                             // If the Peekable is passed to a function, stop\n                             ExprKind::Call(_, args) => {\n                                 if let Some(func_did) = fn_def_id(self.cx, expr)\n-                                    && let Ok(into_iter_did) = self\n+                                    && let Some(into_iter_did) = self\n                                         .cx\n                                         .tcx\n                                         .lang_items()\n-                                        .require(LangItem::IntoIterIntoIter)\n+                                        .into_iter_fn()\n                                     && func_did == into_iter_did\n                                 {\n                                     // Probably a for loop desugar, stop searching"}, {"sha": "3743d5d97a73585e50d2eabe9a312c3808ddfd3d", "filename": "src/tools/clippy/clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, HirId, LangItem, MatchSource};\n+use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -153,7 +153,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         }\n \n                         if_chain! {\n-                            if cx.tcx.lang_items().require(LangItem::FromFrom).ok() == Some(def_id);\n+                            if Some(def_id) == cx.tcx.lang_items().from_fn();\n                             if same_type_and_consts(a, b);\n \n                             then {"}, {"sha": "2a028c8141fcec5e8333bf356b1f55f453e4467b", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -152,7 +152,7 @@ impl UnnecessaryDefPath {\n                         has_ctor,\n                     ),\n                     (0, Item::LangItem(item)) => (\n-                        format!(\"{cx_snip}.tcx.lang_items().require(LangItem::{item}).ok() == Some({def_snip})\"),\n+                        format!(\"{cx_snip}.tcx.lang_items().get(LangItem::{item}) == Some({def_snip})\"),\n                         has_ctor,\n                     ),\n                     // match_trait_method\n@@ -184,7 +184,7 @@ impl UnnecessaryDefPath {\n                     (3, Item::LangItem(item)) => (\n                         format!(\n                             \"path_res({cx_snip}, {def_snip}).opt_def_id()\\\n-                                .map_or(false, |id| {cx_snip}.tcx.lang_items().require(LangItem::{item}).ok() == Some(id))\",\n+                                .map_or(false, |id| {cx_snip}.tcx.lang_items().get(LangItem::{item}) == Some(id))\",\n                         ),\n                         false,\n                     ),"}, {"sha": "d32cf1a793672ee64ddff93d816e59b95d857012", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -247,7 +247,7 @@ pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n /// For example, use this to check whether a function call or a pattern is `Some(..)`.\n pub fn is_res_lang_ctor(cx: &LateContext<'_>, res: Res, lang_item: LangItem) -> bool {\n     if let Res::Def(DefKind::Ctor(..), id) = res\n-        && let Ok(lang_id) = cx.tcx.lang_items().require(lang_item)\n+        && let Some(lang_id) = cx.tcx.lang_items().get(lang_item)\n         && let Some(id) = cx.tcx.opt_parent(id)\n     {\n         id == lang_id\n@@ -303,7 +303,7 @@ pub fn is_lang_item_or_ctor(cx: &LateContext<'_>, did: DefId, item: LangItem) ->\n         _ => did,\n     };\n \n-    cx.tcx.lang_items().require(item).map_or(false, |id| id == did)\n+    cx.tcx.lang_items().get(item) == Some(did)\n }\n \n pub fn is_unit_expr(expr: &Expr<'_>) -> bool {"}, {"sha": "3a144c2bb2239e17cf93b14a7ab36b4b125ef53a", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8e658820a7ed1127c52006265c1f771bafc17b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=1c8e658820a7ed1127c52006265c1f771bafc17b", "patch": "@@ -318,11 +318,7 @@ pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symb\n /// Returns `false` if the `LangItem` is not defined.\n pub fn is_type_lang_item(cx: &LateContext<'_>, ty: Ty<'_>, lang_item: hir::LangItem) -> bool {\n     match ty.kind() {\n-        ty::Adt(adt, _) => cx\n-            .tcx\n-            .lang_items()\n-            .require(lang_item)\n-            .map_or(false, |li| li == adt.did()),\n+        ty::Adt(adt, _) => cx.tcx.lang_items().get(lang_item) == Some(adt.did()),\n         _ => false,\n     }\n }"}]}