{"sha": "21917b086661ef7b0803280fc0ce753ac130f35f", "node_id": "C_kwDOAAsO6NoAKDIxOTE3YjA4NjY2MWVmN2IwODAzMjgwZmMwY2U3NTNhYzEzMGYzNWY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T13:20:36Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T13:20:36Z"}, "message": "Round 3: require binders for substs", "tree": {"sha": "98cbe479353defed9f871f31e0e327a2ba8c5656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98cbe479353defed9f871f31e0e327a2ba8c5656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21917b086661ef7b0803280fc0ce753ac130f35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21917b086661ef7b0803280fc0ce753ac130f35f", "html_url": "https://github.com/rust-lang/rust/commit/21917b086661ef7b0803280fc0ce753ac130f35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21917b086661ef7b0803280fc0ce753ac130f35f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b098325ec26834ec5eb056697b1fd733cca7be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b098325ec26834ec5eb056697b1fd733cca7be9", "html_url": "https://github.com/rust-lang/rust/commit/8b098325ec26834ec5eb056697b1fd733cca7be9"}], "stats": {"total": 78, "additions": 50, "deletions": 28}, "files": [{"sha": "25b8d01918b2180afba701921d61db014909aaf5", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21917b086661ef7b0803280fc0ce753ac130f35f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21917b086661ef7b0803280fc0ce753ac130f35f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=21917b086661ef7b0803280fc0ce753ac130f35f", "patch": "@@ -980,6 +980,7 @@ where\n     /// contain any bound vars that would be bound by the\n     /// binder. This is commonly used to 'inject' a value T into a\n     /// different binding level.\n+    #[track_caller]\n     pub fn dummy(value: T) -> Binder<'tcx, T> {\n         assert!(!value.has_escaping_bound_vars());\n         Binder(value, ty::List::empty())"}, {"sha": "89c8abe4f99ee0da4867e23a99c89e320f51c512", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/21917b086661ef7b0803280fc0ce753ac130f35f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21917b086661ef7b0803280fc0ce753ac130f35f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=21917b086661ef7b0803280fc0ce753ac130f35f", "patch": "@@ -165,7 +165,7 @@ pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n     }\n     inline::record_extern_fqn(cx, trait_ref.def_id(), kind);\n     let path =\n-        external_path(cx, trait_ref.def_id(), true, bindings, trait_ref.skip_binder().substs);\n+        external_path(cx, trait_ref.def_id(), true, bindings, trait_ref.map_bound(|tr| tr.substs));\n \n     debug!(?trait_ref);\n \n@@ -437,7 +437,7 @@ fn clean_projection<'tcx>(\n     };\n     let should_show_cast = compute_should_show_cast(self_def_id, &trait_, &self_type);\n     Type::QPath(Box::new(QPathData {\n-        assoc: projection_to_path_segment(ty.skip_binder(), cx),\n+        assoc: projection_to_path_segment(ty, cx),\n         should_show_cast,\n         self_type,\n         trait_,\n@@ -452,15 +452,16 @@ fn compute_should_show_cast(self_def_id: Option<DefId>, trait_: &Path, self_type\n }\n \n fn projection_to_path_segment<'tcx>(\n-    ty: ty::ProjectionTy<'tcx>,\n+    ty: ty::Binder<'tcx, ty::ProjectionTy<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n ) -> PathSegment {\n-    let item = cx.tcx.associated_item(ty.item_def_id);\n-    let generics = cx.tcx.generics_of(ty.item_def_id);\n+    let item = cx.tcx.associated_item(ty.skip_binder().item_def_id);\n+    let generics = cx.tcx.generics_of(ty.skip_binder().item_def_id);\n     PathSegment {\n         name: item.name,\n         args: GenericArgs::AngleBracketed {\n-            args: substs_to_args(cx, &ty.substs[generics.parent_count..], false).into(),\n+            args: substs_to_args(cx, ty.map_bound(|ty| &ty.substs[generics.parent_count..]), false)\n+                .into(),\n             bindings: Default::default(),\n         },\n     }\n@@ -1732,12 +1733,18 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 AdtKind::Enum => ItemType::Enum,\n             };\n             inline::record_extern_fqn(cx, did, kind);\n-            let path = external_path(cx, did, false, ThinVec::new(), substs);\n+            let path = external_path(cx, did, false, ThinVec::new(), bound_ty.rebind(substs));\n             Type::Path { path }\n         }\n         ty::Foreign(did) => {\n             inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n-            let path = external_path(cx, did, false, ThinVec::new(), InternalSubsts::empty());\n+            let path = external_path(\n+                cx,\n+                did,\n+                false,\n+                ThinVec::new(),\n+                ty::Binder::dummy(InternalSubsts::empty()),\n+            );\n             Type::Path { path }\n         }\n         ty::Dynamic(obj, ref reg, _) => {\n@@ -1750,9 +1757,9 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 .or_else(|| dids.next())\n                 .unwrap_or_else(|| panic!(\"found trait object `{bound_ty:?}` with no traits?\"));\n             let substs = match obj.principal() {\n-                Some(principal) => principal.skip_binder().substs,\n+                Some(principal) => principal.map_bound(|p| p.substs),\n                 // marker traits have no substs.\n-                _ => cx.tcx.intern_substs(&[]),\n+                _ => ty::Binder::dummy(InternalSubsts::empty()),\n             };\n \n             inline::record_extern_fqn(cx, did, ItemType::Trait);\n@@ -1763,7 +1770,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             let lifetime = clean_middle_region(*reg);\n             let mut bounds = dids\n                 .map(|did| {\n-                    let empty = cx.tcx.intern_substs(&[]);\n+                    let empty = ty::Binder::dummy(InternalSubsts::empty());\n                     let path = external_path(cx, did, false, ThinVec::new(), empty);\n                     inline::record_extern_fqn(cx, did, ItemType::Trait);\n                     PolyTrait { trait_: path, generic_params: Vec::new() }\n@@ -1774,11 +1781,13 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 .projection_bounds()\n                 .map(|pb| TypeBinding {\n                     assoc: projection_to_path_segment(\n-                        pb.skip_binder()\n-                            // HACK(compiler-errors): Doesn't actually matter what self\n-                            // type we put here, because we're only using the GAT's substs.\n-                            .with_self_ty(cx.tcx, cx.tcx.types.self_param)\n-                            .projection_ty,\n+                        pb.map_bound(|pb| {\n+                            pb\n+                                // HACK(compiler-errors): Doesn't actually matter what self\n+                                // type we put here, because we're only using the GAT's substs.\n+                                .with_self_ty(cx.tcx, cx.tcx.types.self_param)\n+                                .projection_ty\n+                        }),\n                         cx,\n                     ),\n                     kind: TypeBindingKind::Equality {\n@@ -1883,7 +1892,10 @@ fn clean_middle_opaque_bounds<'tcx>(\n                     {\n                         if proj.projection_ty.trait_ref(cx.tcx) == trait_ref.skip_binder() {\n                             Some(TypeBinding {\n-                                assoc: projection_to_path_segment(proj.projection_ty, cx),\n+                                assoc: projection_to_path_segment(\n+                                    bound.kind().rebind(proj.projection_ty),\n+                                    cx,\n+                                ),\n                                 kind: TypeBindingKind::Equality {\n                                     term: clean_middle_term(bound.kind().rebind(proj.term), cx),\n                                 },"}, {"sha": "7a7313c4bc99d90e5987fa6d2864d7fedfea3a17", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21917b086661ef7b0803280fc0ce753ac130f35f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21917b086661ef7b0803280fc0ce753ac130f35f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=21917b086661ef7b0803280fc0ce753ac130f35f", "patch": "@@ -1343,7 +1343,7 @@ pub(crate) enum GenericBound {\n impl GenericBound {\n     pub(crate) fn maybe_sized(cx: &mut DocContext<'_>) -> GenericBound {\n         let did = cx.tcx.require_lang_item(LangItem::Sized, None);\n-        let empty = cx.tcx.intern_substs(&[]);\n+        let empty = ty::Binder::dummy(ty::InternalSubsts::empty());\n         let path = external_path(cx, did, false, ThinVec::new(), empty);\n         inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound("}, {"sha": "a12f764fa8e3b739404df7937b83969a10e6bb8f", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/21917b086661ef7b0803280fc0ce753ac130f35f/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21917b086661ef7b0803280fc0ce753ac130f35f/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=21917b086661ef7b0803280fc0ce753ac130f35f", "patch": "@@ -78,12 +78,16 @@ pub(crate) fn krate(cx: &mut DocContext<'_>) -> Crate {\n \n pub(crate) fn substs_to_args<'tcx>(\n     cx: &mut DocContext<'tcx>,\n-    substs: &[ty::subst::GenericArg<'tcx>],\n+    substs: ty::Binder<'tcx, &[ty::subst::GenericArg<'tcx>]>,\n     mut skip_first: bool,\n ) -> Vec<GenericArg> {\n     let mut ret_val =\n-        Vec::with_capacity(substs.len().saturating_sub(if skip_first { 1 } else { 0 }));\n-    ret_val.extend(substs.iter().filter_map(|kind| match kind.unpack() {\n+        Vec::with_capacity(substs.skip_binder().len().saturating_sub(if skip_first {\n+            1\n+        } else {\n+            0\n+        }));\n+    ret_val.extend(substs.iter().filter_map(|kind| match kind.skip_binder().unpack() {\n         GenericArgKind::Lifetime(lt) => {\n             Some(GenericArg::Lifetime(clean_middle_region(lt).unwrap_or(Lifetime::elided())))\n         }\n@@ -92,10 +96,10 @@ pub(crate) fn substs_to_args<'tcx>(\n             None\n         }\n         GenericArgKind::Type(ty) => {\n-            Some(GenericArg::Type(clean_middle_ty(ty::Binder::dummy(ty), cx, None)))\n+            Some(GenericArg::Type(clean_middle_ty(kind.rebind(ty), cx, None)))\n         }\n         GenericArgKind::Const(ct) => {\n-            Some(GenericArg::Const(Box::new(clean_middle_const(ty::Binder::dummy(ct), cx))))\n+            Some(GenericArg::Const(Box::new(clean_middle_const(kind.rebind(ct), cx))))\n         }\n     }));\n     ret_val\n@@ -106,15 +110,20 @@ fn external_generic_args<'tcx>(\n     did: DefId,\n     has_self: bool,\n     bindings: ThinVec<TypeBinding>,\n-    substs: SubstsRef<'tcx>,\n+    substs: ty::Binder<'tcx, SubstsRef<'tcx>>,\n ) -> GenericArgs {\n-    let args = substs_to_args(cx, substs, has_self);\n+    let args = substs_to_args(cx, substs.map_bound(|substs| &substs[..]), has_self);\n \n     if cx.tcx.fn_trait_kind_from_def_id(did).is_some() {\n+        let ty = substs\n+            .iter()\n+            .nth(if has_self { 1 } else { 0 })\n+            .unwrap()\n+            .map_bound(|arg| arg.expect_ty());\n         let inputs =\n             // The trait's first substitution is the one after self, if there is one.\n-            match substs.iter().nth(if has_self { 1 } else { 0 }).unwrap().expect_ty().kind() {\n-                ty::Tuple(tys) => tys.iter().map(|t| clean_middle_ty(ty::Binder::dummy(t), cx, None)).collect::<Vec<_>>().into(),\n+            match ty.skip_binder().kind() {\n+                ty::Tuple(tys) => tys.iter().map(|t| clean_middle_ty(ty.rebind(t), cx, None)).collect::<Vec<_>>().into(),\n                 _ => return GenericArgs::AngleBracketed { args: args.into(), bindings },\n             };\n         let output = bindings.into_iter().next().and_then(|binding| match binding.kind {\n@@ -134,7 +143,7 @@ pub(super) fn external_path<'tcx>(\n     did: DefId,\n     has_self: bool,\n     bindings: ThinVec<TypeBinding>,\n-    substs: SubstsRef<'tcx>,\n+    substs: ty::Binder<'tcx, SubstsRef<'tcx>>,\n ) -> Path {\n     let def_kind = cx.tcx.def_kind(did);\n     let name = cx.tcx.item_name(did);"}]}