{"sha": "b92a60586a3f121592bded64a1556fae0f69c302", "node_id": "C_kwDOAAsO6NoAKGI5MmE2MDU4NmEzZjEyMTU5MmJkZWQ2NGExNTU2ZmFlMGY2OWMzMDI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-22T02:33:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-22T02:48:11Z"}, "message": "rename LocalState::Uninitialized to Unallocated", "tree": {"sha": "96187524a6f809919801375d17f651ee5d6501e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96187524a6f809919801375d17f651ee5d6501e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b92a60586a3f121592bded64a1556fae0f69c302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b92a60586a3f121592bded64a1556fae0f69c302", "html_url": "https://github.com/rust-lang/rust/commit/b92a60586a3f121592bded64a1556fae0f69c302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b92a60586a3f121592bded64a1556fae0f69c302/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84f39e6c08397d4ab9b51b472002a8bfc3b5b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84f39e6c08397d4ab9b51b472002a8bfc3b5b59", "html_url": "https://github.com/rust-lang/rust/commit/c84f39e6c08397d4ab9b51b472002a8bfc3b5b59"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "d78c7a9fad98381afa344261c17f5c0c9ceb8eb1", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b92a60586a3f121592bded64a1556fae0f69c302/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a60586a3f121592bded64a1556fae0f69c302/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=b92a60586a3f121592bded64a1556fae0f69c302", "patch": "@@ -177,11 +177,10 @@ pub struct LocalState<'tcx, Tag: Provenance = AllocId> {\n pub enum LocalValue<Tag: Provenance = AllocId> {\n     /// This local is not currently alive, and cannot be used at all.\n     Dead,\n-    /// This local is alive but not yet initialized. It can be written to\n-    /// but not read from or its address taken. Locals get initialized on\n-    /// first write because for unsized locals, we do not know their size\n-    /// before that.\n-    Uninitialized,\n+    /// This local is alive but not yet allocated. It cannot be read from or have its address taken,\n+    /// and will be allocated on the first write. This is to support unsized locals, where we cannot\n+    /// know their size in advance.\n+    Unallocated,\n     /// A normal, live local.\n     /// Mostly for convenience, we re-use the `Operand` type here.\n     /// This is an optimization over just always having a pointer here;\n@@ -198,7 +197,7 @@ impl<'tcx, Tag: Provenance + 'static> LocalState<'tcx, Tag> {\n     pub fn access(&self) -> InterpResult<'tcx, Operand<Tag>> {\n         match self.value {\n             LocalValue::Dead => throw_ub!(DeadLocal),\n-            LocalValue::Uninitialized => {\n+            LocalValue::Unallocated => {\n                 bug!(\"The type checker should prevent reading from a never-written local\")\n             }\n             LocalValue::Live(val) => Ok(val),\n@@ -216,8 +215,7 @@ impl<'tcx, Tag: Provenance + 'static> LocalState<'tcx, Tag> {\n         match self.value {\n             LocalValue::Dead => throw_ub!(DeadLocal),\n             LocalValue::Live(Operand::Indirect(mplace)) => Ok(Err(mplace)),\n-            ref mut\n-            local @ (LocalValue::Live(Operand::Immediate(_)) | LocalValue::Uninitialized) => {\n+            ref mut local @ (LocalValue::Live(Operand::Immediate(_)) | LocalValue::Unallocated) => {\n                 Ok(Ok(local))\n             }\n         }\n@@ -752,8 +750,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             })?;\n         }\n \n-        // Locals are initially uninitialized.\n-        let dummy = LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };\n+        // Locals are initially unallocated.\n+        let dummy = LocalState { value: LocalValue::Unallocated, layout: Cell::new(None) };\n         let mut locals = IndexVec::from_elem(dummy, &body.local_decls);\n \n         // Now mark those locals as dead that we do not want to initialize\n@@ -921,7 +919,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n         trace!(\"{:?} is now live\", local);\n \n-        let local_val = LocalValue::Uninitialized;\n+        let local_val = LocalValue::Unallocated;\n         // StorageLive expects the local to be dead, and marks it live.\n         let old = mem::replace(&mut self.frame_mut().locals[local].value, local_val);\n         if !matches!(old, LocalValue::Dead) {\n@@ -1025,7 +1023,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> std::fmt::Debug\n \n                 match self.ecx.stack()[frame].locals[local].value {\n                     LocalValue::Dead => write!(fmt, \" is dead\")?,\n-                    LocalValue::Uninitialized => write!(fmt, \" is uninitialized\")?,\n+                    LocalValue::Unallocated => write!(fmt, \" is unallocated\")?,\n                     LocalValue::Live(Operand::Indirect(mplace)) => {\n                         write!(\n                             fmt,"}, {"sha": "c4d15d4d187207fa8bc09f646072735de4da6f59", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b92a60586a3f121592bded64a1556fae0f69c302/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a60586a3f121592bded64a1556fae0f69c302/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=b92a60586a3f121592bded64a1556fae0f69c302", "patch": "@@ -244,8 +244,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     ) -> InterpResult<'tcx, InterpOperand<Self::PointerTag>> {\n         let l = &frame.locals[local];\n \n-        if l.value == LocalValue::Uninitialized {\n-            throw_machine_stop_str!(\"tried to access an uninitialized local\")\n+        if l.value == LocalValue::Unallocated {\n+            throw_machine_stop_str!(\"tried to access an unallocated local\")\n         }\n \n         l.access()\n@@ -442,7 +442,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// but not reading from them anymore.\n     fn remove_const(ecx: &mut InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>, local: Local) {\n         ecx.frame_mut().locals[local] =\n-            LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };\n+            LocalState { value: LocalValue::Unallocated, layout: Cell::new(None) };\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {\n@@ -1147,7 +1147,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                     let frame = self.ecx.frame_mut();\n                     frame.locals[local].value =\n                         if let StatementKind::StorageLive(_) = statement.kind {\n-                            LocalValue::Uninitialized\n+                            LocalValue::Unallocated\n                         } else {\n                             LocalValue::Dead\n                         };"}]}