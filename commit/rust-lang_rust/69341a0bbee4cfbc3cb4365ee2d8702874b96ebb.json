{"sha": "69341a0bbee4cfbc3cb4365ee2d8702874b96ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MzQxYTBiYmVlNGNmYmMzY2I0MzY1ZWUyZDg3MDI4NzRiOTZlYmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-21T09:44:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-21T09:44:08Z"}, "message": "add _query to query functions", "tree": {"sha": "987ff9410165b7df6a2165628d9c0c841f464e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987ff9410165b7df6a2165628d9c0c841f464e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69341a0bbee4cfbc3cb4365ee2d8702874b96ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69341a0bbee4cfbc3cb4365ee2d8702874b96ebb", "html_url": "https://github.com/rust-lang/rust/commit/69341a0bbee4cfbc3cb4365ee2d8702874b96ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69341a0bbee4cfbc3cb4365ee2d8702874b96ebb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eabfe3902f363ee03bef8421580c6fe8e3730899", "url": "https://api.github.com/repos/rust-lang/rust/commits/eabfe3902f363ee03bef8421580c6fe8e3730899", "html_url": "https://github.com/rust-lang/rust/commit/eabfe3902f363ee03bef8421580c6fe8e3730899"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "da62db58a005dd987b7bb0cb8c9dd0eee374a2cf", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69341a0bbee4cfbc3cb4365ee2d8702874b96ebb/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69341a0bbee4cfbc3cb4365ee2d8702874b96ebb/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=69341a0bbee4cfbc3cb4365ee2d8702874b96ebb", "patch": "@@ -156,19 +156,19 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;\n \n-    #[salsa::invoke(crate::ty::traits::impls_for_trait)]\n+    #[salsa::invoke(crate::ty::traits::impls_for_trait_query)]\n     fn impls_for_trait(&self, krate: Crate, trait_: Trait) -> Arc<[ImplBlock]>;\n \n     /// This provides the Chalk trait solver instance. Because Chalk always\n     /// works from a specific crate, this query is keyed on the crate; and\n     /// because Chalk does its own internal caching, the solver is wrapped in a\n     /// Mutex and the query is marked volatile, to make sure the cached state is\n     /// thrown away when input facts change.\n-    #[salsa::invoke(crate::ty::traits::solver)]\n+    #[salsa::invoke(crate::ty::traits::solver_query)]\n     #[salsa::volatile]\n     fn solver(&self, krate: Crate) -> Arc<Mutex<crate::ty::traits::Solver>>;\n \n-    #[salsa::invoke(crate::ty::traits::implements)]\n+    #[salsa::invoke(crate::ty::traits::implements_query)]\n     fn implements(\n         &self,\n         krate: Crate,"}, {"sha": "190d018ff9362ea78847e259f7781e5dc204d46a", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69341a0bbee4cfbc3cb4365ee2d8702874b96ebb/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69341a0bbee4cfbc3cb4365ee2d8702874b96ebb/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=69341a0bbee4cfbc3cb4365ee2d8702874b96ebb", "patch": "@@ -25,15 +25,15 @@ struct ChalkContext<'a, DB> {\n     krate: Crate,\n }\n \n-pub(crate) fn solver(_db: &impl HirDatabase, _krate: Crate) -> Arc<Mutex<Solver>> {\n+pub(crate) fn solver_query(_db: &impl HirDatabase, _krate: Crate) -> Arc<Mutex<Solver>> {\n     // krate parameter is just so we cache a unique solver per crate\n     let solver_choice = chalk_solve::SolverChoice::SLG { max_size: CHALK_SOLVER_MAX_SIZE };\n     debug!(\"Creating new solver for crate {:?}\", _krate);\n     Arc::new(Mutex::new(solver_choice.into_solver()))\n }\n \n /// Collects impls for the given trait in the whole dependency tree of `krate`.\n-pub(crate) fn impls_for_trait(\n+pub(crate) fn impls_for_trait_query(\n     db: &impl HirDatabase,\n     krate: Crate,\n     trait_: Trait,\n@@ -76,7 +76,7 @@ pub enum Obligation {\n }\n \n /// Check using Chalk whether trait is implemented for given parameters including `Self` type.\n-pub(crate) fn implements(\n+pub(crate) fn implements_query(\n     db: &impl HirDatabase,\n     krate: Crate,\n     trait_ref: Canonical<TraitRef>,"}]}