{"sha": "1787c14e725e4ac416828f986b095a23ecd11494", "node_id": "C_kwDOAAsO6NoAKDE3ODdjMTRlNzI1ZTRhYzQxNjgyOGY5ODZiMDk1YTIzZWNkMTE0OTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-15T10:36:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-15T10:36:50Z"}, "message": "Auto merge of #14358 - Veykril:err-reporting, r=Veykril\n\nReport sysroot and rustc crate loading errors\n\nAlso aggregates the warnings and errors so we don't discard previous ones.\ncc https://github.com/rust-lang/rust-analyzer/issues/14327", "tree": {"sha": "61fc3d87c3bef5429c6c7138f6403b29bca5b513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61fc3d87c3bef5429c6c7138f6403b29bca5b513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1787c14e725e4ac416828f986b095a23ecd11494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1787c14e725e4ac416828f986b095a23ecd11494", "html_url": "https://github.com/rust-lang/rust/commit/1787c14e725e4ac416828f986b095a23ecd11494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1787c14e725e4ac416828f986b095a23ecd11494/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579797f0eca3963f9c9d23c29def3da42e8c944a", "url": "https://api.github.com/repos/rust-lang/rust/commits/579797f0eca3963f9c9d23c29def3da42e8c944a", "html_url": "https://github.com/rust-lang/rust/commit/579797f0eca3963f9c9d23c29def3da42e8c944a"}, {"sha": "d9c7d28e0d306ef3f259fe06b75385867335906e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c7d28e0d306ef3f259fe06b75385867335906e", "html_url": "https://github.com/rust-lang/rust/commit/d9c7d28e0d306ef3f259fe06b75385867335906e"}], "stats": {"total": 351, "additions": 194, "deletions": 157}, "files": [{"sha": "01162b1a8ba0cd8bed2c641cfbe6ce25fc7aa881", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -50,7 +50,7 @@ impl ops::Index<Target> for CargoWorkspace {\n \n /// Describes how to set the rustc source directory.\n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub enum RustcSource {\n+pub enum RustLibSource {\n     /// Explicit path for the rustc source directory.\n     Path(AbsPathBuf),\n     /// Try to automatically detect where the rustc source directory is.\n@@ -95,10 +95,10 @@ pub struct CargoConfig {\n     /// rustc target\n     pub target: Option<String>,\n     /// Sysroot loading behavior\n-    pub sysroot: Option<RustcSource>,\n+    pub sysroot: Option<RustLibSource>,\n     pub sysroot_src: Option<AbsPathBuf>,\n     /// rustc private crate source\n-    pub rustc_source: Option<RustcSource>,\n+    pub rustc_source: Option<RustLibSource>,\n     /// crates to disable `#[cfg(test)]` on\n     pub unset_test_crates: UnsetTestCrates,\n     /// Invoke `cargo check` through the RUSTC_WRAPPER."}, {"sha": "70cb71ae3bde8438478f21b14b3c2cfb5922f02d", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -44,7 +44,7 @@ pub use crate::{\n     build_scripts::WorkspaceBuildScripts,\n     cargo_workspace::{\n         CargoConfig, CargoFeatures, CargoWorkspace, Package, PackageData, PackageDependency,\n-        RustcSource, Target, TargetData, TargetKind, UnsetTestCrates,\n+        RustLibSource, Target, TargetData, TargetKind, UnsetTestCrates,\n     },\n     manifest_path::ManifestPath,\n     project_json::{ProjectJson, ProjectJsonData},"}, {"sha": "3754accbb03d8ad591f106bbfb953dca28ff19fa", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -24,8 +24,8 @@ fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> CrateGr\n     let project_workspace = ProjectWorkspace::Cargo {\n         cargo: cargo_workspace,\n         build_scripts: WorkspaceBuildScripts::default(),\n-        sysroot: None,\n-        rustc: None,\n+        sysroot: Err(None),\n+        rustc: Err(None),\n         rustc_cfg: Vec::new(),\n         cfg_overrides,\n         toolchain: None,\n@@ -37,7 +37,7 @@ fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> CrateGr\n fn load_rust_project(file: &str) -> CrateGraph {\n     let data = get_test_json_file(file);\n     let project = rooted_project_json(data);\n-    let sysroot = Some(get_fake_sysroot());\n+    let sysroot = Ok(get_fake_sysroot());\n     let project_workspace = ProjectWorkspace::Json { project, sysroot, rustc_cfg: Vec::new() };\n     to_crate_graph(project_workspace)\n }"}, {"sha": "d1e53e12eebb5691cce40bd4e0cf87b078ba1bde", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 94, "deletions": 115, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -17,7 +17,7 @@ use stdx::{always, hash::NoHashHashMap};\n \n use crate::{\n     build_scripts::BuildScriptOutput,\n-    cargo_workspace::{DepKind, PackageData, RustcSource},\n+    cargo_workspace::{DepKind, PackageData, RustLibSource},\n     cfg_flag::CfgFlag,\n     rustc_cfg,\n     sysroot::SysrootCrate,\n@@ -69,8 +69,8 @@ pub enum ProjectWorkspace {\n     Cargo {\n         cargo: CargoWorkspace,\n         build_scripts: WorkspaceBuildScripts,\n-        sysroot: Option<Sysroot>,\n-        rustc: Option<(CargoWorkspace, WorkspaceBuildScripts)>,\n+        sysroot: Result<Sysroot, Option<String>>,\n+        rustc: Result<(CargoWorkspace, WorkspaceBuildScripts), Option<String>>,\n         /// Holds cfg flags for the current target. We get those by running\n         /// `rustc --print cfg`.\n         ///\n@@ -82,7 +82,7 @@ pub enum ProjectWorkspace {\n         target_layout: Result<String, String>,\n     },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n-    Json { project: ProjectJson, sysroot: Option<Sysroot>, rustc_cfg: Vec<CfgFlag> },\n+    Json { project: ProjectJson, sysroot: Result<Sysroot, Option<String>>, rustc_cfg: Vec<CfgFlag> },\n     // FIXME: The primary limitation of this approach is that the set of detached files needs to be fixed at the beginning.\n     // That's not the end user experience we should strive for.\n     // Ideally, you should be able to just open a random detached file in existing cargo projects, and get the basic features working.\n@@ -93,7 +93,11 @@ pub enum ProjectWorkspace {\n     // //\n     /// Project with a set of disjoint files, not belonging to any particular workspace.\n     /// Backed by basic sysroot crates for basic completion and highlighting.\n-    DetachedFiles { files: Vec<AbsPathBuf>, sysroot: Option<Sysroot>, rustc_cfg: Vec<CfgFlag> },\n+    DetachedFiles {\n+        files: Vec<AbsPathBuf>,\n+        sysroot: Result<Sysroot, Option<String>>,\n+        rustc_cfg: Vec<CfgFlag>,\n+    },\n }\n \n impl fmt::Debug for ProjectWorkspace {\n@@ -113,7 +117,7 @@ impl fmt::Debug for ProjectWorkspace {\n                 .debug_struct(\"Cargo\")\n                 .field(\"root\", &cargo.workspace_root().file_name())\n                 .field(\"n_packages\", &cargo.packages().len())\n-                .field(\"sysroot\", &sysroot.is_some())\n+                .field(\"sysroot\", &sysroot.is_ok())\n                 .field(\n                     \"n_rustc_compiler_crates\",\n                     &rustc.as_ref().map_or(0, |(rc, _)| rc.packages().len()),\n@@ -126,7 +130,7 @@ impl fmt::Debug for ProjectWorkspace {\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg } => {\n                 let mut debug_struct = f.debug_struct(\"Json\");\n                 debug_struct.field(\"n_crates\", &project.n_crates());\n-                if let Some(sysroot) = sysroot {\n+                if let Ok(sysroot) = sysroot {\n                     debug_struct.field(\"n_sysroot_crates\", &sysroot.crates().len());\n                 }\n                 debug_struct.field(\"n_rustc_cfg\", &rustc_cfg.len());\n@@ -135,7 +139,7 @@ impl fmt::Debug for ProjectWorkspace {\n             ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => f\n                 .debug_struct(\"DetachedFiles\")\n                 .field(\"n_files\", &files.len())\n-                .field(\"sysroot\", &sysroot.is_some())\n+                .field(\"sysroot\", &sysroot.is_ok())\n                 .field(\"n_rustc_cfg\", &rustc_cfg.len())\n                 .finish(),\n         }\n@@ -191,96 +195,81 @@ impl ProjectWorkspace {\n                 let cargo = CargoWorkspace::new(meta);\n \n                 let sysroot = match (&config.sysroot, &config.sysroot_src) {\n-                    (Some(RustcSource::Path(path)), None) => {\n-                        match Sysroot::with_sysroot_dir(path.clone()) {\n-                            Ok(it) => Some(it),\n-                            Err(e) => {\n-                                tracing::error!(%e, \"Failed to find sysroot at {}.\", path.display());\n-                                None\n-                            }\n-                        }\n+                    (Some(RustLibSource::Path(path)), None) => {\n+                        Sysroot::with_sysroot_dir(path.clone()).map_err(|e| {\n+                          Some(format!(\"Failed to find sysroot at {}:{e}\", path.display()))\n+                        })\n                     }\n-                    (Some(RustcSource::Discover), None) => {\n-                        match Sysroot::discover(cargo_toml.parent(), &config.extra_env) {\n-                            Ok(it) => Some(it),\n-                            Err(e) => {\n-                                tracing::error!(\n-                                    %e,\n-                                    \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n-                                    cargo_toml.display()\n-                                );\n-                                None\n-                            }\n-                        }\n+                    (Some(RustLibSource::Discover), None) => {\n+                        Sysroot::discover(cargo_toml.parent(), &config.extra_env).map_err(|e| {\n+                            Some(format!(\"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed? {e}\", cargo_toml.display()))\n+                        })\n                     }\n-                    (Some(RustcSource::Path(sysroot)), Some(sysroot_src)) => {\n-                        Some(Sysroot::load(sysroot.clone(), sysroot_src.clone()))\n+                    (Some(RustLibSource::Path(sysroot)), Some(sysroot_src)) => {\n+                        Ok(Sysroot::load(sysroot.clone(), sysroot_src.clone()))\n                     }\n-                    (Some(RustcSource::Discover), Some(sysroot_src)) => {\n-                        match Sysroot::discover_with_src_override(\n+                    (Some(RustLibSource::Discover), Some(sysroot_src)) => {\n+                        Sysroot::discover_with_src_override(\n                             cargo_toml.parent(),\n                             &config.extra_env,\n                             sysroot_src.clone(),\n-                        ) {\n-                            Ok(it) => Some(it),\n-                            Err(e) => {\n-                                tracing::error!(\n-                                    %e,\n-                                    \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n-                                    cargo_toml.display()\n-                                );\n-                                None\n-                            }\n-                        }\n+                        ).map_err(|e| {\n+                            Some(format!(\"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed? {e}\", cargo_toml.display()))\n+                        })\n                     }\n-                    (None, _) => None,\n+                    (None, _) => Err(None),\n                 };\n \n-                if let Some(sysroot) = &sysroot {\n+                if let Ok(sysroot) = &sysroot {\n                     tracing::info!(workspace = %cargo_toml.display(), src_root = %sysroot.src_root().display(), root = %sysroot.root().display(), \"Using sysroot\");\n                 }\n \n                 let rustc_dir = match &config.rustc_source {\n-                    Some(RustcSource::Path(path)) => ManifestPath::try_from(path.clone()).ok(),\n-                    Some(RustcSource::Discover) => {\n-                        sysroot.as_ref().and_then(Sysroot::discover_rustc)\n+                    Some(RustLibSource::Path(path)) => ManifestPath::try_from(path.clone())\n+                        .map_err(|p| {\n+                            Some(format!(\"rustc source path is not absolute: {}\", p.display()))\n+                        }),\n+                    Some(RustLibSource::Discover) => {\n+                        sysroot.as_ref().ok().and_then(Sysroot::discover_rustc).ok_or_else(|| {\n+                            Some(format!(\"Failed to discover rustc source for sysroot.\"))\n+                        })\n                     }\n-                    None => None,\n+                    None => Err(None),\n                 };\n \n-                let rustc = match rustc_dir {\n-                    Some(rustc_dir) => {\n-                        tracing::info!(workspace = %cargo_toml.display(), rustc_dir = %rustc_dir.display(), \"Using rustc source\");\n-                        match CargoWorkspace::fetch_metadata(\n-                            &rustc_dir,\n-                            cargo_toml.parent(),\n-                            &CargoConfig {\n-                                features: crate::CargoFeatures::default(),\n-                                ..config.clone()\n-                            },\n-                            progress,\n-                        ) {\n-                            Ok(meta) => {\n-                                let workspace = CargoWorkspace::new(meta);\n-                                let buildscripts = WorkspaceBuildScripts::rustc_crates(\n-                                    &workspace,\n-                                    cargo_toml.parent(),\n-                                    &config.extra_env,\n-                                );\n-                                Some((workspace, buildscripts))\n-                            }\n-                            Err(e) => {\n-                                tracing::error!(\n-                                    %e,\n-                                    \"Failed to read Cargo metadata from rustc source at {}\",\n-                                    rustc_dir.display()\n-                                );\n-                                None\n-                            }\n+                let rustc =  rustc_dir.and_then(|rustc_dir| {\n+                    tracing::info!(workspace = %cargo_toml.display(), rustc_dir = %rustc_dir.display(), \"Using rustc source\");\n+                    match CargoWorkspace::fetch_metadata(\n+                        &rustc_dir,\n+                        cargo_toml.parent(),\n+                        &CargoConfig {\n+                            features: crate::CargoFeatures::default(),\n+                            ..config.clone()\n+                        },\n+                        progress,\n+                    ) {\n+                        Ok(meta) => {\n+                            let workspace = CargoWorkspace::new(meta);\n+                            let buildscripts = WorkspaceBuildScripts::rustc_crates(\n+                                &workspace,\n+                                cargo_toml.parent(),\n+                                &config.extra_env,\n+                            );\n+                            Ok((workspace, buildscripts))\n+                        }\n+                        Err(e) => {\n+                            tracing::error!(\n+                                %e,\n+                                \"Failed to read Cargo metadata from rustc source at {}\",\n+                                rustc_dir.display()\n+                            );\n+                            Err(Some(format!(\n+                                \"Failed to read Cargo metadata from rustc source at {}: {e}\",\n+                                rustc_dir.display())\n+                            ))\n                         }\n                     }\n-                    None => None,\n-                };\n+                });\n \n                 let rustc_cfg =\n                     rustc_cfg::get(Some(&cargo_toml), config.target.as_deref(), &config.extra_env);\n@@ -316,24 +305,24 @@ impl ProjectWorkspace {\n         extra_env: &FxHashMap<String, String>,\n     ) -> ProjectWorkspace {\n         let sysroot = match (project_json.sysroot.clone(), project_json.sysroot_src.clone()) {\n-            (Some(sysroot), Some(sysroot_src)) => Some(Sysroot::load(sysroot, sysroot_src)),\n+            (Some(sysroot), Some(sysroot_src)) => Ok(Sysroot::load(sysroot, sysroot_src)),\n             (Some(sysroot), None) => {\n                 // assume sysroot is structured like rustup's and guess `sysroot_src`\n                 let sysroot_src =\n                     sysroot.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\").join(\"library\");\n-                Some(Sysroot::load(sysroot, sysroot_src))\n+                Ok(Sysroot::load(sysroot, sysroot_src))\n             }\n             (None, Some(sysroot_src)) => {\n                 // assume sysroot is structured like rustup's and guess `sysroot`\n                 let mut sysroot = sysroot_src.clone();\n                 for _ in 0..5 {\n                     sysroot.pop();\n                 }\n-                Some(Sysroot::load(sysroot, sysroot_src))\n+                Ok(Sysroot::load(sysroot, sysroot_src))\n             }\n-            (None, None) => None,\n+            (None, None) => Err(None),\n         };\n-        if let Some(sysroot) = &sysroot {\n+        if let Ok(sysroot) = &sysroot {\n             tracing::info!(src_root = %sysroot.src_root().display(), root = %sysroot.root().display(), \"Using sysroot\");\n         }\n \n@@ -346,33 +335,23 @@ impl ProjectWorkspace {\n         config: &CargoConfig,\n     ) -> Result<ProjectWorkspace> {\n         let sysroot = match &config.sysroot {\n-            Some(RustcSource::Path(path)) => match Sysroot::with_sysroot_dir(path.clone()) {\n-                Ok(it) => Some(it),\n-                Err(e) => {\n-                    tracing::error!(%e, \"Failed to find sysroot at {}.\", path.display());\n-                    None\n-                }\n-            },\n-            Some(RustcSource::Discover) => {\n+            Some(RustLibSource::Path(path)) => Sysroot::with_sysroot_dir(path.clone())\n+                .map_err(|e| Some(format!(\"Failed to find sysroot at {}:{e}\", path.display()))),\n+            Some(RustLibSource::Discover) => {\n                 let dir = &detached_files\n                     .first()\n                     .and_then(|it| it.parent())\n                     .ok_or_else(|| format_err!(\"No detached files to load\"))?;\n-                match Sysroot::discover(dir, &config.extra_env) {\n-                    Ok(it) => Some(it),\n-                    Err(e) => {\n-                        tracing::error!(\n-                            %e,\n-                            \"Failed to find sysroot for {}. Is rust-src installed?\",\n-                            dir.display()\n-                        );\n-                        None\n-                    }\n-                }\n+                Sysroot::discover(dir, &config.extra_env).map_err(|e| {\n+                    Some(format!(\n+                        \"Failed to find sysroot for {}. Is rust-src installed? {e}\",\n+                        dir.display()\n+                    ))\n+                })\n             }\n-            None => None,\n+            None => Err(None),\n         };\n-        if let Some(sysroot) = &sysroot {\n+        if let Ok(sysroot) = &sysroot {\n             tracing::info!(src_root = %sysroot.src_root().display(), root = %sysroot.root().display(), \"Using sysroot\");\n         }\n         let rustc_cfg = rustc_cfg::get(None, None, &Default::default());\n@@ -463,8 +442,8 @@ impl ProjectWorkspace {\n \n     pub fn find_sysroot_proc_macro_srv(&self) -> Option<AbsPathBuf> {\n         match self {\n-            ProjectWorkspace::Cargo { sysroot: Some(sysroot), .. }\n-            | ProjectWorkspace::Json { sysroot: Some(sysroot), .. } => {\n+            ProjectWorkspace::Cargo { sysroot: Ok(sysroot), .. }\n+            | ProjectWorkspace::Json { sysroot: Ok(sysroot), .. } => {\n                 let standalone_server_name =\n                     format!(\"rust-analyzer-proc-macro-srv{}\", std::env::consts::EXE_SUFFIX);\n                 [\"libexec\", \"lib\"]\n@@ -480,7 +459,7 @@ impl ProjectWorkspace {\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n-        let mk_sysroot = |sysroot: Option<&Sysroot>, project_root: Option<&AbsPath>| {\n+        let mk_sysroot = |sysroot: Result<&Sysroot, _>, project_root: Option<&AbsPath>| {\n             sysroot.map(|sysroot| PackageRoot {\n                 // mark the sysroot as mutable if it is located inside of the project\n                 is_local: project_root\n@@ -603,7 +582,7 @@ impl ProjectWorkspace {\n                 load_proc_macro,\n                 load,\n                 project,\n-                sysroot.as_ref(),\n+                sysroot.as_ref().ok(),\n                 extra_env,\n                 Err(\"rust-project.json projects have no target layout set\".into()),\n             ),\n@@ -619,9 +598,9 @@ impl ProjectWorkspace {\n             } => cargo_to_crate_graph(\n                 load_proc_macro,\n                 load,\n-                rustc,\n+                rustc.as_ref().ok(),\n                 cargo,\n-                sysroot.as_ref(),\n+                sysroot.as_ref().ok(),\n                 rustc_cfg.clone(),\n                 cfg_overrides,\n                 build_scripts,\n@@ -635,7 +614,7 @@ impl ProjectWorkspace {\n                     rustc_cfg.clone(),\n                     load,\n                     files,\n-                    sysroot,\n+                    sysroot.as_ref().ok(),\n                     Err(\"detached file projects have no target layout set\".into()),\n                 )\n             }\n@@ -797,7 +776,7 @@ fn project_json_to_crate_graph(\n fn cargo_to_crate_graph(\n     load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n-    rustc: &Option<(CargoWorkspace, WorkspaceBuildScripts)>,\n+    rustc: Option<&(CargoWorkspace, WorkspaceBuildScripts)>,\n     cargo: &CargoWorkspace,\n     sysroot: Option<&Sysroot>,\n     rustc_cfg: Vec<CfgFlag>,\n@@ -974,7 +953,7 @@ fn detached_files_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     detached_files: &[AbsPathBuf],\n-    sysroot: &Option<Sysroot>,\n+    sysroot: Option<&Sysroot>,\n     target_layout: TargetLayoutLoadResult,\n ) -> CrateGraph {\n     let _p = profile::span(\"detached_files_to_crate_graph\");"}, {"sha": "6ce1de5d32bcac068df2e40d3f9a98ae323e30c7", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -24,7 +24,7 @@ use ide_db::base_db::{\n use itertools::Itertools;\n use oorandom::Rand32;\n use profile::{Bytes, StopWatch};\n-use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, RustcSource};\n+use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, RustLibSource};\n use rayon::prelude::*;\n use rustc_hash::FxHashSet;\n use stdx::format_to;\n@@ -57,7 +57,7 @@ impl flags::AnalysisStats {\n         let mut cargo_config = CargoConfig::default();\n         cargo_config.sysroot = match self.no_sysroot {\n             true => None,\n-            false => Some(RustcSource::Discover),\n+            false => Some(RustLibSource::Discover),\n         };\n         let no_progress = &|_| ();\n "}, {"sha": "4006d023def52be059fa3310a4091fa65a6229b7", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -1,7 +1,7 @@\n //! Analyze all modules in a project for diagnostics. Exits with a non-zero\n //! status code if any errors are found.\n \n-use project_model::{CargoConfig, RustcSource};\n+use project_model::{CargoConfig, RustLibSource};\n use rustc_hash::FxHashSet;\n \n use hir::{db::HirDatabase, Crate, Module};\n@@ -16,7 +16,7 @@ use crate::cli::{\n impl flags::Diagnostics {\n     pub fn run(self) -> anyhow::Result<()> {\n         let mut cargo_config = CargoConfig::default();\n-        cargo_config.sysroot = Some(RustcSource::Discover);\n+        cargo_config.sysroot = Some(RustLibSource::Discover);\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: !self.disable_build_scripts,\n             with_proc_macro_server: ProcMacroServerChoice::Sysroot,"}, {"sha": "7f5d084496714d08d51d6a17fb82806ff08e8366", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -13,7 +13,7 @@ use ide_db::LineIndexDatabase;\n use ide_db::base_db::salsa::{self, ParallelDatabase};\n use ide_db::line_index::WideEncoding;\n use lsp_types::{self, lsif};\n-use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, RustcSource};\n+use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, RustLibSource};\n use vfs::{AbsPathBuf, Vfs};\n \n use crate::cli::load_cargo::ProcMacroServerChoice;\n@@ -290,7 +290,7 @@ impl flags::Lsif {\n         eprintln!(\"Generating LSIF started...\");\n         let now = Instant::now();\n         let mut cargo_config = CargoConfig::default();\n-        cargo_config.sysroot = Some(RustcSource::Discover);\n+        cargo_config.sysroot = Some(RustLibSource::Discover);\n         let no_progress = &|_| ();\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: true,"}, {"sha": "3e5e40750e9cac931a7ce391e2ef52a8bfbed57b", "filename": "crates/rust-analyzer/src/cli/scip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -15,7 +15,7 @@ use ide::{\n     TokenStaticData,\n };\n use ide_db::LineIndexDatabase;\n-use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, RustcSource};\n+use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, RustLibSource};\n use scip::types as scip_types;\n use std::env;\n \n@@ -30,7 +30,7 @@ impl flags::Scip {\n         eprintln!(\"Generating SCIP start...\");\n         let now = Instant::now();\n         let mut cargo_config = CargoConfig::default();\n-        cargo_config.sysroot = Some(RustcSource::Discover);\n+        cargo_config.sysroot = Some(RustLibSource::Discover);\n \n         let no_progress = &|s| (eprintln!(\"rust-analyzer: Loading {s}\"));\n         let load_cargo_config = LoadCargoConfig {"}, {"sha": "82a769347df04fe356ce95702c1b30a6e5c8c5e4", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -1,7 +1,7 @@\n //! Applies structured search replace rules from the command line.\n \n use ide_ssr::MatchFinder;\n-use project_model::{CargoConfig, RustcSource};\n+use project_model::{CargoConfig, RustLibSource};\n \n use crate::cli::{\n     flags,\n@@ -13,7 +13,7 @@ impl flags::Ssr {\n     pub fn run(self) -> Result<()> {\n         use ide_db::base_db::SourceDatabaseExt;\n         let mut cargo_config = CargoConfig::default();\n-        cargo_config.sysroot = Some(RustcSource::Discover);\n+        cargo_config.sysroot = Some(RustLibSource::Discover);\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: true,\n             with_proc_macro_server: ProcMacroServerChoice::Sysroot,"}, {"sha": "c35cce103fab60ce138e643dcbf318a19a990a39", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -22,7 +22,7 @@ use ide_db::{\n use itertools::Itertools;\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{\n-    CargoConfig, CargoFeatures, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource,\n+    CargoConfig, CargoFeatures, ProjectJson, ProjectJsonData, ProjectManifest, RustLibSource,\n     UnsetTestCrates,\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -1137,16 +1137,16 @@ impl Config {\n     pub fn cargo(&self) -> CargoConfig {\n         let rustc_source = self.data.rustc_source.as_ref().map(|rustc_src| {\n             if rustc_src == \"discover\" {\n-                RustcSource::Discover\n+                RustLibSource::Discover\n             } else {\n-                RustcSource::Path(self.root_path.join(rustc_src))\n+                RustLibSource::Path(self.root_path.join(rustc_src))\n             }\n         });\n         let sysroot = self.data.cargo_sysroot.as_ref().map(|sysroot| {\n             if sysroot == \"discover\" {\n-                RustcSource::Discover\n+                RustLibSource::Discover\n             } else {\n-                RustcSource::Path(self.root_path.join(sysroot))\n+                RustLibSource::Path(self.root_path.join(sysroot))\n             }\n         });\n         let sysroot_src ="}, {"sha": "12e5caf2cc9e43f0b0830cfaae8d3b28401dcd4a", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -36,11 +36,41 @@ impl Progress {\n }\n \n impl GlobalState {\n-    pub(crate) fn show_message(&mut self, typ: lsp_types::MessageType, message: String) {\n-        let message = message;\n-        self.send_notification::<lsp_types::notification::ShowMessage>(\n-            lsp_types::ShowMessageParams { typ, message },\n-        )\n+    pub(crate) fn show_message(\n+        &mut self,\n+        typ: lsp_types::MessageType,\n+        message: String,\n+        show_open_log_button: bool,\n+    ) {\n+        match self.config.open_server_logs() && show_open_log_button  {\n+            true => self.send_request::<lsp_types::request::ShowMessageRequest>(\n+                lsp_types::ShowMessageRequestParams {\n+                    typ,\n+                    message,\n+                    actions: Some(vec![lsp_types::MessageActionItem {\n+                        title: \"Open server logs\".to_owned(),\n+                        properties: Default::default(),\n+                    }]),\n+                },\n+                |this, resp| {\n+                    let lsp_server::Response { error: None, result: Some(result), .. } = resp\n+                    else { return };\n+                    if let Ok(Some(_item)) = crate::from_json::<\n+                        <lsp_types::request::ShowMessageRequest as lsp_types::request::Request>::Result,\n+                    >(\n+                        lsp_types::request::ShowMessageRequest::METHOD, &result\n+                    ) {\n+                        this.send_notification::<lsp_ext::OpenServerLogs>(());\n+                    }\n+                },\n+            ),\n+            false => self.send_notification::<lsp_types::notification::ShowMessage>(\n+                lsp_types::ShowMessageParams {\n+                    typ,\n+                    message,\n+                },\n+            ),\n+        }\n     }\n \n     /// Sends a notification to the client containing the error `message`."}, {"sha": "2752e710342e232edb605b069994f04e95ba8dcc", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -406,9 +406,19 @@ impl GlobalState {\n \n             if self.config.server_status_notification() {\n                 self.send_notification::<lsp_ext::ServerStatusNotification>(status);\n-            } else if let (lsp_ext::Health::Error, Some(message)) = (status.health, &status.message)\n-            {\n-                self.show_and_log_error(message.clone(), None);\n+            } else if let (health, Some(message)) = (status.health, &status.message) {\n+                let open_log_button = tracing::enabled!(tracing::Level::ERROR)\n+                    && (self.fetch_build_data_error().is_err()\n+                        || self.fetch_workspace_error().is_err());\n+                self.show_message(\n+                    match health {\n+                        lsp_ext::Health::Ok => lsp_types::MessageType::INFO,\n+                        lsp_ext::Health::Warning => lsp_types::MessageType::WARNING,\n+                        lsp_ext::Health::Error => lsp_types::MessageType::ERROR,\n+                    },\n+                    message.clone(),\n+                    open_log_button,\n+                );\n             }\n         }\n     }\n@@ -919,6 +929,7 @@ impl GlobalState {\n                                         this.show_message(\n                                             lsp_types::MessageType::WARNING,\n                                             error.to_string(),\n+                                            false,\n                                         );\n                                     }\n                                     this.update_configuration(config);"}, {"sha": "1a6e1af2eb7edd86fe66fbed80d267daa3c9d4b5", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1787c14e725e4ac416828f986b095a23ecd11494/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=1787c14e725e4ac416828f986b095a23ecd11494", "patch": "@@ -90,38 +90,55 @@ impl GlobalState {\n             quiescent: self.is_quiescent(),\n             message: None,\n         };\n+        let mut message = String::new();\n \n         if self.proc_macro_changed {\n             status.health = lsp_ext::Health::Warning;\n-            status.message =\n-                Some(\"Reload required due to source changes of a procedural macro.\".into())\n+            message.push_str(\"Reload required due to source changes of a procedural macro.\\n\\n\");\n         }\n         if let Err(_) = self.fetch_build_data_error() {\n             status.health = lsp_ext::Health::Warning;\n-            status.message =\n-                Some(\"Failed to run build scripts of some packages, check the logs.\".to_string());\n+            message.push_str(\"Failed to run build scripts of some packages.\\n\\n\");\n         }\n         if !self.config.cargo_autoreload()\n             && self.is_quiescent()\n             && self.fetch_workspaces_queue.op_requested()\n         {\n             status.health = lsp_ext::Health::Warning;\n-            status.message = Some(\"Workspace reload required\".to_string())\n+            message.push_str(\"Auto-reloading is disabled and the workspace has changed, a manual workspace reload is required.\\n\\n\");\n         }\n-\n-        if let Err(_) = self.fetch_workspace_error() {\n-            status.health = lsp_ext::Health::Error;\n-            status.message = Some(\"Failed to load workspaces\".to_string())\n-        }\n-\n         if self.config.linked_projects().is_empty()\n             && self.config.detached_files().is_empty()\n             && self.config.notifications().cargo_toml_not_found\n         {\n             status.health = lsp_ext::Health::Warning;\n-            status.message = Some(\"Failed to discover workspace\".to_string())\n+            message.push_str(\"Failed to discover workspace.\\n\\n\");\n+        }\n+\n+        for ws in self.workspaces.iter() {\n+            let (ProjectWorkspace::Cargo { sysroot, .. }\n+            | ProjectWorkspace::Json { sysroot, .. }\n+            | ProjectWorkspace::DetachedFiles { sysroot, .. }) = ws;\n+            if let Err(Some(e)) = sysroot {\n+                status.health = lsp_ext::Health::Warning;\n+                message.push_str(e);\n+                message.push_str(\"\\n\\n\");\n+            }\n+            if let ProjectWorkspace::Cargo { rustc: Err(Some(e)), .. } = ws {\n+                status.health = lsp_ext::Health::Warning;\n+                message.push_str(e);\n+                message.push_str(\"\\n\\n\");\n+            }\n         }\n \n+        if let Err(_) = self.fetch_workspace_error() {\n+            status.health = lsp_ext::Health::Error;\n+            message.push_str(\"Failed to load workspaces.\\n\\n\");\n+        }\n+\n+        if !message.is_empty() {\n+            status.message = Some(message.trim_end().to_owned());\n+        }\n         status\n     }\n "}]}