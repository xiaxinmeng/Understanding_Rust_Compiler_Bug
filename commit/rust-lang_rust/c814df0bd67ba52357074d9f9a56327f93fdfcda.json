{"sha": "c814df0bd67ba52357074d9f9a56327f93fdfcda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTRkZjBiZDY3YmE1MjM1NzA3NGQ5ZjlhNTYzMjdmOTNmZGZjZGE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-21T21:17:54Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-21T23:03:28Z"}, "message": "Comments only: annotate FIXMEs", "tree": {"sha": "08367039f3be827e98a808fb7d90be23e98226b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08367039f3be827e98a808fb7d90be23e98226b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c814df0bd67ba52357074d9f9a56327f93fdfcda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c814df0bd67ba52357074d9f9a56327f93fdfcda", "html_url": "https://github.com/rust-lang/rust/commit/c814df0bd67ba52357074d9f9a56327f93fdfcda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c814df0bd67ba52357074d9f9a56327f93fdfcda/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8b09160bb6cefc239a8ede5e4ac01e1d61adf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8b09160bb6cefc239a8ede5e4ac01e1d61adf9", "html_url": "https://github.com/rust-lang/rust/commit/be8b09160bb6cefc239a8ede5e4ac01e1d61adf9"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "fbc439a92a6d883e5b827941a63860162c654fa4", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=c814df0bd67ba52357074d9f9a56327f93fdfcda", "patch": "@@ -3,7 +3,7 @@\n  * memory management and isolation between tasks, and domains.\n  *\n  * FIXME: Implement a custom lock-free malloc / free instead of relying solely\n- *       on the standard malloc / free.\n+ *       on the standard malloc / free. (#2686)\n  */\n \n #ifndef MEMORY_REGION_H"}, {"sha": "7a909c57348aa7bbd593e52dc2ae3a7ae4c4ef86", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=c814df0bd67ba52357074d9f9a56327f93fdfcda", "patch": "@@ -67,8 +67,8 @@ command_line_args : public kernel_owned<command_line_args>\n };\n \n // A global that indicates whether Rust typestate claim statements should be\n-// executed Generated code will read this variable directly (I think).\n-// FIXME: This belongs somewhere else\n+// executed. Generated code will read this variable directly (I think).\n+// FIXME: This belongs somewhere else (#2670)\n int check_claims = 0;\n \n /**"}, {"sha": "3f754a4429819c3a837f6bec797dc152fec5013d", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=c814df0bd67ba52357074d9f9a56327f93fdfcda", "patch": "@@ -233,7 +233,7 @@ rand_free(randctx *rctx) {\n /* Debug helpers strictly to verify ABI conformance.\n  *\n  * FIXME: move these into a testcase when the testsuite\n- * understands how to have explicit C files included.\n+ * understands how to have explicit C files included. (#2688)\n  */\n \n struct quad {\n@@ -289,17 +289,18 @@ debug_opaque(type_desc *t, uint8_t *front) {\n     LOG(task, stdlib, \"debug_opaque\");\n     debug_tydesc_helper(t);\n     // FIXME may want to actually account for alignment.  `front` may not\n-    // indeed be the front byte of the passed-in argument.\n+    // indeed be the front byte of the passed-in argument. (#2667)\n     for (uintptr_t i = 0; i < t->size; ++front, ++i) {\n         LOG(task, stdlib, \"  byte %\" PRIdPTR \": 0x%\" PRIx8, i, *front);\n     }\n }\n \n-// FIXME this no longer reflects the actual structure of boxes!\n+// FIXME this no longer reflects the actual structure of boxes! (#2667)\n struct rust_box {\n     RUST_REFCOUNTED(rust_box)\n \n     // FIXME `data` could be aligned differently from the actual box body data\n+    // (#2667)\n     uint8_t data[];\n };\n \n@@ -635,7 +636,7 @@ extern \"C\" CDECL rust_task*\n rust_new_task_in_sched(rust_sched_id id) {\n     rust_task *task = rust_get_current_task();\n     rust_scheduler *sched = task->kernel->get_scheduler_by_id(id);\n-    // FIXME: What if we didn't get the scheduler?\n+    // FIXME: What if we didn't get the scheduler? (#2668)\n     return new_task_common(sched, task);\n }\n "}, {"sha": "f0a03665f75294fbfdd2f49cb13d30ce4c07a9d1", "filename": "src/rt/rust_debug.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_debug.h", "raw_url": "https://github.com/rust-lang/rust/raw/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_debug.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_debug.h?ref=c814df0bd67ba52357074d9f9a56327f93fdfcda", "patch": "@@ -34,7 +34,7 @@ class flag {\n     flag(const char *in_name) : name(in_name), valid(false) {}\n \n     bool operator*() {\n-        // FIXME: We ought to lock this.\n+        // FIXME: We ought to lock this. (#2689)\n         if (!valid) {\n             char *ev = getenv(name);\n             value = ev && ev[0] != '\\0' && ev[0] != '0';"}, {"sha": "de08436cf3f32f90b0d5c8f5eda6fe316b4d8380", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=c814df0bd67ba52357074d9f9a56327f93fdfcda", "patch": "@@ -184,7 +184,7 @@ rust_kernel::run() {\n     return rval;\n }\n \n-// FIXME: Fix all these FIXMEs\n+// FIXME: Fix all these FIXMEs (#2690)\n void\n rust_kernel::fail() {\n     // FIXME: On windows we're getting \"Application has requested the"}, {"sha": "6e29d873ed2e579e2685a246e777bd8eda662be2", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=c814df0bd67ba52357074d9f9a56327f93fdfcda", "patch": "@@ -127,7 +127,7 @@ rust_log::trace_ln(rust_task *task, uint32_t level, char *message) {\n     }\n \n     // FIXME: The scheduler and task names used to have meaning,\n-    // but they are always equal to 'main' currently\n+    // but they are always equal to 'main' currently (#2672)\n #if 0\n \n #if defined(__WIN32__)\n@@ -234,7 +234,7 @@ void update_crate_map(const cratemap* map, log_directive* dirs,\n     update_module_map(map->entries, dirs, n_dirs, n_matches);\n     // Then recurse on linked crates\n     // FIXME this does double work in diamond-shaped deps. could keep\n-    //   a set of visited addresses, if it turns out to be actually slow\n+    // a set of visited addresses, if it turns out to be actually slow (#2673)\n     for (size_t i = 0; map->children[i]; i++) {\n         update_crate_map(map->children[i], dirs, n_dirs, n_matches);\n     }"}, {"sha": "b089ac46934fc53a0597e261cedd21c29e669b3c", "filename": "src/rt/rust_run_program.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_run_program.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_run_program.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_run_program.cpp?ref=c814df0bd67ba52357074d9f9a56327f93fdfcda", "patch": "@@ -160,7 +160,7 @@ rust_run_program(const char* argv[],\n     for (int fd = getdtablesize() - 1; fd >= 3; fd--) close(fd);\n     if (dir) {\n         int result = chdir(dir);\n-        // FIXME: need error handling\n+        // FIXME: need error handling (#2674)\n         assert(!result && \"chdir failed\");\n     }\n \n@@ -178,7 +178,7 @@ rust_run_program(const char* argv[],\n \n extern \"C\" CDECL int\n rust_process_wait(int proc) {\n-    // FIXME: stub; exists to placate linker.\n+    // FIXME: stub; exists to placate linker. (#2692)\n     return 0;\n }\n "}, {"sha": "a69084fc3adb0b33812b48bbacc25d0bb1ebce78", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c814df0bd67ba52357074d9f9a56327f93fdfcda/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=c814df0bd67ba52357074d9f9a56327f93fdfcda", "patch": "@@ -134,7 +134,7 @@ rust_task *\n rust_sched_loop::schedule_task() {\n     lock.must_have_lock();\n     assert(this);\n-    // FIXME: in the face of failing tasks, this is not always right.\n+    // FIXME: in the face of failing tasks, this is not always right. (#2695)\n     // assert(n_live_tasks() > 0);\n     if (running_tasks.length() > 0) {\n         size_t k = isaac_rand(&rctx);"}]}