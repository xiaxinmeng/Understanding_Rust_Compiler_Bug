{"sha": "7947c58d2dafefed7bfa7e8a24d5f90d11b43517", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NDdjNThkMmRhZmVmZWQ3YmZhN2U4YTI0ZDVmOTBkMTFiNDM1MTc=", "commit": {"author": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-07-31T20:17:44Z"}, "committer": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-07-31T20:17:44Z"}, "message": "Allow unnameable tests", "tree": {"sha": "89b16fa71fa895ff74d055b874d8767a6535a095", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89b16fa71fa895ff74d055b874d8767a6535a095"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7947c58d2dafefed7bfa7e8a24d5f90d11b43517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7947c58d2dafefed7bfa7e8a24d5f90d11b43517", "html_url": "https://github.com/rust-lang/rust/commit/7947c58d2dafefed7bfa7e8a24d5f90d11b43517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7947c58d2dafefed7bfa7e8a24d5f90d11b43517/comments", "author": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caab47d3e95377c1fb9ba80f866f459060e103af", "url": "https://api.github.com/repos/rust-lang/rust/commits/caab47d3e95377c1fb9ba80f866f459060e103af", "html_url": "https://github.com/rust-lang/rust/commit/caab47d3e95377c1fb9ba80f866f459060e103af"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "975b91a1088a095ef94bb3c1bc6b60e9da1a6722", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7947c58d2dafefed7bfa7e8a24d5f90d11b43517/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7947c58d2dafefed7bfa7e8a24d5f90d11b43517/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=7947c58d2dafefed7bfa7e8a24d5f90d11b43517", "patch": "@@ -475,6 +475,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 cx: self.cx,\n                 invocations: Vec::new(),\n                 monotonic: self.monotonic,\n+                tests_nameable: true,\n             };\n             (fragment.fold_with(&mut collector), collector.invocations)\n         };\n@@ -1050,6 +1051,11 @@ struct InvocationCollector<'a, 'b: 'a> {\n     cfg: StripUnconfigured<'a>,\n     invocations: Vec<Invocation>,\n     monotonic: bool,\n+\n+    /// Test functions need to be nameable. Tests inside functions or in other\n+    /// unnameable locations need to be ignored. `tests_nameable` tracks whether\n+    /// any test functions found in the current context would be nameable.\n+    tests_nameable: bool,\n }\n \n impl<'a, 'b> InvocationCollector<'a, 'b> {\n@@ -1067,6 +1073,20 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         placeholder(fragment_kind, NodeId::placeholder_from_mark(mark))\n     }\n \n+    /// Folds the item allowing tests to be expanded because they are still nameable.\n+    /// This should probably only be called with module items\n+    fn fold_nameable(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+        fold::noop_fold_item(item, self)\n+    }\n+\n+    /// Folds the item but doesn't allow tests to occur within it\n+    fn fold_unnameable(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+        let was_nameable = mem::replace(&mut self.tests_nameable, false);\n+        let items = fold::noop_fold_item(item, self);\n+        self.tests_nameable = was_nameable;\n+        items\n+    }\n+\n     fn collect_bang(&mut self, mac: ast::Mac, span: Span, kind: AstFragmentKind) -> AstFragment {\n         self.collect(kind, InvocationKind::Bang { mac: mac, ident: None, span: span })\n     }\n@@ -1307,7 +1327,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n             }\n             ast::ItemKind::Mod(ast::Mod { inner, .. }) => {\n                 if item.ident == keywords::Invalid.ident() {\n-                    return noop_fold_item(item, self);\n+                    return self.fold_nameable(item);\n                 }\n \n                 let orig_directory_ownership = self.cx.current_expansion.directory_ownership;\n@@ -1347,14 +1367,14 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n \n                 let orig_module =\n                     mem::replace(&mut self.cx.current_expansion.module, Rc::new(module));\n-                let result = noop_fold_item(item, self);\n+                let result = self.fold_nameable(item);\n                 self.cx.current_expansion.module = orig_module;\n                 self.cx.current_expansion.directory_ownership = orig_directory_ownership;\n                 result\n             }\n             // Ensure that test functions are accessible from the test harness.\n             ast::ItemKind::Fn(..) if self.cx.ecfg.should_test => {\n-                if item.attrs.iter().any(|attr| is_test_or_bench(attr)) {\n+                if self.tests_nameable && item.attrs.iter().any(|attr| is_test_or_bench(attr)) {\n                     let orig_vis = item.vis.clone();\n \n                     // Publicize the item under gensymed name to avoid pollution\n@@ -1370,16 +1390,16 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                         item.ident.span,\n                         orig_vis,\n                         Some(Ident::from_interned_str(item.ident.as_interned_str())),\n-                        self.cx.path(item.ident.span, vec![item.ident]));\n+                        self.cx.path(item.ident.span, vec![Ident::from_str(\"self\"), item.ident]));\n \n                     SmallVector::many(\n-                        noop_fold_item(item, self).into_iter()\n-                            .chain(noop_fold_item(use_item, self)))\n+                        self.fold_unnameable(item).into_iter()\n+                            .chain(self.fold_unnameable(use_item)))\n                 } else {\n-                    noop_fold_item(item, self)\n+                    self.fold_unnameable(item)\n                 }\n             }\n-            _ => noop_fold_item(item, self),\n+            _ => self.fold_unnameable(item),\n         }\n     }\n "}]}