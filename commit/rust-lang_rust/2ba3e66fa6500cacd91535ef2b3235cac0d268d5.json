{"sha": "2ba3e66fa6500cacd91535ef2b3235cac0d268d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYTNlNjZmYTY1MDBjYWNkOTE1MzVlZjJiMzIzNWNhYzBkMjY4ZDU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T12:19:23Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T12:19:23Z"}, "message": "Update tests", "tree": {"sha": "b1ca5632674c6d2dbcd81e6ef1329e6485fe5e5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ca5632674c6d2dbcd81e6ef1329e6485fe5e5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ba3e66fa6500cacd91535ef2b3235cac0d268d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba3e66fa6500cacd91535ef2b3235cac0d268d5", "html_url": "https://github.com/rust-lang/rust/commit/2ba3e66fa6500cacd91535ef2b3235cac0d268d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ba3e66fa6500cacd91535ef2b3235cac0d268d5/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "573c1ffb78d6b012d565081b8d72a488b7e9bb81", "url": "https://api.github.com/repos/rust-lang/rust/commits/573c1ffb78d6b012d565081b8d72a488b7e9bb81", "html_url": "https://github.com/rust-lang/rust/commit/573c1ffb78d6b012d565081b8d72a488b7e9bb81"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "4881f10fac25e33b123e378ed6118e96da8ed844", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba3e66fa6500cacd91535ef2b3235cac0d268d5/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba3e66fa6500cacd91535ef2b3235cac0d268d5/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=2ba3e66fa6500cacd91535ef2b3235cac0d268d5", "patch": "@@ -415,7 +415,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             args: I) -> CFGIndex {\n         let func_or_rcvr_exit = self.expr(func_or_rcvr, pred);\n         let ret = self.straightline(call_expr, func_or_rcvr_exit, args);\n-        let m = self.tcx.hir.get_module_parent(call_expr.id);\n+        let m = self.tcx.hir().get_module_parent(call_expr.id);\n         if self.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(call_expr)) {\n             self.add_unreachable_node()\n         } else {"}, {"sha": "57b3449fe841772a8aa05fcc802e8921c3aed957", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ba3e66fa6500cacd91535ef2b3235cac0d268d5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba3e66fa6500cacd91535ef2b3235cac0d268d5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=2ba3e66fa6500cacd91535ef2b3235cac0d268d5", "patch": "@@ -1197,7 +1197,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Call(ref f, ref args) => {\n-                let m = self.ir.tcx.hir.get_module_parent(expr.id);\n+                let m = self.ir.tcx.hir().get_module_parent(expr.id);\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(expr)) {\n                     self.s.exit_ln\n                 } else {\n@@ -1208,7 +1208,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::MethodCall(.., ref args) => {\n-                let m = self.ir.tcx.hir.get_module_parent(expr.id);\n+                let m = self.ir.tcx.hir().get_module_parent(expr.id);\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(expr)) {\n                     self.s.exit_ln\n                 } else {"}, {"sha": "b9d181a76dd9bb5c9b137ab9af64b06fd3882295", "filename": "src/test/ui/consts/validate_never_arrays.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba3e66fa6500cacd91535ef2b3235cac0d268d5/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ba3e66fa6500cacd91535ef2b3235cac0d268d5/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.stderr?ref=2ba3e66fa6500cacd91535ef2b3235cac0d268d5", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_never_arrays.rs:3:1\n    |\n LL | const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>[0]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "f4974b8fa385402e7f7537c6a37b579729a2af56", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ba3e66fa6500cacd91535ef2b3235cac0d268d5/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ba3e66fa6500cacd91535ef2b3235cac0d268d5/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=2ba3e66fa6500cacd91535ef2b3235cac0d268d5", "patch": "@@ -16,7 +16,7 @@ help: ensure that all possible cases are being handled, possibly by adding wildc\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n \n-error[E0004]: non-exhaustive patterns: type (Void,) is non-empty\n+error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -28,7 +28,7 @@ help: ensure that all possible cases are being handled, possibly by adding wildc\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n \n-error[E0004]: non-exhaustive patterns: type [Void; 1] is non-empty\n+error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive"}]}