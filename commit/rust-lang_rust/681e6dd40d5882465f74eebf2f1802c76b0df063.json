{"sha": "681e6dd40d5882465f74eebf2f1802c76b0df063", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MWU2ZGQ0MGQ1ODgyNDY1Zjc0ZWViZjJmMTgwMmM3NmIwZGYwNjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-02-25T17:12:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-02-26T22:51:26Z"}, "message": "Fix using the #[]-style attribute for unused imports", "tree": {"sha": "e31ce23c60f207a0e3ac293594d1b1402812f194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e31ce23c60f207a0e3ac293594d1b1402812f194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681e6dd40d5882465f74eebf2f1802c76b0df063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681e6dd40d5882465f74eebf2f1802c76b0df063", "html_url": "https://github.com/rust-lang/rust/commit/681e6dd40d5882465f74eebf2f1802c76b0df063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681e6dd40d5882465f74eebf2f1802c76b0df063/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e08d8f23cf284b95e0d6ca237633b6756898648", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e08d8f23cf284b95e0d6ca237633b6756898648", "html_url": "https://github.com/rust-lang/rust/commit/7e08d8f23cf284b95e0d6ca237633b6756898648"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "7058f802bc4a45921522a8a179e7eb510d046d11", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/681e6dd40d5882465f74eebf2f1802c76b0df063/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e6dd40d5882465f74eebf2f1802c76b0df063/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=681e6dd40d5882465f74eebf2f1802c76b0df063", "patch": "@@ -19,6 +19,7 @@ use metadata::cstore::find_extern_mod_stmt_cnum;\n use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n use middle::lang_items::LanguageItems;\n use middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n+use middle::lint::{get_lint_level, get_lint_settings_level};\n use middle::pat_util::{pat_bindings};\n \n use core::cmp;\n@@ -508,16 +509,6 @@ pub impl Module {\n     }\n }\n \n-pub fn unused_import_lint_level(session: Session) -> level {\n-    for session.opts.lint_opts.each |lint_option_pair| {\n-        let (lint_type, lint_level) = *lint_option_pair;\n-        if lint_type == unused_imports {\n-            return lint_level;\n-        }\n-    }\n-    return allow;\n-}\n-\n // Records a possibly-private type definition.\n pub struct TypeNsDef {\n     privacy: Privacy,\n@@ -770,8 +761,6 @@ pub fn Resolver(session: Session,\n \n         graph_root: graph_root,\n \n-        unused_import_lint_level: unused_import_lint_level(session),\n-\n         trait_info: @HashMap(),\n         structs: @HashMap(),\n \n@@ -816,8 +805,6 @@ pub struct Resolver {\n \n     graph_root: @mut NameBindings,\n \n-    unused_import_lint_level: level,\n-\n     trait_info: @HashMap<def_id,@HashMap<ident,()>>,\n     structs: @HashMap<def_id,()>,\n \n@@ -5232,8 +5219,17 @@ pub impl Resolver {\n     // resolve data structures.\n     //\n \n+    fn unused_import_lint_level(@mut self, m: @mut Module) -> level {\n+        let settings = self.session.lint_settings;\n+        match m.def_id {\n+            Some(def) => get_lint_settings_level(settings, unused_imports,\n+                                                 def.node, def.node),\n+            None => get_lint_level(settings.default_settings, unused_imports)\n+        }\n+    }\n+\n     fn check_for_unused_imports_if_necessary(@mut self) {\n-        if self.unused_import_lint_level == allow {\n+        if self.unused_import_lint_level(self.current_module) == allow {\n             return;\n         }\n \n@@ -5293,7 +5289,7 @@ pub impl Resolver {\n                     import_resolution.span != dummy_sp() &&\n                     import_resolution.privacy != Public {\n                 import_resolution.state.warned = true;\n-                match self.unused_import_lint_level {\n+                match self.unused_import_lint_level(module_) {\n                     warn => {\n                         self.session.span_warn(copy import_resolution.span,\n                                                ~\"unused import\");\n@@ -5302,11 +5298,7 @@ pub impl Resolver {\n                       self.session.span_err(copy import_resolution.span,\n                                             ~\"unused import\");\n                     }\n-                    allow => {\n-                      self.session.span_bug(copy import_resolution.span,\n-                                            ~\"shouldn't be here if lint \\\n-                                              is allowed\");\n-                    }\n+                    allow => ()\n                 }\n             }\n         }"}, {"sha": "7756f96b4703a5668ea1b1b3b5ac0513c65a952f", "filename": "src/test/compile-fail/unused-imports-warn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/681e6dd40d5882465f74eebf2f1802c76b0df063/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e6dd40d5882465f74eebf2f1802c76b0df063/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs?ref=681e6dd40d5882465f74eebf2f1802c76b0df063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -D unused-imports\n+#[deny(unused_imports)];\n \n use cal = bar::c::cc;\n \n@@ -39,6 +39,11 @@ mod bar {\n         use foo::Square; //~ ERROR unused import\n         pub fn cc(p: Point) -> int { return 2 * (p.x + p.y); }\n     }\n+\n+    #[allow(unused_imports)]\n+    mod foo {\n+        use core::cmp::Eq;\n+    }\n }\n \n fn main() {"}]}