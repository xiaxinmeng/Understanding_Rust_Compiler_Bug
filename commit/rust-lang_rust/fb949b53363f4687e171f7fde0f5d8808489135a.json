{"sha": "fb949b53363f4687e171f7fde0f5d8808489135a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOTQ5YjUzMzYzZjQ2ODdlMTcxZjdmZGUwZjVkODgwODQ4OTEzNWE=", "commit": {"author": {"name": "Collins Abitekaniza", "email": "collins.abitekaniza@osmosisworld.com", "date": "2018-05-27T22:09:43Z"}, "committer": {"name": "Collins Abitekaniza", "email": "collins.abitekaniza@osmosisworld.com", "date": "2018-06-03T02:02:09Z"}, "message": "thread tool modes through", "tree": {"sha": "16828be0d05af69a84a579ab0d3fe3e0ef2f4942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16828be0d05af69a84a579ab0d3fe3e0ef2f4942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb949b53363f4687e171f7fde0f5d8808489135a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb949b53363f4687e171f7fde0f5d8808489135a", "html_url": "https://github.com/rust-lang/rust/commit/fb949b53363f4687e171f7fde0f5d8808489135a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb949b53363f4687e171f7fde0f5d8808489135a/comments", "author": null, "committer": null, "parents": [{"sha": "ce10910b69c7c2c90a9ba2aeb7c498cb2cfd3ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce10910b69c7c2c90a9ba2aeb7c498cb2cfd3ac9", "html_url": "https://github.com/rust-lang/rust/commit/ce10910b69c7c2c90a9ba2aeb7c498cb2cfd3ac9"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "476a85c9a49adb9679a8ccc7cd9d4e2dfed36a9b", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb949b53363f4687e171f7fde0f5d8808489135a/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb949b53363f4687e171f7fde0f5d8808489135a/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=fb949b53363f4687e171f7fde0f5d8808489135a", "patch": "@@ -219,6 +219,7 @@ impl Step for Rustdoc {\n \n         let mut cargo = prepare_tool_cargo(builder,\n                                            compiler,\n+                                           Mode::Rustc,\n                                            target,\n                                            \"check\",\n                                            \"src/tools/rustdoc\");"}, {"sha": "52fbda7fc4ef97cd02a4201843448783ce3a4766", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb949b53363f4687e171f7fde0f5d8808489135a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb949b53363f4687e171f7fde0f5d8808489135a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=fb949b53363f4687e171f7fde0f5d8808489135a", "patch": "@@ -281,7 +281,12 @@ impl Step for Rls {\n             return;\n         }\n \n-        let mut cargo = tool::prepare_tool_cargo(builder, compiler, host, \"test\", \"src/tools/rls\");\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::Rustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/rls\");\n \n         // Don't build tests dynamically, just a pain to work with\n         cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n@@ -331,8 +336,12 @@ impl Step for Rustfmt {\n             return;\n         }\n \n-        let mut cargo =\n-            tool::prepare_tool_cargo(builder, compiler, host, \"test\", \"src/tools/rustfmt\");\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::Rustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/rustfmt\");\n \n         // Don't build tests dynamically, just a pain to work with\n         cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n@@ -1718,13 +1727,12 @@ impl Step for CrateRustdoc {\n         let compiler = builder.compiler(builder.top_stage, self.host);\n         let target = compiler.host;\n \n-        let mut cargo = tool::prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            target,\n-            test_kind.subcommand(),\n-            \"src/tools/rustdoc\",\n-        );\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::Rustc,\n+                                                 target,\n+                                                 test_kind.subcommand(),\n+                                                 \"src/tools/rustdoc\");\n         if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }"}, {"sha": "d4a2e96cc0d3f7c2bb28f8890d2e825cbc1e4270", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fb949b53363f4687e171f7fde0f5d8808489135a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb949b53363f4687e171f7fde0f5d8808489135a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=fb949b53363f4687e171f7fde0f5d8808489135a", "patch": "@@ -110,7 +110,7 @@ impl Step for ToolBuild {\n             _ => panic!(\"unexpected Mode for tool build\")\n         }\n \n-        let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n+        let mut cargo = prepare_tool_cargo(builder, compiler, self.mode, target, \"build\", path);\n         cargo.arg(\"--features\").arg(self.extra_features.join(\" \"));\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n@@ -202,7 +202,7 @@ impl Step for ToolBuild {\n                 return None;\n             }\n         } else {\n-            let cargo_out = builder.cargo_out(compiler, Mode::ToolRustc, target)\n+            let cargo_out = builder.cargo_out(compiler, self.mode, target)\n                 .join(exe(tool, &compiler.host));\n             let bin = builder.tools_dir(compiler).join(exe(tool, &compiler.host));\n             builder.copy(&cargo_out, &bin);\n@@ -214,11 +214,12 @@ impl Step for ToolBuild {\n pub fn prepare_tool_cargo(\n     builder: &Builder,\n     compiler: Compiler,\n+    mode: Mode,\n     target: Interned<String>,\n     command: &'static str,\n     path: &'static str,\n ) -> Command {\n-    let mut cargo = builder.cargo(compiler, Mode::ToolRustc, target, command);\n+    let mut cargo = builder.cargo(compiler, mode, target, command);\n     let dir = builder.src.join(path);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n@@ -261,6 +262,15 @@ macro_rules! tool {\n             )+\n         }\n \n+        impl Tool {\n+            pub fn get_mode(&self) -> Mode {\n+                let mode = match self {\n+                    $(Tool::$name => $mode,)+\n+                };\n+                mode\n+            }\n+        }\n+\n         impl<'a> Builder<'a> {\n             pub fn tool_exe(&self, tool: Tool) -> PathBuf {\n                 let stage = self.tool_default_stage(tool);\n@@ -414,6 +424,7 @@ impl Step for Rustdoc {\n \n         let mut cargo = prepare_tool_cargo(builder,\n                                            build_compiler,\n+                                           Mode::ToolRustc,\n                                            target,\n                                            \"build\",\n                                            \"src/tools/rustdoc\");\n@@ -575,19 +586,19 @@ impl<'a> Builder<'a> {\n     pub fn tool_cmd(&self, tool: Tool) -> Command {\n         let mut cmd = Command::new(self.tool_exe(tool));\n         let compiler = self.compiler(self.tool_default_stage(tool), self.config.build);\n-        self.prepare_tool_cmd(compiler, &mut cmd);\n+        self.prepare_tool_cmd(compiler, tool.get_mode(), &mut cmd);\n         cmd\n     }\n \n     /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n     ///\n     /// Notably this munges the dynamic library lookup path to point to the\n     /// right location to run `compiler`.\n-    fn prepare_tool_cmd(&self, compiler: Compiler, cmd: &mut Command) {\n+    fn prepare_tool_cmd(&self, compiler: Compiler, mode: Mode, cmd: &mut Command) {\n         let host = &compiler.host;\n         let mut lib_paths: Vec<PathBuf> = vec![\n             PathBuf::from(&self.sysroot_libdir(compiler, compiler.host)),\n-            self.cargo_out(compiler, Mode::ToolRustc, *host).join(\"deps\"),\n+            self.cargo_out(compiler, mode, *host).join(\"deps\"),\n         ];\n \n         // On MSVC a tool may invoke a C compiler (e.g. compiletest in run-make"}]}