{"sha": "da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOWRjMDUwN2JjODYxMDRkYjhiZjdhOTllODQ5YmZkOTk1ZmIxZWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T00:51:42Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T16:24:07Z"}, "message": "Allow future-incompat lints to mention an epoch", "tree": {"sha": "99907dbf58c44579c22cbb109a210634585e5260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99907dbf58c44579c22cbb109a210634585e5260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "html_url": "https://github.com/rust-lang/rust/commit/da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9438c30d59bbe7c4442e4a824a41a2bd00372ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9438c30d59bbe7c4442e4a824a41a2bd00372ac", "html_url": "https://github.com/rust-lang/rust/commit/d9438c30d59bbe7c4442e4a824a41a2bd00372ac"}], "stats": {"total": 130, "additions": 101, "deletions": 29}, "files": [{"sha": "870b52c221f375212708dc227b69cf8614683c71", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "patch": "@@ -99,7 +99,11 @@ pub struct BufferedEarlyLint {\n /// guidelines.\n pub struct FutureIncompatibleInfo {\n     pub id: LintId,\n-    pub reference: &'static str // e.g., a URL for an issue/PR/RFC or error code\n+    /// e.g., a URL for an issue/PR/RFC or error code\n+    pub reference: &'static str,\n+    /// If this is an epoch fixing lint, the epoch in which\n+    /// this lint becomes obsolete\n+    pub epoch: Option<config::Epoch>,\n }\n \n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n@@ -194,11 +198,24 @@ impl LintStore {\n     pub fn register_future_incompatible(&mut self,\n                                         sess: Option<&Session>,\n                                         lints: Vec<FutureIncompatibleInfo>) {\n-        let ids = lints.iter().map(|f| f.id).collect();\n-        self.register_group(sess, false, \"future_incompatible\", ids);\n-        for info in lints {\n-            self.future_incompatible.insert(info.id, info);\n+\n+        for epoch in config::ALL_EPOCHS {\n+            let lints = lints.iter().filter(|f| f.epoch == Some(*epoch)).map(|f| f.id)\n+                             .collect::<Vec<_>>();\n+            if !lints.is_empty() {\n+                self.register_group(sess, false, epoch.lint_name(), lints)\n+            }\n+        }\n+\n+        let mut future_incompatible = vec![];\n+        for lint in lints {\n+            future_incompatible.push(lint.id);\n+            self.future_incompatible.insert(lint.id, lint);\n         }\n+\n+        self.register_group(sess, false, \"future_incompatible\", future_incompatible);\n+\n+\n     }\n \n     pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> {"}, {"sha": "909904b4fc36cd9d16838ca91b21ba6deaf2e70f", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "patch": "@@ -89,14 +89,15 @@ impl LintLevelSets {\n     fn get_lint_level(&self,\n                       lint: &'static Lint,\n                       idx: u32,\n-                      aux: Option<&FxHashMap<LintId, (Level, LintSource)>>)\n+                      aux: Option<&FxHashMap<LintId, (Level, LintSource)>>,\n+                      sess: &Session)\n         -> (Level, LintSource)\n     {\n         let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n         // lint.\n-        let mut level = level.unwrap_or(lint.default_level);\n+        let mut level = level.unwrap_or(lint.default_level(sess));\n \n         // If we're about to issue a warning, check at the last minute for any\n         // directives against the warnings \"lint\". If, for example, there's an\n@@ -235,7 +236,8 @@ impl<'a> LintLevelsBuilder<'a> {\n                         let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n                         let (level, src) = self.sets.get_lint_level(lint,\n                                                                     self.cur,\n-                                                                    Some(&specs));\n+                                                                    Some(&specs),\n+                                                                    &sess);\n                         lint::struct_lint_level(self.sess,\n                                                 lint,\n                                                 level,\n@@ -248,7 +250,8 @@ impl<'a> LintLevelsBuilder<'a> {\n                         let lint = builtin::UNKNOWN_LINTS;\n                         let (level, src) = self.sets.get_lint_level(lint,\n                                                                     self.cur,\n-                                                                    Some(&specs));\n+                                                                    Some(&specs),\n+                                                                    self.sess);\n                         let msg = format!(\"unknown lint: `{}`\", name);\n                         let mut db = lint::struct_lint_level(self.sess,\n                                                 lint,\n@@ -342,7 +345,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                        msg: &str)\n         -> DiagnosticBuilder<'a>\n     {\n-        let (level, src) = self.sets.get_lint_level(lint, self.cur, None);\n+        let (level, src) = self.sets.get_lint_level(lint, self.cur, None, self.sess);\n         lint::struct_lint_level(self.sess, lint, level, src, span, msg)\n     }\n \n@@ -377,11 +380,11 @@ impl LintLevelMap {\n     /// If the `id` was not previously registered, returns `None`. If `None` is\n     /// returned then the parent of `id` should be acquired and this function\n     /// should be called again.\n-    pub fn level_and_source(&self, lint: &'static Lint, id: HirId)\n+    pub fn level_and_source(&self, lint: &'static Lint, id: HirId, session: &Session)\n         -> Option<(Level, LintSource)>\n     {\n         self.id_to_set.get(&id).map(|idx| {\n-            self.sets.get_lint_level(lint, *idx, None)\n+            self.sets.get_lint_level(lint, *idx, None, session)\n         })\n     }\n "}, {"sha": "e28cc9c201d028eec9238de8bedb7a79939cead0", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "patch": "@@ -37,7 +37,7 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, FnKind};\n use hir;\n-use session::{Session, DiagnosticMessageId};\n+use session::{config, Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n use syntax::codemap::MultiSpan;\n@@ -74,25 +74,46 @@ pub struct Lint {\n     ///\n     /// e.g. \"imports that are never used\"\n     pub desc: &'static str,\n+\n+    /// Deny lint after this epoch\n+    pub epoch_deny: Option<config::Epoch>,\n }\n \n impl Lint {\n     /// Get the lint's name, with ASCII letters converted to lowercase.\n     pub fn name_lower(&self) -> String {\n         self.name.to_ascii_lowercase()\n     }\n+\n+    pub fn default_level(&self, session: &Session) -> Level {\n+        if let Some(epoch_deny) = self.epoch_deny {\n+            if session.epoch() >= epoch_deny {\n+                return Level::Deny\n+            }\n+        }\n+        self.default_level\n+    }\n }\n \n /// Declare a static item of type `&'static Lint`.\n #[macro_export]\n macro_rules! declare_lint {\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, $epoch: expr) => (\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: stringify!($NAME),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            epoch_deny: Some($epoch)\n+        };\n+    );\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n-            desc: $desc\n+            desc: $desc,\n+            epoch_deny: None,\n         };\n-    )\n+    );\n }\n \n /// Declare a static `LintArray` and return it as an expression.\n@@ -304,7 +325,7 @@ impl LintId {\n /// Setting for how to handle a lint.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n pub enum Level {\n-    Allow, Warn, Deny, Forbid\n+    Allow, Warn, Deny, Forbid,\n }\n \n impl_stable_hash_for!(enum self::Level {"}, {"sha": "beb828ab91bf7f0fbceff712b32e8b58b19abd84", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "patch": "@@ -113,7 +113,7 @@ pub enum OutputType {\n }\n \n /// The epoch of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq)]\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n #[non_exhaustive]\n pub enum Epoch {\n     // epochs must be kept in order, newest to oldest\n@@ -148,6 +148,15 @@ impl ToString for Epoch {\n     }\n }\n \n+impl Epoch {\n+    pub fn lint_name(&self) -> &'static str {\n+        match *self {\n+            Epoch::Epoch2015 => \"epoch_2015\",\n+            Epoch::Epoch2018 => \"epoch_2018\",\n+        }\n+    }\n+}\n+\n impl str::FromStr for Epoch {\n     type Err = ();\n     fn from_str(s: &str) -> Result<Self, ()> {"}, {"sha": "6901674a6cf8d1a20556e97d5a6a479841c4536d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "patch": "@@ -869,6 +869,10 @@ impl Session {\n     pub fn rust_2018(&self) -> bool {\n         self.opts.debugging_opts.epoch >= Epoch::Epoch2018\n     }\n+\n+    pub fn epoch(&self) -> Epoch {\n+        self.opts.debugging_opts.epoch\n+    }\n }\n \n pub fn build_session(sopts: config::Options,"}, {"sha": "414ddb9efb2c28aac0377c579e6c3f745ca3e300", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "patch": "@@ -2234,7 +2234,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             let sets = self.lint_levels(LOCAL_CRATE);\n             loop {\n                 let hir_id = self.hir.definitions().node_to_hir_id(id);\n-                if let Some(pair) = sets.level_and_source(lint, hir_id) {\n+                if let Some(pair) = sets.level_and_source(lint, hir_id, self.sess) {\n                     return pair\n                 }\n                 let next = self.hir.get_parent_node(id);"}, {"sha": "943d690d767108c93119798cefad4d77b80b6213", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "patch": "@@ -735,7 +735,7 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n \n     // Lint plugins are registered; now we can process command line flags.\n     if sess.opts.describe_lints {\n-        super::describe_lints(&sess.lint_store.borrow(), true);\n+        super::describe_lints(&sess, &sess.lint_store.borrow(), true);\n         return Err(CompileIncomplete::Stopped);\n     }\n "}, {"sha": "5f0d106877c08a5ce1126ae1c3f652e2a56f82a9", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "patch": "@@ -774,15 +774,15 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 -> Option<(Input, Option<PathBuf>)> {\n         match matches.free.len() {\n             0 => {\n+                let mut sess = build_session(sopts.clone(),\n+                    None,\n+                    descriptions.clone());\n                 if sopts.describe_lints {\n                     let mut ls = lint::LintStore::new();\n-                    rustc_lint::register_builtins(&mut ls, None);\n-                    describe_lints(&ls, false);\n+                    rustc_lint::register_builtins(&mut ls, Some(&sess));\n+                    describe_lints(&sess, &ls, false);\n                     return None;\n                 }\n-                let mut sess = build_session(sopts.clone(),\n-                    None,\n-                    descriptions.clone());\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let mut cfg = config::build_configuration(&sess, cfg.clone());\n                 let trans = get_trans(&sess);\n@@ -1121,7 +1121,7 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n              verbose_help);\n }\n \n-fn describe_lints(lint_store: &lint::LintStore, loaded_plugins: bool) {\n+fn describe_lints(sess: &Session, lint_store: &lint::LintStore, loaded_plugins: bool) {\n     println!(\"\n Available lint options:\n     -W <foo>           Warn about <foo>\n@@ -1133,10 +1133,10 @@ Available lint options:\n \n \");\n \n-    fn sort_lints(lints: Vec<(&'static Lint, bool)>) -> Vec<&'static Lint> {\n+    fn sort_lints(sess: &Session, lints: Vec<(&'static Lint, bool)>) -> Vec<&'static Lint> {\n         let mut lints: Vec<_> = lints.into_iter().map(|(x, _)| x).collect();\n         lints.sort_by(|x: &&Lint, y: &&Lint| {\n-            match x.default_level.cmp(&y.default_level) {\n+            match x.default_level(sess).cmp(&y.default_level(sess)) {\n                 // The sort doesn't case-fold but it's doubtful we care.\n                 Equal => x.name.cmp(y.name),\n                 r => r,\n@@ -1159,8 +1159,8 @@ Available lint options:\n                                                    .iter()\n                                                    .cloned()\n                                                    .partition(|&(_, p)| p);\n-    let plugin = sort_lints(plugin);\n-    let builtin = sort_lints(builtin);\n+    let plugin = sort_lints(sess, plugin);\n+    let builtin = sort_lints(sess, builtin);\n \n     let (plugin_groups, builtin_groups): (Vec<_>, _) = lint_store.get_lint_groups()\n                                                                  .iter()"}, {"sha": "c35a3fbe419d110a353ae5ed1ba9b67dd68c8109", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9dc0507bc86104db8bf7a99e849bfd995fb1ef/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=da9dc0507bc86104db8bf7a99e849bfd995fb1ef", "patch": "@@ -185,74 +185,92 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         FutureIncompatibleInfo {\n             id: LintId::of(PRIVATE_IN_PUBLIC),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PUB_USE_OF_PRIVATE_EXTERN_CRATE),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n             reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n             reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_DIRECTORY_OWNERSHIP),\n             reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_IMPORTS),\n             reference: \"issue #38260 <https://github.com/rust-lang/rust/issues/38260>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(RESOLVE_TRAIT_ON_DEFAULTED_UNIT),\n             reference: \"issue #39216 <https://github.com/rust-lang/rust/issues/39216>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n             reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ANONYMOUS_PARAMETERS),\n             reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n             reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LATE_BOUND_LIFETIME_ARGUMENTS),\n             reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_PACKED_BORROWS),\n             reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INCOHERENT_FUNDAMENTAL_IMPLS),\n             reference: \"issue #46205 <https://github.com/rust-lang/rust/issues/46205>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(COERCE_NEVER),\n             reference: \"issue #46325 <https://github.com/rust-lang/rust/issues/46325>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n             reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n+            epoch: None,\n         },\n         ]);\n "}]}