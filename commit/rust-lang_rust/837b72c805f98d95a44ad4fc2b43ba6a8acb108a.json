{"sha": "837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzN2I3MmM4MDVmOThkOTVhNDRhZDRmYzJiNDNiYTZhOGFjYjEwOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-28T05:28:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-28T05:28:13Z"}, "message": "Auto merge of #60955 - agnxy:rename-assoc, r=oli-obk,Centril\n\nRename \"Associated*\" to \"Assoc*\"\n\nThis change is for #60163.\n\nr? @oli-obk", "tree": {"sha": "4aadbdb48e0ae644ece370bd0357c9f70e8a0473", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aadbdb48e0ae644ece370bd0357c9f70e8a0473"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "html_url": "https://github.com/rust-lang/rust/commit/837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ed0b421de4fada7cf68c7a6b80c5bf918c131a", "html_url": "https://github.com/rust-lang/rust/commit/87ed0b421de4fada7cf68c7a6b80c5bf918c131a"}, {"sha": "c963596c03e96f96dead6c545011106f59ae1933", "url": "https://api.github.com/repos/rust-lang/rust/commits/c963596c03e96f96dead6c545011106f59ae1933", "html_url": "https://github.com/rust-lang/rust/commit/c963596c03e96f96dead6c545011106f59ae1933"}], "stats": {"total": 700, "additions": 350, "deletions": 350}, "files": [{"sha": "03f24dbb29025f70ef8004cdab5c80275a6e45fc", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -61,9 +61,9 @@ pub enum DefKind {\n     TyAlias,\n     ForeignTy,\n     TraitAlias,\n-    AssociatedTy,\n+    AssocTy,\n     /// `existential type Foo: Bar;`\n-    AssociatedExistential,\n+    AssocExistential,\n     TyParam,\n \n     // Value namespace\n@@ -74,7 +74,7 @@ pub enum DefKind {\n     /// Refers to the struct or enum variant's constructor.\n     Ctor(CtorOf, CtorKind),\n     Method,\n-    AssociatedConst,\n+    AssocConst,\n \n     // Macro namespace\n     Macro(MacroKind),\n@@ -99,14 +99,14 @@ impl DefKind {\n             DefKind::Existential => \"existential type\",\n             DefKind::TyAlias => \"type alias\",\n             DefKind::TraitAlias => \"trait alias\",\n-            DefKind::AssociatedTy => \"associated type\",\n-            DefKind::AssociatedExistential => \"associated existential type\",\n+            DefKind::AssocTy => \"associated type\",\n+            DefKind::AssocExistential => \"associated existential type\",\n             DefKind::Union => \"union\",\n             DefKind::Trait => \"trait\",\n             DefKind::ForeignTy => \"foreign type\",\n             DefKind::Method => \"method\",\n             DefKind::Const => \"constant\",\n-            DefKind::AssociatedConst => \"associated constant\",\n+            DefKind::AssocConst => \"associated constant\",\n             DefKind::TyParam => \"type parameter\",\n             DefKind::ConstParam => \"const parameter\",\n             DefKind::Macro(macro_kind) => macro_kind.descr(),\n@@ -116,9 +116,9 @@ impl DefKind {\n     /// An English article for the def.\n     pub fn article(&self) -> &'static str {\n         match *self {\n-            DefKind::AssociatedTy\n-            | DefKind::AssociatedConst\n-            | DefKind::AssociatedExistential\n+            DefKind::AssocTy\n+            | DefKind::AssocConst\n+            | DefKind::AssocExistential\n             | DefKind::Enum\n             | DefKind::Existential => \"an\",\n             DefKind::Macro(macro_kind) => macro_kind.article(),"}, {"sha": "8000666044a1aeddeee0dcb9135456365d19cd17", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -370,7 +370,7 @@ pub trait Visitor<'v> : Sized {\n     fn visit_vis(&mut self, vis: &'v Visibility) {\n         walk_vis(self, vis)\n     }\n-    fn visit_associated_item_kind(&mut self, kind: &'v AssociatedItemKind) {\n+    fn visit_associated_item_kind(&mut self, kind: &'v AssocItemKind) {\n         walk_associated_item_kind(self, kind);\n     }\n     fn visit_defaultness(&mut self, defaultness: &'v Defaultness) {\n@@ -1120,7 +1120,7 @@ pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n     }\n }\n \n-pub fn walk_associated_item_kind<'v, V: Visitor<'v>>(_: &mut V, _: &'v AssociatedItemKind) {\n+pub fn walk_associated_item_kind<'v, V: Visitor<'v>>(_: &mut V, _: &'v AssocItemKind) {\n     // No visitable content here: this fn exists so you can call it if\n     // the right thing to do, should content be added in the future,\n     // would be to walk it."}, {"sha": "c5bcddcb26623097858a21b104707626d5f8714e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -1860,7 +1860,7 @@ impl<'a> LoweringContext<'a> {\n                         index: this.def_key(def_id).parent.expect(\"missing parent\"),\n                     };\n                     let type_def_id = match partial_res.base_res() {\n-                        Res::Def(DefKind::AssociatedTy, def_id) if i + 2 == proj_start => {\n+                        Res::Def(DefKind::AssocTy, def_id) if i + 2 == proj_start => {\n                             Some(parent_def_id(self, def_id))\n                         }\n                         Res::Def(DefKind::Variant, def_id) if i + 1 == proj_start => {\n@@ -1882,8 +1882,8 @@ impl<'a> LoweringContext<'a> {\n                             if i + 1 == proj_start => ParenthesizedGenericArgs::Ok,\n                         // `a::b::Trait(Args)::TraitItem`\n                         Res::Def(DefKind::Method, _)\n-                        | Res::Def(DefKind::AssociatedConst, _)\n-                        | Res::Def(DefKind::AssociatedTy, _)\n+                        | Res::Def(DefKind::AssocConst, _)\n+                        | Res::Def(DefKind::AssocTy, _)\n                             if i + 2 == proj_start =>\n                         {\n                             ParenthesizedGenericArgs::Ok\n@@ -3589,13 +3589,13 @@ impl<'a> LoweringContext<'a> {\n     fn lower_trait_item_ref(&mut self, i: &TraitItem) -> hir::TraitItemRef {\n         let (kind, has_default) = match i.node {\n             TraitItemKind::Const(_, ref default) => {\n-                (hir::AssociatedItemKind::Const, default.is_some())\n+                (hir::AssocItemKind::Const, default.is_some())\n             }\n             TraitItemKind::Type(_, ref default) => {\n-                (hir::AssociatedItemKind::Type, default.is_some())\n+                (hir::AssocItemKind::Type, default.is_some())\n             }\n             TraitItemKind::Method(ref sig, ref default) => (\n-                hir::AssociatedItemKind::Method {\n+                hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),\n                 },\n                 default.is_some(),\n@@ -3695,10 +3695,10 @@ impl<'a> LoweringContext<'a> {\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n             kind: match i.node {\n-                ImplItemKind::Const(..) => hir::AssociatedItemKind::Const,\n-                ImplItemKind::Type(..) => hir::AssociatedItemKind::Type,\n-                ImplItemKind::Existential(..) => hir::AssociatedItemKind::Existential,\n-                ImplItemKind::Method(ref sig, _) => hir::AssociatedItemKind::Method {\n+                ImplItemKind::Const(..) => hir::AssocItemKind::Const,\n+                ImplItemKind::Type(..) => hir::AssocItemKind::Type,\n+                ImplItemKind::Existential(..) => hir::AssocItemKind::Existential,\n+                ImplItemKind::Method(ref sig, _) => hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),\n                 },\n                 ImplItemKind::Macro(..) => unimplemented!(),"}, {"sha": "fd42c6f469e1eec2bb91f70e64f6b8dc1d6be44e", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -337,17 +337,17 @@ impl<'hir> Map<'hir> {\n             }\n             Node::TraitItem(item) => {\n                 match item.node {\n-                    TraitItemKind::Const(..) => DefKind::AssociatedConst,\n+                    TraitItemKind::Const(..) => DefKind::AssocConst,\n                     TraitItemKind::Method(..) => DefKind::Method,\n-                    TraitItemKind::Type(..) => DefKind::AssociatedTy,\n+                    TraitItemKind::Type(..) => DefKind::AssocTy,\n                 }\n             }\n             Node::ImplItem(item) => {\n                 match item.node {\n-                    ImplItemKind::Const(..) => DefKind::AssociatedConst,\n+                    ImplItemKind::Const(..) => DefKind::AssocConst,\n                     ImplItemKind::Method(..) => DefKind::Method,\n-                    ImplItemKind::Type(..) => DefKind::AssociatedTy,\n-                    ImplItemKind::Existential(..) => DefKind::AssociatedExistential,\n+                    ImplItemKind::Type(..) => DefKind::AssocTy,\n+                    ImplItemKind::Existential(..) => DefKind::AssocExistential,\n                 }\n             }\n             Node::Variant(_) => DefKind::Variant,"}, {"sha": "1a6f5d3733e7ac5fbc1664639dc078dad699f6a2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -2422,7 +2422,7 @@ pub struct TraitItemRef {\n     pub id: TraitItemId,\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n-    pub kind: AssociatedItemKind,\n+    pub kind: AssocItemKind,\n     pub span: Span,\n     pub defaultness: Defaultness,\n }\n@@ -2438,14 +2438,14 @@ pub struct ImplItemRef {\n     pub id: ImplItemId,\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n-    pub kind: AssociatedItemKind,\n+    pub kind: AssocItemKind,\n     pub span: Span,\n     pub vis: Visibility,\n     pub defaultness: Defaultness,\n }\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum AssociatedItemKind {\n+pub enum AssocItemKind {\n     Const,\n     Method { has_self: bool },\n     Type,"}, {"sha": "14553a972b704923e8bc26ba6cf076bcb568e339", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     fn handle_res(&mut self, res: Res) {\n         match res {\n             Res::Def(DefKind::Const, _)\n-            | Res::Def(DefKind::AssociatedConst, _)\n+            | Res::Def(DefKind::AssocConst, _)\n             | Res::Def(DefKind::TyAlias, _) => {\n                 self.check_def_id(res.def_id());\n             }"}, {"sha": "35b6b76a395679f88165804f7ac0f89c9cebbcb0", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -909,7 +909,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 | Res::Def(DefKind::Ctor(..), _)\n                 | Res::Def(DefKind::Union, _)\n                 | Res::Def(DefKind::TyAlias, _)\n-                | Res::Def(DefKind::AssociatedTy, _)\n+                | Res::Def(DefKind::AssocTy, _)\n                 | Res::SelfTy(..) => {\n                     debug!(\"struct cmt_pat={:?} pat={:?}\", cmt_pat, pat);\n                     delegate.matched_pat(pat, &cmt_pat, match_mode);"}, {"sha": "c6b544469b5fa6840e68f60cd7204c701ff5838c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -703,7 +703,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             Res::Def(DefKind::Ctor(..), _)\n             | Res::Def(DefKind::Const, _)\n             | Res::Def(DefKind::ConstParam, _)\n-            | Res::Def(DefKind::AssociatedConst, _)\n+            | Res::Def(DefKind::AssocConst, _)\n             | Res::Def(DefKind::Fn, _)\n             | Res::Def(DefKind::Method, _)\n             | Res::SelfCtor(..) => {"}, {"sha": "c9835dbd5e78f22845da1bede2fdc8b225720755", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n                             // If this path leads to a constant, then we need to\n                             // recurse into the constant to continue finding\n                             // items that are reachable.\n-                            Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssociatedConst, _) => {\n+                            Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => {\n                                 self.worklist.push(hir_id);\n                             }\n "}, {"sha": "736b4633b38f9865eeeaaf573b0857e9b8c23896", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -1924,7 +1924,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n         let type_def_id = match res {\n-            Res::Def(DefKind::AssociatedTy, def_id)\n+            Res::Def(DefKind::AssocTy, def_id)\n                 if depth == 1 => Some(parent_def_id(self, def_id)),\n             Res::Def(DefKind::Variant, def_id)\n                 if depth == 0 => Some(parent_def_id(self, def_id)),\n@@ -2112,7 +2112,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         };\n \n         let has_self = match assoc_item_kind {\n-            Some(hir::AssociatedItemKind::Method { has_self }) => has_self,\n+            Some(hir::AssocItemKind::Method { has_self }) => has_self,\n             _ => false,\n         };\n "}, {"sha": "b81a4538d971dd9c58079682c9aeab68bdf9bb09", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -527,8 +527,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Check if `def_id` is a trait method.\n         match self.def_kind(def_id) {\n             Some(DefKind::Method) |\n-            Some(DefKind::AssociatedTy) |\n-            Some(DefKind::AssociatedConst) => {\n+            Some(DefKind::AssocTy) |\n+            Some(DefKind::AssocConst) => {\n                 if let ty::TraitContainer(trait_def_id) = self.associated_item(def_id).container {\n                     // Trait methods do not declare visibility (even\n                     // for visibility info in cstore). Use containing"}, {"sha": "ed363800d79def6c82d5fb5efecd28663981ec0f", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -265,7 +265,7 @@ rustc_queries! {\n         query associated_item_def_ids(_: DefId) -> &'tcx [DefId] {}\n \n         /// Maps from a trait item to the trait item \"descriptor\".\n-        query associated_item(_: DefId) -> ty::AssociatedItem {}\n+        query associated_item(_: DefId) -> ty::AssocItem {}\n \n         query impl_trait_ref(_: DefId) -> Option<ty::TraitRef<'tcx>> {}\n         query impl_polarity(_: DefId) -> hir::ImplPolarity {}"}, {"sha": "4b555e54f397da8e3581262b9527208e2168a097", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -993,7 +993,7 @@ fn vtable_methods<'a, 'tcx>(\n     tcx.arena.alloc_from_iter(\n         supertraits(tcx, trait_ref).flat_map(move |trait_ref| {\n             let trait_methods = tcx.associated_items(trait_ref.def_id())\n-                .filter(|item| item.kind == ty::AssociatedKind::Method);\n+                .filter(|item| item.kind == ty::AssocKind::Method);\n \n             // Now list each method's DefId and InternalSubsts (for within its trait).\n             // If the method can never be called from this object, produce None."}, {"sha": "5006ff75667e8c7655049985eccd18551c6dbd18", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -35,7 +35,7 @@ pub enum ObjectSafetyViolation {\n     Method(ast::Name, MethodViolationCode),\n \n     /// Associated const.\n-    AssociatedConst(ast::Name),\n+    AssocConst(ast::Name),\n }\n \n impl ObjectSafetyViolation {\n@@ -58,7 +58,7 @@ impl ObjectSafetyViolation {\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver) =>\n                 format!(\"method `{}`'s receiver cannot be dispatched on\", name).into(),\n-            ObjectSafetyViolation::AssociatedConst(name) =>\n+            ObjectSafetyViolation::AssocConst(name) =>\n                 format!(\"the trait cannot contain associated consts like `{}`\", name).into(),\n         }\n     }\n@@ -119,7 +119,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     {\n         // Check methods for violations.\n         let mut violations: Vec<_> = self.associated_items(trait_def_id)\n-            .filter(|item| item.kind == ty::AssociatedKind::Method)\n+            .filter(|item| item.kind == ty::AssocKind::Method)\n             .filter_map(|item|\n                 self.object_safety_violation_for_method(trait_def_id, &item)\n                     .map(|code| ObjectSafetyViolation::Method(item.ident.name, code))\n@@ -151,8 +151,8 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         }\n \n         violations.extend(self.associated_items(trait_def_id)\n-            .filter(|item| item.kind == ty::AssociatedKind::Const)\n-            .map(|item| ObjectSafetyViolation::AssociatedConst(item.ident.name)));\n+            .filter(|item| item.kind == ty::AssocKind::Const)\n+            .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name)));\n \n         debug!(\"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n                trait_def_id,\n@@ -251,7 +251,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     /// Returns `Some(_)` if this method makes the containing trait not object safe.\n     fn object_safety_violation_for_method(self,\n                                           trait_def_id: DefId,\n-                                          method: &ty::AssociatedItem)\n+                                          method: &ty::AssocItem)\n                                           -> Option<MethodViolationCode>\n     {\n         debug!(\"object_safety_violation_for_method({:?}, {:?})\", trait_def_id, method);\n@@ -270,7 +270,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     /// otherwise ensure that they cannot be used when `Self=Trait`.\n     pub fn is_vtable_safe_method(self,\n                                  trait_def_id: DefId,\n-                                 method: &ty::AssociatedItem)\n+                                 method: &ty::AssocItem)\n                                  -> bool\n     {\n         debug!(\"is_vtable_safe_method({:?}, {:?})\", trait_def_id, method);\n@@ -291,7 +291,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     /// `Self:Sized`.\n     fn virtual_call_violation_for_method(self,\n                                          trait_def_id: DefId,\n-                                         method: &ty::AssociatedItem)\n+                                         method: &ty::AssocItem)\n                                          -> Option<MethodViolationCode>\n     {\n         // The method's first parameter must be named `self`\n@@ -439,7 +439,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n                 self.associated_items(super_trait_ref.def_id())\n                     .map(move |item| (super_trait_ref, item))\n             })\n-            .filter(|(_, item)| item.kind == ty::AssociatedKind::Type)\n+            .filter(|(_, item)| item.kind == ty::AssocKind::Type)\n             .collect::<Vec<_>>();\n \n         // existential predicates need to be in a specific order\n@@ -520,7 +520,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     #[allow(dead_code)]\n     fn receiver_is_dispatchable(\n         self,\n-        method: &ty::AssociatedItem,\n+        method: &ty::AssocItem,\n         receiver_ty: Ty<'tcx>,\n     ) -> bool {\n         debug!(\"receiver_is_dispatchable: method = {:?}, receiver_ty = {:?}\", method, receiver_ty);"}, {"sha": "92d5d4f03190313ef5952c51fee1cf7e45ef8e87", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -275,7 +275,7 @@ pub fn normalize_with_depth<'a, 'b, 'gcx, 'tcx, T>(\n     where T : TypeFoldable<'tcx>\n {\n     debug!(\"normalize_with_depth(depth={}, value={:?})\", depth, value);\n-    let mut normalizer = AssociatedTypeNormalizer::new(selcx, param_env, cause, depth);\n+    let mut normalizer = AssocTypeNormalizer::new(selcx, param_env, cause, depth);\n     let result = normalizer.fold(value);\n     debug!(\"normalize_with_depth: depth={} result={:?} with {} obligations\",\n            depth, result, normalizer.obligations.len());\n@@ -287,22 +287,22 @@ pub fn normalize_with_depth<'a, 'b, 'gcx, 'tcx, T>(\n     }\n }\n \n-struct AssociatedTypeNormalizer<'a, 'b: 'a, 'gcx: 'b+'tcx, 'tcx: 'b> {\n+struct AssocTypeNormalizer<'a, 'b: 'a, 'gcx: 'b+'tcx, 'tcx: 'b> {\n     selcx: &'a mut SelectionContext<'b, 'gcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     cause: ObligationCause<'tcx>,\n     obligations: Vec<PredicateObligation<'tcx>>,\n     depth: usize,\n }\n \n-impl<'a, 'b, 'gcx, 'tcx> AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n+impl<'a, 'b, 'gcx, 'tcx> AssocTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n     fn new(selcx: &'a mut SelectionContext<'b, 'gcx, 'tcx>,\n            param_env: ty::ParamEnv<'tcx>,\n            cause: ObligationCause<'tcx>,\n            depth: usize)\n-           -> AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx>\n+           -> AssocTypeNormalizer<'a, 'b, 'gcx, 'tcx>\n     {\n-        AssociatedTypeNormalizer {\n+        AssocTypeNormalizer {\n             selcx,\n             param_env,\n             cause,\n@@ -322,7 +322,7 @@ impl<'a, 'b, 'gcx, 'tcx> AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n+impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssocTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n     fn tcx<'c>(&'c self) -> TyCtxt<'c, 'gcx, 'tcx> {\n         self.selcx.tcx()\n     }\n@@ -388,7 +388,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                                                               self.cause.clone(),\n                                                               self.depth,\n                                                               &mut self.obligations);\n-                debug!(\"AssociatedTypeNormalizer: depth={} normalized {:?} to {:?}, \\\n+                debug!(\"AssocTypeNormalizer: depth={} normalized {:?} to {:?}, \\\n                         now with {} obligations\",\n                        self.depth, ty, normalized_ty, self.obligations.len());\n                 normalized_ty\n@@ -635,7 +635,7 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n                    projected_obligations);\n \n             let result = if projected_ty.has_projections() {\n-                let mut normalizer = AssociatedTypeNormalizer::new(selcx,\n+                let mut normalizer = AssocTypeNormalizer::new(selcx,\n                                                                    param_env,\n                                                                    cause,\n                                                                    depth+1);\n@@ -1496,7 +1496,7 @@ fn confirm_impl_candidate<'cx, 'gcx, 'tcx>(\n         };\n     }\n     let substs = translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.node);\n-    let ty = if let ty::AssociatedKind::Existential = assoc_ty.item.kind {\n+    let ty = if let ty::AssocKind::Existential = assoc_ty.item.kind {\n         let item_substs = InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         tcx.mk_opaque(assoc_ty.item.def_id, item_substs)\n     } else {\n@@ -1517,7 +1517,7 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'gcx, 'tcx>,\n     impl_def_id: DefId,\n     assoc_ty_def_id: DefId)\n-    -> specialization_graph::NodeItem<ty::AssociatedItem>\n+    -> specialization_graph::NodeItem<ty::AssocItem>\n {\n     let tcx = selcx.tcx();\n     let assoc_ty_name = tcx.associated_item(assoc_ty_def_id).ident;\n@@ -1532,7 +1532,7 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n     // cycle error if the specialization graph is currently being built.\n     let impl_node = specialization_graph::Node::Impl(impl_def_id);\n     for item in impl_node.items(tcx) {\n-        if item.kind == ty::AssociatedKind::Type &&\n+        if item.kind == ty::AssocKind::Type &&\n                 tcx.hygienic_eq(item.ident, assoc_ty_name, trait_def_id) {\n             return specialization_graph::NodeItem {\n                 node: specialization_graph::Node::Impl(impl_def_id),\n@@ -1543,7 +1543,7 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n \n     if let Some(assoc_item) = trait_def\n         .ancestors(tcx, impl_def_id)\n-        .defs(tcx, assoc_ty_name, ty::AssociatedKind::Type, trait_def_id)\n+        .defs(tcx, assoc_ty_name, ty::AssocKind::Type, trait_def_id)\n         .next() {\n         assoc_item\n     } else {"}, {"sha": "5da4a1b9c5f36f81e4206d52706117e67b00d316", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -112,7 +112,7 @@ pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n pub fn find_associated_item<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    item: &ty::AssociatedItem,\n+    item: &ty::AssocItem,\n     substs: SubstsRef<'tcx>,\n     impl_data: &super::VtableImplData<'tcx, ()>,\n ) -> (DefId, SubstsRef<'tcx>) {"}, {"sha": "9a90b9fdaeaaac42c353d60266cb3beb292f0ac5", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -426,7 +426,7 @@ impl<'a, 'gcx, 'tcx> Node {\n     pub fn items(\n         &self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    ) -> ty::AssociatedItemsIterator<'a, 'gcx, 'tcx> {\n+    ) -> ty::AssocItemsIterator<'a, 'gcx, 'tcx> {\n         tcx.associated_items(self.def_id())\n     }\n \n@@ -484,11 +484,11 @@ impl<'a, 'gcx, 'tcx> Ancestors<'gcx> {\n         self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         trait_item_name: Ident,\n-        trait_item_kind: ty::AssociatedKind,\n+        trait_item_kind: ty::AssocKind,\n         trait_def_id: DefId,\n-    ) -> impl Iterator<Item = NodeItem<ty::AssociatedItem>> + Captures<'gcx> + Captures<'tcx> + 'a {\n+    ) -> impl Iterator<Item = NodeItem<ty::AssocItem>> + Captures<'gcx> + Captures<'tcx> + 'a {\n         self.flat_map(move |node| {\n-            use crate::ty::AssociatedKind::*;\n+            use crate::ty::AssocKind::*;\n             node.items(tcx).filter(move |impl_item| match (trait_item_kind, impl_item.kind) {\n                 | (Const, Const)\n                 | (Method, Method)"}, {"sha": "2f87a743a012c9d41f584351391a1ad7c56a4722", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -594,7 +594,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Count number of methods and add them to the total offset.\n         // Skip over associated types and constants.\n         for trait_item in self.associated_items(trait_ref.def_id()) {\n-            if trait_item.kind == ty::AssociatedKind::Method {\n+            if trait_item.kind == ty::AssocKind::Method {\n                 entries += 1;\n             }\n         }\n@@ -614,10 +614,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         for trait_item in self.associated_items(object.upcast_trait_ref.def_id()) {\n             if trait_item.def_id == method_def_id {\n                 // The item with the ID we were given really ought to be a method.\n-                assert_eq!(trait_item.kind, ty::AssociatedKind::Method);\n+                assert_eq!(trait_item.kind, ty::AssocKind::Method);\n                 return entries;\n             }\n-            if trait_item.kind == ty::AssociatedKind::Method {\n+            if trait_item.kind == ty::AssocKind::Method {\n                 entries += 1;\n             }\n         }"}, {"sha": "11aad87b70dd3e4ce5b70356e078cdcd853204c3", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'gcx, 'tcx> OverloadedDeref<'tcx> {\n             hir::MutMutable => tcx.lang_items().deref_mut_trait()\n         };\n         let method_def_id = tcx.associated_items(trait_def_id.unwrap())\n-            .find(|m| m.kind == ty::AssociatedKind::Method).unwrap().def_id;\n+            .find(|m| m.kind == ty::AssocKind::Method).unwrap().def_id;\n         (method_def_id, tcx.mk_substs_trait(source, &[]))\n     }\n }"}, {"sha": "be15b1e3cc9e4c930831354a2c3d300f61e1166c", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -341,7 +341,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n \n fn resolve_associated_item<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    trait_item: &ty::AssociatedItem,\n+    trait_item: &ty::AssocItem,\n     param_env: ty::ParamEnv<'tcx>,\n     trait_id: DefId,\n     rcvr_substs: SubstsRef<'tcx>,\n@@ -450,7 +450,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n            substs);\n     let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n     let call_once = tcx.associated_items(fn_once)\n-        .find(|it| it.kind == ty::AssociatedKind::Method)\n+        .find(|it| it.kind == ty::AssocKind::Method)\n         .unwrap().def_id;\n     let def = ty::InstanceDef::ClosureOnceShim { call_once };\n "}, {"sha": "f1d1abfa0fb4b55978bcdbd196887beab35aa4dd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -3,7 +3,7 @@\n #![allow(usage_of_ty_tykind)]\n \n pub use self::Variance::*;\n-pub use self::AssociatedItemContainer::*;\n+pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::fold::TypeFoldable;\n@@ -134,12 +134,12 @@ pub struct Resolutions {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable)]\n-pub enum AssociatedItemContainer {\n+pub enum AssocItemContainer {\n     TraitContainer(DefId),\n     ImplContainer(DefId),\n }\n \n-impl AssociatedItemContainer {\n+impl AssocItemContainer {\n     /// Asserts that this is the `DefId` of an associated item declared\n     /// in a trait, and returns the trait `DefId`.\n     pub fn assert_trait(&self) -> DefId {\n@@ -169,62 +169,62 @@ pub struct ImplHeader<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n-pub struct AssociatedItem {\n+pub struct AssocItem {\n     pub def_id: DefId,\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n-    pub kind: AssociatedKind,\n+    pub kind: AssocKind,\n     pub vis: Visibility,\n     pub defaultness: hir::Defaultness,\n-    pub container: AssociatedItemContainer,\n+    pub container: AssocItemContainer,\n \n     /// Whether this is a method with an explicit self\n     /// as its first argument, allowing method calls.\n     pub method_has_self_argument: bool,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum AssociatedKind {\n+pub enum AssocKind {\n     Const,\n     Method,\n     Existential,\n     Type\n }\n \n-impl AssociatedItem {\n+impl AssocItem {\n     pub fn def_kind(&self) -> DefKind {\n         match self.kind {\n-            AssociatedKind::Const => DefKind::AssociatedConst,\n-            AssociatedKind::Method => DefKind::Method,\n-            AssociatedKind::Type => DefKind::AssociatedTy,\n-            AssociatedKind::Existential => DefKind::AssociatedExistential,\n+            AssocKind::Const => DefKind::AssocConst,\n+            AssocKind::Method => DefKind::Method,\n+            AssocKind::Type => DefKind::AssocTy,\n+            AssocKind::Existential => DefKind::AssocExistential,\n         }\n     }\n \n     /// Tests whether the associated item admits a non-trivial implementation\n     /// for !\n     pub fn relevant_for_never<'tcx>(&self) -> bool {\n         match self.kind {\n-            AssociatedKind::Existential |\n-            AssociatedKind::Const |\n-            AssociatedKind::Type => true,\n+            AssocKind::Existential |\n+            AssocKind::Const |\n+            AssocKind::Type => true,\n             // FIXME(canndrew): Be more thorough here, check if any argument is uninhabited.\n-            AssociatedKind::Method => !self.method_has_self_argument,\n+            AssocKind::Method => !self.method_has_self_argument,\n         }\n     }\n \n     pub fn signature<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String {\n         match self.kind {\n-            ty::AssociatedKind::Method => {\n+            ty::AssocKind::Method => {\n                 // We skip the binder here because the binder would deanonymize all\n                 // late-bound regions, and we don't want method signatures to show up\n                 // `as for<'r> fn(&'r MyType)`.  Pretty-printing handles late-bound\n                 // regions just fine, showing `fn(&MyType)`.\n                 tcx.fn_sig(self.def_id).skip_binder().to_string()\n             }\n-            ty::AssociatedKind::Type => format!(\"type {};\", self.ident),\n-            ty::AssociatedKind::Existential => format!(\"existential type {};\", self.ident),\n-            ty::AssociatedKind::Const => {\n+            ty::AssocKind::Type => format!(\"type {};\", self.ident),\n+            ty::AssocKind::Existential => format!(\"existential type {};\", self.ident),\n+            ty::AssocKind::Const => {\n                 format!(\"const {}: {:?};\", self.ident, tcx.type_of(self.def_id))\n             }\n         }\n@@ -2343,7 +2343,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             Res::Def(DefKind::Variant, vid) => self.variant_with_id(vid),\n             Res::Def(DefKind::Ctor(..), cid) => self.variant_with_ctor_id(cid),\n             Res::Def(DefKind::Struct, _) | Res::Def(DefKind::Union, _) |\n-            Res::Def(DefKind::TyAlias, _) | Res::Def(DefKind::AssociatedTy, _) | Res::SelfTy(..) |\n+            Res::Def(DefKind::TyAlias, _) | Res::Def(DefKind::AssocTy, _) | Res::SelfTy(..) |\n             Res::SelfCtor(..) => self.non_enum_variant(),\n             _ => bug!(\"unexpected res {:?} in variant_of_res\", res)\n         }\n@@ -2793,9 +2793,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn provided_trait_methods(self, id: DefId) -> Vec<AssociatedItem> {\n+    pub fn provided_trait_methods(self, id: DefId) -> Vec<AssocItem> {\n         self.associated_items(id)\n-            .filter(|item| item.kind == AssociatedKind::Method && item.defaultness.has_value())\n+            .filter(|item| item.kind == AssocKind::Method && item.defaultness.has_value())\n             .collect()\n     }\n \n@@ -2805,17 +2805,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    pub fn opt_associated_item(self, def_id: DefId) -> Option<AssociatedItem> {\n+    pub fn opt_associated_item(self, def_id: DefId) -> Option<AssocItem> {\n         let is_associated_item = if let Some(hir_id) = self.hir().as_local_hir_id(def_id) {\n             match self.hir().get_by_hir_id(hir_id) {\n                 Node::TraitItem(_) | Node::ImplItem(_) => true,\n                 _ => false,\n             }\n         } else {\n             match self.def_kind(def_id).expect(\"no def for def-id\") {\n-                DefKind::AssociatedConst\n+                DefKind::AssocConst\n                 | DefKind::Method\n-                | DefKind::AssociatedTy => true,\n+                | DefKind::AssocTy => true,\n                 _ => false,\n             }\n         };\n@@ -2831,18 +2831,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                            parent_def_id: DefId,\n                                            parent_vis: &hir::Visibility,\n                                            trait_item_ref: &hir::TraitItemRef)\n-                                           -> AssociatedItem {\n+                                           -> AssocItem {\n         let def_id = self.hir().local_def_id_from_hir_id(trait_item_ref.id.hir_id);\n         let (kind, has_self) = match trait_item_ref.kind {\n-            hir::AssociatedItemKind::Const => (ty::AssociatedKind::Const, false),\n-            hir::AssociatedItemKind::Method { has_self } => {\n-                (ty::AssociatedKind::Method, has_self)\n+            hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n+            hir::AssocItemKind::Method { has_self } => {\n+                (ty::AssocKind::Method, has_self)\n             }\n-            hir::AssociatedItemKind::Type => (ty::AssociatedKind::Type, false),\n-            hir::AssociatedItemKind::Existential => bug!(\"only impls can have existentials\"),\n+            hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n+            hir::AssocItemKind::Existential => bug!(\"only impls can have existentials\"),\n         };\n \n-        AssociatedItem {\n+        AssocItem {\n             ident: trait_item_ref.ident,\n             kind,\n             // Visibility of trait items is inherited from their traits.\n@@ -2857,18 +2857,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     fn associated_item_from_impl_item_ref(self,\n                                           parent_def_id: DefId,\n                                           impl_item_ref: &hir::ImplItemRef)\n-                                          -> AssociatedItem {\n+                                          -> AssocItem {\n         let def_id = self.hir().local_def_id_from_hir_id(impl_item_ref.id.hir_id);\n         let (kind, has_self) = match impl_item_ref.kind {\n-            hir::AssociatedItemKind::Const => (ty::AssociatedKind::Const, false),\n-            hir::AssociatedItemKind::Method { has_self } => {\n-                (ty::AssociatedKind::Method, has_self)\n+            hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n+            hir::AssocItemKind::Method { has_self } => {\n+                (ty::AssocKind::Method, has_self)\n             }\n-            hir::AssociatedItemKind::Type => (ty::AssociatedKind::Type, false),\n-            hir::AssociatedItemKind::Existential => (ty::AssociatedKind::Existential, false),\n+            hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n+            hir::AssocItemKind::Existential => (ty::AssocKind::Existential, false),\n         };\n \n-        AssociatedItem {\n+        AssocItem {\n             ident: impl_item_ref.ident,\n             kind,\n             // Visibility of trait impl items doesn't matter.\n@@ -2893,13 +2893,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn associated_items(\n         self,\n         def_id: DefId,\n-    ) -> AssociatedItemsIterator<'a, 'gcx, 'tcx> {\n+    ) -> AssocItemsIterator<'a, 'gcx, 'tcx> {\n         // Ideally, we would use `-> impl Iterator` here, but it falls\n         // afoul of the conservative \"capture [restrictions]\" we put\n         // in place, so we use a hand-written iterator.\n         //\n         // [restrictions]: https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\n-        AssociatedItemsIterator {\n+        AssocItemsIterator {\n             tcx: self,\n             def_ids: self.associated_item_def_ids(def_id),\n             next_index: 0,\n@@ -3104,23 +3104,23 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub struct AssociatedItemsIterator<'a, 'gcx: 'tcx, 'tcx: 'a> {\n+pub struct AssocItemsIterator<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     def_ids: &'gcx [DefId],\n     next_index: usize,\n }\n \n-impl Iterator for AssociatedItemsIterator<'_, '_, '_> {\n-    type Item = AssociatedItem;\n+impl Iterator for AssocItemsIterator<'_, '_, '_> {\n+    type Item = AssocItem;\n \n-    fn next(&mut self) -> Option<AssociatedItem> {\n+    fn next(&mut self) -> Option<AssocItem> {\n         let def_id = self.def_ids.get(self.next_index)?;\n         self.next_index += 1;\n         Some(self.tcx.associated_item(*def_id))\n     }\n }\n \n-fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> AssociatedItem {\n+fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> AssocItem {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let parent_id = tcx.hir().get_parent_item(id);\n     let parent_def_id = tcx.hir().local_def_id_from_hir_id(parent_id);"}, {"sha": "4b4dd5d88d93add28055afb84bd9b0a7272af36a", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -823,7 +823,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             match self.tcx().def_kind(did) {\n                 | Some(DefKind::Static)\n                 | Some(DefKind::Const)\n-                | Some(DefKind::AssociatedConst) => p!(print_value_path(did, substs)),\n+                | Some(DefKind::AssocConst) => p!(print_value_path(did, substs)),\n                 _ => if did.is_local() {\n                     let span = self.tcx().def_span(did);\n                     if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {"}, {"sha": "4711429502f3fd5c1eb17273523844f193718ff8", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -998,7 +998,7 @@ impl<'a, 'tcx> ProjectionTy<'tcx> {\n         tcx: TyCtxt<'_, '_, '_>, trait_ref: ty::TraitRef<'tcx>, item_name: Ident\n     ) -> ProjectionTy<'tcx> {\n         let item_def_id = tcx.associated_items(trait_ref.def_id).find(|item| {\n-            item.kind == ty::AssociatedKind::Type &&\n+            item.kind == ty::AssocKind::Type &&\n             tcx.hygienic_eq(item_name, item.ident, trait_ref.def_id)\n         }).unwrap().def_id;\n "}, {"sha": "cc79f7b077eb28365c913f65f86ab982b888c137", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -471,7 +471,7 @@ impl cstore::CStore {\n         })\n     }\n \n-    pub fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssociatedItem {\n+    pub fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssocItem {\n         self.get_crate_data(def.krate).get_associated_item(def.index)\n     }\n }"}, {"sha": "a484928ce6c3663365970bcba5464dde29f38655", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -401,7 +401,7 @@ impl<'tcx> EntryKind<'tcx> {\n     fn def_kind(&self) -> Option<DefKind> {\n         Some(match *self {\n             EntryKind::Const(..) => DefKind::Const,\n-            EntryKind::AssociatedConst(..) => DefKind::AssociatedConst,\n+            EntryKind::AssocConst(..) => DefKind::AssocConst,\n             EntryKind::ImmStatic |\n             EntryKind::MutStatic |\n             EntryKind::ForeignImmStatic |\n@@ -415,8 +415,8 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::TypeParam => DefKind::TyParam,\n             EntryKind::ConstParam => DefKind::ConstParam,\n             EntryKind::Existential => DefKind::Existential,\n-            EntryKind::AssociatedType(_) => DefKind::AssociatedTy,\n-            EntryKind::AssociatedExistential(_) => DefKind::AssociatedExistential,\n+            EntryKind::AssocType(_) => DefKind::AssocTy,\n+            EntryKind::AssocExistential(_) => DefKind::AssocExistential,\n             EntryKind::Mod(_) => DefKind::Mod,\n             EntryKind::Variant(_) => DefKind::Variant,\n             EntryKind::Trait(_) => DefKind::Trait,\n@@ -873,7 +873,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn const_is_rvalue_promotable_to_static(&self, id: DefIndex) -> bool {\n         match self.entry(id).kind {\n-            EntryKind::AssociatedConst(_, data, _) |\n+            EntryKind::AssocConst(_, data, _) |\n             EntryKind::Const(data, _) => data.ast_promotable,\n             _ => bug!(),\n         }\n@@ -897,38 +897,38 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn mir_const_qualif(&self, id: DefIndex) -> u8 {\n         match self.entry(id).kind {\n             EntryKind::Const(qualif, _) |\n-            EntryKind::AssociatedConst(AssociatedContainer::ImplDefault, qualif, _) |\n-            EntryKind::AssociatedConst(AssociatedContainer::ImplFinal, qualif, _) => {\n+            EntryKind::AssocConst(AssocContainer::ImplDefault, qualif, _) |\n+            EntryKind::AssocConst(AssocContainer::ImplFinal, qualif, _) => {\n                 qualif.mir\n             }\n             _ => bug!(),\n         }\n     }\n \n-    pub fn get_associated_item(&self, id: DefIndex) -> ty::AssociatedItem {\n+    pub fn get_associated_item(&self, id: DefIndex) -> ty::AssocItem {\n         let item = self.entry(id);\n         let def_key = self.def_key(id);\n         let parent = self.local_def_id(def_key.parent.unwrap());\n         let name = def_key.disambiguated_data.data.get_opt_name().unwrap();\n \n         let (kind, container, has_self) = match item.kind {\n-            EntryKind::AssociatedConst(container, _, _) => {\n-                (ty::AssociatedKind::Const, container, false)\n+            EntryKind::AssocConst(container, _, _) => {\n+                (ty::AssocKind::Const, container, false)\n             }\n             EntryKind::Method(data) => {\n                 let data = data.decode(self);\n-                (ty::AssociatedKind::Method, data.container, data.has_self)\n+                (ty::AssocKind::Method, data.container, data.has_self)\n             }\n-            EntryKind::AssociatedType(container) => {\n-                (ty::AssociatedKind::Type, container, false)\n+            EntryKind::AssocType(container) => {\n+                (ty::AssocKind::Type, container, false)\n             }\n-            EntryKind::AssociatedExistential(container) => {\n-                (ty::AssociatedKind::Existential, container, false)\n+            EntryKind::AssocExistential(container) => {\n+                (ty::AssocKind::Existential, container, false)\n             }\n             _ => bug!(\"cannot get associated-item of `{:?}`\", def_key)\n         };\n \n-        ty::AssociatedItem {\n+        ty::AssocItem {\n             ident: Ident::from_interned_str(name),\n             kind,\n             vis: item.visibility.decode(self),\n@@ -1150,7 +1150,7 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn get_rendered_const(&self, id: DefIndex) -> String {\n         match self.entry(id).kind {\n             EntryKind::Const(_, data) |\n-            EntryKind::AssociatedConst(_, _, data) => data.decode(self).0,\n+            EntryKind::AssocConst(_, _, data) => data.decode(self).0,\n             _ => bug!(),\n         }\n     }"}, {"sha": "5d080de2645e30a4be6925a235c3f59acb81f0ab", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -822,15 +822,15 @@ impl EncodeContext<'_, 'tcx> {\n \n         let container = match trait_item.defaultness {\n             hir::Defaultness::Default { has_value: true } =>\n-                AssociatedContainer::TraitWithDefault,\n+                AssocContainer::TraitWithDefault,\n             hir::Defaultness::Default { has_value: false } =>\n-                AssociatedContainer::TraitRequired,\n+                AssocContainer::TraitRequired,\n             hir::Defaultness::Final =>\n                 span_bug!(ast_item.span, \"traits cannot have final items\"),\n         };\n \n         let kind = match trait_item.kind {\n-            ty::AssociatedKind::Const => {\n+            ty::AssocKind::Const => {\n                 let const_qualif =\n                     if let hir::TraitItemKind::Const(_, Some(body)) = ast_item.node {\n                         self.const_qualif(0, body)\n@@ -842,9 +842,9 @@ impl EncodeContext<'_, 'tcx> {\n                     hir::print::to_string(self.tcx.hir(), |s| s.print_trait_item(ast_item));\n                 let rendered_const = self.lazy(&RenderedConst(rendered));\n \n-                EntryKind::AssociatedConst(container, const_qualif, rendered_const)\n+                EntryKind::AssocConst(container, const_qualif, rendered_const)\n             }\n-            ty::AssociatedKind::Method => {\n+            ty::AssocKind::Method => {\n                 let fn_data = if let hir::TraitItemKind::Method(_, ref m) = ast_item.node {\n                     let arg_names = match *m {\n                         hir::TraitMethod::Required(ref names) => {\n@@ -868,8 +868,8 @@ impl EncodeContext<'_, 'tcx> {\n                     has_self: trait_item.method_has_self_argument,\n                 }))\n             }\n-            ty::AssociatedKind::Type => EntryKind::AssociatedType(container),\n-            ty::AssociatedKind::Existential =>\n+            ty::AssocKind::Type => EntryKind::AssocType(container),\n+            ty::AssocKind::Existential =>\n                 span_bug!(ast_item.span, \"existential type in trait\"),\n         };\n \n@@ -883,21 +883,21 @@ impl EncodeContext<'_, 'tcx> {\n             deprecation: self.encode_deprecation(def_id),\n \n             ty: match trait_item.kind {\n-                ty::AssociatedKind::Const |\n-                ty::AssociatedKind::Method => {\n+                ty::AssocKind::Const |\n+                ty::AssocKind::Method => {\n                     Some(self.encode_item_type(def_id))\n                 }\n-                ty::AssociatedKind::Type => {\n+                ty::AssocKind::Type => {\n                     if trait_item.defaultness.has_value() {\n                         Some(self.encode_item_type(def_id))\n                     } else {\n                         None\n                     }\n                 }\n-                ty::AssociatedKind::Existential => unreachable!(),\n+                ty::AssocKind::Existential => unreachable!(),\n             },\n             inherent_impls: LazySeq::empty(),\n-            variances: if trait_item.kind == ty::AssociatedKind::Method {\n+            variances: if trait_item.kind == ty::AssocKind::Method {\n                 self.encode_variances_of(def_id)\n             } else {\n                 LazySeq::empty()\n@@ -931,25 +931,25 @@ impl EncodeContext<'_, 'tcx> {\n         let impl_item = self.tcx.associated_item(def_id);\n \n         let container = match impl_item.defaultness {\n-            hir::Defaultness::Default { has_value: true } => AssociatedContainer::ImplDefault,\n-            hir::Defaultness::Final => AssociatedContainer::ImplFinal,\n+            hir::Defaultness::Default { has_value: true } => AssocContainer::ImplDefault,\n+            hir::Defaultness::Final => AssocContainer::ImplFinal,\n             hir::Defaultness::Default { has_value: false } =>\n                 span_bug!(ast_item.span, \"impl items always have values (currently)\"),\n         };\n \n         let kind = match impl_item.kind {\n-            ty::AssociatedKind::Const => {\n+            ty::AssocKind::Const => {\n                 if let hir::ImplItemKind::Const(_, body_id) = ast_item.node {\n                     let mir = self.tcx.at(ast_item.span).mir_const_qualif(def_id).0;\n \n-                    EntryKind::AssociatedConst(container,\n+                    EntryKind::AssocConst(container,\n                         self.const_qualif(mir, body_id),\n                         self.encode_rendered_const_for_body(body_id))\n                 } else {\n                     bug!()\n                 }\n             }\n-            ty::AssociatedKind::Method => {\n+            ty::AssocKind::Method => {\n                 let fn_data = if let hir::ImplItemKind::Method(ref sig, body) = ast_item.node {\n                     FnData {\n                         constness: sig.header.constness,\n@@ -965,8 +965,8 @@ impl EncodeContext<'_, 'tcx> {\n                     has_self: impl_item.method_has_self_argument,\n                 }))\n             }\n-            ty::AssociatedKind::Existential => EntryKind::AssociatedExistential(container),\n-            ty::AssociatedKind::Type => EntryKind::AssociatedType(container)\n+            ty::AssocKind::Existential => EntryKind::AssocExistential(container),\n+            ty::AssocKind::Type => EntryKind::AssocType(container)\n         };\n \n         let mir =\n@@ -996,7 +996,7 @@ impl EncodeContext<'_, 'tcx> {\n \n             ty: Some(self.encode_item_type(def_id)),\n             inherent_impls: LazySeq::empty(),\n-            variances: if impl_item.kind == ty::AssociatedKind::Method {\n+            variances: if impl_item.kind == ty::AssocKind::Method {\n                 self.encode_variances_of(def_id)\n             } else {\n                 LazySeq::empty()"}, {"sha": "b9e5bdef27ab4bd1f6735be43ee4e59ed327aedb", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -253,13 +253,13 @@ pub enum EntryKind<'tcx> {\n     Trait(Lazy<TraitData<'tcx>>),\n     Impl(Lazy<ImplData<'tcx>>),\n     Method(Lazy<MethodData<'tcx>>),\n-    AssociatedType(AssociatedContainer),\n-    AssociatedExistential(AssociatedContainer),\n-    AssociatedConst(AssociatedContainer, ConstQualif, Lazy<RenderedConst>),\n+    AssocType(AssocContainer),\n+    AssocExistential(AssocContainer),\n+    AssocConst(AssocContainer, ConstQualif, Lazy<RenderedConst>),\n     TraitAlias(Lazy<TraitAliasData<'tcx>>),\n }\n \n-/// Additional data for EntryKind::Const and EntryKind::AssociatedConst\n+/// Additional data for EntryKind::Const and EntryKind::AssocConst\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable)]\n pub struct ConstQualif {\n     pub mir: u8,\n@@ -330,44 +330,44 @@ pub struct ImplData<'tcx> {\n /// is a trait or an impl and whether, in a trait, it has\n /// a default, or an in impl, whether it's marked \"default\".\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n-pub enum AssociatedContainer {\n+pub enum AssocContainer {\n     TraitRequired,\n     TraitWithDefault,\n     ImplDefault,\n     ImplFinal,\n }\n \n-impl AssociatedContainer {\n-    pub fn with_def_id(&self, def_id: DefId) -> ty::AssociatedItemContainer {\n+impl AssocContainer {\n+    pub fn with_def_id(&self, def_id: DefId) -> ty::AssocItemContainer {\n         match *self {\n-            AssociatedContainer::TraitRequired |\n-            AssociatedContainer::TraitWithDefault => ty::TraitContainer(def_id),\n+            AssocContainer::TraitRequired |\n+            AssocContainer::TraitWithDefault => ty::TraitContainer(def_id),\n \n-            AssociatedContainer::ImplDefault |\n-            AssociatedContainer::ImplFinal => ty::ImplContainer(def_id),\n+            AssocContainer::ImplDefault |\n+            AssocContainer::ImplFinal => ty::ImplContainer(def_id),\n         }\n     }\n \n     pub fn defaultness(&self) -> hir::Defaultness {\n         match *self {\n-            AssociatedContainer::TraitRequired => hir::Defaultness::Default {\n+            AssocContainer::TraitRequired => hir::Defaultness::Default {\n                 has_value: false,\n             },\n \n-            AssociatedContainer::TraitWithDefault |\n-            AssociatedContainer::ImplDefault => hir::Defaultness::Default {\n+            AssocContainer::TraitWithDefault |\n+            AssocContainer::ImplDefault => hir::Defaultness::Default {\n                 has_value: true,\n             },\n \n-            AssociatedContainer::ImplFinal => hir::Defaultness::Final,\n+            AssocContainer::ImplFinal => hir::Defaultness::Final,\n         }\n     }\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct MethodData<'tcx> {\n     pub fn_data: FnData<'tcx>,\n-    pub container: AssociatedContainer,\n+    pub container: AssocContainer,\n     pub has_self: bool,\n }\n "}, {"sha": "c43bc41ba685ec7d1b1881fa6d4bf0223bab11f2", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -667,7 +667,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n                 // note that validation may still cause a hard error on this very same constant,\n                 // because any code that existed before validation could not have failed validation\n                 // thus preventing such a hard error from being a backwards compatibility hazard\n-                Some(DefKind::Const) | Some(DefKind::AssociatedConst) => {\n+                Some(DefKind::Const) | Some(DefKind::AssocConst) => {\n                     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n                     err.report_as_lint(\n                         tcx.at(tcx.def_span(def_id)),"}, {"sha": "d0ea303a93c69e00474b72104a65d4613fa33c6b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -787,7 +787,7 @@ fn user_substs_applied_to_res(\n         Res::Def(DefKind::Method, _) |\n         Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) |\n         Res::Def(DefKind::Const, _) |\n-        Res::Def(DefKind::AssociatedConst, _) =>\n+        Res::Def(DefKind::AssocConst, _) =>\n             cx.tables().user_provided_types().get(hir_id).map(|u_ty| *u_ty),\n \n         // A unit struct/variant which is used as a value (e.g.,\n@@ -924,7 +924,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         }\n \n         Res::Def(DefKind::Const, def_id) |\n-        Res::Def(DefKind::AssociatedConst, def_id) => {\n+        Res::Def(DefKind::AssocConst, def_id) => {\n             let user_ty = user_substs_applied_to_res(cx, expr.hir_id, res);\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {"}, {"sha": "9798d7e8a16ddb81e379d93a28046bcb6f453447", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         let method_name = Symbol::intern(method_name);\n         let substs = self.tcx.mk_substs_trait(self_ty, params);\n         for item in self.tcx.associated_items(trait_def_id) {\n-            if item.kind == ty::AssociatedKind::Method && item.ident.name == method_name {\n+            if item.kind == ty::AssocKind::Method && item.ident.name == method_name {\n                 let method_ty = self.tcx.type_of(item.def_id);\n                 let method_ty = method_ty.subst(self.tcx, substs);\n                 return (method_ty, ty::Const::zero_sized(self.tcx, method_ty));"}, {"sha": "0edf32d3a306cce1d2449f7548b0547bf0583da9", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 PatternError::StaticInPattern(span) => {\n                     self.span_e0158(span, \"statics cannot be referenced in patterns\")\n                 }\n-                PatternError::AssociatedConstInPattern(span) => {\n+                PatternError::AssocConstInPattern(span) => {\n                     self.span_e0158(span, \"associated consts cannot be referenced in patterns\")\n                 }\n                 PatternError::FloatBug => {"}, {"sha": "d5cee871810f50a614c54f75762db6dc0e9752f5", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -32,7 +32,7 @@ use syntax_pos::Span;\n \n #[derive(Clone, Debug)]\n pub enum PatternError {\n-    AssociatedConstInPattern(Span),\n+    AssocConstInPattern(Span),\n     StaticInPattern(Span),\n     FloatBug,\n     NonConstPath(Span),\n@@ -769,7 +769,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             | Res::Def(DefKind::Ctor(CtorOf::Struct, ..), _)\n             | Res::Def(DefKind::Union, _)\n             | Res::Def(DefKind::TyAlias, _)\n-            | Res::Def(DefKind::AssociatedTy, _)\n+            | Res::Def(DefKind::AssocTy, _)\n             | Res::SelfTy(..)\n             | Res::SelfCtor(..) => {\n                 PatternKind::Leaf { subpatterns }\n@@ -811,11 +811,11 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         let ty = self.tables.node_type(id);\n         let res = self.tables.qpath_res(qpath, id);\n         let is_associated_const = match res {\n-            Res::Def(DefKind::AssociatedConst, _) => true,\n+            Res::Def(DefKind::AssocConst, _) => true,\n             _ => false,\n         };\n         let kind = match res {\n-            Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssociatedConst, def_id) => {\n+            Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n                 let substs = self.tables.node_substs(id);\n                 match ty::Instance::resolve(\n                     self.tcx,\n@@ -869,7 +869,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     },\n                     None => {\n                         self.errors.push(if is_associated_const {\n-                            PatternError::AssociatedConstInPattern(span)\n+                            PatternError::AssocConstInPattern(span)\n                         } else {\n                             PatternError::StaticInPattern(span)\n                         });"}, {"sha": "2f89740876db10b86e577e65ef8dd082631d08c9", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -513,7 +513,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n                 // statics and constants don't have `Storage*` statements, no need to look for them\n                 Some(DefKind::Static)\n                 | Some(DefKind::Const)\n-                | Some(DefKind::AssociatedConst) => {},\n+                | Some(DefKind::AssocConst) => {},\n                 _ => {\n                     trace!(\"push_stack_frame: {:?}: num_bbs: {}\", span, mir.basic_blocks().len());\n                     for block in mir.basic_blocks() {"}, {"sha": "51ceb2a01c3a428d48593209c0fcf8af3a7e5bad", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc::mir::{self, Mir, TerminatorKind};\n-use rustc::ty::{self, AssociatedItem, AssociatedItemContainer, Instance, TyCtxt};\n+use rustc::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n use rustc::ty::subst::InternalSubsts;\n \n pub fn check(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -63,8 +63,8 @@ fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_env = tcx.param_env(def_id);\n     let trait_substs_count =\n         match tcx.opt_associated_item(def_id) {\n-            Some(AssociatedItem {\n-                container: AssociatedItemContainer::TraitContainer(trait_def_id),\n+            Some(AssocItem {\n+                container: AssocItemContainer::TraitContainer(trait_def_id),\n                 ..\n             }) => tcx.generics_of(trait_def_id).count(),\n             _ => 0"}, {"sha": "ff48c86817b49ef89b96f86d5d8acdecd432b4e1", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -65,7 +65,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n            substs);\n     let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n     let call_once = tcx.associated_items(fn_once)\n-        .find(|it| it.kind == ty::AssociatedKind::Method)\n+        .find(|it| it.kind == ty::AssocKind::Method)\n         .unwrap().def_id;\n     let def = ty::InstanceDef::ClosureOnceShim { call_once };\n "}, {"sha": "12a1659e043c6b641acc90eb67faea6eee7b73f6", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -84,7 +84,7 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let fn_mut = tcx.lang_items().fn_mut_trait().unwrap();\n             let call_mut = tcx.global_tcx()\n                 .associated_items(fn_mut)\n-                .find(|it| it.kind == ty::AssociatedKind::Method)\n+                .find(|it| it.kind == ty::AssocKind::Method)\n                 .unwrap().def_id;\n \n             build_call_shim("}, {"sha": "ce854518db3d35a1464f69cab6780b32e635c514", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -45,7 +45,7 @@ impl MirPass for ConstProp {\n \n         let is_fn_like = FnLikeNode::from_node(tcx.hir().get_by_hir_id(hir_id)).is_some();\n         let is_assoc_const = match tcx.def_kind(source.def_id()) {\n-            Some(DefKind::AssociatedConst) => true,\n+            Some(DefKind::AssocConst) => true,\n             _ => false,\n         };\n "}, {"sha": "cf90f44e6707fd19edfde4aeb3493bb1db3f9bc0", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -588,7 +588,7 @@ fn write_mir_sig(\n     match (kind, src.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in \", i)?,\n         (Some(DefKind::Const), _)\n-        | (Some(DefKind::AssociatedConst), _) => write!(w, \"const \")?,\n+        | (Some(DefKind::AssocConst), _) => write!(w, \"const \")?,\n         (Some(DefKind::Static), _) =>\n             write!(w, \"static {}\", if tcx.is_mutable_static(src.def_id()) { \"mut \" } else { \"\" })?,\n         (_, _) if is_function => write!(w, \"fn \")?,"}, {"sha": "85cd602db591f6947449bc460cba813a661b442b", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -351,7 +351,7 @@ fn check_expr_kind<'a, 'tcx>(\n                 }\n \n                 Res::Def(DefKind::Const, did) |\n-                Res::Def(DefKind::AssociatedConst, did) => {\n+                Res::Def(DefKind::AssocConst, did) => {\n                     let promotable = if v.tcx.trait_of_item(did).is_some() {\n                         // Don't peek inside trait associated constants.\n                         NotPromotable"}, {"sha": "68930533a285ca8dd26f13d7fb97417a6e2dd4ba", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -11,7 +11,7 @@\n #[macro_use] extern crate syntax;\n \n use rustc::bug;\n-use rustc::hir::{self, Node, PatKind, AssociatedItemKind};\n+use rustc::hir::{self, Node, PatKind, AssocItemKind};\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -624,7 +624,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                         let mut reach = self.reach(trait_item_ref.id.hir_id, item_level);\n                         reach.generics().predicates();\n \n-                        if trait_item_ref.kind == AssociatedItemKind::Type &&\n+                        if trait_item_ref.kind == AssocItemKind::Type &&\n                            !trait_item_ref.defaultness.has_value() {\n                             // No type to visit.\n                         } else {\n@@ -1112,9 +1112,9 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         let def = def.filter(|(kind, _)| {\n             match kind {\n                 DefKind::Method\n-                | DefKind::AssociatedConst\n-                | DefKind::AssociatedTy\n-                | DefKind::AssociatedExistential\n+                | DefKind::AssocConst\n+                | DefKind::AssocTy\n+                | DefKind::AssocExistential\n                 | DefKind::Static => true,\n                 _ => false,\n             }\n@@ -1448,11 +1448,11 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                         if self.item_is_public(&impl_item_ref.id.hir_id, &impl_item_ref.vis) {\n                             let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                             match impl_item_ref.kind {\n-                                AssociatedItemKind::Const => {\n+                                AssocItemKind::Const => {\n                                     found_pub_static = true;\n                                     intravisit::walk_impl_item(self, impl_item);\n                                 }\n-                                AssociatedItemKind::Method { has_self: false } => {\n+                                AssocItemKind::Method { has_self: false } => {\n                                     found_pub_static = true;\n                                     intravisit::walk_impl_item(self, impl_item);\n                                 }\n@@ -1703,16 +1703,16 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn check_trait_or_impl_item(&self, hir_id: hir::HirId, assoc_item_kind: AssociatedItemKind,\n+    fn check_trait_or_impl_item(&self, hir_id: hir::HirId, assoc_item_kind: AssocItemKind,\n                                 defaultness: hir::Defaultness, vis: ty::Visibility) {\n         let mut check = self.check(hir_id, vis);\n \n         let (check_ty, is_assoc_ty) = match assoc_item_kind {\n-            AssociatedItemKind::Const | AssociatedItemKind::Method { .. } => (true, false),\n-            AssociatedItemKind::Type => (defaultness.has_value(), true),\n+            AssocItemKind::Const | AssocItemKind::Method { .. } => (true, false),\n+            AssocItemKind::Type => (defaultness.has_value(), true),\n             // `ty()` for existential types is the underlying type,\n             // it's not a part of interface, so we skip it.\n-            AssociatedItemKind::Existential => (false, true),\n+            AssocItemKind::Existential => (false, true),\n         };\n         check.in_assoc_ty = is_assoc_ty;\n         check.generics().predicates();"}, {"sha": "92faab192fa9ed6a66e8c9e23aaf81775e685d05", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -705,7 +705,7 @@ impl<'a> Resolver<'a> {\n \n                 for child in self.cstore.item_children_untracked(def_id, self.session) {\n                     let res = child.res.map_id(|_| panic!(\"unexpected id\"));\n-                    let ns = if let Res::Def(DefKind::AssociatedTy, _) = res {\n+                    let ns = if let Res::Def(DefKind::AssocTy, _) = res {\n                         TypeNS\n                     } else { ValueNS };\n                     self.define(module, child.ident, ns,\n@@ -1033,14 +1033,14 @@ impl<'a, 'b> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b> {\n         // Add the item to the trait info.\n         let item_def_id = self.resolver.definitions.local_def_id(item.id);\n         let (res, ns) = match item.node {\n-            TraitItemKind::Const(..) => (Res::Def(DefKind::AssociatedConst, item_def_id), ValueNS),\n+            TraitItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n             TraitItemKind::Method(ref sig, _) => {\n                 if sig.decl.has_self() {\n                     self.resolver.has_self.insert(item_def_id);\n                 }\n                 (Res::Def(DefKind::Method, item_def_id), ValueNS)\n             }\n-            TraitItemKind::Type(..) => (Res::Def(DefKind::AssociatedTy, item_def_id), TypeNS),\n+            TraitItemKind::Type(..) => (Res::Def(DefKind::AssocTy, item_def_id), TypeNS),\n             TraitItemKind::Macro(_) => bug!(),  // handled above\n         };\n "}, {"sha": "d8292eebce79953afca7c9e61a533b2266dcc775", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -432,7 +432,7 @@ impl<'a> Resolver<'a> {\n                 err.note(\"can't use `Self` as a constructor, you must use the implemented struct\");\n             }\n             (Res::Def(DefKind::TyAlias, _), _)\n-            | (Res::Def(DefKind::AssociatedTy, _), _) if ns == ValueNS => {\n+            | (Res::Def(DefKind::AssocTy, _), _) if ns == ValueNS => {\n                 err.note(\"can't use a type alias as a constructor\");\n             }\n             _ => return false,"}, {"sha": "c05b69ab44f422ba98700e650befc143eb37ac2f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -589,7 +589,7 @@ impl<'a> PathSource<'a> {\n                 | Res::Def(DefKind::Trait, _)\n                 | Res::Def(DefKind::TraitAlias, _)\n                 | Res::Def(DefKind::TyAlias, _)\n-                | Res::Def(DefKind::AssociatedTy, _)\n+                | Res::Def(DefKind::AssocTy, _)\n                 | Res::PrimTy(..)\n                 | Res::Def(DefKind::TyParam, _)\n                 | Res::SelfTy(..)\n@@ -615,14 +615,14 @@ impl<'a> PathSource<'a> {\n                 | Res::Upvar(..)\n                 | Res::Def(DefKind::Fn, _)\n                 | Res::Def(DefKind::Method, _)\n-                | Res::Def(DefKind::AssociatedConst, _)\n+                | Res::Def(DefKind::AssocConst, _)\n                 | Res::SelfCtor(..)\n                 | Res::Def(DefKind::ConstParam, _) => true,\n                 _ => false,\n             },\n             PathSource::Pat => match res {\n                 Res::Def(DefKind::Ctor(_, CtorKind::Const), _) |\n-                Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssociatedConst, _) |\n+                Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) |\n                 Res::SelfCtor(..) => true,\n                 _ => false,\n             },\n@@ -635,14 +635,14 @@ impl<'a> PathSource<'a> {\n                 | Res::Def(DefKind::Union, _)\n                 | Res::Def(DefKind::Variant, _)\n                 | Res::Def(DefKind::TyAlias, _)\n-                | Res::Def(DefKind::AssociatedTy, _)\n+                | Res::Def(DefKind::AssocTy, _)\n                 | Res::SelfTy(..) => true,\n                 _ => false,\n             },\n             PathSource::TraitItem(ns) => match res {\n-                Res::Def(DefKind::AssociatedConst, _)\n+                Res::Def(DefKind::AssocConst, _)\n                 | Res::Def(DefKind::Method, _) if ns == ValueNS => true,\n-                Res::Def(DefKind::AssociatedTy, _) if ns == TypeNS => true,\n+                Res::Def(DefKind::AssocTy, _) if ns == TypeNS => true,\n                 _ => false,\n             },\n             PathSource::Visibility => match res {\n@@ -1511,9 +1511,9 @@ impl<'a> NameBinding<'a> {\n \n     fn is_importable(&self) -> bool {\n         match self.res() {\n-            Res::Def(DefKind::AssociatedConst, _)\n+            Res::Def(DefKind::AssocConst, _)\n             | Res::Def(DefKind::Method, _)\n-            | Res::Def(DefKind::AssociatedTy, _) => false,\n+            | Res::Def(DefKind::AssocTy, _) => false,\n             _ => true,\n         }\n     }"}, {"sha": "06758044a216694cf6e00d9efcfacd34986b9f68", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -961,11 +961,11 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 }\n                 Res::Def(HirDefKind::Ctor(..), _) |\n                 Res::Def(HirDefKind::Const, _) |\n-                Res::Def(HirDefKind::AssociatedConst, _) |\n+                Res::Def(HirDefKind::AssocConst, _) |\n                 Res::Def(HirDefKind::Struct, _) |\n                 Res::Def(HirDefKind::Variant, _) |\n                 Res::Def(HirDefKind::TyAlias, _) |\n-                Res::Def(HirDefKind::AssociatedTy, _) |\n+                Res::Def(HirDefKind::AssocTy, _) |\n                 Res::SelfTy(..) => {\n                     self.dump_path_ref(id, &ast::Path::from_ident(ident));\n                 }"}, {"sha": "8faa4c71807805159140ba11bcde2fb4f248dc4d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -723,8 +723,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Res::Def(HirDefKind::TyAlias, def_id) |\n             Res::Def(HirDefKind::ForeignTy, def_id) |\n             Res::Def(HirDefKind::TraitAlias, def_id) |\n-            Res::Def(HirDefKind::AssociatedExistential, def_id) |\n-            Res::Def(HirDefKind::AssociatedTy, def_id) |\n+            Res::Def(HirDefKind::AssocExistential, def_id) |\n+            Res::Def(HirDefKind::AssocTy, def_id) |\n             Res::Def(HirDefKind::Trait, def_id) |\n             Res::Def(HirDefKind::Existential, def_id) |\n             Res::Def(HirDefKind::TyParam, def_id) => {\n@@ -754,7 +754,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             }\n             Res::Def(HirDefKind::Static, _) |\n             Res::Def(HirDefKind::Const, _) |\n-            Res::Def(HirDefKind::AssociatedConst, _) |\n+            Res::Def(HirDefKind::AssocConst, _) |\n             Res::Def(HirDefKind::Ctor(..), _) => {\n                 Some(Ref {\n                     kind: RefKind::Variable,"}, {"sha": "109863f8a56b2798e06ed2207b453c639f0f64f5", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -586,7 +586,7 @@ impl Sig for ast::Path {\n                     refs: vec![],\n                 })\n             }\n-            Res::Def(DefKind::AssociatedConst, _)\n+            Res::Def(DefKind::AssocConst, _)\n             | Res::Def(DefKind::Variant, _)\n             | Res::Def(DefKind::Ctor(..), _) => {\n                 let len = self.segments.len();"}, {"sha": "80b0868a551344f6ecc1ce6d05edfaf085aeedb7", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -166,10 +166,10 @@ crate fn program_clauses_for<'a, 'tcx>(\n             | Some(DefKind::TraitAlias) => program_clauses_for_trait(tcx, def_id),\n             // FIXME(eddyb) deduplicate this `associated_item` call with\n             // `program_clauses_for_associated_type_{value,def}`.\n-            Some(DefKind::AssociatedTy) => match tcx.associated_item(def_id).container {\n-                ty::AssociatedItemContainer::ImplContainer(_) =>\n+            Some(DefKind::AssocTy) => match tcx.associated_item(def_id).container {\n+                ty::AssocItemContainer::ImplContainer(_) =>\n                     program_clauses_for_associated_type_value(tcx, def_id),\n-                ty::AssociatedItemContainer::TraitContainer(_) =>\n+                ty::AssocItemContainer::TraitContainer(_) =>\n                     program_clauses_for_associated_type_def(tcx, def_id)\n             },\n             Some(DefKind::Struct)\n@@ -444,9 +444,9 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n     // ```\n \n     let item = tcx.associated_item(item_id);\n-    debug_assert_eq!(item.kind, ty::AssociatedKind::Type);\n+    debug_assert_eq!(item.kind, ty::AssocKind::Type);\n     let trait_id = match item.container {\n-        ty::AssociatedItemContainer::TraitContainer(trait_id) => trait_id,\n+        ty::AssocItemContainer::TraitContainer(trait_id) => trait_id,\n         _ => bug!(\"not an trait container\"),\n     };\n \n@@ -582,9 +582,9 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     // ```\n \n     let item = tcx.associated_item(item_id);\n-    debug_assert_eq!(item.kind, ty::AssociatedKind::Type);\n+    debug_assert_eq!(item.kind, ty::AssocKind::Type);\n     let impl_id = match item.container {\n-        ty::AssociatedItemContainer::ImplContainer(impl_id) => impl_id,\n+        ty::AssocItemContainer::ImplContainer(impl_id) => impl_id,\n         _ => bug!(\"not an impl container\"),\n     };\n "}, {"sha": "5b1a2e29c7642365d7208104bd7973e9d2ed20a8", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -823,7 +823,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                                            -> bool\n     {\n         self.tcx().associated_items(trait_def_id).any(|item| {\n-            item.kind == ty::AssociatedKind::Type &&\n+            item.kind == ty::AssocKind::Type &&\n             self.tcx().hygienic_eq(assoc_name, item.ident, trait_def_id)\n         })\n     }\n@@ -905,7 +905,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let (assoc_ident, def_scope) =\n             tcx.adjust_ident(binding.item_name, candidate.def_id(), hir_ref_id);\n         let assoc_ty = tcx.associated_items(candidate.def_id()).find(|i| {\n-            i.kind == ty::AssociatedKind::Type && i.ident.modern() == assoc_ident\n+            i.kind == ty::AssocKind::Type && i.ident.modern() == assoc_ident\n         }).expect(\"missing associated type\");\n \n         if !assoc_ty.vis.is_accessible_from(def_scope, tcx) {\n@@ -1045,7 +1045,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 ty::Predicate::Trait(pred) => {\n                     associated_types\n                         .extend(tcx.associated_items(pred.def_id())\n-                        .filter(|item| item.kind == ty::AssociatedKind::Type)\n+                        .filter(|item| item.kind == ty::AssocKind::Type)\n                         .map(|item| item.def_id));\n                 }\n                 ty::Predicate::Projection(pred) => {\n@@ -1300,7 +1300,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n             for bound in bounds {\n                 let bound_span = self.tcx().associated_items(bound.def_id()).find(|item| {\n-                    item.kind == ty::AssociatedKind::Type &&\n+                    item.kind == ty::AssocKind::Type &&\n                         self.tcx().hygienic_eq(assoc_name, item.ident, bound.def_id())\n                 })\n                 .and_then(|item| self.tcx().hir().span_if_local(item.def_id));\n@@ -1442,7 +1442,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, bound);\n         let ty = self.normalize_ty(span, ty);\n \n-        let kind = DefKind::AssociatedTy;\n+        let kind = DefKind::AssocTy;\n         if !item.vis.is_accessible_from(def_scope, tcx) {\n             let msg = format!(\"{} `{}` is private\", kind.descr(), assoc_ident);\n             tcx.sess.span_err(span, &msg);\n@@ -1685,7 +1685,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n             // Case 4. Reference to a method or associated const.\n             DefKind::Method\n-            | DefKind::AssociatedConst => {\n+            | DefKind::AssocConst => {\n                 if segments.len() >= 2 {\n                     let generics = tcx.generics_of(def_id);\n                     path_segs.push(PathSeg(generics.parent.unwrap(), last - 1));\n@@ -1779,7 +1779,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 self.prohibit_generics(&path.segments);\n                 tcx.mk_self_type()\n             }\n-            Res::Def(DefKind::AssociatedTy, def_id) => {\n+            Res::Def(DefKind::AssocTy, def_id) => {\n                 debug_assert!(path.segments.len() >= 2);\n                 self.prohibit_generics(&path.segments[..path.segments.len() - 2]);\n                 self.qpath_to_ty(span,"}, {"sha": "a74a33b7448e2e3933cbce3de2996eb7f2f84b1b", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             PatKind::Path(ref qpath) => {\n                 let (def, _, _) = self.resolve_ty_and_res_ufcs(qpath, pat.hir_id, pat.span);\n                 match def {\n-                    Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssociatedConst, _) => false,\n+                    Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => false,\n                     _ => true,\n                 }\n             }\n@@ -1050,7 +1050,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 return tcx.types.err;\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Const), _) | Res::SelfCtor(..) |\n-            Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssociatedConst, _) => {} // OK\n+            Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => {} // OK\n             _ => bug!(\"unexpected pattern resolution: {:?}\", res)\n         }\n \n@@ -1107,7 +1107,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 on_error();\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::AssociatedConst, _) | Res::Def(DefKind::Method, _) => {\n+            Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::Method, _) => {\n                 report_unexpected_res(res);\n                 return tcx.types.err;\n             }"}, {"sha": "1165890fe6432608df3e9d70f9dfd37c887f10b9", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -24,9 +24,9 @@ use super::{Inherited, FnCtxt, potentially_plural_count};\n /// - `impl_trait_ref`: the TraitRef corresponding to the trait implementation\n \n pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                     impl_m: &ty::AssociatedItem,\n+                                     impl_m: &ty::AssocItem,\n                                      impl_m_span: Span,\n-                                     trait_m: &ty::AssociatedItem,\n+                                     trait_m: &ty::AssocItem,\n                                      impl_trait_ref: ty::TraitRef<'tcx>,\n                                      trait_item_span: Option<Span>) {\n     debug!(\"compare_impl_method(impl_trait_ref={:?})\",\n@@ -74,9 +74,9 @@ pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                          impl_m: &ty::AssociatedItem,\n+                                          impl_m: &ty::AssocItem,\n                                           impl_m_span: Span,\n-                                          trait_m: &ty::AssociatedItem,\n+                                          trait_m: &ty::AssocItem,\n                                           impl_trait_ref: ty::TraitRef<'tcx>)\n                                           -> Result<(), ErrorReported> {\n     let trait_to_impl_substs = impl_trait_ref.substs;\n@@ -357,8 +357,8 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 span: Span,\n-                                                impl_m: &ty::AssociatedItem,\n-                                                trait_m: &ty::AssociatedItem,\n+                                                impl_m: &ty::AssocItem,\n+                                                trait_m: &ty::AssocItem,\n                                                 trait_generics: &ty::Generics,\n                                                 impl_generics: &ty::Generics,\n                                                 trait_to_skol_substs: SubstsRef<'tcx>)\n@@ -410,9 +410,9 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n                                                      param_env: ty::ParamEnv<'tcx>,\n                                                      terr: &TypeError<'_>,\n                                                      cause: &ObligationCause<'tcx>,\n-                                                     impl_m: &ty::AssociatedItem,\n+                                                     impl_m: &ty::AssocItem,\n                                                      impl_sig: ty::FnSig<'tcx>,\n-                                                     trait_m: &ty::AssociatedItem,\n+                                                     trait_m: &ty::AssocItem,\n                                                      trait_sig: ty::FnSig<'tcx>)\n                                                      -> (Span, Option<Span>) {\n     let tcx = infcx.tcx;\n@@ -496,9 +496,9 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n }\n \n fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                               impl_m: &ty::AssociatedItem,\n+                               impl_m: &ty::AssocItem,\n                                impl_m_span: Span,\n-                               trait_m: &ty::AssociatedItem,\n+                               trait_m: &ty::AssocItem,\n                                impl_trait_ref: ty::TraitRef<'tcx>)\n                                -> Result<(), ErrorReported>\n {\n@@ -510,7 +510,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // inscrutable, particularly for cases where one method has no\n     // self.\n \n-    let self_string = |method: &ty::AssociatedItem| {\n+    let self_string = |method: &ty::AssocItem| {\n         let untransformed_self_ty = match method.container {\n             ty::ImplContainer(_) => impl_trait_ref.self_ty(),\n             ty::TraitContainer(_) => tcx.mk_self_type()\n@@ -582,9 +582,9 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn compare_number_of_generics<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    impl_: &ty::AssociatedItem,\n+    impl_: &ty::AssocItem,\n     impl_span: Span,\n-    trait_: &ty::AssociatedItem,\n+    trait_: &ty::AssocItem,\n     trait_span: Option<Span>,\n ) -> Result<(), ErrorReported> {\n     let trait_own_counts = tcx.generics_of(trait_.def_id).own_counts();\n@@ -655,9 +655,9 @@ fn compare_number_of_generics<'a, 'tcx>(\n }\n \n fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                impl_m: &ty::AssociatedItem,\n+                                                impl_m: &ty::AssocItem,\n                                                 impl_m_span: Span,\n-                                                trait_m: &ty::AssociatedItem,\n+                                                trait_m: &ty::AssocItem,\n                                                 trait_item_span: Option<Span>)\n                                                 -> Result<(), ErrorReported> {\n     let impl_m_fty = tcx.fn_sig(impl_m.def_id);\n@@ -739,8 +739,8 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                        impl_m: &ty::AssociatedItem,\n-                                        trait_m: &ty::AssociatedItem)\n+                                        impl_m: &ty::AssocItem,\n+                                        trait_m: &ty::AssocItem)\n                                         -> Result<(), ErrorReported> {\n     // FIXME(chrisvittal) Clean up this function, list of FIXME items:\n     //     1. Better messages for the span labels\n@@ -911,9 +911,9 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                    impl_c: &ty::AssociatedItem,\n+                                    impl_c: &ty::AssocItem,\n                                     impl_c_span: Span,\n-                                    trait_c: &ty::AssociatedItem,\n+                                    trait_c: &ty::AssocItem,\n                                     impl_trait_ref: ty::TraitRef<'tcx>) {\n     debug!(\"compare_const_impl(impl_trait_ref={:?})\", impl_trait_ref);\n "}, {"sha": "724f8d886e8a76da0d311f22c9999ddaa6a3156b", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -8,7 +8,7 @@ use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::{print, lowering::is_range_literal};\n-use rustc::ty::{self, Ty, AssociatedItem};\n+use rustc::ty::{self, Ty, AssocItem};\n use rustc::ty::adjustment::AllowTwoPhase;\n use errors::{Applicability, DiagnosticBuilder};\n \n@@ -179,7 +179,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn get_conversion_methods(&self, span: Span, expected: Ty<'tcx>, checked_ty: Ty<'tcx>)\n-                              -> Vec<AssociatedItem> {\n+                              -> Vec<AssocItem> {\n         let mut methods = self.probe_for_return_type(span,\n                                                      probe::Mode::MethodCall,\n                                                      expected,\n@@ -205,9 +205,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     // This function checks if the method isn't static and takes other arguments than `self`.\n-    fn has_no_input_arg(&self, method: &AssociatedItem) -> bool {\n+    fn has_no_input_arg(&self, method: &AssocItem) -> bool {\n         match method.kind {\n-            ty::AssociatedKind::Method => {\n+            ty::AssocKind::Method => {\n                 self.tcx.fn_sig(method.def_id).inputs().skip_binder().len() == 1\n             }\n             _ => false,"}, {"sha": "65bc06b65e1fca18344c2a3e45b93635954fbe85", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -71,15 +71,15 @@ pub struct NoMatchData<'tcx> {\n     pub static_candidates: Vec<CandidateSource>,\n     pub unsatisfied_predicates: Vec<TraitRef<'tcx>>,\n     pub out_of_scope_traits: Vec<DefId>,\n-    pub lev_candidate: Option<ty::AssociatedItem>,\n+    pub lev_candidate: Option<ty::AssocItem>,\n     pub mode: probe::Mode,\n }\n \n impl<'tcx> NoMatchData<'tcx> {\n     pub fn new(static_candidates: Vec<CandidateSource>,\n                unsatisfied_predicates: Vec<TraitRef<'tcx>>,\n                out_of_scope_traits: Vec<DefId>,\n-               lev_candidate: Option<ty::AssociatedItem>,\n+               lev_candidate: Option<ty::AssocItem>,\n                mode: probe::Mode)\n                -> Self {\n         NoMatchData {\n@@ -450,7 +450,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// Finds item with name `item_name` defined in impl/trait `def_id`\n     /// and return it, or `None`, if no such item was defined there.\n     pub fn associated_item(&self, def_id: DefId, item_name: ast::Ident, ns: Namespace)\n-                           -> Option<ty::AssociatedItem> {\n+                           -> Option<ty::AssocItem> {\n         self.tcx.associated_items(def_id).find(|item| {\n             Namespace::from(item.kind) == ns &&\n             self.tcx.hygienic_eq(item_name, item.ident, def_id)"}, {"sha": "596ce008099a68162db9a7467f02a2dba296991f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'gcx, 'tcx> Deref for ProbeContext<'a, 'gcx, 'tcx> {\n #[derive(Debug)]\n struct Candidate<'tcx> {\n     // Candidates are (I'm not quite sure, but they are mostly) basically\n-    // some metadata on top of a `ty::AssociatedItem` (without substs).\n+    // some metadata on top of a `ty::AssocItem` (without substs).\n     //\n     // However, method probing wants to be able to evaluate the predicates\n     // for a function with the substs applied - for example, if a function\n@@ -121,7 +121,7 @@ struct Candidate<'tcx> {\n     // if `T: Sized`.\n     xform_self_ty: Ty<'tcx>,\n     xform_ret_ty: Option<Ty<'tcx>>,\n-    item: ty::AssociatedItem,\n+    item: ty::AssocItem,\n     kind: CandidateKind<'tcx>,\n     import_ids: SmallVec<[hir::HirId; 1]>,\n }\n@@ -146,7 +146,7 @@ enum ProbeResult {\n \n #[derive(Debug, PartialEq, Clone)]\n pub struct Pick<'tcx> {\n-    pub item: ty::AssociatedItem,\n+    pub item: ty::AssocItem,\n     pub kind: PickKind<'tcx>,\n     pub import_ids: SmallVec<[hir::HirId; 1]>,\n \n@@ -213,7 +213,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                  return_type: Ty<'tcx>,\n                                  self_ty: Ty<'tcx>,\n                                  scope_expr_id: hir::HirId)\n-                                 -> Vec<ty::AssociatedItem> {\n+                                 -> Vec<ty::AssocItem> {\n         debug!(\"probe(self_ty={:?}, return_type={}, scope_expr_id={})\",\n                self_ty,\n                return_type,\n@@ -812,7 +812,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                            mut mk_cand: F)\n         where F: for<'b> FnMut(&mut ProbeContext<'b, 'gcx, 'tcx>,\n                                ty::PolyTraitRef<'tcx>,\n-                               ty::AssociatedItem)\n+                               ty::AssocItem)\n     {\n         let tcx = self.tcx;\n         for bound_trait_ref in traits::transitive_bounds(tcx, bounds) {\n@@ -861,11 +861,11 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn matches_return_type(&self,\n-                               method: &ty::AssociatedItem,\n+                               method: &ty::AssocItem,\n                                self_ty: Option<Ty<'tcx>>,\n                                expected: Ty<'tcx>) -> bool {\n         match method.kind {\n-            ty::AssociatedKind::Method => {\n+            ty::AssocKind::Method => {\n                 let fty = self.tcx.fn_sig(method.def_id);\n                 self.probe(|_| {\n                     let substs = self.fresh_substs_for_item(self.span, method.def_id);\n@@ -1425,7 +1425,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     /// Similarly to `probe_for_return_type`, this method attempts to find the best matching\n     /// candidate method where the method name may have been misspelt. Similarly to other\n     /// Levenshtein based suggestions, we provide at most one such suggestion.\n-    fn probe_for_lev_candidate(&mut self) -> Result<Option<ty::AssociatedItem>, MethodError<'tcx>> {\n+    fn probe_for_lev_candidate(&mut self) -> Result<Option<ty::AssocItem>, MethodError<'tcx>> {\n         debug!(\"Probing for method names similar to {:?}\",\n                self.method_name);\n \n@@ -1441,7 +1441,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n             let method_names = pcx.candidate_method_names();\n             pcx.allow_similar_names = false;\n-            let applicable_close_candidates: Vec<ty::AssociatedItem> = method_names\n+            let applicable_close_candidates: Vec<ty::AssocItem> = method_names\n                 .iter()\n                 .filter_map(|&method_name| {\n                     pcx.reset();\n@@ -1474,7 +1474,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n     ///////////////////////////////////////////////////////////////////////////\n     // MISCELLANY\n-    fn has_applicable_self(&self, item: &ty::AssociatedItem) -> bool {\n+    fn has_applicable_self(&self, item: &ty::AssocItem) -> bool {\n         // \"Fast track\" -- check for usage of sugar when in method call\n         // mode.\n         //\n@@ -1483,9 +1483,9 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         match self.mode {\n             Mode::MethodCall => item.method_has_self_argument,\n             Mode::Path => match item.kind {\n-                ty::AssociatedKind::Existential |\n-                ty::AssociatedKind::Type => false,\n-                ty::AssociatedKind::Method | ty::AssociatedKind::Const => true\n+                ty::AssocKind::Existential |\n+                ty::AssocKind::Type => false,\n+                ty::AssocKind::Method | ty::AssocKind::Const => true\n             },\n         }\n         // FIXME -- check for types that deref to `Self`,\n@@ -1501,11 +1501,11 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn xform_self_ty(&self,\n-                     item: &ty::AssociatedItem,\n+                     item: &ty::AssocItem,\n                      impl_ty: Ty<'tcx>,\n                      substs: SubstsRef<'tcx>)\n                      -> (Ty<'tcx>, Option<Ty<'tcx>>) {\n-        if item.kind == ty::AssociatedKind::Method && self.mode == Mode::MethodCall {\n+        if item.kind == ty::AssocKind::Method && self.mode == Mode::MethodCall {\n             let sig = self.xform_method_sig(item.def_id, substs);\n             (sig.inputs()[0], Some(sig.output()))\n         } else {\n@@ -1610,7 +1610,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n     /// Finds the method with the appropriate name (or return type, as the case may be). If\n     /// `allow_similar_names` is set, find methods with close-matching names.\n-    fn impl_or_trait_item(&self, def_id: DefId) -> Vec<ty::AssociatedItem> {\n+    fn impl_or_trait_item(&self, def_id: DefId) -> Vec<ty::AssocItem> {\n         if let Some(name) = self.method_name {\n             if self.allow_similar_names {\n                 let max_dist = max(name.as_str().len(), 3) / 3;"}, {"sha": "f60ad5547a278caac464c1cce5700acef8057937", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -1499,17 +1499,17 @@ fn report_forbidden_specialization<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn check_specialization_validity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            trait_def: &ty::TraitDef,\n-                                           trait_item: &ty::AssociatedItem,\n+                                           trait_item: &ty::AssocItem,\n                                            impl_id: DefId,\n                                            impl_item: &hir::ImplItem)\n {\n     let ancestors = trait_def.ancestors(tcx, impl_id);\n \n     let kind = match impl_item.node {\n-        hir::ImplItemKind::Const(..) => ty::AssociatedKind::Const,\n-        hir::ImplItemKind::Method(..) => ty::AssociatedKind::Method,\n-        hir::ImplItemKind::Existential(..) => ty::AssociatedKind::Existential,\n-        hir::ImplItemKind::Type(_) => ty::AssociatedKind::Type\n+        hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n+        hir::ImplItemKind::Method(..) => ty::AssocKind::Method,\n+        hir::ImplItemKind::Existential(..) => ty::AssocKind::Existential,\n+        hir::ImplItemKind::Type(_) => ty::AssocKind::Type\n     };\n \n     let parent = ancestors.defs(tcx, trait_item.ident, kind, trait_def.def_id).nth(1)\n@@ -1560,7 +1560,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             match impl_item.node {\n                 hir::ImplItemKind::Const(..) => {\n                     // Find associated const definition.\n-                    if ty_trait_item.kind == ty::AssociatedKind::Const {\n+                    if ty_trait_item.kind == ty::AssocKind::Const {\n                         compare_const_impl(tcx,\n                                            &ty_impl_item,\n                                            impl_item.span,\n@@ -1583,7 +1583,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n                 hir::ImplItemKind::Method(..) => {\n                     let trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n-                    if ty_trait_item.kind == ty::AssociatedKind::Method {\n+                    if ty_trait_item.kind == ty::AssocKind::Method {\n                         compare_impl_method(tcx,\n                                             &ty_impl_item,\n                                             impl_item.span,\n@@ -1605,7 +1605,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n                 hir::ImplItemKind::Existential(..) |\n                 hir::ImplItemKind::Type(_) => {\n-                    if ty_trait_item.kind == ty::AssociatedKind::Type {\n+                    if ty_trait_item.kind == ty::AssocKind::Type {\n                         if ty_trait_item.defaultness.has_value() {\n                             overridden_associated_type = Some(impl_item);\n                         }\n@@ -3742,7 +3742,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Res::Def(DefKind::Struct, _)\n             | Res::Def(DefKind::Union, _)\n             | Res::Def(DefKind::TyAlias, _)\n-            | Res::Def(DefKind::AssociatedTy, _)\n+            | Res::Def(DefKind::AssocTy, _)\n             | Res::SelfTy(..) => {\n                 match ty.sty {\n                     ty::Adt(adt, substs) if !adt.is_enum() => {\n@@ -5275,7 +5275,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n             Res::Def(DefKind::Method, def_id)\n-            | Res::Def(DefKind::AssociatedConst, def_id) => {\n+            | Res::Def(DefKind::AssocConst, def_id) => {\n                 let container = tcx.associated_item(def_id).container;\n                 debug!(\"instantiate_value_path: def_id={:?} container={:?}\", def_id, container);\n                 match container {"}, {"sha": "e11172ae36d9b1c494a46c83015d032d624209fe", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -190,12 +190,12 @@ fn check_associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         match item.kind {\n-            ty::AssociatedKind::Const => {\n+            ty::AssocKind::Const => {\n                 let ty = fcx.tcx.type_of(item.def_id);\n                 let ty = fcx.normalize_associated_types_in(span, &ty);\n                 fcx.register_wf_obligation(ty, span, code.clone());\n             }\n-            ty::AssociatedKind::Method => {\n+            ty::AssocKind::Method => {\n                 reject_shadowing_parameters(fcx.tcx, item.def_id);\n                 let sig = fcx.tcx.fn_sig(item.def_id);\n                 let sig = fcx.normalize_associated_types_in(span, &sig);\n@@ -204,14 +204,14 @@ fn check_associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 let sig_if_method = sig_if_method.expect(\"bad signature for method\");\n                 check_method_receiver(fcx, sig_if_method, &item, self_ty);\n             }\n-            ty::AssociatedKind::Type => {\n+            ty::AssocKind::Type => {\n                 if item.defaultness.has_value() {\n                     let ty = fcx.tcx.type_of(item.def_id);\n                     let ty = fcx.normalize_associated_types_in(span, &ty);\n                     fcx.register_wf_obligation(ty, span, code.clone());\n                 }\n             }\n-            ty::AssociatedKind::Existential => {\n+            ty::AssocKind::Existential => {\n                 // do nothing, existential types check themselves\n             }\n         }\n@@ -748,7 +748,7 @@ fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n \n fn check_method_receiver<'fcx, 'gcx, 'tcx>(fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n                                            method_sig: &hir::MethodSig,\n-                                           method: &ty::AssociatedItem,\n+                                           method: &ty::AssocItem,\n                                            self_ty: Ty<'tcx>)\n {\n     // check that the method has a valid receiver type, given the type `Self`"}, {"sha": "87476d37b35e7a74fd474394482b208990f57b4e", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -111,7 +111,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         .map(|item_ref| tcx.hir().local_def_id_from_hir_id(item_ref.id.hir_id))\n         .filter(|&def_id| {\n             let item = tcx.associated_item(def_id);\n-            item.kind == ty::AssociatedKind::Type && item.defaultness.has_value()\n+            item.kind == ty::AssocKind::Type && item.defaultness.has_value()\n         })\n         .flat_map(|def_id| {\n             cgp::parameters_for(&tcx.type_of(def_id), true)"}, {"sha": "9b6c5bd9f429f40d3580da7883023312d22dd99a", "filename": "src/librustc_typeck/namespace.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustc_typeck%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fnamespace.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -8,13 +8,13 @@ pub enum Namespace {\n     Value,\n }\n \n-impl From<ty::AssociatedKind> for Namespace {\n-    fn from(a_kind: ty::AssociatedKind) -> Self {\n+impl From<ty::AssocKind> for Namespace {\n+    fn from(a_kind: ty::AssocKind) -> Self {\n         match a_kind {\n-            ty::AssociatedKind::Existential |\n-            ty::AssociatedKind::Type => Namespace::Type,\n-            ty::AssociatedKind::Const |\n-            ty::AssociatedKind::Method => Namespace::Value,\n+            ty::AssocKind::Existential |\n+            ty::AssocKind::Type => Namespace::Type,\n+            ty::AssocKind::Const |\n+            ty::AssocKind::Method => Namespace::Value,\n         }\n     }\n }"}, {"sha": "4ee63a4c9703b6c310491d0513193aee21b31ac9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -428,10 +428,10 @@ impl Item {\n         self.type_() == ItemType::Variant\n     }\n     pub fn is_associated_type(&self) -> bool {\n-        self.type_() == ItemType::AssociatedType\n+        self.type_() == ItemType::AssocType\n     }\n     pub fn is_associated_const(&self) -> bool {\n-        self.type_() == ItemType::AssociatedConst\n+        self.type_() == ItemType::AssocConst\n     }\n     pub fn is_method(&self) -> bool {\n         self.type_() == ItemType::Method\n@@ -560,8 +560,8 @@ pub enum ItemEnum {\n     MacroItem(Macro),\n     ProcMacroItem(ProcMacro),\n     PrimitiveItem(PrimitiveType),\n-    AssociatedConstItem(Type, Option<String>),\n-    AssociatedTypeItem(Vec<GenericBound>, Option<Type>),\n+    AssocConstItem(Type, Option<String>),\n+    AssocTypeItem(Vec<GenericBound>, Option<Type>),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemEnum>),\n     KeywordItem(String),\n@@ -588,7 +588,7 @@ impl ItemEnum {\n     pub fn is_associated(&self) -> bool {\n         match *self {\n             ItemEnum::TypedefItem(_, _) |\n-            ItemEnum::AssociatedTypeItem(_, _) => true,\n+            ItemEnum::AssocTypeItem(_, _) => true,\n             _ => false,\n         }\n     }\n@@ -2206,7 +2206,7 @@ impl Clean<Item> for hir::TraitItem {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let inner = match self.node {\n             hir::TraitItemKind::Const(ref ty, default) => {\n-                AssociatedConstItem(ty.clean(cx),\n+                AssocConstItem(ty.clean(cx),\n                                     default.map(|e| print_const_expr(cx, e)))\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n@@ -2226,7 +2226,7 @@ impl Clean<Item> for hir::TraitItem {\n                 })\n             }\n             hir::TraitItemKind::Type(ref bounds, ref default) => {\n-                AssociatedTypeItem(bounds.clean(cx), default.clean(cx))\n+                AssocTypeItem(bounds.clean(cx), default.clean(cx))\n             }\n         };\n         let local_did = cx.tcx.hir().local_def_id_from_hir_id(self.hir_id);\n@@ -2247,7 +2247,7 @@ impl Clean<Item> for hir::ImplItem {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let inner = match self.node {\n             hir::ImplItemKind::Const(ref ty, expr) => {\n-                AssociatedConstItem(ty.clean(cx),\n+                AssocConstItem(ty.clean(cx),\n                                     Some(print_const_expr(cx, expr)))\n             }\n             hir::ImplItemKind::Method(ref sig, body) => {\n@@ -2276,19 +2276,19 @@ impl Clean<Item> for hir::ImplItem {\n     }\n }\n \n-impl<'tcx> Clean<Item> for ty::AssociatedItem {\n+impl<'tcx> Clean<Item> for ty::AssocItem {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let inner = match self.kind {\n-            ty::AssociatedKind::Const => {\n+            ty::AssocKind::Const => {\n                 let ty = cx.tcx.type_of(self.def_id);\n                 let default = if self.defaultness.has_value() {\n                     Some(inline::print_inlined_const(cx, self.def_id))\n                 } else {\n                     None\n                 };\n-                AssociatedConstItem(ty.clean(cx), default)\n+                AssocConstItem(ty.clean(cx), default)\n             }\n-            ty::AssociatedKind::Method => {\n+            ty::AssocKind::Method => {\n                 let generics = (cx.tcx.generics_of(self.def_id),\n                                 &cx.tcx.explicit_predicates_of(self.def_id)).clean(cx);\n                 let sig = cx.tcx.fn_sig(self.def_id);\n@@ -2359,7 +2359,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                     })\n                 }\n             }\n-            ty::AssociatedKind::Type => {\n+            ty::AssocKind::Type => {\n                 let my_name = self.ident.name.clean(cx);\n \n                 if let ty::TraitContainer(did) = self.container {\n@@ -2404,7 +2404,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                         None\n                     };\n \n-                    AssociatedTypeItem(bounds, ty.clean(cx))\n+                    AssocTypeItem(bounds, ty.clean(cx))\n                 } else {\n                     TypedefItem(Typedef {\n                         type_: cx.tcx.type_of(self.def_id).clean(cx),\n@@ -2415,7 +2415,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                     }, true)\n                 }\n             }\n-            ty::AssociatedKind::Existential => unimplemented!(),\n+            ty::AssocKind::Existential => unimplemented!(),\n         };\n \n         let visibility = match self.container {\n@@ -4182,7 +4182,7 @@ fn resolve_type(cx: &DocContext<'_>,\n         }\n         Res::SelfTy(..)\n         | Res::Def(DefKind::TyParam, _)\n-        | Res::Def(DefKind::AssociatedTy, _) => true,\n+        | Res::Def(DefKind::AssocTy, _) => true,\n         _ => false,\n     };\n     let did = register_res(&*cx, path.res);"}, {"sha": "58e55d570a4f3336df942f258d7ed065fc812454", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -722,7 +722,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                                    \"<a class=\\\"type\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n                                    title=\\\"type {path}::{name}\\\">{name}</a>\",\n                                    url = url,\n-                                   shortty = ItemType::AssociatedType,\n+                                   shortty = ItemType::AssocType,\n                                    name = name,\n                                    path = path.join(\"::\"))?;\n                         }"}, {"sha": "3f3f4c85e81fc5035f49d409a179b938cf615d5e", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -33,9 +33,9 @@ pub enum ItemType {\n     Variant         = 13,\n     Macro           = 14,\n     Primitive       = 15,\n-    AssociatedType  = 16,\n+    AssocType       = 16,\n     Constant        = 17,\n-    AssociatedConst = 18,\n+    AssocConst      = 18,\n     Union           = 19,\n     ForeignType     = 20,\n     Keyword         = 21,\n@@ -83,8 +83,8 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::ForeignStaticItem(..)   => ItemType::Static, // no ForeignStatic\n             clean::MacroItem(..)           => ItemType::Macro,\n             clean::PrimitiveItem(..)       => ItemType::Primitive,\n-            clean::AssociatedConstItem(..) => ItemType::AssociatedConst,\n-            clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n+            clean::AssocConstItem(..)      => ItemType::AssocConst,\n+            clean::AssocTypeItem(..)       => ItemType::AssocType,\n             clean::ForeignTypeItem         => ItemType::ForeignType,\n             clean::KeywordItem(..)         => ItemType::Keyword,\n             clean::TraitAliasItem(..)      => ItemType::TraitAlias,\n@@ -141,9 +141,9 @@ impl ItemType {\n             ItemType::Variant         => \"variant\",\n             ItemType::Macro           => \"macro\",\n             ItemType::Primitive       => \"primitive\",\n-            ItemType::AssociatedType  => \"associatedtype\",\n+            ItemType::AssocType       => \"associatedtype\",\n             ItemType::Constant        => \"constant\",\n-            ItemType::AssociatedConst => \"associatedconstant\",\n+            ItemType::AssocConst      => \"associatedconstant\",\n             ItemType::ForeignType     => \"foreigntype\",\n             ItemType::Keyword         => \"keyword\",\n             ItemType::Existential     => \"existential\",\n@@ -162,7 +162,7 @@ impl ItemType {\n             ItemType::Typedef |\n             ItemType::Trait |\n             ItemType::Primitive |\n-            ItemType::AssociatedType |\n+            ItemType::AssocType |\n             ItemType::Existential |\n             ItemType::TraitAlias |\n             ItemType::ForeignType => NameSpace::Type,\n@@ -177,7 +177,7 @@ impl ItemType {\n             ItemType::StructField |\n             ItemType::Variant |\n             ItemType::Constant |\n-            ItemType::AssociatedConst => NameSpace::Value,\n+            ItemType::AssocConst => NameSpace::Value,\n \n             ItemType::Macro |\n             ItemType::ProcAttribute |"}, {"sha": "efb59c22012bcaad76c538ae27480bca5aee74b8", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -1554,20 +1554,20 @@ impl DocFolder for Cache {\n         if let Some(ref s) = item.name {\n             let (parent, is_inherent_impl_item) = match item.inner {\n                 clean::StrippedItem(..) => ((None, None), false),\n-                clean::AssociatedConstItem(..) |\n+                clean::AssocConstItem(..) |\n                 clean::TypedefItem(_, true) if self.parent_is_trait_impl => {\n                     // skip associated items in trait impls\n                     ((None, None), false)\n                 }\n-                clean::AssociatedTypeItem(..) |\n+                clean::AssocTypeItem(..) |\n                 clean::TyMethodItem(..) |\n                 clean::StructFieldItem(..) |\n                 clean::VariantItem(..) => {\n                     ((Some(*self.parent_stack.last().unwrap()),\n                       Some(&self.stack[..self.stack.len() - 1])),\n                      false)\n                 }\n-                clean::MethodItem(..) | clean::AssociatedConstItem(..) => {\n+                clean::MethodItem(..) | clean::AssocConstItem(..) => {\n                     if self.parent_stack.is_empty() {\n                         ((None, None), false)\n                     } else {\n@@ -3366,7 +3366,7 @@ fn naive_assoc_href(it: &clean::Item, link: AssocItemLink<'_>) -> String {\n \n     let name = it.name.as_ref().unwrap();\n     let ty = match it.type_() {\n-        Typedef | AssociatedType => AssociatedType,\n+        Typedef | AssocType => AssocType,\n         s@_ => s,\n     };\n \n@@ -3511,11 +3511,11 @@ fn render_assoc_item(w: &mut fmt::Formatter<'_>,\n         clean::MethodItem(ref m) => {\n             method(w, item, m.header, &m.generics, &m.decl, link, parent)\n         }\n-        clean::AssociatedConstItem(ref ty, ref default) => {\n+        clean::AssocConstItem(ref ty, ref default) => {\n             assoc_const(w, item, ty, default.as_ref(), link,\n                         if parent == ItemType::Trait { \"    \" } else { \"\" })\n         }\n-        clean::AssociatedTypeItem(ref bounds, ref default) => {\n+        clean::AssocTypeItem(ref bounds, ref default) => {\n             assoc_type(w, item, bounds, default.as_ref(), link,\n                        if parent == ItemType::Trait { \"    \" } else { \"\" })\n         }\n@@ -4247,14 +4247,14 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n-                let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssociatedType, name));\n+                let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssocType, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<code id='{}'>\", ns_id)?;\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id), \"\")?;\n                 write!(w, \"</code></h4>\")?;\n             }\n-            clean::AssociatedConstItem(ref ty, ref default) => {\n+            clean::AssocConstItem(ref ty, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n@@ -4268,7 +4268,7 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n                 }\n                 write!(w, \"</h4>\")?;\n             }\n-            clean::AssociatedTypeItem(ref bounds, ref default) => {\n+            clean::AssocTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n@@ -4946,8 +4946,8 @@ fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n         ItemType::Variant         => (\"variants\", \"Variants\"),\n         ItemType::Macro           => (\"macros\", \"Macros\"),\n         ItemType::Primitive       => (\"primitives\", \"Primitive Types\"),\n-        ItemType::AssociatedType  => (\"associated-types\", \"Associated Types\"),\n-        ItemType::AssociatedConst => (\"associated-consts\", \"Associated Constants\"),\n+        ItemType::AssocType       => (\"associated-types\", \"Associated Types\"),\n+        ItemType::AssocConst      => (\"associated-consts\", \"Associated Constants\"),\n         ItemType::ForeignType     => (\"foreign-types\", \"Foreign Types\"),\n         ItemType::Keyword         => (\"keywords\", \"Keywords\"),\n         ItemType::Existential     => (\"existentials\", \"Existentials\"),\n@@ -4974,7 +4974,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter<'_>, _it: &clean::Item,\n                    ItemType::Enum, ItemType::Constant, ItemType::Static, ItemType::Trait,\n                    ItemType::Function, ItemType::Typedef, ItemType::Union, ItemType::Impl,\n                    ItemType::TyMethod, ItemType::Method, ItemType::StructField, ItemType::Variant,\n-                   ItemType::AssociatedType, ItemType::AssociatedConst, ItemType::ForeignType] {\n+                   ItemType::AssocType, ItemType::AssocConst, ItemType::ForeignType] {\n         if items.iter().any(|it| !it.is_stripped() && it.type_() == myty) {\n             let (short, name) = item_ty_to_strs(&myty);\n             sidebar.push_str(&format!(\"<li><a href=\\\"#{id}\\\">{name}</a></li>\","}, {"sha": "860ea18a58ad0f8b78aa2bd038d5d6815f4a9e80", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -75,8 +75,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 // In case this is a trait item, skip the\n                 // early return and try looking for the trait.\n                 let value = match result.res {\n-                    Res::Def(DefKind::Method, _) | Res::Def(DefKind::AssociatedConst, _) => true,\n-                    Res::Def(DefKind::AssociatedTy, _) => false,\n+                    Res::Def(DefKind::Method, _) | Res::Def(DefKind::AssocConst, _) => true,\n+                    Res::Def(DefKind::AssocTy, _) => false,\n                     Res::Def(DefKind::Variant, _) => return handle_variant(cx, result.res),\n                     // Not a trait item; just return what we found.\n                     _ => return Ok((result.res, None))\n@@ -120,7 +120,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 return cx.tcx.associated_items(did)\n                     .find(|item| item.ident.name == item_name)\n                     .and_then(|item| match item.kind {\n-                        ty::AssociatedKind::Method => Some(\"method\"),\n+                        ty::AssocKind::Method => Some(\"method\"),\n                         _ => None,\n                     })\n                     .map(|out| (prim, Some(format!(\"{}#{}.{}\", path, out, item_name))))\n@@ -143,8 +143,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                      .find(|item| item.ident.name == item_name);\n                     if let Some(item) = item {\n                         let out = match item.kind {\n-                            ty::AssociatedKind::Method if ns == ValueNS => \"method\",\n-                            ty::AssociatedKind::Const if ns == ValueNS => \"associatedconstant\",\n+                            ty::AssocKind::Method if ns == ValueNS => \"method\",\n+                            ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n                             _ => return Err(())\n                         };\n                         Ok((ty.res, Some(format!(\"{}.{}\", out, item_name))))\n@@ -181,9 +181,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                  .find(|item| item.ident.name == item_name);\n                     if let Some(item) = item {\n                         let kind = match item.kind {\n-                            ty::AssociatedKind::Const if ns == ValueNS => \"associatedconstant\",\n-                            ty::AssociatedKind::Type if ns == TypeNS => \"associatedtype\",\n-                            ty::AssociatedKind::Method if ns == ValueNS => {\n+                            ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n+                            ty::AssocKind::Type if ns == TypeNS => \"associatedtype\",\n+                            ty::AssocKind::Method if ns == ValueNS => {\n                                 if item.defaultness.has_value() {\n                                     \"method\"\n                                 } else {"}, {"sha": "018ab5dea6081f54a9dc431ff508f65d36fbd1fa", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837b72c805f98d95a44ad4fc2b43ba6a8acb108a/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "patch": "@@ -172,7 +172,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             | clean::ForeignStaticItem(..)\n             | clean::ConstantItem(..)\n             | clean::UnionItem(..)\n-            | clean::AssociatedConstItem(..)\n+            | clean::AssocConstItem(..)\n             | clean::TraitAliasItem(..)\n             | clean::ForeignTypeItem => {\n                 if i.def_id.is_local() {\n@@ -214,7 +214,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             clean::PrimitiveItem(..) => {}\n \n             // Associated types are never stripped\n-            clean::AssociatedTypeItem(..) => {}\n+            clean::AssocTypeItem(..) => {}\n \n             // Keywords are never stripped\n             clean::KeywordItem(..) => {}"}]}