{"sha": "5a5c265e24cc79a8e28f01930380cb8a2481165c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNWMyNjVlMjRjYzc5YThlMjhmMDE5MzAzODBjYjhhMjQ4MTE2NWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-12T15:44:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-22T19:37:10Z"}, "message": "refactor common logic into `ParameterEnvironment::and()`", "tree": {"sha": "72cf468dc7e8d437dd4a36e30ce50e00d3266275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72cf468dc7e8d437dd4a36e30ce50e00d3266275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a5c265e24cc79a8e28f01930380cb8a2481165c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5c265e24cc79a8e28f01930380cb8a2481165c", "html_url": "https://github.com/rust-lang/rust/commit/5a5c265e24cc79a8e28f01930380cb8a2481165c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a5c265e24cc79a8e28f01930380cb8a2481165c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "194d4bc15dd9938e1c77e7f4abdfcb51534da8b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5", "html_url": "https://github.com/rust-lang/rust/commit/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "8264809e9c9d88784f6bf93dff3882d2a8055d49", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c265e24cc79a8e28f01930380cb8a2481165c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c265e24cc79a8e28f01930380cb8a2481165c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5a5c265e24cc79a8e28f01930380cb8a2481165c", "patch": "@@ -1259,10 +1259,33 @@ pub struct ParameterEnvironment<'tcx> {\n }\n \n impl<'tcx> ParameterEnvironment<'tcx> {\n-    pub fn and<T>(self, value: T) -> ParameterEnvironmentAnd<'tcx, T> {\n-        ParameterEnvironmentAnd {\n-            param_env: self,\n-            value: value,\n+    /// Creates a suitable environment in which to perform trait\n+    /// queries on the given value. This will either be `self` *or*\n+    /// the empty environment, depending on whether `value` references\n+    /// type parameters that are in scope. (If it doesn't, then any\n+    /// judgements should be completely independent of the context,\n+    /// and hence we can safely use the empty environment so as to\n+    /// enable more sharing across functions.)\n+    ///\n+    /// NB: This is a mildly dubious thing to do, in that a function\n+    /// (or other environment) might have wacky where-clauses like\n+    /// `where Box<u32>: Copy`, which are clearly never\n+    /// satisfiable. The code will at present ignore these,\n+    /// effectively, when type-checking the body of said\n+    /// function. This preserves existing behavior in any\n+    /// case. --nmatsakis\n+    pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParameterEnvironmentAnd<'tcx, T> {\n+        assert!(!value.needs_infer());\n+        if value.has_param_types() || value.has_self_ty() {\n+            ParameterEnvironmentAnd {\n+                param_env: self,\n+                value: value,\n+            }\n+        } else {\n+            ParameterEnvironmentAnd {\n+                param_env: ParameterEnvironment::empty(),\n+                value: value,\n+            }\n         }\n     }\n }"}, {"sha": "da2552d37e2dc62ae1965b582297cb97554acac3", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a5c265e24cc79a8e28f01930380cb8a2481165c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5c265e24cc79a8e28f01930380cb8a2481165c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=5a5c265e24cc79a8e28f01930380cb8a2481165c", "patch": "@@ -724,35 +724,23 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                             param_env: ParameterEnvironment<'tcx>,\n                             span: Span)\n                             -> bool {\n-        if self.has_param_types() || self.has_self_ty() {\n-            !tcx.at(span).is_copy_raw(param_env.and(self))\n-        } else {\n-            !tcx.is_copy_raw(ParameterEnvironment::empty().and(self))\n-        }\n+        !tcx.at(span).is_copy_raw(param_env.and(self))\n     }\n \n     pub fn is_sized(&'tcx self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     param_env: ParameterEnvironment<'tcx>,\n                     span: Span)-> bool\n     {\n-        if self.has_param_types() || self.has_self_ty() {\n-            tcx.at(span).is_sized_raw(param_env.and(self))\n-        } else {\n-            tcx.is_sized_raw(ParameterEnvironment::empty().and(self))\n-        }\n+        tcx.at(span).is_sized_raw(param_env.and(self))\n     }\n \n     pub fn is_freeze(&'tcx self,\n                      tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                      param_env: ParameterEnvironment<'tcx>,\n                      span: Span)-> bool\n     {\n-        if self.has_param_types() || self.has_self_ty() {\n-            tcx.at(span).is_freeze_raw(param_env.and(self))\n-        } else {\n-            tcx.is_freeze_raw(ParameterEnvironment::empty().and(self))\n-        }\n+        tcx.at(span).is_freeze_raw(param_env.and(self))\n     }\n \n     /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely"}]}