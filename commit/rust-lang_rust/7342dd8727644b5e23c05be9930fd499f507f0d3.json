{"sha": "7342dd8727644b5e23c05be9930fd499f507f0d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNDJkZDg3Mjc2NDRiNWUyM2MwNWJlOTkzMGZkNDk5ZjUwN2YwZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-11T18:44:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-11T18:44:52Z"}, "message": "Auto merge of #31083 - SimonSapin:set_port, r=alexcrichton\n\nAs demonstrated in the `resolve_socket_addr` change, this is less awkward than re-creating a new address from the other parts.\n\nIf this is to be accepted, pleas open a tracking issue (I can\u2019t set the appropriate tags) and I\u2019ll update the PR with the tracking issue number.", "tree": {"sha": "5ac318779ba003e6bb0481dc005a96e53dca7c79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac318779ba003e6bb0481dc005a96e53dca7c79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7342dd8727644b5e23c05be9930fd499f507f0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7342dd8727644b5e23c05be9930fd499f507f0d3", "html_url": "https://github.com/rust-lang/rust/commit/7342dd8727644b5e23c05be9930fd499f507f0d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7342dd8727644b5e23c05be9930fd499f507f0d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1dc0975a43e224386ec0ed1bb7ae09cfd0dd7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1dc0975a43e224386ec0ed1bb7ae09cfd0dd7e", "html_url": "https://github.com/rust-lang/rust/commit/aa1dc0975a43e224386ec0ed1bb7ae09cfd0dd7e"}, {"sha": "3de820ee7912f46761ca4f0c50f67164aaa5f42f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de820ee7912f46761ca4f0c50f67164aaa5f42f", "html_url": "https://github.com/rust-lang/rust/commit/3de820ee7912f46761ca4f0c50f67164aaa5f42f"}], "stats": {"total": 130, "additions": 120, "deletions": 10}, "files": [{"sha": "89c51c70843533a155240488a1c8764db9043a01", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 120, "deletions": 10, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/7342dd8727644b5e23c05be9930fd499f507f0d3/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7342dd8727644b5e23c05be9930fd499f507f0d3/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=7342dd8727644b5e23c05be9930fd499f507f0d3", "patch": "@@ -67,6 +67,17 @@ impl SocketAddr {\n         }\n     }\n \n+    /// Change the IP address associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_ip(&mut self, new_ip: IpAddr) {\n+        // `match (*self, new_ip)` would have us mutate a copy of self only to throw it away.\n+        match (self, new_ip) {\n+            (&mut SocketAddr::V4(ref mut a), IpAddr::V4(new_ip)) => a.set_ip(new_ip),\n+            (&mut SocketAddr::V6(ref mut a), IpAddr::V6(new_ip)) => a.set_ip(new_ip),\n+            (self_, new_ip) => *self_ = Self::new(new_ip, self_.port()),\n+        }\n+    }\n+\n     /// Returns the port number associated with this socket address.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 {\n@@ -75,6 +86,15 @@ impl SocketAddr {\n             SocketAddr::V6(ref a) => a.port(),\n         }\n     }\n+\n+    /// Change the port number associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_port(&mut self, new_port: u16) {\n+        match *self {\n+            SocketAddr::V4(ref mut a) => a.set_port(new_port),\n+            SocketAddr::V6(ref mut a) => a.set_port(new_port),\n+        }\n+    }\n }\n \n impl SocketAddrV4 {\n@@ -99,9 +119,17 @@ impl SocketAddrV4 {\n         }\n     }\n \n+    /// Change the IP address associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_ip(&mut self, new_ip: Ipv4Addr) { self.inner.sin_addr = *new_ip.as_inner() }\n+\n     /// Returns the port number associated with this socket address.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 { ntoh(self.inner.sin_port) }\n+\n+    /// Change the port number associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_port(&mut self, new_port: u16) { self.inner.sin_port = hton(new_port) }\n }\n \n impl SocketAddrV6 {\n@@ -130,19 +158,39 @@ impl SocketAddrV6 {\n         }\n     }\n \n+    /// Change the IP address associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_ip(&mut self, new_ip: Ipv6Addr) { self.inner.sin6_addr = *new_ip.as_inner() }\n+\n     /// Returns the port number associated with this socket address.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 { ntoh(self.inner.sin6_port) }\n \n+    /// Change the port number associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_port(&mut self, new_port: u16) { self.inner.sin6_port = hton(new_port) }\n+\n     /// Returns the flow information associated with this address,\n     /// corresponding to the `sin6_flowinfo` field in C.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn flowinfo(&self) -> u32 { ntoh(self.inner.sin6_flowinfo) }\n \n+    /// Change the flow information associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_flowinfo(&mut self, new_flowinfo: u32) {\n+        self.inner.sin6_flowinfo = hton(new_flowinfo)\n+    }\n+\n     /// Returns the scope ID associated with this address,\n     /// corresponding to the `sin6_scope_id` field in C.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn scope_id(&self) -> u32 { ntoh(self.inner.sin6_scope_id) }\n+\n+    /// Change the scope ID associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_scope_id(&mut self, new_scope_id: u32) {\n+        self.inner.sin6_scope_id = hton(new_scope_id)\n+    }\n }\n \n impl FromInner<c::sockaddr_in> for SocketAddrV4 {\n@@ -385,16 +433,9 @@ impl ToSocketAddrs for (Ipv6Addr, u16) {\n fn resolve_socket_addr(s: &str, p: u16) -> io::Result<vec::IntoIter<SocketAddr>> {\n     let ips = try!(lookup_host(s));\n     let v: Vec<_> = try!(ips.map(|a| {\n-        a.map(|a| {\n-            match a {\n-                SocketAddr::V4(ref a) => {\n-                    SocketAddr::V4(SocketAddrV4::new(*a.ip(), p))\n-                }\n-                SocketAddr::V6(ref a) => {\n-                    SocketAddr::V6(SocketAddrV6::new(*a.ip(), p, a.flowinfo(),\n-                                                     a.scope_id()))\n-                }\n-            }\n+        a.map(|mut a| {\n+            a.set_port(p);\n+            a\n         })\n     }).collect());\n     Ok(v.into_iter())\n@@ -511,4 +552,73 @@ mod tests {\n     fn to_socket_addr_str_bad() {\n         assert!(tsa(\"1200::AB00:1234::2552:7777:1313:34300\").is_err());\n     }\n+\n+    #[test]\n+    fn set_ip() {\n+        fn ip4(low: u8) -> Ipv4Addr { Ipv4Addr::new(77, 88, 21, low) }\n+        fn ip6(low: u16) -> Ipv6Addr { Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, low) }\n+\n+        let mut v4 = SocketAddrV4::new(ip4(11), 80);\n+        assert_eq!(v4.ip(), &ip4(11));\n+        v4.set_ip(ip4(12));\n+        assert_eq!(v4.ip(), &ip4(12));\n+\n+        let mut addr = SocketAddr::V4(v4);\n+        assert_eq!(addr.ip(), IpAddr::V4(ip4(12)));\n+        addr.set_ip(IpAddr::V4(ip4(13)));\n+        assert_eq!(addr.ip(), IpAddr::V4(ip4(13)));\n+        addr.set_ip(IpAddr::V6(ip6(14)));\n+        assert_eq!(addr.ip(), IpAddr::V6(ip6(14)));\n+\n+        let mut v6 = SocketAddrV6::new(ip6(1), 80, 0, 0);\n+        assert_eq!(v6.ip(), &ip6(1));\n+        v6.set_ip(ip6(2));\n+        assert_eq!(v6.ip(), &ip6(2));\n+\n+        let mut addr = SocketAddr::V6(v6);\n+        assert_eq!(addr.ip(), IpAddr::V6(ip6(2)));\n+        addr.set_ip(IpAddr::V6(ip6(3)));\n+        assert_eq!(addr.ip(), IpAddr::V6(ip6(3)));\n+        addr.set_ip(IpAddr::V4(ip4(4)));\n+        assert_eq!(addr.ip(), IpAddr::V4(ip4(4)));\n+    }\n+\n+    #[test]\n+    fn set_port() {\n+        let mut v4 = SocketAddrV4::new(Ipv4Addr::new(77, 88, 21, 11), 80);\n+        assert_eq!(v4.port(), 80);\n+        v4.set_port(443);\n+        assert_eq!(v4.port(), 443);\n+\n+        let mut addr = SocketAddr::V4(v4);\n+        assert_eq!(addr.port(), 443);\n+        addr.set_port(8080);\n+        assert_eq!(addr.port(), 8080);\n+\n+        let mut v6 = SocketAddrV6::new(Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), 80, 0, 0);\n+        assert_eq!(v6.port(), 80);\n+        v6.set_port(443);\n+        assert_eq!(v6.port(), 443);\n+\n+        let mut addr = SocketAddr::V6(v6);\n+        assert_eq!(addr.port(), 443);\n+        addr.set_port(8080);\n+        assert_eq!(addr.port(), 8080);\n+    }\n+\n+    #[test]\n+    fn set_flowinfo() {\n+        let mut v6 = SocketAddrV6::new(Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), 80, 10, 0);\n+        assert_eq!(v6.flowinfo(), 10);\n+        v6.set_flowinfo(20);\n+        assert_eq!(v6.flowinfo(), 20);\n+    }\n+\n+    #[test]\n+    fn set_scope_id() {\n+        let mut v6 = SocketAddrV6::new(Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), 80, 0, 10);\n+        assert_eq!(v6.scope_id(), 10);\n+        v6.set_scope_id(20);\n+        assert_eq!(v6.scope_id(), 20);\n+    }\n }"}]}