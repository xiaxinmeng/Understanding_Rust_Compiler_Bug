{"sha": "d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MjkyZmUyMzViYzlkNzJjOWM1MjhlMmMyYmZjNWQwN2FkN2JhYTI=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-12-14T07:03:01Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-12-14T07:03:01Z"}, "message": "more docs", "tree": {"sha": "0ebb49daed30a11aad866dc766095be0cbfb6b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ebb49daed30a11aad866dc766095be0cbfb6b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2", "html_url": "https://github.com/rust-lang/rust/commit/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b977907cbcdebe1e4e2f508066d098903ebce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b977907cbcdebe1e4e2f508066d098903ebce2", "html_url": "https://github.com/rust-lang/rust/commit/f2b977907cbcdebe1e4e2f508066d098903ebce2"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "40f7d21f43c806aa05ca77cff72ae2ba809a7ced", "filename": "src/mutex_atomic.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2/src%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2/src%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmutex_atomic.rs?ref=d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2", "patch": "@@ -11,12 +11,26 @@ use rustc::middle::subst::ParamSpace;\n \n use utils::{span_lint, MUTEX_PATH, match_type};\n \n+/// **What it does:** It `Warn`s on usages of `Mutex<X>` where an atomic will do\n+///\n+/// **Why is this bad?** Using a Mutex just to make access to a plain bool or reference sequential is shooting flies with cannons. `std::atomic::AtomicBool` and `std::atomic::AtomicPtr` are leaner and faster.\n+///\n+/// **Known problems:** This lint cannot detect if the Mutex is actually used for waiting before a critical section.\n+///\n+/// **Example:** `let x = Mutex::new(&y);`\n declare_lint! {\n     pub MUTEX_ATOMIC,\n     Warn,\n     \"using a Mutex where an atomic value could be used instead\"\n }\n \n+/// **What it does:** It `Warn`s on usages of `Mutex<X>` where `X` is an integral type.\n+///\n+/// **Why is this bad?** Using a Mutex just to make access to a plain integer sequential is shooting flies with cannons. `std::atomic::usize` is leaner and faster.\n+///\n+/// **Known problems:** This lint cannot detect if the Mutex is actually used for waiting before a critical section.\n+///\n+/// **Example:** `let x = Mutex::new(0usize);`\n declare_lint! {\n     pub MUTEX_INTEGER,\n     Allow,"}, {"sha": "c71468bf5a08ea0000672ab29c567b1ef6a02210", "filename": "src/transmute.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2/src%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2/src%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftransmute.rs?ref=d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2", "patch": "@@ -2,6 +2,13 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use utils;\n \n+/// **What it does:** This lint checks for transmutes to the original type of the object. It is `Warn` by default.\n+///\n+/// **Why is this bad?** Readability. The code tricks people into thinking that the original value was of some other type.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `core::intrinsics::transmute(t)` where the result type is the same as `t`'s.\n declare_lint! {\n     pub USELESS_TRANSMUTE,\n     Warn,"}]}