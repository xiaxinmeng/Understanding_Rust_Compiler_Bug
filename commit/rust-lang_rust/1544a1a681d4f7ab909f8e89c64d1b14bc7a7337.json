{"sha": "1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NDRhMWE2ODFkNGY3YWI5MDlmOGU4OWM2NGQxYjE0YmM3YTczMzc=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-05T05:18:24Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-05T05:18:24Z"}, "message": "Merge remote-tracking branch 'origin/master' into relicense-rewrite", "tree": {"sha": "45c141cad594caf81486ea4d02caa7e328336a65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c141cad594caf81486ea4d02caa7e328336a65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlu29CEACgkQtvoGpuDi\nZlvDew//VnGmF9FJWgAAsgeaYoAAuVfUpzdF/wM+kfd2PU/NKL5cUMOr31mYE5hU\n9F9i9OSeYQrzA5ik35WaIDZPN3PVYFqlet5+c2eyM441QobGM8O0KChABDjklDfU\nn0xN36xMX9X+noO4pWT1oBGMpoCXGdRKeWDlYjNbttZz2HaF+onX/tII7sKaxRAD\nWmGbG5lzX7sMchd71PlRDlMpSMzdcvgNzMFejJZxoUPUY2qnwxVyiFGHUoMCk0ym\nTVI153nqbeWlqizjk2Hxk87ku9aCvXSdUtagguQolDeOoDQoBBPKHXnmYBOTtd/k\nYKRwQDM9G+jkZh0ysT3aEPtrpBiKgT1m3SfDrxeSBdMCzGFcR2/wqBuHLarrKS53\nlZgqwVKeT4lXhQv+JX1C6EjbSnLvTOgLB37CFgsHnQx5YwKsoaw9dXoyEnTr//J1\nbSg9Ge4JSEkLPg8qp5B39FPPDfMXSULRzAjOBqvNjG0uCX3Ya5ef0y/lrxwucl4m\nTW5gyIMAhrUoRAHZMdh6nRERyysSeHhBh+dyAVyIZRPGmf18hkHbuNcVNBEeLef/\niXBRYWSAzj4hFdRPlJPqmzf+JeFE9y+PQpUDhsXZvKcsKpwFtUmds6p4gjqALhio\nPdczU5sm3fj3AzPxrnQcnZnPWrfSHQBGRxu+NW33Bku+O4FGm3I=\n=ybv0\n-----END PGP SIGNATURE-----", "payload": "tree 45c141cad594caf81486ea4d02caa7e328336a65\nparent 8b3d2073fa8b1f48a27081944c1a7010a8d7b7b1\nparent eb2cfe62b523c34dc2ec5990b0113001c936db7e\nauthor Philipp Hansch <dev@phansch.net> 1538716704 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1538716704 +0200\n\nMerge remote-tracking branch 'origin/master' into relicense-rewrite\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "html_url": "https://github.com/rust-lang/rust/commit/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b3d2073fa8b1f48a27081944c1a7010a8d7b7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3d2073fa8b1f48a27081944c1a7010a8d7b7b1", "html_url": "https://github.com/rust-lang/rust/commit/8b3d2073fa8b1f48a27081944c1a7010a8d7b7b1"}, {"sha": "eb2cfe62b523c34dc2ec5990b0113001c936db7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2cfe62b523c34dc2ec5990b0113001c936db7e", "html_url": "https://github.com/rust-lang/rust/commit/eb2cfe62b523c34dc2ec5990b0113001c936db7e"}], "stats": {"total": 114, "additions": 79, "deletions": 35}, "files": [{"sha": "8aff93d480aee3dc0685d058f8524a8af7fa2df8", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "patch": "@@ -57,11 +57,9 @@ script:\n       export LD_LIBRARY_PATH=$(rustc --print sysroot)/lib\n   - |\n     if [ -z ${INTEGRATION} ]; then\n-      ./ci/base-tests.sh\n-      sleep 5\n+      ./ci/base-tests.sh && sleep 5\n     else\n-      ./ci/integration-tests.sh\n-      sleep 5\n+      ./ci/integration-tests.sh && sleep 5\n     fi\n \n after_success: |"}, {"sha": "7e2e355c251e3e731f4de54c8453e7cfd6f71504", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "patch": "@@ -4,7 +4,6 @@ use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::rustc::ty;\n use crate::syntax::ast::LitKind;\n-use crate::syntax_pos::Span;\n use crate::utils::paths;\n use crate::utils::{in_macro, is_expn_of, last_path_segment, match_def_path, match_type, opt_def_id, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty};\n use crate::rustc_errors::Applicability;\n@@ -47,7 +46,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 return;\n             }\n             match expr.node {\n-\n                 // `format!(\"{}\", foo)` expansion\n                 ExprKind::Call(ref fun, ref args) => {\n                     if_chain! {\n@@ -58,12 +56,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         if check_single_piece(&args[0]);\n                         if let Some(format_arg) = get_single_string_arg(cx, &args[1]);\n                         if check_unformatted(&args[2]);\n+                        if let ExprKind::AddrOf(_, ref format_arg) = format_arg.node;\n                         then {\n-                            let sugg = format!(\"{}.to_string()\", snippet(cx, format_arg, \"<arg>\").into_owned());\n+                            let (message, sugg) = if_chain! {\n+                                if let ExprKind::MethodCall(ref path, _, _) = format_arg.node;\n+                                if path.ident.as_interned_str() == \"to_string\";\n+                                then {\n+                                    (\"`to_string()` is enough\",\n+                                    snippet(cx, format_arg.span, \"<arg>\").to_string())\n+                                } else {\n+                                    (\"consider using .to_string()\",\n+                                    format!(\"{}.to_string()\", snippet(cx, format_arg.span, \"<arg>\")))\n+                                }\n+                            };\n+\n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n                                 db.span_suggestion_with_applicability(\n                                     expr.span,\n-                                    \"consider using .to_string()\",\n+                                    message,\n                                     sugg,\n                                     Applicability::MachineApplicable,\n                                 );\n@@ -114,9 +124,9 @@ fn check_single_piece(expr: &Expr) -> bool {\n /// ::std::fmt::Display::fmt)],\n /// }\n /// ```\n-/// and that type of `__arg0` is `&str` or `String`\n-/// then returns the span of first element of the matched tuple\n-fn get_single_string_arg(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Span> {\n+/// and that the type of `__arg0` is `&str` or `String`,\n+/// then returns the span of first element of the matched tuple.\n+fn get_single_string_arg<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<&'a Expr> {\n     if_chain! {\n         if let ExprKind::AddrOf(_, ref expr) = expr.node;\n         if let ExprKind::Match(ref match_expr, ref arms, _) = expr.node;\n@@ -135,7 +145,7 @@ fn get_single_string_arg(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Span>\n             let ty = walk_ptrs_ty(cx.tables.pat_ty(&pat[0]));\n             if ty.sty == ty::Str || match_type(cx, ty, &paths::STRING) {\n                 if let ExprKind::Tup(ref values) = match_expr.node {\n-                    return Some(values[0].span);\n+                    return Some(&values[0]);\n                 }\n             }\n         }\n@@ -162,9 +172,12 @@ fn check_unformatted(expr: &Expr) -> bool {\n         if let ExprKind::Struct(_, ref fields, _) = exprs[0].node;\n         if let Some(format_field) = fields.iter().find(|f| f.ident.name == \"format\");\n         if let ExprKind::Struct(_, ref fields, _) = format_field.expr.node;\n-        if let Some(align_field) = fields.iter().find(|f| f.ident.name == \"width\");\n-        if let ExprKind::Path(ref qpath) = align_field.expr.node;\n-        if last_path_segment(qpath).ident.name == \"Implied\";\n+        if let Some(width_field) = fields.iter().find(|f| f.ident.name == \"width\");\n+        if let ExprKind::Path(ref width_qpath) = width_field.expr.node;\n+        if last_path_segment(width_qpath).ident.name == \"Implied\";\n+        if let Some(precision_field) = fields.iter().find(|f| f.ident.name == \"precision\");\n+        if let ExprKind::Path(ref precision_path) = precision_field.expr.node;\n+        if last_path_segment(precision_path).ident.name == \"Implied\";\n         then {\n             return true;\n         }"}, {"sha": "e0d858bd270ad453fa482ae8c0fa01c3301f1656", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "patch": "@@ -882,12 +882,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 let ty = cx.tcx.type_of(def_id);\n                 let is_copy = is_copy(cx, ty);\n                 for &(ref conv, self_kinds) in &CONVENTIONS {\n-                    if_chain! {\n-                        if conv.check(&name.as_str());\n+                    if conv.check(&name.as_str()) {\n                         if !self_kinds\n-                            .iter()\n-                            .any(|k| k.matches(cx, first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics));\n-                        then {\n+                                .iter()\n+                                .any(|k| k.matches(cx, first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics)) {\n                             let lint = if item.vis.node.is_pub() {\n                                 WRONG_PUB_SELF_CONVENTION\n                             } else {\n@@ -904,6 +902,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                                           .collect::<Vec<_>>()\n                                                           .join(\" or \")));\n                         }\n+\n+                        // Only check the first convention to match (CONVENTIONS should be listed from most to least specific)\n+                        break;\n                     }\n                 }\n \n@@ -1183,8 +1184,8 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                         Applicability::MaybeIncorrect,\n                     );\n                     db.span_suggestion_with_applicability(\n-                        expr.span, \n-                        \"or try being explicit about what type to clone\", \n+                        expr.span,\n+                        \"or try being explicit about what type to clone\",\n                         explicit,\n                         Applicability::MaybeIncorrect,\n                     );\n@@ -2067,12 +2068,13 @@ enum Convention {\n }\n \n #[rustfmt::skip]\n-const CONVENTIONS: [(Convention, &[SelfKind]); 6] = [\n+const CONVENTIONS: [(Convention, &[SelfKind]); 7] = [\n     (Convention::Eq(\"new\"), &[SelfKind::No]),\n     (Convention::StartsWith(\"as_\"), &[SelfKind::Ref, SelfKind::RefMut]),\n     (Convention::StartsWith(\"from_\"), &[SelfKind::No]),\n     (Convention::StartsWith(\"into_\"), &[SelfKind::Value]),\n     (Convention::StartsWith(\"is_\"), &[SelfKind::Ref, SelfKind::No]),\n+    (Convention::Eq(\"to_mut\"), &[SelfKind::RefMut]),\n     (Convention::StartsWith(\"to_\"), &[SelfKind::Ref]),\n ];\n "}, {"sha": "fa3c72dbb7de52a6ed47e8c1b2c7336c864d9bdb", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "patch": "@@ -72,6 +72,7 @@ pub fn in_macro(span: Span) -> bool {\n pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) -> bool {\n     use crate::syntax::symbol;\n \n+    #[derive(Debug)]\n     struct AbsolutePathBuffer {\n         names: Vec<symbol::LocalInternedString>,\n     }\n@@ -89,7 +90,7 @@ pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) ->\n \n     let mut apb = AbsolutePathBuffer { names: vec![] };\n \n-    tcx.push_item_path(&mut apb, def_id);\n+    tcx.push_item_path(&mut apb, def_id, false);\n \n     apb.names.len() == path.len()\n         && apb.names"}, {"sha": "6c442e42d95eb52e6e5e211cbef8a3a97980b3df", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "patch": "@@ -21,6 +21,7 @@ fn show_version() {\n }\n \n pub fn main() {\n+    rustc_driver::init_rustc_env_logger();\n     exit(rustc_driver::run(move || {\n         use std::env;\n "}, {"sha": "858c9fc8de5c3f461f683f82f9804568961b1d98", "filename": "tests/ui/format.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     format!(\"{}\", \"foo\");\n     format!(\"{:?}\", \"foo\"); // don't warn about debug\n     format!(\"{:8}\", \"foo\");\n+    format!(\"{:width$}\", \"foo\", width = 8);\n     format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n     format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n     format!(\"foo {}\", \"bar\");\n@@ -23,6 +24,7 @@ fn main() {\n     format!(\"{}\", arg);\n     format!(\"{:?}\", arg); // don't warn about debug\n     format!(\"{:8}\", arg);\n+    format!(\"{:width$}\", arg, width = 8);\n     format!(\"{:+}\", arg); // warn when the format makes no difference\n     format!(\"{:<}\", arg); // warn when the format makes no difference\n     format!(\"foo {}\", arg);\n@@ -44,4 +46,14 @@ fn main() {\n \n     // A format! inside a macro should not trigger a warning\n     foo!(\"should not warn\");\n+\n+    // precision on string means slicing without panicking on size:\n+    format!(\"{:.1}\", \"foo\"); // could be \"foo\"[..1]\n+    format!(\"{:.10}\", \"foo\"); // could not be \"foo\"[..10]\n+    format!(\"{:.prec$}\", \"foo\", prec = 1);\n+    format!(\"{:.prec$}\", \"foo\", prec = 10);\n+\n+    format!(\"{}\", 42.to_string());\n+    let x = std::path::PathBuf::from(\"/bar/foo/qux\");\n+    format!(\"{}\", x.display().to_string());\n }"}, {"sha": "520c1b794337deeb02e1f5d2210c7107d7b3e35e", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "patch": "@@ -15,44 +15,60 @@ error: useless use of `format!`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:17:5\n+  --> $DIR/format.rs:18:5\n    |\n-17 |     format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n+18 |     format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:18:5\n+  --> $DIR/format.rs:19:5\n    |\n-18 |     format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n+19 |     format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:23:5\n+  --> $DIR/format.rs:24:5\n    |\n-23 |     format!(\"{}\", arg);\n+24 |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:26:5\n+  --> $DIR/format.rs:28:5\n    |\n-26 |     format!(\"{:+}\", arg); // warn when the format makes no difference\n+28 |     format!(\"{:+}\", arg); // warn when the format makes no difference\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:27:5\n+  --> $DIR/format.rs:29:5\n    |\n-27 |     format!(\"{:<}\", arg); // warn when the format makes no difference\n+29 |     format!(\"{:<}\", arg); // warn when the format makes no difference\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 7 previous errors\n+error: useless use of `format!`\n+  --> $DIR/format.rs:56:5\n+   |\n+56 |     format!(\"{}\", 42.to_string());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `42.to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:58:5\n+   |\n+58 |     format!(\"{}\", x.display().to_string());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `x.display().to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "2fb33d08619ac3d49aa31c34a25c54c16e2ecbfb", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1544a1a681d4f7ab909f8e89c64d1b14bc7a7337/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=1544a1a681d4f7ab909f8e89c64d1b14bc7a7337", "patch": "@@ -59,4 +59,5 @@ impl Bar {\n     fn is_(self) {}\n     fn to_(self) {}\n     fn from_(self) {}\n+    fn to_mut(&mut self) {}\n }"}]}