{"sha": "b5f2b098d7747863b1e647e024777e4baa4907a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZjJiMDk4ZDc3NDc4NjNiMWU2NDdlMDI0Nzc3ZTRiYWE0OTA3YTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-18T08:08:09Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-18T08:08:09Z"}, "message": "Rollup merge of #26348 - eefriedman:unused-interiorsafety, r=luqmana", "tree": {"sha": "8871d5f1d4f16fc754b5704eac2bd214d8233b4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8871d5f1d4f16fc754b5704eac2bd214d8233b4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5f2b098d7747863b1e647e024777e4baa4907a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f2b098d7747863b1e647e024777e4baa4907a9", "html_url": "https://github.com/rust-lang/rust/commit/b5f2b098d7747863b1e647e024777e4baa4907a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5f2b098d7747863b1e647e024777e4baa4907a9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39e4d03e35ddc65f69c04f58061403986323ed50", "url": "https://api.github.com/repos/rust-lang/rust/commits/39e4d03e35ddc65f69c04f58061403986323ed50", "html_url": "https://github.com/rust-lang/rust/commit/39e4d03e35ddc65f69c04f58061403986323ed50"}, {"sha": "199e60aa220da58f3ce10fe0cc30ce715da3f0c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/199e60aa220da58f3ce10fe0cc30ce715da3f0c9", "html_url": "https://github.com/rust-lang/rust/commit/199e60aa220da58f3ce10fe0cc30ce715da3f0c9"}], "stats": {"total": 45, "additions": 8, "deletions": 37}, "files": [{"sha": "9d0a1821debc12185f455785d6e29068ec290f97", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b5f2b098d7747863b1e647e024777e4baa4907a9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f2b098d7747863b1e647e024777e4baa4907a9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=b5f2b098d7747863b1e647e024777e4baa4907a9", "patch": "@@ -65,7 +65,6 @@ pub use self::InteriorKind::*;\n pub use self::FieldName::*;\n pub use self::ElementKind::*;\n pub use self::MutabilityCategory::*;\n-pub use self::InteriorSafety::*;\n pub use self::AliasableReason::*;\n pub use self::Note::*;\n pub use self::deref_kind::*;\n@@ -1385,12 +1384,6 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub enum InteriorSafety {\n-    InteriorUnsafe,\n-    InteriorSafe\n-}\n-\n #[derive(Clone, Debug)]\n pub enum Aliasability {\n     FreelyAliasable(AliasableReason),\n@@ -1404,8 +1397,8 @@ pub enum AliasableReason {\n     AliasableClosure(ast::NodeId), // Aliasable due to capture Fn closure env\n     AliasableOther,\n     UnaliasableImmutable, // Created as needed upon seeing ImmutableUnique\n-    AliasableStatic(InteriorSafety),\n-    AliasableStaticMut(InteriorSafety),\n+    AliasableStatic,\n+    AliasableStaticMut,\n }\n \n impl<'tcx> cmt_<'tcx> {\n@@ -1469,16 +1462,10 @@ impl<'tcx> cmt_<'tcx> {\n             }\n \n             cat_static_item(..) => {\n-                let int_safe = if ty::type_interior_is_unsafe(ctxt, self.ty) {\n-                    InteriorUnsafe\n-                } else {\n-                    InteriorSafe\n-                };\n-\n                 if self.mutbl.is_mutable() {\n-                    FreelyAliasable(AliasableStaticMut(int_safe))\n+                    FreelyAliasable(AliasableStaticMut)\n                 } else {\n-                    FreelyAliasable(AliasableStatic(int_safe))\n+                    FreelyAliasable(AliasableStatic)\n                 }\n             }\n "}, {"sha": "f5fcb72c5c1c9ccff7f57462b39da4ce0734a987", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5f2b098d7747863b1e647e024777e4baa4907a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f2b098d7747863b1e647e024777e4baa4907a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b5f2b098d7747863b1e647e024777e4baa4907a9", "patch": "@@ -3787,10 +3787,6 @@ impl fmt::Debug for TypeContents {\n     }\n }\n \n-pub fn type_interior_is_unsafe<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    type_contents(cx, ty).interior_unsafe()\n-}\n-\n pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n     return memoized(&cx.tc_cache, ty, |ty| {\n         tc_ty(cx, ty, &mut FnvHashMap())"}, {"sha": "012e01507de72ba10a8de9f761b5be5770025c1e", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5f2b098d7747863b1e647e024777e4baa4907a9/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f2b098d7747863b1e647e024777e4baa4907a9/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=b5f2b098d7747863b1e647e024777e4baa4907a9", "patch": "@@ -191,23 +191,11 @@ fn check_aliasability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             /* Uniquely accessible path -- OK for `&` and `&mut` */\n             Ok(())\n         }\n-        (mc::Aliasability::FreelyAliasable(mc::AliasableStatic(safety)), ty::ImmBorrow) => {\n-            // Borrow of an immutable static item:\n-            match safety {\n-                mc::InteriorUnsafe => {\n-                    // If the static item contains an Unsafe<T>, it has interior\n-                    // mutability.  In such cases, another phase of the compiler\n-                    // will ensure that the type is `Sync` and then trans will\n-                    // not put it in rodata, so this is ok to allow.\n-                    Ok(())\n-                }\n-                mc::InteriorSafe => {\n-                    // Immutable static can be borrowed, no problem.\n-                    Ok(())\n-                }\n-            }\n+        (mc::Aliasability::FreelyAliasable(mc::AliasableStatic), ty::ImmBorrow) => {\n+            // Borrow of an immutable static item.\n+            Ok(())\n         }\n-        (mc::Aliasability::FreelyAliasable(mc::AliasableStaticMut(..)), _) => {\n+        (mc::Aliasability::FreelyAliasable(mc::AliasableStaticMut), _) => {\n             // Even touching a static mut is considered unsafe. We assume the\n             // user knows what they're doing in these cases.\n             Ok(())"}]}