{"sha": "c099cfab061e8464141a1cf85c2bd09536a311d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOTljZmFiMDYxZTg0NjQxNDFhMWNmODVjMmJkMDk1MzZhMzExZDA=", "commit": {"author": {"name": "Sebastian Wicki", "email": "gandro@gmx.net", "date": "2015-09-21T17:16:24Z"}, "committer": {"name": "Sebastian Wicki", "email": "gandro@gmx.net", "date": "2015-09-26T12:10:14Z"}, "message": "Add support for the rumprun unikernel\n\nFor most parts, rumprun currently looks like NetBSD, as they share the same\nlibc and drivers. However, being a unikernel, rumprun does not support\nprocess management, signals or virtual memory, so related functions\nmight fail at runtime. Stack guards are disabled exactly for this reason.\n\nCode for rumprun is always cross-compiled, it uses always static\nlinking and needs a custom linker.", "tree": {"sha": "89bc6399b93b16084fd2999991e6d3df6fda1e10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89bc6399b93b16084fd2999991e6d3df6fda1e10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c099cfab061e8464141a1cf85c2bd09536a311d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c099cfab061e8464141a1cf85c2bd09536a311d0", "html_url": "https://github.com/rust-lang/rust/commit/c099cfab061e8464141a1cf85c2bd09536a311d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c099cfab061e8464141a1cf85c2bd09536a311d0/comments", "author": {"login": "gandro", "id": 50564, "node_id": "MDQ6VXNlcjUwNTY0", "avatar_url": "https://avatars.githubusercontent.com/u/50564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gandro", "html_url": "https://github.com/gandro", "followers_url": "https://api.github.com/users/gandro/followers", "following_url": "https://api.github.com/users/gandro/following{/other_user}", "gists_url": "https://api.github.com/users/gandro/gists{/gist_id}", "starred_url": "https://api.github.com/users/gandro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gandro/subscriptions", "organizations_url": "https://api.github.com/users/gandro/orgs", "repos_url": "https://api.github.com/users/gandro/repos", "events_url": "https://api.github.com/users/gandro/events{/privacy}", "received_events_url": "https://api.github.com/users/gandro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gandro", "id": 50564, "node_id": "MDQ6VXNlcjUwNTY0", "avatar_url": "https://avatars.githubusercontent.com/u/50564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gandro", "html_url": "https://github.com/gandro", "followers_url": "https://api.github.com/users/gandro/followers", "following_url": "https://api.github.com/users/gandro/following{/other_user}", "gists_url": "https://api.github.com/users/gandro/gists{/gist_id}", "starred_url": "https://api.github.com/users/gandro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gandro/subscriptions", "organizations_url": "https://api.github.com/users/gandro/orgs", "repos_url": "https://api.github.com/users/gandro/repos", "events_url": "https://api.github.com/users/gandro/events{/privacy}", "received_events_url": "https://api.github.com/users/gandro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7", "html_url": "https://github.com/rust-lang/rust/commit/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7"}], "stats": {"total": 91, "additions": 85, "deletions": 6}, "files": [{"sha": "fa2117dcc1d3d0de1ad757e1fdbda41361b36aeb", "filename": "configure", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c099cfab061e8464141a1cf85c2bd09536a311d0/configure", "raw_url": "https://github.com/rust-lang/rust/raw/c099cfab061e8464141a1cf85c2bd09536a311d0/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=c099cfab061e8464141a1cf85c2bd09536a311d0", "patch": "@@ -1295,6 +1295,12 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n             putvar CFG_MSVC_LIB_PATH_${bits}\n             ;;\n \n+        *-rumprun-netbsd)\n+            step_msg \"targeting rumprun-netbsd, disabling jemalloc\"\n+            CFG_DISABLE_JEMALLOC=1\n+            putvar CFG_DISABLE_JEMALLOC\n+            ;;\n+\n         *)\n             ;;\n     esac"}, {"sha": "5894805e3e5c9e2aaf50063bee68f4275686c4fb", "filename": "mk/cfg/x86_64-rumprun-netbsd.mk", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c099cfab061e8464141a1cf85c2bd09536a311d0/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c099cfab061e8464141a1cf85c2bd09536a311d0/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk?ref=c099cfab061e8464141a1cf85c2bd09536a311d0", "patch": "@@ -0,0 +1,24 @@\n+# x86_64-rumprun-netbsd configuration\n+CROSS_PREFIX_x86_64-rumprun-netbsd=x86_64-rumprun-netbsd-\n+CC_x86_64-rumprun-netbsd=gcc\n+CXX_x86_64-rumprun-netbsd=g++\n+CPP_x86_64-rumprun-netbsd=gcc -E\n+AR_x86_64-rumprun-netbsd=ar\n+CFG_INSTALL_ONLY_RLIB_x86_64-rumprun-netbsd = 1\n+CFG_LIB_NAME_x86_64-rumprun-netbsd=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-rumprun-netbsd=lib$(1).a\n+CFG_LIB_GLOB_x86_64-rumprun-netbsd=lib$(1)-*.so\n+CFG_JEMALLOC_CFLAGS_x86_64-rumprun-netbsd := -m64\n+CFG_GCCISH_CFLAGS_x86_64-rumprun-netbsd := -Wall -Werror -g -fPIC -m64\n+CFG_GCCISH_CXXFLAGS_x86_64-rumprun-netbsd :=\n+CFG_GCCISH_LINK_FLAGS_x86_64-rumprun-netbsd :=\n+CFG_GCCISH_DEF_FLAG_x86_64-rumprun-netbsd :=\n+CFG_LLC_FLAGS_x86_64-rumprun-netbsd :=\n+CFG_INSTALL_NAME_x86_64-rumprun-netbsd =\n+CFG_EXE_SUFFIX_x86_64-rumprun-netbsd =\n+CFG_WINDOWSY_x86_64-rumprun-netbsd :=\n+CFG_UNIXY_x86_64-rumprun-netbsd := 1\n+CFG_LDPATH_x86_64-rumprun-netbsd :=\n+CFG_RUN_x86_64-rumprun-netbsd=$(2)\n+CFG_RUN_TARG_x86_64-rumprun-netbsd=$(call CFG_RUN_x86_64-rumprun-netbsd,,$(2))\n+CFG_GNU_TRIPLE_x86_64-rumprun-netbsd := x86_64-rumprun-netbsd"}, {"sha": "f75851506c279959b4a19a50ba3698e4bffbbbfd", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=c099cfab061e8464141a1cf85c2bd09536a311d0", "patch": "@@ -24,6 +24,7 @@\n        html_playground_url = \"https://play.rust-lang.org/\",\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n #![cfg_attr(test, feature(test))]\n+#![feature(cfg_target_vendor)]\n \n //! Bindings for the C standard library and other platform libraries\n //!\n@@ -143,7 +144,10 @@ pub use funcs::bsd43::*;\n \n // On NaCl, these libraries are static. Thus it would be a Bad Idea to link them\n // in when creating a test crate.\n-#[cfg(not(any(windows, target_env = \"musl\", all(target_os = \"nacl\", test))))]\n+#[cfg(not(any(windows,\n+              target_env = \"musl\",\n+              all(target_os = \"nacl\", test),\n+              all(target_os = \"netbsd\", target_vendor = \"rumprun\"))))]\n #[link(name = \"c\")]\n #[link(name = \"m\")]\n extern {}"}, {"sha": "be404fc97ce080edb7b280138ae6602cae835c83", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=c099cfab061e8464141a1cf85c2bd09536a311d0", "patch": "@@ -411,6 +411,7 @@ impl Target {\n             x86_64_unknown_bitrig,\n             x86_64_unknown_openbsd,\n             x86_64_unknown_netbsd,\n+            x86_64_rumprun_netbsd,\n \n             x86_64_apple_darwin,\n             i686_apple_darwin,"}, {"sha": "d63ad53cc2bb9d9904cb7a013129e15345457a1b", "filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs?ref=c099cfab061e8464141a1cf85c2bd09536a311d0", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::netbsd_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+    base.linker = \"x86_64-rumprun-netbsd-gcc\".to_string();\n+    base.ar = \"x86_64-rumprun-netbsd-ar\".to_string();\n+\n+    base.dynamic_linking = false;\n+    base.has_rpath = false;\n+    base.position_independent_executables = false;\n+    base.disable_redzone = true;\n+    base.no_default_libraries = false;\n+\n+    Target {\n+        llvm_target: \"x86_64-rumprun-netbsd\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"netbsd\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"rumprun\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "9129ffcc211820697a50c71db0cb105ed350a12f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c099cfab061e8464141a1cf85c2bd09536a311d0", "patch": "@@ -204,6 +204,7 @@\n #![feature(associated_consts)]\n #![feature(borrow_state)]\n #![feature(box_syntax)]\n+#![feature(cfg_target_vendor)]\n #![feature(char_from_unchecked)]\n #![feature(char_internals)]\n #![feature(clone_from_slice)]"}, {"sha": "da7ebbf4ed39f57b0f67b44a0307c9f74f2c3575", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=c099cfab061e8464141a1cf85c2bd09536a311d0", "patch": "@@ -108,10 +108,18 @@ extern {}\n #[link(name = \"unwind\", kind = \"static\")]\n extern {}\n \n-#[cfg(any(target_os = \"android\", target_os = \"netbsd\", target_os = \"openbsd\"))]\n+#[cfg(any(target_os = \"android\", target_os = \"openbsd\"))]\n #[link(name = \"gcc\")]\n extern {}\n \n+#[cfg(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")))]\n+#[link(name = \"gcc\")]\n+extern {}\n+\n+#[cfg(all(target_os = \"netbsd\", target_vendor = \"rumprun\"))]\n+#[link(name = \"unwind\")]\n+extern {}\n+\n #[cfg(target_os = \"dragonfly\")]\n #[link(name = \"gcc_pic\")]\n extern {}"}, {"sha": "f5fd11b61b1e67efef59b9c50f31075b3fc8836a", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=c099cfab061e8464141a1cf85c2bd09536a311d0", "patch": "@@ -34,7 +34,7 @@ impl Drop for Handler {\n #[cfg(any(target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"bitrig\",\n-          target_os = \"netbsd\",\n+          all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n           target_os = \"openbsd\"))]\n mod imp {\n     use super::Handler;\n@@ -143,7 +143,7 @@ mod imp {\n #[cfg(not(any(target_os = \"linux\",\n               target_os = \"macos\",\n               target_os = \"bitrig\",\n-              target_os = \"netbsd\",\n+              all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n               target_os = \"openbsd\")))]\n mod imp {\n     use ptr;"}, {"sha": "50e01ecf9fa98161e541b4d663bcffef3a178276", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c099cfab061e8464141a1cf85c2bd09536a311d0/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=c099cfab061e8464141a1cf85c2bd09536a311d0", "patch": "@@ -174,7 +174,7 @@ impl Drop for Thread {\n #[cfg(all(not(target_os = \"linux\"),\n           not(target_os = \"macos\"),\n           not(target_os = \"bitrig\"),\n-          not(target_os = \"netbsd\"),\n+          not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n           not(target_os = \"openbsd\")))]\n pub mod guard {\n     pub unsafe fn current() -> Option<usize> { None }\n@@ -185,7 +185,7 @@ pub mod guard {\n #[cfg(any(target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"bitrig\",\n-          target_os = \"netbsd\",\n+          all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n           target_os = \"openbsd\"))]\n #[allow(unused_imports)]\n pub mod guard {"}]}