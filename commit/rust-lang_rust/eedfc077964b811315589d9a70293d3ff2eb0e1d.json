{"sha": "eedfc077964b811315589d9a70293d3ff2eb0e1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZGZjMDc3OTY0YjgxMTMxNTU4OWQ5YTcwMjkzZDNmZjJlYjBlMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-25T22:36:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-25T22:36:59Z"}, "message": "auto merge of #19011 : ricky26/rust/trait_supertraits, r=nikomatsakis\n\nIt looks like currently kinds required by traits are not propagated when they are wrapped in a TyTrait. Additionally, in SelectionContext::builtin_bound, no attempt is made to check whether the target trait or its supertraits require the kind specified.\r\n\r\nThis PR alters SelectionContext::builtin_bound to examine all supertraits in the target trait's bounds recursively for required kinds.\r\n\r\nAlternatively, the kinds could be added to the TyTrait upon creation (by just setting its builtin_bounds to the union of the bounds requested in this instance and the bounds required by the trait), this option may have less overhead during compilation but information is lost about which kinds were explicitly requested for this instance (vs those specified by traits/supertraits) would be lost.", "tree": {"sha": "3202a12380087f0b09f8483f539dd0617501546e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3202a12380087f0b09f8483f539dd0617501546e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eedfc077964b811315589d9a70293d3ff2eb0e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eedfc077964b811315589d9a70293d3ff2eb0e1d", "html_url": "https://github.com/rust-lang/rust/commit/eedfc077964b811315589d9a70293d3ff2eb0e1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eedfc077964b811315589d9a70293d3ff2eb0e1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "url": "https://api.github.com/repos/rust-lang/rust/commits/689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "html_url": "https://github.com/rust-lang/rust/commit/689ef2dabfa3b2b379c953e5fb68ce2c805c2231"}, {"sha": "729bf447ab51887a8775ebc544b51f5549424b73", "url": "https://api.github.com/repos/rust-lang/rust/commits/729bf447ab51887a8775ebc544b51f5549424b73", "html_url": "https://github.com/rust-lang/rust/commit/729bf447ab51887a8775ebc544b51f5549424b73"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "d1cc851c41f20efdeaeb84ddb90bced2d6a66d5a", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eedfc077964b811315589d9a70293d3ff2eb0e1d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedfc077964b811315589d9a70293d3ff2eb0e1d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=eedfc077964b811315589d9a70293d3ff2eb0e1d", "patch": "@@ -1327,7 +1327,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::ty_trait(box ty::TyTrait { bounds, .. }) => {\n+            ty::ty_trait(box ty::TyTrait { ref principal, bounds }) => {\n                 match bound {\n                     ty::BoundSized => {\n                         Err(Unimplemented)\n@@ -1336,6 +1336,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         if bounds.builtin_bounds.contains(&bound) {\n                             Ok(If(Vec::new()))\n                         } else {\n+                            // Recursively check all supertraits to find out if any further\n+                            // bounds are required and thus we must fulfill.\n+                            // We have to create a temp trait ref here since TyTraits don't\n+                            // have actual self type info (which is required for the\n+                            // supertraits iterator).\n+                            let tmp_tr = Rc::new(ty::TraitRef {\n+                                def_id: principal.def_id,\n+                                substs: principal.substs.with_self_ty(ty::mk_err())\n+                            });\n+                            for tr in util::supertraits(self.tcx(), tmp_tr) {\n+                                let td = ty::lookup_trait_def(self.tcx(), tr.def_id);\n+\n+                                if td.bounds.builtin_bounds.contains(&bound) {\n+                                    return Ok(If(Vec::new()))\n+                                }\n+                            }\n+\n                             Err(Unimplemented)\n                         }\n                     }"}, {"sha": "053a4916e229a6c3e679b7ad607b48a7fd9d9cd9", "filename": "src/test/run-pass/issue-15155.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eedfc077964b811315589d9a70293d3ff2eb0e1d/src%2Ftest%2Frun-pass%2Fissue-15155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedfc077964b811315589d9a70293d3ff2eb0e1d/src%2Ftest%2Frun-pass%2Fissue-15155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15155.rs?ref=eedfc077964b811315589d9a70293d3ff2eb0e1d", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait TraitWithSend: Send {}\n+trait IndirectTraitWithSend: TraitWithSend {}\n+\n+// Check struct instantiation (Box<TraitWithSend> will only have Send if TraitWithSend has Send)\n+#[allow(dead_code)]\n+struct Blah { x: Box<TraitWithSend> }\n+impl TraitWithSend for Blah {}\n+\n+// Struct instantiation 2-levels deep\n+#[allow(dead_code)]\n+struct IndirectBlah { x: Box<IndirectTraitWithSend> }\n+impl TraitWithSend for IndirectBlah {}\n+impl IndirectTraitWithSend for IndirectBlah {}\n+\n+fn test_trait<Sized? T: Send>() { println!(\"got here!\") }\n+\n+fn main() {\n+    test_trait::<TraitWithSend>();\n+    test_trait::<IndirectTraitWithSend>();\n+}\n+\n+"}]}