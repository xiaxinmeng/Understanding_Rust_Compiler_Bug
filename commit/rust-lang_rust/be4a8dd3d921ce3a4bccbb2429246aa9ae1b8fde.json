{"sha": "be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNGE4ZGQzZDkyMWNlM2E0YmNjYmIyNDI5MjQ2YWE5YWUxYjhmZGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-16T09:33:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-16T09:33:48Z"}, "message": "Merge pull request #1016 from devonhollowood/slice-iter-nth\n\nSuggest `.get()` over `.iter().nth()`", "tree": {"sha": "4942352e9492b15fff22633b05894700c7d5592f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4942352e9492b15fff22633b05894700c7d5592f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde", "html_url": "https://github.com/rust-lang/rust/commit/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fd2468b281efac77af487fcd2cd16233f66e3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fd2468b281efac77af487fcd2cd16233f66e3a", "html_url": "https://github.com/rust-lang/rust/commit/06fd2468b281efac77af487fcd2cd16233f66e3a"}, {"sha": "74025be59db10a5c8f5c0b5175b250730b4d4ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/74025be59db10a5c8f5c0b5175b250730b4d4ca6", "html_url": "https://github.com/rust-lang/rust/commit/74025be59db10a5c8f5c0b5175b250730b4d4ca6"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "790bbc04691b496e86e1c028d34130b7013cfcf0", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde", "patch": "@@ -172,6 +172,7 @@ All notable changes to this project will be documented in this file.\n [`invalid_upcast_comparisons`]: https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons\n [`items_after_statements`]: https://github.com/Manishearth/rust-clippy/wiki#items_after_statements\n [`iter_next_loop`]: https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop\n+[`iter_nth`]: https://github.com/Manishearth/rust-clippy/wiki#iter_nth\n [`len_without_is_empty`]: https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty\n [`len_zero`]: https://github.com/Manishearth/rust-clippy/wiki#len_zero\n [`let_and_return`]: https://github.com/Manishearth/rust-clippy/wiki#let_and_return"}, {"sha": "85e9ed70bf843ca52396fb0433317f73032ea040", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 152 lints included in this crate:\n+There are 153 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -78,6 +78,7 @@ name\n [invalid_upcast_comparisons](https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons)             | allow   | a comparison involving an upcast which is always true or false\n [items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                     | allow   | finds blocks where an item comes after a statement\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                     | warn    | for-looping over `_.next()` which is probably not intended\n+[iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                 | warn    | using `.iter().nth()` on a slice or Vec\n [len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                         | warn    | traits and impls that have `.len()` but not `.is_empty()`\n [len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n [let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                                     | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block"}, {"sha": "d64f653dd4cc6c74311c38339edb040cab564ac4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde", "patch": "@@ -349,6 +349,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::CLONE_ON_COPY,\n         methods::EXTEND_FROM_SLICE,\n         methods::FILTER_NEXT,\n+        methods::ITER_NTH,\n         methods::NEW_RET_NO_SELF,\n         methods::OK_EXPECT,\n         methods::OPTION_MAP_UNWRAP_OR,"}, {"sha": "da1420c3add7a15a902c367c9eca13dbd8655a24", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde", "patch": "@@ -312,6 +312,30 @@ declare_lint! {\n     \"getting the inner pointer of a temporary `CString`\"\n }\n \n+/// **What it does:** This lint checks for use of `.iter().nth()` on a slice or Vec.\n+///\n+/// **Why is this bad?** `.get()` is more efficient and more readable.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let some_vec = vec![0, 1, 2, 3];\n+/// let bad_vec = some_vec.iter().nth(3);\n+/// let bad_slice = &some_vec[..].iter().nth(3);\n+/// ```\n+/// The correct use would be:\n+/// ```rust\n+/// let some_vec = vec![0, 1, 2, 3];\n+/// let bad_vec = some_vec.get(3);\n+/// let bad_slice = &some_vec[..].get(3);\n+/// ```\n+declare_lint! {\n+    pub ITER_NTH,\n+    Warn,\n+    \"using `.iter().nth()` on a slice or Vec\"\n+}\n+\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EXTEND_FROM_SLICE,\n@@ -330,7 +354,8 @@ impl LintPass for MethodsPass {\n                     NEW_RET_NO_SELF,\n                     SINGLE_CHAR_PATTERN,\n                     SEARCH_IS_SOME,\n-                    TEMPORARY_CSTRING_AS_PTR)\n+                    TEMPORARY_CSTRING_AS_PTR,\n+                    ITER_NTH)\n     }\n }\n \n@@ -363,6 +388,8 @@ impl LateLintPass for MethodsPass {\n                     lint_extend(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"unwrap\", \"as_ptr\"]) {\n                     lint_cstring_as_ptr(cx, expr, &arglists[0][0], &arglists[1][0]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"iter\", \"nth\"]) {\n+                    lint_iter_nth(cx, expr, arglists[0]);\n                 }\n \n                 lint_or_fun_call(cx, expr, &name.node.as_str(), args);\n@@ -616,6 +643,25 @@ fn lint_cstring_as_ptr(cx: &LateContext, expr: &hir::Expr, new: &hir::Expr, unwr\n     }}\n }\n \n+#[allow(ptr_arg)]\n+// Type of MethodArgs is potentially a Vec\n+fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs){\n+    // lint if the caller of `.iter().nth()` is a `slice`\n+    if let Some(_) = derefs_to_slice(cx, &iter_args[0], &cx.tcx.expr_ty(&iter_args[0])) {\n+        span_lint(cx,\n+                  ITER_NTH,\n+                  expr.span,\n+                  \"called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\");\n+    }\n+    // lint if the caller of `.iter().nth()` is a `Vec`\n+    else if match_type(cx, cx.tcx.expr_ty(&iter_args[0]), &paths::VEC) {\n+        span_lint(cx,\n+                  ITER_NTH,\n+                  expr.span,\n+                  \"called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\");\n+    }\n+}\n+\n fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: &ty::Ty) -> Option<(Span, &'static str)> {\n     fn may_slice(cx: &LateContext, ty: &ty::Ty) -> bool {\n         match ty.sty {"}, {"sha": "811b911614309fc6c18772fa8e9845c58df939a2", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=be4a8dd3d921ce3a4bccbb2429246aa9ae1b8fde", "patch": "@@ -128,6 +128,16 @@ fn option_methods() {\n \n }\n \n+/// Struct to generate false positives for things with .iter()\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n /// Struct to generate false positive for Iterator-based lints\n #[derive(Copy, Clone)]\n struct IteratorFalsePositives {\n@@ -154,6 +164,10 @@ impl IteratorFalsePositives {\n     fn rposition(self) -> Option<u32> {\n         Some(self.foo)\n     }\n+\n+    fn nth(self, n: usize) -> Option<u32> {\n+        Some(self.foo)\n+    }\n }\n \n /// Checks implementation of `FILTER_NEXT` lint\n@@ -309,6 +323,19 @@ fn or_fun_call() {\n     //~|SUGGESTION btree.entry(42).or_insert_with(String::new);\n }\n \n+/// Checks implementation of `ITER_NTH` lint\n+fn iter_nth() {\n+    let some_vec = vec![0, 1, 2, 3];\n+    let bad_vec = some_vec.iter().nth(3);\n+    //~^ERROR called `.iter().nth()` on a Vec.\n+    let bad_slice = &some_vec[..].iter().nth(3);\n+    //~^ERROR called `.iter().nth()` on a slice.\n+\n+    let false_positive = HasIter;\n+    let ok = false_positive.iter().nth(3);\n+    // ^This should be okay, because false_positive is not a slice or Vec\n+}\n+\n #[allow(similar_names)]\n fn main() {\n     use std::io;"}]}