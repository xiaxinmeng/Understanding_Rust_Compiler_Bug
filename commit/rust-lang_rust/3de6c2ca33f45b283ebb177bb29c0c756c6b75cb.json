{"sha": "3de6c2ca33f45b283ebb177bb29c0c756c6b75cb", "node_id": "C_kwDOAAsO6NoAKDNkZTZjMmNhMzNmNDViMjgzZWJiMTc3YmIyOWMwYzc1NmM2Yjc1Y2I", "commit": {"author": {"name": "Chris Martin", "email": "marti4d@live.ca", "date": "2022-05-13T22:14:03Z"}, "committer": {"name": "Chris Martin", "email": "marti4d@live.ca", "date": "2022-05-13T22:14:03Z"}, "message": "Address review feedback", "tree": {"sha": "09229e6188c9bac63f996a6aa92256b4b20ebc3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09229e6188c9bac63f996a6aa92256b4b20ebc3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3de6c2ca33f45b283ebb177bb29c0c756c6b75cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3de6c2ca33f45b283ebb177bb29c0c756c6b75cb", "html_url": "https://github.com/rust-lang/rust/commit/3de6c2ca33f45b283ebb177bb29c0c756c6b75cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3de6c2ca33f45b283ebb177bb29c0c756c6b75cb/comments", "author": {"login": "marti4d", "id": 22406337, "node_id": "MDQ6VXNlcjIyNDA2MzM3", "avatar_url": "https://avatars.githubusercontent.com/u/22406337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marti4d", "html_url": "https://github.com/marti4d", "followers_url": "https://api.github.com/users/marti4d/followers", "following_url": "https://api.github.com/users/marti4d/following{/other_user}", "gists_url": "https://api.github.com/users/marti4d/gists{/gist_id}", "starred_url": "https://api.github.com/users/marti4d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marti4d/subscriptions", "organizations_url": "https://api.github.com/users/marti4d/orgs", "repos_url": "https://api.github.com/users/marti4d/repos", "events_url": "https://api.github.com/users/marti4d/events{/privacy}", "received_events_url": "https://api.github.com/users/marti4d/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marti4d", "id": 22406337, "node_id": "MDQ6VXNlcjIyNDA2MzM3", "avatar_url": "https://avatars.githubusercontent.com/u/22406337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marti4d", "html_url": "https://github.com/marti4d", "followers_url": "https://api.github.com/users/marti4d/followers", "following_url": "https://api.github.com/users/marti4d/following{/other_user}", "gists_url": "https://api.github.com/users/marti4d/gists{/gist_id}", "starred_url": "https://api.github.com/users/marti4d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marti4d/subscriptions", "organizations_url": "https://api.github.com/users/marti4d/orgs", "repos_url": "https://api.github.com/users/marti4d/repos", "events_url": "https://api.github.com/users/marti4d/events{/privacy}", "received_events_url": "https://api.github.com/users/marti4d/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c92519d01b30996594cc16832fc52f0702a4855", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c92519d01b30996594cc16832fc52f0702a4855", "html_url": "https://github.com/rust-lang/rust/commit/0c92519d01b30996594cc16832fc52f0702a4855"}], "stats": {"total": 53, "additions": 22, "deletions": 31}, "files": [{"sha": "836fc148986008540ac1bd211a90b9272c902462", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3de6c2ca33f45b283ebb177bb29c0c756c6b75cb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de6c2ca33f45b283ebb177bb29c0c756c6b75cb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=3de6c2ca33f45b283ebb177bb29c0c756c6b75cb", "patch": "@@ -1,9 +1,9 @@\n use crate::io;\n+use crate::lazy;\n use crate::mem;\n-use crate::sync;\n use crate::sys::c;\n \n-// The kinds of HashMap RNG that may be available\n+/// The kinds of HashMap RNG that may be available\n #[derive(Clone, Copy, Debug, PartialEq)]\n enum HashMapRng {\n     Preferred,\n@@ -16,44 +16,35 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n             preferred_rng().expect(\"couldn't generate random bytes with preferred RNG\")\n         }\n         HashMapRng::Fallback => {\n-            fallback_rng().unwrap().expect(\"couldn't generate random bytes with fallback RNG\")\n+            fallback_rng().expect(\"couldn't generate random bytes with fallback RNG\")\n         }\n     }\n }\n \n-// Returns the HashMap RNG that should be used\n-//\n-// Panics if they are both broken\n+/// Returns the HashMap RNG that should be used\n+///\n+/// Panics if they are both broken\n fn get_hashmap_rng() -> HashMapRng {\n     // Assume that if the preferred RNG is broken the first time we use it, it likely means\n     // that: the DLL has failed to load, there is no point to calling it over-and-over again,\n     // and we should cache the result\n-    static INIT: sync::Once = sync::Once::new();\n-    static mut HASHMAP_RNG: HashMapRng = HashMapRng::Preferred;\n-\n-    unsafe {\n-        INIT.call_once(|| HASHMAP_RNG = choose_hashmap_rng());\n-        HASHMAP_RNG\n-    }\n+    static VALUE: lazy::SyncOnceCell<HashMapRng> = lazy::SyncOnceCell::new();\n+    *VALUE.get_or_init(choose_hashmap_rng)\n }\n \n-// Test whether we should use the preferred or fallback RNG\n-//\n-// If the preferred RNG is successful, we choose it. Otherwise, if the fallback RNG is successful,\n-// we choose that\n-//\n-// Panics if both the preferred and the fallback RNG are both non-functional\n+/// Test whether we should use the preferred or fallback RNG\n+///\n+/// If the preferred RNG is successful, we choose it. Otherwise, if the fallback RNG is successful,\n+/// we choose that\n+///\n+/// Panics if both the preferred and the fallback RNG are both non-functional\n fn choose_hashmap_rng() -> HashMapRng {\n     let preferred_error = match preferred_rng() {\n         Ok(_) => return HashMapRng::Preferred,\n         Err(e) => e,\n     };\n \n-    // On UWP, there is no fallback\n-    let fallback_result = fallback_rng()\n-        .unwrap_or_else(|| panic!(\"preferred RNG broken: `{}`, no fallback\", preferred_error));\n-\n-    match fallback_result {\n+    match fallback_rng() {\n         Ok(_) => return HashMapRng::Fallback,\n         Err(fallback_error) => panic!(\n             \"preferred RNG broken: `{}`, fallback RNG broken: `{}`\",\n@@ -62,7 +53,7 @@ fn choose_hashmap_rng() -> HashMapRng {\n     }\n }\n \n-// Generate random numbers using the preferred RNG function (BCryptGenRandom)\n+/// Generate random numbers using the preferred RNG function (BCryptGenRandom)\n fn preferred_rng() -> Result<(u64, u64), io::Error> {\n     use crate::ptr;\n \n@@ -79,18 +70,18 @@ fn preferred_rng() -> Result<(u64, u64), io::Error> {\n     if ret == 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n }\n \n-// Generate random numbers using the fallback RNG function (RtlGenRandom)\n+/// Generate random numbers using the fallback RNG function (RtlGenRandom)\n #[cfg(not(target_vendor = \"uwp\"))]\n-fn fallback_rng() -> Option<Result<(u64, u64), io::Error>> {\n+fn fallback_rng() -> Result<(u64, u64), io::Error> {\n     let mut v = (0, 0);\n     let ret =\n         unsafe { c::RtlGenRandom(&mut v as *mut _ as *mut u8, mem::size_of_val(&v) as c::ULONG) };\n \n-    Some(if ret != 0 { Ok(v) } else { Err(io::Error::last_os_error()) })\n+    if ret != 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n }\n \n-// We can't use RtlGenRandom with UWP, so there is no fallback\n+/// We can't use RtlGenRandom with UWP, so there is no fallback\n #[cfg(target_vendor = \"uwp\")]\n-fn fallback_rng() -> Option<Result<(u64, u64), io::Error>> {\n-    None\n+fn fallback_rng() -> Result<(u64, u64), io::Error> {\n+    Err(io::const_io_error!(io::ErrorKind::Unsupported, \"unsupported on UWP\"))\n }"}]}