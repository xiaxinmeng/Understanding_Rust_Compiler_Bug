{"sha": "c18ba569dff9cdae970c49a7d63acefa2f209bda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOGJhNTY5ZGZmOWNkYWU5NzBjNDlhN2Q2M2FjZWZhMmYyMDliZGE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-30T22:56:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-30T22:56:01Z"}, "message": "Merge pull request #1889 from topecongiro/match-arm\n\nDo not put if on the same line as match arm", "tree": {"sha": "638057cb751ad8768e2d9031883b3b1516beda39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/638057cb751ad8768e2d9031883b3b1516beda39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c18ba569dff9cdae970c49a7d63acefa2f209bda", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaIIyBCRBK7hj4Ov3rIwAAdHIIACKRu2K6SOGCFxNgJST9UQeb\noqlRPoggHD4f8eX2aCoFJJGb2YveTQX8EwBvz0kHL88ZqbXXB8NhOp/u+ONVOQ9B\naT4rzoNpv6LRV81EzLMH21nrWZCksgmEsLL3etSunsYTz2vIU2jpcqmMEyAN12e9\npXrN+8s0DVEnh4MgLZBCqXxeULuJSu1tA/UI0lYx5np66M/Q5Ym5sExXL/fCAEMV\n1FFaQuPriw9zJi4x1Jie07QcRHE0Big4jNkedhdNqXKyOIw2kboTwO43xeD6m0iu\nGfq9fLA1Yoaa5L9TxgDy8Lz4OoHwGEhCgnLjE7GWVREpNHiNlmEmQBl5uhGir38=\n=IRbR\n-----END PGP SIGNATURE-----\n", "payload": "tree 638057cb751ad8768e2d9031883b3b1516beda39\nparent a6d2c5d3560ae3036f588921c9d2b23635be2243\nparent 8116e3491d4224844b0a1edf31402b1b2e982e7a\nauthor Nick Cameron <nrc@ncameron.org> 1512082561 +1300\ncommitter GitHub <noreply@github.com> 1512082561 +1300\n\nMerge pull request #1889 from topecongiro/match-arm\n\nDo not put if on the same line as match arm"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c18ba569dff9cdae970c49a7d63acefa2f209bda", "html_url": "https://github.com/rust-lang/rust/commit/c18ba569dff9cdae970c49a7d63acefa2f209bda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c18ba569dff9cdae970c49a7d63acefa2f209bda/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d2c5d3560ae3036f588921c9d2b23635be2243", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d2c5d3560ae3036f588921c9d2b23635be2243", "html_url": "https://github.com/rust-lang/rust/commit/a6d2c5d3560ae3036f588921c9d2b23635be2243"}, {"sha": "8116e3491d4224844b0a1edf31402b1b2e982e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8116e3491d4224844b0a1edf31402b1b2e982e7a", "html_url": "https://github.com/rust-lang/rust/commit/8116e3491d4224844b0a1edf31402b1b2e982e7a"}], "stats": {"total": 207, "additions": 131, "deletions": 76}, "files": [{"sha": "e6a86e04b9e24ff05df83c16eb960fb407efd903", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -94,11 +94,13 @@ fn execute() -> i32 {\n             print_usage_to_stderr(&opts, &e.to_string());\n             failure\n         }\n-        Ok(status) => if status.success() {\n-            success\n-        } else {\n-            status.code().unwrap_or(failure)\n-        },\n+        Ok(status) => {\n+            if status.success() {\n+                success\n+            } else {\n+                status.code().unwrap_or(failure)\n+            }\n+        }\n     }\n }\n "}, {"sha": "2b4665729c4c26ee9cbc5a4081294e3e85103119", "filename": "src/config.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -568,9 +568,11 @@ pub fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n             Ok(ref md) if md.is_file() => return Ok(Some(config_file)),\n             // Return the error if it's something other than `NotFound`; otherwise we didn't\n             // find the project file yet, and continue searching.\n-            Err(e) => if e.kind() != ErrorKind::NotFound {\n-                return Err(e);\n-            },\n+            Err(e) => {\n+                if e.kind() != ErrorKind::NotFound {\n+                    return Err(e);\n+                }\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "fc5d1c920255783a922f9c7d3899cc392dd1c0c2", "filename": "src/expr.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -462,18 +462,20 @@ where\n                 None => DefinitiveListTactic::Vertical,\n             }\n         }\n-        IndentStyle::Visual => if has_long_item || items.iter().any(ListItem::is_multiline) {\n-            definitive_tactic(\n-                &items,\n-                ListTactic::LimitedHorizontalVertical(\n-                    context.config.width_heuristics().array_width,\n-                ),\n-                Separator::Comma,\n-                nested_shape.width,\n-            )\n-        } else {\n-            DefinitiveListTactic::Mixed\n-        },\n+        IndentStyle::Visual => {\n+            if has_long_item || items.iter().any(ListItem::is_multiline) {\n+                definitive_tactic(\n+                    &items,\n+                    ListTactic::LimitedHorizontalVertical(\n+                        context.config.width_heuristics().array_width,\n+                    ),\n+                    Separator::Comma,\n+                    nested_shape.width,\n+                )\n+            } else {\n+                DefinitiveListTactic::Mixed\n+            }\n+        }\n     };\n     let ends_with_newline = tactic.ends_with_newline(context.config.indent_style());\n \n@@ -1500,8 +1502,8 @@ fn flatten_arm_body<'a>(context: &'a RewriteContext, body: &'a ast::Expr) -> (bo\n         {\n             if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n                 (\n-                    !context.config.force_multiline_blocks() && expr.can_be_overflowed(context, 1),\n-                    &**expr,\n+                    !context.config.force_multiline_blocks() && can_extend_match_arm_body(expr),\n+                    &*expr,\n                 )\n             } else {\n                 (false, &*body)\n@@ -1723,6 +1725,33 @@ fn rewrite_pat_expr(\n         .map(|expr_rw| format!(\"\\n{}{}\", nested_indent_str, expr_rw))\n }\n \n+fn can_extend_match_arm_body(body: &ast::Expr) -> bool {\n+    match body.node {\n+        // We do not allow `if` to stay on the same line, since we could easily mistake\n+        // `pat => if cond { ... }` and `pat if cond => { ... }`.\n+        ast::ExprKind::If(..) | ast::ExprKind::IfLet(..) => false,\n+        ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..)\n+        | ast::ExprKind::Match(..)\n+        | ast::ExprKind::Block(..)\n+        | ast::ExprKind::Closure(..)\n+        | ast::ExprKind::Array(..)\n+        | ast::ExprKind::Call(..)\n+        | ast::ExprKind::MethodCall(..)\n+        | ast::ExprKind::Mac(..)\n+        | ast::ExprKind::Struct(..)\n+        | ast::ExprKind::Tup(..) => true,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Cast(ref expr, _) => can_extend_match_arm_body(expr),\n+        _ => false,\n+    }\n+}\n+\n pub fn rewrite_literal(context: &RewriteContext, l: &ast::Lit, shape: Shape) -> Option<String> {\n     match l.node {\n         ast::LitKind::Str(_, ast::StrStyle::Cooked) => rewrite_string_lit(context, l.span, shape),"}, {"sha": "8bb1218f88a95e652102a999f1f490b7778bd695", "filename": "src/issues.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -190,19 +190,25 @@ impl BadIssueSeeker {\n         }\n \n         match part {\n-            NumberPart::OpenParen => if c != '(' {\n-                return IssueClassification::Bad(issue);\n-            } else {\n-                part = NumberPart::Pound;\n-            },\n-            NumberPart::Pound => if c == '#' {\n-                part = NumberPart::Number;\n-            },\n-            NumberPart::Number => if c >= '0' && c <= '9' {\n-                part = NumberPart::CloseParen;\n-            } else {\n-                return IssueClassification::Bad(issue);\n-            },\n+            NumberPart::OpenParen => {\n+                if c != '(' {\n+                    return IssueClassification::Bad(issue);\n+                } else {\n+                    part = NumberPart::Pound;\n+                }\n+            }\n+            NumberPart::Pound => {\n+                if c == '#' {\n+                    part = NumberPart::Number;\n+                }\n+            }\n+            NumberPart::Number => {\n+                if c >= '0' && c <= '9' {\n+                    part = NumberPart::CloseParen;\n+                } else {\n+                    return IssueClassification::Bad(issue);\n+                }\n+            }\n             NumberPart::CloseParen => {}\n         }\n "}, {"sha": "320c7bb1c0d1eb4ec59145ed7b567bb116413e0d", "filename": "src/items.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -550,12 +550,14 @@ impl<'a> FmtVisitor<'a> {\n                 self.block_indent,\n                 Some(one_line_width),\n             )?,\n-            ast::VariantData::Unit(..) => if let Some(ref expr) = field.node.disr_expr {\n-                let lhs = format!(\"{} =\", field.node.name);\n-                rewrite_assign_rhs(&context, lhs, &**expr, shape)?\n-            } else {\n-                field.node.name.to_string()\n-            },\n+            ast::VariantData::Unit(..) => {\n+                if let Some(ref expr) = field.node.disr_expr {\n+                    let lhs = format!(\"{} =\", field.node.name);\n+                    rewrite_assign_rhs(&context, lhs, &**expr, shape)?\n+                } else {\n+                    field.node.name.to_string()\n+                }\n+            }\n         };\n \n         let attrs_extendable = attrs_str.is_empty()\n@@ -643,11 +645,13 @@ pub fn format_impl(\n             _ if last_line_contains_single_line_comment(&result) => result.push_str(&sep),\n             BraceStyle::AlwaysNextLine => result.push_str(&sep),\n             BraceStyle::PreferSameLine => result.push(' '),\n-            BraceStyle::SameLineWhere => if !where_clause_str.is_empty() {\n-                result.push_str(&sep);\n-            } else {\n-                result.push(' ');\n-            },\n+            BraceStyle::SameLineWhere => {\n+                if !where_clause_str.is_empty() {\n+                    result.push_str(&sep);\n+                } else {\n+                    result.push(' ');\n+                }\n+            }\n         }\n \n         result.push('{');\n@@ -1039,14 +1043,16 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n                 result.push_str(&offset.to_string(context.config));\n             }\n             BraceStyle::PreferSameLine => result.push(' '),\n-            BraceStyle::SameLineWhere => if !where_clause_str.is_empty()\n-                && (!trait_items.is_empty() || result.contains('\\n'))\n-            {\n-                result.push('\\n');\n-                result.push_str(&offset.to_string(context.config));\n-            } else {\n-                result.push(' ');\n-            },\n+            BraceStyle::SameLineWhere => {\n+                if !where_clause_str.is_empty()\n+                    && (!trait_items.is_empty() || result.contains('\\n'))\n+                {\n+                    result.push('\\n');\n+                    result.push_str(&offset.to_string(context.config));\n+                } else {\n+                    result.push(' ');\n+                }\n+            }\n         }\n         result.push('{');\n "}, {"sha": "9247a75ce86b6faf473feae47c6836c2bd5d1dd9", "filename": "src/macros.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -126,11 +126,13 @@ pub fn rewrite_macro(\n \n     let macro_name = match extra_ident {\n         None => format!(\"{}!\", mac.node.path),\n-        Some(ident) => if ident == symbol::keywords::Invalid.ident() {\n-            format!(\"{}!\", mac.node.path)\n-        } else {\n-            format!(\"{}! {}\", mac.node.path, ident)\n-        },\n+        Some(ident) => {\n+            if ident == symbol::keywords::Invalid.ident() {\n+                format!(\"{}!\", mac.node.path)\n+            } else {\n+                format!(\"{}! {}\", mac.node.path, ident)\n+            }\n+        }\n     };\n \n     let style = if FORCED_BRACKET_MACROS.contains(&&macro_name[..]) {"}, {"sha": "90a47d785f03a29eede79e1ca43c082a2f66f9a3", "filename": "src/patterns.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -51,11 +51,13 @@ impl Rewrite for Pat {\n \n                 Some(format!(\"{}{}{}{}\", prefix, mut_infix, id_str, sub_pat))\n             }\n-            PatKind::Wild => if 1 <= shape.width {\n-                Some(\"_\".to_owned())\n-            } else {\n-                None\n-            },\n+            PatKind::Wild => {\n+                if 1 <= shape.width {\n+                    Some(\"_\".to_owned())\n+                } else {\n+                    None\n+                }\n+            }\n             PatKind::Range(ref lhs, ref rhs, ref end_kind) => {\n                 let infix = match *end_kind {\n                     RangeEnd::Included(RangeSyntax::DotDotDot) => \"...\","}, {"sha": "92a1adbbc8ef6d72ee03e66c9c3a097549c07a7c", "filename": "src/types.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -720,11 +720,13 @@ impl Rewrite for ast::Ty {\n                     SeparatorPlace::Back,\n                 )\n             }\n-            ast::TyKind::Infer => if shape.width >= 1 {\n-                Some(\"_\".to_owned())\n-            } else {\n-                None\n-            },\n+            ast::TyKind::Infer => {\n+                if shape.width >= 1 {\n+                    Some(\"_\".to_owned())\n+                } else {\n+                    None\n+                }\n+            }\n             ast::TyKind::BareFn(ref bare_fn) => rewrite_bare_fn(bare_fn, self.span, context, shape),\n             ast::TyKind::Never => Some(String::from(\"!\")),\n             ast::TyKind::Mac(..) => None,"}, {"sha": "2896b39b09d7b47662c2857f3228615ff699be73", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -321,10 +321,12 @@ impl<'a> FmtVisitor<'a> {\n                     attrs = &filtered_attrs;\n                 }\n             }\n-            _ => if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n-                self.push_rewrite(item.span, None);\n-                return;\n-            },\n+            _ => {\n+                if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n+                    self.push_rewrite(item.span, None);\n+                    return;\n+                }\n+            }\n         }\n \n         match item.node {"}, {"sha": "7cb4cac1d691ecde638d55c6a3293bc60dce764a", "filename": "tests/target/configs-force_multiline_block-false.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c18ba569dff9cdae970c49a7d63acefa2f209bda/tests%2Ftarget%2Fconfigs-force_multiline_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18ba569dff9cdae970c49a7d63acefa2f209bda/tests%2Ftarget%2Fconfigs-force_multiline_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-force_multiline_block-false.rs?ref=c18ba569dff9cdae970c49a7d63acefa2f209bda", "patch": "@@ -3,9 +3,11 @@\n \n fn main() {\n     match lorem {\n-        Lorem::Ipsum => if ipsum {\n-            println!(\"dolor\");\n-        },\n+        Lorem::Ipsum => {\n+            if ipsum {\n+                println!(\"dolor\");\n+            }\n+        }\n         Lorem::Dolor => println!(\"amet\"),\n     }\n }"}]}