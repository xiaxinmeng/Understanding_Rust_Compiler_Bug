{"sha": "3516d45d7c03bbecb67a468bf06fa217484b6ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MTZkNDVkN2MwM2JiZWNiNjdhNDY4YmYwNmZhMjE3NDg0YjZlY2Q=", "commit": {"author": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-21T09:44:31Z"}, "committer": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-21T09:44:31Z"}, "message": "Use `multispan_sugg`", "tree": {"sha": "c4363bb622430fc9195037ccef2453b8284d4778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4363bb622430fc9195037ccef2453b8284d4778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3516d45d7c03bbecb67a468bf06fa217484b6ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3516d45d7c03bbecb67a468bf06fa217484b6ecd", "html_url": "https://github.com/rust-lang/rust/commit/3516d45d7c03bbecb67a468bf06fa217484b6ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3516d45d7c03bbecb67a468bf06fa217484b6ecd/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "627d24c80fb998c04deba1d6169a5651e1f60ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/627d24c80fb998c04deba1d6169a5651e1f60ec2", "html_url": "https://github.com/rust-lang/rust/commit/627d24c80fb998c04deba1d6169a5651e1f60ec2"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "5fb16cc05eb632182b575feaa8b3feb4394d6d54", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3516d45d7c03bbecb67a468bf06fa217484b6ecd/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3516d45d7c03bbecb67a468bf06fa217484b6ecd/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3516d45d7c03bbecb67a468bf06fa217484b6ecd", "patch": "@@ -549,8 +549,8 @@ fn check_for_loop_range<'a, 'tcx>(\n                                        |db| {\n                         multispan_sugg(db,\n                                        \"consider using an iterator\".to_string(),\n-                                       &[(pat.span, &format!(\"({}, <item>)\", ident.node)),\n-                                         (arg.span, &format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip))]);\n+                                       vec![(pat.span, format!(\"({}, <item>)\", ident.node)),\n+                                            (arg.span, format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip))]);\n                     });\n                 } else {\n                     let repl = if starts_at_zero && take.is_empty() {\n@@ -568,7 +568,7 @@ fn check_for_loop_range<'a, 'tcx>(\n                                        |db| {\n                         multispan_sugg(db,\n                                        \"consider using an iterator\".to_string(),\n-                                       &[(pat.span, \"<item>\"), (arg.span, &repl)]);\n+                                       vec![(pat.span, \"<item>\".to_string()), (arg.span, repl)]);\n                     });\n                 }\n             }\n@@ -816,8 +816,8 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n                     let map = sugg::Sugg::hir(cx, arg, \"map\");\n                     multispan_sugg(db,\n                                    \"use the corresponding method\".into(),\n-                                   &[(pat_span, &snippet(cx, new_pat_span, kind)),\n-                                     (arg_span, &format!(\"{}.{}s{}()\", map.maybe_par(), kind, mutbl))]);\n+                                   vec![(pat_span, snippet(cx, new_pat_span, kind).into_owned()),\n+                                        (arg_span, format!(\"{}.{}s{}()\", map.maybe_par(), kind, mutbl))]);\n                 });\n             }\n         }"}, {"sha": "4666cb575efd6428b638097128c4cf96012606d1", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3516d45d7c03bbecb67a468bf06fa217484b6ecd/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3516d45d7c03bbecb67a468bf06fa217484b6ecd/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=3516d45d7c03bbecb67a468bf06fa217484b6ecd", "patch": "@@ -10,7 +10,7 @@ use syntax::ast::NodeId;\n use syntax_pos::Span;\n use syntax::errors::DiagnosticBuilder;\n use utils::{in_macro, is_self, is_copy, implements_trait, get_trait_def_id, match_type, snippet, span_lint_and_then,\n-            paths};\n+            multispan_sugg, paths};\n use std::collections::{HashSet, HashMap};\n \n /// **What it does:** Checks for functions taking arguments by value, but not consuming them in its\n@@ -55,8 +55,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n             return;\n         }\n \n-        if let FnKind::ItemFn(..) = kind {\n-        } else {\n+        if !matches!(kind, FnKind::ItemFn(..)) {\n             return;\n         }\n \n@@ -146,19 +145,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                            format!(\"&{}\", snippet(cx, input.span, \"_\")));\n                     }\n \n-                    // Suggests adding `*` to dereference the added reference.\n+                    // Suggests adding `*` to dereference the added reference if needed.\n                     if let Some(spans) = spans_need_deref.get(&defid) {\n-                        let mut spans: Vec<_> = spans.iter().cloned().collect();\n-                        spans.sort();\n-                        for (i, span) in spans.into_iter().enumerate() {\n-                            db.span_suggestion(span,\n-                                                if i == 0 {\n-                                                    \"...and dereference it here\"\n-                                                } else {\n-                                                    \"...and here\"\n-                                                },\n-                                                format!(\"*{}\", snippet(cx, span, \"<expr>\")));\n-                        }\n+                        let mut spans: Vec<_> = spans.iter().cloned()\n+                            .map(|span| (span, format!(\"*{}\", snippet(cx, span, \"<expr>\"))))\n+                            .collect();\n+                        spans.sort_by_key(|&(span, _)| span);\n+                        multispan_sugg(db, \"...and dereference it here\".to_string(), spans);\n                     }\n                 };\n "}, {"sha": "44d4963a98d3e9c8c7c55615760bf9f11ed5e9f7", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3516d45d7c03bbecb67a468bf06fa217484b6ecd/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3516d45d7c03bbecb67a468bf06fa217484b6ecd/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3516d45d7c03bbecb67a468bf06fa217484b6ecd", "patch": "@@ -573,10 +573,10 @@ pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n ///\n /// Note: in the JSON format (used by `compiletest_rs`), the help message will appear once per\n /// replacement. In human-readable format though, it only appears once before the whole suggestion.\n-pub fn multispan_sugg(db: &mut DiagnosticBuilder, help_msg: String, sugg: &[(Span, &str)]) {\n+pub fn multispan_sugg(db: &mut DiagnosticBuilder, help_msg: String, sugg: Vec<(Span, String)>) {\n     let sugg = rustc_errors::RenderSpan::Suggestion(rustc_errors::CodeSuggestion {\n         msp: MultiSpan::from_spans(sugg.iter().map(|&(span, _)| span).collect()),\n-        substitutes: sugg.iter().map(|&(_, subs)| subs.to_owned()).collect(),\n+        substitutes: sugg.into_iter().map(|(_, subs)| subs).collect(),\n     });\n \n     let sub = rustc_errors::SubDiagnostic {"}, {"sha": "5caf8017f96adf8d1f2b257512dd326cf9315b63", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3516d45d7c03bbecb67a468bf06fa217484b6ecd/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3516d45d7c03bbecb67a468bf06fa217484b6ecd/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=3516d45d7c03bbecb67a468bf06fa217484b6ecd", "patch": "@@ -53,6 +53,8 @@ fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n     let Wrapper(s) = z; // moved\n     let Wrapper(ref t) = y; // not moved\n+    let Wrapper(_) = y; // still not moved\n+\n     assert_eq!(x.0.len(), s.len());\n     println!(\"{}\", t);\n }"}, {"sha": "ded9e0aa731d2131dd457ce11492c980368937df", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3516d45d7c03bbecb67a468bf06fa217484b6ecd/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3516d45d7c03bbecb67a468bf06fa217484b6ecd/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=3516d45d7c03bbecb67a468bf06fa217484b6ecd", "patch": "@@ -69,6 +69,7 @@ help: consider taking a reference instead\n    | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n help: ...and dereference it here\n    |     let Wrapper(ref t) = *y; // not moved\n+   |     let Wrapper(_) = *y; // still not moved\n \n error: aborting due to 7 previous errors\n "}]}