{"sha": "b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYmI4YWEzZmYzYmYzMDQwZDk5NzNlZGViOTZiOGM5ZWJmODFkMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-22T06:51:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-22T06:51:13Z"}, "message": "Auto merge of #75776 - GuillaumeGomez:missing-doc-examples-lint-improvements, r=jyn514\n\nMissing doc examples lint improvements\n\nFixes #75719.\n\nTo be merged after #75718 (only the two last commits are from this PR).\n\nSince you already reviewed #75718, I'll set you as reviewer here as well. :)\n\nr? @jyn514", "tree": {"sha": "ddef790d0edb366e659fe5123c27cf3ad4b2e29e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddef790d0edb366e659fe5123c27cf3ad4b2e29e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31", "html_url": "https://github.com/rust-lang/rust/commit/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "html_url": "https://github.com/rust-lang/rust/commit/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13"}, {"sha": "7a05f13aed27c75f592c89435350c4826174316a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a05f13aed27c75f592c89435350c4826174316a", "html_url": "https://github.com/rust-lang/rust/commit/7a05f13aed27c75f592c89435350c4826174316a"}], "stats": {"total": 101, "additions": 74, "deletions": 27}, "files": [{"sha": "671e082556722e8e08ef94c0700cbc52135e6d24", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31", "patch": "@@ -3,7 +3,7 @@ use crate::config::OutputFormat;\n use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n use crate::html::markdown::{find_testable_code, ErrorCodes};\n-use crate::passes::doc_test_lints::Tests;\n+use crate::passes::doc_test_lints::{should_have_doc_example, Tests};\n use crate::passes::Pass;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n@@ -231,19 +231,6 @@ impl fold::DocFolder for CoverageCalculator {\n                 let has_docs = !i.attrs.doc_strings.is_empty();\n                 let mut tests = Tests { found_tests: 0 };\n \n-                let should_have_doc_examples = !matches!(i.inner,\n-                    clean::StructFieldItem(_)\n-                    | clean::VariantItem(_)\n-                    | clean::AssocConstItem(_, _)\n-                    | clean::AssocTypeItem(_, _)\n-                    | clean::TypedefItem(_, _)\n-                    | clean::StaticItem(_)\n-                    | clean::ConstantItem(_)\n-                    | clean::ExternCrateItem(_, _)\n-                    | clean::ImportItem(_)\n-                    | clean::PrimitiveItem(_)\n-                    | clean::KeywordItem(_)\n-                );\n                 find_testable_code(\n                     &i.attrs.doc_strings.iter().map(|d| d.as_str()).collect::<Vec<_>>().join(\"\\n\"),\n                     &mut tests,\n@@ -257,7 +244,7 @@ impl fold::DocFolder for CoverageCalculator {\n                 self.items.entry(i.source.filename.clone()).or_default().count_item(\n                     has_docs,\n                     has_doc_example,\n-                    should_have_doc_examples,\n+                    should_have_doc_example(&i.inner),\n                 );\n             }\n         }"}, {"sha": "a465a5f681f5c16e5e1da949b604aa7757e0b846", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31", "patch": "@@ -4,6 +4,7 @@\n //! - PRIVATE_DOC_TESTS: this looks for private items with doc-tests.\n \n use super::{span_of_attrs, Pass};\n+use crate::clean;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n@@ -59,6 +60,22 @@ impl crate::test::Tester for Tests {\n     }\n }\n \n+pub fn should_have_doc_example(item_kind: &clean::ItemEnum) -> bool {\n+    !matches!(item_kind,\n+        clean::StructFieldItem(_)\n+        | clean::VariantItem(_)\n+        | clean::AssocConstItem(_, _)\n+        | clean::AssocTypeItem(_, _)\n+        | clean::TypedefItem(_, _)\n+        | clean::StaticItem(_)\n+        | clean::ConstantItem(_)\n+        | clean::ExternCrateItem(_, _)\n+        | clean::ImportItem(_)\n+        | clean::PrimitiveItem(_)\n+        | clean::KeywordItem(_)\n+    )\n+}\n+\n pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     let hir_id = match cx.as_local_hir_id(item.def_id) {\n         Some(hir_id) => hir_id,\n@@ -73,13 +90,7 @@ pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n \n     if tests.found_tests == 0 {\n-        use ItemEnum::*;\n-\n-        let should_report = match item.inner {\n-            ExternCrateItem(_, _) | ImportItem(_) | PrimitiveItem(_) | KeywordItem(_) => false,\n-            _ => true,\n-        };\n-        if should_report {\n+        if should_have_doc_example(&item.inner) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n             let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n             cx.tcx.struct_span_lint_hir("}, {"sha": "ebe7a242211bf50aa9dbbba4e00709068516a0b7", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs?ref=b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31", "patch": "@@ -38,3 +38,34 @@ pub mod module3 {\n   //~^ ERROR\n   pub fn test() {}\n }\n+\n+/// Doc, but no code example and it's fine!\n+pub const Const: u32 = 0;\n+/// Doc, but no code example and it's fine!\n+pub static Static: u32 = 0;\n+/// Doc, but no code example and it's fine!\n+pub type Type = u32;\n+\n+/// Doc\n+//~^ ERROR\n+pub struct Struct {\n+    /// Doc, but no code example and it's fine!\n+    pub field: u32,\n+}\n+\n+/// Doc\n+//~^ ERROR\n+pub enum Enum {\n+    /// Doc, but no code example and it's fine!\n+    X,\n+}\n+\n+/// Doc\n+//~^ ERROR\n+#[repr(C)]\n+union Union {\n+    /// Doc, but no code example and it's fine!\n+    a: i32,\n+    /// Doc, but no code example and it's fine!\n+    b: f32,\n+}"}, {"sha": "32756c99e7f9fde9822c46b2829ebdb58a872eb9", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr?ref=b1bb8aa3ff3bf3040d9973edeb96b8c9ebf81d31", "patch": "@@ -1,21 +1,39 @@\n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:19:1\n+  --> $DIR/lint-missing-doc-code-example.rs:49:1\n    |\n-LL | / mod module1 {\n-LL | | }\n-   | |_^\n+LL | /// Doc\n+   | ^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-missing-doc-code-example.rs:2:9\n    |\n LL | #![deny(missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: missing code example in this documentation\n+  --> $DIR/lint-missing-doc-code-example.rs:63:1\n+   |\n+LL | /// Doc\n+   | ^^^^^^^\n+\n+error: missing code example in this documentation\n+  --> $DIR/lint-missing-doc-code-example.rs:56:1\n+   |\n+LL | /// Doc\n+   | ^^^^^^^\n+\n+error: missing code example in this documentation\n+  --> $DIR/lint-missing-doc-code-example.rs:19:1\n+   |\n+LL | / mod module1 {\n+LL | | }\n+   | |_^\n+\n error: missing code example in this documentation\n   --> $DIR/lint-missing-doc-code-example.rs:37:3\n    |\n LL |   /// doc\n    |   ^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 5 previous errors\n "}]}