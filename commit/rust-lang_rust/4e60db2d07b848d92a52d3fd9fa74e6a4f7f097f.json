{"sha": "4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "node_id": "C_kwDOAAsO6NoAKDRlNjBkYjJkMDdiODQ4ZDkyYTUyZDNmZDlmYTc0ZTZhNGY3ZjA5N2Y", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-24T10:04:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-26T07:26:47Z"}, "message": "feat: Downmap tokens inside derive helpers", "tree": {"sha": "428ef70a748e9672ef145924e25ac5154f368386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/428ef70a748e9672ef145924e25ac5154f368386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "html_url": "https://github.com/rust-lang/rust/commit/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "html_url": "https://github.com/rust-lang/rust/commit/7ba94a89e9bb6e848077859a9603a2f9a50c03c7"}], "stats": {"total": 226, "additions": 151, "deletions": 75}, "files": [{"sha": "579f803ea193ac94b3f4f998955e9cbf5a44ccc2", "filename": "crates/hir-def/src/item_scope.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs?ref=4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "patch": "@@ -66,10 +66,14 @@ pub struct ItemScope {\n     attr_macros: FxHashMap<AstId<ast::Item>, MacroCallId>,\n     /// The derive macro invocations in this scope, keyed by the owner item over the actual derive attributes\n     /// paired with the derive macro invocations for the specific attribute.\n-    derive_macros: FxHashMap<\n-        AstId<ast::Adt>,\n-        SmallVec<[(AttrId, MacroCallId, SmallVec<[Option<MacroCallId>; 1]>); 1]>,\n-    >,\n+    derive_macros: FxHashMap<AstId<ast::Adt>, SmallVec<[DeriveMacroInvocation; 1]>>,\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct DeriveMacroInvocation {\n+    attr_id: AttrId,\n+    attr_call_id: MacroCallId,\n+    derive_call_ids: SmallVec<[Option<MacroCallId>; 1]>,\n }\n \n pub(crate) static BUILTIN_SCOPE: Lazy<FxHashMap<Name, PerNs>> = Lazy::new(|| {\n@@ -210,12 +214,14 @@ impl ItemScope {\n         &mut self,\n         adt: AstId<ast::Adt>,\n         call: MacroCallId,\n-        attr_id: AttrId,\n+        id: AttrId,\n         idx: usize,\n     ) {\n         if let Some(derives) = self.derive_macros.get_mut(&adt) {\n-            if let Some((.., invocs)) = derives.iter_mut().find(|&&mut (id, ..)| id == attr_id) {\n-                invocs[idx] = Some(call);\n+            if let Some(DeriveMacroInvocation { derive_call_ids, .. }) =\n+                derives.iter_mut().find(|&&mut DeriveMacroInvocation { attr_id, .. }| id == attr_id)\n+            {\n+                derive_call_ids[idx] = Some(call);\n             }\n         }\n     }\n@@ -227,10 +233,14 @@ impl ItemScope {\n         &mut self,\n         adt: AstId<ast::Adt>,\n         attr_id: AttrId,\n-        call_id: MacroCallId,\n+        attr_call_id: MacroCallId,\n         len: usize,\n     ) {\n-        self.derive_macros.entry(adt).or_default().push((attr_id, call_id, smallvec![None; len]));\n+        self.derive_macros.entry(adt).or_default().push(DeriveMacroInvocation {\n+            attr_id,\n+            attr_call_id,\n+            derive_call_ids: smallvec![None; len],\n+        });\n     }\n \n     pub(crate) fn derive_macro_invocs(\n@@ -242,7 +252,12 @@ impl ItemScope {\n         ),\n     > + '_ {\n         self.derive_macros.iter().map(|(k, v)| {\n-            (*k, v.iter().map(|&(attr_id, call_id, ref invocs)| (attr_id, call_id, &**invocs)))\n+            (\n+                *k,\n+                v.iter().map(|DeriveMacroInvocation { attr_id, attr_call_id, derive_call_ids }| {\n+                    (*attr_id, *attr_call_id, &**derive_call_ids)\n+                }),\n+            )\n         })\n     }\n "}, {"sha": "8165055e09249b6cfee28d6f96ec7afaeca81482", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "patch": "@@ -57,10 +57,10 @@ mod proc_macro;\n #[cfg(test)]\n mod tests;\n \n-use std::{cmp::Ord, sync::Arc};\n+use std::{ops::Deref, sync::Arc};\n \n use base_db::{CrateId, Edition, FileId};\n-use hir_expand::{name::Name, InFile, MacroDefId};\n+use hir_expand::{name::Name, InFile, MacroCallId, MacroDefId};\n use itertools::Itertools;\n use la_arena::Arena;\n use profile::Count;\n@@ -106,6 +106,9 @@ pub struct DefMap {\n     fn_proc_macro_mapping: FxHashMap<FunctionId, ProcMacroId>,\n     /// The error that occurred when failing to load the proc-macro dll.\n     proc_macro_loading_error: Option<Box<str>>,\n+    /// Tracks which custom derives are in scope for an item, to allow resolution of derive helper\n+    /// attributes.\n+    derive_helpers_in_scope: FxHashMap<AstId<ast::Item>, Vec<(Name, MacroCallId)>>,\n \n     /// Custom attributes registered with `#![register_attr]`.\n     registered_attrs: Vec<SmolStr>,\n@@ -275,6 +278,7 @@ impl DefMap {\n             exported_derives: FxHashMap::default(),\n             fn_proc_macro_mapping: FxHashMap::default(),\n             proc_macro_loading_error: None,\n+            derive_helpers_in_scope: FxHashMap::default(),\n             prelude: None,\n             root,\n             modules,\n@@ -294,19 +298,27 @@ impl DefMap {\n     pub fn modules(&self) -> impl Iterator<Item = (LocalModuleId, &ModuleData)> + '_ {\n         self.modules.iter()\n     }\n+\n+    pub fn derive_helpers_in_scope(&self, id: AstId<ast::Adt>) -> Option<&[(Name, MacroCallId)]> {\n+        self.derive_helpers_in_scope.get(&id.map(|it| it.upcast())).map(Deref::deref)\n+    }\n+\n     pub fn registered_tools(&self) -> &[SmolStr] {\n         &self.registered_tools\n     }\n+\n     pub fn registered_attrs(&self) -> &[SmolStr] {\n         &self.registered_attrs\n     }\n+\n     pub fn root(&self) -> LocalModuleId {\n         self.root\n     }\n \n     pub fn fn_as_proc_macro(&self, id: FunctionId) -> Option<ProcMacroId> {\n         self.fn_proc_macro_mapping.get(&id).copied()\n     }\n+\n     pub fn proc_macro_loading_error(&self) -> Option<&str> {\n         self.proc_macro_loading_error.as_deref()\n     }\n@@ -467,6 +479,7 @@ impl DefMap {\n             registered_attrs,\n             registered_tools,\n             fn_proc_macro_mapping,\n+            derive_helpers_in_scope,\n             proc_macro_loading_error: _,\n             block: _,\n             edition: _,\n@@ -483,6 +496,7 @@ impl DefMap {\n         registered_attrs.shrink_to_fit();\n         registered_tools.shrink_to_fit();\n         fn_proc_macro_mapping.shrink_to_fit();\n+        derive_helpers_in_scope.shrink_to_fit();\n         for (_, module) in modules.iter_mut() {\n             module.children.shrink_to_fit();\n             module.scope.shrink_to_fit();"}, {"sha": "e14d29952dd79eb25d90f7ef4b0816f87c039a86", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "patch": "@@ -110,7 +110,6 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         proc_macros,\n         from_glob_import: Default::default(),\n         skip_attrs: Default::default(),\n-        derive_helpers_in_scope: Default::default(),\n         is_proc_macro,\n     };\n     if tree_id.is_block() {\n@@ -258,9 +257,6 @@ struct DefCollector<'a> {\n     /// This also stores the attributes to skip when we resolve derive helpers and non-macro\n     /// non-builtin attributes in general.\n     skip_attrs: FxHashMap<InFile<ModItem>, AttrId>,\n-    /// Tracks which custom derives are in scope for an item, to allow resolution of derive helper\n-    /// attributes.\n-    derive_helpers_in_scope: FxHashMap<AstId<ast::Item>, Vec<Name>>,\n }\n \n impl DefCollector<'_> {\n@@ -1132,8 +1128,8 @@ impl DefCollector<'_> {\n                     };\n \n                     if let Some(ident) = path.as_ident() {\n-                        if let Some(helpers) = self.derive_helpers_in_scope.get(&ast_id) {\n-                            if helpers.contains(ident) {\n+                        if let Some(helpers) = self.def_map.derive_helpers_in_scope.get(&ast_id) {\n+                            if helpers.iter().any(|(it, _)| it == ident) {\n                                 cov_mark::hit!(resolved_derive_helper);\n                                 // Resolved to derive helper. Collect the item's attributes again,\n                                 // starting after the derive helper.\n@@ -1322,10 +1318,11 @@ impl DefCollector<'_> {\n             if loc.def.krate != self.def_map.krate {\n                 let def_map = self.db.crate_def_map(loc.def.krate);\n                 if let Some(helpers) = def_map.exported_derives.get(&loc.def) {\n-                    self.derive_helpers_in_scope\n+                    self.def_map\n+                        .derive_helpers_in_scope\n                         .entry(ast_id.map(|it| it.upcast()))\n                         .or_default()\n-                        .extend(helpers.iter().cloned());\n+                        .extend(helpers.iter().cloned().zip(std::iter::repeat(macro_call_id)));\n                 }\n             }\n         }\n@@ -2140,7 +2137,6 @@ mod tests {\n             proc_macros: Default::default(),\n             from_glob_import: Default::default(),\n             skip_attrs: Default::default(),\n-            derive_helpers_in_scope: Default::default(),\n             is_proc_macro: false,\n         };\n         collector.seed_with_top_level();"}, {"sha": "0c1ae8a064a3d9f95f8570620712e5eb10202851", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "patch": "@@ -448,10 +448,14 @@ impl Resolver {\n     }\n \n     pub fn krate(&self) -> CrateId {\n+        self.def_map().krate()\n+    }\n+\n+    pub fn def_map(&self) -> &DefMap {\n         self.scopes\n             .get(0)\n             .and_then(|scope| match scope {\n-                Scope::ModuleScope(m) => Some(m.def_map.krate()),\n+                Scope::ModuleScope(m) => Some(&m.def_map),\n                 _ => None,\n             })\n             .expect(\"module scope invariant violated\")"}, {"sha": "218e15989ad33f831913077aa63f05e3d4f2491c", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 82, "deletions": 50, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "patch": "@@ -733,6 +733,8 @@ impl<'db> SemanticsImpl<'db> {\n             Some(it) => it,\n             None => return,\n         };\n+        let def_map = sa.resolver.def_map();\n+\n         let mut stack: SmallVec<[_; 4]> = smallvec![InFile::new(sa.file_id, token)];\n         let mut cache = self.expansion_info_cache.borrow_mut();\n         let mut mcache = self.macro_call_cache.borrow_mut();\n@@ -764,7 +766,7 @@ impl<'db> SemanticsImpl<'db> {\n         while let Some(token) = stack.pop() {\n             self.db.unwind_if_cancelled();\n             let was_not_remapped = (|| {\n-                // are we inside an attribute macro call\n+                // First expand into attribute invocations\n                 let containing_attribute_macro_call = self.with_ctx(|ctx| {\n                     token.value.parent_ancestors().filter_map(ast::Item::cast).find_map(|item| {\n                         if item.attrs().next().is_none() {\n@@ -784,53 +786,19 @@ impl<'db> SemanticsImpl<'db> {\n                     );\n                 }\n \n-                // or are we inside a function-like macro call\n-                if let Some(tt) =\n-                    // FIXME replace map.while_some with take_while once stable\n-                    token\n-                        .value\n-                        .parent_ancestors()\n-                        .map(ast::TokenTree::cast)\n-                        .while_some()\n-                        .last()\n-                {\n-                    let parent = tt.syntax().parent()?;\n-                    // check for derive attribute here\n-                    let macro_call = match_ast! {\n-                        match parent {\n-                            ast::MacroCall(mcall) => mcall,\n-                            // attribute we failed expansion for earlier, this might be a derive invocation\n-                            // so try downmapping the token into the pseudo derive expansion\n-                            // see [hir_expand::builtin_attr_macro] for how the pseudo derive expansion works\n-                            ast::Meta(meta) => {\n-                                let attr = meta.parent_attr()?;\n-                                let adt = attr.syntax().parent().and_then(ast::Adt::cast)?;\n-                                let call_id = self.with_ctx(|ctx| {\n-                                    let (_, call_id, _) = ctx.attr_to_derive_macro_call(\n-                                        token.with_value(&adt),\n-                                        token.with_value(attr),\n-                                    )?;\n-                                    Some(call_id)\n-                                })?;\n-                                let file_id = call_id.as_file();\n-                                return process_expansion_for_token(\n-                                    &mut stack,\n-                                    file_id,\n-                                    Some(adt.into()),\n-                                    token.as_ref(),\n-                                );\n-                            },\n-                            _ => return None,\n-                        }\n-                    };\n+                // Then check for token trees, that means we are either in a function-like macro or\n+                // secondary attribute inputs\n+                let tt = token.value.parent_ancestors().map_while(ast::TokenTree::cast).last()?;\n+                let parent = tt.syntax().parent()?;\n \n-                    if tt.left_delimiter_token().map_or(false, |it| it == token.value) {\n-                        return None;\n-                    }\n-                    if tt.right_delimiter_token().map_or(false, |it| it == token.value) {\n-                        return None;\n-                    }\n+                if tt.left_delimiter_token().map_or(false, |it| it == token.value) {\n+                    return None;\n+                }\n+                if tt.right_delimiter_token().map_or(false, |it| it == token.value) {\n+                    return None;\n+                }\n \n+                if let Some(macro_call) = ast::MacroCall::cast(parent.clone()) {\n                     let mcall = token.with_value(macro_call);\n                     let file_id = match mcache.get(&mcall) {\n                         Some(&it) => it,\n@@ -840,11 +808,75 @@ impl<'db> SemanticsImpl<'db> {\n                             it\n                         }\n                     };\n-                    return process_expansion_for_token(&mut stack, file_id, None, token.as_ref());\n+                    process_expansion_for_token(&mut stack, file_id, None, token.as_ref())\n+                } else if let Some(meta) = ast::Meta::cast(parent.clone()) {\n+                    // attribute we failed expansion for earlier, this might be a derive invocation\n+                    // or derive helper attribute\n+                    let attr = meta.parent_attr()?;\n+\n+                    let adt = if let Some(adt) = attr.syntax().parent().and_then(ast::Adt::cast) {\n+                        // this might be a derive, or a derive helper on an ADT\n+                        let derive_call = self.with_ctx(|ctx| {\n+                            // so try downmapping the token into the pseudo derive expansion\n+                            // see [hir_expand::builtin_attr_macro] for how the pseudo derive expansion works\n+                            ctx.attr_to_derive_macro_call(\n+                                token.with_value(&adt),\n+                                token.with_value(attr.clone()),\n+                            )\n+                            .map(|(_, call_id, _)| call_id)\n+                        });\n+\n+                        match derive_call {\n+                            Some(call_id) => {\n+                                // resolved to a derive\n+                                let file_id = call_id.as_file();\n+                                return process_expansion_for_token(\n+                                    &mut stack,\n+                                    file_id,\n+                                    Some(adt.into()),\n+                                    token.as_ref(),\n+                                );\n+                            }\n+                            None => Some(adt),\n+                        }\n+                    } else {\n+                        // Otherwise this could be a derive helper on a variant or field\n+                        if let Some(field) = attr.syntax().parent().and_then(ast::RecordField::cast)\n+                        {\n+                            field.syntax().ancestors().take(4).find_map(ast::Adt::cast)\n+                        } else if let Some(field) =\n+                            attr.syntax().parent().and_then(ast::TupleField::cast)\n+                        {\n+                            field.syntax().ancestors().take(4).find_map(ast::Adt::cast)\n+                        } else if let Some(variant) =\n+                            attr.syntax().parent().and_then(ast::Variant::cast)\n+                        {\n+                            variant.syntax().ancestors().nth(2).and_then(ast::Adt::cast)\n+                        } else {\n+                            None\n+                        }\n+                    }?;\n+\n+                    // Not an attribute, nor a derive, so it's either a builtin or a derive helper\n+                    // Try to resolve to a derive helper and downmap\n+                    let attr_name = attr.path().and_then(|it| it.as_single_name_ref())?.as_name();\n+                    let id = self.db.ast_id_map(token.file_id).ast_id(&adt);\n+                    let helpers =\n+                        def_map.derive_helpers_in_scope(InFile::new(token.file_id, id))?;\n+                    let item = Some(adt.into());\n+                    let mut res = None;\n+                    for (_, derive) in helpers.iter().filter(|(helper, _)| *helper == attr_name) {\n+                        res = res.or(process_expansion_for_token(\n+                            &mut stack,\n+                            derive.as_file(),\n+                            item.clone(),\n+                            token.as_ref(),\n+                        ));\n+                    }\n+                    res\n+                } else {\n+                    None\n                 }\n-\n-                // outside of a macro invocation so this is a \"final\" token\n-                None\n             })()\n             .is_none();\n "}, {"sha": "ba9a1cfb6b51c5cdb0a27a27c4a1901d42927a13", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "patch": "@@ -247,6 +247,7 @@ impl SourceToDefCtx<'_, '_> {\n         map[keys::ATTR_MACRO_CALL].get(&src.value).copied()\n     }\n \n+    /// (AttrId, derive attribute call id, derive call ids)\n     pub(super) fn attr_to_derive_macro_call(\n         &mut self,\n         item: InFile<&ast::Adt>,\n@@ -257,6 +258,7 @@ impl SourceToDefCtx<'_, '_> {\n             .get(&src.value)\n             .map(|&(attr_id, call_id, ref ids)| (attr_id, call_id, &**ids))\n     }\n+\n     pub(super) fn has_derives(&mut self, adt: InFile<&ast::Adt>) -> bool {\n         self.dyn_map(adt).as_ref().map_or(false, |map| !map[keys::DERIVE_MACRO_CALL].is_empty())\n     }"}, {"sha": "dc1626f439673b850b2e69653c83846b986fd7ec", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "patch": "@@ -316,14 +316,20 @@ pub fn source_edit_from_references(\n     // macros can cause multiple refs to occur for the same text range, so keep track of what we have edited so far\n     let mut edited_ranges = Vec::new();\n     for &FileReference { range, ref name, .. } in references {\n+        let name_range = name.syntax().text_range();\n+        if name_range.len() != range.len() {\n+            // This usage comes from a different token kind that was downmapped to a NameLike in a macro\n+            // Renaming this will most likely break things syntax-wise\n+            continue;\n+        }\n         let has_emitted_edit = match name {\n             // if the ranges differ then the node is inside a macro call, we can't really attempt\n             // to make special rewrites like shorthand syntax and such, so just rename the node in\n             // the macro input\n-            ast::NameLike::NameRef(name_ref) if name_ref.syntax().text_range() == range => {\n+            ast::NameLike::NameRef(name_ref) if name_range == range => {\n                 source_edit_from_name_ref(&mut edit, name_ref, new_name, def)\n             }\n-            ast::NameLike::Name(name) if name.syntax().text_range() == range => {\n+            ast::NameLike::Name(name) if name_range == range => {\n                 source_edit_from_name(&mut edit, name, new_name)\n             }\n             _ => false,"}, {"sha": "eb4fc364381204470de916a67f1a561a14e7ac88", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "patch": "@@ -54,7 +54,9 @@ impl IntoIterator for UsageSearchResult {\n \n #[derive(Debug, Clone)]\n pub struct FileReference {\n+    /// The range of the reference in the original file\n     pub range: TextRange,\n+    /// The node of the reference in the (macro-)file\n     pub name: ast::NameLike,\n     pub category: Option<ReferenceCategory>,\n }"}, {"sha": "59c97f2dcf966bff485bdd32b5b14cfeba614d60", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "patch": "@@ -115,7 +115,12 @@ pub(crate) fn hover(\n         });\n     }\n \n-    let descended = sema.descend_into_macros_with_same_text(original_token.clone());\n+    let in_attr = matches!(original_token.parent().and_then(ast::TokenTree::cast), Some(tt) if tt.syntax().ancestors().any(|it| ast::Meta::can_cast(it.kind())));\n+    let descended = if in_attr {\n+        [sema.descend_into_macros_with_kind_preference(original_token.clone())].into()\n+    } else {\n+        sema.descend_into_macros_with_same_text(original_token.clone())\n+    };\n \n     // FIXME: Definition should include known lints and the like instead of having this special case here\n     let hovered_lint = descended.iter().find_map(|token| {"}]}