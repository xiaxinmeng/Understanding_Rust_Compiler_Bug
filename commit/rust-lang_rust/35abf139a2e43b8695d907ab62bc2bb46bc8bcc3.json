{"sha": "35abf139a2e43b8695d907ab62bc2bb46bc8bcc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YWJmMTM5YTJlNDNiODY5NWQ5MDdhYjYyYmMyYmI0NmJjOGJjYzM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-31T04:13:27Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-06-12T02:14:23Z"}, "message": "Small refactoring + docs", "tree": {"sha": "2360a6e6ea86daed98ab8763302c4b894d9ccfae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2360a6e6ea86daed98ab8763302c4b894d9ccfae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3", "html_url": "https://github.com/rust-lang/rust/commit/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "html_url": "https://github.com/rust-lang/rust/commit/a2a999f0356d037d09b7cd1d3b5b3011d6b810db"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "5c6876461346e3ab727bb0737a185c6767e562d1", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=35abf139a2e43b8695d907ab62bc2bb46bc8bcc3", "patch": "@@ -15,7 +15,7 @@ use rustc_serialize::json::as_json;\n use external_data::*;\n use data::{VariableKind, Visibility};\n use dump::Dump;\n-use json_dumper::id_from_def_id;\n+use id_from_def_id;\n \n use rls_data::{Analysis, Import, ImportKind, Def, DefKind, CratePreludeData};\n "}, {"sha": "58df612c687c3afdd8eeaa10bc53ae18ce08d11c", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=35abf139a2e43b8695d907ab62bc2bb46bc8bcc3", "patch": "@@ -10,7 +10,6 @@\n \n use std::io::Write;\n \n-use rustc::hir::def_id::DefId;\n use rustc_serialize::json::as_json;\n \n use rls_data::{self, Id, Analysis, Import, ImportKind, Def, DefKind, Ref, RefKind, MacroRef,\n@@ -20,6 +19,7 @@ use rls_span::{Column, Row};\n use external_data::*;\n use data::VariableKind;\n use dump::Dump;\n+use id_from_def_id;\n \n pub struct JsonDumper<O: DumpOutput> {\n     result: Analysis,\n@@ -163,15 +163,6 @@ impl<'b, O: DumpOutput + 'b> Dump for JsonDumper<O> {\n // method, but not the supplied method). In both cases, we are currently\n // ignoring it.\n \n-// DefId::index is a newtype and so the JSON serialisation is ugly. Therefore\n-// we use our own Id which is the same, but without the newtype.\n-pub fn id_from_def_id(id: DefId) -> Id {\n-    Id {\n-        krate: id.krate.as_u32(),\n-        index: id.index.as_u32(),\n-    }\n-}\n-\n impl Into<Import> for ExternCrateData {\n     fn into(self) -> Import {\n         Import {"}, {"sha": "b6fafe3ee52b716d69bbd836bc18431480ce7610", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=35abf139a2e43b8695d907ab62bc2bb46bc8bcc3", "patch": "@@ -1026,6 +1026,20 @@ fn escape(s: String) -> String {\n \n // Helper function to determine if a span came from a\n // macro expansion or syntax extension.\n-pub fn generated_code(span: Span) -> bool {\n+fn generated_code(span: Span) -> bool {\n     span.ctxt != NO_EXPANSION || span == DUMMY_SP\n }\n+\n+// DefId::index is a newtype and so the JSON serialisation is ugly. Therefore\n+// we use our own Id which is the same, but without the newtype.\n+fn id_from_def_id(id: DefId) -> rls_data::Id {\n+    rls_data::Id {\n+        krate: id.krate.as_u32(),\n+        index: id.index.as_u32(),\n+    }\n+}\n+\n+fn id_from_node_id(id: NodeId, scx: &SaveContext) -> rls_data::Id {\n+    let def_id = scx.tcx.hir.local_def_id(id);\n+    id_from_def_id(def_id)\n+}"}, {"sha": "6b734eb52480012dfa127953d553916c31818dcf", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35abf139a2e43b8695d907ab62bc2bb46bc8bcc3/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=35abf139a2e43b8695d907ab62bc2bb46bc8bcc3", "patch": "@@ -8,16 +8,38 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME? None of these include visibility info.\n-// Large outstanding things - where clauses, defs/refs for generics\n-// paresable - each sig ends with `;` of ` {}`\n+// A signature is a string representation of an item's type signature, excluding\n+// any body. It also includes ids for any defs or refs in the signature. For\n+// example:\n+//\n+// ```\n+// fn foo(x: String) {\n+//     println!(\"{}\", x);   \n+// }\n+// ```\n+// The signature string is something like \"fn foo(x: String) {}\" and the signature\n+// will have defs for `foo` and `x` and a ref for `String`.\n+//\n+// All signature text should parse in the correct context (i.e., in a module or\n+// impl, etc.). Clients may want to trim trailing `{}` or `;`. The text of a\n+// signature is not guaranteed to be stable (it may improve or change as the\n+// syntax changes, or whitespace or punctuation may change). It is also likely\n+// not to be pretty - no attempt is made to prettify the text. It is recommended\n+// that clients run the text through Rustfmt.\n+//\n+// This module generates Signatures for items by walking the AST and looking up\n+// references.\n+//\n+// Signatures do not include visibility info. I'm not sure if this is a feature\n+// or an ommission (FIXME).\n+//\n+// FIXME where clauses need implementing, defs/refs in generics are mostly missing.\n \n-use SaveContext;\n+use {SaveContext, id_from_def_id, id_from_node_id};\n \n-use rls_data::{Signature, SigElement, Id};\n+use rls_data::{Signature, SigElement};\n \n use rustc::hir::def::Def;\n-use rustc::hir::def_id::DefId;\n use syntax::ast::{self, NodeId};\n use syntax::print::pprust;\n \n@@ -26,19 +48,6 @@ pub fn item_signature(item: &ast::Item, scx: &SaveContext) -> Option<Signature>\n     item.make(0, None, scx).ok()\n }\n \n-// TODO dup from json_dumper\n-fn id_from_def_id(id: DefId) -> Id {\n-    Id {\n-        krate: id.krate.as_u32(),\n-        index: id.index.as_u32(),\n-    }\n-}\n-\n-fn id_from_node_id(id: NodeId, scx: &SaveContext) -> Id {\n-    let def_id = scx.tcx.hir.local_def_id(id);\n-    id_from_def_id(def_id)\n-}\n-\n type Result = ::std::result::Result<Signature, &'static str>;\n \n trait Sig {"}]}