{"sha": "6d6314f878bf489e15293498ecb4af082c8d53d8", "node_id": "C_kwDOAAsO6NoAKDZkNjMxNGY4NzhiZjQ4OWUxNTI5MzQ5OGVjYjRhZjA4MmM4ZDUzZDg", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-29T08:29:14Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-02-12T08:24:42Z"}, "message": "Rebased and improved errors", "tree": {"sha": "467761999ce43c50864f82b19f5b862241cac5b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/467761999ce43c50864f82b19f5b862241cac5b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d6314f878bf489e15293498ecb4af082c8d53d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmIHbsoACgkQbQF6ltjm\nwvnHiA//X94uE8Sn2e8s61d08qvDWBU630NJpIUDSFGaTj/sLgtmm4xs4W9QMCAN\nZUBeR2ISgbylzpTlzMhcy0Ue5R6SH3fwbwZapLAK5ItsJiVUAwLrKdIIBkYJXAOH\nvuHkS4KUSiS9JmrbQ7nBYEJwkbjKrHTR4teL6famBIkwqjKSkZyrJO/FlR6rdoKZ\nnQnYMENrQD2w3CcsM+VLI+uPjcmY2683cgPqxfHo/wtAXSN6O37VVkFSEr4tU8I1\n5oFKTWWdoT47hKA4LdNFPTJymyxREQ3NgXjB2CEiZYG4koE85Q2laewif5b6v4fO\nSMBbethSjfkBXjLrOcwfp8BW0DHM2UMaYPwq5UuEsIWKqhn9yvhEsw20jcI2T40/\n9enfVP7/V1hWXLwPWI5nnITtZQwYMsxZxUSU2EPHSkMBr6jx7icM8DPGB3cSqA5Q\n7dudnAhOn7PmalMGq1h4sw7wTzJzko7ecf2lhRRgNZKFRAJEEZV1fRXhcphWb95n\nzvBTaUpXP16rPjT1/Q9Fk4FrseEcUuH483sPWfDvHhVOIpkHgxzRr7+eQuywe4m+\nbWt8DWm5g7Yy+zB71rXo38mb+5LWmvbAEtIK7iF/BJLkENjvGSE0qUB8FIc0gxpy\nNTZK91wQXC9/Jmp8Hlw9FZJfIGNVX9NTg/9IhM5z2tkz2Q3fi/M=\n=nQQy\n-----END PGP SIGNATURE-----", "payload": "tree 467761999ce43c50864f82b19f5b862241cac5b0\nparent b5235ea732dcb517338eaf2e35fda8ddcf515771\nauthor Deadbeef <ent3rm4n@gmail.com> 1640766554 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1644654282 +1100\n\nRebased and improved errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6314f878bf489e15293498ecb4af082c8d53d8", "html_url": "https://github.com/rust-lang/rust/commit/6d6314f878bf489e15293498ecb4af082c8d53d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d6314f878bf489e15293498ecb4af082c8d53d8/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5235ea732dcb517338eaf2e35fda8ddcf515771", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5235ea732dcb517338eaf2e35fda8ddcf515771", "html_url": "https://github.com/rust-lang/rust/commit/b5235ea732dcb517338eaf2e35fda8ddcf515771"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "ff1d37bfccb768eef9d4a2e41215063dacffd22c", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d6314f878bf489e15293498ecb4af082c8d53d8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6314f878bf489e15293498ecb4af082c8d53d8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=6d6314f878bf489e15293498ecb4af082c8d53d8", "patch": "@@ -196,7 +196,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         .map(|n| format!(\"`{}`\", n))\n                         .unwrap_or_else(|| \"value\".to_owned());\n                     match kind {\n-                        CallKind::FnCall(once_did) if Some(once_did) == self.infcx.tcx.lang_items().fn_once_trait() => {\n+                        CallKind::FnCall(once_did)\n+                            if Some(once_did) == self.infcx.tcx.lang_items().fn_once_trait() =>\n+                        {\n                             err.span_label(\n                                 fn_call_span,\n                                 &format!("}, {"sha": "237201c547822d93f444446d6c18cf57e967d90f", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d6314f878bf489e15293498ecb4af082c8d53d8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6314f878bf489e15293498ecb4af082c8d53d8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=6d6314f878bf489e15293498ecb4af082c8d53d8", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                         param_env,\n                         Binder::dummy(TraitPredicate {\n                             trait_ref,\n-                            constness: BoundConstness::ConstIfConst,\n+                            constness: BoundConstness::NotConst,\n                             polarity: ImplPolarity::Positive,\n                         }),\n                     );"}, {"sha": "fe35d94234139e6a40a2ad224ff22827df7d084b", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d6314f878bf489e15293498ecb4af082c8d53d8/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6314f878bf489e15293498ecb4af082c8d53d8/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=6d6314f878bf489e15293498ecb4af082c8d53d8", "patch": "@@ -71,9 +71,7 @@ pub fn call_kind<'tcx>(\n         AssocItemContainer::TraitContainer(trait_did) => Some(trait_did),\n     });\n \n-    let fn_call = (!from_hir_call)\n-        .then(|| parent)\n-        .flatten()\n+    let fn_call = parent\n         .and_then(|p| tcx.lang_items().group(LangItemGroup::Fn).iter().find(|did| **did == p));\n \n     let operator = (!from_hir_call)"}, {"sha": "b299e71c9c4c45f4d78fc95f6cba527b6fe07b75", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d6314f878bf489e15293498ecb4af082c8d53d8/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6314f878bf489e15293498ecb4af082c8d53d8/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=6d6314f878bf489e15293498ecb4af082c8d53d8", "patch": "@@ -24,7 +24,7 @@ pub enum LangItemGroup {\n     Fn,\n }\n \n-const NUM_GROUPS: usize = 1;\n+const NUM_GROUPS: usize = 2;\n \n macro_rules! expand_group {\n     () => {\n@@ -99,11 +99,12 @@ macro_rules! language_item_table {\n             /// Construct an empty collection of lang items and no missing ones.\n             pub fn new() -> Self {\n                 fn init_none(_: LangItem) -> Option<DefId> { None }\n+                const EMPTY: Vec<DefId> = Vec::new();\n \n                 Self {\n                     items: vec![$(init_none(LangItem::$variant)),*],\n                     missing: Vec::new(),\n-                    groups: [vec![]; NUM_GROUPS],\n+                    groups: [EMPTY; NUM_GROUPS],\n                 }\n             }\n "}, {"sha": "bebd0c6ac1202d656c67299d2dac1f19a105a02c", "filename": "src/test/ui/const-generics/issues/issue-90318.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs?ref=6d6314f878bf489e15293498ecb4af082c8d53d8", "patch": "@@ -13,15 +13,15 @@ fn consume<T: 'static>(_val: T)\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n     //~^ ERROR: overly complex generic constant\n-    //~| ERROR: calls in constants are limited to constant functions\n+    //~| ERROR: cannot call non-const operator in constants\n {\n }\n \n fn test<T: 'static>()\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n     //~^ ERROR: overly complex generic constant\n-    //~| ERROR: calls in constants are limited to constant functions\n+    //~| ERROR: cannot call non-const operator in constants\n {\n }\n "}, {"sha": "c8690ecd0da7e84434306962292eb922f7abe4b8", "filename": "src/test/ui/const-generics/issues/issue-90318.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr?ref=6d6314f878bf489e15293498ecb4af082c8d53d8", "patch": "@@ -9,11 +9,19 @@ LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n \n-error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+error[E0015]: cannot call non-const operator in constants\n   --> $DIR/issue-90318.rs:14:10\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/core/src/any.rs:LL:COL\n+   |\n+LL | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+   |                       ^^^^^^^^^\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: overly complex generic constant\n   --> $DIR/issue-90318.rs:22:8\n@@ -26,11 +34,19 @@ LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n \n-error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+error[E0015]: cannot call non-const operator in constants\n   --> $DIR/issue-90318.rs:22:10\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/core/src/any.rs:LL:COL\n+   |\n+LL | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+   |                       ^^^^^^^^^\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0d28e06e53258cc592a104c01be868b0208f1b92", "filename": "src/test/ui/consts/issue-90870.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.fixed?ref=6d6314f878bf489e15293498ecb4af082c8d53d8", "patch": "@@ -6,20 +6,20 @@\n \n const fn f(a: &u8, b: &u8) -> bool {\n     *a == *b\n-    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n }\n \n const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n     ****a == ****b\n-    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n }\n \n const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n     while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n         if *l == *r {\n-        //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+        //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n         //~| HELP: consider dereferencing here\n             a = at;\n             b = bt;"}, {"sha": "c6bfffd2c5c1567d17da4213ffbe59143140882f", "filename": "src/test/ui/consts/issue-90870.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.rs?ref=6d6314f878bf489e15293498ecb4af082c8d53d8", "patch": "@@ -6,20 +6,20 @@\n \n const fn f(a: &u8, b: &u8) -> bool {\n     a == b\n-    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n }\n \n const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n     a == b\n-    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n }\n \n const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n     while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n         if l == r {\n-        //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+        //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n         //~| HELP: consider dereferencing here\n             a = at;\n             b = bt;"}, {"sha": "478445cfb39c5f9c356ee5297636e005210ff5aa", "filename": "src/test/ui/consts/issue-90870.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d6314f878bf489e15293498ecb4af082c8d53d8/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.stderr?ref=6d6314f878bf489e15293498ecb4af082c8d53d8", "patch": "@@ -1,31 +1,34 @@\n-error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+error[E0015]: cannot call non-const operator in constant functions\n   --> $DIR/issue-90870.rs:8:5\n    |\n LL |     a == b\n    |     ^^^^^^\n    |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n help: consider dereferencing here\n    |\n LL |     *a == *b\n    |     +     +\n \n-error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+error[E0015]: cannot call non-const operator in constant functions\n   --> $DIR/issue-90870.rs:14:5\n    |\n LL |     a == b\n    |     ^^^^^^\n    |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n help: consider dereferencing here\n    |\n LL |     ****a == ****b\n    |     ++++     ++++\n \n-error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+error[E0015]: cannot call non-const operator in constant functions\n   --> $DIR/issue-90870.rs:21:12\n    |\n LL |         if l == r {\n    |            ^^^^^^\n    |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n help: consider dereferencing here\n    |\n LL |         if *l == *r {"}]}