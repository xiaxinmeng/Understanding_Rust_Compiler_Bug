{"sha": "38c6b13c3a1d390edd248d04ac40eb491b65cf92", "node_id": "C_kwDOAAsO6NoAKDM4YzZiMTNjM2ExZDM5MGVkZDI0OGQwNGFjNDBlYjQ5MWI2NWNmOTI", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T21:52:38Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T22:05:42Z"}, "message": "Remove a Clean impl for a tuple (7)", "tree": {"sha": "fe4ad8ed09fdd6ff092f6d0d13c9e1e68a44f414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe4ad8ed09fdd6ff092f6d0d13c9e1e68a44f414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c6b13c3a1d390edd248d04ac40eb491b65cf92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c6b13c3a1d390edd248d04ac40eb491b65cf92", "html_url": "https://github.com/rust-lang/rust/commit/38c6b13c3a1d390edd248d04ac40eb491b65cf92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c6b13c3a1d390edd248d04ac40eb491b65cf92/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e", "html_url": "https://github.com/rust-lang/rust/commit/4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "39544fa843de8665677c318c2a9e4ec035c9b44c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38c6b13c3a1d390edd248d04ac40eb491b65cf92/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c6b13c3a1d390edd248d04ac40eb491b65cf92/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=38c6b13c3a1d390edd248d04ac40eb491b65cf92", "patch": "@@ -15,8 +15,8 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n-    self, clean_ty_generics, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId,\n-    NestedAttributesExt, Type, Visibility,\n+    self, clean_fn_decl_from_did_and_sig, clean_ty_generics, utils, Attributes, AttributesExt,\n+    Clean, ImplKind, ItemId, NestedAttributesExt, Type, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -230,7 +230,7 @@ fn build_external_function(cx: &mut DocContext<'_>, did: DefId) -> clean::Functi\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {\n         // NOTE: generics need to be cleaned before the decl!\n         let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n-        let decl = (did, sig).clean(cx);\n+        let decl = clean_fn_decl_from_did_and_sig(cx, did, sig);\n         (generics, decl)\n     });\n     clean::Function {"}, {"sha": "1103f51513d87ea0f701dcebd397214aec5c5f9e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/38c6b13c3a1d390edd248d04ac40eb491b65cf92/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c6b13c3a1d390edd248d04ac40eb491b65cf92/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=38c6b13c3a1d390edd248d04ac40eb491b65cf92", "patch": "@@ -838,27 +838,28 @@ fn clean_fn_decl_with_args(\n     FnDecl { inputs: args, output: decl.output.clean(cx), c_variadic: decl.c_variadic }\n }\n \n-impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> FnDecl {\n-        let (did, sig) = *self;\n-        let mut names = if did.is_local() { &[] } else { cx.tcx.fn_arg_names(did) }.iter();\n-\n-        FnDecl {\n-            output: Return(sig.skip_binder().output().clean(cx)),\n-            c_variadic: sig.skip_binder().c_variadic,\n-            inputs: Arguments {\n-                values: sig\n-                    .skip_binder()\n-                    .inputs()\n-                    .iter()\n-                    .map(|t| Argument {\n-                        type_: t.clean(cx),\n-                        name: names.next().map_or(kw::Empty, |i| i.name),\n-                        is_const: false,\n-                    })\n-                    .collect(),\n-            },\n-        }\n+fn clean_fn_decl_from_did_and_sig(\n+    cx: &mut DocContext<'_>,\n+    did: DefId,\n+    sig: ty::PolyFnSig<'_>,\n+) -> FnDecl {\n+    let mut names = if did.is_local() { &[] } else { cx.tcx.fn_arg_names(did) }.iter();\n+\n+    FnDecl {\n+        output: Return(sig.skip_binder().output().clean(cx)),\n+        c_variadic: sig.skip_binder().c_variadic,\n+        inputs: Arguments {\n+            values: sig\n+                .skip_binder()\n+                .inputs()\n+                .iter()\n+                .map(|t| Argument {\n+                    type_: t.clean(cx),\n+                    name: names.next().map_or(kw::Empty, |i| i.name),\n+                    is_const: false,\n+                })\n+                .collect(),\n+        },\n     }\n }\n \n@@ -1013,7 +1014,7 @@ impl Clean<Item> for ty::AssocItem {\n                     tcx.explicit_predicates_of(self.def_id),\n                 );\n                 let sig = tcx.fn_sig(self.def_id);\n-                let mut decl = (self.def_id, sig).clean(cx);\n+                let mut decl = clean_fn_decl_from_did_and_sig(cx, self.def_id, sig);\n \n                 if self.fn_has_self_parameter {\n                     let self_ty = match self.container {\n@@ -1407,10 +1408,11 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let ty = cx.tcx.lift(*self).expect(\"FnPtr lift failed\");\n                 let sig = ty.fn_sig(cx.tcx);\n                 let def_id = DefId::local(CRATE_DEF_INDEX);\n+                let decl = clean_fn_decl_from_did_and_sig(cx, def_id, sig);\n                 BareFunction(box BareFunctionDecl {\n                     unsafety: sig.unsafety(),\n                     generic_params: Vec::new(),\n-                    decl: (def_id, sig).clean(cx),\n+                    decl,\n                     abi: sig.abi(),\n                 })\n             }"}]}