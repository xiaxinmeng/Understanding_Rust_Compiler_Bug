{"sha": "fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOTJmOTI1NzJjMGI4N2UxN2ViNGMzYjI4OWEwZDQ3YzBhN2JmOGY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T02:35:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:25Z"}, "message": "librustc: De-`@mut` `CrateContext::finished_tydescs`.", "tree": {"sha": "6d9057a3e02e3619c90ba6654ba8db617c2269ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9057a3e02e3619c90ba6654ba8db617c2269ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f", "html_url": "https://github.com/rust-lang/rust/commit/fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "462a791c341dbb0b0fd5e716082cd6d295ea44ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/462a791c341dbb0b0fd5e716082cd6d295ea44ab", "html_url": "https://github.com/rust-lang/rust/commit/462a791c341dbb0b0fd5e716082cd6d295ea44ab"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "778a50b56841acfff117a1c8b12db8b38d489510", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f", "patch": "@@ -27,7 +27,7 @@ use middle::trans::type_::Type;\n \n use util::sha2::Sha256;\n \n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::c_str::ToCStr;\n use std::hashmap::{HashMap, HashSet};\n use std::local_data;\n@@ -55,7 +55,7 @@ pub struct CrateContext {\n      tydescs: RefCell<HashMap<ty::t, @mut tydesc_info>>,\n      // Set when running emit_tydescs to enforce that no more tydescs are\n      // created.\n-     finished_tydescs: bool,\n+     finished_tydescs: Cell<bool>,\n      // Track mapping of external ids to local items imported for inlining\n      external: RefCell<HashMap<ast::DefId, Option<ast::NodeId>>>,\n      // Backwards version of the `external` map (inlined items to where they\n@@ -189,7 +189,7 @@ impl CrateContext {\n                   item_symbols: RefCell::new(HashMap::new()),\n                   link_meta: link_meta,\n                   tydescs: RefCell::new(HashMap::new()),\n-                  finished_tydescs: false,\n+                  finished_tydescs: Cell::new(false),\n                   external: RefCell::new(HashMap::new()),\n                   external_srcs: RefCell::new(HashMap::new()),\n                   non_inlineable_statics: RefCell::new(HashSet::new()),"}, {"sha": "ad5e4e8942c9548a3aecde32d3eefe8ab47267cd", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=fc92f92572c0b87e17eb4c3b289a0d47c0a7bf8f", "patch": "@@ -589,7 +589,7 @@ pub fn incr_refcnt_of_boxed(cx: @Block, box_ptr: ValueRef) {\n pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n     // If emit_tydescs already ran, then we shouldn't be creating any new\n     // tydescs.\n-    assert!(!ccx.finished_tydescs);\n+    assert!(!ccx.finished_tydescs.get());\n \n     let llty = type_of(ccx, t);\n \n@@ -694,7 +694,7 @@ pub fn make_generic_glue(ccx: @mut CrateContext,\n pub fn emit_tydescs(ccx: &mut CrateContext) {\n     let _icx = push_ctxt(\"emit_tydescs\");\n     // As of this point, allow no more tydescs to be created.\n-    ccx.finished_tydescs = true;\n+    ccx.finished_tydescs.set(true);\n     let glue_fn_ty = Type::generic_glue_fn(ccx).ptr_to();\n     let mut tyds = ccx.tydescs.borrow_mut();\n     for (_, &val) in tyds.get().iter() {"}]}