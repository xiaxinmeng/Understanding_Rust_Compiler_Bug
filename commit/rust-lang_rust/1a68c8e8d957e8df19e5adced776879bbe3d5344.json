{"sha": "1a68c8e8d957e8df19e5adced776879bbe3d5344", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNjhjOGU4ZDk1N2U4ZGYxOWU1YWRjZWQ3NzY4NzliYmUzZDUzNDQ=", "commit": {"author": {"name": "XIAO Tian", "email": "tian@example.com", "date": "2020-05-30T03:26:46Z"}, "committer": {"name": "XIAO Tian", "email": "tian@example.com", "date": "2020-05-31T04:13:30Z"}, "message": "Fix associate type diagnostics", "tree": {"sha": "8ada5ac397efb2a8d759a3d7935657d81f29fb61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ada5ac397efb2a8d759a3d7935657d81f29fb61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a68c8e8d957e8df19e5adced776879bbe3d5344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a68c8e8d957e8df19e5adced776879bbe3d5344", "html_url": "https://github.com/rust-lang/rust/commit/1a68c8e8d957e8df19e5adced776879bbe3d5344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a68c8e8d957e8df19e5adced776879bbe3d5344/comments", "author": {"login": "xiaotianrandom", "id": 1596825, "node_id": "MDQ6VXNlcjE1OTY4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1596825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaotianrandom", "html_url": "https://github.com/xiaotianrandom", "followers_url": "https://api.github.com/users/xiaotianrandom/followers", "following_url": "https://api.github.com/users/xiaotianrandom/following{/other_user}", "gists_url": "https://api.github.com/users/xiaotianrandom/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaotianrandom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaotianrandom/subscriptions", "organizations_url": "https://api.github.com/users/xiaotianrandom/orgs", "repos_url": "https://api.github.com/users/xiaotianrandom/repos", "events_url": "https://api.github.com/users/xiaotianrandom/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaotianrandom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xiaotianrandom", "id": 1596825, "node_id": "MDQ6VXNlcjE1OTY4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1596825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaotianrandom", "html_url": "https://github.com/xiaotianrandom", "followers_url": "https://api.github.com/users/xiaotianrandom/followers", "following_url": "https://api.github.com/users/xiaotianrandom/following{/other_user}", "gists_url": "https://api.github.com/users/xiaotianrandom/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaotianrandom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaotianrandom/subscriptions", "organizations_url": "https://api.github.com/users/xiaotianrandom/orgs", "repos_url": "https://api.github.com/users/xiaotianrandom/repos", "events_url": "https://api.github.com/users/xiaotianrandom/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaotianrandom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf9eb0f7a1f2da9df2983aa8cf95a420130cada", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf9eb0f7a1f2da9df2983aa8cf95a420130cada", "html_url": "https://github.com/rust-lang/rust/commit/3bf9eb0f7a1f2da9df2983aa8cf95a420130cada"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "39c7528a6324032977d919fbd7f3ecbf1109802b", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1a68c8e8d957e8df19e5adced776879bbe3d5344/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a68c8e8d957e8df19e5adced776879bbe3d5344/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=1a68c8e8d957e8df19e5adced776879bbe3d5344", "patch": "@@ -172,25 +172,18 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n         };\n     match pred.kind() {\n         ty::PredicateKind::Projection(proj) => {\n-            // The obligation comes not from the current `impl` nor the `trait` being\n-            // implemented, but rather from a \"second order\" obligation, like in\n-            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs`.\n-            let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n-            if let Some(impl_item_span) =\n-                items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n-            {\n-                cause.span = impl_item_span;\n-            } else {\n-                let kind = &proj.ty().skip_binder().kind;\n-                if let ty::Projection(projection_ty) = kind {\n-                    // This happens when an associated type has a projection coming from another\n-                    // associated type. See `traits-assoc-type-in-supertrait-bad.rs`.\n-                    let trait_assoc_item = tcx.associated_item(projection_ty.item_def_id);\n-                    if let Some(impl_item_span) =\n-                        items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n-                    {\n-                        cause.span = impl_item_span;\n-                    }\n+            // The obligation comes not from the current `impl` nor the `trait` being implemented,\n+            // but rather from a \"second order\" obligation, where an associated type has a\n+            // projection coming from another associated type. See\n+            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs` and\n+            // `traits-assoc-type-in-supertrait-bad.rs`.\n+            let kind = &proj.ty().skip_binder().kind;\n+            if let ty::Projection(projection_ty) = kind {\n+                let trait_assoc_item = tcx.associated_item(projection_ty.item_def_id);\n+                if let Some(impl_item_span) =\n+                    items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n+                {\n+                    cause.span = impl_item_span;\n                 }\n             }\n         }"}]}