{"sha": "0f4c4c5e1842f63ab869d75ea8c891078a64ca55", "node_id": "C_kwDOAAsO6NoAKDBmNGM0YzVlMTg0MmY2M2FiODY5ZDc1ZWE4Yzg5MTA3OGE2NGNhNTU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-27T12:35:31Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:19Z"}, "message": "lint: port array-into-iter diagnostics\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "ba4b244ff382dbae0e76715f0f0b9ba84ce33e5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba4b244ff382dbae0e76715f0f0b9ba84ce33e5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f4c4c5e1842f63ab869d75ea8c891078a64ca55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4c4c5e1842f63ab869d75ea8c891078a64ca55", "html_url": "https://github.com/rust-lang/rust/commit/0f4c4c5e1842f63ab869d75ea8c891078a64ca55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f4c4c5e1842f63ab869d75ea8c891078a64ca55/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d2eba6311dfaf615866442fb9e3730a8d888748", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2eba6311dfaf615866442fb9e3730a8d888748", "html_url": "https://github.com/rust-lang/rust/commit/7d2eba6311dfaf615866442fb9e3730a8d888748"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "06c8f217c13af16687361b2533eb577c32468f87", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f4c4c5e1842f63ab869d75ea8c891078a64ca55/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0f4c4c5e1842f63ab869d75ea8c891078a64ca55/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=0f4c4c5e1842f63ab869d75ea8c891078a64ca55", "patch": "@@ -0,0 +1,6 @@\n+lint-array-into-iter =\n+    this method call resolves to `<&{$target} as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <{$target} as IntoIterator>::into_iter in Rust 2021\n+    .use-iter-suggestion = use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+    .remove-into-iter-suggestion = or remove `.into_iter()` to iterate by value\n+    .use-explicit-into-iter-suggestion =\n+        or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value"}, {"sha": "563d0534d8f388c460daccf53783a9a631d4ad5c", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f4c4c5e1842f63ab869d75ea8c891078a64ca55/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4c4c5e1842f63ab869d75ea8c891078a64ca55/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=0f4c4c5e1842f63ab869d75ea8c891078a64ca55", "patch": "@@ -31,11 +31,12 @@ pub use unic_langid::{langid, LanguageIdentifier};\n \n // Generates `DEFAULT_LOCALE_RESOURCES` static and `fluent_generated` module.\n fluent_messages! {\n+    borrowck => \"../locales/en-US/borrowck.ftl\",\n+    builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n+    lint => \"../locales/en-US/lint.ftl\",\n     parser => \"../locales/en-US/parser.ftl\",\n     privacy => \"../locales/en-US/privacy.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n-    builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n-    borrowck => \"../locales/en-US/borrowck.ftl\",\n }\n \n pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};"}, {"sha": "121fefdc6207a830041ea7b2d20c5f99a19b6986", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0f4c4c5e1842f63ab869d75ea8c891078a64ca55/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4c4c5e1842f63ab869d75ea8c891078a64ca55/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=0f4c4c5e1842f63ab869d75ea8c891078a64ca55", "patch": "@@ -1,5 +1,5 @@\n use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_errors::Applicability;\n+use rustc_errors::{fluent, Applicability};\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n@@ -120,31 +120,30 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 _ => bug!(\"array type coerced to something other than array or slice\"),\n             };\n             cx.struct_span_lint(ARRAY_INTO_ITER, call.ident.span, |lint| {\n-                let mut diag = lint.build(&format!(\n-                    \"this method call resolves to `<&{} as IntoIterator>::into_iter` \\\n-                    (due to backwards compatibility), \\\n-                    but will resolve to <{} as IntoIterator>::into_iter in Rust 2021\",\n-                    target, target,\n-                ));\n+                let mut diag = lint.build(fluent::lint::array_into_iter);\n+                diag.set_arg(\"target\", target);\n                 diag.span_suggestion(\n                     call.ident.span,\n-                    \"use `.iter()` instead of `.into_iter()` to avoid ambiguity\",\n+                    fluent::lint::use_iter_suggestion,\n                     \"iter\",\n                     Applicability::MachineApplicable,\n                 );\n                 if self.for_expr_span == expr.span {\n                     diag.span_suggestion(\n                         receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n-                        \"or remove `.into_iter()` to iterate by value\",\n+                        fluent::lint::remove_into_iter_suggestion,\n                         \"\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else if receiver_ty.is_array() {\n                     diag.multipart_suggestion(\n-                        \"or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\",\n+                        fluent::lint::use_explicit_into_iter_suggestion,\n                         vec![\n                             (expr.span.shrink_to_lo(), \"IntoIterator::into_iter(\".into()),\n-                            (receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()), \")\".into()),\n+                            (\n+                                receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n+                                \")\".into(),\n+                            ),\n                         ],\n                         Applicability::MaybeIncorrect,\n                     );"}]}