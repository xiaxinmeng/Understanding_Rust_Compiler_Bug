{"sha": "9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1", "node_id": "C_kwDOAAsO6NoAKDlkYTFkYTk0ZWZkNDVjZjI4ZTllNzJjODFjYWNiZGJjYjFhZWFiZDE", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2023-03-20T11:21:19Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2023-03-20T11:21:19Z"}, "message": "Allow optional RET type annotation", "tree": {"sha": "3ee8f3fd0563004f84b26a54541bb0f3b4c65fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee8f3fd0563004f84b26a54541bb0f3b4c65fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmQYQa8ACgkQGBtJ+fOP\nM3TmWgv/a7OqIfzbUdVdgg3Z6rUReESIKQDxdg4qj4EZxsZoP+LwfKXQJO8Kf85Y\nW9uUWWjJHFFDjW5imANVKhuHnD/OFWioi8Wl99GXFXhMW7yF2Azb9LCZre88aADG\nqsj/zliSoKqhqJLu9FN1q7jIXUzxglrnaDNAyw59xGohQkUKWwJ6PF7fo+vK5ojk\nkkQKqoFgfH2O69XHJpdiJVIOGUMrghHjN8JL11YeDdxfMDRkVbOOlIyjoqMNpttA\nrylaD90U1qRgz/8U0k5blUEUKtpjRuqkXIIuMj2S/G7jAMMxuk+mWwN5Q2hcPXOy\nWkyp7HL+d2kP5UGLxYcROYKEn8Hn7dz5l9oHYeYWYc1QpKEbKGwruVsstCV1LWsr\n2ylTmvFEaoI5fK7lDA8Xy2xbDmMjmcIhlY8thabMXBU4/rKOXv1TAoV3EEYKRBAy\nF9cZay2vrTf0w+teaMM5t8tZ498X0NerHDTFQtt5px1w5NaBs8PmXP0DE2xa8cYa\nOan+AEb6\n=0jFf\n-----END PGP SIGNATURE-----", "payload": "tree 3ee8f3fd0563004f84b26a54541bb0f3b4c65fcb\nparent ab9bb3ea368b2412531a3e8c07ba73d1dd690134\nauthor Andy Wang <cbeuw.andy@gmail.com> 1679311279 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1679311279 +0100\n\nAllow optional RET type annotation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1", "html_url": "https://github.com/rust-lang/rust/commit/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "html_url": "https://github.com/rust-lang/rust/commit/ab9bb3ea368b2412531a3e8c07ba73d1dd690134"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "f391474b8436b757955285cf41a857197f90cd91", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1", "patch": "@@ -342,6 +342,7 @@ define!(\n #[rustc_macro_transparency = \"transparent\"]\n pub macro mir {\n     (\n+        $(type RET = $ret_ty:ty ;)?\n         $(let $local_decl:ident $(: $local_decl_ty:ty)? ;)*\n \n         {\n@@ -362,7 +363,7 @@ pub macro mir {\n         {\n             // Now all locals\n             #[allow(non_snake_case)]\n-            let RET;\n+            let RET $(: $ret_ty)?;\n             $(\n                 let $local_decl $(: $local_decl_ty)? ;\n             )*"}, {"sha": "701d6b1ab71312feac4e39be94f66c80d03d4cb3", "filename": "tests/mir-opt/building/custom/composite_return.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.rs?ref=9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1", "patch": "@@ -0,0 +1,21 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+// EMIT_MIR composite_return.tuple.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+fn tuple() -> (i32, bool) {\n+    mir!(\n+        type RET = (i32, bool);\n+        {\n+            RET.0 = 1;\n+            RET.1 = true;\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(tuple(), (1, true));\n+}"}, {"sha": "d159c1a655eb574e712cc7dc61f98a517d52de9f", "filename": "tests/mir-opt/building/custom/composite_return.tuple.built.after.mir", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir?ref=9da1da94efd45cf28e9e72c81cacbdbcb1aeabd1", "patch": "@@ -0,0 +1,11 @@\n+// MIR for `tuple` after built\n+\n+fn tuple() -> (i32, bool) {\n+    let mut _0: (i32, bool);             // return place in scope 0 at $DIR/composite_return.rs:+0:15: +0:26\n+\n+    bb0: {\n+        (_0.0: i32) = const 1_i32;       // scope 0 at $DIR/composite_return.rs:+4:13: +4:22\n+        (_0.1: bool) = const true;       // scope 0 at $DIR/composite_return.rs:+5:13: +5:25\n+        return;                          // scope 0 at $DIR/composite_return.rs:+6:13: +6:21\n+    }\n+}"}]}