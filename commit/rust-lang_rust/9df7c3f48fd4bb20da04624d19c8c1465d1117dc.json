{"sha": "9df7c3f48fd4bb20da04624d19c8c1465d1117dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZjdjM2Y0OGZkNGJiMjBkYTA0NjI0ZDE5YzhjMTQ2NWQxMTE3ZGM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-25T10:28:43Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: let ty::print::pretty's p! macro call arbitrary methods.", "tree": {"sha": "c4d0a37d99c3b8db752f96a4c942f095cf74a839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d0a37d99c3b8db752f96a4c942f095cf74a839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9df7c3f48fd4bb20da04624d19c8c1465d1117dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9df7c3f48fd4bb20da04624d19c8c1465d1117dc", "html_url": "https://github.com/rust-lang/rust/commit/9df7c3f48fd4bb20da04624d19c8c1465d1117dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9df7c3f48fd4bb20da04624d19c8c1465d1117dc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b4f2daa0e1a9c4aea4b729c0bcd46b5991f8a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b4f2daa0e1a9c4aea4b729c0bcd46b5991f8a3", "html_url": "https://github.com/rust-lang/rust/commit/52b4f2daa0e1a9c4aea4b729c0bcd46b5991f8a3"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "bc98aee233a3475896488c1b402ebe8e38c69f6d", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9df7c3f48fd4bb20da04624d19c8c1465d1117dc/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df7c3f48fd4bb20da04624d19c8c1465d1117dc/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=9df7c3f48fd4bb20da04624d19c8c1465d1117dc", "patch": "@@ -19,20 +19,19 @@ use std::ops::{Deref, DerefMut};\n // `pretty` is a separate module only for organization.\n use super::*;\n \n-macro_rules! print_inner {\n-    (write ($($data:expr),+)) => {\n+macro_rules! p {\n+    (@write($($data:expr),+)) => {\n         write!(scoped_cx!(), $($data),+)?\n     };\n-    ($kind:ident ($data:expr)) => {\n-        scoped_cx!() = $data.$kind(scoped_cx!())?\n+    (@print($x:expr)) => {\n+        scoped_cx!() = $x.print(scoped_cx!())?\n     };\n-}\n-macro_rules! p {\n-    ($($kind:ident $data:tt),+) => {\n-        {\n-            $(print_inner!($kind $data));+\n-        }\n+    (@$method:ident($($arg:expr),*)) => {\n+        scoped_cx!() = scoped_cx!().$method($($arg),*)?\n     };\n+    ($($kind:ident $data:tt),+) => {{\n+        $(p!(@$kind $data);)+\n+    }};\n }\n macro_rules! define_scoped_cx {\n     ($cx:ident) => {\n@@ -470,9 +469,8 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             }\n             ty::FnDef(def_id, substs) => {\n                 let sig = self.tcx().fn_sig(def_id).subst(self.tcx(), substs);\n-                p!(print(sig), write(\" {{\"));\n-                self = self.print_value_path(def_id, Some(substs))?;\n-                p!(write(\"}}\"))\n+                p!(print(sig),\n+                   write(\" {{\"), print_value_path(def_id, Some(substs)), write(\"}}\"));\n             }\n             ty::FnPtr(ref bare_fn) => {\n                 p!(print(bare_fn))\n@@ -494,7 +492,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                 }\n             }\n             ty::Adt(def, substs) => {\n-                self = self.print_def_path(def.did, Some(substs))?;\n+                p!(print_def_path(def.did, Some(substs)));\n             }\n             ty::Dynamic(data, r) => {\n                 let print_r = self.region_should_not_be_omitted(r);\n@@ -507,7 +505,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                 }\n             }\n             ty::Foreign(def_id) => {\n-                self = self.print_def_path(def_id, None)?;\n+                p!(print_def_path(def_id, None));\n             }\n             ty::Projection(ref data) => p!(print(data)),\n             ty::UnnormalizedProjection(ref data) => {\n@@ -608,7 +606,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                 p!(write(\" \"), print(witness), write(\"]\"))\n             },\n             ty::GeneratorWitness(types) => {\n-                self = self.in_binder(&types)?;\n+                p!(in_binder(&types));\n             }\n             ty::Closure(did, substs) => {\n                 let upvar_tys = substs.upvar_tys(did, self.tcx());\n@@ -693,7 +691,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n         let mut first = true;\n \n         if let Some(principal) = predicates.principal() {\n-            self = self.print_def_path(principal.def_id, None)?;\n+            p!(print_def_path(principal.def_id, None));\n \n             let mut resugared = false;\n \n@@ -703,7 +701,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                 if let ty::Tuple(ref args) = principal.substs.type_at(0).sty {\n                     let mut projections = predicates.projection_bounds();\n                     if let (Some(proj), None) = (projections.next(), projections.next()) {\n-                        self = self.pretty_fn_sig(args, false, proj.ty)?;\n+                        p!(pretty_fn_sig(args, false, proj.ty));\n                         resugared = true;\n                     }\n                 }\n@@ -742,13 +740,13 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                     let args = arg0.into_iter().chain(args);\n                     let projections = projection0.into_iter().chain(projections);\n \n-                    self = self.generic_delimiters(|mut cx| {\n+                    p!(generic_delimiters(|mut cx| {\n                         cx = cx.comma_sep(args)?;\n                         if arg0.is_some() && projection0.is_some() {\n                             write!(cx, \", \")?;\n                         }\n                         cx.comma_sep(projections)\n-                    })?;\n+                    }));\n                 }\n             }\n             first = false;\n@@ -776,7 +774,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             }\n             first = false;\n \n-            self = self.print_def_path(def_id, None)?;\n+            p!(print_def_path(def_id, None));\n         }\n \n         Ok(self)\n@@ -1478,7 +1476,7 @@ define_print_and_forward_display! {\n             ty::ExistentialPredicate::Trait(x) => p!(print(x)),\n             ty::ExistentialPredicate::Projection(x) => p!(print(x)),\n             ty::ExistentialPredicate::AutoTrait(def_id) => {\n-                cx = cx.print_def_path(def_id, None)?;\n+                p!(print_def_path(def_id, None));\n             }\n         }\n     }\n@@ -1492,8 +1490,7 @@ define_print_and_forward_display! {\n             p!(write(\"extern {} \", self.abi));\n         }\n \n-        p!(write(\"fn\"));\n-        cx = cx.pretty_fn_sig(self.inputs(), self.c_variadic, self.output())?;\n+        p!(write(\"fn\"), pretty_fn_sig(self.inputs(), self.c_variadic, self.output()));\n     }\n \n     ty::InferTy {\n@@ -1512,7 +1509,7 @@ define_print_and_forward_display! {\n     }\n \n     ty::TraitRef<'tcx> {\n-        cx = cx.print_def_path(self.def_id, Some(self.substs))?;\n+        p!(print_def_path(self.def_id, Some(self.substs)));\n     }\n \n     ConstValue<'tcx> {\n@@ -1556,7 +1553,7 @@ define_print_and_forward_display! {\n     }\n \n     ty::ProjectionTy<'tcx> {\n-        cx = cx.print_def_path(self.item_def_id, Some(self.substs))?;\n+        p!(print_def_path(self.item_def_id, Some(self.substs)));\n     }\n \n     ty::ClosureKind {\n@@ -1576,19 +1573,19 @@ define_print_and_forward_display! {\n             ty::Predicate::Projection(ref predicate) => p!(print(predicate)),\n             ty::Predicate::WellFormed(ty) => p!(print(ty), write(\" well-formed\")),\n             ty::Predicate::ObjectSafe(trait_def_id) => {\n-                p!(write(\"the trait `\"));\n-                cx = cx.print_def_path(trait_def_id, None)?;\n-                p!(write(\"` is object-safe\"))\n+                p!(write(\"the trait `\"),\n+                   print_def_path(trait_def_id, None),\n+                   write(\"` is object-safe\"))\n             }\n             ty::Predicate::ClosureKind(closure_def_id, _closure_substs, kind) => {\n-                p!(write(\"the closure `\"));\n-                cx = cx.print_value_path(closure_def_id, None)?;\n-                p!(write(\"` implements the trait `{}`\", kind))\n+                p!(write(\"the closure `\"),\n+                   print_value_path(closure_def_id, None),\n+                   write(\"` implements the trait `{}`\", kind))\n             }\n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n-                p!(write(\"the constant `\"));\n-                cx = cx.print_value_path(def_id, Some(substs))?;\n-                p!(write(\"` can be evaluated\"))\n+                p!(write(\"the constant `\"),\n+                   print_value_path(def_id, Some(substs)),\n+                   write(\"` can be evaluated\"))\n             }\n         }\n     }"}]}